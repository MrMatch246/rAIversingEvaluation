{
    "functions": {
        "FUN_00104000": {
            "additional_data": {
                "": {
                    "": 2
                },
                "DAT_": {
                    "unchanged": 1
                },
                "FUN_00104000": {
                    "do_gmon_start": 1,
                    "initialize": 7,
                    "initialize_execution": 1,
                    "initialize_g_mon": 1,
                    "initialize_monitor": 2,
                    "initialize_monitoring": 5,
                    "initialize_profiler": 3,
                    "initialize_program": 11
                },
                "PTR_": {
                    "unchanged": 1
                },
                "__gmon_start__": {
                    "enable_monitor": 1,
                    "initialize_gmon_start": 1,
                    "initialize_monitoring": 1,
                    "initialize_performance_monitoring": 1,
                    "initialize_profiler": 1,
                    "perform_monitoring": 1,
                    "start_execution_monitoring": 1,
                    "start_monitor": 1,
                    "start_monitoring": 10,
                    "start_performance_analysis": 1,
                    "start_profiler": 1,
                    "start_profiling": 7
                }
            },
            "called": [
                "FUN_001282a8"
            ],
            "calling": [],
            "code": "\nvoid initialize_program_00104000(void)\n\n{\n  start_monitoring();\n  return;\n}\n\n",
            "current_name": "initialize_program_00104000",
            "entrypoint": "0x00104000",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104000": "initialize_program_00104000",
                "__gmon_start__": "start_monitoring"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104020": {
            "additional_data": {
                "DAT": {
                    "unchanged": 1
                },
                "FUN_00104020": {
                    "call_function_at_address": 1,
                    "call_indirect_function": 1,
                    "call_indirect_jump": 1,
                    "execute_code_from_address": 1,
                    "execute_function": 4,
                    "execute_function_at_address": 1,
                    "execute_indirect_call": 7,
                    "execute_indirect_function": 2,
                    "execute_indirect_jump": 13
                },
                "PTR": {
                    "unchanged": 1
                },
                "PTR_00104028": {
                    "function_pointer": 1
                },
                "PTR_indirectCallFunction": {
                    "indirect_call_function": 1
                },
                "PTR_undefined": {
                    "address": 1
                },
                "PTR_undefined_0": {
                    "function_pointer": 1,
                    "jump_target": 1
                },
                "code": {
                    "indirect_function": 2,
                    "indirect_function_pointer": 1,
                    "type_conversion_func": 1
                },
                "original_function_name": {
                    "execute_function": 1,
                    "more_descriptive_function_name": 1
                },
                "original_parameter_name_1": {
                    "new_parameter_name1": 1
                },
                "original_parameter_name_2": {
                    "new_parameter_name2": 1
                },
                "original_variable_name_1": {
                    "function_pointer": 1,
                    "new_variable_name1": 1
                },
                "original_variable_name_2": {
                    "new_variable_name2": 1
                },
                "undefined": {
                    "address": 1,
                    "destination_address": 1,
                    "function_address": 3,
                    "function_pointer": 5,
                    "indirect_call_address": 1,
                    "jump_address": 2,
                    "pointer": 1,
                    "target_address": 1
                },
                "undefined1": {
                    "function_pointer": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(indirect_function *)(function_pointer *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00104020",
            "entrypoint": "0x00104020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020",
                "code": "indirect_function",
                "undefined": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104030": {
            "called": [
                "FUN_00128000"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104030",
            "entrypoint": "0x00104030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104040": {
            "called": [
                "FUN_00128008"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104040",
            "entrypoint": "0x00104040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104050": {
            "called": [
                "FUN_00128010"
            ],
            "calling": [
                "FUN_0010b0fa"
            ],
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "current_name": "FUN_00104050",
            "entrypoint": "0x00104050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104060": {
            "called": [
                "FUN_00128018"
            ],
            "calling": [
                "FUN_0011a350"
            ],
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104060",
            "entrypoint": "0x00104060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104070": {
            "called": [
                "FUN_00128020"
            ],
            "calling": [
                "FUN_00119940"
            ],
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "current_name": "FUN_00104070",
            "entrypoint": "0x00104070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104080": {
            "called": [
                "FUN_00128030"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104080",
            "entrypoint": "0x00104080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104090": {
            "called": [
                "FUN_00128038"
            ],
            "calling": [
                "FUN_001054af"
            ],
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "current_name": "FUN_00104090",
            "entrypoint": "0x00104090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040a0": {
            "called": [
                "FUN_00128048"
            ],
            "calling": [
                "FUN_0010922b",
                "FUN_0010b0fa",
                "FUN_0010abdd",
                "FUN_001199d0",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_00112c1f",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_001135a5",
                "FUN_0010e9a0"
            ],
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "current_name": "FUN_001040a0",
            "entrypoint": "0x001040a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040b0": {
            "called": [
                "FUN_00128050"
            ],
            "calling": [
                "FUN_00115a90",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_0010543c",
                "FUN_00109a32",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00107880",
                "FUN_00104966",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "FUN_001040b0",
            "entrypoint": "0x001040b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040c0": {
            "called": [
                "FUN_00128058"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_001199d0",
                "FUN_00108200"
            ],
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001040c0",
            "entrypoint": "0x001040c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040d0": {
            "called": [
                "FUN_00128060"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_001040d0",
            "entrypoint": "0x001040d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040e0": {
            "called": [
                "FUN_00128068"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_00113fb0"
            ],
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001040e0",
            "entrypoint": "0x001040e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001040f0": {
            "called": [
                "FUN_00128080"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "current_name": "FUN_001040f0",
            "entrypoint": "0x001040f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104100": {
            "called": [
                "FUN_00128088"
            ],
            "calling": [
                "FUN_0010ae0e",
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_001199d0",
                "FUN_0010a424",
                "FUN_0011378f",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104100",
            "entrypoint": "0x00104100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104110": {
            "called": [
                "FUN_00128090"
            ],
            "calling": [
                "FUN_00108b3e"
            ],
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "current_name": "FUN_00104110",
            "entrypoint": "0x00104110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104120": {
            "called": [
                "FUN_00128098"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "current_name": "FUN_00104120",
            "entrypoint": "0x00104120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104130": {
            "called": [
                "FUN_001280a0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104130",
            "entrypoint": "0x00104130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104140": {
            "called": [
                "FUN_001280a8"
            ],
            "calling": [
                "FUN_00116852",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "current_name": "FUN_00104140",
            "entrypoint": "0x00104140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104150": {
            "called": [
                "FUN_001280b0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "FUN_00104150",
            "entrypoint": "0x00104150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104160": {
            "called": [
                "FUN_001280b8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104160",
            "entrypoint": "0x00104160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104170": {
            "called": [
                "FUN_001280c0"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "current_name": "FUN_00104170",
            "entrypoint": "0x00104170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104180": {
            "called": [
                "FUN_001280c8"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "current_name": "FUN_00104180",
            "entrypoint": "0x00104180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104190": {
            "called": [
                "FUN_001280d0"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "current_name": "FUN_00104190",
            "entrypoint": "0x00104190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041a0": {
            "called": [
                "FUN_001280d8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00108f08",
                "FUN_0010edb4"
            ],
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "current_name": "FUN_001041a0",
            "entrypoint": "0x001041a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041b0": {
            "called": [
                "FUN_001280e0"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "current_name": "FUN_001041b0",
            "entrypoint": "0x001041b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041c0": {
            "called": [
                "FUN_001280e8"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_001041c0",
            "entrypoint": "0x001041c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041d0": {
            "called": [
                "FUN_001280f8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "FUN_001041d0",
            "entrypoint": "0x001041d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041e0": {
            "called": [
                "FUN_00128100"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "current_name": "FUN_001041e0",
            "entrypoint": "0x001041e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001041f0": {
            "called": [
                "FUN_00128108"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "FUN_001041f0",
            "entrypoint": "0x001041f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104200": {
            "called": [
                "FUN_00128110"
            ],
            "calling": [
                "FUN_0010bb52"
            ],
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "current_name": "FUN_00104200",
            "entrypoint": "0x00104200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104210": {
            "called": [
                "FUN_00128118"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104210",
            "entrypoint": "0x00104210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104220": {
            "called": [
                "FUN_00128128"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "FUN_00104220",
            "entrypoint": "0x00104220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104230": {
            "called": [
                "FUN_00128130"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114b84"
            ],
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104230",
            "entrypoint": "0x00104230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104240": {
            "called": [
                "FUN_00128138"
            ],
            "calling": [
                "FUN_00112996",
                "FUN_0010551d",
                "FUN_00108808",
                "FUN_00104ea2",
                "FUN_00115dc0",
                "FUN_00119970",
                "FUN_0010ba08",
                "FUN_00112b6e",
                "FUN_00109a32",
                "FUN_0010bf86",
                "FUN_0010e2f0",
                "FUN_0010914e",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_0010c05d",
                "FUN_00116490",
                "FUN_0010bc80",
                "FUN_0010e07c",
                "FUN_00104ad6",
                "FUN_0010871c",
                "FUN_0010554f",
                "FUN_0010c892",
                "FUN_00104920",
                "FUN_00109022",
                "FUN_00114dc7",
                "FUN_00105828",
                "FUN_00108072",
                "FUN_00108916",
                "FUN_00115530",
                "FUN_0010543c",
                "FUN_00108179",
                "FUN_0011173a",
                "FUN_00113f50",
                "FUN_001199d0",
                "FUN_00114460",
                "FUN_00115b70",
                "FUN_00108b3e",
                "FUN_001086af",
                "FUN_0010808f",
                "FUN_0010b800",
                "FUN_00116b90",
                "FUN_00114e50",
                "FUN_0010882c",
                "FUN_001126c0",
                "FUN_0010e6a8",
                "FUN_0011256b",
                "FUN_0010911f",
                "FUN_0010be1a",
                "FUN_0010da0b",
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_001053b5",
                "FUN_00108a2a",
                "FUN_00107880",
                "FUN_00114e00",
                "FUN_00114190",
                "FUN_00104cc1",
                "FUN_001083de",
                "FUN_00107976",
                "FUN_0010b6ea",
                "FUN_0010be88",
                "FUN_0010ee3f",
                "FUN_00108f08",
                "FUN_00108200",
                "FUN_00108fe8",
                "FUN_0010dac0",
                "FUN_00108375",
                "FUN_00112c1f",
                "FUN_001152b6",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010827b",
                "FUN_00119f70",
                "FUN_0010bf20",
                "FUN_00108d9a",
                "FUN_0010bd62",
                "FUN_00108fb9",
                "FUN_00114690",
                "FUN_00104a35"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "FUN_00104240",
            "entrypoint": "0x00104240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104250": {
            "called": [
                "FUN_00128140"
            ],
            "calling": [
                "FUN_00115dc0"
            ],
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "current_name": "FUN_00104250",
            "entrypoint": "0x00104250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104260": {
            "called": [
                "FUN_00128148"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "current_name": "FUN_00104260",
            "entrypoint": "0x00104260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104270": {
            "called": [
                "FUN_00128150"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010a69a",
                "FUN_0010b800",
                "FUN_00116b90",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_0010e6a8",
                "FUN_0010e7c2",
                "FUN_00108c86",
                "FUN_0010e5db",
                "FUN_0010b0fa",
                "FUN_0010a0e9",
                "FUN_0010ae0e",
                "FUN_0010e8a9",
                "FUN_0010e2f0",
                "FUN_0010d559",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_00104ad6",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010554f",
                "FUN_0010ee3f",
                "FUN_0010abdd",
                "FUN_0010a83e",
                "FUN_00113fb0",
                "FUN_0010a2b9",
                "FUN_00113ede",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0011378f",
                "FUN_0010e918",
                "FUN_00115530",
                "FUN_00104943",
                "FUN_0010e9a0",
                "FUN_0011173a",
                "FUN_001199d0",
                "FUN_001125fa",
                "FUN_0010ab4d",
                "FUN_00109bbb",
                "FUN_0010a424",
                "FUN_0010a377"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104270",
            "entrypoint": "0x00104270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104280": {
            "called": [
                "FUN_00128158"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "FUN_00104280",
            "entrypoint": "0x00104280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104290": {
            "called": [
                "FUN_00128160"
            ],
            "calling": [
                "FUN_00114c80",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104290",
            "entrypoint": "0x00104290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042a0": {
            "called": [
                "FUN_00128168"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_001199d0",
                "FUN_00119970",
                "FUN_00107976",
                "FUN_00104943"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001042a0",
            "entrypoint": "0x001042a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042b0": {
            "called": [
                "FUN_00128170"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010d7d4",
                "FUN_0010abdd",
                "FUN_0010aa53",
                "FUN_00114dc7",
                "FUN_0010dac0",
                "FUN_00109be3",
                "FUN_0011173a",
                "FUN_00119f70",
                "FUN_0010e2f0",
                "FUN_00109c2e",
                "FUN_0010ab4d",
                "FUN_00109ed3",
                "FUN_0010e07c",
                "FUN_0010b6ea"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "FUN_001042b0",
            "entrypoint": "0x001042b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042c0": {
            "called": [
                "FUN_00128178"
            ],
            "calling": [
                "FUN_00114cf0"
            ],
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_001042c0",
            "entrypoint": "0x001042c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042d0": {
            "called": [
                "FUN_00128180"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001042d0",
            "entrypoint": "0x001042d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042e0": {
            "called": [
                "FUN_00128188"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "current_name": "FUN_001042e0",
            "entrypoint": "0x001042e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001042f0": {
            "called": [
                "FUN_00128190"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "current_name": "FUN_001042f0",
            "entrypoint": "0x001042f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104300": {
            "called": [
                "FUN_00128198"
            ],
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_001125fa",
                "FUN_00112c1f"
            ],
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "current_name": "FUN_00104300",
            "entrypoint": "0x00104300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104310": {
            "called": [
                "FUN_001281a0"
            ],
            "calling": [
                "FUN_001126c0",
                "FUN_00104943"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104310",
            "entrypoint": "0x00104310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104320": {
            "called": [
                "FUN_001281a8"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00104ea2",
                "FUN_0010d21c",
                "FUN_0010554f"
            ],
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "current_name": "FUN_00104320",
            "entrypoint": "0x00104320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104330": {
            "called": [
                "FUN_001281b8"
            ],
            "calling": [
                "FUN_00116110",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "current_name": "FUN_00104330",
            "entrypoint": "0x00104330",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104340": {
            "called": [
                "FUN_001281c0"
            ],
            "calling": [
                "FUN_0011a170",
                "FUN_00114190"
            ],
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104340",
            "entrypoint": "0x00104340",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104350": {
            "called": [
                "FUN_001281c8"
            ],
            "calling": [
                "FUN_00104a35"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "FUN_00104350",
            "entrypoint": "0x00104350",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104360": {
            "called": [
                "FUN_001281d0"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_00104360",
            "entrypoint": "0x00104360",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104370": {
            "called": [
                "FUN_001281d8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_00119f70",
                "FUN_0010e2f0",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "FUN_00104370",
            "entrypoint": "0x00104370",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104380": {
            "called": [
                "FUN_001281e0"
            ],
            "calling": [
                "FUN_0011a480"
            ],
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104380",
            "entrypoint": "0x00104380",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104390": {
            "called": [
                "FUN_001281e8"
            ],
            "calling": [
                "FUN_0010c139",
                "FUN_0010a69a",
                "FUN_00113da9",
                "FUN_00104ea2",
                "FUN_00109b52",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_0010e7c2",
                "FUN_0010e5db",
                "FUN_0010ae0e",
                "FUN_00116030",
                "FUN_00113b98",
                "FUN_0010bbd3",
                "FUN_0010bf86",
                "FUN_001163d0",
                "FUN_0010c05d",
                "FUN_0010bc80",
                "FUN_0010e07c",
                "FUN_00104ad6",
                "FUN_0010ebb0",
                "FUN_0010554f",
                "FUN_0010c7a0",
                "FUN_0011a480",
                "FUN_00116110",
                "FUN_00109022",
                "FUN_00114cf0",
                "FUN_00115530",
                "FUN_0010e9a0",
                "FUN_00112894",
                "FUN_0011173a",
                "FUN_001199d0",
                "FUN_001125fa",
                "FUN_00114460",
                "FUN_0010a424",
                "FUN_00113d6e",
                "FUN_0010afd5",
                "FUN_00109a0b",
                "FUN_00116852",
                "FUN_00116b90",
                "FUN_0010a94e",
                "FUN_0010e6a8",
                "FUN_0010da0b",
                "FUN_00108c86",
                "FUN_00114c80",
                "FUN_0010a0e9",
                "FUN_0010e8a9",
                "FUN_00113c43",
                "FUN_00107880",
                "FUN_00114190",
                "FUN_00109ed3",
                "FUN_0010d882",
                "FUN_0010a77a",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_00113e23",
                "FUN_0010b6ea",
                "FUN_00114d60",
                "FUN_0010be88",
                "FUN_0010ee3f",
                "FUN_00112925",
                "FUN_00108f08",
                "FUN_0010a83e",
                "FUN_0010a2b9",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0010e918",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_00112904",
                "FUN_0010ab4d",
                "FUN_00108d9a",
                "FUN_0010bd62",
                "FUN_00113bfa",
                "FUN_0010a377",
                "FUN_00113ce0"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "FUN_00104390",
            "entrypoint": "0x00104390",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043a0": {
            "called": [
                "FUN_001281f0"
            ],
            "calling": [
                "FUN_001086af",
                "FUN_00114690",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "current_name": "FUN_001043a0",
            "entrypoint": "0x001043a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043b0": {
            "called": [
                "FUN_001281f8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "FUN_001043b0",
            "entrypoint": "0x001043b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043c0": {
            "called": [
                "FUN_00128200"
            ],
            "calling": [
                "FUN_00115a90",
                "FUN_00116b90",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00114690"
            ],
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001043c0",
            "entrypoint": "0x001043c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043d0": {
            "called": [
                "FUN_00128208"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_00109b52",
                "FUN_001088ae",
                "FUN_0010554f"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "FUN_001043d0",
            "entrypoint": "0x001043d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043e0": {
            "called": [
                "FUN_00128210"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_001043e0",
            "entrypoint": "0x001043e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001043f0": {
            "called": [
                "FUN_00128218"
            ],
            "calling": [
                "FUN_0011256b",
                "FUN_00108b3e",
                "FUN_00104a35"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001043f0",
            "entrypoint": "0x001043f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104400": {
            "called": [
                "FUN_00128220"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0011a2e0",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "current_name": "FUN_00104400",
            "entrypoint": "0x00104400",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104410": {
            "called": [
                "FUN_00128228"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104410",
            "entrypoint": "0x00104410",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104420": {
            "called": [
                "FUN_00128230"
            ],
            "calling": [
                "FUN_00116852",
                "FUN_0011a1b0"
            ],
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104420",
            "entrypoint": "0x00104420",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104430": {
            "called": [
                "FUN_00128238"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "FUN_00104430",
            "entrypoint": "0x00104430",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104440": {
            "called": [
                "FUN_00128240"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "current_name": "FUN_00104440",
            "entrypoint": "0x00104440",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104450": {
            "called": [
                "FUN_00128248"
            ],
            "calling": [
                "FUN_0010bb52"
            ],
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "current_name": "FUN_00104450",
            "entrypoint": "0x00104450",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104460": {
            "called": [
                "FUN_00128250"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "current_name": "FUN_00104460",
            "entrypoint": "0x00104460",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104470": {
            "called": [
                "FUN_00128258"
            ],
            "calling": [
                "FUN_0010922b",
                "FUN_00115f50",
                "FUN_0010c7a0",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00108898",
                "FUN_00108c86",
                "FUN_00115530",
                "FUN_00104943",
                "FUN_0010b0fa",
                "FUN_0010c6be",
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_0010914e",
                "FUN_00114190",
                "FUN_00115b70",
                "FUN_0010554f",
                "FUN_0010afd5"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104470",
            "entrypoint": "0x00104470",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104480": {
            "called": [
                "FUN_00128260"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104480",
            "entrypoint": "0x00104480",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104490": {
            "called": [
                "FUN_00128268"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "current_name": "FUN_00104490",
            "entrypoint": "0x00104490",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044a0": {
            "called": [
                "FUN_00128280"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00104cc1",
                "FUN_00108d9a"
            ],
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "current_name": "FUN_001044a0",
            "entrypoint": "0x001044a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044b0": {
            "called": [
                "FUN_00128288"
            ],
            "calling": [
                "FUN_00112996",
                "FUN_00116b90",
                "FUN_001126c0",
                "FUN_0011256b",
                "FUN_0010911f",
                "FUN_0010be1a",
                "FUN_00112b6e",
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_00108a2a",
                "FUN_0010bf86",
                "FUN_0010914e",
                "FUN_0010c05d",
                "FUN_0010bc80",
                "FUN_0010b6ea",
                "FUN_0010554f",
                "FUN_0010871c",
                "FUN_0010be88",
                "FUN_0010ee3f",
                "FUN_0010c892",
                "FUN_00108f08",
                "FUN_00109022",
                "FUN_00108fe8",
                "FUN_00108916",
                "FUN_00112c1f",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0011173a",
                "FUN_00119e70",
                "FUN_0010bf20",
                "FUN_001199d0",
                "FUN_0010bd62",
                "FUN_00108fb9",
                "FUN_00108b3e",
                "FUN_00104a35"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001044b0",
            "entrypoint": "0x001044b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044c0": {
            "called": [
                "FUN_00128290"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "FUN_001044c0",
            "entrypoint": "0x001044c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044d0": {
            "called": [
                "FUN_00128298"
            ],
            "calling": [
                "FUN_00114dc7"
            ],
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001044d0",
            "entrypoint": "0x001044d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044e0": {
            "called": [
                "FUN_001282a0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "current_name": "FUN_001044e0",
            "entrypoint": "0x001044e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001044f0": {
            "called": [
                "FUN_001282b0"
            ],
            "calling": [
                "FUN_0011283f",
                "FUN_00113f50",
                "FUN_00116b90",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001044f0",
            "entrypoint": "0x001044f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104500": {
            "called": [
                "FUN_001282b8"
            ],
            "calling": [
                "FUN_00119f70",
                "FUN_00114e50",
                "FUN_00107880",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "current_name": "FUN_00104500",
            "entrypoint": "0x00104500",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104510": {
            "called": [
                "FUN_001282c0"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_0010d559",
                "FUN_00104943"
            ],
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "current_name": "FUN_00104510",
            "entrypoint": "0x00104510",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104520": {
            "called": [
                "FUN_001282c8"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "current_name": "FUN_00104520",
            "entrypoint": "0x00104520",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104530": {
            "called": [
                "FUN_001282d0"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "current_name": "FUN_00104530",
            "entrypoint": "0x00104530",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104540": {
            "called": [
                "FUN_001282d8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_00104540",
            "entrypoint": "0x00104540",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104550": {
            "called": [
                "FUN_001282e0"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "current_name": "FUN_00104550",
            "entrypoint": "0x00104550",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104560": {
            "called": [
                "FUN_001282e8"
            ],
            "calling": [
                "FUN_0010e2f0",
                "FUN_0010e6a8",
                "FUN_0010bba1"
            ],
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "current_name": "FUN_00104560",
            "entrypoint": "0x00104560",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104570": {
            "called": [
                "FUN_001282f0"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00107880",
                "FUN_00107976",
                "FUN_00105828"
            ],
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "current_name": "FUN_00104570",
            "entrypoint": "0x00104570",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104580": {
            "called": [
                "FUN_001282f8"
            ],
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "current_name": "FUN_00104580",
            "entrypoint": "0x00104580",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104590": {
            "called": [
                "FUN_00128300"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "current_name": "FUN_00104590",
            "entrypoint": "0x00104590",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045a0": {
            "called": [
                "FUN_00128308"
            ],
            "calling": [
                "FUN_00119f70",
                "FUN_001199d0",
                "FUN_00105828",
                "FUN_00104943"
            ],
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "current_name": "FUN_001045a0",
            "entrypoint": "0x001045a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045b0": {
            "called": [
                "FUN_00128310"
            ],
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "current_name": "FUN_001045b0",
            "entrypoint": "0x001045b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045c0": {
            "called": [
                "FUN_00128318"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_001045c0",
            "entrypoint": "0x001045c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045d0": {
            "called": [
                "FUN_00128320"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001045d0",
            "entrypoint": "0x001045d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045e0": {
            "called": [
                "FUN_00128328"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0",
                "FUN_0011256b",
                "FUN_0010871c"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001045e0",
            "entrypoint": "0x001045e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001045f0": {
            "called": [
                "FUN_00128330"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00116110",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "current_name": "FUN_001045f0",
            "entrypoint": "0x001045f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104600": {
            "called": [
                "FUN_00128338"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "current_name": "FUN_00104600",
            "entrypoint": "0x00104600",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104610": {
            "called": [
                "FUN_00128340"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "current_name": "FUN_00104610",
            "entrypoint": "0x00104610",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104620": {
            "called": [
                "FUN_00128348"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "current_name": "FUN_00104620",
            "entrypoint": "0x00104620",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104630": {
            "called": [
                "FUN_00128350"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "current_name": "FUN_00104630",
            "entrypoint": "0x00104630",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104640": {
            "called": [
                "FUN_00128358"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104640",
            "entrypoint": "0x00104640",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104650": {
            "called": [
                "FUN_00128360"
            ],
            "calling": [
                "FUN_00107976",
                "FUN_00105828"
            ],
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "current_name": "FUN_00104650",
            "entrypoint": "0x00104650",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104660": {
            "called": [
                "FUN_00128370"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104660",
            "entrypoint": "0x00104660",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104670": {
            "called": [
                "FUN_00128388"
            ],
            "calling": [
                "FUN_0011a0e0"
            ],
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104670",
            "entrypoint": "0x00104670",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104680": {
            "called": [
                "FUN_00128390"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104680",
            "entrypoint": "0x00104680",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104690": {
            "called": [
                "FUN_00128398"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "current_name": "FUN_00104690",
            "entrypoint": "0x00104690",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046a0": {
            "called": [
                "FUN_001283a0"
            ],
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "current_name": "FUN_001046a0",
            "entrypoint": "0x001046a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046b0": {
            "called": [
                "FUN_001283a8"
            ],
            "calling": [
                "FUN_0010d21c"
            ],
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "current_name": "FUN_001046b0",
            "entrypoint": "0x001046b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046c0": {
            "called": [
                "FUN_001283b0"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001046c0",
            "entrypoint": "0x001046c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046d0": {
            "called": [
                "FUN_001283b8"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001046d0",
            "entrypoint": "0x001046d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046e0": {
            "called": [
                "FUN_001283c0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "FUN_001046e0",
            "entrypoint": "0x001046e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001046f0": {
            "called": [
                "FUN_001283c8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "FUN_001046f0",
            "entrypoint": "0x001046f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104700": {
            "called": [
                "FUN_001283d0"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "current_name": "FUN_00104700",
            "entrypoint": "0x00104700",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104710": {
            "called": [
                "FUN_001283d8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "current_name": "FUN_00104710",
            "entrypoint": "0x00104710",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104720": {
            "called": [
                "FUN_001283e0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "current_name": "FUN_00104720",
            "entrypoint": "0x00104720",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104730": {
            "called": [
                "FUN_001283e8"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104730",
            "entrypoint": "0x00104730",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104740": {
            "called": [
                "FUN_001283f0"
            ],
            "calling": [
                "FUN_0011283f"
            ],
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104740",
            "entrypoint": "0x00104740",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104750": {
            "called": [
                "FUN_001283f8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_00114d60"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "FUN_00104750",
            "entrypoint": "0x00104750",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104760": {
            "called": [
                "FUN_00128400"
            ],
            "calling": [
                "FUN_00116030",
                "FUN_00116b90",
                "FUN_00115dc0",
                "FUN_00119dd0",
                "FUN_001083b7"
            ],
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "current_name": "FUN_00104760",
            "entrypoint": "0x00104760",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104770": {
            "called": [
                "FUN_00128408"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00104770",
            "entrypoint": "0x00104770",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104780": {
            "called": [
                "FUN_00128410"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "current_name": "FUN_00104780",
            "entrypoint": "0x00104780",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104790": {
            "called": [
                "FUN_00128418"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "FUN_00104790",
            "entrypoint": "0x00104790",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047a0": {
            "called": [
                "FUN_00128420"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010e2f0",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_0010e6a8",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "FUN_001047a0",
            "entrypoint": "0x001047a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047b0": {
            "called": [
                "FUN_00128428"
            ],
            "calling": [
                "FUN_00116030",
                "FUN_00115dc0",
                "FUN_001163d0"
            ],
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "current_name": "FUN_001047b0",
            "entrypoint": "0x001047b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047c0": {
            "called": [
                "FUN_00128430"
            ],
            "calling": [
                "FUN_0010ae0e",
                "FUN_0010ee3f",
                "FUN_00115530"
            ],
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_001047c0",
            "entrypoint": "0x001047c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047d0": {
            "called": [
                "FUN_00128438"
            ],
            "calling": [
                "FUN_00108d9a",
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "current_name": "FUN_001047d0",
            "entrypoint": "0x001047d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047e0": {
            "called": [
                "FUN_00128440"
            ],
            "calling": [
                "FUN_0010a69a",
                "FUN_0010b800",
                "FUN_0010b948",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_0010e6a8",
                "FUN_0010e7c2",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010ae0e",
                "FUN_0010e8a9",
                "FUN_00109d97",
                "FUN_00109e76",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_0010ebb0",
                "FUN_0010ee3f",
                "FUN_0010abdd",
                "FUN_00109dfe",
                "FUN_0010a83e",
                "FUN_0010a2b9",
                "FUN_00109cf4",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0010e918",
                "FUN_0010e9a0",
                "FUN_001125fa",
                "FUN_0010ab4d",
                "FUN_0010a424",
                "FUN_0010a377"
            ],
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001047e0",
            "entrypoint": "0x001047e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001047f0": {
            "called": [
                "FUN_00128448"
            ],
            "calling": [
                "FUN_00108a2a",
                "FUN_00119970",
                "FUN_00108916"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "FUN_001047f0",
            "entrypoint": "0x001047f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104800": {
            "called": [
                "FUN_00128450"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_001126c0",
                "FUN_00108b3e"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "FUN_00104800",
            "entrypoint": "0x00104800",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104810": {
            "called": [
                "FUN_00128458"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "FUN_00104810",
            "entrypoint": "0x00104810",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104820": {
            "called": [
                "FUN_00128460"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "current_name": "FUN_00104820",
            "entrypoint": "0x00104820",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104830": {
            "called": [
                "FUN_00128470"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "current_name": "FUN_00104830",
            "entrypoint": "0x00104830",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104840": {
            "called": [
                "FUN_00128478"
            ],
            "calling": [
                "FUN_00116030",
                "FUN_00115dc0",
                "FUN_001163d0"
            ],
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "current_name": "FUN_00104840",
            "entrypoint": "0x00104840",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104850": {
            "called": [
                "FUN_00128480"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "current_name": "FUN_00104850",
            "entrypoint": "0x00104850",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104860": {
            "called": [
                "FUN_00128488"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "current_name": "FUN_00104860",
            "entrypoint": "0x00104860",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104870": {
            "called": [
                "FUN_00128490"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "current_name": "FUN_00104870",
            "entrypoint": "0x00104870",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104880": {
            "called": [
                "FUN_00128498"
            ],
            "calling": [
                "FUN_00108d9a"
            ],
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104880",
            "entrypoint": "0x00104880",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104890": {
            "called": [
                "FUN_001284a8"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_0010882c",
                "FUN_001199d0",
                "FUN_00107880",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_00114690",
                "FUN_0010543c"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_00104890",
            "entrypoint": "0x00104890",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048a0": {
            "called": [
                "FUN_001284b0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "current_name": "FUN_001048a0",
            "entrypoint": "0x001048a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048b0": {
            "called": [
                "FUN_001284b8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_001048b0",
            "entrypoint": "0x001048b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048c0": {
            "called": [
                "FUN_001284c0"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "current_name": "FUN_001048c0",
            "entrypoint": "0x001048c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048d0": {
            "called": [
                "FUN_001284c8"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "current_name": "FUN_001048d0",
            "entrypoint": "0x001048d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048e0": {
            "called": [
                "FUN_001284d8"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "current_name": "FUN_001048e0",
            "entrypoint": "0x001048e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048f0": {
            "called": [
                "FUN_001284f0"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010551d",
                "FUN_0010b948",
                "FUN_00104ea2",
                "FUN_00108466",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_0010e7c2",
                "FUN_0010e5db",
                "FUN_0010ae0e",
                "FUN_00116030",
                "FUN_001163d0",
                "FUN_0010e07c",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010554f",
                "FUN_0010abdd",
                "FUN_00116110",
                "FUN_0010e9a0",
                "FUN_0011173a",
                "FUN_001199d0",
                "FUN_001125fa",
                "FUN_001088ae",
                "FUN_0010a424",
                "FUN_0010afd5",
                "FUN_00116852",
                "FUN_0010c1c6",
                "FUN_00116b90",
                "FUN_0010a94e",
                "FUN_0010e6a8",
                "FUN_0011256b",
                "FUN_00108863",
                "FUN_001081e9",
                "FUN_0010b0fa",
                "FUN_0010a0e9",
                "FUN_0010e8a9",
                "FUN_0010d559",
                "FUN_00107880",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010e842",
                "FUN_00109b2f",
                "FUN_0010eafe",
                "FUN_0010b6ea",
                "FUN_0010ee3f",
                "FUN_0010a83e",
                "FUN_0010a2b9",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0010dac0",
                "FUN_0010e918",
                "FUN_00114b84",
                "FUN_0010a377",
                "FUN_00114690",
                "FUN_00104a35"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "FUN_001048f0",
            "entrypoint": "0x001048f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_001048f8": {
            "called": [
                "FUN_00128500"
            ],
            "calling": [
                "FUN_00108800"
            ],
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "current_name": "FUN_001048f8",
            "entrypoint": "0x001048f8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104900": {
            "called": [
                "FUN_00128508"
            ],
            "calling": [
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "current_name": "FUN_00104900",
            "entrypoint": "0x00104900",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104908": {
            "called": [
                "FUN_001284e0"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "FUN_00104908",
            "entrypoint": "0x00104908",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104910": {
            "called": [
                "FUN_001284e8"
            ],
            "calling": [
                "FUN_00116b40"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "FUN_00104910",
            "entrypoint": "0x00104910",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104918": {
            "called": [
                "FUN_001284f8"
            ],
            "calling": [
                "FUN_001163d0"
            ],
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "current_name": "FUN_00104918",
            "entrypoint": "0x00104918",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00104920": {
            "additional_data": {
                "FUN_00104920": {
                    "check_and_fatal_error": 1,
                    "check_and_print_bad_number": 1,
                    "check_and_print_error": 1,
                    "check_number_error": 1,
                    "check_number_validity": 2,
                    "display_bad_number_error": 1,
                    "display_error": 1,
                    "display_error_message": 1,
                    "handle_bad_number": 2,
                    "handle_bad_number_error": 1,
                    "print_bad_number_error": 4,
                    "print_bad_number_error_message": 5,
                    "print_error_message": 2,
                    "report_bad_number": 1,
                    "report_bad_number_error": 1,
                    "validate_and_fatal_error": 2,
                    "validate_and_print_number": 2,
                    "validate_bad_number": 1,
                    "validate_number_and_print_error": 1
                },
                "dcgettext": {
                    "get_translated_string": 2
                },
                "fatal": {
                    "handle_fatal_error": 1,
                    "terminate_program": 1
                },
                "param_1": {
                    "arg1": 3,
                    "param1": 1,
                    "unk_param1": 1,
                    "unused_parameter": 1,
                    "var1": 1
                },
                "param_2": {
                    "arg2": 3,
                    "param2": 1,
                    "unk_param2": 1,
                    "unused_parameter": 1,
                    "var2": 1
                },
                "param_3": {
                    "arg3": 3,
                    "param3": 1,
                    "unk_param3": 1,
                    "unused_parameter": 1,
                    "var3": 1
                },
                "param_4": {
                    "arg4": 3,
                    "param4": 1,
                    "unk_param4": 1,
                    "unused_parameter": 1,
                    "var4": 1
                },
                "uVar1": {
                    "error_formatted_message": 1,
                    "error_message": 22,
                    "error_msg": 2,
                    "error_string": 4
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00119940"
            ],
            "code": "\nvoid print_bad_number_error_message_00104920(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = get_translated_string(0,\"%s: bad number: %s\",5);\n                    \n  handle_fatal_error(error_message);\n}\n\n",
            "current_name": "print_bad_number_error_message_00104920",
            "entrypoint": "0x00104920",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104920": "print_bad_number_error_message_00104920",
                "dcgettext": "get_translated_string",
                "fatal": "handle_fatal_error",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104943": {
            "additional_data": {
                "FUN_00104943": {
                    "display_binary_info": 1,
                    "parse_and_print_entry": 1,
                    "print_arch_mach_details": 1,
                    "print_arch_mach_info": 2,
                    "print_arch_machines": 1,
                    "print_architecture_info": 1,
                    "print_binary_data": 1,
                    "print_binary_details": 1,
                    "print_binary_info": 4,
                    "print_executable_information": 1,
                    "print_formatted_data": 2,
                    "print_formatted_payload": 1,
                    "print_reverse_arch_and_names": 1,
                    "print_reverse_arch_info": 1,
                    "print_reverse_arch_mach": 3,
                    "print_reverse_arch_mach_info": 1,
                    "print_reverse_arch_mach_names": 1,
                    "print_reverse_info": 1,
                    "print_reverse_information": 1,
                    "print_reverse_string": 1,
                    "print_reverse_string_info": 1,
                    "reverse_and_print_results": 1
                },
                "_stdout": {
                    "standard_output": 2
                },
                "iVar1": {
                    "converted_int": 2,
                    "converted_integer": 1,
                    "converted_value": 1,
                    "default_entry_size": 1,
                    "default_length": 4,
                    "default_number": 1,
                    "default_string_size": 1,
                    "default_value": 8,
                    "input_int": 1,
                    "int_value": 3,
                    "num_lines": 1,
                    "parsed_integer": 1,
                    "size_input": 1
                },
                "iVar2": {
                    "arch_comparison": 1,
                    "arch_index": 4,
                    "arch_mach_compare_result": 1,
                    "arch_mach_comparison": 1,
                    "arch_mach_comparison_result": 1,
                    "cmp_result": 1,
                    "comparison_result": 12,
                    "data_set_index": 1,
                    "inner_loop_index": 1,
                    "name_index": 1
                },
                "iVar7": {
                    "arch_counter": 2,
                    "arch_index": 6,
                    "arch_index_counter": 1,
                    "arch_loop": 1,
                    "arch_loop_index": 1,
                    "arch_mach_counter": 2,
                    "arch_mach_index": 10,
                    "arch_start": 1,
                    "arch_value": 1,
                    "loop_counter": 1,
                    "loop_variable_2": 1
                },
                "iVar9": {
                    "counter": 1,
                    "current_index": 1,
                    "current_line": 1,
                    "current_position": 1,
                    "current_string_index": 1,
                    "entry_index": 1,
                    "inner_counter": 1,
                    "inner_loop_var": 2,
                    "iteration_count": 2,
                    "iteration_counter": 1,
                    "iteration_var": 1,
                    "loop_counter": 1,
                    "loop_counter1": 2,
                    "loop_index": 1,
                    "loop_var1": 1,
                    "max_rows": 1,
                    "outer_index": 1,
                    "outer_loop_counter": 1,
                    "outer_loop_index": 1,
                    "param7": 1,
                    "start_index": 3,
                    "starting_index": 1,
                    "string_idx": 1,
                    "string_index": 1
                },
                "in_RAX": {
                    "binary_path": 1,
                    "binary_string": 1,
                    "input_str": 1,
                    "input_string": 26,
                    "str": 1,
                    "string": 1
                },
                "lVar3": {
                    "converted_long": 2,
                    "converted_number": 6,
                    "converted_to_long": 1,
                    "converted_value": 8,
                    "dec_value": 1,
                    "entry_offset": 1,
                    "index": 1,
                    "iteration_index": 1,
                    "long_value": 2,
                    "long_var3": 1,
                    "num_converted": 1,
                    "number": 2,
                    "parsed_integer": 1,
                    "parsed_long": 1,
                    "parsed_number": 1,
                    "str_to_long_result": 1
                },
                "lVar8": {
                    "current_index": 1,
                    "inner_index": 1,
                    "line_index": 1,
                    "long_var8": 1,
                    "loop_counter2": 1,
                    "loop_start": 1,
                    "loop_variable_3": 1,
                    "param7_as_long": 1,
                    "param_7_copy": 1,
                    "param_counter": 1,
                    "param_index": 3,
                    "row_index": 1,
                    "start_index": 3
                },
                "param_11": {
                    "arch_data": 1,
                    "arch_info_struct": 1,
                    "arch_mach_buffer": 1,
                    "arch_mach_info": 1,
                    "arch_mach_info_ptr": 1,
                    "architecture_data": 1,
                    "architecture_information": 1,
                    "array_size": 1,
                    "binary_array": 1,
                    "binary_data": 2,
                    "data": 1,
                    "data_structure": 1,
                    "entries_array": 1,
                    "file_paths": 1,
                    "info_struct": 1,
                    "machines": 1,
                    "names_data": 1,
                    "param11": 3,
                    "param_11": 2,
                    "param_array": 2,
                    "param_struct": 2,
                    "parameter_11": 1,
                    "string_array": 2,
                    "total_lines": 1
                },
                "param_13": {
                    "arch_array": 1,
                    "binary_data": 1,
                    "binary_data_pointer": 1,
                    "binary_info_array": 1,
                    "data_array": 2,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_set_address": 1,
                    "data_struct": 1,
                    "entry_data": 1,
                    "file_data": 1,
                    "info_array_ptr": 1,
                    "machine_list": 1,
                    "memory_address": 1,
                    "names_array": 1,
                    "param13": 3,
                    "param_13": 2,
                    "param_array": 1,
                    "param_data": 1,
                    "param_pointer": 1,
                    "param_struct_ptr": 1,
                    "parameter_13": 1,
                    "payload": 1,
                    "string_array": 1,
                    "string_info_array": 1,
                    "strings_array": 1
                },
                "param_7": {
                    "arch_idx": 1,
                    "current_row": 1,
                    "inner_loop_index": 1,
                    "input_integer": 1,
                    "length": 1,
                    "limit": 2,
                    "max_chars": 1,
                    "max_index": 2,
                    "max_iterations": 2,
                    "max_loop_count": 1,
                    "max_param": 1,
                    "max_position": 1,
                    "max_value": 1,
                    "num_entries": 1,
                    "num_of_strings": 1,
                    "num_strings": 1,
                    "number_of_data_sets": 1,
                    "number_of_params": 1,
                    "outer_loop_var": 1,
                    "param7": 1,
                    "param_length": 1,
                    "param_limit": 1,
                    "start_index": 2,
                    "start_position": 1
                },
                "pcVar5": {
                    "arch_char": 1,
                    "arch_info": 1,
                    "arch_mach": 9,
                    "arch_mach_string": 4,
                    "arch_name": 1,
                    "arch_string": 3,
                    "current_name": 1,
                    "printable_arch": 1,
                    "printable_arch_mach": 3,
                    "printable_arch_mach_ptr": 1,
                    "printable_string": 4
                },
                "sVar4": {
                    "arch_info_len": 1,
                    "current_string_length": 1,
                    "entry_name_length": 1,
                    "length": 1,
                    "name_length": 1,
                    "str_len": 1,
                    "str_length": 3,
                    "string_length": 16,
                    "temp_str_length": 1
                },
                "uStack000000000000000c": {
                    "end_index": 1,
                    "indent_size": 1,
                    "indentation": 7,
                    "indentation_level": 7,
                    "indentation_size": 1,
                    "initial_stack_val": 1,
                    "inner_loop_limit": 1,
                    "loop_counter2": 1,
                    "max_arch_name_length": 1,
                    "padding_length": 1,
                    "param15": 1,
                    "stack_size_adjusted": 1,
                    "stack_var": 2,
                    "temp_stack_var": 1,
                    "u_stack000000000000000c": 1,
                    "unaff_r15_d": 1,
                    "value_c": 1
                },
                "uVar10": {
                    "char_count": 1,
                    "dash_count": 1,
                    "length_counter": 1,
                    "loop_counter": 4,
                    "loop_index": 2,
                    "loop_var": 3,
                    "padding_length": 1,
                    "remaining_string_length": 1,
                    "str_len_loop_counter": 1,
                    "string_counter": 1,
                    "string_iteration": 1,
                    "string_length": 4,
                    "string_length_counter": 1,
                    "strlen_value": 1,
                    "temp_var": 1
                },
                "uVar11": {
                    "arch_count": 1,
                    "arch_diff": 1,
                    "arch_idx": 1,
                    "arch_index": 6,
                    "arch_index_offset": 3,
                    "arch_mach_adjusted_index": 1,
                    "arch_mach_adjustment": 1,
                    "arch_mach_counter_minus_two": 1,
                    "arch_mach_difference": 1,
                    "arch_mach_offset": 5,
                    "arch_mach_shift": 1,
                    "arch_minus2": 1,
                    "arch_offset": 2,
                    "arch_value": 1,
                    "architecture_index": 1,
                    "loop_var2": 2,
                    "temp_var2": 1
                },
                "uVar6": {
                    "arch_mach": 1,
                    "arch_mach_details": 1,
                    "arch_mach_info_str": 1,
                    "arch_mach_printable": 2,
                    "arch_mach_result": 1,
                    "arch_mach_str": 2,
                    "arch_mach_string": 1,
                    "arch_name": 1,
                    "arch_string": 1,
                    "arch_string_printable": 1,
                    "bfd_printable_string": 1,
                    "formatted_string": 1,
                    "printable_arch": 2,
                    "printable_arch_mach": 10,
                    "printable_arch_mach_string": 1,
                    "printable_arch_str": 1
                },
                "unaff_R15D": {
                    "arch_offset": 1,
                    "default_indentation": 1,
                    "indentation": 1,
                    "line_limit": 1,
                    "loop_variable": 1,
                    "num_arch_mach_info": 1,
                    "param7": 1,
                    "param_value": 1,
                    "register_value": 1,
                    "stack_counter": 1,
                    "stack_size": 1,
                    "stack_value": 2,
                    "stack_var": 1,
                    "temporary_value": 1,
                    "u_stack000000000000000c": 1,
                    "unaff_r15_d": 1,
                    "value_r15_d": 1
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_001045a0",
                "FUN_00104480",
                "FUN_001042a0",
                "FUN_00104510",
                "FUN_00104470",
                "FUN_00104310"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nvoid print_reverse_arch_mach_info_00104943(void)\n\n{\n  int default_value;\n  int comparison_result;\n  char *input_string;\n  long converted_value;\n  size_t string_length;\n  char *arch_mach;\n  undefined8 printable_arch_mach;\n  int arch_mach_index;\n  long param_index;\n  int start_index;\n  uint stack_value;\n  ulong string_length;\n  uint arch_index;\n  int limit;\n  uint indentation_level;\n  undefined8 param11;\n  long param13;\n  \n  converted_value = strtol(input_string,(char **)0x0,10);\n  default_value = (int)converted_value;\n  start_index = limit;\n  indentation_level = stack_value;\n  if (default_value == 0) {\n    default_value = 0x50;\n  }\n  do {\n    limit = start_index;\n    if (param11._4_4_ <= limit) {\n      return;\n    }\n    param_index = (long)limit;\n    arch_mach_index = (default_value - indentation_level) + -1;\n    converted_value = param_index;\n    do {\n      start_index = (int)converted_value;\n      if (param11._4_4_ <= start_index) break;\n      string_length = strlen(*(char **)(param13 + converted_value * 0x60));\n      converted_value = converted_value + 1;\n      arch_mach_index = (arch_mach_index - (int)string_length) + -1;\n    } while (-1 < arch_mach_index);\n    printf(\"\\n%*s\",(ulong)(indentation_level + 1),&DAT_0011b4a1);\n    for (converted_value = param_index * 0x60; ((ulong)(uint)(start_index - limit) + param_index) * 0x60 - converted_value != 0;\n        converted_value = converted_value + 0x60) {\n      printf(\"%s \",*(undefined8 *)(param13 + converted_value));\n    }\n    arch_mach_index = 2;\n    putc(10,standard_output);\n    do {\n      arch_mach = (char *)bfd_printable_arch_mach(arch_mach_index,0);\n      comparison_result = strcmp(arch_mach,\"UNKNOWN!\");\n      if (comparison_result != 0) {\n        printable_arch_mach = bfd_printable_arch_mach(arch_mach_index,0);\n        printf(\"%*s \",(ulong)indentation_level,printable_arch_mach);\n        arch_index = arch_mach_index - 2;\n        converted_value = param_index * 0x60;\n        comparison_result = limit;\n        while (start_index != comparison_result) {\n          arch_mach = *(char **)(param13 + converted_value);\n          if (*(char *)((long)(char **)(param13 + converted_value) + (ulong)arch_index + 8) == '\\0') {\n            string_length = strlen(arch_mach);\n            for (string_length = string_length & 0xffffffff; (int)string_length != 0; string_length = (ulong)((int)string_length - 1)) {\n              putc(0x2d,standard_output);\n            }\n          }\n          else {\n            fputs(arch_mach,standard_output);\n          }\n          comparison_result = comparison_result + 1;\n          if (start_index != comparison_result) {\n            putc(0x20,standard_output);\n          }\n          converted_value = converted_value + 0x60;\n        }\n        putc(10,standard_output);\n      }\n      arch_mach_index = arch_mach_index + 1;\n    } while (arch_mach_index != 0x57);\n  } while( true );\n}\n\n",
            "current_name": "print_reverse_arch_mach_info_00104943",
            "entrypoint": "0x00104943",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104943": "print_reverse_arch_mach_info_00104943",
                "_stdout": "standard_output",
                "iVar1": "default_value",
                "iVar2": "comparison_result",
                "iVar7": "arch_mach_index",
                "iVar9": "start_index",
                "in_RAX": "input_string",
                "lVar3": "converted_value",
                "lVar8": "param_index",
                "param_11": "param11",
                "param_13": "param13",
                "param_7": "limit",
                "pcVar5": "arch_mach",
                "sVar4": "string_length",
                "uStack000000000000000c": "indentation_level",
                "uVar10": "string_length",
                "uVar11": "arch_index",
                "uVar6": "printable_arch_mach",
                "unaff_R15D": "stack_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104966": {
            "additional_data": {
                "FUN_00104966": {
                    "check_file_existence": 2,
                    "file_error_handling": 1,
                    "file_not_found_error": 3,
                    "handle_error_code": 2,
                    "handle_file_error": 16,
                    "handle_file_not_found": 1,
                    "handle_file_not_found_error": 3,
                    "handle_missing_file": 2,
                    "improve_error_handling": 1
                },
                "__errno_location": {
                    "get_errno_location": 1
                },
                "dcgettext": {
                    "get_error_string": 1,
                    "get_localized_error": 1
                },
                "non_fatal": {
                    "handle_fatal_error": 1,
                    "handle_non_fatal_error": 3
                },
                "param_1": {
                    "arg1": 1,
                    "param1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "param2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "param3": 1
                },
                "param_4": {
                    "arg4": 1,
                    "param4": 1
                },
                "piVar1": {
                    "err_num_ptr": 1,
                    "errno_address": 1,
                    "errno_location": 2,
                    "errno_pointer": 1,
                    "errno_ptr": 18,
                    "error_code": 3,
                    "error_code_ptr": 1,
                    "error_location": 3,
                    "error_pointer": 1
                },
                "uVar2": {
                    "err_msg": 1,
                    "error_message": 27,
                    "error_msg": 3
                }
            },
            "called": [
                "FUN_00104890",
                "FUN_00104240",
                "FUN_001040b0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00113f50"
            ],
            "code": "\nundefined8 handle_file_not_found_error_00104966(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = get_errno_location();\n  if (*errno_ptr == 2) {\n    error_message = get_error_string(0,\"\\'%s\\': No such file\",5);\n    handle_non_fatal_error(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = get_error_string(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    handle_non_fatal_error(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "current_name": "handle_file_not_found_error_00104966",
            "entrypoint": "0x00104966",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104966": "handle_file_not_found_error_00104966",
                "__errno_location": "get_errno_location",
                "dcgettext": "get_error_string",
                "non_fatal": "handle_non_fatal_error",
                "piVar1": "errno_ptr",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104a35": {
            "additional_data": {
                "FUN_00104a35": {
                    "print_supported_targets": 30,
                    "print_targets_with_support": 1
                },
                "__ptr": {
                    "target_list": 31
                },
                "lVar1": {
                    "current_target": 10,
                    "current_target_value": 7,
                    "current_value": 1,
                    "target_addr": 1,
                    "target_address": 2,
                    "target_code": 1,
                    "target_id": 5,
                    "target_item": 2,
                    "target_pointer": 2
                },
                "param_1": {
                    "target": 30,
                    "target_name": 1
                },
                "param_2": {
                    "file": 1,
                    "output": 1,
                    "output_file": 29
                },
                "pcVar2": {
                    "format_string": 1,
                    "message": 19,
                    "str": 1,
                    "supported_targets_message": 1,
                    "target_message": 2,
                    "target_string": 4,
                    "text": 2,
                    "translation": 1
                },
                "plVar3": {
                    "current_target": 16,
                    "current_target_ptr": 3,
                    "ptr": 7,
                    "target_pointer": 1,
                    "target_ptr": 4
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_00104350",
                "FUN_001043f0",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "code": "\nvoid print_supported_targets_00104a35(long target,FILE *output_file)\n\n{\n  long current_target;\n  char *message;\n  long *target_list;\n  long *current_target;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,target);\n  }\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    current_target = *current_target;\n    current_target = current_target + 1;\n    if (current_target == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  return;\n}\n\n",
            "current_name": "print_supported_targets_00104a35",
            "entrypoint": "0x00104a35",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "__ptr": "target_list",
                "lVar1": "current_target",
                "param_1": "target",
                "param_2": "output_file",
                "pcVar2": "message",
                "plVar3": "current_target"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ad6": {
            "additional_data": {
                "0": {
                    "error_flag": 1
                },
                "FUN_00104ad6": {
                    "check_section_flags": 1,
                    "decode_section_flags": 2,
                    "extract_section_flags": 2,
                    "parse_section_flags": 23,
                    "process_section_flags": 1,
                    "section_flag_parser": 1
                },
                "STR_ANY": {
                    "unrecognized_section_flag_string": 1
                },
                "STR_SUPPORTED": {
                    "supported_section_flags_string": 1
                },
                "__s": {
                    "current_flag": 4,
                    "current_section_flag": 1,
                    "current_string": 1,
                    "flag": 1,
                    "flag_string": 1,
                    "remaining_flags": 1,
                    "remaining_string": 2,
                    "section": 6,
                    "section_flag": 8,
                    "section_flag_string": 1,
                    "section_flags": 1,
                    "section_name": 1,
                    "section_string": 1,
                    "string": 2
                },
                "auVar6": {
                    "result": 12,
                    "return_struct": 1,
                    "return_val": 1,
                    "return_value": 9,
                    "return_variable": 1,
                    "section_flag": 1
                },
                "iVar1": {
                    "comparison_result": 23,
                    "result": 4
                },
                "iVar5": {
                    "comma_index": 1,
                    "current_flag_length": 2,
                    "current_length": 1,
                    "difference": 1,
                    "flag_index": 2,
                    "flag_length": 1,
                    "flag_string_size": 1,
                    "flag_substr_length": 1,
                    "length": 4,
                    "name_length": 1,
                    "section_length": 2,
                    "section_name_length": 2,
                    "section_name_length_int": 1,
                    "separator_index": 1,
                    "str_length": 2,
                    "string_length": 5,
                    "substr_length": 1,
                    "substring_length": 2
                },
                "param_1": {
                    "param1": 1
                },
                "param_2": {
                    "param2": 1
                },
                "param_3": {
                    "param3": 1
                },
                "param_4": {
                    "param4": 1
                },
                "pcVar3": {
                    "comma": 1,
                    "comma_index": 2,
                    "comma_location": 1,
                    "comma_pos": 2,
                    "comma_position": 12,
                    "comma_ptr": 5,
                    "delimiter": 3,
                    "delimiter_pos": 1,
                    "delimiter_position": 1,
                    "flag_ptr": 1,
                    "separator": 1
                },
                "sVar4": {
                    "flag_length": 11,
                    "flag_string_length": 1,
                    "length": 5,
                    "section_length": 5,
                    "section_name_length": 3,
                    "str_length": 1,
                    "string_length": 5
                },
                "uVar2": {
                    "error_message": 10,
                    "error_msg": 2
                },
                "unaff_R14D": {
                    "flag_bits": 1,
                    "flags": 5,
                    "result": 1,
                    "section_flag_value": 1,
                    "section_flags": 22,
                    "section_flags_result": 1
                },
                "unaff_R15": {
                    "compare_flag": 1,
                    "compare_str": 1,
                    "compare_string": 1,
                    "current_flag": 2,
                    "flag": 2,
                    "flag_string": 1,
                    "section": 1,
                    "section_flag": 2,
                    "section_name": 7,
                    "supported_flags": 13
                },
                "unaff_RBP": {
                    "current_char": 1,
                    "current_flag": 5,
                    "current_position": 2,
                    "current_string": 1,
                    "flag_pointer": 1,
                    "flag_string": 1,
                    "next_flag": 7,
                    "next_section": 4,
                    "remaining_flags": 1,
                    "remaining_str": 1,
                    "section": 1,
                    "section_flag_string": 1,
                    "section_name": 1,
                    "section_pointer": 1,
                    "section_start": 1,
                    "str": 2
                },
                "unaff_retaddr": {
                    "return_address": 28,
                    "return_value": 1
                }
            },
            "called": [
                "FUN_00104290",
                "FUN_00119dd0",
                "FUN_00104270",
                "FUN_001040d0",
                "FUN_00104240",
                "FUN_001045d0",
                "FUN_00104ad6",
                "FUN_00104390",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00104ad6"
            ],
            "code": "\nundefined  [16] parse_section_flags_00104ad6(void)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  char *comma_position;\n  char *next_flag;\n  char *section_flag;\n  size_t flag_length;\n  int string_length;\n  uint section_flags;\n  char *supported_flags;\n  undefined result [16];\n  undefined8 return_address;\n  \n  do {\n    section_flags = section_flags | 0x2000;\n    section_flag = next_flag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (section_flag == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = section_flags;\n                result._8_8_ = return_address;\n                return result;\n              }\n              comma_position = strchr(section_flag,0x2c);\n              if (comma_position == (char *)0x0) {\n                flag_length = strlen(section_flag);\n                string_length = (int)flag_length;\n                next_flag = (char *)0x0;\n              }\n              else {\n                next_flag = comma_position + 1;\n                string_length = (int)comma_position - (int)section_flag;\n              }\n              flag_length = (size_t)string_length;\n              comparison_result = strncasecmp(supported_flags,section_flag,flag_length);\n              if (comparison_result != 0) break;\n              section_flags = section_flags | 1;\n              section_flag = next_flag;\n            }\n            comparison_result = strncasecmp(\"load\",section_flag,flag_length);\n            if (comparison_result != 0) break;\n            section_flags = section_flags | 2;\n            section_flag = next_flag;\n          }\n          comparison_result = strncasecmp(\"noload\",section_flag,flag_length);\n          if (comparison_result != 0) break;\n          section_flags = section_flags | 0x200;\n          section_flag = next_flag;\n        }\n        comparison_result = strncasecmp(\"readonly\",section_flag,flag_length);\n        if (comparison_result != 0) break;\n        section_flags = section_flags | 8;\n        section_flag = next_flag;\n      }\n      comparison_result = strncasecmp(\"debug\",section_flag,flag_length);\n      if (comparison_result == 0) break;\n      comparison_result = strncasecmp(\"code\",section_flag,flag_length);\n      if (comparison_result == 0) {\n        section_flags = section_flags | 0x10;\n        section_flag = next_flag;\n      }\n      else {\n        comparison_result = strncasecmp(\"data\",section_flag,flag_length);\n        if (comparison_result == 0) {\n          section_flags = section_flags | 0x20;\n          section_flag = next_flag;\n        }\n        else {\n          comparison_result = strncasecmp(\"rom\",section_flag,flag_length);\n          if (comparison_result == 0) {\n            section_flags = section_flags | 0x40;\n            section_flag = next_flag;\n          }\n          else {\n            comparison_result = strncasecmp(\"exclude\",section_flag,flag_length);\n            if (comparison_result == 0) {\n              section_flags = section_flags | 0x8000;\n              section_flag = next_flag;\n            }\n            else {\n              comparison_result = strncasecmp(\"share\",section_flag,flag_length);\n              if (comparison_result == 0) {\n                section_flags = section_flags | 0x8000000;\n                section_flag = next_flag;\n              }\n              else {\n                comparison_result = strncasecmp(\"contents\",section_flag,flag_length);\n                if (comparison_result == 0) {\n                  section_flags = section_flags | 0x100;\n                  section_flag = next_flag;\n                }\n                else {\n                  comparison_result = strncasecmp(\"merge\",section_flag,flag_length);\n                  if (comparison_result == 0) {\n                    section_flags = section_flags | 0x800000;\n                    section_flag = next_flag;\n                  }\n                  else {\n                    comparison_result = strncasecmp(\"strings\",section_flag,flag_length);\n                    if (comparison_result != 0) {\n                      comma_position = (char *)xmalloc((long)(string_length + 1));\n                      strncpy(comma_position,section_flag,flag_length);\n                      comma_position[flag_length] = '\\0';\n                      error_message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      non_fatal(error_message,comma_position);\n                      error_message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      fatal(error_message,\n                            \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                           );\n                    }\n                    section_flags = section_flags | 0x1000000;\n                    section_flag = next_flag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "current_name": "parse_section_flags_00104ad6",
            "entrypoint": "0x00104ad6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "__s": "section_flag",
                "auVar6": "result",
                "iVar1": "comparison_result",
                "iVar5": "string_length",
                "pcVar3": "comma_position",
                "sVar4": "flag_length",
                "uVar2": "error_message",
                "unaff_R14D": "section_flags",
                "unaff_R15": "supported_flags",
                "unaff_RBP": "next_flag",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104bba": {
            "additional_data": {
                "FUN_00104bba": {
                    "check_access_permissions": 1,
                    "check_and_mark_segment": 1,
                    "check_and_modify_flags": 1,
                    "check_and_set_flags": 5,
                    "check_and_set_memory_attributes": 1,
                    "check_and_set_permissions": 1,
                    "check_and_update_flags": 2,
                    "check_copied_removed": 1,
                    "check_error_and_set_flags": 2,
                    "check_flags_and_set_values": 1,
                    "copy_and_remove_check": 1,
                    "copy_or_remove_error_check": 1,
                    "handle_error": 1,
                    "process_flags": 1,
                    "update_memory_permissions": 1,
                    "validate_copy_and_remove": 1,
                    "validate_copying": 1,
                    "validate_eax": 1,
                    "validate_memory_permissions": 5,
                    "validate_permissions": 1,
                    "verify_data": 1
                },
                "in_EAX": {
                    "access_flags": 1,
                    "eax_flag": 1,
                    "eax_flags": 3,
                    "eax_input": 1,
                    "eax_state": 1,
                    "eax_status": 1,
                    "eax_value": 9,
                    "flags": 14
                },
                "uVar1": {
                    "error_message": 19,
                    "error_msg": 2
                },
                "unaff_EBP": {
                    "context": 1,
                    "context_flags": 1,
                    "ebp_flag": 2,
                    "ebp_flags": 3,
                    "ebp_input": 1,
                    "ebp_state": 1,
                    "ebp_status": 1,
                    "ebp_value": 11,
                    "memory_protection_flags": 1,
                    "other_flags": 1,
                    "permissions": 2,
                    "register_state": 1,
                    "register_value": 4,
                    "registers": 1
                },
                "unaff_R14": {
                    "address": 3,
                    "base_address": 1,
                    "data_address": 1,
                    "data_ptr": 2,
                    "memory_address": 3,
                    "memory_offset": 1,
                    "offset": 1,
                    "pointer": 1,
                    "r14_address": 1,
                    "r14_input": 1,
                    "r14_offset": 3,
                    "r14_state": 1,
                    "r14_value": 9,
                    "register_address": 1,
                    "result": 1,
                    "target_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00114190"
            ],
            "code": "\nvoid check_error_and_set_flags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 error_message;\n  uint ebp_value;\n  long r14_value;\n  \n  if ((flags & 2) != 0) {\n    error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    fatal(error_message);\n  }\n  if ((((flags & 8) == 0) || ((ebp_value & 0x10) == 0)) && ((ebp_value & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((ebp_value & 0x40) == 0)) && ((ebp_value & 0x60) != 0x60)) {\n      *(uint *)(r14_value + 0x14) = flags | ebp_value;\n      return;\n    }\n    error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    fatal(error_message);\n  }\n  error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  fatal(error_message);\n}\n\n",
            "current_name": "check_error_and_set_flags_00104bba",
            "entrypoint": "0x00104bba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104bba": "check_error_and_set_flags_00104bba",
                "in_EAX": "flags",
                "uVar1": "error_message",
                "unaff_EBP": "ebp_value",
                "unaff_R14": "r14_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104c36": {
            "additional_data": {
                "FUN_00104c36": {
                    "analyze_lines": 1,
                    "parse_and_ignore_rubbish": 2,
                    "parse_and_print_lines": 1,
                    "parse_and_store_lines": 1,
                    "parse_file": 1,
                    "parse_file_lines": 1,
                    "parse_input_lines": 3,
                    "parse_lines": 2,
                    "process_input_lines": 1,
                    "process_lines": 16,
                    "process_text": 1,
                    "sanitize_and_store_line": 1
                },
                "FUN_00104d1c": {
                    "analyze_hashtag": 1,
                    "process_comment": 1
                },
                "bVar4": {
                    "current_byte": 2,
                    "next_byte": 2,
                    "next_char": 10,
                    "next_char_value": 2,
                    "next_character": 3,
                    "next_line_char": 1,
                    "temp_byte": 1
                },
                "dcgettext": {
                    "get_error_message": 1,
                    "get_error_msg": 1
                },
                "htab_find_slot": {
                    "find_slot": 2
                },
                "in_CL": {
                    "current_byte": 1,
                    "current_char": 17,
                    "current_char_val": 1,
                    "current_char_value": 1,
                    "current_character": 7,
                    "current_line_char": 1
                },
                "in_stack_00000008": {
                    "error_arg": 1,
                    "error_message": 4,
                    "error_string": 1,
                    "file_descriptor": 1,
                    "file_name": 6,
                    "file_path": 1,
                    "filename": 3,
                    "format_string": 5,
                    "ignored_line_format": 1,
                    "message": 2,
                    "msg_format": 1,
                    "non_fatal_argument1": 1,
                    "param4": 1,
                    "stack_var1": 1,
                    "translation_context": 1
                },
                "in_stack_00000010": {
                    "callback_arguments": 1,
                    "error": 1,
                    "line_positions": 1,
                    "param5": 1,
                    "result": 3,
                    "result_pointer": 2,
                    "result_ptr": 3,
                    "return_address": 4,
                    "return_address_pointer": 1,
                    "return_address_ptr": 3,
                    "return_pointer": 2,
                    "return_ptr": 2,
                    "return_value": 3,
                    "return_value_pointer": 1,
                    "return_value_ptr": 1,
                    "stack_var2": 1
                },
                "non_fatal": {
                    "display_error_msg": 1,
                    "print_error_message": 1
                },
                "pbVar2": {
                    "temp": 1
                },
                "pbVar3": {
                    "current_byte": 1,
                    "current_char": 2,
                    "line_end_cursor": 1,
                    "line_pointer": 1,
                    "next_char": 2,
                    "next_line": 3,
                    "next_ptr": 2,
                    "next_valid_char": 1,
                    "ptr": 1,
                    "space_char_pos": 1,
                    "temp_character": 1,
                    "temp_pointer": 6,
                    "temp_ptr": 3,
                    "trimmed_line": 1
                },
                "pbVar4": {
                    "temp_char": 2
                },
                "pbVar5": {
                    "char_ptr": 2,
                    "current_char": 1,
                    "current_char_ptr": 1,
                    "current_character": 1,
                    "current_line": 6,
                    "current_line_pointer": 1,
                    "current_pointer": 1,
                    "current_position": 1,
                    "current_ptr": 2,
                    "inner_next_line": 1,
                    "line_end": 1,
                    "line_pointer": 1,
                    "line_ptr": 3,
                    "next_line": 1,
                    "next_line_ptr": 1,
                    "temp_line": 1,
                    "temp_pointer": 1,
                    "temp_ptr_2": 1
                },
                "ppbVar2": {
                    "hash_table_slot": 5,
                    "result_slot": 1,
                    "slot": 4,
                    "slot_address": 1,
                    "slot_pointer": 4,
                    "slot_ptr": 7
                },
                "uVar1": {
                    "error_message": 10,
                    "error_msg": 1,
                    "error_msg_ptr": 1,
                    "error_str": 1,
                    "error_string": 4,
                    "message": 3
                },
                "unaff_EBP": {
                    "counter": 1,
                    "line_count": 9,
                    "line_counter": 5,
                    "line_index": 2,
                    "line_number": 14
                },
                "unaff_R13": {
                    "callback": 1,
                    "callback_function": 2,
                    "dcgettext_argument1": 1,
                    "error_context": 1,
                    "error_message": 1,
                    "error_msg": 1,
                    "file_name": 2,
                    "file_name_ptr": 1,
                    "file_ptr": 1,
                    "filename": 1,
                    "ignored_arg": 1,
                    "param1": 1,
                    "result": 2,
                    "return_address": 7,
                    "return_value": 1,
                    "saved_r13_value": 1,
                    "stack_var": 1
                },
                "unaff_R14": {
                    "current_char": 1,
                    "current_line": 6,
                    "current_line_end": 1,
                    "end_of_line": 2,
                    "last_line_ptr": 1,
                    "line_end": 2,
                    "line_end_pointer": 1,
                    "line_end_ptr": 1,
                    "line_ptr": 1,
                    "line_start": 2,
                    "next_line_ptr": 1,
                    "next_line_start": 1,
                    "param2": 1,
                    "prev_line": 1,
                    "previous_line": 5,
                    "previous_line_pointer": 1,
                    "saved_r14_value": 1,
                    "temp_ptr2": 1
                },
                "unaff_R15": {
                    "current_char": 1,
                    "current_char_ptr": 1,
                    "current_line_end": 1,
                    "current_line_pointer": 1,
                    "current_line_ptr": 2,
                    "current_line_start": 2,
                    "end_of_line": 1,
                    "line_end": 2,
                    "line_ptr": 1,
                    "line_start": 6,
                    "line_start_pointer": 1,
                    "line_start_ptr": 2,
                    "next_line": 3,
                    "next_line_ptr": 1,
                    "param3": 1,
                    "saved_r15_value": 1,
                    "start_of_line": 4
                },
                "unaff_RBX": {
                    "current_line": 9,
                    "current_line_ptr": 1,
                    "input_pointer": 1,
                    "line": 1,
                    "line_buffer": 6,
                    "line_pointer": 2,
                    "line_ptr": 5,
                    "line_start": 1,
                    "previous_line_end": 1,
                    "source_ptr": 1,
                    "start_of_line": 1,
                    "text_pointer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_input_lines_00104c36(void)\n\n{\n  undefined8 error_message;\n  byte **slot_ptr;\n  byte *temp_pointer;\n  byte current_char;\n  byte next_char;\n  byte *current_line;\n  int line_number;\n  byte *current_line;\n  undefined8 return_address;\n  byte *current_line;\n  byte *line_start;\n  undefined8 file_name;\n  undefined8 *return_address;\n  \n  do {\n    current_line = line_start;\n    if (current_char == 9) goto LAB_00104c3f;\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = current_line[1];\n      current_line = current_line + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      next_char = current_line[1];\n      if ((((((next_char == 9) || (next_char == 0x20)) &&\n            ((next_char = current_line[2], next_char == 9 || (next_char == 0x20)))) &&\n           ((next_char = current_line[3], next_char == 9 || (next_char == 0x20)))) &&\n          ((next_char = current_line[4], next_char == 9 || (next_char == 0x20)))) &&\n         ((next_char = current_line[5], next_char == 9 || (next_char == 0x20)))) {\n        next_char = current_line[6];\n        temp_pointer = current_line + 6;\n        if ((next_char == 9) || (next_char == 0x20)) {\n          do {\n            do {\n              next_char = temp_pointer[1];\n              temp_pointer = temp_pointer + 1;\n            } while (next_char == 0x20);\n          } while (next_char == 9);\n        }\n      }\n      if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) {\n        error_message = get_error_msg(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message(error_message,file_name,line_number);\n      }\n    }\nLAB_00114599:\n    *current_line = 0;\n    if (line_start < current_line) {\n      slot_ptr = (byte **)find_slot();\n      *slot_ptr = line_start;\n    }\n    line_number = line_number + 1;\n    current_line = current_line;\n    if (current_line[1] == 0) {\n      *return_address = return_address;\n      return;\n    }\n    for (; next_char = *current_line, current_line = current_line, next_char != 10; current_line = current_line + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          temp_pointer = current_line + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_line = 0;\n          temp_pointer = current_line + 1;\n          if (current_line[1] == 10) {\n            temp_pointer = current_line + 2;\n            current_line = current_line + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          parse_and_process_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *current_line = 0;\n    if (current_line[1] == 0xd) {\n      current_line = current_line + 1;\n      temp_pointer = current_line + 2;\n    }\n    else {\n      temp_pointer = current_line + 1;\n    }\nLAB_00114553:\n    current_char = *current_line;\n    line_start = current_line;\n    while (current_line = temp_pointer, current_char == 0x20) {\nLAB_00104c3f:\n      current_line = line_start + 1;\n      line_start = line_start + 1;\n      temp_pointer = current_line;\n      current_char = *current_line;\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_input_lines_00104c36",
            "entrypoint": "0x00104c36",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104c36": "process_input_lines_00104c36",
                "bVar4": "next_char",
                "dcgettext": "get_error_msg",
                "htab_find_slot": "find_slot",
                "in_CL": "current_char",
                "in_stack_00000008": "file_name",
                "in_stack_00000010": "return_address",
                "non_fatal": "print_error_message",
                "pbVar2": "temp",
                "pbVar3": "temp_pointer",
                "pbVar5": "current_line",
                "ppbVar2": "slot_ptr",
                "uVar1": "error_message",
                "unaff_EBP": "line_number",
                "unaff_R13": "return_address",
                "unaff_R14": "current_line",
                "unaff_R15": "line_start",
                "unaff_RBX": "current_line"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104cc1": {
            "additional_data": {
                "FUN_00104cc1": {
                    "process_and_store_lines": 1,
                    "process_input_lines": 27,
                    "process_lines": 1,
                    "process_lines_and_insert_into_hash_table": 1,
                    "process_lines_and_store": 1
                },
                "LAB_00114553": {
                    "process_end_of_line": 1
                },
                "LAB_00114599": {
                    "process_empty_line": 1
                },
                "LAB_00114676": {
                    "process_special_char": 1
                },
                "bVar4": {
                    "byte_value": 1,
                    "character": 1,
                    "current_byte": 6,
                    "current_byte_value": 1,
                    "current_char": 5,
                    "current_char_byte": 1,
                    "current_char_value": 1,
                    "next_char": 8
                },
                "code_r0x00104cc1": {
                    "process_lines_loop": 1
                },
                "in_R10": {
                    "current": 1,
                    "current_char": 2,
                    "current_line": 6,
                    "current_line_ptr": 1,
                    "current_pos": 1,
                    "current_position": 2,
                    "input_buffer": 1,
                    "input_line": 2,
                    "line": 1,
                    "line_buffer": 1,
                    "line_cursor": 1,
                    "line_end": 2,
                    "line_ptr": 3,
                    "line_start": 2,
                    "line_start_ptr": 1,
                    "ptr_line_break": 1,
                    "r10": 1
                },
                "in_RBX": {
                    "line_ptr": 1
                },
                "non_fatal": {
                    "report_and_process_data": 1
                },
                "param_7": {
                    "context": 2,
                    "error_message": 8,
                    "format_string": 1,
                    "input_message": 1,
                    "line_error": 1,
                    "line_format": 1,
                    "line_num": 1,
                    "line_number": 2,
                    "param_1": 2,
                    "param_2": 1,
                    "param_error_msg": 1,
                    "param_ignored": 3,
                    "param_message": 2,
                    "param_msg": 1
                },
                "param_8": {
                    "error_msg": 1,
                    "error_msg_ptr": 1,
                    "line_end": 1,
                    "output": 6,
                    "output_address": 1,
                    "output_buffer": 1,
                    "output_data": 2,
                    "output_list": 1,
                    "output_parameter": 1,
                    "output_ptr": 2,
                    "output_value": 1,
                    "param_2": 2,
                    "param_8": 1,
                    "param_output": 1,
                    "param_result": 4,
                    "result": 1,
                    "result_address": 1,
                    "result_pointer": 1,
                    "return_value": 1,
                    "return_value_ptr": 1
                },
                "param_9": {
                    "current_line": 2,
                    "error_message": 1,
                    "input_address": 1,
                    "input_buffer": 1,
                    "input_data": 2,
                    "input_line": 8,
                    "line": 3,
                    "line_break": 1,
                    "line_buffer": 3,
                    "line_ptr": 3,
                    "original_line_buffer": 1,
                    "param_3": 1,
                    "param_input": 1,
                    "param_line": 3
                },
                "parse_and_process_lines_00104d1c": {
                    "parse_and_process_lines": 1
                },
                "pbVar2": {
                    "slot": 1,
                    "slot_ptr": 1
                },
                "pbVar3": {
                    "char_ptr": 1,
                    "character": 1,
                    "current_byte": 4,
                    "current_char": 14,
                    "current_char_ptr": 2,
                    "current_character": 1,
                    "current_line_ptr": 1,
                    "ptr_current": 1
                },
                "pbVar4": {
                    "current_char_value": 1
                },
                "pbVar5": {
                    "current_byte": 1,
                    "current_char": 3,
                    "current_char_2": 1,
                    "current_char_ptr": 1,
                    "current_character": 1,
                    "current_line": 4,
                    "current_ptr": 1,
                    "end_ptr": 1,
                    "line": 1,
                    "line_ptr_start": 1,
                    "line_start": 2,
                    "next_byte": 2,
                    "next_character": 1,
                    "next_line": 1,
                    "ptr_current_char": 1,
                    "start": 1,
                    "start_char": 1,
                    "start_of_line": 2,
                    "start_of_line_ptr": 1,
                    "temp_char_ptr": 1,
                    "unaff_rbx_copy": 1
                },
                "ppbVar2": {
                    "hash_ptr": 1,
                    "htab_entry": 1,
                    "htab_slot": 1,
                    "htab_slot_ptr": 1,
                    "slot": 9,
                    "slot_address": 1,
                    "slot_pointer": 2,
                    "slot_ptr": 7
                },
                "uVar1": {
                    "error_message": 9,
                    "error_message_text": 1,
                    "error_msg": 3,
                    "error_msg_ptr": 1,
                    "error_string": 4,
                    "localized_error": 1,
                    "message": 1,
                    "translation": 1
                },
                "unaff_EBP": {
                    "counter": 1,
                    "ebp": 1,
                    "line_count": 9,
                    "line_counter": 2,
                    "line_length": 1,
                    "line_num": 1,
                    "line_number": 14,
                    "num_lines": 1,
                    "num_lines_processed": 1
                },
                "unaff_R13": {
                    "context": 1,
                    "error_code": 1,
                    "file_name": 1,
                    "func_ptr": 1,
                    "function_ptr": 1,
                    "ignore_line": 1,
                    "line_data": 2,
                    "line_number": 2,
                    "line_param": 1,
                    "non_fatal_callback": 1,
                    "output_data": 1,
                    "output_item": 1,
                    "output_value": 2,
                    "param_1": 1,
                    "param_7": 3,
                    "parsed_line": 1,
                    "parsed_value": 1,
                    "r13": 1,
                    "report_data": 1,
                    "result": 3,
                    "return_address": 1,
                    "value": 1,
                    "value_unaff_r13": 1
                },
                "unaff_R14": {
                    "current_char": 1,
                    "current_char_copy": 1,
                    "current_line": 5,
                    "current_line_ptr": 1,
                    "delimiter_pos": 1,
                    "end": 1,
                    "end_of_data": 1,
                    "end_of_file_address": 1,
                    "end_of_line": 2,
                    "last_character_ptr": 1,
                    "last_line": 1,
                    "line_end_ptr": 1,
                    "line_start": 9,
                    "next_line_ptr": 1,
                    "r14": 1,
                    "read_line": 1,
                    "value_unaff_r14": 1
                },
                "unaff_R15": {
                    "buffer": 1,
                    "current_line_end": 1,
                    "end_byte": 1,
                    "end_of_file_ptr": 1,
                    "end_of_input": 1,
                    "end_of_line": 1,
                    "end_of_line_ptr": 1,
                    "first_line": 1,
                    "htab": 1,
                    "htab_end_ptr": 1,
                    "last_line": 1,
                    "line_buffer": 1,
                    "line_end": 7,
                    "line_end_ptr": 1,
                    "line_limit": 1,
                    "next_line": 3,
                    "ptr_last_char": 1,
                    "r15": 1,
                    "rubbish_ptr": 1,
                    "start_of_line": 2,
                    "string_start": 1,
                    "table_entry": 1
                },
                "unaff_RBX": {
                    "current_char": 2,
                    "current_char_ptr": 3,
                    "current_line": 6,
                    "cursor": 1,
                    "first_byte": 1,
                    "line": 1,
                    "line_buffer_ptr": 1,
                    "line_end": 1,
                    "line_pointer": 1,
                    "line_ptr": 1,
                    "line_ptr2": 1,
                    "next_char": 1,
                    "next_line": 2,
                    "next_line_ptr": 1,
                    "ptr_line": 1,
                    "rbx": 1,
                    "remaining_chars": 1,
                    "start_byte": 1,
                    "start_of_line": 2
                }
            },
            "called": [
                "FUN_00104c36",
                "FUN_00104d1c",
                "FUN_00104cc1",
                "FUN_00104240",
                "FUN_00119ed0",
                "FUN_001044a0"
            ],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_input_lines_00104cc1(void)\n\n{\n  undefined8 error_message;\n  byte **slot;\n  byte *current_char;\n  byte next_char;\n  byte *current_line;\n  byte *current_line;\n  int line_number;\n  byte *current_line;\n  undefined8 param_7;\n  byte *line_start;\n  byte *line_end;\n  undefined8 error_message;\n  undefined8 *output;\n  byte *input_line;\n  \nprocess_lines_loop:\n  input_line = current_line;\n  error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  report_and_process_data(error_message,error_message,line_number);\n  current_line = current_line;\n  current_line = input_line;\nprocess_empty_line:\n  do {\n    *current_line = 0;\n    if (line_end < current_line) {\n      slot = (byte **)htab_find_slot();\n      *slot = line_end;\n    }\n    line_number = line_number + 1;\n    current_char = current_line;\n    if (line_start[1] == 0) {\n      *output = param_7;\n      return;\n    }\n    for (; next_char = *current_char, line_start = current_char, next_char != 10; current_char = current_char + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          current_line = current_char + 1;\n          goto process_end_of_line;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_char = 0;\n          current_line = current_char + 1;\n          if (current_char[1] == 10) {\n            current_line = current_char + 2;\n            line_start = current_char + 1;\n          }\n          goto process_end_of_line;\n        }\n        if (next_char == 0x23) {\n          parse_and_process_lines();\n          return;\n        }\n      }\n    }\n    *current_char = 0;\n    if (current_char[1] == 0xd) {\n      line_start = current_char + 1;\n      current_line = current_char + 2;\n    }\n    else {\n      current_line = current_char + 1;\n    }\nprocess_end_of_line:\n    next_char = *current_line;\n    line_end = current_line;\n    while ((next_char == 0x20 || (current_line = line_end, next_char == 9))) {\n      current_line = line_end + 1;\n      line_end = line_end + 1;\n      next_char = *current_line;\n    }\n    do {\n      current_line = current_line;\n      if ((next_char == 10) || (next_char == 0xd)) goto process_special_char;\n      if (next_char == 0) goto process_empty_line;\n      next_char = current_line[1];\n      current_line = current_line + 1;\n    } while ((next_char != 0x20) && (next_char != 9));\n    if ((char)next_char < '\\x0e') {\nprocess_special_char:\n      if ((-0x2402L >> (next_char & 0x3f) & 1U) == 0) goto process_empty_line;\n    }\n    next_char = current_line[1];\n    if ((((((next_char == 9) || (next_char == 0x20)) && ((next_char = current_line[2], next_char == 9 || (next_char == 0x20)))\n          ) && ((next_char = current_line[3], next_char == 9 || (next_char == 0x20)))) &&\n        ((next_char = current_line[4], next_char == 9 || (next_char == 0x20)))) &&\n       ((next_char = current_line[5], next_char == 9 || (next_char == 0x20)))) {\n      next_char = current_line[6];\n      current_char = current_line + 6;\n      if ((next_char == 9) || (next_char == 0x20)) {\n        do {\n          do {\n            next_char = current_char[1];\n            current_char = current_char + 1;\n          } while (next_char == 0x20);\n        } while (next_char == 9);\n      }\n    }\n    if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) goto process_lines_loop;\n  } while( true );\n}\n\n",
            "current_name": "process_input_lines_00104cc1",
            "entrypoint": "0x00104cc1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104cc1": "process_input_lines_00104cc1",
                "LAB_00114553": "process_end_of_line",
                "LAB_00114599": "process_empty_line",
                "LAB_00114676": "process_special_char",
                "bVar4": "next_char",
                "code_r0x00104cc1": "process_lines_loop",
                "in_R10": "current_line",
                "non_fatal": "report_and_process_data",
                "param_7": "error_message",
                "param_8": "output",
                "param_9": "input_line",
                "parse_and_process_lines_00104d1c": "parse_and_process_lines",
                "pbVar2": "slot",
                "pbVar3": "current_char",
                "pbVar5": "current_line",
                "ppbVar2": "slot",
                "uVar1": "error_message",
                "unaff_EBP": "line_number",
                "unaff_R13": "param_7",
                "unaff_R14": "line_start",
                "unaff_R15": "line_end",
                "unaff_RBX": "current_line"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d1c": {
            "additional_data": {
                "FUN_00104d1c": {
                    "parse_and_ignore_rubbish": 1,
                    "parse_and_process_lines": 2,
                    "parse_data": 1,
                    "parse_file_lines": 1,
                    "parse_input_file": 1,
                    "parse_input_lines": 5,
                    "parse_lines": 3,
                    "parse_text": 1,
                    "parse_text_file": 1,
                    "process_data": 1,
                    "process_input_lines": 1,
                    "process_lines": 12,
                    "process_text_lines": 1
                },
                "bVar4": {
                    "ch": 1,
                    "current_byte": 7,
                    "current_char": 9,
                    "current_char_value": 7,
                    "next_char": 1
                },
                "dcgettext": {
                    "get_translated_text": 1
                },
                "htab_find_slot": {
                    "find_slot": 1
                },
                "in_stack_00000008": {
                    "err_msg": 1,
                    "error_buffer": 1,
                    "error_message": 10,
                    "error_msg": 1,
                    "file_name": 3,
                    "file_path": 1,
                    "filename": 3,
                    "format": 1,
                    "format_string": 4,
                    "line_number": 1,
                    "message": 2,
                    "msg": 2,
                    "stack_var1": 1
                },
                "in_stack_00000010": {
                    "error_func": 1,
                    "error_pointer": 1,
                    "result": 2,
                    "result_pointer": 1,
                    "ret_addr": 1,
                    "return_addr": 1,
                    "return_address": 20,
                    "return_address_pointer": 1,
                    "return_value": 2,
                    "stack_var2": 1
                },
                "non_fatal": {
                    "handle_non_fatal": 1
                },
                "pbVar3": {
                    "current_char": 2,
                    "current_token": 3,
                    "end_of_rubbish": 1,
                    "iter_pointer": 1,
                    "more_spaces_ptr": 1,
                    "next_char": 2,
                    "ptr": 1,
                    "rubbish_pointer": 1,
                    "rubbish_ptr": 1,
                    "rubbish_start": 3,
                    "space_or_tab": 1,
                    "space_ptr": 2,
                    "start_of_rubbish": 2,
                    "temp_char": 2,
                    "temp_pointer": 2,
                    "temp_ptr": 2,
                    "temp_var": 1,
                    "trailing_chars_ptr": 1
                },
                "pbVar4": {
                    "current_char": 1
                },
                "pbVar5": {
                    "current_line": 1,
                    "line_pointer": 1,
                    "next_char": 2,
                    "next_line": 19,
                    "next_line_ptr": 5,
                    "next_line_start": 1
                },
                "pbVar6": {
                    "char_pointer": 1,
                    "curr_char2": 1,
                    "curr_char_ptr": 1,
                    "current_char": 1,
                    "current_char_in_line": 1,
                    "current_char_ptr": 2,
                    "current_line": 1,
                    "current_line_ptr": 1,
                    "current_position": 1,
                    "current_word": 1,
                    "line_end": 1,
                    "next_char": 5,
                    "next_char_ptr": 1,
                    "next_word": 1,
                    "space_ptr": 1,
                    "temp_char": 2,
                    "temp_char_pointer": 1,
                    "temp_pointer": 1,
                    "temp_pointer2": 1,
                    "token_pointer": 1,
                    "token_ptr": 1,
                    "trailing_chars": 1
                },
                "pbVar7": {
                    "carriage_return": 1,
                    "carriage_return_char": 1,
                    "current_char_ptr": 1,
                    "current_line_last_char": 1,
                    "end_of_line": 1,
                    "end_of_line_ptr": 1,
                    "line_end": 1,
                    "next_byte": 1,
                    "next_byte_ptr": 1,
                    "next_char": 4,
                    "next_char2": 2,
                    "next_char_in_line": 1,
                    "next_char_ptr": 3,
                    "next_line": 1,
                    "next_line_buffer": 1,
                    "next_line_char": 2,
                    "next_line_char_ptr": 1,
                    "prev_byte": 1,
                    "previous_char": 2,
                    "temp_char": 2
                },
                "ppbVar2": {
                    "entry_ptr": 1,
                    "hash_slot": 3,
                    "hash_table_entry": 2,
                    "hash_table_slot": 10,
                    "hashed_line_ptr": 1,
                    "htab_slot": 1,
                    "line_ptr": 1,
                    "slot": 6,
                    "slot_address": 1,
                    "slot_mem": 1,
                    "slot_ptr": 1
                },
                "uVar1": {
                    "err_msg": 2,
                    "error_message": 9,
                    "error_message_ptr": 1,
                    "error_msg": 3,
                    "error_string": 6,
                    "localized_error_message": 1,
                    "message": 2,
                    "msg": 1,
                    "translation": 1
                },
                "unaff_EBP": {
                    "count": 3,
                    "counter": 2,
                    "ebp": 1,
                    "ebp_value": 1,
                    "index": 1,
                    "line_count": 12,
                    "line_counter": 6,
                    "line_index": 2,
                    "line_number": 3
                },
                "unaff_R13": {
                    "callback": 1,
                    "callback_function": 1,
                    "error_handler": 1,
                    "error_message": 4,
                    "error_string": 1,
                    "file": 1,
                    "file_descriptor": 3,
                    "file_handle": 3,
                    "file_path": 4,
                    "file_ptr": 1,
                    "filename": 2,
                    "func_pointer": 1,
                    "message": 1,
                    "previous_address": 1,
                    "r13": 1,
                    "return_address": 2,
                    "return_value": 1,
                    "user_data": 1
                },
                "unaff_R14": {
                    "curr_line": 1,
                    "curr_line_ptr": 1,
                    "current_line": 20,
                    "current_line_ptr": 1,
                    "current_token_ptr": 1,
                    "line": 1,
                    "line_buffer": 1,
                    "line_pointer": 1,
                    "line_ptr": 1,
                    "line_start": 2,
                    "start_of_line": 1
                },
                "unaff_R15": {
                    "curr_char": 1,
                    "curr_char_ptr": 1,
                    "current_address": 1,
                    "current_char": 16,
                    "current_char_ptr": 1,
                    "current_token_start": 1,
                    "current_word": 1,
                    "iter_start": 1,
                    "line": 1,
                    "line_ptr": 2,
                    "line_start": 3,
                    "line_start_ptr": 1,
                    "start_of_next_line": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid parse_and_process_lines_00104d1c(void)\n\n{\n  undefined8 error_message;\n  byte **hash_table_slot;\n  byte *rubbish_start;\n  byte current_char;\n  byte *next_line;\n  int line_count;\n  byte *next_char;\n  undefined8 file_path;\n  byte *next_char;\n  byte *current_line;\n  byte *current_char;\n  undefined8 error_message;\n  undefined8 *return_address;\n  \n  *current_line = 0;\nLAB_00114520:\n  current_line = current_line + 1;\n  do {\n    current_char = *current_line;\n    next_char = current_line;\n    if (current_char == 10) {\n      *current_line = 0;\n      if (current_line[1] == 0xd) {\n        next_char = current_line + 1;\n        next_line = current_line + 2;\n      }\n      else {\n        next_line = current_line + 1;\n      }\n    }\n    else if ((char)current_char < '\\v') {\n      if (current_char != 0) goto LAB_00114520;\n      next_line = current_line + 1;\n    }\n    else {\n      if (current_char != 0xd) break;\n      *current_line = 0;\n      next_line = current_line + 1;\n      if (current_line[1] == 10) {\n        next_line = current_line + 2;\n        next_char = current_line + 1;\n      }\n    }\n    current_char = *current_char;\n    while ((current_char == 0x20 || (next_char = current_char, current_char == 9))) {\n      next_char = current_char + 1;\n      current_char = current_char + 1;\n      current_char = *next_char;\n    }\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = next_char[1];\n      next_char = next_char + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_char = next_char[1];\n      if ((((((current_char == 9) || (current_char == 0x20)) &&\n            ((current_char = next_char[2], current_char == 9 || (current_char == 0x20)))) &&\n           ((current_char = next_char[3], current_char == 9 || (current_char == 0x20)))) &&\n          ((current_char = next_char[4], current_char == 9 || (current_char == 0x20)))) &&\n         ((current_char = next_char[5], current_char == 9 || (current_char == 0x20)))) {\n        current_char = next_char[6];\n        rubbish_start = next_char + 6;\n        if ((current_char == 9) || (current_char == 0x20)) {\n          do {\n            do {\n              current_char = rubbish_start[1];\n              rubbish_start = rubbish_start + 1;\n            } while (current_char == 0x20);\n          } while (current_char == 9);\n        }\n      }\n      if ((0xd < current_char) || ((-0x2402L >> (current_char & 0x3f) & 1U) != 0)) {\n        error_message = get_translated_text(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        handle_non_fatal(error_message,error_message,line_count);\n      }\n    }\nLAB_00114599:\n    *next_char = 0;\n    if (current_char < next_char) {\n      hash_table_slot = (byte **)find_slot();\n      *hash_table_slot = current_char;\n    }\n    line_count = line_count + 1;\n    current_line = next_line;\n    current_char = next_line;\n    if (next_char[1] == 0) {\n      *return_address = file_path;\n      return;\n    }\n  } while( true );\n  if (current_char == 0x23) {\n    parse_and_process_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "current_name": "parse_and_process_lines_00104d1c",
            "entrypoint": "0x00104d1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d1c": "parse_and_process_lines_00104d1c",
                "bVar4": "current_char",
                "dcgettext": "get_translated_text",
                "htab_find_slot": "find_slot",
                "in_stack_00000008": "error_message",
                "in_stack_00000010": "return_address",
                "non_fatal": "handle_non_fatal",
                "pbVar3": "rubbish_start",
                "pbVar5": "next_line",
                "pbVar6": "next_char",
                "pbVar7": "next_char",
                "ppbVar2": "hash_table_slot",
                "uVar1": "error_message",
                "unaff_EBP": "line_count",
                "unaff_R13": "file_path",
                "unaff_R14": "current_line",
                "unaff_R15": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d25": {
            "additional_data": {
                "FUN_00104d25": {
                    "execute_clean_up": 1,
                    "execute_cleanup": 1,
                    "initialize_and_cleanup": 2,
                    "initialize_and_print_bfd_error_message": 1,
                    "initialize_and_print_error_message": 5,
                    "initialize_and_print_errors": 1,
                    "initialize_and_print_message": 6,
                    "initialize_and_remove": 1,
                    "initialize_and_remove_directory": 2,
                    "initialize_and_report_error": 1,
                    "initialize_application": 3,
                    "initialize_program": 7
                },
                "error_code1": {
                    "code_1": 1,
                    "error1": 1,
                    "error_code1": 2
                },
                "error_code2": {
                    "code_2": 1,
                    "error2": 1,
                    "error_code2": 2
                },
                "error_code3": {
                    "code_3": 1,
                    "error3": 1,
                    "error_code3": 2
                },
                "error_code4": {
                    "code_4": 1,
                    "error4": 1,
                    "error_code4": 2
                },
                "param_7": {
                    "error_code": 4,
                    "error_message": 15,
                    "message": 5,
                    "message_param": 3,
                    "message_parameter": 1,
                    "param": 1
                },
                "print_bfd_error_message_001126c0": {
                    "display_error_message": 1,
                    "print_bfd_error_message": 3,
                    "print_error_message": 27
                },
                "remove_directory_and_free_memory_00114b84": {
                    "clean_up_directory": 2,
                    "clean_up_resources": 1,
                    "cleanup": 2,
                    "cleanup_and_free_memory": 5,
                    "cleanup_application": 2,
                    "cleanup_directory": 5,
                    "cleanup_directory_and_free_memory": 2,
                    "cleanup_directory_and_memory": 1,
                    "cleanup_files_and_memory": 1,
                    "cleanup_memory": 1,
                    "cleanup_program": 1,
                    "cleanup_resources": 2,
                    "remove_directory": 1,
                    "remove_directory_and_free_memory": 5
                }
            },
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid initialize_and_print_bfd_error_message_00104d25(void)\n\n{\n  undefined8 error_message;\n  \n  DAT_00127a40 = 1;\n  bfd_nonfatal_message(0,error_message,0,0);\n  remove_directory_and_free_memory();\n  return;\n}\n\n",
            "current_name": "initialize_and_print_bfd_error_message_00104d25",
            "entrypoint": "0x00104d25",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d25": "initialize_and_print_bfd_error_message_00104d25",
                "param_7": "error_message",
                "remove_directory_and_free_memory_00114b84": "remove_directory_and_free_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ea2": {
            "additional_data": {
                "BVar17": {
                    "negative_size": 1
                },
                "CVar1": {
                    "result": 1
                },
                "DAT_001279eb": {
                    "extract_times": 1
                },
                "FUNC_00114e50": {
                    "func1": 1
                },
                "FUN_00104ea2": {
                    "archive_copy": 1,
                    "copy_and_extract_archive": 1,
                    "copy_and_extract_files_from_archive": 2,
                    "copy_archive_files": 1,
                    "copy_files_from_archive": 3,
                    "copy_object_from_archive": 1,
                    "extract_and_copy_archive_files": 2,
                    "extract_and_copy_files": 5,
                    "extract_and_copy_files_from_archive": 12,
                    "handle_archive_file": 1
                },
                "IVar2": {
                    "architecture": 1
                },
                "InStack_00000030": {
                    "print_mode": 1
                },
                "LVar12": {
                    "size": 1
                },
                "LVar14": {
                    "bytes_written": 1
                },
                "LVar5": {
                    "bytes_read": 1,
                    "bytes_written": 1
                },
                "PCVar10": {
                    "error_message": 1
                },
                "PCVar13": {
                    "close_function": 1
                },
                "PCVar15": {
                    "path": 1
                },
                "PCVar7": {
                    "curr_path": 1
                },
                "PIVar9": {
                    "errno_ptr": 1
                },
                "PPCVar3": {
                    "archived_file": 1
                },
                "PPCVar6": {
                    "output_file": 1
                },
                "PSVar16": {
                    "stat_ptr": 1
                },
                "PUVar8": {
                    "temp_dir_info": 1
                },
                "PVVar4": {
                    "buffer": 1
                },
                "Param_10": {
                    "archive_path": 1
                },
                "Param_11": {
                    "mode": 1
                },
                "Param_18": {
                    "file_permissions": 1
                },
                "Param_19": {
                    "file_size": 1
                },
                "Param_7": {
                    "input_file": 1
                },
                "Param_8": {
                    "file_offset_ptr": 1
                },
                "Param_9": {
                    "output_dir": 1
                },
                "UVAR11": {
                    "message": 1
                },
                "Unaff_EBX": {
                    "stat_error": 1
                },
                "Unaff_R12": {
                    "temp_dir_path": 1
                },
                "Unaff_R13": {
                    "archive_info": 1
                },
                "Unaff_R15": {
                    "archive": 1
                },
                "Unaff_RBP": {
                    "file_stats": 1
                },
                "Unaff_Retaddr": {
                    "return_address": 1
                },
                "__errno_location": {
                    "get_errno_location": 1
                },
                "arguments": {
                    "format_params": 1
                },
                "bVar17": {
                    "bit_flag": 1,
                    "bit_value": 1,
                    "bool_value": 1,
                    "byte_flag": 1,
                    "byte_value": 4,
                    "byte_var": 1,
                    "byte_var17": 1,
                    "dummy_byte": 1,
                    "flag": 1,
                    "is_recursive": 1,
                    "is_stat_done": 1,
                    "negative_flag": 1,
                    "should_create_temp_dir": 1,
                    "stack_alignment": 1,
                    "step": 1
                },
                "bVarX": {
                    "descriptive_variable": 1
                },
                "cVar1": {
                    "copy_result": 2,
                    "copy_success": 4,
                    "copy_success_flag": 1,
                    "copy_successful": 2,
                    "flag": 1,
                    "is_success": 1,
                    "result": 5,
                    "return_value": 2,
                    "status_code": 1,
                    "success": 2
                },
                "cVarX": {
                    "descriptive_variable_x": 1
                },
                "chmod": {
                    "change_file_mode": 1
                },
                "create_temp_directory_0011a0e0": {
                    "create_temp_directory": 2
                },
                "dcgettext": {
                    "get_translated_string": 1
                },
                "error_code1": {
                    "error_code1": 2,
                    "error_code_1": 1
                },
                "error_code2": {
                    "error_code2": 2,
                    "error_code_2": 1
                },
                "error_code3": {
                    "error_code3": 2,
                    "error_code_3": 1
                },
                "error_code4": {
                    "error_code4": 2,
                    "error_code_4": 1
                },
                "error_message": {
                    "error_message": 1
                },
                "extract_and_copy_files_from_archive_001052a2": {
                    "extract_and_copy_file_from_archive": 1,
                    "extract_and_copy_files_from_archive2": 1,
                    "recursive_extract_and_copy_files": 1
                },
                "file_info": {
                    "file_info": 1
                },
                "file_path": {
                    "file_path": 1
                },
                "free": {
                    "free_memory": 1
                },
                "get_formatted_string_001125fa": {
                    "format_string": 1,
                    "get_formatted_string": 1
                },
                "iVar2": {
                    "arch": 2,
                    "arch_result": 2,
                    "arch_type": 7,
                    "arch_value": 1,
                    "architecture": 5,
                    "bfd_arch": 1,
                    "bfd_architecture": 1,
                    "integer_value": 2
                },
                "iVarX": {
                    "descriptive_variable_x": 1
                },
                "in_stack_00000030": {
                    "close_flags": 1,
                    "copy_flag": 1,
                    "descriptive_parameter": 1,
                    "flag": 1,
                    "print_format": 1,
                    "show_copy_message": 1,
                    "stack_var": 1,
                    "unknown_byte": 1,
                    "unknown_format": 1,
                    "unknown_parameter": 1
                },
                "input": {
                    "input": 1
                },
                "lVar12": {
                    "bytes_remaining": 1,
                    "file_info": 1,
                    "file_offset": 1,
                    "file_pos": 1,
                    "file_size": 5,
                    "file_size_remaining": 1,
                    "remaining_bytes": 2,
                    "remaining_data": 1,
                    "remaining_file_size": 2,
                    "remaining_size": 5,
                    "size": 1,
                    "temp_dir_size": 1,
                    "tempdir_creation_result": 1
                },
                "lVar14": {
                    "buffer_size": 2,
                    "bytes_read": 2,
                    "bytes_read_or_written": 2,
                    "bytes_to_copy": 1,
                    "bytes_to_read": 1,
                    "bytes_to_write": 3,
                    "bytes_written": 4,
                    "data_size": 1,
                    "read_size": 4
                },
                "lVar5": {
                    "bytes_read": 14,
                    "bytes_remaining": 1,
                    "bytes_written": 2,
                    "file_read_or_write_size": 1,
                    "function_return_value": 1,
                    "read_result": 1
                },
                "lVarX": {
                    "descriptive_variable_x": 1
                },
                "make_tempdir": {
                    "create_temp_dir": 1
                },
                "non_fatal": {
                    "print_non_fatal_error_message": 1
                },
                "param_10": {
                    "archive_file": 1,
                    "archive_file_name": 2,
                    "archive_file_path": 3,
                    "archive_file_pointer": 1,
                    "archive_filename": 1,
                    "archive_path": 1,
                    "descriptive_parameter": 1,
                    "file_format": 1,
                    "input_archive_path": 1,
                    "input_file": 2,
                    "input_file_path": 1,
                    "input_file_ptr": 1,
                    "output_dir_path": 1,
                    "output_file_name": 1,
                    "output_file_path": 2,
                    "param10": 1,
                    "param_pointer10": 1,
                    "temp_file": 1,
                    "temp_file_name": 1,
                    "temp_file_path": 1,
                    "temp_file_path_ptr": 1
                },
                "param_11": {
                    "access_mode": 3,
                    "archive_file_name": 1,
                    "descriptive_parameter": 1,
                    "format_version": 1,
                    "mode": 5,
                    "open_flags": 2,
                    "open_mode": 3,
                    "output_file_path": 3,
                    "output_filename": 2,
                    "param_var11": 1,
                    "target_file_path": 1,
                    "write_flags": 1,
                    "write_mode": 4
                },
                "param_18": {
                    "chmod_permissions": 1,
                    "chmod_value": 1,
                    "descriptive_parameter": 1,
                    "file_mod_time": 1,
                    "file_mode": 1,
                    "file_permission": 3,
                    "file_permissions": 12,
                    "file_perms": 1,
                    "permission": 2,
                    "permission_flags": 1,
                    "permissions": 2
                },
                "param_19": {
                    "archive_file_size": 1,
                    "archive_size": 2,
                    "base_file_size": 1,
                    "descriptive_parameter": 1,
                    "expected_file_size": 1,
                    "file_size": 15,
                    "temp_size": 1,
                    "total_file_size": 2,
                    "total_size": 2
                },
                "param_7": {
                    "bfd_object_path": 1,
                    "descriptive_parameter": 1,
                    "file_paths": 1,
                    "input_file": 3,
                    "input_file_name": 1,
                    "input_file_path": 2,
                    "input_files": 1,
                    "output_directory": 1,
                    "output_file_name": 1,
                    "output_file_path": 3,
                    "output_file_ptr": 1,
                    "output_path": 2,
                    "param7": 1,
                    "param_pointer7": 1,
                    "source_file": 1,
                    "source_file_path": 1,
                    "source_file_paths": 1,
                    "source_file_ptr": 1,
                    "source_path": 1,
                    "tmp_input_arg": 1
                },
                "param_8": {
                    "buffer": 1,
                    "bytes_read": 1,
                    "bytes_read_variable": 1,
                    "bytes_remaining": 2,
                    "current_file_offset": 1,
                    "descriptive_parameter": 1,
                    "file_offset": 1,
                    "file_size": 1,
                    "file_size_pointer": 1,
                    "out_var": 1,
                    "output_stat_address": 1,
                    "param8": 1,
                    "param_pointer8": 1,
                    "source_file_sizes": 1,
                    "stat_pointer_pointer": 1,
                    "temp_dir_flag_ptr": 1,
                    "temp_dir_info": 1,
                    "temp_dir_node_address": 1,
                    "temp_dir_ptr": 1,
                    "temp_directory_path": 1,
                    "temp_file_handles": 1,
                    "temp_files": 1,
                    "temp_path": 1,
                    "tempdir_info_ptr": 1,
                    "tempdir_pointer": 1,
                    "tmp_long_var": 1
                },
                "param_9": {
                    "descriptive_parameter": 1,
                    "destination_directory": 1,
                    "input_dir_path": 1,
                    "param9": 1,
                    "param_pointer9": 1,
                    "temp_dir": 3,
                    "temp_dir_name": 2,
                    "temp_dir_path": 8,
                    "temp_directory": 3,
                    "temp_directory_name": 1,
                    "temp_directory_path": 2,
                    "tempdir_path": 2
                },
                "param_X": {
                    "descriptive_parameter_x": 1
                },
                "path": {
                    "path": 1
                },
                "pcFunctionName": {
                    "function_name": 1
                },
                "pcVar10": {
                    "archive_member": 1,
                    "current_file": 3,
                    "current_file_path": 1,
                    "error_message": 5,
                    "file_name": 3,
                    "file_name_ptr": 1,
                    "file_path": 2,
                    "filename": 3,
                    "source_file": 1
                },
                "pcVar13": {
                    "bfd_close_function": 1,
                    "close_func": 1,
                    "close_function": 11,
                    "close_function_pointer": 2,
                    "close_function_ptr": 1
                },
                "pcVar15": {
                    "arch_member": 1,
                    "current_character": 1,
                    "current_file_char_ptr2": 1,
                    "file_name": 1,
                    "next_char": 2,
                    "path": 1,
                    "path_char": 1,
                    "path_pointer": 1,
                    "path_separator": 1,
                    "path_validator": 1,
                    "pathname": 1,
                    "potential_illegal_pathname": 1,
                    "rest_of_file_name": 1,
                    "slash_ptr": 1,
                    "sub_path": 1,
                    "temp_path": 2
                },
                "pcVar7": {
                    "curr_path_ptr": 1,
                    "current": 1,
                    "current_char": 5,
                    "current_character": 2,
                    "current_file_char_ptr": 1,
                    "current_file_path": 2,
                    "current_path": 6,
                    "current_path_char": 1,
                    "current_pathname": 1,
                    "file_path": 1,
                    "path": 1
                },
                "pcVarX": {
                    "descriptive_variable": 1
                },
                "piVar9": {
                    "errno_location": 3,
                    "errno_pointer": 2,
                    "errno_ptr": 2,
                    "error_code": 1,
                    "error_num_ptr": 1,
                    "error_number": 5,
                    "temp_dir_error": 1
                },
                "ppcVar13": {
                    "close_fn_ptr": 1
                },
                "ppcVar15": {
                    "file_path": 1
                },
                "ppcVar3": {
                    "archive_element": 1,
                    "archive_entry": 1,
                    "archive_file_ptr2": 1,
                    "archive_next_file_pointer": 1,
                    "archived_file": 1,
                    "archived_file_handle": 1,
                    "archived_file_info": 1,
                    "archived_file_pointer": 2,
                    "archived_files": 1,
                    "archived_files_object": 1,
                    "archived_files_ptr": 2,
                    "check_format_result": 1,
                    "file_entry": 1,
                    "formatted_string": 1,
                    "next_archived_file": 1,
                    "stat_archive_file": 1,
                    "stat_next_archived_file": 1,
                    "temp_file": 1
                },
                "ppcVar6": {
                    "archive": 2,
                    "archive_file": 5,
                    "archive_file_handle": 1,
                    "archive_file_pointer": 2,
                    "archive_file_ptr": 1,
                    "bfd_file": 2,
                    "bfd_handle": 1,
                    "bfd_output_object": 1,
                    "output_file": 10,
                    "output_file_ptr": 1,
                    "read_file_ptr": 1
                },
                "ppcVarX": {
                    "descriptive_variable_x": 1
                },
                "ppvVar6": {
                    "file_descriptor": 1
                },
                "print_bfd_error_message_001126c0": {
                    "print_bfd_error_message2": 1,
                    "print_error_message": 1
                },
                "print_bfd_error_message_0011a110": {
                    "print_bfd_error_message": 1,
                    "print_error_message": 1
                },
                "printf": {
                    "print_formatted_string": 1
                },
                "psVar16": {
                    "archive_stat": 1,
                    "file_info": 4,
                    "file_information_ptr": 1,
                    "file_stat": 1,
                    "file_stat_pointer": 1,
                    "file_stats": 1,
                    "stat_buffer": 3,
                    "stat_info": 1,
                    "stat_pointer": 2,
                    "stat_ptr": 2,
                    "stat_result": 1,
                    "stat_struct": 1
                },
                "psVarX": {
                    "descriptive_variable": 1
                },
                "puVar8": {
                    "context_ptr": 1,
                    "current_tempdir_info": 1,
                    "new_context": 1,
                    "pointer_value": 1,
                    "temp_dir_data": 1,
                    "temp_dir_info": 4,
                    "temp_dir_node": 1,
                    "temp_dir_ptr": 1,
                    "temp_dir_values": 1,
                    "temp_directory_handle": 1,
                    "temp_file_info": 1,
                    "tempdir_info": 1,
                    "tempdir_pointer": 1
                },
                "pvVar4": {
                    "buffer": 11,
                    "data_buffer": 1,
                    "memory_pointer": 1,
                    "temp_buffer": 1,
                    "temp_dir": 1,
                    "temp_dir_path": 1,
                    "temp_dir_path_dup": 1,
                    "temp_dir_pointer": 1,
                    "temp_directory": 1,
                    "temp_memory": 1
                },
                "pvVarX": {
                    "descriptive_variable_x": 1
                },
                "remove_directory_and_free_memory_00114b84": {
                    "clean_up_temp_directory": 1,
                    "remove_directory_and_free_memory": 1
                },
                "report_and_process_data_00119ed0": {
                    "report_and_process_data2": 1
                },
                "rmdir": {
                    "remove_directory": 1
                },
                "set_file_modification_time_0011a350": {
                    "set_file_modification_time": 2
                },
                "strerror": {
                    "get_str_error_message": 1
                },
                "uVar11": {
                    "error_message": 7,
                    "localized_error_message": 1,
                    "message": 1,
                    "message_str": 1,
                    "text": 1,
                    "text_var": 1,
                    "translated_error_message": 2
                },
                "uVarX": {
                    "descriptive_variable_x": 1
                },
                "unaff_EBX": {
                    "descriptive_variable": 1,
                    "ebx_value": 1,
                    "error_code": 2,
                    "error_flag": 1,
                    "is_archive_file": 1,
                    "stat_error": 9,
                    "stat_error_flag": 1,
                    "stat_result": 7
                },
                "unaff_R12": {
                    "archive_file_name": 1,
                    "archive_file_path": 4,
                    "archive_filename": 1,
                    "archive_name": 1,
                    "archive_path": 7,
                    "archive_path_ptr": 1,
                    "descriptive_variable": 1,
                    "destination_dir": 1,
                    "input_file_path": 1,
                    "original_path": 1,
                    "output_directory": 1,
                    "temp_dir": 1,
                    "temp_dir_path": 3,
                    "temp_directory": 1,
                    "temp_directory_path": 1,
                    "temp_directory_path_copy": 1
                },
                "unaff_R13": {
                    "archive_data": 1,
                    "archive_file_info": 1,
                    "context": 1,
                    "context_ptr": 1,
                    "descriptive_variable": 1,
                    "file_copy": 1,
                    "file_list": 1,
                    "temp_dir_data": 1,
                    "temp_dir_info_pointer": 1,
                    "temp_dir_info_ptr": 1,
                    "temp_dir_list": 2,
                    "temp_dir_node": 1,
                    "temp_dir_struct": 1,
                    "temp_directories": 1,
                    "temp_directory": 1,
                    "temp_directory_list": 1,
                    "temp_directory_node": 1,
                    "temp_dirs": 2,
                    "temp_file_info": 1,
                    "tempdir_filename": 1,
                    "tempdir_info": 1
                },
                "unaff_R15": {
                    "arch_file": 1,
                    "arch_file_ptr": 1,
                    "archive": 1,
                    "archive_file": 1,
                    "archive_file_path_copy": 1,
                    "archive_formats": 1,
                    "archive_pointer": 1,
                    "archive_ptr": 1,
                    "archived_files": 3,
                    "archived_files_list": 1,
                    "bfd_handler": 1,
                    "bfd_ptrs": 1,
                    "current_archive": 1,
                    "descriptive_variable": 1,
                    "file_data": 1,
                    "file_list": 1,
                    "file_names": 1,
                    "input_archive_ptr": 1,
                    "input_arg": 1,
                    "input_file": 4,
                    "input_files": 1
                },
                "unaff_RBP": {
                    "descriptive_variable": 1,
                    "file_info": 6,
                    "file_information": 1,
                    "file_stat": 2,
                    "file_stat_buffer": 1,
                    "file_stat_pointer": 1,
                    "file_stat_ptr": 1,
                    "file_stats": 1,
                    "output_stat": 1,
                    "stat_buf_ptr": 1,
                    "stat_buffer": 3,
                    "stat_data": 1,
                    "stat_info": 1,
                    "stat_result": 1,
                    "stat_result_pointer": 1,
                    "stat_struct": 1,
                    "tmp_file_stats": 1
                },
                "unaff_RBX": {
                    "stat_result": 1
                },
                "unaff_retaddr": {
                    "descriptive_variable": 1,
                    "ret_addr": 1,
                    "return_addr": 1,
                    "return_address": 18
                },
                "unlink": {
                    "remove_file": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                },
                "xstrdup": {
                    "duplicate_string": 1
                }
            },
            "called": [
                "FUN_00104820",
                "FUN_00104ea2",
                "FUN_00104870",
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00104690",
                "FUN_001040c0",
                "FUN_00104810",
                "FUN_001040b0",
                "FUN_00104908",
                "FUN_00104900",
                "FUN_00104570",
                "FUN_00104240",
                "FUN_0011a0e0",
                "FUN_00104390",
                "FUN_00119ed0",
                "FUN_001043d0",
                "FUN_001044f0",
                "FUN_001284e0",
                "FUN_0011a110",
                "FUN_00104890",
                "FUN_00104320",
                "FUN_001042a0",
                "FUN_00128508",
                "FUN_001048e0",
                "FUN_001048f0",
                "FUN_001052a2",
                "FUN_00114b84",
                "FUN_001125fa",
                "FUN_0011a350",
                "FUN_00104530",
                "FUN_001046d0",
                "FUN_001041f0",
                "FUN_00104230"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid copy_and_extract_files_from_archive_00104ea2(void)\n\n{\n  char result;\n  int arch_type;\n  char **archived_file_pointer;\n  void *buffer;\n  long bytes_read;\n  char **output_file;\n  char *current_path;\n  undefined8 *temp_dir_info;\n  int *error_number;\n  char *error_message;\n  undefined8 error_message;\n  long remaining_size;\n  code *close_function;\n  long bytes_written;\n  int stat_error;\n  stat *file_info;\n  char *next_char;\n  stat *file_info;\n  char *archive_path;\n  undefined8 *temp_dirs;\n  char **input_file;\n  byte byte_value;\n  undefined8 return_address;\n  undefined8 *output_file_path;\n  long *bytes_remaining;\n  char *temp_dir_path;\n  undefined8 *archive_file_path;\n  undefined8 mode;\n  undefined8 unknown_format;\n  uint file_permissions;\n  long file_size;\n  \n  byte_value = 0;\ncode_r0x00104ea2:\n  output_file = (char **)bfd_openw(archive_path,mode);\n  if (output_file == (char **)0x0) {\nLAB_00104e80:\n    bfd_nonfatal_message(archive_path,0,0,0);\nLAB_00104e93:\n    DAT_00127a40 = 1;\n  }\n  else {\nLAB_00114a5f:\n    result = copy_object(input_file,output_file,return_address);\n    if (result == '\\0') {\n      arch_type = bfd_get_arch(input_file);\n      if (arch_type == 0) goto LAB_00104d75;\n      result = bfd_close_all_done(output_file);\n      if (result != '\\0') goto LAB_00104ec9;\n      bfd_nonfatal_message(archive_path,0,0,0);\n      goto LAB_00104ec9;\n    }\n    result = bfd_close(output_file);\n    output_file = input_file;\n    if (result == '\\0') {\n      bfd_nonfatal_message(archive_path,0,0,0);\n      DAT_00127a40 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279eb != '\\0') && (stat_error == 0)) {\n      set_times(archive_path,file_info);\n    }\n    remaining_size = bfd_openr(archive_path,mode);\n    temp_dirs[2] = remaining_size;\n    *bytes_remaining = remaining_size;\n    bytes_remaining = (long *)(remaining_size + 0xf0);\n    input_file = (char **)bfd_openr_next_archived_file(archive_file_path,output_file);\n    bfd_close(output_file);\n    while ((DAT_00127a40 == 0 && (input_file != (char **)0x0))) {\n      error_message = *input_file;\n      current_path = error_message;\n      if (*error_message == '/') {\nLAB_0010527d:\n        error_message = get_translated_string(0,\"illegal pathname found in archive member: %s\",5);\n        print_non_fatal_error_message(error_message,error_message);\n        goto LAB_00104e93;\n      }\n      while (*current_path != '\\0') {\n        next_char = current_path;\n        if ((*current_path == '.') && (next_char = current_path + 1, current_path[1] == '.')) {\n          next_char = current_path + 2;\n          if ((current_path[2] == '\\0') || (current_path[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*next_char != '\\0' && (*next_char != '/')); next_char = next_char + 1) {\n        }\n        current_path = next_char;\n        if (*next_char == '/') {\n          extract_and_copy_files_from_archive2();\n          return;\n        }\n      }\n      file_info = (stat *)&stack0x00000050;\n      archive_path = (char *)concat(temp_dir_path,&DAT_0011b47d);\n      arch_type = stat(archive_path,file_info);\n      temp_dir_info = temp_dirs;\n      if (-1 < arch_type) {\n        remaining_size = create_temp_dir(archive_path);\n        free_memory(archive_path);\n        if (remaining_size == 0) {\n          error_number = get_errno_location();\n          error_message = get_str_error_message(*error_number);\n          error_message = get_translated_string(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_non_fatal_error_message(error_message,error_message);\n          goto LAB_00104e93;\n        }\n        temp_dir_info = (undefined8 *)allocate_memory(0x18);\n        error_message = *input_file;\n        *temp_dir_info = temp_dirs;\n        temp_dir_info[2] = 0;\n        temp_dir_info[1] = remaining_size;\n        archive_path = (char *)concat(remaining_size,&DAT_0011b47d,error_message);\n      }\n      stat_error = 0;\n      if (DAT_001279eb != '\\0') {\n        file_info = file_info;\n        for (remaining_size = 0x24; remaining_size != 0; remaining_size = remaining_size + -1) {\n          *(undefined4 *)&file_info->st_dev = 0;\n          file_info = (stat *)((long)file_info + (ulong)byte_value * -8 + 4);\n        }\n        output_file = (char **)input_file[0x1d];\n        if ((char **)input_file[0x1d] == (char **)0x0) {\n          output_file = input_file;\n        }\n        stat_error = (**(code **)(output_file[1] + 0x1e8))(input_file,file_info);\n        if (stat_error != 0) {\n          error_message = *input_file;\n          error_message = get_translated_string(0,\"internal stat error on %s\",5);\n          print_non_fatal_error_message(error_message,error_message);\n        }\n      }\n      temp_dirs = (undefined8 *)allocate_memory(0x18);\n      temp_dirs[1] = archive_path;\n      *temp_dirs = temp_dir_info;\n      temp_dirs[2] = 0;\n      result = bfd_check_format(input_file,1);\n      if (result != '\\0') {\n        if (unknown_format._7_1_ != '\\0') goto code_r0x00104ea2;\n        output_file = (char **)bfd_openw(archive_path,*(undefined8 *)input_file[1]);\n        if (output_file == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      error_message = get_translated_string(0,\"Unable to recognise the format of file\",5);\n      bfd_nonfatal_message(0,input_file,0,error_message);\n      output_file = (char **)bfd_openw(archive_path,mode);\n      if (output_file == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      archived_file_pointer = (char **)input_file[0x1d];\n      if ((char **)input_file[0x1d] == (char **)0x0) {\n        archived_file_pointer = input_file;\n      }\n      arch_type = (**(code **)(archived_file_pointer[1] + 0x1e8))(input_file);\n      remaining_size = file_size;\n      if (arch_type == 0) {\n        if (file_size < 0) {\n          bfd_get_archive_filename(input_file);\n          error_message = get_translated_string(0,\"stat returns negative size for `%s\\'\",5);\n          print_non_fatal_error_message(error_message);\n        }\n        else {\n          arch_type = bfd_seek(input_file,0,0);\n          if (arch_type == 0) {\n            if (DAT_001279e9 != '\\0') {\n              error_message = *output_file;\n              error_message = bfd_get_archive_filename(input_file);\n              current_path = (char *)get_translated_string(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              print_formatted_string(current_path,error_message,error_message);\n            }\n            buffer = (void *)allocate_memory(0x2000);\n            while( true ) {\n              if (remaining_size == 0) {\n                change_file_mode(*output_file,file_permissions | 0x100);\n                free_memory(buffer);\n                result = bfd_close_all_done(output_file);\n                output_file = input_file;\n                if (result == '\\0') {\n                  bfd_nonfatal_message(archive_path,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              bytes_written = 0x2000;\n              if (remaining_size < 0x2001) {\n                bytes_written = remaining_size;\n              }\n              bytes_read = bfd_bread(buffer,bytes_written,input_file);\n              archived_file_pointer = input_file;\n              if ((bytes_written != bytes_read) ||\n                 (bytes_read = bfd_bwrite(buffer,bytes_written,output_file), archived_file_pointer = output_file, bytes_written != bytes_read))\n              break;\n              remaining_size = remaining_size - bytes_written;\n            }\n            bfd_nonfatal_message(0,archived_file_pointer,0,0);\n            free_memory(buffer);\n          }\n          else {\n            error_message = bfd_get_archive_filename(input_file);\n            bfd_nonfatal(error_message);\n          }\n        }\n      }\n      else {\n        bfd_nonfatal_message(0,input_file,0,0);\n      }\n      result = bfd_close_all_done(output_file);\n      if (result == '\\0') {\n        bfd_nonfatal_message(archive_path,0,0,0);\n      }\nLAB_00104ec9:\n      remove_file(archive_path);\n      DAT_00127a40 = 1;\n    }\n    *bytes_remaining = 0;\n    buffer = (void *)duplicate_string(*output_file_path);\n    if (DAT_00127a40 == 0) {\n      close_function = bfd_close;\n    }\n    else {\n      close_function = bfd_close_all_done;\n    }\n    result = (*close_function)(output_file_path);\n    if (result == '\\0') {\n      DAT_00127a40 = 1;\n      bfd_nonfatal_message(buffer,0,0,0);\n    }\n    free_memory(buffer);\n    buffer = (void *)duplicate_string(*archive_file_path);\n    result = bfd_close(archive_file_path);\n    if (result == '\\0') {\n      DAT_00127a40 = 1;\n      bfd_nonfatal_message(buffer,0,0,0);\n    }\n    free_memory(buffer);\n  }\n  while (temp_dirs != (undefined8 *)0x0) {\n    if (temp_dirs[2] == 0) {\n      remove_directory((char *)temp_dirs[1]);\n    }\n    else {\n      bfd_close();\n      remove_file((char *)temp_dirs[1]);\n    }\n    free_memory((void *)temp_dirs[1]);\n    temp_dir_info = (undefined8 *)*temp_dirs;\n    free_memory(temp_dirs);\n    temp_dirs = temp_dir_info;\n  }\n  remove_directory(temp_dir_path);\n  free_memory(temp_dir_path);\n  return;\n}\n\n",
            "current_name": "copy_and_extract_files_from_archive_00104ea2",
            "entrypoint": "0x00104ea2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ea2": "copy_and_extract_files_from_archive_00104ea2",
                "__errno_location": "get_errno_location",
                "bVar17": "byte_value",
                "cVar1": "result",
                "chmod": "change_file_mode",
                "dcgettext": "get_translated_string",
                "extract_and_copy_files_from_archive_001052a2": "extract_and_copy_files_from_archive2",
                "free": "free_memory",
                "iVar2": "arch_type",
                "in_stack_00000030": "unknown_format",
                "lVar12": "remaining_size",
                "lVar14": "bytes_written",
                "lVar5": "bytes_read",
                "make_tempdir": "create_temp_dir",
                "non_fatal": "print_non_fatal_error_message",
                "param_10": "archive_file_path",
                "param_11": "mode",
                "param_18": "file_permissions",
                "param_19": "file_size",
                "param_7": "output_file_path",
                "param_8": "bytes_remaining",
                "param_9": "temp_dir_path",
                "pcVar10": "error_message",
                "pcVar13": "close_function",
                "pcVar15": "next_char",
                "pcVar7": "current_path",
                "piVar9": "error_number",
                "ppcVar3": "archived_file_pointer",
                "ppcVar6": "output_file",
                "printf": "print_formatted_string",
                "psVar16": "file_info",
                "puVar8": "temp_dir_info",
                "pvVar4": "buffer",
                "rmdir": "remove_directory",
                "strerror": "get_str_error_message",
                "uVar11": "error_message",
                "unaff_EBX": "stat_error",
                "unaff_R12": "archive_path",
                "unaff_R13": "temp_dirs",
                "unaff_R15": "input_file",
                "unaff_RBP": "file_info",
                "unaff_retaddr": "return_address",
                "unlink": "remove_file",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001052a2": {
            "additional_data": {
                "DAT_0011b47d": {
                    "directory_separator": 1
                },
                "DAT_001279e9": {
                    "unknown_file_size_flag": 1
                },
                "DAT_001279eb": {
                    "valid_stat_flag": 1
                },
                "DAT_00127a40": {
                    "non_fatal_error_flag": 1
                },
                "FUN_001052a2": {
                    "copy_and_archive": 1,
                    "copy_and_extract": 1,
                    "copy_archive": 8,
                    "copy_archive_contents": 1,
                    "copy_archive_file": 2,
                    "copy_archive_files": 3,
                    "copy_archive_member": 1,
                    "copy_files_from_archive": 3,
                    "extract_and_copy_archive": 4,
                    "extract_and_copy_archive_files": 1,
                    "extract_and_copy_files": 1,
                    "extract_and_copy_files_from_archive": 1,
                    "extract_archive": 2,
                    "extract_archived_files": 1,
                    "process_archive": 1
                },
                "__errno_location": {
                    "get_errno_location": 1
                },
                "__format": {
                    "char_ptr_var": 1,
                    "error_format": 3,
                    "error_message": 2,
                    "error_message_format": 1,
                    "error_msg_format": 2,
                    "format_str": 2,
                    "format_string": 10,
                    "message_format": 2,
                    "msg_format": 1,
                    "print_format": 1,
                    "printf_format": 1
                },
                "bVar18": {
                    "bool_value": 1,
                    "boolean_var": 1,
                    "byte": 1,
                    "byte_flag": 2,
                    "byte_value": 1,
                    "byte_var": 5,
                    "byte_var18": 3,
                    "flag": 4,
                    "is_copying": 1,
                    "is_negative": 1,
                    "is_null_byte": 1,
                    "is_root": 1,
                    "searching_root": 1,
                    "stack_var": 1,
                    "temp_bool": 1,
                    "temp_byte": 1,
                    "zero": 2,
                    "zero_byte": 2,
                    "zero_flag": 1
                },
                "bfd_bread": {
                    "read_bfd_file": 1
                },
                "bfd_bwrite": {
                    "write_bfd_file": 1
                },
                "bfd_check_format": {
                    "check_bfd_format": 1
                },
                "bfd_close_all_done": {
                    "close_all_bfd_files": 1
                },
                "bfd_get_archive_filename": {
                    "get_archive_filename": 1
                },
                "bfd_nonfatal_message": {
                    "handle_bfd_non_fatal_message": 1
                },
                "bfd_openw": {
                    "open_bfd_file_write": 1
                },
                "cVar1": {
                    "char_value": 1,
                    "char_var": 6,
                    "char_var1": 3,
                    "character": 4,
                    "current_char": 2,
                    "format_check": 3,
                    "format_is_valid": 3,
                    "format_recognized": 1,
                    "format_supported": 1,
                    "format_valid": 4,
                    "status": 1
                },
                "chmod": {
                    "change_file_mode": 1
                },
                "concat": {
                    "concatenate_strings": 1
                },
                "dcgettext": {
                    "get_translated_message": 1
                },
                "free": {
                    "free_memory": 1
                },
                "iVar2": {
                    "arch": 3,
                    "arch_format": 1,
                    "arch_type": 4,
                    "file_arch": 1,
                    "format": 1,
                    "format_type": 1,
                    "index": 3,
                    "int_var": 3,
                    "int_var1": 2,
                    "int_var2": 4,
                    "integer": 1,
                    "integer1": 1,
                    "result": 2,
                    "return_value": 2,
                    "status": 1
                },
                "iVar3": {
                    "index2": 1,
                    "inner_loop_var": 1,
                    "int_var2": 4,
                    "int_var3": 4,
                    "integer2": 1,
                    "result": 2,
                    "stat_error": 2,
                    "stat_result": 13,
                    "stat_return_value": 1,
                    "status": 1
                },
                "in_RAX": {
                    "archive_index": 1,
                    "archive_path": 1,
                    "archive_path_len": 1,
                    "archive_ptr": 1,
                    "archive_size": 1,
                    "base_address": 1,
                    "current_position": 1,
                    "file_descriptor": 2,
                    "file_index": 2,
                    "file_path_ptr": 1,
                    "file_ptr": 1,
                    "in_rax": 2,
                    "input_pointer": 1,
                    "l_var10": 1,
                    "long_var2": 2,
                    "path_offset": 1,
                    "ptr": 1,
                    "rax_content": 1,
                    "rax_value": 5,
                    "target_file_size": 1,
                    "temp_long_var": 1,
                    "tmp": 1
                },
                "in_stack_00000008": {
                    "archive_file": 1,
                    "archive_file_ptr": 1,
                    "archive_name": 1,
                    "archive_name_ptr": 1,
                    "archive_path": 1,
                    "destination_file_pointer": 1,
                    "dst_path": 1,
                    "file_names": 1,
                    "in_stack8": 2,
                    "in_stack_pointer_var": 1,
                    "in_stack_ptr1": 2,
                    "in_stack_ptr_8": 1,
                    "in_stack_value1": 1,
                    "in_stack_var1": 1,
                    "in_stack_var8": 1,
                    "input_file": 1,
                    "input_file_list": 1,
                    "input_file_ptr": 1,
                    "input_filename_ptr": 1,
                    "original_file_path": 1,
                    "output_path": 1,
                    "param_4": 1,
                    "param_stack1": 1,
                    "source_path": 1,
                    "src_archive_ptr": 1,
                    "stack_var1": 1,
                    "temp_stack_var1": 1,
                    "undefined8_ptr_var4": 1
                },
                "in_stack_00000010": {
                    "archive_handle": 1,
                    "archive_ptr_ptr": 1,
                    "current_file_ptr": 1,
                    "dst_archive_ptr": 1,
                    "file_descriptor": 1,
                    "file_descriptor_array": 1,
                    "file_descriptors": 1,
                    "file_open_ptr": 1,
                    "file_ptr_address": 1,
                    "in_stack10": 2,
                    "in_stack_00000010": 1,
                    "in_stack_long_var": 1,
                    "in_stack_ptr": 1,
                    "in_stack_ptr2": 2,
                    "in_stack_ptr_10": 1,
                    "in_stack_value2": 1,
                    "in_stack_var10": 1,
                    "in_stack_var2": 1,
                    "l_var11": 1,
                    "long_ptr_var": 1,
                    "lptr": 1,
                    "member_size_ptr": 1,
                    "out_archive_ptr": 1,
                    "output_file_ptr": 1,
                    "param_stack2": 1,
                    "pointer_to_bfd_open": 1,
                    "stack_var2": 1,
                    "temp_stack_var2": 1
                },
                "in_stack_00000018": {
                    "char_ptr_var4": 1,
                    "in_stack18": 2,
                    "in_stack_char_var": 2,
                    "in_stack_ptr3": 2,
                    "in_stack_ptr_18": 1,
                    "in_stack_var18": 1,
                    "in_stack_var3": 1,
                    "param_stack3": 1,
                    "stack_var3": 1,
                    "temp_dir": 2,
                    "temp_dir_name": 3,
                    "temp_dir_path": 5,
                    "temp_directory": 1,
                    "temp_directory_path": 1,
                    "temp_path": 3,
                    "temp_root_dir_path": 1,
                    "temp_stack_var3": 1,
                    "tempdir_path": 1
                },
                "in_stack_00000020": {
                    "archive_data": 1,
                    "archive_file_name": 1,
                    "archive_file_struct_array": 1,
                    "archive_path_ptr": 1,
                    "archived_file": 1,
                    "current_archive": 1,
                    "current_archive_file_list": 1,
                    "current_archive_path": 1,
                    "in_stack20": 2,
                    "in_stack_pointer_var": 1,
                    "in_stack_pointer_var2": 1,
                    "in_stack_ptr4": 2,
                    "in_stack_ptr_20": 1,
                    "in_stack_var20": 1,
                    "in_stack_var4": 1,
                    "new_archive": 1,
                    "output_file": 1,
                    "output_file_pointer": 1,
                    "output_filename_ptr": 1,
                    "param_stack4": 1,
                    "pointer_to_undefined8_2": 1,
                    "src_path": 1,
                    "stack_var4": 1,
                    "target_archive": 1,
                    "temp_dir_file": 1,
                    "temp_dir_params": 1,
                    "temp_stack_var4": 1,
                    "undefined8_ptr_var5": 1
                },
                "in_stack_00000028": {
                    "access_mode": 1,
                    "archive_access_mode": 1,
                    "archive_file_format": 1,
                    "copy_flag": 1,
                    "copy_mode": 1,
                    "file_mode": 3,
                    "flags": 1,
                    "in_stack28": 2,
                    "in_stack_ptr5": 1,
                    "in_stack_ptr_28": 1,
                    "in_stack_value3": 1,
                    "in_stack_var": 1,
                    "in_stack_var1": 1,
                    "in_stack_var28": 1,
                    "in_stack_var5": 1,
                    "mode": 1,
                    "open_flags": 2,
                    "open_mode": 2,
                    "output_file_path": 1,
                    "output_mode": 1,
                    "param_stack5": 1,
                    "stack_var5": 1,
                    "temp_stack_var5": 1,
                    "undefined8_var4": 1,
                    "value_1": 1
                },
                "in_stack_00000030": {
                    "boolean_var": 1,
                    "create_temp_dir": 1,
                    "custom_mode": 1,
                    "format_is_set": 1,
                    "in_stack30": 2,
                    "in_stack_byte_var": 1,
                    "in_stack_ptr6": 1,
                    "in_stack_ptr_30": 1,
                    "in_stack_value4": 1,
                    "in_stack_var2": 1,
                    "in_stack_var30": 1,
                    "in_stack_var6": 1,
                    "is_absolute_path": 1,
                    "is_big_endian": 1,
                    "is_dot_dot": 1,
                    "is_mode_defined": 1,
                    "is_recursive": 1,
                    "is_unknown_format": 2,
                    "is_write_mode": 1,
                    "open_by_descriptor": 1,
                    "param_stack6": 1,
                    "stack_var6": 1,
                    "temp_stack_var6": 1,
                    "undefined8_var5": 1,
                    "unknown_flag": 2,
                    "use_default_mode": 1,
                    "value_2": 1
                },
                "in_stack_000000f8": {
                    "file_mode": 2,
                    "file_permission": 2,
                    "file_permissions": 3,
                    "in_stack_f8": 2,
                    "in_stack_ptr_f8": 1,
                    "in_stack_u_int_var": 1,
                    "in_stack_value1": 1,
                    "in_stack_value5": 1,
                    "in_stack_var3": 1,
                    "in_stack_var7": 1,
                    "in_stack_varf8": 1,
                    "new_file_mode": 1,
                    "param_stack7": 1,
                    "permission": 3,
                    "permission_flags": 3,
                    "permissions": 2,
                    "stack_var7": 1,
                    "temp_stack_var7": 1,
                    "uint_var": 1,
                    "value_3": 1
                },
                "in_stack_00000110": {
                    "archive_size": 3,
                    "file_count": 2,
                    "file_size_limit": 2,
                    "in_stack110": 2,
                    "in_stack_long_var2": 1,
                    "in_stack_ptr_110": 1,
                    "in_stack_value2": 1,
                    "in_stack_value6": 1,
                    "in_stack_var110": 1,
                    "in_stack_var4": 1,
                    "in_stack_var8": 1,
                    "long_var5": 1,
                    "param_stack8": 1,
                    "remaining_size": 1,
                    "size": 1,
                    "stack_var8": 1,
                    "temp_stack_var8": 1,
                    "total_file_size": 3,
                    "total_files": 1,
                    "total_size": 3,
                    "value_4": 1
                },
                "lVar12": {
                    "arch_member_size": 1,
                    "archive_file_size": 1,
                    "file_size": 15,
                    "length2": 2,
                    "long2": 1,
                    "long_var12": 2,
                    "long_var2": 3,
                    "long_var3": 2,
                    "size": 1,
                    "temp_dir_ret_val": 1,
                    "temp_dir_size": 1
                },
                "lVar15": {
                    "buffer_size": 1,
                    "bwrite_return_value": 1,
                    "bytes_left": 1,
                    "bytes_read": 2,
                    "bytes_remaining": 2,
                    "bytes_to_copy": 1,
                    "bytes_to_read": 2,
                    "chunk_size": 1,
                    "copy_size": 3,
                    "data_size": 1,
                    "length3": 2,
                    "long3": 1,
                    "long_var15": 2,
                    "long_var3": 2,
                    "long_var4": 2,
                    "read_size": 1,
                    "remaining_file_size": 1,
                    "remaining_size": 3,
                    "write_bytes": 1
                },
                "lVar5": {
                    "bread_result": 6,
                    "bread_return_value": 1,
                    "bread_size": 1,
                    "bytes_read": 6,
                    "length": 3,
                    "long1": 1,
                    "long_var": 3,
                    "long_var1": 1,
                    "long_var5": 3,
                    "read_bytes": 2,
                    "read_size": 2,
                    "temp_dir": 1
                },
                "make_tempdir": {
                    "create_temp_dir": 1
                },
                "non_fatal": {
                    "handle_non_fatal_error": 1
                },
                "param_1": {
                    "input_filename": 1,
                    "param1": 19,
                    "param_1": 9,
                    "param_addr1": 1,
                    "source_file": 1
                },
                "param_2": {
                    "dest_file": 1,
                    "output_filename": 1,
                    "param2": 19,
                    "param_2": 9,
                    "param_addr2": 1
                },
                "param_3": {
                    "archive_file_path": 1,
                    "archive_member": 1,
                    "archive_path": 4,
                    "file_path": 3,
                    "param3": 17,
                    "param_addr3": 1,
                    "path": 2,
                    "source_path": 2
                },
                "pcVar10": {
                    "char_ptr_var10": 1,
                    "char_ptr_var2": 1,
                    "char_var": 1,
                    "char_var2": 1,
                    "curr_char": 1,
                    "current_char": 14,
                    "current_path": 5,
                    "file_name": 2,
                    "file_path": 1,
                    "path_ptr": 1,
                    "pointer_char_var": 1,
                    "pointer_to_char1": 1,
                    "ptr_to_char1": 1
                },
                "pcVar11": {
                    "current_path": 1
                },
                "pcVar14": {
                    "bfd_close_func": 2,
                    "close_func": 1,
                    "close_function": 16,
                    "code_ptr_var": 2,
                    "code_ptr_var14": 1,
                    "code_var": 1,
                    "func_ptr_var14": 1,
                    "function_ptr": 1,
                    "pointer_code_var": 1,
                    "pointer_to_code": 2,
                    "ptr_to_code": 1
                },
                "pcVar16": {
                    "advance_char": 1,
                    "archive_error_path": 1,
                    "char_ptr_var16": 1,
                    "char_ptr_var3": 1,
                    "char_var2": 1,
                    "char_var3": 1,
                    "curr_pos": 1,
                    "current_char": 3,
                    "current_char2": 4,
                    "current_path": 2,
                    "new_path": 1,
                    "next_char": 7,
                    "pc_var_next_char": 1,
                    "pointer_char_var2": 1,
                    "pointer_to_char2": 1,
                    "ptr_to_char2": 1,
                    "temp_path": 1,
                    "temp_pointer2": 1
                },
                "piVar8": {
                    "err_num_ptr": 1,
                    "errno_loc": 1,
                    "errno_location": 4,
                    "errno_ptr": 5,
                    "error_code": 1,
                    "error_location": 1,
                    "error_num": 1,
                    "error_number": 7,
                    "int_ptr_var": 3,
                    "int_ptr_var8": 1,
                    "pointer_index_var": 1,
                    "pointer_int_var": 1,
                    "pointer_to_int": 1,
                    "pointer_to_int1": 1,
                    "ptr_int_var8": 1,
                    "ptr_to_int1": 1
                },
                "ppcVar11": {
                    "arch_file": 1,
                    "arch_file_ptr": 1,
                    "arch_member_ptr": 1,
                    "archive_file": 1,
                    "archive_file_ptr": 2,
                    "archive_ptr": 1,
                    "archive_ptrs": 1,
                    "archived_file": 3,
                    "archived_files": 1,
                    "archived_files_pointer": 1,
                    "char_ptr_ptr_var2": 3,
                    "current_file": 3,
                    "double_pointer": 1,
                    "double_pointer_var11": 1,
                    "double_ptr_var11": 1,
                    "file_ptr": 2,
                    "new_pointer_to_char_pointer": 1,
                    "open_args": 1,
                    "pointer_pointer_char_var2": 1,
                    "pointer_to_string_array2": 1,
                    "ptr_to_char_ptr2": 1
                },
                "ppcVar4": {
                    "arch_ptr": 2,
                    "arch_type_ptr": 1,
                    "archival_files": 1,
                    "archive_ptr": 1,
                    "archived_files": 1,
                    "char_ptr_ptr_var": 3,
                    "current_dir": 1,
                    "destination_path": 1,
                    "double_pointer_var4": 1,
                    "double_ptr_var4": 1,
                    "file_list": 2,
                    "file_path_ptr": 1,
                    "file_paths": 1,
                    "file_ptr": 1,
                    "file_stats": 1,
                    "pointer_pointer": 1,
                    "pointer_pointer_char_var": 1,
                    "pointer_to_char_pointer": 1,
                    "pointer_to_string_array1": 1,
                    "ptr_to_char_ptr1": 1,
                    "stat_file": 1,
                    "temp_archive_path": 1,
                    "temp_dir_path": 1,
                    "temp_memory": 1,
                    "tempdir_path": 2
                },
                "printf": {
                    "output_formatted_string": 1
                },
                "psVar17": {
                    "file_stat": 1,
                    "file_stats": 1,
                    "file_status": 1,
                    "pointer_stat_var": 1,
                    "pointer_struct_var": 1,
                    "pointer_to_stat": 2,
                    "ptr_to_stat": 1,
                    "stat_buffer": 3,
                    "stat_data": 1,
                    "stat_info": 2,
                    "stat_pointer": 2,
                    "stat_ptr": 1,
                    "stat_ptr_var": 2,
                    "stat_ptr_var17": 1,
                    "stat_struct": 7,
                    "stat_struct_ptr": 1,
                    "stat_structure": 1,
                    "statstruct_var17": 1
                },
                "puVar7": {
                    "allocated_memory": 1,
                    "dir_ptr": 1,
                    "param1_ptr": 1,
                    "pointer_to_undefined8": 1,
                    "pointer_to_undefined8_1": 1,
                    "pointer_undefined_var": 1,
                    "pointer_var": 1,
                    "ptr_to_u_int8_1": 1,
                    "ptr_var7": 1,
                    "temp_dir": 5,
                    "temp_dir_data": 1,
                    "temp_dir_info": 1,
                    "temp_dir_path": 1,
                    "temp_dir_ptr": 5,
                    "temp_directory": 1,
                    "temp_pointer": 1,
                    "temp_struct": 1,
                    "tempdir": 1,
                    "tempdir_pointer": 1,
                    "tempdir_ptr": 1,
                    "u_var_ptr1": 1,
                    "unaff_ptr_var7": 1,
                    "undefined8_ptr_var": 1
                },
                "pvVar13": {
                    "buffer": 12,
                    "buffer_pointer": 1,
                    "buffer_ptr": 3,
                    "data_ptr": 1,
                    "mem_ptr_var13": 1,
                    "pointer_to_void": 2,
                    "pointer_var2": 1,
                    "pointer_void_var": 1,
                    "ptr_to_void": 1,
                    "ptr_void_var13": 1,
                    "temp_memory": 1,
                    "temp_memory2": 1,
                    "void_ptr_var": 3
                },
                "rmdir": {
                    "remove_directory": 1
                },
                "stack0x00000050": {
                    "stat_buffer": 1,
                    "stat_stack": 1
                },
                "stack0x000000e0": {
                    "archived_stat_buffer": 1,
                    "seek_stack": 1
                },
                "stack0x00000110": {
                    "remaining_size": 2
                },
                "stack0x00000150": {
                    "close_function_result": 1
                },
                "stat": {
                    "get_stats": 1
                },
                "strerror": {
                    "get_error_string": 1
                },
                "uVar6": {
                    "err_msg": 1,
                    "error_message": 1,
                    "error_msg": 1,
                    "error_string": 5,
                    "format_str": 2,
                    "format_string": 3,
                    "msg": 1,
                    "result2": 1,
                    "temp_dir_error": 1,
                    "temp_dir_format": 1,
                    "temp_var": 1,
                    "tempdir_error_message": 1,
                    "u_var1": 1,
                    "u_var6": 3,
                    "uint_var": 1,
                    "undefined8_1": 1,
                    "undefined8_var": 1,
                    "undefined_var": 1,
                    "undefined_var6": 1,
                    "unintialized_var1": 1,
                    "unused_variable": 1
                },
                "uVar9": {
                    "err_msg": 1,
                    "error_message": 10,
                    "error_message2": 1,
                    "error_msg": 3,
                    "error_string": 2,
                    "gettext_message": 1,
                    "msg": 1,
                    "msg_str": 1,
                    "result3": 1,
                    "temp_text": 1,
                    "u_var2": 1,
                    "u_var9": 2,
                    "uint_var": 1,
                    "undefined8_2": 1,
                    "undefined8_var2": 1,
                    "undefined_var2": 1,
                    "undefined_var9": 1,
                    "unintialized_var2": 1
                },
                "unaff_R14": {
                    "archive_list_ptr": 1,
                    "created_archives_list": 1,
                    "current_ptr": 1,
                    "last_allocated_ptr": 1,
                    "malloced_pointer": 1,
                    "parent_dir": 1,
                    "temp_dir": 1,
                    "temp_dir_data_ptr": 1,
                    "temp_dir_list": 3,
                    "temp_dir_node": 1,
                    "temp_dir_ptr": 1,
                    "temp_directories": 1,
                    "temp_dirs": 1,
                    "temp_file": 1,
                    "temp_file_struct": 1,
                    "temp_info": 1,
                    "temp_list": 1,
                    "temp_paths": 1,
                    "temp_pointer3": 1,
                    "u_var_ptr2": 1,
                    "unaff_r14": 1,
                    "unaff_var14": 2,
                    "unaffected_pointer_var": 2,
                    "unaffected_r14": 1,
                    "unaffretaddr": 1,
                    "undefined8_ptr_var2": 1
                },
                "unaff_R15": {
                    "arch_info": 1,
                    "archive": 2,
                    "archive_data_ptr": 1,
                    "archive_file": 1,
                    "archive_file_list": 1,
                    "archive_file_struct": 1,
                    "archive_files": 2,
                    "archive_list": 1,
                    "archive_node": 1,
                    "archive_ptr_list": 1,
                    "archived_files": 1,
                    "char_ptr_ptr_var3": 2,
                    "current_archive": 1,
                    "current_file_ptr": 1,
                    "double_pointer_var15": 1,
                    "file_params": 1,
                    "filename_ptr": 1,
                    "input_file_pointer": 1,
                    "input_paths": 1,
                    "metadata_ptr": 1,
                    "open_file": 1,
                    "unaff_r15": 1,
                    "unaff_var15": 2,
                    "unaffected_double_pointer_var": 1,
                    "unaffected_pointer_var2": 1,
                    "unaffected_r15": 1,
                    "unaffretaddr_array": 1
                },
                "unaff_retaddr": {
                    "ret_addr_var": 2,
                    "ret_address": 2,
                    "return_addr": 1,
                    "return_address": 18,
                    "return_value": 1,
                    "unaff_retaddr": 3,
                    "unaffected_return_addr": 1,
                    "unaffected_return_addr_var": 1,
                    "unaffected_return_address": 1,
                    "undefined8_var3": 1
                },
                "unlink": {
                    "delete_file": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                },
                "xstrdup": {
                    "duplicate_string": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid extract_and_copy_files_from_archive_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char char_var;\n  int int_var2;\n  int stat_result;\n  char **char_ptr_ptr_var;\n  long bread_result;\n  undefined8 error_string;\n  char *format_string;\n  undefined8 *temp_dir;\n  int *error_number;\n  undefined8 error_message;\n  long rax_value;\n  char *current_char;\n  char **current_file;\n  long file_size;\n  void *buffer;\n  code *close_function;\n  long remaining_size;\n  char *next_char;\n  get_stats *stat_struct;\n  undefined8 *temp_dir_list;\n  char **unaff_var15;\n  byte byte_var;\n  undefined8 return_address;\n  undefined8 *in_stack_ptr1;\n  long *in_stack_ptr2;\n  char *temp_dir_path;\n  undefined8 *in_stack_ptr4;\n  undefined8 file_mode;\n  undefined8 in_stack30;\n  uint file_permissions;\n  long total_file_size;\n  \n  byte_var = 0;\n  current_char = (char *)(rax_value + 1);\n  do {\n    if (*current_char == '/') {\n      extract_and_copy_files_from_archive_001052a2();\n      return;\n    }\n    while (*current_char == '\\0') {\n      current_char = (char *)concatenate_strings(temp_dir_path,&DAT_0011b47d);\n      stat_result = get_stats(current_char,(get_stats *)&stat_stack);\n      temp_dir = temp_dir_list;\n      if (-1 < stat_result) {\n        file_size = create_temp_dir(current_char);\n        free_memory(current_char);\n        if (file_size == 0) {\n          error_number = get_errno_location();\n          current_char = get_error_string(*error_number);\n          error_message = get_translated_message(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          handle_non_fatal_error(error_message,current_char);\n          goto LAB_00104e93;\n        }\n        temp_dir = (undefined8 *)allocate_memory(0x18);\n        current_char = *unaff_var15;\n        *temp_dir = temp_dir_list;\n        temp_dir[2] = 0;\n        temp_dir[1] = file_size;\n        current_char = (char *)concatenate_strings(file_size,&DAT_0011b47d,current_char);\n      }\n      stat_result = 0;\n      if (DAT_001279eb != '\\0') {\n        stat_struct = (get_stats *)&stat_stack;\n        for (file_size = 0x24; file_size != 0; file_size = file_size + -1) {\n          *(undefined4 *)&stat_struct->st_dev = 0;\n          stat_struct = (get_stats *)((long)stat_struct + (ulong)byte_var * -8 + 4);\n        }\n        current_file = (char **)unaff_var15[0x1d];\n        if ((char **)unaff_var15[0x1d] == (char **)0x0) {\n          current_file = unaff_var15;\n        }\n        stat_result = (**(code **)(current_file[1] + 0x1e8))(unaff_var15,(get_stats *)&stat_stack);\n        if (stat_result != 0) {\n          next_char = *unaff_var15;\n          error_message = get_translated_message(0,\"internal get_stats error on %s\",5);\n          handle_non_fatal_error(error_message,next_char);\n        }\n      }\n      temp_dir_list = (undefined8 *)allocate_memory(0x18);\n      temp_dir_list[1] = current_char;\n      *temp_dir_list = temp_dir;\n      temp_dir_list[2] = 0;\n      char_var = check_bfd_format(unaff_var15,1);\n      if (char_var == '\\0') {\n        error_message = get_translated_message(0,\"Unable to recognise the format of file\",5);\n        handle_bfd_non_fatal_message(0,unaff_var15,0,error_message);\n        current_file = (char **)open_bfd_file_write(current_char,file_mode);\n        if (current_file == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        char_ptr_ptr_var = (char **)unaff_var15[0x1d];\n        if ((char **)unaff_var15[0x1d] == (char **)0x0) {\n          char_ptr_ptr_var = unaff_var15;\n        }\n        int_var2 = (**(code **)(char_ptr_ptr_var[1] + 0x1e8))(unaff_var15,&archived_stat_buffer);\n        file_size = total_file_size;\n        if (int_var2 == 0) {\n          if (total_file_size < 0) {\n            error_message = get_archive_filename(unaff_var15);\n            error_string = get_translated_message(0,\"get_stats returns negative size for `%s\\'\",5);\n            handle_non_fatal_error(error_string,error_message);\n          }\n          else {\n            int_var2 = bfd_seek(unaff_var15,0,0);\n            if (int_var2 == 0) {\n              if (DAT_001279e9 != '\\0') {\n                next_char = *current_file;\n                error_message = get_archive_filename(unaff_var15);\n                format_string = (char *)get_translated_message(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                output_formatted_string(format_string,error_message,next_char);\n              }\n              buffer = (void *)allocate_memory(0x2000);\n              for (; file_size != 0; file_size = file_size - remaining_size) {\n                remaining_size = 0x2000;\n                if (file_size < 0x2001) {\n                  remaining_size = file_size;\n                }\n                bread_result = read_bfd_file(buffer,remaining_size,unaff_var15);\n                char_ptr_ptr_var = unaff_var15;\n                if ((remaining_size != bread_result) ||\n                   (bread_result = write_bfd_file(buffer,remaining_size,current_file), char_ptr_ptr_var = current_file, remaining_size != bread_result\n                   )) {\n                  handle_bfd_non_fatal_message(0,char_ptr_ptr_var,0,0);\n                  free_memory(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              change_file_mode(*current_file,file_permissions | 0x100);\n              free_memory(buffer);\n              char_var = close_all_bfd_files(current_file);\n              if (char_var == '\\0') {\n                handle_bfd_non_fatal_message(current_char,0,0,0);\n                DAT_00127a40 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            error_message = get_archive_filename(unaff_var15);\n            bfd_nonfatal(error_message);\n          }\n        }\n        else {\n          handle_bfd_non_fatal_message(0,unaff_var15,0,0);\n        }\nLAB_00104f00:\n        char_var = close_all_bfd_files(current_file);\n        if (char_var == '\\0') {\n          handle_bfd_non_fatal_message(current_char,0,0,0);\n        }\nLAB_00104ec9:\n        delete_file(current_char);\n        DAT_00127a40 = 1;\n      }\n      else {\n        if (in_stack30._7_1_ == '\\0') {\n          current_file = (char **)open_bfd_file_write(current_char,*(undefined8 *)unaff_var15[1]);\n        }\n        else {\n          current_file = (char **)open_bfd_file_write(current_char,file_mode);\n        }\n        if (current_file == (char **)0x0) {\nLAB_00104e80:\n          handle_bfd_non_fatal_message(current_char,0,0,0);\n          goto LAB_00104e93;\n        }\n        char_var = copy_object(unaff_var15,current_file,return_address);\n        if (char_var == '\\0') {\n          int_var2 = bfd_get_arch(unaff_var15);\n          if (int_var2 == 0) goto LAB_00104d75;\n          char_var = close_all_bfd_files(current_file);\n          if (char_var == '\\0') {\n            handle_bfd_non_fatal_message(current_char,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        char_var = bfd_close(current_file);\n        if (char_var == '\\0') {\n          handle_bfd_non_fatal_message(current_char,0,0,0);\n          DAT_00127a40 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279eb != '\\0') && (stat_result == 0)) {\n          set_times(current_char,(get_stats *)&stat_stack);\n        }\n        file_size = bfd_openr(current_char,file_mode);\n        temp_dir_list[2] = file_size;\n        *in_stack_ptr2 = file_size;\n        in_stack_ptr2 = (long *)(file_size + 0xf0);\n        current_file = (char **)bfd_openr_next_archived_file(in_stack_ptr4,unaff_var15);\n        bfd_close(unaff_var15);\n        unaff_var15 = current_file;\n      }\n      if ((DAT_00127a40 != 0) || (unaff_var15 == (char **)0x0)) {\n        *in_stack_ptr2 = 0;\n        buffer = (void *)duplicate_string(*in_stack_ptr1);\n        if (DAT_00127a40 == 0) {\n          close_function = bfd_close;\n        }\n        else {\n          close_function = close_all_bfd_files;\n        }\n        char_var = (*close_function)(in_stack_ptr1);\n        if (char_var == '\\0') {\n          DAT_00127a40 = 1;\n          handle_bfd_non_fatal_message(buffer,0,0,0);\n        }\n        free_memory(buffer);\n        buffer = (void *)duplicate_string(*in_stack_ptr4);\n        char_var = bfd_close(in_stack_ptr4);\n        if (char_var == '\\0') {\n          DAT_00127a40 = 1;\n          handle_bfd_non_fatal_message(buffer,0,0,0);\n        }\n        free_memory(buffer);\n        goto LAB_00114b4b;\n      }\n      current_char = *unaff_var15;\n      param3 = current_char;\n      if (*current_char == '/') goto LAB_0010527d;\n    }\n    next_char = current_char;\n    if ((*current_char == '.') && (next_char = current_char + 1, current_char[1] == '.')) {\n      next_char = current_char + 2;\n      if ((current_char[2] == '\\0') || (current_char[2] == '/')) {\nLAB_0010527d:\n        error_message = get_translated_message(0,\"illegal pathname found in archive member: %s\",5);\n        handle_non_fatal_error(error_message,param3);\nLAB_00104e93:\n        DAT_00127a40 = 1;\nLAB_00114b4b:\n        while (temp_dir_list != (undefined8 *)0x0) {\n          if (temp_dir_list[2] == 0) {\n            remove_directory((char *)temp_dir_list[1]);\n          }\n          else {\n            bfd_close();\n            delete_file((char *)temp_dir_list[1]);\n          }\n          free_memory((void *)temp_dir_list[1]);\n          temp_dir = (undefined8 *)*temp_dir_list;\n          free_memory(temp_dir_list);\n          temp_dir_list = temp_dir;\n        }\n        remove_directory(temp_dir_path);\n        free_memory(temp_dir_path);\n        return;\n      }\n    }\n    for (; (current_char = next_char, *next_char != '\\0' && (*next_char != '/')); next_char = next_char + 1) {\n    }\n  } while( true );\n}\n\n",
            "current_name": "extract_and_copy_files_from_archive_001052a2",
            "entrypoint": "0x001052a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001052a2": "extract_and_copy_files_from_archive_001052a2",
                "__errno_location": "get_errno_location",
                "__format": "format_string",
                "bVar18": "byte_var",
                "bfd_bread": "read_bfd_file",
                "bfd_bwrite": "write_bfd_file",
                "bfd_check_format": "check_bfd_format",
                "bfd_close_all_done": "close_all_bfd_files",
                "bfd_get_archive_filename": "get_archive_filename",
                "bfd_nonfatal_message": "handle_bfd_non_fatal_message",
                "bfd_openw": "open_bfd_file_write",
                "cVar1": "char_var",
                "chmod": "change_file_mode",
                "concat": "concatenate_strings",
                "dcgettext": "get_translated_message",
                "free": "free_memory",
                "iVar2": "int_var2",
                "iVar3": "stat_result",
                "in_RAX": "rax_value",
                "in_stack_00000008": "in_stack_ptr1",
                "in_stack_00000010": "in_stack_ptr2",
                "in_stack_00000018": "temp_dir_path",
                "in_stack_00000020": "in_stack_ptr4",
                "in_stack_00000028": "file_mode",
                "in_stack_00000030": "in_stack30",
                "in_stack_000000f8": "file_permissions",
                "in_stack_00000110": "total_file_size",
                "lVar12": "file_size",
                "lVar15": "remaining_size",
                "lVar5": "bread_result",
                "make_tempdir": "create_temp_dir",
                "non_fatal": "handle_non_fatal_error",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pcVar10": "current_char",
                "pcVar11": "current_path",
                "pcVar14": "close_function",
                "pcVar16": "next_char",
                "piVar8": "error_number",
                "ppcVar11": "current_file",
                "ppcVar4": "char_ptr_ptr_var",
                "printf": "output_formatted_string",
                "psVar17": "stat_struct",
                "puVar7": "temp_dir",
                "pvVar13": "buffer",
                "rmdir": "remove_directory",
                "stack0x00000050": "stat_stack",
                "stack0x000000e0": "archived_stat_buffer",
                "stat": "get_stats",
                "strerror": "get_error_string",
                "uVar6": "error_string",
                "uVar9": "error_message",
                "unaff_R14": "temp_dir_list",
                "unaff_R15": "unaff_var15",
                "unaff_retaddr": "return_address",
                "unlink": "delete_file",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053b5": {
            "additional_data": {
                "FUN_001053b5": {
                    "check_format_and_exit": 2,
                    "check_format_and_fatal": 1,
                    "format_error": 5,
                    "format_error_fatal": 1,
                    "format_error_message": 5,
                    "format_validation_exception": 1,
                    "handle_bad_format": 4,
                    "parse_and_print_format_error": 1,
                    "print_bad_format_error": 6,
                    "print_bad_format_error_message": 1,
                    "print_error_message": 2,
                    "process_bad_format": 1,
                    "validate_format": 1
                },
                "dcgettext": {
                    "get_error_message": 1,
                    "translate": 1,
                    "translate_message": 1
                },
                "param_1": {
                    "arg1": 5,
                    "param1": 1,
                    "unused_param": 1,
                    "unused_param1": 1
                },
                "param_2": {
                    "arg2": 5,
                    "param2": 1,
                    "unused_param": 1,
                    "unused_param2": 1
                },
                "param_3": {
                    "arg3": 5,
                    "param3": 1,
                    "unused_param": 1,
                    "unused_param3": 1
                },
                "param_4": {
                    "arg4": 5,
                    "param4": 1,
                    "unused_param": 1,
                    "unused_param4": 1
                },
                "uVar1": {
                    "error_format_string": 1,
                    "error_message": 23,
                    "error_msg": 1,
                    "error_string": 5
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00114c80"
            ],
            "code": "\nvoid print_bad_format_error_message_001053b5(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = translate_message(0,\"bad format for %s\",5);\n                    \n  fatal(error_message);\n}\n\n",
            "current_name": "print_bad_format_error_message_001053b5",
            "entrypoint": "0x001053b5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053b5": "print_bad_format_error_message_001053b5",
                "dcgettext": "translate_message",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053d5": {
            "additional_data": {
                "FUN_001053d5": {
                    "close_and_return": 2,
                    "close_and_return_result": 1,
                    "close_and_return_status": 9,
                    "close_bdf_with_status": 1,
                    "close_bf_dand_return_status": 1,
                    "close_bfd": 4,
                    "close_bfd_and_return_result": 2,
                    "close_bfd_and_return_status": 2,
                    "close_bfd_and_update_status": 1,
                    "close_bfd_file": 1,
                    "close_bfd_handle": 1,
                    "close_bfd_handles": 1,
                    "close_file_and_return_status": 1,
                    "initialize_bfd": 4
                },
                "FUN_0011a110": {
                    "handle_error": 1,
                    "handle_file": 1,
                    "perform_task": 1
                },
                "bfd_close_all_done": {
                    "close_all_done": 1
                },
                "bfd_nonfatal": {
                    "handle_bfd_non_fatal": 1
                },
                "param_1": {
                    "fd": 1,
                    "file_descriptor": 2,
                    "parameter": 1,
                    "value": 1
                },
                "unaff_R12": {
                    "base_address": 6,
                    "bfd_status_ptr": 1,
                    "data_offset": 1,
                    "file_descriptor": 1,
                    "file_handle": 1,
                    "file_pointer": 1,
                    "file_ptr": 1,
                    "handle_address": 1,
                    "handle_ptr": 1,
                    "offset": 1,
                    "param1": 3,
                    "parameter1": 1,
                    "ptr": 1,
                    "r12_offset": 1,
                    "result": 2,
                    "result_address": 2,
                    "result_pointer": 1,
                    "status": 1,
                    "status_address": 1,
                    "status_pointer": 1,
                    "status_ptr": 2
                },
                "unaff_R14": {
                    "bfd_file_pointer": 1,
                    "bfd_handle": 7,
                    "bfd_handler": 1,
                    "bfd_pointer": 7,
                    "bfd_ptr": 5,
                    "data_ptr": 1,
                    "error": 1,
                    "file_descriptor": 1,
                    "handle_ptr": 1,
                    "param2": 3,
                    "parameter2": 1,
                    "pointer": 1,
                    "r14_ptr": 1
                }
            },
            "called": [
                "FUN_0011a110"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\nundefined4 close_bfd_and_return_status_001053d5(void)\n\n{\n  long base_address;\n  undefined8 *bfd_pointer;\n  \n  handle_bfd_non_fatal(*bfd_pointer);\n  *(undefined4 *)(base_address + 8) = 1;\n  close_all_done();\n  return *(undefined4 *)(base_address + 8);\n}\n\n",
            "current_name": "close_bfd_and_return_status_001053d5",
            "entrypoint": "0x001053d5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053d5": "close_bfd_and_return_status_001053d5",
                "bfd_close_all_done": "close_all_done",
                "bfd_nonfatal": "handle_bfd_non_fatal",
                "unaff_R12": "base_address",
                "unaff_R14": "bfd_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010540e": {
            "additional_data": {
                "0x0010540e": {
                    "jump_call": 1
                },
                "0x00105422": {
                    "jump_call": 1
                },
                "FUN_0010540e": {
                    "execute_action": 2,
                    "execute_code": 2,
                    "execute_function": 20,
                    "execute_function_with_flag": 1,
                    "execute_function_with_param": 1,
                    "execute_operation": 2,
                    "process_data": 1,
                    "process_parameter": 1
                },
                "in_RAX": {
                    "base_address": 2,
                    "function_address": 1,
                    "function_pointer": 1,
                    "function_ptr": 1,
                    "ptr": 1,
                    "rax": 5,
                    "register_value": 1,
                    "return_value": 1,
                    "struct_offset": 1,
                    "temp": 3,
                    "temp1": 5,
                    "temp_rax": 2,
                    "temporary_variable": 1,
                    "value": 1
                },
                "param_1": {
                    "arg1": 2,
                    "argument1": 1,
                    "data": 1,
                    "execution_context": 1,
                    "function_param1": 1,
                    "function_pointer": 3,
                    "input": 1,
                    "input_data": 1,
                    "input_param": 2,
                    "output": 1,
                    "param": 2,
                    "param1": 12,
                    "param_1": 1,
                    "parameter1": 1
                },
                "param_2": {
                    "address": 1,
                    "arg1": 1,
                    "arg2": 2,
                    "argument2": 1,
                    "data": 2,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_struct": 1,
                    "function_param2": 1,
                    "input1": 1,
                    "memory_address": 1,
                    "object_address": 1,
                    "param2": 12,
                    "parameter2": 1,
                    "struct_address": 1,
                    "struct_pointer": 1
                },
                "param_3": {
                    "arg2": 1,
                    "arg3": 2,
                    "argument3": 1,
                    "condition": 4,
                    "flag": 6,
                    "function_param3": 1,
                    "input2": 1,
                    "object_type": 1,
                    "operation_code": 1,
                    "param3": 11,
                    "parameter3": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00114d50"
            ],
            "code": "\nvoid execute_function_with_param_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long rax;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(rax + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "current_name": "execute_function_with_param_0010540e",
            "entrypoint": "0x0010540e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010540e": "execute_function_with_param_0010540e",
                "in_RAX": "rax",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010543c": {
            "additional_data": {
                "FUN_0010543c": {
                    "open_and_fatal": 1,
                    "open_and_print_error": 3,
                    "open_and_print_file_error": 1,
                    "open_file_and_check_error": 1,
                    "open_file_and_exit_on_error": 1,
                    "open_file_and_fatal": 3,
                    "open_file_and_fatal_error": 2,
                    "open_file_and_fatal_if_error": 2,
                    "open_file_and_handle_error": 5,
                    "open_file_and_print_error": 7,
                    "open_file_and_print_error_message": 1,
                    "open_file_error": 2,
                    "open_file_with_error_handling": 1,
                    "print_error_message": 1
                },
                "__errno_location": {
                    "get_error_number_location": 1
                },
                "dcgettext": {
                    "get_translated_error_message": 1
                },
                "fatal": {
                    "handle_fatal_error": 1
                },
                "param_1": {
                    "error1": 2,
                    "param1": 1
                },
                "param_2": {
                    "error2": 1,
                    "param2": 1
                },
                "param_3": {
                    "error2": 1,
                    "error3": 1,
                    "param3": 1
                },
                "param_4": {
                    "error3": 1,
                    "error4": 1,
                    "param4": 1
                },
                "pcVar3": {
                    "error_message": 15,
                    "error_msg": 2,
                    "error_string": 13
                },
                "piVar2": {
                    "err_location": 1,
                    "err_no": 1,
                    "errno": 1,
                    "errno_address": 1,
                    "errno_location": 9,
                    "errno_pointer": 3,
                    "errno_ptr": 6,
                    "error_code": 2,
                    "error_location": 2,
                    "error_number": 1,
                    "error_pointer": 2,
                    "error_ptr": 1
                },
                "strerror": {
                    "get_error_string": 1
                },
                "uVar1": {
                    "argument1": 1,
                    "file_descriptor": 12,
                    "file_handle": 12,
                    "file_path": 1,
                    "file_pointer": 2,
                    "file_ptr": 1,
                    "file_size": 1
                },
                "uVar4": {
                    "error_format": 1,
                    "error_format_string": 3,
                    "error_message": 6,
                    "error_message_format": 1,
                    "error_msg": 1,
                    "error_string": 5,
                    "error_text": 2,
                    "format_string": 1,
                    "localized_error_message": 4,
                    "localized_error_msg": 1,
                    "translated_error": 1,
                    "translated_error_message": 3
                },
                "unaff_RBP": {
                    "base_pointer": 10,
                    "file_descriptor": 1,
                    "file_pointer": 2,
                    "file_ptr": 1,
                    "frame_pointer": 1,
                    "register_base_pointer": 1,
                    "stack_base": 2,
                    "stack_pointer": 3
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104890",
                "FUN_00104240",
                "FUN_001040b0"
            ],
            "calling": [
                "FUN_00114d60"
            ],
            "code": "\nvoid open_file_and_print_error_message_0010543c(void)\n\n{\n  undefined8 file_handle;\n  int *errno_location;\n  char *error_message;\n  undefined8 error_message;\n  long base_pointer;\n  \n  errno_location = get_error_number_location();\n  error_message = get_error_string(*errno_location);\n  file_handle = *(undefined8 *)(base_pointer + 0x10);\n  error_message = get_translated_error_message(0,\"cannot open: %s: %s\",5);\n                    \n  handle_fatal_error(error_message,file_handle,error_message);\n}\n\n",
            "current_name": "open_file_and_print_error_message_0010543c",
            "entrypoint": "0x0010543c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010543c": "open_file_and_print_error_message_0010543c",
                "__errno_location": "get_error_number_location",
                "dcgettext": "get_translated_error_message",
                "fatal": "handle_fatal_error",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "strerror": "get_error_string",
                "uVar1": "file_handle",
                "uVar4": "error_message",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001054af": {
            "additional_data": {
                "DAT_001278e8": {
                    "hash_table4": 1,
                    "hashtable": 1,
                    "hashtable9": 1,
                    "table1": 1
                },
                "DAT_001278f0": {
                    "hash_table3": 1,
                    "hashtable3": 1,
                    "hashtable8": 1,
                    "table2": 1
                },
                "DAT_001279f0": {
                    "hash_table2": 1,
                    "hashtable2": 1,
                    "hashtable7": 1,
                    "table3": 1
                },
                "DAT_001279f8": {
                    "hash_table1": 1,
                    "hashtable4": 1,
                    "hashtable6": 1,
                    "table4": 1
                },
                "DAT_00127a00": {
                    "hashtable5": 2,
                    "table5": 1
                },
                "DAT_00127a08": {
                    "hashtable4": 1,
                    "hashtable6": 1,
                    "table6": 1
                },
                "DAT_00127a10": {
                    "hashtable2": 1,
                    "hashtable8": 1,
                    "table7": 1
                },
                "DAT_00127a18": {
                    "hashtable1": 1,
                    "hashtable9": 1,
                    "table8": 1
                },
                "DAT_00127a28": {
                    "hashtable3": 1,
                    "hashtable7": 1
                },
                "FUN_001054af": {
                    "clean_up_hash_table": 2,
                    "cleanup": 1,
                    "cleanup_and_delete_hashtables": 1,
                    "cleanup_data_structures": 1,
                    "cleanup_function": 2,
                    "cleanup_hash_table": 7,
                    "cleanup_hash_table_data": 1,
                    "cleanup_hashtables": 4,
                    "cleanup_htables": 1,
                    "delete_all_hashtables": 1,
                    "delete_hash_table_entries": 4,
                    "delete_hash_tables": 5,
                    "delete_hashtable_entries": 1
                },
                "in_RAX": {
                    "result": 2,
                    "result_register": 1,
                    "return_value": 2,
                    "temp_variable": 1,
                    "temporary_register": 1,
                    "undefined": 1,
                    "unused_var": 4,
                    "unused_var1": 1,
                    "unused_variable": 4,
                    "unused_variable1": 1
                },
                "param_1": {
                    "arg1": 1,
                    "data_structure1": 1,
                    "param1": 2,
                    "param_1": 1,
                    "undefined_param1": 1,
                    "unnamed_param_1": 1,
                    "unused_param": 10,
                    "unused_param1": 9,
                    "unused_parameter": 1,
                    "unused_parameter1": 4
                },
                "param_2": {
                    "arg2": 1,
                    "data_structure2": 1,
                    "param2": 2,
                    "param_2": 1,
                    "undefined_param2": 1,
                    "unnamed_param_2": 1,
                    "unused_param": 10,
                    "unused_param2": 9,
                    "unused_parameter": 1,
                    "unused_parameter2": 4
                }
            },
            "called": [
                "FUN_00104090"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid cleanup_hash_table_data_001054af(undefined8 unused_param,undefined8 unused_param)\n\n{\n  undefined8 unused_var;\n  \n  htab_delete(DAT_00127a18);\n  htab_delete(DAT_00127a10);\n  htab_delete(DAT_00127a28);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_00127a00);\n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_001278f0);\n  htab_delete(DAT_001278e8,unused_param,unused_var);\n  return;\n}\n\n",
            "current_name": "cleanup_hash_table_data_001054af",
            "entrypoint": "0x001054af",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001054af": "cleanup_hash_table_data_001054af",
                "in_RAX": "unused_var",
                "param_1": "unused_param",
                "param_2": "unused_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010551d": {
            "additional_data": {
                "FUN_0010551d": {
                    "decompiled_code_improved": 1,
                    "extract_and_improve_binary_notes": 1,
                    "improve_extract_debugging_info": 1,
                    "merge_build_notes": 1,
                    "merge_debug_data": 1,
                    "merge_debugging_info": 1,
                    "merge_gnu_build_notes": 1,
                    "process_binary": 1
                },
                "__ptr": {
                    "pointer4": 1,
                    "pointer_var3": 1,
                    "section_contents": 2,
                    "void_pointer": 1
                },
                "__ptr_00": {
                    "debugging_info_contents": 1,
                    "pointer5": 1,
                    "pointer_var4": 1,
                    "section_contents_2": 1,
                    "void_pointer00": 1
                },
                "__s": {
                    "char_array": 2,
                    "char_pointer1": 1,
                    "char_ptr": 1,
                    "error_message": 1,
                    "message": 1,
                    "s": 1,
                    "string": 1,
                    "string1": 2,
                    "string3": 1,
                    "string_pointer": 2,
                    "string_var": 2,
                    "string_var1": 3,
                    "string_variable": 1,
                    "string_variable1": 1
                },
                "__s_00": {
                    "char_ptr3": 1,
                    "file": 1,
                    "s_00": 1,
                    "section_dump_file": 1,
                    "string_var2": 2
                },
                "bStack100": {
                    "byte_var": 1
                },
                "bStack101": {
                    "byte_var": 1
                },
                "bVar2": {
                    "b_var2": 1,
                    "boolean_var": 1,
                    "byte_value": 1,
                    "byte_var": 8,
                    "byte_var2": 2,
                    "byte_variable": 3,
                    "byte_variable1": 1,
                    "flag": 3,
                    "flag1": 1
                },
                "bVar38": {
                    "bool_var": 2,
                    "bool_var1": 1,
                    "bool_var38": 1,
                    "bool_variable": 1,
                    "boolean_flag": 1,
                    "boolean_value": 1,
                    "flag2": 1,
                    "mergeable_note_section": 1
                },
                "bVar39": {
                    "b_var39": 1,
                    "byte1": 1,
                    "byte_var2": 1,
                    "byte_var3": 1,
                    "byte_var39": 1,
                    "loop_flag": 1
                },
                "cStack148": {
                    "char_var": 1
                },
                "cVar2": {
                    "byte_var": 1
                },
                "cVar38": {
                    "check_note_condition": 1
                },
                "cVar39": {
                    "check_note_condition2": 1
                },
                "cVar8": {
                    "c_var8": 1,
                    "char1": 3,
                    "char_value": 1,
                    "char_var": 3,
                    "char_var1": 5,
                    "char_var8": 2,
                    "char_variable": 2,
                    "char_variable1": 2
                },
                "cVar9": {
                    "c_var9": 1,
                    "char2": 3,
                    "char_var": 1,
                    "char_var2": 7,
                    "char_var9": 2,
                    "char_variable2": 4,
                    "return_value": 1
                },
                "error_code1": {
                    "error_code1": 2,
                    "error_parameter1": 1
                },
                "error_code2": {
                    "error_code2": 2,
                    "error_parameter2": 1
                },
                "error_code3": {
                    "error_code3": 2,
                    "error_parameter3": 1
                },
                "error_code4": {
                    "error_code4": 2,
                    "error_parameter4": 1
                },
                "iStack000000000000006c": {
                    "i_stack_006c": 1,
                    "int_stack_var": 1,
                    "int_var3": 2
                },
                "iVar11": {
                    "comparison_result": 1,
                    "i_var11": 1,
                    "int1": 3,
                    "int_var": 4,
                    "int_var1": 5,
                    "int_var11": 2,
                    "int_variable1": 1,
                    "integer_variable": 1,
                    "integer_variable1": 2,
                    "value2": 1
                },
                "iVar13": {
                    "int_var2": 1
                },
                "iVar14": {
                    "i_var14": 1,
                    "int2": 3,
                    "int_var": 1,
                    "int_var14": 2,
                    "int_var2": 7,
                    "int_var3": 1,
                    "int_variable2": 1,
                    "integer_variable2": 3
                },
                "iVar31": {
                    "i_var31": 1,
                    "index": 1,
                    "int3": 1,
                    "int_var": 1,
                    "int_var3": 1,
                    "int_var31": 1,
                    "int_variable3": 1,
                    "loop_counter": 1
                },
                "in_stack_00000008": {
                    "arg1": 1,
                    "filename": 1,
                    "input_variable": 1,
                    "parameter1": 1
                },
                "in_stack_00000010": {
                    "count": 1,
                    "node_count": 1,
                    "parameter2": 1,
                    "size_of_symbols": 1
                },
                "in_stack_00000018": {
                    "byte1": 1,
                    "p_start": 1
                },
                "in_stack_00000020": {
                    "in_stack_val1": 1
                },
                "in_stack_000000c0": {
                    "in_stack_val2": 1,
                    "stack_long_ptr": 1
                },
                "in_stack_000000c8": {
                    "in_stack_val3": 1
                },
                "in_stack_000000d0": {
                    "in_stack_val4": 1,
                    "stack_long_var": 1
                },
                "in_stack_000000d8": {
                    "in_stack_val5": 1,
                    "stack_long_var2": 1
                },
                "in_stack_000000e0": {
                    "in_stack_val6": 1,
                    "stack_pointer": 1,
                    "void_pointer1": 1
                },
                "in_stack_000000f0": {
                    "in_stack_val7": 1
                },
                "in_stack_00000110": {
                    "ushort_stack_variable": 1
                },
                "in_stack_00000118": {
                    "index": 1,
                    "ushort_stack_variable2": 1
                },
                "in_stack_00000140": {
                    "arg3": 1,
                    "char_array_stack": 1,
                    "char_pointer1": 1,
                    "content_of_section": 1,
                    "section_dump_file_name": 1
                },
                "in_stack_00000150": {
                    "other_input_variable": 1
                },
                "in_stack_0008": {
                    "long_var": 1
                },
                "in_stack_0010": {
                    "ulong_var": 1
                },
                "in_stack_0018": {
                    "char_var": 1
                },
                "in_stack_110": {
                    "undefined8_var": 1
                },
                "in_stack_118": {
                    "ushort_var": 1
                },
                "in_stack_140": {
                    "char_pointer": 1
                },
                "in_stack_150": {
                    "char_pointer": 1
                },
                "in_stack_6C": {
                    "int_var": 1
                },
                "in_stack_78": {
                    "long_var": 1
                },
                "in_stack_88": {
                    "long_var": 1
                },
                "in_stack_A0": {
                    "long_var": 1
                },
                "in_stack_C0": {
                    "long_pointer": 1
                },
                "in_stack_C8": {
                    "ulong_var": 1
                },
                "in_stack_D0": {
                    "long_var": 1
                },
                "in_stack_D8": {
                    "long_var": 1
                },
                "in_stack_E0": {
                    "void_pointer": 1
                },
                "in_stack_F0": {
                    "long_var": 1
                },
                "in_stack_F8": {
                    "undefined8_var": 1
                },
                "lStack0000000000000078": {
                    "l_stack_0078": 1,
                    "long_stack_var": 1,
                    "long_var3": 1,
                    "long_var4": 1
                },
                "lStack0000000000000088": {
                    "l_stack_0088": 1,
                    "long_stack_var2": 1,
                    "long_var4": 1,
                    "long_var5": 1
                },
                "lStack00000000000000a0": {
                    "long_stack_var3": 1,
                    "long_var5": 1,
                    "long_var6": 1
                },
                "lStack00000000000000d0": {
                    "long_var6": 1
                },
                "lStack00000000000000d8": {
                    "long_var7": 1
                },
                "lStack00000000000000e0": {
                    "pointer4": 1
                },
                "lStack00000000000000f0": {
                    "long_var8": 1
                },
                "lVar15": {
                    "long_var": 1
                },
                "lVar21": {
                    "l_var21": 1,
                    "long1": 2,
                    "long_var": 2,
                    "long_var1": 3,
                    "long_var2": 1,
                    "long_var21": 2,
                    "long_var4": 1,
                    "long_variable": 1,
                    "long_variable1": 1,
                    "merged_notes_size": 1
                },
                "lVar25": {
                    "l_var25": 1,
                    "long2": 2,
                    "long_var": 1,
                    "long_var2": 3,
                    "long_var25": 1,
                    "long_var3": 1,
                    "long_var4": 1,
                    "long_var5": 1,
                    "long_variable": 1,
                    "long_variable2": 2,
                    "saved_notes_iterator": 1,
                    "temp_variable": 1
                },
                "lVar27": {
                    "l_var27": 1,
                    "long3": 2,
                    "long_var": 1,
                    "long_var27": 2,
                    "long_var3": 3,
                    "long_var4": 1,
                    "long_var6": 1,
                    "long_variable3": 1,
                    "section_size": 1
                },
                "lVar31": {
                    "long_variable3": 1
                },
                "lVar32": {
                    "long_variable4": 1
                },
                "original_variable_name_1": {
                    "new_variable_name1": 1
                },
                "original_variable_name_2": {
                    "new_variable_name2": 1
                },
                "pcStack0000000000000038": {
                    "char_pointer2": 1,
                    "filename": 1,
                    "pc_stack_var1": 1
                },
                "pcStack0000000000000090": {
                    "char_pointer3": 1,
                    "char_pointer4": 1,
                    "pc_stack_0090": 1,
                    "pointer_var5": 1
                },
                "pcStack38": {
                    "char_pointer": 1
                },
                "pcStack90": {
                    "char_pointer": 1
                },
                "pcVar19": {
                    "char_pointer": 1,
                    "char_pointer1": 1,
                    "char_ptr1": 1,
                    "char_var19": 1,
                    "char_var3": 1,
                    "pointer11": 1,
                    "pointer7": 1,
                    "pointer_char_array_var19": 1,
                    "pointer_var1": 1,
                    "pointer_var4": 1,
                    "string2": 3,
                    "string_var2": 1
                },
                "pcVar28": {
                    "char_pointer": 1,
                    "char_pointer2": 2,
                    "char_ptr4": 1,
                    "char_var28": 1,
                    "char_var6": 1,
                    "pointer12": 1,
                    "pointer5": 1,
                    "pointer8": 1,
                    "pointer_char_array_var28": 1,
                    "pointer_var2": 1,
                    "pointer_var5": 1,
                    "string3": 2,
                    "string_var3": 1
                },
                "pcVar33": {
                    "char_pointer3": 2,
                    "char_var33": 1,
                    "char_var7": 1,
                    "pointer13": 1,
                    "pointer_var6": 1
                },
                "pcVar35": {
                    "char_pointer_var1": 1,
                    "pointer_var35": 1
                },
                "pcVar4": {
                    "code_func": 1,
                    "code_pointer": 1,
                    "code_var": 1,
                    "code_var1": 1,
                    "code_var4": 1,
                    "func_ptr": 1,
                    "function_pointer": 7,
                    "function_pointer_var4": 1,
                    "function_ptr": 3,
                    "pointer4": 1,
                    "pointer_to_code": 1
                },
                "piVar23": {
                    "errno_location": 1,
                    "int_pointer": 1,
                    "int_pointer_var1": 1,
                    "int_pointer_var23": 1,
                    "pointer10": 1,
                    "pointer9": 1
                },
                "plVar11": {
                    "pointer6": 1
                },
                "plVar15": {
                    "current_note": 1,
                    "current_section": 1,
                    "long_pointer": 1,
                    "long_pointer1": 3,
                    "long_pointer3": 1,
                    "long_pointer_var15": 1,
                    "long_ptr": 1,
                    "long_ptr_var": 1,
                    "long_var": 1,
                    "long_var8": 1,
                    "pointer2": 1,
                    "pointer4": 4,
                    "pointer6": 1,
                    "pointer_to_long": 1,
                    "pointer_var15": 1
                },
                "plVar23": {
                    "int_ptr": 1,
                    "long_pointer2": 1
                },
                "plVar32": {
                    "long_pointer": 1,
                    "long_pointer2": 1,
                    "long_pointer3": 2,
                    "long_pointer4": 1,
                    "long_pointer_var32": 1,
                    "long_ptr2": 1,
                    "long_ptr_var2": 1,
                    "long_var5": 1,
                    "long_var7": 1,
                    "merged_notes": 1,
                    "pointer4": 1,
                    "pointer5": 1,
                    "pointer9": 1,
                    "pointer_var32": 1,
                    "previous_node": 1,
                    "saved_notes": 1
                },
                "ppcVar35": {
                    "char_pointer_pointer1": 1,
                    "char_pointer_pointer_var1": 1,
                    "pointer6": 1,
                    "pointer7": 1,
                    "pointer8": 1,
                    "ppc_var35": 1,
                    "symbol_iterator": 1
                },
                "ppuVar37": {
                    "loop_node": 1,
                    "pointer7": 1,
                    "pointer_pointer_var37": 1,
                    "ppu_var37": 1
                },
                "ppvVar37": {
                    "pointer_to_pointer_var37": 1
                },
                "print_bfd_error_message_001126c0": {
                    "print_bfd_error_message": 1,
                    "print_error_message": 1
                },
                "ptptVar29": {
                    "undefined8_pointer": 1
                },
                "puStack0000000000000020": {
                    "merged_notes_data": 1,
                    "pointer_to_undefined4": 1,
                    "section_flags": 1
                },
                "puStack20": {
                    "undefined4_pointer": 1
                },
                "puVar1": {
                    "int_pointer": 1,
                    "pointer1": 12,
                    "pointer_to_uint": 1,
                    "pointer_var1": 3,
                    "ptr": 1,
                    "pu_var1": 1,
                    "symbol_flags": 1
                },
                "puVar29": {
                    "note_iterator": 1,
                    "note_section": 1,
                    "note_section_list": 1,
                    "pointer4": 2,
                    "pointer6": 2,
                    "pointer_to_uint8": 1,
                    "pointer_var29": 1,
                    "ptr_var2": 1,
                    "pu_var29": 1
                },
                "puVar3": {
                    "pointer2": 10,
                    "pointer3": 2,
                    "pointer_to_undefined": 1,
                    "pointer_var3": 3,
                    "ptr_var": 1,
                    "pu_var3": 1,
                    "undefined_pointer": 1
                },
                "puVar34": {
                    "current_node": 1,
                    "pointer7": 1,
                    "pointer_var34": 1,
                    "section": 1,
                    "undefined4_pointer_var1": 1
                },
                "puVar5": {
                    "pointer3": 10,
                    "pointer5": 2,
                    "pointer_to_uint64": 1,
                    "pointer_var5": 3,
                    "ptr_var": 1,
                    "ulong_pointer": 1
                },
                "pvVar36": {
                    "pointer": 1,
                    "pointer10": 1,
                    "pointer5": 1,
                    "pointer8": 1,
                    "pointer_var6": 1,
                    "void_pointer": 1
                },
                "sStack0000000000000158": {
                    "short_variable": 1
                },
                "sStack000000000000015a": {
                    "short_var1": 1,
                    "short_variable2": 1
                },
                "sStack15a": {
                    "short_var": 1
                },
                "sVar18": {
                    "content_size": 1,
                    "s_var18": 1,
                    "size": 2,
                    "size_t1": 1,
                    "size_t_var": 2,
                    "size_t_var1": 2,
                    "size_t_var18": 2,
                    "size_var": 1,
                    "size_var1": 3,
                    "size_variable": 1,
                    "size_variable2": 1,
                    "string_size": 1
                },
                "sVar26": {
                    "fwrite_return_value": 1,
                    "s_var26": 1,
                    "size2": 1,
                    "size_t2": 1,
                    "size_t_var": 1,
                    "size_t_var2": 3,
                    "size_t_var26": 1,
                    "size_var2": 4,
                    "size_variable1": 1,
                    "size_variable2": 1,
                    "written_bytes": 1
                },
                "uStack0000000000000048": {
                    "symbol_value": 1,
                    "uint_ptr": 1,
                    "uint_stack_variable": 1,
                    "uint_var4": 1
                },
                "uStack158": {
                    "undefined_var": 1
                },
                "uStack48": {
                    "uint_var": 1
                },
                "uVar10": {
                    "section_flags": 1,
                    "u_var10": 1,
                    "uint1": 3,
                    "uint_var": 3,
                    "uint_var1": 5,
                    "uint_var10": 2,
                    "uint_variable": 1,
                    "unsigned_var3": 1,
                    "unsigned_variable1": 1,
                    "unsigned_variable3": 2,
                    "value1": 1
                },
                "uVar12": {
                    "symbol_flags": 1,
                    "u_var12": 1,
                    "uint2": 3,
                    "uint_var": 1,
                    "uint_var12": 2,
                    "uint_var2": 7,
                    "uint_variable2": 1,
                    "unsigned_var4": 1,
                    "unsigned_variable2": 1,
                    "unsigned_variable4": 2,
                    "value3": 1
                },
                "uVar13": {
                    "error": 1,
                    "error_code1": 1,
                    "u_var13": 1,
                    "uint3": 2,
                    "uint4": 1,
                    "uint_var13": 1,
                    "uint_var3": 3,
                    "undefined4_var": 1,
                    "undefined4_var1": 2,
                    "undefined4_var13": 1,
                    "unsigned_var5": 1,
                    "unsigned_variable3": 1,
                    "unsigned_variable5": 2
                },
                "uVar16": {
                    "error_code2": 1,
                    "translated_message": 1,
                    "u_var16": 1,
                    "ulong3": 2,
                    "ulong_var": 1,
                    "ulong_var16": 1,
                    "ulong_var3": 3,
                    "undefined8_var": 1,
                    "undefined8_var1": 2,
                    "undefined8_var16": 1,
                    "unsigned_var6": 1,
                    "unsigned_variable6": 2
                },
                "uVar17": {
                    "error_code3": 1,
                    "error_message": 1,
                    "formatted_message": 1,
                    "u_var17": 1,
                    "ulong4": 2,
                    "ulong_var17": 1,
                    "ulong_var3": 1,
                    "ulong_var4": 3,
                    "ulong_variable3": 1,
                    "undefined8_var": 1,
                    "undefined8_var17": 1,
                    "undefined8_var2": 2,
                    "unsigned_var7": 1,
                    "unsigned_variable7": 2
                },
                "uVar20": {
                    "accumulator": 1,
                    "error_code4": 1,
                    "u_var20": 1,
                    "ulong5": 1,
                    "ulong_var": 1,
                    "ulong_var20": 1,
                    "ulong_var3": 2,
                    "ulong_var5": 2,
                    "ulong_var6": 1,
                    "ulong_variable4": 1,
                    "unsigned_var8": 1,
                    "unsigned_variable8": 2
                },
                "uVar21": {
                    "new_symbol_size": 1
                },
                "uVar22": {
                    "address_offset": 1,
                    "u_var22": 1,
                    "ulong_var4": 2,
                    "ulong_var7": 1,
                    "unsigned_var9": 1,
                    "unsigned_variable11": 1,
                    "unsigned_variable9": 1
                },
                "uVar24": {
                    "output_value": 1,
                    "u_var24": 1,
                    "ulong_var24": 1,
                    "ulong_var5": 3,
                    "ulong_var6": 1,
                    "unsigned_var10": 1,
                    "unsigned_variable10": 1,
                    "unsigned_variable9": 1
                },
                "uVar27": {
                    "unsigned_variable11": 1
                },
                "uVar30": {
                    "compare_value": 1,
                    "ulong_var30": 1,
                    "ulong_var4": 1,
                    "ulong_var6": 2,
                    "unsigned_variable10": 1
                },
                "uVar6": {
                    "merge_offset": 1,
                    "u_var6": 1,
                    "ulong1": 3,
                    "ulong_var": 1,
                    "ulong_var1": 7,
                    "ulong_var6": 2,
                    "ulong_variable1": 1,
                    "unsigned_long_variable1": 1,
                    "unsigned_var1": 1,
                    "unsigned_variable1": 2
                },
                "uVar7": {
                    "temp_value": 1,
                    "u_var7": 1,
                    "ulong2": 3,
                    "ulong_var": 1,
                    "ulong_var2": 7,
                    "ulong_var7": 2,
                    "ulong_variable2": 1,
                    "unsigned_long_variable2": 1,
                    "unsigned_var2": 1,
                    "unsigned_variable2": 2
                },
                "ullVar30": {
                    "ulong_long_var": 1
                },
                "unaff_R13": {
                    "arg4": 1,
                    "long_pointer5": 1,
                    "long_ptr3": 1,
                    "merged_notes_list": 2,
                    "note_section": 1,
                    "pointer9": 1,
                    "pointer_to_long": 1,
                    "unaff_var3": 1,
                    "unaffected_register4": 1,
                    "unaffiliated_node1": 1
                },
                "unaff_R14": {
                    "arg5": 1,
                    "bfd_handle": 1,
                    "bfd_object": 1,
                    "binary_data": 1,
                    "long_ptr4": 1,
                    "pointer10": 1,
                    "unaff_var1": 1,
                    "unaffected_register5": 1,
                    "unaffiliated_variable": 1,
                    "unaffinded_r14": 1
                },
                "unaff_RBP": {
                    "current_bfd_object": 1,
                    "long_var2": 1,
                    "unaff_var2": 1,
                    "unaffected_register1": 1,
                    "unaffected_register3": 1,
                    "unaffinded_rbp": 1
                },
                "unaff_RBX": {
                    "arg2": 1,
                    "long_pointer2": 1,
                    "merged_notes": 1,
                    "pointer5": 1,
                    "unaffected_register2": 1,
                    "unaffiliated_node2": 1,
                    "unknown_pointer1": 1
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_001126c0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong merge_gnu_build_notes_0010551d(void)\n\n{\n  uint *pointer1;\n  byte byte_var;\n  undefined *pointer2;\n  code *function_pointer;\n  undefined8 *pointer3;\n  ulong ulong_var1;\n  ulong ulong_var2;\n  char *string_var1;\n  char char_var1;\n  char char_var2;\n  uint uint_var1;\n  int int_var1;\n  uint uint_var2;\n  undefined4 uint_var3;\n  int int_var2;\n  long *pointer4;\n  undefined8 ulong_var3;\n  undefined8 ulong_var4;\n  size_t size_var1;\n  char *string2;\n  void *section_contents;\n  void *pointer5;\n  ulong unsigned_variable8;\n  long long_var1;\n  ulong ulong_var4;\n  int *pointer9;\n  ulong ulong_var5;\n  long long_var2;\n  FILE *string_var2;\n  size_t size_var2;\n  long long_var3;\n  long *pointer5;\n  char *string3;\n  undefined8 *pointer6;\n  ulong ulong_var6;\n  int int_var3;\n  long long_var2;\n  long *long_pointer3;\n  char *char_pointer3;\n  undefined4 *pointer_var34;\n  char **ppc_var35;\n  long *merged_notes_list;\n  void *pointer;\n  undefined8 *long_ptr4;\n  undefined **loop_node;\n  bool bool_var;\n  byte byte_var2;\n  long filename;\n  ulong size_of_symbols;\n  char byte1;\n  undefined4 *pointer_to_undefined4;\n  char *filename;\n  uint uint_ptr;\n  int int_var3;\n  long long_var3;\n  long long_stack_var2;\n  char *pointer_var5;\n  long long_var5;\n  long *in_stack_val2;\n  ulong in_stack_val3;\n  long in_stack_val4;\n  long stack_long_var2;\n  void *void_pointer1;\n  long in_stack_val7;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 ushort_stack_variable;\n  ushort index;\n  char *section_dump_file_name;\n  char cStack0000000000000148;\n  char *other_input_variable;\n  undefined uStack0000000000000158;\n  short short_var1;\n  \n  byte_var2 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  bfd_nonfatal_message(0);\n  free(pointer5);\nLAB_001151a2:\n  long_var2 = *(long *)(long_var2 + 8);\n  pointer6 = DAT_001279d0;\n  if (long_var2 == 0) goto joined_r0x001151c7;\n  if (DAT_00127a20 != '\\0') {\n    if ((((*(int *)(long_ptr4[1] + 8) != 5) || (*(int *)(*(long *)(long_var2 + 0xd0) + 4) != 7)) ||\n        (char_var2 = startswith_lto_priv_0_lto_priv_0(), char_var2 == '\\0')) ||\n       ((*(long *)(long_var2 + 0x60) == 0 || (long_var2 = *(long *)(long_var2 + 0x40), long_var2 == 0))))\n    goto LAB_001151a2;\n    pointer5 = (long *)xmalloc(0x20);\n    pointer5[1] = 0;\n    char_var2 = bfd_get_full_section_contents();\n    if (char_var2 != '\\0') {\n      long_var3 = merge_gnu_build_notes_0010551d();\n      pointer5[2] = long_var3;\n      if ((long_var3 == long_var2) || (char_var2 = bfd_set_section_size(), char_var2 != '\\0')) {\n        pointer5[3] = (long)merged_notes_list;\n        *pointer5 = long_var2;\n        merged_notes_list = pointer5;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,filename,long_var2);\n        free((void *)pointer5[1]);\n        free(pointer5);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (long_var2 = *(long *)(long_var2 + 8); long_var2 != 0; long_var2 = *(long *)(long_var2 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointer6 != (undefined8 *)0x0; pointer6 = (undefined8 *)*pointer6) {\n    long_var2 = bfd_get_section_by_name();\n    if (long_var2 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(long_var2 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      size_var1 = *(size_t *)(long_var2 + 0x40);\n      string_var2 = fopen((char *)pointer6[2],\"w\");\n      if (string_var2 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(pointer6[2],0,0);\n      }\n      else {\n        char_var2 = bfd_malloc_and_get_section();\n        if (char_var2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((size_var1 != 0) &&\n                (size_var2 = fwrite(section_dump_file_name,1,size_var1,string_var2), size_var2 != size_var1)) {\n          pointer9 = __errno_location();\n          char_pointer3 = strerror(*pointer9);\n          ulong_var4 = pointer6[2];\n          ulong_var3 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(ulong_var3,ulong_var4,char_pointer3);\n          free(section_dump_file_name);\n          fclose(string_var2);\n          return 0;\n        }\n        fclose(string_var2);\n        free(section_dump_file_name);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    long_var3 = 0;\n  }\n  else {\n    long_var2 = bfd_get_section_by_name(filename,\".gnu_debuglink\");\n    if (long_var2 != 0) {\n      ulong_var4 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(ulong_var4);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    long_var3 = bfd_create_gnu_debuglink_section(filename);\n    long_var2 = DAT_00127a30;\n    if (long_var3 == 0) {\n      ulong_var4 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,filename,0,ulong_var4,long_var2);\n      return 0;\n    }\n    if (*(int *)(*(long *)(filename + 8) + 8) == 2) {\n      unsigned_variable8 = 0;\n      for (ulong_var5 = *(ulong *)(filename + 0x90); ulong_var5 != 0;\n          ulong_var5 = *(ulong *)(ulong_var5 + 8)) {\n        ulong_var4 = *(ulong *)(ulong_var5 + 0x30);\n        ulong_var6 = unsigned_variable8;\n        ulong_var1 = ulong_var5;\n        ulong_var2 = unsigned_variable8;\n        if (ulong_var4 != 0) {\n          while ((ulong_var6 = ulong_var1, ulong_var2 != 0 &&\n                 (ulong_var6 = ulong_var5, ulong_var4 <= *(ulong *)(unsigned_variable8 + 0x30)))) {\n            ulong_var5 = *(ulong *)(ulong_var5 + 8);\n            if (ulong_var5 == 0) goto LAB_00107db8;\n            ulong_var4 = *(ulong *)(ulong_var5 + 0x30);\n            ulong_var1 = unsigned_variable8;\n            ulong_var2 = ulong_var4;\n          }\n        }\n        unsigned_variable8 = ulong_var6;\n      }\nLAB_00107db8:\n      if (unsigned_variable8 == 0) {\n        ulong_var5 = 0x1000;\n      }\n      else {\n        unsigned_variable8 = *(long *)(unsigned_variable8 + 0x40) + *(long *)(unsigned_variable8 + 0x30);\n        ulong_var5 = 0xffffffffffffffff;\n        if (unsigned_variable8 < 0xfffffffffffff001) {\n          ulong_var5 = unsigned_variable8 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(long_var3 + 0x28) = *(byte *)(long_var3 + 0x28) | 1;\n      *(ulong *)(long_var3 + 0x30) = ulong_var5;\n      *(ulong *)(long_var3 + 0x38) = ulong_var5;\n    }\n  }\n  long_pointer3 = DAT_001278d0;\n  int_var3 = *(int *)(filename + 0xa0);\n  if (int_var3 != 0) {\n    ulong_var5 = process_binary_function_0010554f();\n    return ulong_var5;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    pointer_to_undefined4 = (undefined4 *)0x0;\n  }\n  else {\n    loop_node = &PTR_sstring_var1tab_00125c60;\n    pointer_to_undefined4 = (undefined4 *)xmalloc(0x60);\n    pointer_var34 = pointer_to_undefined4;\n    for (long_var2 = 0x18; long_var2 != 0; long_var2 = long_var2 + -1) {\n      *pointer_var34 = 0;\n      pointer_var34 = pointer_var34 + (ulong)byte_var2 * -2 + 1;\n    }\n    filename = (char *)0x0;\n    do {\n      pointer2 = *loop_node;\n      long_var2 = bfd_get_section_by_name();\n      long_var3 = bfd_get_section_by_name();\n      if ((long_var2 != 0) && (long_var3 != 0)) {\n        long_var2 = *(long *)(long_var2 + 0x40);\n        section_contents = (void *)xmalloc(long_var2);\n        char_var2 = bfd_get_section_contents();\n        if (char_var2 == '\\0') {\n          uint_var3 = bfd_get_error();\n          bfd_errmsg(uint_var3);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*long_ptr4);\n          free(filename);\n          free(section_contents);\n        }\n        else {\n          ulong_var5 = *(ulong *)(long_var3 + 0x40);\n          pointer5 = (void *)xmalloc(ulong_var5 + 1);\n          byte1 = bfd_get_section_contents();\n          if (byte1 == '\\0') {\n            uint_var3 = bfd_get_error();\n            bfd_errmsg(uint_var3);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*long_ptr4);\n            free(filename);\n          }\n          else {\n            *(undefined *)((long)pointer5 + ulong_var5) = 0;\n            if ((filename != (char *)0x0) ||\n               (filename = (char *)start_stab_constprop_0(),\n               filename != (char *)0x0)) {\n              long_var5 = 0;\n              long_stack_var2 = 0;\n              for (pointer = section_contents; pointer <= (void *)((long)section_contents + long_var2 + -0xc);\n                  pointer = (void *)((long)pointer + 0xc)) {\n                unsigned_variable8 = (**(code **)(long_ptr4[1] + 0x40))(pointer);\n                byte_var = *(byte *)((long)pointer + 4);\n                uint_var3 = (**(code **)(long_ptr4[1] + 0x58))((long)pointer + 6);\n                long_var3 = (**(code **)(long_ptr4[1] + 0x40))((long)pointer + 8);\n                if (byte_var == 0) {\n                  long_stack_var2 = long_var5;\n                  long_var5 = long_var5 + long_var3;\n                }\n                else {\n                  ulong_var4 = (unsigned_variable8 & 0xffffffff) + long_stack_var2;\n                  if (ulong_var4 < ulong_var5) {\n                    char_pointer3 = (char *)((long)pointer5 + ulong_var4);\n                    pointer_var5 = (char *)0x0;\n                    while( true ) {\n                      size_var1 = strlen(char_pointer3);\n                      if (((size_var1 == 0) || (string3 = char_pointer3 + (size_var1 - 1), *string3 != '\\')) ||\n                         ((ulong)((long)section_contents + long_var2) < (long)pointer + 0x10U)) goto LAB_001077fb;\n                      *string3 = '\\0';\n                      pointer = (void *)((long)pointer + 0xc);\n                      int_var1 = (**(code **)(long_ptr4[1] + 0x40))(pointer);\n                      unsigned_variable8 = (ulong)(uint)(int_var1 + (int)long_stack_var2);\n                      if (ulong_var5 <= unsigned_variable8) break;\n                      char_pointer3 = (char *)concat(char_pointer3,(long)pointer5 + unsigned_variable8,0);\n                      *string3 = '\\';\n                      free(pointer_var5);\n                      pointer_var5 = char_pointer3;\n                    }\n                    ulong_var4 = *long_ptr4;\n                    string3 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,string3,ulong_var4,pointer2,((long)pointer - (long)section_contents) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)byte_var,uint_var3,long_var3,char_pointer3);\n                    char_var2 = parse_stab(pointer_to_undefined4,filename,byte_var);\n                    if (char_var2 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pointer_var5);\n                      free(filename);\n                      free(section_contents);\n                      free(pointer5);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulong_var4 = *long_ptr4;\n                    char_pointer3 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,char_pointer3,ulong_var4,pointer2,((long)pointer - (long)section_contents) / 0xc,\n                            unsigned_variable8 & 0xffffffff,(ulong)byte_var,((long)pointer - (long)section_contents) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(section_contents);\n              goto LAB_001058eb;\n            }\n          }\n          free(pointer5);\n          free(section_contents);\n        }\nLAB_00105981:\n        free(pointer_to_undefined4);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      loop_node = loop_node + 2;\n    } while (loop_node != (undefined **)&DAT_00125c90);\n    if ((filename != (char *)0x0) && (char_var2 = finish_stab(), char_var2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(long_ptr4[1] + 8) == 1) {\n      long_var2 = 0;\n      for (pointer4 = long_pointer3; pointer4 < long_pointer3 + size_of_symbols; pointer4 = pointer4 + 1) {\n        (**(code **)(long_ptr4[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((long_var2 != 0) || (long_var2 = start_stab_constprop_0(), long_var2 != 0)) &&\n             ((other_input_variable != (char *)0x0 && (*other_input_variable != '\\0')))) {\n            char_pointer3 = (char *)0x0;\n            string3 = other_input_variable;\n            while (((*string3 != '\\0' && (size_var1 = strlen(string3), string3[size_var1 - 1] == '\\')) &&\n                   (pointer4 + 1 < long_pointer3 + size_of_symbols))) {\n              string2 = (char *)xstrdup(string3);\n              size_var1 = strlen(string2);\n              string2[size_var1 - 1] = '\\0';\n              string3 = (char *)concat(string2,*(undefined8 *)(pointer4[1] + 8),0);\n              free(string2);\n              free(char_pointer3);\n              pointer4 = pointer4 + 1;\n              char_pointer3 = string3;\n            }\n            save_stab(uStack0000000000000158,(int)short_var1,section_dump_file_name,string3);\n            byte1 = parse_stab(pointer_to_undefined4,long_var2,uStack0000000000000158);\n            if (byte1 != '\\0') goto LAB_00106cac;\n            stab_context();\n            free_saved_stabs();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_saved_stabs();\n      if ((long_var2 != 0) && (char_var2 = finish_stab(), char_var2 == '\\0')) goto LAB_00105981;\n    }\n    if (byte1 == '\\0') {\n      if ((*(int *)(long_ptr4[1] + 8) != 2) || (size_of_symbols == 0)) {\n        char_pointer3 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      section_dump_file_name = (char *)0x0;\n      in_stack_val2 = long_pointer3;\n      in_stack_val4 = 0;\n      in_stack_val3 = size_of_symbols;\n      stack_long_var2 = 0;\n      pointer6 = (undefined8 *)&stack0x00000148;\n      for (long_var2 = 0x22; long_var2 != 0; long_var2 = long_var2 + -1) {\n        *(undefined4 *)pointer6 = 0;\n        pointer6 = (undefined8 *)((long)pointer6 + (ulong)byte_var2 * -8 + 4);\n      }\n      char_var2 = '\\0';\n      _uint_ptr = (int *)0x0;\n      filename = (char *)0x0;\n      pointer_var5 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)size_of_symbols <= in_stack_val4) break;\n        long_var2 = long_pointer3[in_stack_val4];\n        char_var1 = bfd_coff_get_syment();\n        long_var3 = stack_long_var2;\n        if (char_var1 == '\\0') {\n          uint_var3 = bfd_get_error();\n          bfd_errmsg(uint_var3);\n          char_pointer3 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          ulong_var4 = dcgettext(0,char_pointer3,5);\n          non_fatal(ulong_var4);\n          goto LAB_00105981;\n        }\n        char_pointer3 = *(char **)(long_var2 + 8);\n        in_stack_val4 = in_stack_val4 + 1;\n        stack_long_var2 = (ulong)bStack0000000000000101 + 1 + stack_long_var2;\n        if ((bStack0000000000000101 != 0) && (char_var1 = bfd_coff_get_auxent(), char_var1 == '\\0')) {\n          uint_var3 = bfd_get_error();\n          bfd_errmsg(uint_var3);\n          char_pointer3 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pointer_var5 == (char *)long_var3) {\n          if (bStack0000000000000100 != 0x67) {\n            char_var1 = debug_set_filename(pointer_to_undefined4);\n            if (char_var1 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pointer_var5 = (char *)in_stack_val7;\n          char_var1 = debug_set_filename(pointer_to_undefined4);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(long_ptr4[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(long_ptr4[0x22] + 0x3c) & 0x3f)) {\n                _uint_ptr = (int *)(**(code **)(long_ptr4[1] + 0x238))();\n                filename = char_pointer3;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              int_var1 = strcmp(char_pointer3,\".bb\");\n              if (int_var1 == 0) {\n                char_var1 = debug_start_block(pointer_to_undefined4);\n                goto joined_r0x00107247;\n              }\n              int_var1 = strcmp(char_pointer3,\".eb\");\n              if (int_var1 == 0) {\n                char_var1 = debug_end_block(pointer_to_undefined4);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              int_var1 = strcmp(char_pointer3,\".bf\");\n              if (int_var1 == 0) {\n                if (filename != (char *)0x0) {\n                  long_var3 = parse_coff_type_lto_priv_0();\n                  if ((long_var3 == 0) ||\n                     (char_var2 = debug_record_function(pointer_to_undefined4), char_var2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uint_ptr != (int *)0x0) {\n                    int_var1 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      int_var1 = index - 1;\n                    }\n                    long_var2 = *(long *)(*(long *)(long_var2 + 0x20) + 0x30);\n                    while( true ) {\n                      int_var3 = _uint_ptr[4];\n                      if (int_var3 == 0) break;\n                      char_var1 = debug_record_line(pointer_to_undefined4,int_var1 + int_var3,\n                                                *(long *)(_uint_ptr + 6) + long_var2);\n                      _uint_ptr = _uint_ptr + 4;\n                      if (char_var1 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uint_ptr = (int *)0x0;\n                  filename = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                char_pointer3 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                int_var1 = strcmp(char_pointer3,\".ef\");\n                if (int_var1 != 0) goto switchD_00106e1a_caseD_68;\n                if (char_var2 != '\\0') {\n                  char_var2 = debug_end_function(pointer_to_undefined4);\n                  if (char_var2 == '\\0') goto LAB_00105981;\n                  char_var2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                char_pointer3 = \"%ld: unexpected .ef\\n\";\n              }\n              ulong_var4 = dcgettext(0,char_pointer3,5);\n              non_fatal(ulong_var4);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          long_var1 = parse_coff_type_lto_priv_0();\n          if (long_var1 == 0) goto LAB_00105981;\n          char_var1 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,long_var2,long_var3);\n        }\njoined_r0x00107247:\n        if (char_var1 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(filename + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(filename + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(filename + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (size_of_symbols != 0) {\n        long_pointer3 = DAT_001278d0 + size_of_symbols;\n        pointer4 = DAT_001278d0;\n        do {\n          uint_var1 = *(uint *)(*pointer4 + 0x18);\n          if ((uint_var1 & 0x1000000) != 0) {\n            *(uint *)(*pointer4 + 0x18) = uint_var1 & 0xfeffffff;\n          }\n          pointer4 = pointer4 + 1;\n        } while (long_pointer3 != pointer4);\n      }\n    }\n    else {\n      for (long_var2 = *(long *)(filename + 0x90); long_var2 != 0; long_var2 = *(long *)(long_var2 + 8)\n          ) {\n        if (*(long *)(long_var2 + 0xe8) != 0) {\n          pointer1 = (uint *)(*(long *)(long_var2 + 0xe8) + 0x18);\n          *pointer1 = *pointer1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      int_var1 = bfd_get_error();\n      if (int_var1 != 0) {\n        DAT_00127a40 = 1;\n        return 0;\n      }\n    }\n    long_var2 = xmalloc();\n    long_pointer3 = DAT_001278d0;\n    uint_ptr = *(uint *)((long)long_ptr4 + 0x44) & 0x42;\n    DAT_001278c8 = long_var2;\n    if (size_of_symbols == 0) {\n      ulong_var5 = 0;\n    }\n    else {\n      ulong_var5 = 0;\n      _byte1 = 0;\n      do {\n        int_var1 = DAT_001279c0;\n        pointer4 = (long *)long_pointer3[_byte1];\n        function_pointer = (code *)pointer4[4];\n        uint_var1 = *(uint *)(pointer4 + 3);\n        char_pointer3 = (char *)pointer4[1];\n        string3 = char_pointer3;\n        if (DAT_001279c8 != (undefined8 *)0x0) {\n          int_var3 = 0;\n          pointer6 = DAT_001279c8;\n          while( true ) {\n            if ((int_var1 <= int_var3) || (string2 = (char *)pointer6[5], string2 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (string2 != \"\") break;\nLAB_0010750b:\n            int_var3 = int_var3 + 1;\n          }\n          int_var2 = strcmp(string2,char_pointer3);\n          if (int_var2 != 0) {\n            pointer6 = (undefined8 *)*pointer6;\n            goto LAB_0010750b;\n          }\n          free(string2);\n          unsigned_variable8 = ulong_var5 + 1;\n          pointer6[5] = \"\";\n          ulong_var3 = create_new_symbol(pointer6);\n          ulong_var4 = DAT_001278f0;\n          *(undefined8 *)(long_var2 + ulong_var5 * 8) = ulong_var3;\n          long_var3 = htab_elements(ulong_var4);\n          if ((long_var3 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          char_var2 = *char_pointer3;\n          if (char_var2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          char_pointer3 = DAT_00127928;\n          if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(filename + 8) + 0x1c) != '\\0')\n             ) {\n            long_var3 = long_ptr4[1];\n            char_var2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        long_var3 = htab_elements(DAT_001278f0);\n        unsigned_variable8 = ulong_var5;\n        if ((long_var3 == 0) && (DAT_001278f8 == (char **)0x0)) goto LAB_00105af8;\n        if (char_pointer3 != (char *)0x0) {\nLAB_001064eb:\n          if (((*char_pointer3 == '_') && (char_pointer3[1] == '_')) &&\n             (int_var1 = strcmp(char_pointer3 + (char_pointer3[2] == '_'),\"__gnu_lto_slim\"), int_var1 == 0)) {\n            ulong_var4 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            fatal(ulong_var4);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        section_dump_file_name = char_pointer3;\n        long_var3 = htab_find(DAT_001278f0);\n        if (((long_var3 == 0) || (string3 = *(char **)(long_var3 + 8), char_pointer3 == string3)) &&\n           (string3 = char_pointer3, ppc_var35 = DAT_001278f8, (uint_var1 & 0x100) != 0)) {\n          for (; ppc_var35 != (char **)0x0; ppc_var35 = (char **)ppc_var35[3]) {\n            int_var1 = strcmp(*ppc_var35,char_pointer3);\n            if (int_var1 == 0) {\n              string3 = ppc_var35[1];\n              break;\n            }\n          }\n        }\n        pointer4[1] = (long)string3;\n        char_var2 = *string3;\n        if (char_var2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        char_pointer3 = DAT_00127928;\n        long_var3 = long_ptr4[1];\n        if (*(char *)(long_var3 + 0x1c) == char_var2) {\n          if (DAT_001279a8 == '\\0') {\n            if ((DAT_00127988 == '\\0') ||\n               ((((uint_var1 & 0x82) == 0 && (function_pointer != bfd_map_over_sections)) &&\n                ((*(byte *)(pointer4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            string3 = string3 + 1;\n            pointer4[1] = (long)string3;\n            goto joined_r0x00106565;\n          }\n          char_var2 = *(char *)(*(long *)(filename + 8) + 0x1c);\n          if (char_var2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127928 != (char *)0x0) {\n            string3 = string3 + 1;\n            pointer4[1] = (long)string3;\n            size_var1 = strlen(string3);\n            long_var3 = size_var1 + 2;\n            goto LAB_001066bc;\n          }\n          *string3 = char_var2;\n          pointer4[1] = (long)string3;\n          ulong_var5 = unsigned_variable8;\n        }\n        else {\n          if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(filename + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            ulong_var5 = unsigned_variable8;\n            if (char_pointer3 == (char *)0x0) goto LAB_00105b32;\n            size_var1 = strlen(string3);\n            size_var2 = strlen(char_pointer3);\n            char_pointer3 = (char *)xmalloc(size_var2 + size_var1 + 1);\n            string2 = char_pointer3;\n          }\n          else {\nLAB_0010668d:\n            char_pointer3 = DAT_00127928;\n            if ((*(char *)(long_var3 + 0x1c) != '\\0') && (char_var2 != *(char *)(long_var3 + 0x1c)))\n            goto joined_r0x00106565;\n            size_var1 = strlen(string3);\n            long_var3 = size_var1 + 2;\n            if (char_pointer3 == (char *)0x0) {\n              string2 = (char *)xmalloc(long_var3);\n            }\n            else {\nLAB_001066bc:\n              size_var1 = strlen(char_pointer3);\n              string2 = (char *)xmalloc(size_var1 + long_var3);\n            }\n            char_pointer3 = string2 + 1;\n            *string2 = *(char *)(*(long *)(filename + 8) + 0x1c);\n          }\n          string_var1 = DAT_00127928;\n          if (DAT_00127928 != (char *)0x0) {\n            strcpy(char_pointer3,DAT_00127928);\n            size_var1 = strlen(string_var1);\n            char_pointer3 = char_pointer3 + size_var1;\n          }\n          strcpy(char_pointer3,string3);\n          pointer4[1] = (long)string2;\n          string3 = string2;\n          ulong_var5 = unsigned_variable8;\n        }\nLAB_00105b32:\n        if (DAT_00127a48 == 7) goto LAB_001067a8;\n        if (((uint_var1 & 0x20) == 0) &&\n           (((uint_var1 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(pointer4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uint_ptr == 0) &&\n              (((uint_var1 & 0x82) != 0 || ((*(byte *)(pointer4[4] + 0x25) & 0x10) != 0)))) ||\n             (int_var1 = bfd_decode_symclass(pointer4), int_var1 == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ea == '\\0') {\n              long_var3 = htab_find();\n              if (long_var3 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              section_dump_file_name = string3;\n              htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uint_var1 & 0x82) == 0) && (function_pointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(pointer4[4] + 0x25) & 0x10) == 0)) {\n            if ((uint_var1 & 4) == 0) {\n              if (((*(int *)(long_ptr4[1] + 8) != 2) ||\n                  (long_var3 = *(long *)(pointer4[4] + 0xd0), long_var3 == 0)) ||\n                 (*(long *)(long_var3 + 0x40) == 0)) {\n                if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                if (DAT_00127a44 == 1) {\n                  char_var2 = bfd_is_local_label(long_ptr4);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            char_var2 = DAT_001279a0;\n            if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n              if (char_var2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a48 != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ea == '\\0') {\n          long_var3 = htab_find();\n          if (long_var3 != 0) {\nLAB_0010687f:\n            ulong_var4 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            non_fatal(ulong_var4);\n            DAT_00127a40 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          section_dump_file_name = string3;\n          htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uint_var1 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ea != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            section_dump_file_name = string3;\n            htab_traverse(DAT_00127a10,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          long_var3 = htab_find();\n          if (long_var3 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a38 != '\\0') && ((uint_var1 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ea == '\\0') {\n            long_var3 = htab_find();\n            if (long_var3 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            section_dump_file_name = string3;\n            htab_traverse(DAT_00127a28,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          char_var2 = is_strip_section_isra_0(pointer4[4]);\n          if (char_var2 == '\\0') {\n            if (((uint_var1 & 0x800002) == 0) && (function_pointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uint_var1 & 0x82) != 0) {\n                char_var2 = is_specified_symbol(string3);\n                if ((char_var2 == '\\0') &&\n                   ((long_var3 = htab_elements(DAT_001279f8), long_var3 == 0 ||\n                    (char_var2 = is_specified_symbol(string3), char_var2 != '\\0')))) {\n                  if (((((DAT_00127958 == '\\0') ||\n                        (uint_var2 = *(uint *)(pointer4 + 3), (uint_var2 & 0x200000) != 0)) ||\n                       (long_var3 = *pointer4, long_var3 == 0)) ||\n                      ((*(int *)(*(long *)(long_var3 + 8) + 8) != 5 || (*(long *)(long_var3 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)pointer4 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uint_var2 = *(uint *)(pointer4 + 3);\n                }\n                *(uint *)(pointer4 + 3) = uint_var2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uint_var1 & 1) != 0) && (char_var2 = is_specified_symbol(string3), char_var2 != '\\0')) {\n                *(uint *)(pointer4 + 3) = *(uint *)(pointer4 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279e8 != '\\0') || (char_var2 = is_specified_symbol(string3), char_var2 != '\\0')) {\n                *(uint *)(pointer4 + 3) = *(uint *)(pointer4 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (function_pointer != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(long_var2 + ulong_var5 * 8) = pointer4;\n            ulong_var5 = ulong_var5 + 1;\n          }\n        }\n        _byte1 = _byte1 + 1;\n      } while (size_of_symbols != _byte1);\n    }\n    if (DAT_001279c8 != (undefined8 *)0x0) {\n      pointer6 = DAT_001279c8;\n      int_var1 = DAT_001279c0;\n      for (long_var3 = 0; long_var3 < int_var1; long_var3 = long_var3 + 1) {\n        char_pointer3 = (char *)pointer6[5];\n        if (char_pointer3 == (char *)0x0) {\n          long_var1 = ulong_var5 * 8;\n          ulong_var5 = ulong_var5 + 1;\n          ulong_var4 = create_new_symbol(pointer6,filename);\n          *(undefined8 *)(long_var2 + long_var1) = ulong_var4;\n          int_var1 = DAT_001279c0;\n        }\n        else if (char_pointer3 != \"\") {\n          ulong_var4 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          fatal(ulong_var4,char_pointer3);\n        }\n        pointer6 = (undefined8 *)*pointer6;\n      }\n    }\n    bool_var = DAT_001279a0 != '\\0';\n    *(undefined8 *)(long_var2 + ulong_var5 * 8) = 0;\n    if ((bool_var) && (pointer_to_undefined4 != (undefined4 *)0x0)) {\n      int_var1 = *(int *)(*(undefined8 **)(filename + 8) + 1);\n      if ((int_var1 != 5) && (int_var1 != 2)) {\n        ulong_var4 = **(undefined8 **)(filename + 8);\n        ulong_var3 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,filename,0,ulong_var3,ulong_var4);\nLAB_00105d8c:\n        free(pointer_to_undefined4);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      void_pointer1 = (void *)0x0;\n      char_var2 = write_stabs_in_sections_debugging_info_constprop_0\n                        (filename,pointer_to_undefined4,&stack0x000000c0,&stack0x00000110\n                         ,&stack0x000000e0,&stack0x00000140);\n      if (char_var2 == '\\0') goto LAB_00105d8c;\n      long_var2 = bfd_make_section_with_flags(filename,\".stab\",0x2108);\n      long_var3 = bfd_make_section_with_flags(filename,\".stabstr\",0x2108);\n      if ((((long_var2 == 0) || (long_var3 == 0)) ||\n          (char_var2 = bfd_set_section_size(long_var2,ushort_stack_variable), char_var2 == '\\0')) ||\n         (char_var2 = bfd_set_section_size(long_var3,section_dump_file_name), char_var2 == '\\0')) {\n        char_pointer3 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulong_var4 = dcgettext(0,char_pointer3,5);\n        bfd_nonfatal_message(0,filename,0,ulong_var4);\n        free(void_pointer1);\n        free(pointer_to_undefined4);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      *(undefined4 *)(long_var2 + 0x7c) = 2;\n      *(undefined4 *)(long_var3 + 0x7c) = 0;\n      char_var2 = bfd_set_section_contents\n                        (filename,long_var2,in_stack_val2,0,ushort_stack_variable);\n      if ((char_var2 == '\\0') ||\n         (char_var2 = bfd_set_section_contents\n                            (filename,long_var3,void_pointer1,0,section_dump_file_name),\n         char_var2 == '\\0')) {\n        char_pointer3 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(pointer_to_undefined4);\n    }\n    size_of_symbols = ulong_var5 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    long_var2 = htab_elements(DAT_00127a18);\n    if (((long_var2 != 0) ||\n        (((((((long_var2 = htab_elements(DAT_00127a28), long_var2 != 0 ||\n              (long_var2 = htab_elements(DAT_00127a08), long_var2 != 0)) ||\n             (long_var2 = htab_elements(DAT_00127a00), long_var2 != 0)) ||\n            ((long_var2 = htab_elements(DAT_001279f8), long_var2 != 0 ||\n             (long_var2 = htab_elements(DAT_001279f0), long_var2 != 0)))) ||\n           (long_var2 = htab_elements(DAT_001278f0), long_var2 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(filename,DAT_001278c8,size_of_symbols & 0xffffffff);\n  bfd_map_over_sections(long_ptr4,copy_relocations_in_section,filename);\n  bfd_map_over_sections(long_ptr4,copy_section,filename);\n  for (pointer6 = DAT_001279e0; pointer3 = DAT_001279d8, pointer6 != (undefined8 *)0x0;\n      pointer6 = (undefined8 *)*pointer6) {\n    char_var2 = bfd_set_section_contents(filename,pointer6[5],pointer6[4],0,pointer6[3]);\n    if (char_var2 == '\\0') {\n      bfd_nonfatal_message(0,filename,pointer6[5],0);\n      return 0;\n    }\n  }\n  for (; pointer3 != (undefined8 *)0x0; pointer3 = (undefined8 *)*pointer3) {\n    ulong_var4 = *(undefined8 *)(pointer3[5] + 0x60);\n    char_var2 = bfd_set_section_contents(filename,ulong_var4,pointer3[4],0,pointer3[3]);\n    if (char_var2 == '\\0') {\n      bfd_nonfatal_message(0,filename,ulong_var4,0);\n      return 0;\n    }\n  }\n  if (merged_notes_list == (long *)0x0) {\n    if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n      ulong_var4 = *long_ptr4;\n      ulong_var3 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      non_fatal(ulong_var3,ulong_var4);\n    }\nLAB_0010578f:\n    if ((DAT_00127a30 == 0) ||\n       (char_var2 = bfd_fill_in_gnu_debuglink_section(filename,long_var3),\n       long_var2 = DAT_00127a30, char_var2 != '\\0')) {\n      uint_var1 = (**(code **)(*(long *)(filename + 8) + 0x140))(long_ptr4);\n      ulong_var5 = (ulong)uint_var1;\n      if ((char)uint_var1 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return ulong_var5;\n        }\n        char_var2 = bfd_alt_mach_code(filename,DAT_00127930 & 0xffffffff);\n        unsigned_variable8 = DAT_00127930;\n        if (char_var2 != '\\0') {\n          return ulong_var5;\n        }\n        ulong_var4 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        non_fatal(ulong_var4,unsigned_variable8);\n        if (*(int *)(*(long *)(filename + 8) + 8) != 5) {\n          ulong_var4 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(ulong_var4);\n          return ulong_var5;\n        }\n        ulong_var4 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        non_fatal(ulong_var4);\n        *(short *)(*(long *)(filename + 0x110) + 0x3a) = (short)DAT_00127930;\n        return ulong_var5;\n      }\n      ulong_var4 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,filename,0,ulong_var4);\n    }\n    else {\n      ulong_var4 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,filename,0,ulong_var4,long_var2);\n    }\n    return 0;\n  }\n  long_pointer3 = (long *)0x0;\n  pointer6 = *(undefined8 **)(filename + 0x90);\n  do {\n    if (pointer6 == (undefined8 *)0x0) {\n      do {\n        long_pointer3 = (long *)merged_notes_list[3];\n        free((void *)merged_notes_list[1]);\n        free(merged_notes_list);\n        merged_notes_list = long_pointer3;\n      } while (long_pointer3 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(filename + 8) + 8) == 5)) &&\n        (*(int *)(pointer6[0x1a] + 4) == 7)) &&\n       (char_var2 = startswith_lto_priv_0_lto_priv_0(*pointer6,\".gnu.build.attributes\"), char_var2 != '\\0'))\n    {\n      if (long_pointer3 == (long *)0x0) {\n        long_pointer3 = merged_notes_list;\n      }\n      pointer4 = merged_notes_list;\n      if (*(undefined8 **)(*long_pointer3 + 0x60) == pointer6) {\nLAB_0010625f:\n        char_pointer3 = \"error: failed to merge notes\";\n        if (long_pointer3[1] != 0) {\n          char_var2 = bfd_set_section_contents(filename,pointer6,long_pointer3[1],0,long_pointer3[2]);\n          if (char_var2 == '\\0') {\n            ulong_var4 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            bfd_nonfatal_message(0,filename,pointer6,ulong_var4);\n            return 0;\n          }\n          long_pointer3 = (long *)long_pointer3[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          long_pointer3 = pointer4;\n          if (*(undefined8 **)(*pointer4 + 0x60) == pointer6) goto LAB_0010625f;\n          long_pointer3 = (long *)pointer4[3];\n          pointer4 = long_pointer3;\n        } while (long_pointer3 != (long *)0x0);\n        char_pointer3 = \"error: failed to locate merged notes\";\n      }\n      ulong_var4 = dcgettext(0,char_pointer3,5);\n      bfd_nonfatal_message(0,filename,pointer6,ulong_var4);\n    }\nLAB_001061be:\n    pointer6 = (undefined8 *)pointer6[1];\n  } while( true );\n}\n\n",
            "current_name": "merge_gnu_build_notes_0010551d",
            "entrypoint": "0x0010551d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010551d": "merge_gnu_build_notes_0010551d",
                "__ptr": "section_contents",
                "__ptr_00": "pointer5",
                "__s": "string_var1",
                "__s_00": "string_var2",
                "bVar2": "byte_var",
                "bVar38": "bool_var",
                "bVar39": "byte_var2",
                "cVar2": "byte_var",
                "cVar8": "char_var1",
                "cVar9": "char_var2",
                "iStack000000000000006c": "int_var3",
                "iVar11": "int_var1",
                "iVar14": "int_var2",
                "iVar31": "int_var3",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "size_of_symbols",
                "in_stack_00000018": "byte1",
                "in_stack_000000c0": "in_stack_val2",
                "in_stack_000000c8": "in_stack_val3",
                "in_stack_000000d0": "in_stack_val4",
                "in_stack_000000d8": "stack_long_var2",
                "in_stack_000000e0": "void_pointer1",
                "in_stack_000000f0": "in_stack_val7",
                "in_stack_00000110": "ushort_stack_variable",
                "in_stack_00000118": "index",
                "in_stack_00000140": "section_dump_file_name",
                "in_stack_00000150": "other_input_variable",
                "lStack0000000000000078": "long_var3",
                "lStack0000000000000088": "long_stack_var2",
                "lStack00000000000000a0": "long_var5",
                "lVar15": "long_var",
                "lVar21": "long_var1",
                "lVar25": "long_var2",
                "lVar27": "long_var3",
                "lVar32": "long_variable4",
                "pcStack0000000000000038": "filename",
                "pcStack0000000000000090": "pointer_var5",
                "pcVar19": "string2",
                "pcVar28": "string3",
                "pcVar33": "char_pointer3",
                "pcVar35": "char_pointer_var1",
                "pcVar4": "function_pointer",
                "piVar23": "pointer9",
                "plVar15": "pointer4",
                "plVar32": "long_pointer3",
                "ppcVar35": "ppc_var35",
                "ppuVar37": "loop_node",
                "puStack0000000000000020": "pointer_to_undefined4",
                "puVar1": "pointer1",
                "puVar29": "pointer6",
                "puVar3": "pointer2",
                "puVar34": "pointer_var34",
                "puVar5": "pointer3",
                "pvVar36": "pointer",
                "sStack000000000000015a": "short_var1",
                "sVar18": "size_var1",
                "sVar26": "size_var2",
                "uStack0000000000000048": "uint_ptr",
                "uVar10": "uint_var1",
                "uVar12": "uint_var2",
                "uVar13": "uint_var3",
                "uVar16": "ulong_var3",
                "uVar17": "ulong_var4",
                "uVar20": "unsigned_variable8",
                "uVar22": "ulong_var4",
                "uVar24": "ulong_var5",
                "uVar30": "ulong_var6",
                "uVar6": "ulong_var1",
                "uVar7": "ulong_var2",
                "unaff_R13": "merged_notes_list",
                "unaff_R14": "long_ptr4",
                "unaff_RBP": "long_var2",
                "unaff_RBX": "pointer5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010554f": {
            "additional_data": {
                "BVar2": {
                    "stab_name": 1
                },
                "DAT_001278c8": {
                    "symtab_section": 1
                },
                "DAT_001278d0": {
                    "section_list": 1
                },
                "DAT_001278d8": {
                    "discard_parsers": 1
                },
                "DAT_001278f0": {
                    "string_to_symbol_mapping": 1
                },
                "DAT_001278f8": {
                    "symbol_to_section_mapping": 1
                },
                "DAT_00127928": {
                    "source_filename_suffix": 1
                },
                "DAT_00127930": {
                    "alternative_machine_code": 1
                },
                "DAT_00127958": {
                    "strip_section_symbol_table": 1
                },
                "DAT_00127959": {
                    "remove_unused_sections": 1
                },
                "DAT_00127988": {
                    "discard_specific_sections": 1
                },
                "DAT_00127989": {
                    "another_type_propagation_algorithm_not_settling": 1,
                    "flag2": 1,
                    "flag_2": 1,
                    "is_data2_set": 1
                },
                "DAT_00127990": {
                    "maximum_string_length": 1,
                    "section_alignment": 1
                },
                "DAT_00127998": {
                    "flag1": 1,
                    "flag_1": 1,
                    "is_data1_set": 1,
                    "type_propagation_algorithm_not_settling": 1
                },
                "DAT_00127999": {
                    "new_string_fill_value": 1
                },
                "DAT_001279a0": {
                    "keep_all_symbol_definitions": 1
                },
                "DAT_001279a8": {
                    "keep_specific_sections": 1
                },
                "DAT_001279c0": {
                    "number_of_alternative_machine_codes": 1
                },
                "DAT_001279d8": {
                    "debug_link_section_info_list": 1
                },
                "DAT_001279e0": {
                    "data_var": 1
                },
                "DAT_001279e8": {
                    "keep_compiler_generated_symbols": 1
                },
                "DAT_001279ea": {
                    "use_linker_relocations": 1
                },
                "DAT_001279f8": {
                    "merge_section_symbol_table": 1
                },
                "DAT_00127a00": {
                    "keep_pattern": 1
                },
                "DAT_00127a08": {
                    "discard_pattern": 1
                },
                "DAT_00127a10": {
                    "keep_section_criteria": 1
                },
                "DAT_00127a18": {
                    "discard_section_criteria": 1
                },
                "DAT_00127a20": {
                    "merge_note_sections": 1
                },
                "DAT_00127a28": {
                    "discard_symbol_criteria": 1
                },
                "DAT_00127a30": {
                    "debug_link_path": 1
                },
                "DAT_00127a39": {
                    "keep_local_symbols": 1
                },
                "DAT_00127a40": {
                    "error_flag": 1,
                    "fatal_error": 1,
                    "non_fatal_errors": 1
                },
                "DAT_00127a48": {
                    "mode_of_operation": 1
                },
                "FUN_0010554f": {
                    "process_binary_function": 2
                },
                "FUN_0010870e": {
                    "get_sections": 1
                },
                "FUN_0010875d": {
                    "copy_section_data": 1
                },
                "FUN_001088ae": {
                    "copy_relocations": 1
                },
                "FUN_00108b3e": {
                    "merge_sections": 1
                },
                "FUN_0010bbd3": {
                    "is_section_mergeable": 1
                },
                "FUN_0010becd": {
                    "is_section_excluded": 1
                },
                "FUN_0010bf86": {
                    "write_stabs": 1
                },
                "FUN_0010dac0": {
                    "is_section_empty": 1
                },
                "FUN_0010dca6": {
                    "is_section_mergeable_with_data": 1
                },
                "FUN_0010df8d": {
                    "is_section_writeable": 1
                },
                "FUN_0010e804": {
                    "is_section_common": 1
                },
                "FUN_0010e80d": {
                    "is_section_bss_zero": 1
                },
                "FUN_0010ec9b": {
                    "is_section_read_only_indirect_code": 1
                },
                "FUN_0010eca4": {
                    "is_section_read_only_with_zero_data": 1
                },
                "FUN_00111dbe": {
                    "is_section_needed": 1
                },
                "FUN_001126c0": {
                    "is_symbol_excluded": 1
                },
                "FUN_00112894": {
                    "is_symbol_used": 1
                },
                "FUN_00112a33": {
                    "is_section_special": 1
                },
                "FUN_0011378f": {
                    "copy_stab_data": 1
                },
                "FUN_00113fb0": {
                    "copy_stabs": 1
                },
                "FUN_001159d0": {
                    "is_symbol_read_only_with_data": 1
                },
                "FUN_00115d70": {
                    "is_symbol_read_only_constant": 1
                },
                "FUN_00115dc0": {
                    "is_symbol_needed": 1
                },
                "FUN_00116030": {
                    "create_stab_sections": 1
                },
                "FUN_00116110": {
                    "create_external_symbol": 1
                },
                "FUN_0011a170": {
                    "is_special_note_section": 1
                },
                "FUN_0011a2e0": {
                    "is_end_of_text_or_locative_section": 1
                },
                "LVAR_786": {
                    "section_index": 1
                },
                "__dest": {
                    "destination": 1
                },
                "__ptr": {
                    "buffer": 1,
                    "gap_filler": 1,
                    "mergeable_notes_data": 1,
                    "placeholder_ptr": 1,
                    "ptr_var": 1,
                    "temp_ptr": 1
                },
                "__ptr_00": {
                    "buffer": 1,
                    "section_content_ptr": 1,
                    "section_contents": 1,
                    "section_data": 2,
                    "stab_data": 1
                },
                "__ptr_01": {
                    "buffer": 1,
                    "section_content_ptr_2": 1,
                    "section_contents": 1,
                    "string_data": 1,
                    "symbol_data": 1
                },
                "__ptr_02": {
                    "stab_buffer": 1,
                    "stab_data": 2,
                    "stab_data_ptr": 1,
                    "stab_entry_array": 1,
                    "stab_table": 2
                },
                "__s": {
                    "split_str": 1,
                    "tmp_string": 1
                },
                "_param_15": {
                    "int_pointer": 1,
                    "l": 1,
                    "line_number_table_entry": 1,
                    "line_table_data": 1
                },
                "_param_41": {
                    "exit_inner": 1,
                    "predicate_result": 1,
                    "symbol_entry_predicate_result": 1,
                    "temp_byte_var": 1
                },
                "_param_9": {
                    "count_var": 1,
                    "function_param_9": 1,
                    "i": 1,
                    "index": 1,
                    "symbol_entry_index": 1
                },
                "_stderr": {
                    "standard_error": 1
                },
                "bVar2": {
                    "byte_var": 2,
                    "section_type": 1
                },
                "bVar38": {
                    "bool_var": 1,
                    "condition": 1,
                    "has_debug_info": 1,
                    "has_debug_symbols": 1,
                    "has_debugging_info": 1,
                    "is_flag": 1,
                    "is_function_end": 1,
                    "is_other_section": 1
                },
                "bVar39": {
                    "byte_var2": 1,
                    "flag": 1,
                    "flag2": 1,
                    "is_global": 1,
                    "is_type_propagation_algorithm_settled": 1
                },
                "bVar5": {
                    "param_32": 1
                },
                "bVar6": {
                    "param_34": 1
                },
                "bVar7": {
                    "section_contents_result": 1
                },
                "bVar8": {
                    "is_symbol_local": 1
                },
                "cVar2": {
                    "result": 1
                },
                "cVar7": {
                    "c_var7": 1,
                    "char_var": 3,
                    "condition": 1,
                    "flag": 1,
                    "status": 1,
                    "success": 2,
                    "success_flag": 1,
                    "temp_char_var": 1
                },
                "cVar8": {
                    "char_var2": 2,
                    "success": 1
                },
                "compare_section_lma": {
                    "compare_section_by_lma": 1
                },
                "currentVar": {
                    "current_var": 1
                },
                "iVar10": {
                    "comparison": 1,
                    "i_var27": 1,
                    "int_var": 2,
                    "loop_counter": 1,
                    "loop_iterator": 1,
                    "section_counter": 1,
                    "temp_int_var": 1
                },
                "iVar11": {
                    "comparison": 1,
                    "int_var2": 2,
                    "string_compare_result": 1,
                    "temp_int_var2": 1
                },
                "iVar27": {
                    "int_var3": 1,
                    "symbol_loop_counter": 1
                },
                "iVar34": {
                    "section_flags": 1
                },
                "iVar9": {
                    "i_var11": 1,
                    "index": 1
                },
                "in_R10": {
                    "long_pointer4": 1,
                    "merged_note_list": 1,
                    "merged_note_sections": 1,
                    "merged_notes": 2,
                    "param_17": 1,
                    "pointers_list": 1,
                    "r10_register_var": 1
                },
                "in_stack_00000068": {
                    "fh": 1,
                    "hash_table_size": 1,
                    "param_11": 1,
                    "param_39": 1,
                    "size_param_7": 1,
                    "stack_size": 1
                },
                "in_stack_000000d8": {
                    "count": 1,
                    "param_25": 1
                },
                "in_stack_000000f8": {
                    "alternative_machine_code": 1,
                    "debug_flag": 1,
                    "param_27": 1
                },
                "in_stack_00000140": {
                    "buffer": 1
                },
                "lStack120": {
                    "stack0x000000f8": 1
                },
                "lStack208": {
                    "stack0x000000d8": 1
                },
                "lStack216": {
                    "stack0x000000c0": 1
                },
                "lStack224": {
                    "stack0x000000e0": 1
                },
                "lStack264": {
                    "stack0x00000110": 1
                },
                "lStack72": {
                    "stack0x000000f8": 1
                },
                "lStack800": {
                    "stack0x00000110": 1
                },
                "lStack804": {
                    "stack0x00000140": 1
                },
                "lStack808": {
                    "stack0x000000c0": 1
                },
                "lStack816": {
                    "stack0x000000e0": 1
                },
                "lStack824": {
                    "stack0x000000c0": 1
                },
                "lStack832": {
                    "stack0x00000110": 1
                },
                "lStack836": {
                    "stack0x00000140": 1
                },
                "lStack840": {
                    "stack0x000000e0": 1
                },
                "lStack848": {
                    "stack0x00000140": 1
                },
                "lVar12": {
                    "l_var14": 1
                },
                "lVar13": {
                    "l_var23": 1,
                    "symbol_value": 1
                },
                "lVar14": {
                    "file_size": 1,
                    "iteration_counter": 1,
                    "l_var14": 1,
                    "l_var_var": 1,
                    "length": 1,
                    "loop_counter": 1,
                    "num_bytes": 1,
                    "section_index": 3,
                    "section_size": 3,
                    "sections_length": 1,
                    "size": 1,
                    "temp_long_var": 1,
                    "value": 1
                },
                "lVar15": {
                    "symbol_iterator": 1
                },
                "lVar16": {
                    "symbol_size": 1
                },
                "lVar20": {
                    "merged_symbol_size": 1
                },
                "lVar21": {
                    "merged_symbol_index": 1
                },
                "lVar22": {
                    "merged_section_index": 1
                },
                "lVar23": {
                    "copied_symbol_size": 1,
                    "l_var23": 1,
                    "long_var": 1,
                    "long_var4": 1,
                    "mergeable_notes_size": 1,
                    "note_section_size": 1,
                    "pointer": 1,
                    "section_content": 1,
                    "section_size": 1,
                    "string_length": 1
                },
                "lVar24": {
                    "copied_symbol_index": 1
                },
                "lVar25": {
                    "copied_section_index": 1
                },
                "lVar26": {
                    "source_file_index": 1
                },
                "lVar27": {
                    "file_name_offset": 1
                },
                "lVar28": {
                    "is_stab_symbol": 1
                },
                "lVar29": {
                    "has_debug_info": 1
                },
                "lVar30": {
                    "is_local_label": 1
                },
                "lVar31": {
                    "is_start_block": 1
                },
                "lVar32": {
                    "is_end_block": 1
                },
                "lVar33": {
                    "is_function_start": 1
                },
                "lVar35": {
                    "sorted_symbol": 1
                },
                "lVar36": {
                    "gap_size": 1
                },
                "lVar37": {
                    "count": 1,
                    "l_var37": 1,
                    "long_var2": 1,
                    "long_var5": 1,
                    "loop_counter_2": 1,
                    "num_sections": 1,
                    "section_index": 1,
                    "stab_index": 1,
                    "symbol": 1,
                    "symbol_location": 1,
                    "temp_long_var2": 1
                },
                "lVar4": {
                    "section_size": 1
                },
                "lVar9": {
                    "string_size": 1
                },
                "local_variable1": {
                    "improved_variable1": 1
                },
                "local_variable2": {
                    "improved_variable2": 1
                },
                "local_variable_n": {
                    "improved_variable_n": 1
                },
                "memcmp": {
                    "compare_data": 1
                },
                "param_1": {
                    "binary": 1,
                    "binary_file": 1,
                    "function_param_1": 1,
                    "param1": 1,
                    "param_1": 1,
                    "param_1_name": 1,
                    "param_7": 8,
                    "param_name_1": 1
                },
                "param_10": {
                    "param_14": 1,
                    "param_16": 1,
                    "param_33": 1,
                    "param_41": 1,
                    "param_42": 1,
                    "param_44": 2,
                    "section": 1
                },
                "param_11": {
                    "param_17": 1,
                    "param_33": 1,
                    "param_34": 1,
                    "param_36": 1,
                    "param_42": 1,
                    "param_43": 1,
                    "section_data": 1
                },
                "param_12": {
                    "gap_size": 1,
                    "max_gap": 1,
                    "max_gap_size": 1,
                    "max_padding": 1,
                    "max_section_size": 1,
                    "max_size": 1,
                    "padding_size": 1,
                    "param_15": 1,
                    "param_18": 1,
                    "param_36": 1,
                    "param_37": 1,
                    "param_43": 1,
                    "param_44": 1,
                    "section_size": 1,
                    "stab_table_size": 1
                },
                "param_12_copy": {
                    "section_size": 1
                },
                "param_13": {
                    "function_start": 1,
                    "input_file": 1,
                    "merged_sections": 1,
                    "param_19": 1,
                    "param_21": 1,
                    "param_33": 1,
                    "param_37": 1,
                    "param_44": 1,
                    "section_name": 1,
                    "stab_index_path": 1,
                    "stab_section": 1,
                    "symbol_table": 1
                },
                "param_13_copy": {
                    "stab_section": 1
                },
                "param_14": {
                    "allocated_memory_for_sections": 1,
                    "debug_info": 1,
                    "function_param_14": 1,
                    "output_file": 1,
                    "padding": 1,
                    "param_13": 1,
                    "param_14": 1,
                    "param_20": 1,
                    "param_24": 1,
                    "param_38": 1,
                    "section_contents": 1,
                    "section_data": 1,
                    "section_padding": 2,
                    "section_sizes": 4,
                    "stab_section_size": 1
                },
                "param_14_copy": {
                    "stab_section_size": 1
                },
                "param_15": {
                    "bfd_flags": 1,
                    "has_stab_section": 1,
                    "param_14": 1,
                    "param_15": 1,
                    "param_21": 1,
                    "param_30": 1,
                    "param_39": 1,
                    "special": 1
                },
                "param_16": {
                    "param_16": 1,
                    "param_22": 1,
                    "param_32": 1,
                    "param_34": 1,
                    "param_40": 1,
                    "stab_entry_size": 1
                },
                "param_16_copy": {
                    "stab_entry_size": 1
                },
                "param_17": {
                    "function_param_17": 1,
                    "merged_symbols": 1,
                    "param_17": 1,
                    "param_23": 1,
                    "param_30": 1,
                    "param_40": 1,
                    "param_42": 1,
                    "section_addresses": 2,
                    "section_lmas": 1,
                    "section_offsets": 3,
                    "section_sizes": 1,
                    "sections": 4,
                    "sorted_sections": 2
                },
                "param_17_copy": {
                    "merged_symbols": 1
                },
                "param_18": {
                    "merged_symbol_count": 1,
                    "param_18": 1,
                    "param_24": 1,
                    "param_31": 2,
                    "param_43": 1
                },
                "param_18_copy": {
                    "merged_symbol_count": 1
                },
                "param_19": {
                    "merged_symbol_allocated": 1,
                    "param_19": 1,
                    "param_25": 1,
                    "param_26": 2,
                    "param_44": 1
                },
                "param_19_copy": {
                    "merged_symbol_allocated": 1
                },
                "param_2": {
                    "function_param_2": 1,
                    "in_stack_00000068": 4,
                    "param2": 1,
                    "param_2": 1,
                    "param_21": 1,
                    "param_2_name": 1,
                    "param_33": 1,
                    "param_40": 1,
                    "param_8": 1,
                    "param_name_2": 1,
                    "parameter_2": 1,
                    "sections": 1
                },
                "param_20": {
                    "param_20": 1,
                    "param_23": 1,
                    "param_26": 1,
                    "param_32": 1,
                    "section_index": 1
                },
                "param_21": {
                    "debug_link_file_name": 2,
                    "debug_link_filename": 1,
                    "debug_link_name": 2,
                    "in_stack_00000068": 1,
                    "link_name": 1,
                    "output_debug_path": 1,
                    "param_21": 1,
                    "param_24": 1,
                    "param_27": 1
                },
                "param_22": {
                    "in_stack_000000f8": 1,
                    "param_22": 1,
                    "param_28": 1,
                    "param_9": 1,
                    "section_contents": 1
                },
                "param_22_copy": {
                    "section_contents": 1
                },
                "param_23": {
                    "debug_link_contents": 1,
                    "eh": 1,
                    "function_param_23": 1,
                    "in_stack_000000d8": 1,
                    "output_section_buffer": 1,
                    "param_15": 1,
                    "param_23": 1,
                    "param_29": 1,
                    "section_size": 1
                },
                "param_23_copy": {
                    "section_size": 1
                },
                "param_24": {
                    "copied_section_contents": 1,
                    "debug_link_size": 1,
                    "function_param_24": 1,
                    "param_24": 1,
                    "param_30": 1,
                    "previous_section_name": 1,
                    "stab_content": 1,
                    "suffix": 1
                },
                "param_24_copy": {
                    "copied_section_contents": 1
                },
                "param_25": {
                    "copied_section_size": 1,
                    "param_25": 1,
                    "param_31": 1
                },
                "param_25_copy": {
                    "copied_section_size": 1
                },
                "param_26": {
                    "alignment": 1,
                    "function_alignment": 1,
                    "has_symbols": 1,
                    "param_17": 1,
                    "param_26": 1,
                    "param_32": 1,
                    "relocation_offset_ptr": 1
                },
                "param_26_copy": {
                    "has_symbols": 1
                },
                "param_27": {
                    "param_27": 1,
                    "param_33": 1,
                    "symbol_index": 1
                },
                "param_28": {
                    "param_28": 1,
                    "param_34": 1,
                    "symbol": 1
                },
                "param_29": {
                    "param_29": 1,
                    "param_35": 1,
                    "symbol_name": 1
                },
                "param_3": {
                    "function_param_3": 1,
                    "param3": 1,
                    "param_15": 1,
                    "param_21": 3,
                    "param_23": 1,
                    "param_3": 1,
                    "param_34": 1,
                    "param_8": 1,
                    "param_9": 1,
                    "parameter_3": 1,
                    "sections_count": 1
                },
                "param_30": {
                    "merged_symbols": 1,
                    "param_30": 1,
                    "param_36": 1,
                    "param_42": 1,
                    "relocated_sections": 1,
                    "relocation_sections": 1,
                    "relocations_addresses": 1,
                    "section_callback": 1,
                    "sections_with_relocations": 1,
                    "symbol_names": 1,
                    "symbol_size": 1,
                    "symbol_table_info": 1
                },
                "param_30_copy": {
                    "symbol_size": 1
                },
                "param_31": {
                    "debug_info_offset": 1,
                    "padding_size": 1,
                    "param_31": 1,
                    "param_37": 1,
                    "param_43": 1,
                    "relocations_sizes": 1,
                    "symbol_value": 1
                },
                "param_31_copy": {
                    "symbol_value": 1
                },
                "param_32": {
                    "i": 1,
                    "num_relocations": 1,
                    "param_32": 1,
                    "param_38": 1,
                    "param_44": 1,
                    "source_file_entry": 1
                },
                "param_33": {
                    "buffer": 1,
                    "copy_destination": 1,
                    "debug_info": 1,
                    "debug_info_buffer": 1,
                    "debug_str_data": 1,
                    "notes_section_data": 1,
                    "param_33": 1,
                    "param_39": 1,
                    "source_file_contents": 1
                },
                "param_34": {
                    "debug_info_size": 1,
                    "debug_str_offset": 1,
                    "param_26": 1,
                    "param_34": 1,
                    "param_40": 1,
                    "source_file_size": 1
                },
                "param_35": {
                    "param_35": 1,
                    "param_41": 1,
                    "source_file_entry_index": 1
                },
                "param_35_copy": {
                    "source_file_contents": 1
                },
                "param_36": {
                    "byte_var3": 1,
                    "is_func_decl": 1,
                    "is_symbol_strip_enabled": 1,
                    "option": 1,
                    "param_36": 1,
                    "param_38": 1,
                    "param_42": 1,
                    "source_file_entry_type": 1
                },
                "param_36_copy": {
                    "source_file_size": 1
                },
                "param_37": {
                    "byte_var4": 1,
                    "is_local": 1,
                    "is_symbol_strip_all_enabled": 1,
                    "line_number": 1,
                    "merge_debug_sections": 1,
                    "param_37": 1,
                    "param_40": 1,
                    "param_43": 1,
                    "strip": 1
                },
                "param_38": {
                    "debug_info_size": 1,
                    "debug_link_buffer": 1,
                    "line": 1,
                    "param_38": 1,
                    "param_41": 1,
                    "param_44": 1
                },
                "param_39": {
                    "debug_line_section_index": 1,
                    "debug_str_size": 1,
                    "end_line_num": 1,
                    "flags": 1,
                    "line_count": 1,
                    "line_number": 1,
                    "param_39": 1,
                    "param_42": 1,
                    "param_45": 1,
                    "section_name_length": 1
                },
                "param_3_copy": {
                    "sections_count": 1
                },
                "param_4": {
                    "param_10": 1,
                    "param_21": 1,
                    "param_23": 2,
                    "param_36": 1,
                    "param_4": 1,
                    "param_42": 1,
                    "param_9": 2,
                    "parameter_4": 1,
                    "sections_allocated": 1,
                    "symbol_name_offset_ptr": 1
                },
                "param_40": {
                    "copy_source": 1,
                    "data": 1,
                    "function_param_40": 1,
                    "merged_notes": 1,
                    "param_40": 1,
                    "param_43": 1,
                    "param_46": 1,
                    "section_alignment_array": 1,
                    "section_sizes": 2,
                    "sorted_sections": 2,
                    "stab_entries": 1
                },
                "param_41": {
                    "error_flag2": 1,
                    "exit_early": 1,
                    "is_debug_info_added": 1,
                    "is_local_symbols": 1,
                    "param_40": 1,
                    "param_41": 1,
                    "param_47": 1,
                    "stab_count": 1,
                    "symbol_ignored": 1
                },
                "param_41_copy": {
                    "stab_count": 1
                },
                "param_42": {
                    "current_source_file": 1,
                    "current_stab": 1,
                    "debug_info_str_buffer": 1,
                    "output_file_name": 1,
                    "param_42": 1,
                    "param_44": 1,
                    "param_48": 1,
                    "section_name": 1,
                    "symbol_definition": 1,
                    "symbol_entry_predicate_input_data": 1
                },
                "param_42_copy": {
                    "current_source_file": 1
                },
                "param_43": {
                    "debug_info_type": 1,
                    "is_debug_symbol": 1,
                    "param_37": 1,
                    "param_43": 1,
                    "param_49": 1,
                    "symbol_type": 1,
                    "type": 2
                },
                "param_44": {
                    "debug_info_aux_type": 1,
                    "debug_language": 1,
                    "number": 1,
                    "param_36": 1,
                    "param_44": 1,
                    "param_50": 1,
                    "section_type": 1,
                    "symbol_sub_type": 1,
                    "symbol_value": 1,
                    "type": 1,
                    "type_qualifier": 1
                },
                "param_45": {
                    "symbol_name": 1
                },
                "param_46": {
                    "symbol_index": 1
                },
                "param_47": {
                    "symbol_size": 1
                },
                "param_48": {
                    "symbol_value": 1
                },
                "param_49": {
                    "symbol_section": 1
                },
                "param_4_copy": {
                    "sections_allocated": 1
                },
                "param_5": {
                    "gnu_debug_link_section_size": 1,
                    "param_11": 1,
                    "param_24": 2,
                    "param_33": 1,
                    "param_36": 1,
                    "param_37": 1,
                    "param_38": 1,
                    "param_43": 1,
                    "param_5": 1
                },
                "param_50": {
                    "symbol_binding": 1
                },
                "param_51": {
                    "symbol_type": 1
                },
                "param_52": {
                    "symbol_visibility": 1
                },
                "param_53": {
                    "data_type": 1
                },
                "param_54": {
                    "data_size": 1
                },
                "param_55": {
                    "data_value": 1
                },
                "param_56": {
                    "data_section": 1
                },
                "param_57": {
                    "string_data": 1
                },
                "param_58": {
                    "symbol_table": 1
                },
                "param_59": {
                    "symbol_count": 1
                },
                "param_5_copy": {
                    "gnu_debug_link_section_size": 1
                },
                "param_6": {
                    "gnu_debug_link_section_data": 1,
                    "param_12": 1,
                    "param_26": 2,
                    "param_37": 1,
                    "param_38": 1,
                    "param_39": 1,
                    "param_40": 1,
                    "param_44": 1,
                    "param_6": 1
                },
                "param_60": {
                    "symbol_table_index": 1
                },
                "param_61": {
                    "symbol_table_entry": 1
                },
                "param_62": {
                    "symbol_section_index": 1
                },
                "param_63": {
                    "symbol_index_in_section": 1
                },
                "param_64": {
                    "symbol_size": 1
                },
                "param_65": {
                    "symbol_value": 1
                },
                "param_66": {
                    "symbol_name": 1
                },
                "param_67": {
                    "relocation": 1
                },
                "param_68": {
                    "relocations_count": 1
                },
                "param_69": {
                    "relocations_section_index": 1
                },
                "param_6_copy": {
                    "gnu_debug_link_section_data": 1
                },
                "param_7": {
                    "bfd": 4,
                    "binary": 6,
                    "binary_file": 2,
                    "binary_filename": 1,
                    "binary_path": 2,
                    "function_param_7": 1,
                    "input_binary": 1,
                    "param_13": 1,
                    "param_30": 2,
                    "param_36": 1,
                    "param_38": 1,
                    "param_39": 1,
                    "param_41": 2,
                    "param_7": 1
                },
                "param_8": {
                    "function_param_8": 1,
                    "num_sections": 7,
                    "param_14": 1,
                    "param_31": 1,
                    "param_37": 1,
                    "param_39": 1,
                    "param_40": 1,
                    "param_42": 2,
                    "section_count": 4,
                    "sections_count_copy": 1
                },
                "param_9": {
                    "c_var9": 1,
                    "debug_flag": 1,
                    "flag_3": 1,
                    "index": 1,
                    "param_15": 1,
                    "param_32": 1,
                    "param_40": 1,
                    "param_41": 2,
                    "param_43": 2,
                    "parameter_9": 1,
                    "read_section_status": 1,
                    "specified_symbol_data": 1
                },
                "param_n": {
                    "function_param_n": 1,
                    "param_n": 1,
                    "param_n_name": 1,
                    "param_name_n": 1
                },
                "pcVar15": {
                    "pc_var31": 1
                },
                "pcVar22": {
                    "str": 1,
                    "string": 1,
                    "temp_char_ptr": 1
                },
                "pcVar3": {
                    "code_pointer": 1,
                    "function_pointer": 1,
                    "section_name": 1
                },
                "pcVar31": {
                    "error": 1,
                    "error_message": 1,
                    "message": 1,
                    "string_var": 1
                },
                "pcVar38": {
                    "error_message_2": 1
                },
                "pcVar4": {
                    "param_24": 1
                },
                "plVar15": {
                    "current_loop_element": 1,
                    "current_section": 2,
                    "long_pointer": 1,
                    "long_var": 1,
                    "pl_var15": 1,
                    "pointer": 1,
                    "section": 1,
                    "section_data": 1,
                    "section_data_ptr": 1,
                    "section_start": 1,
                    "stab_sections": 1,
                    "symbol": 1,
                    "symbol_data": 1,
                    "symbol_entry": 1
                },
                "plVar20": {
                    "current_loop_element_2": 1,
                    "current_section": 1,
                    "current_symbol": 1,
                    "long_pointer2": 1,
                    "long_var2": 1,
                    "pl_var20": 1,
                    "pointer": 2,
                    "section_data_ptr_2": 1
                },
                "plVar23": {
                    "long_var3": 1
                },
                "plVar25": {
                    "current_section": 1,
                    "long_pointer3": 1,
                    "previous_symbol": 1,
                    "section_data_ptr_3": 1,
                    "temp_long_ptr": 1
                },
                "plVar28": {
                    "current_section": 1,
                    "loop_current_element": 1,
                    "pl_var28": 1,
                    "section": 1,
                    "section_data_ptr_4": 1,
                    "section_pointer": 1,
                    "sections": 1,
                    "symbol": 1,
                    "symbol_table": 2,
                    "symbol_table_ptr": 1,
                    "temp_section_ptr": 1
                },
                "plVar3": {
                    "param_17": 1
                },
                "plVar37": {
                    "section_iteration_index": 1
                },
                "ppVar45": {
                    "data_ptr_list_ptr": 1
                },
                "ppcVar34": {
                    "char_double_pointer": 1,
                    "char_pointer_pointer": 1,
                    "section_names": 1,
                    "section_stabs": 1,
                    "specified_symbol_list": 1,
                    "symbol_list_ptr": 1
                },
                "pplVar18": {
                    "param_42": 1
                },
                "pplVar19": {
                    "param_13": 1
                },
                "pplVar20": {
                    "param_14": 1
                },
                "ppuVar16": {
                    "ppu_var34": 1
                },
                "ppuVar36": {
                    "section_name_list_ptr": 1,
                    "section_names": 4,
                    "sections_to_find": 1,
                    "stab_names": 1
                },
                "ppuVar37": {
                    "section_name_list_ptr_2": 1
                },
                "ppuVar4": {
                    "line_data_list_ptr": 1
                },
                "ppuVar8": {
                    "ppu_var36": 1
                },
                "ppuVar9": {
                    "symbol_data_list_ptr": 1
                },
                "puVar1": {
                    "flags": 1,
                    "section_flags_ptr": 1,
                    "symbols_by_section": 1,
                    "temp_uint_ptr": 1,
                    "uint_pointer": 2
                },
                "puVar11": {
                    "pu_var26": 1
                },
                "puVar14": {
                    "pu_var33": 1
                },
                "puVar17": {
                    "pu_var32": 1
                },
                "puVar2": {
                    "section_iterator": 1
                },
                "puVar26": {
                    "alternative_machine": 1,
                    "current_alternative": 1,
                    "current_symbol": 1,
                    "function_entry": 1,
                    "pointer": 1,
                    "pointer_var": 1,
                    "ptr": 1,
                    "pu_var26": 1,
                    "section_flags_ptr_2": 1,
                    "symbol_entry": 1,
                    "undefined8_pointer2": 1
                },
                "puVar30": {
                    "padding_ptr": 1,
                    "temp_ulong_ptr": 1
                },
                "puVar32": {
                    "stab_entry": 1
                },
                "puVar33": {
                    "padding_ptr": 1,
                    "stab_entry": 1,
                    "stab_string": 1,
                    "symbol_name": 1
                },
                "puVar4": {
                    "gnu_debug_link_section": 1,
                    "merged_notes_list": 1,
                    "pointer_var_2": 1,
                    "private_data_list_ptr": 1,
                    "temp_undefined8_ptr": 1,
                    "undefined8_pointer": 2
                },
                "pvVar35": {
                    "section_contents_pointer": 1,
                    "section_data": 1
                },
                "sVar18": {
                    "length": 2,
                    "size": 1,
                    "size_var": 1,
                    "stab_name_length": 1,
                    "string_length": 2
                },
                "sVar19": {
                    "length": 1,
                    "merged_note_length": 1,
                    "size_var2": 1,
                    "stab_length": 1,
                    "string_length_2": 1
                },
                "stack0x00000140": {
                    "global_section_offset_array": 1
                },
                "stack0x00000148": {
                    "align_offsets": 1
                },
                "strncmp": {
                    "compare_symbols": 1
                },
                "uVar10": {
                    "string_length": 1
                },
                "uVar11": {
                    "section_index": 1
                },
                "uVar12": {
                    "flags": 1,
                    "octets_per_byte": 3,
                    "symbol_flags": 1,
                    "u_var12": 2,
                    "uint_var": 2,
                    "unsigned_var_2": 1,
                    "value": 1
                },
                "uVar13": {
                    "mask": 1,
                    "octets_per_byte": 1,
                    "octets_per_byte2": 1,
                    "octets_per_section": 1,
                    "u_var13": 1,
                    "uint_var2": 2,
                    "value": 1
                },
                "uVar16": {
                    "error": 1,
                    "message": 1,
                    "new_symbol": 1,
                    "result": 1,
                    "temp_undefined8_var": 1,
                    "u_var16": 2,
                    "undefined8_var": 2,
                    "value": 1
                },
                "uVar17": {
                    "error_message": 4,
                    "u_var17": 2,
                    "undefined8_var2": 2,
                    "unsigned_var_3": 1,
                    "value": 1
                },
                "uVar19": {
                    "string_length": 1
                },
                "uVar21": {
                    "actual_size": 1,
                    "gap_size": 1,
                    "offset": 1,
                    "size_difference": 1,
                    "temp_ulong_var": 1,
                    "u_var21": 2,
                    "ulong_var": 2,
                    "unsigned_var_4": 1
                },
                "uVar24": {
                    "total_size": 1,
                    "u_var24": 1,
                    "ulong_var2": 2
                },
                "uVar26": {
                    "undefined8_var3": 1
                },
                "uVar29": {
                    "max_section_size": 1,
                    "maximum_size": 1,
                    "output_file_size": 1,
                    "padding_size": 1,
                    "size": 1,
                    "symbol_index": 2,
                    "u_var29": 1,
                    "ulong_var3": 1
                },
                "uVar3": {
                    "section_flags": 1
                },
                "uVar37": {
                    "section_index": 1
                },
                "uVar5": {
                    "gnu_debug_link_section_size": 1,
                    "temp_undefined_var": 1,
                    "u_var5": 1,
                    "undefined_var": 2,
                    "value": 1,
                    "zero": 1
                },
                "uVar6": {
                    "coff_type": 1,
                    "stab_entry_type": 1,
                    "u_var6": 1,
                    "ushort_var": 2
                },
                "uVar7": {
                    "param_31": 1,
                    "section_flags": 1
                },
                "uVar8": {
                    "section_size": 1
                },
                "uVar9": {
                    "error": 1,
                    "return_value": 1,
                    "symbol_type": 1,
                    "temp_undefined4_var": 1,
                    "u_var9": 1,
                    "undefined4_var": 1,
                    "undefined_value": 1,
                    "unsigned_var": 1
                },
                "unaff_R12": {
                    "unaff_r14": 1
                },
                "unaff_R14": {
                    "bfd": 2,
                    "bfd_file": 1,
                    "bfd_handle": 1,
                    "binary": 1,
                    "binary_file": 1,
                    "file_name": 1,
                    "map": 1,
                    "param_33": 1,
                    "param_34": 1,
                    "unaffected_register_r14": 1
                },
                "var_1": {
                    "improved_var_name_1": 1,
                    "pu_var1": 1
                },
                "var_2": {
                    "b_var2": 1,
                    "improved_var_name_2": 1
                },
                "var_3": {
                    "pc_var3": 1
                },
                "var_4": {
                    "pu_var4": 1
                },
                "var_5": {
                    "u_var5": 1
                },
                "var_6": {
                    "u_var6": 1
                },
                "var_7": {
                    "c_var7": 1
                },
                "var_8": {
                    "c_var8": 1
                },
                "var_9": {
                    "u_var9": 1
                },
                "var_n": {
                    "improved_var_name_n": 1
                }
            },
            "called": [
                "FUN_00115dc0",
                "FUN_00104140",
                "FUN_00104400",
                "FUN_001159d0",
                "FUN_001048a0",
                "FUN_00115d70",
                "FUN_001044e0",
                "FUN_0010870e",
                "FUN_00116030",
                "FUN_00104580",
                "FUN_0010bf86",
                "FUN_0010bbd3",
                "FUN_00104240",
                "FUN_0010bc80",
                "FUN_00104390",
                "FUN_00119ed0",
                "FUN_0010875d",
                "FUN_0010c892",
                "FUN_00119dd0",
                "FUN_00104270",
                "FUN_00116110",
                "FUN_00113fb0",
                "FUN_00104460",
                "FUN_00112894",
                "FUN_001045b0",
                "FUN_0011173a",
                "FUN_001043a0",
                "FUN_00104850",
                "FUN_00104520",
                "FUN_001088ae",
                "FUN_00104490",
                "FUN_00108b3e",
                "FUN_00104260",
                "FUN_00112a33",
                "FUN_00104590",
                "FUN_001126c0",
                "FUN_0010be1a",
                "FUN_001047d0",
                "FUN_00108863",
                "FUN_00104370",
                "FUN_00104330",
                "FUN_00104600",
                "FUN_00104470",
                "FUN_001043d0",
                "FUN_0010be88",
                "FUN_00104120",
                "FUN_0011a170",
                "FUN_0011a2e0",
                "FUN_00104320",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_001046a0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_0010bf20",
                "FUN_001047a0",
                "FUN_001044b0",
                "FUN_00128480",
                "FUN_001045f0"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 process_binary_function_0010554f(void)\n\n{\n  uint *uint_pointer;\n  byte byte_var;\n  code *code_pointer;\n  undefined8 *undefined8_pointer;\n  undefined undefined_var;\n  ushort ushort_var;\n  char char_var;\n  char char_var2;\n  undefined4 return_value;\n  int int_var;\n  int int_var2;\n  uint octets_per_byte;\n  uint uint_var2;\n  long section_index;\n  long *current_section;\n  undefined8 u_var16;\n  undefined *placeholder_ptr;\n  undefined8 error_message;\n  size_t string_length;\n  size_t stab_length;\n  long *destination;\n  long *pointer;\n  void *section_data;\n  void *section_contents;\n  ulong u_var21;\n  char *split_str;\n  char *string;\n  long section_content;\n  ulong ulong_var2;\n  long *previous_symbol;\n  undefined8 *alternative_machine;\n  int int_var3;\n  long *symbol_table;\n  ulong symbol_index;\n  ulong *temp_ulong_ptr;\n  char *error;\n  undefined4 *stab_entry;\n  undefined *stab_entry;\n  long *merged_notes;\n  char **char_double_pointer;\n  void *section_data;\n  undefined8 *unaff_R14;\n  undefined **section_names;\n  long temp_long_var2;\n  bool is_function_end;\n  byte byte_var2;\n  long binary;\n  ulong num_sections;\n  char param_43;\n  undefined4 *stab_table;\n  ulong param_18;\n  char *param_33;\n  undefined *section_sizes;\n  uint param_30;\n  long *sections;\n  undefined8 stack_size;\n  undefined8 debug_link_name;\n  long eh;\n  char *debug_link_size;\n  long alignment;\n  long *merged_symbols;\n  ulong param_43;\n  long num_relocations;\n  long count;\n  void *param_213;\n  long param_40;\n  undefined8 param_27;\n  byte source_file_entry_type;\n  byte param_43;\n  undefined8 param_44;\n  ushort section_name_length;\n  long *sorted_sections;\n  char is_debug_info_added;\n  char *current_source_file;\n  undefined type;\n  short param_50;\n  \n  byte_var2 = 0;\n  if ((DAT_00127998 == '\\0') && (DAT_00127989 == '\\0')) {\n    param_18 = 0;\n    section_sizes = (undefined *)0x0;\n    sections = (long *)0x0;\n    symbol_index = param_18;\n  }\n  else {\n    section_index = (ulong)stack_size._4_4_ * 8;\n    sections = (long *)xmalloc(section_index);\n    sorted_sections = sections;\n    bfd_map_over_sections(binary,get_sections,&global_section_offset_array);\n    qsort(sections,(ulong)stack_size._4_4_,8,compare_section_by_lma);\n    section_sizes = (undefined *)xmalloc(section_index);\n    is_function_end = DAT_00127998 != '\\0';\n    stab_entry = section_sizes;\n    for (; section_index != 0; section_index = section_index + -1) {\n      *stab_entry = 0;\n      stab_entry = stab_entry + (ulong)byte_var2 * -2 + 1;\n    }\n    if (is_function_end) {\n      symbol_index = 0;\n      param_18 = 0;\n      do {\n        temp_ulong_ptr = (ulong *)(section_sizes + symbol_index * 8);\n        symbol_table = sections + symbol_index;\n        u_var21 = param_18;\n        do {\n          param_18 = u_var21;\n          if (stack_size._4_4_ - 1 <= (uint)symbol_index) goto LAB_00107cd1;\n          symbol_index = (ulong)((uint)symbol_index + 1);\n          octets_per_byte = bfd_octets_per_byte(binary,*symbol_table);\n          uint_var2 = bfd_octets_per_byte(binary);\n          section_index = *symbol_table;\n          if ((*(uint *)(section_index + 0x24) & 0x102) != 0x102) break;\n          u_var21 = (ulong)uint_var2 * *(long *)(symbol_table[1] + 0x38);\n          ulong_var2 = (ulong)octets_per_byte * *(long *)(section_index + 0x38) + *(long *)(section_index + 0x40);\n          if (u_var21 <= ulong_var2) break;\n          u_var21 = u_var21 - ulong_var2;\n          char_var = bfd_set_section_size();\n          if (char_var == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            bfd_nonfatal_message(0,binary,*symbol_table);\n            DAT_00127a40 = 1;\n            goto LAB_00107cd1;\n          }\n          *temp_ulong_ptr = u_var21;\n          symbol_table = symbol_table + 1;\n          temp_ulong_ptr = temp_ulong_ptr + 1;\n        } while (param_18 < u_var21);\n      } while( true );\n    }\n    param_18 = 0;\nLAB_00107cd1:\n    symbol_index = param_18;\n    if (DAT_00127989 != '\\0') {\n      octets_per_byte = bfd_octets_per_byte(binary);\n      section_index = sections[stack_size._4_4_ - 1];\n      u_var21 = DAT_00127990 * (ulong)octets_per_byte;\n      ulong_var2 = *(long *)(section_index + 0x40) + (ulong)octets_per_byte * *(long *)(section_index + 0x38);\n      if (ulong_var2 < u_var21) {\n        char_var = bfd_set_section_size();\n        if (char_var == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          bfd_nonfatal_message(0,binary,sections[stack_size._4_4_ - 1]);\n          DAT_00127a40 = 1;\n        }\n        else {\n          symbol_index = u_var21 - ulong_var2;\n          *(ulong *)(section_sizes + (ulong)(stack_size._4_4_ - 1) * 8) = symbol_index;\n          if (symbol_index <= param_18) {\n            symbol_index = param_18;\n          }\n        }\n      }\n    }\n  }\n  param_18 = symbol_index;\n  symbol_table = DAT_001278d0;\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    stab_table = (undefined4 *)0x0;\n  }\n  else {\n    section_names = &PTR_ssplit_strtab_00125c60;\n    stab_table = (undefined4 *)xmalloc(0x60);\n    stab_entry = stab_table;\n    for (section_index = 0x18; section_index != 0; section_index = section_index + -1) {\n      *stab_entry = 0;\n      stab_entry = stab_entry + (ulong)byte_var2 * -2 + 1;\n    }\n    param_33 = (char *)0x0;\n    do {\n      stab_entry = *section_names;\n      section_index = bfd_get_section_by_name(unaff_R14,stab_entry);\n      temp_long_var2 = bfd_get_section_by_name();\n      if ((section_index != 0) && (temp_long_var2 != 0)) {\n        section_content = *(long *)(section_index + 0x40);\n        section_data = (void *)xmalloc(section_content);\n        char_var = bfd_get_section_contents(unaff_R14,section_index,section_data,0,section_content);\n        if (char_var == '\\0') {\n          return_value = bfd_get_error();\n          bfd_errmsg(return_value);\n          fprintf(standard_error,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_33);\n          free(section_data);\n        }\n        else {\n          symbol_index = *(ulong *)(temp_long_var2 + 0x40);\n          section_contents = (void *)xmalloc(symbol_index + 1);\n          param_43 = bfd_get_section_contents(unaff_R14,temp_long_var2,section_contents,0);\n          if (param_43 == '\\0') {\n            return_value = bfd_get_error();\n            bfd_errmsg(return_value);\n            fprintf(standard_error,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_33);\n          }\n          else {\n            *(undefined *)((long)section_contents + symbol_index) = 0;\n            if ((param_33 != (char *)0x0) ||\n               (param_33 = (char *)start_stab_constprop_0(unaff_R14,1,symbol_table),\n               param_33 != (char *)0x0)) {\n              alignment = 0;\n              eh = 0;\n              for (section_data = section_data; section_data <= (void *)((long)section_data + section_content + -0xc);\n                  section_data = (void *)((long)section_data + 0xc)) {\n                u_var21 = (**(code **)(unaff_R14[1] + 0x40))(section_data);\n                byte_var = *(byte *)((long)section_data + 4);\n                return_value = (**(code **)(unaff_R14[1] + 0x58))((long)section_data + 6);\n                section_index = (**(code **)(unaff_R14[1] + 0x40))((long)section_data + 8);\n                if (byte_var == 0) {\n                  eh = alignment;\n                  alignment = alignment + section_index;\n                }\n                else {\n                  ulong_var2 = (u_var21 & 0xffffffff) + eh;\n                  if (ulong_var2 < symbol_index) {\n                    error = (char *)((long)section_contents + ulong_var2);\n                    debug_link_size = (char *)0x0;\n                    while( true ) {\n                      string_length = strlen(error);\n                      if (((string_length == 0) || (string = error + (string_length - 1), *string != '\\')) ||\n                         ((ulong)((long)section_data + section_content) < (long)section_data + 0x10U))\n                      goto LAB_001077fb;\n                      *string = '\\0';\n                      section_data = (void *)((long)section_data + 0xc);\n                      int_var = (**(code **)(unaff_R14[1] + 0x40))(section_data);\n                      u_var21 = (ulong)(uint)(int_var + (int)eh);\n                      if (symbol_index <= u_var21) break;\n                      error = (char *)concat(error,(long)section_contents + u_var21,0);\n                      *string = '\\';\n                      free(debug_link_size);\n                      debug_link_size = error;\n                    }\n                    error_message = *unaff_R14;\n                    string = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(standard_error,string,error_message,stab_entry,((long)section_data - (long)section_data) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)byte_var,return_value,section_index,error);\n                    char_var = parse_stab(stab_table,param_33,byte_var);\n                    if (char_var == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(debug_link_size);\n                      free(param_33);\n                      free(section_data);\n                      free(section_contents);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    error_message = *unaff_R14;\n                    error = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(standard_error,error,error_message,stab_entry,((long)section_data - (long)section_data) / 0xc,\n                            u_var21 & 0xffffffff,(ulong)byte_var,((long)section_data - (long)section_data) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(section_data);\n              goto LAB_001058eb;\n            }\n          }\n          free(section_contents);\n          free(section_data);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      section_names = section_names + 2;\n    } while (section_names != (undefined **)&DAT_00125c90);\n    if ((param_33 != (char *)0x0) && (char_var = finish_stab(), char_var == '\\0')) {\nLAB_00105981:\n      free(stab_table);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      section_index = 0;\n      for (current_section = symbol_table; current_section < symbol_table + num_sections; current_section = current_section + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*current_section,&global_section_offset_array);\n        if (is_debug_info_added == '-') {\n          if (((section_index == 0) && (section_index = start_stab_constprop_0(unaff_R14,0,symbol_table), section_index == 0))\n             || ((current_source_file == (char *)0x0 || (*current_source_file == '\\0')))) goto LAB_00105981;\n          error = (char *)0x0;\n          string = current_source_file;\n          while (((*string != '\\0' && (string_length = strlen(string), string[string_length - 1] == '\\')) &&\n                 (current_section + 1 < symbol_table + num_sections))) {\n            split_str = (char *)xstrdup(string);\n            string_length = strlen(split_str);\n            split_str[string_length - 1] = '\\0';\n            string = (char *)concat(split_str,*(undefined8 *)(current_section[1] + 8),0);\n            free(split_str);\n            free(error);\n            current_section = current_section + 1;\n            error = string;\n          }\n          save_stab(type,(int)param_50,sorted_sections,string);\n          param_43 = parse_stab(stab_table,section_index,type);\n          if (param_43 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((section_index != 0) && (char_var = finish_stab(), char_var == '\\0')) goto LAB_00105981;\n    }\n    if (param_43 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (num_sections != 0)) {\n        sorted_sections = (long *)0x0;\n        merged_symbols = symbol_table;\n        num_relocations = 0;\n        param_43 = num_sections;\n        count = 0;\n        alternative_machine = (undefined8 *)&align_offsets;\n        for (section_index = 0x22; section_index != 0; section_index = section_index + -1) {\n          *(undefined4 *)alternative_machine = 0;\n          alternative_machine = (undefined8 *)((long)alternative_machine + (ulong)byte_var2 * -8 + 4);\n        }\n        char_var = '\\0';\n        int_pointer = (int *)0x0;\n        octets_per_byte = 0;\n        param_33 = (char *)0x0;\n        debug_link_size = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)num_sections <= num_relocations) goto LAB_00105590;\n            section_index = symbol_table[num_relocations];\n            char_var2 = bfd_coff_get_syment(unaff_R14,section_index,&stack0x000000e0);\n            temp_long_var2 = count;\n            if (char_var2 == '\\0') {\n              return_value = bfd_get_error();\n              bfd_errmsg(return_value);\n              error = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            error = *(char **)(section_index + 8);\n            alternative_machine = (undefined8 *)0x0;\n            num_relocations = num_relocations + 1;\n            count = (ulong)param_43 + 1 + count;\n            if (param_43 != 0) {\n              alternative_machine = &stack0x00000110;\n              char_var2 = bfd_coff_get_auxent(unaff_R14,section_index,0);\n              if (char_var2 == '\\0') {\n                return_value = bfd_get_error();\n                bfd_errmsg(return_value);\n                error = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (debug_link_size != (char *)temp_long_var2) break;\n            if (source_file_entry_type != 0x67) {\n              char_var2 = debug_set_filename(stab_table);\n              if (char_var2 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            debug_link_size = (char *)param_40;\n            char_var2 = debug_set_filename(stab_table);\n            if (char_var2 == '\\0') goto LAB_00105981;\n          }\n          ushort_var = param_27._6_2_;\n          if ((char)source_file_entry_type < '\\0') {\n            if (source_file_entry_type == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            section_content = parse_coff_type_lto_priv_0(unaff_R14,&stack0x000000c0,&global_section_offset_array);\n            if (section_content == 0) break;\n            char_var2 = parse_coff_symbol_constprop_0_isra_0(&global_section_offset_array,section_index,temp_long_var2);\n          }\n          else {\n            if (source_file_entry_type < 100) {\n              switch(source_file_entry_type) {\n              case 3:\n                if (param_27._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)param_27._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                int_pointer = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                octets_per_byte = (uint)ushort_var;\n                param_33 = error;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(source_file_entry_type) {\n            case 100:\n              int_var = strcmp(error,\".bb\");\n              if (int_var == 0) {\n                char_var2 = debug_start_block(stab_table);\n              }\n              else {\n                int_var = strcmp(error,\".eb\");\n                if (int_var != 0) goto switchD_00106e1a_caseD_68;\n                char_var2 = debug_end_block(stab_table);\n              }\n              break;\n            case 0x65:\n              int_var = strcmp(error,\".bf\");\n              if (int_var == 0) {\n                if (param_33 != (char *)0x0) {\n                  uint_var2 = (int)octets_per_byte >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  temp_long_var2 = parse_coff_type_lto_priv_0\n                                     (unaff_R14,&stack0x000000c0,&global_section_offset_array,temp_long_var2,\n                                      uint_var2 ^ (octets_per_byte ^ uint_var2) & *(uint *)(unaff_R14[0x22] + 0x38)\n                                      ,alternative_machine,0,stab_table);\n                  if ((temp_long_var2 == 0) || (char_var = debug_record_function(stab_table), char_var == '\\0'))\n                  goto LAB_00105981;\n                  if (int_pointer != (int *)0x0) {\n                    int_var = 0;\n                    if (param_43 != 0) {\n                      int_var = section_name_length - 1;\n                    }\n                    section_index = *(long *)(*(long *)(section_index + 0x20) + 0x30);\n                    while( true ) {\n                      int_var3 = int_pointer[4];\n                      if (int_var3 == 0) break;\n                      char_var2 = debug_record_line(stab_table,int_var + int_var3,\n                                                *(long *)(int_pointer + 6) + section_index);\n                      int_pointer = int_pointer + 4;\n                      if (char_var2 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  octets_per_byte = 0;\n                  int_pointer = (int *)0x0;\n                  param_33 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                error = \"%ld: .bf without preceding function\";\n              }\n              else {\n                int_var = strcmp(error,\".ef\");\n                if (int_var != 0) goto switchD_00106e1a_caseD_68;\n                if (char_var != '\\0') {\n                  char_var = debug_end_function(stab_table);\n                  if (char_var == '\\0') goto LAB_00105981;\n                  char_var = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                error = \"%ld: unexpected .ef\\n\";\n              }\n              error_message = dcgettext(0,error,5);\n              non_fatal(error_message);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (char_var2 != '\\0');\n      }\n      else {\n        error = \"%s: no recognized debugging information\";\nLAB_00105968:\n        error_message = dcgettext(0,error,5);\n        non_fatal(error_message);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binary + 0x44) & 0x42) != 0) && ((*(uint *)(binary + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binary + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (num_sections != 0) {\n        symbol_table = DAT_001278d0 + num_sections;\n        current_section = DAT_001278d0;\n        do {\n          octets_per_byte = *(uint *)(*current_section + 0x18);\n          if ((octets_per_byte & 0x1000000) != 0) {\n            *(uint *)(*current_section + 0x18) = octets_per_byte & 0xfeffffff;\n          }\n          current_section = current_section + 1;\n        } while (symbol_table != current_section);\n      }\n    }\n    else {\n      for (section_index = *(long *)(binary + 0x90); section_index != 0; section_index = *(long *)(section_index + 8)) {\n        if (*(long *)(section_index + 0xe8) != 0) {\n          uint_pointer = (uint *)(*(long *)(section_index + 0xe8) + 0x18);\n          *uint_pointer = *uint_pointer | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      section_index = xmalloc();\n      symbol_table = DAT_001278d0;\n      param_30 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = section_index;\n      if (num_sections == 0) {\n        symbol_index = 0;\n      }\n      else {\n        symbol_index = 0;\n        i = 0;\n        do {\n          int_var = DAT_001279c0;\n          current_section = (long *)symbol_table[i];\n          code_pointer = (code *)current_section[4];\n          octets_per_byte = *(uint *)(current_section + 3);\n          pointer = (long *)current_section[1];\n          previous_symbol = pointer;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            int_var3 = 0;\n            alternative_machine = DAT_001279c8;\n            while ((int_var3 < int_var && (error = (char *)alternative_machine[5], error != (char *)0x0))) {\n              if (error != \"\") {\n                int_var2 = strcmp(error,(char *)pointer);\n                if (int_var2 == 0) {\n                  free(error);\n                  u_var21 = symbol_index + 1;\n                  alternative_machine[5] = \"\";\n                  u_var16 = create_new_symbol(alternative_machine);\n                  error_message = DAT_001278f0;\n                  *(undefined8 *)(section_index + symbol_index * 8) = u_var16;\n                  temp_long_var2 = htab_elements(error_message);\n                  if ((temp_long_var2 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                alternative_machine = (undefined8 *)*alternative_machine;\n              }\n              int_var3 = int_var3 + 1;\n            }\n          }\n          temp_long_var2 = htab_elements(DAT_001278f0);\n          u_var21 = symbol_index;\n          if ((temp_long_var2 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pointer != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)pointer == '_') && (*(char *)((long)pointer + 1) == '_')) &&\n                 (int_var = strcmp((char *)((ulong)(*(char *)((long)pointer + 2) == '_') +\n                                          (long)pointer),\"__gnu_lto_slim\"), int_var == 0)) {\n                error_message = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(error_message);\n              }\n            }\n            symbol_entry_predicate_result = 0;\n            sorted_sections = pointer;\n            temp_long_var2 = htab_find(DAT_001278f0);\n            if (((temp_long_var2 == 0) || (previous_symbol = *(long **)(temp_long_var2 + 8), pointer == previous_symbol)) &&\n               (previous_symbol = pointer, char_double_pointer = DAT_001278f8, (octets_per_byte & 0x100) != 0)) {\n              for (; char_double_pointer != (char **)0x0; char_double_pointer = (char **)char_double_pointer[3]) {\n                int_var = strcmp(*char_double_pointer,(char *)pointer);\n                if (int_var == 0) {\n                  previous_symbol = (long *)char_double_pointer[1];\n                  break;\n                }\n              }\n            }\n            current_section[1] = (long)previous_symbol;\n            char_var = *(char *)previous_symbol;\n            if (char_var != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            error = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(binary + 8) + 0x1c) != '\\0')) {\n              temp_long_var2 = unaff_R14[1];\n              char_var = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          char_var = *(char *)pointer;\n          if (char_var == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          error = DAT_00127928;\n          temp_long_var2 = unaff_R14[1];\n          if (*(char *)(temp_long_var2 + 0x1c) == char_var) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((octets_per_byte & 0x82) == 0 && (code_pointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(current_section[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              previous_symbol = (long *)((long)previous_symbol + 1);\n              current_section[1] = (long)previous_symbol;\n              goto joined_r0x00106565;\n            }\n            char_var = *(char *)(*(long *)(binary + 8) + 0x1c);\n            if (char_var == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              previous_symbol = (long *)((long)previous_symbol + 1);\n              current_section[1] = (long)previous_symbol;\n              string_length = strlen((char *)previous_symbol);\n              temp_long_var2 = string_length + 2;\nLAB_001066bc:\n              string_length = strlen(error);\n              pointer = (long *)xmalloc(string_length + temp_long_var2);\n              goto LAB_001066d0;\n            }\n            *(char *)previous_symbol = char_var;\n            current_section[1] = (long)previous_symbol;\n            symbol_index = u_var21;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(binary + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              symbol_index = u_var21;\n              if (error == (char *)0x0) goto LAB_00105b32;\n              string_length = strlen((char *)previous_symbol);\n              stab_length = strlen(error);\n              destination = (long *)xmalloc(stab_length + string_length + 1);\n              pointer = destination;\n            }\n            else {\nLAB_0010668d:\n              error = DAT_00127928;\n              if ((*(char *)(temp_long_var2 + 0x1c) != '\\0') && (char_var != *(char *)(temp_long_var2 + 0x1c)))\n              goto joined_r0x00106565;\n              string_length = strlen((char *)previous_symbol);\n              temp_long_var2 = string_length + 2;\n              if (error != (char *)0x0) goto LAB_001066bc;\n              pointer = (long *)xmalloc(temp_long_var2);\nLAB_001066d0:\n              destination = (long *)((long)pointer + 1);\n              *(char *)pointer = *(char *)(*(long *)(binary + 8) + 0x1c);\n            }\n            error = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy((char *)destination,DAT_00127928);\n              string_length = strlen(error);\n              destination = (long *)((long)destination + string_length);\n            }\n            strcpy((char *)destination,(char *)previous_symbol);\n            current_section[1] = (long)pointer;\n            previous_symbol = pointer;\n            symbol_index = u_var21;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((octets_per_byte & 0x20) == 0) &&\n             (((octets_per_byte & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(current_section[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_30 == 0) &&\n                (((octets_per_byte & 0x82) != 0 || ((*(byte *)(current_section[4] + 0x25) & 0x10) != 0)))) ||\n               (int_var = bfd_decode_symclass(current_section), int_var == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                temp_long_var2 = htab_find();\n                if (temp_long_var2 == 0) goto LAB_00105c07;\n              }\n              else {\n                symbol_entry_predicate_result = symbol_entry_predicate_result & 0xffffffffffffff00;\n                sorted_sections = previous_symbol;\n                htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&global_section_offset_array);\n                if (is_debug_info_added == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((octets_per_byte & 0x82) == 0) && (code_pointer != bfd_map_over_sections)) &&\n                    ((*(byte *)(current_section[4] + 0x25) & 0x10) == 0)) {\n              if ((octets_per_byte & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (temp_long_var2 = *(long *)(current_section[4] + 0xd0), temp_long_var2 == 0)) ||\n                   (*(long *)(temp_long_var2 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    char_var = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              char_var = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (char_var == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            temp_long_var2 = htab_find();\n            if (temp_long_var2 != 0) {\nLAB_0010687f:\n              error_message = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(error_message);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            symbol_entry_predicate_result = symbol_entry_predicate_result & 0xffffffffffffff00;\n            sorted_sections = previous_symbol;\n            htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&global_section_offset_array);\n            if (is_debug_info_added != '\\0') goto LAB_0010687f;\n          }\n          if ((octets_per_byte & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              symbol_entry_predicate_result = symbol_entry_predicate_result & 0xffffffffffffff00;\n              sorted_sections = previous_symbol;\n              htab_traverse(DAT_00127a10,is_specified_symbol_predicate,&global_section_offset_array);\n              if (is_debug_info_added != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            temp_long_var2 = htab_find();\n            if (temp_long_var2 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((octets_per_byte & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              temp_long_var2 = htab_find();\n              if (temp_long_var2 != 0) goto LAB_00105c2c;\n            }\n            else {\n              symbol_entry_predicate_result = symbol_entry_predicate_result & 0xffffffffffffff00;\n              sorted_sections = previous_symbol;\n              htab_traverse(DAT_00127a28,is_specified_symbol_predicate,&global_section_offset_array);\n              if (is_debug_info_added != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            char_var = is_strip_section_isra_0(current_section[4]);\n            if (char_var == '\\0') {\n              if (((octets_per_byte & 0x800002) == 0) && (code_pointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((octets_per_byte & 0x82) != 0) {\n                  char_var = is_specified_symbol(previous_symbol);\n                  if ((char_var == '\\0') &&\n                     ((temp_long_var2 = htab_elements(DAT_001279f8), temp_long_var2 == 0 ||\n                      (char_var = is_specified_symbol(previous_symbol), char_var != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uint_var2 = *(uint *)(current_section + 3), (uint_var2 & 0x200000) != 0)) ||\n                         (temp_long_var2 = *current_section, temp_long_var2 == 0)) ||\n                        ((*(int *)(*(long *)(temp_long_var2 + 8) + 8) != 5 ||\n                         (*(long *)(temp_long_var2 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)current_section + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uint_var2 = *(uint *)(current_section + 3);\n                  }\n                  *(uint *)(current_section + 3) = uint_var2 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((octets_per_byte & 1) != 0) && (char_var = is_specified_symbol(previous_symbol), char_var != '\\0')) {\n                  *(uint *)(current_section + 3) = *(uint *)(current_section + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (char_var = is_specified_symbol(previous_symbol), char_var != '\\0'))\n                {\n                  *(uint *)(current_section + 3) = *(uint *)(current_section + 3) & 0xff7ffffd | 0x80;\n                }\n                if (code_pointer != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(section_index + symbol_index * 8) = current_section;\n              symbol_index = symbol_index + 1;\n            }\n          }\n          i = i + 1;\n        } while (num_sections != i);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        alternative_machine = DAT_001279c8;\n        int_var = DAT_001279c0;\n        for (temp_long_var2 = 0; temp_long_var2 < int_var; temp_long_var2 = temp_long_var2 + 1) {\n          error = (char *)alternative_machine[5];\n          if (error == (char *)0x0) {\n            section_content = symbol_index * 8;\n            symbol_index = symbol_index + 1;\n            error_message = create_new_symbol(alternative_machine,binary);\n            *(undefined8 *)(section_index + section_content) = error_message;\n            int_var = DAT_001279c0;\n          }\n          else if (error != \"\") {\n            error_message = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(error_message,error);\n          }\n          alternative_machine = (undefined8 *)*alternative_machine;\n        }\n      }\n      is_function_end = DAT_001279a0 == '\\0';\n      *(undefined8 *)(section_index + symbol_index * 8) = 0;\n      if ((is_function_end) || (stab_table == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        num_sections = symbol_index & 0xffffffff;\n        goto LAB_00105710;\n      }\n      int_var = *(int *)(*(undefined8 **)(binary + 8) + 1);\n      if ((int_var == 5) || (int_var == 2)) {\n        param_213 = (void *)0x0;\n        char_var = write_stabs_in_sections_debugging_info_constprop_0\n                          (binary,stab_table,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                           &global_section_offset_array);\n        if (char_var != '\\0') {\n          section_index = bfd_make_section_with_flags(binary,\".stab\",0x2108);\n          temp_long_var2 = bfd_make_section_with_flags(binary,\".stabstr\",0x2108);\n          if ((((section_index == 0) || (temp_long_var2 == 0)) ||\n              (char_var = bfd_set_section_size(section_index,param_44), char_var == '\\0')) ||\n             (char_var = bfd_set_section_size(temp_long_var2,sorted_sections), char_var == '\\0')) {\n            error = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(section_index + 0x7c) = 2;\n            *(undefined4 *)(temp_long_var2 + 0x7c) = 0;\n            char_var = bfd_set_section_contents(binary,section_index,merged_symbols,0,param_44);\n            if ((char_var != '\\0') &&\n               (char_var = bfd_set_section_contents(binary,temp_long_var2,param_213,0,sorted_sections), char_var != '\\0')\n               ) {\n              free(stab_table);\n              goto LAB_00105cfa;\n            }\n            error = \"can\\'t set debugging section contents\";\n          }\n          error_message = dcgettext(0,error,5);\n          bfd_nonfatal_message(0,binary,0,error_message);\n          free(param_213);\n          free(stab_table);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        error_message = **(undefined8 **)(binary + 8);\n        u_var16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,binary,0,u_var16,error_message);\n      }\n      free(stab_table);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,mark_symbols_used_in_relocations,DAT_001278d0);\n      int_var = bfd_get_error();\n      if (int_var == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    section_index = htab_elements(DAT_00127a18);\n    if (((section_index != 0) ||\n        ((((section_index = htab_elements(DAT_00127a28), section_index != 0 ||\n           (section_index = htab_elements(DAT_00127a08), section_index != 0)) ||\n          (section_index = htab_elements(DAT_00127a00), section_index != 0)) ||\n         ((section_index = htab_elements(DAT_001279f8), section_index != 0 ||\n          (section_index = htab_elements(DAT_001279f0), section_index != 0)))))) ||\n       ((((section_index = htab_elements(DAT_001278f0), section_index != 0 ||\n          ((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')))) || (DAT_00127a39 != '\\0')) ||\n        ((((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')) ||\n         (((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')) || (DAT_001279c0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binary,DAT_001278c8,num_sections & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,binary);\n    bfd_map_over_sections(unaff_R14,copy_section,binary);\n    for (alternative_machine = DAT_001279e0; undefined8_pointer = DAT_001279d8, alternative_machine != (undefined8 *)0x0;\n        alternative_machine = (undefined8 *)*alternative_machine) {\n      char_var = bfd_set_section_contents(binary,alternative_machine[5],alternative_machine[4],0,alternative_machine[3]);\n      if (char_var == '\\0') {\n        bfd_nonfatal_message(0,binary,alternative_machine[5],0);\n        return 0;\n      }\n    }\n    for (; undefined8_pointer != (undefined8 *)0x0; undefined8_pointer = (undefined8 *)*undefined8_pointer) {\n      error_message = *(undefined8 *)(undefined8_pointer[5] + 0x60);\n      char_var = bfd_set_section_contents(binary,error_message,undefined8_pointer[4],0,undefined8_pointer[3]);\n      if (char_var == '\\0') {\n        bfd_nonfatal_message(0,binary,error_message,0);\n        return 0;\n      }\n    }\n    if (merged_notes == (long *)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        error_message = *unaff_R14;\n        u_var16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(u_var16,error_message);\n      }\n    }\n    else {\n      symbol_table = (long *)0x0;\n      for (alternative_machine = *(undefined8 **)(binary + 0x90); alternative_machine != (undefined8 *)0x0;\n          alternative_machine = (undefined8 *)alternative_machine[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(binary + 8) + 8) == 5)) &&\n           ((*(int *)(alternative_machine[0x1a] + 4) == 7 &&\n            (char_var = startswith_lto_priv_0_lto_priv_0(*alternative_machine,\".gnu.build.attributes\"),\n            char_var != '\\0')))) {\n          if (symbol_table == (long *)0x0) {\n            symbol_table = merged_notes;\n          }\n          current_section = merged_notes;\n          if (*(undefined8 **)(*symbol_table + 0x60) == alternative_machine) {\nLAB_0010625f:\n            error = \"error: failed to merge notes\";\n            if (symbol_table[1] != 0) {\n              char_var = bfd_set_section_contents(binary,alternative_machine,symbol_table[1],0,symbol_table[2]);\n              if (char_var == '\\0') {\n                error_message = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,binary,alternative_machine,error_message);\n                return 0;\n              }\n              symbol_table = (long *)symbol_table[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              symbol_table = current_section;\n              if (*(undefined8 **)(*current_section + 0x60) == alternative_machine) goto LAB_0010625f;\n              symbol_table = (long *)current_section[3];\n              current_section = symbol_table;\n            } while (symbol_table != (long *)0x0);\n            error = \"error: failed to locate merged notes\";\n          }\n          error_message = dcgettext(0,error,5);\n          bfd_nonfatal_message(0,binary,alternative_machine,error_message);\n        }\nLAB_001061be:\n      }\n      do {\n        symbol_table = (long *)merged_notes[3];\n        free((void *)merged_notes[1]);\n        free(merged_notes);\n        merged_notes = symbol_table;\n      } while (symbol_table != (long *)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (char_var = bfd_fill_in_gnu_debuglink_section(binary,debug_link_name), section_index = DAT_00127a30,\n       char_var != '\\0')) {\n      if (section_sizes != (undefined *)0x0) {\n        if (0x2000 < param_18) {\n          param_18 = 0x2000;\n        }\n        section_index = 0;\n        placeholder_ptr = (undefined *)xmalloc(param_18);\n        undefined_var = DAT_00127999;\n        stab_entry = placeholder_ptr;\n        for (param_18 = param_18 & 0xffffffff; param_18 != 0; param_18 = param_18 - 1) {\n          *stab_entry = undefined_var;\n          stab_entry = stab_entry + (ulong)byte_var2 * -2 + 1;\n        }\n        for (; (uint)section_index < stack_size._4_4_; section_index = section_index + 1) {\n          symbol_index = *(ulong *)(section_sizes + section_index * 8);\n          if (symbol_index != 0) {\n            temp_long_var2 = *(long *)(*sections + 0x40) - symbol_index;\n            do {\n              u_var21 = 0x2000;\n              if (symbol_index < 0x2001) {\n                u_var21 = symbol_index;\n              }\n              char_var = bfd_set_section_contents(binary,*sections,placeholder_ptr,temp_long_var2,u_var21);\n              if (char_var == '\\0') {\n                bfd_nonfatal_message(0,binary,*sections,0);\n                free(placeholder_ptr);\n                return 0;\n              }\n              temp_long_var2 = temp_long_var2 + u_var21;\n              symbol_index = symbol_index - u_var21;\n            } while (symbol_index != 0);\n          }\n          sections = sections + 1;\n        }\n        free(placeholder_ptr);\n        free(section_sizes);\n      }\n      return_value = (**(code **)(*(long *)(binary + 8) + 0x140))(unaff_R14);\n      if ((char)return_value != '\\0') {\n        if (DAT_00127930 == 0) {\n          return return_value;\n        }\n        char_var = bfd_alt_mach_code(binary,DAT_00127930 & 0xffffffff);\n        symbol_index = DAT_00127930;\n        if (char_var == '\\0') {\n          error_message = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(error_message,symbol_index);\n          if (*(int *)(*(long *)(binary + 8) + 8) == 5) {\n            error_message = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(error_message);\n            *(short *)(*(long *)(binary + 0x110) + 0x3a) = (short)DAT_00127930;\n            return return_value;\n          }\n          error_message = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(error_message);\n          return return_value;\n        }\n        return return_value;\n      }\n      error_message = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,binary,0,error_message);\n    }\n    else {\n      error_message = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,binary,0,error_message,section_index);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_binary_function_0010554f",
            "entrypoint": "0x0010554f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010554f": "process_binary_function_0010554f",
                "__dest": "destination",
                "__ptr": "placeholder_ptr",
                "__ptr_00": "section_data",
                "__ptr_01": "section_contents",
                "__ptr_02": "stab_table",
                "__s": "split_str",
                "_param_15": "int_pointer",
                "_param_41": "symbol_entry_predicate_result",
                "_param_9": "i",
                "_stderr": "standard_error",
                "bVar2": "byte_var",
                "bVar38": "is_function_end",
                "bVar39": "byte_var2",
                "cVar2": "result",
                "cVar7": "char_var",
                "cVar8": "char_var2",
                "compare_section_lma": "compare_section_by_lma",
                "iVar10": "int_var",
                "iVar11": "int_var2",
                "iVar27": "int_var3",
                "in_R10": "merged_notes",
                "in_stack_00000068": "stack_size",
                "in_stack_000000d8": "count",
                "in_stack_000000f8": "param_27",
                "lVar14": "section_index",
                "lVar15": "symbol_iterator",
                "lVar20": "merged_symbol_size",
                "lVar23": "section_content",
                "lVar25": "copied_section_index",
                "lVar28": "is_stab_symbol",
                "lVar37": "temp_long_var2",
                "param_1": "param_7",
                "param_12": "param_18",
                "param_13": "param_33",
                "param_14": "section_sizes",
                "param_15": "param_30",
                "param_17": "sections",
                "param_2": "in_stack_00000068",
                "param_21": "debug_link_name",
                "param_23": "eh",
                "param_24": "debug_link_size",
                "param_26": "alignment",
                "param_3": "param_21",
                "param_30": "merged_symbols",
                "param_31": "param_43",
                "param_32": "num_relocations",
                "param_34": "param_40",
                "param_36": "source_file_entry_type",
                "param_37": "param_43",
                "param_38": "param_44",
                "param_39": "section_name_length",
                "param_4": "param_23",
                "param_40": "sorted_sections",
                "param_41": "is_debug_info_added",
                "param_42": "current_source_file",
                "param_43": "type",
                "param_44": "param_50",
                "param_7": "binary",
                "param_8": "num_sections",
                "param_9": "param_43",
                "pcVar22": "string",
                "pcVar3": "code_pointer",
                "pcVar31": "error",
                "plVar15": "current_section",
                "plVar20": "pointer",
                "plVar25": "previous_symbol",
                "plVar28": "symbol_table",
                "ppcVar34": "char_double_pointer",
                "ppuVar36": "section_names",
                "puVar1": "uint_pointer",
                "puVar2": "section_iterator",
                "puVar26": "alternative_machine",
                "puVar30": "temp_ulong_ptr",
                "puVar32": "stab_entry",
                "puVar33": "stab_entry",
                "puVar4": "undefined8_pointer",
                "pvVar35": "section_data",
                "sVar18": "string_length",
                "sVar19": "stab_length",
                "stack0x00000140": "global_section_offset_array",
                "stack0x00000148": "align_offsets",
                "uVar12": "octets_per_byte",
                "uVar13": "uint_var2",
                "uVar16": "u_var16",
                "uVar17": "error_message",
                "uVar21": "u_var21",
                "uVar24": "ulong_var2",
                "uVar26": "undefined8_var3",
                "uVar29": "symbol_index",
                "uVar3": "section_flags",
                "uVar5": "undefined_var",
                "uVar6": "ushort_var",
                "uVar9": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105828": {
            "additional_data": {
                "FUN_00105828": {
                    "analyze_binary_format": 1,
                    "check_architecture": 3,
                    "check_architecture_compatibility": 1,
                    "check_binary_architecture": 2,
                    "check_file_architecture": 2,
                    "detect_architecture": 1,
                    "format_recognition": 1,
                    "get_architecture_information": 1,
                    "identify_architecture": 1,
                    "identify_binary_architecture": 1,
                    "identify_file_architecture": 1,
                    "recognize_and_print_arch": 1,
                    "recognize_and_print_architecture": 2,
                    "recognize_architecture": 1,
                    "recognize_format_of_input_file": 1,
                    "recognize_input_file_format": 9,
                    "recognize_input_format": 2
                },
                "FUN_001125fa": {
                    "process_string": 1
                },
                "FUN_00119ed0": {
                    "print_error_message": 1
                },
                "bfd_get_arch": {
                    "get_architecture": 2
                },
                "bfd_get_archive_filename": {
                    "get_archive_filename": 1,
                    "get_filename_from_archive": 1
                },
                "bfd_get_mach": {
                    "get_machine": 1
                },
                "bfd_printable_arch_mach": {
                    "get_printable_arch_machine": 1
                },
                "dcgettext": {
                    "get_localized_message": 1,
                    "get_translation": 1
                },
                "iVar1": {
                    "arch": 4,
                    "arch_code": 2,
                    "arch_type": 1,
                    "arch_value": 1,
                    "architecture": 14,
                    "architecture_code": 1,
                    "architecture_type": 2,
                    "file_architecture": 1
                },
                "non_fatal": {
                    "display_error_message": 1,
                    "handle_error": 1,
                    "print_error": 1
                },
                "param_1": {
                    "arch_filename": 1,
                    "file_name": 1,
                    "file_names": 1,
                    "input_filename": 1,
                    "param1": 1,
                    "string_list": 1
                },
                "param_2": {
                    "param2": 1
                },
                "param_3": {
                    "param3": 1
                },
                "param_4": {
                    "param4": 1
                },
                "uParam_1": {
                    "output_filename": 1
                },
                "uVar2": {
                    "arch": 5,
                    "arch_code": 1,
                    "arch_description": 1,
                    "arch_id": 1,
                    "arch_identifier": 1,
                    "arch_info": 1,
                    "arch_machine": 1,
                    "arch_type": 2,
                    "arch_value": 2,
                    "architecture": 7,
                    "file_architecture": 1,
                    "file_format": 1,
                    "machine": 3,
                    "machine_arch": 1,
                    "machine_architecture": 1,
                    "machine_type": 1
                },
                "uVar3": {
                    "arch_info": 1,
                    "arch_mach": 5,
                    "arch_mach_info": 1,
                    "arch_machine": 1,
                    "arch_str": 1,
                    "arch_string": 1,
                    "architecture": 3,
                    "archive_filename": 1,
                    "file": 1,
                    "file_name": 2,
                    "filename": 8,
                    "filename_or_architecture": 1,
                    "format": 1,
                    "output_architecture": 1,
                    "printable_arch_mach": 1,
                    "printable_architecture": 2
                },
                "uVar4": {
                    "error": 1,
                    "error_message": 25,
                    "error_msg": 5
                }
            },
            "called": [
                "FUN_00104650",
                "FUN_001045a0",
                "FUN_001125fa",
                "FUN_00104570",
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nundefined8 recognize_format_of_input_file_00105828(void)\n\n{\n  int architecture;\n  undefined4 architecture;\n  undefined8 filename;\n  undefined8 error_message;\n  \n  architecture = get_architecture();\n  if (architecture == 0) {\n    filename = get_archive_filename();\n    error_message = get_localized_message(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    display_error_message(error_message,filename);\n  }\n  else {\n    filename = get_machine();\n    architecture = get_architecture();\n    filename = get_printable_arch_machine(architecture,filename);\n    error_message = get_localized_message(0,\"Output file cannot represent architecture `%s\\'\",5);\n    display_error_message(error_message,filename);\n  }\n  return 0;\n}\n\n",
            "current_name": "recognize_format_of_input_file_00105828",
            "entrypoint": "0x00105828",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105828": "recognize_format_of_input_file_00105828",
                "bfd_get_arch": "get_architecture",
                "bfd_get_archive_filename": "get_archive_filename",
                "bfd_get_mach": "get_machine",
                "bfd_printable_arch_mach": "get_printable_arch_machine",
                "dcgettext": "get_localized_message",
                "iVar1": "architecture",
                "non_fatal": "display_error_message",
                "uVar2": "architecture",
                "uVar3": "filename",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107880": {
            "called": [
                "FUN_00104800",
                "FUN_0010551d",
                "FUN_001126c0",
                "FUN_00104400",
                "FUN_00104180",
                "FUN_001040b0",
                "FUN_001041e0",
                "FUN_00104750",
                "FUN_00114190",
                "FUN_001163d0",
                "FUN_00104570",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_00119ed0",
                "FUN_0010554f",
                "FUN_00104120",
                "FUN_00104890",
                "FUN_00113fb0",
                "FUN_00105828",
                "FUN_00115530",
                "FUN_00104440",
                "FUN_00104210",
                "FUN_00104850",
                "FUN_001048f0",
                "FUN_00104500",
                "FUN_001045f0",
                "FUN_00115f30"
            ],
            "calling": [
                "FUN_001152b6"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = recognize_format_of_input_file_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = process_binary_function_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = parse_stab(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(param_10,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a10,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a28,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') ||\n                   (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                            &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a30,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00107880",
            "entrypoint": "0x00107880",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00107976": {
            "called": [
                "FUN_00104630",
                "FUN_00104650",
                "FUN_00104860",
                "FUN_001125fa",
                "FUN_00104570",
                "FUN_001042a0",
                "FUN_00104240",
                "FUN_001152b6"
            ],
            "calling": [
                "FUN_00114e50"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = bfd_get_archive_filename();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_00127910 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_00127914 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = recognize_format_of_input_file_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_7[1],&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279eb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279e0, cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar33 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = find_section_list(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = check_new_section_flags(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = process_binary_function_0010554f();\n    return uVar29;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = start_stab_constprop_0(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar28 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0();\n            if (lVar23 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_lto_priv_0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar13 + iVar35,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279c8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = create_new_symbol(puVar33);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278f0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278f8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              fatal(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278f0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278f8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127928;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127928;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a10,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a28,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279f8), lVar28 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') ||\n                   (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = create_new_symbol(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_001279a0 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_00127a18);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a28), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_00127a08), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_00127a00), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279f8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279f0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278f0), lVar28 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar33 = DAT_001279e0; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar33,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127930;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279d0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00107976",
            "entrypoint": "0x00107976",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00108072": {
            "additional_data": {
                "DAT_00127a40": {
                    "boolean_variable": 1
                },
                "FUN_00108072": {
                    "calculate_section_sizes": 1,
                    "initialize_data_section": 1,
                    "initialize_section": 1,
                    "process_and_copy_data": 1,
                    "process_binary": 2,
                    "process_binary_data": 1,
                    "process_binary_function": 3,
                    "process_sections": 1,
                    "process_set_size": 1,
                    "process_set_size_and_alignment": 1,
                    "process_size": 1,
                    "process_size_and_alignment": 1,
                    "process_size_section_data": 1,
                    "recompute_section_size": 1,
                    "set_section_sizes": 1,
                    "set_size_and_alignment": 9,
                    "set_size_and_copy_data": 1
                },
                "_DAT_001279b0": {
                    "section_offset": 1
                },
                "bVar1": {
                    "byte_val": 1,
                    "byte_value": 11,
                    "byte_var": 9,
                    "byte_variable": 4,
                    "byte_variable_1": 1,
                    "flag_variable": 1,
                    "temp_byte": 2
                },
                "bfd_nonfatal_message": {
                    "nonfatal_message": 1
                },
                "cVar3": {
                    "char_val": 1,
                    "char_value": 4,
                    "char_var": 7,
                    "char_variable": 3,
                    "char_variable_3": 1,
                    "check_value": 1,
                    "flag": 1,
                    "function_return_value": 1,
                    "result": 4,
                    "result_char": 1,
                    "temp_char": 1
                },
                "copy_private_data_0010808f": {
                    "copy_private_data": 3
                },
                "dcgettext": {
                    "get_text": 1
                },
                "find_section_list": {
                    "find_section": 1
                },
                "flag": {
                    "alignment_flag": 1,
                    "function_flag": 1
                },
                "flags": {
                    "flag_mask": 1,
                    "section_flags": 1
                },
                "group_signature_isra_0": {
                    "group_signature": 1
                },
                "input_array": {
                    "input_array": 1,
                    "section_array": 1
                },
                "lVar5": {
                    "err_msg": 1,
                    "error_message": 14,
                    "error_msg": 3,
                    "error_text": 1,
                    "failed_set_size": 1,
                    "failure_message": 2,
                    "failure_str": 1,
                    "localized_variable_5": 1,
                    "set_size_result": 1,
                    "size_error": 1,
                    "size_error_message": 2,
                    "size_error_msg": 2,
                    "size_variable": 1
                },
                "lVar6": {
                    "localized_variable_6": 1,
                    "section1": 1,
                    "section_address": 1,
                    "section_data1": 1,
                    "section_info1": 1,
                    "section_list": 5,
                    "section_list1": 8,
                    "section_list_1": 6,
                    "section_list_2": 1,
                    "section_list_pointer": 1,
                    "section_list_pointer_1": 1,
                    "section_list_ptr": 1,
                    "section_list_variable_1": 1,
                    "section_ptr": 1,
                    "section_value": 1
                },
                "lVar7": {
                    "localized_variable_7": 1,
                    "section2": 1,
                    "section_address": 3,
                    "section_data2": 1,
                    "section_info2": 1,
                    "section_list2": 4,
                    "section_list_2": 1,
                    "section_list_pointer_2": 1,
                    "section_list_variable_2": 1,
                    "section_offset": 15,
                    "section_offset_abs": 1,
                    "section_size": 1
                },
                "lVar8": {
                    "base_address_offset": 1,
                    "data_offset": 1,
                    "localized_variable_8": 1,
                    "long_variable_1": 1,
                    "offset": 1,
                    "offset_var": 1,
                    "section_address": 1,
                    "section_address2": 1,
                    "section_data": 2,
                    "section_data3": 1,
                    "section_list2": 1,
                    "section_list3": 2,
                    "section_list_1": 1,
                    "section_list_2": 1,
                    "section_list_3": 1,
                    "section_list_6": 1,
                    "section_list_pointer_3": 1,
                    "section_list_ptr": 1,
                    "section_offset": 3,
                    "section_offset2": 2,
                    "section_size": 3,
                    "temp_long": 1,
                    "val8": 1,
                    "value": 1
                },
                "lVar9": {
                    "long_variable_2": 1
                },
                "process_function_00114190": {
                    "process_function": 3
                },
                "set_alignment_and_copy_data_00108179": {
                    "set_alignment_and_copy_data": 3
                },
                "uVar2": {
                    "base_address": 2,
                    "binary_pointer": 2,
                    "data_pointer": 1,
                    "file_ptr": 2,
                    "function_args_value": 1,
                    "function_pointer": 1,
                    "function_result": 1,
                    "input_data": 1,
                    "pointer_var": 2,
                    "ptr_arg1": 1,
                    "ptr_value": 1,
                    "ptr_var": 1,
                    "rb_value": 1,
                    "register_2": 1,
                    "result": 1,
                    "return_value": 1,
                    "section_address": 1,
                    "section_list": 1,
                    "section_pointer": 1,
                    "temp_pointer": 1,
                    "temp_var": 2,
                    "temp_variable": 1,
                    "undefined_8_variable": 1,
                    "undefined_variable": 1,
                    "undefined_variable_2": 1,
                    "value": 1
                },
                "uVar4": {
                    "alignment": 6,
                    "alignment_value": 6,
                    "byte_var_2": 1,
                    "int_value": 1,
                    "int_var": 1,
                    "number": 1,
                    "register_4": 1,
                    "size": 1,
                    "temp_u_int": 1,
                    "temp_uint": 1,
                    "uint_value": 2,
                    "uint_var": 4,
                    "uint_variable": 2,
                    "undefined_variable_4": 1,
                    "unsigned_variable": 1
                },
                "unaff_R12": {
                    "another_pointer": 1,
                    "callee_register_1": 1,
                    "flag": 2,
                    "group_address": 1,
                    "parameter_2": 1,
                    "r12_value": 1,
                    "register12": 4,
                    "register_12": 4,
                    "register_r12": 2,
                    "register_value_12": 1,
                    "registers_r12": 1,
                    "section_data": 1,
                    "section_list": 2,
                    "section_list_base": 1,
                    "section_list_ptr": 1,
                    "section_parameter": 1,
                    "section_pointer": 2,
                    "section_ptr": 2,
                    "unaff_stack_var_12": 1,
                    "unaffined_register": 1
                },
                "unaff_R14B": {
                    "boolean_flag": 1,
                    "boolean_variable": 1,
                    "check_bit": 1,
                    "check_boolean": 1,
                    "check_flag": 1,
                    "condition_flag": 1,
                    "flag": 12,
                    "flag_parameter": 1,
                    "flag_variable": 1,
                    "has_group_signature": 1,
                    "private_data_flag": 1,
                    "r14b_value": 1,
                    "register14_b": 1,
                    "register_14_b": 1,
                    "register_r14_b": 2,
                    "registers_r14_b": 1,
                    "reverse_flag": 1,
                    "unaff_stack_var_14_b": 1
                },
                "unaff_R15": {
                    "flags": 1,
                    "output_data": 2,
                    "output_pointer": 1,
                    "output_struct_ptr": 1,
                    "parameter_3": 1,
                    "r15_value": 1,
                    "register15": 4,
                    "register_15": 4,
                    "register_r15": 2,
                    "register_value_15": 1,
                    "registers_r15": 1,
                    "result": 7,
                    "result_pointer": 1,
                    "result_ptr": 1,
                    "result_struct": 1,
                    "section_address": 1,
                    "section_data": 1
                },
                "unaff_RBP": {
                    "base_address": 1,
                    "base_pointer": 13,
                    "base_ptr": 1,
                    "callee_frame_base": 1,
                    "function_frame": 1,
                    "input_array": 1,
                    "input_data": 1,
                    "input_parameter": 1,
                    "input_pointer": 1,
                    "parameter_1": 1,
                    "rbp_value": 1,
                    "register_base_pointer": 3,
                    "register_bp": 1,
                    "registers_rbp": 1,
                    "stack_pointer": 1,
                    "stack_ptr": 1,
                    "unaff_local_base_ptr": 1
                },
                "unaff_RBX": {
                    "args": 1,
                    "binary_data": 1,
                    "data_array": 1,
                    "function_args": 4,
                    "function_args_ptr": 1,
                    "function_arguments": 3,
                    "function_context": 1,
                    "function_parameters": 4,
                    "function_ptrs": 1,
                    "input_array": 1,
                    "parameters": 5,
                    "params": 2,
                    "rb_pointer": 1,
                    "register_bx": 3,
                    "registers_rbx": 1,
                    "section_info": 1
                }
            },
            "called": [
                "FUN_00108179",
                "FUN_00114190",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\n\n\nvoid process_set_size_and_alignment_00108072(void)\n\n{\n  byte byte_value;\n  undefined8 pointer_var;\n  char char_var;\n  uint alignment;\n  long error_message;\n  long section_list1;\n  long section_offset;\n  undefined8 *parameters;\n  long base_pointer;\n  long register_12;\n  long section_offset;\n  char flag;\n  long result;\n  \n  error_message = get_text(0,\"failed to set size\",5);\n  section_offset = parameters[6];\n  section_list1 = find_section(*parameters,0,0x18);\n  if (section_list1 == 0) {\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    pointer_var = *parameters;\n    section_offset = section_offset + _DAT_001279b0;\n    *(long *)(result + 0x30) = section_offset;\n    *(long *)(result + 0x38) = section_offset;\n    section_offset = parameters[7];\n    section_list1 = find_section(pointer_var,0,0x60);\n    if (section_list1 == 0) goto LAB_00115695;\nLAB_00115860:\n    section_offset = *(long *)(section_list1 + 0x20);\n    if ((*(byte *)(section_list1 + 0x14) & 0x40) != 0) {\n      section_offset = section_offset + section_offset;\n    }\n    *(long *)(result + 0x38) = section_offset;\n    section_offset = find_section(*parameters,0,0x200);\n    if (section_offset != 0) goto LAB_00115889;\nLAB_001156b8:\n    alignment = *(uint *)((long)parameters + 0x7c);\n    if (alignment < 0x3f) goto LAB_001156c4;\n    error_message = get_text(0,\"failed to set alignment\",5);\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = result;\n    parameters[0xb] = 0;\n    byte_value = *(byte *)((long)parameters + 0x27);\n  }\n  else {\n    section_offset = *(long *)(section_list1 + 0x18);\n    if ((*(byte *)(section_list1 + 0x14) & 8) == 0) {\n      section_offset = section_offset + section_offset;\n    }\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    pointer_var = *parameters;\n    *(long *)(result + 0x30) = section_offset;\n    *(long *)(result + 0x38) = section_offset;\n    section_offset = parameters[7];\n    section_list1 = find_section(pointer_var,0,0x60);\n    if (section_list1 != 0) goto LAB_00115860;\nLAB_00115695:\n    pointer_var = *parameters;\n    *(long *)(result + 0x38) = section_offset + _DAT_001279b0;\n    section_offset = find_section(pointer_var,0,0x200);\n    if (section_offset == 0) goto LAB_001156b8;\nLAB_00115889:\n    alignment = *(uint *)(section_offset + 0x2c);\n    if (0x3e < alignment) {\n      set_alignment_and_copy_data();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(result + 0x7c) = alignment;\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = result;\n    parameters[0xb] = 0;\n    byte_value = *(byte *)((long)parameters + 0x27);\n  }\n  if ((byte_value & 2) != 0) {\n    section_offset = parameters[0x1a];\n    section_list1 = group_signature(section_offset,parameters[0x1c]);\n    if ((section_list1 != 0) &&\n       (section_offset = *(long *)(register_12 + 8), *(uint *)(section_list1 + 0x18) = *(uint *)(section_list1 + 0x18) | 0x20,\n       *(int *)(section_offset + 8) == 5)) {\n      *(long *)(section_offset + 0xb0) = section_list1;\n      char_var = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (char_var == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  char_var = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (char_var == '\\0') {\n    copy_private_data();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(result + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a40 = 1;\n    nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "process_set_size_and_alignment_00108072",
            "entrypoint": "0x00108072",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108072": "process_set_size_and_alignment_00108072",
                "bVar1": "byte_value",
                "bfd_nonfatal_message": "nonfatal_message",
                "cVar3": "char_var",
                "copy_private_data_0010808f": "copy_private_data",
                "dcgettext": "get_text",
                "find_section_list": "find_section",
                "group_signature_isra_0": "group_signature",
                "lVar5": "error_message",
                "lVar6": "section_list1",
                "lVar7": "section_offset",
                "lVar8": "section_offset",
                "set_alignment_and_copy_data_00108179": "set_alignment_and_copy_data",
                "uVar2": "pointer_var",
                "uVar4": "alignment",
                "unaff_R12": "register_12",
                "unaff_R14B": "flag",
                "unaff_R15": "result",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010808f": {
            "additional_data": {
                "DAT_00127a40": {
                    "error_flag": 1,
                    "failure_status": 1,
                    "flag": 1
                },
                "FUN_0010808f": {
                    "copy_private_data": 31
                },
                "bfd_nonfatal_message": {
                    "print_error_message": 2
                },
                "dcgettext": {
                    "get_error_message": 2,
                    "get_localized_string": 1
                },
                "lVar1": {
                    "error_message": 10,
                    "error_msg": 1,
                    "localized_string": 1,
                    "translation_result": 1
                },
                "unaff_R14B": {
                    "character": 1,
                    "copy_data_flag": 1,
                    "copy_failed": 2,
                    "copy_successful": 4,
                    "flag": 8,
                    "is_copy_successful": 6,
                    "is_failure": 1,
                    "is_private": 1,
                    "is_private_data": 1,
                    "is_private_data_copied": 1,
                    "is_private_data_copy": 1,
                    "is_private_data_exist": 1,
                    "is_private_data_valid": 1,
                    "is_success": 1,
                    "should_copy_data": 1
                },
                "unaff_R15": {
                    "base_address": 8,
                    "context": 1,
                    "copy_data_address": 1,
                    "data_address": 6,
                    "data_offset": 1,
                    "data_pointer": 6,
                    "data_ptr": 1,
                    "pointer": 1,
                    "private_data_address": 3,
                    "private_data_pointer": 1,
                    "ptr_to_data_struct": 1,
                    "source_address": 1
                }
            },
            "called": [
                "FUN_001126c0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00108179"
            ],
            "code": "\nvoid copy_private_data_0010808f(void)\n\n{\n  long error_message;\n  char flag;\n  long base_address;\n  \n  error_message = get_error_message(0,\"failed to copy private data\",5);\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(base_address + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a40 = 1;\n    print_error_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "copy_private_data_0010808f",
            "entrypoint": "0x0010808f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "bfd_nonfatal_message": "print_error_message",
                "dcgettext": "get_error_message",
                "lVar1": "error_message",
                "unaff_R14B": "flag",
                "unaff_R15": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108179": {
            "additional_data": {
                "DAT_00127a40": {
                    "error_flag": 1
                },
                "FUN_00108179": {
                    "initialize_alignment": 2,
                    "initialize_data": 1,
                    "process_alignment": 2,
                    "set_alignment": 16,
                    "set_alignment_and_copy_data": 6,
                    "set_alignment_check": 1,
                    "set_alignment_failure": 1,
                    "set_alignment_failure_handler": 1,
                    "set_alignment_status": 1
                },
                "bfd_nonfatal_message": {
                    "display_error_message": 1
                },
                "cVar3": {
                    "char_result": 1,
                    "char_value": 1,
                    "char_var3": 1,
                    "check_result": 1,
                    "condition": 1,
                    "error_flag": 1,
                    "flag": 2,
                    "is_success": 3,
                    "is_valid": 1,
                    "result": 6,
                    "return_value": 2,
                    "success": 2,
                    "success_flag": 7,
                    "successful": 1
                },
                "copy_private_data_0010808f": {
                    "copy_private_data": 7
                },
                "dcgettext": {
                    "get_alignment_error_message": 1,
                    "get_error_message": 2,
                    "get_localized_text": 1
                },
                "find_matching_value_00115d00": {
                    "find_matching_value_in_data_structure": 1
                },
                "group_signature_isra_0": {
                    "find_matching_value": 6,
                    "get_signature": 1
                },
                "lVar1": {
                    "alignment": 1,
                    "alignment_check_result": 1,
                    "alignment_error": 1,
                    "alignment_error_msg": 2,
                    "alignment_failure": 1,
                    "alignment_flag": 1,
                    "alignment_message": 1,
                    "alignment_msg": 1,
                    "alignment_ptr": 1,
                    "alignment_text": 1,
                    "data_structure": 1,
                    "error_code": 1,
                    "error_message": 1,
                    "group_data_ptr": 1,
                    "group_signature_check": 1,
                    "info_message": 1,
                    "input_val": 1,
                    "lang_var1": 1,
                    "localized_error_message": 1,
                    "result": 1,
                    "result1": 1,
                    "source_data": 1,
                    "struct_value": 1,
                    "value": 2,
                    "value1": 4
                },
                "lVar2": {
                    "data": 2,
                    "data_length": 1,
                    "data_ptr": 2,
                    "data_structure": 1,
                    "data_structure_flag": 1,
                    "data_structure_value": 2,
                    "data_val": 1,
                    "function_index": 1,
                    "function_pointer": 1,
                    "group_info": 1,
                    "group_ptr": 1,
                    "group_signature": 1,
                    "inner_struct": 1,
                    "input_value": 1,
                    "lang_var2": 1,
                    "matching_value": 1,
                    "parameter_data": 1,
                    "private_data": 2,
                    "result2": 1,
                    "sub_function_result": 1,
                    "temp_value": 1,
                    "value": 1,
                    "value2": 4
                },
                "lVar4": {
                    "alignment_error": 2,
                    "alignment_error_message": 2,
                    "alignment_error_msg_ptr": 1,
                    "alignment_failed_msg": 1,
                    "err_message": 1,
                    "err_msg": 1,
                    "errmsg": 1,
                    "error": 1,
                    "error_message": 12,
                    "error_msg": 3,
                    "error_string": 1,
                    "failed_alignment_message": 2,
                    "failed_alignment_msg": 1,
                    "lang_var4": 1
                },
                "lVar5": {
                    "data_structure": 1,
                    "lang_var5": 1,
                    "matched_group_signature": 1,
                    "matching_val": 1,
                    "matching_value": 22,
                    "matching_value_result": 1,
                    "result": 1,
                    "result3": 1,
                    "signature_check_result": 1
                },
                "unaff_R12": {
                    "additional_struct_ptr": 1,
                    "context_ptr": 1,
                    "function_pointer": 1,
                    "function_ptr": 2,
                    "group_data": 1,
                    "group_signature": 1,
                    "helper_function": 1,
                    "helper_structure": 1,
                    "input_ptr": 2,
                    "input_value": 1,
                    "object3": 2,
                    "param3": 2,
                    "parameter": 1,
                    "parameter3": 1,
                    "ptr_3": 1,
                    "r12": 4,
                    "r12_value": 2,
                    "register_12": 1,
                    "register_r12": 1,
                    "second_input": 1,
                    "signature_address": 1,
                    "structure3": 1,
                    "temp_ptr": 1
                },
                "unaff_R14B": {
                    "bool_value": 1,
                    "boolean_value": 1,
                    "check_flag": 1,
                    "condition_flag": 2,
                    "copy_flag": 1,
                    "execute_inner": 1,
                    "flag": 6,
                    "flag_r14_b": 1,
                    "is_match": 1,
                    "is_reversed": 1,
                    "is_true": 1,
                    "needs_alignment": 1,
                    "param4": 2,
                    "private_copy_flag": 1,
                    "r14b": 4,
                    "register_r14_b": 1,
                    "reverse_flag": 2,
                    "should_copy_data": 2,
                    "use_private_data": 1
                },
                "unaff_R15": {
                    "current_ptr": 1,
                    "data_to_copy": 1,
                    "destination": 1,
                    "destination_structure": 1,
                    "input_data": 1,
                    "input_value": 2,
                    "new_ptr": 1,
                    "new_struct": 1,
                    "object4": 2,
                    "param5": 2,
                    "parameter4": 1,
                    "ptr_4": 1,
                    "r15": 4,
                    "r15_value": 2,
                    "register_15": 1,
                    "register_r15": 1,
                    "structure4": 1,
                    "target_ptr": 1,
                    "target_value": 1,
                    "temp_data": 1,
                    "temp_ptr": 2,
                    "temporary_ptr": 1,
                    "temporary_variable": 1
                },
                "unaff_RBP": {
                    "another_struct_ptr": 1,
                    "base_pointer": 4,
                    "base_ptr": 3,
                    "caller_frame_ptr": 1,
                    "caller_ptr": 1,
                    "data_structure": 2,
                    "frame_pointer": 1,
                    "frame_ptr": 1,
                    "input_value": 1,
                    "object2": 2,
                    "param2": 2,
                    "parameter2": 1,
                    "pointer_to_structure": 1,
                    "ptr_2": 1,
                    "rbp": 4,
                    "rbp_value": 2,
                    "register_bp": 1,
                    "stack_frame_pointer": 1,
                    "structure2": 1
                },
                "unaff_RBX": {
                    "base_address": 2,
                    "base_ptr": 1,
                    "binary_pointer": 1,
                    "current_struct": 1,
                    "data_ptr": 2,
                    "data_structure": 2,
                    "data_structure_ptr": 1,
                    "input_data": 1,
                    "input_parameter": 1,
                    "object1": 2,
                    "outer_struct_ptr": 1,
                    "param1": 2,
                    "parameter1": 1,
                    "ptr_1": 1,
                    "rbx": 4,
                    "rbx_value": 2,
                    "register_bx": 1,
                    "source": 1,
                    "source_structure": 1,
                    "structure1": 1,
                    "this_ptr": 2
                }
            },
            "called": [
                "FUN_00115d00",
                "FUN_00104240",
                "FUN_0010808f"
            ],
            "calling": [
                "FUN_00108072"
            ],
            "code": "\nvoid set_alignment_and_copy_data_00108179(void)\n\n{\n  long value1;\n  long value2;\n  char success_flag;\n  long error_message;\n  long matching_value;\n  long rbx;\n  long base_pointer;\n  long r12;\n  char flag;\n  long r15;\n  \n  error_message = get_error_message(0,\"failed to set alignment\",5);\n  *(undefined4 *)(r15 + 0xb4) = *(undefined4 *)(rbx + 0xb4);\n  *(byte *)(r15 + 0x28) =\n       *(byte *)(r15 + 0x28) & 0xcf | *(byte *)(rbx + 0x28) & 0x30;\n  *(long *)(rbx + 0x60) = r15;\n  *(undefined8 *)(rbx + 0x58) = 0;\n  if ((*(byte *)(rbx + 0x27) & 2) != 0) {\n    value1 = *(long *)(rbx + 0xd0);\n    matching_value = find_matching_value(value1,*(undefined8 *)(rbx + 0xe0));\n    if ((matching_value != 0) &&\n       (value2 = *(long *)(r12 + 8), *(uint *)(matching_value + 0x18) = *(uint *)(matching_value + 0x18) | 0x20,\n       *(int *)(value2 + 8) == 5)) {\n      *(long *)(value1 + 0xb0) = matching_value;\n      success_flag = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (success_flag == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  success_flag = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (success_flag == '\\0') {\n    copy_private_data();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(r15 + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a40 = 1;\n    display_error_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "set_alignment_and_copy_data_00108179",
            "entrypoint": "0x00108179",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108179": "set_alignment_and_copy_data_00108179",
                "bfd_nonfatal_message": "display_error_message",
                "cVar3": "success_flag",
                "copy_private_data_0010808f": "copy_private_data",
                "dcgettext": "get_error_message",
                "group_signature_isra_0": "find_matching_value",
                "lVar1": "value1",
                "lVar2": "value2",
                "lVar4": "error_message",
                "lVar5": "matching_value",
                "unaff_R12": "r12",
                "unaff_R14B": "flag",
                "unaff_R15": "r15",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "rbx"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001081e9": {
            "additional_data": {
                "FUN_001081e9": {
                    "dealloc_memory": 1,
                    "free_and_return_memory": 1,
                    "free_memory": 21,
                    "free_memory_and_return": 1,
                    "free_memory_and_return_value": 1,
                    "release_memory": 6
                },
                "in_RAX": {
                    "input": 1,
                    "result": 2,
                    "return_value": 5,
                    "returned_value": 1
                },
                "param_7": {
                    "previous_return_value": 2,
                    "result": 2,
                    "return_address": 1,
                    "return_value": 13
                },
                "unaff_RBX": {
                    "memory_address": 4,
                    "memory_block": 12,
                    "memory_pointer": 2,
                    "memory_to_deallocate": 1,
                    "memory_to_free": 9,
                    "memory_to_release": 3
                }
            },
            "called": [
                "FUN_001048f0"
            ],
            "calling": [
                "FUN_0011a0e0"
            ],
            "code": "\nundefined8 free_memory_and_return_value_001081e9(void)\n\n{\n  undefined8 return_value;\n  void *memory_block;\n  undefined8 return_value;\n  \n  return_value = return_value;\n  free(memory_block);\n  return return_value;\n}\n\n",
            "current_name": "free_memory_and_return_value_001081e9",
            "entrypoint": "0x001081e9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001081e9": "free_memory_and_return_value_001081e9",
                "in_RAX": "return_value",
                "param_7": "return_value",
                "unaff_RBX": "memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108200": {
            "additional_data": {
                "FUN_00108200": {
                    "copy_and_clean_file": 1,
                    "copy_and_delete_file": 1,
                    "copy_and_set_file_attributes": 1,
                    "copy_and_set_file_times": 2,
                    "copy_and_set_times": 6,
                    "copy_and_unlink_file": 2,
                    "copy_file": 8,
                    "copy_file_and_handle_error": 1,
                    "copy_file_and_set_times": 6,
                    "copy_file_with_error_handling": 1,
                    "copy_file_with_reason": 2
                },
                "auVar3": {
                    "result": 3,
                    "return_value": 3,
                    "return_variable": 1
                },
                "piVar1": {
                    "errno_location": 2,
                    "errno_pointer": 1,
                    "errno_ptr": 3,
                    "error_code_pointer": 1,
                    "error_location": 1
                },
                "uVar2": {
                    "error_message": 8
                },
                "unaff_R12B": {
                    "copy_error": 1,
                    "copy_file_flag": 3,
                    "copy_flag": 6,
                    "copy_if_needed": 1,
                    "copy_times_flag": 2,
                    "has_error": 1,
                    "should_set_times": 17
                },
                "unaff_R13": {
                    "error_code": 1,
                    "file_copy_reason": 1,
                    "file_copy_status": 1,
                    "file_info": 1,
                    "file_mode": 1,
                    "file_permissions": 9,
                    "file_size": 3,
                    "file_status": 2,
                    "flags": 5,
                    "param": 1,
                    "permissions": 2,
                    "ret_value": 1,
                    "time_var": 1,
                    "unlink_flag": 1,
                    "unlink_flags": 1
                },
                "unaff_RBP": {
                    "file_name": 1,
                    "file_path": 19,
                    "file_to_copy": 5,
                    "source_file": 1,
                    "source_file_path": 5
                },
                "unaff_retaddr": {
                    "return_address": 29,
                    "return_value": 1
                }
            },
            "called": [
                "FUN_00104890",
                "FUN_001040c0",
                "FUN_0011a350",
                "FUN_00104240",
                "FUN_001040b0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00115970"
            ],
            "code": "\nundefined  [16] copy_and_set_file_times_00108200(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  char *file_path;\n  char should_set_times;\n  ulong file_permissions;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  errno_ptr = __errno_location();\n  strerror(*errno_ptr);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(error_message);\n  unlink(file_path);\n  if (should_set_times != '\\0') {\n    set_times();\n  }\n  return_value._0_8_ = file_permissions & 0xffffffff;\n  return_value._8_8_ = return_address;\n  return return_value;\n}\n\n",
            "current_name": "copy_and_set_file_times_00108200",
            "entrypoint": "0x00108200",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108200": "copy_and_set_file_times_00108200",
                "auVar3": "return_value",
                "piVar1": "errno_ptr",
                "uVar2": "error_message",
                "unaff_R12B": "should_set_times",
                "unaff_R13": "file_permissions",
                "unaff_RBP": "file_path",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108237": {
            "additional_data": {
                "FUN_00108237": {
                    "close_and_return_error": 1,
                    "close_and_return_error_code": 1,
                    "close_and_set_errno": 2,
                    "close_and_set_error": 1,
                    "close_file": 2,
                    "close_file_and_reset_errno": 1,
                    "close_file_and_restore_errno": 1,
                    "close_file_and_return": 1,
                    "close_file_and_return_error": 5,
                    "close_file_and_return_error_code": 1,
                    "close_file_and_return_error_status": 1,
                    "close_file_and_return_failure": 1,
                    "close_file_and_set_errno": 5,
                    "close_file_and_set_error": 4,
                    "close_file_and_set_error_code": 1,
                    "close_file_and_set_last_error": 1,
                    "close_file_descriptor": 1,
                    "close_file_with_error_handling": 1
                },
                "iVar1": {
                    "errno_value": 3,
                    "error_code": 1,
                    "error_value": 1,
                    "original_errno_value": 1,
                    "original_error": 1,
                    "previous_errno": 2,
                    "previous_error": 1,
                    "previous_error_value": 1,
                    "saved_errno": 2
                },
                "piVar2": {
                    "errno_location": 1,
                    "errno_location_ptr": 1,
                    "errno_pointer": 6,
                    "errno_ptr": 2,
                    "error_code_pointer": 1,
                    "error_pointer": 1
                },
                "unaff_R12D": {
                    "file_descriptor": 31
                }
            },
            "called": [
                "FUN_001043c0",
                "FUN_001040b0"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\nundefined8 close_file_and_return_error_code_00108237(void)\n\n{\n  int errno_value;\n  int *errno_pointer;\n  int file_descriptor;\n  \n  errno_pointer = __errno_location();\n  errno_value = *errno_pointer;\n  close(file_descriptor);\n  *errno_pointer = errno_value;\n  return 0xffffffff;\n}\n\n",
            "current_name": "close_file_and_return_error_code_00108237",
            "entrypoint": "0x00108237",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108237": "close_file_and_return_error_code_00108237",
                "iVar1": "errno_value",
                "piVar2": "errno_pointer",
                "unaff_R12D": "file_descriptor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010827b": {
            "additional_data": {
                "FUN_0010827b": {
                    "check_section_conflict": 1,
                    "display_error": 1,
                    "error_section_match": 1,
                    "fatal_error": 1,
                    "handle_error": 1,
                    "handle_matching_options": 1,
                    "handle_section_conflict": 1,
                    "handle_section_error": 6,
                    "handle_section_match_error": 7,
                    "handle_section_matches": 1,
                    "perform_fatal_error": 1,
                    "print_error_and_exit": 2,
                    "print_fatal_error_message": 1,
                    "print_section_error": 1,
                    "process_section_match": 1,
                    "process_section_matching_options": 1,
                    "section_error_fatal": 1,
                    "section_matching_error": 1,
                    "section_matching_options_error": 1
                },
                "uVar1": {
                    "error_message": 1,
                    "error_section": 1,
                    "option_value": 1,
                    "section": 3,
                    "section_address": 4,
                    "section_name": 2,
                    "section_value": 10
                },
                "uVar2": {
                    "error_description": 1,
                    "error_message": 19,
                    "error_string": 2
                },
                "unaff_RBX": {
                    "error_message": 1,
                    "error_section_ptr": 1,
                    "message": 1,
                    "option_pointer": 1,
                    "section": 1,
                    "section_array": 1,
                    "section_name": 2,
                    "section_options_array": 1,
                    "section_pointer": 6,
                    "section_ptr": 11
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00115b70"
            ],
            "code": "\nvoid handle_section_match_error_0010827b(void)\n\n{\n  undefined8 section_value;\n  undefined8 error_message;\n  undefined8 *section_ptr;\n  \n  section_value = *section_ptr;\n  error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  fatal(error_message,section_value);\n}\n\n",
            "current_name": "handle_section_match_error_0010827b",
            "entrypoint": "0x0010827b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010827b": "handle_section_match_error_0010827b",
                "uVar1": "section_value",
                "uVar2": "error_message",
                "unaff_RBX": "section_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010829e": {
            "additional_data": {
                "FUN_0010829e": {
                    "check_and_handle_condition": 1,
                    "check_condition": 1,
                    "check_condition_and_call_function": 1,
                    "check_condition_and_call_subfunction": 2,
                    "check_condition_and_return_result": 2,
                    "check_ebp_value": 1,
                    "choose_action": 1,
                    "choose_action_based_on_input": 1,
                    "decide_action_based_on_ebp": 1,
                    "decide_next_action": 1,
                    "determine_next_action": 1,
                    "evaluate_condition": 1,
                    "handle_ebp_value": 1,
                    "handle_unaff_ebp": 1,
                    "process_condition": 2,
                    "process_data": 2,
                    "process_ebp_value": 4,
                    "process_input": 2,
                    "process_operation": 1,
                    "process_unaff_ebp": 2,
                    "process_unaff_ebp_value": 1,
                    "process_value": 1
                },
                "calculate_inverse_flag_001082b3": {
                    "calculate_inverse_flag": 27
                },
                "check_string_length_00113ede": {
                    "check_string_length": 5,
                    "get_string_length": 1
                },
                "is_dwo_section_constprop_0": {
                    "check_dwo_section": 3,
                    "check_dwo_section_constprop": 1,
                    "check_section_constprop": 1,
                    "check_section_flag": 1,
                    "check_string_array": 1,
                    "check_string_equality": 1,
                    "check_string_length": 17,
                    "check_string_section": 1
                },
                "string_array": {
                    "string_array": 1
                },
                "uVar1": {
                    "result": 2
                },
                "unaff_EBP": {
                    "action_code": 1,
                    "condition": 6,
                    "condition_value": 2,
                    "condition_variable": 1,
                    "ebp_value": 10,
                    "error_code": 1,
                    "flag": 1,
                    "input": 1,
                    "input_parameter": 1,
                    "input_value": 4,
                    "operation_type": 1,
                    "unaff_ebp": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "calling": [
                "FUN_00115b70"
            ],
            "code": "\nundefined8 process_unaff_ebp_value_0010829e(void)\n\n{\n  undefined8 result;\n  int ebp_value;\n  \n  if (ebp_value == 5) {\n    result = check_string_length();\n    return result;\n  }\n  if ((ebp_value != 4) && (ebp_value == 6)) {\n    result = calculate_inverse_flag();\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_unaff_ebp_value_0010829e",
            "entrypoint": "0x0010829e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010829e": "process_unaff_ebp_value_0010829e",
                "calculate_inverse_flag_001082b3": "calculate_inverse_flag",
                "is_dwo_section_constprop_0": "check_string_length",
                "uVar1": "result",
                "unaff_EBP": "ebp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082b3": {
            "additional_data": {
                "FUN_001082b3": {
                    "calculate_inverse": 4,
                    "calculate_inverse_flag": 1,
                    "calculate_inverted_result": 3,
                    "calculate_inverted_value": 2,
                    "calculate_xor": 1,
                    "calculate_xor_result": 1,
                    "check_dwo_section": 1,
                    "check_dwo_section_constprop": 1,
                    "evaluate_section_constprop_0": 1,
                    "invert_and_check_dwo_section": 1,
                    "invert_and_constprop_check": 1,
                    "invert_and_return": 2,
                    "invert_and_return_flag": 1,
                    "invert_and_return_section_constprop": 1,
                    "invert_result": 1,
                    "invert_result_flag": 1,
                    "reverse_and_invert": 1,
                    "reverse_and_invert_result": 1,
                    "toggle_constprop_0": 1,
                    "toggle_dwo_section_constprop_0": 1,
                    "toggle_section_const_prop": 1,
                    "toggle_section_constprop": 1
                },
                "FUN_00113ede": {
                    "extract_data_from_param": 1,
                    "parse_arguments": 1,
                    "process_arg": 1,
                    "process_char_pointer": 1,
                    "process_input_string": 1
                },
                "is_dwo_section_constprop_0": {
                    "check_constant": 1,
                    "check_constant_value": 1,
                    "check_constprop_0": 1,
                    "check_constprop_section": 1,
                    "check_dwo_section_constant_property": 1,
                    "check_dwo_section_constprop": 1,
                    "check_dwo_section_constprop_0": 3,
                    "check_dwo_section_for_constprop": 1,
                    "check_flag": 1,
                    "check_if_section_constprop_0": 1,
                    "check_section_constprop_0": 1,
                    "get_dwo_section_constprop": 2,
                    "is_constprop_0": 1,
                    "is_constprop_section": 1
                },
                "uVar1": {
                    "flag": 1,
                    "is_constant": 1,
                    "is_constant_section": 1,
                    "is_constprop_0": 2,
                    "is_constprop_0_result": 1,
                    "is_constprop_section": 1,
                    "is_dwo_section_constprop_0_result": 2,
                    "is_dwo_section_constprop_result": 1,
                    "is_section_const_prop": 1,
                    "result": 16,
                    "section_constprop_result": 1
                }
            },
            "called": [
                "FUN_00113ede"
            ],
            "calling": [
                "FUN_0010829e"
            ],
            "code": "\nuint calculate_inverse_flag_001082b3(void)\n\n{\n  uint result;\n  \n  result = check_dwo_section_constprop_0();\n  return result ^ 1;\n}\n\n",
            "current_name": "calculate_inverse_flag_001082b3",
            "entrypoint": "0x001082b3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082b3": "calculate_inverse_flag_001082b3",
                "is_dwo_section_constprop_0": "check_dwo_section_constprop_0",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082c3": {
            "additional_data": {
                "FUN_001082c3": {
                    "calculate_result": 1,
                    "clear_flags": 1,
                    "clear_memory": 1,
                    "empty_function": 2,
                    "get_default_value": 6,
                    "get_zero": 1,
                    "get_zero_value": 2,
                    "initialize": 10,
                    "initialize_application": 1,
                    "initialize_data": 2,
                    "initialize_function": 1,
                    "initialize_value": 2,
                    "return_zero": 1
                },
                "new_variable_name_1": {
                    "status": 1
                },
                "ret_value": {
                    "return_value": 1
                },
                "return": {
                    "result": 1
                },
                "undefined8": {
                    "void": 6
                }
            },
            "called": [],
            "calling": [
                "FUN_00115d00"
            ],
            "code": "\nvoid initialize_value_001082c3(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_value_001082c3",
            "entrypoint": "0x001082c3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082c3": "initialize_value_001082c3",
                "return": "result",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082df": {
            "additional_data": {
                "DAT_00127a28": {
                    "specified_symbol": 3,
                    "symbol_value": 1
                },
                "DAT_00127a48": {
                    "constant": 2,
                    "constant_value": 2
                },
                "FUN_001082df": {
                    "extract_and_call_function": 1,
                    "extract_needed_symbols": 1,
                    "extract_specified_symbols": 3,
                    "extract_valid_pointers": 1,
                    "find_and_call_symbol": 1,
                    "find_specified_symbols": 1,
                    "find_valid_symbols": 1,
                    "process_data": 3,
                    "process_function": 1,
                    "process_symbols": 17,
                    "reverse_and_call": 1
                },
                "cVar3": {
                    "is_specified": 5,
                    "is_specified_symbol": 5,
                    "is_symbol_specified": 10,
                    "is_symbol_valid": 1,
                    "is_valid_symbol": 6,
                    "symbol": 1,
                    "symbol_flag": 2,
                    "symbol_specified": 1
                },
                "lVar2": {
                    "current_symbol": 1,
                    "current_value": 1,
                    "element_value": 3,
                    "pointer_value": 1,
                    "ptr_value": 1,
                    "symbol": 4,
                    "symbol_address": 10,
                    "symbol_pointer": 1,
                    "symbol_ptr": 1,
                    "symbol_value": 6,
                    "temp_var": 1,
                    "value": 1
                },
                "puVar4": {
                    "dest_pointer": 1,
                    "filtered_symbol_array": 2,
                    "filtered_symbol_list": 1,
                    "filtered_symbols": 4,
                    "new_r13_value": 1,
                    "new_symbol_array": 1,
                    "new_symbol_pointers": 1,
                    "new_symbols_array": 1,
                    "output_array": 2,
                    "output_pointer": 2,
                    "output_ptr": 4,
                    "output_symbol_array": 1,
                    "result_array": 2,
                    "result_array_ptr": 1,
                    "result_pointer": 2,
                    "result_ptr": 2,
                    "symbols": 1,
                    "valid_pointer_array": 1,
                    "valid_symbols": 1
                },
                "puVar5": {
                    "current_output": 1,
                    "current_ptr": 1,
                    "current_result": 3,
                    "current_valid_pointer": 1,
                    "filtered_symbol_array_end": 1,
                    "filtered_symbol_array_iterator": 1,
                    "filtered_symbol_list_ptr": 1,
                    "filtered_symbols_iterator": 2,
                    "new_r13_value2": 1,
                    "new_result_ptr": 1,
                    "new_symbols_array_ptr": 1,
                    "next_filtered_symbol": 2,
                    "next_output_ptr": 1,
                    "next_symbol": 1,
                    "next_valid_symbol": 1,
                    "output_pointer_temp": 1,
                    "output_symbol_array_index": 1,
                    "result_pointer_tmp": 1,
                    "temp_array": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 3,
                    "temp_symbol_array": 1,
                    "updated_dest_pointer": 1,
                    "updated_output_ptr": 1,
                    "updated_symbol_pointers": 1
                },
                "uVar1": {
                    "count": 3,
                    "length": 1,
                    "num_elements": 5,
                    "num_symbols": 7,
                    "symbol_count": 13,
                    "value1": 1
                },
                "uVar6": {
                    "counter": 2,
                    "current_index": 7,
                    "current_symbol_index": 1,
                    "i": 2,
                    "index": 11,
                    "iteration": 1,
                    "iteration_count": 1,
                    "symbol_index": 6
                },
                "unaff_R13": {
                    "array_ptr": 2,
                    "data_array": 3,
                    "input_array": 2,
                    "input_array_ptr": 1,
                    "input_ptr": 1,
                    "pointer_array": 1,
                    "r13": 1,
                    "r13_value": 1,
                    "symbol_array": 11,
                    "symbol_list": 1,
                    "symbol_pointer_array": 1,
                    "symbol_pointers": 1,
                    "symbols": 3,
                    "symbols_array": 1,
                    "symbols_to_process": 1
                },
                "unaff_RBP": {
                    "base_address": 1,
                    "base_pointer": 3,
                    "base_ptr": 1,
                    "context_ptr": 1,
                    "current_frame_base": 1,
                    "frame_base_address": 1,
                    "frame_pointer": 5,
                    "function_call_ptr": 1,
                    "function_context": 1,
                    "function_parameter": 1,
                    "function_pointer": 2,
                    "rbp": 1,
                    "rbp_value": 1,
                    "stack_base": 2,
                    "stack_base_address": 1,
                    "stack_base_pointer": 2,
                    "stack_base_ptr": 1,
                    "stack_frame_base": 1,
                    "stack_pointer": 2,
                    "stack_ptr": 1
                },
                "unaff_RBX": {
                    "array_address": 1,
                    "array_ptr": 1,
                    "base_address": 18,
                    "base_pointer": 1,
                    "data_ptr": 1,
                    "ptr_array": 1,
                    "rbx": 1,
                    "rbx_value": 1,
                    "struct_ptr": 1,
                    "symbol_array": 1,
                    "symbol_base_address": 1,
                    "symbol_pointer": 1,
                    "symbol_table": 2
                }
            },
            "called": [
                "FUN_00115d70"
            ],
            "calling": [
                "FUN_00115dc0"
            ],
            "code": "\nvoid process_symbols_001082df(void)\n\n{\n  uint symbol_count;\n  long symbol_address;\n  char is_symbol_specified;\n  long base_address;\n  undefined8 *filtered_symbols;\n  undefined8 *current_result;\n  long frame_pointer;\n  ulong index;\n  undefined8 *symbol_array;\n  \n  symbol_count = *(uint *)(base_address + 0x78);\n  if (DAT_00127a48 == 7) {\n    filtered_symbols = symbol_array;\n    for (index = 0; index != symbol_count; index = index + 1) {\n      current_result = filtered_symbols;\n      if (((*(long **)symbol_array[index] != (long *)0x0) &&\n          (symbol_address = **(long **)symbol_array[index], symbol_address != 0)) &&\n         (is_symbol_specified = is_specified_symbol(*(undefined8 *)(symbol_address + 8),DAT_00127a28), is_symbol_specified != '\\0')) {\n        current_result = filtered_symbols + 1;\n        *filtered_symbols = symbol_array[index];\n      }\n      filtered_symbols = current_result;\n    }\n    *filtered_symbols = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(frame_pointer + 8) + 0x288))();\n  return;\n}\n\n",
            "current_name": "process_symbols_001082df",
            "entrypoint": "0x001082df",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082df": "process_symbols_001082df",
                "cVar3": "is_symbol_specified",
                "lVar2": "symbol_address",
                "puVar4": "filtered_symbols",
                "puVar5": "current_result",
                "uVar1": "symbol_count",
                "uVar6": "index",
                "unaff_R13": "symbol_array",
                "unaff_RBP": "frame_pointer",
                "unaff_RBX": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108375": {
            "additional_data": {
                "FUN_00108375": {
                    "check_and_drop_share_flag": 2,
                    "check_coff_output_format": 1,
                    "check_flag_and_drop": 2,
                    "check_output_format": 5,
                    "check_output_format_and_drop_flag": 1,
                    "check_output_format_and_drop_share_flag": 3,
                    "check_share_flag": 1,
                    "drop_share_flag": 1,
                    "drop_share_flag_if_not_coff": 9,
                    "drop_share_flag_if_not_coff_format": 1,
                    "validate_and_drop_share_flag": 2,
                    "validate_flag_and_output_format": 1,
                    "validate_output_format": 1,
                    "validate_share_flag_and_drop": 1
                },
                "param_1": {
                    "arg1": 3,
                    "param": 3,
                    "param1": 10,
                    "param_1": 10,
                    "param_pointer": 2,
                    "unused": 1,
                    "unused_param": 2
                },
                "param_2": {
                    "arg2": 3,
                    "args": 3,
                    "arguments": 1,
                    "flags": 1,
                    "input_parameters": 1,
                    "input_params": 1,
                    "param2": 7,
                    "param2_array": 1,
                    "param_2": 1,
                    "param_array": 10,
                    "param_list": 2
                },
                "param_3": {
                    "arg3": 3,
                    "format": 1,
                    "output_format": 3,
                    "output_format_pointer": 1,
                    "param3": 10,
                    "param_3": 10,
                    "param_count": 1,
                    "param_value": 2
                },
                "uVar1": {
                    "arg1": 1,
                    "first_arg": 2,
                    "first_element": 1,
                    "first_param": 2,
                    "first_param_array_element": 1,
                    "first_parameter": 1,
                    "first_value": 1,
                    "flag_value": 1,
                    "format": 1,
                    "input": 2,
                    "param1_value": 1,
                    "param_2_0": 2,
                    "param_2_value": 1,
                    "ptr_to_param2": 1,
                    "value": 2,
                    "value1": 2,
                    "value_1": 1,
                    "var1": 7
                },
                "uVar2": {
                    "error": 1,
                    "error_message": 11,
                    "error_msg": 2,
                    "error_string": 3,
                    "localized_string": 1,
                    "message": 3,
                    "ptr_to_message": 1,
                    "var2": 7,
                    "warning_message": 1
                },
                "unaff_EBX": {
                    "ebx": 8,
                    "ebx_value": 17,
                    "flag": 1,
                    "modified_ebx": 1,
                    "register_value": 1,
                    "return_value": 1
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00115f30"
            ],
            "code": "\nuint check_output_format_and_drop_share_flag_00108375(undefined8 param_1,undefined8 *param_array,undefined8 param_3)\n\n{\n  undefined8 var1;\n  undefined8 error_message;\n  uint ebx_value;\n  \n  if (*(int *)(param_array[1] + 8) != 2) {\n    var1 = *param_array;\n    ebx_value = ebx_value & 0xf7ffffff;\n    error_message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(error_message,var1,param_3);\n  }\n  return ebx_value;\n}\n\n",
            "current_name": "check_output_format_and_drop_share_flag_00108375",
            "entrypoint": "0x00108375",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108375": "check_output_format_and_drop_share_flag_00108375",
                "param_2": "param_array",
                "uVar1": "var1",
                "uVar2": "error_message",
                "unaff_EBX": "ebx_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001083b7": {
            "additional_data": {
                "FUN_001083b7": {
                    "check_bfd_error": 2,
                    "check_bfd_error_and_exit": 1,
                    "check_error_and_exit": 1,
                    "execute_and_exit": 1,
                    "exit_on_bfd_nonfatal_error": 1,
                    "handle_bfd_error": 9,
                    "handle_bfd_read_error": 1,
                    "handle_error": 7,
                    "handle_error_and_exit": 2,
                    "handle_file_error": 1,
                    "handle_invalid_param": 1,
                    "handle_param": 3,
                    "process_error": 1
                },
                "iVar1": {
                    "bfd_error": 15,
                    "bfd_error_code": 2,
                    "bfd_error_value": 1,
                    "error": 1,
                    "error_code": 3
                },
                "param_1": {
                    "error_code": 25,
                    "file_descriptor": 1,
                    "input_param": 1,
                    "input_value": 1,
                    "param": 2,
                    "value": 1
                },
                "unaff_RBP": {
                    "arg_pointer": 1,
                    "bfd_context": 1,
                    "bfd_error_msg": 1,
                    "bfd_handle": 3,
                    "bfd_options": 1,
                    "bfd_param": 1,
                    "bfd_pointer": 1,
                    "bfd_ptr": 2,
                    "current_frame_pointer": 1,
                    "data_ptr": 1,
                    "error_handler": 2,
                    "error_message": 1,
                    "error_ptr": 1,
                    "function_pointer": 2,
                    "message_ptr": 1,
                    "pointer": 2,
                    "pointer_to_error": 1,
                    "ptr_input_data": 1,
                    "ptr_ret_addr": 1,
                    "ptr_retaddr": 1,
                    "unaffected_rbp": 1,
                    "unaffected_registers": 1,
                    "variable_list": 1
                },
                "unaff_retaddr": {
                    "ret_addr": 2,
                    "return_address": 27
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_0011a110",
                "FUN_00104760"
            ],
            "calling": [
                "FUN_00116030"
            ],
            "code": "\nundefined8 handle_bfd_read_error_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *bfd_handle;\n  undefined8 return_address;\n  \n  if (error_code == -1) {\n    bfd_error = bfd_get_error();\n    if (bfd_error == 5) {\n      return return_address;\n    }\n  }\n  bfd_nonfatal(*bfd_handle);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "handle_bfd_read_error_001083b7",
            "entrypoint": "0x001083b7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001083b7": "handle_bfd_read_error_001083b7",
                "iVar1": "bfd_error",
                "param_1": "error_code",
                "unaff_RBP": "bfd_handle",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001083de": {
            "additional_data": {
                "FUN_001083de": {
                    "check_section_length": 1,
                    "handle_section_size_error": 1,
                    "reverse_byte_length_check": 1,
                    "reverse_byte_section": 1,
                    "reverse_bytes": 8,
                    "reverse_bytes_and_check_length": 1,
                    "reverse_bytes_and_divisible_check": 1,
                    "reverse_bytes_if_not_divisible": 1,
                    "reverse_bytes_if_section_length_not_divisible": 1,
                    "reverse_bytes_length_must_be_divisible": 1,
                    "reverse_bytes_section": 10,
                    "reverse_bytes_with_section_length_check": 1,
                    "reverse_section_bytes": 2,
                    "section_length_validation": 1
                },
                "uVar1": {
                    "section": 5,
                    "section_data": 2,
                    "section_length": 5,
                    "section_pointer": 1,
                    "section_ptr": 1,
                    "section_value": 5
                },
                "uVar2": {
                    "error_message": 13,
                    "error_message_template": 1,
                    "error_msg": 2,
                    "error_string": 3
                },
                "unaff_EBP": {
                    "error_code": 3,
                    "error_flag": 2,
                    "error_message": 3,
                    "length": 1,
                    "section_divisor": 1,
                    "section_length": 18,
                    "section_number": 2,
                    "section_size": 1
                },
                "unaff_RBX": {
                    "section_address": 2,
                    "section_data": 1,
                    "section_data_ptr": 1,
                    "section_length": 6,
                    "section_pointer": 18,
                    "section_ptr": 2,
                    "section_size": 1
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid reverse_bytes_if_section_length_not_divisible_001083de(void)\n\n{\n  undefined8 section_length;\n  undefined8 error_message;\n  undefined8 *section_pointer;\n  undefined4 section_length;\n  \n  section_length = *section_pointer;\n  error_message = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  fatal(error_message,section_length,section_length);\n}\n\n",
            "current_name": "reverse_bytes_if_section_length_not_divisible_001083de",
            "entrypoint": "0x001083de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001083de": "reverse_bytes_if_section_length_not_divisible_001083de",
                "uVar1": "section_length",
                "uVar2": "error_message",
                "unaff_EBP": "section_length",
                "unaff_RBX": "section_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108466": {
            "additional_data": {
                "FUN_00108466": {
                    "clean_up_and_free_memory": 1,
                    "cleanup_and_free_memory": 5,
                    "cleanup_function": 1,
                    "clear_memory": 2,
                    "deallocate_memory": 1,
                    "free_and_cleanup_memory": 1,
                    "free_and_clear_memory": 2,
                    "free_and_reset": 1,
                    "free_memory": 7,
                    "free_memory_and_log_message": 1,
                    "free_memory_and_message": 1,
                    "free_memory_and_print_message": 1,
                    "free_memory_and_reset": 1,
                    "free_memory_and_set_flag": 2,
                    "free_memory_and_set_message": 3,
                    "free_memory_block": 1
                },
                "bfd_nonfatal_message": {
                    "display_error_message": 1,
                    "notify_non_fatal_message": 1
                },
                "param_7": {
                    "allocated_memory": 1,
                    "buffer": 1,
                    "memory_block": 10,
                    "memory_pointer": 1,
                    "memory_to_deallocate": 1,
                    "memory_to_free": 16
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_001126c0"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid free_and_cleanup_memory_00108466(void)\n\n{\n  void *memory_to_free;\n  \n  DAT_00127a40 = 1;\n  display_error_message(0);\n  free(memory_to_free);\n  return;\n}\n\n",
            "current_name": "free_and_cleanup_memory_00108466",
            "entrypoint": "0x00108466",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108466": "free_and_cleanup_memory_00108466",
                "bfd_nonfatal_message": "display_error_message",
                "param_7": "memory_to_free"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010847a": {
            "additional_data": {
                "FUNC_00116490": {
                    "call_subfunction": 1,
                    "execute_operation": 1,
                    "execute_sub_function": 9,
                    "execute_subfunction": 3,
                    "execute_task": 1,
                    "initialize_module": 1,
                    "invoke_helper_function": 1,
                    "invoke_subfunction": 1,
                    "perform_action": 1,
                    "perform_additional_operations": 1,
                    "perform_operation": 2,
                    "perform_subroutine": 1,
                    "perform_task": 4,
                    "secondary_function": 1,
                    "sub_function": 1
                },
                "FUN_0010847a": {
                    "execute_decompiled_function": 1,
                    "execute_function": 1,
                    "execute_initial_function": 1,
                    "execute_initialization": 9,
                    "execute_main_function": 10,
                    "execute_module": 1,
                    "execute_processing": 1,
                    "execute_secondary_function": 1,
                    "execute_startup_function": 1,
                    "initialize_and_execute": 3,
                    "initialize_system": 2
                },
                "param_1": {
                    "arg1": 2,
                    "arg_1": 1,
                    "argument_1": 1,
                    "function_param_1": 1,
                    "input1": 1,
                    "input_param": 3,
                    "input_value": 1,
                    "param_1": 1,
                    "unused_param": 1
                },
                "param_2": {
                    "arg2": 2,
                    "arg_2": 1,
                    "argument_2": 1,
                    "data_length": 1,
                    "function_param_2": 1,
                    "input2": 1,
                    "param_2": 1,
                    "second_param": 1,
                    "size": 1,
                    "size_param": 1,
                    "unused_param2": 1
                },
                "param_3": {
                    "arg3": 2,
                    "arg_3": 1,
                    "argument_3": 1,
                    "function_param_3": 1,
                    "input3": 1,
                    "offset": 2,
                    "offset_param": 1,
                    "param_3": 1,
                    "third_param": 1,
                    "unused_param3": 1
                },
                "param_4": {
                    "arg4": 2,
                    "arg_4": 1,
                    "argument_4": 1,
                    "count": 1,
                    "count_param": 1,
                    "counter": 1,
                    "fourth_param": 1,
                    "function_param_4": 1,
                    "input4": 1,
                    "param_4": 1,
                    "unused_param4": 1
                }
            },
            "called": [
                "FUN_00116490"
            ],
            "calling": [
                "FUN_001086af"
            ],
            "code": "\nvoid execute_main_function_0010847a(void)\n\n{\n  parse_gnu_build_attribute_notes_00116490();\n  return;\n}\n\n",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n",
            "current_name": "execute_main_function_0010847a",
            "entrypoint": "0x0010847a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010847a": "execute_main_function_0010847a"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001086af": {
            "additional_data": {
                "DAT_00127a40": {
                    "data_flag": 1,
                    "error_flag": 1
                },
                "FUN_001086af": {
                    "analyze_build_notes": 18,
                    "analyze_gnu_build_attributes": 1,
                    "build_attribute_notes": 1,
                    "parse_build_attribute_notes": 2,
                    "parse_build_notes": 1,
                    "parse_gnu_build_attribute_notes": 2,
                    "process_build_attribute_notes": 1
                },
                "__nmemb": {
                    "count": 2,
                    "nmemb": 3,
                    "notes_count": 1,
                    "num_comparisons": 1,
                    "num_elements": 5,
                    "num_entries": 1,
                    "num_malloc_elem": 1,
                    "num_notes": 1,
                    "number_of_notes": 1,
                    "processed_notes_size": 1,
                    "size": 3,
                    "size2": 1,
                    "temp_var12": 1,
                    "temp_var16": 1,
                    "temp_var20": 1
                },
                "__ptr": {
                    "allocated_memory": 1,
                    "buffer": 3,
                    "description": 1,
                    "dynamic_buffer": 1,
                    "dynamic_memory": 1,
                    "malloc_ptr": 1,
                    "malloced_memory": 1,
                    "new_memory": 1,
                    "ptr": 3,
                    "ptr2": 2,
                    "result_buffer": 1,
                    "string_ptr": 1,
                    "temp_array": 1,
                    "temp_buffer": 2,
                    "temp_pointer2": 1,
                    "temp_ptr1": 1
                },
                "bVar22": {
                    "b_var22": 1,
                    "bool_value": 1,
                    "boolean_value": 1,
                    "byte22": 1,
                    "byte_value": 1,
                    "byte_var": 4,
                    "byte_var1": 1,
                    "flag": 2,
                    "is_big_endian": 2,
                    "is_error": 1,
                    "temp": 1,
                    "temp_bool": 1,
                    "temp_var22": 1,
                    "unused4": 1
                },
                "bVar24": {
                    "cmp_result": 1
                },
                "bVar25": {
                    "result_boolean": 1
                },
                "bVar26": {
                    "bool_var2": 1,
                    "comparison_result": 1
                },
                "bVar27": {
                    "tmp_boolean": 1
                },
                "bVar4": {
                    "b_var4": 1,
                    "bool_flag": 1,
                    "bool_value": 2,
                    "bool_var": 1,
                    "condition": 5,
                    "flag": 3,
                    "is_excess_data": 1,
                    "is_valid": 6
                },
                "bVar7": {
                    "bool_var": 1
                },
                "bfd_nonfatal_message": {
                    "display_bfd_error_message": 1,
                    "non_fatal_message_function": 1,
                    "report_bfd_message": 1
                },
                "bfd_set_error": {
                    "set_bfd_error": 2,
                    "set_error_function": 1
                },
                "cVar17": {
                    "char17": 1,
                    "char_value": 2,
                    "char_var": 3,
                    "char_var1": 1,
                    "char_var17": 1,
                    "character": 2,
                    "character_value": 1,
                    "note_version": 1,
                    "temp_char": 2,
                    "temp_flag": 1,
                    "temp_var25": 1,
                    "version": 1,
                    "version_char": 1
                },
                "cVar24": {
                    "char_var": 1
                },
                "cVar25": {
                    "char_var2": 1,
                    "warning_type": 1
                },
                "compare_gnu_build_notes": {
                    "compare_notes": 3,
                    "compare_notes_function": 1
                },
                "compare_two_memory_regions_0011a1b0": {
                    "compare_memory_regions": 1
                },
                "dcgettext": {
                    "get_bfd_error_message": 1,
                    "get_error_message": 1,
                    "gettext": 1,
                    "localization_function": 1
                },
                "execute_main_function_0010847a": {
                    "execute_main_function": 1
                },
                "free": {
                    "deallocate_memory": 2
                },
                "iVar23": {
                    "counter2": 1,
                    "i_var23": 1,
                    "int_var": 1,
                    "int_var2": 1,
                    "int_var23": 1,
                    "loop_counter": 9,
                    "loop_iterator": 1,
                    "loop_var": 1,
                    "temp_var23": 1,
                    "temp_var4": 2,
                    "var23": 1
                },
                "iVar6": {
                    "cmp_result": 1,
                    "compare_result": 2,
                    "comparison_result": 2,
                    "counter": 3,
                    "function_return_value": 1,
                    "i_var6": 1,
                    "index": 1,
                    "int_var": 1,
                    "int_var1": 1,
                    "memcmp_result": 1,
                    "temp_var": 2,
                    "temp_var3": 1,
                    "temp_var6": 2,
                    "var3": 1,
                    "var6": 1
                },
                "in_RCX": {
                    "arg_rcx": 1,
                    "input": 3,
                    "input1": 2,
                    "input_rcx": 2,
                    "input_value": 1,
                    "input_variable1": 1,
                    "param1": 1,
                    "param_1": 2,
                    "param_7": 1,
                    "rcx_in": 1,
                    "section_size": 1,
                    "start_addr_copy": 1,
                    "total_notes": 1
                },
                "in_stack_00000030": {
                    "buffer": 1,
                    "buffer2": 1,
                    "in_stack_00000030": 1,
                    "output": 3,
                    "output_buffer": 4,
                    "stack30": 1,
                    "stack_ptr": 1,
                    "stack_var1": 2,
                    "stack_variable_1": 1,
                    "string_buf": 1,
                    "string_pointer": 1,
                    "temp_buffer": 1,
                    "temp_stack_var": 1,
                    "temp_stack_var1": 1,
                    "tmp_buffer": 1
                },
                "in_stack_00000038": {
                    "buffer_size": 1,
                    "extra_data_flag": 1,
                    "flag1": 1,
                    "in_stack_00000038": 1,
                    "input": 1,
                    "input5": 1,
                    "input_flag": 1,
                    "is_warning_reported": 1,
                    "note_type": 1,
                    "param13": 1,
                    "stack38": 1,
                    "stack_value": 1,
                    "stack_var2": 2,
                    "stack_variable_2": 1,
                    "temp_flags": 1,
                    "temp_stack_var2": 2,
                    "tmp_variable": 1,
                    "version_flag": 2
                },
                "lVar7": {
                    "error_code": 2,
                    "error_message": 2,
                    "error_msg": 3,
                    "l_var7": 1,
                    "length": 4,
                    "long_var": 1,
                    "long_var1": 1,
                    "loop_var": 1,
                    "message": 1,
                    "message_ptr": 1,
                    "result": 1,
                    "temp_long_var": 1,
                    "temp_var4": 1,
                    "temp_var7": 2,
                    "var7": 1
                },
                "memcmp": {
                    "compare_memory_regions": 2
                },
                "non_fatal": {
                    "handle_warning": 1,
                    "non_fatal_error": 1,
                    "report_warning": 1
                },
                "param_10": {
                    "arg_param_10": 1,
                    "input3": 1,
                    "input4": 1,
                    "input_param10": 2,
                    "max_size": 1,
                    "note_size": 2,
                    "notes_size": 1,
                    "num_build_attributes": 1,
                    "num_notes": 1,
                    "output_buffer_size": 1,
                    "output_length": 1,
                    "output_size": 2,
                    "param10": 2,
                    "param4": 2,
                    "param5": 1,
                    "param6": 1,
                    "param_10": 3,
                    "param_11": 1,
                    "processed_notes_count": 1,
                    "result": 2,
                    "result_size": 1
                },
                "param_11": {
                    "arg_param_11": 1,
                    "array": 2,
                    "array3": 1,
                    "build_attribute_notes": 1,
                    "build_attributes": 1,
                    "build_notes": 1,
                    "build_notes_array": 1,
                    "input4": 1,
                    "input_array": 3,
                    "input_param11": 2,
                    "note_array": 1,
                    "notes": 1,
                    "notes_array": 3,
                    "output_array": 1,
                    "param11": 2,
                    "param6": 1,
                    "param_11": 1,
                    "param_12": 1,
                    "processed_notes_array": 1,
                    "sorted_notes_array": 1,
                    "temp12": 1,
                    "temp_pointer3": 1
                },
                "param_13": {
                    "arg_param_13": 1,
                    "build_flags": 1,
                    "extra_notes_flag": 1,
                    "flag2": 2,
                    "input6": 1,
                    "input_param13": 2,
                    "is_build_attribute": 1,
                    "major_version": 1,
                    "note_flag": 1,
                    "num_notes": 1,
                    "param13": 2,
                    "param5": 2,
                    "param7": 2,
                    "param_13": 5,
                    "stack_variable_3": 1,
                    "version": 1,
                    "version_found": 1,
                    "version_note_flag": 1
                },
                "param_14": {
                    "arg_param_14": 1,
                    "array4": 1,
                    "build_attribute_version": 1,
                    "callback_function": 1,
                    "error_message": 1,
                    "error_msgs": 1,
                    "file_descriptor_2": 1,
                    "input_param14": 2,
                    "message": 1,
                    "minor_version": 1,
                    "note_deps": 1,
                    "note_version": 1,
                    "output_stream": 1,
                    "param14": 2,
                    "param6": 2,
                    "param8": 2,
                    "param_14": 3,
                    "pointer_array": 1,
                    "pointer_to_param": 1,
                    "result_array": 1,
                    "version_note": 1,
                    "version_note_array": 1,
                    "version_note_table": 1
                },
                "param_7": {
                    "arg_param_7": 1,
                    "in_rcx": 5,
                    "input": 1,
                    "input1": 2,
                    "input2": 1,
                    "input_length": 1,
                    "input_param7": 2,
                    "name_address": 1,
                    "note_base_address": 1,
                    "note_size": 2,
                    "param1": 2,
                    "param2": 1,
                    "param3": 1,
                    "param_7": 1,
                    "param_8": 1,
                    "rcx": 2,
                    "remaining_size": 1,
                    "section_header": 1,
                    "size": 1,
                    "start_addr": 1
                },
                "param_8": {
                    "arg_param_8": 1,
                    "bfd_flags": 1,
                    "input2": 1,
                    "input3": 1,
                    "input_param8": 2,
                    "is_version": 1,
                    "note_version": 1,
                    "note_version2": 1,
                    "param2": 2,
                    "param3": 1,
                    "param4": 1,
                    "param8": 3,
                    "param_8": 2,
                    "param_9": 1,
                    "remaining_desc_size": 1,
                    "version_flag": 1
                },
                "param_9": {
                    "arg_param_9": 1,
                    "desc_buf_size": 1,
                    "input2": 1,
                    "input3": 1,
                    "input4": 1,
                    "input_param9": 2,
                    "min_desc_size": 1,
                    "min_size": 1,
                    "minimum_value_param": 1,
                    "note_version3": 1,
                    "param3": 2,
                    "param4": 1,
                    "param5": 1,
                    "param9": 2,
                    "param_10": 1,
                    "param_9": 3,
                    "prev_note_address": 1,
                    "return_value": 1,
                    "version": 3,
                    "version_3": 1,
                    "version_address": 1,
                    "version_number": 1
                },
                "parse_gnu_build_attribute_notes_00116490": {
                    "parse_attribute_notes": 1,
                    "parse_notes": 1
                },
                "pbVar28": {
                    "pointer_to_output_buffer": 1
                },
                "print_bfd_error_message_001126c0": {
                    "print_error_message": 1
                },
                "ptr": {
                    "array": 1
                },
                "puVar10": {
                    "var58": 1
                },
                "puVar11": {
                    "var59": 1
                },
                "puVar12": {
                    "var60": 1
                },
                "puVar13": {
                    "var61": 1
                },
                "puVar14": {
                    "var62": 1
                },
                "puVar15": {
                    "array": 1,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "array_ptr1": 1,
                    "curr_note": 1,
                    "current_array_element": 1,
                    "current_note": 3,
                    "notes_array": 1,
                    "pointer_15": 1,
                    "ptr": 1,
                    "ptr15": 2,
                    "ptr2": 1,
                    "ptr3": 2,
                    "ptr_var15": 1,
                    "sorted_note_ptr": 1,
                    "temp_ptr2": 1,
                    "temp_ptr22": 1,
                    "var63": 1
                },
                "puVar16": {
                    "description_buffer": 1,
                    "description_end": 1,
                    "dst_pointer": 1,
                    "pointer_16": 1,
                    "ptr1": 1,
                    "ptr16": 2,
                    "ptr2": 2,
                    "ptr4": 1,
                    "ptr_var16": 1,
                    "result": 1,
                    "temp_pointer3": 1,
                    "temp_ptr15": 1,
                    "temp_ptr2": 1,
                    "temp_ptr3": 1,
                    "var64": 1
                },
                "puVar17": {
                    "var65": 1
                },
                "puVar18": {
                    "desc_ptr": 1,
                    "desc_size_ptr": 1,
                    "description": 1,
                    "dst_pointer_2": 1,
                    "note_description_ptr": 1,
                    "output_buffer_ptr": 1,
                    "pointer2": 1,
                    "pointer_18": 1,
                    "ptr18": 2,
                    "ptr2": 1,
                    "ptr3": 2,
                    "ptr5": 1,
                    "ptr_var18": 1,
                    "temp_pointer1": 1,
                    "temp_pointer4": 2,
                    "temp_ptr3": 1,
                    "temp_ptr4": 1,
                    "temp_ptr7": 1,
                    "var66": 1
                },
                "puVar19": {
                    "description_ptr": 1,
                    "dest_ptr": 1,
                    "name": 1,
                    "name_ptr": 1,
                    "output_buffer": 1,
                    "pointer3": 1,
                    "pointer_19": 1,
                    "ptr19": 2,
                    "ptr3": 1,
                    "ptr4": 2,
                    "ptr6": 1,
                    "ptr_var19": 1,
                    "temp_array": 1,
                    "temp_buffer_pointer": 1,
                    "temp_pointer2": 1,
                    "temp_pointer5": 1,
                    "temp_ptr23": 1,
                    "temp_ptr4": 1,
                    "temp_ptr5": 1,
                    "var67": 1
                },
                "puVar20": {
                    "ptr20": 1,
                    "temp_pointer1": 1,
                    "var68": 1
                },
                "puVar21": {
                    "array_ptr": 1,
                    "compare_note": 1,
                    "current_note": 1,
                    "current_note_ptr": 1,
                    "pointer_21": 1,
                    "ptr21": 2,
                    "ptr3": 1,
                    "ptr5": 1,
                    "ptr7": 1,
                    "ptr_var21": 1,
                    "temp_pointer": 2,
                    "temp_pointer2": 1,
                    "temp_pointer6": 1,
                    "temp_ptr24": 1,
                    "temp_ptr5": 1,
                    "temp_ptr7": 1,
                    "var69": 1
                },
                "puVar22": {
                    "var70": 1
                },
                "puVar23": {
                    "var71": 1
                },
                "puVar24": {
                    "var72": 1
                },
                "puVar25": {
                    "var73": 1
                },
                "puVar26": {
                    "var74": 1
                },
                "puVar27": {
                    "var75": 1
                },
                "puVar28": {
                    "var76": 1
                },
                "puVar29": {
                    "var77": 1
                },
                "puVar30": {
                    "var78": 1
                },
                "puVar31": {
                    "var79": 1
                },
                "puVar32": {
                    "var80": 1
                },
                "puVar33": {
                    "var81": 1
                },
                "puVar34": {
                    "var82": 1
                },
                "puVar35": {
                    "var83": 1
                },
                "puVar36": {
                    "var84": 1
                },
                "puVar37": {
                    "var85": 1
                },
                "puVar38": {
                    "var86": 1
                },
                "puVar39": {
                    "var87": 1
                },
                "puVar40": {
                    "var88": 1
                },
                "puVar5": {
                    "array_ptr": 2,
                    "pointer1": 1,
                    "ptr": 2,
                    "ptr1": 4,
                    "ptr5": 1,
                    "ptr_var5": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 3,
                    "temp_ptr1": 1,
                    "temp_variable": 1,
                    "temporary_pointer": 1,
                    "tmp_pointer": 1,
                    "var53": 1
                },
                "puVar6": {
                    "var54": 1
                },
                "puVar7": {
                    "var55": 1
                },
                "puVar8": {
                    "var56": 1
                },
                "puVar9": {
                    "var57": 1
                },
                "qsort": {
                    "quick_sort": 2
                },
                "report_and_process_data_00119ed0": {
                    "process_data": 1,
                    "report_and_process_data": 1
                },
                "sort_gnu_build_notes": {
                    "sort_notes": 3,
                    "sort_notes_function": 1
                },
                "uVar1": {
                    "comparison_result": 1,
                    "min_length": 1,
                    "min_size": 2,
                    "min_value": 1,
                    "note_type": 1,
                    "result": 11,
                    "return_value": 3,
                    "temp1": 1,
                    "u_var1": 1
                },
                "uVar10": {
                    "attr_size": 1,
                    "current_size": 1,
                    "desc_size": 1,
                    "description_size": 2,
                    "high_value": 1,
                    "max_retaddr": 1,
                    "max_value": 1,
                    "maximum_value": 1,
                    "min_value": 1,
                    "note_size": 1,
                    "note_type": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp9": 1,
                    "temp_value2": 1,
                    "temp_var10": 2,
                    "temp_var2": 1,
                    "temp_var7": 1,
                    "u_var10": 1,
                    "value": 1,
                    "var10": 3
                },
                "uVar11": {
                    "curr_addr": 1,
                    "desc_addr": 1,
                    "desc_size": 2,
                    "max_value": 1,
                    "param7": 2,
                    "remaining_size": 1,
                    "start_address": 1,
                    "temp": 1,
                    "temp10": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp7": 1,
                    "temp_value3": 1,
                    "temp_var11": 3,
                    "temp_var3": 1,
                    "temp_var8": 1,
                    "total_size": 2,
                    "u_var11": 1,
                    "var11": 3
                },
                "uVar12": {
                    "desc_addr": 1,
                    "end_addr": 1,
                    "end_address": 1,
                    "name_size": 1,
                    "note_addr": 1,
                    "note_offset": 1,
                    "param7_copy": 2,
                    "ptr": 1,
                    "start_address": 1,
                    "temp1": 1,
                    "temp11": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp8": 1,
                    "temp_value4": 1,
                    "temp_var12": 3,
                    "temp_var4": 1,
                    "temp_var9": 1,
                    "u_var12": 1,
                    "var12": 4
                },
                "uVar13": {
                    "found_note_type": 1,
                    "max_entry_size": 1,
                    "min_note_offset": 1,
                    "min_value": 1,
                    "param9": 2,
                    "temp12": 1,
                    "temp2": 1,
                    "temp5": 1,
                    "temp7": 1,
                    "temp9": 1,
                    "temp_2": 1,
                    "temp_unsigned_var": 1,
                    "temp_value5": 1,
                    "temp_var1": 1,
                    "temp_var10": 1,
                    "temp_var13": 3,
                    "temp_var5": 1,
                    "u_var13": 1,
                    "var13": 4
                },
                "uVar14": {
                    "attr_name": 1,
                    "note_header": 1,
                    "note_name": 1,
                    "note_type": 1,
                    "param9_copy": 1,
                    "start_of_note": 1,
                    "temp10": 1,
                    "temp13": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "temp8": 1,
                    "temp_3": 1,
                    "temp_value6": 1,
                    "temp_var11": 1,
                    "temp_var14": 3,
                    "temp_var4": 1,
                    "temp_var6": 1,
                    "u_var14": 1,
                    "var14": 4
                },
                "uVar15": {
                    "note_type": 1,
                    "temp14": 1,
                    "temp_ptr2": 1,
                    "temp_value7": 1,
                    "var15": 1
                },
                "uVar16": {
                    "temp15": 1,
                    "temp_ptr3": 1,
                    "temp_value8": 1,
                    "var16": 1
                },
                "uVar17": {
                    "temp16": 1,
                    "temp_ptr4": 1,
                    "temp_value9": 1,
                    "var17": 1
                },
                "uVar18": {
                    "temp17": 1,
                    "temp_ptr5": 1,
                    "temp_value10": 1,
                    "var18": 1
                },
                "uVar19": {
                    "temp18": 1,
                    "temp_ptr6": 1,
                    "var19": 1
                },
                "uVar2": {
                    "main_func_note": 1,
                    "param1": 1,
                    "temp1": 3,
                    "temp2": 1,
                    "temp_var1": 2,
                    "temp_var2": 3,
                    "u_var2": 1,
                    "unused1": 1,
                    "unused_var2": 1,
                    "unused_variable_2": 1,
                    "var1": 1,
                    "var2": 3,
                    "version_note": 1,
                    "warning_msg": 1,
                    "warning_string_1": 1
                },
                "uVar20": {
                    "found_note_value": 1,
                    "max_note_size": 1,
                    "param10_copy": 1,
                    "temp11": 1,
                    "temp15": 1,
                    "temp19": 1,
                    "temp8": 2,
                    "temp_4": 1,
                    "temp_var": 1,
                    "temp_var11": 1,
                    "temp_var12": 1,
                    "temp_var19": 1,
                    "temp_var2": 1,
                    "temp_var20": 2,
                    "u_var20": 1,
                    "unaff_r13_cop2": 1,
                    "var19": 1,
                    "var20": 3,
                    "version": 1
                },
                "uVar21": {
                    "num_attributes": 1,
                    "temp_var13": 1,
                    "temp_var2": 1,
                    "var21": 2
                },
                "uVar22": {
                    "byte_val": 1,
                    "loop_counter": 1,
                    "temp_5": 1,
                    "temp_var": 1,
                    "var22": 2
                },
                "uVar23": {
                    "loop_counter": 2,
                    "var23": 1,
                    "var_counter": 1
                },
                "uVar24": {
                    "temp_var3": 1,
                    "var24": 1
                },
                "uVar25": {
                    "var25": 1
                },
                "uVar26": {
                    "var26": 1
                },
                "uVar27": {
                    "var27": 1
                },
                "uVar28": {
                    "var28": 1
                },
                "uVar29": {
                    "var29": 2
                },
                "uVar3": {
                    "param2": 1,
                    "temp2": 3,
                    "temp3": 1,
                    "temp_var2": 2,
                    "temp_var3": 3,
                    "u_var3": 1,
                    "unused2": 1,
                    "unused_var3": 1,
                    "unused_variable_3": 1,
                    "v3_note": 1,
                    "var2": 1,
                    "var3": 3,
                    "warning_message": 1,
                    "warning_msg2": 1,
                    "warning_string_2": 1
                },
                "uVar30": {
                    "var30": 2
                },
                "uVar31": {
                    "var31": 2
                },
                "uVar32": {
                    "var32": 2
                },
                "uVar33": {
                    "var33": 2
                },
                "uVar34": {
                    "var34": 2
                },
                "uVar35": {
                    "var35": 2
                },
                "uVar36": {
                    "var36": 2
                },
                "uVar37": {
                    "var37": 2
                },
                "uVar38": {
                    "var38": 2
                },
                "uVar39": {
                    "var39": 2
                },
                "uVar4": {
                    "temp3": 1,
                    "var4": 1
                },
                "uVar40": {
                    "var40": 2
                },
                "uVar41": {
                    "var41": 2
                },
                "uVar42": {
                    "var42": 2
                },
                "uVar43": {
                    "var43": 2
                },
                "uVar44": {
                    "var44": 2
                },
                "uVar45": {
                    "var45": 2
                },
                "uVar46": {
                    "var46": 2
                },
                "uVar47": {
                    "var47": 2
                },
                "uVar48": {
                    "var48": 2
                },
                "uVar49": {
                    "var49": 1
                },
                "uVar5": {
                    "temp4": 1,
                    "var5": 1
                },
                "uVar50": {
                    "var50": 1
                },
                "uVar51": {
                    "var51": 1
                },
                "uVar52": {
                    "var52": 1
                },
                "uVar53": {
                    "var53": 1
                },
                "uVar54": {
                    "var54": 1
                },
                "uVar55": {
                    "var55": 1
                },
                "uVar56": {
                    "var56": 1
                },
                "uVar57": {
                    "var57": 1
                },
                "uVar58": {
                    "var58": 1
                },
                "uVar59": {
                    "var59": 1
                },
                "uVar6": {
                    "temp5": 1
                },
                "uVar60": {
                    "var60": 1
                },
                "uVar7": {
                    "temp6": 1
                },
                "uVar8": {
                    "array1": 1,
                    "error_message": 1,
                    "error_msg3": 1,
                    "error_string": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp7": 1,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "temp_var8": 3,
                    "u_var8": 1,
                    "unused3": 1,
                    "var4": 1,
                    "var8": 3,
                    "warning_format": 1,
                    "warning_message": 1,
                    "warning_msg": 1,
                    "warning_string_3": 1
                },
                "uVar9": {
                    "array2": 1,
                    "attr_size": 1,
                    "desc_size": 1,
                    "low_value": 1,
                    "min_retaddr": 1,
                    "min_value": 1,
                    "minimum": 1,
                    "minimum_value": 2,
                    "name_length": 1,
                    "note_addr": 1,
                    "note_type": 1,
                    "size_of_note": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp8": 1,
                    "temp_value1": 1,
                    "temp_var1": 1,
                    "temp_var6": 1,
                    "temp_var9": 2,
                    "u_var9": 1,
                    "var9": 3
                },
                "unaff_R12": {
                    "array": 3,
                    "array1": 2,
                    "array2": 1,
                    "array_ptr": 1,
                    "build_attributes": 1,
                    "current_build_note": 1,
                    "note_array": 1,
                    "notes": 2,
                    "notes_array": 3,
                    "param_4": 1,
                    "r12": 1,
                    "source_array": 1,
                    "temp13": 1,
                    "temp_array_ptr": 1,
                    "temp_var17": 1,
                    "temp_var9": 1,
                    "unaff_r12": 1,
                    "unaff_r12_cop": 1,
                    "unaff_register_r12": 1,
                    "unaffected_r12": 1,
                    "var17": 1,
                    "var_r12": 1
                },
                "unaff_R13": {
                    "array2": 1,
                    "current_index": 1,
                    "current_note_type": 1,
                    "found_note_name": 1,
                    "max_note_type": 1,
                    "note_type": 1,
                    "num_notes": 1,
                    "num_sections": 1,
                    "param10": 1,
                    "param_5": 2,
                    "prev_entry_size": 1,
                    "r13": 1,
                    "temp10": 1,
                    "temp14": 1,
                    "temp7": 1,
                    "temp_var10": 1,
                    "temp_var18": 1,
                    "temp_var3": 1,
                    "unaff_r13": 1,
                    "unaff_r13_cop": 1,
                    "unaff_register_r13": 1,
                    "unaffected_r13": 1,
                    "unread_notes": 1,
                    "var18": 1,
                    "var49": 1,
                    "var_r13": 1,
                    "version": 2
                },
                "unaff_R14": {
                    "array2": 1,
                    "bfd": 1,
                    "bfd_handle": 1,
                    "file_descriptor": 1,
                    "function_pointers": 1,
                    "function_pointers_array": 1,
                    "function_ptr": 1,
                    "function_signature": 1,
                    "message_descriptor": 1,
                    "param_6": 1,
                    "r14": 1,
                    "temp16": 1,
                    "temp_ptr6": 1,
                    "temp_var21": 1,
                    "unaff_r14": 1,
                    "unaff_register_r14": 1,
                    "unaffected_r14": 1,
                    "var20": 1,
                    "var_r14": 1
                },
                "unaff_R15": {
                    "temp_ptr2": 1
                },
                "unaff_RBP": {
                    "current_length": 1,
                    "current_note": 1,
                    "description_size": 2,
                    "found_note_size": 1,
                    "max_note_size": 1,
                    "min_note_type": 1,
                    "min_value": 1,
                    "name_length": 1,
                    "note_count": 1,
                    "note_type": 1,
                    "param_3": 2,
                    "prev_note_size": 1,
                    "rbp": 1,
                    "remaining_note_size": 1,
                    "temp12": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp9": 1,
                    "temp_var16": 1,
                    "temp_var8": 1,
                    "unaff_rbp": 1,
                    "unaff_rbp_cop": 1,
                    "unaff_register_bp": 1,
                    "unaffected_rbp": 1,
                    "var16": 1,
                    "var50": 1,
                    "var_rbp": 1
                },
                "unaff_RBX": {
                    "array_size": 1,
                    "count": 1,
                    "length": 1,
                    "note_buffer_size": 1,
                    "note_count": 2,
                    "notes_remaining": 1,
                    "num_attributes": 1,
                    "num_notes": 2,
                    "offset": 1,
                    "param_2": 1,
                    "rbx": 1,
                    "remaining_data_size": 1,
                    "remaining_elements": 1,
                    "remaining_notes": 1,
                    "size1": 1,
                    "temp11": 1,
                    "temp5": 1,
                    "temp_var15": 1,
                    "temp_var7": 1,
                    "unaff_rbx": 1,
                    "unaff_rbx_cop": 1,
                    "unaff_register_bx": 1,
                    "unaffected_rbx": 1,
                    "var15": 1,
                    "var51": 1,
                    "var_rbx": 1
                },
                "unaff_RCX": {
                    "temp_reg3": 1
                },
                "unaff_RDI": {
                    "temp_reg1": 1
                },
                "unaff_RDX": {
                    "temp_reg4": 1
                },
                "unaff_RSI": {
                    "temp_reg2": 1
                },
                "unaff_retaddr": {
                    "note_type": 1,
                    "param_6": 1,
                    "ret_addr": 1,
                    "ret_address": 1,
                    "retaddr": 2,
                    "return_addr": 1,
                    "return_address": 6,
                    "return_value": 1,
                    "temp13": 1,
                    "temp17": 1,
                    "temp9": 1,
                    "temp_var13": 1,
                    "temp_var24": 1,
                    "unaff_retaddr": 1,
                    "unaff_return_addr": 2,
                    "unaffected_return_address": 1,
                    "var52": 1,
                    "var_retaddr": 1,
                    "version": 2,
                    "version3": 1
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "FUN_001043a0",
                "FUN_00104140",
                "FUN_001126c0",
                "FUN_00116490",
                "FUN_00104240",
                "FUN_0010847a",
                "FUN_0011a1b0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00116490"
            ],
            "code": "\nulong analyze_build_notes_001086af(void)\n\n{\n  ulong result;\n  undefined8 var2;\n  undefined8 temp2;\n  bool is_valid;\n  ulong *ptr1;\n  int counter;\n  long length;\n  undefined8 temp_var8;\n  ulong var9;\n  ulong var10;\n  ulong temp_var11;\n  undefined *ptr;\n  ulong input;\n  ulong var12;\n  ulong var13;\n  ulong var14;\n  ulong num_notes;\n  ulong param_3;\n  ulong *current_note;\n  undefined *ptr16;\n  char char_var;\n  undefined *ptr3;\n  undefined *ptr19;\n  ulong *notes_array;\n  ulong version;\n  ulong var20;\n  size_t num_elements;\n  undefined8 *unaff_register_r14;\n  ulong *ptr21;\n  byte byte_var;\n  int loop_counter;\n  ulong return_address;\n  ulong in_rcx;\n  uint param8;\n  ulong param_9;\n  ulong param_10;\n  ulong *input_array;\n  undefined *output_buffer;\n  uint temp_stack_var2;\n  uint param_13;\n  undefined8 *param_14;\n  \n  byte_var = 0;\n  in_rcx = input;\n  var9 = (**(code **)(unaff_register_r14[1] + 0x40))();\n  var10 = (**(code **)(unaff_register_r14[1] + 0x40))(notes_array[4] + 4);\nLAB_0011662a:\n  var13 = param_3;\n  var20 = version;\n  if (var10 < var9) {\n    var9 = var10;\n  }\n  do {\n    temp_var11 = in_rcx;\n    var12 = in_rcx;\n    current_note = notes_array;\n    if (notes_array[2] == 0x100) {\n      if (var9 == 0) {\n        var9 = return_address;\n      }\n      var14 = *notes_array;\n      notes_array[7] = var9;\n      param_3 = var13;\n      version = var10;\n      return_address = var9;\n      if (var10 == 0) goto LAB_001164af;\n    }\n    else {\n      if (var9 == 0) {\n        var9 = param_9;\n      }\n      var14 = *notes_array;\n      notes_array[7] = var9;\n      param_3 = var10;\n      version = var20;\n      param_9 = var9;\n      if (var10 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    current_note[8] = var10;\n    if (*(char *)((current_note[3] - 1) + var14) != '\\0') {\n      length = get_bfd_error_message(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    notes_array = current_note + 9;\n    if (num_notes < 0xc) {\n      if (num_notes != 0) {\n        length = get_bfd_error_message(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((temp_stack_var2 | param_13 | param8) != 0) {\n        if (((param_13 | param8) == 0) || (temp_stack_var2 == 0)) {\n          if (param_13 == 0) {\n            if (param8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param8 == 0) goto LAB_001166f8;\n        }\n        length = get_bfd_error_message(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      var2 = *unaff_register_r14;\n      temp2 = *param_14;\n      temp_var8 = get_bfd_error_message(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      handle_warning(temp_var8,var2,temp2);\nLAB_0011671b:\n      num_elements = ((long)notes_array - (long)input_array >> 3) * -0x71c71c71c71c71c7;\n      quick_sort(input_array,num_elements,0x48,compare_notes);\n      current_note = input_array;\n      goto LAB_001167f9;\n    }\n    var10 = (**(code **)(unaff_register_r14[1] + 0x40))(var12);\n    *notes_array = var10;\n    var10 = (**(code **)(unaff_register_r14[1] + 0x40))(var12 + 4);\n    current_note[10] = var10;\n    var9 = (**(code **)(unaff_register_r14[1] + 0x40))(var12 + 8);\n    var14 = *notes_array;\n    current_note[0xb] = var9;\n    var10 = current_note[10];\n    var13 = var14 + 3 & 0xfffffffffffffffc;\n    current_note[0xf] = var13;\n    if (var10 != (var10 + 3 & 0xfffffffffffffffc)) {\n      length = get_bfd_error_message(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var9 - 0x100) {\n      length = get_bfd_error_message(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    temp_var11 = var13 + var10 + 0xc;\n    if (num_notes < temp_var11) {\n      length = get_bfd_error_message(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var14 < 2) {\n      length = get_bfd_error_message(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    current_note[0xc] = var12 + 0xc;\n    result = var12 + 0xc + var13;\n    current_note[0xd] = result;\n    num_notes = num_notes + (-0xc - (var13 + var10));\n    temp_var11 = var12 + temp_var11;\n    if (var14 != 2) {\n      if (*(char *)(var12 + 0xc) == '$') {\n        if ((*(char *)(var12 + 0xd) == '\\x01') && (*(char *)(var12 + 0xe) == '1')) {\n          var10 = parse_attribute_notes();\n          return var10;\n        }\n      }\n      else if ((((4 < var14) && (*(char *)(var12 + 0xc) == 'G')) &&\n               (*(char *)(var12 + 0xd) == 'A')) &&\n              ((*(char *)(var12 + 0xe) == '$' && (*(char *)(var12 + 0xf) == '\\x01')))) {\n        if (*(char *)(var12 + 0x10) == '2') {\n          var10 = parse_attribute_notes();\n          return var10;\n        }\n        if (*(char *)(var12 + 0x10) == '3') {\n          var10 = parse_attribute_notes();\n          return var10;\n        }\n        length = get_bfd_error_message(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var13 = param_3;\n    var20 = version;\n    if (var10 == 0) {\n      if (var9 == 0x100) {\n        current_note[0x10] = return_address;\nLAB_001164af:\n        var12 = temp_var11;\n        var10 = var20;\n        current_note = notes_array;\n        version = var20;\n      }\n      else {\n        current_note[0x10] = param_9;\nLAB_0011669e:\n        param_3 = var13;\n        var12 = temp_var11;\n        var10 = var13;\n        current_note = notes_array;\n        version = var20;\n      }\n      goto LAB_001164bb;\n    }\n    if (var10 == 0x10) break;\n    if (0x10 < var10) {\nLAB_00116679:\n      length = get_bfd_error_message(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (length != 0) {\n        set_bfd_error(0x11);\n        non_fatal_message_function(0,unaff_register_r14,param_14,length);\n        DAT_00127a40 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (var10 != 4) {\n      if (var10 == 8) {\n        var10 = analyze_build_notes_001086af();\n        return var10;\n      }\n      goto LAB_00116679;\n    }\n    in_rcx = temp_var11;\n    var9 = (**(code **)(unaff_register_r14[1] + 0x40))();\n    var10 = 0xffffffffffffffff;\n  } while( true );\n  in_rcx = temp_var11;\n  var9 = (**(code **)(unaff_register_r14[1] + 0x28))(result);\n  var10 = (**(code **)(unaff_register_r14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (notes_array <= current_note) {\n    quick_sort(input_array,num_elements,0x48,sort_notes);\n    ptr = (undefined *)allocate_memory(param_10 * 2);\n    in_rcx = 0;\n    param_9 = 0;\n    ptr19 = ptr;\n    for (current_note = input_array; current_note < notes_array; current_note = current_note + 9) {\n      if (current_note[2] != 0) {\n        ptr3 = ptr19 + 4;\n        ptr16 = ptr19 + 0xc;\n        if ((current_note[7] == param_9) && (current_note[8] == in_rcx)) {\n          (**(code **)(unaff_register_r14[1] + 0x50))(*current_note,ptr19);\n          (**(code **)(unaff_register_r14[1] + 0x50))(0,ptr3);\n          (**(code **)(unaff_register_r14[1] + 0x50))(current_note[2],ptr19 + 8);\n          var9 = current_note[6];\n          var10 = *current_note;\n          ptr19 = (undefined *)current_note[3];\n          ptr3 = ptr16;\n          for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n            *ptr3 = *ptr19;\n            ptr19 = ptr19 + (ulong)byte_var * -2 + 1;\n            ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n          }\n          if (var10 < var9) {\n            for (length = var9 - var10; length != 0; length = length + -1) {\n              *ptr3 = 0;\n              ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          ptr19 = ptr16 + var9;\n        }\n        else {\n          (**(code **)(unaff_register_r14[1] + 0x50))();\n          if (*(int *)(unaff_register_r14[1] + 8) == 5) {\n            char_var = (*(char *)(unaff_register_r14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_var = '\\b';\n          }\n          (**(code **)(unaff_register_r14[1] + 0x50))(char_var,ptr3);\n          (**(code **)(unaff_register_r14[1] + 0x50))(current_note[2],ptr19 + 8);\n          var10 = *current_note;\n          ptr19 = (undefined *)current_note[3];\n          ptr3 = ptr16;\n          for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n            *ptr3 = *ptr19;\n            ptr19 = ptr19 + (ulong)byte_var * -2 + 1;\n            ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n          }\n          var9 = current_note[6];\n          if (var10 < var9) {\n            for (length = var9 - var10; length != 0; length = length + -1) {\n              *ptr3 = 0;\n              ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          length = unaff_register_r14[1];\n          ptr16 = ptr16 + var9;\n          ptr19 = ptr16 + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(unaff_register_r14[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(current_note[7],ptr16);\n            (**(code **)(unaff_register_r14[1] + 0x38))(current_note[8],ptr19);\n            ptr19 = ptr16 + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(current_note[7],ptr16);\n            (**(code **)(unaff_register_r14[1] + 0x50))(current_note[8],ptr16 + 4);\n          }\n          param_9 = current_note[7];\n          in_rcx = current_note[8];\n        }\n      }\n    }\n    var9 = (long)ptr19 - (long)ptr;\n    var10 = var9;\n    ptr19 = ptr;\n    if (var9 < param_10) {\n      for (; param_10 = var9, var10 != 0; var10 = var10 - 1) {\n        *output_buffer = *ptr19;\n        ptr19 = ptr19 + (ulong)byte_var * -2 + 1;\n        output_buffer = output_buffer + (ulong)byte_var * -2 + 1;\n      }\n    }\n    deallocate_memory(ptr);\nLAB_001166f8:\n    deallocate_memory(input_array);\n    return param_10;\n  }\n  if (current_note[2] != 0) {\n    var10 = current_note[7];\n    var9 = current_note[8];\n    var13 = current_note[2];\n    ptr21 = current_note;\n    loop_counter = 0;\n    if (var10 == var9) {\n      current_note[2] = 0;\n    }\n    else {\n      do {\n        do {\n          ptr1 = ptr21;\n          ptr21 = ptr1 + -9;\n          if (ptr21 < input_array) goto LAB_001167f5;\n          var20 = ptr1[-7];\n        } while (var20 == 0);\n        in_rcx = var13;\n        if ((*ptr21 != *current_note) ||\n           (counter = compare_memory_regions((void *)ptr1[-6],(void *)current_note[3],*current_note), counter != 0)) break;\n        var13 = ptr1[-2];\n        temp_var11 = ptr1[-1];\n        if (var10 == var13) {\n          if (var9 == temp_var11) {\n            current_note[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (var9 <= temp_var11) {\n            current_note[2] = 0;\n            break;\n          }\n          if (temp_var11 < var10) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < temp_var11) || (var10 <= (temp_var11 + 0xf & 0xfffffffffffffff0)))\n            goto analyze_build_notes_001086af_00116852;\n          }\nLAB_001167b8:\n          if ((in_rcx == 0x101) == (var20 == 0x101)) {\n            if (temp_var11 <= var9) {\n              temp_var11 = var9;\n            }\n            if (var13 < var10) {\n              var10 = var13;\n            }\n            ptr1[-1] = temp_var11;\n            ptr1[-2] = var10;\n            current_note[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (var13 <= var10) goto LAB_001167a6;\n          if (temp_var11 < var10) goto LAB_0010852c;\n          if (var9 < var10) {\n            if ((0xfffffffffffffff0 < var9) || (var13 <= (var9 + 0xf & 0xfffffffffffffff0)))\n            goto analyze_build_notes_001086af_00116852;\n            goto LAB_001167b8;\n          }\n          if (var9 != temp_var11) goto LAB_001167b8;\n        }\nanalyze_build_notes_001086af_00116852:\n        is_valid = loop_counter < 0x11;\n        var13 = in_rcx;\n        loop_counter = loop_counter + 1;\n      } while (is_valid);\n    }\n  }\nLAB_001167f5:\n  current_note = current_note + 9;\n  goto LAB_001167f9;\n}\n\n",
            "current_name": "analyze_build_notes_001086af",
            "entrypoint": "0x001086af",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001086af": "analyze_build_notes_001086af",
                "__nmemb": "num_elements",
                "__ptr": "ptr",
                "bVar22": "byte_var",
                "bVar4": "is_valid",
                "bfd_nonfatal_message": "non_fatal_message_function",
                "bfd_set_error": "set_bfd_error",
                "cVar17": "char_var",
                "compare_gnu_build_notes": "compare_notes",
                "dcgettext": "get_bfd_error_message",
                "free": "deallocate_memory",
                "iVar23": "loop_counter",
                "iVar6": "counter",
                "in_RCX": "input",
                "in_stack_00000030": "output_buffer",
                "in_stack_00000038": "temp_stack_var2",
                "lVar7": "length",
                "memcmp": "compare_memory_regions",
                "non_fatal": "handle_warning",
                "param_11": "input_array",
                "param_7": "in_rcx",
                "param_8": "param8",
                "parse_gnu_build_attribute_notes_00116490": "parse_attribute_notes",
                "ptr": "array",
                "puVar15": "current_note",
                "puVar16": "ptr16",
                "puVar18": "ptr3",
                "puVar19": "ptr19",
                "puVar21": "ptr21",
                "puVar5": "ptr1",
                "qsort": "quick_sort",
                "sort_gnu_build_notes": "sort_notes",
                "uVar1": "result",
                "uVar10": "var10",
                "uVar11": "temp_var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "uVar16": "temp_ptr3",
                "uVar18": "temp_value10",
                "uVar19": "var19",
                "uVar2": "var2",
                "uVar20": "var20",
                "uVar21": "var21",
                "uVar3": "temp2",
                "uVar5": "var5",
                "uVar8": "temp_var8",
                "uVar9": "var9",
                "unaff_R12": "notes_array",
                "unaff_R13": "version",
                "unaff_R14": "unaff_register_r14",
                "unaff_RBP": "param_3",
                "unaff_RBX": "num_notes",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010870e": {
            "additional_data": {
                "FUN_0010870e": {
                    "copy_to_next_address": 1,
                    "copy_value_and_update_pointer": 1,
                    "copy_value_to_next_pointer": 1,
                    "extract_value_and_increment_pointer": 1,
                    "save_value_and_increment_pointer": 1,
                    "set_next_item": 1,
                    "set_param_value": 1,
                    "store_param_and_increment": 2,
                    "store_param_and_increment_ptr": 1,
                    "store_parameter_and_increment": 1,
                    "store_parameter_value": 6,
                    "store_value_and_increment": 2,
                    "store_value_and_update_pointer": 2,
                    "update_array_and_increment_ptr": 1,
                    "update_pointer": 2,
                    "update_pointer_and_value": 5,
                    "write_to_memory": 1,
                    "write_value_to_memory": 1
                },
                "param_1": {
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "dest": 1,
                    "destination": 7,
                    "destination_address": 2,
                    "destination_value": 1,
                    "function_param": 1,
                    "new_value": 2,
                    "old_value_pointer": 1,
                    "param1": 2,
                    "pointer_to_update": 1,
                    "previous_value": 1,
                    "source": 1,
                    "value": 1,
                    "value_to_save": 1,
                    "value_to_store": 5,
                    "value_to_update": 1
                },
                "param_2": {
                    "data": 1,
                    "new_item": 1,
                    "new_value": 14,
                    "param2": 2,
                    "source": 1,
                    "source_value": 1,
                    "value": 8,
                    "value_to_copy": 1,
                    "value_to_store": 2
                },
                "param_3": {
                    "address": 1,
                    "address_pointer": 1,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "item_list": 1,
                    "memory_location": 1,
                    "memory_pointer": 1,
                    "param3": 2,
                    "parameter_list": 1,
                    "pointer": 7,
                    "pointer_array": 1,
                    "pointer_to_data": 3,
                    "pointer_to_pointer": 2,
                    "pointer_to_update": 1,
                    "pointer_to_value": 5,
                    "ptr": 1,
                    "target_pointer": 1
                },
                "puVar1": {
                    "current_item": 1,
                    "current_pointer": 6,
                    "current_ptr": 1,
                    "destination_pointer": 1,
                    "element_pointer": 1,
                    "memory_pointer": 1,
                    "next_address": 1,
                    "next_pointer": 1,
                    "old_value_pointer_ptr": 1,
                    "pointer": 2,
                    "pointer_to_destination": 1,
                    "pointer_to_element": 1,
                    "pointer_to_long": 1,
                    "pointer_to_pointer": 2,
                    "pointer_to_stored_value": 1,
                    "pointer_to_value": 2,
                    "ptr_to_value": 3,
                    "updated_pointer": 1,
                    "value_pointer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid store_value_and_update_pointer_0010870e(undefined8 destination,undefined8 new_value,long *pointer)\n\n{\n  undefined8 *current_pointer;\n  \n  current_pointer = (undefined8 *)*pointer;\n  *current_pointer = new_value;\n  *pointer = (long)(current_pointer + 1);\n  return;\n}\n\n",
            "current_name": "store_value_and_update_pointer_0010870e",
            "entrypoint": "0x0010870e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010870e": "store_value_and_update_pointer_0010870e",
                "param_1": "destination",
                "param_2": "new_value",
                "param_3": "pointer",
                "puVar1": "current_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010871c": {
            "additional_data": {
                "FUN_0010871c": {
                    "print_error": 3,
                    "print_error_cause": 1,
                    "print_error_details": 2,
                    "print_error_information": 1,
                    "print_error_message": 24
                },
                "uVar1": {
                    "error_cause": 1,
                    "error_message": 17,
                    "error_string": 6,
                    "message": 1
                },
                "unaff_RBX": {
                    "error_code": 10,
                    "error_flag": 17,
                    "error_status": 3,
                    "error_type": 1
                },
                "unaff_retaddr": {
                    "return_address": 31
                }
            },
            "called": [
                "FUN_001045e0",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011a110"
            ],
            "code": "\n\n\nvoid print_error_message_0010871c(void)\n\n{\n  undefined8 error_message;\n  long error_flag;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (error_flag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,error_message,return_address);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010871c",
            "entrypoint": "0x0010871c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "error_message",
                "unaff_RBX": "error_flag",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010875d": {
            "additional_data": {
                "FUN_0010875d": {
                    "compare_and_sort": 1,
                    "compare_elements": 1,
                    "compare_records": 27,
                    "compare_structs": 1,
                    "compare_values": 1
                },
                "iVar3": {
                    "comparison_result": 9,
                    "result": 22
                },
                "lVar1": {
                    "address1": 3,
                    "address_record1": 1,
                    "array1_value": 1,
                    "field1_record1": 1,
                    "record1_address": 3,
                    "record1_header": 1,
                    "record1_ptr": 1,
                    "record1_value": 7,
                    "record_1_ptr": 1,
                    "size1": 1,
                    "size_record1": 1,
                    "size_record_1": 1,
                    "value1": 4,
                    "value_1": 5
                },
                "lVar2": {
                    "address2": 3,
                    "address_record2": 1,
                    "array2_value": 1,
                    "field1_record2": 1,
                    "record2_address": 3,
                    "record2_header": 1,
                    "record2_ptr": 1,
                    "record2_value": 7,
                    "record_2_ptr": 1,
                    "size2": 1,
                    "size_record2": 1,
                    "size_record_2": 1,
                    "value2": 4,
                    "value_2": 5
                },
                "param_1": {
                    "array1_pointer": 1,
                    "list1": 1,
                    "record1": 22,
                    "record_1": 5,
                    "struct_1": 1,
                    "values_1": 1
                },
                "param_2": {
                    "array2_pointer": 1,
                    "list2": 1,
                    "record2": 22,
                    "record_2": 5,
                    "struct_2": 1,
                    "values_2": 1
                },
                "uVar4": {
                    "array2_value_bitmask": 1,
                    "bitwise_flag": 1,
                    "comparison_flag": 1,
                    "field2_record2": 1,
                    "flag": 18,
                    "flags": 4,
                    "record2_flag": 2,
                    "record2_status": 1,
                    "record2_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nint compare_records_0010875d(long *record1,long *record2)\n\n{\n  long record1_value;\n  long record2_value;\n  int result;\n  uint flag;\n  \n  record1_value = *record1;\n  record2_value = *record2;\n  flag = *(uint *)(record2_value + 0x24) & 0x102;\n  if ((*(uint *)(record1_value + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(record1_value + 0x38) <= *(ulong *)(record2_value + 0x38)) {\n    result = -1;\n    if (*(ulong *)(record2_value + 0x38) <= *(ulong *)(record1_value + 0x38)) {\n      if (*(ulong *)(record2_value + 0x40) < *(ulong *)(record1_value + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(record2_value + 0x40) <= *(ulong *)(record1_value + 0x40)) {\n          result = 1;\n          if (*(uint *)(record1_value + 0x18) <= *(uint *)(record2_value + 0x18)) {\n            return -(uint)(*(uint *)(record1_value + 0x18) < *(uint *)(record2_value + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "compare_records_0010875d",
            "entrypoint": "0x0010875d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "iVar3": "result",
                "lVar1": "record1_value",
                "lVar2": "record2_value",
                "param_1": "record1",
                "param_2": "record2",
                "uVar4": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001087da": {
            "additional_data": {
                "FUN_001087da": {
                    "check_address": 1,
                    "check_address_validity": 1,
                    "check_for_value_equals256": 1,
                    "check_if_rax_equal_to256": 1,
                    "check_if_rax_equals100": 3,
                    "check_if_rax_equals256": 1,
                    "check_if_rax_equals_0x100": 1,
                    "check_if_rax_equals_hundred": 1,
                    "check_if_rax_is0x100": 1,
                    "check_if_rax_is100": 1,
                    "check_if_rax_is_equal_to_one_hundred": 1,
                    "check_input_value": 1,
                    "check_memory_size": 1,
                    "check_pointer_type": 1,
                    "check_rax_value": 9,
                    "check_value": 5,
                    "is_rax_equalto100": 1
                },
                "auVar1": {
                    "result": 26,
                    "result_array": 1,
                    "return_value": 1
                },
                "in_RAX": {
                    "address": 2,
                    "input": 1,
                    "input_value": 9,
                    "memory_size": 1,
                    "pointer_value": 1,
                    "rax_value": 1,
                    "value": 9,
                    "value_to_check": 6
                },
                "unaff_retaddr": {
                    "return_address": 29
                }
            },
            "called": [],
            "calling": [
                "FUN_0011a1b0"
            ],
            "code": "\nundefined  [16] check_rax_value_001087da(void)\n\n{\n  long value;\n  undefined result [16];\n  undefined8 return_address;\n  \n  result._1_7_ = 0;\n  result[0] = value == 0x100;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "current_name": "check_rax_value_001087da",
            "entrypoint": "0x001087da",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001087da": "check_rax_value_001087da",
                "auVar1": "result",
                "in_RAX": "value",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001087fd": {
            "additional_data": {
                "FUN_001087fd": {
                    "calculate_result": 1,
                    "clear_data": 1,
                    "clear_memory": 1,
                    "get_default_value": 10,
                    "get_return_value": 1,
                    "get_zero": 2,
                    "get_zero_value": 2,
                    "initialize": 7,
                    "initialize_data": 3,
                    "initialize_default_value": 1,
                    "initialize_return_value": 1,
                    "retrieve_zero": 1
                },
                "return": {
                    "result": 1
                },
                "undefined8": {
                    "uint64_t": 2,
                    "void": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_0011a250"
            ],
            "code": "\nvoid initialize_default_value_001087fd(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_default_value_001087fd",
            "entrypoint": "0x001087fd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001087fd": "initialize_default_value_001087fd",
                "return": "result",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108800": {
            "additional_data": {
                "FUN_00108800": {
                    "calculate_hash": 6,
                    "compute_hash": 1,
                    "hash_string": 22,
                    "hash_string_function": 1,
                    "hash_string_value": 1
                },
                "hash_string": {
                    "new_variable_name": 1
                },
                "param_1": {
                    "input_string": 14,
                    "string": 4,
                    "string_pointer": 4,
                    "string_ptr": 2
                }
            },
            "called": [
                "FUN_001048f8"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid hash_string_value_00108800(undefined8 *input_string)\n\n{\n  htab_new_variable_name(*input_string);\n  return;\n}\n\n",
            "current_name": "hash_string_value_00108800",
            "entrypoint": "0x00108800",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108800": "hash_string_value_00108800",
                "hash_string": "new_variable_name",
                "param_1": "input_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108808": {
            "additional_data": {
                "FUN_00108808": {
                    "find_and_call_section": 1,
                    "find_and_execute_section": 1,
                    "find_and_fatal": 1,
                    "find_and_fatal_if_section_not_found": 1,
                    "find_and_fatal_missing_section": 1,
                    "find_and_fatal_section": 3,
                    "find_and_print_section": 8,
                    "find_missing_section": 5,
                    "find_section_and_fatal": 3,
                    "find_section_and_fatal_if_not_found": 1,
                    "find_section_and_print_error": 1,
                    "handle_section_not_found": 1,
                    "print_section_not_found_error": 3,
                    "section_not_found_handler": 1
                },
                "FUN_00119dd0": {
                    "print_error_message": 1
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "fatal": {
                    "handle_error": 1
                },
                "param_1": {
                    "error_code": 1,
                    "first_param": 1,
                    "param_1": 1
                },
                "param_2": {
                    "param2": 1,
                    "param_2": 1,
                    "second_param": 1
                },
                "param_3": {
                    "param3": 1,
                    "param_3": 1,
                    "third_param": 1
                },
                "param_4": {
                    "fourth_param": 1,
                    "param4": 1,
                    "param_4": 1
                },
                "uVar1": {
                    "address": 1,
                    "section_address": 20,
                    "section_name": 1,
                    "section_name_ptr": 1,
                    "section_pointer": 4,
                    "section_ptr": 3
                },
                "uVar2": {
                    "err_msg": 1,
                    "error_message": 19,
                    "error_message_ptr": 1,
                    "error_msg": 1,
                    "error_string": 1,
                    "section_error_message": 2,
                    "section_not_found_error": 1,
                    "section_not_found_error_string": 1,
                    "section_not_found_message": 3
                },
                "unaff_RBP": {
                    "base_address": 2,
                    "base_pointer": 21,
                    "section_address": 1,
                    "stack_base_ptr": 1,
                    "stack_frame_pointer": 1,
                    "stack_pointer": 1
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_0011a2e0"
            ],
            "code": "\nvoid find_and_fatal_missing_section_00108808(void)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long base_pointer;\n  \n  section_address = *(undefined8 *)(base_pointer + 0x20);\n  error_message = get_error_message(0,\"Section %s not found\",5);\n                    \n  handle_error(error_message,section_address);\n}\n\n",
            "current_name": "find_and_fatal_missing_section_00108808",
            "entrypoint": "0x00108808",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108808": "find_and_fatal_missing_section_00108808",
                "dcgettext": "get_error_message",
                "fatal": "handle_error",
                "uVar1": "section_address",
                "uVar2": "error_message",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010882c": {
            "additional_data": {
                "FUN_0010882c": {
                    "display_set_time_error": 1,
                    "handle_time_set_error": 1,
                    "print_cannot_set_time_error": 2,
                    "print_error_message": 1,
                    "print_time_error": 3,
                    "print_time_error_message": 1,
                    "print_time_set_error_message": 1,
                    "set_time_error": 16,
                    "set_time_error_handler": 1,
                    "set_time_error_handling": 2,
                    "set_time_error_message": 2
                },
                "param_1": {
                    "error_code": 2,
                    "first_param": 1,
                    "param1": 2,
                    "unknown_param1": 1
                },
                "param_2": {
                    "error_message": 2,
                    "param2": 2,
                    "second_param": 1,
                    "unknown_param2": 1
                },
                "param_3": {
                    "param3": 2,
                    "third_param": 1,
                    "unknown_param3": 1
                },
                "param_4": {
                    "fourth_param": 1,
                    "param4": 2,
                    "unknown_param4": 1
                },
                "piVar1": {
                    "errno": 1,
                    "errno_address": 2,
                    "errno_location": 5,
                    "errno_pointer": 2,
                    "errno_ptr": 4,
                    "error_address": 1,
                    "error_code": 1,
                    "error_location": 7,
                    "error_number": 1,
                    "error_pointer": 4,
                    "error_value": 1
                },
                "uVar2": {
                    "error_message": 15,
                    "error_msg": 3,
                    "error_string": 7,
                    "localized_error": 1,
                    "localized_error_message": 1,
                    "translated_error_message": 1,
                    "translated_error_msg": 2,
                    "translated_message": 1
                }
            },
            "called": [
                "FUN_00104890",
                "FUN_00104240",
                "FUN_001040b0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_0011a350"
            ],
            "code": "\nvoid print_cannot_set_time_error_0010882c(void)\n\n{\n  int *error_location;\n  undefined8 error_message;\n  \n  error_location = __errno_location();\n  strerror(*error_location);\n  error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  non_fatal(error_message);\n  return;\n}\n\n",
            "current_name": "print_cannot_set_time_error_0010882c",
            "entrypoint": "0x0010882c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010882c": "print_cannot_set_time_error_0010882c",
                "piVar1": "error_location",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108863": {
            "additional_data": {
                "DAT_00127740": {
                    "data_start": 1,
                    "ptr_start": 1
                },
                "DAT_001278c0": {
                    "data_end": 1,
                    "ptr_end": 1
                },
                "FUN_00108863": {
                    "cleanup_memory": 2,
                    "clear_memory": 8,
                    "clear_memory_blocks": 1,
                    "deallocate_memory": 1,
                    "deallocate_memory_blocks": 1,
                    "free_memory": 2,
                    "free_memory_and_reset": 1,
                    "free_memory_blocks": 13,
                    "release_memory": 1,
                    "release_memory_blocks": 1
                },
                "puVar1": {
                    "current_block": 18,
                    "current_pointer": 5,
                    "current_ptr": 3,
                    "pointer": 2,
                    "pointer_1": 1,
                    "ptr_array": 1,
                    "ptr_data": 1
                },
                "puVar2": {
                    "next_block": 18,
                    "next_data": 1,
                    "next_pointer": 7,
                    "next_ptr": 3,
                    "next_ptr_array": 1,
                    "pointer_2": 1
                }
            },
            "called": [
                "FUN_001048f0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid free_memory_blocks_00108863(void)\n\n{\n  undefined4 *current_block;\n  undefined4 *next_block;\n  \n  current_block = (undefined4 *)&DAT_00127740;\n  do {\n    next_block = current_block + 6;\n    free(*(void **)(current_block + 4));\n    *(undefined8 *)(current_block + 4) = 0;\n    current_block = next_block;\n  } while (next_block != &DAT_001278c0);\n  DAT_001278c0 = 0;\n  return;\n}\n\n",
            "current_name": "free_memory_blocks_00108863",
            "entrypoint": "0x00108863",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108863": "free_memory_blocks_00108863",
                "puVar1": "current_block",
                "puVar2": "next_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108898": {
            "additional_data": {
                "FUN_00108898": {
                    "compare_strings": 30,
                    "string_compare": 1
                },
                "auVar2": {
                    "comparison_result": 6,
                    "comparison_result_array": 1,
                    "comparison_result_container": 2,
                    "comparison_result_struct": 1,
                    "output": 1,
                    "result": 13
                },
                "iVar1": {
                    "comparison_result": 20,
                    "result": 3,
                    "string_comparison_result": 8
                },
                "in_RAX": {
                    "comparison_result_extended": 1,
                    "placeholder": 1,
                    "return_pointer": 1,
                    "return_value": 8,
                    "temporary_value": 1,
                    "undefined_value": 3,
                    "unused": 1,
                    "unused_value": 1
                },
                "param_1": {
                    "str1": 1,
                    "string1": 29,
                    "string_1": 1
                },
                "param_2": {
                    "str2": 1,
                    "string2": 29,
                    "string_2": 1
                }
            },
            "called": [
                "FUN_00104470"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] compare_strings_00108898(char **string1,char **string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  undefined result [16];\n  \n  comparison_result = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "compare_strings_00108898",
            "entrypoint": "0x00108898",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "auVar2": "result",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001088ae": {
            "additional_data": {
                "FUN_001088ae": {
                    "update_data": 17,
                    "update_data_and_return_index": 6,
                    "update_data_entry": 7,
                    "update_resource_data": 1
                },
                "iVar1": {
                    "current_index": 5,
                    "entry_count": 1,
                    "index": 1,
                    "new_index": 11,
                    "new_resource_index": 1,
                    "next_idx": 1,
                    "next_index": 4,
                    "updated_data_idx": 1,
                    "updated_index": 6
                },
                "lVar2": {
                    "current_data_idx": 1,
                    "current_idx": 1,
                    "current_index": 8,
                    "current_pointer": 1,
                    "current_position": 1,
                    "current_value": 1,
                    "current_value_index": 1,
                    "data_entry_index": 1,
                    "data_index": 4,
                    "entry_index": 1,
                    "index": 8,
                    "old_index": 1,
                    "prev_index": 1,
                    "resource_index": 1
                },
                "lVar3": {
                    "array_index": 4,
                    "current_data_index": 1,
                    "current_data_offset": 1,
                    "data_offset": 3,
                    "entry_offset": 4,
                    "new_index": 1,
                    "offset": 16,
                    "resource_offset": 1
                },
                "param_1": {
                    "entry_id": 1,
                    "error_code": 1,
                    "int_value1": 1,
                    "new_param1": 5,
                    "new_value1": 17,
                    "value1": 6
                },
                "param_2": {
                    "int_value2": 1,
                    "new_param2": 5,
                    "new_value2": 17,
                    "status": 1,
                    "type": 1,
                    "value2": 6
                },
                "param_3": {
                    "address1": 1,
                    "data1": 2,
                    "long_value1": 1,
                    "new_address1": 1,
                    "new_data1": 1,
                    "new_param3": 5,
                    "new_value1": 1,
                    "new_value3": 13,
                    "value": 1,
                    "value1": 1,
                    "value3": 4
                },
                "param_4": {
                    "address2": 1,
                    "data2": 2,
                    "new_data2": 1,
                    "new_param4": 5,
                    "new_str_value": 1,
                    "new_string": 1,
                    "new_value2": 1,
                    "new_value4": 12,
                    "string": 1,
                    "string_value": 1,
                    "value2": 1,
                    "value4": 4
                },
                "uVar4": {
                    "copied_address": 1,
                    "copied_str": 2,
                    "copied_string": 2,
                    "duplicate_str": 1,
                    "duplicate_string": 1,
                    "duplicated_data": 3,
                    "duplicated_param4": 1,
                    "duplicated_str": 2,
                    "duplicated_string": 13,
                    "duplicated_value": 3,
                    "new_string": 2
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_001043d0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nulong update_data_entry_001088ae(undefined4 new_value1,undefined4 new_value2,undefined8 new_value3,undefined8 new_value4)\n\n{\n  int new_index;\n  long index;\n  long offset;\n  undefined8 duplicated_string;\n  \n  index = (long)DAT_001278c0;\n  offset = index * 0x18;\n  free((void *)(&DAT_00127750)[index * 3]);\n  *(undefined4 *)(&DAT_00127740 + offset) = new_value1;\n  *(undefined4 *)(&DAT_00127744 + offset) = new_value2;\n  *(undefined8 *)(&DAT_00127748 + offset) = new_value3;\n  duplicated_string = xstrdup(new_value4);\n  (&DAT_00127750)[index * 3] = duplicated_string;\n  new_index = DAT_001278c0 + 1;\n  DAT_001278c0 = new_index % 0x10;\n  return (long)new_index / 0x10 & 0xffffffff;\n}\n\n",
            "current_name": "update_data_entry_001088ae",
            "entrypoint": "0x001088ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001088ae": "update_data_entry_001088ae",
                "iVar1": "new_index",
                "lVar2": "index",
                "lVar3": "offset",
                "param_1": "new_value1",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "param_4": "new_value4",
                "uVar4": "duplicated_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108916": {
            "additional_data": {
                "FUN_00104a35": {
                    "copy_file": 1,
                    "list_supported_targets": 1,
                    "print_supported_targets": 1
                },
                "FUN_00108916": {
                    "print_binary_file_copy_options": 1,
                    "print_file_usage": 1,
                    "print_usage": 21,
                    "print_usage_and_exit": 3,
                    "print_usage_info": 1,
                    "print_usage_message": 4
                },
                "dcgettext": {
                    "get_translated_message": 2,
                    "gettext": 1,
                    "translate_text": 2
                },
                "exit": {
                    "exit_program": 3
                },
                "fprintf": {
                    "print_formatted": 1,
                    "print_formatted_output": 1,
                    "print_message": 1,
                    "write_to_file": 1
                },
                "list_supported_targets": {
                    "display_supported_targets": 1,
                    "list_supported_targets": 2,
                    "print_supported_targets": 1
                },
                "param_1": {
                    "file": 3,
                    "file_pointer": 2,
                    "file_ptr": 4,
                    "file_stream": 1,
                    "output_file": 19,
                    "output_stream": 1
                },
                "param_2": {
                    "error_code": 4,
                    "exit_code": 25,
                    "return_code": 1,
                    "status": 1
                },
                "pcVar2": {
                    "display_text": 1,
                    "localized_message": 1,
                    "localized_string": 7,
                    "message": 13,
                    "message_ptr": 1,
                    "msg": 1,
                    "string_pointer": 1,
                    "string_var": 1,
                    "text": 3,
                    "text_string": 1
                },
                "uVar1": {
                    "data_constant": 1,
                    "data_pointer": 1,
                    "data_var": 1,
                    "data_var1": 1,
                    "default_message": 2,
                    "default_usage_message": 1,
                    "default_var": 1,
                    "format_str": 1,
                    "message": 2,
                    "program_name": 1,
                    "string_value": 1,
                    "usage_message": 5,
                    "usage_msg": 1,
                    "usage_string": 10,
                    "usage_text": 1,
                    "usage_var": 1
                }
            },
            "called": [
                "FUN_001047f0",
                "FUN_00104240",
                "FUN_001044b0",
                "FUN_00104a35"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_usage_message_00108916(FILE *output_file,int exit_code)\n\n{\n  undefined8 usage_string;\n  char *message;\n  \n  usage_string = DAT_00127600;\n  message = (char *)translate_text(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  write_to_file(output_file,message,usage_string);\n  message = (char *)translate_text(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  write_to_file(output_file,message);\n  message = (char *)translate_text(0,\" The options are:\\n\",5);\n  write_to_file(output_file,message);\n  message = (char *)translate_text(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  write_to_file(output_file,message);\n  message = (char *)translate_text(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  write_to_file(output_file,message);\n  message = (char *)translate_text(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  write_to_file(output_file,message);\n  list_supported_targets(DAT_00127600,output_file);\n  if (exit_code == 0) {\n    message = (char *)translate_text(0,\"Report bugs to %s\\n\",5);\n    write_to_file(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "current_name": "print_usage_message_00108916",
            "entrypoint": "0x00108916",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108916": "print_usage_message_00108916",
                "dcgettext": "translate_text",
                "exit": "exit_program",
                "fprintf": "write_to_file",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "uVar1": "usage_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108a2a": {
            "additional_data": {
                "FUN_00104a35": {
                    "list_supported_targets": 1,
                    "print_supported_targets": 2
                },
                "FUN_00108a2a": {
                    "display_usage": 1,
                    "print_help_message": 2,
                    "print_usage": 18,
                    "print_usage_and_exit": 8,
                    "print_usage_information": 1
                },
                "dcgettext": {
                    "get_locale_text": 1,
                    "get_localized_text": 1,
                    "get_message": 1,
                    "get_translated_message": 4,
                    "get_translated_string": 1
                },
                "exit": {
                    "exit_program": 4
                },
                "fprintf": {
                    "print_formatted_message": 4,
                    "print_formatted_text": 1,
                    "write_to_file": 1,
                    "write_to_output": 1
                },
                "list_supported_targets": {
                    "list_supported_formats": 1,
                    "list_supported_targets": 6,
                    "print_supported_targets": 1
                },
                "param_1": {
                    "file": 7,
                    "file_pointer": 3,
                    "output_file": 20
                },
                "param_2": {
                    "error_code": 3,
                    "exit_code": 23,
                    "exit_status": 2,
                    "status": 1,
                    "status_code": 1
                },
                "pcVar2": {
                    "display_text": 1,
                    "localized_message": 1,
                    "localized_string": 2,
                    "localized_text": 1,
                    "message": 22,
                    "text": 3
                },
                "uVar1": {
                    "default_message": 1,
                    "input_format": 1,
                    "language": 1,
                    "program_name": 1,
                    "program_version": 1,
                    "translation": 1,
                    "usage_message": 2,
                    "usage_string": 5,
                    "usage_text": 1,
                    "version": 7,
                    "version_data": 1,
                    "version_info": 2,
                    "version_number": 6
                }
            },
            "called": [
                "FUN_001047f0",
                "FUN_00104240",
                "FUN_001044b0",
                "FUN_00104a35"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_usage_and_exit_00108a2a(FILE *output_file,int exit_code)\n\n{\n  undefined8 version;\n  char *message;\n  \n  version = DAT_00127600;\n  message = (char *)get_translated_message(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  print_formatted_message(output_file,message,version);\n  message = (char *)get_translated_message(0,\" Removes symbols and sections from files\\n\",5);\n  print_formatted_message(output_file,message);\n  message = (char *)get_translated_message(0,\" The options are:\\n\",5);\n  print_formatted_message(output_file,message);\n  message = (char *)get_translated_message(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  print_formatted_message(output_file,message);\n  message = (char *)get_translated_message(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  print_formatted_message(output_file,message);\n  message = (char *)get_translated_message(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  print_formatted_message(output_file,message);\n  list_supported_targets(DAT_00127600,output_file);\n  if (exit_code == 0) {\n    message = (char *)get_translated_message(0,\"Report bugs to %s\\n\",5);\n    print_formatted_message(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "current_name": "print_usage_and_exit_00108a2a",
            "entrypoint": "0x00108a2a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108a2a": "print_usage_and_exit_00108a2a",
                "dcgettext": "get_translated_message",
                "exit": "exit_program",
                "fprintf": "print_formatted_message",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "uVar1": "version"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108b3e": {
            "additional_data": {
                "DAT_00127740": {
                    "stab_ptr_base": 1
                },
                "DAT_00127750": {
                    "stab_type_desc_string": 1
                },
                "DAT_001278c0": {
                    "stab_ptr_count": 1
                },
                "FUN_00108b3e": {
                    "print_debug_stabs": 1,
                    "print_last_stab_entries": 2,
                    "print_last_stabs": 2,
                    "print_last_stabs_entries": 15,
                    "print_stab_entries": 4,
                    "print_stabs_entries": 7
                },
                "__format": {
                    "error_message": 1,
                    "error_message_format": 1,
                    "format": 1,
                    "format_str": 3,
                    "format_string": 23,
                    "msg_last_stabs_entries": 1,
                    "stabs_entry_format": 1
                },
                "iVar5": {
                    "count": 2,
                    "counter": 7,
                    "current_index": 3,
                    "i": 2,
                    "index": 3,
                    "iteration_count": 3,
                    "iteration_counter": 1,
                    "iterator": 3,
                    "loop_counter": 4,
                    "loop_var": 2,
                    "var_i": 1
                },
                "lVar1": {
                    "name_offset": 1,
                    "stab_name": 28,
                    "stab_name_length": 1,
                    "stab_name_ptr": 1
                },
                "lVar2": {
                    "counter": 1,
                    "i_var": 1,
                    "i_var5": 2,
                    "i_var_idx": 1,
                    "index": 13,
                    "iteration": 1,
                    "iteration_count": 1,
                    "loop_counter": 1,
                    "loop_index": 9,
                    "var_index": 1
                },
                "lVar3": {
                    "entry_index": 1,
                    "entry_offset": 1,
                    "offset": 16,
                    "stab_address": 1,
                    "stab_entry_offset": 5,
                    "stab_info_offset": 1,
                    "stab_offset": 5,
                    "var_offset": 1
                },
                "param_1": {
                    "arg1": 1,
                    "param1": 8,
                    "param_1": 18,
                    "param_format_string": 1,
                    "param_header": 1,
                    "param_lang_domain": 1,
                    "param_source": 1
                },
                "param_2": {
                    "arg2": 1,
                    "param2": 8,
                    "param_2": 18,
                    "param_desc": 1,
                    "param_destination": 1,
                    "param_error_message": 1,
                    "param_stderr": 1
                },
                "param_3": {
                    "arg3": 1,
                    "output": 1,
                    "output_file": 1,
                    "param3": 8,
                    "param_3": 16,
                    "param_result": 1,
                    "param_return": 1,
                    "param_return_value": 1,
                    "return_value": 1
                },
                "piVar4": {
                    "current_entry": 3,
                    "current_stab_entry_ptr": 1,
                    "entry_pointer": 1,
                    "ptr_stab_type": 1,
                    "ptr_stabs_entry": 1,
                    "stab_entry": 11,
                    "stab_entry_ptr": 1,
                    "stab_info": 1,
                    "stab_pointer": 1,
                    "stab_ptr": 4,
                    "stab_type": 1,
                    "symbol": 3,
                    "symbol_info": 1,
                    "symbol_ptr": 1
                }
            },
            "called": [
                "FUN_00104800",
                "FUN_00104110",
                "FUN_001043f0",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 print_last_stabs_entries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *format_string;\n  long stab_name;\n  long index;\n  long offset;\n  int *stab_entry;\n  int counter;\n  \n  format_string = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,format_string);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  counter = DAT_001278c0;\n  do {\n    index = (long)counter;\n    offset = index * 0x18;\n    stab_entry = (int *)(&DAT_00127740 + offset);\n    if ((&DAT_00127750)[index * 3] != 0) {\n      stab_name = bfd_get_stab_name(*stab_entry);\n      if (stab_name == 0) {\n        if (*stab_entry == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stab_name);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127744 + offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127748 + offset));\n      if (*stab_entry != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127750)[index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    counter = (counter + 1) % 0x10;\n  } while (DAT_001278c0 != counter);\n  return param_3;\n}\n\n",
            "current_name": "print_last_stabs_entries_00108b3e",
            "entrypoint": "0x00108b3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "format_string",
                "iVar5": "counter",
                "lVar1": "stab_name",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "stab_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108c86": {
            "additional_data": {
                "FUN_00108c86": {
                    "extract_and_customize": 1,
                    "extract_and_modify_string": 1,
                    "extract_binary_info": 6,
                    "extract_binary_information": 1,
                    "extract_binary_prefix_info": 1,
                    "extract_component_info": 1,
                    "extract_driver_info": 1,
                    "extract_driver_name": 1,
                    "extract_info_from_param": 1,
                    "extract_module_info": 2,
                    "extract_module_name": 1,
                    "extract_strings": 1,
                    "parse_and_allocate_memory": 1,
                    "parse_and_set_drv_name": 1,
                    "parse_binary_header": 1,
                    "parse_command": 1,
                    "parse_driver_name": 4,
                    "parse_driver_string": 2,
                    "parse_drivers": 1,
                    "parse_module": 1,
                    "parse_module_name": 1
                },
                "__s": {
                    "current_name": 1,
                    "driver_name": 1,
                    "header_string": 1,
                    "input_str": 2,
                    "input_string": 5,
                    "module_name": 4,
                    "name": 3,
                    "name_ptr": 3,
                    "path": 1,
                    "prefix": 1,
                    "prefix_string": 1,
                    "string_pointer": 1,
                    "string_ptr": 2,
                    "string_start": 1,
                    "substring": 3,
                    "substring_ptr": 1
                },
                "__s1": {
                    "arch": 5,
                    "arch_name": 1,
                    "arch_ptr": 2,
                    "arch_str": 1,
                    "arch_string": 2,
                    "arch_type": 2,
                    "architecture": 5,
                    "architecture_identifier": 1,
                    "architecture_string": 3,
                    "comparison_string": 1,
                    "platform_ptr": 1,
                    "platform_string": 2,
                    "sub_name": 1,
                    "sub_string": 1,
                    "substring_ptr": 1,
                    "substring_ptr_2": 1,
                    "suffix": 1
                },
                "bVar8": {
                    "bool_flag": 1,
                    "byte_val": 1,
                    "byte_value": 2,
                    "byte_var": 1,
                    "flag": 13,
                    "is_architecture_string_empty": 1,
                    "is_b_sdrv": 1,
                    "is_negative": 2,
                    "is_null": 1,
                    "is_odd_length": 1,
                    "is_reverse": 1,
                    "is_startswith": 1,
                    "length_factor": 1,
                    "offset_flag": 1,
                    "padding_byte": 1,
                    "unused_byte": 1
                },
                "cVar1": {
                    "is_lto": 1,
                    "is_lto_priv": 3,
                    "is_lto_priv_0_lto_priv_0": 1,
                    "is_lto_private": 1,
                    "is_name_valid": 1,
                    "is_prefix": 1,
                    "starts_with": 1,
                    "starts_with_bs": 2,
                    "starts_with_keyword": 1,
                    "starts_with_lto": 10,
                    "starts_with_lto1": 1,
                    "startswith_check": 1,
                    "startswith_lto_priv_result": 1,
                    "startswith_result": 2
                },
                "iVar2": {
                    "cmp_result": 1,
                    "compare_result": 1,
                    "comparison_result": 20,
                    "result": 1,
                    "strcmp_result": 5,
                    "string_comparison": 1
                },
                "lVar5": {
                    "address": 1,
                    "address_offset": 1,
                    "array_value": 1,
                    "data_offset": 2,
                    "driver_name_offset": 1,
                    "header_offset": 1,
                    "input_length": 1,
                    "length_mask": 1,
                    "module_name_length": 1,
                    "name_length": 1,
                    "offset": 13,
                    "position": 1,
                    "ptr_offset": 1,
                    "string_address": 1,
                    "string_length": 1,
                    "string_length_copy": 1,
                    "temp": 1
                },
                "param_1": {
                    "binary_address": 1,
                    "binary_data": 2,
                    "binary_header": 1,
                    "binary_info": 2,
                    "binary_info_ptr": 1,
                    "binary_path": 1,
                    "binary_ptr": 1,
                    "command": 1,
                    "component_info": 1,
                    "driver_data": 1,
                    "driver_info": 1,
                    "driver_name": 3,
                    "driver_name_ptr": 2,
                    "driver_string": 2,
                    "input_address": 1,
                    "input_array": 1,
                    "input_data": 1,
                    "input_ptr": 2,
                    "input_string_ptr": 1,
                    "module_data": 1,
                    "module_info": 1,
                    "module_info_ptr": 1,
                    "module_name_ptr": 1,
                    "module_ptr": 1
                },
                "puVar4": {
                    "allocated_memory": 4,
                    "allocated_string": 2,
                    "buffer": 1,
                    "component_name": 1,
                    "driver": 1,
                    "driver_name": 1,
                    "driver_name_memory": 1,
                    "drv_name_ptr": 1,
                    "extracted_data": 2,
                    "extracted_info": 2,
                    "extracted_info_ptr": 1,
                    "header_data": 1,
                    "modified_string_ptr": 1,
                    "module_info": 1,
                    "new_module_name": 1,
                    "new_string": 3,
                    "new_string_ptr": 1,
                    "parsed_command": 1,
                    "parsed_name": 2,
                    "parsed_name_ptr": 1,
                    "result": 1,
                    "result_array": 1
                },
                "puVar6": {
                    "allocated_memory_ptr": 1,
                    "allocated_string_ptr": 1,
                    "buffer_pointer": 1,
                    "component_name_copy": 1,
                    "copy_pointer": 1,
                    "current_char": 1,
                    "current_driver_character": 1,
                    "current_location": 1,
                    "dest_info_ptr": 1,
                    "driver_name_ptr": 1,
                    "extracted_data_ptr": 2,
                    "header_data_ptr": 1,
                    "info_ptr": 2,
                    "memory_pointer": 1,
                    "modified_string_ptr_iter": 1,
                    "module_info_ptr": 1,
                    "new_module_name_ptr": 1,
                    "new_string": 1,
                    "new_string_pointer": 1,
                    "new_string_ptr": 2,
                    "new_string_ptr2": 1,
                    "parsed_command_position": 1,
                    "parsed_name_iterator": 1,
                    "parsed_name_ptr": 2,
                    "ptr": 1,
                    "result_ptr": 1,
                    "temp_result": 1
                },
                "sVar3": {
                    "driver_name_length": 1,
                    "header_length": 1,
                    "input_length": 1,
                    "length": 7,
                    "module_name_length": 1,
                    "name_length": 8,
                    "path_length": 1,
                    "string_length": 9
                },
                "uVar7": {
                    "header_type": 1,
                    "length": 1,
                    "module_type": 1,
                    "name_type": 1,
                    "output_value": 1,
                    "result": 10,
                    "result_code": 1,
                    "return_value": 15
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_00113fb0",
                "FUN_00104470",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined8 extract_binary_prefix_info_00108c86(long *driver_name)\n\n{\n  char starts_with_lto;\n  int comparison_result;\n  size_t string_length;\n  undefined2 *allocated_memory;\n  long offset;\n  char *input_string;\n  char *arch;\n  undefined2 *new_string_ptr;\n  undefined8 return_value;\n  byte flag;\n  \n  flag = 0;\n  offset = *driver_name;\n  input_string = (char *)(offset + 4);\n  starts_with_lto = startswith_lto_priv_0_lto_priv_0(input_string,&DAT_0011b73b);\n  if (starts_with_lto == '\\0') {\n    starts_with_lto = startswith_lto_priv_0_lto_priv_0(input_string,\"bsdrv-\");\n    if (starts_with_lto == '\\0') {\n      starts_with_lto = startswith_lto_priv_0_lto_priv_0(input_string,\"rtdrv-\");\n      if (starts_with_lto == '\\0') {\n        return 0xffffffff;\n      }\n      input_string = (char *)(offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      input_string = (char *)(offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(input_string);\n  allocated_memory = (undefined2 *)xmalloc(string_length + 8);\n  arch = input_string + 4;\n  new_string_ptr = allocated_memory;\n  for (offset = string_length + 1; offset != 0; offset = offset + -1) {\n    *(char *)new_string_ptr = *input_string;\n    input_string = input_string + (ulong)flag * -2 + 1;\n    new_string_ptr = (undefined2 *)((long)new_string_ptr + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(allocated_memory + 1) = 0x69;\n  *allocated_memory = 0x6570;\n  comparison_result = strcmp(arch,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)allocated_memory + 7) = 0x36;\n    *(undefined2 *)((long)allocated_memory + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(arch,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)allocated_memory + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(arch,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)allocated_memory + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *driver_name = (long)allocated_memory;\n  return return_value;\n}\n\n",
            "current_name": "extract_binary_prefix_info_00108c86",
            "entrypoint": "0x00108c86",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108c86": "extract_binary_prefix_info_00108c86",
                "__s": "input_string",
                "__s1": "arch",
                "bVar8": "flag",
                "cVar1": "starts_with_lto",
                "iVar2": "comparison_result",
                "lVar5": "offset",
                "param_1": "driver_name",
                "puVar4": "allocated_memory",
                "puVar6": "new_string_ptr",
                "sVar3": "string_length",
                "uVar7": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108d9a": {
            "additional_data": {
                "DAT_001278e8": {
                    "symbol_table_2": 1
                },
                "DAT_001278f0": {
                    "symbol_table_1": 1
                },
                "FUN_00108d9a": {
                    "check_and_insert_symbol": 1,
                    "check_redefined_symbol": 1,
                    "check_redefinition": 3,
                    "check_redefinitions": 2,
                    "check_symbol_redefined": 4,
                    "check_symbol_redefinition": 15,
                    "find_and_check_symbol": 1,
                    "find_symbol_redefinitions": 1,
                    "resolve_redefinition": 1,
                    "symbol_redefined_check": 1,
                    "validate_and_store_symbol": 1
                },
                "dcgettext": {
                    "get_error_message": 2,
                    "get_text": 1,
                    "get_translation": 3,
                    "translate_error_message": 1
                },
                "fatal": {
                    "display_fatal_error": 1,
                    "handle_fatal_error": 2,
                    "print_error": 1,
                    "report_error": 1,
                    "show_error_message": 1,
                    "terminate_program": 1
                },
                "htab_find": {
                    "find_in_hashtable": 1,
                    "find_symbol": 4,
                    "lookup_symbol": 1
                },
                "htab_find_slot": {
                    "find_empty_slot": 1,
                    "find_symbol_slot": 1
                },
                "lVar3": {
                    "redefinition_check": 1,
                    "result": 4,
                    "symbol_1_redefinition": 1,
                    "symbol_entry": 2,
                    "symbol_entry_address": 2,
                    "symbol_entry_result": 1,
                    "symbol_entry_value": 1,
                    "symbol_exists": 3,
                    "symbol_find_result": 2,
                    "symbol_found": 8,
                    "symbol_index": 1,
                    "symbol_redefinition": 2,
                    "symbol_redefinition_check": 1,
                    "symbol_result": 1,
                    "value": 1
                },
                "param_1": {
                    "context": 1,
                    "error_message": 13,
                    "error_msg": 1,
                    "file": 1,
                    "file_name": 5,
                    "file_path": 1,
                    "message": 3,
                    "msg_id": 1,
                    "param": 1,
                    "param1": 2,
                    "param_1": 1,
                    "param_string": 1
                },
                "param_2": {
                    "symbol": 1,
                    "symbol1": 1,
                    "symbol_1": 2,
                    "symbol_name": 18,
                    "symbol_name1": 5,
                    "symbol_name_1": 4
                },
                "param_3": {
                    "symbol2": 1,
                    "symbol_2": 2,
                    "symbol_name2": 5,
                    "symbol_name_2": 4,
                    "target": 1,
                    "target_name": 3,
                    "target_symbol": 15
                },
                "param_4": {
                    "param4": 2,
                    "param_4": 3,
                    "param_result": 1,
                    "result": 14,
                    "return_value": 11
                },
                "pcVar2": {
                    "copied_symbol_name": 1,
                    "dup_symbol_name": 3,
                    "duplicate_symbol": 7,
                    "duplicate_symbol_name": 3,
                    "str_duplicate": 2,
                    "str_symbol_name": 2,
                    "string_1": 1,
                    "symbol": 1,
                    "symbol_copy": 5,
                    "symbol_name": 2,
                    "symbol_name_copy": 2,
                    "symbol_name_dup": 1,
                    "temp_str": 1
                },
                "plVar5": {
                    "htab_ptr": 1,
                    "slot": 5,
                    "slot_data": 1,
                    "slot_pointer": 2,
                    "slot_ptr": 4,
                    "symbol_2_redefinition": 1,
                    "symbol_entry_slot": 2,
                    "symbol_slot": 14,
                    "target_entry_address": 1
                },
                "ppcVar1": {
                    "pointers_array": 1,
                    "string_pointers": 1,
                    "symbol_and_target": 2,
                    "symbol_array": 2,
                    "symbol_data": 3,
                    "symbol_entry": 5,
                    "symbol_info": 1,
                    "symbol_name_array": 1,
                    "symbol_name_ptr": 1,
                    "symbol_names": 5,
                    "symbol_pair": 1,
                    "symbol_pointers": 2,
                    "symbol_ptr_array": 1,
                    "symbol_redefinition": 2,
                    "symbol_references": 1,
                    "symbol_target_arr": 1,
                    "symbols": 1
                },
                "strdup": {
                    "duplicate_string": 3
                },
                "uVar4": {
                    "err_message": 1,
                    "error_message": 12,
                    "error_message_format": 1,
                    "error_msg": 3,
                    "error_string": 4,
                    "error_text": 3,
                    "gettext_domain": 1,
                    "message_result": 1,
                    "message_translation": 1,
                    "translation": 4
                },
                "xmalloc": {
                    "allocate_memory": 3
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240",
                "FUN_001047d0",
                "FUN_00104390",
                "FUN_001044a0",
                "FUN_00104880"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined8 check_symbol_redefinition_00108d9a(undefined8 error_message,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **symbol_names;\n  char *duplicate_symbol;\n  long symbol_found;\n  undefined8 error_message;\n  long *symbol_slot;\n  \n  symbol_names = (char **)allocate_memory(0x10);\n  duplicate_symbol = duplicate_string(symbol_name);\n  *symbol_names = duplicate_symbol;\n  duplicate_symbol = duplicate_string(target_symbol);\n  error_message = DAT_001278f0;\n  symbol_names[1] = duplicate_symbol;\n  symbol_found = find_symbol(error_message,symbol_names);\n  if (symbol_found != 0) {\n    error_message = get_translation(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    handle_fatal_error(error_message,error_message,symbol_name);\n  }\n  symbol_found = find_symbol(DAT_001278e8,target_symbol);\n  if (symbol_found != 0) {\n    error_message = get_translation(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    handle_fatal_error(error_message,error_message,target_symbol);\n  }\n  symbol_slot = (long *)find_symbol_slot(DAT_001278f0,symbol_names,1);\n  error_message = DAT_001278e8;\n  *symbol_slot = (long)symbol_names;\n  duplicate_symbol = symbol_names[1];\n  symbol_names = (char **)find_symbol_slot(error_message,duplicate_symbol,1);\n  *symbol_names = duplicate_symbol;\n  return result;\n}\n\n",
            "current_name": "check_symbol_redefinition_00108d9a",
            "entrypoint": "0x00108d9a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefinition_00108d9a",
                "dcgettext": "get_translation",
                "fatal": "handle_fatal_error",
                "htab_find": "find_symbol",
                "htab_find_slot": "find_symbol_slot",
                "lVar3": "symbol_found",
                "param_1": "error_message",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "pcVar2": "duplicate_symbol",
                "plVar5": "symbol_slot",
                "ppcVar1": "symbol_names",
                "strdup": "duplicate_string",
                "uVar4": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108e76": {
            "additional_data": {
                "FUN_00108e76": {
                    "convert_string_to_int": 1,
                    "convert_string_to_integer": 1,
                    "extract_digits": 1,
                    "extract_digits_from_string": 1,
                    "extract_integer_from_byte": 1,
                    "extract_integer_from_byte_array": 2,
                    "extract_integer_from_byte_sequence": 1,
                    "extract_integer_from_bytes": 2,
                    "extract_integer_from_string": 2,
                    "extract_number_from_param": 1,
                    "extract_number_from_string": 2,
                    "parse_decimal": 2,
                    "parse_digit_sequence": 1,
                    "parse_digits": 1,
                    "parse_int": 2,
                    "parse_integer": 6,
                    "parse_integer_from_string": 2,
                    "parse_number": 2
                },
                "_sch_istable": {
                    "character_table": 1
                },
                "bVar1": {
                    "ch": 1,
                    "current_byte": 20,
                    "current_char": 8,
                    "current_character": 1
                },
                "iVar2": {
                    "decimal_value": 1,
                    "extracted_integer": 3,
                    "extracted_number": 1,
                    "integer_value": 1,
                    "parsed_integer": 4,
                    "result": 20
                },
                "param_1": {
                    "byte_array": 5,
                    "byte_sequence": 1,
                    "byte_stream": 1,
                    "data": 1,
                    "data_ptr": 2,
                    "input": 5,
                    "input_buffer": 1,
                    "input_data": 3,
                    "input_ptr": 1,
                    "input_string": 1,
                    "str": 1,
                    "string": 1,
                    "string_pointer": 3,
                    "string_ptr": 3,
                    "string_to_extract": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559",
                "FUN_0010d21c"
            ],
            "code": "\nint parse_integer_from_string_00108e76(byte **input)\n\n{\n  byte current_byte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    current_byte = **input;\n    if (((&character_table)[(ulong)current_byte * 2] & 4) == 0) break;\n    *input = *input + 1;\n    result = result * 10 + -0x30 + (int)(char)current_byte;\n  }\n  return result;\n}\n\n",
            "current_name": "parse_integer_from_string_00108e76",
            "entrypoint": "0x00108e76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108e76": "parse_integer_from_string_00108e76",
                "_sch_istable": "character_table",
                "bVar1": "current_byte",
                "iVar2": "result",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108ea1": {
            "additional_data": {
                "FUN_00108ea1": {
                    "parse_and_convert_number": 1,
                    "parse_and_extract_integer": 1,
                    "parse_decimal": 1,
                    "parse_integer": 7,
                    "parse_integer_from_ascii": 1,
                    "parse_integer_from_string": 2,
                    "parse_integer_value": 1,
                    "parse_number": 11,
                    "parse_number_from_string": 6
                },
                "iVar1": {
                    "accumulator": 2,
                    "current_digit": 4,
                    "current_number": 1,
                    "current_value": 1,
                    "parsed_integer": 2,
                    "parsed_number": 2,
                    "partial_number": 1,
                    "result": 1,
                    "temp_number": 1,
                    "value_accumulator": 1
                },
                "param_1": {
                    "byte_array": 3,
                    "byte_array_ptr": 1,
                    "data": 1,
                    "input": 6,
                    "input_bytes": 1,
                    "input_data": 2,
                    "input_ptr": 6,
                    "input_str": 1,
                    "input_stream": 1,
                    "input_string_ptr": 1,
                    "string": 1,
                    "string_pointer": 1,
                    "string_ptr": 6
                },
                "param_2": {
                    "integer_value_ptr": 1,
                    "number_ptr": 2,
                    "output": 5,
                    "output_int": 1,
                    "output_integer": 3,
                    "output_num": 2,
                    "output_number": 2,
                    "output_value": 1,
                    "parsed_integer": 1,
                    "parsed_number": 4,
                    "parsed_result": 1,
                    "result": 3,
                    "result_ptr": 5
                },
                "pbVar2": {
                    "byte_ptr": 1,
                    "curr_char_ptr": 1,
                    "current_byte": 10,
                    "current_byte_ptr": 1,
                    "current_char": 10,
                    "current_char_ptr": 4,
                    "current_ptr": 1,
                    "input": 1,
                    "stream_pointer": 1,
                    "string": 1
                },
                "pbVar3": {
                    "current_char": 1,
                    "next_byte": 10,
                    "next_byte_ptr": 2,
                    "next_char": 10,
                    "next_char_ptr": 5,
                    "next_input": 1,
                    "next_pointer": 1,
                    "next_ptr": 1
                },
                "uVar4": {
                    "concatenated_result": 1,
                    "output": 1,
                    "parsed_value": 4,
                    "result": 21,
                    "return_value": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "code": "\nulong parse_number_from_string_00108ea1(byte **string_ptr,int *output)\n\n{\n  int current_digit;\n  byte *current_char;\n  byte *next_char;\n  ulong result;\n  \n  current_char = *string_ptr;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_char * 2] & 4) != 0) {\n    next_char = current_char + 1;\n    current_digit = (char)*current_char + -0x30;\n    *output = current_digit;\n    *string_ptr = next_char;\n    if (((&_sch_istable)[(ulong)current_char[1] * 2] & 4) != 0) {\n      do {\n        current_char = next_char;\n        current_digit = current_digit * 10 + -0x30 + (int)(char)*current_char;\n        next_char = current_char + 1;\n      } while (((&_sch_istable)[(ulong)current_char[1] * 2] & 4) != 0);\n      if (current_char[1] == 0x5f) {\n        next_char = current_char + 2;\n        *string_ptr = next_char;\n        *output = current_digit;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_char >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "current_name": "parse_number_from_string_00108ea1",
            "entrypoint": "0x00108ea1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108ea1": "parse_number_from_string_00108ea1",
                "iVar1": "current_digit",
                "param_1": "string_ptr",
                "param_2": "output",
                "pbVar2": "current_char",
                "pbVar3": "next_char",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108f05": {
            "additional_data": {
                "DAT_": {
                    "dat": 1
                },
                "FUN_00108f05": {
                    "calculate_result": 1,
                    "check_if_greater_than_zero": 1,
                    "check_if_valid": 1,
                    "count_success": 1,
                    "get_one": 17,
                    "get_return_value": 5,
                    "get_true": 1,
                    "initialize_flag": 1,
                    "is_always_true": 1,
                    "is_function_always_returning_one": 1,
                    "is_one": 1
                },
                "PTR_": {
                    "ptr": 1
                },
                "PTR_void": {
                    "void_ptr": 1
                },
                "undefined": {
                    "int": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nint get_one_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "current_name": "get_one_00108f05",
            "entrypoint": "0x00108f05",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108f05": "get_one_00108f05",
                "undefined": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108f08": {
            "additional_data": {
                "FUN_00108f08": {
                    "add_debug_source": 1,
                    "add_source_file": 8,
                    "debug_start_source": 3,
                    "find_and_add_filename": 1,
                    "find_and_add_source_file": 1,
                    "find_debug_source": 4,
                    "find_source_in_debug_info": 1,
                    "register_source_file": 1,
                    "source_debug": 1,
                    "source_debug_start": 1,
                    "source_debugger": 3,
                    "source_debugging": 1,
                    "start_source_debugging": 1,
                    "update_debug_source": 1,
                    "update_file_list": 1,
                    "update_source_file": 1,
                    "update_source_file_path": 1
                },
                "bVar9": {
                    "boolean_flag": 1,
                    "byte_flag": 2,
                    "byte_value": 5,
                    "count": 1,
                    "counter": 5,
                    "default_value": 1,
                    "flag": 7,
                    "i_var": 1,
                    "is_first_iteration": 1,
                    "iterator": 1,
                    "offset": 2,
                    "padding_byte": 1,
                    "toggle": 1,
                    "zero_byte": 1
                },
                "iVar1": {
                    "cmp_result": 11,
                    "comparison": 1,
                    "comparison_result": 15,
                    "filename_comparison": 1,
                    "filename_comparison_result": 1
                },
                "lVar5": {
                    "count": 2,
                    "counter": 3,
                    "i": 1,
                    "loop_count": 2,
                    "loop_counter": 19,
                    "loop_var": 2,
                    "loop_variable": 1,
                    "temp_value": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 1,
                    "context": 1,
                    "debug_context": 2,
                    "debug_data": 3,
                    "debug_info": 3,
                    "debugger_handle": 1,
                    "file_list": 1,
                    "param": 1,
                    "source_context": 1,
                    "source_debug_info": 1,
                    "source_debugging_param": 1,
                    "source_file_list": 2,
                    "source_file_manager": 1,
                    "source_files": 1,
                    "source_handle": 1,
                    "source_list": 3,
                    "source_list_ptr": 1,
                    "source_manager": 4,
                    "source_manager_ptr": 1
                },
                "param_2": {
                    "file_name": 1,
                    "filename": 29,
                    "source_file_path": 1
                },
                "pcVar7": {
                    "current_file": 2,
                    "current_file_path": 1,
                    "current_filename": 14,
                    "debug_filename": 1,
                    "default_file_name": 1,
                    "default_filename": 2,
                    "empty_string": 1,
                    "file_name_ptr": 1,
                    "filename_to_check": 1,
                    "filename_to_find": 2,
                    "resolved_filename": 1,
                    "selected_file_name": 1,
                    "selected_filename": 2,
                    "temp_ptr": 1
                },
                "puVar3": {
                    "current_entry": 5,
                    "current_file": 5,
                    "current_filename": 1,
                    "current_item": 1,
                    "current_node": 4,
                    "current_source_file": 1,
                    "debug_files": 1,
                    "debug_files_list": 1,
                    "debug_info_files": 1,
                    "file_entry": 1,
                    "file_node": 1,
                    "iterator": 1,
                    "new_source_file": 1,
                    "node": 1,
                    "source": 1,
                    "source_entry": 1,
                    "source_file": 2,
                    "source_link": 1,
                    "source_list": 1
                },
                "puVar4": {
                    "current_entry": 1,
                    "current_file": 3,
                    "current_node": 2,
                    "current_source_file": 1,
                    "next_entry": 2,
                    "next_file": 1,
                    "next_link": 1,
                    "next_node": 2,
                    "prev_file": 1,
                    "prev_node": 1,
                    "prev_source": 1,
                    "previous_entry": 3,
                    "previous_item": 1,
                    "previous_node": 1,
                    "temp_entry": 2,
                    "temp_file": 1,
                    "temp_iterator": 1,
                    "temp_pointer": 3,
                    "temp_ptr": 1,
                    "temp_var": 2
                },
                "puVar6": {
                    "current_node": 1,
                    "debug_file": 1,
                    "debug_files_tail": 1,
                    "debug_info_ptr": 1,
                    "debug_source_list": 1,
                    "debug_symbol": 1,
                    "file_list": 2,
                    "file_list_head": 1,
                    "first_node": 1,
                    "first_node_address": 1,
                    "first_source_file": 1,
                    "head": 3,
                    "head_entry": 1,
                    "head_file": 1,
                    "head_node": 2,
                    "head_pointer": 2,
                    "list_head": 1,
                    "source_file_list_ptr": 1,
                    "source_files_list": 1,
                    "source_list": 3,
                    "source_list_base": 1,
                    "source_list_ptr": 1,
                    "start_of_file_manager": 1,
                    "temp_ptr": 1
                },
                "puVar8": {
                    "current_file_ptr": 1,
                    "current_link": 1,
                    "current_node": 1,
                    "last_entry": 3,
                    "last_file": 2,
                    "last_iterator": 1,
                    "last_node": 2,
                    "last_node_address": 1,
                    "last_source_file": 1,
                    "new_entry": 1,
                    "new_file": 1,
                    "new_file_ptr": 1,
                    "new_item": 1,
                    "new_node": 1,
                    "new_source": 1,
                    "next_file": 1,
                    "prev_entry": 2,
                    "prev_source_file": 1,
                    "previous_entry": 2,
                    "previous_node": 2,
                    "tail_pointer": 2,
                    "temp": 1,
                    "temp_node": 1
                },
                "uVar2": {
                    "error_msg": 1,
                    "result": 18,
                    "return_val": 1,
                    "return_value": 4,
                    "status": 1,
                    "success": 4,
                    "success_flag": 2
                }
            },
            "called": [
                "FUN_001041a0",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8 find_and_add_source_file_00108f08(long source_manager,char *filename)\n\n{\n  int comparison_result;\n  undefined8 result;\n  undefined8 *current_file;\n  undefined8 *current_file;\n  long loop_counter;\n  undefined8 *source_list;\n  char *current_filename;\n  undefined8 *last_entry;\n  byte flag;\n  \n  flag = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(source_manager + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (current_file = *(undefined8 **)(*(long *)(source_manager + 8) + 8); current_file != (undefined8 *)0x0;\n        current_file = (undefined8 *)*current_file) {\n      comparison_result = filename_cmp(current_file[1],current_filename);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    current_file = (undefined8 *)xmalloc(0x18);\n    source_list = *(undefined8 **)(source_manager + 0x10);\n    last_entry = current_file;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)last_entry = 0;\n      last_entry = (undefined8 *)((long)last_entry + (ulong)flag * -8 + 4);\n    }\n    current_file[1] = current_filename;\n    last_entry = (undefined8 *)*source_list;\n    while (current_file = last_entry, current_file != (undefined8 *)0x0) {\n      source_list = current_file;\n      last_entry = (undefined8 *)*current_file;\n    }\n    *source_list = current_file;\nLAB_00108fad:\n    *(undefined8 **)(source_manager + 0x10) = current_file;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "find_and_add_source_file_00108f08",
            "entrypoint": "0x00108f08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108f08": "find_and_add_source_file_00108f08",
                "bVar9": "flag",
                "iVar1": "comparison_result",
                "lVar5": "loop_counter",
                "param_1": "source_manager",
                "param_2": "filename",
                "pcVar7": "current_filename",
                "puVar3": "current_file",
                "puVar4": "current_file",
                "puVar6": "source_list",
                "puVar8": "last_entry",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108fb9": {
            "additional_data": {
                "FUN_00108fb9": {
                    "print_bad_stab": 13,
                    "print_bad_stab_error": 3,
                    "print_bad_stab_error_message": 2,
                    "print_bad_stab_message": 1,
                    "print_bad_stab_string": 1,
                    "print_error": 3,
                    "print_error_message": 8
                },
                "__format": {
                    "error_format": 7,
                    "error_message": 3,
                    "error_message_format": 3,
                    "format": 1,
                    "format_string": 13,
                    "message_format": 2,
                    "message_template": 1
                },
                "param_1": {
                    "bad_stab_string": 1,
                    "error_message": 16,
                    "message": 1,
                    "stab": 6,
                    "stab_error": 1,
                    "stab_message": 2,
                    "stab_name": 1,
                    "stab_string": 3
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00109ab1",
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid print_bad_stab_error_message_00108fb9(undefined8 error_message)\n\n{\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,format_string,error_message);\n  return;\n}\n\n",
            "current_name": "print_bad_stab_error_message_00108fb9",
            "entrypoint": "0x00108fb9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_error_message_00108fb9",
                "__format": "format_string",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108fe8": {
            "additional_data": {
                "FUN_00108fe8": {
                    "print_warning": 28,
                    "print_warning_message": 3
                },
                "__format": {
                    "format": 2,
                    "format_string": 18,
                    "warning_format": 10,
                    "warning_message": 1
                },
                "_stderr": {
                    "error_output": 2,
                    "error_stream": 1
                },
                "in_RAX": {
                    "error_code": 1,
                    "error_type": 1,
                    "format_specifier": 3,
                    "format_string": 1,
                    "placeholder": 1,
                    "rax": 1,
                    "rax_value": 3,
                    "result": 4,
                    "return_value": 4,
                    "temp": 1
                },
                "param_1": {
                    "error_message": 6,
                    "file": 3,
                    "file_name": 3,
                    "first_parameter": 1,
                    "message": 10,
                    "message1": 4,
                    "message_1": 2,
                    "warning_message": 2
                },
                "param_2": {
                    "description": 1,
                    "error_message": 4,
                    "file_name": 3,
                    "filename": 2,
                    "message": 3,
                    "message2": 4,
                    "message_2": 2,
                    "second_parameter": 1,
                    "source": 7,
                    "source_file": 2,
                    "subsystem": 1,
                    "warning_message": 1
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00109a32"
            ],
            "code": "\n\n\nvoid print_warning_message_00108fe8(undefined8 message,undefined8 source)\n\n{\n  undefined8 return_value;\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(error_output,format_string,source,message,return_value);\n  return;\n}\n\n",
            "current_name": "print_warning_message_00108fe8",
            "entrypoint": "0x00108fe8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108fe8": "print_warning_message_00108fe8",
                "__format": "format_string",
                "_stderr": "error_output",
                "in_RAX": "return_value",
                "param_1": "message",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109022": {
            "additional_data": {
                "FUN_00109022": {
                    "extract_data": 1,
                    "extract_file_info": 3,
                    "extract_file_number": 1,
                    "extract_type": 1,
                    "extract_type_from_file": 2,
                    "get_file_from_index": 1,
                    "get_file_metadata": 1,
                    "get_file_type": 1,
                    "get_file_type_info": 1,
                    "process_file": 7,
                    "process_file_data": 1,
                    "process_file_number": 1,
                    "process_file_type": 1,
                    "process_type_file": 2,
                    "validate_and_allocate_file": 1,
                    "validate_and_allocate_memory": 2,
                    "validate_and_allocate_memory_for_type": 1,
                    "validate_and_allocate_type": 1,
                    "validate_and_allocate_type_file": 1,
                    "validate_and_get_file": 1
                },
                "auVar8": {
                    "result": 9,
                    "result_array": 1,
                    "return_data": 1,
                    "return_struct": 1,
                    "return_value": 15,
                    "return_var": 1
                },
                "bVar7": {
                    "byte_counter": 1,
                    "byte_value": 6,
                    "byte_var": 14,
                    "byte_variable": 1,
                    "dummy_byte": 1,
                    "flag": 1,
                    "loop_flag": 1,
                    "temp_byte": 2,
                    "unused3": 1,
                    "var3": 1,
                    "zero_byte": 1
                },
                "lVar4": {
                    "counter": 1,
                    "loop_count": 2,
                    "loop_counter": 23,
                    "loop_index": 1,
                    "loop_var": 3,
                    "var2": 1
                },
                "param_1": {
                    "base_address": 1,
                    "binary_data": 1,
                    "file_count": 4,
                    "file_data": 2,
                    "file_handle": 3,
                    "file_handler": 1,
                    "file_index": 1,
                    "file_info": 1,
                    "file_info_buffer": 1,
                    "file_length": 1,
                    "file_manager": 1,
                    "file_num": 1,
                    "file_number": 7,
                    "file_offset": 1,
                    "file_size": 1,
                    "file_table": 2,
                    "input_buffer": 1,
                    "param1": 1
                },
                "param_2": {
                    "file_data": 1,
                    "file_indexes": 2,
                    "file_indices": 3,
                    "file_numbers": 6,
                    "file_type_indexes": 1,
                    "param2": 1,
                    "type_file": 1,
                    "type_index": 7,
                    "type_indexes": 4,
                    "type_indices": 3,
                    "type_numbers": 1
                },
                "param_3": {
                    "arg1": 4,
                    "arg3": 2,
                    "arg_3": 1,
                    "data1": 1,
                    "param1": 1,
                    "param3": 9,
                    "param_3": 6,
                    "ptr1": 1,
                    "unused1": 1,
                    "unused_param1": 1,
                    "unused_param_3": 1,
                    "var1": 1,
                    "var3": 2
                },
                "param_4": {
                    "arg2": 4,
                    "arg4": 2,
                    "arg_4": 1,
                    "data2": 1,
                    "param2": 1,
                    "param4": 9,
                    "param_4": 6,
                    "ptr2": 1,
                    "unused2": 1,
                    "unused_param2": 1,
                    "unused_param_4": 1,
                    "var2": 1,
                    "var4": 2
                },
                "pcVar2": {
                    "err_msg": 2,
                    "error_message": 27,
                    "error_msg": 2
                },
                "plVar3": {
                    "allocated_memory": 7,
                    "data_pointer": 1,
                    "extracted_data": 1,
                    "file_address": 1,
                    "file_data": 2,
                    "file_info": 3,
                    "file_ptr": 1,
                    "file_type": 1,
                    "metadata": 1,
                    "result": 5,
                    "type_data": 3,
                    "type_file": 1,
                    "type_info": 1,
                    "type_pointer": 1,
                    "type_ptr": 1,
                    "var1": 1
                },
                "pplVar6": {
                    "allocated_memory_ptr": 1,
                    "file_data_ptr": 1,
                    "file_pointer_list": 1,
                    "file_ptr": 3,
                    "file_ptr_ptr": 1,
                    "file_ptrs": 1,
                    "file_types": 1,
                    "memory_block": 1,
                    "metadata_pointer": 1,
                    "pointer_array": 1,
                    "pointer_pointer": 1,
                    "prev_ptr": 1,
                    "ptr_to_file_info": 1,
                    "type_array": 1,
                    "type_array_ptr": 1,
                    "type_chain": 1,
                    "type_file_ptr": 1,
                    "type_index_ptr": 1,
                    "type_link": 1,
                    "type_list": 1,
                    "type_pointer_pointer": 1,
                    "type_pointers": 1,
                    "type_ptr": 2,
                    "type_ptrs": 2,
                    "type_table": 1,
                    "var2": 1,
                    "var_array": 1
                },
                "uVar1": {
                    "current_type_index": 1,
                    "file_index": 5,
                    "file_number": 4,
                    "file_type_index": 1,
                    "index": 2,
                    "index_number": 1,
                    "type_count": 2,
                    "type_file_number": 1,
                    "type_index": 7,
                    "type_index1": 1,
                    "type_index_high": 1,
                    "type_index_lower": 1,
                    "type_index_overflow": 1,
                    "type_index_ptr": 1,
                    "type_index_value": 1,
                    "type_number": 1
                },
                "uVar5": {
                    "file_index": 3,
                    "file_number": 5,
                    "file_number1": 1,
                    "file_number_value": 1,
                    "index_number": 3,
                    "loop_length": 1,
                    "loop_limit": 1,
                    "num_files": 1,
                    "num_types": 1,
                    "remaining_indexes": 1,
                    "temp": 1,
                    "type_id": 1,
                    "type_index": 7,
                    "type_index_low": 1,
                    "type_index_number": 1,
                    "type_index_upper": 1,
                    "var1": 1
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nundefined  [16] process_file_type_00109022(long file_number,uint *type_index,undefined8 param3,undefined8 param4)\n\n{\n  uint type_index;\n  char *error_message;\n  long *allocated_memory;\n  long loop_counter;\n  uint type_index;\n  long **file_ptr;\n  byte byte_var;\n  undefined return_value [16];\n  \n  byte_var = 0;\n  type_index = *type_index;\n  type_index = type_index[1];\n  if (((int)type_index < 0) || (*(uint *)(file_number + 0x80) <= type_index)) {\n    error_message = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_index);\n  }\n  else {\n    if (-1 < (int)type_index) {\n      file_ptr = (long **)(*(long *)(file_number + 0x88) + (long)(int)type_index * 8);\n      for (type_index = type_index; 0xf < (int)type_index; type_index = type_index - 0x10) {\n        if (*file_ptr == (long *)0x0) {\n          allocated_memory = (long *)xmalloc(0x88);\n          *file_ptr = allocated_memory;\n          for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n            *(undefined4 *)allocated_memory = 0;\n            allocated_memory = (long *)((long)allocated_memory + (ulong)byte_var * -8 + 4);\n          }\n        }\n        file_ptr = (long **)*file_ptr;\n      }\n      if (*file_ptr == (long *)0x0) {\n        allocated_memory = (long *)xmalloc(0x88);\n        *file_ptr = allocated_memory;\n        for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *(undefined4 *)allocated_memory = 0;\n          allocated_memory = (long *)((long)allocated_memory + (ulong)byte_var * -8 + 4);\n        }\n      }\n      allocated_memory = *file_ptr + (long)(int)((type_index >> 4) * -0x10 + type_index) + 1;\n      goto LAB_00109117;\n    }\n    error_message = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_index);\n  }\n  allocated_memory = (long *)0x0;\nLAB_00109117:\n  return_value._8_8_ = param4;\n  return_value._0_8_ = allocated_memory;\n  return return_value;\n}\n\n",
            "current_name": "process_file_type_00109022",
            "entrypoint": "0x00109022",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109022": "process_file_type_00109022",
                "auVar8": "return_value",
                "bVar7": "byte_var",
                "lVar4": "loop_counter",
                "param_1": "file_number",
                "param_2": "type_index",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar2": "error_message",
                "plVar3": "allocated_memory",
                "pplVar6": "file_ptr",
                "uVar1": "type_index",
                "uVar5": "type_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010911f": {
            "additional_data": {
                "FUN_0010911f": {
                    "print_bad_mangled_name": 1,
                    "print_error": 2,
                    "print_error_message": 28
                },
                "__format": {
                    "error_format": 4,
                    "error_message": 1,
                    "error_message_format": 3,
                    "format_string": 18,
                    "message_format": 5
                },
                "param_1": {
                    "error_message": 18,
                    "input": 1,
                    "mangled_name": 4,
                    "message": 8
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "code": "\n\n\nvoid print_error_message_0010911f(undefined8 error_message)\n\n{\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,format_string,error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010911f",
            "entrypoint": "0x0010911f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "__format": "format_string",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010914e": {
            "additional_data": {
                "FUN_0010914e": {
                    "find_named_type": 31
                },
                "auVar7": {
                    "output": 1,
                    "result": 17,
                    "return_value": 11
                },
                "iVar2": {
                    "cmp_result": 3,
                    "comparison_result": 24,
                    "result": 2,
                    "string_compare_result": 1,
                    "string_comparison_result": 1
                },
                "lVar1": {
                    "compilation_unit": 2,
                    "compilation_unit_value": 1,
                    "cur_compilation_unit": 1,
                    "current_comp_unit": 1,
                    "current_compilation_unit": 8,
                    "current_cu": 1,
                    "current_cunit": 1,
                    "current_unit": 13,
                    "current_unit_address": 1,
                    "current_unit_ptr": 1,
                    "unit_data": 1
                },
                "lVar5": {
                    "current_data": 1,
                    "current_element": 1,
                    "current_element_2": 2,
                    "current_entry": 2,
                    "current_entry_address": 1,
                    "current_list": 3,
                    "current_symbol_value": 1,
                    "current_type": 1,
                    "element": 1,
                    "element_list": 1,
                    "element_pointer": 1,
                    "entry_address": 1,
                    "entry_list": 1,
                    "entry_pointer": 1,
                    "iterator": 1,
                    "list1": 1,
                    "list_header": 1,
                    "list_node": 1,
                    "loop_var1": 1,
                    "node": 1,
                    "node_ptr": 1,
                    "ptr": 1,
                    "ptr1": 1,
                    "ptr2": 1,
                    "var5": 2,
                    "var_address": 1
                },
                "param_1": {
                    "base_address": 1,
                    "compilation_unit": 24,
                    "compilation_units": 1,
                    "data_structure": 1,
                    "input_struct": 1,
                    "param": 1,
                    "unit": 1,
                    "unit_address": 1
                },
                "param_2": {
                    "name": 3,
                    "type_name": 28
                },
                "param_3": {
                    "arg3": 5,
                    "arg_3": 1,
                    "deprecated": 1,
                    "ignored_param_1": 1,
                    "msg": 1,
                    "output_stream": 1,
                    "param3": 1,
                    "param_3": 4,
                    "ptr_3": 2,
                    "stdout": 2,
                    "stream_1": 1,
                    "string_var": 1,
                    "unknown_param_1": 1,
                    "unused_param": 1,
                    "unused_param3": 1,
                    "unused_param_1": 1,
                    "unused_param_3": 2,
                    "var1": 1,
                    "var3": 1,
                    "var_1": 1,
                    "var_3": 1
                },
                "param_4": {
                    "ambiguous_type": 1,
                    "arg4": 5,
                    "arg_4": 1,
                    "default_value": 1,
                    "ignored_param_2": 1,
                    "output": 1,
                    "param4": 1,
                    "param_4": 4,
                    "ptr_4": 2,
                    "result": 2,
                    "stderr": 1,
                    "stream_2": 1,
                    "unknown_param_2": 1,
                    "unused": 1,
                    "unused_param4": 1,
                    "unused_param_2": 1,
                    "unused_param_4": 2,
                    "var2": 1,
                    "var4": 1,
                    "var_2": 1,
                    "var_4": 1
                },
                "puVar4": {
                    "curr_type": 1,
                    "current": 1,
                    "current_element": 5,
                    "current_entry": 4,
                    "current_item": 2,
                    "current_list": 1,
                    "current_list_node": 1,
                    "current_node": 1,
                    "current_ptr": 1,
                    "current_symbol": 1,
                    "current_var": 1,
                    "element_ptr": 1,
                    "entry": 1,
                    "list_ptr": 1,
                    "list_ptr1": 1,
                    "nested_var_1": 1,
                    "ptr1": 3,
                    "ptr_node": 1,
                    "ptr_var4": 1,
                    "type_iterator": 1,
                    "type_list": 1
                },
                "puVar6": {
                    "compilation_unit_entry": 1,
                    "compilation_unit_iterator": 1,
                    "compilation_unit_node": 1,
                    "cur_entry": 1,
                    "current_compilation_unit": 1,
                    "current_element_3": 1,
                    "current_entry": 1,
                    "current_item_2": 2,
                    "current_ptr_node": 1,
                    "current_unit": 1,
                    "current_unit_2": 1,
                    "current_unit_element": 3,
                    "current_unit_var": 1,
                    "list_ptr2": 1,
                    "nested_var_2": 1,
                    "next_current": 1,
                    "ptr2": 3,
                    "ptr3": 1,
                    "ptr_var6": 1,
                    "unit_entry": 2,
                    "unit_header": 1,
                    "unit_list": 1,
                    "unit_node": 1,
                    "unit_ptr": 1,
                    "var": 1
                },
                "uVar3": {
                    "error_message": 24,
                    "error_msg": 4,
                    "message": 2,
                    "translation": 1
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00104470",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559"
            ],
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 arg3,undefined8 arg4)\n\n{\n  long current_unit;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *current_element;\n  long current_list;\n  undefined8 *current_unit_element;\n  undefined result [16];\n  \n  current_unit = *(long *)(compilation_unit + 8);\n  if (current_unit == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (current_list = *(long *)(compilation_unit + 0x20); current_list != 0; current_list = *(long *)(current_list + 8)) {\n      if (*(undefined8 **)(current_list + 0x28) != (undefined8 *)0x0) {\n        for (current_element = (undefined8 *)**(undefined8 **)(current_list + 0x28); current_element != (undefined8 *)0x0;\n            current_element = (undefined8 *)*current_element) {\n          if (*(int *)((long)current_element + 0x14) == 0) {\n            if (*(char *)current_element[1] == *type_name) {\n              comparison_result = strcmp((char *)current_element[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (current_unit_element = *(undefined8 **)(current_unit + 8); current_unit_element != (undefined8 *)0x0;\n        current_unit_element = (undefined8 *)*current_unit_element) {\n      if ((undefined8 *)current_unit_element[2] != (undefined8 *)0x0) {\n        for (current_element = *(undefined8 **)(undefined8 *)current_unit_element[2]; current_element != (undefined8 *)0x0;\n            current_element = (undefined8 *)*current_element) {\n          if (*(int *)((long)current_element + 0x14) == 0) {\n            if (*(char *)current_element[1] == *type_name) {\n              comparison_result = strcmp((char *)current_element[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  result._8_8_ = arg4;\n  result._0_8_ = error_message;\n  return result;\nLAB_00109216:\n  error_message = current_element[4];\n  goto LAB_00109223;\n}\n\n",
            "current_name": "find_named_type_0010914e",
            "entrypoint": "0x0010914e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "auVar7": "result",
                "iVar2": "comparison_result",
                "lVar1": "current_unit",
                "lVar5": "current_list",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar4": "current_element",
                "puVar6": "current_unit_element",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010922b": {
            "additional_data": {
                "FUN_0010922b": {
                    "check_equality": 5,
                    "compare_components": 1,
                    "compare_data": 1,
                    "compare_function": 1,
                    "compare_objects": 2,
                    "compare_params": 2,
                    "compare_values": 19
                },
                "FUN_0010922b_B": {
                    "b": 1
                },
                "FUN_0010922b_C": {
                    "c": 1
                },
                "FUN_0010922b_I": {
                    "i": 1
                },
                "FUN_0010922b_L": {
                    "l": 1
                },
                "FUN_0010922b_L1": {
                    "l1": 1
                },
                "FUN_0010922b_L2": {
                    "l2": 1
                },
                "FUN_0010922b_L3": {
                    "l3": 1
                },
                "FUN_0010922b_LEFT": {
                    "left_value": 1
                },
                "FUN_0010922b_PARAM_1": {
                    "param_1": 1
                },
                "FUN_0010922b_PARAM_2": {
                    "value1": 1
                },
                "FUN_0010922b_PARAM_3": {
                    "value2": 1
                },
                "FUN_0010922b_PC": {
                    "pc": 1
                },
                "FUN_0010922b_PC_COUNT": {
                    "pc_count": 1
                },
                "FUN_0010922b_PC_VALUE": {
                    "pc_value": 1
                },
                "FUN_0010922b_PU": {
                    "ptr": 1
                },
                "FUN_0010922b_PU_COUNT": {
                    "ptr_count": 1
                },
                "FUN_0010922b_PU_VALUE": {
                    "ptr_value": 1
                },
                "FUN_0010922b_R": {
                    "compare_values_with": 1
                },
                "FUN_0010922b_RESULT": {
                    "result": 1
                },
                "FUN_0010922b_RIGHT": {
                    "right_value": 1
                },
                "FUN_0010922b_SWITCH": {
                    "case_value": 1
                },
                "FUN_0010922b_U1": {
                    "u1": 1
                },
                "FUN_0010922b_U2": {
                    "u2": 1
                },
                "FUN_0010922b_VAR": {
                    "var": 1
                },
                "FUN_0010922b_new": {
                    "compare_values": 1
                },
                "FUN_0010922b_original": {
                    "compare_values": 1
                },
                "FUN_0010922b_param_1": {
                    "param_obj": 1
                },
                "FUN_0010922b_param_2": {
                    "obj1": 1
                },
                "FUN_0010922b_param_3": {
                    "obj2": 1
                },
                "FUN_00112b6e": {
                    "compare_integers": 1,
                    "compare_lists": 1,
                    "copy_values": 1,
                    "determine_function_size": 1,
                    "find_index": 3,
                    "find_match": 3,
                    "find_value": 7,
                    "get_common_elements": 1,
                    "get_pointer_offset": 1,
                    "merge_arrays": 2,
                    "modify_array": 1,
                    "modify_data": 1,
                    "process_values": 1,
                    "sort_array": 2,
                    "update_array": 1,
                    "update_pointer": 1,
                    "update_value_list": 1
                },
                "FUN_00112b6e_new": {
                    "find_value": 1
                },
                "FUN_00112b6e_original": {
                    "find_value": 1
                },
                "bVar12": {
                    "bool_result": 1,
                    "boolean": 1,
                    "boolean_result": 2,
                    "byte_result": 1,
                    "byte_var": 1,
                    "compare_result": 1,
                    "comparison_bool": 1,
                    "is_equal": 7,
                    "is_match": 3,
                    "is_true": 1,
                    "result": 6,
                    "return_byte": 1
                },
                "byte": {
                    "bool": 1
                },
                "cVar11": {
                    "char_var": 2,
                    "comp_result": 1,
                    "compare_result": 2,
                    "comparison_result": 8,
                    "is_equal": 1,
                    "result": 10,
                    "return_char": 1,
                    "temp_char": 1
                },
                "char": {
                    "char": 1
                },
                "compareComponents": {
                    "are_components_equal": 1
                },
                "iVar13": {
                    "compare_result": 1,
                    "comparison": 2,
                    "comparison_int": 1,
                    "comparison_result": 5,
                    "comparison_result2": 2,
                    "int_result": 1,
                    "int_val": 1,
                    "int_value": 1,
                    "int_var": 4,
                    "loop_var13": 1,
                    "result_int": 1,
                    "strcmp_result": 2,
                    "string_compare_result": 1,
                    "string_comparison_result": 2,
                    "temp_int": 1
                },
                "lVar19": {
                    "comparison_long": 1,
                    "counter": 1,
                    "current_offset": 1,
                    "i": 4,
                    "index": 2,
                    "l_value4": 1,
                    "l_value_4": 1,
                    "l_var19": 1,
                    "long_var4": 3,
                    "long_var6": 1,
                    "loop_index": 1,
                    "loop_var19": 1,
                    "nested_pointer_offset": 1,
                    "size4": 1,
                    "val6": 1,
                    "var19": 1,
                    "var4": 2,
                    "var_19": 1
                },
                "lVar22": {
                    "array_element": 1,
                    "comparison_long2": 1,
                    "i": 1,
                    "index": 2,
                    "j": 1,
                    "l_value5": 1,
                    "l_value_5": 1,
                    "l_var22": 1,
                    "l_var_for_loop": 1,
                    "l_var_offset": 1,
                    "long_var5": 3,
                    "long_var7": 1,
                    "loop_var22": 1,
                    "offset": 2,
                    "size5": 1,
                    "temp_long_4": 1,
                    "val7": 1,
                    "var22": 1,
                    "var5": 1,
                    "var_22": 1
                },
                "lVar6": {
                    "array1_value1": 1,
                    "l_value1": 1,
                    "l_value_1": 1,
                    "l_var1": 1,
                    "len1": 1,
                    "length1": 1,
                    "long6": 1,
                    "long_var1": 4,
                    "loop_var6": 1,
                    "pointer_address1": 1,
                    "pointer_value1": 1,
                    "size1": 2,
                    "temp_long_1": 1,
                    "val": 1,
                    "val3": 1,
                    "value1_l_var": 2,
                    "value2_temp": 1,
                    "var1": 2,
                    "var6": 1,
                    "var_6": 1
                },
                "lVar7": {
                    "array1_value2": 1,
                    "l_value2": 1,
                    "l_value_2": 1,
                    "l_var2": 1,
                    "len2": 1,
                    "length3": 1,
                    "long7": 1,
                    "long_var2": 4,
                    "loop_var7": 1,
                    "nested_pointer1_offset": 1,
                    "offset1": 1,
                    "other_pointer_address1": 1,
                    "ptr_value1_temp": 1,
                    "size2": 1,
                    "temp_long_2": 1,
                    "val": 1,
                    "val4": 1,
                    "value1_1_l_var": 1,
                    "value1_2_l_var": 1,
                    "var2": 2,
                    "var7": 1,
                    "var_7": 1
                },
                "lVar8": {
                    "array2_value2": 1,
                    "l_value3": 1,
                    "l_value_3": 1,
                    "l_var3": 1,
                    "len2": 1,
                    "length4": 1,
                    "long8": 1,
                    "long_var3": 4,
                    "loop_var8": 1,
                    "nested_pointer2_offset": 1,
                    "offset2": 1,
                    "other_pointer_address2": 1,
                    "ptr_value2_temp": 1,
                    "size3": 1,
                    "temp_long_3": 1,
                    "val": 1,
                    "val5": 1,
                    "value2_1_l_var": 1,
                    "value2_2_l_var": 1,
                    "var3": 2,
                    "var8": 1,
                    "var_8": 1
                },
                "local_48": {
                    "arg2_current_stack_val": 1,
                    "array2_ptr2": 1,
                    "array_5": 1,
                    "array_ptr2": 1,
                    "current_pointer2": 1,
                    "list_ptr2": 1,
                    "local_array3": 1,
                    "local_list2": 1,
                    "local_param_3": 1,
                    "local_ptr": 1,
                    "local_ptr2": 1,
                    "local_ptr_array": 1,
                    "local_ptr_to_long2": 1,
                    "local_ptr_value": 1,
                    "local_value": 1,
                    "local_var1": 1,
                    "long_var9": 1,
                    "nested_pointer2": 1,
                    "pointer": 1,
                    "ptr6": 1,
                    "ptr_array3": 1,
                    "ptr_b": 1,
                    "stack_value2": 1,
                    "value2_local2": 1,
                    "value_list": 1
                },
                "local_58": {
                    "linked_list": 2,
                    "linked_pointer": 1,
                    "list_ptr": 3,
                    "local_array2": 1,
                    "local_array_ptr": 1,
                    "local_list_ptr": 1,
                    "local_pointer": 1,
                    "local_pointer2": 1,
                    "local_ptr": 2,
                    "local_ptr3": 1,
                    "local_ptr_to_real_type": 1,
                    "local_ptr_u_value": 1,
                    "local_type1_pointer": 1,
                    "local_var2": 1,
                    "pointer_list": 1,
                    "ptr_array": 1,
                    "ptr_inner_list": 1,
                    "ptr_ptr4": 1,
                    "ptr_type_list": 1,
                    "ptr_var3": 1,
                    "undefined8_ptr_array1": 1
                },
                "local_70": {
                    "arg2_current_val": 1,
                    "array3": 1,
                    "array_3": 1,
                    "array_ptr1": 1,
                    "local_array": 1,
                    "local_array1": 1,
                    "local_array1_ptr": 1,
                    "local_list": 1,
                    "local_pointer1": 2,
                    "local_ptr1": 1,
                    "local_ptr2": 1,
                    "local_ptr_array_2": 1,
                    "local_ptr_to_long": 1,
                    "local_ptr_value_1": 1,
                    "local_value2_pointer": 1,
                    "local_var3": 1,
                    "long_var8": 1,
                    "nested_list1": 1,
                    "pointer2": 1,
                    "ptr4": 1,
                    "ptr_char1": 1,
                    "ptr_outer_list": 1,
                    "value3_local": 1,
                    "values": 1
                },
                "long": {
                    "int": 1
                },
                "param_1": {
                    "arg1": 1,
                    "base_address": 2,
                    "comp": 1,
                    "context": 1,
                    "data": 1,
                    "function_address": 1,
                    "function_param": 1,
                    "function_parameter": 1,
                    "input": 2,
                    "new_function_param1": 1,
                    "param": 1,
                    "param1": 2,
                    "param_1": 2,
                    "param_parent": 1,
                    "ptr": 1,
                    "ptr_param_1": 1,
                    "ptr_to_struct": 1,
                    "result": 1,
                    "value": 1
                },
                "param_2": {
                    "array1": 5,
                    "comp1": 1,
                    "comparison_array_1": 1,
                    "data1": 1,
                    "first_value": 1,
                    "list1": 1,
                    "new_function_param2": 1,
                    "object1": 2,
                    "param_array1": 1,
                    "param_value_1": 1,
                    "pointer1": 1,
                    "ptr_array_1": 1,
                    "value1": 5,
                    "values1": 1
                },
                "param_3": {
                    "array2": 5,
                    "comp2": 1,
                    "comparison_array_2": 1,
                    "data2": 1,
                    "list2": 1,
                    "new_function_param3": 1,
                    "object2": 2,
                    "param_array2": 1,
                    "param_value_2": 1,
                    "pointer2": 1,
                    "ptr_array_2": 1,
                    "second_value": 1,
                    "value2": 5,
                    "values2": 1
                },
                "pcVar10": {
                    "char2": 2,
                    "char_pointer2": 1,
                    "char_pointer_var10": 1,
                    "char_ptr2": 6,
                    "char_ptr_object2": 1,
                    "char_value2": 1,
                    "char_var2": 2,
                    "pc_obj2": 1,
                    "ptr_char_2": 1,
                    "str2": 5,
                    "str2_pointer": 1,
                    "str_b": 1,
                    "string_2": 1,
                    "temp_char_2": 1,
                    "value2_pc_var": 1
                },
                "pcVar9": {
                    "char1": 2,
                    "char_pointer1": 1,
                    "char_pointer_var9": 1,
                    "char_ptr1": 6,
                    "char_ptr_object1": 1,
                    "char_value1": 1,
                    "char_var1": 2,
                    "pc_obj1": 1,
                    "ptr_char_1": 1,
                    "str1": 5,
                    "str1_pointer": 1,
                    "str_a": 1,
                    "string_1": 1,
                    "temp_char_1": 1,
                    "value1_pc_var": 1
                },
                "plStack_50": {
                    "arg2_stack": 1,
                    "array1_ptr2": 1,
                    "array_4": 1,
                    "component_stack": 1,
                    "current_pointer1": 1,
                    "list_ptr1": 1,
                    "local_param_2": 1,
                    "local_ptr4": 1,
                    "long_ptr4": 1,
                    "nested_pointer1_stack": 1,
                    "pl_stack": 1,
                    "pl_stack_50": 1,
                    "pl_stack_var": 1,
                    "ptr5": 1,
                    "ptr_a": 1,
                    "ptr_array2": 1,
                    "stack": 1,
                    "stack_array": 1,
                    "stack_array1": 1,
                    "stack_ptr_array": 1,
                    "stack_value": 1,
                    "stack_value1": 1,
                    "stack_var1": 1,
                    "value1_pl_stack": 1,
                    "value_stack": 1
                },
                "plVar18": {
                    "arg2": 1,
                    "array2_ptr": 2,
                    "array_6": 1,
                    "component1": 1,
                    "current_array1": 1,
                    "current_pointer1": 1,
                    "data1": 1,
                    "list1": 1,
                    "list_ptr1": 1,
                    "long_ptr1": 1,
                    "nested_pointer1": 1,
                    "param_3_local": 1,
                    "param_pointer_array1": 1,
                    "ptr1": 2,
                    "ptr6": 1,
                    "ptr_a": 1,
                    "ptr_array1": 1,
                    "ptr_array_3": 1,
                    "ptr_object1": 1,
                    "ptr_to_long1": 1,
                    "ptr_type1_temp": 1,
                    "ptr_value_1": 1,
                    "result_pointer_check": 1,
                    "value3_pl_var": 1
                },
                "plVar20": {
                    "arg2_next": 1,
                    "array2_value1": 1,
                    "current_array3": 1,
                    "current_nested_pointer2": 1,
                    "data2": 1,
                    "list2": 1,
                    "list_ptr2": 1,
                    "long_ptr2": 1,
                    "nested_array_5": 1,
                    "nested_pointer2": 1,
                    "param_pointer_array2": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr7": 1,
                    "ptr_array_4": 1,
                    "ptr_b": 1,
                    "ptr_object2": 1,
                    "ptr_to_long2": 1,
                    "ptr_type2_temp": 1,
                    "ptr_value_2": 1,
                    "ptr_var3": 1,
                    "sub_component1": 1,
                    "value1_pointer": 1,
                    "value4_pl_var": 1,
                    "value_array2": 1,
                    "value_list2": 1
                },
                "plVar21": {
                    "addresses2": 1,
                    "arg2_current": 1,
                    "array2_ptr1": 1,
                    "array_7": 1,
                    "component2": 1,
                    "current_array2": 1,
                    "current_pointer2": 1,
                    "list3": 1,
                    "list_ptr2": 1,
                    "long_ptr3": 1,
                    "nested_pointer1": 1,
                    "param_pointer_array2": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr8": 1,
                    "ptr_a": 1,
                    "ptr_array2": 1,
                    "ptr_array_5": 1,
                    "ptr_context_val21": 1,
                    "ptr_to_long3": 1,
                    "ptr_type2_temp": 1,
                    "ptr_value_3": 1,
                    "value2_pointer": 1,
                    "value4_pl_var": 1,
                    "value_array1_ptr": 1,
                    "value_list1": 1
                },
                "plVar22": {
                    "current_nested_pointer1": 1,
                    "ptr4": 1
                },
                "ppcVar4": {
                    "char_list2": 1,
                    "char_ptr1": 1,
                    "double_ptr2": 1,
                    "double_ptr_char2": 1,
                    "nested_array_2": 1,
                    "nested_list2": 1,
                    "nested_pointer1_char": 1,
                    "param_pointer_array1": 1,
                    "pp_char1": 1,
                    "ppc_obj1_str": 1,
                    "ptr2": 1,
                    "ptr_list1_str": 1,
                    "ptr_of_ptr_string_1": 1,
                    "ptr_ptr2": 1,
                    "ptr_ptr_char1": 1,
                    "ptr_ptr_str_1": 1,
                    "ptr_str_a": 1,
                    "ptr_str_object1": 1,
                    "ptr_to_ptr_to_char1": 1,
                    "str_array1": 1,
                    "str_ptr1": 1,
                    "string1": 1,
                    "string_array1_ptr": 1,
                    "strings1": 1,
                    "value1_ppc_var": 1,
                    "value3_pointer_pointer": 1
                },
                "ppcVar5": {
                    "char_list1": 1,
                    "char_ptr2": 1,
                    "double_ptr3": 1,
                    "double_ptr_char1": 1,
                    "nested_list2": 1,
                    "nested_pointer2_char": 1,
                    "param_pointer_array2": 1,
                    "pp_char2": 1,
                    "ppc_arg2_str": 1,
                    "ptr3": 1,
                    "ptr_list2_str": 1,
                    "ptr_of_ptr_string_2": 1,
                    "ptr_ptr3": 1,
                    "ptr_ptr_char2": 1,
                    "ptr_ptr_str_2": 1,
                    "ptr_str_b": 1,
                    "ptr_str_object2": 1,
                    "ptr_to_ptr_to_char2": 1,
                    "str_array2": 1,
                    "str_ptr2": 1,
                    "string2": 1,
                    "string_array2_ptr": 1,
                    "strings2": 1,
                    "temp_array": 1,
                    "value2_ppc_var": 1,
                    "value4_pointer_pointer": 1
                },
                "pplVar3": {
                    "addresses1": 1,
                    "array1_ptr": 2,
                    "double_ptr1": 1,
                    "double_ptr_array2": 1,
                    "nested_array_4": 1,
                    "nested_list1": 1,
                    "nested_pointer1": 1,
                    "object2_nested": 1,
                    "param_pointer_pointer_array1": 1,
                    "pointer1": 1,
                    "pp_array1": 1,
                    "ppl_obj1_type": 1,
                    "ptr1": 1,
                    "ptr3": 1,
                    "ptr_list1": 1,
                    "ptr_of_ptr_array_2": 1,
                    "ptr_ptr1": 1,
                    "ptr_ptr_a": 1,
                    "ptr_ptr_object2": 1,
                    "ptr_ptr_value2": 1,
                    "ptr_ptr_value_1": 1,
                    "ptr_to_ptr_to_long": 1,
                    "value1_ppl_var": 1,
                    "value2_pointer_pointer": 1
                },
                "puVar16": {
                    "char_list2": 1,
                    "comparison_value4_ptr": 1,
                    "pointer1": 2,
                    "pointer1_temp": 1,
                    "pointer_3": 1,
                    "pointer_var16": 1,
                    "ptr1": 3,
                    "ptr4": 1,
                    "ptr_a": 1,
                    "ptr_context_var16": 1,
                    "ptr_of_type_result1": 1,
                    "ptr_to_real_type1": 1,
                    "ptr_type1": 1,
                    "ptr_type1_temp": 1,
                    "ptr_u_value_1": 1,
                    "ptr_val1": 1,
                    "ptr_var1": 3,
                    "type1_pointer": 1,
                    "type_pointer1": 1,
                    "ulong_ptr1": 1,
                    "undefined8_ptr1": 1
                },
                "puVar17": {
                    "char_list1": 1,
                    "comparison_value3_ptr": 1,
                    "pointer2": 2,
                    "pointer2_temp": 1,
                    "pointer_2": 1,
                    "pointer_var17": 1,
                    "ptr2": 3,
                    "ptr5": 1,
                    "ptr_b": 1,
                    "ptr_context_var17": 1,
                    "ptr_of_type_result2": 1,
                    "ptr_to_real_type2": 1,
                    "ptr_type2": 1,
                    "ptr_type2_temp": 1,
                    "ptr_u_value_2": 1,
                    "ptr_val2": 1,
                    "ptr_var2": 3,
                    "type2_pointer": 1,
                    "type_pointer2": 1,
                    "ulong_ptr2": 1,
                    "undefined8_ptr2": 1
                },
                "uVar1": {
                    "component1_type": 1,
                    "data_type1": 1,
                    "first_u_int": 1,
                    "flag1": 2,
                    "obj1_type": 1,
                    "object1_type": 1,
                    "opcode_1": 1,
                    "param1_value": 1,
                    "type1": 3,
                    "type_1": 1,
                    "type_a": 1,
                    "type_object1": 1,
                    "uint_var1": 1,
                    "val1": 2,
                    "value1": 6,
                    "value1_u_var": 2
                },
                "uVar14": {
                    "comparison_result3": 1,
                    "comparison_u_int": 1,
                    "int_val1": 1,
                    "long_var4": 1,
                    "real_type1": 2,
                    "type1": 6,
                    "type1_real": 1,
                    "type3": 1,
                    "type_a_real": 1,
                    "type_result1": 2,
                    "type_var1": 1,
                    "u_value_1": 1,
                    "var1": 1
                },
                "uVar15": {
                    "comparison_result4": 1,
                    "comparison_u_int2": 1,
                    "int_val2": 1,
                    "long_var5": 1,
                    "real_type2": 2,
                    "type2": 6,
                    "type2_real": 1,
                    "type4": 1,
                    "type_b_real": 1,
                    "type_result2": 2,
                    "type_var2": 1,
                    "u_value_2": 1,
                    "var2": 1
                },
                "uVar2": {
                    "component2_type": 1,
                    "data_type2": 1,
                    "flag2": 2,
                    "obj2_type": 1,
                    "object2_type": 1,
                    "opcode_2": 1,
                    "param2_value": 1,
                    "second_u_int": 1,
                    "type2": 3,
                    "type_2": 1,
                    "type_b": 1,
                    "type_object2": 1,
                    "uint_var2": 1,
                    "val2": 2,
                    "value2": 6,
                    "value2_u_var": 2
                },
                "undefined8": {
                    "ulong": 1
                }
            },
            "called": [
                "FUN_0010922b",
                "FUN_001040a0",
                "FUN_00104470",
                "FUN_00112b6e"
            ],
            "calling": [
                "FUN_0010922b",
                "FUN_0010c7a0"
            ],
            "code": "\nbool compare_values_0010922b(int input,int *value1,int *value2)\n\n{\n  uint value1;\n  uint value2;\n  int **array1_ptr;\n  char **ptr_list1_str;\n  char **param_pointer_array2;\n  int long_var1;\n  int long_var2;\n  int long_var3;\n  char *char_ptr1;\n  char *char_ptr2;\n  char result;\n  bool is_equal;\n  int comparison_result;\n  ulong type1;\n  ulong type2;\n  ulong *ptr_var1;\n  ulong *ptr_var2;\n  int *array2_ptr;\n  int i;\n  int *nested_pointer2;\n  int *param_pointer_array2;\n  int long_var5;\n  int *local_pointer1;\n  ulong *list_ptr;\n  int *ptr_a;\n  int *value_list;\n  \n  array2_ptr = value2;\n  if (value1 == (int *)0x0) {\nLAB_00109241:\n    return value2 == (int *)0x0;\n  }\njoined_r0x00109255:\n  if (array2_ptr == (int *)0x0) {\n    return false;\n  }\n  while( true ) {\n    value1 = *(uint *)value1;\n    if (value1 == 1) goto code_r0x00109263;\n    while (value2 = *(uint *)value2, value2 == 1) {\n      value2 = **(int ***)value2[2];\n      if (value2 == (int *)0x0) {\n        return false;\n      }\n    }\n    if (value1 == value2) {\n      return true;\n    }\n    if (value1 != 0x16) break;\n    if (value2 != 0x17) goto LAB_001092cb;\n    value1 = *(int **)(value1[2] + 8);\n    if (value1 == (int *)0x0) goto LAB_00109241;\n  }\n  if ((value1 == 0x17) && (value2 == 0x16)) {\n    value2 = *(int **)(value2[2] + 8);\n    array2_ptr = value2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*value1 != *value2) {\n    return false;\n  }\n  if (value1 == 3) {\n    return *(char *)(value1 + 2) == *(char *)(value2 + 2);\n  }\n  if (value1 < 4) {\n    if (value1 == 2) {\n      return true;\n    }\n  }\n  else if (value1 - 4 < 3) {\n    return true;\n  }\n  list_ptr = *(ulong **)(input + 0x58);\n  for (ptr_var2 = list_ptr; ptr_var2 != (ulong *)0x0; ptr_var2 = (ulong *)*ptr_var2) {\n    if (((int *)ptr_var2[1] == value1) && ((int *)ptr_var2[2] == value2)) {\n      return true;\n    }\n  }\n  *(ulong ***)(input + 0x58) = &list_ptr;\n  ptr_a = value1;\n  value_list = value2;\n  switch(value1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    array2_ptr = (int *)value1[2];\n    array1_ptr = (int **)value2[2];\n    if (array2_ptr == (int *)0x0) {\n      is_equal = array1_ptr == (int **)0x0;\n      goto LAB_001099c4;\n    }\n    if (array1_ptr == (int **)0x0) goto LAB_00109382;\n    if ((*(uint *)(input + 0x38) < *(uint *)((int)array2_ptr + 0xc)) &&\n       (*(uint *)((int)array2_ptr + 0xc) == *(uint *)((int)array1_ptr + 0xc))) goto LAB_001097af;\n    ptr_var2 = (ulong *)*array2_ptr;\n    local_pointer1 = *array1_ptr;\n    if (((ptr_var2 == (ulong *)0x0) == (local_pointer1 == (int *)0x0)) &&\n       ((((array2_ptr[2] == 0) == (array1_ptr[2] == (int *)0x0) &&\n         ((array2_ptr[3] == 0) == (array1_ptr[3] == (int *)0x0))) &&\n        ((array2_ptr[4] == 0) == (array1_ptr[4] == (int *)0x0))))) {\n      if (ptr_var2 == (ulong *)0x0) {\nLAB_001093fd:\n        if ((array2_ptr[4] != 0) &&\n           (result = compare_values_0010922b(input,array2_ptr[4],array1_ptr[4]), result == '\\0'))\n        goto LAB_00109382;\n        param_pointer_array2 = (int *)array2_ptr[2];\n        if (param_pointer_array2 == (int *)0x0) {\nLAB_00109540:\n          ptr_var2 = (ulong *)array2_ptr[3];\n          if (ptr_var2 == (ulong *)0x0) goto LAB_001097af;\n          array2_ptr = array1_ptr[3];\n          while( true ) {\n            param_pointer_array2 = (char **)*ptr_var2;\n            if (param_pointer_array2 == (char **)0x0) {\n              is_equal = *array2_ptr == 0;\n              goto LAB_001099c4;\n            }\n            ptr_list1_str = (char **)*array2_ptr;\n            if (ptr_list1_str == (char **)0x0) break;\n            if ((**param_pointer_array2 != **ptr_list1_str) || (comparison_result = strcmp(*param_pointer_array2,*ptr_list1_str), comparison_result != 0))\n            break;\n            char_ptr1 = param_pointer_array2[1];\n            char_ptr2 = ptr_list1_str[1];\n            if ((char_ptr1 == (char *)0x0) != (char_ptr2 == (char *)0x0)) break;\n            if (char_ptr1 != (char *)0x0) {\n              long_var5 = 0;\n              while( true ) {\n                param_pointer_array2 = *(char ***)(char_ptr1 + long_var5);\n                ptr_list1_str = *(char ***)(char_ptr2 + long_var5);\n                if (param_pointer_array2 == (char **)0x0) break;\n                if (ptr_list1_str == (char **)0x0) goto LAB_00109382;\n                if ((((**param_pointer_array2 != **ptr_list1_str) ||\n                     ((((uint)param_pointer_array2[2] ^ (uint)ptr_list1_str[2]) & 0xffffffffffff) != 0)) ||\n                    ((param_pointer_array2[3] != ptr_list1_str[3] ||\n                     ((((param_pointer_array2[4] == (char *)0x0) != (ptr_list1_str[4] == (char *)0x0) ||\n                       (comparison_result = strcmp(*param_pointer_array2,*ptr_list1_str), comparison_result != 0)) ||\n                      (result = compare_values_0010922b(input,param_pointer_array2[1],ptr_list1_str[1]), result == '\\0')))))) ||\n                   ((param_pointer_array2[4] != (char *)0x0 &&\n                    (result = compare_values_0010922b(input,param_pointer_array2[4],ptr_list1_str[4]), result == '\\0'))))\n                goto LAB_00109382;\n                long_var5 = long_var5 + 8;\n              }\n              if (ptr_list1_str == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr_var2 = ptr_var2 + 1;\n            array2_ptr = array2_ptr + 1;\n          }\n        }\n        else {\n          nested_pointer2 = array1_ptr[2];\n          for (; ptr_var2 = (ulong *)*param_pointer_array2, ptr_var2 != (ulong *)0x0;\n              param_pointer_array2 = param_pointer_array2 + 1) {\n            ptr_var1 = (ulong *)*nested_pointer2;\n            if ((((ptr_var1 == (ulong *)0x0) ||\n                 (((ptr_var2[1] ^ ptr_var1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr_var2 + 2) != *(int *)(ptr_var1 + 2))) ||\n               (result = compare_values_0010922b(input,*ptr_var2,*ptr_var1), result == '\\0'))\n            goto LAB_00109382;\n            nested_pointer2 = nested_pointer2 + 1;\n          }\n          if (*nested_pointer2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; param_pointer_array2 = (char **)*ptr_var2, param_pointer_array2 != (char **)0x0; ptr_var2 = ptr_var2 + 1) {\n          ptr_list1_str = (char **)*local_pointer1;\n          if (ptr_list1_str == (char **)0x0) goto LAB_00109382;\n          char_ptr1 = *ptr_list1_str;\n          char_ptr2 = *param_pointer_array2;\n          if ((*char_ptr2 != *char_ptr1) ||\n             ((((uint)param_pointer_array2[2] ^ (uint)ptr_list1_str[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((int)param_pointer_array2 + 0x14) == '\\0') {\n            if (param_pointer_array2[3] == ptr_list1_str[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparison_result = strcmp(param_pointer_array2[3],ptr_list1_str[3]);\n          if (comparison_result != 0) goto LAB_00109382;\nLAB_00109480:\n          comparison_result = strcmp(char_ptr2,char_ptr1);\n          if (((comparison_result != 0) || (param_pointer_array2[1] == (char *)0x0)) || (ptr_list1_str[1] == (char *)0x0))\n          goto LAB_00109382;\n          type1 = debug_get_real_type_isra_0(ptr_list1_str[1],0);\n          type2 = debug_get_real_type_isra_0(param_pointer_array2[1],0);\n          result = compare_values_0010922b(input,type2,type1);\n          if (result == '\\0') goto LAB_00109382;\n          local_pointer1 = local_pointer1 + 1;\n        }\n        if (*local_pointer1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    array2_ptr = (int *)value1[2];\n    param_pointer_array2 = (int *)value2[2];\n    if (array2_ptr == (int *)0x0) {\n      is_equal = param_pointer_array2 == (int *)0x0;\n      goto LAB_001099c4;\n    }\n    if (param_pointer_array2 == (int *)0x0) goto LAB_00109382;\n    long_var5 = *array2_ptr;\n    long_var1 = *param_pointer_array2;\n    i = 0;\n    long_var2 = array2_ptr[1];\n    long_var3 = param_pointer_array2[1];\n    do {\n      char_ptr1 = *(char **)(long_var5 + i);\n      if (char_ptr1 == (char *)0x0) {\n        is_equal = *(int *)(long_var1 + i) == 0;\n        goto LAB_001099c1;\n      }\n      char_ptr2 = *(char **)(long_var1 + i);\n      if (((char_ptr2 == (char *)0x0) || (*char_ptr1 != *char_ptr2)) ||\n         (*(int *)(long_var2 + i) != *(int *)(long_var3 + i))) break;\n      comparison_result = strcmp(char_ptr1,char_ptr2);\n      i = i + 8;\n    } while (comparison_result == 0);\nLAB_00109964:\n    is_equal = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    is_equal = compare_values_0010922b(input,value1[2],value2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((ulong *)value1[2] + 2) == *(char *)((ulong *)value2[2] + 2)) &&\n       (result = compare_values_0010922b(input,*(ulong *)value1[2],*(ulong *)value2[2]),\n       result != '\\0')) {\n      array2_ptr = *(int **)(value1[2] + 8);\n      param_pointer_array2 = *(int **)(value2[2] + 8);\n      if ((array2_ptr == (int *)0x0) == (param_pointer_array2 == (int *)0x0)) {\n        if (array2_ptr == (int *)0x0) goto LAB_001097af;\n        while (((*array2_ptr != 0 && (*param_pointer_array2 != 0)) &&\n               (result = compare_values_0010922b(input), result != '\\0'))) {\n          array2_ptr = array2_ptr + 1;\n          param_pointer_array2 = param_pointer_array2 + 1;\n        }\nLAB_0010995d:\n        if (*array2_ptr != 0) goto LAB_00109964;\n        is_equal = *param_pointer_array2 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr_var2 = (ulong *)value2[2];\n    ptr_var1 = (ulong *)value1[2];\n    is_equal = 0;\n    if ((ptr_var1[1] == ptr_var2[1]) && (ptr_var1[2] == ptr_var2[2])) {\nLAB_00109862:\n      is_equal = compare_values_0010922b(input,*ptr_var1,*ptr_var2);\n    }\n    break;\n  case 0x10:\n    ptr_var2 = (ulong *)value2[2];\n    ptr_var1 = (ulong *)value1[2];\n    is_equal = 0;\n    if (((ptr_var1[2] == ptr_var2[2]) && (ptr_var1[3] == ptr_var2[3])) &&\n       (*(char *)(ptr_var1 + 4) == *(char *)(ptr_var2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr_var2 = (ulong *)value2[2];\n    ptr_var1 = (ulong *)value1[2];\n    is_equal = 0;\n    if (*(char *)(ptr_var1 + 1) == *(char *)(ptr_var2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = compare_values_0010922b(input,*(ulong *)value1[2],*(ulong *)value2[2]);\n    is_equal = 0;\n    if (result != '\\0') {\n      is_equal = compare_values_0010922b(input,*(ulong *)(value1[2] + 8),*(ulong *)(value2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((ulong *)value1[2] + 3) == *(char *)((ulong *)value2[2] + 3)) &&\n        (result = compare_values_0010922b(input,*(ulong *)value1[2],*(ulong *)value2[2]),\n        result != '\\0')) &&\n       (result = compare_values_0010922b(input,*(ulong *)(value1[2] + 8),\n                              *(ulong *)(value2[2] + 8)), result != '\\0')) {\n      array2_ptr = *(int **)(value1[2] + 0x10);\n      param_pointer_array2 = *(int **)(value2[2] + 0x10);\n      if ((array2_ptr == (int *)0x0) == (param_pointer_array2 == (int *)0x0)) {\n        if (array2_ptr != (int *)0x0) {\n          while (((*array2_ptr != 0 && (*param_pointer_array2 != 0)) &&\n                 (result = compare_values_0010922b(input), result != '\\0'))) {\n            array2_ptr = array2_ptr + 1;\n            param_pointer_array2 = param_pointer_array2 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        is_equal = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    is_equal = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    array2_ptr = (int *)value2[2];\n    param_pointer_array2 = (int *)value1[2];\n    comparison_result = strcmp(*(char **)(*param_pointer_array2 + 8),*(char **)(*array2_ptr + 8));\n    is_equal = 0;\n    if (comparison_result == 0) {\n      is_equal = compare_values_0010922b(input,param_pointer_array2[1],array2_ptr[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  is_equal = is_equal & 1;\nLAB_001099c4:\n  *(ulong **)(input + 0x58) = list_ptr;\n  return is_equal;\ncode_r0x00109263:\n  value1 = **(int ***)value1[2];\n  array2_ptr = value1;\n  goto joined_r0x00109255;\n}\n\n",
            "current_name": "compare_values_0010922b",
            "entrypoint": "0x0010922b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010922b": "compare_values_0010922b",
                "bVar12": "is_equal",
                "byte": "bool",
                "cVar11": "result",
                "iVar13": "comparison_result",
                "lVar19": "i",
                "lVar22": "long_var5",
                "lVar6": "long_var1",
                "lVar7": "long_var2",
                "lVar8": "long_var3",
                "local_48": "value_list",
                "local_58": "list_ptr",
                "local_70": "local_pointer1",
                "long": "int",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "pcVar10": "char_ptr2",
                "pcVar9": "char_ptr1",
                "plStack_50": "ptr_a",
                "plVar18": "array2_ptr",
                "plVar20": "nested_pointer2",
                "plVar21": "param_pointer_array2",
                "ppcVar4": "ptr_list1_str",
                "ppcVar5": "param_pointer_array2",
                "pplVar3": "array1_ptr",
                "puVar16": "ptr_var1",
                "puVar17": "ptr_var2",
                "uVar1": "value1",
                "uVar14": "type1",
                "uVar15": "type2",
                "uVar2": "value2",
                "undefined8": "ulong"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109a0b": {
            "additional_data": {
                "FUN_00109a0b": {
                    "copy_and_append_null": 1,
                    "copy_and_append_null_terminator": 1,
                    "copy_and_null_terminate": 12,
                    "copy_and_null_terminate_string": 8,
                    "copy_and_terminate_string": 2,
                    "copy_string": 5,
                    "copy_string_with_null_terminator": 2
                },
                "bVar4": {
                    "bit": 1,
                    "byte_offset": 1,
                    "byte_value": 1,
                    "deep_copy": 1,
                    "direction": 1,
                    "flag": 1,
                    "increment": 4,
                    "increment_value": 2,
                    "is_negative": 3,
                    "is_odd_byte": 1,
                    "is_reverse": 2,
                    "is_reverse_order": 1,
                    "is_reversed": 1,
                    "offset": 5,
                    "reverse_counter": 1,
                    "reverse_flag": 1,
                    "skip_increment": 1,
                    "temp": 1,
                    "toggle": 2
                },
                "lVar2": {
                    "count": 3,
                    "i": 13,
                    "index": 7,
                    "length": 1,
                    "remaining_length": 7
                },
                "param_1": {
                    "source": 19,
                    "source_data": 2,
                    "source_string": 10
                },
                "param_2": {
                    "length": 22,
                    "source_length": 3,
                    "string_length": 6
                },
                "puVar1": {
                    "copied_data": 1,
                    "copied_string": 9,
                    "destination": 15,
                    "destination_string": 1,
                    "new_data": 1,
                    "new_string": 4
                },
                "puVar3": {
                    "copied_data_ptr": 1,
                    "copied_string_pointer": 1,
                    "dest_pointer": 3,
                    "dest_ptr": 10,
                    "destination": 3,
                    "destination_data": 1,
                    "destination_index": 1,
                    "destination_ptr": 2,
                    "destination_string": 8,
                    "new_string_ptr": 1
                }
            },
            "called": [
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_0010d559",
                "FUN_0010d21c",
                "FUN_0010afd5"
            ],
            "code": "\nvoid copy_and_null_terminate_string_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long i;\n  undefined *dest_ptr;\n  byte offset;\n  \n  offset = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  dest_ptr = destination;\n  for (i = (long)length; i != 0; i = i + -1) {\n    *dest_ptr = *source;\n    source = source + (ulong)offset * -2 + 1;\n    dest_ptr = dest_ptr + (ulong)offset * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "current_name": "copy_and_null_terminate_string_00109a0b",
            "entrypoint": "0x00109a0b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_string_00109a0b",
                "bVar4": "offset",
                "lVar2": "i",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "puVar3": "dest_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109a32": {
            "additional_data": {
                "FUN_00109a32": {
                    "convert_string_to_unsigned": 1,
                    "convert_string_to_unsigned_long": 3,
                    "parse_and_convert_input": 1,
                    "parse_and_convert_string": 2,
                    "parse_and_convert_to_ulong": 1,
                    "parse_and_warn": 1,
                    "parse_and_warn_numeric_value": 1,
                    "parse_integer": 1,
                    "parse_number": 2,
                    "parse_numeric_input": 2,
                    "parse_numeric_string": 6,
                    "parse_str_to_ulong": 1,
                    "parse_uint_from_string": 1,
                    "parse_unsigned_integer": 5,
                    "parse_unsigned_long": 2,
                    "parse_unsigned_number": 1
                },
                "__nptr": {
                    "current_char": 15,
                    "current_char_ptr": 3,
                    "current_character": 1,
                    "current_position": 2,
                    "current_ptr": 1,
                    "current_string": 1,
                    "num_string": 2,
                    "number_str": 1,
                    "numeric_string": 2,
                    "string": 1,
                    "string_pointer": 2
                },
                "auVar4": {
                    "result": 18,
                    "return_data": 1,
                    "return_value": 12
                },
                "param_1": {
                    "argv": 1,
                    "input_ptr": 1,
                    "input_str": 1,
                    "input_str_ptr": 1,
                    "input_string": 17,
                    "str": 1,
                    "string_array": 1,
                    "string_ptr": 8
                },
                "param_2": {
                    "conversion_failed": 1,
                    "conversion_success": 1,
                    "error_flag": 3,
                    "error_flag_ptr": 5,
                    "is_overflow": 11,
                    "numeric_overflow_flag": 1,
                    "out_of_range_flag": 1,
                    "overflow_flag": 4,
                    "parse_error": 2,
                    "parse_error_flag": 1,
                    "success_flag": 1
                },
                "param_3": {
                    "end": 1,
                    "end_of_input": 3,
                    "end_of_str": 1,
                    "end_of_string": 13,
                    "end_pointer": 3,
                    "end_ptr": 6,
                    "end_str": 1,
                    "input_limit": 1,
                    "string_end": 2
                },
                "param_4": {
                    "arg_4": 1,
                    "dummy1": 1,
                    "none": 1,
                    "param4": 2,
                    "param_4": 10,
                    "unknown_param_1": 1,
                    "unknown_param_4": 1,
                    "unknown_value": 1,
                    "unused1": 2,
                    "unused_param1": 2,
                    "unused_param4": 1,
                    "unused_param_1": 4,
                    "unused_param_4": 3,
                    "unused_parameter_1": 1
                },
                "param_5": {
                    "another_param": 1,
                    "arg_5": 1,
                    "dummy2": 1,
                    "error_message": 1,
                    "none": 1,
                    "output_value": 1,
                    "param5": 2,
                    "param_5": 8,
                    "unknown_param_2": 1,
                    "unknown_param_5": 1,
                    "unused2": 2,
                    "unused_param2": 2,
                    "unused_param5": 1,
                    "unused_param_2": 4,
                    "unused_param_5": 3,
                    "unused_parameter_2": 1
                },
                "piVar1": {
                    "err_num_ptr": 1,
                    "errno_address": 1,
                    "errno_location": 1,
                    "errno_pointer": 1,
                    "errno_ptr": 21,
                    "errnum": 1,
                    "error_indicator": 1,
                    "error_location": 2,
                    "error_number": 1,
                    "error_number_ptr": 1
                },
                "uVar2": {
                    "converted_value": 7,
                    "numeric_value": 2,
                    "parsed_num": 2,
                    "parsed_number": 2,
                    "parsed_ulong": 1,
                    "parsed_value": 16,
                    "result": 1
                },
                "uVar3": {
                    "err_msg": 1,
                    "error_message": 18,
                    "error_msg": 8,
                    "error_string": 2,
                    "numeric_overflow_message": 1,
                    "overflow_error_message": 1
                }
            },
            "called": [
                "FUN_00108fe8",
                "FUN_00104240",
                "FUN_00104790",
                "FUN_001040b0"
            ],
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nconvert_string_to_unsigned_long_00109a32(char **input_string,undefined *is_overflow,char *end_of_string,undefined8 param_4,undefined8 param_5)\n\n{\n  char *current_char;\n  int *errno_ptr;\n  ulong parsed_value;\n  undefined8 error_message;\n  undefined result [16];\n  \n  if (is_overflow != (undefined *)0x0) {\n    *is_overflow = 0;\n  }\n  current_char = *input_string;\n  if ((current_char < end_of_string) && (*current_char != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_value = strtoul(current_char,input_string,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (is_overflow == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      warn_stab(current_char,error_message);\n    }\n    else {\n      *is_overflow = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  result._8_8_ = param_5;\n  result._0_8_ = parsed_value;\n  return result;\n}\n\n",
            "current_name": "convert_string_to_unsigned_long_00109a32",
            "entrypoint": "0x00109a32",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109a32": "convert_string_to_unsigned_long_00109a32",
                "__nptr": "current_char",
                "auVar4": "result",
                "param_1": "input_string",
                "param_2": "is_overflow",
                "param_3": "end_of_string",
                "piVar1": "errno_ptr",
                "uVar2": "parsed_value",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109ab1": {
            "additional_data": {
                "FUN_00108fb9": {
                    "bad_stab": 1,
                    "initialize": 1
                },
                "FUN_00109a32": {
                    "parse_and_store_number": 1,
                    "parse_number": 1
                },
                "FUN_00109ab1": {
                    "extract_numbers_from_string": 1,
                    "extract_stab_data": 1,
                    "parse_and_convert": 1,
                    "parse_and_extract_data": 3,
                    "parse_and_extract_numbers": 3,
                    "parse_and_extract_parameters": 1,
                    "parse_and_extract_values": 5,
                    "parse_and_store_numbers": 1,
                    "parse_arguments": 1,
                    "parse_coordinates": 1,
                    "parse_function_arguments": 2,
                    "parse_number_and_update_params": 1,
                    "parse_param": 1,
                    "parse_parameters": 1,
                    "parse_params": 3,
                    "parse_stab_data": 2,
                    "parse_stab_entry": 3
                },
                "LAB_00109b25": {
                    "continue_processing": 1
                },
                "auVar4": {
                    "combined_return_value": 1,
                    "output": 2,
                    "output_result": 1,
                    "result": 5,
                    "result_array": 2,
                    "result_struct": 2,
                    "return_val": 1,
                    "return_value": 16,
                    "return_values": 1
                },
                "bad_stab": {
                    "handle_error": 3
                },
                "param_1": {
                    "argv": 1,
                    "input": 3,
                    "input_data": 1,
                    "input_pointer": 2,
                    "input_ptr": 2,
                    "input_str": 3,
                    "input_string": 11,
                    "stab_data": 2,
                    "stab_entry": 2,
                    "stab_string": 1,
                    "str_ptr": 1,
                    "string_ptr": 2
                },
                "param_2": {
                    "output": 3,
                    "output_arr": 1,
                    "output_array": 3,
                    "output_numbers": 1,
                    "output_parameters": 1,
                    "output_pointer": 2,
                    "output_ptr": 2,
                    "output_values": 9,
                    "output_variables": 1,
                    "parsed_data": 2,
                    "parsed_numbers": 1,
                    "result": 3,
                    "result_ptr": 2
                },
                "param_3": {
                    "first_param": 1,
                    "helper_param_1": 1,
                    "input_param_1": 1,
                    "input_value_1": 2,
                    "param1": 1,
                    "param_1_max": 1,
                    "param_1_ptr": 1,
                    "param_1_value": 1,
                    "param_3": 19,
                    "param_a": 1,
                    "parse_number_arg1": 1,
                    "value_1": 1
                },
                "param_4": {
                    "helper_param_2": 1,
                    "input_param_2": 1,
                    "input_value_2": 2,
                    "param2": 1,
                    "param_2_max": 1,
                    "param_2_ptr": 1,
                    "param_2_value": 1,
                    "param_4": 19,
                    "param_b": 1,
                    "parse_number_arg2": 1,
                    "second_param": 1,
                    "value_2": 1
                },
                "param_5": {
                    "helper_param_3": 1,
                    "input_param_3": 1,
                    "input_value_3": 2,
                    "param3": 1,
                    "param_3_max": 1,
                    "param_3_ptr": 1,
                    "param_3_value": 1,
                    "param_5": 20,
                    "param_c": 1,
                    "third_param": 1,
                    "value_3": 1
                },
                "parse_number": {
                    "parse_integer": 1,
                    "parse_num": 1,
                    "parse_number_func": 1
                },
                "pcVar2": {
                    "current_char": 28,
                    "current_char_ptr": 3
                },
                "uVar1": {
                    "first_number": 2,
                    "parse_result": 1,
                    "parsed_num": 2,
                    "parsed_number": 16,
                    "parsed_number_1": 1,
                    "parsed_value": 9
                },
                "uVar3": {
                    "combined_value": 2,
                    "concatenated_value": 1,
                    "concatenated_values": 1,
                    "converted_value": 1,
                    "modified_result": 1,
                    "result": 16,
                    "ret_val": 1,
                    "return_value": 8
                }
            },
            "called": [
                "FUN_00108fb9",
                "FUN_00109a32"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nparse_and_extract_values_00109ab1(char **input_string,undefined4 *output_values,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_number;\n  char *current_char;\n  undefined8 result;\n  undefined return_value [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    parsed_number = parse_number_func(input_string,0);\n    *output_values = parsed_number;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      parsed_number = parse_number_func(input_string,0,param_3);\n      output_values[1] = parsed_number;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto continue_processing;\n      }\n    }\n    handle_error(current_char);\n    result = 0;\n  }\n  else {\n    *output_values = 0;\n    current_char = (char *)parse_number_func(input_string,0);\n    output_values[1] = (int)current_char;\ncontinue_processing:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "parse_and_extract_values_00109ab1",
            "entrypoint": "0x00109ab1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109ab1": "parse_and_extract_values_00109ab1",
                "LAB_00109b25": "continue_processing",
                "auVar4": "return_value",
                "bad_stab": "handle_error",
                "param_1": "input_string",
                "param_2": "output_values",
                "parse_number": "parse_number_func",
                "pcVar2": "current_char",
                "uVar1": "parsed_number",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109b2f": {
            "additional_data": {
                "FUN_00109b2f": {
                    "deallocate_and_return_next_pointer": 1,
                    "deallocate_memory": 1,
                    "deallocate_ptr": 1,
                    "extract_and_free": 3,
                    "extract_and_free_data": 1,
                    "extract_and_free_next": 2,
                    "extract_and_free_next_element": 1,
                    "extract_and_free_next_item": 1,
                    "extract_and_free_next_ptr": 5,
                    "extract_and_free_pointer": 1,
                    "extract_and_free_ptr": 5,
                    "extract_linked_list_node": 1,
                    "extract_next_element": 1,
                    "extract_next_item": 1,
                    "extract_next_pointer": 1,
                    "extract_next_ptr": 1,
                    "extract_next_ptr_from_list": 1,
                    "extract_pointer": 1,
                    "extract_ptr_value": 1,
                    "extract_value": 1
                },
                "__ptr": {
                    "current_element": 1,
                    "current_item": 2,
                    "current_node": 1,
                    "current_pointer": 1,
                    "current_ptr": 5,
                    "next_block": 1,
                    "next_element_ptr": 1,
                    "next_ptr": 6,
                    "node": 1,
                    "pointer": 1,
                    "ptr": 8,
                    "ptr_to_free": 1,
                    "ptr_value": 2
                },
                "param_1": {
                    "base_address": 4,
                    "data_ptr": 1,
                    "input": 3,
                    "input_addr": 1,
                    "input_array": 1,
                    "input_list": 1,
                    "input_param": 3,
                    "input_ptr": 6,
                    "list_ptr": 1,
                    "memory_address": 1,
                    "node_address": 1,
                    "param": 2,
                    "param_pointer": 1,
                    "param_ptr": 1,
                    "ptr": 1,
                    "ptr_address": 2,
                    "source_address": 1
                },
                "puVar1": {
                    "extracted_ptr": 2,
                    "extracted_value": 4,
                    "next_element": 1,
                    "next_item": 2,
                    "next_node": 2,
                    "next_pointer": 1,
                    "next_ptr": 5,
                    "next_ptr_value": 1,
                    "result": 2,
                    "return_value": 8,
                    "returned_ptr": 2,
                    "temp_ptr": 1
                }
            },
            "called": [
                "FUN_001048f0"
            ],
            "calling": [
                "FUN_0010b948",
                "FUN_0010abdd",
                "FUN_0010a94e",
                "FUN_0010a83e",
                "FUN_0010aa53",
                "FUN_0010a2b9",
                "FUN_0010ba08",
                "FUN_0010e6a8",
                "FUN_0010a181",
                "FUN_0010e7c2",
                "FUN_0010e918",
                "FUN_0010e5db",
                "FUN_0010e9a0",
                "FUN_0010a0e9",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010a424",
                "FUN_0010eafe",
                "FUN_0010a377",
                "FUN_0010ebb0"
            ],
            "code": "\nundefined8 * extract_and_free_next_ptr_00109b2f(long input_ptr)\n\n{\n  undefined8 *ptr;\n  undefined8 *return_value;\n  \n  ptr = *(undefined8 **)(input_ptr + 0x60);\n  if (ptr != (undefined8 *)0x0) {\n    return_value = (undefined8 *)ptr[1];\n    *(undefined8 *)(input_ptr + 0x60) = *ptr;\n    free(ptr);\n    return return_value;\n  }\n  return ptr;\n}\n\n",
            "current_name": "extract_and_free_next_ptr_00109b2f",
            "entrypoint": "0x00109b2f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109b2f": "extract_and_free_next_ptr_00109b2f",
                "__ptr": "ptr",
                "param_1": "input_ptr",
                "puVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109b52": {
            "additional_data": {
                "FUN_00109b52": {
                    "add_new_entry_to_struct": 1,
                    "allocate_and_copy_data": 2,
                    "allocate_and_copy_string": 1,
                    "create_data_entry": 1,
                    "create_entry": 2,
                    "create_entry_in_list": 1,
                    "create_instance": 1,
                    "create_new_block": 1,
                    "create_new_entry": 2,
                    "create_new_entry_in_list": 2,
                    "create_record": 1,
                    "initialize_data": 2,
                    "initialize_data_structure": 12,
                    "initialize_memory": 1,
                    "initialize_struct": 1
                },
                "param_1": {
                    "base_address": 1,
                    "block_ptr": 1,
                    "data_struct": 1,
                    "data_struct_ptr": 2,
                    "data_structure": 7,
                    "data_structure_address": 4,
                    "data_structure_pointer": 2,
                    "entry_list": 2,
                    "function_context": 1,
                    "input_data": 1,
                    "instance": 1,
                    "list_address": 1,
                    "list_head": 1,
                    "list_ptr": 1,
                    "memory_manager": 1,
                    "record_list": 1,
                    "struct_pointer": 1,
                    "struct_ptr": 1,
                    "target": 1
                },
                "param_2": {
                    "input_string": 2,
                    "name": 1,
                    "source": 1,
                    "source_string": 15,
                    "str": 2,
                    "str_param": 2,
                    "string": 3,
                    "string_param": 3,
                    "string_ptr": 1,
                    "string_to_duplicate": 1
                },
                "param_3": {
                    "additional_data": 2,
                    "arg": 1,
                    "data": 3,
                    "data_to_store": 1,
                    "destination_object": 1,
                    "input_data": 2,
                    "other_data": 1,
                    "param3": 8,
                    "param3_value": 4,
                    "param_3": 3,
                    "pointer": 1,
                    "secondary_data": 2,
                    "value": 1,
                    "value1": 1
                },
                "param_4": {
                    "additional_info": 1,
                    "char_value": 1,
                    "character_param": 1,
                    "flag": 11,
                    "param4": 7,
                    "param4_value": 4,
                    "param_4": 4,
                    "some_value": 1,
                    "value2": 1
                },
                "param_5": {
                    "additional_value": 1,
                    "count": 1,
                    "counter": 1,
                    "data": 1,
                    "flag": 1,
                    "int_value": 1,
                    "integer_param": 1,
                    "param5": 7,
                    "param5_value": 4,
                    "param_5": 4,
                    "size": 1,
                    "status": 3,
                    "value": 4,
                    "value3": 1
                },
                "puVar2": {
                    "allocated_data": 1,
                    "allocated_memory": 9,
                    "data_structure": 1,
                    "dynamic_data_ptr": 1,
                    "dynamic_memory": 1,
                    "new_block": 1,
                    "new_data_pointer": 1,
                    "new_data_struct_ptr": 1,
                    "new_data_structure": 1,
                    "new_data_structure_address": 1,
                    "new_entry": 6,
                    "new_instance": 1,
                    "new_list_ptr": 1,
                    "new_record": 1,
                    "new_struct": 2,
                    "ptr": 1
                },
                "uVar1": {
                    "old_data_pointer": 1,
                    "old_data_structure_value": 1,
                    "old_instance": 1,
                    "old_list_ptr": 1,
                    "old_value": 1,
                    "original_u_var": 1,
                    "prev_entry": 1,
                    "prev_record": 1,
                    "previous_data": 2,
                    "previous_entry": 3,
                    "previous_ptr": 1,
                    "previous_value": 3,
                    "temp": 1,
                    "temp1": 2,
                    "temp_value": 1,
                    "temp_var": 3,
                    "temp_var1": 5,
                    "temp_var_1": 1
                },
                "uVar3": {
                    "copied_string": 3,
                    "duplicated_source": 1,
                    "duplicated_str": 3,
                    "duplicated_string": 17,
                    "name_copy": 1,
                    "new_string": 1,
                    "temp2": 2,
                    "temp_var2": 1,
                    "temp_var_2": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                },
                "xstrdup": {
                    "duplicate_string": 1
                }
            },
            "called": [
                "FUN_00104390",
                "FUN_001043d0"
            ],
            "calling": [
                "FUN_0010a69a",
                "FUN_0010b800",
                "FUN_0010b948",
                "FUN_00109dfe",
                "FUN_0010a2b9",
                "FUN_00109cf4",
                "FUN_0010e453",
                "FUN_0010a181",
                "FUN_0010a0e9",
                "FUN_00109d97",
                "FUN_00109e76",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010a424",
                "FUN_0010a377"
            ],
            "code": "\nundefined initialize_data_structure_00109b52(long data_structure,undefined8 source_string,undefined8 param3,undefined flag,\n                      undefined4 param5)\n\n{\n  undefined8 temp_var1;\n  undefined8 *allocated_memory;\n  undefined8 duplicated_string;\n  \n  allocated_memory = (undefined8 *)allocate_memory(0x40);\n  duplicated_string = duplicate_string(source_string);\n  allocated_memory[2] = param3;\n  *(undefined (*) [16])(allocated_memory + 4) = ZEXT816(0);\n  *(undefined (*) [16])(allocated_memory + 6) = ZEXT816(0);\n  temp_var1 = *(undefined8 *)(data_structure + 0x60);\n  *(undefined *)((long)allocated_memory + 0x1c) = flag;\n  *(undefined4 *)(allocated_memory + 3) = param5;\n  *(undefined8 **)(data_structure + 0x60) = allocated_memory;\n  *allocated_memory = temp_var1;\n  allocated_memory[1] = duplicated_string;\n  return 1;\n}\n\n",
            "current_name": "initialize_data_structure_00109b52",
            "entrypoint": "0x00109b52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "data_structure",
                "param_2": "source_string",
                "param_3": "param3",
                "param_4": "flag",
                "param_5": "param5",
                "puVar2": "allocated_memory",
                "uVar1": "temp_var1",
                "uVar3": "duplicated_string",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109bbb": {
            "additional_data": {
                "0x30": {
                    "string_offset": 1
                },
                "0x3b": {
                    "semicolon": 1
                },
                "0x60": {
                    "offset": 1
                },
                "FUN_00109bbb": {
                    "add_semicolon_to_end_of_string": 1,
                    "add_semicolon_to_string": 1,
                    "append_semicolon": 1,
                    "append_semicolon_if_non_null": 1,
                    "append_semicolon_to_end": 2,
                    "append_semicolon_to_end_of_string": 2,
                    "append_semicolon_to_string": 20,
                    "append_to_end_of_string_length": 1,
                    "append_to_end_with_semicolon": 1,
                    "update_string_and_check": 1
                },
                "__s": {
                    "str": 3,
                    "string": 4,
                    "string_pointer": 12,
                    "string_ptr": 5,
                    "string_to_append": 2,
                    "string_to_append_to": 1,
                    "string_to_modify": 1,
                    "string_value": 1
                },
                "param_1": {
                    "arg1": 1,
                    "data_pointer": 1,
                    "input": 9,
                    "input_address": 3,
                    "input_param": 1,
                    "input_parameter": 2,
                    "input_pointer": 5,
                    "input_ptr": 1,
                    "input_string": 3,
                    "input_value": 1,
                    "object_address": 2,
                    "str_pointer": 1,
                    "str_ptr": 1
                },
                "sVar1": {
                    "str_len": 1,
                    "str_length": 2,
                    "string_length": 25
                }
            },
            "called": [
                "FUN_00104270"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nbool append_semicolon_to_end_of_string_00109bbb(long input)\n\n{\n  char *string_pointer;\n  size_t string_length;\n  \n  if (*(long *)(input + 0x60) != 0) {\n    string_pointer = *(char **)(*(long *)(input + 0x60) + 0x30);\n    if (string_pointer != (char *)0x0) {\n      string_length = strlen(string_pointer);\n      *(undefined2 *)(string_pointer + string_length) = 0x3b;\n    }\n    return string_pointer != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "current_name": "append_semicolon_to_end_of_string_00109bbb",
            "entrypoint": "0x00109bbb",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109bbb": "append_semicolon_to_end_of_string_00109bbb",
                "__s": "string_pointer",
                "param_1": "input",
                "sVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109be3": {
            "additional_data": {
                "CONCAT71": {
                    "return_val": 1
                },
                "FUN_00109be3": {
                    "add_param_to_buffer": 1,
                    "expand_and_add_data": 2,
                    "expand_and_add_item_to_array": 1,
                    "expand_and_add_item_to_buffer": 1,
                    "expand_and_add_to_buffer": 1,
                    "expand_and_add_to_dynamic_array": 1,
                    "expand_and_append_data": 1,
                    "expand_and_append_user_data": 1,
                    "expand_and_insert_value": 2,
                    "expand_and_set_array_element": 1,
                    "expand_and_store": 1,
                    "expand_and_store_data": 9,
                    "expand_and_store_value": 2,
                    "expand_array": 1,
                    "extend_and_store_array": 1,
                    "extend_array_and_insert_value": 1,
                    "increase_array_capacity": 1,
                    "resize_and_add_value": 1,
                    "resize_and_insert_data": 1,
                    "resize_and_insert_record": 1
                },
                "param_1": {
                    "array": 6,
                    "array_info": 2,
                    "array_pointer": 2,
                    "array_ptr": 1,
                    "array_start": 1,
                    "array_struct": 1,
                    "buffer": 3,
                    "data": 3,
                    "data_container": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_struct": 3,
                    "data_struct_ptr": 1,
                    "data_structure": 1,
                    "dynamic_array": 1,
                    "record_array": 1,
                    "user_data_ptr": 1
                },
                "param_2": {
                    "data": 4,
                    "element": 4,
                    "item": 1,
                    "new_data": 1,
                    "new_element": 1,
                    "new_item": 1,
                    "new_value": 4,
                    "param1_value": 1,
                    "record": 1,
                    "value": 13
                },
                "param_3": {
                    "code": 1,
                    "element_size": 2,
                    "flag": 1,
                    "index": 1,
                    "length": 1,
                    "new_element_size": 1,
                    "new_size": 1,
                    "new_value": 1,
                    "param2_value": 1,
                    "param3": 2,
                    "record_type": 1,
                    "size": 12,
                    "status": 2,
                    "value": 4
                },
                "puVar2": {
                    "array_ptr": 1,
                    "data_ptr": 3,
                    "element_pointer": 1,
                    "element_ptr": 1,
                    "insert_location": 1,
                    "insert_ptr": 1,
                    "insertion_point": 2,
                    "insertion_ptr": 1,
                    "item_address": 1,
                    "item_ptr": 1,
                    "new_data_pointer": 2,
                    "new_data_ptr": 2,
                    "new_element": 2,
                    "new_element_address": 2,
                    "new_element_pointer": 1,
                    "new_element_ptr": 1,
                    "new_param_addr": 1,
                    "next_element_ptr": 1,
                    "ptr": 2,
                    "ptr_to_item": 1,
                    "ptr_to_next_data_slot": 1,
                    "record_ptr": 1,
                    "target_ptr": 1
                },
                "uVar1": {
                    "expanded_array": 1,
                    "expanded_data": 1,
                    "expanded_data_ptr": 2,
                    "expanded_data_struct": 1,
                    "expanded_data_structure": 1,
                    "new_array": 5,
                    "new_array_address": 1,
                    "new_array_pointer": 1,
                    "new_array_ptr": 1,
                    "new_array_start": 1,
                    "new_buffer": 2,
                    "new_data": 2,
                    "new_data_pointer": 1,
                    "new_data_ptr": 2,
                    "new_ptr": 1,
                    "new_record_array": 1,
                    "realloc_result": 7
                },
                "uVar3": {
                    "array_size": 3,
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "current_data_count": 1,
                    "current_data_size": 1,
                    "current_element_count": 1,
                    "current_index": 1,
                    "current_length": 1,
                    "current_record_count": 1,
                    "current_size": 17,
                    "data_size": 1,
                    "old_size": 1,
                    "size": 1
                }
            },
            "called": [
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d7d4"
            ],
            "code": "\nundefined8 expand_and_store_data_00109be3(long array,undefined8 value,undefined4 size)\n\n{\n  undefined8 realloc_result;\n  undefined8 *data_ptr;\n  uint current_size;\n  \n  if (*(uint *)(array + 0x2c) <= *(uint *)(array + 0x28)) {\n    current_size = *(uint *)(array + 0x2c) + 10;\n    *(uint *)(array + 0x2c) = current_size;\n    realloc_result = xrealloc(*(undefined8 *)(array + 0x20),(ulong)current_size << 4);\n    *(undefined8 *)(array + 0x20) = realloc_result;\n  }\n  current_size = *(uint *)(array + 0x28);\n  data_ptr = (undefined8 *)((ulong)current_size * 0x10 + *(long *)(array + 0x20));\n  *data_ptr = value;\n  *(undefined4 *)(data_ptr + 1) = size;\n  *(uint *)(array + 0x28) = current_size + 1;\n  return return_val((int7)((ulong)data_ptr >> 8),1);\n}\n\n",
            "current_name": "expand_and_store_data_00109be3",
            "entrypoint": "0x00109be3",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT71": "return_val",
                "FUN_00109be3": "expand_and_store_data_00109be3",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "puVar2": "data_ptr",
                "uVar1": "realloc_result",
                "uVar3": "current_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109c2e": {
            "additional_data": {
                "FUN_00109c2e": {
                    "expand_and_allocate_memory": 1,
                    "expand_and_copy_array": 3,
                    "expand_and_copy_memory": 1,
                    "expand_and_initialize_array": 1,
                    "expand_and_store_data": 1,
                    "expand_array": 1,
                    "param_resize_array": 1,
                    "reallocate_memory": 1,
                    "reallocate_memory_and_copy": 1,
                    "resize_and_copy_array": 2,
                    "resize_and_initialize_array": 7,
                    "resize_and_update_array": 1,
                    "resize_array": 8,
                    "resize_array_and_copy": 1,
                    "resize_array_and_set_value": 1
                },
                "auVar7": {
                    "output": 1,
                    "result": 3,
                    "result_array": 2,
                    "return_array": 1,
                    "return_result": 1,
                    "return_val": 1,
                    "return_value": 20,
                    "return_value_array": 1,
                    "temp_array": 1
                },
                "bVar6": {
                    "byte_flag": 1,
                    "byte_var": 2,
                    "copy_flag": 1,
                    "count": 1,
                    "flag2": 2,
                    "flag_byte": 1,
                    "initialize_flag": 1,
                    "initialized": 1,
                    "is_flag_set": 2,
                    "is_set": 1,
                    "is_zero": 10,
                    "is_zero_size": 2,
                    "loop_counter": 1,
                    "temp_byte": 1,
                    "temp_byte_var6": 1,
                    "temp_var4": 2,
                    "temp_var6": 1
                },
                "lVar1": {
                    "current_count": 1,
                    "current_max": 1,
                    "last_element": 1,
                    "new_array": 2,
                    "new_array_pointer": 3,
                    "new_array_ptr": 8,
                    "new_element_index": 2,
                    "new_memory": 1,
                    "new_ptr": 2,
                    "new_size": 1,
                    "next_index": 1,
                    "old_size": 1,
                    "temp": 2,
                    "temp_long_var1": 1,
                    "temp_var1": 4
                },
                "lVar3": {
                    "copy_counter": 1,
                    "diff": 1,
                    "difference": 1,
                    "loop_counter": 1,
                    "loop_index": 1,
                    "num_elements_to_add": 1,
                    "remaining": 4,
                    "remaining_bytes": 2,
                    "remaining_element_size": 1,
                    "remaining_elements": 6,
                    "remaining_size": 6,
                    "temp2": 1,
                    "temp_long_var3": 1,
                    "temp_var2": 3,
                    "temp_var3": 1
                },
                "param_1": {
                    "array": 12,
                    "array_address": 1,
                    "array_pointer": 5,
                    "array_ptr": 7,
                    "data_struct": 1,
                    "data_structure": 1,
                    "dst_ptr": 1,
                    "input_array": 1,
                    "input_data": 1,
                    "src_pointer": 1
                },
                "param_2": {
                    "data": 5,
                    "element": 3,
                    "new_element": 2,
                    "new_value": 4,
                    "param2_value": 1,
                    "value": 15,
                    "value_to_store": 1
                },
                "param_3": {
                    "array_length": 5,
                    "array_size": 8,
                    "desired_size": 1,
                    "index": 1,
                    "new_size": 3,
                    "num_elements": 1,
                    "size": 11,
                    "target_size": 1
                },
                "param_4": {
                    "condition": 1,
                    "flag": 29,
                    "param4_value": 1
                },
                "param_5": {
                    "data": 2,
                    "data_pointer": 1,
                    "flag_ptr": 2,
                    "flag_value": 1,
                    "new_value": 1,
                    "out_param": 1,
                    "output": 3,
                    "output_array": 2,
                    "output_ptr": 3,
                    "output_value": 1,
                    "param5_pointer": 1,
                    "ptr_flag": 3,
                    "result": 9,
                    "status": 1
                },
                "param_6": {
                    "aux_value": 1,
                    "data": 3,
                    "extra_data": 3,
                    "param": 1,
                    "param6_value": 1,
                    "param_6": 1,
                    "param_six": 1,
                    "result": 6,
                    "return_value": 4,
                    "some_data": 1,
                    "some_value": 1,
                    "unknown": 1,
                    "userdata": 1,
                    "value": 6
                },
                "plVar2": {
                    "array_element": 2,
                    "array_ptr": 4,
                    "curr_element_pointer": 1,
                    "current_element": 4,
                    "current_element_ptr": 3,
                    "current_entry": 1,
                    "dst_array": 1,
                    "dst_pointer": 1,
                    "element_ptr": 4,
                    "entry_pointer": 1,
                    "new_element": 3,
                    "pointer_to_long_var2": 1,
                    "ptr": 2,
                    "target_element_ptr": 1,
                    "temp_var2": 1,
                    "value_ptr": 1
                },
                "puVar4": {
                    "array_end": 1,
                    "current_byte": 5,
                    "current_byte_ptr": 2,
                    "current_element": 5,
                    "current_element_ptr": 1,
                    "current_entry": 1,
                    "dst_data": 1,
                    "element": 1,
                    "element_ptr": 2,
                    "p": 1,
                    "pointer_to_undefined_var4": 1,
                    "ptr": 6,
                    "ptr2": 1,
                    "temp_ptr": 1,
                    "temp_var4": 1,
                    "zero_ptr": 1
                },
                "uVar5": {
                    "array_length": 1,
                    "array_size": 2,
                    "current_array_size": 1,
                    "current_length": 2,
                    "current_size": 16,
                    "existing_size": 1,
                    "max_size": 2,
                    "old_length": 1,
                    "original_size": 1,
                    "temp_u_var5": 1,
                    "temp_var3": 2,
                    "temp_var5": 1
                }
            },
            "called": [
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "code": "\nundefined  [16]\nresize_and_initialize_array_00109c2e(long array,long value,ulong size,int flag,undefined4 *result,\n            undefined8 result)\n\n{\n  long new_array_ptr;\n  long *current_element;\n  long remaining_size;\n  undefined *ptr;\n  ulong current_size;\n  byte is_zero;\n  undefined return_value [16];\n  \n  is_zero = 0;\n  size = size & 0xffffffff;\n  current_size = *(ulong *)(array + 0x1b0);\n  if (current_size <= size) {\n    if (current_size == 0) {\n      current_size = 10;\n    }\n    for (; current_size <= size; current_size = current_size * 2) {\n    }\n    new_array_ptr = xrealloc(*(undefined8 *)(array + 0x1a8),current_size * 0x18);\n    *(long *)(array + 0x1a8) = new_array_ptr;\n    ptr = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + new_array_ptr);\n    for (remaining_size = (current_size - *(long *)(array + 0x1b0)) * 0x18; remaining_size != 0; remaining_size = remaining_size + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)is_zero * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = current_size;\n  }\n  current_element = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*current_element == 0) {\n    new_array_ptr = *(long *)(array + 0x68);\n    *current_element = new_array_ptr;\n    *(long *)(array + 0x68) = new_array_ptr + 1;\n    current_element[1] = value;\n    *(int *)(current_element + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(current_element + 2) = 0;\n    *(undefined4 *)((long)current_element + 0x14) = *result;\n  }\n  else {\n    *result = *(undefined4 *)((long)current_element + 0x14);\n  }\n  return_value._8_8_ = result;\n  return_value._0_8_ = *current_element;\n  return return_value;\n}\n\n",
            "current_name": "resize_and_initialize_array_00109c2e",
            "entrypoint": "0x00109c2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109c2e": "resize_and_initialize_array_00109c2e",
                "auVar7": "return_value",
                "bVar6": "is_zero",
                "lVar1": "new_array_ptr",
                "lVar3": "remaining_size",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "result",
                "param_6": "result",
                "plVar2": "current_element",
                "puVar4": "ptr",
                "uVar5": "current_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109cf4": {
            "additional_data": {
                "FUN_00109cf4": {
                    "convert_and_push": 3,
                    "convert_and_push_string": 7,
                    "convert_and_push_string_to_stack": 1,
                    "convert_and_push_to_stab": 1,
                    "convert_and_push_to_stack": 1,
                    "convert_and_push_to_string": 3,
                    "convert_long_to_string": 1,
                    "convert_to_string": 1,
                    "format_and_push": 1,
                    "format_and_push_string": 5,
                    "format_and_push_value": 1,
                    "print_param_as_string": 1,
                    "print_param_to_string": 1,
                    "push_string_to_stab": 1,
                    "push_string_to_table": 1,
                    "push_string_with_format": 1,
                    "write_integer_to_string": 1
                },
                "local_3c": {
                    "buffer": 1,
                    "converted_number_string": 1,
                    "converted_string": 9,
                    "converted_value": 5,
                    "formatted_number": 1,
                    "formatted_string": 4,
                    "formatted_value": 3,
                    "number_string": 1,
                    "string_buffer": 3,
                    "string_value": 2
                },
                "param_1": {
                    "arg1": 1,
                    "buffer": 1,
                    "dest": 1,
                    "destination": 2,
                    "output": 2,
                    "output_buffer": 12,
                    "output_pointer": 1,
                    "output_string": 1,
                    "param": 1,
                    "param1": 1,
                    "param_1": 2,
                    "param_one": 1,
                    "param_out": 1,
                    "stab_param1": 1,
                    "stack_pointer": 2,
                    "table": 1
                },
                "param_2": {
                    "arg2": 1,
                    "input": 2,
                    "input_long": 1,
                    "input_number": 4,
                    "input_value": 8,
                    "integer_value": 1,
                    "long_param": 1,
                    "number": 3,
                    "param2": 1,
                    "param_two": 1,
                    "stab_param2": 1,
                    "value": 6,
                    "value_to_convert": 1
                },
                "param_3": {
                    "arg3": 1,
                    "conversion_type": 1,
                    "extra_param": 1,
                    "flag": 5,
                    "flags": 3,
                    "format": 1,
                    "format_flag": 1,
                    "format_specifier": 4,
                    "length": 6,
                    "param3": 1,
                    "param_3": 2,
                    "param_flag": 1,
                    "param_three": 1,
                    "param_value": 1,
                    "parameter": 1,
                    "stab_param3": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010b800",
                "FUN_0010b948",
                "FUN_00109d5c",
                "FUN_00109d97",
                "FUN_00109dfe",
                "FUN_00109d3e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010bba1"
            ],
            "code": "\nvoid convert_and_push_string_to_stack_00109cf4(undefined8 output_buffer,undefined8 input_value,undefined4 length)\n\n{\n  char converted_string [28];\n  \n  sprintf(converted_string,\"%ld\",input_value);\n  stab_push_string(output_buffer,converted_string,input_value,0,length);\n  return;\n}\n\n",
            "current_name": "convert_and_push_string_to_stack_00109cf4",
            "entrypoint": "0x00109cf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109cf4": "convert_and_push_string_to_stack_00109cf4",
                "local_3c": "converted_string",
                "param_1": "output_buffer",
                "param_2": "input_value",
                "param_3": "length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d3e": {
            "additional_data": {
                "FUN_00109cf4": {
                    "push_defined_type": 1
                },
                "FUN_00109d3e": {
                    "push_defined_type": 28,
                    "push_defined_type_into_stab": 1,
                    "push_defined_type_into_stack": 1,
                    "push_defined_type_to_stab": 1
                },
                "param_1": {
                    "arg1": 5,
                    "argument": 1,
                    "buffer": 1,
                    "container": 1,
                    "context": 1,
                    "data": 6,
                    "input": 1,
                    "input1": 1,
                    "input_param": 1,
                    "input_value": 1,
                    "obj": 1,
                    "output": 1,
                    "param": 5,
                    "param1": 1,
                    "param_address": 1,
                    "pointer": 1,
                    "target": 2
                },
                "param_2": {
                    "arg2": 3,
                    "array_length": 1,
                    "count": 4,
                    "index": 7,
                    "input2": 1,
                    "length": 3,
                    "num": 1,
                    "num_elements": 1,
                    "param2": 1,
                    "size": 8,
                    "type_index": 1
                },
                "param_3": {
                    "type": 1
                },
                "stab_push_defined_type": {
                    "push_defined_type": 1
                },
                "uVar1": {
                    "default_value": 9,
                    "defined_type": 9,
                    "found_type": 1,
                    "result": 1,
                    "retrieved_value": 1,
                    "type": 2,
                    "type_value": 1,
                    "value": 3
                }
            },
            "called": [
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid push_defined_type_to_stab_00109d3e(undefined8 data,int size)\n\n{\n  undefined8 default_value;\n  \n  default_value = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    default_value = *(undefined8 *)(&DAT_00121360 + (ulong)(size - 1U) * 8);\n  }\n  push_defined_type(data,default_value,size);\n  return;\n}\n\n",
            "current_name": "push_defined_type_to_stab_00109d3e",
            "entrypoint": "0x00109d3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d3e": "push_defined_type_to_stab_00109d3e",
                "param_1": "data",
                "param_2": "size",
                "stab_push_defined_type": "push_defined_type",
                "uVar1": "default_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d5c": {
            "additional_data": {
                "FUN_00109c2e": {
                    "push_defined_type": 1,
                    "sub_function": 1
                },
                "FUN_00109cf4": {
                    "prepare_struct_index": 1,
                    "sub_function2": 1
                },
                "FUN_00109d5c": {
                    "apply_struct_index": 1,
                    "define_struct": 2,
                    "define_struct_index": 1,
                    "extract_struct_type": 1,
                    "process_defined_type": 1,
                    "process_param": 1,
                    "process_struct_index": 2,
                    "push_defined_type": 12,
                    "push_defined_type_from_struct": 1,
                    "push_defined_type_from_struct_index": 1,
                    "push_defined_type_to_stab": 1,
                    "push_defined_type_to_struct": 2,
                    "push_type_if_needed": 1,
                    "push_type_to_stack": 1,
                    "register_defined_type": 1,
                    "store_data_to_struct": 1
                },
                "lVar1": {
                    "index": 2,
                    "struct_index": 29
                },
                "param_1": {
                    "data": 1,
                    "data_to_store": 1,
                    "input": 4,
                    "input_data": 3,
                    "input_param": 8,
                    "input_parameter": 1,
                    "input_type": 1,
                    "input_value": 6,
                    "sub_param1": 1,
                    "type": 2,
                    "value": 1
                },
                "param_2": {
                    "sub_param2": 1
                },
                "param_3": {
                    "sub_param3": 1
                },
                "param_4": {
                    "param4": 1
                },
                "param_5": {
                    "param5": 1
                },
                "stab_get_struct_index": {
                    "get_struct_index": 4
                },
                "stab_push_defined_type": {
                    "push_defined_type": 4
                },
                "uVar2": {
                    "push_output": 1,
                    "push_result": 2,
                    "result": 26,
                    "return_value": 1
                }
            },
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 push_defined_type_to_struct_00109d5c(undefined8 input_param)\n\n{\n  long struct_index;\n  undefined8 result;\n  \n  struct_index = get_struct_index();\n  if (-1 < struct_index) {\n    result = push_defined_type(input_param,struct_index,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "push_defined_type_to_struct_00109d5c",
            "entrypoint": "0x00109d5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d5c": "push_defined_type_to_struct_00109d5c",
                "lVar1": "struct_index",
                "param_1": "input_param",
                "stab_get_struct_index": "get_struct_index",
                "stab_push_defined_type": "push_defined_type",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d97": {
            "additional_data": {
                "FUN_00109d97": {
                    "extract_data": 1,
                    "extract_stab_data": 1,
                    "process_data": 4,
                    "process_param": 1,
                    "process_parameter": 4,
                    "process_value": 3,
                    "push_defined_type_or_string": 2,
                    "push_stab_value": 1,
                    "push_value_or_increment": 1,
                    "reverse_and_push_strings": 1,
                    "reverse_num_to_string": 1,
                    "update_stab_data": 1
                },
                "lVar1": {
                    "count": 3,
                    "counter": 14,
                    "curr_value": 1,
                    "current_num": 1,
                    "current_value": 8,
                    "old_value": 2
                },
                "local_40": {
                    "buffer": 1,
                    "formatted_data": 2,
                    "formatted_string": 15,
                    "message": 1,
                    "num_string": 1,
                    "output": 3,
                    "output_buffer": 1,
                    "output_str": 1,
                    "output_string": 4,
                    "string_buffer": 1,
                    "string_value": 1
                },
                "param_1": {
                    "context": 1,
                    "data": 5,
                    "data_ptr": 1,
                    "input": 5,
                    "input_data": 1,
                    "input_num": 1,
                    "input_param": 4,
                    "input_parameter": 2,
                    "input_value": 6,
                    "param": 2,
                    "stab_data": 1,
                    "stab_ptr": 1,
                    "stack_frame": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00109b52",
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_0010a424",
                "FUN_00112c1f"
            ],
            "code": "\nvoid push_value_or_increment_00109d97(long input_value)\n\n{\n  long counter;\n  char formatted_string [40];\n  \n  if (*(long *)(input_value + 0x70) != 0) {\n    stab_push_defined_type(input_value,*(long *)(input_value + 0x70),0);\n    return;\n  }\n  counter = *(long *)(input_value + 0x68);\n  *(long *)(input_value + 0x68) = counter + 1;\n  sprintf(formatted_string,\"%ld=%ld\",counter,counter);\n  stab_push_string(input_value,formatted_string,counter,0,0);\n  return;\n}\n\n",
            "current_name": "push_value_or_increment_00109d97",
            "entrypoint": "0x00109d97",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d97": "push_value_or_increment_00109d97",
                "lVar1": "counter",
                "local_40": "formatted_string",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109dfe": {
            "additional_data": {
                "FUN_00109dfe": {
                    "decompile_and_push": 1,
                    "extract_stab_string": 1,
                    "prepare_data": 1,
                    "process_argument": 1,
                    "process_data": 4,
                    "process_input": 1,
                    "process_parameter": 1,
                    "process_parameter_value": 1,
                    "process_stab": 2,
                    "process_stab_data": 1,
                    "process_stab_entries": 1,
                    "process_stab_entry": 4,
                    "push_defined_type_or_increment": 1,
                    "push_defined_type_or_string": 3
                },
                "lVar1": {
                    "count": 3,
                    "counter": 19,
                    "current_value": 2,
                    "previous_count": 1,
                    "previous_value": 1,
                    "temp_var": 1,
                    "temp_variable": 1
                },
                "local_40": {
                    "buffer": 4,
                    "formatted_string": 12,
                    "message": 2,
                    "output": 1,
                    "output_string": 4,
                    "result_string": 1,
                    "stab_string": 2,
                    "string_buffer": 4,
                    "string_value": 1
                },
                "param_1": {
                    "arg": 2,
                    "context": 2,
                    "data": 5,
                    "entry": 1,
                    "entry_pointer": 2,
                    "entry_ptr": 1,
                    "function_data": 2,
                    "function_parameter": 1,
                    "input": 4,
                    "input_param": 1,
                    "input_parameter": 2,
                    "input_ptr": 1,
                    "input_value": 1,
                    "param": 1,
                    "parameter": 2,
                    "reference_address": 1,
                    "stab_struct": 1,
                    "stability_data": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00109b52",
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_stab_data_00109dfe(long data)\n\n{\n  long counter;\n  char formatted_string [40];\n  \n  if (*(long *)(data + 0x70) != 0) {\n    stab_push_defined_type(data,*(long *)(data + 0x70),0);\n    return;\n  }\n  counter = *(long *)(data + 0x68);\n  *(long *)(data + 0x68) = counter + 1;\n  *(long *)(data + 0x70) = counter;\n  sprintf(formatted_string,\"%ld=%ld\",counter,counter);\n  stab_push_string(data,formatted_string,counter,1,0);\n  return;\n}\n\n",
            "current_name": "process_stab_data_00109dfe",
            "entrypoint": "0x00109dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109dfe": "process_stab_data_00109dfe",
                "lVar1": "counter",
                "local_40": "formatted_string",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109e76": {
            "additional_data": {
                "FUN_00109e76": {
                    "append_to_buffer": 1,
                    "build_debug_message": 1,
                    "extracted_data_to_string": 1,
                    "format_and_push_string": 4,
                    "generate_debug_string": 2,
                    "generate_exp_string": 1,
                    "generate_formatted_string": 1,
                    "generate_log_message": 1,
                    "generate_log_string": 1,
                    "generate_stab_entry": 1,
                    "generate_stab_string": 1,
                    "generate_string": 1,
                    "log_data_and_increment_counter": 1,
                    "print_and_push_data": 1,
                    "process_and_push_data": 1,
                    "process_data": 1,
                    "push_stab_string": 1,
                    "push_string_to_stack": 1,
                    "store_and_format_data": 1,
                    "update_and_format_stat": 1,
                    "update_and_push_string": 1,
                    "update_counter": 1,
                    "update_counter_and_log": 1,
                    "update_stab_entry": 1,
                    "update_string_value": 1,
                    "write_to_log": 1
                },
                "lVar1": {
                    "buffer_index": 1,
                    "count": 1,
                    "counter": 9,
                    "current_value": 11,
                    "index": 1,
                    "old_value": 1,
                    "original_value": 2,
                    "previous_count": 1,
                    "previous_data_size": 1,
                    "previous_value": 2
                },
                "local_5a": {
                    "buffer": 1,
                    "data_string": 1,
                    "debug_message": 2,
                    "debug_string": 1,
                    "expression_string": 1,
                    "format_string": 1,
                    "formatted_data": 1,
                    "formatted_string": 15,
                    "log_message": 2,
                    "log_string": 3,
                    "stab_entry": 1,
                    "stab_string": 1
                },
                "param_1": {
                    "address": 1,
                    "base_address": 18,
                    "binary_data_address": 1,
                    "buffer": 1,
                    "data_address": 1,
                    "data_pointer": 2,
                    "data_structure": 1,
                    "debug_info": 1,
                    "input": 1,
                    "log_pointer": 1,
                    "pointer": 1,
                    "struct_address": 1,
                    "struct_ptr": 1
                },
                "param_2": {
                    "count": 2,
                    "counter": 3,
                    "data": 1,
                    "data_size": 1,
                    "entry_id": 1,
                    "index": 1,
                    "param_value": 2,
                    "user_data": 1,
                    "value": 18,
                    "value_to_update": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid format_and_push_string_00109e76(long base_address,uint value)\n\n{\n  long current_value;\n  char formatted_string [58];\n  \n  current_value = *(long *)(base_address + 0x68);\n  *(long *)(base_address + 0x68) = current_value + 1;\n  sprintf(formatted_string,\"%ld=r%ld;%u;0;\",current_value,current_value,(ulong)value);\n  stab_push_string(base_address,formatted_string,current_value,1,value * 2);\n  return;\n}\n\n",
            "current_name": "format_and_push_string_00109e76",
            "entrypoint": "0x00109e76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109e76": "format_and_push_string_00109e76",
                "lVar1": "current_value",
                "local_5a": "formatted_string",
                "param_1": "base_address",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109ed3": {
            "additional_data": {
                "FUN_00109b2f": {
                    "another_utility_function": 1
                },
                "FUN_00109b52": {
                    "utility_function": 1
                },
                "FUN_00109cf4": {
                    "memory_free_function": 1
                },
                "FUN_00109ed3": {
                    "extract_string_from_binary": 1,
                    "parse_and_push_value": 1,
                    "parse_and_store_string": 1,
                    "parse_input": 1,
                    "process_data": 9,
                    "reverse_eng_func": 1,
                    "reverse_stab_push_string": 1,
                    "reverse_string_operation": 1,
                    "update_string_in_array": 1
                },
                "__ptr": {
                    "free_ptr": 1,
                    "pointer": 2,
                    "pointer_to_free": 1,
                    "pop_item": 1,
                    "pop_type_ptr": 1,
                    "pop_type_result": 2,
                    "popped_type": 1,
                    "ptr": 11,
                    "ptr2": 1,
                    "temp_pointer": 3,
                    "temp_ptr": 6,
                    "temp_void_pointer": 1
                },
                "__s": {
                    "concatenated_string": 1,
                    "formatted_string": 3,
                    "formatted_value": 1,
                    "modified_string": 1,
                    "new_str": 8,
                    "new_string": 13,
                    "output_string": 1,
                    "str": 1,
                    "temp_string": 1,
                    "temporary_string": 1
                },
                "bVar12": {
                    "bool_var": 1,
                    "boolean_flag": 1,
                    "byte": 1,
                    "byte_flag": 3,
                    "byte_val": 3,
                    "byte_value": 5,
                    "byte_var": 4,
                    "counter": 1,
                    "end_bool": 1,
                    "flag": 2,
                    "flag2": 1,
                    "flag3": 1,
                    "flag_byte": 1,
                    "flag_value": 1,
                    "initialized_size": 1,
                    "is_zero": 1,
                    "temp_byte": 1,
                    "zero_byte": 1,
                    "zero_flag": 1
                },
                "cVar3": {
                    "char_check": 1,
                    "char_flag": 1,
                    "char_val": 1,
                    "char_value": 4,
                    "char_var": 3,
                    "operation_status": 1,
                    "push_status": 1,
                    "result": 13,
                    "result_char": 1,
                    "result_flag": 2,
                    "success": 2,
                    "temp_char": 1
                },
                "lVar6": {
                    "count": 5,
                    "counter": 6,
                    "index": 5,
                    "ptr1_value": 1,
                    "result": 1,
                    "temp": 2,
                    "temp_long": 2,
                    "temp_long1": 1,
                    "temp_long_var": 1,
                    "temp_value": 2,
                    "temp_var": 3,
                    "temp_var1": 1,
                    "temp_variable": 1
                },
                "lVar9": {
                    "count": 3,
                    "counter": 2,
                    "length": 2,
                    "loop_count": 2,
                    "loop_counter": 8,
                    "loop_index": 1,
                    "loop_size": 1,
                    "loop_value": 2,
                    "loop_var": 4,
                    "loop_variable": 1,
                    "remaining_size": 2,
                    "size": 1,
                    "temp_long2": 1,
                    "temp_var2": 1
                },
                "param_1": {
                    "arg1": 3,
                    "array": 1,
                    "binary_address": 1,
                    "binary_pointer": 1,
                    "data": 2,
                    "data_pointer": 1,
                    "data_size": 1,
                    "function_param_1": 1,
                    "input": 2,
                    "input1": 4,
                    "input_param": 5,
                    "input_pointer": 2,
                    "input_ptr": 2,
                    "input_val": 1,
                    "input_value": 2,
                    "input_value1": 1,
                    "param_addr": 1
                },
                "param_2": {
                    "arg2": 3,
                    "char_code": 1,
                    "char_param": 1,
                    "char_value": 1,
                    "character": 5,
                    "code_flag": 1,
                    "flag": 7,
                    "function_param_2": 1,
                    "input2": 2,
                    "input_value2": 1,
                    "mode_param": 1,
                    "option": 1,
                    "param_char": 1,
                    "param_index": 1,
                    "param_val": 1,
                    "some_value": 1,
                    "value": 2
                },
                "param_3": {
                    "another_value": 1,
                    "arg3": 3,
                    "code": 1,
                    "data": 1,
                    "flag": 5,
                    "flag_param": 1,
                    "function_param_3": 1,
                    "input3": 2,
                    "input_value3": 1,
                    "int_param": 1,
                    "int_value": 1,
                    "param": 1,
                    "param_data": 1,
                    "param_flag": 1,
                    "param_int": 1,
                    "param_value": 1,
                    "size": 1,
                    "status": 1,
                    "type": 5,
                    "unknown_param": 1
                },
                "param_4": {
                    "allocated_memory": 1,
                    "arg4": 1,
                    "array": 2,
                    "array_pointer": 2,
                    "buffer": 4,
                    "data": 1,
                    "data_pointer_array": 1,
                    "data_ptr": 2,
                    "function_param_4": 1,
                    "output1": 2,
                    "output_arr": 1,
                    "output_array": 1,
                    "output_param": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "param_arr": 1,
                    "param_long_arr": 1,
                    "ptr_array": 3,
                    "result_array": 1,
                    "string_arr": 1,
                    "string_array": 1,
                    "string_array_pointer": 1
                },
                "param_5": {
                    "allocated_memory_size": 1,
                    "arg5": 1,
                    "array_size": 3,
                    "buffer_size": 3,
                    "count_arr": 2,
                    "count_pointer": 1,
                    "counter": 1,
                    "data_size_ptr": 1,
                    "function_param_5": 1,
                    "length_array": 1,
                    "output2": 2,
                    "output_array_size": 1,
                    "output_param_size": 1,
                    "param_count": 1,
                    "param_u_long_arr": 1,
                    "result_count": 1,
                    "size": 1,
                    "size_array": 3,
                    "size_array_pointer": 1,
                    "size_pointer": 1,
                    "size_ptr": 3
                },
                "pcVar4": {
                    "char_pointer": 1,
                    "input_string": 3,
                    "param_string": 1,
                    "pop_value": 1,
                    "popped_string": 2,
                    "str": 3,
                    "str_ptr": 5,
                    "str_var": 1,
                    "string": 6,
                    "string_ptr": 3,
                    "string_value": 2,
                    "temp_char_pointer": 1,
                    "temp_string": 1,
                    "text": 1
                },
                "puVar11": {
                    "array_pointer": 1,
                    "byte_pointer": 1,
                    "byte_ptr": 4,
                    "counter_ptr": 1,
                    "data_ptr": 1,
                    "dest_pointer": 1,
                    "loop_ptr": 1,
                    "pointer": 3,
                    "pointer_variable": 1,
                    "ptr": 2,
                    "ptr2": 1,
                    "ptr_increment": 1,
                    "ptr_lock": 1,
                    "ptr_to_mem": 1,
                    "ptr_value": 1,
                    "ptr_var": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_undef_pointer": 1,
                    "undefined_pointer": 2,
                    "undefined_ptr": 2,
                    "undefined_var": 1,
                    "zero_ptr": 1
                },
                "sVar5": {
                    "input_length": 1,
                    "input_string_len": 1,
                    "input_string_length": 1,
                    "length": 3,
                    "str_len": 6,
                    "str_length": 3,
                    "string_len": 2,
                    "string_length": 12,
                    "temp_size": 1,
                    "text_length": 1
                },
                "uVar1": {
                    "allocated_memory_index": 1,
                    "allocated_size": 1,
                    "array_index": 1,
                    "array_size": 2,
                    "count": 2,
                    "data_size": 1,
                    "element_size": 1,
                    "first_count": 1,
                    "index": 1,
                    "length": 2,
                    "max_index": 1,
                    "max_size": 1,
                    "offset": 1,
                    "original_length": 1,
                    "ptr_value": 1,
                    "result_index": 1,
                    "size": 4,
                    "size_u_var": 1,
                    "string_length": 1,
                    "temp_u_long1": 1,
                    "tmp1": 1,
                    "value": 1,
                    "value1": 2,
                    "var1": 1
                },
                "uVar10": {
                    "current_size": 9,
                    "initial_size": 1,
                    "loop_counter": 1,
                    "new_buffer_size": 1,
                    "new_count": 2,
                    "new_length": 1,
                    "new_size": 5,
                    "param_5_value": 1,
                    "required_count": 1,
                    "size": 1,
                    "size_limit": 1,
                    "temp_count2": 1,
                    "temp_result_count": 1,
                    "temp_u_long3": 1,
                    "temp_ulong_var": 1,
                    "temp_val": 1,
                    "temp_value": 1,
                    "updated_size": 1
                },
                "uVar2": {
                    "initial_size": 1,
                    "length": 1,
                    "new_array_size": 2,
                    "new_count": 1,
                    "new_data_size": 1,
                    "new_index": 1,
                    "new_length": 1,
                    "new_offset": 1,
                    "new_result_count": 1,
                    "new_size": 5,
                    "new_string_length": 1,
                    "new_value": 2,
                    "temp_count": 1,
                    "temp_length": 1,
                    "temp_size": 3,
                    "temp_u_long2": 1,
                    "temp_u_var": 1,
                    "temp_value": 1,
                    "temp_variable": 1,
                    "tmp2": 1,
                    "value2": 2,
                    "var2": 1
                },
                "uVar7": {
                    "defined_var": 1,
                    "push_result": 4,
                    "result": 8,
                    "return_val": 1,
                    "return_value": 17
                },
                "uVar8": {
                    "bool_value": 2,
                    "bool_var": 1,
                    "defined_type": 1,
                    "flag": 9,
                    "flag2": 3,
                    "flag_value": 3,
                    "flag_var": 1,
                    "is_defined": 4,
                    "push_flag": 3,
                    "temp_undef": 1,
                    "type_flag": 2,
                    "undefined_var": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109cf4",
                "FUN_00109b2f",
                "FUN_001042b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010a0a0",
                "FUN_0010a0bd",
                "FUN_0010a0d3",
                "FUN_0010a083",
                "FUN_0010e5db"
            ],
            "code": "\nundefined8 process_data_00109ed3(long input_param,uint flag,undefined4 type,long *buffer,ulong *size_ptr)\n\n{\n  ulong size;\n  ulong new_size;\n  char result;\n  char *string;\n  size_t string_length;\n  char *new_string;\n  long counter;\n  void *ptr;\n  undefined8 return_value;\n  undefined flag;\n  long loop_counter;\n  ulong current_size;\n  undefined *byte_ptr;\n  byte byte_value;\n  \n  byte_value = 0;\n  counter = *(long *)(input_param + 0x60);\n  if (counter != 0) {\n    size = *(ulong *)(counter + 0x10);\n    if (((long)size < 1) || (buffer == (long *)0x0)) {\n      flag = *(undefined *)(counter + 0x1c);\n      string = (char *)stab_pop_type(input_param);\n      string_length = strlen(string);\n      new_string = (char *)xmalloc(string_length + 2);\n      sprintf(new_string,\"%c%s\",(ulong)flag,string);\n      free(string);\n      counter = 0;\n    }\n    else {\n      current_size = *size_ptr;\n      if (current_size <= size) {\n        if (current_size == 0) {\n          current_size = 10;\n        }\n        for (; current_size <= size; current_size = current_size * 2) {\n        }\n        counter = xrealloc(*buffer,current_size * 8);\n        new_size = *size_ptr;\n        *buffer = counter;\n        byte_ptr = (undefined *)(counter + new_size * 8);\n        for (loop_counter = (current_size - new_size) * 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *byte_ptr = 0;\n          byte_ptr = byte_ptr + (ulong)byte_value * -2 + 1;\n        }\n        *size_ptr = current_size;\n      }\n      counter = *(long *)(*buffer + size * 8);\n      if ((counter != 0) && (*(char *)(*(long *)(input_param + 0x60) + 0x1c) == '\\0')) {\n        ptr = (void *)stab_pop_type(input_param);\n        free(ptr);\n        return_value = stab_push_defined_type(input_param,counter,type);\n        return return_value;\n      }\n      counter = *(long *)(input_param + 0x68);\n      *(long *)(input_param + 0x68) = counter + 1;\n      string = (char *)stab_pop_type(input_param);\n      string_length = strlen(string);\n      new_string = (char *)xmalloc(string_length + 0x14);\n      sprintf(new_string,\"%ld=%c%s\",counter,(ulong)flag,string);\n      free(string);\n      flag = 1;\n      *(long *)(*buffer + size * 8) = counter;\n    }\n    result = stab_push_string(input_param,new_string,counter,flag,type);\n    if (result != '\\0') {\n      free(new_string);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00109ed3",
            "entrypoint": "0x00109ed3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "__ptr": "ptr",
                "__s": "new_string",
                "bVar12": "byte_value",
                "cVar3": "result",
                "lVar6": "counter",
                "lVar9": "loop_counter",
                "param_1": "input_param",
                "param_2": "flag",
                "param_3": "type",
                "param_4": "buffer",
                "param_5": "size_ptr",
                "pcVar4": "string",
                "puVar11": "byte_ptr",
                "sVar5": "string_length",
                "uVar1": "size",
                "uVar10": "current_size",
                "uVar2": "new_size",
                "uVar7": "return_value",
                "uVar8": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a083": {
            "additional_data": {
                "0x178": {
                    "offset_value_1": 1,
                    "param1_offset": 1
                },
                "0x180": {
                    "offset_value_2": 1,
                    "param2_offset": 1
                },
                "0x2a": {
                    "constant1": 1,
                    "constant_value": 1,
                    "modifier": 1
                },
                "4": {
                    "constant2": 1,
                    "size": 1
                },
                "FUN_00109ed3": {
                    "modify_data": 1,
                    "modify_function": 1,
                    "modify_stab_data": 1,
                    "modify_stab_entry": 1,
                    "modify_stab_type": 1,
                    "modify_sub_function": 1,
                    "modify_type": 1,
                    "modify_type_internal": 1,
                    "reverse_and_modify_stab_type": 1
                },
                "FUN_0010a083": {
                    "apply_stab_modification": 1,
                    "modify_and_return": 1,
                    "modify_data": 2,
                    "modify_data_values": 1,
                    "modify_function_parameters": 1,
                    "modify_params": 1,
                    "modify_stab_entries": 3,
                    "modify_stab_entry": 2,
                    "modify_stab_parameters": 1,
                    "modify_stab_type": 7,
                    "modify_stab_values": 1,
                    "modify_type": 5,
                    "modify_type_in_stab_table": 1,
                    "process_stab_data": 1,
                    "update_stab_modify_type": 2,
                    "update_stab_of_type": 1
                },
                "param_1": {
                    "base_address": 3,
                    "data": 1,
                    "data_address": 2,
                    "data_ptr": 1,
                    "entry_address": 5,
                    "entry_point_address": 1,
                    "input": 5,
                    "input_data": 1,
                    "input_param": 5,
                    "input_parameter": 2,
                    "input_value": 3,
                    "original_param": 1,
                    "param": 1
                },
                "param_2": {
                    "entry_type": 1,
                    "flag": 11,
                    "function_code": 1,
                    "index": 1,
                    "modifier": 1,
                    "param2": 1,
                    "param_2": 1,
                    "shift_amount": 1,
                    "type": 5,
                    "type_code": 3,
                    "type_flag": 1,
                    "type_value": 1,
                    "value": 1
                },
                "param_3": {
                    "constant_value": 1,
                    "count": 4,
                    "flag": 1,
                    "length": 4,
                    "length_value": 1,
                    "modification_code": 1,
                    "num": 1,
                    "param": 1,
                    "param3": 1,
                    "param_3": 2,
                    "param_length": 1,
                    "size": 5,
                    "unknown_param": 1,
                    "value": 5
                },
                "param_4": {
                    "address1": 2,
                    "address_array": 1,
                    "data1": 1,
                    "data1_ptr": 1,
                    "data_1": 1,
                    "data_address": 1,
                    "data_ptr": 1,
                    "data_ptr1": 1,
                    "data_ptr_1": 1,
                    "element_1": 1,
                    "entry_pointer": 1,
                    "input_pointer": 1,
                    "output_param_1": 2,
                    "param_4": 1,
                    "param_address1": 1,
                    "param_array": 1,
                    "pointer1": 1,
                    "ptr": 1,
                    "ptr1": 3,
                    "ptr_1": 2,
                    "ptr_data1": 1,
                    "ptr_param": 1,
                    "start_address": 1,
                    "start_address_ptr": 1
                },
                "param_5": {
                    "address2": 2,
                    "data": 1,
                    "data2": 1,
                    "data2_ptr": 1,
                    "data_2": 1,
                    "data_ptr2": 1,
                    "data_ptr_2": 1,
                    "element_2": 1,
                    "end_address": 1,
                    "end_address_ptr": 1,
                    "extra_address": 1,
                    "index_pointer": 1,
                    "long_ptr": 1,
                    "output_param_2": 2,
                    "output_pointer": 1,
                    "param_5": 1,
                    "param_address2": 1,
                    "pointer2": 1,
                    "ptr2": 3,
                    "ptr_2": 2,
                    "ptr_data2": 1,
                    "ptr_value": 1,
                    "ulong_array": 1,
                    "value_array": 1
                },
                "stab_modify_type": {
                    "modify_function": 1,
                    "modify_stab_entry_type": 1,
                    "modify_stab_type": 4,
                    "modify_type": 2,
                    "update_parameter_type": 1
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid update_stab_modify_type_0010a083(long input)\n\n{\n  modify_stab_type(input,0x2a,4,input + 0x178,input + 0x180);\n  return;\n}\n\n",
            "current_name": "update_stab_modify_type_0010a083",
            "entrypoint": "0x0010a083",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a083": "update_stab_modify_type_0010a083",
                "param_1": "input",
                "stab_modify_type": "modify_stab_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0a0": {
            "additional_data": {
                "0x198": {
                    "input_offset": 1,
                    "offset1": 3,
                    "param_address1": 1
                },
                "0x1a0": {
                    "input_length": 1,
                    "offset2": 3,
                    "param_address2": 1
                },
                "0x26": {
                    "constant1": 1,
                    "constant_a": 1,
                    "entry_index": 1,
                    "type_code": 2,
                    "type_constant": 1,
                    "type_value": 1
                },
                "4": {
                    "constant2": 1,
                    "constant_b": 1,
                    "entry_size": 1,
                    "num_bytes": 1,
                    "num_elements": 1,
                    "offset_value": 1,
                    "size_constant": 1
                },
                "DAT_00101958": {
                    "offset1": 1
                },
                "DAT_00101968": {
                    "offset2": 1
                },
                "FUN_00109ed3": {
                    "decompile_and_modify": 1,
                    "modify_binary_type": 1,
                    "modify_entry_data": 1,
                    "modify_stab_entry": 3,
                    "modify_stab_type": 2,
                    "modify_stab_type_parameter": 1,
                    "modify_stab_value": 1,
                    "modify_sub_function": 1,
                    "process_data": 2,
                    "process_stab_entry": 2
                },
                "FUN_0010a0a0": {
                    "extract_data_from_binary": 1,
                    "modify_and_return": 1,
                    "modify_data": 4,
                    "modify_entry": 1,
                    "modify_function": 1,
                    "modify_stab_entries": 4,
                    "modify_stab_entry": 3,
                    "modify_stab_type": 5,
                    "modify_stabs": 1,
                    "modify_type": 8,
                    "modify_values": 1,
                    "update_stab_type": 1
                },
                "param_1": {
                    "arg": 1,
                    "base_address": 1,
                    "base_pointer": 1,
                    "binary_data": 1,
                    "data": 5,
                    "data_address": 1,
                    "entry_address": 5,
                    "input": 6,
                    "input_data": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 2,
                    "param": 1,
                    "param1": 1,
                    "stab_entry": 1,
                    "stability_data": 1,
                    "value": 1
                },
                "param_2": {
                    "data_parameter": 1,
                    "entry_type": 2,
                    "index": 1,
                    "param2": 2,
                    "param_2": 1,
                    "parameter2": 1,
                    "size": 4,
                    "some_value": 1,
                    "sub_param": 1,
                    "type": 2,
                    "type_flag": 1,
                    "type_index": 1,
                    "type_param": 1,
                    "value": 3,
                    "value1": 2,
                    "value_2": 1
                },
                "param_3": {
                    "another_value": 1,
                    "count": 1,
                    "flag": 2,
                    "flag_parameter": 1,
                    "length": 2,
                    "param": 1,
                    "param3": 3,
                    "param_3": 3,
                    "parameter3": 1,
                    "size": 1,
                    "sub_param2": 1,
                    "unknown_param": 1,
                    "value": 3,
                    "value2": 2,
                    "value_3": 1
                },
                "param_4": {
                    "address_ptr": 1,
                    "address_ptr1": 1,
                    "array_of_values": 1,
                    "data_array": 1,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "input_ptr_1": 1,
                    "output_data1": 1,
                    "output_ptr_1": 1,
                    "param4": 2,
                    "param_4": 1,
                    "parameter4": 1,
                    "pointer1": 2,
                    "pointer_1": 1,
                    "ptr1": 3,
                    "ptr_array": 1,
                    "ptr_data1": 1,
                    "ptr_param": 2,
                    "sub_param3": 1
                },
                "param_5": {
                    "address_pointer": 1,
                    "address_ptr2": 1,
                    "array_of_pointers": 1,
                    "count_ptr": 1,
                    "input_ptr_2": 1,
                    "length_ptr": 1,
                    "long_pointer": 1,
                    "output_data2": 1,
                    "output_ptr_2": 1,
                    "param5": 2,
                    "param_5": 1,
                    "parameter5": 1,
                    "pointer2": 2,
                    "pointer_2": 1,
                    "ptr2": 3,
                    "ptr_data2": 1,
                    "ptr_length": 1,
                    "ptr_value": 1,
                    "result_array": 1,
                    "sub_param4": 1,
                    "ulong_param": 1,
                    "ulong_pointer": 1
                },
                "stab_modify_type": {
                    "modify_binary_type": 1,
                    "modify_stab_type": 8,
                    "modify_symbol_table_type": 1,
                    "modify_type": 5,
                    "update_symbol_table": 1,
                    "update_type": 2,
                    "update_variable_type": 1
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid modify_stab_type_0010a0a0(long input)\n\n{\n  modify_stab_type_0010a0a0(input,0x26,4,input + 0x198,input + 0x1a0);\n  return;\n}\n\n",
            "current_name": "modify_stab_type_0010a0a0",
            "entrypoint": "0x0010a0a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0a0": "modify_stab_type_0010a0a0",
                "param_1": "input",
                "stab_modify_type": "modify_stab_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0bd": {
            "additional_data": {
                "0x6b": {
                    "modifier": 1
                },
                "DAT_": {
                    "dat_": 1
                },
                "FUN_00109ed3": {
                    "get_stab_info": 1,
                    "modify_and_return": 1,
                    "modify_data": 1,
                    "modify_entry": 1,
                    "modify_entry_contents": 1,
                    "modify_stab": 1,
                    "modify_stab_entry": 1,
                    "modify_stab_type": 2,
                    "modify_stab_type_internal": 1,
                    "process_data": 3,
                    "process_function": 1,
                    "process_stab": 1,
                    "process_stab_type": 1,
                    "update_stab_entry": 1,
                    "update_type": 1
                },
                "FUN_0010a0bd": {
                    "modify_stab_entry": 3,
                    "modify_stab_type": 19,
                    "modify_stability": 1,
                    "modify_type": 5,
                    "update_stab_info": 1,
                    "update_stab_type": 1,
                    "update_type": 1
                },
                "PTR_": {
                    "ptr_": 1
                },
                "param_1": {
                    "arg": 2,
                    "arg1": 1,
                    "data_ptr": 1,
                    "entry_address": 2,
                    "function_address": 1,
                    "input": 9,
                    "input_address": 2,
                    "input_param": 4,
                    "input_value": 2,
                    "object": 2,
                    "object_ptr": 1,
                    "param": 1,
                    "stab_entry": 1,
                    "stab_param": 1,
                    "target_address": 1
                },
                "param_2": {
                    "arg2": 2,
                    "data_size": 2,
                    "entry_index": 3,
                    "flag": 4,
                    "flags": 1,
                    "index": 1,
                    "info_param": 1,
                    "param": 1,
                    "param2": 3,
                    "param_2": 4,
                    "param_flag": 1,
                    "param_value": 1,
                    "second_arg": 1,
                    "type": 1,
                    "value": 2,
                    "value_param": 1
                },
                "param_3": {
                    "arg3": 2,
                    "data_param": 1,
                    "data_value": 1,
                    "entry_value": 2,
                    "info_value": 1,
                    "option": 1,
                    "param3": 2,
                    "param_3": 5,
                    "param_data": 1,
                    "param_value": 2,
                    "third_arg": 1,
                    "value": 9
                },
                "param_4": {
                    "addr": 1,
                    "arg4": 2,
                    "data_array": 2,
                    "data_param": 1,
                    "data_ptr": 2,
                    "entry": 1,
                    "entry_pointer": 1,
                    "fourth_arg": 1,
                    "info_data": 1,
                    "param4": 2,
                    "param_4": 4,
                    "param_array": 1,
                    "param_pointer_1": 1,
                    "pointer": 3,
                    "pointer1": 1,
                    "pointer_array": 1,
                    "pointer_param": 1,
                    "pointer_to_long": 1,
                    "ptr": 1,
                    "ptr1": 1,
                    "ptr_list": 1,
                    "ptr_param": 1
                },
                "param_5": {
                    "arg5": 2,
                    "counter_ptr": 1,
                    "data": 1,
                    "entry_offset": 1,
                    "fifth_arg": 1,
                    "info_ptr": 1,
                    "length": 1,
                    "length_param": 1,
                    "param5": 2,
                    "param_5": 4,
                    "param_long_array": 1,
                    "param_pointer_2": 1,
                    "pointer2": 1,
                    "pointer_array": 1,
                    "pointer_to_ulong": 1,
                    "ptr2": 1,
                    "ptr_value": 1,
                    "result_array": 1,
                    "size": 2,
                    "size_ptr": 1,
                    "ulong_list": 1,
                    "ulong_param": 1,
                    "ulong_pointer": 1,
                    "value": 1,
                    "value_array": 1
                },
                "stab_modify_type": {
                    "adjust_stability_type": 1,
                    "modify_stab_type": 8,
                    "modify_stab_type_internal": 1,
                    "modify_type": 1
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid modify_stab_type_0010a0bd(long input)\n\n{\n  modify_stab_type_0010a0bd(input,0x6b,*(undefined4 *)(*(long *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "current_name": "modify_stab_type_0010a0bd",
            "entrypoint": "0x0010a0bd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0bd": "modify_stab_type_0010a0bd",
                "param_1": "input",
                "stab_modify_type": "modify_stab_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0d3": {
            "additional_data": {
                "0x42": {
                    "constant1": 1
                },
                "FUN_00109ed3": {
                    "calculate_result": 1,
                    "modify_fun": 1,
                    "modify_stab": 1,
                    "modify_stab_entry_helper": 1,
                    "modify_stab_type": 2,
                    "modify_stab_type_helper": 1,
                    "modify_stab_type_internal": 1,
                    "modify_type": 1,
                    "modify_value": 1,
                    "process_data": 2,
                    "update_data": 1
                },
                "FUN_0010a0d3": {
                    "modify_data": 1,
                    "modify_stab_entry": 5,
                    "modify_stab_type": 14,
                    "modify_type": 4,
                    "modify_type_func": 1,
                    "modify_type_of_data": 1,
                    "modify_variable": 1,
                    "update_stab": 1,
                    "update_stab_modify_type": 1,
                    "update_stab_type": 1
                },
                "long": {
                    "long_value": 1
                },
                "param_1": {
                    "arg1": 1,
                    "base_address": 1,
                    "data": 1,
                    "data_ptr": 2,
                    "element": 1,
                    "entry_address": 4,
                    "entry_pointer": 1,
                    "fun_param_1": 1,
                    "input": 2,
                    "input_data": 1,
                    "input_param": 5,
                    "input_value": 1,
                    "param": 6,
                    "ptr": 1,
                    "stab": 1,
                    "stab_param": 1
                },
                "param_2": {
                    "arg2": 1,
                    "data_size": 1,
                    "flag": 2,
                    "flag_param": 1,
                    "fun_param_2": 1,
                    "index": 2,
                    "param2": 3,
                    "param_2": 6,
                    "size": 1,
                    "type": 2,
                    "val": 1,
                    "value": 4
                },
                "param_3": {
                    "arg3": 1,
                    "data": 2,
                    "data_param": 1,
                    "data_value": 1,
                    "fun_param_3": 1,
                    "offset": 1,
                    "param": 2,
                    "param3": 3,
                    "param_3": 6,
                    "parameter": 1,
                    "value": 7
                },
                "param_4": {
                    "arg4": 1,
                    "array": 1,
                    "data": 1,
                    "data_array": 1,
                    "data_ptr": 1,
                    "fun_param_4": 1,
                    "param4": 3,
                    "param_4": 6,
                    "param_array": 1,
                    "pointer": 3,
                    "pointer1": 2,
                    "pointer_param": 1,
                    "ptr": 2,
                    "ptr1": 1,
                    "ptr_arr": 1,
                    "ptr_data": 2
                },
                "param_5": {
                    "arg5": 1,
                    "data_index": 1,
                    "fun_param_5": 1,
                    "length_ptr": 1,
                    "param5": 3,
                    "param_5": 6,
                    "pointer2": 2,
                    "ptr2": 2,
                    "ptr_array": 1,
                    "ptr_data_size": 1,
                    "ptr_value": 1,
                    "result_array": 1,
                    "ulong_arr": 1,
                    "ulong_pointer": 3,
                    "ulong_pointer_param": 1,
                    "ulong_ptr": 1
                },
                "stab_modify_type": {
                    "modify_element_type": 1,
                    "modify_stab_type": 6,
                    "modify_symbol_table_type": 1,
                    "modify_type": 1,
                    "modify_type_in_stab_entry": 1,
                    "update_parameter": 1
                },
                "undefined4": {
                    "unknown_value": 1
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid update_stab_modify_type_0010a0d3(long_value param)\n\n{\n  modify_stab_type(param,0x42,*(unknown_value *)(*(long_value *)(param + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "current_name": "update_stab_modify_type_0010a0d3",
            "entrypoint": "0x0010a0d3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0d3": "update_stab_modify_type_0010a0d3",
                "long": "long_value",
                "param_1": "param",
                "stab_modify_type": "modify_stab_type",
                "undefined4": "unknown_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0e9": {
            "additional_data": {
                "FUN_0010a0e9": {
                    "append_string_to_buffer": 1,
                    "build_data_packet": 1,
                    "build_request_string": 2,
                    "build_string_and_push_to_stack": 1,
                    "create_formatted_string": 2,
                    "create_request": 1,
                    "create_reverse_string": 1,
                    "format_and_push_string": 1,
                    "generate_and_push_string": 1,
                    "generate_data_string": 2,
                    "generate_formatted_string": 2,
                    "generate_r_string": 1,
                    "generate_report": 1,
                    "generate_stab_string": 2,
                    "generate_string": 1,
                    "process_data": 3,
                    "reverse_and_push_string": 2,
                    "reverse_string": 1,
                    "update_stab_entry": 1
                },
                "__s": {
                    "input_string": 6,
                    "old_string": 1,
                    "popped_string": 2,
                    "str": 1,
                    "string": 2,
                    "string_arg": 1,
                    "string_data": 1,
                    "string_input": 1,
                    "type": 4,
                    "type_name": 1,
                    "type_str": 3,
                    "type_string": 7,
                    "type_to_pop": 1
                },
                "__s_00": {
                    "allocated_memory": 1,
                    "allocated_string": 3,
                    "dynamic_string": 4,
                    "extended_string": 1,
                    "formatted_data": 1,
                    "formatted_str": 1,
                    "formatted_string": 6,
                    "modified_str": 1,
                    "modified_string": 3,
                    "new_str": 1,
                    "new_string": 4,
                    "new_string_arg": 1,
                    "output_string": 1,
                    "request_string": 1,
                    "stab_string": 1,
                    "updated_string": 1
                },
                "free": {
                    "release_memory": 1
                },
                "param_1": {
                    "base_addr": 1,
                    "base_address": 3,
                    "binary_address": 2,
                    "binary_struct": 1,
                    "buffer_address": 2,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_struct": 2,
                    "function_arg": 1,
                    "input": 2,
                    "input_address": 2,
                    "input_data": 2,
                    "input_param": 3,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "object_ptr": 1,
                    "request_context": 1,
                    "request_object": 1,
                    "stab_data": 1,
                    "x": 1
                },
                "param_2": {
                    "arg_1": 1,
                    "param2": 2,
                    "param2_value": 1,
                    "param_2": 4,
                    "value1": 15,
                    "value_1": 6,
                    "value_2": 1,
                    "value_param_1": 1
                },
                "param_3": {
                    "arg_2": 1,
                    "param3": 2,
                    "param3_value": 1,
                    "param_3": 4,
                    "value2": 15,
                    "value_2": 6,
                    "value_3": 1,
                    "value_param_2": 1
                },
                "sVar3": {
                    "input_string_length": 1,
                    "len_type_string": 1,
                    "length": 1,
                    "str_length": 1,
                    "string_length": 12,
                    "string_size": 1,
                    "type_length": 6,
                    "type_name_length": 1,
                    "type_str_len": 1,
                    "type_str_length": 2,
                    "type_string_length": 3,
                    "type_string_size": 1
                },
                "sprintf": {
                    "format_string": 1
                },
                "stab_pop_type": {
                    "pop_type_value": 1
                },
                "stab_push_string": {
                    "push_string": 1
                },
                "strlen": {
                    "get_string_length": 1
                },
                "uVar1": {
                    "char_value": 2,
                    "data1": 1,
                    "data_type": 1,
                    "first_byte": 3,
                    "first_char": 2,
                    "offset": 1,
                    "pointer_value": 1,
                    "ptr_val1": 1,
                    "ptr_value": 1,
                    "ptr_value1": 1,
                    "str_value": 1,
                    "type": 1,
                    "type_code": 1,
                    "type_value": 2,
                    "var1": 1
                },
                "uVar2": {
                    "data2": 1,
                    "result": 8,
                    "return_value": 12,
                    "status": 1,
                    "var2": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 build_string_and_push_to_stack_0010a0e9(long input_param,undefined8 value1,undefined8 value2)\n\n{\n  undefined first_byte;\n  undefined4 return_value;\n  char *type_string;\n  size_t string_length;\n  char *formatted_string;\n  \n  first_byte = *(undefined *)(*(long *)(input_param + 0x60) + 0x1c);\n  return_value = *(undefined4 *)(*(long *)(input_param + 0x60) + 0x18);\n  type_string = (char *)pop_type_value();\n  string_length = get_string_length(type_string);\n  formatted_string = (char *)allocate_memory(string_length + 100);\n  format_string(formatted_string,\"r%s;%ld;%ld;\",type_string,value1,value2);\n  release_memory(type_string);\n  return_value = push_string(input_param,formatted_string,0,first_byte,return_value);\n  if ((char)return_value != '\\0') {\n    release_memory(formatted_string);\n  }\n  return return_value;\n}\n\n",
            "current_name": "build_string_and_push_to_stack_0010a0e9",
            "entrypoint": "0x0010a0e9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0e9": "build_string_and_push_to_stack_0010a0e9",
                "__s": "type_string",
                "__s_00": "formatted_string",
                "free": "release_memory",
                "param_1": "input_param",
                "param_2": "value1",
                "param_3": "value2",
                "sVar3": "string_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type_value",
                "stab_push_string": "push_string",
                "strlen": "get_string_length",
                "uVar1": "first_byte",
                "uVar2": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a181": {
            "additional_data": {
                "FUN_0010a181": {
                    "build_data_string": 1,
                    "build_output_string": 1,
                    "build_string": 1,
                    "combine_strings": 1,
                    "create_log_entry": 1,
                    "generate_formatted_string": 1,
                    "generate_new_string": 1,
                    "generate_output_string": 1,
                    "generate_report": 1,
                    "generate_stab_string": 2,
                    "generate_string": 5,
                    "generate_string_data": 1,
                    "parse_and_concat_strings": 1,
                    "process_data": 11,
                    "reverse_and_concatenate_strings": 1
                },
                "__s": {
                    "header_text": 1,
                    "input_str": 1,
                    "input_string": 2,
                    "pop_type_value1": 1,
                    "source_str": 1,
                    "str1": 4,
                    "string1": 17,
                    "string_1": 1,
                    "string_value1": 1,
                    "type_info": 1,
                    "type_string": 1
                },
                "__s_00": {
                    "additional_data": 1,
                    "destination_str": 1,
                    "footer_text": 1,
                    "param_string": 1,
                    "param_type": 1,
                    "pop_type_string": 1,
                    "pop_type_value2": 1,
                    "str2": 4,
                    "string2": 17,
                    "string_2": 1,
                    "string_param": 1,
                    "string_value2": 1
                },
                "__s_01": {
                    "combined_string": 4,
                    "concatenated_str": 1,
                    "formatted_string": 1,
                    "generated_str": 1,
                    "generated_string": 1,
                    "new_entry": 1,
                    "new_string": 3,
                    "output": 1,
                    "output_str": 1,
                    "output_string": 2,
                    "report_text": 1,
                    "result_str": 3,
                    "result_string": 10,
                    "stab_string": 1
                },
                "cVar1": {
                    "char1": 2,
                    "char_flag": 7,
                    "char_val": 1,
                    "char_value": 4,
                    "char_var": 3,
                    "character": 1,
                    "first_char": 1,
                    "flag": 2,
                    "flag_3": 1,
                    "flag_char": 5,
                    "flag_value": 1,
                    "stab_char": 1,
                    "temp_char": 1
                },
                "free": {
                    "deallocate_memory": 1,
                    "release_memory": 1
                },
                "iVar2": {
                    "count": 1,
                    "data_length": 1,
                    "int1": 1,
                    "int_val1": 1,
                    "int_value": 6,
                    "int_value1": 3,
                    "int_var": 3,
                    "int_var1": 2,
                    "len_var": 1,
                    "length": 3,
                    "multiplier": 3,
                    "param_multiplier": 1,
                    "some_value": 1,
                    "temp_int1": 1,
                    "temp_var1": 1,
                    "type_size": 1,
                    "val1": 1
                },
                "iVar3": {
                    "calculation_result": 1,
                    "count": 1,
                    "int2": 1,
                    "int_val2": 1,
                    "int_value2": 3,
                    "int_var2": 2,
                    "result": 17,
                    "result_size": 1,
                    "result_value": 1,
                    "return_value": 1,
                    "temp_int2": 1,
                    "temp_var2": 1
                },
                "lVar7": {
                    "count": 6,
                    "counter": 18,
                    "increment_value": 1,
                    "index": 2,
                    "line_count": 1,
                    "log_count": 1,
                    "stab_count": 1,
                    "temp_long": 1
                },
                "local_41": {
                    "bit_flag": 1,
                    "flag": 3,
                    "flag1": 1,
                    "flag_2": 1,
                    "flag_local": 1,
                    "flag_value": 1,
                    "local_flag": 19,
                    "special_flag": 1,
                    "temp_flag": 3
                },
                "param_1": {
                    "arg1": 4,
                    "base_address": 1,
                    "data": 2,
                    "data_1": 1,
                    "data_address": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_struct": 2,
                    "data_struct_ptr": 2,
                    "input": 3,
                    "input1": 2,
                    "input_1": 2,
                    "input_data": 1,
                    "input_param": 1,
                    "input_ptr": 1,
                    "input_val1": 1,
                    "log_data": 1,
                    "param1": 1,
                    "report_data": 1,
                    "source": 1
                },
                "param_2": {
                    "arg2": 3,
                    "input_val2": 1,
                    "start": 12,
                    "start_address": 1,
                    "start_index": 4,
                    "start_param": 1,
                    "start_val": 1,
                    "start_value": 7,
                    "value1": 1
                },
                "param_3": {
                    "arg3": 3,
                    "end": 12,
                    "end_address": 1,
                    "end_index": 4,
                    "end_param": 1,
                    "end_val": 1,
                    "end_value": 7,
                    "input_val3": 1,
                    "value2": 1
                },
                "param_4": {
                    "arg4": 1,
                    "byte": 2,
                    "error_flag": 1,
                    "flag": 26,
                    "option": 1
                },
                "sVar5": {
                    "header_length": 1,
                    "input_str_length": 1,
                    "input_string_len": 1,
                    "input_string_length": 1,
                    "len1": 8,
                    "length1": 8,
                    "length_1": 1,
                    "length_string1": 1,
                    "size1": 1,
                    "source_len": 1,
                    "str1_len": 1,
                    "str1_length": 1,
                    "string1_length": 1,
                    "string_length1": 1,
                    "strlen_pop_type_value1": 1,
                    "type_info_length": 1,
                    "type_string_length": 1
                },
                "sVar6": {
                    "additional_data_length": 1,
                    "destination_len": 1,
                    "footer_length": 1,
                    "len2": 8,
                    "length2": 8,
                    "length_2": 1,
                    "length_string2": 1,
                    "param_string_length": 1,
                    "param_type_length": 1,
                    "pop_type_string_len": 1,
                    "size2": 1,
                    "str2_len": 1,
                    "str2_length": 1,
                    "string2_length": 1,
                    "string_length2": 1,
                    "string_param_length": 1,
                    "strlen_pop_type_value2": 1
                },
                "sprintf": {
                    "format_string": 1,
                    "string_format": 1
                },
                "stab_pop_type": {
                    "pop_string": 1,
                    "pop_type": 1,
                    "pop_type_from_stack": 1
                },
                "stab_push_string": {
                    "push_string": 2,
                    "push_string_to_stack": 1
                },
                "strlen": {
                    "get_string_length": 1,
                    "string_length": 1
                },
                "uVar4": {
                    "final_result": 1,
                    "output": 1,
                    "result": 3,
                    "return_val": 3,
                    "return_value": 21,
                    "stab_push_result": 1
                },
                "xmalloc": {
                    "allocate_memory": 3
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a181(long arg1,long start,long end,byte flag)\n\n{\n  char char_flag;\n  int int_value;\n  int result;\n  undefined4 return_value;\n  char *string1;\n  char *string2;\n  size_t len1;\n  size_t length2;\n  char *result_string;\n  long counter;\n  byte local_flag;\n  \n  char_flag = *(char *)(*(long *)(arg1 + 0x60) + 0x1c);\n  string1 = (char *)pop_type();\n  local_flag = 1;\n  if (char_flag == '\\0') {\n    local_flag = *(byte *)(*(long *)(arg1 + 0x60) + 0x1c);\n  }\n  int_value = *(int *)(*(long *)(arg1 + 0x60) + 0x18);\n  string2 = (char *)pop_type(arg1);\n  len1 = string_length(string1);\n  length2 = string_length(string2);\n  result_string = (char *)allocate_memory(len1 + 100 + length2);\n  if (flag == 0) {\n    *result_string = '\\0';\n    counter = 0;\n    local_flag = local_flag & 1;\n  }\n  else {\n    counter = *(long *)(arg1 + 0x68);\n    *(long *)(arg1 + 0x68) = counter + 1;\n    format_string(result_string,\"%ld=@S;\",counter);\n    local_flag = flag;\n  }\n  len1 = string_length(result_string);\n  format_string(result_string + len1,\"ar%s;%ld;%ld;%s\",string1,start,end,string2);\n  release_memory(string1);\n  release_memory(string2);\n  result = 0;\n  if (start <= end) {\n    result = int_value * (((int)end - (int)start) + 1);\n  }\n  return_value = push_string(arg1,result_string,counter,local_flag,result);\n  if ((char)return_value != '\\0') {\n    release_memory(result_string);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010a181",
            "entrypoint": "0x0010a181",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "result_string",
                "cVar1": "char_flag",
                "free": "release_memory",
                "iVar2": "int_value",
                "iVar3": "result",
                "lVar7": "counter",
                "local_41": "local_flag",
                "param_1": "arg1",
                "param_2": "start",
                "param_3": "end",
                "param_4": "flag",
                "sVar5": "len1",
                "sVar6": "length2",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "stab_push_string": "push_string",
                "strlen": "string_length",
                "uVar4": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a2b9": {
            "additional_data": {
                "FUN_0010a2b9": {
                    "create_formatted_string": 1,
                    "create_modified_string": 1,
                    "create_stab_entry": 2,
                    "create_string_with_prefix": 1,
                    "create_symbol_string": 1,
                    "generate_stab_entry": 5,
                    "generate_stab_string": 3,
                    "parse_and_format_string": 1,
                    "process_data": 2,
                    "process_function": 2,
                    "process_stab_entry": 1,
                    "process_string": 2,
                    "string_manipulation": 1
                },
                "__s": {
                    "input_string": 2,
                    "original_string": 1,
                    "pop_type_string": 3,
                    "popped_string": 4,
                    "stab_string": 1,
                    "str": 2,
                    "string": 1,
                    "string1": 3,
                    "string_1": 6,
                    "string_a": 1,
                    "string_input": 1,
                    "string_ptr": 1,
                    "string_value": 2,
                    "symbol_name": 1,
                    "symbol_value": 1,
                    "type_string": 1
                },
                "__s_00": {
                    "concatenated_string": 1,
                    "formatted_string": 2,
                    "formatted_symbol": 1,
                    "modified_string": 1,
                    "new_stab_string": 1,
                    "new_str": 2,
                    "new_string": 10,
                    "new_string_ptr": 1,
                    "new_string_value": 1,
                    "new_symbol_value": 1,
                    "result_string": 1,
                    "string2": 2,
                    "string_2": 6,
                    "string_b": 1
                },
                "auVar4": {
                    "output": 1,
                    "output_value": 1,
                    "result": 22,
                    "return_data": 1,
                    "return_value": 6
                },
                "cVar1": {
                    "char1": 2,
                    "char_1": 1,
                    "char_val": 1,
                    "char_value": 16,
                    "char_var": 1,
                    "character": 1,
                    "character_1": 2,
                    "first_symbol_of_table": 1,
                    "flag_value": 1,
                    "stab_type": 1,
                    "suffix_character": 1,
                    "symbol_type": 1,
                    "value": 1
                },
                "free": {
                    "deallocate_memory": 1
                },
                "lVar3": {
                    "count": 4,
                    "counter": 20,
                    "current_number": 1,
                    "entry_number": 1,
                    "long_value": 1,
                    "new_long_value": 1,
                    "stab_count": 1,
                    "symbol_index": 2
                },
                "param_1": {
                    "address": 1,
                    "base_address": 4,
                    "binary_address": 1,
                    "binary_base_address": 1,
                    "binary_offset": 3,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "function_address": 1,
                    "input": 1,
                    "input_address": 1,
                    "input_data": 1,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_pointer": 1,
                    "input_ptr": 2,
                    "input_value": 4,
                    "input_variable": 1,
                    "stab_entry_ptr": 1,
                    "symbol_table_addr": 1
                },
                "param_2": {
                    "add_suffix": 1,
                    "append_flag": 1,
                    "condition": 1,
                    "condition_flag": 1,
                    "flag": 17,
                    "include_null": 1,
                    "is_empty": 1,
                    "is_first": 1,
                    "is_first_entry": 1,
                    "is_first_stab_string": 1,
                    "is_first_symbol": 1,
                    "is_symbolic": 1,
                    "is_zero": 1,
                    "should_reverse": 1,
                    "use_default": 1
                },
                "param_3": {
                    "arg1": 2,
                    "data_1": 1,
                    "input_param_1": 1,
                    "param1": 2,
                    "param3": 7,
                    "param_1_address": 1,
                    "param_3": 10,
                    "param_a": 2,
                    "parameter3": 1,
                    "parameter_3": 1,
                    "unknown": 1,
                    "unused_param": 1,
                    "unused_param1": 1
                },
                "param_4": {
                    "arg2": 2,
                    "data_2": 1,
                    "input_param_2": 1,
                    "output_param": 2,
                    "param2": 2,
                    "param4": 7,
                    "param_2_address": 1,
                    "param_4": 9,
                    "param_b": 2,
                    "parameter4": 1,
                    "parameter_4": 1,
                    "unknown": 1,
                    "unused_param2": 1
                },
                "sVar2": {
                    "input_length": 1,
                    "length": 5,
                    "length1": 1,
                    "length_1": 1,
                    "length_of_string": 1,
                    "pop_type_string_length": 2,
                    "stab_string_length": 1,
                    "str_length": 1,
                    "string1_length": 1,
                    "string_1_length": 1,
                    "string_length": 13,
                    "string_length_1": 1,
                    "symbol_len": 1,
                    "symbol_name_length": 1
                },
                "sprintf": {
                    "format_string": 1
                },
                "stab_pop_type": {
                    "pop_type": 1
                },
                "stab_push_string": {
                    "push_string": 1
                },
                "strlen": {
                    "get_string_length": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] generate_stab_entry_0010a2b9(long input_value,char flag,undefined8 param_3,undefined8 param_4)\n\n{\n  char char_value;\n  char *string_1;\n  size_t string_length;\n  char *new_string;\n  long counter;\n  undefined result [16];\n  \n  char_value = *(char *)(*(long *)(input_value + 0x60) + 0x1c);\n  string_1 = (char *)pop_type();\n  string_length = get_string_length(string_1);\n  new_string = (char *)allocate_memory(string_length + 0x1e);\n  if (flag == '\\0') {\n    *new_string = '\\0';\n    counter = 0;\n    flag = char_value;\n  }\n  else {\n    counter = *(long *)(input_value + 0x68);\n    *(long *)(input_value + 0x68) = counter + 1;\n    format_string(new_string,\"%ld=@S;\",counter);\n  }\n  string_length = get_string_length(new_string);\n  format_string(new_string + string_length,\"S%s\",string_1);\n  deallocate_memory(string_1);\n  result._0_4_ = push_string(input_value,new_string,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    deallocate_memory(new_string);\n  }\n  result._8_8_ = param_4;\n  return result;\n}\n\n",
            "current_name": "generate_stab_entry_0010a2b9",
            "entrypoint": "0x0010a2b9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a2b9": "generate_stab_entry_0010a2b9",
                "__s": "string_1",
                "__s_00": "new_string",
                "auVar4": "result",
                "cVar1": "char_value",
                "free": "deallocate_memory",
                "lVar3": "counter",
                "param_1": "input_value",
                "param_2": "flag",
                "sVar2": "string_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "stab_push_string": "push_string",
                "strlen": "get_string_length",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a377": {
            "additional_data": {
                "FUN_0010a377": {
                    "combine_strings": 4,
                    "concatenate_strings": 4,
                    "construct_formatted_string": 1,
                    "construct_string_variable": 1,
                    "fill_string_and_push": 1,
                    "format_and_push_string": 1,
                    "format_string_and_push_to_stack": 1,
                    "generate_combined_string": 1,
                    "generate_stab_string": 1,
                    "generate_string": 1,
                    "process_data": 1,
                    "process_string": 2,
                    "reverse_and_concat_strings": 1,
                    "reverse_and_concatenate_strings": 1,
                    "reverse_and_push_string": 3,
                    "reverse_string_and_concatenate": 2,
                    "reverse_string_concatenation": 3
                },
                "__s": {
                    "char1": 1,
                    "first_string": 8,
                    "popped_string": 1,
                    "str1": 1,
                    "str_ptr1": 1,
                    "string1": 14,
                    "string_1": 1,
                    "type": 1,
                    "type_string": 2,
                    "type_variable": 1
                },
                "__s_00": {
                    "char2": 1,
                    "pop_string": 1,
                    "pop_type_string": 1,
                    "popped_string2": 1,
                    "second_string": 8,
                    "str2": 1,
                    "str_ptr2": 1,
                    "string2": 14,
                    "string_2": 1,
                    "type_param": 1,
                    "type_variable2": 1
                },
                "__s_01": {
                    "combined_str_ptr": 1,
                    "combined_string": 8,
                    "concatenated_string": 9,
                    "final_string": 1,
                    "formatted_string": 3,
                    "new_string": 4,
                    "output": 1,
                    "result": 1,
                    "result_str": 1,
                    "result_string": 2
                },
                "cVar1": {
                    "char1": 1,
                    "char_flag": 7,
                    "char_value": 6,
                    "check_char": 1,
                    "flag": 7,
                    "is_char_zero": 1
                },
                "free": {
                    "deallocate_memory": 1
                },
                "param_1": {
                    "input": 13,
                    "input_address": 9,
                    "input_param": 5,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "input_value": 2
                },
                "sVar3": {
                    "first_string_length": 7,
                    "len1": 2,
                    "length1": 14,
                    "length_char1": 1,
                    "length_first_string": 1,
                    "length_string1": 1,
                    "length_type_variable": 1,
                    "size_type": 1,
                    "string_1_length": 1,
                    "type_string_len": 1,
                    "type_string_length": 1
                },
                "sVar4": {
                    "len2": 2,
                    "length2": 14,
                    "length_char2": 1,
                    "length_second_string": 1,
                    "length_string2": 1,
                    "length_type_variable2": 1,
                    "pop_string_length": 1,
                    "pop_type_string_len": 1,
                    "second_string_length": 7,
                    "size_type_param": 1,
                    "string_2_length": 1
                },
                "sprintf": {
                    "concatenate_strings": 1
                },
                "stab_pop_type": {
                    "pop_string": 1
                },
                "stab_push_string": {
                    "push_string": 1
                },
                "uVar2": {
                    "push_result": 1,
                    "push_status": 1,
                    "result": 19,
                    "return_val": 2,
                    "return_value": 8
                },
                "uVar5": {
                    "check_flag": 1,
                    "copy_flag": 1,
                    "flag": 6,
                    "is_char_null": 1,
                    "is_non_null": 1,
                    "is_null": 1,
                    "is_pushed": 1,
                    "is_zero": 2,
                    "use_default": 1,
                    "use_default_value": 2,
                    "use_malloc": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 reverse_and_concatenate_strings_0010a377(long input)\n\n{\n  char flag;\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *concatenated_string;\n  undefined flag;\n  \n  flag = 1;\n  flag = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  string1 = (char *)pop_string();\n  if (flag == '\\0') {\n    flag = *(undefined *)(*(long *)(input + 0x60) + 0x1c);\n  }\n  string2 = (char *)pop_string(input);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  concatenated_string = (char *)allocate_memory(length1 + 3 + length2);\n  concatenate_strings(concatenated_string,\"@%s,%s\",string2,string1);\n  deallocate_memory(string2);\n  deallocate_memory(string1);\n  result = push_string(input,concatenated_string,0,flag,0);\n  if ((char)result != '\\0') {\n    deallocate_memory(concatenated_string);\n  }\n  return result;\n}\n\n",
            "current_name": "reverse_and_concatenate_strings_0010a377",
            "entrypoint": "0x0010a377",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a377": "reverse_and_concatenate_strings_0010a377",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "concatenated_string",
                "cVar1": "flag",
                "free": "deallocate_memory",
                "param_1": "input",
                "sVar3": "length1",
                "sVar4": "length2",
                "sprintf": "concatenate_strings",
                "stab_pop_type": "pop_string",
                "stab_push_string": "push_string",
                "uVar2": "result",
                "uVar5": "flag",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a424": {
            "additional_data": {
                "FUN_0010a424": {
                    "build_string_from_params": 1,
                    "construct_string": 2,
                    "create_improved_code": 1,
                    "generate_compound_string": 1,
                    "generate_formatted_string": 4,
                    "generate_modified_string": 1,
                    "generate_stab_string": 1,
                    "generate_string": 3,
                    "generate_string_from_inputs": 1,
                    "generate_string_from_params": 1,
                    "process_data": 1,
                    "reformat_code": 1,
                    "reverse_and_concat_strings": 1,
                    "reverse_and_format_strings": 1
                },
                "Xmemcpy": {
                    "copy_memory_function": 1
                },
                "__ptr": {
                    "array": 3,
                    "array_ptr": 3,
                    "data_array": 1,
                    "dynamic_array": 6,
                    "element_ptr": 1,
                    "pointer_arr": 1,
                    "ptr": 1,
                    "ptr_arr": 1,
                    "ptr_array": 10,
                    "ptr_elements": 1,
                    "string_pointers": 1,
                    "type_values": 1
                },
                "__ptr_00": {
                    "new_element_ptr": 1
                },
                "__s": {
                    "current_string": 2,
                    "input3": 1,
                    "pop_string1": 1,
                    "pop_type_result": 1,
                    "pop_type_string": 1,
                    "second_string": 3,
                    "str": 1,
                    "str2": 7,
                    "str_popped_2": 1,
                    "string1": 2,
                    "string2": 6,
                    "string_2": 1,
                    "string_ptr_2": 1,
                    "string_var2": 2
                },
                "__s_00": {
                    "final_str": 2,
                    "final_string": 8,
                    "formatted_string": 4,
                    "modified_string": 1,
                    "new_string": 7,
                    "new_string_ptr": 1,
                    "output_string": 2,
                    "result_str": 3,
                    "result_string": 2
                },
                "bVar10": {
                    "byte_condition": 2,
                    "byte_flag": 2,
                    "byte_flag2": 1,
                    "byte_value2": 2,
                    "byte_value_2": 1,
                    "byte_var1": 1,
                    "byte_var2": 3,
                    "check_byte": 1,
                    "check_byte2": 1,
                    "check_flag": 1,
                    "flag3": 1,
                    "inner_type_flag": 1,
                    "is_flag_set": 1,
                    "local_byte_var": 1,
                    "loop_condition": 1,
                    "loop_condition_var": 1,
                    "loop_flag": 3,
                    "temp_byte2": 2,
                    "temp_flag": 1,
                    "temp_value": 1,
                    "type_flag2": 1,
                    "type_not_empty_byte": 1
                },
                "bVar2": {
                    "boolean_flag": 1,
                    "byte_flag": 3,
                    "byte_value": 6,
                    "byte_var": 9,
                    "check_byte": 1,
                    "current_byte": 1,
                    "is_type_empty_byte": 1,
                    "temp_byte": 4,
                    "temp_value": 1,
                    "type_flag": 3
                },
                "cVar1": {
                    "char_var": 1,
                    "check_result": 1,
                    "empty_check": 1,
                    "empty_flag": 1,
                    "empty_type": 2,
                    "empty_type_char": 2,
                    "empty_type_check": 1,
                    "empty_type_flag": 5,
                    "is_empty": 2,
                    "is_empty_type": 1,
                    "is_type_empty": 1,
                    "result": 10,
                    "result_flag": 1,
                    "temp_char": 1
                },
                "free": {
                    "deallocate_memory": 2,
                    "free_memory_function": 1
                },
                "iVar3": {
                    "count": 1,
                    "count_plus_one": 1,
                    "increment": 2,
                    "index": 6,
                    "int_var": 4,
                    "iter_variable": 1,
                    "length": 1,
                    "loop_var": 1,
                    "new_num_elements": 1,
                    "num_elements_plus_one": 1,
                    "size_var": 1,
                    "temp": 1,
                    "temp_count": 2,
                    "temp_int": 3,
                    "temp_var": 4
                },
                "lVar11": {
                    "counter": 1,
                    "index": 1,
                    "index2": 5,
                    "index3": 1,
                    "inner_index": 1,
                    "iteration2": 1,
                    "iterator_2": 1,
                    "loop_counter": 2,
                    "loop_counter_2": 1,
                    "loop_index": 2,
                    "loop_index2": 1,
                    "loop_var": 2,
                    "loop_var2": 7,
                    "loop_var3": 1,
                    "loop_variable2": 1,
                    "new_index": 1,
                    "total_length": 1
                },
                "lVar9": {
                    "counter": 2,
                    "formatted_string_len": 1,
                    "index": 8,
                    "index1": 2,
                    "index2": 1,
                    "index_var": 1,
                    "iteration": 1,
                    "iterator": 1,
                    "loop_counter": 2,
                    "loop_index": 2,
                    "loop_var": 1,
                    "loop_var1": 6,
                    "loop_var2": 1,
                    "loop_variable": 1
                },
                "param_1": {
                    "arg1": 2,
                    "data": 2,
                    "input": 6,
                    "input1": 2,
                    "input_1": 1,
                    "input_address": 3,
                    "input_data": 1,
                    "input_param": 4,
                    "input_param1": 1,
                    "input_parameter": 2,
                    "input_ptr": 1,
                    "input_value": 1,
                    "int_value": 1,
                    "param1": 1,
                    "param_address": 1,
                    "parameter1": 1,
                    "source": 1
                },
                "param_2": {
                    "arg2": 2,
                    "char_value": 1,
                    "flag": 15,
                    "flag1": 6,
                    "flag_param": 2,
                    "input_2": 1,
                    "input_param2": 1,
                    "is_empty": 1,
                    "param2": 1,
                    "param_flag": 1
                },
                "param_3": {
                    "arg3": 2,
                    "count": 13,
                    "input_3": 1,
                    "input_param3": 1,
                    "num_elements": 3,
                    "num_items": 1,
                    "num_strings": 1,
                    "param3": 1,
                    "param_count": 1,
                    "size": 4,
                    "size1": 1,
                    "size_param": 2
                },
                "param_4": {
                    "additional_flag": 4,
                    "append_flag": 3,
                    "arg4": 2,
                    "bool_param": 1,
                    "check_param": 1,
                    "condition": 3,
                    "copy_flag": 1,
                    "flag": 1,
                    "flag2": 7,
                    "input_4": 1,
                    "input_param4": 1,
                    "is_empty": 1,
                    "is_last": 1,
                    "param4": 1,
                    "param_bool": 1,
                    "should_update": 1,
                    "special_flag": 1
                },
                "pcVar5": {
                    "char_pointer": 1,
                    "first_string": 3,
                    "input1": 1,
                    "pop_type_result": 1,
                    "popped_string": 1,
                    "previous_string": 1,
                    "str1": 7,
                    "str_popped": 1,
                    "string1": 6,
                    "string_1": 1,
                    "string_ptr": 1,
                    "string_var1": 2,
                    "type_ptr": 1,
                    "type_string": 2
                },
                "sVar7": {
                    "input1_length": 1,
                    "len1": 4,
                    "len_str_popped": 1,
                    "length1": 11,
                    "length_1": 1,
                    "length_tmp1": 1,
                    "previous_size": 1,
                    "size_var1": 1,
                    "str1_length": 1,
                    "str_len": 1,
                    "string1_length": 2,
                    "string_length_1": 1,
                    "strlen1": 2,
                    "strlen_var1": 1,
                    "type_string_len": 1
                },
                "sVar8": {
                    "current_size": 1,
                    "input2_length": 1,
                    "len2": 4,
                    "len_str_popped_2": 1,
                    "length2": 11,
                    "length_2": 1,
                    "length_tmp2": 1,
                    "pop_type_string_len": 1,
                    "size_var2": 1,
                    "str2_len": 1,
                    "str2_length": 1,
                    "string2_length": 2,
                    "string_length_2": 1,
                    "strlen2": 2,
                    "strlen_var2": 1
                },
                "sprintf": {
                    "format_string": 2,
                    "format_string_function": 1
                },
                "stab_empty_type_lto_priv_0": {
                    "check_empty_type": 2,
                    "empty_type_function": 1
                },
                "stab_pop_type": {
                    "pop_type": 2,
                    "pop_type_function": 1
                },
                "stab_push_string": {
                    "push_string": 2,
                    "push_string_function": 1
                },
                "strcpy": {
                    "copy_string": 2,
                    "copy_string_function": 1
                },
                "strlen": {
                    "get_string_length": 2,
                    "get_string_length_function": 1
                },
                "uVar12": {
                    "byte_value": 1,
                    "data_type": 1,
                    "empty_flag": 1,
                    "flag": 1,
                    "flag2": 1,
                    "flag3": 1,
                    "loop_var3": 1,
                    "lto_flag": 1,
                    "other_flag": 1,
                    "special_flag": 1,
                    "temp_undefined": 2,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "type_byte": 1,
                    "type_byte_value": 1,
                    "u_var": 1,
                    "undefined_value": 2,
                    "undefined_var": 5,
                    "undefined_var2": 1,
                    "unknown_value": 3,
                    "unknown_var": 1,
                    "uvar_flag": 1
                },
                "uVar4": {
                    "output_value": 1,
                    "result": 13,
                    "return_value": 15
                },
                "uVar6": {
                    "input2": 1,
                    "pop_result": 1,
                    "pop_type_result": 2,
                    "pop_value": 1,
                    "popped_type": 1,
                    "popped_value": 3,
                    "temp": 1,
                    "temp_result": 1,
                    "temp_value": 6,
                    "temp_var": 2,
                    "temp_var2": 2,
                    "type_value": 1,
                    "undefined_var": 1,
                    "value": 6,
                    "value_var": 1
                },
                "xmalloc": {
                    "allocate_memory": 2,
                    "allocate_memory_function": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_00109d97",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 generate_formatted_string_0010a424(long input,char flag,int count,char flag2)\n\n{\n  char result;\n  byte byte_var;\n  int index;\n  undefined4 return_value;\n  char *str1;\n  undefined8 *ptr_array;\n  undefined8 temp_value;\n  char *str2;\n  size_t length1;\n  size_t length2;\n  char *final_string;\n  long index;\n  byte byte_var2;\n  long loop_var2;\n  undefined undefined_var;\n  \n  if ((flag == '\\0') && (result = check_empty_type(), result == '\\0')) {\n    return 0;\n  }\n  byte_var2 = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n  str1 = (char *)pop_type(input);\n  if (count < 0) {\n    ptr_array = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    undefined_var = 1;\n    if (byte_var2 != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      index = count + 1;\n      ptr_array = (undefined8 *)allocate_memory((long)index * 8);\n      index = (long)(count + -1);\n      do {\n        byte_var = 1;\n        if (byte_var2 == 0) {\n          byte_var = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n        }\n        temp_value = pop_type(input);\n        byte_var2 = byte_var & 1;\n        ptr_array[index] = temp_value;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (flag2 == '\\0') {\n        result = check_empty_type(input);\n        if (result == '\\0') {\n          return 0;\n        }\n        byte_var = 1;\n        if (byte_var2 == 0) {\n          byte_var = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n        }\n        byte_var2 = byte_var & 1;\n        temp_value = pop_type(input);\n        ptr_array[(long)index + -1] = temp_value;\n        count = index;\n      }\n      goto LAB_0010a582;\n    }\n    ptr_array = (undefined8 *)0x0;\n    if (flag2 != '\\0') goto LAB_0010a582;\n    ptr_array = (undefined8 *)allocate_memory(8);\n    result = check_empty_type(input);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((byte_var2 != 0) || (*(char *)(*(long *)(input + 0x60) + 0x1c) != '\\0')) {\n      temp_value = pop_type(input);\n      count = 1;\n      undefined_var = 1;\n      *ptr_array = temp_value;\n      goto LAB_0010a596;\n    }\n    temp_value = pop_type(input);\n    count = 1;\n    *ptr_array = temp_value;\n  }\n  undefined_var = *(undefined *)(*(long *)(input + 0x60) + 0x1c);\nLAB_0010a596:\n  str2 = (char *)pop_type(input);\n  length1 = get_string_length(str1);\n  length2 = get_string_length(str2);\n  index = length1 + 10 + length2;\n  for (loop_var2 = 0; (int)loop_var2 < count; loop_var2 = loop_var2 + 1) {\n    length1 = get_string_length((char *)ptr_array[loop_var2]);\n    index = index + length1;\n  }\n  final_string = (char *)allocate_memory(index);\n  format_string(final_string,\"#%s,%s\",str1,str2);\n  index = 0;\n  deallocate_memory(str1);\n  deallocate_memory(str2);\n  while( true ) {\n    length1 = get_string_length(final_string);\n    if (count <= (int)index) break;\n    *(undefined2 *)(final_string + length1) = 0x2c;\n    str1 = (char *)ptr_array[index];\n    index = index + 1;\n    copy_string(final_string + length1 + 1,str1);\n    deallocate_memory(str1);\n  }\n  *(undefined2 *)(final_string + length1) = 0x3b;\n  deallocate_memory(ptr_array);\n  return_value = push_string(input,final_string,0,undefined_var,0);\n  if ((char)return_value == '\\0') {\n    return 0;\n  }\n  deallocate_memory(final_string);\n  return return_value;\n}\n\n",
            "current_name": "generate_formatted_string_0010a424",
            "entrypoint": "0x0010a424",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a424": "generate_formatted_string_0010a424",
                "__ptr": "ptr_array",
                "__s": "str2",
                "__s_00": "final_string",
                "bVar10": "byte_var2",
                "bVar2": "byte_var",
                "cVar1": "result",
                "free": "deallocate_memory",
                "iVar3": "index",
                "lVar11": "loop_var2",
                "lVar9": "index",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "flag2",
                "pcVar5": "str1",
                "sVar7": "length1",
                "sVar8": "length2",
                "sprintf": "format_string",
                "stab_empty_type_lto_priv_0": "check_empty_type",
                "stab_pop_type": "pop_type",
                "stab_push_string": "push_string",
                "strcpy": "copy_string",
                "strlen": "get_string_length",
                "uVar12": "undefined_var",
                "uVar4": "return_value",
                "uVar6": "temp_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a69a": {
            "additional_data": {
                "FUN_0010a69a": {
                    "add_struct_index_to_string": 1,
                    "create_stab_entry": 1,
                    "create_string_and_push": 1,
                    "decode_and_push_data": 1,
                    "decode_and_push_string": 1,
                    "extract_binary_data": 1,
                    "format_and_push_string": 2,
                    "generate_stab_entry": 1,
                    "generate_stab_string": 1,
                    "generate_string_and_push": 1,
                    "parse_and_push_data": 1,
                    "parse_and_push_string": 4,
                    "process_data": 8,
                    "process_stab_data": 1,
                    "push_string_and_update_memory": 1,
                    "reverse_and_push_string": 1
                },
                "lVar2": {
                    "index": 9,
                    "struct_index": 21,
                    "struct_index_result": 1
                },
                "local_60": {
                    "buffer": 4,
                    "entry_buffer": 1,
                    "formatted_string": 8,
                    "output_buffer": 2,
                    "output_str": 1,
                    "output_string": 10,
                    "stab_entry": 1,
                    "string_buffer": 4
                },
                "param_1": {
                    "base_address": 1,
                    "binary_data_address": 1,
                    "buffer": 2,
                    "buffer_address": 1,
                    "buffer_ptr": 1,
                    "data": 4,
                    "data_buffer": 2,
                    "data_ptr": 2,
                    "data_storage": 1,
                    "data_structure": 2,
                    "destination": 1,
                    "input": 1,
                    "input_buffer": 2,
                    "input_ptr": 2,
                    "memory_address": 1,
                    "output_buffer": 1,
                    "param1": 2,
                    "param_stab_struct": 1,
                    "param_struct": 1,
                    "stab_index": 1,
                    "struct_index": 1
                },
                "param_2": {
                    "config": 1,
                    "data_pointer": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_value": 1,
                    "param": 1,
                    "param1": 1,
                    "param2": 5,
                    "param_2": 5,
                    "param_ptr": 1,
                    "param_unknown": 1,
                    "pointer": 2,
                    "pointer_to_data": 1,
                    "ptr": 1,
                    "second_param": 2,
                    "some_value": 1,
                    "struct_data": 1,
                    "struct_ptr": 3,
                    "value": 1
                },
                "param_3": {
                    "condition": 2,
                    "flag": 10,
                    "flag_param": 1,
                    "has_struct_index": 1,
                    "index": 1,
                    "is_empty": 1,
                    "is_struct_valid": 1,
                    "is_valid": 1,
                    "is_valid_struct": 1,
                    "length": 1,
                    "num_iterations": 1,
                    "param2": 1,
                    "param3": 2,
                    "param_condition": 1,
                    "size_of_data": 1,
                    "struct_flag": 4,
                    "struct_index": 1
                },
                "param_4": {
                    "bool_value": 1,
                    "ch": 1,
                    "char_flag": 5,
                    "char_param": 1,
                    "char_val": 1,
                    "char_value": 4,
                    "character": 5,
                    "condition": 1,
                    "flag": 8,
                    "non_zero_flag": 1,
                    "param4": 2,
                    "param_character": 1
                },
                "param_5": {
                    "input_value": 1,
                    "int_flag": 1,
                    "number": 4,
                    "param5": 3,
                    "param_number": 1,
                    "uint_flag": 1,
                    "uint_param": 2,
                    "uint_val": 2,
                    "uint_value": 5,
                    "value": 10
                },
                "param_u5": {
                    "value": 1
                },
                "sVar3": {
                    "length": 15,
                    "local_size": 1,
                    "str_len": 1,
                    "str_length": 2,
                    "string_length": 12
                },
                "uVar1": {
                    "result": 28,
                    "return_value": 3
                },
                "uVar4": {
                    "allocated_mem": 2,
                    "allocated_memory": 22,
                    "allocated_ptr": 1,
                    "allocated_string": 1,
                    "allocation": 1,
                    "dynamic_alloc": 1,
                    "dynamic_allocation": 1,
                    "dynamic_memory": 1,
                    "new_ptr": 1
                },
                "uVar5": {
                    "flag": 5,
                    "flag2": 1,
                    "has_index": 5,
                    "has_struct": 2,
                    "has_struct_index": 1,
                    "is_index_valid": 1,
                    "is_struct": 1,
                    "is_struct_exist": 1,
                    "is_struct_index": 1,
                    "is_struct_index_valid": 8,
                    "is_success": 1,
                    "is_valid": 2,
                    "should_print": 1,
                    "use_struct_index": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109c2e",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_stab_data_0010a69a(long data,undefined8 param2,int flag,char flag,uint value)\n\n{\n  undefined4 result;\n  long struct_index;\n  size_t length;\n  undefined8 allocated_memory;\n  undefined is_struct_index_valid;\n  char output_string [48];\n  \n  if (flag == 0) {\n    output_string[0] = '\\0';\n    is_struct_index_valid = 0;\n    struct_index = 0;\n  }\n  else {\n    struct_index = stab_get_struct_index();\n    if (struct_index < 0) {\n      return 0;\n    }\n    is_struct_index_valid = 1;\n    sprintf(output_string,\"%ld=\",struct_index);\n  }\n  length = strlen(output_string);\n  sprintf(output_string + length,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = stab_push_string(data,output_string,struct_index,is_struct_index_valid,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  struct_index = *(long *)(data + 0x60);\n  allocated_memory = xmalloc(1);\n  *(undefined8 *)(struct_index + 0x20) = allocated_memory;\n  **(undefined **)(*(long *)(data + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "current_name": "process_stab_data_0010a69a",
            "entrypoint": "0x0010a69a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a69a": "process_stab_data_0010a69a",
                "lVar2": "struct_index",
                "local_60": "output_string",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "flag",
                "param_4": "flag",
                "param_5": "value",
                "sVar3": "length",
                "uVar1": "result",
                "uVar4": "allocated_memory",
                "uVar5": "is_struct_index_valid"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a77a": {
            "additional_data": {
                "FUN_0010a77a": {
                    "combine_strings": 13,
                    "combine_strings_and_push": 2,
                    "concatenate_and_push_string": 1,
                    "concatenate_strings": 7,
                    "concatenate_strings_and_push": 1,
                    "merge_strings": 2,
                    "process_data": 3,
                    "reverse_and_push_string": 1,
                    "reverse_and_update_string": 1
                },
                "__s": {
                    "first_string": 2,
                    "original_string": 1,
                    "source_string": 1,
                    "str": 1,
                    "str1": 2,
                    "string1": 14,
                    "string_1": 5,
                    "string_ptr": 4,
                    "struct_string": 1
                },
                "__s_00": {
                    "first_string": 1,
                    "input_str": 1,
                    "input_string": 2,
                    "input_string_copy": 1,
                    "pop_type_string": 1,
                    "popped_str": 1,
                    "popped_string": 6,
                    "stack_string": 1,
                    "str2": 2,
                    "string2": 10,
                    "string_2": 5
                },
                "__s_01": {
                    "combined_str": 2,
                    "combined_string": 13,
                    "concatenated_str": 1,
                    "concatenated_string": 9,
                    "final_string": 1,
                    "merged_string": 2,
                    "new_string": 1,
                    "str3": 1,
                    "updated_string": 1
                },
                "free": {
                    "release_memory": 1
                },
                "lVar2": {
                    "address": 1,
                    "data_ptr": 2,
                    "entry_address": 1,
                    "pointer": 3,
                    "pointer1": 1,
                    "ptr": 2,
                    "ptr_element": 1,
                    "ptr_struct": 1,
                    "ptr_to_address": 1,
                    "string_struct_ptr": 1,
                    "struct_addr": 1,
                    "struct_address": 6,
                    "struct_pointer": 2,
                    "struct_ptr": 2,
                    "temp_pointer": 1,
                    "variable2": 1
                },
                "param_1": {
                    "arg": 1,
                    "base_address": 2,
                    "data": 1,
                    "data_ptr": 1,
                    "input": 13,
                    "input_address": 5,
                    "input_data": 1,
                    "input_param": 4,
                    "input_value": 2
                },
                "sVar5": {
                    "input_str_len": 1,
                    "input_string_length": 3,
                    "len1": 2,
                    "len_popped_str": 3,
                    "len_string2": 1,
                    "len_string_2": 2,
                    "length1": 8,
                    "length_1": 1,
                    "length_first_string": 1,
                    "length_str1": 1,
                    "length_string2": 1,
                    "length_string_2": 2,
                    "pop_type_str_len": 1,
                    "popped_string_length": 2,
                    "stack_string_length": 1,
                    "string_2_length": 1
                },
                "sVar6": {
                    "first_string_length": 1,
                    "len2": 2,
                    "len_first_str": 1,
                    "len_orig_str": 1,
                    "len_string1": 2,
                    "len_string_1": 2,
                    "length2": 8,
                    "length_2": 1,
                    "length_second_string": 1,
                    "length_str2": 1,
                    "length_string1": 1,
                    "length_string_1": 2,
                    "original_string_length": 1,
                    "source_string_length": 1,
                    "str_len": 1,
                    "string1_length": 1,
                    "string_1_length": 1,
                    "string_len": 1,
                    "string_ptr_length": 1,
                    "struct_string_length": 1
                },
                "sprintf": {
                    "format_strings": 1
                },
                "stab_pop_type": {
                    "pop_string": 1
                },
                "stab_push_string": {
                    "push_string": 1
                },
                "strlen": {
                    "string_length": 1
                },
                "uVar1": {
                    "byte": 1,
                    "byte_val": 1,
                    "byte_value": 2,
                    "char1": 1,
                    "char_flag": 1,
                    "char_val": 2,
                    "char_value": 3,
                    "char_variable": 1,
                    "character": 5,
                    "data_type": 1,
                    "flag": 2,
                    "length": 1,
                    "status": 1,
                    "struct_flag": 1,
                    "struct_value1": 1,
                    "value1": 1,
                    "value_2": 1,
                    "variable1": 1
                },
                "uVar3": {
                    "count": 1,
                    "data": 1,
                    "long_val": 2,
                    "long_value": 4,
                    "numeric_value": 1,
                    "pointer_val": 1,
                    "string_length": 1,
                    "struct_value": 1,
                    "struct_value2": 1,
                    "ulong_val": 1,
                    "undefined8_variable": 1,
                    "unknown_value": 1,
                    "value": 7,
                    "value2": 1,
                    "value_1": 1,
                    "variable3": 1
                },
                "uVar4": {
                    "result": 15,
                    "return_code": 1,
                    "return_val": 2,
                    "return_value": 10,
                    "status": 2,
                    "status_code": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 combine_strings_and_push_0010a77a(long input)\n\n{\n  undefined character;\n  long struct_address;\n  char *string1;\n  undefined8 value;\n  undefined4 result;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combined_string;\n  \n  struct_address = *(long *)(input + 0x60);\n  if ((struct_address != 0) && (string1 = *(char **)(struct_address + 0x20), string1 != (char *)0x0)) {\n    result = *(undefined4 *)(struct_address + 0x18);\n    character = *(undefined *)(struct_address + 0x1c);\n    value = *(undefined8 *)(struct_address + 0x10);\n    string2 = (char *)pop_string();\n    length1 = string_length(string2);\n    length2 = string_length(string1);\n    combined_string = (char *)allocate_memory(length1 + 2 + length2);\n    format_strings(combined_string,\"%s%s;\",string2,string1);\n    release_memory(string2);\n    release_memory(string1);\n    result = push_string(input,combined_string,value,character,result);\n    if ((char)result != '\\0') {\n      release_memory(combined_string);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "combine_strings_and_push_0010a77a",
            "entrypoint": "0x0010a77a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a77a": "combine_strings_and_push_0010a77a",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "combined_string",
                "free": "release_memory",
                "lVar2": "struct_address",
                "param_1": "input",
                "sVar5": "length1",
                "sVar6": "length2",
                "sprintf": "format_strings",
                "stab_pop_type": "pop_string",
                "stab_push_string": "push_string",
                "strlen": "string_length",
                "uVar1": "character",
                "uVar3": "value",
                "uVar4": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a83e": {
            "additional_data": {
                "FUN_0010a83e": {
                    "convert_to_formatted_string": 1,
                    "create_struct_type": 1,
                    "decode_string": 1,
                    "extract_struct_type": 1,
                    "generate_struct_type_string": 1,
                    "parse_and_format_string": 1,
                    "process_data": 12,
                    "process_stab_data": 1,
                    "process_struct_type": 4,
                    "process_structure": 1,
                    "process_type": 1,
                    "reverse_and_update_string": 1
                },
                "__s": {
                    "str1": 1,
                    "str_ptr": 1,
                    "str_ptr1": 1,
                    "str_ptr_1": 1,
                    "str_ptr_a": 1,
                    "str_var": 1,
                    "string": 1,
                    "string1": 8,
                    "string_1": 6,
                    "string_pointer1": 1,
                    "string_ptr": 3,
                    "string_value": 2,
                    "string_value1": 1,
                    "type": 2,
                    "type_string": 1
                },
                "__s_00": {
                    "formatted_str_ptr": 1,
                    "formatted_string": 3,
                    "modified_str_var": 1,
                    "modified_type": 2,
                    "new_string": 1,
                    "new_string_ptr": 2,
                    "new_string_value": 1,
                    "str2": 1,
                    "str_ptr2": 1,
                    "str_ptr_2": 1,
                    "str_ptr_b": 1,
                    "string2": 8,
                    "string_2": 6,
                    "string_pointer2": 1,
                    "string_value2": 1
                },
                "cVar3": {
                    "char1": 2,
                    "char_1": 2,
                    "char_flag": 1,
                    "char_val": 2,
                    "char_value": 14,
                    "char_var": 6,
                    "character_value": 1,
                    "flag": 1,
                    "flag_char": 1,
                    "flag_value": 1
                },
                "free": {
                    "free_memory": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 6,
                    "base_address": 4,
                    "binary_address": 1,
                    "data": 3,
                    "file_ptr": 1,
                    "input": 3,
                    "input_address": 1,
                    "input_param": 8,
                    "input_ptr": 2,
                    "param1": 1
                },
                "param_2": {
                    "arg2": 7,
                    "config": 1,
                    "config_param": 4,
                    "data_param": 1,
                    "func_ptr": 1,
                    "input_data": 1,
                    "input_value": 1,
                    "param": 3,
                    "param2": 3,
                    "param_2": 3,
                    "param_ptr": 1,
                    "ptr": 1,
                    "size_param": 1,
                    "struct_param": 1,
                    "unused_param": 1,
                    "value": 1
                },
                "param_3": {
                    "arg3": 6,
                    "length": 3,
                    "length_param": 4,
                    "param1": 1,
                    "param3": 3,
                    "param_3": 3,
                    "size": 4,
                    "size1": 2,
                    "size_param": 3,
                    "start_index": 1,
                    "value_param": 1
                },
                "param_4": {
                    "arg4": 6,
                    "flag": 6,
                    "flag1": 1,
                    "flag_param": 5,
                    "option_param": 1,
                    "param2": 1,
                    "param4": 5,
                    "param_4": 4,
                    "undefined_param": 1,
                    "unused_param2": 1
                },
                "param_5": {
                    "arg5": 6,
                    "count": 1,
                    "end_index": 1,
                    "flag_param": 2,
                    "limit_param": 1,
                    "mask": 2,
                    "mask_param": 4,
                    "param3": 1,
                    "param5": 4,
                    "param_5": 4,
                    "size2": 2,
                    "value": 3
                },
                "param_6": {
                    "arg6": 5,
                    "bool_param": 1,
                    "bool_param1": 1,
                    "bool_param_1": 1,
                    "char_param_a": 1,
                    "condition": 2,
                    "condition_1": 1,
                    "condition_param": 2,
                    "flag1": 7,
                    "flag1_param": 1,
                    "flag2": 1,
                    "flag_1": 3,
                    "is_param6_set": 1,
                    "is_valid_param": 1,
                    "param6": 2,
                    "param_6": 1
                },
                "param_7": {
                    "arg7": 5,
                    "bool_param2": 1,
                    "bool_param_2": 1,
                    "char_param_b": 1,
                    "check": 1,
                    "check_flag": 1,
                    "check_param": 1,
                    "condition_2": 1,
                    "flag2": 7,
                    "flag2_param": 3,
                    "flag3": 1,
                    "flag_2": 3,
                    "is_enabled_param": 1,
                    "is_param7_set": 1,
                    "param7": 2,
                    "param_7": 1
                },
                "sVar2": {
                    "length": 1,
                    "str_len": 4,
                    "str_length": 1,
                    "string_len": 1,
                    "string_length": 22,
                    "type_length": 2
                },
                "sprintf": {
                    "format_string": 1
                },
                "stab_pop_type": {
                    "pop_type": 4
                },
                "stab_start_struct_type_lto_priv_0": {
                    "initialize_struct_type": 1,
                    "start_struct_type": 3
                },
                "strlen": {
                    "get_string_length": 1,
                    "string_length": 1
                },
                "uVar1": {
                    "result": 23,
                    "return_value": 2,
                    "retval": 1
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_0010a69a",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4\nprocess_stab_data_0010a83e(long input_param,undefined8 arg2,ulong arg3,undefined arg4,ulong arg5,\n            byte flag1,byte flag2)\n\n{\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t string_length;\n  char char_value;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    string1 = (char *)0x0;\n    char_value = '\\0';\n  }\n  else {\n    char_value = *(char *)(*(long *)(input_param + 0x60) + 0x1c);\n    string1 = (char *)pop_type();\n    arg5 = arg5 & 0xffffffff;\n    arg3 = arg3 & 0xffffffff;\n  }\n  result = start_struct_type(input_param,arg2,arg3,arg4,arg5);\n  if ((char)result != '\\0') {\n    if (flag1 == 0) {\n      return result;\n    }\n    if (flag2 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      string_length = string_length(string1);\n      string2 = (char *)allocate_memory(string_length + 3);\n      format_string(string2,\"~%%%s\",string1);\n      free_memory(string1);\n      if (char_value != '\\0') {\n        *(undefined *)(*(long *)(input_param + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(input_param + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)allocate_memory(0x14);\n      format_string(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(input_param + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(input_param + 0x60) + 0x38) = string2;\n    return result;\n  }\n  return result;\n}\n\n",
            "current_name": "process_stab_data_0010a83e",
            "entrypoint": "0x0010a83e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a83e": "process_stab_data_0010a83e",
                "__s": "string1",
                "__s_00": "string2",
                "cVar3": "char_value",
                "free": "free_memory",
                "param_1": "input_param",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "flag1",
                "param_7": "flag2",
                "sVar2": "string_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "stab_start_struct_type_lto_priv_0": "start_struct_type",
                "strlen": "string_length",
                "uVar1": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a94e": {
            "additional_data": {
                "CONCAT71": {
                    "concatenate": 1
                },
                "FUN_00109b2f": {
                    "retrieve_binary_data": 1
                },
                "FUN_0010a94e": {
                    "build_data_string": 1,
                    "build_formatted_string": 1,
                    "build_string": 3,
                    "construct_query_string": 1,
                    "construct_request_string": 1,
                    "construct_string": 2,
                    "construct_url": 1,
                    "create_formatted_string": 4,
                    "generate_concatenated_string": 1,
                    "generate_data_string": 1,
                    "generate_formatted_data": 1,
                    "generate_formatted_string": 7,
                    "generate_string": 1,
                    "parse_data": 2,
                    "process_data": 1
                },
                "__s": {
                    "pop_type_result": 1,
                    "popped_string": 1,
                    "popped_type": 3,
                    "popped_value": 3,
                    "str": 3,
                    "str3": 3,
                    "str_type": 1,
                    "string1": 2,
                    "string3": 6,
                    "top_type": 1,
                    "type": 5,
                    "type_string": 1
                },
                "abort": {
                    "terminate_program": 1
                },
                "cVar1": {
                    "char_flag": 2,
                    "char_value": 1,
                    "char_var": 1,
                    "flag": 6,
                    "flag_char": 5,
                    "flag_value": 11,
                    "mode": 1,
                    "type_char": 1,
                    "type_flag": 2
                },
                "free": {
                    "deallocate_memory": 1,
                    "free_memory": 1
                },
                "lVar2": {
                    "address2": 1,
                    "base_address": 2,
                    "binary_data_address": 1,
                    "binary_data_ptr": 1,
                    "context_address": 1,
                    "context_ptr": 1,
                    "context_value": 1,
                    "data": 1,
                    "data_ptr": 2,
                    "data_var": 1,
                    "input_struct_internal": 1,
                    "length": 2,
                    "offset": 1,
                    "param_pointer2": 1,
                    "pointer": 1,
                    "pointer_to_data": 1,
                    "ptr": 2,
                    "ptr_to_context": 1,
                    "ptr_to_struct": 1,
                    "struct_address": 1,
                    "struct_pointer": 1,
                    "struct_ptr": 1,
                    "var": 1,
                    "var1": 1,
                    "var_ptr": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 3,
                    "base_address": 3,
                    "binary_address": 1,
                    "binary_data": 2,
                    "binary_data_offset": 1,
                    "binary_param": 1,
                    "context": 4,
                    "data": 1,
                    "data_pointer": 2,
                    "data_struct": 1,
                    "function_context": 1,
                    "input": 4,
                    "input_data": 1,
                    "input_param": 1,
                    "input_struct": 1,
                    "param": 1,
                    "param_pointer": 1,
                    "parameter1": 1
                },
                "param_2": {
                    "arg2": 2,
                    "file_identifier": 1,
                    "filename": 1,
                    "input1": 1,
                    "input_1": 1,
                    "param2": 2,
                    "parameter2": 1,
                    "str1": 5,
                    "string1": 14,
                    "string_1": 1,
                    "string_value1": 1,
                    "value1": 1
                },
                "param_3": {
                    "additional_data": 1,
                    "arg3": 2,
                    "input2": 1,
                    "input_2": 1,
                    "param3": 2,
                    "parameter3": 1,
                    "str2": 5,
                    "string2": 14,
                    "string_2": 1,
                    "string_value2": 1,
                    "value1": 1,
                    "value2": 1
                },
                "param_4": {
                    "arg4": 2,
                    "condition": 1,
                    "flag": 18,
                    "mode": 1,
                    "option": 5,
                    "param4": 2,
                    "parameter4": 1,
                    "status": 1
                },
                "pcVar10": {
                    "new_string": 1,
                    "temporary_string": 1
                },
                "pcVar6": {
                    "formatted_string": 1
                },
                "pcVar7": {
                    "allocated_string": 1,
                    "combined_string": 1,
                    "concat_str": 1,
                    "concatenated_string": 2,
                    "constructed_string": 1,
                    "dynamic_string": 3,
                    "format_string": 1,
                    "formatted_data": 1,
                    "formatted_str": 1,
                    "formatted_string": 6,
                    "new_allocated_string": 1,
                    "new_query_string": 1,
                    "new_string": 3,
                    "old_string": 1,
                    "output_string": 1,
                    "request_string": 1,
                    "result": 2,
                    "result_string": 1,
                    "url_string": 1
                },
                "pcVar7_temp": {
                    "output_string_temp": 1
                },
                "pcVar9": {
                    "condition_string": 1,
                    "extra_info": 1,
                    "flag": 3,
                    "flag_str": 3,
                    "flag_string": 12,
                    "formatted_flag_string": 1,
                    "option": 1,
                    "option_str": 1,
                    "option_string": 3,
                    "param_str": 1,
                    "slash": 1,
                    "suffix": 2
                },
                "pcVar9_temp": {
                    "flag_str_temp": 1
                },
                "sVar3": {
                    "format_string_length": 1,
                    "len1": 5,
                    "len_pc_var7": 1,
                    "len_string1": 1,
                    "length1": 15,
                    "length_pc_var7": 1,
                    "param2_length": 1,
                    "previous_string_length": 1,
                    "size1": 1,
                    "str_len1": 1
                },
                "sVar4": {
                    "input1_length": 1,
                    "len2": 5,
                    "len_param_2": 1,
                    "len_string2": 1,
                    "length2": 14,
                    "length_param_2": 1,
                    "length_string1": 1,
                    "size2": 1,
                    "str_len2": 1,
                    "string_value1_length": 1,
                    "type_str_length": 1
                },
                "sVar5": {
                    "len3": 5,
                    "len_string3": 1,
                    "len_type": 1,
                    "length3": 13,
                    "length_popped_value": 1,
                    "length_string1": 1,
                    "popped_type_length": 1,
                    "popped_value_length": 1,
                    "size3": 1,
                    "str_len3": 1,
                    "type_length": 1,
                    "type_string_length": 1
                },
                "sVar6": {
                    "input2_length": 1,
                    "len4": 5,
                    "len_param_3": 1,
                    "len_string4": 1,
                    "length4": 13,
                    "length_param_3": 1,
                    "length_string2": 1,
                    "param3_length": 1,
                    "size4": 1,
                    "str2_length": 1,
                    "str_len4": 1,
                    "string_value2_length": 1
                },
                "sprintf": {
                    "format_str": 1,
                    "format_string_function": 1
                },
                "stab_pop_type": {
                    "pop_type": 1
                },
                "strlen": {
                    "str_len": 1
                },
                "uVar8": {
                    "result": 16,
                    "ret_val": 1,
                    "return_value": 13
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 generate_formatted_string_0010a94e(long input,char *string1,char *string2,int flag)\n\n{\n  char flag_value;\n  long base_address;\n  char *string3;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  char *formatted_string;\n  undefined8 result;\n  char *flag_string;\n  \n  flag_value = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  string3 = (char *)pop_type();\n  formatted_string = *(char **)(*(long *)(input + 0x60) + 0x20);\n  if (formatted_string == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    length1 = str_len(formatted_string);\n    length2 = str_len(string1);\n    length3 = str_len(string3);\n    length4 = str_len(string2);\n    formatted_string = (char *)allocate_memory(length1 + 10 + length2 + length3 + length4);\n    if (flag == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((flag != 2) && (flag_string = \"\", flag != 0)) {\n                    \n        terminate_program();\n      }\n    }\n    format_string_function(formatted_string,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(input + 0x60) + 0x20),string1,flag_string,\n            string3,string2,*(long *)(input + 0x60));\n    free_memory(*(void **)(*(long *)(input + 0x60) + 0x20));\n    base_address = *(long *)(input + 0x60);\n    *(char **)(base_address + 0x20) = formatted_string;\n    if (flag_value != '\\0') {\n      *(undefined *)(base_address + 0x1c) = 1;\n    }\n    result = concatenate((int7)((ulong)base_address >> 8),1);\n  }\n  return result;\n}\n\n",
            "current_name": "generate_formatted_string_0010a94e",
            "entrypoint": "0x0010a94e",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT71": "concatenate",
                "FUN_0010a94e": "generate_formatted_string_0010a94e",
                "__s": "string3",
                "abort": "terminate_program",
                "cVar1": "flag_value",
                "free": "free_memory",
                "lVar2": "base_address",
                "param_1": "input",
                "param_2": "string1",
                "param_3": "string2",
                "param_4": "flag",
                "pcVar7": "formatted_string",
                "pcVar9": "flag_string",
                "sVar3": "length1",
                "sVar4": "length2",
                "sVar5": "length3",
                "sVar6": "length4",
                "sprintf": "format_string_function",
                "stab_pop_type": "pop_type",
                "strlen": "str_len",
                "uVar8": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010aa53": {
            "additional_data": {
                "FUN_00109b2f": {
                    "get_data_object": 1,
                    "pop_value": 1,
                    "retrieve_data": 1
                },
                "FUN_0010aa53": {
                    "create_log_entry": 1,
                    "decode_and_store_data": 1,
                    "extract_and_format_data": 2,
                    "extracted_binary_info": 1,
                    "format_and_store_data": 5,
                    "generate_formatted_string": 1,
                    "generate_message": 1,
                    "generate_output": 1,
                    "generate_report": 1,
                    "generate_string": 1,
                    "generate_string_and_add_to_buffer": 1,
                    "parse_and_append_data": 1,
                    "parse_and_store_data": 2,
                    "parse_data": 2,
                    "parse_data_and_store": 1,
                    "process_data": 5,
                    "reverse_and_update_value": 1,
                    "update_variable": 1
                },
                "__s": {
                    "extracted_string": 1,
                    "popped_string": 2,
                    "popped_type": 1,
                    "retrieved_string": 1,
                    "str": 5,
                    "string": 8,
                    "string_ptr": 7,
                    "string_value": 5,
                    "string_variable": 1
                },
                "abort": {
                    "error_handling": 1
                },
                "cVar1": {
                    "char1": 1,
                    "char_value": 1,
                    "character": 1,
                    "character_1": 1,
                    "extracted_char": 1,
                    "flag_char": 1,
                    "flag_char_1": 1,
                    "flag_value": 13,
                    "flag_var": 1,
                    "mode_flag": 1,
                    "option_value": 1,
                    "previous_status": 1,
                    "ptr_char": 1,
                    "selected_char": 1,
                    "switch_value": 1,
                    "type_char": 2,
                    "type_flag": 1,
                    "value1": 1
                },
                "cVar3": {
                    "char2": 1,
                    "char_flag": 2,
                    "char_value": 1,
                    "char_value_copy": 1,
                    "character2": 1,
                    "character_2": 1,
                    "digit_char": 1,
                    "flag_char": 4,
                    "flag_char_2": 1,
                    "flag_value": 2,
                    "format_flag": 1,
                    "loop_char": 1,
                    "loop_flag": 1,
                    "mode_char": 2,
                    "mode_string": 1,
                    "mode_value": 2,
                    "option": 1,
                    "option_char": 1,
                    "state_char": 1,
                    "status_char": 2,
                    "switch_case": 1,
                    "type_value": 1,
                    "value_code": 1
                },
                "free": {
                    "memory_deallocation": 1
                },
                "lVar2": {
                    "data_object_ptr": 1,
                    "data_ptr": 3,
                    "data_struct": 2,
                    "data_struct_ptr": 3,
                    "data_structure": 1,
                    "input_struct_ptr": 1,
                    "internal_pointer": 1,
                    "log_entry_data": 1,
                    "pointer_var": 1,
                    "ptr1": 5,
                    "ptr_1": 1,
                    "ptr_data": 1,
                    "ptr_struct": 1,
                    "ptr_to_data": 1,
                    "struct_address": 2,
                    "struct_pointer": 1,
                    "struct_pointer_copy": 1,
                    "struct_ptr": 4
                },
                "lVar7": {
                    "buffer_ptr": 1,
                    "data_struct_ptr2": 1,
                    "new_data_ptr": 2,
                    "new_ptr": 1,
                    "new_struct_address": 1,
                    "new_struct_ptr": 1,
                    "ptr2": 3,
                    "realloc_address": 2,
                    "realloc_ptr": 9,
                    "realloc_result": 2,
                    "reallocated_data": 2,
                    "reallocated_pointer": 1,
                    "reallocated_ptr": 2
                },
                "param_1": {
                    "address": 1,
                    "arg1": 2,
                    "binary_address": 3,
                    "data": 4,
                    "data_address": 1,
                    "data_object": 1,
                    "data_ptr": 3,
                    "data_struct": 2,
                    "data_struct_ptr": 1,
                    "input": 1,
                    "input_address": 1,
                    "input_buffer": 1,
                    "input_data": 4,
                    "input_data_ptr": 1,
                    "input_param": 1,
                    "input_struct": 1,
                    "input_value": 1,
                    "log_entry": 1,
                    "struct_pointer": 1
                },
                "param_2": {
                    "arg2": 2,
                    "data": 3,
                    "data_param": 1,
                    "data_value": 1,
                    "input_value": 1,
                    "new_value": 1,
                    "numeric_value": 1,
                    "param_value": 4,
                    "value": 17
                },
                "param_3": {
                    "arg3": 1,
                    "char_param": 2,
                    "char_value": 7,
                    "flag": 15,
                    "flag_char": 2,
                    "option": 2,
                    "prefix": 2
                },
                "param_4": {
                    "arg4": 1,
                    "condition": 1,
                    "flag": 8,
                    "flag_value": 1,
                    "int_value": 2,
                    "mode": 8,
                    "option": 3,
                    "state": 1,
                    "status": 3,
                    "switch_param": 1,
                    "type": 2
                },
                "pcVar6": {
                    "allocated_string": 4,
                    "dynamic_string": 1,
                    "formatted_data": 2,
                    "formatted_data_ptr": 1,
                    "formatted_str": 1,
                    "formatted_string": 4,
                    "formatted_string_ptr": 1,
                    "generated_message": 1,
                    "modified_string": 1,
                    "new_str": 4,
                    "new_string": 11
                },
                "sVar5": {
                    "length": 2,
                    "str_len": 1,
                    "str_length": 4,
                    "string_len": 1,
                    "string_length": 21,
                    "strlen_result": 1,
                    "type_length": 1
                },
                "sprintf": {
                    "string_formatting": 1
                },
                "stab_pop_type": {
                    "pop_type_function": 1
                },
                "uVar10": {
                    "count": 5,
                    "count_limit": 1,
                    "counter_limit": 1,
                    "counter_max": 1,
                    "current_index": 1,
                    "index_copy": 1,
                    "last_index": 4,
                    "length_counter": 1,
                    "loop_counter_max": 2,
                    "loop_end": 1,
                    "loop_length": 3,
                    "loop_limit": 3,
                    "loop_size": 1,
                    "loop_var2": 1,
                    "max_index": 1,
                    "num_elements": 1,
                    "temp_counter2": 1,
                    "temp_value2": 1,
                    "total_loops": 1
                },
                "uVar4": {
                    "count": 1,
                    "counter": 2,
                    "iteration": 1,
                    "loop_counter": 9,
                    "loop_index": 3,
                    "loop_iter": 1,
                    "loop_var": 1
                },
                "uVar8": {
                    "result": 11,
                    "return_value": 12,
                    "status": 1,
                    "success": 4,
                    "success_flag": 2,
                    "success_indicator": 1
                },
                "uVar9": {
                    "counter": 4,
                    "i": 1,
                    "index": 9,
                    "iterator": 1,
                    "loop_counter": 7,
                    "loop_index": 5,
                    "loop_var": 1,
                    "temp_counter": 1,
                    "temp_value": 1,
                    "temp_var": 1
                },
                "xmalloc": {
                    "dynamic_memory_allocation": 1
                },
                "xrealloc": {
                    "dynamic_memory_reallocation": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_001042b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 decode_and_store_data_0010aa53(long data,undefined8 value,char flag,int flag)\n\n{\n  char flag_value;\n  long ptr1;\n  char flag_char;\n  uint loop_counter;\n  char *string;\n  size_t string_length;\n  char *new_string;\n  long realloc_ptr;\n  undefined8 return_value;\n  ulong index;\n  ulong count;\n  \n  flag_value = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  string = (char *)pop_type_function();\n  string_length = strlen(string);\n  new_string = (char *)dynamic_memory_allocation(string_length + 0x19);\n  *new_string = flag + '0';\n  if (flag == 1) {\n    flag_char = '1';\n  }\n  else {\n    flag_char = '0';\n    if ((flag != 2) && (flag_char = '2', flag != 0)) {\n                    \n      error_handling();\n    }\n  }\n  new_string[1] = flag_char;\n  string_formatting(new_string + 2,\"%ld,%s;\",value);\n  memory_deallocation(string);\n  ptr1 = *(long *)(data + 0x60);\n  return_value = 0;\n  if ((ptr1 != 0) && (*(long *)(ptr1 + 0x20) != 0)) {\n    ptr1 = *(long *)(ptr1 + 0x28);\n    count = 0;\n    if (ptr1 != 0) {\n      loop_counter = 0;\n      do {\n        index = (ulong)loop_counter;\n        count = (ulong)loop_counter;\n        loop_counter = loop_counter + 1;\n      } while (*(long *)(ptr1 + index * 8) != 0);\n    }\n    realloc_ptr = dynamic_memory_reallocation(ptr1,(ulong)((int)count + 2) << 3);\n    *(char **)(realloc_ptr + count * 8) = new_string;\n    *(undefined8 *)(realloc_ptr + (ulong)((int)count + 1) * 8) = 0;\n    ptr1 = *(long *)(data + 0x60);\n    *(long *)(ptr1 + 0x28) = realloc_ptr;\n    if (flag_value != '\\0') {\n      *(undefined *)(ptr1 + 0x1c) = 1;\n    }\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "current_name": "decode_and_store_data_0010aa53",
            "entrypoint": "0x0010aa53",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010aa53": "decode_and_store_data_0010aa53",
                "__s": "string",
                "abort": "error_handling",
                "cVar1": "flag_value",
                "cVar3": "flag_char",
                "free": "memory_deallocation",
                "lVar2": "ptr1",
                "lVar7": "realloc_ptr",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "flag",
                "pcVar6": "new_string",
                "sVar5": "string_length",
                "sprintf": "string_formatting",
                "stab_pop_type": "pop_type_function",
                "uVar10": "count",
                "uVar4": "loop_counter",
                "uVar8": "return_value",
                "uVar9": "index",
                "xmalloc": "dynamic_memory_allocation",
                "xrealloc": "dynamic_memory_reallocation"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ab4d": {
            "additional_data": {
                "FUN_0010ab4d": {
                    "add_identifier_to_target": 1,
                    "append_data": 1,
                    "append_string": 1,
                    "append_string_and_return": 1,
                    "append_string_to_buffer": 1,
                    "append_string_to_char_array": 1,
                    "append_string_to_data": 2,
                    "append_string_to_global": 1,
                    "append_string_to_list": 1,
                    "append_string_to_log": 1,
                    "append_string_to_name": 1,
                    "append_string_to_var": 1,
                    "append_string_to_variable": 1,
                    "append_string_with_delimiter": 1,
                    "append_string_with_separator": 1,
                    "append_to_data_structure": 1,
                    "append_to_log": 2,
                    "build_log_message": 1,
                    "concatenate_and_extend_string": 1,
                    "concatenate_and_store_string": 1,
                    "modify_request_string": 1,
                    "process_data": 1,
                    "reverse_and_update_string": 1,
                    "update_log_string": 1,
                    "update_parameter_value": 1,
                    "update_string": 2,
                    "update_string_with_prefix": 2
                },
                "auVar3": {
                    "output1": 1,
                    "output_value1": 1,
                    "result": 20,
                    "result1": 1,
                    "result_1": 1,
                    "result_var1": 1,
                    "return_value": 4
                },
                "auVar7": {
                    "modified_return_value": 2,
                    "new_data": 1,
                    "new_result": 6,
                    "new_return_value": 1,
                    "new_struct": 1,
                    "output": 2,
                    "output2": 1,
                    "output_value2": 1,
                    "result2": 1,
                    "result_2": 1,
                    "result_var2": 1,
                    "return_result": 1,
                    "return_val": 1,
                    "return_value": 6,
                    "updated_ptr": 1,
                    "updated_result": 2,
                    "updated_return_value": 1
                },
                "lVar2": {
                    "array_value": 1,
                    "buffer_info_ptr": 1,
                    "data_pointer": 1,
                    "data_pointer_copy": 1,
                    "data_ptr": 1,
                    "data_ptr_2": 1,
                    "data_ptr_value_2": 1,
                    "data_struct_pointer": 1,
                    "input_struct_ptr_copy": 1,
                    "list_entry_ptr_2": 1,
                    "local_var1": 1,
                    "log_ptr2": 2,
                    "log_struct_temp": 1,
                    "object_ptr_copy": 1,
                    "param_pointer": 1,
                    "ptr2": 2,
                    "ptr_2": 1,
                    "ptr_to_log_data": 1,
                    "struct_pointer": 1,
                    "struct_pointer_copy": 2,
                    "struct_ptr": 2,
                    "structure_field2": 1,
                    "structure_ptr": 1,
                    "target_var2": 1,
                    "temp_struct": 1,
                    "temp_variable": 1,
                    "value_2": 1
                },
                "param_1": {
                    "array_pointer": 1,
                    "base_address": 4,
                    "base_pointer": 1,
                    "buffer_info": 1,
                    "data": 2,
                    "data_object": 1,
                    "data_pointer": 2,
                    "data_ptr": 3,
                    "data_structure": 1,
                    "input": 1,
                    "input_data": 1,
                    "input_ptr": 1,
                    "input_struct": 1,
                    "list_ptr": 1,
                    "log_data": 2,
                    "log_info": 1,
                    "log_struct": 1,
                    "object_ptr": 1,
                    "parameter": 1,
                    "request_struct": 1,
                    "structure_offset": 1,
                    "structure_pointer": 1,
                    "target_struct": 1
                },
                "param_2": {
                    "identifier": 1,
                    "input_string": 7,
                    "log_message": 1,
                    "message": 1,
                    "name": 1,
                    "new_data": 1,
                    "new_string": 2,
                    "old_string": 1,
                    "prefix": 2,
                    "request_string": 1,
                    "str": 1,
                    "str_to_append": 1,
                    "string": 2,
                    "string_param": 1,
                    "string_to_add": 1,
                    "string_to_append": 5,
                    "text": 1,
                    "value": 1
                },
                "param_3": {
                    "arg1": 2,
                    "arg3": 1,
                    "old_value": 1,
                    "param3": 7,
                    "param_3": 4,
                    "unused1": 4,
                    "unused_param": 3,
                    "unused_param1": 3,
                    "unused_param_1": 2,
                    "unused_parameter1": 2,
                    "val1": 1,
                    "var3": 1
                },
                "param_4": {
                    "arg2": 2,
                    "arg4": 1,
                    "data": 1,
                    "new_value": 1,
                    "output_param": 1,
                    "param4": 7,
                    "param_4": 4,
                    "unused2": 4,
                    "unused_param2": 3,
                    "unused_param_2": 2,
                    "unused_parameter2": 2,
                    "val2": 1,
                    "value": 1,
                    "var4": 1
                },
                "pcVar5": {
                    "current_name": 1,
                    "current_string": 1,
                    "dynamic_array": 1,
                    "dynamic_string": 1,
                    "existing_buffer": 1,
                    "existing_data": 2,
                    "existing_log": 1,
                    "existing_string": 15,
                    "existing_string_ptr": 1,
                    "existing_text": 1,
                    "existing_value": 1,
                    "global_string": 1,
                    "log_buffer": 1,
                    "log_ptr3": 1,
                    "log_string": 1,
                    "target_string": 1
                },
                "sVar4": {
                    "identifier_length": 1,
                    "input_length": 6,
                    "input_str_len": 1,
                    "input_string_length": 3,
                    "input_text_length": 1,
                    "len_string": 1,
                    "message_len": 1,
                    "message_length": 1,
                    "name_length": 1,
                    "new_data_length": 1,
                    "new_string_len": 1,
                    "new_string_length": 1,
                    "old_string_length": 1,
                    "prefix_length": 2,
                    "request_str_len": 1,
                    "str_len": 1,
                    "string_length": 4,
                    "string_to_add_length": 1,
                    "string_to_append_length": 1,
                    "value_length": 1
                },
                "sVar6": {
                    "current_name_length": 1,
                    "current_string_length": 1,
                    "dynamic_array_length": 1,
                    "dynamic_string_length": 1,
                    "existing_buffer_length": 1,
                    "existing_data_length": 1,
                    "existing_length": 1,
                    "existing_log_length": 1,
                    "existing_str_len": 2,
                    "existing_string_len": 1,
                    "existing_string_length": 12,
                    "existing_text_length": 1,
                    "existing_value_length": 1,
                    "global_string_length": 1,
                    "len_existing_data": 1,
                    "log_buffer_len": 1,
                    "log_ptr3_len": 1,
                    "log_string_length": 1,
                    "target_string_length": 1
                },
                "uVar1": {
                    "array_size": 1,
                    "buffer_ptr": 1,
                    "data_address": 1,
                    "data_location": 1,
                    "data_ptr": 2,
                    "data_ptr_value": 1,
                    "data_structure_address": 1,
                    "data_value": 2,
                    "global_var1": 1,
                    "input_struct_ptr": 1,
                    "list_entry_ptr": 1,
                    "log_base_address": 1,
                    "log_ptr": 2,
                    "object_value": 1,
                    "param_address": 1,
                    "ptr1": 2,
                    "ptr_1": 1,
                    "struct_address": 1,
                    "struct_pointer": 2,
                    "struct_ptr": 1,
                    "structure_field1": 1,
                    "structure_value": 1,
                    "target_var1": 1,
                    "value_1": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104270",
                "FUN_001042b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] append_string_to_var_0010ab4d(long base_address,char *input_string,undefined8 param3,undefined8 param4)\n\n{\n  ulong struct_pointer;\n  long log_ptr2;\n  undefined result [16];\n  size_t input_length;\n  char *existing_string;\n  size_t existing_string_length;\n  undefined return_value [16];\n  \n  struct_pointer = *(ulong *)(base_address + 0x60);\n  if ((struct_pointer != 0) && (*(long *)(struct_pointer + 0x20) != 0)) {\n    existing_string = *(char **)(struct_pointer + 0x30);\n    input_length = strlen(input_string);\n    if (existing_string == (char *)0x0) {\n      existing_string = (char *)xmalloc(input_length + 3);\n      *existing_string = '\\0';\n    }\n    else {\n      existing_string_length = strlen(existing_string);\n      existing_string = (char *)xrealloc(existing_string,input_length + 4 + existing_string_length);\n    }\n    input_length = strlen(existing_string);\n    sprintf(existing_string + input_length,\"%s::\",input_string);\n    log_ptr2 = *(long *)(base_address + 0x60);\n    *(char **)(log_ptr2 + 0x30) = existing_string;\n    return_value._1_7_ = (undefined7)((ulong)log_ptr2 >> 8);\n    return_value[0] = 1;\n    return_value._8_8_ = param4;\n    return return_value;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = struct_pointer;\n  return result << 0x40;\n}\n\n",
            "current_name": "append_string_to_var_0010ab4d",
            "entrypoint": "0x0010ab4d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ab4d": "append_string_to_var_0010ab4d",
                "auVar3": "result",
                "auVar7": "return_value",
                "lVar2": "log_ptr2",
                "param_1": "base_address",
                "param_2": "input_string",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar5": "existing_string",
                "sVar4": "input_length",
                "sVar6": "existing_string_length",
                "uVar1": "struct_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010abdd": {
            "additional_data": {
                "FUN_0010abdd": {
                    "concatenate_strings": 1,
                    "extract_data": 1,
                    "generate_output": 1,
                    "improve_and_add_info": 1,
                    "improve_and_freeze_data": 1,
                    "modify_string": 1,
                    "process_data": 6,
                    "reformat_code": 1,
                    "update_configuration": 1,
                    "update_data": 3,
                    "update_record": 1
                },
                "__s": {
                    "additional_string": 1,
                    "buffer3": 3,
                    "config_str3": 1,
                    "extra_data": 1,
                    "local_variable_5": 1,
                    "modified_info": 1,
                    "param1_ptr": 1,
                    "ptr4": 1,
                    "ptr_to_string_3": 1,
                    "str": 1,
                    "str3": 4,
                    "str4": 1,
                    "str_3": 3,
                    "str_ptr3": 1,
                    "string2": 1,
                    "string3": 1,
                    "string4": 3,
                    "string_3": 1,
                    "string_var2": 1,
                    "string_var3": 1,
                    "temp_str": 1,
                    "third_string_pointer": 1
                },
                "bVar3": {
                    "byte1": 3,
                    "byte_1": 1,
                    "byte_2": 1,
                    "byte_val": 5,
                    "byte_var": 4,
                    "byte_var2": 1,
                    "flag": 1,
                    "local_variable_3": 1,
                    "tmp": 1
                },
                "cVar10": {
                    "char1": 14,
                    "char_1": 4,
                    "char_val1": 2,
                    "char_var1": 4,
                    "char_var_1": 1,
                    "character1": 1,
                    "info_char": 1,
                    "local_variable_10": 1,
                    "new_char1": 1,
                    "temp_char_1": 1,
                    "var1": 1
                },
                "cVar11": {
                    "char2": 14,
                    "char_2": 4,
                    "char_val2": 2,
                    "char_var2": 4,
                    "char_var_2": 1,
                    "character2": 1,
                    "local_variable_11": 1,
                    "new_char2": 1,
                    "temp_char_2": 1,
                    "upper_char": 1,
                    "var2": 1
                },
                "lVar1": {
                    "base_address": 1,
                    "binary_info": 1,
                    "config_struct": 1,
                    "data1": 1,
                    "data_offset": 1,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "data_size": 1,
                    "info_ptr": 1,
                    "local_var1": 1,
                    "local_variable_1": 1,
                    "mem_block_address": 1,
                    "pointer": 1,
                    "pointer1": 1,
                    "pointer_1": 1,
                    "pointer_var": 1,
                    "ptr": 4,
                    "ptr1": 2,
                    "ptr_record": 1,
                    "ptr_to_struct": 2,
                    "struct_ptr": 2,
                    "var1": 2
                },
                "local_52": {
                    "byte1": 2,
                    "byte2": 2,
                    "byte_1": 1,
                    "byte_2": 1,
                    "byte_val": 1,
                    "byte_var": 3,
                    "flag_5": 1,
                    "local_byte": 6,
                    "local_byte_var": 3,
                    "local_flag": 4,
                    "local_var": 5,
                    "local_var1": 1,
                    "local_variable_12": 1
                },
                "param_1": {
                    "arg1": 4,
                    "binary_offset": 1,
                    "config_ptr": 1,
                    "context": 1,
                    "data": 2,
                    "data_1": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "data_struct": 1,
                    "input": 3,
                    "input_address": 1,
                    "input_param": 2,
                    "input_struct": 1,
                    "input_value": 1,
                    "memory_address": 1,
                    "param": 2,
                    "param1": 1,
                    "parameter_1": 3,
                    "record_ptr": 1
                },
                "param_2": {
                    "arg2": 1,
                    "data1": 1,
                    "input_str": 1,
                    "input_string": 3,
                    "name": 1,
                    "parameter_2": 1,
                    "source_code": 1,
                    "str1": 2,
                    "string": 1,
                    "string1": 12,
                    "string_1": 2,
                    "string_param": 4,
                    "string_parameter": 1
                },
                "param_3": {
                    "arg3": 1,
                    "count": 2,
                    "input_length": 2,
                    "input_size": 1,
                    "length": 10,
                    "length_parameter": 1,
                    "num": 1,
                    "num1": 1,
                    "num_iterations": 1,
                    "num_params": 1,
                    "parameter_3": 1,
                    "size": 3,
                    "size_param": 2,
                    "source_len": 1,
                    "status": 1,
                    "string_length": 1,
                    "uint_param": 1
                },
                "param_4": {
                    "arg4": 1,
                    "boolean_param_1": 1,
                    "char_param_1": 1,
                    "condition1": 1,
                    "flag1": 19,
                    "flag1_param": 2,
                    "flag_1": 4,
                    "parameter_4": 1,
                    "reverse_order": 1
                },
                "param_5": {
                    "arg5": 1,
                    "boolean_param_2": 1,
                    "char_param_2": 1,
                    "condition2": 1,
                    "flag2": 19,
                    "flag2_param": 2,
                    "flag_2": 4,
                    "parameter_5": 1,
                    "uppercase": 1
                },
                "param_6": {
                    "add_colon": 1,
                    "arg6": 1,
                    "boolean_param_3": 1,
                    "char_param_3": 1,
                    "condition3": 1,
                    "flag3": 19,
                    "flag3_param": 2,
                    "flag_3": 4,
                    "parameter_6": 1
                },
                "param_7": {
                    "arg2": 1,
                    "arg7": 1,
                    "constant_value": 1,
                    "data": 1,
                    "line_num": 1,
                    "long_parameter": 1,
                    "num2": 1,
                    "number": 1,
                    "number_param": 1,
                    "param2": 1,
                    "param7": 1,
                    "param7_value": 1,
                    "param_7": 1,
                    "parameter_7": 1,
                    "unknown_val": 1,
                    "val": 1,
                    "value": 12,
                    "value_1": 2,
                    "value_param": 1
                },
                "param_8": {
                    "add_info": 1,
                    "arg8": 1,
                    "boolean_param_4": 1,
                    "char_param_4": 1,
                    "flag": 1,
                    "flag4": 19,
                    "flag4_param": 2,
                    "flag_4": 4,
                    "parameter_8": 1
                },
                "pcVar2": {
                    "buffer1": 3,
                    "config_str1": 1,
                    "data_ptr": 1,
                    "input_string": 1,
                    "local_variable_2": 1,
                    "old_name": 1,
                    "old_string": 1,
                    "original_code": 1,
                    "ptr1": 1,
                    "ptr2": 2,
                    "ptr_to_string_1": 1,
                    "source_str": 1,
                    "str1": 4,
                    "str2": 1,
                    "str_1": 3,
                    "str_ptr1": 1,
                    "string1": 1,
                    "string2": 3,
                    "string_1": 1,
                    "string_pointer": 1,
                    "string_var1": 1
                },
                "pcVar4": {
                    "buffer2": 3,
                    "config_str2": 1,
                    "dest_str": 1,
                    "local_variable_4": 1,
                    "modif_code": 1,
                    "new_string": 1,
                    "old_record_value": 1,
                    "param2_ptr": 1,
                    "ptr2": 1,
                    "ptr3": 2,
                    "ptr_to_string_2": 1,
                    "second_string_pointer": 1,
                    "str2": 4,
                    "str3": 1,
                    "str_2": 3,
                    "str_ptr2": 1,
                    "string2": 1,
                    "string3": 3,
                    "string_2": 1,
                    "string_var1": 1,
                    "string_var2": 1
                },
                "sVar5": {
                    "len1": 7,
                    "len_1": 1,
                    "len_buffer1": 1,
                    "len_original": 1,
                    "length1": 9,
                    "length_1": 1,
                    "local_variable_6": 1,
                    "old_name_length": 1,
                    "size1": 1,
                    "size_1": 1,
                    "source_len": 1,
                    "str_len1": 1,
                    "str_length1": 1,
                    "string_1_length": 1,
                    "string_len_1": 1,
                    "strlen1": 1,
                    "strlen_str_1": 1
                },
                "sVar6": {
                    "dest_len": 1,
                    "len2": 7,
                    "len_2": 1,
                    "len_buffer2": 1,
                    "len_modif": 1,
                    "length2": 9,
                    "length_2": 1,
                    "local_variable_7": 1,
                    "old_record_value_length": 1,
                    "size2": 1,
                    "size_2": 1,
                    "str_len2": 1,
                    "str_length2": 1,
                    "string_2_length": 1,
                    "string_len_2": 1,
                    "strlen2": 1,
                    "strlen_str_2": 1
                },
                "sVar7": {
                    "len3": 7,
                    "len_3": 1,
                    "len_source": 1,
                    "len_string1": 1,
                    "length3": 9,
                    "length_3": 1,
                    "local_variable_8": 1,
                    "name_length": 1,
                    "size3": 1,
                    "size_3": 1,
                    "str_len3": 1,
                    "str_length3": 1,
                    "string1_len": 1,
                    "string_3_length": 1,
                    "string_len_3": 1,
                    "strlen3": 1,
                    "strlen_str_3": 1
                },
                "sVar8": {
                    "extra_data_length": 1,
                    "len4": 7,
                    "len_4": 1,
                    "len_buffer3": 1,
                    "len_modif_info": 1,
                    "length4": 9,
                    "length_4": 1,
                    "local_variable_9": 1,
                    "size4": 1,
                    "size_4": 1,
                    "str_len4": 1,
                    "str_length4": 1,
                    "string_4_length": 1,
                    "string_len_4": 1,
                    "strlen4": 1,
                    "strlen_str_4": 1,
                    "temp_len": 1
                },
                "uVar9": {
                    "result": 28,
                    "return_value": 3
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_0010adf2",
                "FUN_0010add5"
            ],
            "code": "\nundefined8\nprocess_data_0010abdd(long arg1,char *string1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long ptr;\n  char *str1;\n  byte byte_val;\n  char *str2;\n  char *str3;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  undefined8 result;\n  char char1;\n  char char2;\n  byte local_byte;\n  \n  str3 = (char *)0x0;\n  local_byte = *(byte *)(*(long *)(arg1 + 0x60) + 0x1c);\n  str2 = (char *)stab_pop_type();\n  if (flag4 != '\\0') {\n    byte_val = 1;\n    if (local_byte == 0) {\n      byte_val = *(byte *)(*(long *)(arg1 + 0x60) + 0x1c);\n    }\n    local_byte = byte_val & 1;\n    str3 = (char *)stab_pop_type(arg1);\n  }\n  ptr = *(long *)(arg1 + 0x60);\n  if ((ptr == 0) || (str1 = *(char **)(ptr + 0x30), str1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char1 = '?';\n    if (flag1 == '\\0') {\n      char1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    length1 = strlen(str1);\n    length2 = strlen(str2);\n    length3 = strlen(string1);\n    length4 = 0;\n    if (flag4 != '\\0') {\n      length4 = strlen(str3);\n    }\n    result = xrealloc(str1,length3 + length1 + 0x28 + length2 + length4);\n    *(undefined8 *)(ptr + 0x30) = result;\n    str1 = *(char **)(*(long *)(arg1 + 0x60) + 0x30);\n    length1 = strlen(str1);\n    sprintf(str1 + length1,\"%s:%s;%c%c%c\",str2,string1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)char2,(ulong)(uint)(int)char1,length1);\n    free(str2);\n    if (flag4 != '\\0') {\n      str2 = *(char **)(*(long *)(arg1 + 0x60) + 0x30);\n      length1 = strlen(str2);\n      sprintf(str2 + length1,\"%ld;%s;\",value,str3);\n      free(str3);\n    }\n    if (local_byte != 0) {\n      *(undefined *)(*(long *)(arg1 + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010abdd",
            "entrypoint": "0x0010abdd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "__s": "str3",
                "bVar3": "byte_val",
                "cVar10": "char1",
                "cVar11": "char2",
                "lVar1": "ptr",
                "local_52": "local_byte",
                "param_1": "arg1",
                "param_2": "string1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "pcVar2": "str1",
                "pcVar4": "str2",
                "sVar5": "length1",
                "sVar6": "length2",
                "sVar7": "length3",
                "sVar8": "length4",
                "uVar9": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010add5": {
            "additional_data": {
                "FUN_0010abdd": {
                    "process_data": 4,
                    "process_parameters": 1
                },
                "FUN_0010add5": {
                    "execute_stab_class_method_var": 1,
                    "extract_data": 1,
                    "initialize_and_call_stab_class_method_var": 1,
                    "initialize_class_method_and_variables": 1,
                    "initialize_class_method_var": 3,
                    "initialize_class_method_variable": 7,
                    "initialize_class_method_variables": 1,
                    "initialize_stab_class_method_var": 13,
                    "initialize_stab_class_method_variable": 1,
                    "process_data": 1,
                    "stabilize_class_method_variable": 1
                },
                "param_1": {
                    "data": 1,
                    "data1": 1,
                    "data_length": 1,
                    "file_descriptor": 1,
                    "file_length": 1,
                    "file_offset": 1,
                    "input_param": 1,
                    "input_value": 2,
                    "input_var_1": 1,
                    "length": 6,
                    "long_param": 3,
                    "long_value": 1,
                    "param": 1,
                    "param1": 2,
                    "param_count": 1,
                    "param_long": 1
                },
                "param_2": {
                    "buffer": 1,
                    "char_array_param": 1,
                    "char_ptr_param": 1,
                    "class_name": 1,
                    "data2": 1,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "file_name": 1,
                    "file_path": 1,
                    "input_string": 3,
                    "input_var_2": 1,
                    "name": 1,
                    "param2": 2,
                    "param_string": 1,
                    "str": 1,
                    "string": 4,
                    "string_param": 2,
                    "string_value": 1
                },
                "param_3": {
                    "buffer_size": 1,
                    "count": 4,
                    "data3": 1,
                    "file_permissions": 1,
                    "file_size": 1,
                    "flag": 1,
                    "flags": 1,
                    "input_size": 1,
                    "input_var_3": 1,
                    "method_id": 1,
                    "param3": 2,
                    "param_uint": 1,
                    "size": 2,
                    "size_param": 1,
                    "uint_param": 3,
                    "uint_value": 1,
                    "value": 2
                },
                "param_4": {
                    "char1": 1,
                    "char_1": 1,
                    "char_param4": 2,
                    "char_param_1": 1,
                    "char_value4": 1,
                    "flag1": 11,
                    "flag_1": 3,
                    "input_var_4": 1,
                    "option_1": 1,
                    "param4": 2,
                    "param_char1": 1
                },
                "param_5": {
                    "char2": 1,
                    "char_2": 1,
                    "char_param5": 2,
                    "char_param_2": 1,
                    "char_value5": 1,
                    "flag2": 11,
                    "flag_2": 3,
                    "input_var_5": 1,
                    "option_2": 1,
                    "param5": 2,
                    "param_char2": 1
                },
                "param_6": {
                    "char3": 1,
                    "char_3": 1,
                    "char_param6": 2,
                    "char_param_3": 1,
                    "char_value6": 1,
                    "flag3": 11,
                    "flag_3": 3,
                    "input_var_6": 1,
                    "option_3": 1,
                    "param6": 2,
                    "param_char3": 1
                }
            },
            "called": [
                "FUN_0010abdd"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_and_call_stab_class_method_var_0010add5(void)\n\n{\n  stab_class_method_var();\n  return;\n}\n\n",
            "current_name": "initialize_and_call_stab_class_method_var_0010add5",
            "entrypoint": "0x0010add5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010add5": "initialize_and_call_stab_class_method_var_0010add5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010adf2": {
            "additional_data": {
                "FUN_0010abdd": {
                    "process_data": 1
                },
                "FUN_0010adf2": {
                    "analyze_stab_class_method_var": 1,
                    "initialize_class": 2,
                    "initialize_class_and_method_variable": 1,
                    "initialize_class_method": 1,
                    "initialize_class_method_var": 7,
                    "initialize_class_method_variable": 5,
                    "initialize_debug": 1,
                    "initialize_stab_class_method_var": 12,
                    "initialize_variables": 1
                },
                "param_1": {
                    "class_id": 6,
                    "count": 2,
                    "data": 1,
                    "file_size": 1,
                    "id": 1,
                    "input_number": 1,
                    "input_param": 2,
                    "input_value": 2,
                    "length": 5,
                    "long_param": 3,
                    "long_value": 3,
                    "some_long_param": 1,
                    "value": 1,
                    "value1": 1
                },
                "param_2": {
                    "buffer": 2,
                    "class_name": 4,
                    "data": 1,
                    "file_name": 1,
                    "input_string": 5,
                    "message": 1,
                    "method_name": 1,
                    "name": 1,
                    "some_char_pointer": 1,
                    "str": 1,
                    "str_param": 2,
                    "string": 4,
                    "string_array": 1,
                    "string_param": 2,
                    "string_value": 3
                },
                "param_3": {
                    "class_flags": 1,
                    "count": 4,
                    "file_permissions": 1,
                    "flags": 6,
                    "input_length": 3,
                    "input_number": 1,
                    "input_size": 1,
                    "length": 2,
                    "num_param": 1,
                    "size": 3,
                    "some_uint_param": 1,
                    "uint_param": 2,
                    "uint_value": 2,
                    "unsigned_int_value": 1,
                    "value": 1
                },
                "param_4": {
                    "bool1": 1,
                    "char_param_1": 1,
                    "char_param_4": 2,
                    "char_value1": 2,
                    "char_value_1": 1,
                    "flag1": 11,
                    "flag_1": 7,
                    "input_char1": 1,
                    "is_static": 1,
                    "option1": 1,
                    "option_1": 1,
                    "some_char_param": 1
                },
                "param_5": {
                    "another_char_param": 1,
                    "bool2": 1,
                    "char_param_2": 1,
                    "char_param_5": 2,
                    "char_value2": 2,
                    "char_value_2": 1,
                    "flag2": 11,
                    "flag_2": 7,
                    "input_char2": 1,
                    "is_virtual": 1,
                    "option2": 1,
                    "option_2": 1
                },
                "param_6": {
                    "bool3": 1,
                    "char_param_3": 1,
                    "char_param_6": 2,
                    "char_value3": 2,
                    "char_value_3": 1,
                    "flag3": 11,
                    "flag_3": 7,
                    "input_char3": 1,
                    "is_const": 1,
                    "option3": 1,
                    "option_3": 1,
                    "yet_another_char_param": 1
                }
            },
            "called": [
                "FUN_0010abdd"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_stab_class_method_var_0010adf2(void)\n\n{\n  stab_class_method_var();\n  return;\n}\n\n",
            "current_name": "initialize_stab_class_method_var_0010adf2",
            "entrypoint": "0x0010adf2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010adf2": "initialize_stab_class_method_var_0010adf2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ae0e": {
            "additional_data": {
                "FUN_0010ae0e": {
                    "build_final_string": 1,
                    "concatenate_strings": 1,
                    "construct_improved_code": 1,
                    "construct_improved_string": 1,
                    "construct_improvement": 1,
                    "extract_and_combine_strings": 1,
                    "extract_and_concat_strings": 1,
                    "extract_data": 2,
                    "extract_strings": 1,
                    "extract_strings_from_binary": 1,
                    "extracted_function": 1,
                    "generate_improved_string": 3,
                    "generate_updated_output": 1,
                    "parse_and_concatenate": 1,
                    "process_data": 3,
                    "reverse_and_combine_strings": 1,
                    "reverse_and_concat_strings": 1,
                    "reverse_and_concatenate": 1,
                    "reverse_and_concatenate_strings": 5,
                    "reverse_string": 1
                },
                "__ptr": {
                    "alloc_ptr": 1,
                    "allocated_memory": 1,
                    "array_pointer": 1,
                    "dynamic_mem_ptr": 1,
                    "dynamic_memory_pointer": 1,
                    "dynamic_pointer": 1,
                    "dynamic_ptr": 1,
                    "inner_struct_array_ptr": 1,
                    "nested_string_pointer": 1,
                    "ptr": 6,
                    "ptr2": 1,
                    "ptr3": 3,
                    "string_pointer": 1,
                    "substring_ptr": 1,
                    "substruct_arr": 1,
                    "temp_pointer": 4,
                    "temp_ptr": 5
                },
                "lVar1": {
                    "data_ptr": 1,
                    "data_struct": 4,
                    "data_structure": 1,
                    "entry": 1,
                    "header_address": 1,
                    "ptr1": 3,
                    "ptr_struct": 1,
                    "string_data": 1,
                    "struct_address": 4,
                    "struct_offset": 1,
                    "struct_pointer": 4,
                    "struct_ptr": 7,
                    "struct_ptr1": 1,
                    "structure_ptr": 1
                },
                "lVar2": {
                    "array_address": 3,
                    "array_offset": 1,
                    "array_ptr": 2,
                    "data_ptr": 1,
                    "inner_struct_ptr": 1,
                    "inner_structure_ptr": 1,
                    "nested_struct_pointer": 1,
                    "ptr": 4,
                    "ptr2": 3,
                    "ptr_array": 1,
                    "ptr_array_address": 1,
                    "second_string_offset": 1,
                    "str_array": 1,
                    "string_array_address": 1,
                    "string_ptr": 2,
                    "strings_array_ptr": 1,
                    "struct_ptr2": 1,
                    "sub_struct_ptr": 1,
                    "substruct_ptr": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_var": 1
                },
                "lVar8": {
                    "combined_string_length": 1,
                    "final_len": 2,
                    "final_length": 3,
                    "output_str_len": 1,
                    "result_len": 1,
                    "result_length": 3,
                    "result_size": 1,
                    "result_str_size": 1,
                    "result_string_len": 1,
                    "result_string_length": 1,
                    "total_len": 6,
                    "total_length": 8,
                    "total_str_len": 1,
                    "total_string_length": 1
                },
                "param_1": {
                    "binary_address": 1,
                    "data": 2,
                    "data_ptr": 1,
                    "input": 18,
                    "input_address": 2,
                    "input_data": 2,
                    "input_pointer": 1,
                    "input_ptr": 2,
                    "input_string": 1,
                    "source_address": 1
                },
                "pcVar3": {
                    "current_string": 1,
                    "inner_struct_element_ptr": 1,
                    "str": 2,
                    "str1": 2,
                    "str_pointer": 1,
                    "str_ptr": 3,
                    "string_pointer": 2,
                    "string_ptr": 2,
                    "string_to_add": 1,
                    "substring": 1,
                    "substruct_str": 1,
                    "temp_char_pointer": 2,
                    "temp_char_ptr": 1,
                    "temp_ptr": 1,
                    "temp_str": 2,
                    "temp_str_ptr": 1,
                    "temp_string": 6,
                    "temp_string_ptr": 1
                },
                "pcVar6": {
                    "combined_string": 2,
                    "concatenated_str": 3,
                    "concatenated_string": 1,
                    "final_string": 2,
                    "first_string": 1,
                    "new_str": 1,
                    "output_string": 2,
                    "result": 6,
                    "result_str": 1,
                    "result_str_ptr": 1,
                    "result_string": 8,
                    "result_string_ptr": 1,
                    "str2": 2
                },
                "sVar4": {
                    "len1": 9,
                    "len_str1": 4,
                    "length1": 13,
                    "outer_string_len": 1,
                    "str_len1": 1,
                    "str_len_1": 1,
                    "string_length1": 2
                },
                "sVar5": {
                    "inner_string_len": 1,
                    "len2": 9,
                    "len_str2": 4,
                    "length2": 13,
                    "str_len2": 1,
                    "str_len_2": 1,
                    "string_length2": 2
                },
                "uVar10": {
                    "array_length": 3,
                    "array_size": 1,
                    "count": 4,
                    "counter2": 1,
                    "index": 3,
                    "inner_string_count": 1,
                    "inner_structure_size": 1,
                    "nested_counter": 1,
                    "num_elements": 1,
                    "num_iterations": 1,
                    "num_strings": 4,
                    "ptr_count": 1,
                    "ptr_counter": 2,
                    "string_count": 1,
                    "sub_struct_count": 1,
                    "substruct_arr_len": 1,
                    "temp_count": 1,
                    "temp_counter": 1,
                    "temp_value": 1,
                    "total_count": 1
                },
                "uVar7": {
                    "result": 9,
                    "return_value": 21,
                    "success": 1
                },
                "uVar9": {
                    "array_index": 1,
                    "count": 5,
                    "counter": 15,
                    "counter1": 1,
                    "i": 1,
                    "index": 5,
                    "inner_string_index": 1,
                    "iteration_counter": 1,
                    "loop_counter": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_001047c0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 reverse_and_concatenate_strings_0010ae0e(long input)\n\n{\n  long struct_ptr;\n  long ptr;\n  void *ptr;\n  char *temp_string;\n  size_t length1;\n  size_t length2;\n  char *result_string;\n  undefined8 return_value;\n  long total_length;\n  uint counter;\n  ulong num_strings;\n  \n  return_value = 0;\n  struct_ptr = *(long *)(input + 0x60);\n  if (((struct_ptr != 0) && (*(char **)(struct_ptr + 8) != (char *)0x0)) &&\n     (result_string = *(char **)(struct_ptr + 0x20), result_string != (char *)0x0)) {\n    length1 = strlen(*(char **)(struct_ptr + 8));\n    length2 = strlen(result_string);\n    ptr = *(long *)(struct_ptr + 0x28);\n    if (ptr == 0) {\n      total_length = length1 + length2 + 10;\n      num_strings = 0;\n    }\n    else {\n      total_length = length1 + length2 + 0x1e;\n      num_strings = 0;\n      while( true ) {\n        result_string = *(char **)(ptr + num_strings * 8);\n        if (result_string == (char *)0x0) break;\n        length1 = strlen(result_string);\n        num_strings = (ulong)((int)num_strings + 1);\n        total_length = total_length + length1;\n      }\n    }\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      length1 = strlen(*(char **)(struct_ptr + 0x30));\n      total_length = total_length + length1;\n    }\n    if (*(char **)(struct_ptr + 0x38) != (char *)0x0) {\n      length1 = strlen(*(char **)(struct_ptr + 0x38));\n      total_length = total_length + length1;\n    }\n    result_string = (char *)xmalloc(total_length);\n    struct_ptr = *(long *)(input + 0x60);\n    strcpy(result_string,*(char **)(struct_ptr + 8));\n    if (*(long *)(struct_ptr + 0x28) != 0) {\n      counter = 0;\n      length1 = strlen(result_string);\n      sprintf(result_string + length1,\"!%u,\",num_strings);\n      while( true ) {\n        struct_ptr = *(long *)(input + 0x60);\n        num_strings = (ulong)counter;\n        ptr = *(void **)(struct_ptr + 0x28);\n        temp_string = *(char **)((long)ptr + num_strings * 8);\n        if (temp_string == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(result_string,temp_string);\n        free(*(void **)(*(long *)(struct_ptr + 0x28) + num_strings * 8));\n      }\n      free(ptr);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    struct_ptr = *(long *)(input + 0x60);\n    strcat(result_string,*(char **)(struct_ptr + 0x20));\n    free(*(void **)(struct_ptr + 0x20));\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined8 *)(struct_ptr + 0x20) = 0;\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      strcat(result_string,*(char **)(struct_ptr + 0x30));\n      free(*(void **)(struct_ptr + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    length1 = strlen(result_string);\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined2 *)(result_string + length1) = 0x3b;\n    temp_string = *(char **)(struct_ptr + 0x38);\n    if (temp_string != (char *)0x0) {\n      strcpy(result_string + length1 + 1,temp_string);\n      free(*(void **)(struct_ptr + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    struct_ptr = *(long *)(input + 0x60);\n    *(char **)(struct_ptr + 8) = result_string;\n    return_value = CONCAT71((int7)((ulong)struct_ptr >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "reverse_and_concatenate_strings_0010ae0e",
            "entrypoint": "0x0010ae0e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ae0e": "reverse_and_concatenate_strings_0010ae0e",
                "__ptr": "ptr",
                "lVar1": "struct_ptr",
                "lVar2": "ptr",
                "lVar8": "total_length",
                "param_1": "input",
                "pcVar3": "temp_string",
                "pcVar6": "result_string",
                "sVar4": "length1",
                "sVar5": "length2",
                "uVar10": "num_strings",
                "uVar7": "return_value",
                "uVar9": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010afd5": {
            "additional_data": {
                "FUN_0010afd5": {
                    "check_and_return_value": 1,
                    "find_and_free_string": 2,
                    "find_matching_entry": 3,
                    "find_matching_string": 4,
                    "find_string": 2,
                    "find_string_in_binary": 4,
                    "find_string_in_data_structure": 2,
                    "find_string_in_list": 1,
                    "find_string_in_nested_structures": 2,
                    "find_string_match": 3,
                    "find_string_value": 1,
                    "reverse_lookup_and_free": 1,
                    "search_and_free_string": 1
                },
                "__s2": {
                    "input_str_cpy": 1,
                    "input_string": 5,
                    "input_string_copy": 2,
                    "matched_string": 1,
                    "new_string": 1,
                    "search_str": 2,
                    "search_str_copy": 2,
                    "search_string": 6,
                    "search_string_copy": 3,
                    "source_string": 1,
                    "str": 1,
                    "str_copy": 1,
                    "str_ptr": 1,
                    "target_str": 2,
                    "target_string": 1
                },
                "auVar8": {
                    "function_result": 1,
                    "result": 9,
                    "result_struct": 1,
                    "result_variable": 1,
                    "return_array": 1,
                    "return_data": 2,
                    "return_result": 1,
                    "return_val": 2,
                    "return_value": 9,
                    "return_value_complex": 1,
                    "return_values": 1
                },
                "bVar7": {
                    "b": 1,
                    "byte_val": 1,
                    "byte_value": 1,
                    "counter": 10,
                    "flag": 6,
                    "iteration": 1,
                    "loop_count": 1,
                    "loop_counter": 6,
                    "loop_flag": 1,
                    "temp": 1,
                    "temp_byte": 1
                },
                "debug_make_indirect_type_isra_0": {
                    "create_debug_indirect_type": 1,
                    "create_indirect_type": 1,
                    "create_type": 1,
                    "debug_make_indirect_type": 1,
                    "make_indirect_type": 4
                },
                "free": {
                    "deallocate_memory": 2,
                    "free_memory": 4,
                    "release_memory": 3
                },
                "iVar1": {
                    "cmp_result": 4,
                    "comparison_result": 8,
                    "result": 3,
                    "str_comparison_result": 1
                },
                "lVar4": {
                    "current_value": 1,
                    "entry_value": 2,
                    "found_value": 1,
                    "index": 1,
                    "item_value": 1,
                    "length": 2,
                    "nested_list_data": 1,
                    "result": 3,
                    "result_length": 1,
                    "size": 1,
                    "string_offset": 1,
                    "temp": 1,
                    "temp_long": 1,
                    "temp_result": 1,
                    "temp_size": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_variable": 1,
                    "type": 1,
                    "value": 6
                },
                "param_1": {
                    "array": 1,
                    "binaries": 1,
                    "data_structure": 1,
                    "entry_list": 2,
                    "input_parameters": 1,
                    "linked_list": 6,
                    "linked_list_param": 1,
                    "list": 6,
                    "list1": 1,
                    "list_pointer": 1,
                    "node_list": 1,
                    "nodes": 1,
                    "param_1": 1,
                    "param_list": 1,
                    "ptr_array": 2,
                    "ptr_list": 1,
                    "string_list": 1,
                    "strings": 1
                },
                "param_2": {
                    "context": 5,
                    "data": 3,
                    "data_pointer": 1,
                    "data_struct": 1,
                    "data_structure": 2,
                    "function_table": 1,
                    "input": 1,
                    "input_param": 1,
                    "input_size": 1,
                    "param2": 2,
                    "param_2": 1,
                    "param_value": 1,
                    "ptr": 1,
                    "struct_addr": 2,
                    "struct_offset": 1,
                    "struct_param": 2,
                    "struct_ptr": 1,
                    "struct_size": 2,
                    "structure": 1
                },
                "param_3": {
                    "input_string": 3,
                    "search_string": 6,
                    "source_str": 1,
                    "str": 5,
                    "str_param": 1,
                    "str_to_find": 1,
                    "string": 10,
                    "string_param": 1,
                    "string_to_match": 1,
                    "string_value": 1
                },
                "param_4": {
                    "input_length": 1,
                    "input_size": 1,
                    "input_string_length": 1,
                    "len": 4,
                    "len_param": 1,
                    "length": 4,
                    "length_param": 1,
                    "length_string": 1,
                    "search_string_length": 4,
                    "size": 1,
                    "size_of_string": 1,
                    "source_len": 1,
                    "str_len": 2,
                    "string_length": 6,
                    "string_size": 1
                },
                "param_5": {
                    "data_type": 1,
                    "debug_flag": 1,
                    "debug_info": 1,
                    "default_result": 1,
                    "default_value": 2,
                    "flag": 1,
                    "new_string_length": 1,
                    "new_type": 1,
                    "new_value": 6,
                    "num": 1,
                    "param5": 1,
                    "param_5": 2,
                    "parameter1": 1,
                    "type": 5,
                    "type_param": 1,
                    "value": 4
                },
                "param_6": {
                    "data": 1,
                    "debug": 2,
                    "debug_data": 1,
                    "debug_flag": 1,
                    "debug_info": 1,
                    "debug_param": 2,
                    "debug_value": 2,
                    "indirect_type": 1,
                    "param6": 2,
                    "param_6": 2,
                    "param_value2": 1,
                    "parameter2": 1,
                    "result": 8,
                    "return_address": 1,
                    "return_value": 4
                },
                "puVar2": {
                    "curr_node": 2,
                    "curr_ptr": 1,
                    "current_array": 1,
                    "current_binary": 1,
                    "current_entry": 5,
                    "current_item": 2,
                    "current_node": 9,
                    "entry": 1,
                    "nested_list": 1,
                    "nested_struct_ptr": 1,
                    "node": 1,
                    "ptr": 1,
                    "ptr1": 3,
                    "temp_ptr": 1
                },
                "puVar5": {
                    "current_string": 1,
                    "current_subentry": 1,
                    "entry_iterator": 1,
                    "inner_array": 1,
                    "inner_entry": 1,
                    "inner_list": 2,
                    "inner_node": 9,
                    "inner_ptr": 1,
                    "nested_item": 1,
                    "nested_list_iterator": 1,
                    "nested_struct_data_ptr": 1,
                    "node": 1,
                    "ptr2": 3,
                    "ptr3": 1,
                    "sub_entry": 1,
                    "sub_node": 1,
                    "temp_entry": 1,
                    "temp_ptr2": 1,
                    "value_node": 1
                },
                "puVar6": {
                    "current_data": 1,
                    "data_type_ptr": 1,
                    "entry_flag": 1,
                    "inner_entry_flag": 1,
                    "inner_item": 1,
                    "inner_node_ptr": 1,
                    "inner_node_value": 1,
                    "inner_ptr": 1,
                    "inner_temp": 2,
                    "inner_var": 1,
                    "item_data": 1,
                    "ptr": 1,
                    "ptr3": 3,
                    "ptr4": 1,
                    "ptr_widget": 1,
                    "sub_node_type": 1,
                    "subentry_type": 1,
                    "temp_ptr": 5,
                    "temp_ptr3": 1,
                    "temp_var": 1,
                    "temp_variable_2": 1,
                    "value_ptr": 1
                },
                "savestring": {
                    "save_string": 3
                },
                "strcmp": {
                    "compare_string": 1,
                    "compare_strings": 8
                },
                "uVar3": {
                    "indirect_type": 8,
                    "previous_node": 1,
                    "ptr2": 1,
                    "result": 1,
                    "temp": 4,
                    "temp_value": 4,
                    "temp_var": 3,
                    "temp_variable": 1,
                    "temporary_variable": 1,
                    "type_info": 1,
                    "type_isra0": 1,
                    "type_result": 1,
                    "updated_value": 1,
                    "value": 1,
                    "variable": 1
                },
                "xmalloc": {
                    "allocate_memory": 9
                }
            },
            "called": [
                "FUN_00109a0b",
                "FUN_001048f0",
                "FUN_00113e23",
                "FUN_00104470",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559"
            ],
            "code": "\nundefined  [16]\nfind_string_in_binary_0010afd5(undefined8 *linked_list,long context,undefined8 string,undefined4 string_length,\n            undefined4 new_value,undefined8 result)\n\n{\n  int comparison_result;\n  char *search_string;\n  undefined8 *current_node;\n  undefined8 indirect_type;\n  long value;\n  undefined8 *inner_node;\n  undefined4 *temp_ptr;\n  byte counter;\n  undefined return_value [16];\n  \n  counter = 0;\n  search_string = (char *)save_string(string,string_length);\n  for (linked_list = (undefined8 *)*linked_list; linked_list != (undefined8 *)0x0;\n      linked_list = (undefined8 *)*linked_list) {\n    for (current_node = (undefined8 *)linked_list[1]; current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      if ((undefined8 *)current_node[2] != (undefined8 *)0x0) {\n        for (inner_node = *(undefined8 **)(undefined8 *)current_node[2]; inner_node != (undefined8 *)0x0;\n            inner_node = (undefined8 *)*inner_node) {\n          if ((*(int *)((long)inner_node + 0x14) == 1) && (*(char *)inner_node[1] == *search_string)) {\n            comparison_result = compare_strings((char *)inner_node[1],search_string);\n            if (comparison_result == 0) {\n              value = inner_node[4];\n              if (value == 0) goto LAB_0010b05b;\n              free_memory(search_string);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_node = *(undefined8 **)(context + 0x1a0);\n  do {\n    if (current_node == (undefined8 *)0x0) {\n      current_node = (undefined8 *)allocate_memory(0x28);\n      indirect_type = *(undefined8 *)(context + 0x1a0);\n      temp_ptr = (undefined4 *)((long)current_node + 0x14);\n      for (value = 5; value != 0; value = value + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)counter * -2 + 1;\n      }\n      *(undefined4 *)(current_node + 2) = new_value;\n      *current_node = indirect_type;\n      current_node[1] = search_string;\n      indirect_type = make_indirect_type(current_node + 3,search_string);\n      *(undefined8 **)(context + 0x1a0) = current_node;\n      current_node[4] = indirect_type;\nLAB_0010b0e7:\n      value = current_node[4];\nLAB_0010b0eb:\n      return_value._8_8_ = result;\n      return_value._0_8_ = value;\n      return return_value;\n    }\n    if (*(char *)current_node[1] == *search_string) {\n      comparison_result = compare_strings((char *)current_node[1],search_string);\n      if (comparison_result == 0) {\n        if (*(int *)(current_node + 2) == 0) {\n          *(undefined4 *)(current_node + 2) = new_value;\n        }\n        free_memory(search_string);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_node = (undefined8 *)*current_node;\n  } while( true );\n}\n\n",
            "current_name": "find_string_in_binary_0010afd5",
            "entrypoint": "0x0010afd5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010afd5": "find_string_in_binary_0010afd5",
                "__s2": "search_string",
                "auVar8": "return_value",
                "bVar7": "counter",
                "debug_make_indirect_type_isra_0": "make_indirect_type",
                "free": "free_memory",
                "iVar1": "comparison_result",
                "lVar4": "value",
                "param_1": "linked_list",
                "param_2": "context",
                "param_3": "string",
                "param_4": "string_length",
                "param_5": "new_value",
                "param_6": "result",
                "puVar2": "current_node",
                "puVar5": "inner_node",
                "puVar6": "temp_ptr",
                "savestring": "save_string",
                "strcmp": "compare_strings",
                "uVar3": "indirect_type",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b0fa": {
            "additional_data": {
                "FUN_0010b0fa": {
                    "decode_debug_type": 1,
                    "demangle_type": 1,
                    "extract_debug_type": 1,
                    "extract_debug_type_info": 1,
                    "process_debug_type": 1,
                    "process_demangled_type": 1
                },
                "__ptr": {
                    "created_type": 1,
                    "debug_type_ptr": 1,
                    "function_type": 5,
                    "function_type_pointer": 1,
                    "new_pointer": 2,
                    "new_type": 1,
                    "pointer": 2,
                    "pointer_value": 1,
                    "ptr": 2,
                    "ptr_value": 1,
                    "ptr_void": 1,
                    "subtype": 1,
                    "type_object": 3,
                    "type_object_ptr": 1,
                    "type_pointer": 6,
                    "type_ptr": 2
                },
                "create_debug_type_object_00113ce0": {
                    "create_debug_type_object": 3
                },
                "demangle_v3_arglist_0010b6ea": {
                    "demangle_v3_arglist": 3
                },
                "extract_real_type_from_binary_00113b1e": {
                    "extract_real_type_from_binary": 3
                },
                "extract_value_from_binary_001129f4": {
                    "extract_value_from_binary": 3
                },
                "find_string_in_binary_0010afd5": {
                    "find_string_in_binary": 3
                },
                "get_or_create_debug_type_00113d3a": {
                    "get_or_create_debug_type": 3
                },
                "iVar2": {
                    "comparison_result": 28,
                    "result": 1,
                    "strcmp_result": 1,
                    "value2": 1
                },
                "initialize_data_structure_00112904": {
                    "initialize_data_structure": 3
                },
                "initialize_debug_type_00113b4a": {
                    "initialize_debug_type": 3
                },
                "initialize_debug_type_00113b71": {
                    "initialize_debug_type": 3
                },
                "initialize_debug_type_00113cb9": {
                    "initialize_debug_type": 3
                },
                "initialize_debug_type_00113df2": {
                    "initialize_debug_type": 3
                },
                "initialize_debug_type_constprop_00113e17": {
                    "initialize_debug_type": 2,
                    "initialize_debug_type_constprop": 1
                },
                "input_array": {
                    "fields_array": 1
                },
                "input_value": {
                    "input": 1
                },
                "lVar7": {
                    "arg_list_length": 1,
                    "arglist_length": 10,
                    "field_count": 1,
                    "field_length": 1,
                    "long_value": 2,
                    "long_value2": 1,
                    "name_length": 1,
                    "output_value": 1,
                    "result_value": 2,
                    "return_value": 1,
                    "temp_value": 1,
                    "type_length": 2,
                    "type_size": 5,
                    "value": 2
                },
                "local_40": {
                    "array_value": 1,
                    "buffer": 6,
                    "demangle_buffer": 1,
                    "extracted_string": 1,
                    "local_array": 6,
                    "local_buffer": 3,
                    "output_buffer": 1,
                    "output_string": 1,
                    "output_type": 1,
                    "output_value": 2,
                    "real_type": 1,
                    "temp_buffer": 4,
                    "type_byte_array": 1,
                    "unused_param": 1
                },
                "new_variable_name_1": {
                    "unused_variable1": 1
                },
                "new_variable_name_2": {
                    "unused_variable2": 1
                },
                "output_value": {
                    "output": 1
                },
                "param_1": {
                    "arg1": 11,
                    "input_1": 3,
                    "input_arg1": 1,
                    "input_param1": 1,
                    "input_param_1": 12,
                    "input_value1": 1,
                    "input_value_1": 1,
                    "param1": 1
                },
                "param_2": {
                    "arg2": 11,
                    "input_2": 3,
                    "input_arg2": 1,
                    "input_param2": 1,
                    "input_param_2": 12,
                    "input_value2": 1,
                    "input_value_2": 1,
                    "param2": 1
                },
                "param_3": {
                    "component_array": 1,
                    "input_array": 24,
                    "input_param_3": 3,
                    "param3": 1,
                    "ptr_array": 1,
                    "type_array": 1
                },
                "param_4": {
                    "input_param_4": 3,
                    "input_value": 26,
                    "input_value3": 1,
                    "param4": 1
                },
                "param_5": {
                    "error_flag": 23,
                    "input_param_5": 3,
                    "output_value": 2,
                    "param5": 1,
                    "ptr_flag": 1,
                    "value": 1
                },
                "pcVar3": {
                    "decoded_type": 1,
                    "demangled_result": 1,
                    "demangled_string": 1,
                    "demangled_type": 8,
                    "output_string": 1,
                    "output_var": 1,
                    "result": 8,
                    "result_pointer": 1,
                    "result_string": 5,
                    "string": 1,
                    "string_value1": 1,
                    "type_string": 2
                },
                "pcVar5": {
                    "auxiliary_string": 1,
                    "builtin_type": 1,
                    "debug_type": 1,
                    "demangled_type": 1,
                    "error_message": 14,
                    "helper_result": 1,
                    "message": 1,
                    "output_string": 1,
                    "string_value2": 1,
                    "temp_string": 2,
                    "type_name": 6,
                    "type_string": 1
                },
                "plVar4": {
                    "field_array": 2,
                    "field_list": 1,
                    "field_ptr": 2,
                    "field_value": 1,
                    "fields": 8,
                    "fields_array": 4,
                    "fields_ptr": 1,
                    "long_ptr": 1,
                    "long_value1": 1,
                    "pointer": 1,
                    "pointer_to_long": 1,
                    "pointer_value": 1,
                    "pointer_var": 1,
                    "ptr_long": 1,
                    "type_fields": 1,
                    "type_list": 1
                },
                "sVar6": {
                    "length": 3,
                    "name_length": 4,
                    "size_value": 1,
                    "string_length": 17,
                    "type_length": 4,
                    "type_name_length": 2
                },
                "switchD_0010b144_caseD_f": {
                    "case_debug_make_int": 1
                },
                "switchD_0010b14e_caseD_e": {
                    "case_debug_make_int": 1
                },
                "switchD_0010b154_caseD_1": {
                    "case_debug_get_fields": 1
                },
                "switchD_0010b158_caseD_10": {
                    "case_debug_make_float": 1
                },
                "switchD_0010b158_caseD_11": {
                    "case_debug_make_float": 1
                },
                "switchD_0010b158_caseD_13": {
                    "case_debug_make_float": 1
                },
                "switchD_0010b158_caseD_14": {
                    "case_debug_make_float": 1
                },
                "switchD_0010b158_caseD_15": {
                    "case_debug_make_float": 1
                },
                "switchD_0010b158_caseD_16": {
                    "case_debug_make_float": 1
                },
                "switchD_0010b158_caseD_17": {
                    "case_debug_make_function": 1
                },
                "switchD_0010b158_caseD_18": {
                    "case_stab_find_type": 1
                },
                "switchD_0010b158_caseD_2": {
                    "case_stab_find_type": 1
                },
                "switchD_0010b158_caseD_6": {
                    "case_debug_make_pointer": 1
                },
                "switchD_0010b158_caseD_7": {
                    "case_debug_make_reference": 1
                },
                "switchD_0010b158_caseD_9": {
                    "case_debug_make_reference": 1
                },
                "switchD_0010b158_caseD_c": {
                    "case_debug_make_int": 1
                },
                "switchD_0010b16a_caseD_d": {
                    "case_debug_make_int": 1
                },
                "switchD_0010b16e_caseD_12": {
                    "case_debug_make_float": 1
                },
                "switchD_0010b17a_caseD_b": {
                    "case_debug_make_int": 1
                },
                "switchD_0010b1b2_caseD_5": {
                    "case_debug_make_float": 1
                },
                "switchD_0010b1f4_caseD_a": {
                    "case_debug_make_void": 1
                },
                "switchD_0010b1f6_caseD_3": {
                    "case_debug_make_int": 1
                },
                "switchD_0010b1fa_caseD_4": {
                    "case_debug_make_float": 1
                },
                "switchD_0010b248_caseD_8": {
                    "case_debug_make_pointer": 1
                },
                "switchD_0010b2de_caseD_19": {
                    "case_debug_make_const": 1
                },
                "uVar1": {
                    "array_element": 6,
                    "array_length": 7,
                    "array_size": 1,
                    "array_value": 1,
                    "component": 4,
                    "component_type": 1,
                    "component_value": 1,
                    "input": 2,
                    "loop_variable": 1,
                    "type": 1,
                    "type_code": 1,
                    "type_index": 1,
                    "value": 3,
                    "value1": 1
                },
                "update_value_in_memory_00113dfe": {
                    "update_value_in_memory": 3
                }
            },
            "called": [
                "FUN_001040a0",
                "FUN_00104270",
                "FUN_00113e17",
                "FUN_001129f4",
                "FUN_00113cb9",
                "FUN_00113b1e",
                "FUN_00113d3a",
                "FUN_00104050",
                "FUN_00113df2",
                "FUN_00113b4a",
                "FUN_001040e0",
                "FUN_0010b0fa",
                "FUN_00113dfe",
                "FUN_001048f0",
                "FUN_00112904",
                "FUN_00113b71",
                "FUN_00104240",
                "FUN_00104470",
                "FUN_0010b6ea",
                "FUN_001044b0",
                "FUN_00113ce0",
                "FUN_0010afd5"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "code": "\n\n\nchar * extract_debug_type_info_0010b0fa(undefined8 input_param_1,undefined8 input_param_2,uint *input_array,long input_value,\n                   undefined *error_flag)\n\n{\n  uint array_length;\n  int comparison_result;\n  char *result;\n  long *fields;\n  char *error_message;\n  size_t string_length;\n  void *type_pointer;\n  long arglist_length;\n  undefined local_array [16];\n  \n  if (error_flag != (undefined *)0x0) {\n    *error_flag = 0;\n  }\n  while( true ) {\n    array_length = *input_array;\n    if (0x29 < array_length) break;\n    if (0x17 < array_length) {\n      switch(array_length) {\n      case 0x18:\n        goto case_stab_find_type;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result = (char *)extract_debug_type_info_0010b0fa(input_param_1,input_param_2,*(undefined8 *)(input_array + 4),0,0);\n        if (result != (char *)0x0) {\n          switch(*input_array) {\n          case 0x19:\n            goto case_debug_make_const;\n          case 0x1a:\n            result = (char *)debug_make_volatile_type_isra_0(result);\n            return result;\n          case 0x1b:\n            result = (char *)debug_make_const_type_isra_0(result);\n            return result;\n          default:\n                    \n            abort();\n          case 0x22:\n            result = (char *)debug_make_pointer_type_isra_0(result);\n            return result;\n          case 0x23:\n            result = (char *)debug_make_reference_type_isra_0(result);\n            return result;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result = (char *)cplus_demangle_print(3,input_array,0x14,local_array);\n        if (result == (char *)0x0) {\n          error_message = \"Couldn\\'t get demangled builtin type\\n\";\n          result = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparison_result = strcmp(result,\"signed char\");\n        if (comparison_result == 0) {\nLAB_0010b406:\n          error_message = (char *)debug_make_int_type_isra_0(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"bool\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_type_constprop_0(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"char\");\n        if (comparison_result == 0) goto LAB_0010b406;\n        comparison_result = strcmp(result,\"double\");\n        if ((comparison_result == 0) || (comparison_result = strcmp(result,\"long double\"), comparison_result == 0)) {\n          error_message = (char *)debug_make_float_type_isra_0(8);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"float\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_float_type_isra_0(4);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"__float128\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_float_type_isra_0(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned char\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"int\");\n        if (comparison_result == 0) {\nLAB_0010b504:\n          error_message = (char *)debug_make_int_type_isra_0(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned int\");\n        if (comparison_result == 0) {\nLAB_0010b528:\n          error_message = (char *)debug_make_int_type_isra_0(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"long\");\n        if (comparison_result == 0) goto LAB_0010b504;\n        comparison_result = strcmp(result,\"unsigned long\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result,\"__int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned __int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"short\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned short\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"void\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_void_type_isra_0();\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"wchar_t\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result,\"long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)debug_make_int_type_isra_0(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"...\");\n        if (comparison_result == 0) {\n          error_message = \"Unexpected demangled varargs\\n\";\n          if (error_flag == (undefined *)0x0) goto LAB_0010b6a9;\n          *error_flag = 1;\n        }\n        else {\n          error_message = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          error_message = (char *)dcgettext(0,error_message,5);\n          fprintf(_stderr,error_message);\n        }\n        error_message = (char *)0x0;\nLAB_0010b6c6:\n        free(result);\n        return error_message;\n      case 0x29:\n        if (*(long *)(input_array + 4) == 0) {\n          type_pointer = (void *)debug_make_void_type_isra_0();\n        }\n        else {\n          type_pointer = (void *)extract_debug_type_info_0010b0fa(input_param_1,input_param_2,*(long *)(input_array + 4),0,0);\n        }\n        if (type_pointer != (void *)0x0) {\n          arglist_length = stab_demangle_v3_arglist(input_param_1,input_param_2,*(undefined8 *)(input_array + 6),local_array);\n          if (arglist_length != 0) {\n            result = (char *)debug_make_function_type_isra_0(type_pointer,arglist_length,local_array[0]);\n            return result;\n          }\n          free(type_pointer);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (array_length != 1) {\n      if (array_length == 4) {\n        result = (char *)cplus_demangle_print(3,input_array,0x14,local_array);\n        error_message = \"Failed to print demangled template\\n\";\n        if (result != (char *)0x0) {\n          string_length = strlen(result);\n          error_message = (char *)stab_find_tagged_type(input_param_1,input_param_2,result,string_length & 0xffffffff,9);\n          free(result);\n          return error_message;\n        }\nLAB_0010b3d3:\n        error_message = (char *)dcgettext(0,error_message,5);\n        fprintf(_stderr,error_message);\n        return result;\n      }\n      if (array_length == 0) {\n        if ((input_value == 0) ||\n           (fields = (long *)debug_get_fields_isra_0(input_value), fields == (long *)0x0))\n        goto case_stab_find_type;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    input_value = extract_debug_type_info_0010b0fa(input_param_1,input_param_2,*(undefined8 *)(input_array + 4),input_value,0);\n    if (input_value == 0) goto LAB_0010b38c;\n    input_array = *(uint **)(input_array + 6);\n    error_flag = (undefined *)0x0;\n  }\n  result = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,result,(ulong)array_length);\nLAB_0010b38c:\n  result = (char *)0x0;\ncase_debug_make_const:\n  return result;\nLAB_0010b1a5:\n  if (*fields == 0) {\ncase_stab_find_type:\n    result = (char *)stab_find_tagged_type\n                               (input_param_1,input_param_2,*(undefined8 *)(input_array + 4),input_array[6],0);\n    return result;\n  }\n  result = *(char **)(*fields + 8);\n  if (result == (char *)0x0) goto LAB_0010b38c;\n  error_message = (char *)debug_get_type_name_constprop_0(result);\n  if (error_message != (char *)0x0) {\n    string_length = strlen(error_message);\n    if ((input_array[6] == (uint)string_length) &&\n       (comparison_result = strncmp(error_message,*(char **)(input_array + 4),(long)(int)input_array[6]), comparison_result == 0)) {\n      return result;\n    }\n  }\n  fields = fields + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "current_name": "extract_debug_type_info_0010b0fa",
            "entrypoint": "0x0010b0fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b0fa": "extract_debug_type_info_0010b0fa",
                "__ptr": "type_pointer",
                "iVar2": "comparison_result",
                "lVar7": "arglist_length",
                "local_40": "local_array",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_array",
                "param_4": "input_value",
                "param_5": "error_flag",
                "pcVar3": "result",
                "pcVar5": "error_message",
                "plVar4": "fields",
                "sVar6": "string_length",
                "switchD_0010b158_caseD_18": "case_stab_find_type",
                "switchD_0010b2de_caseD_19": "case_debug_make_const",
                "uVar1": "array_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b6ea": {
            "additional_data": {
                "FUN_0010b6ea": {
                    "arg_list_demangler": 1,
                    "decode_v3_arglist": 2,
                    "demangle_and_extract_args": 1,
                    "demangle_arg_list": 1,
                    "demangle_arglist": 6,
                    "demangle_v3_arglist": 18,
                    "extract_arglist": 1,
                    "parse_v3_arglist": 1
                },
                "__format": {
                    "error_message": 17,
                    "error_message_format": 2,
                    "error_msg": 8,
                    "error_msg_format": 1,
                    "format_string": 2,
                    "message": 1
                },
                "__ptr": {
                    "buffer": 1,
                    "result": 14,
                    "result_array": 5,
                    "result_buffer": 1,
                    "result_list": 1,
                    "result_ptr": 9
                },
                "lVar1": {
                    "demangle_result": 5,
                    "demangled": 2,
                    "demangled_arg": 6,
                    "demangled_length": 2,
                    "demangled_name": 1,
                    "demangled_result": 1,
                    "demangled_str": 1,
                    "demangled_str_len": 1,
                    "demangled_string": 2,
                    "demangled_string_length": 1,
                    "demangled_value": 4,
                    "mangled_arg": 1,
                    "result": 2,
                    "return_value": 1
                },
                "local_39": {
                    "buffer": 7,
                    "demangled_arg": 5,
                    "demangled_buffer": 2,
                    "demangled_name": 1,
                    "demangled_str": 1,
                    "demangled_string": 2,
                    "symbol_name": 1,
                    "temp_buffer": 4,
                    "temp_str": 2,
                    "temp_string": 3,
                    "type_buffer": 1,
                    "type_name": 1,
                    "type_string": 1
                },
                "param_1": {
                    "arg1": 24,
                    "arg_1": 2,
                    "param1": 3,
                    "param_1": 2
                },
                "param_2": {
                    "arg2": 24,
                    "arg_2": 2,
                    "param2": 3,
                    "param_2": 2
                },
                "param_3": {
                    "arg_list": 10,
                    "arglist": 15,
                    "arglist_ptr": 3,
                    "type_list": 2,
                    "v3_arglist": 1
                },
                "param_4": {
                    "error_flag": 18,
                    "error_ptr": 1,
                    "has_error": 4,
                    "is_error": 6,
                    "is_successful": 1,
                    "unexpected_types": 1
                },
                "uVar2": {
                    "arg_count": 5,
                    "array_length": 1,
                    "count": 4,
                    "counter": 2,
                    "current_index": 1,
                    "element_count": 1,
                    "i": 1,
                    "index": 4,
                    "num_args": 5,
                    "num_demangled_args": 1,
                    "num_demangled_strings": 1,
                    "num_results": 1,
                    "result_array_index": 1,
                    "result_count": 2,
                    "result_index": 1
                },
                "uVar3": {
                    "alloc_size": 1,
                    "allocated_length": 1,
                    "allocated_num_strings": 1,
                    "array_size": 1,
                    "buffer_size": 3,
                    "capacity": 6,
                    "initial_size": 1,
                    "max_args": 6,
                    "max_count": 1,
                    "result_array_size": 1,
                    "result_size": 2,
                    "size": 7
                },
                "uVar4": {
                    "count": 2,
                    "increment": 2,
                    "index": 4,
                    "new_arg_count": 3,
                    "new_array_length": 1,
                    "new_count": 4,
                    "new_counter": 2,
                    "new_element_count": 1,
                    "new_index": 3,
                    "new_num_args": 4,
                    "new_result_count": 1,
                    "num_demangled_strings_temp": 1,
                    "temp_count": 1,
                    "temp_variable": 1,
                    "updated_index": 1
                }
            },
            "called": [
                "FUN_0010b0fa",
                "FUN_001048f0",
                "FUN_00104240",
                "FUN_001042b0",
                "FUN_001044b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * demangle_v3_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *error_flag)\n\n{\n  void *result;\n  char *error_message;\n  long demangled_arg;\n  ulong arg_count;\n  ulong size;\n  uint new_count;\n  char buffer [9];\n  \n  size = 10;\n  arg_count = 0;\n  result = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    demangled_arg = stab_demangle_v3_arg(arg1,arg2,*(long *)(arglist + 4),0,buffer);\n    if (demangled_arg == 0) {\n      if (buffer[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      new_count = (int)arg_count + 1;\n      if ((uint)size <= new_count) {\n        size = (ulong)((uint)size + 10);\n        result = (void *)xrealloc(result,size << 3);\n      }\n      *(long *)((long)result + arg_count * 8) = demangled_arg;\n      arg_count = (ulong)new_count;\n    }\n  }\n  *(undefined8 *)((long)result + arg_count * 8) = 0;\n  return result;\n}\n\n",
            "current_name": "demangle_v3_arglist_0010b6ea",
            "entrypoint": "0x0010b6ea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b6ea": "demangle_v3_arglist_0010b6ea",
                "__format": "error_message",
                "__ptr": "result",
                "lVar1": "demangled_arg",
                "local_39": "buffer",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "uVar2": "arg_count",
                "uVar3": "size",
                "uVar4": "new_count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b800": {
            "additional_data": {
                "FUN_0010b800": {
                    "convert_int_to_stab_type": 1,
                    "generate_stab_type": 1,
                    "generate_type_string": 1,
                    "improved_stab_int_type": 1,
                    "parse_and_push_stab_type": 1,
                    "parse_stab_int_type": 1,
                    "process_input": 1,
                    "process_int_type": 2,
                    "process_integer_type": 9,
                    "process_stab_int_type": 6,
                    "process_type": 1
                },
                "auStack_8a": {
                    "array_of_undefined4": 1,
                    "auxiliary_stack": 2,
                    "placeholder": 1,
                    "stack_array": 12,
                    "stack_data": 1,
                    "temp_array": 2,
                    "temporary_array": 1,
                    "temporary_stack_array": 1,
                    "unused": 1,
                    "unused_array": 3,
                    "unused_stack_array": 1
                },
                "dcgettext": {
                    "get_localized_message": 1,
                    "get_localized_text": 1,
                    "get_text": 2
                },
                "lVar4": {
                    "current_value": 2,
                    "elem": 1,
                    "element_value": 1,
                    "temp": 3,
                    "temp1": 3,
                    "temp_long1": 1,
                    "temp_long_variable_1": 1,
                    "temp_var1": 2,
                    "temp_variable1": 1,
                    "temp_variable_1": 2,
                    "tmp1": 1,
                    "type_value": 2,
                    "value": 11
                },
                "lVar5": {
                    "bit_mask": 10,
                    "bit_value": 1,
                    "bitmask": 3,
                    "bitwise_value": 2,
                    "mask": 3,
                    "shifted_value": 1,
                    "temp2": 3,
                    "temp_long2": 1,
                    "temp_long_variable_2": 1,
                    "temp_var2": 2,
                    "temp_variable2": 1,
                    "temp_variable_2": 2,
                    "tmp2": 1
                },
                "local_8c": {
                    "buffer": 4,
                    "format_string": 1,
                    "formatted_string": 3,
                    "local_string": 4,
                    "output_buffer": 1,
                    "output_str": 1,
                    "output_string": 9,
                    "str_buffer": 1,
                    "string_buffer": 3,
                    "string_variable": 1,
                    "temp_string": 1,
                    "type_string": 2
                },
                "non_fatal": {
                    "handle_non_fatal": 1,
                    "handle_non_fatal_error": 1,
                    "raise_exception": 1,
                    "report_non_fatal_error": 1
                },
                "param_1": {
                    "base_addr": 1,
                    "base_address": 25,
                    "input": 1,
                    "input_address": 1,
                    "input_param": 1,
                    "input_ptr": 1,
                    "original_function": 1
                },
                "param_2": {
                    "bit_size": 2,
                    "field_size": 1,
                    "index": 1,
                    "size": 26,
                    "type_size": 1
                },
                "param_3": {
                    "add_string": 1,
                    "check": 1,
                    "flag": 20,
                    "is_negative": 6,
                    "is_positive": 1,
                    "is_reversed": 1,
                    "is_signed": 1
                },
                "plVar1": {
                    "address_ptr": 1,
                    "pointer": 6,
                    "pointer_to_data": 1,
                    "pointer_to_value": 2,
                    "ptr": 4,
                    "ptr_obj": 1,
                    "ptr_to_elem": 1,
                    "ptr_to_element": 1,
                    "ptr_to_long": 2,
                    "ptr_to_long_variable": 1,
                    "ptr_to_size": 5,
                    "ptr_to_type": 1,
                    "ptr_to_value": 2,
                    "type_address": 1,
                    "type_pointer": 1,
                    "type_ptr": 1
                },
                "sVar3": {
                    "length": 5,
                    "str_len": 1,
                    "str_length": 3,
                    "string_len": 2,
                    "string_length": 16
                },
                "sprintf": {
                    "format_string": 3
                },
                "stab_push_defined_type": {
                    "push_defined_type": 3,
                    "push_defined_type_to_stab": 1
                },
                "stab_push_string": {
                    "push_string": 3,
                    "push_string_to_stab": 1
                },
                "strlen": {
                    "get_string_length": 1,
                    "string_length": 1
                },
                "uVar2": {
                    "result": 27,
                    "return_value": 4
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109cf4",
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 process_integer_type_0010b800(long base_address,int size,char flag)\n\n{\n  long *pointer;\n  undefined8 result;\n  size_t string_length;\n  long value;\n  long bit_mask;\n  undefined2 output_string;\n  undefined4 stack_array [24];\n  \n  if (size - 1U < 8) {\n    value = base_address + 0xb8;\n    if (flag != '\\0') {\n      value = base_address + 0x78;\n    }\n    pointer = (long *)(value + (ulong)(size - 1U) * 8);\n    value = *pointer;\n    if (value != 0) {\n      result = push_defined_type(base_address,value,size);\n      return result;\n    }\n    value = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = value + 1;\n    *pointer = value;\n    format_string((char *)&output_string,\"%ld=r%ld;\",value,value);\n    if (flag == '\\0') {\n      bit_mask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      string_length = string_length((char *)&output_string);\n      format_string((char *)((long)&output_string + string_length),\"%ld;%ld;\",-bit_mask,bit_mask + -1);\n    }\n    else {\n      string_length = string_length((char *)&output_string);\n      *(undefined2 *)((long)&output_string + string_length) = 0x3b30;\n      *(undefined *)((long)&output_string + string_length + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&output_string + string_length + 2) = 0x3b312d;\n      }\n      else {\n        format_string((char *)((long)&output_string + string_length + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = push_string(base_address,&output_string,value,1,size);\n  }\n  else {\n    result = get_text(0,\"stab_int_type: bad size %u\",5);\n    report_non_fatal_error(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "process_integer_type_0010b800",
            "entrypoint": "0x0010b800",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b800": "process_integer_type_0010b800",
                "auStack_8a": "stack_array",
                "dcgettext": "get_text",
                "lVar4": "value",
                "lVar5": "bit_mask",
                "local_8c": "output_string",
                "non_fatal": "report_non_fatal_error",
                "param_1": "base_address",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "pointer",
                "sVar3": "string_length",
                "sprintf": "format_string",
                "stab_push_defined_type": "push_defined_type",
                "stab_push_string": "push_string",
                "strlen": "string_length",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b948": {
            "additional_data": {
                "FUNK_0010b948": {
                    "process_stab_data": 1
                },
                "FUN_0010b948": {
                    "decode_string": 1,
                    "extract_and_push_type": 1,
                    "extract_stab_strings": 1,
                    "parse_and_push_data": 3,
                    "parse_and_push_type": 1,
                    "parse_input_data": 1,
                    "process_data": 10,
                    "process_parameter": 2,
                    "process_stab_data": 2,
                    "push_defined_type": 3,
                    "push_type_if_needed": 1
                },
                "__ptr": {
                    "data_ptr": 1,
                    "element_type": 1,
                    "extracted_string": 1,
                    "extracted_value": 1,
                    "parsed_data": 1,
                    "pointer": 2,
                    "pop_type": 2,
                    "pop_type_ptr": 2,
                    "pop_value": 1,
                    "popped_type": 1,
                    "str_ptr": 1,
                    "string_ptr": 1,
                    "string_value": 1,
                    "type_pointer": 11,
                    "type_ptr": 2,
                    "type_string": 1,
                    "type_val": 1
                },
                "cVar2": {
                    "can_extract": 1,
                    "condition_var": 1,
                    "has_int_type": 1,
                    "is_int": 1,
                    "is_int_type": 7,
                    "is_integer": 1,
                    "is_integer_type": 3,
                    "is_integer_type_valid": 1,
                    "is_type_privileged": 1,
                    "is_type_valid": 2,
                    "is_valid": 6,
                    "is_valid_type": 5,
                    "result_char": 1
                },
                "lVar1": {
                    "counter": 1,
                    "current_value": 1,
                    "defined_type": 1,
                    "element_type_ptr": 1,
                    "local_var1": 1,
                    "string_address": 1,
                    "symbol_address": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "type_address": 7,
                    "type_count": 1,
                    "type_index": 2,
                    "type_offset": 1,
                    "type_pointer": 3,
                    "type_ptr": 4,
                    "type_val_1": 1,
                    "type_value": 3
                },
                "local_5a": {
                    "decoded_string": 1,
                    "formatted_str": 1,
                    "formatted_string": 16,
                    "local_string": 2,
                    "message": 1,
                    "message_string": 1,
                    "output_string": 7,
                    "stab_string": 1,
                    "string_buffer": 1
                },
                "param_1": {
                    "base_address": 10,
                    "data": 1,
                    "data_address": 3,
                    "data_pointer": 3,
                    "data_ptr": 5,
                    "function_context": 1,
                    "input_address": 1,
                    "input_param": 2,
                    "input_pointer": 1,
                    "input_value": 2,
                    "param1": 1,
                    "parameter_pointer": 1
                },
                "param_2": {
                    "count": 6,
                    "data_array_size": 1,
                    "data_len": 1,
                    "data_length": 1,
                    "data_size": 7,
                    "index": 2,
                    "input_size": 1,
                    "num_elements": 2,
                    "param2": 1,
                    "size": 7,
                    "string_length": 1,
                    "type_id": 1
                },
                "uVar3": {
                    "count_as_unsigned": 1,
                    "count_ulong": 2,
                    "data_length_conv": 1,
                    "data_size64": 1,
                    "data_size_u": 1,
                    "data_size_u_int": 1,
                    "data_size_ul": 1,
                    "data_ulong": 1,
                    "data_val": 1,
                    "input_size_converted": 1,
                    "num_elements": 1,
                    "param2_u_int": 1,
                    "param_2_as_ulong": 1,
                    "param_size": 1,
                    "size": 1,
                    "size64": 1,
                    "size_as_unsigned": 2,
                    "string_length_ulong": 1,
                    "total_count": 1,
                    "type_index": 1,
                    "type_size": 2,
                    "type_value": 1,
                    "u_index": 1,
                    "uint_size": 1,
                    "ulong_count": 1,
                    "ulong_data": 1,
                    "ulong_num_elements": 1,
                    "unsigned_data_size": 1
                },
                "uVar4": {
                    "adjusted_count": 1,
                    "adjusted_size": 1,
                    "count_minus_one": 3,
                    "data_length_minus_1": 1,
                    "data_size_minus_one": 5,
                    "decremented_param2": 1,
                    "index": 5,
                    "index_minus_one": 1,
                    "input_size_minus_one": 1,
                    "modified_data_size": 1,
                    "num_elements_minus_one": 1,
                    "param_2_minus_1": 1,
                    "reduced_size": 1,
                    "size_minus_one": 4,
                    "string_length_minus_one": 1,
                    "temp_num_elements": 1,
                    "type_index_minus_one": 1,
                    "u_minus_one": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_0010b800",
                "FUN_001048f0",
                "FUN_00109b52",
                "FUN_00109cf4",
                "FUN_00109b2f"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_stab_data_0010b948(long base_address,uint data_size)\n\n{\n  long type_address;\n  char is_int_type;\n  void *type_pointer;\n  ulong size_as_unsigned;\n  uint data_size_minus_one;\n  char formatted_string [50];\n  \n  data_size_minus_one = data_size - 1;\n  size_as_unsigned = (ulong)data_size;\n  if ((data_size_minus_one < 0x10) && (type_address = *(long *)(base_address + 0xf8 + (ulong)data_size_minus_one * 8), type_address != 0)) {\n    stab_push_defined_type(base_address,type_address,size_as_unsigned);\n    return;\n  }\n  is_int_type = stab_int_type_lto_priv_0(base_address,4,0);\n  if (is_int_type != '\\0') {\n    type_pointer = (void *)stab_pop_type(base_address);\n    type_address = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = type_address + 1;\n    if (data_size_minus_one < 0x10) {\n      *(long *)(base_address + 0xf8 + (ulong)data_size_minus_one * 8) = type_address;\n    }\n    sprintf(formatted_string,\"%ld=r%s;%u;0;\",type_address,type_pointer,size_as_unsigned);\n    free(type_pointer);\n    stab_push_string(base_address,formatted_string,type_address,1,size_as_unsigned);\n  }\n  return;\n}\n\n",
            "current_name": "process_stab_data_0010b948",
            "entrypoint": "0x0010b948",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b948": "process_stab_data_0010b948",
                "__ptr": "type_pointer",
                "cVar2": "is_int_type",
                "lVar1": "type_address",
                "local_5a": "formatted_string",
                "param_1": "base_address",
                "param_2": "data_size",
                "uVar3": "size_as_unsigned",
                "uVar4": "data_size_minus_one"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ba08": {
            "additional_data": {
                "FUN_00109b2f": {
                    "get_some_data": 1
                },
                "FUN_0010ba08": {
                    "construct_warning_message": 1,
                    "construct_warning_string": 1,
                    "generate_field_info": 1,
                    "generate_field_string": 4,
                    "generate_field_structure": 1,
                    "generate_formatted_string": 1,
                    "generate_struct_field_string": 1,
                    "generate_struct_warning": 1,
                    "generate_struct_warning_message": 1,
                    "generate_warning_message": 15,
                    "generate_warning_string": 3,
                    "process_struct_field": 1
                },
                "FUN_00119ed0": {
                    "handle_warning": 1
                },
                "__s": {
                    "field_type": 1,
                    "format_specifier": 1,
                    "param4": 1,
                    "pop_type": 1,
                    "struct_name": 5,
                    "struct_type": 2,
                    "type": 8,
                    "type_info": 1,
                    "type_name": 4,
                    "type_specifier": 1,
                    "type_string": 6
                },
                "__s_00": {
                    "combined_string": 2,
                    "concatenated_string": 2,
                    "constructed_message": 1,
                    "final_string": 1,
                    "formatted_message": 1,
                    "formatted_str": 1,
                    "formatted_string": 2,
                    "generated_field_string": 1,
                    "generated_message": 1,
                    "message": 7,
                    "new_field_structure": 1,
                    "new_string": 4,
                    "output_string": 2,
                    "result": 1,
                    "result_string": 2,
                    "warning_message": 1,
                    "warning_string": 1
                },
                "abort": {
                    "abort_execution": 1,
                    "terminate_program": 3
                },
                "cVar1": {
                    "char_value": 5,
                    "char_var": 1,
                    "check_flag": 1,
                    "first_char": 1,
                    "flag": 12,
                    "flag_char": 1,
                    "flag_value": 4,
                    "type": 1,
                    "type_flag": 2,
                    "variable": 1,
                    "warning_flag": 2
                },
                "dcgettext": {
                    "get_localized_string": 1,
                    "get_translated_message": 1,
                    "translate_message": 1
                },
                "free": {
                    "deallocate_memory": 1,
                    "free_memory": 1,
                    "release_memory": 1
                },
                "iVar2": {
                    "data_type": 1,
                    "field_count": 3,
                    "field_size": 1,
                    "field_value": 1,
                    "i_var_value": 1,
                    "int_value": 5,
                    "int_var": 1,
                    "length": 1,
                    "second_int": 1,
                    "size": 6,
                    "struct_offset": 1,
                    "struct_size": 8,
                    "unknown_size": 1
                },
                "lVar3": {
                    "field_structure_address": 1,
                    "length": 3,
                    "local_var": 3,
                    "local_var1": 1,
                    "local_variable3": 1,
                    "long_value": 4,
                    "long_var": 2,
                    "param1_copy": 2,
                    "param1_value": 1,
                    "param1c": 1,
                    "param_c": 1,
                    "param_list_address": 1,
                    "param_ptr": 1,
                    "ptr": 1,
                    "struct_offset": 1,
                    "struct_ptr": 2,
                    "struct_size": 1,
                    "temp": 1,
                    "temp_var": 2,
                    "temp_variable": 1
                },
                "malloc": {
                    "allocate_memory": 1
                },
                "non_fatal": {
                    "handle_non_fatal_error": 3,
                    "print_warning_message": 1
                },
                "param_1": {
                    "arg": 1,
                    "arg1": 1,
                    "args": 3,
                    "arguments": 1,
                    "buffer": 1,
                    "field_data": 1,
                    "field_pointer": 1,
                    "field_structure": 1,
                    "param": 1,
                    "param_array": 6,
                    "param_list": 3,
                    "parameters": 4,
                    "params": 3,
                    "ptr_array": 1,
                    "struct_data": 1,
                    "struct_ptr": 1,
                    "warnings": 1
                },
                "param_2": {
                    "field": 1,
                    "field_name": 29,
                    "param_string": 1
                },
                "param_3": {
                    "field_id": 1,
                    "field_size": 1,
                    "field_value": 1,
                    "param1": 3,
                    "param3": 10,
                    "param_3": 5,
                    "param_value": 9,
                    "value": 1
                },
                "param_4": {
                    "field_size": 21,
                    "param2": 3,
                    "param4": 5,
                    "size": 1,
                    "unknown_size": 1
                },
                "param_5": {
                    "field_type": 9,
                    "flag": 7,
                    "is_flagged": 1,
                    "param3": 3,
                    "param5": 5,
                    "param_5": 3,
                    "param_code": 1,
                    "warning_level": 1,
                    "warning_type": 1
                },
                "pcVar9": {
                    "bool_string": 1,
                    "data_value": 1,
                    "extra_character": 1,
                    "extra_string": 2,
                    "field_flag": 1,
                    "field_indicator": 1,
                    "field_type_str": 1,
                    "flag": 2,
                    "flag_string": 11,
                    "format_specifier": 1,
                    "option": 2,
                    "separator": 1,
                    "slash_character": 1,
                    "suffix": 3,
                    "type_flag": 1,
                    "type_specifier_flag": 1
                },
                "printf": {
                    "print_message": 1
                },
                "sVar4": {
                    "current_field_structure_size": 1,
                    "field_name_length": 1,
                    "field_str_size": 1,
                    "input_name_length": 1,
                    "len1": 2,
                    "len_param_1": 1,
                    "length1": 3,
                    "length_field_string": 1,
                    "length_param_1": 1,
                    "length_string1": 1,
                    "param1_len": 2,
                    "param1_length": 3,
                    "param20_length": 1,
                    "param2_len": 1,
                    "param_array_length": 1,
                    "size1": 2,
                    "source_len": 1,
                    "source_length": 1,
                    "source_size": 3,
                    "str1_length": 1,
                    "type_length": 2
                },
                "sVar5": {
                    "field_name_len": 4,
                    "field_name_length": 7,
                    "field_name_size": 5,
                    "len2": 2,
                    "len_param_2": 1,
                    "length2": 3,
                    "length_field_name": 2,
                    "length_string2": 1,
                    "param2_length": 2,
                    "param_2_length": 1,
                    "size2": 2,
                    "str2_length": 1
                },
                "sVar6": {
                    "field_type_size": 1,
                    "format_specifier_size": 1,
                    "len3": 2,
                    "len_pop_type": 1,
                    "length3": 3,
                    "length_string3": 1,
                    "length_type_name": 1,
                    "length_type_string": 1,
                    "param_length": 1,
                    "param_value_length": 1,
                    "size3": 2,
                    "str3_length": 1,
                    "struct_name_len": 3,
                    "struct_name_length": 1,
                    "struct_type_length": 1,
                    "struct_type_size": 1,
                    "type_info_len": 1,
                    "type_length": 4,
                    "type_name_length": 1,
                    "type_size": 1,
                    "type_specifier_size": 1,
                    "type_string_length": 1
                },
                "sprintf": {
                    "format_message": 1,
                    "format_string": 2,
                    "format_warning_message": 1
                },
                "stab_pop_type": {
                    "peek_type": 1,
                    "pop_struct_type": 1,
                    "pop_type": 1
                },
                "strcmp": {
                    "compare_strings": 1
                },
                "strlen": {
                    "calculate_string_length": 1,
                    "get_string_length": 1,
                    "string_length": 1
                },
                "uVar7": {
                    "error_message": 2,
                    "gettext_message": 1,
                    "gettext_msg": 1,
                    "message": 3,
                    "msg1": 1,
                    "translated_message": 1,
                    "translated_string": 1,
                    "translation": 1,
                    "translation_string": 1,
                    "warning_format": 1,
                    "warning_message": 14,
                    "warning_msg": 2,
                    "warning_string": 2
                },
                "uVar8": {
                    "msg2": 1,
                    "result": 9,
                    "return_val": 1,
                    "return_value": 20
                },
                "xmalloc": {
                    "allocate_memory": 3
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00104240",
                "FUN_00109b2f",
                "FUN_00119ed0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8\ngenerate_struct_warning_message_0010ba08(undefined8 *param_array,char *field_name,undefined8 param3,ulong field_size,int field_type)\n\n{\n  char flag;\n  int struct_size;\n  long long_value;\n  char *type;\n  size_t param1_length;\n  size_t field_name_length;\n  size_t type_length;\n  char *message;\n  undefined8 warning_message;\n  undefined8 return_value;\n  char *flag_string;\n  \n  flag = *(char *)(param_array[0xc] + 0x1c);\n  struct_size = *(int *)(param_array[0xc] + 0x18);\n  type = (char *)peek_type();\n  if (*(char **)(param_array[0xc] + 0x20) == (char *)0x0) {\n    return_value = 0;\n  }\n  else {\n    param1_length = calculate_string_length(*(char **)(param_array[0xc] + 0x20));\n    field_name_length = calculate_string_length(field_name);\n    type_length = calculate_string_length(type);\n    message = (char *)allocate_memory(param1_length + 0x32 + field_name_length + type_length);\n    if (field_type == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((field_type != 2) && (flag_string = \"\", field_type != 0)) {\n                    \n        terminate_program();\n      }\n    }\n    if ((field_size == 0) && (field_size = (ulong)(uint)(struct_size * 8), field_size == 0)) {\n      return_value = *(undefined8 *)*param_array;\n      warning_message = translate_message(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      handle_non_fatal_error(warning_message,return_value,field_name);\n    }\n    format_string(message,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(param_array[0xc] + 0x20),field_name,flag_string,type,\n            param3,field_size);\n    release_memory(*(void **)(param_array[0xc] + 0x20));\n    long_value = param_array[0xc];\n    *(char **)(long_value + 0x20) = message;\n    if (flag != '\\0') {\n      *(undefined *)(long_value + 0x1c) = 1;\n    }\n    return_value = CONCAT71((int7)((ulong)long_value >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "generate_struct_warning_message_0010ba08",
            "entrypoint": "0x0010ba08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ba08": "generate_struct_warning_message_0010ba08",
                "__s": "type",
                "__s_00": "message",
                "abort": "terminate_program",
                "cVar1": "flag",
                "dcgettext": "translate_message",
                "free": "release_memory",
                "iVar2": "struct_size",
                "lVar3": "long_value",
                "malloc": "allocate_memory",
                "non_fatal": "handle_non_fatal_error",
                "param_1": "param_array",
                "param_2": "field_name",
                "param_3": "param3",
                "param_4": "field_size",
                "param_5": "field_type",
                "pcVar9": "flag_string",
                "printf": "print_message",
                "sVar4": "param1_length",
                "sVar5": "field_name_length",
                "sVar6": "type_length",
                "sprintf": "format_string",
                "stab_pop_type": "peek_type",
                "strlen": "calculate_string_length",
                "uVar7": "warning_message",
                "uVar8": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bb52": {
            "additional_data": {
                "0x18": {
                    "offset2": 1
                },
                "0x20": {
                    "offset1": 1
                },
                "0x28": {
                    "offset3": 1
                },
                "0x30": {
                    "hash_size": 1
                },
                "0xffffffffffffffff": {
                    "max_value": 1
                },
                "FUN_0010bb52": {
                    "allocate_and_initialize_hash": 9,
                    "create_and_initialize_hash_table": 1,
                    "create_hash": 4,
                    "create_hash_entry": 1,
                    "create_hash_func": 1,
                    "create_hash_function": 10,
                    "create_hash_table": 1,
                    "create_new_hash": 2,
                    "initialize_hash": 1,
                    "initialize_hash_table": 1
                },
                "bfd_hash_allocate": {
                    "allocate_hash": 12,
                    "allocate_hash_table": 1
                },
                "bfd_hash_newfunc": {
                    "create_new_func": 6,
                    "create_new_func_entry": 1,
                    "create_new_function_hash": 1,
                    "create_newfunc": 1,
                    "initialize_hash": 2,
                    "initialize_hash_func": 1,
                    "new_hash_function": 1
                },
                "lVar1": {
                    "hash": 3,
                    "hash_entry": 1,
                    "hash_func_ptr": 2,
                    "hash_pointer": 3,
                    "hash_ptr": 4,
                    "hash_result": 1,
                    "hash_table": 1,
                    "hash_table_ptr": 1,
                    "hash_var": 1,
                    "new_function": 1,
                    "new_hash": 11,
                    "new_hash_function": 1,
                    "new_hash_table": 1
                },
                "param_1": {
                    "hash": 1,
                    "hash_length": 1,
                    "hash_size": 5,
                    "input": 4,
                    "input_param": 2,
                    "input_value": 5,
                    "param": 2,
                    "size": 11
                },
                "param_2": {
                    "alloc_size": 1,
                    "allocate_size": 1,
                    "hash_function": 1,
                    "hash_param1": 1,
                    "hash_size": 1,
                    "key": 2,
                    "param2": 12,
                    "param2_value": 1,
                    "param_2": 6,
                    "param_2_value": 1,
                    "param_a": 1,
                    "parameter1": 1,
                    "parameter_2": 1,
                    "value1": 1
                },
                "param_3": {
                    "data": 2,
                    "func_type": 1,
                    "hash_param2": 1,
                    "hash_table": 1,
                    "new_func": 1,
                    "param3": 13,
                    "param3_value": 1,
                    "param_3": 6,
                    "param_3_value": 1,
                    "param_b": 1,
                    "parameter2": 1,
                    "parameter_3": 1,
                    "value2": 1
                }
            },
            "called": [
                "FUN_00104450",
                "FUN_00104200"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nlong create_hash_function_0010bb52(long size,undefined8 param2,undefined8 param3)\n\n{\n  long new_hash;\n  \n  if (((size != 0) || (size = allocate_hash(param2,0x30), size != 0)) &&\n     (new_hash = create_new_func(size,param2,param3), new_hash != 0)) {\n    *(undefined8 *)(new_hash + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(new_hash + 0x18) = 0;\n    *(undefined4 *)(new_hash + 0x28) = 0;\n    return new_hash;\n  }\n  return 0;\n}\n\n",
            "current_name": "create_hash_function_0010bb52",
            "entrypoint": "0x0010bb52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bb52": "create_hash_function_0010bb52",
                "bfd_hash_allocate": "allocate_hash",
                "bfd_hash_newfunc": "create_new_func",
                "lVar1": "new_hash",
                "param_1": "size",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bba1": {
            "additional_data": {
                "FUN_00109cf4": {
                    "push_defined_type": 1,
                    "stab_push_defined_type": 1
                },
                "FUN_0010bba1": {
                    "find_and_push_defined_type": 2,
                    "find_and_push_type": 1,
                    "find_defined_type": 2,
                    "find_stab_push_type": 1,
                    "lookup_and_push_defined_type": 13,
                    "lookup_and_push_type": 6,
                    "lookup_defined_type": 2,
                    "lookup_stab_type": 1,
                    "reverse_and_push_stab_defined_type": 1,
                    "reverse_lookup_and_push": 1,
                    "reverse_lookup_and_push_type": 1
                },
                "lVar1": {
                    "entry": 3,
                    "entry_addr": 1,
                    "entry_address": 3,
                    "hash_entry": 1,
                    "hash_lookup_result": 1,
                    "hash_result": 11,
                    "hash_value": 1,
                    "lookup_result": 8,
                    "result": 2
                },
                "param_1": {
                    "base_address": 1,
                    "binary": 1,
                    "binary_address": 1,
                    "binary_handle": 2,
                    "binary_hash": 1,
                    "binary_offset": 1,
                    "hash_table": 16,
                    "input_hash": 1,
                    "input_param": 1,
                    "param1": 1,
                    "symbol_table": 5
                },
                "param_2": {
                    "hash_value": 2,
                    "key": 15,
                    "lookup_key": 1,
                    "lookup_param": 1,
                    "param2": 1,
                    "search_value": 1,
                    "type": 3,
                    "type_descriptor": 1,
                    "type_identifier": 2,
                    "type_info": 1,
                    "type_name": 2,
                    "value": 1
                },
                "param_3": {
                    "defined_type": 1,
                    "unknown_param": 1
                },
                "stab_push_defined_type": {
                    "push_defined_type": 1
                },
                "uVar2": {
                    "push_result": 13,
                    "result": 14,
                    "return_value": 2,
                    "stab_push_result": 2
                }
            },
            "called": [
                "FUN_00104560",
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 lookup_and_push_defined_type_0010bba1(long hash_table,undefined8 key)\n\n{\n  long hash_result;\n  undefined8 result;\n  \n  hash_result = bfd_hash_lookup(hash_table + 0x1b8,key,0,0);\n  if ((hash_result != 0) && (0 < *(long *)(hash_result + 0x20))) {\n    result = push_defined_type(hash_table,*(long *)(hash_result + 0x20),*(undefined4 *)(hash_result + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "lookup_and_push_defined_type_0010bba1",
            "entrypoint": "0x0010bba1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bba1": "lookup_and_push_defined_type_0010bba1",
                "lVar1": "hash_result",
                "param_1": "hash_table",
                "param_2": "key",
                "stab_push_defined_type": "push_defined_type",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bbd3": {
            "additional_data": {
                "FUN_0010bbd3": {
                    "initialize_debug_info": 26,
                    "initialize_debug_information": 1,
                    "initialize_debugger": 1,
                    "initialize_file_info": 1,
                    "initialize_info": 1,
                    "initialize_units": 1
                },
                "auVar8": {
                    "result": 14,
                    "return_value": 14
                },
                "bVar7": {
                    "b_var7": 1,
                    "bit_flag": 1,
                    "byte_flag": 1,
                    "byte_value": 4,
                    "byte_var": 6,
                    "counter": 1,
                    "flag": 11,
                    "is_zero": 1,
                    "temp_byte": 2,
                    "zero": 2
                },
                "lVar4": {
                    "count": 3,
                    "counter": 4,
                    "i": 2,
                    "index": 1,
                    "length": 1,
                    "loop_count": 3,
                    "loop_counter": 14,
                    "loop_index": 1,
                    "var4": 1
                },
                "param_1": {
                    "debug_info": 19,
                    "debugger_info": 1,
                    "file_info": 1,
                    "info": 9,
                    "info_array": 1
                },
                "param_2": {
                    "filename": 31
                },
                "param_3": {
                    "arg3": 4,
                    "param3": 19,
                    "param_3": 5,
                    "unused1": 1,
                    "unused_param1": 1,
                    "var_1": 1
                },
                "param_4": {
                    "arg4": 4,
                    "param4": 19,
                    "param_4": 5,
                    "unused2": 1,
                    "unused_param2": 1,
                    "var_2": 1
                },
                "pcVar6": {
                    "current_filename": 1,
                    "default_filename": 4,
                    "empty_string": 2,
                    "file": 3,
                    "file_name_ptr": 1,
                    "file_path": 1,
                    "filename_copy": 1,
                    "filename_pointer": 1,
                    "filename_ptr": 6,
                    "filename_temp": 1,
                    "param2_copy": 1,
                    "param2_ptr": 1,
                    "str_ptr": 1,
                    "temp": 1,
                    "temp_filename": 4,
                    "var_ptr": 1
                },
                "puVar1": {
                    "debug_info_ptr": 2,
                    "info_units": 1,
                    "prev_debug_info": 3,
                    "prev_info": 2,
                    "previous_debug_info": 4,
                    "previous_info": 1,
                    "ptr1": 7,
                    "ptr_debug_info": 1,
                    "ptr_to_debug_info": 1,
                    "ptr_to_debugger_info": 1,
                    "ptr_to_info": 1,
                    "units": 2,
                    "units_pointer": 1,
                    "units_ptr": 3
                },
                "puVar2": {
                    "bits_array1": 1,
                    "current_debug_info": 1,
                    "debug_info_ptr_1": 1,
                    "first_pointer": 1,
                    "info1": 1,
                    "info_units": 3,
                    "new_debug_struct1": 1,
                    "ptr1": 2,
                    "ptr2": 5,
                    "ptr_info_units": 1,
                    "ptr_to_memory_block1": 1,
                    "ptr_to_unit_array": 1,
                    "ptr_to_units": 1,
                    "unit_array1": 1,
                    "unit_info": 1,
                    "unit_info1": 1,
                    "unit_ptr": 2,
                    "units": 2,
                    "units1": 1,
                    "units_ptr": 1,
                    "units_ptr1": 1
                },
                "puVar3": {
                    "bits_array2": 1,
                    "debug_info_ptr_2": 1,
                    "info2": 1,
                    "info_ptr": 1,
                    "new_debug_info": 2,
                    "new_debug_struct2": 1,
                    "new_info": 1,
                    "new_info_units": 2,
                    "new_unit_ptr": 1,
                    "new_units": 2,
                    "new_units_ptr": 1,
                    "ptr2": 2,
                    "ptr3": 5,
                    "ptr_info_units_new": 1,
                    "ptr_to_memory_block2": 1,
                    "ptr_to_new_units": 1,
                    "ptr_to_other_array": 1,
                    "second_pointer": 1,
                    "unit_array2": 1,
                    "unit_info2": 1,
                    "units2": 1,
                    "units_ptr2": 1
                },
                "puVar5": {
                    "current_bits_array": 1,
                    "current_pointer": 1,
                    "current_unit": 1,
                    "current_unit_ptr": 1,
                    "current_var": 1,
                    "info": 1,
                    "loop_ptr": 2,
                    "loop_var": 1,
                    "ptr": 3,
                    "ptr2": 1,
                    "ptr3": 2,
                    "ptr4": 2,
                    "ptr5": 3,
                    "ptr_info_units_new_temp": 1,
                    "ptr_to_current_element": 1,
                    "ptr_to_data": 1,
                    "ptr_to_looped_array": 1,
                    "pu_var5": 2,
                    "temp": 1,
                    "temp_info": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1
                }
            },
            "called": [
                "FUN_00104300",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\nundefined  [16] initialize_debug_info_0010bbd3(long *debug_info,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long loop_counter;\n  undefined4 *ptr5;\n  char *filename_ptr;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  filename_ptr = \"\";\n  if (filename != (char *)0x0) {\n    filename_ptr = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr5 = ptr2;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *ptr5 = 0;\n    ptr5 = ptr5 + (ulong)flag * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = filename_ptr;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  debug_info[2] = (long)ptr2;\n  ptr5 = ptr3;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *ptr5 = 0;\n    ptr5 = ptr5 + (ulong)flag * -2 + 1;\n  }\n  ptr1 = (undefined8 *)debug_info[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (undefined8 *)0x0) {\n    if (*debug_info != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debug_info = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  debug_info[1] = (long)ptr3;\n  debug_info[5] = 0;\n  *(undefined (*) [16])(debug_info + 3) = ZEXT816(0);\n  return_value._8_8_ = param4;\n  return_value._0_8_ = 1;\n  return return_value;\n}\n\n",
            "current_name": "initialize_debug_info_0010bbd3",
            "entrypoint": "0x0010bbd3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "auVar8": "return_value",
                "bVar7": "flag",
                "lVar4": "loop_counter",
                "param_1": "debug_info",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar6": "filename_ptr",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "puVar5": "ptr5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bc80": {
            "additional_data": {
                "FUN_0010bc80": {
                    "debug_record_function": 21,
                    "process_debug_record_function": 1,
                    "record_debug_function": 8
                },
                "_stderr": {
                    "standard_error": 1
                },
                "auVar8": {
                    "debug_record_au_var8": 2,
                    "result": 12,
                    "result_wrapper": 1,
                    "ret_val": 1,
                    "return_val": 1,
                    "return_value": 14
                },
                "bVar7": {
                    "b_flag": 1,
                    "b_val": 1,
                    "byte_flag": 1,
                    "counter": 2,
                    "debug_flag": 1,
                    "debug_record_b_var7": 2,
                    "flag": 14,
                    "flag2": 1,
                    "is_debug_set_filename_called": 1,
                    "iter_count": 1,
                    "loop_cond": 1,
                    "loop_iter": 1,
                    "temp_byte": 3,
                    "zero_byte": 1
                },
                "lVar4": {
                    "count": 1,
                    "counter": 1,
                    "debug_add_result": 1,
                    "debug_record_l_var4": 2,
                    "i": 5,
                    "index": 2,
                    "loop_counter": 2,
                    "namespace_offset": 1,
                    "namespace_ptr": 1,
                    "namespace_result": 1,
                    "result": 7,
                    "result_id": 1,
                    "return_value": 1,
                    "temp": 4,
                    "temp_var": 1
                },
                "param_1": {
                    "arg1": 1,
                    "config_ptr": 1,
                    "context_ptr": 1,
                    "debug_context": 1,
                    "debug_data": 1,
                    "debug_info": 5,
                    "debug_info_struct_ptr": 1,
                    "debug_record_param_1": 2,
                    "debug_state": 1,
                    "file_handle": 1,
                    "file_info": 1,
                    "file_manager": 1,
                    "filename": 1,
                    "func_info": 1,
                    "function_context": 1,
                    "function_data": 1,
                    "function_info": 1,
                    "param": 1,
                    "param1": 2,
                    "param_1": 1,
                    "param_pointer": 1,
                    "param_ptr": 1,
                    "param_struct": 1,
                    "ptr": 1,
                    "record_ptr": 1
                },
                "param_2": {
                    "debug_filename": 1,
                    "debug_msg": 1,
                    "debug_record_param_2": 2,
                    "file_name": 2,
                    "filename": 25
                },
                "param_3": {
                    "address": 2,
                    "arg3": 1,
                    "data_size": 1,
                    "debug_id": 1,
                    "debug_line": 1,
                    "debug_record": 1,
                    "debug_record_param_3": 2,
                    "length": 1,
                    "line": 2,
                    "line_number": 8,
                    "offset": 1,
                    "record_length": 1,
                    "record_size": 4,
                    "record_value": 1,
                    "size": 4
                },
                "param_4": {
                    "arg4": 1,
                    "char_code": 1,
                    "character": 2,
                    "debug_flag": 4,
                    "debug_flags": 1,
                    "debug_level": 1,
                    "debug_record_param_4": 2,
                    "flag": 8,
                    "flags": 5,
                    "record_type": 6
                },
                "param_5": {
                    "arg1": 1,
                    "arg5": 1,
                    "current_time": 1,
                    "debug_add_func": 1,
                    "debug_format": 1,
                    "debug_record_param_5": 2,
                    "debug_value1": 1,
                    "param5": 6,
                    "param_5": 13,
                    "record_ptr": 1,
                    "unknown1": 1,
                    "value": 1,
                    "value_1": 1
                },
                "param_6": {
                    "arg2": 1,
                    "arg6": 1,
                    "debug_address": 1,
                    "debug_record_param_6": 2,
                    "debug_value2": 1,
                    "param6": 6,
                    "param_6": 14,
                    "result": 3,
                    "unknown2": 1,
                    "value_2": 1
                },
                "pcVar6": {
                    "debug_error_message": 1,
                    "debug_filename": 2,
                    "debug_record_pc_var6": 2,
                    "default_file_name": 1,
                    "default_filename": 7,
                    "empty_string": 1,
                    "file": 5,
                    "filename_copy": 2,
                    "filename_or_default": 1,
                    "filename_ptr": 5,
                    "ptr_filename": 1,
                    "temp_file_name": 1,
                    "temp_filename": 1,
                    "temp_str": 1
                },
                "plVar2": {
                    "data_ptr": 1,
                    "debug_data": 1,
                    "debug_entry": 2,
                    "debug_info": 6,
                    "debug_info_ptr": 1,
                    "debug_ptr": 1,
                    "debug_record": 7,
                    "debug_record_pl_var2": 2,
                    "debug_record_ptr": 1,
                    "record": 5,
                    "record_info": 2,
                    "record_ptr": 2
                },
                "puVar3": {
                    "allocation1": 1,
                    "buffer": 2,
                    "data": 1,
                    "data_ptr": 2,
                    "debug_array": 2,
                    "debug_buffer_ptr": 1,
                    "debug_data": 7,
                    "debug_info": 2,
                    "debug_record_pu_var3": 2,
                    "debug_set": 3,
                    "debug_struct": 1,
                    "metadata": 1,
                    "metadata_ptr": 1,
                    "namespace": 1,
                    "namespace_info": 1,
                    "namespace_ptr": 1,
                    "record_block": 1,
                    "zeroed_memory": 1
                },
                "puVar5": {
                    "allocation2": 1,
                    "buffer_ptr": 2,
                    "counter_ptr": 1,
                    "current_zeroed_memory": 1,
                    "data_ptr_iter": 1,
                    "debug_ptr": 4,
                    "debug_record_pu_var5": 2,
                    "inner_loop": 1,
                    "loop_var": 1,
                    "ptr": 11,
                    "ptr1": 1,
                    "ptr2": 1,
                    "temp_ptr": 4
                },
                "uVar1": {
                    "debug_error_msg": 1,
                    "debug_record_u_var1": 1,
                    "error_message": 16,
                    "error_msg": 4,
                    "message": 3,
                    "result": 5
                }
            },
            "called": [
                "FUN_00112925",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16]\nprocess_debug_record_function_0010bc80(long debug_info,char *filename,long line_number,uint flag,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 error_message;\n  long *debug_record;\n  undefined4 *debug_data;\n  long result;\n  undefined4 *ptr;\n  char *default_filename;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  if (line_number != 0) {\n    if (*(long *)(debug_info + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(standard_error,\"%s\\n\",error_message);\n    }\n    else {\n      debug_record = (long *)xmalloc(0x18);\n      *debug_record = line_number;\n      *(undefined (*) [16])(debug_record + 1) = ZEXT816(0);\n      debug_data = (undefined4 *)xmalloc(0x30);\n      *(long **)(debug_info + 0x18) = debug_record;\n      debug_record[2] = (long)debug_data;\n      ptr = debug_data;\n      for (result = 0xc; result != 0; result = result + -1) {\n        *ptr = 0;\n        ptr = ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(debug_info + 0x20) = debug_data;\n      result = *(long *)(debug_info + 0x10);\n      *(undefined8 *)(debug_data + 6) = param_5;\n      *(undefined8 *)(debug_data + 8) = 0xffffffffffffffff;\n      result = debug_add_to_namespace_constprop_0(result + 0x10,default_filename,3,(flag & 0xff) + 1);\n      if (result != 0) {\n        *(long **)(result + 0x20) = debug_record;\n        error_message = CONCAT71((int7)((ulong)result >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "process_debug_record_function_0010bc80",
            "entrypoint": "0x0010bc80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bc80": "process_debug_record_function_0010bc80",
                "_stderr": "standard_error",
                "auVar8": "return_value",
                "bVar7": "flag",
                "lVar4": "result",
                "param_1": "debug_info",
                "param_2": "filename",
                "param_3": "line_number",
                "param_4": "flag",
                "pcVar6": "default_filename",
                "plVar2": "debug_record",
                "puVar3": "debug_data",
                "puVar5": "ptr",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bd62": {
            "additional_data": {
                "FUN_0010bd62": {
                    "record_debug_parameter": 5,
                    "record_parameter": 16,
                    "record_parameter_data": 1,
                    "record_parameter_debug": 9
                },
                "_stderr": {
                    "error_stream": 1
                },
                "bVar8": {
                    "byte_flag": 1,
                    "byte_value": 2,
                    "counter": 5,
                    "flag": 13,
                    "is_zero": 2,
                    "loop_condition": 1,
                    "loop_count": 1,
                    "loop_counter": 2,
                    "loop_flag": 2,
                    "zero_flag": 1
                },
                "lVar5": {
                    "count": 2,
                    "counter": 2,
                    "current_address": 1,
                    "entry_offset": 1,
                    "i": 1,
                    "length": 1,
                    "list_length": 1,
                    "loop_count": 1,
                    "loop_counter": 9,
                    "size": 1,
                    "temp_long": 3,
                    "temp_val": 1,
                    "temp_value": 5,
                    "temp_var": 2
                },
                "param_1": {
                    "func_info": 1,
                    "function": 2,
                    "function_address": 7,
                    "function_context": 1,
                    "function_data": 1,
                    "function_info": 7,
                    "function_offset": 1,
                    "function_ptr": 10,
                    "record": 1
                },
                "param_2": {
                    "arg1": 1,
                    "input1": 1,
                    "param1": 2,
                    "param2": 4,
                    "param_2_size": 1,
                    "param_2_value": 1,
                    "param_address": 1,
                    "param_count": 1,
                    "param_offset": 1,
                    "param_ptr": 5,
                    "param_size": 4,
                    "param_value": 1,
                    "param_value1": 1,
                    "param_value_1": 2,
                    "parameter": 1,
                    "parameter1": 1,
                    "record_id": 2,
                    "record_offset": 1
                },
                "param_3": {
                    "arg2": 1,
                    "arg_count": 1,
                    "current_function": 1,
                    "data_ptr": 1,
                    "input2": 1,
                    "param2": 2,
                    "param3": 4,
                    "param_3_size": 1,
                    "param_3_value": 1,
                    "param_count": 1,
                    "param_size": 6,
                    "param_val": 1,
                    "param_value": 2,
                    "param_value2": 1,
                    "param_value_2": 2,
                    "parameter2": 1,
                    "parameter_id": 1,
                    "parameter_offset": 1,
                    "record_ptr": 1,
                    "record_size": 1
                },
                "param_4": {
                    "debug_flag": 1,
                    "debug_info": 1,
                    "debug_level": 2,
                    "input3": 1,
                    "param3": 2,
                    "param4": 5,
                    "param_4_value": 2,
                    "param_type": 9,
                    "param_val": 1,
                    "param_value": 1,
                    "param_value3": 1,
                    "param_value_3": 2,
                    "parameter3": 1,
                    "parameter_info": 1,
                    "record_type": 1
                },
                "param_5": {
                    "debug_flag": 1,
                    "debug_info": 1,
                    "debug_param": 1,
                    "debug_ptr": 2,
                    "debug_record": 2,
                    "function_data": 1,
                    "input4": 1,
                    "param4": 2,
                    "param5": 5,
                    "param_5": 2,
                    "param_5_value": 2,
                    "param_data": 3,
                    "param_list_ptr": 1,
                    "param_value": 1,
                    "param_value4": 1,
                    "param_value_4": 2,
                    "parameter4": 1,
                    "record_data": 1,
                    "record_ptr": 1
                },
                "puVar1": {
                    "curr_ptr": 1,
                    "current_entry": 3,
                    "current_link": 1,
                    "current_node": 4,
                    "current_pointer": 2,
                    "current_ptr": 12,
                    "last_node": 2,
                    "next_node": 1,
                    "prev_node": 2,
                    "ptr": 1,
                    "ptr1": 1,
                    "temp_ptr": 1
                },
                "puVar3": {
                    "alloc_pointer": 1,
                    "allocated_ptr": 2,
                    "debug_parameter": 1,
                    "debug_record_ptr": 1,
                    "debug_struct_ptr": 1,
                    "malloc_ptr": 1,
                    "new_allocated_memory": 1,
                    "new_allocation": 1,
                    "new_block_ptr": 1,
                    "new_data": 1,
                    "new_entry": 2,
                    "new_node": 6,
                    "new_param": 1,
                    "new_record": 7,
                    "new_struct": 1,
                    "ptr2": 1,
                    "record": 1,
                    "record_ptr": 1
                },
                "puVar4": {
                    "current_node": 4,
                    "current_ptr": 1,
                    "iterator_ptr": 1,
                    "loop_ptr": 1,
                    "next_entry": 2,
                    "next_node": 1,
                    "next_ptr": 1,
                    "ptr": 1,
                    "ptr3": 1,
                    "temp_link": 1,
                    "temp_node": 3,
                    "temp_pointer": 2,
                    "temp_ptr": 10,
                    "temp_ptr2": 1
                },
                "puVar6": {
                    "current_node": 1,
                    "end_ptr": 1,
                    "last_entry": 3,
                    "last_node": 3,
                    "last_pointer": 2,
                    "last_ptr": 12,
                    "prev_node": 1,
                    "prev_ptr": 1,
                    "previous_link": 1,
                    "previous_node": 4,
                    "previous_ptr": 1,
                    "ptr4": 1
                },
                "puVar7": {
                    "current_ptr": 2,
                    "debug_parameter_ptr": 1,
                    "initialized_ptr": 1,
                    "iteration_node": 1,
                    "iterator": 1,
                    "iterator_ptr": 1,
                    "loop_pointer": 1,
                    "loop_ptr": 1,
                    "new_entry_pointer": 1,
                    "new_param_iterator": 1,
                    "new_pointer": 1,
                    "ptr": 1,
                    "ptr5": 1,
                    "ptr_1": 1,
                    "start_ptr": 1,
                    "temp_debug_record_ptr": 1,
                    "temp_entry": 1,
                    "temp_node": 3,
                    "temp_ptr": 3,
                    "temp_ptr2": 2,
                    "temp_record": 4,
                    "temp_struct": 1
                },
                "uVar2": {
                    "error_message": 23,
                    "error_msg": 6,
                    "message": 1,
                    "result": 1
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8\nrecord_debug_parameter_0010bd62(long function_ptr,long param_ptr,long param_size,undefined4 param_type,undefined8 param5)\n\n{\n  undefined8 *current_ptr;\n  undefined8 error_message;\n  undefined4 *new_record;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  undefined8 *last_ptr;\n  undefined4 *temp_record;\n  byte flag;\n  \n  flag = 0;\n  if (param_ptr == 0) {\n    return 0;\n  }\n  if (param_size != 0) {\n    if ((*(long *)(function_ptr + 8) != 0) && (*(long *)(function_ptr + 0x18) != 0)) {\n      new_record = (undefined4 *)xmalloc(0x28);\n      temp_record = new_record;\n      for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *temp_record = 0;\n        temp_record = temp_record + (ulong)flag * -2 + 1;\n      }\n      loop_counter = *(long *)(function_ptr + 0x18);\n      *(long *)(new_record + 2) = param_ptr;\n      *(long *)(new_record + 4) = param_size;\n      new_record[6] = param_type;\n      current_ptr = *(undefined8 **)(loop_counter + 8);\n      *(undefined8 *)(new_record + 8) = param5;\n      last_ptr = (undefined8 *)(loop_counter + 8);\n      while (temp_ptr = current_ptr, temp_ptr != (undefined8 *)0x0) {\n        last_ptr = temp_ptr;\n        current_ptr = (undefined8 *)*temp_ptr;\n      }\n      *last_ptr = new_record;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(error_stream,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "current_name": "record_debug_parameter_0010bd62",
            "entrypoint": "0x0010bd62",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bd62": "record_debug_parameter_0010bd62",
                "_stderr": "error_stream",
                "bVar8": "flag",
                "lVar5": "loop_counter",
                "param_1": "function_ptr",
                "param_2": "param_ptr",
                "param_3": "param_size",
                "param_4": "param_type",
                "param_5": "param5",
                "puVar1": "current_ptr",
                "puVar3": "new_record",
                "puVar4": "temp_ptr",
                "puVar6": "last_ptr",
                "puVar7": "temp_record",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010be1a": {
            "additional_data": {
                "FUN_0010be1a": {
                    "check_debug_function": 1,
                    "check_function_validity": 1,
                    "debug_end_function": 12,
                    "end_current_function": 1,
                    "end_debug_function": 2,
                    "end_debugging_function": 6,
                    "end_function": 2,
                    "end_function_debug": 1,
                    "end_function_debugging": 3,
                    "end_function_with_debug": 1,
                    "validate_and_print_debug_info": 1
                },
                "auVar4": {
                    "result": 5,
                    "result_struct": 1,
                    "return_data": 4,
                    "return_value": 4,
                    "return_value_struct": 1
                },
                "lVar1": {
                    "block_data": 8,
                    "block_handle": 1,
                    "block_info": 3,
                    "block_ptr": 3,
                    "current_block": 11,
                    "current_block_pointer": 1,
                    "current_block_ptr": 2,
                    "current_function": 1,
                    "current_function_data": 1
                },
                "param_1": {
                    "function_address": 1,
                    "function_context": 2,
                    "function_data": 12,
                    "function_handle": 1,
                    "function_info": 9,
                    "function_pointer": 2,
                    "function_ptr": 4
                },
                "param_2": {
                    "current_function": 1,
                    "debug_info": 2,
                    "debug_message": 1,
                    "debug_string": 1,
                    "error_code": 1,
                    "file_path": 1,
                    "new_address": 2,
                    "new_block": 3,
                    "new_block_address": 1,
                    "new_block_ptr": 1,
                    "new_context": 1,
                    "new_current_block": 1,
                    "new_function_address": 4,
                    "new_function_context": 1,
                    "new_function_data": 3,
                    "new_function_pointer": 1,
                    "new_param_1": 1,
                    "new_ptr_param": 1,
                    "new_value": 1,
                    "result": 1,
                    "return_address": 1,
                    "return_value": 1
                },
                "param_3": {
                    "new_param_2": 1,
                    "param_3": 1,
                    "undefined": 1,
                    "unknown_param": 1,
                    "unused": 1,
                    "unused_param": 15,
                    "unused_param1": 1,
                    "unused_param_1": 1,
                    "unused_param_3": 1,
                    "unused_parameter": 7
                },
                "param_4": {
                    "additional_value": 1,
                    "debug_end_result": 1,
                    "debug_string": 1,
                    "error_message": 2,
                    "error_message_ptr": 1,
                    "error_string": 1,
                    "function_result": 1,
                    "new_param_3": 1,
                    "output": 2,
                    "output_parameter": 1,
                    "result": 3,
                    "return_address": 1,
                    "return_value": 10,
                    "status_code": 1,
                    "temp_var": 1,
                    "unused_param2": 1,
                    "unused_param_2": 1,
                    "user_data": 1
                },
                "pcVar3": {
                    "debug_message": 1,
                    "error_message": 17,
                    "error_message_text": 1,
                    "error_msg": 2,
                    "error_string": 9,
                    "error_text": 1
                },
                "uVar2": {
                    "error_message": 10,
                    "error_msg": 1,
                    "error_string": 1,
                    "localized_error": 1,
                    "localized_error_message": 1,
                    "localized_message": 3,
                    "localized_string": 1,
                    "result": 1,
                    "translated_error_message": 2,
                    "translated_msg": 1,
                    "translated_string": 3,
                    "translation": 6
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] end_function_with_debug_0010be1a(long function_data,undefined8 new_function_address,undefined8 unused_param,undefined8 return_value)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_message;\n  undefined result [16];\n  \n  if (((*(long *)(function_data + 8) == 0) || (current_block = *(long *)(function_data + 0x20), current_block == 0)) ||\n     (*(long *)(function_data + 0x18) == 0)) {\n    error_message = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(current_block + 8) == 0) {\n      *(undefined8 *)(current_block + 0x20) = new_function_address;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(undefined (*) [16])(function_data + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_message = \"debug_end_function: some blocks were not closed\";\n  }\n  error_message = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010be86:\n  result._8_8_ = return_value;\n  result._0_8_ = error_message;\n  return result;\n}\n\n",
            "current_name": "end_function_with_debug_0010be1a",
            "entrypoint": "0x0010be1a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010be1a": "end_function_with_debug_0010be1a",
                "auVar4": "result",
                "lVar1": "current_block",
                "param_1": "function_data",
                "param_2": "new_function_address",
                "param_3": "unused_param",
                "param_4": "return_value",
                "pcVar3": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010be88": {
            "additional_data": {
                "FUN_0010be88": {
                    "debug_start_block": 12,
                    "initialize_debug_block": 1,
                    "start_block": 1,
                    "start_block_debug": 1,
                    "start_block_debugging": 7,
                    "start_debug_block": 9
                },
                "auVar9": {
                    "output": 1,
                    "result": 3,
                    "result_code": 1,
                    "return_array": 1,
                    "return_data": 1,
                    "return_val": 2,
                    "return_value": 15,
                    "return_value_array": 1,
                    "return_value_container": 1,
                    "return_variable": 1
                },
                "bVar8": {
                    "bit_flag": 1,
                    "byte_flag": 1,
                    "byte_value": 2,
                    "byte_var": 1,
                    "counter": 9,
                    "flag": 8,
                    "is_zero": 2,
                    "loop_condition": 1,
                    "loop_counter": 4,
                    "temp_byte": 1
                },
                "lVar5": {
                    "block": 1,
                    "block_addr": 1,
                    "block_address": 8,
                    "block_pointer_value": 1,
                    "block_ptr": 4,
                    "block_size": 1,
                    "block_value": 3,
                    "current_block": 1,
                    "temp_long": 2,
                    "temp_value": 2,
                    "var_name": 1
                },
                "param_1": {
                    "block": 3,
                    "block_data": 6,
                    "block_info": 4,
                    "block_info_ptr": 2,
                    "block_pointer": 8,
                    "block_ptr": 7,
                    "param_ptr": 1
                },
                "param_2": {
                    "block_id": 1,
                    "block_start": 1,
                    "current_block": 5,
                    "current_block_ptr": 2,
                    "current_pointer": 1,
                    "current_value": 1,
                    "debug_data": 1,
                    "debug_info": 1,
                    "debugger": 1,
                    "param": 1,
                    "param1": 1,
                    "param2": 8,
                    "param2_value": 1,
                    "param_2": 1,
                    "start": 1,
                    "start_addr": 1,
                    "start_address": 3
                },
                "param_3": {
                    "block_length": 1,
                    "end_addr": 1,
                    "param2": 1,
                    "param3": 8,
                    "param3_value": 1,
                    "param_3": 4,
                    "undefined": 1,
                    "unknown": 1,
                    "unknown_1": 1,
                    "unknown_param": 2,
                    "unknown_value": 1,
                    "unspecified": 1,
                    "unused": 4,
                    "unused1": 1,
                    "unused_1": 1,
                    "unused_param": 2
                },
                "param_4": {
                    "debug_flag": 1,
                    "error_code": 1,
                    "param3": 1,
                    "param4": 5,
                    "param4_value": 1,
                    "param_4": 4,
                    "result": 4,
                    "return_flag": 1,
                    "return_status": 1,
                    "return_value": 6,
                    "success_flag": 1,
                    "unknown_2": 1,
                    "unknown_param2": 1,
                    "unused": 1,
                    "unused2": 1,
                    "unused_2": 1
                },
                "puVar1": {
                    "block_ptr": 1,
                    "child_block_ptr": 1,
                    "current": 4,
                    "current_block": 2,
                    "current_entry": 1,
                    "current_pointer": 1,
                    "current_ptr": 5,
                    "end_ptr": 1,
                    "last_block": 2,
                    "last_block_pointer": 1,
                    "last_block_ptr": 2,
                    "next_block": 3,
                    "next_block_ptr": 2,
                    "next_ptr": 1,
                    "pointer": 1,
                    "pointer1": 1,
                    "prev_block": 1,
                    "prev_block_pointer": 1
                },
                "puVar3": {
                    "allocated_memory": 6,
                    "block_data": 1,
                    "block_ptr": 1,
                    "memory_block": 1,
                    "new_block": 15,
                    "new_block_info": 1,
                    "new_block_ptr": 6
                },
                "puVar4": {
                    "current_block": 5,
                    "current_block_ptr": 1,
                    "current_memory_ptr": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "last_block_ptr": 1,
                    "next_block": 3,
                    "next_entry": 1,
                    "next_pointer": 1,
                    "next_ptr": 2,
                    "prev_block_ptr": 1,
                    "ptr": 1,
                    "temp_block": 1,
                    "temp_block_pointer": 2,
                    "temp_block_ptr": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 5,
                    "temp_var": 1,
                    "tmp_ptr": 1
                },
                "puVar6": {
                    "current_block_pointer": 1,
                    "current_ptr": 1,
                    "end_block_ptr": 1,
                    "end_pointer": 1,
                    "iter_block": 1,
                    "last_block": 6,
                    "last_block_pointer": 1,
                    "last_block_ptr": 1,
                    "last_memory_ptr": 1,
                    "last_pointer": 2,
                    "last_ptr": 6,
                    "prev_block_ptr": 2,
                    "prev_ptr": 1,
                    "previous_block": 1,
                    "previous_block_ptr": 1,
                    "previous_entry": 1,
                    "temp_block_pointer2": 1,
                    "temp_block_ptr_2": 1,
                    "temp_ptr": 1
                },
                "puVar7": {
                    "block_iterator": 1,
                    "current_block": 2,
                    "current_block_data": 1,
                    "current_memory": 2,
                    "current_memory_ptr": 1,
                    "loop_iterator": 1,
                    "loop_ptr": 2,
                    "loop_var": 1,
                    "memory_block_iterator": 1,
                    "new_block_pointer": 1,
                    "new_block_ptr": 1,
                    "ptr": 2,
                    "pu_var3": 1,
                    "temp_block": 4,
                    "temp_block_pointer": 1,
                    "temp_block_ptr_3": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 3,
                    "temp_ptr2": 1,
                    "temp_ptr_2": 2
                },
                "uVar2": {
                    "result": 13,
                    "return_val": 1,
                    "return_value": 3,
                    "status": 2,
                    "success": 6,
                    "success_flag": 5,
                    "translation": 1
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] start_block_debug_0010be88(long block_pointer,undefined8 param2,undefined8 param3,undefined8 return_value)\n\n{\n  undefined8 *current_ptr;\n  undefined8 result;\n  undefined4 *new_block;\n  undefined8 *current_block;\n  long block_address;\n  undefined8 *last_ptr;\n  undefined4 *temp_block;\n  byte counter;\n  undefined return_value [16];\n  \n  counter = 0;\n  if ((*(long *)(block_pointer + 8) == 0) || (*(long *)(block_pointer + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    new_block = (undefined4 *)xmalloc(0x30);\n    temp_block = new_block;\n    for (block_address = 0xc; block_address != 0; block_address = block_address + -1) {\n      *temp_block = 0;\n      temp_block = temp_block + (ulong)counter * -2 + 1;\n    }\n    block_address = *(long *)(block_pointer + 0x20);\n    *(undefined8 *)(new_block + 6) = param2;\n    *(undefined8 *)(new_block + 8) = 0xffffffffffffffff;\n    *(long *)(new_block + 2) = block_address;\n    current_ptr = *(undefined8 **)(block_address + 0x10);\n    last_ptr = (undefined8 *)(block_address + 0x10);\n    while (current_block = current_ptr, current_block != (undefined8 *)0x0) {\n      last_ptr = current_block;\n      current_ptr = (undefined8 *)*current_block;\n    }\n    *last_ptr = new_block;\n    result = 1;\n    *(undefined4 **)(block_pointer + 0x20) = new_block;\n  }\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "start_block_debug_0010be88",
            "entrypoint": "0x0010be88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010be88": "start_block_debug_0010be88",
                "auVar9": "return_value",
                "bVar8": "counter",
                "lVar5": "block_address",
                "param_1": "block_pointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "return_value",
                "puVar1": "current_ptr",
                "puVar3": "new_block",
                "puVar4": "current_block",
                "puVar6": "last_ptr",
                "puVar7": "temp_block",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bf20": {
            "additional_data": {
                "FUN_0010bf20": {
                    "close_current_debug_block": 1,
                    "close_debug_block": 2,
                    "debug_end_block": 9,
                    "end_block": 4,
                    "end_block_debugging": 4,
                    "end_current_block": 3,
                    "end_current_debug_block": 1,
                    "end_debug_block": 7
                },
                "auVar4": {
                    "result": 3,
                    "return_array": 1,
                    "return_val": 1,
                    "return_value": 6,
                    "return_variable": 1
                },
                "lVar1": {
                    "block_pointer": 1,
                    "block_ptr": 2,
                    "current_block": 19,
                    "current_block_info": 1,
                    "current_block_pointer": 3,
                    "current_block_ptr": 5
                },
                "param_1": {
                    "arg1": 1,
                    "block": 1,
                    "block_address": 1,
                    "block_info": 1,
                    "block_manager": 2,
                    "block_pointer": 2,
                    "block_ptr": 15,
                    "current_block": 1,
                    "current_block_ptr": 2,
                    "debug_block": 1,
                    "debug_block_pointer": 1,
                    "debug_block_ptr": 1,
                    "param1": 2
                },
                "param_2": {
                    "arg2": 1,
                    "block_data": 1,
                    "block_identifier": 1,
                    "debug_message": 1,
                    "end_address": 1,
                    "end_block_pointer": 1,
                    "message": 1,
                    "new_address": 1,
                    "new_block_pointer": 2,
                    "new_block_ptr": 5,
                    "new_context": 1,
                    "new_debug_info": 1,
                    "new_end_block_address": 1,
                    "new_end_location": 1,
                    "new_location": 1,
                    "new_param": 2,
                    "new_param2": 1,
                    "new_parent_block": 1,
                    "new_position": 1,
                    "new_ptr": 1,
                    "new_value": 3,
                    "next_block_info": 1,
                    "param2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "ignore": 1,
                    "new_param3": 1,
                    "param3": 1,
                    "undefined": 1,
                    "unimportant_param": 1,
                    "unknown_param": 1,
                    "unused": 3,
                    "unused1": 1,
                    "unused_param": 14,
                    "unused_param1": 2,
                    "unused_param_3": 1,
                    "unused_parameter": 1
                },
                "param_4": {
                    "arg4": 1,
                    "debug_info": 1,
                    "new_param4": 1,
                    "output_param": 1,
                    "param4": 1,
                    "param_4": 1,
                    "result": 3,
                    "result_ptr": 1,
                    "return_val": 1,
                    "return_value": 12,
                    "u_var2": 1,
                    "unknown_return_value": 1,
                    "unused2": 1,
                    "unused_param2": 2,
                    "unused_result": 1,
                    "user_value": 1,
                    "value_to_return": 1
                },
                "pcVar3": {
                    "debug_error": 1,
                    "error_message": 18,
                    "error_message_str": 1,
                    "error_message_text": 1,
                    "error_msg": 1,
                    "error_string": 8,
                    "error_text": 1
                },
                "uVar2": {
                    "error_message": 14,
                    "error_msg": 2,
                    "error_string": 1,
                    "localized_error": 1,
                    "localized_error_message": 1,
                    "localized_message": 1,
                    "localized_string": 1,
                    "message": 1,
                    "result": 3,
                    "return_value": 1,
                    "translated_message": 1,
                    "translation": 3
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] end_current_debug_block_0010bf20(long block_ptr,undefined8 new_block_ptr,undefined8 unused_param,undefined8 return_value)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_message;\n  undefined return_value [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block = *(long *)(block_ptr + 0x20), current_block == 0)) {\n    error_message = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(current_block + 8) != 0) {\n      *(undefined8 *)(current_block + 0x20) = new_block_ptr;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block + 8);\n      goto LAB_0010bf84;\n    }\n    error_message = \"debug_end_block: attempt to close top level block\";\n  }\n  error_message = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010bf84:\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "end_current_debug_block_0010bf20",
            "entrypoint": "0x0010bf20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bf20": "end_current_debug_block_0010bf20",
                "auVar4": "return_value",
                "lVar1": "current_block",
                "param_1": "block_ptr",
                "param_2": "new_block_ptr",
                "param_3": "unused_param",
                "param_4": "return_value",
                "pcVar3": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bf86": {
            "additional_data": {
                "FUN_0010bf86": {
                    "debug_record_line": 2,
                    "record_debug_line": 12,
                    "record_line": 6,
                    "record_line_debug": 3,
                    "record_line_debug_info": 4,
                    "update_debug_record_line": 3,
                    "update_record_line": 1
                },
                "bVar7": {
                    "bit_flag": 1,
                    "byte_flag": 2,
                    "count": 1,
                    "flag": 20,
                    "is_debug": 1,
                    "is_first_iteration": 1,
                    "is_zero": 1,
                    "temp_flag": 1,
                    "zero_flag": 1
                },
                "lVar5": {
                    "count": 2,
                    "counter": 4,
                    "current_unit": 1,
                    "i": 5,
                    "index": 5,
                    "iterator": 2,
                    "length": 1,
                    "loop_counter": 4,
                    "loop_index": 1,
                    "loop_var": 1,
                    "offset": 1,
                    "record_index": 1,
                    "temp": 1,
                    "temp_var": 1,
                    "var5": 1
                },
                "param_1": {
                    "context": 1,
                    "current_unit": 1,
                    "debug_context": 2,
                    "debug_info": 3,
                    "debug_state": 1,
                    "debug_unit": 3,
                    "line_ptr": 1,
                    "record": 6,
                    "record_data": 1,
                    "record_ptr": 3,
                    "unit": 2,
                    "unit_handle": 1,
                    "unit_info": 2,
                    "unit_ptr": 4
                },
                "param_2": {
                    "debug_dst": 1,
                    "debug_record": 2,
                    "line": 4,
                    "line_data": 1,
                    "line_number": 11,
                    "line_ptr": 3,
                    "line_record": 2,
                    "new_param1": 1,
                    "param1": 1,
                    "param2": 1,
                    "record_line": 1,
                    "record_param1": 1,
                    "record_ptr": 2
                },
                "param_3": {
                    "data_ptr": 1,
                    "file": 1,
                    "file_path": 1,
                    "line": 1,
                    "line_data": 1,
                    "line_info": 1,
                    "line_number": 1,
                    "line_ptr": 2,
                    "new_param2": 1,
                    "param2": 1,
                    "param3": 1,
                    "record_param2": 1,
                    "source_file": 2,
                    "unit": 7,
                    "unit_data": 1,
                    "unit_id": 2,
                    "unit_name": 2,
                    "unit_ptr": 2,
                    "unit_record": 2
                },
                "puVar2": {
                    "current_array": 1,
                    "current_entry": 2,
                    "current_function": 1,
                    "current_line_record": 2,
                    "current_ptr": 1,
                    "current_record": 4,
                    "current_unit": 7,
                    "debug_line": 1,
                    "debug_line_ptr": 1,
                    "debug_record_ptr": 1,
                    "debug_unit": 1,
                    "entry_ptr": 2,
                    "unit_array_ptr": 1,
                    "unit_ptr": 5,
                    "unit_record_ptr": 1
                },
                "puVar4": {
                    "allocated_memory": 2,
                    "buffer_ptr": 1,
                    "debug_record": 2,
                    "debug_record_ptr": 1,
                    "new_allocation": 1,
                    "new_array": 1,
                    "new_data_ptr": 1,
                    "new_debug_line": 2,
                    "new_debug_record": 2,
                    "new_entry": 2,
                    "new_entry_ptr": 1,
                    "new_line_record": 1,
                    "new_record": 11,
                    "new_record_ptr": 2,
                    "new_unit_ptr": 1
                },
                "puVar6": {
                    "array_pointer": 1,
                    "current_byte": 1,
                    "current_entry_ptr": 1,
                    "current_field": 1,
                    "current_memory": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "current_record": 1,
                    "entry_pointer": 1,
                    "iterator": 1,
                    "loop_ptr": 1,
                    "new_line_record_ptr": 1,
                    "new_record_pointer": 1,
                    "new_unit_data": 1,
                    "pointer": 1,
                    "ptr": 7,
                    "ptr6": 1,
                    "record_ptr": 2,
                    "record_ptr_iter": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 2,
                    "temp_record": 1,
                    "temp_var": 1
                },
                "uVar1": {
                    "debug_msg": 1,
                    "err_msg": 1,
                    "error_message": 18,
                    "error_msg": 1,
                    "error_string": 1,
                    "message": 1,
                    "msg": 1,
                    "result": 6,
                    "return_value": 1
                },
                "uVar3": {
                    "count": 3,
                    "counter": 3,
                    "entry_index": 1,
                    "i": 2,
                    "index": 20,
                    "loop_counter": 1,
                    "record_index": 1
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 record_line_debug_info_0010bf86(long record,undefined8 line_number,undefined8 unit)\n\n{\n  undefined8 error_message;\n  undefined8 *current_unit;\n  ulong index;\n  undefined4 *new_record;\n  long i;\n  undefined4 *ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(record + 8) == 0) {\n    error_message = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n    error_message = 0;\n  }\n  else {\n    i = *(long *)(record + 0x28);\n    if ((i != 0) && (*(long *)(i + 8) == *(long *)(record + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(i + 0x10 + index * 8) == -1) {\n          current_unit = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(i + 0x10 + (long)current_unit * 8) = line_number;\n          *(undefined8 *)(i + 0x60 + (long)current_unit * 8) = unit;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    new_record = (undefined4 *)xmalloc(0xb0);\n    ptr = new_record;\n    for (i = 0x2c; i != 0; i = i + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)flag * -2 + 1;\n    }\n    error_message = *(undefined8 *)(record + 0x10);\n    *(undefined8 *)(new_record + 4) = line_number;\n    *(undefined8 *)(new_record + 2) = error_message;\n    *(undefined8 *)(new_record + 0x18) = unit;\n    ptr = new_record + 6;\n    for (i = 0x48; i != 0; i = i + -1) {\n      *(undefined *)ptr = 0xff;\n      ptr = (undefined4 *)((long)ptr + (ulong)flag * -2 + 1);\n    }\n    current_unit = *(undefined8 **)(record + 0x28);\n    if (current_unit == (undefined8 *)0x0) {\n      current_unit = *(undefined8 **)(record + 8);\n      current_unit[2] = new_record;\n    }\n    else {\n      *current_unit = new_record;\n    }\n    *(undefined4 **)(record + 0x28) = new_record;\nLAB_0010c056:\n    error_message = CONCAT71((int7)((ulong)current_unit >> 8),1);\n  }\n  return error_message;\n}\n\n",
            "current_name": "record_line_debug_info_0010bf86",
            "entrypoint": "0x0010bf86",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bf86": "record_line_debug_info_0010bf86",
                "bVar7": "flag",
                "lVar5": "i",
                "param_1": "record",
                "param_2": "line_number",
                "param_3": "unit",
                "puVar2": "current_unit",
                "puVar4": "new_record",
                "puVar6": "ptr",
                "uVar1": "error_message",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c05d": {
            "additional_data": {
                "FUN_0010c05d": {
                    "debug_record_variable": 13,
                    "improve_debug_record_variable": 1,
                    "improved_debug_record_variable": 1,
                    "process_record": 1,
                    "record_debug_variable": 3,
                    "record_variable": 7,
                    "record_variable_debug": 3,
                    "record_variable_debug_info": 1,
                    "record_variable_information": 1
                },
                "LAB_0010c12e": {
                    "end_label": 1
                },
                "_stderr": {
                    "error_stream": 1,
                    "standard_error": 1
                },
                "auVar1": {
                    "modified_address": 1,
                    "namespace_value": 1,
                    "new_variable_array1": 1,
                    "output": 2,
                    "record_result": 1,
                    "result": 13,
                    "result1": 1,
                    "ret_value": 1,
                    "return_value": 2,
                    "temp1": 2,
                    "temp_value_1": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_variable_1": 1,
                    "variable_offset": 1,
                    "zero_result": 1
                },
                "auVar9": {
                    "final_result": 4,
                    "new_result": 1,
                    "output_variable": 1,
                    "result": 2,
                    "result2": 1,
                    "result_2": 1,
                    "result_aux": 1,
                    "result_new": 1,
                    "return_val": 2,
                    "return_value": 9,
                    "return_value2": 1,
                    "return_var": 1,
                    "temp2": 2,
                    "temp_value_2": 1,
                    "temp_variable_2": 1,
                    "updated_result": 1
                },
                "bVar8": {
                    "b_val": 1,
                    "b_var": 1,
                    "b_var8": 4,
                    "bit_value": 1,
                    "boolean": 1,
                    "byte_flag": 2,
                    "byte_value": 1,
                    "byte_var": 3,
                    "byte_variable": 1,
                    "count": 1,
                    "counter": 2,
                    "flag": 4,
                    "loop_condition": 3,
                    "loop_counter": 2,
                    "record_flag": 1,
                    "temp_var": 1,
                    "zero_byte": 1,
                    "zero_flag": 1
                },
                "cVar4": {
                    "add_condition": 1,
                    "char_value": 1,
                    "cond_var": 1,
                    "condition": 5,
                    "condition_result": 1,
                    "conditional_flag": 1,
                    "flag": 16,
                    "is_current_file": 1,
                    "is_debug": 1,
                    "type_flag": 2
                },
                "dcgettext": {
                    "get_error_message": 1,
                    "get_text": 1
                },
                "debug_add_to_namespace_constprop_0": {
                    "add_to_namespace": 2
                },
                "fprintf": {
                    "print": 1,
                    "print_error_message": 1
                },
                "lVar5": {
                    "count": 3,
                    "counter": 2,
                    "i": 1,
                    "loop_cnt": 1,
                    "loop_counter": 19,
                    "loop_index": 2,
                    "loop_var": 1,
                    "loop_variable": 2
                },
                "lVar6": {
                    "current_file": 11,
                    "current_file_pointer": 1,
                    "current_file_ptr": 2,
                    "current_namespace": 1,
                    "current_position": 1,
                    "current_record": 1,
                    "debug_add_result": 1,
                    "file_offset": 1,
                    "file_ptr": 1,
                    "namespace_offset": 3,
                    "namespace_ptr": 4,
                    "offset": 1,
                    "temp_ptr": 1,
                    "temp_var": 1,
                    "var2_val": 1
                },
                "param_1": {
                    "arg1": 2,
                    "context": 1,
                    "data_ptr": 1,
                    "debug_info": 2,
                    "debug_session": 1,
                    "file": 1,
                    "file_context": 1,
                    "file_data": 2,
                    "file_handle": 3,
                    "file_info": 4,
                    "file_pointer": 1,
                    "file_ptr": 3,
                    "file_record": 1,
                    "file_structure": 1,
                    "input_param": 1,
                    "input_structure": 1,
                    "record": 1,
                    "record_pointer": 1,
                    "record_ptr": 1,
                    "source": 1,
                    "var1": 1
                },
                "param_2": {
                    "arg2": 2,
                    "offset": 1,
                    "record_id": 1,
                    "record_value": 1,
                    "value": 1,
                    "var2": 1,
                    "variable": 7,
                    "variable_address": 6,
                    "variable_id": 2,
                    "variable_name": 1,
                    "variable_ptr": 1,
                    "variable_type": 1,
                    "variable_value": 6
                },
                "param_3": {
                    "address": 3,
                    "arg3": 2,
                    "constant_1": 1,
                    "current_file": 1,
                    "file": 1,
                    "file_buffer": 1,
                    "file_pointer": 1,
                    "file_ptr": 1,
                    "namespace": 7,
                    "namespace_address": 1,
                    "namespace_id": 3,
                    "namespace_value": 1,
                    "size": 1,
                    "var3": 1,
                    "variable_name": 3,
                    "variable_size": 2,
                    "variable_value": 1
                },
                "param_4": {
                    "arg4": 2,
                    "constant_2": 1,
                    "count": 1,
                    "debug_level": 1,
                    "debug_mode": 1,
                    "flag": 1,
                    "mode": 1,
                    "param_count": 1,
                    "record_type": 3,
                    "status": 1,
                    "type": 4,
                    "var4": 1,
                    "variable_size": 1,
                    "variable_type": 12
                },
                "param_5": {
                    "arg5": 3,
                    "data_1": 1,
                    "data_ptr": 1,
                    "error_message": 1,
                    "file_error_message": 1,
                    "file_pointer": 1,
                    "file_ptr": 1,
                    "message": 1,
                    "param5": 2,
                    "param_5": 15,
                    "pointer_to_variable": 1,
                    "user_data": 1,
                    "var1": 1,
                    "var5": 1
                },
                "param_6": {
                    "arg6": 3,
                    "data_2": 1,
                    "param6": 2,
                    "param_6": 14,
                    "previous_result": 1,
                    "result": 7,
                    "return_value": 1,
                    "var2": 1,
                    "var6": 1
                },
                "piVar3": {
                    "allocated_info": 1,
                    "allocated_memory": 8,
                    "allocated_ptr": 2,
                    "int_array": 3,
                    "int_list": 1,
                    "new_record": 1,
                    "new_variable": 6,
                    "new_variable_array2": 1,
                    "pi_var3": 1,
                    "pointer1": 1,
                    "ptr": 2,
                    "ptr1": 1,
                    "record_ptr": 2,
                    "temporary_variable_3": 1
                },
                "piVar7": {
                    "allocated_memory_end": 1,
                    "allocated_memory_iterator": 2,
                    "allocated_memory_ptr": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "current_variable": 1,
                    "int_array_iterator": 1,
                    "int_ptr": 3,
                    "loop_ptr": 1,
                    "memory_pointer": 1,
                    "new_variable2": 1,
                    "new_variable_array3": 1,
                    "new_variable_ptr": 1,
                    "pi_var7": 4,
                    "pointer": 1,
                    "pointer2": 1,
                    "pointer_to_allocated_memory": 1,
                    "ptr": 2,
                    "ptr2": 2,
                    "ptr_iterator": 1,
                    "ptr_temp": 1,
                    "record_flag_ptr": 1,
                    "temporary_variable_4": 1
                },
                "uVar2": {
                    "error_message": 1,
                    "is_success": 1,
                    "new_result": 1,
                    "output": 1,
                    "result": 10,
                    "return_val": 2,
                    "return_value": 4,
                    "retval": 2,
                    "status": 7,
                    "success": 2
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "FUN_00112925",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined  [16]\nimproved_debug_record_variable_0010c05d(long file_info,long variable,ulong namespace,int variable_type,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined result [16];\n  undefined8 result;\n  int *allocated_memory;\n  char flag;\n  long loop_counter;\n  long current_file;\n  int *pi_var7;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  if (variable == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = namespace;\n    return result << 0x40;\n  }\n  if (namespace != 0) {\n    if ((*(long *)(file_info + 8) == 0) || (current_file = *(long *)(file_info + 0x10), current_file == 0)) {\n      result = get_text(0,\"debug_record_variable: no current file\",5);\n      print_error_message(error_stream,\"%s\\n\",result);\n    }\n    else {\n      if (variable_type - 1U < 2) {\n        current_file = current_file + 0x10;\n        flag = (variable_type == 1) + '\\x01';\n      }\n      else if (*(long *)(file_info + 0x20) == 0) {\n        current_file = current_file + 0x10;\n        flag = '\\0';\n      }\n      else {\n        current_file = *(long *)(file_info + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      current_file = add_to_namespace(current_file,variable,2,flag);\n      if (current_file != 0) {\n        allocated_memory = (int *)allocate_memory(0x18);\n        pi_var7 = allocated_memory + 1;\n        for (loop_counter = 5; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *pi_var7 = 0;\n          pi_var7 = pi_var7 + (ulong)flag * -2 + 1;\n        }\n        *allocated_memory = variable_type;\n        result = 1;\n        *(ulong *)(allocated_memory + 2) = namespace;\n        *(undefined8 *)(allocated_memory + 4) = param_5;\n        *(int **)(current_file + 0x20) = allocated_memory;\n        goto end_label;\n      }\n    }\n  }\n  result = 0;\nend_label:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "improved_debug_record_variable_0010c05d",
            "entrypoint": "0x0010c05d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c05d": "improved_debug_record_variable_0010c05d",
                "LAB_0010c12e": "end_label",
                "_stderr": "error_stream",
                "auVar1": "result",
                "auVar9": "return_value",
                "bVar8": "flag",
                "cVar4": "flag",
                "dcgettext": "get_text",
                "debug_add_to_namespace_constprop_0": "add_to_namespace",
                "fprintf": "print_error_message",
                "lVar5": "loop_counter",
                "lVar6": "current_file",
                "param_1": "file_info",
                "param_2": "variable",
                "param_3": "namespace",
                "param_4": "variable_type",
                "piVar3": "allocated_memory",
                "piVar7": "pi_var7",
                "uVar2": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c139": {
            "additional_data": {
                "FUN_0010c139": {
                    "allocate_memory_and_update_variables": 1,
                    "extract_record_and_update": 1,
                    "extract_variable": 1,
                    "process_data": 1,
                    "process_record": 4,
                    "process_record_variable": 1,
                    "process_variable": 2,
                    "reallocate_memory_and_set_values": 1,
                    "record_or_debug_variable": 4,
                    "record_variable": 3,
                    "record_variable_information": 2,
                    "record_variable_or_call_debug": 1,
                    "record_variable_or_call_debugger": 2,
                    "record_variable_or_debug": 6,
                    "update_record_value": 1
                },
                "cVar2": {
                    "char_flag": 2,
                    "char_value": 8,
                    "char_var": 4,
                    "character": 2,
                    "character_value": 2,
                    "flag": 6,
                    "flag_char": 1,
                    "is_valid": 1,
                    "record_flag": 4,
                    "value_char": 1
                },
                "in_R10": {
                    "additional_param": 1,
                    "arg1": 1,
                    "arg_1": 1,
                    "in_r10": 2,
                    "param10": 2,
                    "param5": 1,
                    "reg_value_10": 1,
                    "register1": 1,
                    "register10": 3,
                    "register_10": 2,
                    "register_a": 1,
                    "register_r10": 3,
                    "register_value": 1,
                    "register_var": 1,
                    "special_var": 1,
                    "temp2": 1,
                    "temp_register_r10": 1,
                    "unknown_argument": 1,
                    "unknown_param": 1,
                    "unknown_variable": 1,
                    "unrelated_ptr": 1,
                    "unused": 1,
                    "unused_r10": 1,
                    "unused_reg": 1
                },
                "param_1": {
                    "arg1": 3,
                    "context": 2,
                    "data": 1,
                    "data_ptr": 1,
                    "debugger_address": 1,
                    "function_address": 1,
                    "input": 1,
                    "input_address": 1,
                    "input_ptr": 1,
                    "param1": 2,
                    "param_1": 2,
                    "param_init": 1,
                    "param_ptr": 3,
                    "record": 4,
                    "record_buffer": 1,
                    "record_data": 1,
                    "record_id": 1,
                    "record_or_debug_param1": 1,
                    "record_pointer": 1,
                    "record_ptr": 1,
                    "record_variable": 1
                },
                "param_2": {
                    "arg2": 3,
                    "data": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "debugger_struct_ptr": 1,
                    "input": 1,
                    "param2": 1,
                    "record": 3,
                    "record_address": 2,
                    "record_or_debug_param2": 1,
                    "record_ptr": 4,
                    "struct_ptr": 4,
                    "structure": 2,
                    "structure_address": 1,
                    "var": 1,
                    "variable_1": 1,
                    "variable_address": 1
                },
                "param_3": {
                    "arg3": 3,
                    "data": 1,
                    "data_address": 1,
                    "param1": 2,
                    "param3": 2,
                    "param_3": 3,
                    "param_3_value": 1,
                    "param_a": 3,
                    "parameter_3": 1,
                    "pointer_to_variable": 1,
                    "record_or_debug_param3": 1,
                    "record_value": 1,
                    "size": 1,
                    "value": 6,
                    "var1": 1,
                    "var_ptr": 1,
                    "variable_2": 1,
                    "variable_address": 1
                },
                "param_4": {
                    "arg4": 3,
                    "length": 1,
                    "length_of_variable": 1,
                    "param2": 2,
                    "param4": 2,
                    "param_4": 4,
                    "param_4_value": 1,
                    "param_b": 3,
                    "parameter_4": 1,
                    "record_length": 1,
                    "record_or_debug_param4": 1,
                    "size": 3,
                    "type": 4,
                    "value": 1,
                    "var2": 1,
                    "variable_3": 1,
                    "variable_value": 1
                },
                "param_5": {
                    "arg5": 3,
                    "code": 1,
                    "flag": 3,
                    "param3": 2,
                    "param5": 2,
                    "param_5": 4,
                    "param_5_value": 1,
                    "param_c": 3,
                    "parameter_5": 1,
                    "record_or_debug_param5": 1,
                    "record_type": 1,
                    "size": 2,
                    "status": 1,
                    "type": 2,
                    "type_of_variable": 1,
                    "var3": 1,
                    "variable_4": 1,
                    "variable_type": 1
                },
                "param_6": {
                    "arg6": 3,
                    "data": 2,
                    "param4": 2,
                    "param6": 3,
                    "param_6": 6,
                    "param_6_value": 1,
                    "param_d": 3,
                    "parameter_6": 1,
                    "pointer": 3,
                    "record_data": 1,
                    "record_or_debug_param6": 1,
                    "unknown_param": 1,
                    "value": 1,
                    "value_of_variable": 1,
                    "var4": 1,
                    "variable_5": 1
                },
                "puVar4": {
                    "allocated_memory": 4,
                    "allocated_ptr": 1,
                    "allocated_variable": 1,
                    "new_pointer": 4,
                    "new_ptr": 2,
                    "new_record": 5,
                    "new_record_ptr": 4,
                    "new_struct_ptr": 1,
                    "new_var_ptr": 1,
                    "new_variable": 3,
                    "pointer": 1,
                    "ptr": 1,
                    "ptr_to_struct": 1,
                    "record_ptr_alloc": 1,
                    "record_variable": 1
                },
                "uVar1": {
                    "old_data": 1,
                    "old_function": 1,
                    "old_pointer": 3,
                    "old_pointer_value": 1,
                    "old_ptr": 2,
                    "old_record_ptr": 1,
                    "old_record_value": 1,
                    "old_value": 1,
                    "prev_record": 1,
                    "prev_record_ptr": 1,
                    "prev_value": 2,
                    "previous_data_ptr": 1,
                    "previous_record": 2,
                    "previous_record_address": 1,
                    "previous_value": 1,
                    "saved_value": 1,
                    "temp": 1,
                    "temp1": 2,
                    "temp_var": 3,
                    "temp_var1": 2,
                    "temp_variable": 1,
                    "tmp_var1": 1
                },
                "uVar3": {
                    "result": 30,
                    "return_value": 1
                },
                "unaff_R15": {
                    "additional_param2": 1,
                    "arg2": 1,
                    "arg_2": 1,
                    "flag_value": 1,
                    "other_var": 1,
                    "param15": 1,
                    "param6": 1,
                    "reg_value_15": 1,
                    "register15": 2,
                    "register2": 1,
                    "register_15": 2,
                    "register_b": 1,
                    "register_r15": 3,
                    "result_ptr": 1,
                    "temp3": 1,
                    "unaff_r15": 2,
                    "unaff_reg_r15": 1,
                    "unaffected_r15": 1,
                    "unaffected_reg": 1,
                    "unaffected_register15": 1,
                    "unaffected_variable": 1,
                    "unknown_value": 2,
                    "unused": 1,
                    "unused_r15": 1,
                    "unused_reg": 1
                }
            },
            "called": [
                "FUN_0010c05d",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\nulong record_variable_or_call_debug_0010c139(undefined8 record,long record_ptr,undefined8 value,undefined8 type,\n                  undefined4 param_5,undefined8 param_6)\n\n{\n  undefined8 old_pointer;\n  char char_value;\n  ulong result;\n  undefined8 *new_record;\n  undefined8 register_r10;\n  undefined8 register_r15;\n  \n  char_value = *(char *)(record_ptr + 0x60);\n  if ((char_value != '\\0') && ((*(int *)(record_ptr + 0x40) != 0 || (*(char *)(record_ptr + 0x44) == '\\0')))) {\n    new_record = (undefined8 *)xmalloc(0x28);\n    old_pointer = *(undefined8 *)(record_ptr + 0x78);\n    *(undefined8 *)((long)new_record + 0x1c) = 0;\n    new_record[2] = type;\n    *(undefined4 *)(new_record + 3) = param_5;\n    new_record[4] = param_6;\n    *(undefined8 **)(record_ptr + 0x78) = new_record;\n    *new_record = old_pointer;\n    new_record[1] = value;\n    return CONCAT71((int7)((ulong)register_r15 >> 8),char_value) & 0xffffffff;\n  }\n  result = debug_record_variable(record,value,type,param_5,param_6,register_r10);\n  return result;\n}\n\n",
            "current_name": "record_variable_or_call_debug_0010c139",
            "entrypoint": "0x0010c139",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c139": "record_variable_or_call_debug_0010c139",
                "cVar2": "char_value",
                "in_R10": "register_r10",
                "param_1": "record",
                "param_2": "record_ptr",
                "param_3": "value",
                "param_4": "type",
                "puVar4": "new_record",
                "uVar1": "old_pointer",
                "uVar3": "result",
                "unaff_R15": "register_r15"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c1c6": {
            "additional_data": {
                "FUN_0010c1c6": {
                    "debug_and_free_records": 3,
                    "debug_record_variable_loop": 1,
                    "debug_variable_records": 1,
                    "handle_debug_records": 1,
                    "process_debug_records": 6,
                    "process_records": 3,
                    "process_variable_record": 1,
                    "process_variable_records": 1,
                    "process_variables": 1,
                    "record_and_free_debug_variables": 1,
                    "record_variable_debugger": 1,
                    "reverse_and_free_debug_records": 1,
                    "reverse_and_free_pointers": 1,
                    "reverse_and_free_records": 3,
                    "reverse_records": 2,
                    "reverse_variable_debugging": 2,
                    "reverse_variable_records": 1
                },
                "__ptr": {
                    "current_node": 1,
                    "current_pointer": 2,
                    "current_ptr": 10,
                    "current_record": 14,
                    "current_record_ptr": 1,
                    "record_ptr": 2
                },
                "cVar2": {
                    "continue_debugging": 1,
                    "continue_loop": 1,
                    "debug_result": 8,
                    "debug_success": 1,
                    "is_valid": 2,
                    "result": 7,
                    "return_code": 1,
                    "return_value": 1,
                    "should_continue": 1,
                    "status": 2,
                    "success_flag": 2
                },
                "param_1": {
                    "debugger": 5,
                    "debugger_handle": 1,
                    "debugger_instance": 2,
                    "function_address": 2,
                    "function_pointer": 1,
                    "param": 2,
                    "param1": 4,
                    "param_1": 2,
                    "param_ptr": 3,
                    "param_ptr1": 1,
                    "record": 1,
                    "record_address": 1,
                    "record_data": 2,
                    "record_handler": 1,
                    "record_manager": 1,
                    "result_buffer": 1,
                    "value": 1
                },
                "param_2": {
                    "binary_offset": 1,
                    "context": 4,
                    "context_address": 1,
                    "data": 2,
                    "data_struct": 1,
                    "data_structure": 1,
                    "debug_data": 1,
                    "debug_info": 1,
                    "param2": 3,
                    "param_ptr2": 1,
                    "pointer_table": 1,
                    "ptr_offset": 1,
                    "record": 2,
                    "record_address": 1,
                    "record_array": 1,
                    "record_base": 1,
                    "record_buffer": 1,
                    "record_list": 1,
                    "record_ptr": 3,
                    "record_struct": 1,
                    "records": 1,
                    "struct_ptr": 1
                },
                "param_3": {
                    "arg1": 1,
                    "arg3": 1,
                    "input1": 1,
                    "param1": 2,
                    "param3": 6,
                    "param_3": 15,
                    "param_ptr3": 1,
                    "unknown_param": 1,
                    "unused_parameter": 1
                },
                "param_4": {
                    "arg2": 1,
                    "arg4": 1,
                    "input2": 1,
                    "param2": 2,
                    "param4": 6,
                    "param_4": 15,
                    "param_int1": 1,
                    "unknown_param": 1,
                    "unused_parameter": 1
                },
                "param_5": {
                    "arg3": 1,
                    "arg5": 1,
                    "input3": 1,
                    "param3": 2,
                    "param5": 7,
                    "param_4": 1,
                    "param_5": 16,
                    "param_ptr4": 1,
                    "unknown_param": 1
                },
                "param_6": {
                    "arg4": 1,
                    "arg6": 1,
                    "input4": 1,
                    "param4": 2,
                    "param6": 7,
                    "param_5": 1,
                    "param_6": 16,
                    "param_ptr5": 1,
                    "unknown_param": 1
                },
                "puVar1": {
                    "next_node": 1,
                    "next_pointer": 2,
                    "next_ptr": 8,
                    "next_record": 12,
                    "next_record_ptr": 4,
                    "temp_ptr": 2
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_0010c05d"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "code": "\nundefined record_and_free_debug_variables_0010c1c6(undefined8 debugger,long context,undefined8 param_3,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  undefined8 *next_record;\n  char debug_result;\n  undefined8 *current_record;\n  \n  current_record = *(undefined8 **)(context + 0x78);\n  while( true ) {\n    if (current_record == (undefined8 *)0x0) {\n      *(undefined8 *)(context + 0x78) = 0;\n      return 1;\n    }\n    debug_result = debug_record_variable\n                      (debugger,current_record[1],current_record[2],*(undefined4 *)(current_record + 3),current_record[4],param_6,param_5\n                      );\n    if (debug_result == '\\0') break;\n    next_record = (undefined8 *)*current_record;\n    free(current_record);\n    current_record = next_record;\n  }\n  return 0;\n}\n\n",
            "current_name": "record_and_free_debug_variables_0010c1c6",
            "entrypoint": "0x0010c1c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c1c6": "record_and_free_debug_variables_0010c1c6",
                "__ptr": "current_record",
                "cVar2": "debug_result",
                "param_1": "debugger",
                "param_2": "context",
                "puVar1": "next_record"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c218": {
            "additional_data": {
                "FUN_0010c218": {
                    "add_debug_type_to_namespace": 1,
                    "add_type_to_namespace": 1,
                    "convert_debug_name_type": 1,
                    "convert_name_type": 1,
                    "convert_type_and_add_to_namespace": 1,
                    "debug_name_type": 2,
                    "extract_and_add_type_to_namespace": 1,
                    "extract_debug_type": 1,
                    "modify_type_name": 1,
                    "process_debug_name_type": 9,
                    "process_name_type": 1,
                    "update_debug_name_type": 4,
                    "update_debug_type": 1,
                    "update_namespace_with_type": 1,
                    "update_type_in_namespace": 2,
                    "update_type_name": 1
                },
                "_stderr": {
                    "error_stream": 2,
                    "stderr": 1
                },
                "dcgettext": {
                    "get_debug_message": 2
                },
                "debug_add_to_namespace_constprop_0": {
                    "add_to_namespace": 1
                },
                "debug_make_type_constprop_0": {
                    "create_constant_type": 1
                },
                "fprintf": {
                    "print_error_message": 1
                },
                "lVar2": {
                    "new_type": 1,
                    "result": 1,
                    "type": 9,
                    "type_const": 2,
                    "type_handle": 1,
                    "type_identifier": 1,
                    "type_info": 3,
                    "type_obj": 1,
                    "type_pointer": 2,
                    "type_ptr": 6,
                    "type_result": 4
                },
                "lVar4": {
                    "namespace": 1,
                    "namespace_const": 1,
                    "namespace_context": 1,
                    "namespace_entry": 8,
                    "namespace_info": 1,
                    "namespace_ptr": 6,
                    "namespace_result": 7,
                    "new_type_pointer": 1,
                    "result": 4,
                    "type_namespace_ptr": 1
                },
                "param_1": {
                    "arg1": 2,
                    "current_file": 2,
                    "current_file_ptr": 1,
                    "data_structure": 1,
                    "file": 2,
                    "file_context": 4,
                    "file_data": 2,
                    "file_info": 5,
                    "file_namespace": 1,
                    "file_pointer": 2,
                    "file_ptr": 3,
                    "input_data": 2,
                    "input_param": 1,
                    "namespace": 2,
                    "type_info": 1
                },
                "param_2": {
                    "arg2": 2,
                    "current_file": 1,
                    "current_type": 2,
                    "debug_name": 1,
                    "file_id": 1,
                    "file_index": 1,
                    "name": 2,
                    "name_offset": 1,
                    "name_ptr": 1,
                    "name_type": 10,
                    "type": 1,
                    "type_id": 3,
                    "type_index": 1,
                    "type_name": 3,
                    "value_1": 1
                },
                "param_3": {
                    "arg3": 2,
                    "current_file": 3,
                    "debug_name": 2,
                    "debug_name_type": 4,
                    "debug_value": 1,
                    "file_type": 1,
                    "name": 1,
                    "name_id": 1,
                    "name_length": 1,
                    "name_type": 3,
                    "namespace_id": 1,
                    "namespace_index": 1,
                    "new_type": 1,
                    "type": 4,
                    "type_id": 1,
                    "type_length": 1,
                    "type_ptr": 1,
                    "type_size": 1,
                    "value_2": 1
                },
                "pauVar3": {
                    "allocated_memory": 2,
                    "data_type": 1,
                    "p_type": 1,
                    "type_array": 1,
                    "type_array_pointer": 1,
                    "type_array_ptr": 2,
                    "type_buffer": 1,
                    "type_constprop": 1,
                    "type_data": 1,
                    "type_data_ptr": 1,
                    "type_entry": 1,
                    "type_info_ptr": 1,
                    "type_obj_ptr": 1,
                    "type_pointer": 4,
                    "type_ptr": 10,
                    "type_ptr_array": 1,
                    "type_ptr_ptr": 1
                },
                "uVar1": {
                    "": 1,
                    "debug_message": 1,
                    "err_msg": 1,
                    "error_message": 20,
                    "error_msg": 5,
                    "error_string": 1,
                    "message": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00112925",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010c2d2",
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010dac0"
            ],
            "code": "\n\n\nlong process_debug_name_type_0010c218(long file_info,long name_type,long type)\n\n{\n  undefined8 error_message;\n  long type;\n  undefined (*type_ptr) [16];\n  long namespace_entry;\n  \n  if ((name_type != 0) && (type != 0)) {\n    if ((*(long *)(file_info + 8) == 0) || (*(long *)(file_info + 0x10) == 0)) {\n      error_message = get_debug_message(0,\"debug_name_type: no current file\",5);\n      print_error_message(error_stream,\"%s\\n\",error_message);\n    }\n    else {\n      type = create_constant_type(0x16,0);\n      if (type != 0) {\n        type_ptr = (undefined (*) [16])allocate_memory(0x10);\n        namespace_entry = *(long *)(file_info + 0x10);\n        *type_ptr = ZEXT816(0);\n        *(long *)(*type_ptr + 8) = type;\n        *(undefined (**) [16])(type + 0x10) = type_ptr;\n        namespace_entry = add_to_namespace(namespace_entry + 0x10,name_type,0,3);\n        if (namespace_entry != 0) {\n          *(long *)(namespace_entry + 0x20) = type;\n          *(long *)*type_ptr = namespace_entry;\n          return type;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_debug_name_type_0010c218",
            "entrypoint": "0x0010c218",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c218": "process_debug_name_type_0010c218",
                "_stderr": "error_stream",
                "dcgettext": "get_debug_message",
                "debug_add_to_namespace_constprop_0": "add_to_namespace",
                "debug_make_type_constprop_0": "create_constant_type",
                "fprintf": "print_error_message",
                "lVar2": "type",
                "lVar4": "namespace_entry",
                "param_1": "file_info",
                "param_2": "name_type",
                "param_3": "type",
                "pauVar3": "type_ptr",
                "uVar1": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c2d2": {
            "additional_data": {
                "FUN_00109022": {
                    "debug_name_type": 1,
                    "generate_error_message": 1,
                    "generate_type_name": 1
                },
                "FUN_0010c218": {
                    "create_debug_type": 1,
                    "debug_make_int_type_isra_0": 1,
                    "make_type": 1
                },
                "FUN_0010c2d2": {
                    "convert_xcoff_type": 2,
                    "convert_xcoff_type_to_debug_type": 2,
                    "debug_get_type": 1,
                    "extract_data_type": 1,
                    "get_data_type": 3,
                    "get_debug_type": 1,
                    "get_type": 1,
                    "get_type_from_param": 1,
                    "get_type_from_xcoff": 1,
                    "get_type_from_xcoff_type": 1,
                    "identify_data_type": 1,
                    "map_xcoff_type_to_debug_type": 1,
                    "resolve_type": 1
                },
                "FUN_00112904": {
                    "fprintf": 1,
                    "print_error_message": 1,
                    "print_formatted_message": 1
                },
                "FUN_00113df2": {
                    "debug_make_void_type_isra_0": 1,
                    "print_debug_message": 1,
                    "print_error_message": 1
                },
                "FUN_00113dfe": {
                    "dcgettext": 1,
                    "print_error_message": 2
                },
                "FUN_00113e17": {
                    "initialize": 1,
                    "print_warning": 1,
                    "stab_find_slot": 1
                },
                "FUN_00113e23": {
                    "create_debug_type": 1,
                    "debug_make_indirect_type_isra_0": 1,
                    "make_indirect_type": 1
                },
                "_stderr": {
                    "error_stream": 1
                },
                "lVar4": {
                    "cached_type": 1,
                    "data_type": 2,
                    "data_type_address": 2,
                    "debug_type": 1,
                    "debug_type_ptr": 1,
                    "resolved_type": 1,
                    "result": 8,
                    "type_address": 7,
                    "type_entry": 1,
                    "type_handle": 1,
                    "type_in_symbol_table": 1,
                    "type_index": 1,
                    "type_info": 1,
                    "type_ptr": 1,
                    "type_result": 2
                },
                "param_1": {
                    "arg1": 1,
                    "context": 3,
                    "debug_info": 1,
                    "debug_session": 1,
                    "debug_type_manager": 1,
                    "debugger": 2,
                    "debugger_handle": 2,
                    "param": 6,
                    "param1": 6,
                    "param_1": 1,
                    "param_descriptive": 1,
                    "param_input": 1,
                    "param_struct": 1,
                    "symbol_id": 1,
                    "symbol_table": 1,
                    "type_dictionary": 1,
                    "type_manager": 1
                },
                "param_2": {
                    "arg2": 1,
                    "base_address": 3,
                    "data": 1,
                    "data_type_list": 1,
                    "data_type_table": 1,
                    "offset": 1,
                    "param2": 6,
                    "param_2": 1,
                    "param_data": 1,
                    "symbol_table_ptr": 1,
                    "type_array": 3,
                    "type_cache": 1,
                    "type_dict": 1,
                    "type_storage": 1,
                    "type_table": 6,
                    "type_table_ptr": 1,
                    "xcoff_type_table": 1
                },
                "param_3": {
                    "arg3": 1,
                    "param3": 6,
                    "param_3": 1,
                    "param_value": 1,
                    "result": 1,
                    "type": 1,
                    "type_code": 3,
                    "type_id": 4,
                    "type_id_ptr": 1,
                    "type_index": 2,
                    "type_info": 7,
                    "type_spec_ptr": 1,
                    "type_specifier": 1,
                    "xcoff_type": 1
                },
                "pcVar2": {
                    "data_type_name": 1,
                    "data_type_string": 1,
                    "debug_type_name": 1,
                    "ptr_string": 1,
                    "type_label": 1,
                    "type_name": 18,
                    "type_str": 1,
                    "type_string": 7
                },
                "plVar5": {
                    "data_type_ptr": 1,
                    "debug_type_ptr": 1,
                    "indirect_type": 2,
                    "indirect_type_entry": 1,
                    "indirect_type_ptr": 1,
                    "lookup_result": 1,
                    "ptr_result": 1,
                    "slot": 8,
                    "slot_pointer": 1,
                    "slot_ptr": 2,
                    "stab_entry": 1,
                    "stab_find_result": 1,
                    "stab_slot": 3,
                    "type_indirect_ptr": 1,
                    "type_ptr": 2,
                    "type_ptr_in_symbol_table": 1,
                    "type_slot": 2,
                    "type_slot_ptr": 1
                },
                "uVar1": {
                    "data_type": 1,
                    "data_type_index": 1,
                    "type": 4,
                    "type_code": 6,
                    "type_code_unsigned": 1,
                    "type_id": 1,
                    "type_identifier": 1,
                    "type_index": 4,
                    "type_info": 1,
                    "type_info0": 1,
                    "type_info_zero": 1,
                    "type_size": 2,
                    "type_specifier": 1,
                    "type_value": 2,
                    "unrecognized_type": 1,
                    "unsigned_var1": 1,
                    "val_1": 1,
                    "xcoff_type_value": 1
                },
                "uVar3": {
                    "data_type": 2,
                    "debug_info": 1,
                    "debug_type": 6,
                    "debug_type_result": 1,
                    "new_type": 2,
                    "type": 8,
                    "type_debug_info": 1,
                    "type_descriptor": 1,
                    "type_id": 1,
                    "type_identifier": 1,
                    "type_info": 2,
                    "type_ptr": 2,
                    "type_size": 1,
                    "type_specifier": 1,
                    "val_3": 1
                },
                "uVar6": {
                    "abs_data_type_index": 1,
                    "abs_type_index": 1,
                    "absolute_type_code": 1,
                    "complement": 1,
                    "data_type_index": 1,
                    "index": 10,
                    "index_diff": 1,
                    "neg_type_code": 1,
                    "neg_type_index": 1,
                    "negated_type_info": 1,
                    "negative_type": 1,
                    "negative_type_code": 1,
                    "negative_type_id": 1,
                    "negative_type_index": 1,
                    "type_index": 5,
                    "unrecognized_type_code": 1,
                    "unsigned_var2": 1,
                    "val_6": 1
                }
            },
            "called": [
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_00112904",
                "FUN_00113e17",
                "FUN_00104240",
                "FUN_00109022",
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nlong get_type_from_param_0010c2d2(undefined8 param,long param2,int *type_info)\n\n{\n  uint type_code;\n  char *type_name;\n  undefined8 type;\n  long result;\n  long *slot;\n  uint index;\n  \n  if ((*type_info == 0) && (type_code = type_info[1], (int)type_code < 0)) {\n    index = ~type_code;\n    if (index < 0x22) {\n      result = *(long *)(param2 + 0x90 + (ulong)index * 8);\n      if (result == 0) {\n        switch(index) {\n        case 1:\n          type = debug_make_int_type_isra_0(1,0);\n          type_name = \"char\";\n          break;\n        case 2:\n          type = debug_make_int_type_isra_0(2,0);\n          type_name = \"short\";\n          break;\n        case 3:\n          type = debug_make_int_type_isra_0(4,0);\n          type_name = \"long\";\n          break;\n        case 4:\n          type = debug_make_int_type_isra_0(1,1);\n          type_name = \"unsigned char\";\n          break;\n        case 5:\n          type = debug_make_int_type_isra_0(1,0);\n          type_name = \"signed char\";\n          break;\n        case 6:\n          type = debug_make_int_type_isra_0(2,1);\n          type_name = \"unsigned short\";\n          break;\n        case 7:\n          type = debug_make_int_type_isra_0(4,1);\n          type_name = \"unsigned int\";\n          break;\n        case 8:\n          type = debug_make_int_type_isra_0(4,1);\n          type_name = \"unsigned\";\n          break;\n        case 9:\n          type = debug_make_int_type_isra_0(4,1);\n          type_name = \"unsigned long\";\n          break;\n        case 10:\n          type = debug_make_void_type_isra_0();\n          type_name = \"void\";\n          break;\n        case 0xb:\n          type = debug_make_float_type_isra_0(4);\n          type_name = \"float\";\n          break;\n        case 0xc:\n          type = debug_make_float_type_isra_0(8);\n          type_name = \"double\";\n          break;\n        case 0xd:\n          type = debug_make_float_type_isra_0(8);\n          type_name = \"long double\";\n          break;\n        case 0xe:\n          type = debug_make_int_type_isra_0(4,0);\n          type_name = \"integer\";\n          break;\n        case 0xf:\n          type = debug_make_type_constprop_0(6,4);\n          type_name = \"boolean\";\n          break;\n        case 0x10:\n          type = debug_make_float_type_isra_0(4);\n          type_name = \"short real\";\n          break;\n        case 0x11:\n          type = debug_make_float_type_isra_0(8);\n          type_name = \"real\";\n          break;\n        case 0x12:\n          type_name = \"stringptr\";\n          type = 0;\n          break;\n        case 0x13:\n          type = debug_make_int_type_isra_0(1,1);\n          type_name = \"character\";\n          break;\n        case 0x14:\n          type = debug_make_type_constprop_0(6,1);\n          type_name = \"logical*1\";\n          break;\n        case 0x15:\n          type = debug_make_type_constprop_0(6,2);\n          type_name = \"logical*2\";\n          break;\n        case 0x16:\n          type = debug_make_type_constprop_0(6,4);\n          type_name = \"logical*4\";\n          break;\n        case 0x17:\n          type = debug_make_type_constprop_0(6,4);\n          type_name = \"logical\";\n          break;\n        case 0x18:\n          type = debug_make_type_constprop_0(5,8);\n          type_name = \"complex\";\n          break;\n        case 0x19:\n          type = debug_make_type_constprop_0(5,0x10);\n          type_name = \"double complex\";\n          break;\n        case 0x1a:\n          type = debug_make_int_type_isra_0(1,0);\n          type_name = \"integer*1\";\n          break;\n        case 0x1b:\n          type = debug_make_int_type_isra_0(2,0);\n          type_name = \"integer*2\";\n          break;\n        case 0x1c:\n          type = debug_make_int_type_isra_0(4,0);\n          type_name = \"integer*4\";\n          break;\n        case 0x1d:\n          type = debug_make_int_type_isra_0(2,0);\n          type_name = \"wchar\";\n          break;\n        case 0x1e:\n          type = debug_make_int_type_isra_0(8,0);\n          type_name = \"long long\";\n          break;\n        case 0x1f:\n          type = debug_make_int_type_isra_0(8,1);\n          type_name = \"unsigned long long\";\n          break;\n        case 0x20:\n          type = debug_make_type_constprop_0(6,8);\n          type_name = \"logical*8\";\n          break;\n        case 0x21:\n          type = debug_make_int_type_isra_0(8,0);\n          type_name = \"integer*8\";\n          break;\n        default:\n          type = debug_make_int_type_isra_0(4,0);\n          type_name = \"int\";\n        }\n        result = debug_name_type(param,type_name,type);\n        *(long *)(param2 + 0x90 + (ulong)index * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    type_name = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(error_stream,type_name,(ulong)type_code);\n  }\n  else {\n    slot = (long *)stab_find_slot(param2);\n    if (slot != (long *)0x0) {\n      if (*slot == 0) {\n        result = debug_make_indirect_type_isra_0(slot,0);\n        return result;\n      }\n      return *slot;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "get_type_from_param_0010c2d2",
            "entrypoint": "0x0010c2d2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c2d2": "get_type_from_param_0010c2d2",
                "_stderr": "error_stream",
                "lVar4": "result",
                "param_1": "param",
                "param_2": "param2",
                "param_3": "type_info",
                "pcVar2": "type_name",
                "plVar5": "slot",
                "uVar1": "type_code",
                "uVar3": "type",
                "uVar6": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c6be": {
            "additional_data": {
                "0": {
                    "null_ptr": 1
                },
                "0x17": {
                    "tag_constant_value": 1
                },
                "8": {
                    "tag_name_offset": 1
                },
                "FUN_0010c6be": {
                    "check_debug_tag_type": 1,
                    "debug_tag_type": 17,
                    "debug_tag_type_check": 2,
                    "debug_tag_type_extraction": 1,
                    "find_debug_tag_type": 2,
                    "find_debug_type": 1,
                    "find_extra_tag": 1,
                    "find_type_in_namespace": 1,
                    "process_debug_tag_type": 1,
                    "process_tag_type": 1,
                    "resolve_debug_type": 1,
                    "tag_type_debug": 1,
                    "tag_type_debugger": 1
                },
                "FUN_00112904": {
                    "print_error_message": 1
                },
                "FUN_00112925": {
                    "make_type_constprop": 1
                },
                "_stderr": {
                    "output_stream": 1,
                    "standard_error_stream": 1
                },
                "dcgettext": {
                    "get_message": 1
                },
                "iVar1": {
                    "compare_result": 1,
                    "comparison_result": 16,
                    "result": 5,
                    "strcmp_result": 7,
                    "string_comparison": 1,
                    "tag_comparison_result": 1
                },
                "lVar5": {
                    "address": 1,
                    "address_1": 1,
                    "address_offset": 1,
                    "file_handle_offset": 1,
                    "file_offset": 5,
                    "file_pointer": 1,
                    "namespace_address": 3,
                    "namespace_data": 1,
                    "namespace_entry": 2,
                    "namespace_index": 1,
                    "namespace_info": 1,
                    "namespace_offset": 6,
                    "namespace_ptr": 1,
                    "namespace_result": 1,
                    "offset": 3,
                    "result": 1,
                    "temp_offset": 1
                },
                "param_1": {
                    "arg1": 3,
                    "base_address": 1,
                    "debug_context": 1,
                    "debug_handle": 1,
                    "file_base_address": 1,
                    "file_data": 1,
                    "file_descriptor": 1,
                    "file_handle": 6,
                    "file_info": 1,
                    "file_offset": 2,
                    "file_pointer": 1,
                    "file_ptr": 2,
                    "handle": 1,
                    "internal_data": 1,
                    "namespace_ptr": 1,
                    "param_1": 1,
                    "param_addr": 1,
                    "param_address": 1,
                    "param_file_offset": 1,
                    "param_value": 1,
                    "pointer_to_struct": 1,
                    "tag_type_id": 1
                },
                "param_2": {
                    "arg2": 2,
                    "file_name": 8,
                    "filename": 1,
                    "param_debug_tag": 1,
                    "tag": 1,
                    "tag_name": 17,
                    "type_name": 1
                },
                "param_3": {
                    "arg3": 2,
                    "param_tag_offset": 1,
                    "pointer_to_type": 1,
                    "tag": 6,
                    "tag_array": 1,
                    "tag_data": 1,
                    "tag_info": 1,
                    "tag_pointer": 3,
                    "tag_ptr": 8,
                    "tag_structure": 1,
                    "tag_type": 4,
                    "tag_type_ptr": 1,
                    "tag_value": 1
                },
                "pauVar4": {
                    "allocated_memory": 2,
                    "allocated_ptr": 1,
                    "debug_tag": 1,
                    "dynamic_array": 1,
                    "new_array": 1,
                    "new_item": 1,
                    "new_pointer": 1,
                    "new_pointer_to_array": 1,
                    "new_ptr": 1,
                    "new_tag": 1,
                    "new_tag_array": 1,
                    "new_tag_data": 2,
                    "new_tag_ptr_array": 1,
                    "new_type_info": 1,
                    "new_type_ptr": 1,
                    "pointer_array": 1,
                    "pointer_to_array_of_16_bytes": 1,
                    "tag_data": 2,
                    "tag_handler": 1,
                    "tag_info": 2,
                    "tag_ptr_offset": 1,
                    "tag_type_wrapper": 1,
                    "tag_void_ptr": 1,
                    "type_data": 1,
                    "type_info": 1,
                    "type_ptr": 1,
                    "type_wrapper": 1
                },
                "pcVar6": {
                    "error_message": 24,
                    "error_msg": 3,
                    "error_reason": 1,
                    "error_string": 2
                },
                "piVar3": {
                    "const_type_ptr": 1,
                    "new_tag": 6,
                    "new_tag_array": 1,
                    "new_tag_info": 1,
                    "new_tag_offset": 1,
                    "new_tag_pointer": 2,
                    "new_tag_ptr": 4,
                    "new_tag_structure": 1,
                    "new_tag_type": 3,
                    "new_tag_type_ptr": 1,
                    "new_type": 5,
                    "ptr": 1
                },
                "uVar2": {
                    "error_message": 2,
                    "localized_debug_message": 1,
                    "localized_error": 1,
                    "localized_string": 3,
                    "translated_error": 1,
                    "translated_error_message": 7,
                    "translated_message": 8,
                    "translated_msg": 2,
                    "translated_text": 1,
                    "translation": 1,
                    "translation_result": 1
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00112925",
                "FUN_00104240",
                "FUN_00104470",
                "FUN_001044b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "code": "\n\n\nint * check_debug_tag_type_0010c6be(long file_handle,char *tag_name,int *tag_ptr)\n\n{\n  int comparison_result;\n  undefined8 translated_message;\n  int *new_tag;\n  undefined (*tag_data) [16];\n  long namespace_offset;\n  char *error_message;\n  \n  if ((tag_name != (char *)0x0) && (tag_ptr != (int *)0x0)) {\n    if (*(long *)(file_handle + 0x10) == 0) {\n      error_message = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tag_ptr != 0x17) {\n        new_tag = (int *)debug_make_type_constprop_0(0x17,0);\n        if (new_tag == (int *)0x0) {\n          return (int *)0x0;\n        }\n        tag_data = (undefined (*) [16])xmalloc(0x10);\n        namespace_offset = *(long *)(file_handle + 0x10);\n        *tag_data = ZEXT816(0);\n        *(int **)(*tag_data + 8) = tag_ptr;\n        *(undefined (**) [16])(new_tag + 4) = tag_data;\n        namespace_offset = debug_add_to_namespace_constprop_0(namespace_offset + 0x10,tag_name,1,3);\n        if (namespace_offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(namespace_offset + 0x20) = new_tag;\n        *(long *)*tag_data = namespace_offset;\n        return new_tag;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(tag_ptr + 4) + 8),tag_name);\n      error_message = \"debug_tag_type: extra tag attempted\";\n      if (comparison_result == 0) {\n        return tag_ptr;\n      }\n    }\n    translated_message = get_message(0,error_message,5);\n    fprintf(standard_error_stream,\"%s\\n\",translated_message);\n  }\n  return (int *)0x0;\n}\n\n",
            "current_name": "check_debug_tag_type_0010c6be",
            "entrypoint": "0x0010c6be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c6be": "check_debug_tag_type_0010c6be",
                "_stderr": "standard_error_stream",
                "dcgettext": "get_message",
                "iVar1": "comparison_result",
                "lVar5": "namespace_offset",
                "param_1": "file_handle",
                "param_2": "tag_name",
                "param_3": "tag_ptr",
                "pauVar4": "tag_data",
                "pcVar6": "error_message",
                "piVar3": "new_tag",
                "uVar2": "translated_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c7a0": {
            "additional_data": {
                "FUN_0010922b": {
                    "compare_types": 1
                },
                "FUN_0010c7a0": {
                    "debug_set_class_id": 17,
                    "process_debug_info": 1,
                    "set_class_id": 11,
                    "set_debug_class_id": 1,
                    "update_class_id": 1
                },
                "__s1": {
                    "char_ptr": 1,
                    "compared_class_name": 1,
                    "current_class_name": 1,
                    "existing_class_name": 8,
                    "node_class_name": 1,
                    "prev_class_name": 1,
                    "previous_class_name": 1,
                    "ptr_name": 1,
                    "saved_name": 1,
                    "stored_class_name": 1,
                    "temp5": 1,
                    "temp_2": 1,
                    "temp_ptr2": 1,
                    "temp_str": 2,
                    "type_name": 7,
                    "type_name2": 1,
                    "var5": 1
                },
                "auVar8": {
                    "output": 1,
                    "result": 10,
                    "result_entry": 1,
                    "result_struct": 1,
                    "return_object": 1,
                    "return_value": 14,
                    "return_variable": 1,
                    "temp9": 1,
                    "var9": 1
                },
                "cVar5": {
                    "char_result": 1,
                    "is_same": 1,
                    "is_same_type": 18,
                    "is_type_same": 2,
                    "result": 1,
                    "same_type": 2,
                    "temp6": 1,
                    "temp_char": 2,
                    "type_match": 1,
                    "type_same": 1,
                    "var6": 1
                },
                "iVar6": {
                    "class_id": 1,
                    "class_id_count": 1,
                    "count": 7,
                    "counter": 4,
                    "int_result": 1,
                    "new_class_id": 1,
                    "new_type_id": 5,
                    "new_type_length": 1,
                    "num_entries": 1,
                    "temp7": 1,
                    "temp_3": 1,
                    "temp_int": 2,
                    "type_count": 3,
                    "type_length": 1,
                    "var7": 1
                },
                "lVar3": {
                    "debug_info_ptr": 1,
                    "param_3_4": 1,
                    "struct_pointer": 1,
                    "temp3": 3,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "type_data": 1,
                    "type_entry": 1,
                    "type_index": 1,
                    "type_info": 13,
                    "type_info_ptr": 2,
                    "type_ptr": 2,
                    "type_struct": 1,
                    "value": 1,
                    "var3": 1
                },
                "param_1": {
                    "base_address": 1,
                    "class_id": 10,
                    "class_info": 2,
                    "class_ptr": 2,
                    "debug_data": 1,
                    "debug_info": 3,
                    "debug_info_ptr": 1,
                    "debugger_id": 1,
                    "input": 1,
                    "object": 1,
                    "object_address": 1,
                    "param": 1,
                    "param_ptr": 1,
                    "type": 3,
                    "type_context": 1,
                    "type_data": 1
                },
                "param_2": {
                    "class_name": 26,
                    "name": 3,
                    "str_param": 1,
                    "type_name": 1
                },
                "param_3": {
                    "class_id": 2,
                    "class_type": 5,
                    "kind": 1,
                    "type": 15,
                    "type_id": 2,
                    "type_kind": 3,
                    "type_ptr": 3
                },
                "param_4": {
                    "arg": 1,
                    "data": 1,
                    "param": 2,
                    "param4": 2,
                    "param_4": 24,
                    "value": 1
                },
                "piVar4": {
                    "compared_class_type": 1,
                    "current_type_ptr": 1,
                    "int_ptr": 1,
                    "ptr": 1,
                    "temp": 1,
                    "temp4": 1,
                    "temp_ptr": 3,
                    "type_data": 1,
                    "type_id_ptr": 1,
                    "type_info": 1,
                    "type_kind": 8,
                    "type_pointer": 2,
                    "type_ptr": 6,
                    "type_ptr_1": 1,
                    "type_ptr_head": 1,
                    "var4": 1
                },
                "puVar7": {
                    "class_id_entry": 1,
                    "current_node": 3,
                    "debug_node": 1,
                    "debug_type": 1,
                    "entry_ptr": 1,
                    "new_class": 3,
                    "new_class_entry": 2,
                    "new_debug_info_ptr": 1,
                    "new_entry": 1,
                    "new_head": 1,
                    "new_node": 4,
                    "new_ptr": 3,
                    "new_type": 1,
                    "new_type_entry": 1,
                    "node": 1,
                    "temp8": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 2,
                    "type_node": 1,
                    "var8": 1
                },
                "uVar1": {
                    "next_debug_info_ptr": 1,
                    "old_head": 1,
                    "prev_class_ptr": 1,
                    "prev_node": 2,
                    "prev_ptr": 1,
                    "previous": 1,
                    "previous_entry": 1,
                    "result": 12,
                    "return_value": 5,
                    "temp": 3,
                    "temp_var": 1,
                    "unused_var1": 1,
                    "var1": 1
                },
                "uVar2": {
                    "new_class_id": 4,
                    "new_entry": 1,
                    "new_id": 3,
                    "new_length": 1,
                    "new_type": 1,
                    "new_type_id": 1,
                    "new_value": 1,
                    "node_count": 1,
                    "size": 1,
                    "temp2": 3,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "type_count": 2,
                    "type_id": 5,
                    "type_length": 1,
                    "type_size": 2,
                    "updated_class_length": 1,
                    "var2": 1
                }
            },
            "called": [
                "FUN_0010922b",
                "FUN_00104300",
                "FUN_00104470",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] set_debug_class_id_0010c7a0(long class_id,char *class_name,int *type,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint type_id;\n  long type_info;\n  int *type_kind;\n  char *existing_class_name;\n  char is_same_type;\n  int count;\n  undefined8 *new_node;\n  undefined return_value [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  type_info = *(long *)(type + 4);\n  new_node = (undefined8 *)(ulong)*(uint *)(type_info + 0xc);\n  if (*(uint *)(type_info + 0xc) <= *(uint *)(class_id + 0x38)) {\n    for (new_node = *(undefined8 **)(class_id + 0x50); new_node != (undefined8 *)0x0;\n        new_node = (undefined8 *)*new_node) {\n      type_kind = (int *)new_node[1];\n      if (*type_kind == *type) {\n        existing_class_name = (char *)new_node[2];\n        if (class_name == (char *)0x0) {\n          if (existing_class_name == (char *)0x0) {\nLAB_0010c82c:\n            is_same_type = debug_type_samep(class_id,type_kind,type);\n            if (is_same_type != '\\0') {\n              type_id = *(uint *)(*(long *)(new_node[1] + 0x10) + 0xc);\n              new_node = (undefined8 *)(ulong)type_id;\n              *(uint *)(type_info + 0xc) = type_id;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existing_class_name != (char *)0x0) && (*existing_class_name == *class_name)) &&\n                (count = strcmp(existing_class_name,class_name), count == 0)) goto LAB_0010c82c;\n      }\n    }\n    count = *(int *)(class_id + 0x34) + 1;\n    *(int *)(class_id + 0x34) = count;\n    *(int *)(type_info + 0xc) = count;\n    new_node = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(class_id + 0x50);\n    new_node[2] = class_name;\n    *(undefined8 **)(class_id + 0x50) = new_node;\n    *new_node = result;\n    new_node[1] = type;\n  }\nLAB_0010c884:\n  return_value._1_7_ = (undefined7)((ulong)new_node >> 8);\n  return_value[0] = 1;\n  return_value._8_8_ = param_4;\n  return return_value;\n}\n\n",
            "current_name": "set_debug_class_id_0010c7a0",
            "entrypoint": "0x0010c7a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c7a0": "set_debug_class_id_0010c7a0",
                "__s1": "existing_class_name",
                "auVar8": "return_value",
                "cVar5": "is_same_type",
                "iVar6": "count",
                "lVar3": "type_info",
                "param_1": "class_id",
                "param_2": "class_name",
                "param_3": "type",
                "piVar4": "type_kind",
                "puVar7": "new_node",
                "uVar1": "result",
                "uVar2": "type_id"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c892": {
            "additional_data": {
                "FUN_0010be1a": {
                    "calculate_data": 1,
                    "create_tagged_type": 1,
                    "debug_tag_type": 1,
                    "process_debug_types_sub4": 1
                },
                "FUN_0010c1c6": {
                    "apply_type": 1,
                    "debug_function": 1,
                    "debug_make_type_constprop": 1,
                    "process_debug_types_sub2": 1
                },
                "FUN_0010c6be": {
                    "parse_type": 1,
                    "process_debug_types_sub1": 1,
                    "process_debug_vars": 1,
                    "process_some_data": 1
                },
                "FUN_0010c892": {
                    "extract_debug_types": 1,
                    "process_data": 3,
                    "process_data_type": 1,
                    "process_debug_data": 1,
                    "process_debug_info": 2,
                    "process_debug_types": 5,
                    "process_tags": 4,
                    "process_type_list": 1,
                    "process_types": 7,
                    "reverse_tags_of_type": 1
                },
                "FUN_00112904": {
                    "emit_pending_data": 1,
                    "log_error": 1,
                    "print_debug_message": 1,
                    "process_debug_types_sub3": 1
                },
                "_stderr": {
                    "error_output": 1,
                    "stderr": 2
                },
                "_stdout": {
                    "standard_output": 1
                },
                "cVar1": {
                    "char_flag": 1,
                    "char_var": 5,
                    "character_var": 1,
                    "emit_flag": 1,
                    "emit_pending_vars_result": 2,
                    "emit_result": 3,
                    "emit_vars_result": 1,
                    "flag": 5,
                    "is_emit_successful": 1,
                    "is_pending": 2,
                    "is_pending_done": 1,
                    "pending_vars": 1,
                    "result": 4,
                    "should_emit_vars": 2,
                    "temp_char": 1
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "debug_end_function": {
                    "end_function": 1
                },
                "debug_make_type_constprop_0": {
                    "make_const_type": 1
                },
                "debug_tag_type": {
                    "tag_type": 1
                },
                "fprintf": {
                    "print_error_message": 1
                },
                "iVar6": {
                    "current_iteration": 1,
                    "index": 1,
                    "int_value": 1,
                    "int_var": 6,
                    "kind": 19,
                    "kind_var": 1,
                    "tag_kind": 2
                },
                "lVar2": {
                    "const_type": 1,
                    "long_var_2": 1,
                    "make_type_result": 1,
                    "result": 1,
                    "result1": 3,
                    "result2": 1,
                    "result_var": 1,
                    "temp1": 1,
                    "temp_var1": 1,
                    "type": 4,
                    "type1": 1,
                    "type_address": 1,
                    "type_const": 1,
                    "type_constant": 1,
                    "type_pointer": 1,
                    "type_result": 8,
                    "type_var": 1,
                    "type_var1": 1,
                    "var2": 1
                },
                "lVar3": {
                    "field_name": 1,
                    "long_var_3": 1,
                    "result2": 3,
                    "result3": 1,
                    "tag": 5,
                    "tag_result": 3,
                    "tag_type": 1,
                    "tag_type_result": 1,
                    "tag_var": 1,
                    "tagged_type": 5,
                    "temp2": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "type": 1,
                    "type2": 1,
                    "type_tag": 1,
                    "type_value": 1,
                    "type_var2": 1,
                    "var3": 1
                },
                "param_1": {
                    "arg1": 7,
                    "base_address": 1,
                    "context": 4,
                    "data": 4,
                    "debug_info": 1,
                    "file": 1,
                    "function_address": 1,
                    "function_ptr": 2,
                    "input_param": 2,
                    "input_value": 1,
                    "param": 1,
                    "param1": 3,
                    "param_a": 1,
                    "pointer_to_data": 1,
                    "ptr": 1
                },
                "param_2": {
                    "address": 2,
                    "arg2": 7,
                    "base_address": 1,
                    "data": 5,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "datatype": 1,
                    "input_value": 1,
                    "param": 1,
                    "param2": 3,
                    "param_b": 1,
                    "param_pointer": 1,
                    "ptr": 1,
                    "struct_address": 1,
                    "struct_pointer": 1,
                    "symbol_table": 1,
                    "symbol_table_entry": 1,
                    "tag_ptr": 1
                },
                "puVar5": {
                    "current_entry": 1,
                    "current_item": 1,
                    "current_node": 1,
                    "current_ptr": 1,
                    "current_tag": 4,
                    "current_value": 1,
                    "item": 1,
                    "iterator": 1,
                    "linked_list_pointer": 1,
                    "list_iterator": 1,
                    "list_pointer": 1,
                    "list_ptr": 1,
                    "node": 1,
                    "pointer_to_var": 1,
                    "pointer_var": 1,
                    "ptr": 6,
                    "ptr_iterator": 1,
                    "ptr_list": 1,
                    "ptr_var": 4,
                    "type_list": 1
                },
                "stab_emit_pending_vars": {
                    "emit_pending_vars": 1
                },
                "uVar4": {
                    "output_var": 1,
                    "result": 15,
                    "result4": 1,
                    "ret_val": 2,
                    "return_value": 11,
                    "success": 1
                }
            },
            "called": [
                "FUN_0010c6be",
                "FUN_0010c1c6",
                "FUN_00112904",
                "FUN_00104240",
                "FUN_0010be1a",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 process_debug_types_0010c892(undefined8 arg1,long arg2)\n\n{\n  char char_var;\n  long type_result;\n  long tagged_type;\n  undefined8 result;\n  undefined8 *ptr;\n  int kind;\n  \n  if (*(char *)(arg2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (ptr = *(undefined8 **)(arg2 + 0x1a0); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      kind = *(int *)(ptr + 2);\n      tagged_type = ptr[1];\n      if (kind != 0) {\n        if (tagged_type != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          result = get_error_message(0,\"debug_make_undefined_type: unsupported kind\",5);\n          print_error_message(stderr,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        ptr[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tagged_type == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      type_result = make_const_type(kind,0);\n      if (type_result == 0) goto LAB_0010c910;\n      tagged_type = tag_type(arg1,tagged_type,type_result);\n      ptr[3] = tagged_type;\n      if (tagged_type == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    char_var = emit_pending_vars();\n    if (char_var != '\\0') {\n      char_var = end_function(arg1,*(undefined8 *)(arg2 + 0x68));\n      if (char_var != '\\0') {\n        *(undefined *)(arg2 + 0x60) = 0;\n        *(undefined8 *)(arg2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "process_debug_types_0010c892",
            "entrypoint": "0x0010c892",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c892": "process_debug_types_0010c892",
                "_stderr": "stderr",
                "cVar1": "char_var",
                "dcgettext": "get_error_message",
                "debug_end_function": "end_function",
                "debug_make_type_constprop_0": "make_const_type",
                "debug_tag_type": "tag_type",
                "fprintf": "print_error_message",
                "iVar6": "kind",
                "lVar2": "type_result",
                "lVar3": "tagged_type",
                "param_1": "arg1",
                "param_2": "arg2",
                "puVar5": "ptr",
                "stab_emit_pending_vars": "emit_pending_vars",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c95e": {
            "additional_data": {
                "DAT_00113e17": {
                    "": 1
                },
                "DAT_00120436": {
                    "": 1
                },
                "DAT_00120495": {
                    "": 1
                },
                "DAT_sch_istable": {
                    "": 1
                },
                "FUN_0010c95e": {
                    "decode_and_extract_debug_type": 1,
                    "decode_and_extract_type": 2,
                    "parse_type": 1
                },
                "PARAM_KIND_1": {
                    "0x41": 1
                },
                "PARAM_KIND_10": {
                    "0x54": 1
                },
                "PARAM_KIND_2": {
                    "0x43": 1
                },
                "PARAM_KIND_3": {
                    "0x46": 1
                },
                "PARAM_KIND_4": {
                    "0x47": 1
                },
                "PARAM_KIND_5": {
                    "0x4d": 1
                },
                "PARAM_KIND_6": {
                    "0x4f": 1
                },
                "PARAM_KIND_7": {
                    "0x50": 1
                },
                "PARAM_KIND_8": {
                    "0x51": 1
                },
                "PARAM_KIND_9": {
                    "0x52": 1
                },
                "PTR_stab_bad_demangle": {
                    "": 1
                },
                "PTR_stab_demangle_args": {
                    "": 1
                },
                "PTR_stab_demangle_basetype": {
                    "": 1
                },
                "PTR_stab_demangle_declaration": {
                    "": 1
                },
                "PTR_stab_demangle_extern": {
                    "": 1
                },
                "PTR_stab_demangle_qualified": {
                    "": 1
                },
                "PTR_stab_demangle_template": {
                    "": 1
                },
                "PTR_stab_demangle_typecast": {
                    "": 1
                },
                "PTR_stab_demangle_unqualified": {
                    "": 1
                },
                "PTR_stab_find_tagged_type": {
                    "": 1
                },
                "__ptr": {
                    "allocated_string": 1,
                    "name_string": 1,
                    "pointer": 4,
                    "pointer_void_var1": 1,
                    "ptr": 3,
                    "ptr1": 1,
                    "ptr_value": 3,
                    "ptr_var": 1,
                    "ptr_var1": 1,
                    "str_ptr": 1,
                    "string": 1,
                    "string_copy": 1,
                    "string_ptr": 3,
                    "temp_pointer": 1,
                    "void_pointer": 2,
                    "void_pointer1": 1,
                    "void_ptr": 3,
                    "void_ptr1": 1
                },
                "allocate_and_initialize_data_structure_00113c43": {
                    "": 1,
                    "allocate_and_initialize_data_structure": 1,
                    "initialize_data_structure": 1
                },
                "bVar1": {
                    "byte1": 1,
                    "byte_val": 1,
                    "byte_value": 5,
                    "byte_value1": 4,
                    "byte_var1": 9,
                    "byte_variable1": 1,
                    "character": 1,
                    "current_byte": 6,
                    "first_byte": 1,
                    "temp_byte": 1
                },
                "bVar2": {
                    "byte2": 1,
                    "byte_value2": 5,
                    "byte_var": 1,
                    "byte_var2": 9,
                    "byte_variable2": 1,
                    "next_byte": 9,
                    "next_byte_value": 1,
                    "next_character": 1,
                    "second_byte": 1,
                    "switch_byte_value": 1
                },
                "bVar4": {
                    "bool1": 1,
                    "bool_value1": 5,
                    "bool_var1": 9,
                    "bool_var4": 1,
                    "bool_variable1": 1,
                    "has_char": 1,
                    "has_signed_char": 1,
                    "is_signed": 7,
                    "is_signed_char": 2,
                    "switch_byte_value2": 1,
                    "var_1": 1
                },
                "bVar5": {
                    "bool2": 1,
                    "bool_value2": 5,
                    "bool_var2": 9,
                    "bool_var5": 1,
                    "bool_variable2": 1,
                    "is_const": 9,
                    "is_signed": 1,
                    "is_unsigned": 1,
                    "switch_byte_value3": 1,
                    "var_2": 1
                },
                "bVar6": {
                    "bool3": 1,
                    "bool_value3": 5,
                    "bool_var3": 9,
                    "bool_var6": 1,
                    "bool_variable3": 1,
                    "is_volatile": 11,
                    "switch_byte_value4": 1,
                    "var_3": 1
                },
                "byte": {
                    "byte": 1
                },
                "cVar7": {
                    "char1": 1,
                    "char_value": 7,
                    "char_var": 7,
                    "char_var1": 4,
                    "char_variable": 1,
                    "demangle_error": 1,
                    "demangle_result": 1,
                    "error_code": 1,
                    "error_flag": 2,
                    "result": 1,
                    "return_value": 3,
                    "status": 1
                },
                "constantArgumentsSet": {
                    "constant_arguments_set": 1
                },
                "context": {
                    "linked_context": 1
                },
                "copy_and_null_terminate_string_00109a0b": {
                    "copy_and_null_terminate_string": 2
                },
                "create_debug_type_constprop_object_00113b98": {
                    "": 1,
                    "create_debug_type_object": 1
                },
                "create_debug_type_object_00113ce0": {
                    "": 1,
                    "create_debug_type_object": 1
                },
                "create_type_and_store_in_debug_00113bfa": {
                    "": 1,
                    "create_debug_type_object": 1,
                    "create_type_and_store_in_debug": 1
                },
                "debug_find_named_type": {
                    "find_string_in_binary": 1
                },
                "debug_make_array_type_isra_0": {
                    "create_type_and_store_in_debug": 1
                },
                "debug_make_const_type_isra_0": {
                    "create_type_and_store_in_debug": 1
                },
                "debug_make_float_type_isra_0": {
                    "create_type_and_store_in_debug": 1
                },
                "debug_make_function_type_isra_0": {
                    "create_type_and_store_in_debug": 1
                },
                "debug_make_int_type_isra_0": {
                    "create_type_and_store_in_debug": 1
                },
                "debug_make_method_type_isra_0": {
                    "create_type_and_store_in_debug": 1
                },
                "debug_make_offset_type_isra_0": {
                    "create_type_and_store_in_debug": 1
                },
                "debug_make_pointer_type_isra_0": {
                    "create_type_and_store_in_debug": 1
                },
                "debug_make_reference_type_isra_0": {
                    "create_type_and_store_in_debug": 1
                },
                "debug_make_void_type_isra_0": {
                    "create_type_and_store_in_debug": 1
                },
                "decode_and_find_type_0010d559": {
                    "": 1,
                    "decode_and_find_type": 2
                },
                "demangle_and_extract_arguments_0010d882": {
                    "": 1,
                    "demangle_and_extract_arguments": 1
                },
                "find_named_type_0010914e": {
                    "": 1,
                    "find_named_type": 1
                },
                "find_string_in_binary_0010afd5": {
                    "": 1
                },
                "get_or_create_debug_type_00113b4a": {
                    "get_or_create_debug_type": 1
                },
                "initialize_data_structure_00112904": {
                    "": 1,
                    "initialize_data_structure": 2
                },
                "initialize_debug_type_00113b4a": {
                    "": 1,
                    "initialize_debug_type": 1
                },
                "initialize_debug_type_00113b71": {
                    "": 1,
                    "initialize_debug_type": 2
                },
                "initialize_debug_type_00113bca": {
                    "initialize_debug_type": 1
                },
                "initialize_debug_type_00113cb9": {
                    "": 1,
                    "initialize_debug_type": 2
                },
                "initialize_debug_type_00113ce0": {
                    "create_debug_type_object": 1
                },
                "initialize_debug_type_00113d3a": {
                    "initialize_debug_type": 2
                },
                "initialize_debug_type_00113df2": {
                    "": 1,
                    "initialize_debug_type": 2
                },
                "initialize_debug_type_constprop_00113e17": {
                    "": 1,
                    "initialize_debug_type": 1,
                    "initialize_debug_type_constprop": 1
                },
                "lVar10": {
                    "long1": 1,
                    "long_value": 2,
                    "long_value1": 4,
                    "long_var": 1,
                    "long_var1": 8,
                    "long_var10": 1,
                    "long_variable1": 1,
                    "temp_long": 1,
                    "temp_value": 2,
                    "type": 2,
                    "type_size": 1,
                    "type_value": 6
                },
                "lVar15": {
                    "long2": 1,
                    "long_value2": 5,
                    "long_var15": 1,
                    "long_var2": 9,
                    "long_variable2": 1,
                    "output_long": 1,
                    "output_value": 1,
                    "result": 3,
                    "temp_value1": 1,
                    "temp_value2": 1,
                    "type_object": 1,
                    "type_result": 1,
                    "type_value": 3
                },
                "linked_list": {
                    "linked_list": 1
                },
                "local_40": {
                    "array_char_var1": 1,
                    "char_array": 8,
                    "char_buffer": 1,
                    "char_pointer_array": 2,
                    "char_ptr_array": 4,
                    "char_ptr_array1": 1,
                    "char_ptr_array40": 1,
                    "char_var_array1": 1,
                    "local_array": 2,
                    "output_string_array": 1,
                    "qualified_name": 1,
                    "string_array": 1,
                    "string_buffer": 1,
                    "temp_array": 1,
                    "template_args_array": 1
                },
                "local_48": {
                    "array_length": 2,
                    "count_value": 1,
                    "local_value": 1,
                    "local_var_2": 1,
                    "local_variable_2": 1,
                    "num_templates": 1,
                    "size": 1,
                    "temp_value3": 1,
                    "type_count": 1,
                    "u_long_var2": 1,
                    "ulong2": 1,
                    "ulong_value2": 5,
                    "ulong_var": 1,
                    "ulong_var1": 1,
                    "ulong_var2": 5,
                    "ulong_var3": 2,
                    "ulong_var48": 1,
                    "ulong_variable2": 1
                },
                "local_49": {
                    "byte_var3": 1,
                    "is_const": 2,
                    "is_offset": 1,
                    "is_void": 2,
                    "local_flag": 1,
                    "local_var_1": 1,
                    "local_variable_1": 1,
                    "temp_value2": 1,
                    "undefined1": 1,
                    "undefined_value": 5,
                    "undefined_var": 4,
                    "undefined_var1": 4,
                    "undefined_var49": 1,
                    "undefined_variable": 1,
                    "unidentified_var2": 1,
                    "volatility_indicator": 1
                },
                "long": {
                    "long": 1
                },
                "param_1": {
                    "arguments": 1,
                    "compilation_unit": 1,
                    "data_array": 1,
                    "debug_type_array": 1,
                    "function_parameters": 1,
                    "function_params": 1,
                    "function_pointer": 1,
                    "input_array": 9,
                    "input_data": 1,
                    "param_array": 10,
                    "param_list": 1,
                    "parameter_array": 1,
                    "type_list": 1
                },
                "param_2": {
                    "byte_arr_ptr": 1,
                    "byte_array": 12,
                    "byte_array_pointer": 2,
                    "byte_array_ptr": 10,
                    "byte_pointer_array": 1,
                    "byte_ptr_ptr": 1,
                    "input_byte_array": 1,
                    "param_byte_array": 2
                },
                "param_3": {
                    "long_array": 2,
                    "long_pointer": 1,
                    "long_ptr": 3,
                    "long_value_ptr": 1,
                    "output_pointer": 1,
                    "output_size": 11,
                    "output_size_ptr": 6,
                    "output_value": 2,
                    "param_output": 1,
                    "param_output_size": 1,
                    "result_pointer": 1
                },
                "parse_and_demangle_string_0010d21c": {
                    "": 1,
                    "parse_and_demangle_string": 1
                },
                "parse_integer_from_string_00108e76": {
                    "": 1,
                    "parse_integer_from_string": 1
                },
                "parse_number_from_string_00108ea1": {
                    "": 1,
                    "parse_number_from_string": 1
                },
                "pbVar20": {
                    "byte_pointer20": 1,
                    "byte_pointer3": 1,
                    "byte_ptr20": 1,
                    "byte_ptr3": 5,
                    "current_byte_ptr": 4
                },
                "pbVar3": {
                    "byte_pointer": 3,
                    "byte_pointer1": 3,
                    "byte_pointer3": 1,
                    "byte_ptr": 7,
                    "byte_ptr1": 4,
                    "byte_ptr3": 3,
                    "current_byte": 2,
                    "current_byte_ptr": 5,
                    "pointer_byte_var3": 1,
                    "temp_byte_arr_ptr": 1
                },
                "pbVar9": {
                    "byte_pointer": 1,
                    "byte_pointer2": 4,
                    "byte_pointer9": 1,
                    "byte_ptr1": 1,
                    "byte_ptr2": 8,
                    "byte_ptr9": 3,
                    "next_byte": 1,
                    "next_byte_2": 1,
                    "next_byte_pointer": 1,
                    "next_byte_ptr": 7,
                    "pointer_byte_var9": 1,
                    "temp_byte_arr_ptr2": 1
                },
                "pcVar": {
                    "char_pointer3": 1
                },
                "pcVar12": {
                    "char_array_ptr": 1,
                    "char_pointer": 2,
                    "char_pointer1": 3,
                    "char_ptr": 6,
                    "char_ptr1": 5,
                    "char_ptr12": 1,
                    "char_ptr3": 1,
                    "pointer_char_var1": 1,
                    "str1": 1,
                    "str_1": 1,
                    "string": 1,
                    "type": 1,
                    "type_name": 5,
                    "type_name_1": 1
                },
                "pcVar19": {
                    "char_array_ptr2": 1,
                    "char_pointer2": 5,
                    "char_ptr1": 1,
                    "char_ptr19": 1,
                    "char_ptr2": 10,
                    "char_ptr3": 1,
                    "pointer_char_var2": 1,
                    "str2": 1,
                    "temp_type_name": 1,
                    "type": 1,
                    "type_name": 4,
                    "type_name_2": 2,
                    "type_str": 1
                },
                "pcVar20": {
                    "char_ptr3": 1,
                    "current_byte_ptr": 1
                },
                "pcVar3": {
                    "output_string": 1
                },
                "ppcVar18": {
                    "arg_array": 1,
                    "char_array_ptr_ptr": 1,
                    "char_double_pointer": 1,
                    "char_pointer_pointer": 1,
                    "char_pointer_pointer_array": 1,
                    "char_ptr_ptr": 4,
                    "char_ptr_ptr1": 4,
                    "char_ptr_ptr18": 1,
                    "name_ptr": 1,
                    "pointer_pointer_char_var1": 1,
                    "qualified_type": 1,
                    "qualifiers": 1,
                    "str_array": 1,
                    "string_array": 2,
                    "template_args": 1
                },
                "print_error_message_0010911f": {
                    "": 1,
                    "print_error_message": 2
                },
                "puVar16": {
                    "debug_type": 1,
                    "number_array": 1,
                    "offset_value": 1,
                    "output_pointer": 1,
                    "output_void_pointer": 1,
                    "parsed_ulong_value": 1,
                    "ulong_pointer": 4,
                    "ulong_ptr": 5,
                    "ulong_ptr1": 2,
                    "ulong_ptr16": 1
                },
                "puVar17": {
                    "debug_type_constprop": 1,
                    "flag": 2,
                    "flag_value": 1,
                    "is_method_flag": 1,
                    "parsed_unsigned_value": 1,
                    "undefined_pointer": 4,
                    "undefined_ptr": 5,
                    "undefined_ptr1": 2,
                    "undefined_ptr17": 1
                },
                "sVar13": {
                    "length": 3,
                    "size": 1,
                    "size1": 1,
                    "size_t_var1": 1,
                    "size_val": 1,
                    "size_value": 5,
                    "size_var": 5,
                    "size_var1": 3,
                    "size_var13": 1,
                    "size_variable": 1,
                    "str_len": 1,
                    "str_length": 1,
                    "string_length": 4,
                    "string_size": 1,
                    "type_name_length": 1
                },
                "stab_bad_demangle": {
                    "handle_demangle_error": 1
                },
                "stab_demangle_args": {
                    "demangle_and_extract_arguments": 1
                },
                "stab_demangle_count": {
                    "parse_number_from_string": 1
                },
                "stab_demangle_get_count": {
                    "parse_and_demangle_string": 1
                },
                "stab_demangle_qualified": {
                    "parse_and_demangle_string": 1
                },
                "stab_demangle_template": {
                    "parse_and_demangle_string": 1
                },
                "stab_find_tagged_type": {
                    "find_named_type": 1
                },
                "switchD_0010c9b2_caseD_42": {
                    "switch_case42": 1
                },
                "switchD_0010c9b2_caseD_50": {
                    "switch_case50": 1
                },
                "switchD_0010cdf9_caseD_5f": {
                    "switch_case5f": 1
                },
                "switchD_0010cdf9_caseD_60": {
                    "switch_case60": 1
                },
                "uVar11": {
                    "function_return_value": 1,
                    "other_value": 1,
                    "output_value": 1,
                    "result": 5,
                    "return_val": 1,
                    "return_value": 4,
                    "temp_output": 1,
                    "u_int_var": 1,
                    "uint2": 1,
                    "uint64_var1": 1,
                    "uint_var1": 1,
                    "uint_var2": 3,
                    "uint_variable2": 1,
                    "ulong_var": 3,
                    "undefined8_value": 1,
                    "undefined_var11": 1,
                    "unidentified_var1": 1,
                    "unintialized_value": 1,
                    "unsigned_long_value": 1
                },
                "uVar14": {
                    "count": 2,
                    "int_value": 1,
                    "number": 5,
                    "parsed_number": 2,
                    "temp_value": 1,
                    "u_long_var": 1,
                    "ulong1": 1,
                    "ulong_value": 6,
                    "ulong_var": 2,
                    "ulong_var1": 4,
                    "ulong_var14": 1,
                    "ulong_var2": 3,
                    "ulong_variable1": 1
                },
                "uVar8": {
                    "count": 10,
                    "int_value": 2,
                    "int_value1": 1,
                    "int_var1": 1,
                    "number": 1,
                    "uint1": 1,
                    "uint_val": 1,
                    "uint_value": 3,
                    "uint_var": 6,
                    "uint_var1": 3,
                    "uint_variable": 1
                },
                "undefined8": {
                    "ulong": 1
                },
                "update_value_in_memory_00113dfe": {
                    "": 1,
                    "update_value_in_memory": 2
                }
            },
            "called": [
                "FUN_0010c95e",
                "FUN_00109a0b",
                "FUN_00104270",
                "FUN_00113e17",
                "FUN_00108e76",
                "FUN_00113cb9",
                "FUN_00108ea1",
                "FUN_0010911f",
                "FUN_00113d3a",
                "FUN_00113df2",
                "FUN_00113b4a",
                "FUN_00113dfe",
                "FUN_00113c43",
                "FUN_00113b98",
                "FUN_001048f0",
                "FUN_0010d559",
                "FUN_00112904",
                "FUN_0010914e",
                "FUN_0010d882",
                "FUN_00113b71",
                "FUN_00113bfa",
                "FUN_0010d21c",
                "FUN_00113ce0",
                "FUN_0010afd5"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d7d4",
                "FUN_00113e5e",
                "FUN_0010d21c"
            ],
            "code": "\nulong decode_and_extract_debug_type_0010c95e(ulong *param_array,byte **byte_array,long *output_size)\n\n{\n  byte byte_var1;\n  byte byte_var2;\n  byte *byte_ptr;\n  bool bool_var1;\n  bool bool_var2;\n  bool is_volatile;\n  char char_var;\n  uint count;\n  byte *byte_ptr2;\n  long long_var1;\n  ulong result;\n  char *char_ptr;\n  size_t size_var;\n  ulong ulong_value;\n  void *pointer;\n  long long_var2;\n  ulong *ulong_ptr;\n  undefined *undefined_ptr;\n  char **char_ptr_ptr;\n  char *char_ptr2;\n  byte *byte_ptr3;\n  undefined undefined_value;\n  ulong ulong_var2;\n  char *char_array [2];\n  \n  while( true ) {\n    byte_ptr3 = *byte_array;\n    byte_var1 = *byte_ptr3;\n    if ('T' < (char)byte_var1) break;\n    if ((char)byte_var1 < 'A') goto switch_case42;\n    switch(byte_var1) {\n    case 0x41:\n      long_var2 = 0;\n      byte_ptr = byte_ptr3;\n      goto LAB_0010ca26;\n    default:\n      goto switch_case42;\n    case 0x43:\n      *byte_array = byte_ptr3 + 1;\n      char_var = decode_and_extract_debug_type_0010c95e(param_array,byte_array,output_size);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (output_size == (long *)0x0) {\n        return 1;\n      }\n      long_var2 = create_type_and_store_in_debug(*output_size);\n      *output_size = long_var2;\n      return 1;\n    case 0x46:\n      *byte_array = byte_ptr3 + 1;\n      if (output_size == (long *)0x0) {\n        ulong_ptr = (ulong *)0x0;\n        char_ptr_ptr = (char **)0x0;\n      }\n      else {\n        ulong_ptr = &ulong_var2;\n        char_ptr_ptr = char_array;\n      }\n      char_var = demangle_and_extract_arguments(param_array,byte_array,char_ptr_ptr,ulong_ptr);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n        char_var = decode_and_extract_debug_type_0010c95e(param_array,byte_array,output_size);\n        if (char_var == '\\0') {\n          return 0;\n        }\n        if (output_size == (long *)0x0) {\n          return 1;\n        }\n        long_var2 = create_type_and_store_in_debug(*output_size,char_array[0],ulong_var2 & 0xff);\n        *output_size = long_var2;\n        return 1;\n      }\n      goto switch_case60;\n    case 0x47:\n      *byte_array = byte_ptr3 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      undefined_value = 0;\n      char_array[0] = (char *)0x0;\n      ulong_var2 = 0;\n      *byte_array = byte_ptr3 + 1;\n      if (((&_sch_istable)[(ulong)byte_ptr3[1] * 2] & 4) == 0) {\n        if (byte_ptr3[1] != 0x51) goto switch_case60;\n        char_ptr_ptr = char_array;\n        if (output_size == (long *)0x0) {\n          char_ptr_ptr = (char **)0x0;\n        }\n        char_var = parse_and_demangle_string(param_array,byte_array,char_ptr_ptr);\n        if (char_var == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        count = parse_number_from_string(byte_array);\n        byte_ptr = *byte_array;\n        size_var = strlen((char *)byte_ptr);\n        if (size_var < count) goto switch_case60;\n        *byte_array = byte_ptr + count;\n        if ((output_size != (long *)0x0) &&\n           (char_array[0] = (char *)find_named_type(*param_array,param_array[1],byte_ptr,count,9),\n           char_array[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      byte_var2 = **byte_array;\n      if (byte_var1 == 0x4d) {\n        if ((byte_var2 == 0x43) || (byte_var2 == 0x56)) {\n          *byte_array = *byte_array + 1;\n        }\n        if (**byte_array != 0x46) goto switch_case60;\n        *byte_array = *byte_array + 1;\n        if (output_size == (long *)0x0) {\n          undefined_ptr = (undefined *)0x0;\n          ulong_ptr = (ulong *)0x0;\n        }\n        else {\n          undefined_ptr = &undefined_value;\n          ulong_ptr = &ulong_var2;\n        }\n        char_var = demangle_and_extract_arguments(param_array,byte_array,ulong_ptr,undefined_ptr);\n        if (char_var == '\\0') {\n          return 0;\n        }\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n        char_var = decode_and_extract_debug_type_0010c95e(param_array,byte_array,output_size);\n        if (char_var == '\\0') {\n          return 0;\n        }\n        if (output_size == (long *)0x0) {\n          return 1;\n        }\n        if (byte_var1 != 0x4d) {\n          long_var2 = create_type_and_store_in_debug(char_array[0],*output_size);\n          *output_size = long_var2;\n          return 1;\n        }\n        long_var2 = create_type_and_store_in_debug(*output_size,char_array[0],ulong_var2,undefined_value);\n        *output_size = long_var2;\n        return 1;\n      }\n      goto switch_case60;\n    case 0x50:\n      goto switch_case50;\n    case 0x51:\n      result = parse_and_demangle_string(param_array,byte_array,output_size);\n      return result;\n    case 0x52:\n      *byte_array = byte_ptr3 + 1;\n      char_var = decode_and_extract_debug_type_0010c95e(param_array,byte_array,output_size);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (output_size == (long *)0x0) {\n        return 1;\n      }\n      long_var2 = create_type_and_store_in_debug(*output_size);\n      *output_size = long_var2;\n      return 1;\n    case 0x54:\n      *byte_array = byte_ptr3 + 1;\n      char_var = parse_and_demangle_string(byte_array,&ulong_var2);\n      if (char_var != '\\0') {\n        if ((uint)ulong_var2 < *(uint *)(param_array + 5)) {\n          char_array[0] = *(char **)((ulong_var2 & 0xffffffff) * 0x10 + param_array[4]);\n          char_var = decode_and_extract_debug_type_0010c95e(param_array,char_array,output_size);\n          if (char_var == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switch_case60;\n    }\n  }\n  if (byte_var1 == 0x70) {\nswitch_case50:\n    *byte_array = byte_ptr3 + 1;\n    char_var = decode_and_extract_debug_type_0010c95e(param_array,byte_array,output_size);\n    if (char_var == '\\0') {\n      return 0;\n    }\n    if (output_size == (long *)0x0) {\n      return 1;\n    }\n    long_var2 = create_type_and_store_in_debug(*output_size);\n    *output_size = long_var2;\n    return 1;\n  }\nswitch_case42:\n  is_volatile = false;\n  bool_var1 = false;\n  char_var = '\\0';\n  bool_var2 = false;\n  do {\n    byte_ptr = *byte_array;\n    byte_var1 = *byte_ptr;\n    if (byte_var1 == 0x55) {\n      char_var = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)byte_var1) {\n      if (byte_var1 == 0x56) {\n        is_volatile = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)byte_var1) goto switch_case60;\n      if ((char)byte_var1 < '_') goto LAB_0010cdfb;\n      switch(byte_var1) {\n      case 0x5f:\n        goto switch_case5f;\n      default:\n        goto switch_case60;\n      case 0x62:\n        if (output_size == (long *)0x0) {\nLAB_0010d0aa:\n          *byte_array = byte_ptr + 1;\n          return 1;\n        }\n        long_var2 = find_string_in_binary(*param_array,&DAT_00120436);\n        *output_size = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = debug_make_type_constprop_0(6,4);\n          *output_size = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (output_size == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"unsigned char\";\n        if ((char_var == '\\0') && (char_ptr2 = \"char\", bool_var1)) {\n          char_ptr2 = \"signed char\";\n        }\n        long_var2 = find_string_in_binary(*param_array,char_ptr2);\n        *output_size = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = create_type_and_store_in_debug(1,char_var);\n          *output_size = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (output_size == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (output_size == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = find_string_in_binary(*param_array,\"float\");\n        *output_size = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = create_type_and_store_in_debug(4);\n          *output_size = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (output_size == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"unsigned int\";\n        char_ptr = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (output_size == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"long unsigned int\";\n        char_ptr = \"long int\";\nLAB_0010ced2:\n        if (char_var == '\\0') {\n          char_ptr2 = char_ptr;\n        }\n        long_var2 = find_string_in_binary(*param_array,char_ptr2);\n        *output_size = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = create_type_and_store_in_debug(4,char_var);\n          *output_size = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        char_ptr2 = \"long double\";\n        if (output_size == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        long_var2 = find_string_in_binary(*param_array,char_ptr2);\n        *output_size = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = create_type_and_store_in_debug(8);\n          *output_size = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (output_size == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"short unsigned int\";\n        if (char_var == '\\0') {\n          char_ptr2 = \"short int\";\n        }\n        long_var2 = find_string_in_binary(*param_array,char_ptr2);\n        *output_size = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = create_type_and_store_in_debug(2,char_var);\n          *output_size = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        char_ptr_ptr = char_array;\n        if (output_size == (long *)0x0) {\n          char_ptr_ptr = (char **)0x0;\n        }\n        char_var = parse_and_demangle_string(param_array,byte_array,char_ptr_ptr);\n        if (char_var == '\\0') {\n          return 0;\n        }\n        if (output_size == (long *)0x0) {\n          return 1;\n        }\n        size_var = strlen(char_array[0]);\n        long_var2 = find_named_type(*param_array,param_array[1],char_array[0],size_var & 0xffffffff,9);\n        *output_size = long_var2;\n        free(char_array[0]);\n        long_var2 = *output_size;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (output_size == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = find_string_in_binary(*param_array,&DAT_00120495);\n        *output_size = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = create_type_and_store_in_debug();\n          *output_size = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (output_size == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = find_string_in_binary(*param_array,\"__wchar_t\");\n        *output_size = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = create_type_and_store_in_debug(2,1);\n          *output_size = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (output_size == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"long long unsigned int\";\n        if (char_var == '\\0') {\n          char_ptr2 = \"long long int\";\n        }\n        long_var2 = find_string_in_binary(*param_array,char_ptr2);\n        *output_size = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = create_type_and_store_in_debug(8,char_var);\n          *output_size = long_var2;\n        }\n      }\n      *byte_array = *byte_array + 1;\n      goto LAB_0010d1de;\n    }\n    if (byte_var1 == 0x43) {\n      bool_var2 = true;\n      goto LAB_0010cd84;\n    }\n    if (byte_var1 != 0x53) goto LAB_0010cdc5;\n    bool_var1 = true;\nLAB_0010cd84:\n    *byte_array = byte_ptr + 1;\n  } while( true );\nLAB_0010ca26:\n  byte_ptr2 = byte_ptr + 1;\n  *byte_array = byte_ptr2;\n  byte_var1 = *byte_ptr2;\n  if (byte_var1 == 0) goto switch_case60;\n  if (byte_var1 == 0x5f) {\n    *byte_array = byte_ptr + 2;\n    char_var = decode_and_extract_debug_type_0010c95e(param_array,byte_array,output_size);\n    if (char_var == '\\0') {\n      return 0;\n    }\n    if (output_size == (long *)0x0) {\n      return 1;\n    }\n    long_var1 = find_string_in_binary(*param_array,\"int\");\n    if (long_var1 == 0) {\n      long_var1 = create_type_and_store_in_debug(4,0);\n    }\n    long_var2 = create_type_and_store_in_debug(*output_size,long_var1,0,long_var2,0);\n    *output_size = long_var2;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)byte_var1 * 2] & 4) == 0) goto switch_case60;\n  long_var2 = long_var2 * 10 + (long)((char)byte_var1 + -0x30);\n  byte_ptr = byte_ptr2;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)byte_var1 < ':') {\n    if ((char)byte_var1 < '0') {\n      if (byte_var1 != 0) goto switch_case60;\nswitch_case5f:\n      handle_demangle_error(byte_ptr3);\n      if (output_size == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((byte_var1 != 0x47) || (*byte_array = byte_ptr + 1, ((&_sch_istable)[(ulong)byte_ptr[1] * 2] & 4) == 0)\n       ) goto switch_case60;\n  }\n  byte_ptr3 = *byte_array;\n  count = parse_number_from_string(byte_array);\n  byte_ptr = *byte_array;\n  size_var = strlen((char *)byte_ptr);\n  ulong_value = (ulong)count;\n  if (ulong_value <= size_var) {\n    *byte_array = byte_ptr + ulong_value;\n    if (output_size == (long *)0x0) {\n      return 1;\n    }\n    pointer = (void *)savestring(byte_ptr,ulong_value);\n    long_var2 = find_string_in_binary(*param_array,pointer);\n    *output_size = long_var2;\n    free(pointer);\n    if (*output_size == 0) {\n      long_var2 = find_named_type(*param_array,param_array[1],byte_ptr,(int)*byte_array - (int)byte_ptr,0);\n      *output_size = long_var2;\njoined_r0x0010d1d8:\n      if (long_var2 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (bool_var2) {\n      long_var2 = create_type_and_store_in_debug(*output_size);\n      *output_size = long_var2;\n    }\n    if (is_volatile) {\n      long_var2 = debug_make_volatile_type_isra_0(*output_size);\n      *output_size = long_var2;\n    }\n    return 1;\n  }\nswitch_case60:\n  handle_demangle_error(byte_ptr3);\n  return 0;\n}\n\n",
            "current_name": "decode_and_extract_debug_type_0010c95e",
            "entrypoint": "0x0010c95e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c95e": "decode_and_extract_debug_type_0010c95e",
                "__ptr": "pointer",
                "bVar1": "byte_var1",
                "bVar2": "byte_var2",
                "bVar4": "bool_var1",
                "bVar5": "bool_var2",
                "bVar6": "is_volatile",
                "cVar7": "char_var",
                "debug_find_named_type": "find_string_in_binary",
                "debug_make_array_type_isra_0": "create_type_and_store_in_debug",
                "debug_make_const_type_isra_0": "create_type_and_store_in_debug",
                "debug_make_float_type_isra_0": "create_type_and_store_in_debug",
                "debug_make_function_type_isra_0": "create_type_and_store_in_debug",
                "debug_make_int_type_isra_0": "create_type_and_store_in_debug",
                "debug_make_method_type_isra_0": "create_type_and_store_in_debug",
                "debug_make_offset_type_isra_0": "create_type_and_store_in_debug",
                "debug_make_pointer_type_isra_0": "create_type_and_store_in_debug",
                "debug_make_reference_type_isra_0": "create_type_and_store_in_debug",
                "debug_make_void_type_isra_0": "create_type_and_store_in_debug",
                "lVar10": "long_var1",
                "lVar15": "long_var2",
                "local_40": "char_array",
                "local_48": "ulong_var2",
                "local_49": "undefined_value",
                "param_1": "param_array",
                "param_2": "byte_array",
                "param_3": "output_size",
                "pbVar20": "byte_ptr3",
                "pbVar3": "byte_ptr",
                "pbVar9": "byte_ptr2",
                "pcVar": "char_pointer3",
                "pcVar12": "char_ptr",
                "pcVar19": "char_ptr2",
                "ppcVar18": "char_ptr_ptr",
                "puVar16": "ulong_ptr",
                "puVar17": "undefined_ptr",
                "sVar13": "size_var",
                "stab_bad_demangle": "handle_demangle_error",
                "stab_demangle_args": "demangle_and_extract_arguments",
                "stab_demangle_count": "parse_number_from_string",
                "stab_demangle_get_count": "parse_and_demangle_string",
                "stab_demangle_qualified": "parse_and_demangle_string",
                "stab_demangle_template": "parse_and_demangle_string",
                "stab_find_tagged_type": "find_named_type",
                "switchD_0010c9b2_caseD_42": "switch_case42",
                "switchD_0010c9b2_caseD_50": "switch_case50",
                "switchD_0010cdf9_caseD_5f": "switch_case5f",
                "switchD_0010cdf9_caseD_60": "switch_case60",
                "uVar11": "result",
                "uVar14": "ulong_value",
                "uVar8": "count",
                "undefined8": "ulong"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d21c": {
            "additional_data": {
                "FUN_0010d21c": {
                    "decode_string": 1,
                    "parse_and_demangle_string": 1
                },
                "__haystack": {
                    "haystack": 26,
                    "haystack_str": 2,
                    "haystack_var": 2,
                    "str": 1
                },
                "__ptr": {
                    "pointer": 1,
                    "pointer1": 3,
                    "pointer_var": 1,
                    "pointer_var1": 1,
                    "ptr": 3,
                    "ptr1": 12,
                    "ptr_1": 1,
                    "ptr_result1": 1,
                    "ptr_value1": 1,
                    "ptr_var": 2,
                    "ptr_var1": 2,
                    "ptr_void": 2,
                    "string_ptr": 1
                },
                "__ptr_00": {
                    "concatenated_string_ptr": 1,
                    "pointer2": 4,
                    "pointer_var2": 2,
                    "ptr00": 2,
                    "ptr2": 13,
                    "ptr_2": 1,
                    "ptr_result2": 1,
                    "ptr_value2": 1,
                    "ptr_var2": 4,
                    "ptr_void2": 1,
                    "ptr_void_2": 1
                },
                "_sch_istable": {
                    "character_table": 1
                },
                "abort": {
                    "abort_execution": 1
                },
                "bVar1": {
                    "byte1": 9,
                    "byte_value1": 1,
                    "byte_var1": 17,
                    "current_byte": 1,
                    "temp_byte1": 1,
                    "temp_byte_1": 1
                },
                "bVar14": {
                    "byte14": 1,
                    "byte2": 1,
                    "byte4": 7,
                    "byte_value4": 1,
                    "byte_var14": 14,
                    "byte_var3": 1,
                    "byte_var4": 2,
                    "byte_var6": 1,
                    "temp1": 1,
                    "temp_byte4": 1,
                    "temp_byte_3": 1
                },
                "bVar16": {
                    "byte16": 1,
                    "byte2": 1,
                    "byte5": 7,
                    "byte_value5": 1,
                    "byte_var16": 14,
                    "byte_var4": 1,
                    "byte_var5": 2,
                    "byte_var7": 1,
                    "temp2": 1,
                    "temp_byte5": 1,
                    "temp_byte_4": 1
                },
                "bVar17": {
                    "byte17": 1,
                    "byte3": 1,
                    "byte6": 7,
                    "byte_value6": 1,
                    "byte_var17": 14,
                    "byte_var5": 1,
                    "byte_var6": 2,
                    "byte_var8": 1,
                    "temp3": 1,
                    "temp_byte6": 1,
                    "temp_byte_5": 1
                },
                "bVar18": {
                    "byte18": 1,
                    "byte2": 1,
                    "byte7": 7,
                    "byte_value7": 1,
                    "byte_var18": 14,
                    "byte_var6": 1,
                    "byte_var7": 2,
                    "byte_var9": 1,
                    "temp4": 1,
                    "temp_byte7": 1,
                    "temp_byte_6": 1
                },
                "bVar19": {
                    "byte19": 1,
                    "byte3": 1,
                    "byte8": 7,
                    "byte_value8": 1,
                    "byte_var10": 1,
                    "byte_var19": 14,
                    "byte_var7": 1,
                    "byte_var8": 2,
                    "temp5": 1,
                    "temp_byte8": 1,
                    "temp_byte_7": 1
                },
                "bVar3": {
                    "byte1": 1,
                    "byte2": 7,
                    "byte3": 1,
                    "byte_value2": 1,
                    "byte_var": 1,
                    "byte_var2": 2,
                    "byte_var3": 15,
                    "temp": 1,
                    "temp_byte3": 1,
                    "temp_byte_2": 1
                },
                "bVar5": {
                    "byte1": 1,
                    "byte3": 7,
                    "byte5": 1,
                    "byte_value3": 1,
                    "byte_var2": 1,
                    "byte_var3": 2,
                    "byte_var5": 15,
                    "result": 1,
                    "temp_byte": 1,
                    "temp_byte4": 1
                },
                "cVar4": {
                    "char1": 9,
                    "char_value": 1,
                    "char_value1": 1,
                    "char_var": 5,
                    "char_var1": 2,
                    "char_var4": 11,
                    "temp_char": 2
                },
                "concat": {
                    "concatenate_strings": 1
                },
                "cplus_demangle": {
                    "demangle_string": 1
                },
                "free": {
                    "free_memory": 1
                },
                "iVar7": {
                    "int1": 5,
                    "int_value1": 1,
                    "int_var": 9,
                    "int_var1": 2,
                    "int_var7": 11,
                    "length": 1,
                    "temp_int": 1,
                    "temp_int1": 1
                },
                "local_3c": {
                    "array": 2,
                    "array1": 2,
                    "array_counts": 1,
                    "array_var": 3,
                    "array_var3c": 1,
                    "count_array": 3,
                    "int_arr": 1,
                    "int_array": 2,
                    "local_arr": 1,
                    "local_array": 6,
                    "local_array3c": 1,
                    "local_var1": 1,
                    "temp_uint_array": 1,
                    "uint_arr1": 1,
                    "uint_array": 3
                },
                "param_1": {
                    "arg1": 2,
                    "input1": 2,
                    "input_param": 1,
                    "input_param1": 1,
                    "param": 1,
                    "param1": 16,
                    "param_1": 6,
                    "param_a": 1,
                    "unknown_param": 1
                },
                "param_2": {
                    "arg2": 2,
                    "byte_array_param": 1,
                    "byte_pointer": 1,
                    "data_ptr": 1,
                    "input": 1,
                    "input2": 2,
                    "input_param2": 1,
                    "param2": 16,
                    "param_2": 4,
                    "param_b": 1,
                    "string_ptr": 1
                },
                "param_3": {
                    "arg3": 2,
                    "input_param3": 1,
                    "output": 3,
                    "output_param": 2,
                    "param3": 16,
                    "param_3": 4,
                    "param_c": 1,
                    "result": 1,
                    "result_pointer": 1
                },
                "pbVar10": {
                    "byte_pointer2": 6,
                    "byte_pointer3": 1,
                    "byte_pointer_var10": 1,
                    "byte_ptr10": 2,
                    "byte_ptr2": 9,
                    "byte_ptr_var10": 5,
                    "byte_ptr_var2": 1,
                    "current_byte2": 1,
                    "ptr": 1,
                    "ptr_byte2": 2,
                    "string_ptr_temp_2": 1,
                    "temp_byte3": 1
                },
                "pbVar2": {
                    "byte_pointer": 2,
                    "byte_pointer1": 4,
                    "byte_pointer2": 1,
                    "byte_pointer_var2": 1,
                    "byte_ptr": 6,
                    "byte_ptr1": 3,
                    "byte_ptr2": 2,
                    "byte_ptr_var": 1,
                    "byte_ptr_var2": 5,
                    "current": 1,
                    "current_byte": 1,
                    "ptr_byte": 2,
                    "string_ptr_temp": 1,
                    "temp_byte2": 1
                },
                "pcVar11": {
                    "char_ptr1": 2,
                    "char_ptr11": 1,
                    "char_ptr_var11": 2,
                    "pc_var1": 4,
                    "pc_var11": 3,
                    "pointer3": 3,
                    "pointer_char1": 1,
                    "pointer_var1": 1,
                    "pointer_var11": 1,
                    "pointer_var3": 2,
                    "ptr3": 2,
                    "ptr_char1": 2,
                    "ptr_var3": 1,
                    "start": 1,
                    "str_ptr": 1,
                    "temp_char_ptr1": 1,
                    "temp_pc_1": 1,
                    "var11": 2
                },
                "pcVar13": {
                    "char_ptr13": 1,
                    "char_ptr2": 2,
                    "char_ptr_var13": 2,
                    "pc_var13": 3,
                    "pc_var2": 4,
                    "pointer4": 3,
                    "pointer_char2": 1,
                    "pointer_var13": 1,
                    "pointer_var2": 1,
                    "pointer_var4": 2,
                    "ptr1": 1,
                    "ptr4": 2,
                    "ptr_char2": 2,
                    "ptr_var4": 1,
                    "str_ptr2": 1,
                    "temp_char_ptr2": 1,
                    "temp_pc_2": 1,
                    "var13": 2
                },
                "pcVar15": {
                    "char_ptr15": 1,
                    "char_ptr3": 2,
                    "char_ptr_var15": 2,
                    "pc_var15": 3,
                    "pc_var3": 4,
                    "pointer5": 3,
                    "pointer_char3": 1,
                    "pointer_var15": 1,
                    "pointer_var3": 1,
                    "pointer_var5": 2,
                    "ptr2": 1,
                    "ptr5": 2,
                    "ptr_char3": 2,
                    "ptr_var5": 1,
                    "str_ptr3": 1,
                    "temp_char_ptr3": 1,
                    "temp_pc_3": 1,
                    "var15": 2
                },
                "sVar9": {
                    "size": 8,
                    "size_value1": 1,
                    "size_var": 6,
                    "size_var1": 2,
                    "size_var9": 10,
                    "str_len": 1,
                    "string_len": 1,
                    "string_length": 1,
                    "temp_size": 1
                },
                "savestring": {
                    "save_string": 1
                },
                "stab_bad_demangle": {
                    "handle_bad_demangle": 1
                },
                "stab_demangle_count": {
                    "get_demangle_count": 1
                },
                "stab_demangle_get_count": {
                    "get_demangle_count": 1
                },
                "stab_demangle_type_lto_priv_0": {
                    "demangle_lto_type": 1
                },
                "strlen": {
                    "get_string_length": 1
                },
                "strstr": {
                    "find_sub_string": 1
                },
                "uVar12": {
                    "output2": 1,
                    "output_ptr": 1,
                    "ptr_result": 1,
                    "result1": 1,
                    "result2": 3,
                    "result_ptr": 1,
                    "result_var12": 1,
                    "return_string": 1,
                    "return_val2": 1,
                    "return_value2": 1,
                    "temp_uint2": 1,
                    "u_value1": 1,
                    "u_var": 1,
                    "u_var1": 2,
                    "u_var12": 3,
                    "uint3": 1,
                    "uint_var12": 6,
                    "unknown_var": 1,
                    "unknown_var2": 1,
                    "unsigned_var12": 1,
                    "var12": 1
                },
                "uVar20": {
                    "count": 2,
                    "count_var": 1,
                    "counter": 1,
                    "counter_var": 1,
                    "index": 1,
                    "loop_count": 1,
                    "temp_uint3": 1,
                    "uint2": 3,
                    "uint4": 1,
                    "uint_value2": 1,
                    "uint_var1": 1,
                    "uint_var2": 7,
                    "uint_var20": 9,
                    "unsigned_var20": 1
                },
                "uVar21": {
                    "count": 1,
                    "count_total": 1,
                    "temp_ulong1": 1,
                    "ulong1": 4,
                    "ulong_value": 2,
                    "ulong_value1": 1,
                    "ulong_var": 10,
                    "ulong_var1": 2,
                    "ulong_var21": 8,
                    "unsigned_var21": 1
                },
                "uVar6": {
                    "count": 1,
                    "result": 12,
                    "result_count": 1,
                    "return_val": 2,
                    "return_value": 6,
                    "uint1": 1,
                    "uint_var6": 6,
                    "unknown_var1": 1,
                    "unsigned_var6": 1
                },
                "uVar8": {
                    "count": 1,
                    "num": 1,
                    "temp_uint": 1,
                    "temp_uint1": 1,
                    "uint1": 4,
                    "uint2": 1,
                    "uint_value1": 1,
                    "uint_var": 9,
                    "uint_var1": 2,
                    "uint_var8": 9,
                    "unsigned_var8": 1
                }
            },
            "called": [
                "FUN_00109a0b",
                "FUN_0010c95e",
                "FUN_001048f0",
                "FUN_001040a0",
                "FUN_00104270",
                "FUN_001048c0",
                "FUN_00108e76",
                "FUN_00104320",
                "FUN_00108ea1",
                "FUN_001046b0",
                "FUN_0010911f"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d559"
            ],
            "code": "\nundefined4 parse_and_demangle_string_0010d21c(undefined8 param1,byte **param2,undefined8 *param3)\n\n{\n  byte byte_var1;\n  byte *byte_ptr;\n  byte byte_var3;\n  char char_var4;\n  byte byte_var5;\n  undefined4 result;\n  int int_var7;\n  uint uint_var;\n  size_t size_var9;\n  byte *byte_ptr2;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *pc_var1;\n  undefined8 uint_var12;\n  char *pc_var2;\n  byte byte_var14;\n  char *pc_var3;\n  byte byte_var16;\n  byte byte_var17;\n  byte byte_var18;\n  byte byte_var19;\n  uint uint_var20;\n  ulong ulong_var;\n  uint local_array [3];\n  \n  byte_ptr = *param2;\n  *param2 = byte_ptr + 1;\n  local_array[0] = get_demangle_count(param2);\n  ulong_var = (ulong)local_array[0];\n  if (local_array[0] != 0) {\n    byte_ptr2 = *param2;\n    size_var9 = get_string_length((char *)byte_ptr2);\n    if (ulong_var <= size_var9) {\n      *param2 = byte_ptr2 + ulong_var;\n      uint_var20 = 0;\n      result = get_demangle_count(param2,local_array);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (local_array[0] <= uint_var20) {\n          if (param3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)save_string(byte_ptr,(int)*param2 - (int)byte_ptr);\n          ptr2 = (void *)concatenate_strings(\"NoSuchStrinG__\",ptr1,0);\n          free_memory(ptr1);\n          haystack = (char *)demangle_string(ptr2,2);\n          free_memory(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (pc_var1 = find_sub_string(haystack,\"::NoSuchStrinG\"), pc_var2 = haystack,\n             pc_var3 = haystack, pc_var1 != (char *)0x0)) {\n            for (; pc_var2 != pc_var1; pc_var2 = pc_var2 + 1) {\n              if ((*pc_var2 != ' ') ||\n                 (((pc_var2[1] == '>' && (haystack < pc_var2)) && (pc_var2[-1] == '>')))) {\n                *pc_var3 = *pc_var2;\n                pc_var3 = pc_var3 + 1;\n              }\n            }\n            uint_var12 = save_string(haystack,(int)pc_var3 - (int)haystack);\n            *param3 = uint_var12;\n            free_memory(haystack);\n            return result;\n          }\n          handle_bad_demangle(byte_ptr);\n          free_memory(haystack);\n          return 0;\n        }\n        byte_ptr2 = *param2;\n        if (*byte_ptr2 != 0x5a) {\n          byte_var5 = demangle_lto_type(param1,param2,0);\n          if (byte_var5 == 0) {\n            return 0;\n          }\n          byte_var3 = 0;\n          byte_var14 = 0;\n          byte_var18 = 0;\n          byte_var17 = 0;\n          byte_var19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte_var16 = byte_var3;\n              byte_var1 = *byte_ptr2;\n              if ((byte_var14 | byte_var1 == 0) != 0) {\n                byte_var5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byte_var3 = byte_var5;\n              byte_var14 = byte_var5;\n            } while ('v' < (char)byte_var1);\n            if ((char)byte_var1 < 'b') {\n              if ((char)byte_var1 < 'U') {\n                if ((char)byte_var1 < 'C') goto LAB_0010d2e9;\n                ulong_var = 1L << (byte_var1 + 0xbd & 0x3f);\n                if ((ulong_var & 0x11409) == 0) {\n                  if ((ulong_var & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte_var1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte_var1 + 0xab)) goto LAB_0010d2e9;\n              byte_ptr2 = byte_ptr2 + 1;\n              byte_var3 = byte_var16;\n              byte_var14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte_var1) {\n            case 0x62:\n              byte_var3 = byte_var16;\n              byte_var18 = byte_var5;\n              break;\n            case 99:\n              byte_var3 = byte_var16;\n              byte_var19 = byte_var5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byte_var3 = byte_var16;\n              byte_var17 = byte_var5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort_execution();\n            }\n          } while( true );\n        }\n        *param2 = byte_ptr2 + 1;\n        char_var4 = demangle_lto_type(param1,param2,0);\n        if (char_var4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  handle_bad_demangle(byte_ptr);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte_var16 == 0) {\n    if (byte_var19 == 0) {\n      if (byte_var18 == 0) {\n        if (byte_var17 == 0) {\n          if (byte_var5 != 0) {\n            uint_var = get_demangle_count(param2);\n            if (uint_var == 0) goto LAB_0010d280;\n            *param2 = *param2 + uint_var;\n          }\n        }\n        else {\n          if (**param2 == 0x6d) {\n            *param2 = *param2 + 1;\n          }\n          while( true ) {\n            byte_ptr2 = *param2;\n            if (((&character_table)[(ulong)*byte_ptr2 * 2] & 4) == 0) break;\n            *param2 = byte_ptr2 + 1;\n          }\n          if (*byte_ptr2 == 0x2e) {\n            do {\n              byte_ptr2 = byte_ptr2 + 1;\n              *param2 = byte_ptr2;\n            } while (((&character_table)[(ulong)*byte_ptr2 * 2] & 4) != 0);\n          }\n          byte_ptr2 = *param2;\n          if (*byte_ptr2 == 0x65) {\n            do {\n              byte_ptr2 = byte_ptr2 + 1;\n              *param2 = byte_ptr2;\n            } while (((&character_table)[(ulong)*byte_ptr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uint_var = get_demangle_count(param2);\n        if (1 < uint_var) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param2 == 0x6d) {\n        *param2 = *param2 + 1;\n      }\n      int_var7 = get_demangle_count(param2);\n      if (int_var7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param2 == 0x6d) {\n      *param2 = *param2 + 1;\n    }\n    while (((&character_table)[(ulong)**param2 * 2] & 4) != 0) {\n      *param2 = *param2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uint_var20 = uint_var20 + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "current_name": "parse_and_demangle_string_0010d21c",
            "entrypoint": "0x0010d21c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d21c": "parse_and_demangle_string_0010d21c",
                "__haystack": "haystack",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "_sch_istable": "character_table",
                "abort": "abort_execution",
                "bVar1": "byte_var1",
                "bVar14": "byte_var14",
                "bVar16": "byte_var16",
                "bVar17": "byte_var17",
                "bVar18": "byte_var18",
                "bVar19": "byte_var19",
                "bVar3": "byte_var3",
                "bVar5": "byte_var5",
                "cVar4": "char_var4",
                "concat": "concatenate_strings",
                "cplus_demangle": "demangle_string",
                "free": "free_memory",
                "iVar7": "int_var7",
                "local_3c": "local_array",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pbVar10": "byte_ptr2",
                "pbVar2": "byte_ptr",
                "pcVar11": "pc_var1",
                "pcVar13": "pc_var2",
                "pcVar15": "pc_var3",
                "sVar9": "size_var9",
                "savestring": "save_string",
                "stab_bad_demangle": "handle_bad_demangle",
                "stab_demangle_count": "get_demangle_count",
                "stab_demangle_get_count": "get_demangle_count",
                "stab_demangle_type_lto_priv_0": "demangle_lto_type",
                "strlen": "get_string_length",
                "strstr": "find_sub_string",
                "uVar12": "uint_var12",
                "uVar20": "uint_var20",
                "uVar21": "ulong_var",
                "uVar6": "result",
                "uVar8": "uint_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d559": {
            "additional_data": {
                "FUN_0010d559": {
                    "decode_and_find_type": 2,
                    "decode_and_improve": 2,
                    "extract_tagged_type": 1,
                    "parse_data": 1,
                    "process_input": 1
                },
                "__nptr": {
                    "byte_pointer": 1,
                    "byte_pointer3": 2,
                    "byte_pointer_3": 2,
                    "byte_ptr": 2,
                    "byte_ptr2": 1,
                    "byte_ptr3": 2,
                    "byte_ptr_3": 2,
                    "byte_ptr_var_nptr": 1,
                    "number_pointer": 2,
                    "temp_pointer_2": 1
                },
                "__ptr": {
                    "new_string": 1,
                    "pointer": 2,
                    "pointer_ptr": 1,
                    "ptr": 2,
                    "ptr_string": 1,
                    "ptr_void": 1,
                    "string_pointer": 1,
                    "temp_pointer": 1,
                    "temp_void_ptr": 1,
                    "void_pointer": 8,
                    "void_pointer_variable": 1,
                    "void_ptr": 10
                },
                "__s1": {
                    "char_pointer2": 1,
                    "char_pointer_2": 1,
                    "char_ptr1": 1,
                    "char_ptr2": 1,
                    "char_ptr_2": 2,
                    "char_ptr_var_s1": 1,
                    "debug_type_name": 1,
                    "other_type_name": 1,
                    "str1": 1,
                    "str_ptr": 1,
                    "str_value": 1,
                    "str_var1": 1,
                    "string1": 4,
                    "string_1": 2,
                    "string_pointer": 4,
                    "string_ptr": 1,
                    "string_value": 1,
                    "string_variable": 1,
                    "temp_char_ptr_2": 1,
                    "temp_name": 1,
                    "type_name": 1,
                    "type_name_2": 1
                },
                "bVar1": {
                    "byte_val": 3,
                    "byte_value": 14,
                    "byte_var": 1,
                    "byte_var1": 2,
                    "byte_variable": 1,
                    "current_byte_value": 1,
                    "first_byte": 7,
                    "first_char": 1,
                    "temp_byte": 1
                },
                "cVar3": {
                    "char_result": 1,
                    "char_val": 2,
                    "char_value": 16,
                    "char_var": 3,
                    "char_var3": 1,
                    "char_variable": 1,
                    "character": 3,
                    "demangled_char": 1,
                    "result_char": 1,
                    "temp_char": 1,
                    "template_mangled": 1
                },
                "iVar5": {
                    "comparison_result": 3,
                    "index": 2,
                    "int_result": 1,
                    "int_val": 2,
                    "int_value": 14,
                    "int_var": 3,
                    "int_var5": 1,
                    "integer_value": 1,
                    "integer_variable": 1,
                    "name_comparison_result": 1,
                    "result": 1,
                    "temp_int": 1
                },
                "lVar8": {
                    "long_result": 1,
                    "long_val": 2,
                    "long_value": 15,
                    "long_var": 2,
                    "long_var8": 1,
                    "long_variable": 1,
                    "output": 1,
                    "result": 4,
                    "result_long": 1,
                    "tagged_type_result": 1,
                    "temp_long": 1,
                    "type_match": 1
                },
                "local_40": {
                    "arguments_array": 1,
                    "array_of_chars": 1,
                    "char_array": 3,
                    "local_array": 6,
                    "local_array40": 1,
                    "local_char_array_variable": 1,
                    "local_str_array": 1,
                    "local_string_array": 3,
                    "local_type_array": 1,
                    "local_var2": 1,
                    "local_var_40": 1,
                    "local_var_array": 1,
                    "local_variable_2": 1,
                    "string_array": 1,
                    "string_array_2": 1,
                    "temp_char_array": 1,
                    "temp_string_array": 2,
                    "type_name_string_array": 1
                },
                "local_64": {
                    "count": 1,
                    "count_down": 1,
                    "counter": 4,
                    "counter_value": 1,
                    "int_var2": 1,
                    "local_count": 2,
                    "local_counter": 1,
                    "local_index": 1,
                    "local_int": 1,
                    "local_integer": 1,
                    "local_integer_variable": 1,
                    "local_val1": 1,
                    "local_value": 2,
                    "local_value1": 1,
                    "local_value_1": 1,
                    "local_var1": 2,
                    "local_var64": 1,
                    "local_var_1": 2,
                    "local_var_64": 1,
                    "local_variable_1": 1,
                    "loop_counter": 2
                },
                "param_1": {
                    "arg1": 1,
                    "array": 2,
                    "function_parameters": 1,
                    "input_array": 14,
                    "input_data": 1,
                    "input_parameters": 1,
                    "input_pointer": 1,
                    "original_array": 1,
                    "param": 2,
                    "param_array": 4,
                    "param_list": 1,
                    "parameter1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "byte_array": 5,
                    "byte_array_pointer": 1,
                    "byte_array_ptr": 2,
                    "byte_pointers": 1,
                    "data_pointer": 1,
                    "input_byte": 1,
                    "input_byte_array": 2,
                    "input_byte_ptr": 1,
                    "input_bytes": 2,
                    "input_data": 2,
                    "input_pointer": 2,
                    "input_ptr": 1,
                    "input_string": 2,
                    "input_strings": 1,
                    "original_pointer": 1,
                    "param_string": 1,
                    "parameter2": 1,
                    "pointer": 1,
                    "pointer_array": 1
                },
                "param_3": {
                    "arg3": 1,
                    "count": 2,
                    "count_pointer": 1,
                    "length": 1,
                    "length_array": 3,
                    "long_array_ptr": 1,
                    "long_pointers": 1,
                    "output_array": 1,
                    "output_array_size": 1,
                    "output_count": 1,
                    "output_length": 2,
                    "output_long_ptr": 1,
                    "output_pointer": 1,
                    "output_size": 3,
                    "output_sizes": 1,
                    "output_value": 3,
                    "param_count": 1,
                    "parameter3": 1,
                    "result": 2,
                    "result_ptr": 1,
                    "tagged_type_count": 1
                },
                "pbVar11": {
                    "byte_pointer": 1,
                    "byte_pointer2": 5,
                    "byte_pointer_2": 4,
                    "byte_pointer_variable2": 1,
                    "byte_ptr1": 2,
                    "byte_ptr2": 3,
                    "byte_ptr_2": 4,
                    "byte_ptr_var11": 1,
                    "data_ptr_2": 1,
                    "new_byte_pointer": 1,
                    "new_byte_ptr": 1,
                    "next_byte": 1,
                    "next_string": 1,
                    "ptr_byte2": 1,
                    "ptr_to_next_string": 1,
                    "temp_byte": 1,
                    "temp_byte_ptr_2": 1,
                    "updated_byte_pointer": 1
                },
                "pbVar2": {
                    "byte_pointer": 11,
                    "byte_pointer_variable": 1,
                    "byte_ptr": 9,
                    "byte_ptr_var2": 1,
                    "current_byte": 2,
                    "current_byte_pointer": 1,
                    "current_byte_ptr": 1,
                    "current_string": 1,
                    "data_ptr": 1,
                    "ptr_byte": 1,
                    "ptr_to_string": 1,
                    "temp_byte_ptr": 1
                },
                "pcVar10": {
                    "char_pointer": 10,
                    "char_pointer_variable": 1,
                    "char_ptr": 10,
                    "char_ptr_value": 1,
                    "char_ptr_var10": 1,
                    "character_pointer": 1,
                    "ptr_char": 1,
                    "string_match": 1,
                    "temp_char_ptr": 1,
                    "type_name": 4
                },
                "plVar9": {
                    "fields_array": 1,
                    "fields_list": 1,
                    "fields_pointer": 1,
                    "fields_ptr": 1,
                    "long_array_ptr": 1,
                    "long_pointer": 10,
                    "long_pointer_variable": 1,
                    "long_ptr": 7,
                    "long_ptr1": 1,
                    "long_ptr_var9": 1,
                    "pointer_array": 2,
                    "pointer_long": 1,
                    "ptr_long": 1,
                    "temp_long_ptr": 1
                },
                "ppcVar6": {
                    "array_ptr": 1,
                    "char_array_pointer": 1,
                    "char_array_ptr_ptr": 1,
                    "char_double_pointer": 2,
                    "char_double_pointer_variable": 1,
                    "char_pointer_pointer": 3,
                    "char_pointer_ptr": 1,
                    "char_ptr_ptr": 5,
                    "char_ptr_ptr_var6": 1,
                    "demangled_string": 1,
                    "double_ptr": 1,
                    "name": 1,
                    "pointer_array": 1,
                    "pointer_pointer": 1,
                    "ptr_ptr_char": 1,
                    "str_ptr_array": 1,
                    "string_array": 3,
                    "string_array_pointer": 1,
                    "temp_char_ptr_ptr": 1,
                    "temp_pointer": 1,
                    "temp_string_array": 1,
                    "type_array": 1
                },
                "sVar7": {
                    "length": 3,
                    "name_length": 1,
                    "size": 6,
                    "size_result": 1,
                    "size_val": 2,
                    "size_value": 9,
                    "size_var": 1,
                    "size_var7": 1,
                    "size_variable": 1,
                    "string_length": 4,
                    "string_size": 1,
                    "temp_size": 1
                },
                "uVar12": {
                    "result_flag": 1,
                    "search_type": 1,
                    "tag": 1,
                    "tagged_type": 1,
                    "temp_uint_2": 1,
                    "temp_variable": 1,
                    "u_var": 1,
                    "uint_result_2": 1,
                    "uint_value1": 1,
                    "uint_value2": 1,
                    "uint_value_2": 3,
                    "uint_var1": 1,
                    "uint_var12": 1,
                    "uint_var2": 2,
                    "undefined8_val": 1,
                    "undefined8_value": 6,
                    "undefined_val": 1,
                    "undefined_value": 1,
                    "unknown_value": 1,
                    "unsigned_value_2": 1,
                    "unsigned_variable2": 1,
                    "value": 1,
                    "variable": 1
                },
                "uVar4": {
                    "count": 3,
                    "demangled_count": 2,
                    "result_uint": 1,
                    "temp_uint": 1,
                    "type_count": 1,
                    "uint_result": 1,
                    "uint_val": 2,
                    "uint_value": 14,
                    "uint_var": 3,
                    "uint_var4": 1,
                    "unsigned_value": 1,
                    "unsigned_variable": 1
                }
            },
            "called": [
                "FUN_00109a0b",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_0010914e",
                "FUN_00108e76",
                "FUN_001129f4",
                "FUN_00113b1e",
                "FUN_0010911f",
                "FUN_00104510",
                "FUN_00104470",
                "FUN_0010d21c",
                "FUN_0010afd5"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 decode_and_find_type_0010d559(undefined8 *input_array,byte **byte_array,long *output_size)\n\n{\n  byte byte_value;\n  byte *byte_pointer;\n  char char_value;\n  uint uint_value;\n  int int_value;\n  char **char_ptr_ptr;\n  size_t size_value;\n  long long_value;\n  long *long_pointer;\n  char *char_pointer;\n  char *string1;\n  void *void_ptr;\n  byte *byte_pointer2;\n  undefined8 undefined8_value;\n  byte *byte_pointer_3;\n  int counter;\n  char *local_array [2];\n  \n  byte_pointer = *byte_array;\n  byte_value = byte_pointer[1];\n  if ((char)byte_value < ':') {\n    if ((char)byte_value < '1') goto LAB_0010d5d8;\n    counter = (char)byte_value + -0x30;\n    if (byte_pointer[2] == 0x5f) {\n      *byte_array = byte_pointer + 1;\n    }\n    byte_pointer2 = *byte_array + 2;\n  }\n  else {\n    if (((byte_value != 0x5f) || (((&_sch_istable)[(ulong)byte_pointer[2] * 2] & 4) == 0)) ||\n       (byte_pointer[2] == 0x30)) goto LAB_0010d5d8;\n    byte_pointer_3 = byte_pointer + 2;\n    long_value = strtol((char *)byte_pointer_3,(char **)0x0,10);\n    counter = (int)long_value;\n    while (((&_sch_istable)[(ulong)*byte_pointer_3 * 2] & 4) != 0) {\n      byte_pointer_3 = byte_pointer_3 + 1;\n    }\n    byte_pointer2 = byte_pointer_3 + 1;\n    if (*byte_pointer_3 != 0x5f) goto LAB_0010d5d8;\n  }\n  *byte_array = byte_pointer2;\n  char_ptr_ptr = (char **)0x0;\n  if (output_size != (long *)0x0) {\n    char_ptr_ptr = local_array;\n  }\n  long_value = 0;\n  while( true ) {\n    while( true ) {\n      counter = counter + -1;\n      if (counter == -1) {\n        if (output_size != (long *)0x0) {\n          *output_size = long_value;\n        }\n        return 1;\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n      }\n      if (**byte_array != 0x74) break;\n      char_value = stab_demangle_template(input_array,byte_array,char_ptr_ptr);\n      char_pointer = local_array[0];\n      if (char_value == '\\0') {\n        return 0;\n      }\n      if (output_size != (long *)0x0) {\n        size_value = strlen(local_array[0]);\n        long_value = stab_find_tagged_type(*input_array,input_array[1],char_pointer,size_value & 0xffffffff,9);\n        free(char_pointer);\n        if (long_value == 0) {\n          return 0;\n        }\n      }\n    }\n    uint_value = stab_demangle_count(byte_array);\n    size_value = strlen((char *)*byte_array);\n    if (size_value < uint_value) break;\n    if (output_size != (long *)0x0) {\n      if ((long_value != 0) && (long_pointer = (long *)debug_get_fields_isra_0(long_value), long_pointer != (long *)0x0))\n      {\n        char_pointer = (char *)savestring(*byte_array,uint_value);\n        for (; long_value = *long_pointer, long_value != 0; long_pointer = long_pointer + 1) {\n          long_value = *(long *)(long_value + 8);\n          if (long_value == 0) {\n            free(char_pointer);\n            return 0;\n          }\n          string1 = (char *)debug_get_type_name_constprop_0(long_value);\n          if ((string1 != (char *)0x0) && (int_value = strcmp(string1,char_pointer), int_value == 0)) break;\n        }\n        free(char_pointer);\n        if (long_value != 0) goto LAB_0010d7ad;\n      }\n      undefined8_value = 9;\n      if (counter == 0) {\n        void_ptr = (void *)savestring(*byte_array,uint_value);\n        long_value = debug_find_named_type(*input_array,void_ptr);\n        free(void_ptr);\n        if (long_value != 0) goto LAB_0010d7ad;\n        undefined8_value = 0;\n      }\n      long_value = stab_find_tagged_type(*input_array,input_array[1],*byte_array,uint_value,undefined8_value);\n      if (long_value == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *byte_array = *byte_array + uint_value;\n  }\nLAB_0010d5d8:\n  stab_bad_demangle(byte_pointer);\n  return 0;\n}\n\n",
            "current_name": "decode_and_find_type_0010d559",
            "entrypoint": "0x0010d559",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d559": "decode_and_find_type_0010d559",
                "__nptr": "byte_pointer_3",
                "__ptr": "void_ptr",
                "__s1": "string1",
                "bVar1": "byte_value",
                "cVar3": "char_value",
                "iVar5": "int_value",
                "lVar8": "long_value",
                "local_40": "local_array",
                "local_64": "counter",
                "param_1": "input_array",
                "param_2": "byte_array",
                "param_3": "output_size",
                "pbVar11": "byte_pointer2",
                "pbVar2": "byte_pointer",
                "pcVar10": "char_pointer",
                "plVar9": "long_pointer",
                "ppcVar6": "char_ptr_ptr",
                "sVar7": "size_value",
                "uVar12": "undefined8_value",
                "uVar4": "uint_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d7d4": {
            "additional_data": {
                "FUN_0010d7d4": {
                    "decode_and_remember_type": 1,
                    "demangle_and_remember_type": 12,
                    "demangle_and_remember_types": 1,
                    "demangled_type_remember_and_store": 1,
                    "extract_and_remember_types": 1,
                    "parse_and_process_input": 1,
                    "parse_and_store_type_information": 1,
                    "parse_and_store_types": 1,
                    "parse_stab_demangle_type": 1,
                    "parse_type_and_remember": 1,
                    "process_and_remember_type": 1,
                    "process_and_store_type": 1,
                    "process_data": 1,
                    "process_demangled_type": 1,
                    "process_type_and_remember": 1,
                    "reverse_and_remember_type": 1
                },
                "cVar2": {
                    "char_1": 1,
                    "char_result": 1,
                    "char_value": 1,
                    "char_var": 2,
                    "character": 1,
                    "demangle_result": 3,
                    "result": 14,
                    "result1": 1,
                    "result_char": 1,
                    "result_flag": 1,
                    "success": 1,
                    "success_indicator": 1,
                    "type_demangled": 1,
                    "type_success": 1,
                    "type_successful": 1
                },
                "lVar4": {
                    "allocated_memory": 4,
                    "buffer_value": 1,
                    "current_size": 1,
                    "current_type": 1,
                    "data": 1,
                    "data_size": 1,
                    "local_var4": 1,
                    "old_output_array": 1,
                    "old_output_value": 1,
                    "realloc_array": 1,
                    "realloc_data": 1,
                    "realloc_result": 2,
                    "size_of_local_array": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_value": 1,
                    "temp_var": 3,
                    "temp_var1": 1,
                    "temp_variable": 1,
                    "type_array": 1,
                    "value2": 1,
                    "value_3": 1,
                    "var2": 1,
                    "var4": 1
                },
                "local_40": {
                    "arr1": 1,
                    "demangled_data": 1,
                    "local_array": 7,
                    "local_array2": 3,
                    "local_array_of_long": 1,
                    "local_data": 1,
                    "local_values": 1,
                    "result_array": 1,
                    "stored_values_array": 1,
                    "temp_array": 3,
                    "temp_array_elements": 1,
                    "temp_output": 1,
                    "temp_type_array": 1,
                    "temporary_storage": 1,
                    "tmp_buffer": 1,
                    "type": 1,
                    "type_array": 1,
                    "type_buffer": 1,
                    "type_data": 1,
                    "types": 1
                },
                "param_1": {
                    "arg1": 2,
                    "first_argument": 1,
                    "input1": 2,
                    "input_buffer": 1,
                    "input_param": 7,
                    "input_param1": 1,
                    "input_param_1": 2,
                    "input_value": 2,
                    "param1": 5,
                    "param_1": 4,
                    "param_address": 3,
                    "param_ptr1": 1
                },
                "param_2": {
                    "arg2": 2,
                    "input2": 2,
                    "input_array": 2,
                    "input_buffer": 2,
                    "input_length": 1,
                    "input_param2": 1,
                    "input_param_2": 2,
                    "input_ptr": 2,
                    "output_param": 2,
                    "param2": 5,
                    "param_2": 3,
                    "param_ptr2": 1,
                    "param_value": 2,
                    "ptr_1": 1,
                    "second_argument": 1,
                    "type_param": 1,
                    "type_string": 1
                },
                "param_3": {
                    "arg3": 2,
                    "array_param": 1,
                    "buffer_param": 1,
                    "input_param_3": 1,
                    "output1": 2,
                    "output_array": 3,
                    "output_data": 1,
                    "output_param": 1,
                    "output_param1": 1,
                    "output_param_1": 1,
                    "output_ptr": 1,
                    "output_types": 1,
                    "param3": 5,
                    "param_3": 2,
                    "param_ptr3": 1,
                    "ptr_2": 1,
                    "result_data": 1,
                    "third_argument": 1,
                    "type_array": 4
                },
                "param_4": {
                    "arg4": 2,
                    "count": 1,
                    "count_before": 1,
                    "count_param": 2,
                    "count_ptr": 3,
                    "counter1": 2,
                    "fourth_argument": 1,
                    "index_counter": 1,
                    "index_param": 1,
                    "input_array_size": 1,
                    "input_param_4": 1,
                    "num_types": 2,
                    "output_array_length": 1,
                    "output_param2": 1,
                    "output_param_2": 1,
                    "param4": 5,
                    "param_4": 2,
                    "param_ptr4": 1,
                    "ptr_3": 1,
                    "type_counter": 1
                },
                "param_5": {
                    "arg5": 2,
                    "capacity": 1,
                    "capacity_param": 1,
                    "capacity_ptr": 1,
                    "count_after": 1,
                    "counter2": 2,
                    "current_capacity": 1,
                    "fifth_argument": 1,
                    "input_param_5": 1,
                    "max_num_types": 2,
                    "output_array_capacity": 1,
                    "output_array_size": 1,
                    "output_param3": 1,
                    "output_param_3": 1,
                    "param5": 5,
                    "param_5": 2,
                    "param_ptr5": 1,
                    "ptr_4": 1,
                    "realloc_count_ptr": 1,
                    "size_param": 1,
                    "total_count_ptr": 1,
                    "total_param": 1,
                    "type_capacity": 1
                },
                "plVar5": {
                    "buffer_ptr": 1,
                    "data_array": 1,
                    "local_array": 9,
                    "local_memory": 2,
                    "local_ptr": 1,
                    "local_type_array": 2,
                    "local_var5": 1,
                    "output": 1,
                    "output_ptr": 1,
                    "pointer_array": 1,
                    "pointer_to_local": 1,
                    "ptr_5": 1,
                    "temp_arr": 1,
                    "temp_array": 2,
                    "temp_array_ptr": 1,
                    "temp_data_ptr": 1,
                    "tmp_output_types": 1,
                    "type_array_ptr": 2,
                    "var5": 1
                },
                "stab_demangle_remember_type": {
                    "remember_type": 3
                },
                "stab_demangle_type_lto_priv_0": {
                    "demangle_type": 3
                },
                "uVar1": {
                    "current_addr": 1,
                    "current_address": 1,
                    "first_byte": 1,
                    "first_elem_input_array": 1,
                    "first_element": 1,
                    "first_param": 1,
                    "first_value": 4,
                    "input_value": 3,
                    "original_value": 1,
                    "ptr1": 2,
                    "start": 1,
                    "start_address": 2,
                    "temp1": 1,
                    "value": 3,
                    "value1": 3,
                    "value_1": 2,
                    "var1": 3
                },
                "uVar3": {
                    "func_result": 1,
                    "remember_type_result": 1,
                    "remembered_result": 2,
                    "remembered_type": 3,
                    "result": 5,
                    "result2": 1,
                    "result_value": 1,
                    "ret_val": 1,
                    "return_val": 1,
                    "return_value": 7,
                    "status": 1,
                    "type_remembered": 2,
                    "type_result": 3,
                    "value_2": 1,
                    "var3": 1
                },
                "uVar6": {
                    "count": 5,
                    "count_value": 2,
                    "index": 2,
                    "new_capacity": 2,
                    "new_count": 2,
                    "new_counter": 1,
                    "new_index": 1,
                    "new_value": 1,
                    "temp2": 1,
                    "temp_num_types": 1,
                    "temp_value": 1,
                    "temp_var2": 2,
                    "type_index": 1,
                    "updated_count": 1,
                    "value2": 1,
                    "value_4": 1,
                    "var3": 1
                },
                "xrealloc": {
                    "expand_memory": 1,
                    "realloc": 1,
                    "resize_memory": 1
                }
            },
            "called": [
                "FUN_0010c95e",
                "FUN_00109be3",
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_0010d882"
            ],
            "code": "\nundefined4\ndemangle_and_remember_type_0010d7d4(undefined8 input_param,undefined8 *param2,long *param3,uint *param4,uint *param5)\n\n{\n  undefined8 first_value;\n  char result;\n  undefined4 return_value;\n  long allocated_memory;\n  long *local_array;\n  uint count;\n  long local_array [2];\n  \n  first_value = *param2;\n  local_array = local_array;\n  if (param3 == (long *)0x0) {\n    local_array = (long *)0x0;\n  }\n  result = demangle_type(input_param,param2,local_array);\n  if ((result != '\\0') &&\n     (return_value = remember_type(input_param,first_value,(int)*param2 - (int)first_value),\n     (char)return_value != '\\0')) {\n    if (param3 == (long *)0x0) {\n      return return_value;\n    }\n    if (local_array[0] != 0) {\n      if (*param5 <= *param4 + 1) {\n        count = *param5 + 10;\n        allocated_memory = *param3;\n        *param5 = count;\n        allocated_memory = realloc(allocated_memory,(ulong)count << 3);\n        *param3 = allocated_memory;\n      }\n      count = *param4;\n      *(long *)(*param3 + (ulong)count * 8) = local_array[0];\n      *param4 = count + 1;\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "demangle_and_remember_type_0010d7d4",
            "entrypoint": "0x0010d7d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d7d4": "demangle_and_remember_type_0010d7d4",
                "cVar2": "result",
                "lVar4": "allocated_memory",
                "local_40": "local_array",
                "param_1": "input_param",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "plVar5": "local_array",
                "stab_demangle_remember_type": "remember_type",
                "stab_demangle_type_lto_priv_0": "demangle_type",
                "uVar1": "first_value",
                "uVar3": "return_value",
                "uVar6": "count",
                "xrealloc": "realloc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d882": {
            "additional_data": {
                "FUN_0010d882": {
                    "decode_and_extract_arguments": 1,
                    "demangle": 1,
                    "demangle_and_allocate_memory": 1,
                    "demangle_and_extract_args": 2,
                    "demangle_and_extract_arguments": 3,
                    "demangle_and_extract_params": 1,
                    "demangle_arguments": 1,
                    "demangle_function_name": 2,
                    "demangle_stab_entries": 1,
                    "demangle_stab_string": 2,
                    "demangle_stab_symbol": 1,
                    "demangled_function": 1,
                    "extract_and_demangle_stab_names": 1,
                    "parse_and_demangle": 1,
                    "parse_arguments": 1,
                    "parse_function": 1,
                    "parse_stab_entries": 1,
                    "process_demangled_string": 1,
                    "process_symbol": 1,
                    "reverse_decompiled_code": 1
                },
                "bVar7": {
                    "boolean_value": 2,
                    "boolean_var": 1,
                    "condition": 1,
                    "flag_check": 1,
                    "is_count_positive": 1,
                    "is_last_arg": 1,
                    "is_looping": 2,
                    "is_not_zero": 2,
                    "is_positive": 1,
                    "is_remaining": 1,
                    "is_true": 1,
                    "is_valid": 3,
                    "iteration_flag": 1,
                    "loop_condition": 6,
                    "loop_flag": 2
                },
                "cVar3": {
                    "curr_char": 1,
                    "current": 1,
                    "current_char": 14,
                    "current_char_value": 3,
                    "current_character": 3,
                    "current_letter": 1,
                    "current_symbol": 2,
                    "entry_type": 1
                },
                "iVar1": {
                    "count": 9,
                    "counter": 2,
                    "iteration": 1,
                    "iteration_count": 3,
                    "iteration_counter": 3,
                    "loop_count": 2,
                    "loop_counter": 1,
                    "remaining_args": 1,
                    "remaining_entries": 1,
                    "temp_var1": 1
                },
                "lVar4": {
                    "allocated_buffer": 2,
                    "allocated_mem": 2,
                    "allocated_memory": 21,
                    "dynamic_mem": 1,
                    "memory_allocation": 1
                },
                "local_40": {
                    "arg_array": 1,
                    "arg_buffer": 4,
                    "arg_list": 2,
                    "arg_storage": 2,
                    "arg_temp": 1,
                    "arg_value": 1,
                    "arg_values": 1,
                    "argument_buffer": 1,
                    "arguments": 2,
                    "component_array": 1,
                    "extracted_params": 1,
                    "local_array": 1,
                    "nested_calls_array": 1,
                    "nested_params": 1,
                    "result_array": 1,
                    "temp_array": 5,
                    "temp_buffer": 1,
                    "temp_values_array": 1,
                    "value_array": 1
                },
                "local_44": {
                    "arg_count": 3,
                    "arg_remaining": 1,
                    "count_var": 1,
                    "counter2": 1,
                    "counter_copy": 1,
                    "demangle_count": 1,
                    "flag": 1,
                    "inner_loop_count": 1,
                    "inner_loop_var": 1,
                    "is_struct": 1,
                    "iteration_counter": 1,
                    "local_iteration": 1,
                    "loop_count": 4,
                    "loop_count2": 1,
                    "loop_count_backup": 1,
                    "loop_counter": 3,
                    "nested_count": 2,
                    "repeat_count": 1,
                    "temp_counter": 1,
                    "temp_value_3": 1,
                    "temporary_counter": 1,
                    "type_count": 1,
                    "value_iteration": 1
                },
                "local_48": {
                    "arg_count": 4,
                    "arg_index": 1,
                    "count": 5,
                    "counter": 1,
                    "demangle_count": 2,
                    "entry_count": 1,
                    "index": 2,
                    "index2": 1,
                    "index3": 1,
                    "index_var2": 1,
                    "inner_count": 1,
                    "local_count": 1,
                    "local_counter_c": 1,
                    "num_args": 1,
                    "param_count": 1,
                    "param_limit": 1,
                    "temp_count": 2,
                    "temp_value_2": 1,
                    "type_index": 1,
                    "type_length": 1,
                    "value_index": 1
                },
                "local_4c": {
                    "arg_count": 2,
                    "arg_size": 1,
                    "arg_status": 1,
                    "arg_value": 1,
                    "base": 2,
                    "buffer_size": 1,
                    "constant": 1,
                    "constant_10": 1,
                    "constant_value": 2,
                    "constant_var1": 1,
                    "count": 4,
                    "index2": 1,
                    "local_counter_b": 1,
                    "local_flag": 1,
                    "loop_flag2": 1,
                    "max_count": 1,
                    "name_length": 2,
                    "temp_val": 1,
                    "temp_value": 2,
                    "value": 1
                },
                "local_50": {
                    "arg_count": 4,
                    "arg_index": 2,
                    "arg_index_counter": 1,
                    "arg_offset": 1,
                    "buffer_index": 1,
                    "char_index": 1,
                    "counter": 1,
                    "entry_idx": 1,
                    "entry_index": 1,
                    "index": 4,
                    "index1": 2,
                    "index_var1": 1,
                    "input_offset": 1,
                    "local_counter_a": 1,
                    "name_index": 1,
                    "offset": 3,
                    "param_count": 1,
                    "string_length": 1,
                    "string_offset": 1,
                    "symbol_count": 1,
                    "total_args": 1
                },
                "param_1": {
                    "arg1": 1,
                    "entry_pointer": 1,
                    "function_address": 1,
                    "function_ptr": 1,
                    "input": 5,
                    "input_long": 1,
                    "input_param": 4,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "input_str": 1,
                    "input_value": 2,
                    "param": 1,
                    "param1": 1,
                    "param_1": 3,
                    "param_addr": 1,
                    "param_base_address": 1,
                    "param_device": 1,
                    "param_pointer": 1,
                    "param_struct": 1,
                    "symbol_table": 1,
                    "unknown_ptr": 1
                },
                "param_2": {
                    "arg2": 1,
                    "arg_str_ptr": 1,
                    "arg_string": 1,
                    "arguments": 2,
                    "argv": 1,
                    "char_array_ptr": 1,
                    "demangled_name": 1,
                    "entry_pointer_start": 1,
                    "input_array": 1,
                    "input_list": 1,
                    "input_string": 4,
                    "input_string_array": 1,
                    "input_strings": 1,
                    "param2": 1,
                    "param_2": 1,
                    "param_array": 1,
                    "param_entry": 1,
                    "stab_names": 1,
                    "stab_string": 1,
                    "str": 1,
                    "str_ptr": 1,
                    "string_array": 4,
                    "symbol_name": 1,
                    "symbol_str": 1
                },
                "param_3": {
                    "arg3": 1,
                    "arg_value_ptr": 1,
                    "demangled_names": 1,
                    "entry_size": 1,
                    "output": 3,
                    "output_args": 1,
                    "output_array": 2,
                    "output_buffer": 3,
                    "output_long_pointer": 1,
                    "output_param": 3,
                    "output_param_ptr": 1,
                    "output_pointer": 5,
                    "output_ptr": 3,
                    "output_string": 1,
                    "output_value": 1,
                    "param3": 1,
                    "param_3": 1,
                    "param_output": 1
                },
                "param_4": {
                    "arg4": 1,
                    "error_code_ptr": 1,
                    "error_flag": 2,
                    "flag": 6,
                    "flag_param": 3,
                    "flag_pointer": 3,
                    "flag_ptr": 5,
                    "flag_value": 1,
                    "found_end": 1,
                    "is_empty": 1,
                    "is_extern": 1,
                    "is_last": 1,
                    "output_undefined_pointer": 1,
                    "param4": 1,
                    "param_4": 1,
                    "param_flag": 1,
                    "temp": 1
                },
                "param_5": {
                    "another_flag_pointer": 1,
                    "arg5": 1,
                    "count": 3,
                    "count_param": 2,
                    "count_pointer": 1,
                    "count_ptr": 5,
                    "counter": 1,
                    "deprecated": 1,
                    "entry_type": 1,
                    "is_type": 1,
                    "param5": 1,
                    "param_4": 1,
                    "param_5": 1,
                    "param_count": 1,
                    "temp_flag": 1,
                    "temp_value": 1,
                    "unused": 1,
                    "unused_param": 1
                },
                "pcVar2": {
                    "arg_ptr": 1,
                    "current_argument": 1,
                    "current_char": 15,
                    "current_char_ptr": 1,
                    "current_entry": 1,
                    "current_name": 1,
                    "current_string": 3,
                    "entry": 1,
                    "name_ptr": 1,
                    "param_string": 1
                },
                "pcVar5": {
                    "args_array_ptr": 1,
                    "current_arg": 1,
                    "current_char": 6,
                    "current_char2": 1,
                    "current_entry": 1,
                    "current_name": 1,
                    "current_param": 1,
                    "current_pos": 1,
                    "current_position": 2,
                    "current_ptr": 1,
                    "current_string": 6,
                    "current_string2": 1,
                    "name_ptr_temp": 1,
                    "str_ptr": 2,
                    "temp_string": 1
                },
                "stab_bad_demangle": {
                    "handle_bad_demangle": 1
                },
                "stab_demangle_arg": {
                    "demangle_argument": 1
                },
                "stab_demangle_get_count": {
                    "get_type_or_size": 1
                },
                "uVar6": {
                    "arg_count": 1,
                    "arg_index": 1,
                    "char_count": 1,
                    "count": 3,
                    "count_value": 1,
                    "current_entry_idx": 1,
                    "current_value": 1,
                    "demangled_value": 1,
                    "entry_count": 1,
                    "index": 8,
                    "local_buffer_index": 1,
                    "numeric_value": 1,
                    "param_index": 1,
                    "str_index": 1,
                    "string_index": 1,
                    "symbol_index": 1,
                    "ulong_var": 1,
                    "unsigned_value": 1
                }
            },
            "called": [
                "FUN_0010d7d4",
                "FUN_00108ea1",
                "FUN_0010911f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 demangle_and_extract_arguments_0010d882(long input,char **input_string,long *output_pointer,undefined *flag)\n\n{\n  int count;\n  char *current_char;\n  char current_char;\n  long allocated_memory;\n  char *current_char;\n  ulong index;\n  bool loop_condition;\n  uint index;\n  undefined4 count;\n  uint count;\n  int loop_count;\n  undefined8 temp_array [2];\n  \n  current_char = *input_string;\n  count = 10;\n  if (output_pointer != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_pointer = allocated_memory;\n    *flag = 0;\n  }\n  index = 0;\n  while( true ) {\n    current_char = *input_string;\n    current_char = *current_char;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *input_string = current_char + 1;\n      if (current_char == 'T') {\n        loop_count = 1;\n      }\n      else {\n        current_char = get_type_or_size(input_string,&loop_count);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = get_type_or_size(input_string,&count);\n      if ((current_char == '\\0') || (*(uint *)(input + 0x28) <= count)) {\nLAB_0010d958:\n        handle_bad_demangle(current_char);\n        return 0;\n      }\n      index = (ulong)count;\n      while (count = loop_count + -1, loop_condition = loop_count != 0, loop_count = count, loop_condition) {\n        temp_array[0] = *(undefined8 *)(*(long *)(input + 0x20) + index * 0x10);\n        current_char = demangle_argument(input,temp_array,output_pointer,&index,&count);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = demangle_argument(input,input_string,output_pointer,&index,&count);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_pointer == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_pointer + (ulong)index * 8) = 0;\n    if (*current_char != 'e') goto LAB_0010d9fa;\n    *flag = 1;\n  }\n  current_char = current_char + 1;\n  *input_string = current_char;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_char >> 8),1);\n}\n\n",
            "current_name": "demangle_and_extract_arguments_0010d882",
            "entrypoint": "0x0010d882",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d882": "demangle_and_extract_arguments_0010d882",
                "bVar7": "loop_condition",
                "cVar3": "current_char",
                "iVar1": "count",
                "lVar4": "allocated_memory",
                "local_40": "temp_array",
                "local_44": "loop_count",
                "local_48": "count",
                "local_4c": "count",
                "local_50": "index",
                "param_1": "input",
                "param_2": "input_string",
                "param_3": "output_pointer",
                "param_4": "flag",
                "pcVar2": "current_char",
                "pcVar5": "current_char",
                "stab_bad_demangle": "handle_bad_demangle",
                "stab_demangle_arg": "demangle_argument",
                "stab_demangle_get_count": "get_type_or_size",
                "uVar6": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010da0b": {
            "additional_data": {
                "FUN_0010da0b": {
                    "allocate_and_fill_data": 1,
                    "allocate_and_fill_memory": 1,
                    "allocate_and_fill_slots": 1,
                    "allocate_and_initialize": 1,
                    "allocate_and_initialize_array": 3,
                    "allocate_and_initialize_data": 1,
                    "allocate_and_initialize_memory": 2,
                    "allocate_and_initialize_slot": 10,
                    "allocate_and_initialize_slots": 9,
                    "allocate_and_set_slot": 1,
                    "allocate_slot": 1
                },
                "auVar7": {
                    "new_slot_address": 1,
                    "result": 20,
                    "result_array": 2,
                    "return_val": 2,
                    "return_value": 6
                },
                "bVar6": {
                    "b_var6": 1,
                    "byte_counter": 1,
                    "byte_value": 1,
                    "count": 1,
                    "counter": 1,
                    "counter_byte": 1,
                    "flag": 13,
                    "initialization_flag": 1,
                    "is_initialized": 1,
                    "is_zero": 1,
                    "loop_flag": 1,
                    "loop_variable": 1,
                    "offset_flag": 1,
                    "temp": 1,
                    "temp_byte": 3,
                    "temporary": 1,
                    "zero_flag": 1
                },
                "lVar3": {
                    "adjusted_slot_index": 2,
                    "buffer_size": 1,
                    "l_var3": 1,
                    "loop_counter1": 1,
                    "loop_var1": 1,
                    "num_slots_to_allocate": 1,
                    "offset": 13,
                    "remainder": 1,
                    "slot_offset": 10
                },
                "lVar4": {
                    "count": 2,
                    "counter": 8,
                    "index": 1,
                    "iterator": 1,
                    "l_var4": 3,
                    "loop_count": 2,
                    "loop_counter": 10,
                    "loop_counter2": 1,
                    "loop_var2": 1,
                    "num_slots_to_initialize": 1,
                    "temp": 1
                },
                "param_1": {
                    "array": 1,
                    "array_pointer": 2,
                    "data": 1,
                    "data_ptr": 1,
                    "memory_block": 1,
                    "memory_pointer": 1,
                    "pointer_to_pointer": 1,
                    "ptr_slot_array": 1,
                    "slot": 1,
                    "slot_array": 3,
                    "slot_array_ptr": 1,
                    "slot_list": 5,
                    "slot_pointer": 1,
                    "slot_ptr": 10,
                    "slots": 1
                },
                "param_2": {
                    "array_length": 1,
                    "array_size": 1,
                    "num_slots": 2,
                    "size": 2,
                    "slot_count": 1,
                    "slot_index": 24
                },
                "param_3": {
                    "arg1": 2,
                    "arg_3": 1,
                    "param3": 5,
                    "param_3": 20,
                    "unused_param_1": 1,
                    "unused_parameter": 1,
                    "var3": 1
                },
                "param_4": {
                    "arg2": 2,
                    "arg_4": 1,
                    "buffer_ptr": 1,
                    "param4": 5,
                    "param_4": 18,
                    "pointer_offset": 1,
                    "pointer_to_memory": 1,
                    "unused_param_2": 1,
                    "var4": 1
                },
                "plVar2": {
                    "allocated_data": 1,
                    "allocated_memory": 1,
                    "allocated_slot": 2,
                    "new_array": 3,
                    "new_data": 1,
                    "new_memory": 1,
                    "new_memory_block": 1,
                    "new_slot": 13,
                    "new_slot_array_ptr": 1,
                    "new_slot_ptr": 1,
                    "slot": 1,
                    "slot_ptr": 1,
                    "slot_ptr_new": 1,
                    "slot_ptr_temp": 2,
                    "slot_ptr_updated": 1
                },
                "uVar1": {
                    "err_msg": 1,
                    "error_message": 26,
                    "error_msg": 3
                },
                "uVar5": {
                    "remaining": 1,
                    "remaining_index": 2,
                    "remaining_length": 1,
                    "remaining_size": 2,
                    "remaining_slots": 16,
                    "size_counter": 1,
                    "slot_counter": 1,
                    "temp": 2,
                    "temp_count": 1,
                    "temp_index": 1,
                    "temp_size": 1,
                    "updated_slot_index": 2
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104240",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112a33",
                "FUN_0010dac0"
            ],
            "code": "\nundefined  [16] allocate_and_initialize_slot_0010da0b(long **slot_ptr,ulong slot_index,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 error_message;\n  long *new_slot;\n  long offset;\n  long loop_counter;\n  ulong remaining_slots;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_ptr == (long *)0x0) {\n        new_slot = (long *)xmalloc(0x88);\n        *slot_ptr = new_slot;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)new_slot = 0;\n          new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n        }\n      }\n      slot_ptr = (long **)*slot_ptr;\n    }\n    offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      offset = 0;\n    }\n    if (*slot_ptr == (long *)0x0) {\n      new_slot = (long *)xmalloc(0x88);\n      *slot_ptr = new_slot;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)new_slot = 0;\n        new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n      }\n    }\n    result._8_8_ = param_4;\n    result._0_8_ = *slot_ptr + slot_index + offset + 1;\n    return result;\n  }\n  error_message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  fatal(error_message,slot_index);\n}\n\n",
            "current_name": "allocate_and_initialize_slot_0010da0b",
            "entrypoint": "0x0010da0b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slot_0010da0b",
                "auVar7": "result",
                "bVar6": "flag",
                "lVar3": "offset",
                "lVar4": "loop_counter",
                "param_1": "slot_ptr",
                "param_2": "slot_index",
                "plVar2": "new_slot",
                "uVar1": "error_message",
                "uVar5": "remaining_slots"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010dac0": {
            "additional_data": {
                "FUN_0010dac0": {
                    "parse_coff_type": 21,
                    "parse_debug_type": 2,
                    "parse_type": 5,
                    "parse_type_code": 1,
                    "process_type": 1
                },
                "FUN_0010dac0_param_1": {
                    "file_info": 1
                },
                "FUN_0010dac0_param_2": {
                    "symbol_table": 1
                },
                "FUN_0010dac0_param_3": {
                    "type_field": 1
                },
                "FUN_0010dac0_param_4": {
                    "type_index": 1
                },
                "FUN_0010dac0_param_5": {
                    "type": 1
                },
                "FUN_0010dac0_param_6": {
                    "type_info": 1
                },
                "FUN_0010dac0_param_7": {
                    "flag": 1
                },
                "FUN_0010dac0_param_8": {
                    "enum_info": 1
                },
                "__ptr": {
                    "buffer_1": 1,
                    "enum_names": 4,
                    "pointer1": 2,
                    "pointer_data": 1,
                    "pointer_var_1": 1,
                    "ptr": 1,
                    "ptr1": 12,
                    "ptr_1": 2,
                    "ptr_var1": 1,
                    "result_ptr1": 1,
                    "temp_pointer_2": 1,
                    "temp_var8": 1,
                    "void_pointer": 1,
                    "void_pointer_1": 1
                },
                "__ptr_00": {
                    "buffer_2": 1,
                    "enum_values": 4,
                    "offset_data": 1,
                    "pointer2": 2,
                    "pointer_var_2": 1,
                    "ptr2": 11,
                    "ptr_00": 1,
                    "ptr_2": 2,
                    "ptr_var2": 1,
                    "result_ptr2": 1,
                    "temp_pointer_3": 1,
                    "temp_var9": 1,
                    "void_pointer_00": 1,
                    "void_pointer_2": 1
                },
                "allocate_and_initialize_data_structure_00113c43": {
                    "allocate_and_initialize_data_structure": 1
                },
                "allocate_and_initialize_slot_0010da0b": {
                    "allocate_and_init_slot": 1,
                    "allocate_and_initialize_slot": 1
                },
                "allocate_and_initialize_slot_0010da0b_param_3": {
                    "param_3": 1
                },
                "allocate_and_initialize_slot_0010da0b_param_4": {
                    "param_4": 1
                },
                "allocate_and_initialize_slot_0010da0b_slot_index": {
                    "slot_index": 1
                },
                "allocate_and_initialize_slot_0010da0b_slot_ptr": {
                    "slot_ptr": 1
                },
                "bVar8": {
                    "bit": 1,
                    "bit_mask": 1,
                    "bit_value": 1,
                    "byte_val": 3,
                    "byte_value": 1,
                    "byte_var": 5,
                    "byte_var8": 1,
                    "byte_variable_8": 1,
                    "local_var8": 1,
                    "shift": 2,
                    "temp_byte": 1,
                    "temp_byte_var": 1,
                    "temp_var10": 1,
                    "type_bit": 1,
                    "type_byte": 1,
                    "type_code_byte": 1,
                    "type_mask": 2,
                    "type_shift": 1,
                    "var8": 3
                },
                "cVar2": {
                    "char_val": 1,
                    "char_value": 3,
                    "char_var": 2,
                    "char_var2": 1,
                    "char_variable_2": 1,
                    "character": 1,
                    "error_status": 1,
                    "is_error": 1,
                    "local_var2": 1,
                    "result": 2,
                    "result_var2": 1,
                    "ret_code": 1,
                    "status": 3,
                    "success": 1,
                    "symbol_status": 1,
                    "temp_char": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "var2": 4
                },
                "create_and_store_debug_type_00113d6e": {
                    "create_and_store_debug_type": 2
                },
                "create_and_store_debug_type_00113d6e_value1": {
                    "value1": 1
                },
                "create_and_store_debug_type_00113d6e_value2": {
                    "value2": 1
                },
                "create_const_debug_type_00113e23": {
                    "create_const_debug_type": 2
                },
                "create_const_debug_type_00113e23_input_param_1": {
                    "input_param_1": 1
                },
                "create_const_debug_type_00113e23_input_param_2": {
                    "input_param_2": 1
                },
                "create_debug_type_object_00113ce0": {
                    "create_debug_type_object": 1
                },
                "dcgettext": {
                    "gettext": 1
                },
                "debug_make_array_type_isra_0": {
                    "make_array_type": 1
                },
                "debug_make_enum_type_isra_0": {
                    "make_enum_type": 1
                },
                "debug_make_float_type_isra_0": {
                    "make_float_type": 1
                },
                "debug_make_function_type_isra_0": {
                    "make_function_type": 1
                },
                "debug_make_indirect_type_isra_0": {
                    "make_indirect_type": 1
                },
                "debug_make_int_type_isra_0": {
                    "make_int_type": 1
                },
                "debug_make_pointer_type_isra_0": {
                    "make_pointer_type": 1
                },
                "debug_make_struct_type_isra_0": {
                    "make_struct_type": 1
                },
                "debug_make_void_type_isra_0": {
                    "make_void_type": 1
                },
                "debug_name_type": {
                    "name_debug_type": 1
                },
                "get_or_create_debug_type_00113d3a": {
                    "get_or_create_debug_type": 2
                },
                "iVar9": {
                    "counter": 3,
                    "enum_index": 1,
                    "index": 6,
                    "index_var": 1,
                    "int_var": 3,
                    "int_var9": 1,
                    "int_variable_9": 1,
                    "iterator": 1,
                    "local_var9": 1,
                    "loop_count": 1,
                    "loop_counter": 2,
                    "loop_var": 2,
                    "temp_int": 1,
                    "temp_int_var": 1,
                    "temp_var11": 1,
                    "var9": 3
                },
                "initialize_debug_type_00113df2": {
                    "initialize_debug_type": 2
                },
                "initialize_debug_type_constprop_00113e17": {
                    "initialize_debug_type": 2
                },
                "lVar1": {
                    "entry_addr": 1,
                    "length": 3,
                    "length_var1": 1,
                    "local_var1": 1,
                    "loop_variable_1": 1,
                    "result": 7,
                    "result1": 1,
                    "result_var1": 1,
                    "symbol_info": 1,
                    "temp": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "tmp_type": 1,
                    "type_index": 1,
                    "type_pointer": 1,
                    "type_size": 1,
                    "value": 1,
                    "var1": 3
                },
                "lVar12": {
                    "count": 3,
                    "counter": 1,
                    "enum_index": 2,
                    "index": 1,
                    "index_2": 1,
                    "iter": 1,
                    "iteration": 1,
                    "iterator": 1,
                    "length_var12": 1,
                    "local_var12": 1,
                    "long_var": 1,
                    "loop_counter": 1,
                    "loop_var": 4,
                    "loop_variable": 1,
                    "loop_variable_12": 1,
                    "temp_long": 1,
                    "temp_long_var": 1,
                    "temp_val4": 1,
                    "temp_var14": 1,
                    "var12": 3
                },
                "lVar5": {
                    "address": 1,
                    "debug_type": 2,
                    "length_var5": 1,
                    "local_var1": 1,
                    "local_var5": 1,
                    "output": 1,
                    "pointer": 1,
                    "res": 1,
                    "result": 6,
                    "result_type": 2,
                    "result_var5": 1,
                    "temp_val25": 1,
                    "temp_var5": 1,
                    "type": 2,
                    "type_index": 1,
                    "type_result": 2,
                    "var5": 4
                },
                "local_47": {
                    "byte_size": 1,
                    "byte_val": 1,
                    "byte_value": 2,
                    "byte_var": 1,
                    "byte_var2": 1,
                    "data_size": 1,
                    "enum_member": 1,
                    "local_byte": 6,
                    "local_byte1": 2,
                    "local_byte_47": 1,
                    "local_var2": 2,
                    "local_variable2": 1,
                    "local_variable_47": 1,
                    "param_count": 1,
                    "struct_data_size": 1,
                    "syment_size": 1,
                    "temp_byte_2": 1,
                    "type_length": 1,
                    "union_field_status": 1
                },
                "local_48": {
                    "char_value": 1,
                    "char_var": 2,
                    "data_type": 2,
                    "element_type": 1,
                    "enum_code": 1,
                    "enum_info": 1,
                    "flag": 1,
                    "local_char": 5,
                    "local_char1": 2,
                    "local_char_48": 1,
                    "local_flag": 1,
                    "local_var1": 2,
                    "local_variable1": 1,
                    "local_variable_48": 1,
                    "loop_flag": 1,
                    "struct_class": 1,
                    "struct_field_status": 1,
                    "temp_char_2": 1,
                    "type_name": 1
                },
                "local_68": {
                    "buffer": 5,
                    "debug_msg": 1,
                    "local_arr": 1,
                    "local_array": 3,
                    "local_array1": 2,
                    "local_array_68": 1,
                    "local_buffer": 9,
                    "local_variable_68": 1,
                    "syment_buffer": 2,
                    "syment_data": 2
                },
                "param_1": {
                    "file_info": 19,
                    "file_info_ptr": 1,
                    "input": 1,
                    "input1": 2,
                    "input_param1": 1,
                    "param_1": 1,
                    "param_info": 1,
                    "param_pointer": 1
                },
                "param_2": {
                    "input_param2": 1,
                    "symbol_table": 23,
                    "symbol_table_ptr": 2,
                    "type_table": 1
                },
                "param_3": {
                    "debug_type_info": 1,
                    "file_info": 3,
                    "input3": 1,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "param3": 1,
                    "param_3": 2,
                    "type": 9,
                    "type_info": 7,
                    "type_table": 1
                },
                "param_4": {
                    "debug_type": 1,
                    "input4": 1,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "name": 1,
                    "name_type": 8,
                    "param4": 4,
                    "param_4": 9,
                    "type": 1
                },
                "param_5": {
                    "input5": 1,
                    "input_param5": 1,
                    "input_param_5": 1,
                    "type_code": 24
                },
                "param_6": {
                    "array_type": 1,
                    "enum_data": 1,
                    "enum_info": 1,
                    "enum_symbols": 1,
                    "enum_value": 1,
                    "enum_values": 8,
                    "input6": 1,
                    "input_param6": 1,
                    "input_param_6": 1,
                    "param6": 3,
                    "param_6": 3,
                    "struct_info": 2,
                    "type_extra_info": 1,
                    "type_info_ptr": 1,
                    "type_members": 1
                },
                "param_7": {
                    "create_enum": 1,
                    "flag": 4,
                    "indirect": 1,
                    "input7": 1,
                    "input_param7": 1,
                    "input_param_7": 1,
                    "is_signed": 2,
                    "is_struct": 1,
                    "is_struct_union": 1,
                    "is_unsigned": 6,
                    "nested": 1,
                    "param7": 2,
                    "param_7": 3,
                    "parse_flag": 1,
                    "unknown_flag": 1
                },
                "param_8": {
                    "debug_info": 3,
                    "debug_name": 3,
                    "debug_type": 3,
                    "input8": 1,
                    "input_param8": 1,
                    "input_param_8": 1,
                    "message_text": 1,
                    "name_type": 4,
                    "param8": 3,
                    "param_8": 5,
                    "result": 1,
                    "type_name": 1
                },
                "parse_coff_struct_type": {
                    "parse_coff_struct_type": 1
                },
                "parse_coff_symbols_0010e07c": {
                    "parse_coff_symbols": 2
                },
                "pcVar10": {
                    "char_pointer": 1,
                    "char_pointer_10": 1,
                    "char_pointer_var10": 1,
                    "char_var": 1,
                    "data_type": 1,
                    "local_var10": 1,
                    "str": 1,
                    "string_var": 1,
                    "temp_char_ptr": 1,
                    "temp_string": 1,
                    "temp_var12": 1,
                    "type_name": 12,
                    "type_str": 1,
                    "type_string": 2,
                    "var10": 3
                },
                "plVar7": {
                    "debug_type_ptr": 1,
                    "local_var7": 1,
                    "pl_var": 1,
                    "pointer": 1,
                    "pointer_list": 1,
                    "pointer_to_long_variable_7": 1,
                    "pointer_var": 2,
                    "pointer_var7": 1,
                    "ptr": 1,
                    "ptr_result": 1,
                    "ptr_var7": 1,
                    "ptr_variable": 1,
                    "result_var7": 1,
                    "slot_ptr": 8,
                    "temp_pointer": 1,
                    "temp_ptr_1": 1,
                    "temp_var7": 1,
                    "var7": 3,
                    "var_ptr": 1
                },
                "process_debug_name_type_0010c218": {
                    "process_debug_name_type": 1,
                    "process_name_type": 1
                },
                "report_and_process_data_00119ed0": {
                    "report_and_process_data": 2
                },
                "reverse_and_allocate_memory": {
                    "reverse_and_initialize_memory": 1
                },
                "reverse_and_initialize_memory_00113da9": {
                    "reverse_and_init_memory": 1
                },
                "reverse_and_initialize_memory_00113da9_param_1": {
                    "byte_count": 1
                },
                "reverse_and_initialize_memory_00113da9_param_3": {
                    "param_3": 1
                },
                "reverse_and_initialize_memory_00113da9_param_4": {
                    "param_4": 1
                },
                "uVar11": {
                    "bit_flag": 1,
                    "bit_mask": 3,
                    "bit_value": 1,
                    "local_var11": 1,
                    "mask": 5,
                    "mask_value": 1,
                    "shift_amount": 1,
                    "temp": 1,
                    "temp_ulong_2": 1,
                    "temp_ulong_var": 1,
                    "temp_val": 1,
                    "temp_var13": 1,
                    "type_bits": 1,
                    "type_mask": 1,
                    "ulong_var": 3,
                    "ulong_var11": 1,
                    "ulong_variable_11": 1,
                    "var11": 3
                },
                "uVar13": {
                    "decoded_type": 1,
                    "masked_type_code": 1,
                    "new_type_code": 2,
                    "parsed_type": 1,
                    "shifted_code": 2,
                    "shifted_type_code": 1,
                    "shifted_value": 2,
                    "temp1": 2,
                    "temp_uint_2": 1,
                    "temp_uint_var": 1,
                    "temp_val2": 1,
                    "temp_value1": 1,
                    "temp_var15": 1,
                    "uint_var1": 2,
                    "uint_var13": 1,
                    "uint_variable_13": 1,
                    "updated_type_code": 1,
                    "value1": 1,
                    "value2": 1,
                    "var13": 3
                },
                "uVar14": {
                    "array_size": 3,
                    "enum_count": 3,
                    "length": 1,
                    "temp2": 2,
                    "temp_uint_3": 1,
                    "temp_uint_var2": 1,
                    "temp_value2": 1,
                    "temp_var16": 1,
                    "u_var14": 1,
                    "uint_var14": 1,
                    "uint_var2": 2,
                    "uint_variable_14": 1,
                    "ushort_value": 3,
                    "ushort_var": 1,
                    "value2": 1,
                    "value3": 1,
                    "var14": 3
                },
                "uVar15": {
                    "enum_base_type": 1,
                    "enum_constant": 1,
                    "enum_type": 1,
                    "enum_value": 1,
                    "initializer": 1,
                    "result6": 1,
                    "result_var8": 1,
                    "size": 1,
                    "temp3": 2,
                    "temp_result": 1,
                    "temp_ulong_3": 1,
                    "temp_val3": 1,
                    "temp_var17": 1,
                    "temp_var_5": 1,
                    "u_var15": 3,
                    "uint_var15": 1,
                    "ulong_variable_15": 1,
                    "value3": 1,
                    "value4": 1,
                    "var15": 4,
                    "zero_value": 1
                },
                "uVar3": {
                    "bfd_err_code": 1,
                    "error_code": 12,
                    "error_msg": 1,
                    "local_var3": 1,
                    "result": 1,
                    "result_var3": 1,
                    "return_value": 1,
                    "temp_uint": 1,
                    "temp_var3": 1,
                    "temp_var_3": 1,
                    "uint_var3": 1,
                    "uint_variable_3": 1,
                    "undefined_var": 1,
                    "var3": 4
                },
                "uVar4": {
                    "error_message": 4,
                    "error_msg": 8,
                    "local_var4": 1,
                    "msg": 1,
                    "result": 2,
                    "result2": 1,
                    "result_var4": 1,
                    "temp_ulong": 1,
                    "temp_var4": 1,
                    "temp_var_4": 1,
                    "uint_var4": 1,
                    "ulong_variable_4": 1,
                    "value": 1,
                    "var4": 4
                },
                "uVar6": {
                    "additional_value": 1,
                    "debug_type": 1,
                    "float_type": 1,
                    "function_result": 1,
                    "input_parameter": 1,
                    "local_var6": 1,
                    "nested_result": 1,
                    "result2": 1,
                    "result4": 1,
                    "result_var6": 1,
                    "temp": 1,
                    "temp_float": 1,
                    "temp_result": 1,
                    "temp_var6": 1,
                    "temp_var_6": 1,
                    "type_object": 1,
                    "uint_var6": 1,
                    "ulong_variable_6": 1,
                    "value": 5,
                    "var6": 4
                },
                "update_value_in_memory_00113dfe": {
                    "update_value_in_memory": 2
                }
            },
            "called": [
                "FUN_00113da9",
                "FUN_00113e17",
                "FUN_00113d3a",
                "FUN_0010dac0",
                "FUN_0010da0b",
                "FUN_00113df2",
                "FUN_00104370",
                "FUN_0010c218",
                "FUN_001046a0",
                "FUN_00113dfe",
                "FUN_00113c43",
                "FUN_001048f0",
                "FUN_00104240",
                "FUN_0010e07c",
                "FUN_001047a0",
                "FUN_00113d6e",
                "FUN_00113e23",
                "FUN_001042b0",
                "FUN_00119ed0",
                "FUN_00113ce0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "code": "\nlong parse_coff_type_0010dac0(long file_info,long *symbol_table,long type,undefined8 param_4,uint type_code,\n                 long *enum_values,char is_unsigned,undefined8 param_8)\n\n{\n  long result;\n  char var2;\n  undefined4 error_code;\n  undefined8 error_msg;\n  long result;\n  undefined8 value;\n  long *slot_ptr;\n  void *ptr1;\n  void *ptr2;\n  byte byte_var;\n  int index;\n  char *type_name;\n  ulong mask;\n  long loop_var;\n  uint var13;\n  uint enum_count;\n  undefined8 var15;\n  undefined local_buffer [32];\n  char local_char;\n  byte local_byte;\n  \n  result = *(long *)(file_info + 0x110);\n  if ((~*(uint *)(result + 0x38) & type_code) != 0) {\n    var13 = (int)type_code >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    mask = (ulong)(type_code & *(uint *)(result + 0x40));\n    byte_var = (byte)*(undefined4 *)(result + 0x3c);\n    var13 = (var13 ^ type_code) & *(uint *)(result + 0x38) ^ var13;\n    if (mask == 1L << (byte_var & 0x3f)) {\n      error_msg = parse_coff_type_0010dac0(file_info,symbol_table,type,param_4,var13,enum_values,is_unsigned,param_8);\n      result = make_pointer_type(error_msg);\n      return result;\n    }\n    if (mask != 2L << (byte_var & 0x3f)) {\n      if (mask != 3L << (byte_var & 0x3f)) {\n        error_msg = gettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          var13);\n        non_fatal(error_msg,type_code);\n        return 0;\n      }\n      enum_count = 0;\n      if (enum_values != (long *)0x0) {\n        enum_count = (uint)*(ushort *)(enum_values + 2);\n        slot_ptr = enum_values + 2;\n        for (index = 0; (*(short *)slot_ptr != 0 && (index != 3)); index = index + 1) {\n          *(short *)slot_ptr = *(short *)((long)slot_ptr + 2);\n          slot_ptr = (long *)((long)slot_ptr + 2);\n        }\n        *(short *)slot_ptr = 0;\n      }\n      var15 = 0;\n      error_msg = param_8;\n      value = parse_coff_type_0010dac0(file_info,symbol_table,type,param_4,var13,enum_values,0);\n      result = *(long *)(type + 0x28);\n      if (result == 0) {\n        error_msg = make_int_type(4,0,var15,error_msg);\n        result = name_debug_type(param_8,\"int\",error_msg);\n        *(long *)(type + 0x28) = result;\n      }\n      result = make_array_type(value,result,0,(long)(int)(enum_count - 1),0);\n      return result;\n    }\n    error_msg = parse_coff_type_0010dac0(file_info,symbol_table,type,param_4,var13,enum_values,is_unsigned,param_8);\n    result = make_function_type(error_msg,0,0);\n    return result;\n  }\n  if ((enum_values != (long *)0x0) && (0 < *enum_values)) {\n    slot_ptr = (long *)coff_get_slot_lto_priv_0(type);\n    if (*slot_ptr != 0) {\n      return *slot_ptr;\n    }\n    result = make_indirect_type(slot_ptr,0);\n    return result;\n  }\n  if (is_unsigned == '\\0') {\n    enum_values = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    result = make_void_type();\n    return result;\n  }\n  result = *(long *)(type + 8 + (long)(int)type_code * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(type_code) {\n  default:\n    error_msg = make_void_type();\n    type_name = \"void\";\n    break;\n  case 2:\n    error_msg = make_int_type(1,0);\n    type_name = \"char\";\n    break;\n  case 3:\n    error_msg = make_int_type(2,0);\n    type_name = \"short\";\n    break;\n  case 4:\n    error_msg = make_int_type(4,0);\n    type_name = \"int\";\n    break;\n  case 5:\n    error_msg = make_int_type(4,0);\n    type_name = \"long\";\n    break;\n  case 6:\n    error_msg = make_float_type(4);\n    type_name = \"float\";\n    break;\n  case 7:\n    error_msg = make_float_type(8);\n    type_name = \"double\";\n    break;\n  case 8:\n    if (enum_values == (long *)0x0) {\n      result = make_struct_type(1,0,0);\n      goto LAB_0010e046;\n    }\n    error_msg = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (enum_values == (long *)0x0) {\n      result = make_struct_type(0,0,0);\n      goto LAB_0010e046;\n    }\n    error_msg = 9;\nLAB_0010de7a:\n    result = parse_coff_struct_type(file_info,symbol_table,type,error_msg,enum_values,param_8);\nLAB_0010e046:\n    slot_ptr = (long *)coff_get_slot_lto_priv_0(type,param_4);\n    *slot_ptr = result;\n    return result;\n  case 10:\n    if (enum_values == (long *)0x0) {\n      result = make_enum_type(0,0);\n    }\n    else {\n      result = enum_values[3];\n      ptr1 = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      loop_var = 0;\n      do {\n        while( true ) {\n          if ((result <= symbol_table[3]) || (symbol_table[1] <= symbol_table[2])) goto LAB_0010e032;\n          index = (int)loop_var;\n          result = *(long *)(*symbol_table + symbol_table[2] * 8);\n          var2 = bfd_coff_get_syment(file_info,result,local_buffer);\n          loop_var = (long)index;\n          if (var2 == '\\0') {\n            error_code = bfd_get_error();\n            error_msg = bfd_errmsg(error_code);\n            value = gettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            non_fatal(value,error_msg);\n            free(ptr1);\n            free(ptr2);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          symbol_table[2] = symbol_table[2] + 1;\n          symbol_table[3] = (ulong)local_byte + 1 + symbol_table[3];\n          if (local_char != '\\x10') break;\n          if ((int)type_code <= index + 1) {\n            type_code = type_code + 10;\n            ptr1 = (void *)xrealloc(ptr1);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)type_code << 3);\n          }\n          loop_var = *(long *)(result + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)index * 8) = *(undefined8 *)(result + 8);\n          *(long *)((long)ptr2 + (long)index * 8) =\n               *(long *)(result + 0x10) + *(long *)(loop_var + 0x30);\n          loop_var = (long)(index + 1);\n        }\n      } while (local_char != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr1 + loop_var * 8) = 0;\n      result = make_enum_type(ptr1,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = make_void_type();\n    goto LAB_0010e065;\n  case 0xc:\n    error_msg = make_int_type(1,1);\n    type_name = \"unsigned char\";\n    break;\n  case 0xd:\n    error_msg = make_int_type(2,1);\n    type_name = \"unsigned short\";\n    break;\n  case 0xe:\n    error_msg = make_int_type(4,1);\n    type_name = \"unsigned int\";\n    break;\n  case 0xf:\n    error_msg = make_int_type(4,1);\n    type_name = \"unsigned long\";\n    break;\n  case 0x10:\n    error_msg = make_float_type(0xc);\n    type_name = \"long double\";\n  }\n  result = name_debug_type(param_8,type_name,error_msg);\nLAB_0010e065:\n  *(long *)(type + 8 + (long)(int)type_code * 8) = result;\n  return result;\n}\n\n",
            "current_name": "parse_coff_type_0010dac0",
            "entrypoint": "0x0010dac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "byte_var",
                "cVar2": "var2",
                "dcgettext": "gettext",
                "debug_make_array_type_isra_0": "make_array_type",
                "debug_make_enum_type_isra_0": "make_enum_type",
                "debug_make_float_type_isra_0": "make_float_type",
                "debug_make_function_type_isra_0": "make_function_type",
                "debug_make_indirect_type_isra_0": "make_indirect_type",
                "debug_make_int_type_isra_0": "make_int_type",
                "debug_make_pointer_type_isra_0": "make_pointer_type",
                "debug_make_struct_type_isra_0": "make_struct_type",
                "debug_make_void_type_isra_0": "make_void_type",
                "debug_name_type": "name_debug_type",
                "iVar9": "index",
                "lVar1": "result",
                "lVar12": "loop_var",
                "lVar5": "result",
                "local_47": "local_byte",
                "local_48": "local_char",
                "local_68": "local_buffer",
                "param_1": "file_info",
                "param_2": "symbol_table",
                "param_3": "type",
                "param_5": "type_code",
                "param_6": "enum_values",
                "param_7": "is_unsigned",
                "pcVar10": "type_name",
                "plVar7": "slot_ptr",
                "uVar11": "mask",
                "uVar13": "var13",
                "uVar14": "enum_count",
                "uVar15": "var15",
                "uVar3": "error_code",
                "uVar4": "error_msg",
                "uVar6": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e07c": {
            "additional_data": {
                "FUN_0010e07c": {
                    "parse_and_create_struct_types": 1,
                    "parse_coff_data": 5,
                    "parse_coff_function": 1,
                    "parse_coff_section": 1,
                    "parse_coff_symbol_table": 1,
                    "parse_coff_symbols": 7,
                    "parse_coff_type": 4,
                    "parse_coff_types": 1,
                    "parse_debug_info": 1
                },
                "__ptr": {
                    "allocated_memory": 2,
                    "allocated_ptr": 1,
                    "buffer": 2,
                    "coff_types": 1,
                    "new_symbol_info_buffer": 1,
                    "parsed_coff_symbols": 1,
                    "parsed_data": 1,
                    "parsed_structures": 1,
                    "parsed_symbols": 2,
                    "parsed_types": 2,
                    "ptr": 1,
                    "result_ptr": 1,
                    "struct_array": 3,
                    "struct_data": 1,
                    "struct_ptr": 1,
                    "struct_type_ptrs": 1,
                    "symbol_array": 1,
                    "symbol_data": 1,
                    "symbol_data_ptr": 1,
                    "symbol_table": 1,
                    "symbol_table_entries": 1
                },
                "cVar4": {
                    "bfd_coff_result": 2,
                    "bfd_result": 1,
                    "bfd_ret_val": 1,
                    "char_val": 1,
                    "char_var": 1,
                    "get_symbol_result": 1,
                    "res": 1,
                    "result": 11,
                    "status": 2,
                    "symbol_error": 1,
                    "symbol_result": 2,
                    "symbol_ret_val": 1,
                    "symbol_retrieval_status": 1,
                    "symbol_status": 2,
                    "var4": 1
                },
                "debug_make_struct_type_isra_0": {
                    "make_struct_type": 2
                },
                "iVar13": {
                    "address": 1,
                    "coff_address": 1,
                    "coff_type_result": 1,
                    "computed_value": 1,
                    "ev_value": 1,
                    "i_var13": 1,
                    "int_val1": 1,
                    "new_value1": 1,
                    "offset": 5,
                    "string_table_index": 1,
                    "struct_offset": 1,
                    "structure_size": 1,
                    "symbol_offset": 2,
                    "symbol_size": 1,
                    "symbol_value": 2,
                    "total": 1,
                    "type_index": 1,
                    "type_offset": 1,
                    "value": 1,
                    "value_calculation": 1,
                    "var13": 1,
                    "var5": 1,
                    "variable2": 1
                },
                "iVar14": {
                    "alloc_size": 1,
                    "allocated_symbols": 2,
                    "allocation_size": 1,
                    "buffer_size": 1,
                    "capacity": 1,
                    "count": 1,
                    "initial_count": 1,
                    "int_val2": 1,
                    "limit": 1,
                    "max_count": 1,
                    "max_entries": 1,
                    "new_value2": 1,
                    "parsed_coff_symbol_capacity": 1,
                    "parsed_data_size": 1,
                    "parsed_symbols_capacity": 1,
                    "parsed_type_capacity": 1,
                    "size": 2,
                    "struct_array_capacity": 1,
                    "struct_size": 1,
                    "struct_type_capacity": 1,
                    "structure_capacity": 1,
                    "symbol_capacity": 3,
                    "symbol_info_buffer_size": 1,
                    "var14": 1,
                    "var6": 1
                },
                "lVar1": {
                    "count1": 1,
                    "current_ptr": 1,
                    "current_symbol": 1,
                    "entry_point_end": 1,
                    "file_size": 1,
                    "length_val1": 1,
                    "offset": 1,
                    "section_header": 2,
                    "section_size": 1,
                    "size": 1,
                    "symbol": 1,
                    "symbol_count": 2,
                    "symbol_end": 1,
                    "symbol_offset": 3,
                    "symbol_table_address": 1,
                    "symbol_table_end": 1,
                    "symbol_table_entry": 3,
                    "symbol_table_length": 1,
                    "symbol_table_size": 2,
                    "syment_offset": 1,
                    "var1": 2
                },
                "lVar12": {
                    "count": 2,
                    "count_val": 1,
                    "entry_count": 3,
                    "entry_index": 1,
                    "i": 1,
                    "index": 5,
                    "num_symbols": 1,
                    "parsed_coff_symbol_counter": 1,
                    "parsed_entry_index": 1,
                    "parsed_symbols_count": 1,
                    "parsed_type_index": 1,
                    "struct_array_length": 1,
                    "struct_count": 1,
                    "struct_type_count": 1,
                    "structure_index": 1,
                    "symbol_count": 1,
                    "symbol_i": 1,
                    "symbol_index": 2,
                    "symbol_info_index": 1,
                    "var12": 1,
                    "var4": 1
                },
                "lVar2": {
                    "coff_ext_offset": 1,
                    "coff_symbol": 1,
                    "count2": 1,
                    "current_entry": 1,
                    "entry_ptr": 1,
                    "length_val2": 1,
                    "symbol": 4,
                    "symbol_addr": 1,
                    "symbol_address": 2,
                    "symbol_entry": 4,
                    "symbol_entry_address": 1,
                    "symbol_offset": 1,
                    "symbol_ptr": 2,
                    "symbol_table_entry": 4,
                    "symbol_table_entry_address": 2,
                    "var2": 2
                },
                "lVar3": {
                    "address": 1,
                    "count": 3,
                    "count3": 1,
                    "current_line": 1,
                    "last_address": 1,
                    "last_section_index": 1,
                    "length_val3": 1,
                    "local_0c": 1,
                    "local_68": 1,
                    "next_syment": 1,
                    "num_debug_sections": 1,
                    "num_symbols": 1,
                    "processed_symbols": 1,
                    "symbol_count": 5,
                    "symbol_entry_counter": 1,
                    "symbol_index": 3,
                    "symbol_num": 1,
                    "symbol_table_count": 1,
                    "symbol_table_offset": 1,
                    "var3": 2
                },
                "local_56": {
                    "aux_data_length": 1,
                    "aux_entry_data": 1,
                    "aux_value": 1,
                    "aux_value2": 1,
                    "auxiliary_entry_length": 1,
                    "coff_symbol_index": 1,
                    "coff_type": 2,
                    "coff_type_data": 1,
                    "coff_type_index": 1,
                    "field_0x28": 1,
                    "index": 1,
                    "index64": 1,
                    "local_5": 1,
                    "local_short": 1,
                    "local_var_56": 1,
                    "local_variable3": 1,
                    "section_flags": 1,
                    "section_number": 1,
                    "short_value": 1,
                    "storage_class": 1,
                    "string_length": 1,
                    "sym_type": 1,
                    "symbol_aux_value": 1,
                    "type_attribute": 1,
                    "type_index": 2,
                    "ushort_val": 1,
                    "value_size": 1
                },
                "local_60": {
                    "aux_buffer": 2,
                    "aux_data": 4,
                    "aux_data_buffer": 2,
                    "aux_entry_data": 2,
                    "aux_info": 1,
                    "aux_name": 1,
                    "aux_symbol_info_data": 1,
                    "auxent_buffer": 2,
                    "auxent_data": 2,
                    "auxiliary_data_buffer": 1,
                    "auxiliary_entry_buffer": 1,
                    "coff_aux_data": 1,
                    "coff_auxent_buffer": 1,
                    "local_arr1": 1,
                    "local_array_60": 1,
                    "local_buffer3": 1,
                    "string2": 1,
                    "struct_type_data": 1,
                    "symbol_aux_data": 1,
                    "symbol_info_aux": 1,
                    "unknown_buf": 1
                },
                "local_67": {
                    "aux_count": 2,
                    "aux_data_size": 1,
                    "aux_ent2": 1,
                    "aux_entry_count": 1,
                    "aux_entry_type_low": 1,
                    "aux_present": 2,
                    "aux_symbol_info_value": 1,
                    "aux_type": 1,
                    "aux_value": 1,
                    "auxent": 1,
                    "auxent_length": 1,
                    "auxent_size": 1,
                    "auxiliary_size": 1,
                    "byte2": 1,
                    "byte_var2": 1,
                    "coff_aux_flags": 1,
                    "coff_auxent_len": 1,
                    "has_aux_data": 1,
                    "has_auxent": 2,
                    "local_byte2": 1,
                    "local_var_67": 1,
                    "local_variable2": 1,
                    "struct_type_size": 1,
                    "symbol_aux_ret": 1,
                    "symbol_has_aux_entries": 1,
                    "symbol_info_found": 1
                },
                "local_68": {
                    "aux_ent1": 1,
                    "aux_entry_size": 1,
                    "aux_entry_type": 1,
                    "aux_symbol_info_length": 1,
                    "aux_tag": 1,
                    "aux_type": 5,
                    "aux_type_hi": 1,
                    "auxent_size": 2,
                    "auxent_tag": 1,
                    "auxent_type": 1,
                    "auxiliary_type": 1,
                    "auxtype": 1,
                    "byte1": 1,
                    "byte_var1": 1,
                    "coff_aux_type": 1,
                    "coff_auxent_tag": 1,
                    "local_byte1": 1,
                    "local_var_68": 1,
                    "local_variable1": 1,
                    "num_symbols_aux": 1,
                    "symbol_aux_ct": 1,
                    "symbol_class": 2,
                    "type_index": 1
                },
                "local_6a": {
                    "aux_data_length": 1,
                    "aux_entry_length": 1,
                    "aux_symbol_info": 1,
                    "auxent_type": 2,
                    "coff_auxent_type": 1,
                    "coff_header": 1,
                    "coff_type": 2,
                    "coff_type_low": 1,
                    "coff_type_lto_priv": 1,
                    "flags": 1,
                    "local_6a": 1,
                    "local_buffer2": 1,
                    "local_type_index": 1,
                    "local_var5": 1,
                    "local_var_6a": 1,
                    "section_number": 2,
                    "symbol_type": 3,
                    "type_buffer": 1,
                    "type_data": 1,
                    "type_field": 1,
                    "type_info": 1,
                    "type_local": 1,
                    "ushort_var": 1,
                    "value4": 1
                },
                "local_88": {
                    "char_buf": 1,
                    "coff_syment_buffer": 1,
                    "local_arr": 1,
                    "local_array_88": 1,
                    "local_buffer1": 1,
                    "string1": 1,
                    "symbol_data": 2,
                    "symbol_info": 4,
                    "symbol_name": 12,
                    "syment_buffer": 3,
                    "syment_data": 2
                },
                "local_a8": {
                    "coff_symbol_type_low": 1,
                    "coff_type": 1,
                    "entry": 1,
                    "entry_type_low": 1,
                    "entry_value1": 1,
                    "local1": 1,
                    "local_1": 1,
                    "local_a8": 1,
                    "local_type_offset": 1,
                    "local_var1": 3,
                    "local_var_a8": 2,
                    "name_value": 1,
                    "name_value_0": 1,
                    "new_symbol_upper": 1,
                    "new_value3": 1,
                    "struct_field_1": 1,
                    "symbol_name": 1,
                    "symbol_type": 1,
                    "symbol_value": 2,
                    "symbol_value_low": 1,
                    "type1_local": 1,
                    "type_low": 2,
                    "type_name1": 1,
                    "type_value": 1
                },
                "param_1": {
                    "arg1": 2,
                    "bfd_handler": 1,
                    "input": 1,
                    "param": 1,
                    "param1": 1,
                    "param_1": 18,
                    "param_base_address": 1,
                    "param_bfd": 1,
                    "param_obj": 1,
                    "param_ptr": 2
                },
                "param_2": {
                    "address_list": 1,
                    "arg2": 2,
                    "buffer": 1,
                    "coff_data": 2,
                    "coff_headers": 1,
                    "coff_symbols": 4,
                    "entry_point": 1,
                    "entry_points": 1,
                    "input_arr": 1,
                    "input_data": 1,
                    "lto_syms": 1,
                    "param_2": 1,
                    "param_arr": 1,
                    "param_array": 1,
                    "param_syms": 1,
                    "section_info": 1,
                    "symbol_table": 6,
                    "symbols": 2
                },
                "param_3": {
                    "arg3": 2,
                    "coff_section_headers": 1,
                    "debug_sections": 1,
                    "param3": 1,
                    "param_3": 19,
                    "param_filename": 1,
                    "param_size": 1,
                    "param_string_table": 1,
                    "param_val": 1,
                    "section_table": 1
                },
                "param_4": {
                    "arg4": 2,
                    "coff_section_count": 1,
                    "param4": 1,
                    "param_4": 21,
                    "param_arch": 1,
                    "param_int": 1,
                    "param_symbol_count": 1,
                    "section_count": 1
                },
                "param_5": {
                    "arg5": 2,
                    "bfd_file": 1,
                    "coff_header": 1,
                    "entry_size": 1,
                    "num_symbols": 2,
                    "param5": 1,
                    "param_5": 15,
                    "param_coff_header": 1,
                    "param_long": 1,
                    "param_obj": 1,
                    "param_offset": 1,
                    "section_table": 1,
                    "symbol_count": 1
                },
                "param_6": {
                    "arg6": 2,
                    "error_message": 1,
                    "param6": 1,
                    "param_6": 21,
                    "param_bfd": 1,
                    "param_error_func": 1,
                    "param_ptr": 1,
                    "section_table_size": 1
                },
                "parse_coff_type_lto_priv_0": {
                    "parse_coff_type": 2
                },
                "pcVar9": {
                    "bfd_error_message": 1,
                    "char_ptr": 1,
                    "err_msg": 2,
                    "errmsg_ptr": 1,
                    "error_format": 4,
                    "error_format_str": 1,
                    "error_message": 7,
                    "error_message_format": 3,
                    "error_message_template": 1,
                    "error_msg": 3,
                    "error_msg_format": 1,
                    "error_string": 2,
                    "failure_message": 1,
                    "failure_msg": 1
                },
                "puVar10": {
                    "aux_buffer": 2,
                    "aux_data": 6,
                    "aux_data_ptr": 1,
                    "aux_ent": 1,
                    "aux_entry": 4,
                    "aux_entry_data": 1,
                    "aux_entry_ptr": 1,
                    "aux_info": 1,
                    "aux_ptr": 2,
                    "aux_structure": 1,
                    "auxent_buffer": 1,
                    "auxiliary_data": 3,
                    "auxiliary_entry": 1,
                    "auxilliary_info": 1,
                    "coff_aux_entry": 1,
                    "ptr_var1": 1,
                    "ptr_var10": 1
                },
                "puVar8": {
                    "allocated_buf_ptr": 1,
                    "aux_info_ptr": 1,
                    "coff_entry": 1,
                    "new_entry": 1,
                    "new_struct": 2,
                    "new_structure": 1,
                    "new_symbol": 1,
                    "new_symbol_entry": 2,
                    "new_type": 1,
                    "parsed_coff_symbol": 1,
                    "parsed_entry": 2,
                    "parsed_symbol": 1,
                    "parsed_type_data": 1,
                    "ptr": 1,
                    "ptr_var": 1,
                    "ptr_var8": 1,
                    "struct_array_entry": 1,
                    "struct_pointer": 1,
                    "struct_ptr": 2,
                    "struct_type": 1,
                    "symbol_data": 1,
                    "symbol_entry": 3,
                    "symbol_info": 1
                },
                "uStack_9c": {
                    "coff_symbol_value_high": 1,
                    "coff_type_upper_bytes": 1,
                    "entry_value4": 1,
                    "high_part_type2": 1,
                    "local4": 1,
                    "local_4": 1,
                    "local_var4": 3,
                    "local_var_9c": 1,
                    "local_var_u_stack_9c": 1,
                    "name_value_3": 1,
                    "new_aux_lower": 1,
                    "new_value6": 1,
                    "parse_result_high": 1,
                    "struct_field_4": 1,
                    "symbol_name_length": 1,
                    "symbol_type_high": 1,
                    "translation_type_hi": 1,
                    "type_flags_high": 1,
                    "type_high": 1,
                    "type_length_high": 1,
                    "type_name4": 1,
                    "type_size": 1,
                    "type_value2_upper": 1,
                    "type_value_high": 1,
                    "type_value_upper": 1,
                    "u_stack_9c": 1
                },
                "uStack_a0": {
                    "coff_symbol_value_low": 1,
                    "coff_type": 1,
                    "entry_value3": 1,
                    "local3": 1,
                    "local_3": 1,
                    "local_var3": 3,
                    "local_var_a0": 1,
                    "local_var_u_stack_a0": 1,
                    "name_value_2": 1,
                    "new_aux_upper": 1,
                    "new_value5": 1,
                    "parse_result": 1,
                    "struct_field_3": 1,
                    "symbol_name_index": 1,
                    "symbol_type": 1,
                    "translation_type": 1,
                    "type2_local": 1,
                    "type_flags": 1,
                    "type_length_low": 1,
                    "type_low": 1,
                    "type_name3": 1,
                    "type_offset": 1,
                    "type_value": 2,
                    "type_value2": 1,
                    "u_stack_a0": 1
                },
                "uStack_a4": {
                    "coff_symbol_type_high": 1,
                    "coff_type_high": 1,
                    "entry_high": 1,
                    "entry_value2": 1,
                    "high_part_type1": 1,
                    "local2": 1,
                    "local_2": 1,
                    "local_var2": 3,
                    "local_var_a4": 1,
                    "local_var_u_stack_a4": 1,
                    "name_value_1": 1,
                    "name_value_high": 1,
                    "new_symbol_lower": 1,
                    "new_value4": 1,
                    "struct_field_2": 1,
                    "symbol_name_upper_bytes": 1,
                    "symbol_type_hi": 1,
                    "symbol_value_high": 2,
                    "symbol_value_upper": 1,
                    "type_high": 2,
                    "type_name2": 1,
                    "type_value_upper": 1,
                    "u_stack_a4": 1,
                    "upper_value": 1
                },
                "uVar11": {
                    "additional_info": 1,
                    "aux_count": 1,
                    "aux_data_size": 1,
                    "aux_entry": 1,
                    "aux_ptr_value": 1,
                    "aux_structure_length": 1,
                    "aux_value": 1,
                    "auxiliary_info": 1,
                    "coff_aux_entry_value": 1,
                    "entry_size": 1,
                    "field_0x20": 1,
                    "offset": 2,
                    "struct_flag": 1,
                    "symbol_index": 1,
                    "type": 2,
                    "type_index": 2,
                    "type_info": 1,
                    "uint_val": 1,
                    "uint_var3": 1,
                    "value": 4,
                    "value3": 1,
                    "var11": 1,
                    "variable1": 1
                },
                "uVar5": {
                    "bfd_err": 1,
                    "bfd_err_code": 1,
                    "bfd_error": 5,
                    "bfd_error_code": 7,
                    "err_code": 1,
                    "error": 3,
                    "error_code": 7,
                    "error_type": 1,
                    "error_val": 1,
                    "uint_var": 1,
                    "var5": 1
                },
                "uVar6": {
                    "aux_entry_offset": 1,
                    "bfd_error_message": 2,
                    "coff_symbol_type": 1,
                    "coff_type": 2,
                    "coff_type1": 1,
                    "coff_type_lto_result": 1,
                    "coff_type_parse_result": 1,
                    "debug_result": 1,
                    "entry_type": 1,
                    "error_message": 3,
                    "field_0x8": 1,
                    "name_value": 1,
                    "parsed_type": 1,
                    "result1": 1,
                    "return_val1": 1,
                    "type": 4,
                    "type1": 1,
                    "type_offset": 1,
                    "type_value": 1,
                    "uint_var1": 1,
                    "value1": 1,
                    "var6": 1
                },
                "uVar7": {
                    "aux_type": 1,
                    "auxent_value": 1,
                    "bfd_error_message": 1,
                    "coff_symbol_value": 1,
                    "coff_type2": 1,
                    "debug_make_struct_type_isra_0_result": 1,
                    "errmsg": 2,
                    "error_message": 5,
                    "error_message2": 1,
                    "error_message_translation": 1,
                    "error_msg": 2,
                    "error_msg_cat": 1,
                    "field_0x10": 1,
                    "result2": 1,
                    "return_val2": 1,
                    "translation_domain": 1,
                    "translation_result": 1,
                    "type2": 1,
                    "type_length": 1,
                    "type_size": 1,
                    "uint_var2": 1,
                    "value2": 1,
                    "var7": 1
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_001045b0",
                "FUN_001046a0",
                "FUN_001048f0",
                "FUN_00113da9",
                "FUN_00104240",
                "FUN_0010dac0",
                "FUN_001042b0",
                "FUN_001047a0",
                "FUN_00119ed0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010dac0"
            ],
            "code": "\nundefined8\nparse_coff_symbols_0010e07c(undefined8 param_1,long *symbol_table,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long symbol_table_entry;\n  long symbol;\n  long symbol_count;\n  char result;\n  undefined4 error_code;\n  void *struct_array;\n  undefined8 type;\n  undefined8 error_message;\n  undefined4 *symbol_entry;\n  char *error_message;\n  undefined *aux_data;\n  uint value;\n  long index;\n  int offset;\n  int symbol_capacity;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined symbol_name [30];\n  undefined2 symbol_type;\n  byte aux_type;\n  byte aux_count;\n  undefined aux_data [10];\n  ushort coff_type;\n  \n  symbol_capacity = 10;\n  index = 0;\n  symbol_table_entry = *(long *)(param_5 + 0x18);\n  struct_array = (void *)xmalloc(0x50);\n  while ((symbol_table[3] < symbol_table_entry && (symbol_table[2] < symbol_table[1]))) {\n    symbol = *(long *)(*symbol_table + symbol_table[2] * 8);\n    result = bfd_coff_get_syment(param_1,symbol,symbol_name);\n    if (result == '\\0') {\n      error_code = bfd_get_error();\n      type = bfd_errmsg(error_code);\n      error_message = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      error_message = dcgettext(0,error_message,5);\n      non_fatal(error_message,type);\n      free(struct_array);\n      return 0;\n    }\n    symbol_count = symbol_table[3];\n    aux_data = (undefined *)0x0;\n    symbol_table[2] = symbol_table[2] + 1;\n    symbol_table[3] = symbol_count + 1 + (ulong)aux_count;\n    if (aux_count != 0) {\n      aux_data = aux_data;\n      result = bfd_coff_get_auxent(param_1,symbol,0,aux_data);\n      if (result == '\\0') {\n        error_code = bfd_get_error();\n        type = bfd_errmsg(error_code);\n        error_message = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (aux_type == 0x12) {\n      value = (uint)coff_type;\n      offset = (int)*(undefined8 *)(symbol + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbol + 0x20) + 0x30);\n    }\n    else {\n      if (aux_type < 0x13) {\n        if ((aux_type == 8) || (aux_type == 0xb)) {\n          value = 0;\n          offset = ((int)*(undefined8 *)(symbol + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbol + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (aux_type == 0x66) break;\n      value = 0;\n      offset = 0;\n    }\nLAB_0010e214:\n    error_message = parse_coff_type(param_1,symbol_table,param_3,symbol_count,symbol_type,aux_data,1);\n    type = *(undefined8 *)(symbol + 8);\n    symbol_entry = (undefined4 *)xmalloc(0x20);\n    local_var1 = (undefined4)type;\n    local_var2 = (undefined4)((ulong)type >> 0x20);\n    local_var3 = (undefined4)error_message;\n    local_var4 = (undefined4)((ulong)error_message >> 0x20);\n    *(undefined8 *)(symbol_entry + 5) = 0;\n    symbol_entry[6] = offset;\n    symbol_entry[7] = value;\n    symbol_entry[4] = 0;\n    *symbol_entry = local_var1;\n    symbol_entry[1] = local_var2;\n    symbol_entry[2] = local_var3;\n    symbol_entry[3] = local_var4;\n    if (symbol_capacity <= (int)index + 1) {\n      symbol_capacity = symbol_capacity + 10;\n      struct_array = (void *)xrealloc(struct_array,(long)symbol_capacity << 3,symbol_entry,0,param_6);\n    }\n    *(undefined4 **)((long)struct_array + index * 8) = symbol_entry;\n    index = index + 1;\n  }\n  *(undefined8 *)((long)struct_array + (long)(int)index * 8) = 0;\n  type = make_struct_type(param_4 == 8,*(undefined2 *)(param_5 + 10),struct_array);\n  return type;\n}\n\n",
            "current_name": "parse_coff_symbols_0010e07c",
            "entrypoint": "0x0010e07c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e07c": "parse_coff_symbols_0010e07c",
                "__ptr": "struct_array",
                "cVar4": "result",
                "debug_make_struct_type_isra_0": "make_struct_type",
                "iVar13": "offset",
                "iVar14": "symbol_capacity",
                "lVar1": "symbol_table_entry",
                "lVar12": "index",
                "lVar2": "symbol",
                "lVar3": "symbol_count",
                "local_56": "coff_type",
                "local_60": "aux_data",
                "local_67": "aux_count",
                "local_68": "aux_type",
                "local_6a": "symbol_type",
                "local_88": "symbol_name",
                "local_a8": "local_var1",
                "param_2": "symbol_table",
                "parse_coff_type_lto_priv_0": "parse_coff_type",
                "pcVar9": "error_message",
                "puVar10": "aux_data",
                "puVar8": "symbol_entry",
                "uStack_9c": "local_var4",
                "uStack_a0": "local_var3",
                "uStack_a4": "local_var2",
                "uVar11": "value",
                "uVar5": "error_code",
                "uVar6": "type",
                "uVar7": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e2f0": {
            "additional_data": {
                "FUN_0010e2f0": {
                    "extract_and_store_data": 1,
                    "extract_and_store_string": 2,
                    "extract_string_from_binary": 1,
                    "hash_lookup_and_update": 2,
                    "lookup_and_append_string": 1,
                    "parse_string": 1,
                    "process_data": 1,
                    "process_hash_lookup": 1,
                    "process_string": 19,
                    "reverse_hash_lookup": 1
                },
                "lVar1": {
                    "current_ptr": 1,
                    "current_string": 1,
                    "hash_result": 1,
                    "len_var1": 1,
                    "length": 1,
                    "length_var1": 1,
                    "prev_entry": 2,
                    "previous_entry": 1,
                    "table_end": 1,
                    "table_entry": 1,
                    "temp": 1,
                    "temp1": 6,
                    "temp_long1": 2,
                    "temp_long_1": 2,
                    "temp_pointer": 1,
                    "temp_var1": 6,
                    "temp_var_1": 1,
                    "value": 1
                },
                "lVar3": {
                    "entry": 2,
                    "entry_pointer": 1,
                    "hash": 1,
                    "hash_entry": 1,
                    "hash_lookup_result": 4,
                    "hash_ptr": 1,
                    "lookup_result": 3,
                    "result": 1,
                    "temp2": 6,
                    "temp_hash": 1,
                    "temp_long2": 2,
                    "temp_long_2": 2,
                    "temp_var2": 5,
                    "temp_var_3": 1
                },
                "lVar7": {
                    "entry_offset": 1,
                    "hash_index": 1,
                    "hash_value": 3,
                    "lookup_result": 1,
                    "new_entry": 1,
                    "new_entry_index": 1,
                    "new_value": 1,
                    "offset": 2,
                    "param7": 1,
                    "result": 4,
                    "result_offset": 1,
                    "result_var": 1,
                    "str_index": 1,
                    "str_offset": 1,
                    "string_hash": 1,
                    "string_index": 1,
                    "string_offset": 2,
                    "temp3": 1,
                    "temp_long3": 1,
                    "temp_long_3": 2,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "temp_var_6": 1
                },
                "local_3c": {
                    "buffer": 1,
                    "local_array": 5,
                    "local_array3_c": 1,
                    "local_array_1": 1,
                    "local_parameter_list": 1,
                    "local_uint_arr": 1,
                    "local_var2": 5,
                    "local_var3c": 1,
                    "local_variable_2": 1,
                    "local_vars": 1,
                    "output_array": 2,
                    "result_array": 1,
                    "result_buf": 1,
                    "temp_arr": 1,
                    "temp_array": 3,
                    "undefined_var_2": 1,
                    "val2": 1,
                    "values": 1,
                    "var2": 2
                },
                "local_44": {
                    "local_data": 1,
                    "local_result": 1,
                    "local_uint": 1,
                    "local_var": 1,
                    "local_var1": 7,
                    "local_var44": 2,
                    "local_var_1": 1,
                    "local_variable_1": 1,
                    "output_data": 1,
                    "output_var1": 1,
                    "result": 3,
                    "result_buffer": 1,
                    "result_var": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp_local": 1,
                    "temp_var_4": 1,
                    "undefined_var_1": 1,
                    "val1": 1,
                    "value": 1,
                    "var1": 2
                },
                "param_1": {
                    "hash_table": 20,
                    "param": 1,
                    "param_array": 8,
                    "param_ptr": 1,
                    "params": 1
                },
                "param_2": {
                    "flag": 7,
                    "param": 5,
                    "param_2": 2,
                    "param_byte": 2,
                    "param_flag": 3,
                    "param_unknown": 1,
                    "param_val": 1,
                    "param_value": 2,
                    "undefined_param": 7,
                    "unknown_flag": 1
                },
                "param_3": {
                    "count": 2,
                    "input": 1,
                    "int_param": 7,
                    "int_val": 1,
                    "length": 2,
                    "param1": 1,
                    "param_3": 2,
                    "param_count": 1,
                    "param_int": 7,
                    "param_length": 1,
                    "param_size": 2,
                    "size": 2,
                    "string_length": 1,
                    "value": 1
                },
                "param_4": {
                    "arg": 1,
                    "data": 6,
                    "data_param": 1,
                    "input_param": 1,
                    "long_param": 1,
                    "param": 1,
                    "param2": 1,
                    "param_4": 2,
                    "param_data": 1,
                    "param_long": 6,
                    "param_ptr": 3,
                    "param_value": 4,
                    "pointer_param": 1,
                    "ptr_val": 1,
                    "str_param": 1
                },
                "param_5": {
                    "input_string": 11,
                    "key_string": 1,
                    "param_str": 1,
                    "param_string": 6,
                    "search_string": 2,
                    "str": 2,
                    "str_param": 1,
                    "string": 5,
                    "string_param": 1,
                    "string_value": 1
                },
                "sVar6": {
                    "input_string_length": 1,
                    "key_length": 1,
                    "length": 1,
                    "str_len": 6,
                    "str_length": 3,
                    "string_len": 1,
                    "string_length": 16,
                    "temp_size": 2
                },
                "uStack_3e": {
                    "param_3_copy": 1,
                    "stack_3e": 1,
                    "stack_uint3": 1,
                    "stack_var3": 6,
                    "stack_var3_e": 1,
                    "stack_var_3": 1,
                    "stack_variable_3": 1,
                    "temp_flag3": 1,
                    "temp_short": 1,
                    "temp_stack_3": 1,
                    "temp_stack_var_3": 1,
                    "temp_variable_3": 1,
                    "u_stack38": 2,
                    "u_stack3e": 3,
                    "u_stack_3e": 1,
                    "u_stack_output3": 1,
                    "undefined3": 1,
                    "undefined_stack3": 1,
                    "undefined_stack_var_3": 1,
                    "undefined_var3": 2,
                    "var5": 1
                },
                "uStack_3f": {
                    "stack_3f": 1,
                    "stack_uint2": 1,
                    "stack_var1": 1,
                    "stack_var2": 5,
                    "stack_var3_f": 1,
                    "stack_var_2": 1,
                    "stack_variable_2": 1,
                    "temp_flag2": 1,
                    "temp_stack_2": 1,
                    "temp_stack_var_2": 1,
                    "temp_variable_1": 1,
                    "u_stack39": 2,
                    "u_stack3f": 3,
                    "u_stack_3f": 2,
                    "u_stack_output1": 1,
                    "undefined2": 1,
                    "undefined_stack2": 1,
                    "undefined_stack_var_2": 1,
                    "undefined_var1": 1,
                    "undefined_var2": 1,
                    "var4": 1
                },
                "uStack_40": {
                    "param_2_copy": 1,
                    "stack_40": 1,
                    "stack_uint1": 1,
                    "stack_var1": 5,
                    "stack_var2": 1,
                    "stack_var40": 1,
                    "stack_var_1": 1,
                    "stack_variable_1": 1,
                    "temp_flag1": 1,
                    "temp_stack_1": 1,
                    "temp_stack_var_1": 1,
                    "temp_variable_2": 1,
                    "u_stack40": 5,
                    "u_stack_40": 1,
                    "u_stack_output2": 1,
                    "undefined1": 1,
                    "undefined_stack1": 1,
                    "undefined_stack_var_1": 1,
                    "undefined_var1": 1,
                    "undefined_var2": 1,
                    "var3": 1
                },
                "uVar2": {
                    "bfd_error": 1,
                    "err_code": 1,
                    "error": 11,
                    "error_code": 6,
                    "error_flag": 1,
                    "error_status": 2,
                    "error_val": 1,
                    "error_value": 1,
                    "error_var": 1,
                    "temp_int1": 1,
                    "temp_uint": 1,
                    "temp_var_1": 2,
                    "temp_var_2": 1
                },
                "uVar4": {
                    "bfd_err_msg": 1,
                    "err_msg": 4,
                    "err_output": 1,
                    "errmsg_var": 1,
                    "error_message": 7,
                    "error_msg": 9,
                    "error_string": 2,
                    "temp_long3": 1,
                    "temp_uint1": 1,
                    "temp_var_2": 2,
                    "temp_var_4": 1
                },
                "uVar5": {
                    "err_msg": 1,
                    "err_msg2": 1,
                    "error_fatal_message": 1,
                    "error_format": 1,
                    "error_message": 2,
                    "error_message_format": 1,
                    "error_msg": 3,
                    "error_msg_fmt": 1,
                    "error_str": 1,
                    "gettext_var": 1,
                    "localized_error_message": 2,
                    "localized_msg": 1,
                    "msg": 1,
                    "temp_long4": 1,
                    "temp_uint2": 1,
                    "temp_var_3": 2,
                    "temp_var_5": 1,
                    "translated_err_msg": 2,
                    "translated_error_msg": 1,
                    "translated_message": 2,
                    "translated_msg": 1,
                    "translated_text": 1,
                    "translation_msg": 1
                },
                "xrealloc": {
                    "resize_array": 1,
                    "resize_function": 1
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_00104270",
                "FUN_00104560",
                "FUN_00104240",
                "FUN_001042b0",
                "FUN_001047a0",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_0010ec73",
                "FUN_0010e6a8",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0011378f",
                "FUN_0010e918",
                "FUN_0010edb4",
                "FUN_0010e5db",
                "FUN_0010e9a0",
                "FUN_0010e8a9",
                "FUN_0010e439",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_0010ed2c",
                "FUN_0010ebb0"
            ],
            "code": "\nundefined8\nprocess_string_0010e2f0(long *hash_table,undefined flag,int param_int,undefined8 param_long,char *input_string)\n\n{\n  long temp_var1;\n  undefined4 error;\n  long temp2;\n  undefined8 error_msg;\n  undefined8 error_msg;\n  size_t string_length;\n  long result;\n  undefined4 local_var1;\n  undefined stack_var1;\n  undefined stack_var2;\n  undefined2 stack_var3;\n  undefined4 local_array [3];\n  \n  if (input_string == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    temp2 = bfd_hash_lookup(hash_table + 7,input_string,1,1);\n    if (temp2 == 0) {\n      error = bfd_get_error();\n      error_msg = bfd_errmsg(error);\n      error_msg = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      non_fatal(error_msg,error_msg);\n      return 0;\n    }\n    result = *(long *)(temp2 + 0x20);\n    if (result == -1) {\n      result = hash_table[6];\n      temp_var1 = hash_table[5];\n      *(long *)(temp2 + 0x20) = result;\n      if (temp_var1 == 0) {\n        hash_table[4] = temp2;\n      }\n      else {\n        *(long *)(temp_var1 + 0x18) = temp2;\n      }\n      hash_table[5] = temp2;\n      string_length = strlen(input_string);\n      hash_table[6] = result + 1 + string_length;\n    }\n  }\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(result,&local_var1);\n  stack_var2 = 0;\n  stack_var1 = flag;\n  (**(code **)(*(long *)(*hash_table + 8) + 0x68))((long)param_int,&stack_var3);\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(param_long,local_array);\n  if ((ulong)hash_table[3] < hash_table[2] + 0xcU) {\n    hash_table[3] = hash_table[3] * 2;\n    result = resize_array(hash_table[1]);\n    hash_table[1] = result;\n  }\n  result = hash_table[2];\n  temp2 = hash_table[1];\n  *(ulong *)(temp2 + result) = CONCAT26(stack_var3,CONCAT15(stack_var2,CONCAT14(stack_var1,local_var1)));\n  *(undefined4 *)(temp2 + 8 + result) = local_array[0];\n  hash_table[2] = hash_table[2] + 0xc;\n  return CONCAT71((int7)((ulong)result >> 8),1);\n}\n\n",
            "current_name": "process_string_0010e2f0",
            "entrypoint": "0x0010e2f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "lVar1": "temp_var1",
                "lVar3": "temp2",
                "lVar7": "result",
                "local_3c": "local_array",
                "local_44": "local_var1",
                "param_1": "hash_table",
                "param_2": "flag",
                "param_3": "param_int",
                "param_4": "param_long",
                "param_5": "input_string",
                "sVar6": "string_length",
                "uStack_3e": "stack_var3",
                "uStack_3f": "stack_var2",
                "uStack_40": "stack_var1",
                "uVar2": "error",
                "uVar4": "error_msg",
                "uVar5": "error_msg",
                "xrealloc": "resize_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e439": {
            "additional_data": {
                "FUN_0010e2f0": {
                    "process_data": 1,
                    "process_parameter": 1,
                    "process_parameters": 1,
                    "process_params": 1,
                    "process_stab_symbol": 1,
                    "process_symbol": 1,
                    "write_to_symbol_table_lto": 1
                },
                "FUN_0010e439": {
                    "set_function_parameter": 1,
                    "set_param": 1,
                    "set_param_value": 2,
                    "set_pointer_to_global_variable": 1,
                    "set_symbol": 1,
                    "set_symbol_address": 2,
                    "set_symbol_and_write": 3,
                    "set_symbol_lto_priv": 1,
                    "set_symbol_value": 2,
                    "store_param_and_write_symbol": 1,
                    "store_parameter_and_write_symbol": 1,
                    "store_parameter_in_memory": 1,
                    "store_symbol_and_write": 1,
                    "update_parameter": 1,
                    "update_symbol_and_write": 1,
                    "write_and_store_symbol": 1,
                    "write_param_to_address": 1,
                    "write_symbol": 2,
                    "write_symbol_in_lto": 1,
                    "write_symbol_lto": 1,
                    "write_symbol_to_memory": 2,
                    "write_symbol_to_stab": 2,
                    "write_to_symbol_table": 1
                },
                "param_1": {
                    "address": 1,
                    "base_addr": 1,
                    "base_address": 22,
                    "base_address_ptr": 1,
                    "function_parameter": 1,
                    "memory_address": 1,
                    "object_address": 1,
                    "param_ptr": 1,
                    "pointer_to_data_structure": 1,
                    "symbol_table": 1
                },
                "param_2": {
                    "address": 1,
                    "data": 1,
                    "flag": 2,
                    "new_value": 5,
                    "param_value": 1,
                    "symbol": 3,
                    "symbol_address": 4,
                    "symbol_value": 12,
                    "value": 2
                },
                "param_3": {
                    "param3": 2,
                    "param_3": 4,
                    "param_count": 1,
                    "param_size": 1,
                    "parameter_count": 1,
                    "size": 1,
                    "symbol_index": 1,
                    "symbol_size": 1,
                    "symbol_type": 1,
                    "unknown_param": 1,
                    "unused_param": 2
                },
                "param_4": {
                    "param": 1,
                    "param4": 2,
                    "param_4": 4,
                    "param_unused": 1,
                    "param_val": 1,
                    "param_value": 1,
                    "parameter_address": 1,
                    "symbol_type": 1,
                    "unused_param": 1,
                    "unused_param2": 2,
                    "unused_value": 1
                },
                "param_5": {
                    "param5": 1,
                    "param_5": 2,
                    "param_name": 1,
                    "param_ptr": 1,
                    "param_str": 1,
                    "parameter_name": 1,
                    "str": 1,
                    "string": 1,
                    "symbol_name": 6,
                    "unused_param3": 1
                },
                "stab_write_symbol_lto_priv_0": {
                    "write_private_stab_symbol": 1,
                    "write_stab_symbol": 1,
                    "write_symbol": 4,
                    "write_symbol_lto": 1,
                    "write_symbol_lto_priv": 1,
                    "write_symbol_to_debug_info": 2,
                    "write_symbol_to_private_structure": 1,
                    "write_symbol_to_stab": 5
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_0010e451",
                "FUN_0011378f"
            ],
            "code": "\nvoid set_symbol_and_write_0010e439(long base_address,undefined8 symbol_value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = symbol_value;\n  write_symbol_to_stab(base_address,0x84,0,0,symbol_value);\n  return;\n}\n\n",
            "current_name": "set_symbol_and_write_0010e439",
            "entrypoint": "0x0010e439",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e439": "set_symbol_and_write_0010e439",
                "param_1": "base_address",
                "param_2": "symbol_value",
                "stab_write_symbol_lto_priv_0": "write_symbol_to_stab"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e451": {
            "called": [
                "FUN_0010e439"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nvoid stab_start_source_lto_priv_0(long param_1,undefined8 param_2)\n\n{\n  *(undefined8 *)(param_1 + 0x210) = param_2;\n  stab_write_symbol_lto_priv_0(param_1,0x84,0,0,param_2);\n  return;\n}\n\n",
            "current_name": "FUN_0010e451",
            "entrypoint": "0x0010e451",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_0010e453": {
            "additional_data": {
                "FUN_0010e453": {
                    "convert_to_symbol": 1,
                    "create_stab_symbol": 1,
                    "decompile_function": 1,
                    "extract_and_push_string": 2,
                    "extract_and_push_strings": 1,
                    "extract_and_write_symbols": 1,
                    "extract_debug_info": 1,
                    "extract_symbol_data": 2,
                    "extract_symbol_information": 1,
                    "format_strings_and_push_to_stab": 1,
                    "generate_stab_entry": 2,
                    "parse_and_write_symbol": 1,
                    "process_data": 2,
                    "process_param": 1,
                    "process_symbols": 1,
                    "reverse_and_push_strings": 1,
                    "reverse_symbol": 2
                },
                "__s": {
                    "buffer": 1,
                    "dynamic_string": 1,
                    "formatted_str": 1,
                    "formatted_string": 11,
                    "formatted_symbol": 5,
                    "modified_string": 1,
                    "new_string": 2,
                    "new_symbol": 1,
                    "stab_entry": 2,
                    "stab_string": 1,
                    "symbol": 1,
                    "symbol_stab": 1,
                    "symbol_string": 3
                },
                "cVar2": {
                    "is_successful": 1,
                    "operation_result": 1,
                    "result": 16,
                    "result_flag": 1,
                    "status": 6,
                    "success": 1,
                    "success_flag": 2,
                    "temp_char": 1,
                    "temp_char_var": 1
                },
                "lVar1": {
                    "alias": 2,
                    "array_element": 2,
                    "current_data": 1,
                    "current_list_element": 1,
                    "current_offset": 1,
                    "current_output_string_size": 1,
                    "current_ptr": 1,
                    "current_string": 1,
                    "current_string_length": 1,
                    "current_type": 1,
                    "current_type_name": 1,
                    "current_value": 1,
                    "dependency_address": 1,
                    "element": 1,
                    "length": 5,
                    "string_length": 1,
                    "string_ptr": 1,
                    "symbol_ptr": 1,
                    "temp_long_var": 1,
                    "temp_number": 1,
                    "type_address": 1,
                    "type_length": 1,
                    "type_pointer": 2,
                    "type_string_ptr": 1
                },
                "lVar5": {
                    "count": 5,
                    "counter": 4,
                    "formatted_string_length": 1,
                    "index": 1,
                    "length": 1,
                    "string_length": 1,
                    "symbol_length": 1,
                    "temp_long_var2": 1,
                    "temp_number2": 1,
                    "total_length": 3,
                    "total_string_length": 1,
                    "type_count": 5,
                    "type_counter": 4,
                    "type_index": 2
                },
                "lVar7": {
                    "alias_index": 1,
                    "array_index": 1,
                    "current_offset": 1,
                    "current_string_index": 1,
                    "data_index": 1,
                    "dependency_index": 1,
                    "index": 3,
                    "offset": 13,
                    "string_index": 1,
                    "symbol_index": 1,
                    "temp_long_var3": 1,
                    "type_index": 4,
                    "type_index_counter": 1,
                    "type_offset": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 2,
                    "base_address": 1,
                    "data_length": 1,
                    "debug_info_ptr": 1,
                    "input": 4,
                    "input_num": 1,
                    "input_number": 1,
                    "input_param": 1,
                    "input_ptr": 1,
                    "input_value": 4,
                    "param_base_address": 1,
                    "param_symbol_table": 1,
                    "symbol_address": 1,
                    "symbol_table": 10
                },
                "param_2": {
                    "filename": 1,
                    "identifier": 1,
                    "input_str": 1,
                    "input_string": 10,
                    "name": 3,
                    "source_file": 1,
                    "string": 1,
                    "string1": 1,
                    "string_param": 2,
                    "symbol": 2,
                    "symbol_name": 8
                },
                "param_3": {
                    "aliases": 1,
                    "array_param": 1,
                    "data": 1,
                    "input_strings": 1,
                    "output_string_array": 1,
                    "string_array": 7,
                    "string_array_ptr": 1,
                    "string_list": 4,
                    "strings": 2,
                    "symbol_aliases": 1,
                    "symbol_array": 1,
                    "symbol_dependencies": 1,
                    "symbol_list": 1,
                    "symbols": 1,
                    "type_list": 2,
                    "type_names": 1,
                    "type_strings": 1,
                    "types": 3
                },
                "param_4": {
                    "arg1": 1,
                    "new_param_4": 1
                },
                "param_5": {
                    "arg2": 1,
                    "param_string": 1,
                    "string2": 1
                },
                "ppcVar6": {
                    "alias_ptr": 1,
                    "array_pointer": 2,
                    "array_ptr": 2,
                    "current_data_ptr": 1,
                    "current_output_string": 1,
                    "current_string": 7,
                    "current_string_pointer": 1,
                    "current_symbol": 1,
                    "current_type": 1,
                    "dependency": 1,
                    "str_arr": 1,
                    "string_list_ptr": 1,
                    "string_pointer": 1,
                    "symbol_list": 1,
                    "temp_string_array": 1,
                    "type": 1,
                    "type_alias": 1,
                    "type_array": 1,
                    "type_iterator": 1,
                    "type_list": 1,
                    "type_list_ptr": 1,
                    "type_pointer": 1,
                    "type_string": 1
                },
                "sVar3": {
                    "current_string_length": 1,
                    "input_length": 1,
                    "input_str_length": 1,
                    "length": 5,
                    "size": 1,
                    "str_len": 1,
                    "str_length": 1,
                    "string_length": 13,
                    "string_size": 1,
                    "substring_length": 1,
                    "symbol_length": 2,
                    "symbol_name_length": 2,
                    "total_length": 1
                },
                "uVar4": {
                    "outcome": 1,
                    "result": 8,
                    "return_value": 7,
                    "success": 11,
                    "success_flag": 3,
                    "success_indicator": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b52",
                "FUN_00109cf4",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 extract_symbol_information_0010e453(long symbol_table,char *input_string,char **string_array)\n\n{\n  long length;\n  char result;\n  size_t string_length;\n  undefined2 *formatted_string;\n  undefined8 success;\n  long count;\n  char **current_string;\n  long offset;\n  \n  if (string_array == (char **)0x0) {\n    if (input_string != (char *)0x0) {\n      string_length = strlen(input_string);\n      formatted_string = (undefined2 *)xmalloc(string_length + 10);\n      sprintf((char *)formatted_string,\"xe%s:\",input_string);\nLAB_0010e578:\n      result = stab_push_string(symbol_table,formatted_string,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    success = 0;\n  }\n  else {\n    count = 10;\n    current_string = string_array;\n    if (input_string != (char *)0x0) {\n      string_length = strlen(input_string);\n      count = string_length + 10;\n    }\n    for (; *current_string != (char *)0x0; current_string = current_string + 1) {\n      string_length = strlen(*current_string);\n      count = count + 0x14 + string_length;\n    }\n    formatted_string = (undefined2 *)xmalloc(count);\n    if (input_string == (char *)0x0) {\n      *formatted_string = 0x65;\n      count = 0;\n    }\n    else {\n      count = *(long *)(symbol_table + 0x68);\n      *(long *)(symbol_table + 0x68) = count + 1;\n      sprintf((char *)formatted_string,\"%s:T%ld=e\",input_string,count);\n    }\n    offset = 0;\n    while( true ) {\n      length = *(long *)((long)string_array + offset);\n      string_length = strlen((char *)formatted_string);\n      if (length == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formatted_string + string_length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formatted_string + string_length) = 0x3b;\n    if (input_string == (char *)0x0) goto LAB_0010e578;\n    result = stab_write_symbol_lto_priv_0(symbol_table,0x80,0,0,formatted_string);\n    if ((result == '\\0') || (result = stab_push_defined_type(symbol_table,count,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formatted_string);\n    success = 1;\n  }\n  return success;\n}\n\n",
            "current_name": "extract_symbol_information_0010e453",
            "entrypoint": "0x0010e453",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e453": "extract_symbol_information_0010e453",
                "__s": "formatted_string",
                "cVar2": "result",
                "lVar1": "length",
                "lVar5": "count",
                "lVar7": "offset",
                "param_1": "symbol_table",
                "param_2": "input_string",
                "param_3": "string_array",
                "ppcVar6": "current_string",
                "sVar3": "string_length",
                "uVar4": "success"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e5db": {
            "additional_data": {
                "FUN_0010e5db": {
                    "get_modified_type": 1,
                    "process_and_modify_symbols": 1,
                    "process_data": 2,
                    "process_param": 1,
                    "reverse_and_modify": 3,
                    "reverse_and_modify_symbols": 1,
                    "reverse_and_modify_types": 2
                },
                "__ptr": {
                    "allocated_memory": 1,
                    "dynamic_memory_ptr": 1,
                    "memory_block": 1,
                    "pointer": 6,
                    "pointer1": 1,
                    "pointer_to_free": 1,
                    "popped_pointer": 2,
                    "ptr": 8,
                    "ptr_1": 2,
                    "ptr_to_free": 6,
                    "ptr_variable": 2
                },
                "__s": {
                    "popped_string": 2,
                    "str": 3,
                    "str_1": 2,
                    "str_ptr": 1,
                    "str_to_free": 2,
                    "string": 10,
                    "string1": 1,
                    "string_ptr": 1,
                    "string_to_free": 3,
                    "string_to_modify": 1,
                    "string_variable": 2,
                    "symbol": 2,
                    "symbol_string": 1
                },
                "__s_00": {
                    "modified_str": 1,
                    "modified_string": 15,
                    "modified_string_ptr": 1,
                    "modified_symbol": 2,
                    "modified_symbol_string": 1,
                    "new_str": 4,
                    "new_str_ptr": 1,
                    "new_string": 3,
                    "str_2": 2,
                    "string2": 1
                },
                "auVar4": {
                    "modified_result": 1,
                    "modified_return_value": 4,
                    "new_return_value": 1,
                    "output": 1,
                    "result": 10,
                    "result_variable": 1,
                    "return_data": 1,
                    "return_val": 1,
                    "return_value": 9
                },
                "cVar1": {
                    "char_1": 1,
                    "char_value": 1,
                    "is_symbol_written": 1,
                    "result": 5,
                    "result_char": 1,
                    "success": 1,
                    "success_flag": 1,
                    "symbol": 1,
                    "symbol_result": 1,
                    "symbol_status": 1,
                    "symbol_write_result": 2,
                    "symbol_written": 3,
                    "write_success": 8,
                    "write_symbol_result": 1
                },
                "iVar3": {
                    "count": 2,
                    "counter": 8,
                    "i": 1,
                    "iteration": 2,
                    "iteration_count": 12,
                    "iteration_counter": 1,
                    "loop_counter": 3,
                    "symbol_count": 1,
                    "symbol_index": 1
                },
                "in_R10": {
                    "additional_data": 1,
                    "additional_param": 4,
                    "additional_parameter": 1,
                    "additional_value": 1,
                    "constant": 1,
                    "extra_data": 2,
                    "num": 1,
                    "random_value": 1,
                    "register_value": 2,
                    "register_variable": 1,
                    "return_value": 6,
                    "some_value": 1,
                    "temp_var": 1,
                    "ulong_var": 2,
                    "value": 2,
                    "value_1": 1,
                    "variable_r10": 1
                },
                "param_1": {
                    "array_ptr": 1,
                    "base_address": 1,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "data_variable": 1,
                    "input": 3,
                    "input_param": 7,
                    "input_pointer": 3,
                    "input_ptr": 2,
                    "input_value": 4,
                    "original_parameter": 1,
                    "ptr1": 1,
                    "some_data": 1,
                    "symbol_table": 2
                },
                "param_2": {
                    "count": 4,
                    "counter": 1,
                    "iteration_limit": 3,
                    "iterations": 2,
                    "length": 3,
                    "limit": 6,
                    "loop_count": 1,
                    "loop_limit": 1,
                    "loop_threshold": 1,
                    "max_iterations": 1,
                    "num_iterations": 5,
                    "num_symbols": 1,
                    "param_count": 1,
                    "symbol_count": 1
                },
                "param_3": {
                    "arg3": 1
                },
                "sVar2": {
                    "len": 1,
                    "str_len": 4,
                    "str_length": 4,
                    "string_length": 19,
                    "symbol_length": 3
                },
                "stab_modify_type": {
                    "modify_type": 1
                },
                "stab_pop_type": {
                    "pop_type": 1
                },
                "stab_write_symbol_lto_priv_0": {
                    "write_symbol": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109ed3",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] reverse_and_modify_types_0010e5db(long input_param,int limit)\n\n{\n  char write_success;\n  void *ptr;\n  char *string;\n  size_t string_length;\n  char *modified_string;\n  ulong return_value;\n  int iteration_count;\n  undefined result [16];\n  \n  iteration_count = 0;\n  do {\n    if (limit <= iteration_count) {\n      result = modify_type(input_param,0x66,0,input_param + 0x188,input_param + 400,return_value);\n      return result;\n    }\n    if (*(char *)(*(long *)(input_param + 0x60) + 0x1c) == '\\0') {\n      ptr = (void *)pop_type(input_param);\n      free(ptr);\n    }\n    else {\n      string = (char *)pop_type(input_param);\n      string_length = strlen(string);\n      modified_string = (char *)allocate_memory(string_length + 3);\n      sprintf(modified_string,\":t%s\",string);\n      free(string);\n      write_success = write_symbol(input_param,0x80,0,0,modified_string);\n      if (write_success == '\\0') {\n        result._8_8_ = 0;\n        result._0_8_ = return_value;\n        return result << 0x40;\n      }\n      free(modified_string);\n    }\n    iteration_count = iteration_count + 1;\n  } while( true );\n}\n\n",
            "current_name": "reverse_and_modify_types_0010e5db",
            "entrypoint": "0x0010e5db",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e5db": "reverse_and_modify_types_0010e5db",
                "__ptr": "ptr",
                "__s": "string",
                "__s_00": "modified_string",
                "auVar4": "result",
                "cVar1": "write_success",
                "iVar3": "iteration_count",
                "in_R10": "return_value",
                "param_1": "input_param",
                "param_2": "limit",
                "sVar2": "string_length",
                "stab_modify_type": "modify_type",
                "stab_pop_type": "pop_type",
                "stab_write_symbol_lto_priv_0": "write_symbol",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e6a8": {
            "additional_data": {
                "FUN_00109b2f": {
                    "get_stab_data": 1,
                    "sub_function_2": 1
                },
                "FUN_0010e2f0": {
                    "push_type": 1,
                    "sub_function": 1
                },
                "FUN_0010e6a8": {
                    "generate_stab_entry": 1,
                    "generate_symbol": 1,
                    "parse_and_write_symbol": 2,
                    "process_symbol": 1,
                    "reverse_string_hash": 1,
                    "reverse_symbol": 2,
                    "write_stab_symbol": 1,
                    "write_symbol": 5,
                    "write_symbol_to_hash": 2,
                    "write_symbol_to_hash_table": 1,
                    "write_symbol_to_private_table": 1,
                    "write_symbol_with_length": 1,
                    "write_symbol_with_type": 1
                },
                "FUN_00119ed0": {
                    "non_fatal": 1,
                    "sub_function_3": 1
                },
                "__s": {
                    "last_type": 1,
                    "pop_type": 1,
                    "popped_type": 4,
                    "stack_string": 2,
                    "string_1": 1,
                    "symbol_type": 5,
                    "symbol_type_popped": 1,
                    "type": 8,
                    "type_info": 2,
                    "type_name": 2,
                    "type_pop": 1,
                    "type_string": 3
                },
                "__s_00": {
                    "allocated_string": 1,
                    "combined_string": 2,
                    "concatenated_string": 1,
                    "dynamic_string": 1,
                    "extended_symbol": 1,
                    "formatted_str": 1,
                    "formatted_string": 5,
                    "formatted_symbol": 10,
                    "modified_string": 1,
                    "new_symbol": 3,
                    "output_string": 2,
                    "result_string": 1,
                    "stab_entry": 1,
                    "symbol_with_type": 1
                },
                "auVar10": {
                    "output": 2,
                    "output_result": 1,
                    "result": 9,
                    "result_struct": 1,
                    "return_struct": 2,
                    "return_type": 1,
                    "return_val": 1,
                    "return_value": 7,
                    "return_values": 1,
                    "return_variable": 1
                },
                "bfd_errmsg": {
                    "err_message": 1,
                    "error_message": 1
                },
                "bfd_get_error": {
                    "get_error": 2
                },
                "bfd_hash_lookup": {
                    "hash_lookup": 1,
                    "symbol_lookup": 1
                },
                "dcgettext": {
                    "get_localized_text": 1,
                    "get_translation": 1
                },
                "free": {
                    "free_memory": 1
                },
                "lVar5": {
                    "hash_lookup_result": 13,
                    "hash_result": 1,
                    "lookup_result": 12,
                    "symbol_hash": 1,
                    "symbol_lookup": 1,
                    "symbol_lookup_result": 1
                },
                "lVar8": {
                    "count": 1,
                    "counter": 5,
                    "symbol_count": 6,
                    "symbol_counter": 2,
                    "symbol_index": 11,
                    "type_count": 1,
                    "type_counter": 2,
                    "type_index": 1,
                    "type_number": 2
                },
                "non_fatal": {
                    "handle_error": 2
                },
                "param_1": {
                    "binary": 2,
                    "binary_addr": 1,
                    "binary_address": 2,
                    "binary_data": 2,
                    "binary_file": 1,
                    "binary_header": 1,
                    "binary_pointer": 1,
                    "context": 1,
                    "data_pointer": 1,
                    "data_structure": 2,
                    "file": 1,
                    "function_param1": 1,
                    "function_table": 1,
                    "hash_table": 1,
                    "input_data": 1,
                    "param1": 1,
                    "symbol_table": 11
                },
                "param_2": {
                    "input_string": 4,
                    "name": 1,
                    "string_param": 2,
                    "symbol": 3,
                    "symbol_name": 21
                },
                "param_3": {
                    "param1": 1,
                    "param3": 9,
                    "param_3": 16,
                    "type": 3,
                    "undefined8_param": 1,
                    "unknown_param": 1
                },
                "param_4": {
                    "param2": 1,
                    "param4": 8,
                    "param_4": 16,
                    "return_value": 1,
                    "undefined8_param2": 1,
                    "unknown_param_2": 1,
                    "value": 3
                },
                "param_5": {
                    "additional_info": 1,
                    "formatted_symbol": 1,
                    "hash_param": 1,
                    "param_5": 1,
                    "type_value": 1
                },
                "sVar3": {
                    "input_string_length": 3,
                    "length_input_string": 1,
                    "name_length": 1,
                    "param2_length": 2,
                    "param_2_length": 1,
                    "symbol_len": 2,
                    "symbol_length": 2,
                    "symbol_name_len": 2,
                    "symbol_name_length": 17
                },
                "sVar4": {
                    "last_type_length": 1,
                    "length_string_1": 1,
                    "pop_type_length": 1,
                    "popped_type_length": 4,
                    "stack_string_length": 2,
                    "symbol_type_len": 1,
                    "symbol_type_length": 5,
                    "type_info_len": 1,
                    "type_info_length": 1,
                    "type_len": 1,
                    "type_length": 7,
                    "type_name_len": 1,
                    "type_name_length": 1,
                    "type_pop_length": 1,
                    "type_string_length": 3
                },
                "sprintf": {
                    "format_string": 1
                },
                "stab_pop_type": {
                    "pop_symbol_type": 1,
                    "pop_type": 1
                },
                "stab_write_symbol_lto_priv_0": {
                    "write_symbol": 1
                },
                "stad_write_symbol_lto_priv_0": {
                    "write_symbol": 1
                },
                "uVar1": {
                    "result": 2,
                    "symbol_write_result": 3,
                    "symbol_write_status": 2,
                    "symbol_written": 2,
                    "write_result": 5,
                    "write_stab_success": 1,
                    "write_status": 2,
                    "write_success": 2,
                    "write_symbol_result": 5
                },
                "uVar2": {
                    "result": 1,
                    "symbol": 1,
                    "symbol_attribute": 1,
                    "symbol_attributes": 1,
                    "symbol_data_type": 1,
                    "symbol_flag": 1,
                    "symbol_type": 14,
                    "symbol_type_indicator": 1,
                    "symbol_type_size": 1,
                    "symbol_value": 2,
                    "symbol_visibility": 1,
                    "type_code": 2,
                    "type_value": 2,
                    "value": 1
                },
                "uVar6": {
                    "bfd_error_message": 1,
                    "bfd_error_msg": 2,
                    "err_msg": 1,
                    "errmsg_ptr": 1,
                    "error_description": 1,
                    "error_message": 6,
                    "error_msg": 3,
                    "error_string": 2
                },
                "uVar7": {
                    "err_message": 1,
                    "error_format": 4,
                    "error_message": 5,
                    "error_msg": 1,
                    "error_msg_format": 2,
                    "error_string": 1,
                    "error_text": 1,
                    "errormsg": 1
                },
                "uVar9": {
                    "final_return_value": 1,
                    "result": 5,
                    "result_status": 1,
                    "return_value": 9,
                    "status": 1,
                    "symbol_write_result": 2,
                    "symbol_write_status": 1,
                    "u_result": 1,
                    "write_result": 2,
                    "write_status": 1
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00104560",
                "FUN_00104240",
                "FUN_00109b2f",
                "FUN_001047a0",
                "FUN_00104390",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] write_symbol_to_hash_table_0010e6a8(long symbol_table,char *symbol_name,undefined8 param_3,undefined8 param_4)\n\n{\n  uint write_result;\n  undefined4 symbol_type;\n  char *type;\n  size_t symbol_name_length;\n  size_t type_length;\n  char *formatted_symbol;\n  long hash_lookup_result;\n  undefined8 error_message;\n  undefined8 error_message;\n  long symbol_index;\n  ulong return_value;\n  undefined result [16];\n  \n  symbol_index = *(long *)(*(long *)(symbol_table + 0x60) + 0x10);\n  symbol_type = *(undefined4 *)(*(long *)(symbol_table + 0x60) + 0x18);\n  type = (char *)pop_symbol_type();\n  symbol_name_length = strlen(symbol_name);\n  type_length = strlen(type);\n  formatted_symbol = (char *)allocate_memory(symbol_name_length + 0x14 + type_length);\n  if (symbol_index < 1) {\n    symbol_index = *(long *)(symbol_table + 0x68);\n    *(long *)(symbol_table + 0x68) = symbol_index + 1;\n    format_string(formatted_symbol,\"%s:t%ld=%s\",symbol_name,symbol_index,type);\n  }\n  else {\n    format_string(formatted_symbol,\"%s:t%s\",symbol_name,type);\n  }\n  free_memory(type);\n  write_result = write_symbol(symbol_table,0x80,0,0,formatted_symbol);\n  return_value = (ulong)write_result;\n  if ((char)write_result != '\\0') {\n    free_memory(formatted_symbol);\n    hash_lookup_result = hash_lookup(symbol_table + 0x1b8,symbol_name,1,0);\n    if (hash_lookup_result != 0) {\n      *(long *)(hash_lookup_result + 0x20) = symbol_index;\n      *(undefined4 *)(hash_lookup_result + 0x28) = symbol_type;\n      goto LAB_0010e7b3;\n    }\n    symbol_type = get_error();\n    error_message = err_message(symbol_type);\n    error_message = get_translation(0,\"string_hash_lookup failed: %s\",5);\n    handle_error(error_message,error_message);\n  }\n  return_value = 0;\nLAB_0010e7b3:\n  result._8_8_ = param_4;\n  result._0_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "write_symbol_to_hash_table_0010e6a8",
            "entrypoint": "0x0010e6a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e6a8": "write_symbol_to_hash_table_0010e6a8",
                "__s": "type",
                "__s_00": "formatted_symbol",
                "auVar10": "result",
                "bfd_errmsg": "err_message",
                "bfd_get_error": "get_error",
                "bfd_hash_lookup": "hash_lookup",
                "dcgettext": "get_translation",
                "free": "free_memory",
                "lVar5": "hash_lookup_result",
                "lVar8": "symbol_index",
                "non_fatal": "handle_error",
                "param_1": "symbol_table",
                "param_2": "symbol_name",
                "sVar3": "symbol_name_length",
                "sVar4": "type_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_symbol_type",
                "stab_write_symbol_lto_priv_0": "write_symbol",
                "uVar1": "write_result",
                "uVar2": "symbol_type",
                "uVar6": "error_message",
                "uVar7": "error_message",
                "uVar9": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e7c2": {
            "additional_data": {
                "FUN_0010e7c2": {
                    "add_symbol_to_table": 1,
                    "combine_strings": 1,
                    "concatenate_and_write_symbol": 1,
                    "create_symbol_and_write_to_table": 1,
                    "create_symbol_from_strings": 1,
                    "create_symbol_with_prefix": 1,
                    "decompose_and_write_symbol": 1,
                    "extract_symbol_and_write": 1,
                    "generate_stab_string": 1,
                    "process_and_write_symbol": 2,
                    "process_symbol": 2,
                    "reverse_and_create_symbol": 1,
                    "reverse_and_write_symbol": 8,
                    "reverse_string_length_concat": 1,
                    "reverse_symbol": 1,
                    "symbolize_and_write_to_stab": 1,
                    "write_symbol_to_file": 1
                },
                "__s": {
                    "existing_symbol_data": 1,
                    "extracted_symbol": 1,
                    "file_buffer": 1,
                    "input_string": 1,
                    "popped_string": 6,
                    "popped_symbol": 2,
                    "popped_type": 2,
                    "popped_value": 1,
                    "str2": 1,
                    "string_2": 1,
                    "suffix": 2,
                    "symbol": 7,
                    "symbol_value": 1,
                    "table_entry": 1,
                    "type": 2,
                    "type_string": 1
                },
                "__s_00": {
                    "combined_str": 1,
                    "combined_string": 5,
                    "combined_symbol_data": 1,
                    "concatenated_string": 4,
                    "modified_string": 1,
                    "modified_symbol": 1,
                    "new_entry": 1,
                    "new_file_buffer": 1,
                    "new_string": 4,
                    "new_symbol": 6,
                    "new_type_string": 1,
                    "output_string": 1,
                    "result": 1,
                    "result_symbol": 1,
                    "stab_string": 1,
                    "symbol_with_prefix": 1
                },
                "auVar3": {
                    "output_data": 1,
                    "result": 25,
                    "return_data": 1,
                    "return_value": 2,
                    "status": 1
                },
                "param_1": {
                    "arg1": 3,
                    "file_descriptor": 1,
                    "file_handle": 1,
                    "function_code": 1,
                    "input": 1,
                    "input1": 3,
                    "input_1": 1,
                    "input_data": 2,
                    "input_param": 3,
                    "input_param_1": 1,
                    "input_val": 1,
                    "input_value": 2,
                    "param1": 1,
                    "param_ptr": 1,
                    "symbol": 5,
                    "symbol_table": 1,
                    "symbol_value": 2,
                    "type": 1
                },
                "param_2": {
                    "input_str": 1,
                    "input_string": 5,
                    "name": 1,
                    "original_string": 3,
                    "prefix": 5,
                    "str1": 1,
                    "string1": 5,
                    "string_1": 1,
                    "string_param": 1,
                    "symbol": 3,
                    "symbol_name": 5
                },
                "param_3": {
                    "arg2": 1,
                    "arg3": 2,
                    "extra_param": 1,
                    "flag": 1,
                    "input2": 2,
                    "input_flag": 1,
                    "input_param_3": 1,
                    "input_size": 1,
                    "length_1": 1,
                    "param": 1,
                    "param3": 3,
                    "param_3": 4,
                    "param_size": 1,
                    "size1": 1,
                    "unknown": 1,
                    "unused": 1,
                    "unused_param": 6,
                    "unused_value": 1,
                    "unused_variable": 1
                },
                "param_4": {
                    "additional_data": 1,
                    "arg4": 2,
                    "data": 2,
                    "input3": 2,
                    "input_param_4": 1,
                    "output": 1,
                    "output_data": 2,
                    "output_param": 6,
                    "output_val": 1,
                    "param4": 3,
                    "param_4": 3,
                    "param_value": 1,
                    "ptr": 1,
                    "size2": 1,
                    "symbol_data": 1,
                    "user_data": 1,
                    "value": 2
                },
                "sVar1": {
                    "input_len": 1,
                    "input_length": 1,
                    "input_string_length": 3,
                    "length_2": 1,
                    "length_string1": 1,
                    "name_length": 1,
                    "original_string_length": 2,
                    "param2_len": 1,
                    "prefix_len": 2,
                    "prefix_length": 3,
                    "str1_len": 1,
                    "string1_length": 4,
                    "string_length1": 1,
                    "symbol_length": 3,
                    "symbol_name_len": 2,
                    "symbol_name_length": 3
                },
                "sVar2": {
                    "existing_symbol_data_length": 1,
                    "extracted_symbol_len": 1,
                    "file_buffer_length": 1,
                    "input_string_length": 1,
                    "length_3": 1,
                    "length_symbol": 1,
                    "popped_string_length": 5,
                    "popped_symbol_length": 2,
                    "popped_type_len": 1,
                    "popped_type_length": 1,
                    "popped_value_length": 1,
                    "str2_len": 1,
                    "string_length2": 1,
                    "suffix_len": 1,
                    "suffix_length": 1,
                    "symbol_len": 3,
                    "symbol_length": 2,
                    "symbol_value_length": 1,
                    "table_entry_length": 1,
                    "type_length": 2,
                    "type_string_length": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] reverse_and_write_symbol_0010e7c2(undefined8 symbol,char *prefix,undefined8 unused_param,undefined8 output_param)\n\n{\n  char *symbol;\n  size_t string1_length;\n  size_t popped_string_length;\n  char *new_symbol;\n  undefined result [16];\n  \n  symbol = (char *)stab_pop_type();\n  string1_length = strlen(prefix);\n  popped_string_length = strlen(symbol);\n  new_symbol = (char *)xmalloc(string1_length + 3 + popped_string_length);\n  sprintf(new_symbol,\"%s:T%s\",prefix,symbol);\n  free(symbol);\n  result._0_4_ = stab_write_symbol_lto_priv_0(symbol,0x80,0,0,new_symbol);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(new_symbol);\n  }\n  result._8_8_ = output_param;\n  return result;\n}\n\n",
            "current_name": "reverse_and_write_symbol_0010e7c2",
            "entrypoint": "0x0010e7c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e7c2": "reverse_and_write_symbol_0010e7c2",
                "__s": "symbol",
                "__s_00": "new_symbol",
                "auVar3": "result",
                "param_1": "symbol",
                "param_2": "prefix",
                "param_3": "unused_param",
                "param_4": "output_param",
                "sVar1": "string1_length",
                "sVar2": "popped_string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e842": {
            "additional_data": {
                "FUN_0010e842": {
                    "add_symbol_and_value_to_debugging_info": 1,
                    "generate_symbol_string": 1,
                    "symbolize_and_write": 1,
                    "write_formatted_symbol": 1,
                    "write_lto_symbol": 1,
                    "write_stab_symbol": 3,
                    "write_stab_symbol_to_binary": 1,
                    "write_symbol": 3,
                    "write_symbol_information": 1,
                    "write_symbol_lto": 2,
                    "write_symbol_lto_priv": 2,
                    "write_symbol_to_debug_file": 1,
                    "write_symbol_to_debug_info": 1,
                    "write_symbol_to_file": 1,
                    "write_symbol_to_lto": 1,
                    "write_symbol_to_memory": 1,
                    "write_symbol_to_stab": 1,
                    "write_symbol_to_table": 1,
                    "write_symbol_with_count": 1,
                    "write_symbol_with_data": 1,
                    "write_symbol_with_info": 2,
                    "write_symbol_with_meta_data": 1,
                    "write_symbol_with_value": 1,
                    "write_to_symbol_table": 1
                },
                "__s": {
                    "formatted_data": 1,
                    "formatted_string": 15,
                    "formatted_symbol": 7,
                    "new_str": 1,
                    "new_string": 2,
                    "output_string": 1,
                    "symbol_string": 3,
                    "symbol_with_information": 1
                },
                "auVar2": {
                    "result": 29,
                    "symbol_info": 1,
                    "write_result": 1
                },
                "param_1": {
                    "argument1": 1,
                    "data": 2,
                    "debugging_info": 1,
                    "file": 2,
                    "file_handle": 3,
                    "handle": 2,
                    "param": 1,
                    "param1": 1,
                    "param_1": 2,
                    "param_a": 1,
                    "param_symbol_table": 1,
                    "symbol": 3,
                    "symbol_info": 1,
                    "symbol_table": 9,
                    "table_ptr": 1
                },
                "param_2": {
                    "input_str": 1,
                    "input_string": 4,
                    "name": 3,
                    "source_file": 1,
                    "string": 2,
                    "symbol": 4,
                    "symbol_name": 16
                },
                "param_3": {
                    "count": 7,
                    "counter": 3,
                    "index": 3,
                    "int_value": 1,
                    "integer_value": 2,
                    "iteration": 1,
                    "line_number": 1,
                    "param3": 1,
                    "param_3": 1,
                    "symbol_index": 4,
                    "symbol_value": 3,
                    "value": 4
                },
                "param_4": {
                    "additional_info": 1,
                    "argument4": 1,
                    "custom_data": 1,
                    "data": 10,
                    "debug_flag": 1,
                    "extra_data": 1,
                    "extra_info": 1,
                    "param4": 2,
                    "param_4": 5,
                    "param_d": 1,
                    "param_data": 1,
                    "parameter": 1,
                    "ptr_value": 1,
                    "user_data": 1,
                    "value": 3
                },
                "sVar1": {
                    "input_length": 1,
                    "input_string_length": 1,
                    "len": 1,
                    "name_length": 3,
                    "str_len": 1,
                    "string_length": 7,
                    "symbol_length": 5,
                    "symbol_name_length": 12
                },
                "stab_write_symbol_lto_priv_0": {
                    "write_symbol_lto_priv": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] write_stab_symbol_to_binary_0010e842(undefined8 symbol_table,char *symbol_name,undefined8 count,undefined8 data)\n\n{\n  size_t symbol_name_length;\n  char *formatted_string;\n  undefined result [16];\n  \n  symbol_name_length = strlen(symbol_name);\n  formatted_string = (char *)xmalloc(symbol_name_length + 0x14);\n  sprintf(formatted_string,\"%s:c=i%ld\",symbol_name,count);\n  result._0_4_ = write_symbol_lto_priv(symbol_table,0x80,0,0,formatted_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formatted_string);\n  }\n  result._8_8_ = data;\n  return result;\n}\n\n",
            "current_name": "write_stab_symbol_to_binary_0010e842",
            "entrypoint": "0x0010e842",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e842": "write_stab_symbol_to_binary_0010e842",
                "__s": "formatted_string",
                "auVar2": "result",
                "param_1": "symbol_table",
                "param_2": "symbol_name",
                "param_3": "count",
                "param_4": "data",
                "sVar1": "symbol_name_length",
                "stab_write_symbol_lto_priv_0": "write_symbol_lto_priv"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e8a9": {
            "additional_data": {
                "FUN_0010e8a9": {
                    "write_lto": 1,
                    "write_lto_symbol": 1,
                    "write_something": 1,
                    "write_stab_symbol": 2,
                    "write_symbol": 3,
                    "write_symbol_lto": 2,
                    "write_symbol_lto_priv": 1,
                    "write_symbol_lto_private": 1,
                    "write_symbol_to_file": 6,
                    "write_symbol_to_lto": 4,
                    "write_symbol_to_lto_private": 1,
                    "write_symbol_to_private_table": 1,
                    "write_symbol_to_stab": 1,
                    "write_symbol_to_table": 1,
                    "write_symbol_with_length": 1,
                    "write_symbol_with_prefix": 2,
                    "write_symbol_with_values": 1,
                    "write_to_symbol_table": 1
                },
                "__s": {
                    "allocated_memory": 1,
                    "allocated_string": 2,
                    "buffer": 1,
                    "dynamic_buffer": 1,
                    "dynamic_string": 2,
                    "formatted_string": 10,
                    "formatted_symbol": 1,
                    "new_str": 2,
                    "new_string": 4,
                    "new_symbol": 1,
                    "output_string": 2,
                    "symbol": 1,
                    "symbol_string": 3
                },
                "param_1": {
                    "file_name": 1,
                    "input_string": 1,
                    "param1": 14,
                    "param_1": 8,
                    "param_a": 1,
                    "param_address": 1,
                    "param_prefix": 1,
                    "param_ptr": 1,
                    "symbol_name": 3
                },
                "param_2": {
                    "file_descriptor": 3,
                    "param2": 14,
                    "param_2": 9,
                    "param_b": 1,
                    "param_flag": 1,
                    "param_value": 1,
                    "symbol_info": 1,
                    "symbol_writer": 1
                },
                "param_3": {
                    "additional_info": 1,
                    "input_string": 17,
                    "input_value": 1,
                    "param3": 2,
                    "param_string": 3,
                    "source_string": 1,
                    "str": 3,
                    "symbol_name": 2,
                    "value": 1
                },
                "sVar2": {
                    "input_length": 4,
                    "input_string_length": 1,
                    "length": 3,
                    "param3_length": 2,
                    "param_3_length": 1,
                    "param_string_length": 1,
                    "str_len": 1,
                    "str_length": 1,
                    "string_length": 13,
                    "symbol_length": 2
                },
                "stab_write_symbol_lto_priv_0": {
                    "write_lto_private_symbol": 1
                },
                "uVar1": {
                    "result": 24,
                    "return_value": 5,
                    "status": 1,
                    "success": 1
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 write_symbol_to_lto_private_0010e8a9(undefined8 param1,undefined8 param2,char *input_string)\n\n{\n  undefined4 result;\n  size_t string_length;\n  char *formatted_string;\n  \n  string_length = strlen(input_string);\n  formatted_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(formatted_string,\"%s:c=f%g\",param1,input_string);\n  result = write_lto_private_symbol(param2,0x80,0,0,formatted_string);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "write_symbol_to_lto_private_0010e8a9",
            "entrypoint": "0x0010e8a9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e8a9": "write_symbol_to_lto_private_0010e8a9",
                "__s": "formatted_string",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "input_string",
                "sVar2": "string_length",
                "stab_write_symbol_lto_priv_0": "write_lto_private_symbol",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e918": {
            "additional_data": {
                "FUN_00109b2f": {
                    "get_address": 1,
                    "malloc_memory": 1
                },
                "FUN_0010e2f0": {
                    "pop_type": 2
                },
                "FUN_0010e918": {
                    "format_and_write_symbol": 3,
                    "process_symbol": 1,
                    "write_formatted_symbol": 3,
                    "write_modified_symbol": 1,
                    "write_symbol": 3,
                    "write_symbol_and_free_mem": 1,
                    "write_symbol_lto": 3,
                    "write_symbol_to_db": 1,
                    "write_symbol_to_file": 2,
                    "write_symbol_with_context": 2,
                    "write_symbol_with_info": 2,
                    "write_symbol_with_length": 2,
                    "write_symbol_with_param": 1,
                    "write_symbol_with_parameters": 2,
                    "write_symbol_with_params": 4
                },
                "__s": {
                    "context_value": 1,
                    "data": 1,
                    "modified_string": 1,
                    "old_symbol": 1,
                    "pop_type_result": 1,
                    "popped_symbol": 1,
                    "popped_type": 1,
                    "popped_value": 2,
                    "previous_record": 1,
                    "previous_symbol": 1,
                    "str": 1,
                    "str1": 2,
                    "string2": 2,
                    "suffix": 1,
                    "symbol": 4,
                    "type": 9,
                    "type_string": 1
                },
                "__s_00": {
                    "combined_string": 2,
                    "concatenated_str": 1,
                    "concatenated_string": 1,
                    "formatted_str": 1,
                    "formatted_string": 14,
                    "formatted_symbol": 4,
                    "modified_string": 1,
                    "modified_symbol": 1,
                    "new_record": 1,
                    "new_str": 2,
                    "new_symbol": 2,
                    "processed_string": 1
                },
                "param_1": {
                    "context": 1,
                    "db_connection": 1,
                    "file": 1,
                    "file_descriptor": 7,
                    "input": 1,
                    "output": 1,
                    "param1": 3,
                    "param_1": 2,
                    "param_a": 1,
                    "param_symbol": 1,
                    "symbol": 3,
                    "symbol_info": 1,
                    "symbol_ptr": 1,
                    "symbol_table": 5,
                    "type": 1
                },
                "param_2": {
                    "data": 1,
                    "filename": 1,
                    "input_str": 1,
                    "input_string": 3,
                    "name": 5,
                    "original_string": 1,
                    "param2": 1,
                    "param_b": 1,
                    "param_str": 2,
                    "prefix": 2,
                    "prefix_string": 1,
                    "source_string": 1,
                    "string1": 2,
                    "symbol_name": 5,
                    "symbol_string": 1,
                    "table_name": 1,
                    "unknown_1": 1,
                    "var_name": 1
                },
                "param_3": {
                    "number": 1,
                    "numeric_value": 1,
                    "param3": 3,
                    "param_3": 2,
                    "param_c": 1,
                    "param_val": 2,
                    "param_value": 2,
                    "record_id": 1,
                    "suffix": 1,
                    "symbol_value": 1,
                    "unknown_2": 1,
                    "value": 14
                },
                "param_4": {
                    "param": 1,
                    "parameter": 1,
                    "parameter_4": 1,
                    "unknown_3": 1
                },
                "param_5": {
                    "attribute": 1,
                    "parameter_5": 1,
                    "unknown_4": 1
                },
                "sVar2": {
                    "data_length": 1,
                    "filename_length": 1,
                    "input_length": 1,
                    "input_str_len": 1,
                    "input_string_len": 1,
                    "input_string_length": 1,
                    "len_var_name": 1,
                    "length1": 2,
                    "name_length": 5,
                    "original_string_length": 1,
                    "param2_length": 1,
                    "param_b_length": 1,
                    "param_str_len": 1,
                    "param_str_length": 1,
                    "prefix_length": 3,
                    "source_length": 1,
                    "symbol_name_length": 6,
                    "symbol_string_length": 1,
                    "table_name_length": 1
                },
                "sVar3": {
                    "context_value_length": 1,
                    "data_length": 1,
                    "len_popped_type": 1,
                    "length2": 2,
                    "modified_string_length": 1,
                    "old_symbol_length": 1,
                    "pop_type_result_length": 1,
                    "popped_symbol_len": 1,
                    "popped_value_length": 2,
                    "previous_record_length": 1,
                    "previous_symbol_length": 1,
                    "str1_len": 1,
                    "str1_length": 1,
                    "str_len": 1,
                    "suffix_length": 1,
                    "symbol_length": 4,
                    "type_length": 9,
                    "type_string_length": 1
                },
                "sprintf": {
                    "format_string": 1
                },
                "stab_pop_type": {
                    "pop_symbol": 1,
                    "pop_type": 4
                },
                "stab_write_symbol_lto_priv_0": {
                    "write_symbol": 2,
                    "write_symbol_lto": 1,
                    "write_symbol_lto_priv": 1,
                    "write_symbol_lto_priv_0": 1,
                    "write_symbol_lto_private": 1,
                    "write_symbol_priv0": 1,
                    "write_symbol_to_privileged_lto": 1
                },
                "uVar1": {
                    "result": 22,
                    "return_value": 1
                },
                "xmalloc": {
                    "allocate_memory": 3
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 write_symbol_with_params_0010e918(undefined8 file_descriptor,char *name,undefined8 value)\n\n{\n  undefined4 result;\n  char *type;\n  size_t symbol_name_length;\n  size_t type_length;\n  char *formatted_string;\n  \n  type = (char *)pop_type();\n  symbol_name_length = strlen(name);\n  type_length = strlen(type);\n  formatted_string = (char *)allocate_memory(symbol_name_length + 0x14 + type_length);\n  format_string(formatted_string,\"%s:c=e%s,%ld\",name,type,value);\n  free(type);\n  result = write_symbol(file_descriptor,0x80,0,0,formatted_string);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "write_symbol_with_params_0010e918",
            "entrypoint": "0x0010e918",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e918": "write_symbol_with_params_0010e918",
                "__s": "type",
                "__s_00": "formatted_string",
                "param_1": "file_descriptor",
                "param_2": "name",
                "param_3": "value",
                "sVar2": "symbol_name_length",
                "sVar3": "type_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "stab_write_symbol_lto_priv_0": "write_symbol",
                "uVar1": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e9a0": {
            "additional_data": {
                "FUN_00109b2f": {
                    "get_file_handle": 1
                },
                "FUN_0010e2f0": {
                    "get_symbol_info": 1
                },
                "FUN_0010e9a0": {
                    "format_and_write_symbol": 1,
                    "process_symbol": 1,
                    "symbol_writer": 1,
                    "write_symbol": 10,
                    "write_symbol_and_return": 1,
                    "write_symbol_lto": 2,
                    "write_symbol_to_debug": 1,
                    "write_symbol_to_debug_info": 1,
                    "write_symbol_to_file": 2,
                    "write_symbol_to_lto": 2,
                    "write_symbol_to_memory": 1,
                    "write_symbol_to_private": 1,
                    "write_symbol_to_stab": 1,
                    "write_symbol_to_symbol_table": 1,
                    "write_symbol_to_table": 3
                },
                "__s": {
                    "input_string": 1,
                    "pop_type": 2,
                    "pop_type_result": 4,
                    "pop_value": 2,
                    "popped_symbol": 1,
                    "popped_type": 1,
                    "previous_symbol": 1,
                    "str1": 1,
                    "symbol": 7,
                    "symbol_data": 1,
                    "symbol_name": 1,
                    "symbol_string": 1,
                    "symbol_value": 1,
                    "type": 2,
                    "type_info": 1,
                    "type_pop_result": 1,
                    "type_str": 1,
                    "type_value": 1,
                    "value": 1
                },
                "__s_00": {
                    "allocated_string": 1,
                    "formatted_string": 1,
                    "formatted_symbol": 1,
                    "modified_symbol": 4,
                    "modified_symbol_string": 1,
                    "modified_type_value": 1,
                    "new_pop_type_result": 2,
                    "new_string": 1,
                    "new_symbol": 7,
                    "new_symbol_data": 1,
                    "new_symbol_name": 1,
                    "new_symbol_value": 1,
                    "new_type": 2,
                    "new_type_info": 1,
                    "new_type_str": 1,
                    "new_value": 1,
                    "str2": 1,
                    "type_modified": 1,
                    "updated_value": 1
                },
                "__s_01": {
                    "combined_string": 1,
                    "combined_symbol": 2,
                    "combined_symbols": 1,
                    "final_string": 3,
                    "final_symbol": 1,
                    "final_symbol_name": 1,
                    "final_symbol_string": 1,
                    "formatted_str": 1,
                    "formatted_symbol": 2,
                    "formatted_symbol_with_prefix": 1,
                    "new_debug_info": 1,
                    "new_string": 2,
                    "new_symbol": 4,
                    "output": 2,
                    "output_string": 1,
                    "result": 2,
                    "result_string": 1,
                    "symbol": 1,
                    "symbol_name": 1,
                    "symbol_with_prefix": 1
                },
                "_sch_istable": {
                    "character_table": 1,
                    "symbol_table": 1,
                    "table": 1,
                    "table_check": 1
                },
                "abort": {
                    "abort_execution": 1
                },
                "free": {
                    "free_memory": 4,
                    "release_memory": 1
                },
                "lVar1": {
                    "count": 6,
                    "counter": 10,
                    "symbol_count": 6,
                    "symbol_counter": 1,
                    "symbol_id": 1,
                    "symbol_index": 5,
                    "type_count": 1
                },
                "param_1": {
                    "addr": 1,
                    "arg1": 8,
                    "data": 1,
                    "data_ptr": 1,
                    "debug_info": 1,
                    "file_handle": 2,
                    "input": 1,
                    "input_value": 1,
                    "memory": 1,
                    "param": 2,
                    "param1": 1,
                    "param_1": 1,
                    "st": 1,
                    "symbol_ptr": 1,
                    "symbol_table": 5,
                    "table_address": 1,
                    "table_pointer": 1
                },
                "param_2": {
                    "arg2": 4,
                    "file_name": 1,
                    "input_string": 3,
                    "name": 2,
                    "param2": 1,
                    "prefix": 1,
                    "string1": 1,
                    "string_value": 1,
                    "symbol": 4,
                    "symbol_name": 12
                },
                "param_3": {
                    "arg3": 2,
                    "option_value": 1,
                    "symbol_flag": 1,
                    "symbol_type": 18,
                    "type": 8
                },
                "param_4": {
                    "address": 3,
                    "arg4": 7,
                    "data": 1,
                    "debug_flag": 1,
                    "int64": 1,
                    "param": 2,
                    "param4": 3,
                    "param_4": 9,
                    "param_value": 1,
                    "symbol_size": 1,
                    "value": 1
                },
                "param_5": {
                    "symbol_info": 1
                },
                "pcVar5": {
                    "category": 1,
                    "prefix": 2,
                    "symbol": 1,
                    "symbol_code": 1,
                    "symbol_prefix": 15,
                    "symbol_qualifier": 1,
                    "symbol_type": 2,
                    "symbol_type_str": 1,
                    "type_char": 2,
                    "type_prefix": 1,
                    "type_string": 2,
                    "type_symbol": 1
                },
                "sVar3": {
                    "file_name_length": 1,
                    "input_length": 2,
                    "input_str_len": 1,
                    "input_string_len": 1,
                    "length1": 1,
                    "length_arg2": 1,
                    "name_length": 2,
                    "param2_length": 1,
                    "string1_length": 1,
                    "string_length": 1,
                    "symbol_len": 2,
                    "symbol_length": 4,
                    "symbol_name_length": 12
                },
                "sVar4": {
                    "combined_symbol_length": 1,
                    "formatted_string_len": 1,
                    "formatted_symbol_length": 1,
                    "length2": 1,
                    "length_type": 1,
                    "modified_symbol_len": 1,
                    "modified_symbol_length": 1,
                    "new_symbol_length": 1,
                    "pop_type_length": 1,
                    "pop_type_result_length": 2,
                    "previous_symbol_length": 1,
                    "str1_length": 1,
                    "string_length": 2,
                    "symbol_data_length": 1,
                    "symbol_length": 4,
                    "symbol_name_length": 1,
                    "symbol_str_len": 1,
                    "symbol_string_length": 1,
                    "type_info_length": 1,
                    "type_length": 1,
                    "type_str_len": 1,
                    "type_string_length": 1,
                    "type_value_length": 1,
                    "updated_string_length": 1,
                    "value_length": 1
                },
                "sprintf": {
                    "format_string": 5,
                    "formatted_string": 1
                },
                "stab_pop_type": {
                    "get_pop_type": 1,
                    "get_symbol_data_from_stack": 1,
                    "pop_type": 5,
                    "pop_type_from_stack": 1
                },
                "stab_write_symbol_lto_priv_0": {
                    "write_formatted_symbol": 1,
                    "write_lto_symbol": 1,
                    "write_symbol_address": 1,
                    "write_symbol_priv": 1,
                    "write_symbol_to_memory_private": 1,
                    "write_symbol_to_private": 1,
                    "write_symbol_to_private_table": 3
                },
                "strlen": {
                    "get_string_length": 4,
                    "string_length": 1
                },
                "uVar2": {
                    "result": 11,
                    "result_status": 1,
                    "return_value": 3
                },
                "uVar6": {
                    "flag": 7,
                    "format_flag": 1,
                    "symbol_attribute": 1,
                    "symbol_attributes": 1,
                    "symbol_flag": 11,
                    "symbol_flags": 2,
                    "symbol_permissions": 1,
                    "symbol_value": 2,
                    "type_flag": 2,
                    "type_value": 2
                },
                "xmalloc": {
                    "allocate_memory": 7
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_001040a0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 write_symbol_to_symbol_table_0010e9a0(long arg1,char *symbol_name,undefined4 symbol_type,undefined8 param_4)\n\n{\n  long counter;\n  undefined4 result;\n  byte *symbol;\n  byte *new_symbol;\n  size_t symbol_name_length;\n  size_t symbol_length;\n  char *new_symbol;\n  char *symbol_prefix;\n  undefined8 symbol_flag;\n  \n  symbol = (byte *)pop_type();\n  switch(symbol_type) {\n  case 1:\n    symbol_prefix = \"G\";\n    symbol_flag = 0x20;\n    break;\n  case 2:\n    symbol_prefix = \"S\";\n    symbol_flag = 0x26;\n    break;\n  case 3:\n    symbol_prefix = \"V\";\n    symbol_flag = 0x26;\n    break;\n  case 4:\n    symbol_prefix = \"\";\n    symbol_flag = 0x80;\n    if (((&table_check)[(ulong)*symbol * 2] & 4) == 0) {\n      counter = *(long *)(arg1 + 0x68);\n      *(long *)(arg1 + 0x68) = counter + 1;\n      symbol_name_length = get_string_length((char *)symbol);\n      new_symbol = (byte *)allocate_memory(symbol_name_length + 0x14);\n      format_string((char *)new_symbol,\"%ld=%s\",counter,symbol);\n      free_memory(symbol);\n      symbol = new_symbol;\n    }\n    break;\n  case 5:\n    symbol_prefix = \"r\";\n    symbol_flag = 0x40;\n    break;\n  default:\n                    \n    abort_execution();\n  }\n  symbol_name_length = get_string_length(symbol_name);\n  symbol_length = get_string_length((char *)symbol);\n  new_symbol = (char *)allocate_memory(symbol_name_length + 3 + symbol_length);\n  format_string(new_symbol,\"%s:%s%s\",symbol_name,symbol_prefix,symbol);\n  free_memory(symbol);\n  result = write_symbol_to_private_table(arg1,symbol_flag,0,param_4,new_symbol);\n  if ((char)result != '\\0') {\n    free_memory(new_symbol);\n  }\n  return result;\n}\n\n",
            "current_name": "write_symbol_to_symbol_table_0010e9a0",
            "entrypoint": "0x0010e9a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e9a0": "write_symbol_to_symbol_table_0010e9a0",
                "__s": "symbol",
                "__s_00": "new_symbol",
                "__s_01": "new_symbol",
                "_sch_istable": "table_check",
                "abort": "abort_execution",
                "free": "free_memory",
                "lVar1": "counter",
                "param_1": "arg1",
                "param_2": "symbol_name",
                "param_3": "symbol_type",
                "pcVar5": "symbol_prefix",
                "sVar3": "symbol_name_length",
                "sVar4": "symbol_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "stab_write_symbol_lto_priv_0": "write_symbol_to_private_table",
                "strlen": "get_string_length",
                "uVar2": "result",
                "uVar6": "symbol_flag",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010eafe": {
            "additional_data": {
                "FUN_00109b2f": {
                    "write_symbol_to_symbol_table": 1
                },
                "FUN_0010e2f0": {
                    "pop_type_from_symbol_table": 1
                },
                "FUN_0010eafe": {
                    "create_symbol": 1,
                    "create_symbol_with_prefix": 1,
                    "generate_and_write_symbol": 1,
                    "generate_symbol": 1,
                    "generate_symbol_and_write": 1,
                    "generate_symbol_string": 1,
                    "process_data": 1,
                    "process_symbol": 3,
                    "reverse_string_and_write_symbol": 1,
                    "write_formatted_string_to_symbol": 1,
                    "write_stab_symbol": 1,
                    "write_symbol": 5,
                    "write_symbol_from_param": 1,
                    "write_symbol_lto": 1,
                    "write_symbol_to_debug": 1,
                    "write_symbol_to_file": 1,
                    "write_symbol_to_stab": 2,
                    "write_symbol_to_table": 2,
                    "write_symbol_with_prefix": 3
                },
                "__s": {
                    "pop_type_string": 1,
                    "popped_item": 1,
                    "popped_string": 4,
                    "popped_symbol": 1,
                    "popped_type": 5,
                    "popped_value": 1,
                    "symbol": 5,
                    "top_type": 2,
                    "type": 5,
                    "type_info": 1,
                    "type_information": 1,
                    "type_name": 3,
                    "type_string": 1
                },
                "__s_00": {
                    "combined_string": 1,
                    "concatenated_string": 1,
                    "constructed_string": 1,
                    "formatted_string": 7,
                    "formatted_symbol": 2,
                    "modified_string": 2,
                    "modified_symbol": 1,
                    "modified_type_name": 1,
                    "new_entry": 1,
                    "new_string": 2,
                    "new_symbol": 8,
                    "output_string": 1,
                    "symbol": 2,
                    "symbol_string": 1
                },
                "free": {
                    "deallocate_memory": 2
                },
                "param_1": {
                    "arg1": 1,
                    "base_address": 2,
                    "context": 4,
                    "data": 1,
                    "debug_info": 1,
                    "file_descriptor": 1,
                    "function_address": 1,
                    "memory_address": 1,
                    "param_address": 1,
                    "struct_ptr": 1,
                    "symbol_context": 1,
                    "symbol_data": 1,
                    "symbol_manager": 1,
                    "symbol_ptr": 1,
                    "symbol_table": 11,
                    "table": 2
                },
                "param_2": {
                    "base_name": 1,
                    "base_string": 1,
                    "file_name": 1,
                    "file_path": 1,
                    "filename": 6,
                    "function_name": 1,
                    "input_string": 6,
                    "name": 1,
                    "prefix": 4,
                    "source_string": 2,
                    "string1": 2,
                    "symbol": 2,
                    "symbol_name": 3
                },
                "param_3": {
                    "char1": 2,
                    "character": 3,
                    "flag": 22,
                    "is_public": 1,
                    "is_static": 1,
                    "symbol_char": 1,
                    "symbol_type": 1
                },
                "sVar2": {
                    "base_name_len": 1,
                    "base_string_len": 1,
                    "file_name_length": 1,
                    "file_path_len": 1,
                    "filename_len": 1,
                    "filename_length": 5,
                    "function_name_length": 1,
                    "input_length": 4,
                    "input_string_len": 1,
                    "input_string_length": 1,
                    "length1": 1,
                    "name_length": 1,
                    "param_2_length": 1,
                    "prefix_len": 1,
                    "prefix_length": 3,
                    "source_length": 1,
                    "string1_length": 1,
                    "symbol_length": 2,
                    "symbol_name_length": 3
                },
                "sVar3": {
                    "length2": 1,
                    "pop_type_string_length": 1,
                    "popped_item_length": 1,
                    "popped_length": 1,
                    "popped_string_length": 3,
                    "popped_type_len": 2,
                    "popped_type_length": 2,
                    "popped_value_length": 1,
                    "symbol_len": 3,
                    "symbol_length": 3,
                    "top_type_length": 2,
                    "type_info_length": 2,
                    "type_length": 6,
                    "type_name_len": 1,
                    "type_name_length": 2
                },
                "sprintf": {
                    "format_string": 1
                },
                "stab_pop_type": {
                    "pop_from_symbol_table": 1,
                    "pop_stack": 1,
                    "pop_string_from_stack": 1,
                    "pop_symbol": 1,
                    "pop_type": 10,
                    "pop_type_from_stab": 1,
                    "pop_type_info": 1
                },
                "stab_write_symbol_lto_priv_0": {
                    "write_and_log_symbol": 1,
                    "write_lto_symbol": 1,
                    "write_stab_symbol_private": 1,
                    "write_symbol": 3,
                    "write_symbol_lto": 1,
                    "write_symbol_lto_priv": 1,
                    "write_symbol_lto_private": 1,
                    "write_symbol_priv": 2,
                    "write_symbol_to_file_helper": 1,
                    "write_symbol_to_lto": 1,
                    "write_symbol_to_private": 1,
                    "write_symbol_to_stab": 1,
                    "write_symbol_to_table": 2,
                    "write_symbol_to_table_priv": 1,
                    "write_symbol_to_table_private": 1
                },
                "strlen": {
                    "get_string_length": 1
                },
                "uVar1": {
                    "result": 13,
                    "return_value": 1
                },
                "xmalloc": {
                    "allocate_memory": 14
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 write_symbol_with_prefix_0010eafe(long symbol_table,char *filename,char flag)\n\n{\n  undefined4 result;\n  char *symbol;\n  size_t filename_length;\n  size_t type_length;\n  char *new_symbol;\n  \n  if ((*(int *)(symbol_table + 0x1f8) == 0) && (*(long *)(symbol_table + 0x1e8) == -1)) {\n    symbol = (char *)pop_type();\n    filename_length = get_string_length(filename);\n    type_length = get_string_length(symbol);\n    new_symbol = (char *)allocate_memory(filename_length + 3 + type_length);\n    format_string(new_symbol,\"%s:%c%s\",filename,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),symbol);\n    *(undefined8 *)(symbol_table + 0x1e8) = *(undefined8 *)(symbol_table + 0x10);\n    result = write_symbol(symbol_table,0x24,0,0,new_symbol);\n    if ((char)result != '\\0') {\n      deallocate_memory(new_symbol);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "write_symbol_with_prefix_0010eafe",
            "entrypoint": "0x0010eafe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010eafe": "write_symbol_with_prefix_0010eafe",
                "__s": "symbol",
                "__s_00": "new_symbol",
                "free": "deallocate_memory",
                "param_1": "symbol_table",
                "param_2": "filename",
                "param_3": "flag",
                "sVar2": "filename_length",
                "sVar3": "type_length",
                "sprintf": "format_string",
                "stab_pop_type": "pop_type",
                "stab_write_symbol_lto_priv_0": "write_symbol",
                "strlen": "get_string_length",
                "uVar1": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ebb0": {
            "additional_data": {
                "DAT_00121334": {
                    "char_array": 1
                },
                "DAT_00121340": {
                    "constant_array": 1
                },
                "FUN_0010ebb0": {
                    "convert_and_write_symbol": 1,
                    "process_and_write_symbol": 1,
                    "process_data": 1,
                    "reverse_and_write_symbol": 2,
                    "write_stab_symbol": 2,
                    "write_symbol": 9,
                    "write_symbol_lto": 4,
                    "write_symbol_lto_private": 1,
                    "write_symbol_to_database": 1,
                    "write_symbol_to_debug_info": 1,
                    "write_symbol_to_file": 1,
                    "write_symbol_to_stab": 2,
                    "write_symbol_with_prefix": 5
                },
                "__s": {
                    "dynamic_string": 1,
                    "file_content": 1,
                    "file_path": 1,
                    "old_symbol": 1,
                    "pop_value": 1,
                    "popped_str": 1,
                    "popped_string": 2,
                    "popped_symbol": 1,
                    "popped_type": 1,
                    "popped_value": 1,
                    "previous_symbol": 1,
                    "str": 1,
                    "symbol": 9,
                    "symbol_name": 3,
                    "symbol_prefix": 1,
                    "symbol_value": 1,
                    "type": 2,
                    "type_info": 1,
                    "var1": 1
                },
                "__s_00": {
                    "combined_string": 2,
                    "combined_symbol": 1,
                    "concatenated_string": 2,
                    "final_string": 1,
                    "formatted_str": 1,
                    "formatted_string": 4,
                    "formatted_symbol": 1,
                    "generated_symbol": 1,
                    "modified_symbol": 1,
                    "new_str": 2,
                    "new_string": 1,
                    "new_symbol": 9,
                    "new_symbol_entry": 1,
                    "new_symbol_name": 1,
                    "symbol_string": 1,
                    "symbol_with_prefix": 1,
                    "var5": 1
                },
                "abort": {
                    "program_abort": 1
                },
                "cVar1": {
                    "char_value": 1,
                    "char_var1": 1,
                    "character": 2,
                    "converted_char": 1,
                    "file_extension": 1,
                    "last_char": 1,
                    "prefix_char": 1,
                    "symbol_char": 6,
                    "symbol_character": 1,
                    "symbol_letter": 1,
                    "symbol_prefix": 1,
                    "symbol_type": 1,
                    "symbol_type_char": 1,
                    "type_char": 1,
                    "var2": 1
                },
                "param_1": {
                    "arg1": 3,
                    "base_address": 1,
                    "database": 1,
                    "debug_info": 1,
                    "file_handle": 1,
                    "file_ptr": 1,
                    "input1": 2,
                    "param": 2,
                    "param1": 6,
                    "param_1": 3,
                    "param_address": 2,
                    "param_ptr": 1,
                    "symbol_address": 1,
                    "symbol_data": 1,
                    "symbol_manager": 1,
                    "symbol_table": 4
                },
                "param_2": {
                    "arg2": 1,
                    "file_name": 4,
                    "filename": 4,
                    "input2": 1,
                    "input_str": 1,
                    "input_string": 2,
                    "param2": 2,
                    "param_2": 1,
                    "prefix": 3,
                    "source": 1,
                    "source_file": 1,
                    "str1": 1,
                    "symbol": 1,
                    "symbol_name": 8
                },
                "param_3": {
                    "arg3": 1,
                    "char_index": 1,
                    "file_type": 1,
                    "flag": 1,
                    "index": 1,
                    "input3": 1,
                    "input_length": 2,
                    "len": 1,
                    "length": 5,
                    "param3": 2,
                    "param_3": 1,
                    "prefix_length": 1,
                    "symbol_index": 2,
                    "symbol_type": 10,
                    "type": 1
                },
                "param_4": {
                    "arg2": 1,
                    "arg4": 2,
                    "debug_info_flags": 1,
                    "flag": 1,
                    "flags": 1,
                    "input2": 1,
                    "input4": 1,
                    "param": 2,
                    "param4": 6,
                    "param_4": 11,
                    "param_value": 1,
                    "reference": 1,
                    "symbol_property": 1,
                    "symbol_value": 1
                },
                "sVar4": {
                    "file_name_length": 4,
                    "filename_length": 2,
                    "input_str_len": 1,
                    "input_string_length": 2,
                    "length_param2": 1,
                    "param2_len": 1,
                    "param2_length": 1,
                    "param_2_length": 4,
                    "source_length": 1,
                    "str1_len": 1,
                    "symbol_length": 1,
                    "symbol_name_len": 1,
                    "symbol_name_length": 7,
                    "var3": 1
                },
                "sVar5": {
                    "file_content_length": 1,
                    "file_path_length": 1,
                    "length_dynamic_string": 1,
                    "old_symbol_length": 1,
                    "pop_value_len": 1,
                    "popped_str_len": 1,
                    "popped_string_length": 2,
                    "popped_symbol_length": 1,
                    "popped_type_length": 1,
                    "popped_value_length": 1,
                    "previous_symbol_length": 1,
                    "str_len": 1,
                    "symbol_length": 6,
                    "symbol_name_length": 3,
                    "symbol_prefix_length": 1,
                    "symbol_value_length": 1,
                    "type_info_len": 1,
                    "type_length": 2,
                    "var4": 1
                },
                "stab_pop_type": {
                    "pop_type": 2
                },
                "stab_write_symbol_lto_priv_0": {
                    "write_symbol_lto_private": 1,
                    "write_to_symbol": 1
                },
                "uVar2": {
                    "count": 1,
                    "decreased_len": 1,
                    "index": 8,
                    "last_char_index": 1,
                    "lower_bound": 1,
                    "modified_length": 1,
                    "prefix_length_minus_one": 1,
                    "remaining": 1,
                    "remaining_length": 2,
                    "short_param": 1,
                    "symbol_index": 1,
                    "symbol_type_index": 1,
                    "symbol_type_minus_one": 2,
                    "value": 1,
                    "var6": 1
                },
                "uVar3": {
                    "result": 18,
                    "return_value": 6
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001040a0",
                "FUN_001048f0",
                "FUN_0010e2f0",
                "FUN_00104270",
                "FUN_00109b2f",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 write_symbol_with_prefix_0010ebb0(undefined8 param1,char *symbol_name,int symbol_type,undefined8 param_4)\n\n{\n  char symbol_char;\n  uint index;\n  undefined4 result;\n  char *symbol;\n  size_t symbol_name_length;\n  size_t symbol_length;\n  char *new_symbol;\n  \n  symbol = (char *)pop_type();\n  index = symbol_type - 1;\n  if (index < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)index * 4);\n    symbol_char = (&DAT_00121334)[index];\n    symbol_name_length = strlen(symbol_name);\n    symbol_length = strlen(symbol);\n    new_symbol = (char *)allocate_memory(symbol_name_length + 3 + symbol_length);\n    sprintf(new_symbol,\"%s:%c%s\",symbol_name,(ulong)(uint)(int)symbol_char,symbol);\n    free(symbol);\n    result = write_symbol_lto_private(param1,result,0,param_4,new_symbol);\n    if ((char)result != '\\0') {\n      free(new_symbol);\n    }\n    return result;\n  }\n                    \n  program_abort();\n}\n\n",
            "current_name": "write_symbol_with_prefix_0010ebb0",
            "entrypoint": "0x0010ebb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ebb0": "write_symbol_with_prefix_0010ebb0",
                "__s": "symbol",
                "__s_00": "new_symbol",
                "abort": "program_abort",
                "cVar1": "symbol_char",
                "param_1": "param1",
                "param_2": "symbol_name",
                "param_3": "symbol_type",
                "sVar4": "symbol_name_length",
                "sVar5": "symbol_length",
                "stab_pop_type": "pop_type",
                "stab_write_symbol_lto_priv_0": "write_symbol_lto_private",
                "uVar2": "index",
                "uVar3": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ec73": {
            "additional_data": {
                "0x3c": {
                    "offset1": 1,
                    "value1": 1
                },
                "0x3d": {
                    "offset2": 1,
                    "value2": 1
                },
                "0x3f": {
                    "counter_offset": 1,
                    "counter_ptr": 1
                },
                "0x40": {
                    "param1_offset": 1,
                    "stored_value": 1
                },
                "0x41": {
                    "param2_offset": 1,
                    "symbol_ptr": 1
                },
                "0xc0": {
                    "symbol_param": 2
                },
                "FUN_0010ec73": {
                    "execute_and_increment": 1,
                    "execute_and_track_symbol_offset": 1,
                    "execute_and_update_counters": 1,
                    "execute_function": 1,
                    "execute_symbol_operation": 1,
                    "execute_task": 1,
                    "process_data": 13,
                    "process_function": 2,
                    "process_param": 1,
                    "process_symbols": 1,
                    "update_and_write_symbol": 1,
                    "update_param_and_return": 1,
                    "update_parameter_and_return_status": 1,
                    "update_parameter_and_write_symbol": 1,
                    "update_symbol_address": 1,
                    "update_symbol_table": 2
                },
                "cVar2": {
                    "result": 18,
                    "result_char": 1,
                    "status": 1,
                    "success": 1,
                    "symbol_result": 2,
                    "symbol_status": 2,
                    "var2": 1,
                    "write_success": 2,
                    "write_symbol_flag": 1,
                    "write_symbol_result": 1
                },
                "iVar1": {
                    "array_size": 1,
                    "count": 7,
                    "counter": 18,
                    "current_count": 1,
                    "current_value": 1,
                    "symbol_counter": 1,
                    "var1": 1
                },
                "param_1": {
                    "array": 2,
                    "data": 10,
                    "data_array": 2,
                    "data_pointer": 1,
                    "function_data": 1,
                    "function_params": 1,
                    "input_array": 2,
                    "param_array": 3,
                    "symbol_array": 1,
                    "symbol_data": 3,
                    "symbol_table": 3,
                    "task_params": 1
                },
                "param_2": {
                    "data": 1,
                    "input": 2,
                    "input_data": 1,
                    "input_param": 2,
                    "input_value": 1,
                    "new_address": 1,
                    "new_symbol": 1,
                    "new_symbol_offset": 1,
                    "new_value": 4,
                    "param_value": 2,
                    "symbol": 1,
                    "symbol_value": 2,
                    "value": 11
                },
                "param_3": {
                    "count": 4,
                    "index": 9,
                    "integer_param": 1,
                    "length": 1,
                    "param3": 3,
                    "param_index": 1,
                    "param_size": 2,
                    "size": 7,
                    "some_int": 1,
                    "unknown_param": 1
                },
                "param_4": {
                    "address1": 1,
                    "arg1": 1,
                    "arg4": 1,
                    "data_1": 1,
                    "long_param1": 1,
                    "param": 1,
                    "param1": 1,
                    "param3": 1,
                    "param4": 7,
                    "param_3": 1,
                    "param_4": 2,
                    "param_a": 8,
                    "param_value1": 1,
                    "param_var1": 1,
                    "some_data1": 1
                },
                "param_5": {
                    "address2": 1,
                    "arg2": 1,
                    "arg5": 1,
                    "char_param": 1,
                    "data_2": 1,
                    "param2": 1,
                    "param4": 1,
                    "param5": 8,
                    "param_4": 1,
                    "param_5": 2,
                    "param_b": 8,
                    "param_value2": 1,
                    "param_var2": 1,
                    "some_data2": 1,
                    "symbol": 1
                },
                "param_6": {
                    "arg3": 1,
                    "arg6": 1,
                    "data_3": 1,
                    "long_param2": 1,
                    "param3": 1,
                    "param5": 1,
                    "param6": 8,
                    "param_5": 1,
                    "param_6": 3,
                    "param_c": 8,
                    "param_value3": 1,
                    "param_var3": 1,
                    "some_data3": 1,
                    "unknown_param2": 1
                },
                "stab_write_symbol_lto_priv_0": {
                    "write_symbol": 5
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00113a4d"
            ],
            "code": "\nundefined process_data_0010ec73(long *data,long value,undefined8 index,undefined8 param_a,\n                      undefined8 param_b,undefined8 param6)\n\n{\n  int counter;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  counter = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = counter + 1;\n  if (counter == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = write_symbol(data,0xc0,0,data[0x41],0,param6,param_a),\n       result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "current_name": "process_data_0010ec73",
            "entrypoint": "0x0010ec73",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "cVar2": "result",
                "iVar1": "counter",
                "param_1": "data",
                "param_2": "value",
                "param_3": "index",
                "param_4": "param_a",
                "param_5": "param_b",
                "param_6": "param6",
                "stab_write_symbol_lto_priv_0": "write_symbol"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ed2c": {
            "additional_data": {
                "FUN_0010ed2c": {
                    "update_buffer": 1,
                    "update_info": 1,
                    "update_info_and_write_symbol": 1,
                    "update_max_and_write_symbol": 1,
                    "update_max_length": 2,
                    "update_max_param": 2,
                    "update_max_parameter": 1,
                    "update_max_size": 1,
                    "update_max_value": 1,
                    "update_maximum": 1,
                    "update_param_3_and_return": 1,
                    "update_param_and_return": 1,
                    "update_parameters": 1,
                    "update_stab_data": 1,
                    "update_symbol_data": 3,
                    "update_symbol_info": 3,
                    "update_symbol_information": 3,
                    "update_symbol_limits": 1,
                    "update_symbol_lto": 2,
                    "update_symbol_lto_priv": 1,
                    "update_symbol_lto_private": 1,
                    "update_symbol_values": 1
                },
                "LAB_0010ed78": {
                    "check_and_write_symbol": 1,
                    "skip_condition": 1
                },
                "LAB_0010edae": {
                    "end_of_function": 1,
                    "return_result": 1
                },
                "auVar4": {
                    "output": 2,
                    "output_data": 1,
                    "output_value": 1,
                    "result": 11,
                    "result_buffer": 1,
                    "result_data": 2,
                    "result_value": 1,
                    "return_val": 1,
                    "return_value": 9,
                    "return_values": 1
                },
                "cVar1": {
                    "char_result": 1,
                    "is_write_successful": 1,
                    "result": 6,
                    "success": 7,
                    "success_flag": 2,
                    "symbol_written": 3,
                    "write_success": 10
                },
                "extraout_RDX": {
                    "extra_flags": 1,
                    "extra_result": 1,
                    "extra_var": 1
                },
                "iVar2": {
                    "count": 8,
                    "counter": 8,
                    "counter_minus_one": 1,
                    "decrement_value": 1,
                    "iter": 1,
                    "iteration_count": 1,
                    "iteration_counter": 1,
                    "loop_counter": 1,
                    "num_symbols": 1,
                    "remaining_count": 1,
                    "remaining_iterations": 1,
                    "symbol_count": 1,
                    "symbol_index": 1,
                    "temp": 1,
                    "temp_count": 1,
                    "temp_var": 2
                },
                "in_R10": {
                    "additional_data": 3,
                    "additional_info": 2,
                    "additional_param": 4,
                    "additional_reg_value": 1,
                    "additional_value": 1,
                    "auxiliary": 1,
                    "auxiliary_data": 1,
                    "auxiliary_var": 1,
                    "extra_data": 3,
                    "extra_param": 1,
                    "extra_result": 1,
                    "extra_return_value": 1,
                    "in_r10": 1,
                    "in_register": 1,
                    "param_4": 1,
                    "param_6": 2,
                    "param_buffer": 1,
                    "scratch": 1,
                    "unused": 2,
                    "unused_2": 1,
                    "unused_register": 1
                },
                "param_1": {
                    "base_address": 3,
                    "buffer": 1,
                    "context": 2,
                    "data": 6,
                    "func_data": 1,
                    "info_ptr": 1,
                    "obj_ptr": 1,
                    "ptr1": 1,
                    "symbol": 1,
                    "symbol_data": 5,
                    "symbol_data_ptr": 1,
                    "symbol_data_struct": 1,
                    "symbol_info": 5,
                    "symbol_info_ptr": 1,
                    "symbol_ptr": 1
                },
                "param_2": {
                    "length": 1,
                    "max_value": 1,
                    "new_length": 1,
                    "new_limit": 1,
                    "new_size": 15,
                    "new_value": 9,
                    "size": 2,
                    "value": 1
                },
                "param_3": {
                    "extra_info": 1,
                    "extra_input": 1,
                    "extra_param": 4,
                    "extra_parameter": 1,
                    "flags": 1,
                    "input_value": 2,
                    "next_value": 1,
                    "param": 2,
                    "param_3": 8,
                    "param_value": 3,
                    "symbol": 2,
                    "symbol_data": 1,
                    "symbol_flags": 1,
                    "symbol_value": 1,
                    "unused_param": 1,
                    "value": 1
                },
                "param_4": {
                    "additional_data": 1,
                    "extra_data": 4,
                    "extra_info": 1,
                    "extra_out": 1,
                    "extra_param": 5,
                    "extra_value": 2,
                    "extraout_rdx": 1,
                    "param_4": 2,
                    "reg_value": 1,
                    "unused": 3,
                    "unused_param": 1
                },
                "param_5": {
                    "error_message": 1,
                    "internal_data": 1,
                    "param_5": 1,
                    "symbol_name": 3
                },
                "uVar3": {
                    "concat_param": 1,
                    "concatenated_value": 1,
                    "condition_value": 1,
                    "flag": 5,
                    "flags": 2,
                    "new_length": 1,
                    "new_value": 1,
                    "result": 8,
                    "return_value": 3,
                    "symbol_byte": 1,
                    "symbol_info_value": 1,
                    "symbol_result": 1,
                    "temp_value": 1,
                    "updated_val": 1,
                    "updated_value": 3
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00113a4d"
            ],
            "code": "\nundefined  [16] update_info_and_write_symbol_0010ed2c(long data,ulong new_size,undefined8 param_3)\n\n{\n  char write_success;\n  int count;\n  undefined8 extra_var;\n  ulong result;\n  undefined8 additional_param;\n  undefined result [16];\n  \n  if (*(ulong *)(data + 0x1f0) < new_size) {\n    *(ulong *)(data + 0x1f0) = new_size;\n  }\n  if (*(long *)(data + 0x208) == -1) {\ncheck_and_write_symbol:\n    if (*(int *)(data + 0x1f8) != 0) {\n      count = *(int *)(data + 0x1f8) + -1;\n      result = CONCAT71((int7)((ulong)param_3 >> 8),1);\n      *(int *)(data + 0x1f8) = count;\n      if (count != 0) {\n        result = stab_write_symbol_lto_priv_0\n                           (data,0xe0,0,new_size - *(long *)(data + 0x200),0,additional_param);\n        return result;\n      }\n      goto end_of_function;\n    }\n  }\n  else {\n    write_success = stab_write_symbol_lto_priv_0(data,0xc0,0,*(long *)(data + 0x208),0);\n    if (write_success != '\\0') {\n      *(undefined8 *)(data + 0x208) = 0xffffffffffffffff;\n      param_3 = extra_var;\n      goto check_and_write_symbol;\n    }\n  }\n  result = 0;\nend_of_function:\n  result._0_8_ = result & 0xffffffff;\n  result._8_8_ = additional_param;\n  return result;\n}\n\n",
            "current_name": "update_info_and_write_symbol_0010ed2c",
            "entrypoint": "0x0010ed2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ed2c": "update_info_and_write_symbol_0010ed2c",
                "LAB_0010ed78": "check_and_write_symbol",
                "LAB_0010edae": "end_of_function",
                "auVar4": "result",
                "cVar1": "write_success",
                "extraout_RDX": "extra_var",
                "iVar2": "count",
                "in_R10": "additional_param",
                "param_1": "data",
                "param_2": "new_size",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010edb4": {
            "additional_data": {
                "0x1f0": {
                    "max_symbol_size": 1
                },
                "0x200": {
                    "symbol_offset": 1
                },
                "0x210": {
                    "current_filename": 1
                },
                "FUM_0010edb4": {
                    "update_stab_symbol": 1
                },
                "FUN_0010e2f0": {
                    "filename_cmp": 1
                },
                "FUN_0010edb4": {
                    "process_and_write_symbol": 1,
                    "process_stab_symbol": 1,
                    "update_file_information": 1,
                    "update_stab_data": 1,
                    "update_stab_entry": 1,
                    "update_stab_symbol": 1,
                    "update_symbol": 4,
                    "update_symbol_and_write": 1,
                    "update_symbol_data": 2,
                    "update_symbol_file": 1,
                    "update_symbol_in_file": 1,
                    "update_symbol_info": 3,
                    "update_symbol_information": 4,
                    "update_symbol_lto": 1,
                    "update_symbol_table_entry": 1,
                    "update_write_symbol_and_return": 1,
                    "write_stab_symbol": 2,
                    "write_symbol": 1,
                    "write_symbol_lto": 2
                },
                "cVar1": {
                    "is_write_successful": 1,
                    "success": 6,
                    "success_flag": 3,
                    "symbol_write_success": 1,
                    "write_result": 4,
                    "write_success": 14,
                    "write_successful": 2
                },
                "filename_cmp": {
                    "compare_filename": 1,
                    "compare_filenames": 1
                },
                "iVar2": {
                    "cmp_result": 1,
                    "comparison_result": 4,
                    "file_name_comparison_result": 1,
                    "filename_cmp_result": 2,
                    "filename_compare_result": 2,
                    "filename_comparison": 10,
                    "filename_comparison_result": 11
                },
                "in_R10": {
                    "additional_argument": 2,
                    "additional_data": 1,
                    "additional_param": 5,
                    "additional_parameter": 2,
                    "context": 1,
                    "extra_argument": 1,
                    "extra_param": 1,
                    "extra_parameter": 1,
                    "register_param": 1,
                    "register_value": 1,
                    "register_variable": 1,
                    "tmp_register": 1,
                    "unknown_value": 1,
                    "unused_arg": 1,
                    "unused_argument": 1,
                    "unused_data": 1,
                    "unused_variable": 2
                },
                "param_1": {
                    "address": 1,
                    "base_address": 2,
                    "binary_data": 1,
                    "data": 1,
                    "entry_ptr": 1,
                    "file": 2,
                    "file_context": 1,
                    "file_data": 2,
                    "file_information": 1,
                    "file_ptr": 1,
                    "file_struct": 1,
                    "input_data": 1,
                    "symbol_data": 5,
                    "symbol_info": 6,
                    "symbol_information": 1,
                    "symbol_manager": 1,
                    "symbol_table": 3
                },
                "param_2": {
                    "filename": 20,
                    "new_file_name": 1,
                    "new_filename": 2,
                    "symbol": 1,
                    "symbol_name": 7
                },
                "param_3": {
                    "flag": 2,
                    "flags": 1,
                    "new_flag": 1,
                    "param": 1,
                    "param_type": 1,
                    "param_value": 2,
                    "symbol_flag": 1,
                    "symbol_size": 1,
                    "symbol_type": 21
                },
                "param_4": {
                    "file_size": 3,
                    "max_size": 1,
                    "new_size": 2,
                    "size": 4,
                    "symbol_address": 1,
                    "symbol_size": 20
                },
                "stab_write_symbol_lto_priv_0": {
                    "write_symbol_lto_priv_0": 1,
                    "write_symbol_lto_private": 1
                },
                "uVar3": {
                    "result": 4,
                    "symbol_write_result": 1,
                    "symbol_write_return": 1,
                    "updated_information": 1,
                    "write_action_result": 1,
                    "write_result": 19,
                    "write_result2": 2,
                    "write_result_2": 1,
                    "write_symbol_result": 1
                }
            },
            "called": [
                "FUN_0010e2f0",
                "FUN_001041a0"
            ],
            "calling": [
                "FUN_00112502"
            ],
            "code": "\nundefined8 update_symbol_information_0010edb4(long symbol_info,undefined8 filename,undefined4 symbol_type,ulong symbol_size)\n\n{\n  char write_success;\n  int filename_comparison_result;\n  undefined8 write_result;\n  undefined8 additional_param;\n  \n  if (*(long *)(symbol_info + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(symbol_info + 0x1f0) < symbol_size) {\n    *(ulong *)(symbol_info + 0x1f0) = symbol_size;\n  }\n  filename_comparison_result = compare_filename(filename);\n  if (filename_comparison_result != 0) {\n    write_success = write_symbol_lto_priv_0(symbol_info,0x84,0,symbol_size,filename);\n    if (write_success == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(symbol_info + 0x210) = filename;\n  }\n  write_result = write_symbol_lto_priv_0\n                    (symbol_info,0x44,symbol_type,symbol_size - *(long *)(symbol_info + 0x200),0,additional_param);\n  return write_result;\n}\n\n",
            "current_name": "update_symbol_information_0010edb4",
            "entrypoint": "0x0010edb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010edb4": "update_symbol_information_0010edb4",
                "cVar1": "write_success",
                "filename_cmp": "compare_filename",
                "iVar2": "filename_comparison_result",
                "in_R10": "additional_param",
                "param_1": "symbol_info",
                "param_2": "filename",
                "param_3": "symbol_type",
                "param_4": "symbol_size",
                "stab_write_symbol_lto_priv_0": "write_symbol_lto_priv_0",
                "uVar3": "write_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ee3f": {
            "called": [
                "FUN_001043e0",
                "FUN_00113da9",
                "FUN_00113d3a",
                "FUN_00112b6e",
                "FUN_00109a32",
                "FUN_00113dfe",
                "FUN_00113b98",
                "FUN_0010914e",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_0010d21c",
                "FUN_00104270",
                "FUN_00113fb0",
                "FUN_001129f4",
                "FUN_00109022",
                "FUN_00109be3",
                "FUN_00104550",
                "FUN_00113b71",
                "FUN_00113d6e",
                "FUN_00104700",
                "FUN_0010afd5",
                "FUN_00109a0b",
                "FUN_00109ab1",
                "FUN_001045c0",
                "FUN_00113e17",
                "FUN_001048c0",
                "FUN_00108e76",
                "FUN_001047c0",
                "FUN_0010911f",
                "FUN_00113b4a",
                "FUN_001040e0",
                "FUN_0010c2d2",
                "FUN_00113c43",
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_00104510",
                "FUN_001042b0",
                "FUN_0010b6ea",
                "FUN_00104470",
                "FUN_0010ee3f",
                "FUN_00104290",
                "FUN_00113e5e",
                "FUN_00104320",
                "FUN_00113cb9",
                "FUN_00108fe8",
                "FUN_00113df2",
                "FUN_001047e0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_00112904",
                "FUN_00108fb9",
                "FUN_00113bfa",
                "FUN_00113ce0",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_type_number(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)stab_find_type(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = stab_find_slot(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)debug_make_offset_type_isra_0(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)debug_make_void_type_isra_0();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              bad_stab(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)debug_get_real_type_isra_0(lVar4,0,0x3b,1), piVar21 == (int *)0x0)\n                ) || (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_reference_type_isra_0(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_pointer_type_isra_0(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_number(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_number(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)debug_make_type_constprop_0(5);\n      }\n      else {\n        pvVar17 = (void *)debug_make_float_type_isra_0(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)debug_make_type_constprop_0(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_volatile_type_isra_0(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_type_number(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = debug_find_named_type(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = debug_make_int_type_isra_0(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        bad_stab(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)debug_make_array_type_isra_0(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_number(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)debug_make_int_type_isra_0(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)debug_make_void_type_isra_0();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            bad_stab(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)savestring(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_number(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          bad_stab(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)debug_make_enum_type_isra_0(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_function_type_isra_0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_const_type_isra_0(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_number(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_number(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)debug_make_int_type_isra_0(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)debug_make_int_type_isra_0(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)debug_make_float_type_isra_0(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                bad_stab(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = stab_find_type(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                warn_stab(pbVar27,uVar15);\n                lVar38 = debug_make_int_type_isra_0(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)debug_make_type_constprop_0(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)debug_make_type_constprop_0(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)debug_make_int_type_isra_0(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)debug_make_int_type_isra_0(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)debug_make_int_type_isra_0(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          warn_stab(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"0777777777777777777777;\"),\n           cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"01777777777777777777777;\"),\n              cVar6 == '\\0')))) goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_number(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            bad_stab(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  warn_stab(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                warn_stab(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_number(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)debug_get_type_name_constprop_0();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        warn_stab(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        warn_stab(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_number(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                bad_stab(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              bad_stab(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)savestring(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  bad_stab(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  warn_stab(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_number(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_number(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              bad_stab(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)savestring(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)savestring(pbVar28);\n            }\n            else {\n              local_150 = (char *)savestring(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)savestring(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              warn_stab(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = stab_find_type(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = stab_demangle_v3_arglist\n                                               (param_1,param_2,\n                                                *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    stab_bad_demangle(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          stab_bad_demangle(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = stab_demangle_qualified(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = stab_demangle_remember_type\n                                                  (&local_98,pbVar42,(int)local_a0 - (int)pbVar42);\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                stab_bad_demangle(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = stab_demangle_template(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = stab_demangle_remember_type\n                                                    (&local_98,pbVar28,(int)local_a0 - (int)pbVar28)\n                                  ;\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = stab_demangle_count(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = stab_demangle_remember_type\n                                                      (&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  stab_bad_demangle(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)debug_make_method_type_isra_0\n                                                      (lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pcVar40)\n                        ;\n                        goto LAB_00110d7e;\n                      }\n                      stab_bad_demangle(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      stab_bad_demangle(local_a0);\n                    }\n                    else {\n                      cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)debug_make_method_type_isra_0(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                warn_stab(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_number(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  bad_stab(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)debug_make_struct_type_isra_0(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)debug_make_type_constprop_0((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          warn_stab(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        bad_stab(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)stab_find_tagged_type(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  bad_stab(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "current_name": "FUNC_0010ee3f",
            "entrypoint": "0x0010ee3f",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0011173a": {
            "additional_data": {
                "FUNC_0010ee3f": {
                    "eleventh_function_name": 1
                },
                "FUN_00108f08": {
                    "thirteen_function_name": 1
                },
                "FUN_00108fb9": {
                    "nineteen_function_name": 1
                },
                "FUN_00108fe8": {
                    "fourteen_function_name": 1
                },
                "FUN_00109a0b": {
                    "second_function_name": 1
                },
                "FUN_0010bbd3": {
                    "seventh_function_name": 1
                },
                "FUN_0010bc80": {
                    "tenth_function_name": 1
                },
                "FUN_0010bd62": {
                    "eighteen_function_name": 1
                },
                "FUN_0010be1a": {
                    "sixth_function_name": 1
                },
                "FUN_0010be88": {
                    "twelfth_function_name": 1
                },
                "FUN_0010bf20": {
                    "seventeen_function_name": 1
                },
                "FUN_0010bf86": {
                    "eighth_function_name": 1
                },
                "FUN_0010c05d": {
                    "ninth_function_name": 1
                },
                "FUN_0010c139": {
                    "fourth_function_name": 1
                },
                "FUN_0010c1c6": {
                    "third_function_name": 1
                },
                "FUN_0010c218": {
                    "fifteen_function_name": 1
                },
                "FUN_0010c6be": {
                    "sixteen_function_name": 1
                },
                "FUN_0011173a": {
                    "analyze_stab_data": 1,
                    "better_function_name": 1,
                    "handle_stab_entries": 1,
                    "parse_and_record_stab": 1,
                    "parse_debug_directive": 1,
                    "parse_debug_info": 1,
                    "parse_debug_stab_function": 1,
                    "parse_debugging_info": 1,
                    "parse_stab_entry": 3,
                    "parse_stab_type_entry": 1,
                    "process_stab": 2,
                    "process_stab_data": 1
                },
                "FUN_00112996": {
                    "other_function_name": 1
                },
                "FUN_00113ce0": {
                    "twenty_function_name": 1
                },
                "FUN_00113d3a": {
                    "fifth_function_name": 1
                },
                "__ptr": {
                    "pointer": 3,
                    "pointer_var": 2,
                    "pointer_variable": 1,
                    "ptr": 13,
                    "ptr_result": 1,
                    "ptr_value": 2,
                    "ptr_var": 2,
                    "ptr_variable": 1,
                    "temp3": 1,
                    "temp_ptr": 1,
                    "void_ptr": 1
                },
                "atan": {
                    "arctan": 1
                },
                "bVar2": {
                    "byte1": 2,
                    "byte_1": 1,
                    "byte_result": 1,
                    "byte_val": 2,
                    "byte_value": 2,
                    "byte_var": 4,
                    "byte_var2": 8,
                    "byte_var_2": 2,
                    "byte_variable": 1,
                    "byte_variable2": 1,
                    "current_byte": 1,
                    "temp2": 1,
                    "temp_byte": 1,
                    "var2": 1
                },
                "bad_stab": {
                    "bad_stab": 1,
                    "handle_bad_stab": 1
                },
                "cVar1": {
                    "ch": 2,
                    "char1": 2,
                    "char_1": 1,
                    "char_result": 1,
                    "char_var": 3,
                    "char_var1": 8,
                    "char_var_1": 2,
                    "char_variable": 1,
                    "character": 1,
                    "character_var": 1,
                    "character_variable1": 1,
                    "current_char": 1,
                    "is_valid": 1,
                    "temp1": 1,
                    "temp_char_1": 1,
                    "var1": 1
                },
                "cVar15": {
                    "char3": 1
                },
                "cVar3": {
                    "char2": 2,
                    "char_2": 1,
                    "char_result_2": 1,
                    "char_val": 1,
                    "char_value": 1,
                    "char_var": 1,
                    "char_var2": 6,
                    "char_var3": 5,
                    "char_var_3": 2,
                    "char_variable_2": 1,
                    "character_variable3": 1,
                    "current_char2": 1,
                    "result": 3,
                    "temp_char_2": 1,
                    "var3": 1
                },
                "concat": {
                    "concatenate_strings": 1
                },
                "dVar19": {
                    "double1": 1,
                    "double_result": 1,
                    "double_val": 1,
                    "double_value": 2,
                    "double_var": 8,
                    "double_var1": 2,
                    "double_var19": 5,
                    "double_var_19": 2,
                    "double_variable": 1,
                    "double_variable19": 1,
                    "temp_double": 1
                },
                "dVar20": {
                    "double_var": 1
                },
                "dcgettext": {
                    "get_translated_string": 1
                },
                "debug_add_to_current_namespace_constprop_0": {
                    "add_to_current_namespace": 1,
                    "add_to_current_namespace_const": 1
                },
                "debug_end_block": {
                    "end_debug_block": 2
                },
                "debug_end_common_block": {
                    "end_debug_common_block": 1
                },
                "debug_end_function": {
                    "end_debug_function": 2
                },
                "debug_make_function_type_isra_0": {
                    "make_function_type": 2
                },
                "debug_make_pointer_type_isra_0": {
                    "make_pointer_type": 2
                },
                "debug_name_type": {
                    "debug_name_type": 1,
                    "name_debug_type": 1
                },
                "debug_record_function": {
                    "record_debug_function": 2
                },
                "debug_record_label": {
                    "record_debug_label": 1
                },
                "debug_record_line": {
                    "record_debug_line": 2
                },
                "debug_record_parameter": {
                    "record_debug_parameter": 2
                },
                "debug_record_variable": {
                    "record_debug_variable": 2
                },
                "debug_set_filename": {
                    "set_debug_filename": 2
                },
                "debug_start_block": {
                    "start_debug_block": 2
                },
                "debug_start_source": {
                    "start_debug_source": 2
                },
                "debug_tag_type": {
                    "debug_tag_type": 1,
                    "tag_debug_type": 1
                },
                "fprintf": {
                    "print_formatted": 2
                },
                "free": {
                    "release_memory": 1
                },
                "iVar5": {
                    "count": 1,
                    "index": 2,
                    "int_result": 1,
                    "int_val": 1,
                    "int_value": 1,
                    "int_var": 6,
                    "int_var1": 2,
                    "int_var5": 5,
                    "int_var_5": 2,
                    "int_variable": 1,
                    "int_variable5": 1,
                    "integer_value": 1,
                    "integer_var": 1,
                    "temp4": 1,
                    "temp_int": 1,
                    "var5": 1
                },
                "lVar10": {
                    "long1": 1,
                    "long_result": 1,
                    "long_val2": 1,
                    "long_value1": 1,
                    "long_value_1": 1,
                    "long_var": 2,
                    "long_var1": 6,
                    "long_var10": 5,
                    "long_var2": 3,
                    "long_var_10": 2,
                    "long_var_2": 1,
                    "long_variable10": 1,
                    "long_variable_2": 1,
                    "temp9": 1,
                    "temp_long_1": 1
                },
                "lVar11": {
                    "long2": 1,
                    "long_result_2": 1,
                    "long_val3": 1,
                    "long_value2": 1,
                    "long_value_2": 1,
                    "long_var11": 5,
                    "long_var2": 7,
                    "long_var3": 3,
                    "long_var4": 1,
                    "long_var_11": 2,
                    "long_var_5": 1,
                    "long_variable11": 1,
                    "long_variable_3": 1,
                    "temp10": 1,
                    "temp_long_4": 1
                },
                "lVar113": {
                    "long_var3": 1
                },
                "lVar12": {
                    "long3": 1,
                    "long_result_3": 1,
                    "long_value4": 1,
                    "long_value_3": 1,
                    "long_var12": 5,
                    "long_var3": 8,
                    "long_var4": 3,
                    "long_var_12": 2,
                    "long_var_6": 1,
                    "long_variable12": 1,
                    "long_variable_4": 1,
                    "new_long_val": 1,
                    "temp11": 1,
                    "temp_long_3": 1
                },
                "lVar13": {
                    "long_var13": 1,
                    "long_var4": 5,
                    "long_var5": 1,
                    "long_var_13": 2,
                    "long_variable_5": 1,
                    "ptr_var13": 1
                },
                "lVar14": {
                    "long_var5": 1,
                    "long_var6": 1,
                    "temp12": 1
                },
                "lVar15": {
                    "long4": 1,
                    "long_var6": 1,
                    "long_var7": 1,
                    "temp13": 1
                },
                "lVar18": {
                    "long_var18": 1
                },
                "local_40": {
                    "local_array": 1,
                    "local_double_pointer_char": 1,
                    "local_long_pointer": 1,
                    "local_long_ptr": 1,
                    "local_long_ptr_ptr_ptr": 1,
                    "local_long_ptr_ptr_var": 1,
                    "local_pointer2": 1,
                    "local_pointer_array": 1,
                    "local_pointer_array_var40": 1,
                    "local_pointer_pointer_long_var40": 1,
                    "local_ptr": 1,
                    "local_ptr2": 1,
                    "local_ptr40": 1,
                    "local_ptr_40": 1,
                    "local_ptr_arr": 1,
                    "local_ptr_array": 1,
                    "local_ptr_long_var": 1,
                    "local_ptr_ptr_long": 1,
                    "local_ptr_ptr_long_array": 1,
                    "local_ptr_ptr_long_var1": 1,
                    "local_ptr_var": 1,
                    "local_ptr_var_40": 1,
                    "local_ptr_variable": 1,
                    "local_variable": 1,
                    "temp_local_40": 1,
                    "temp_long_ptr_ptr": 1,
                    "two_dimensional_local_variable40": 1
                },
                "local_48": {
                    "local_char": 1,
                    "local_char_array": 1,
                    "local_char_pointer": 1,
                    "local_char_ptr": 2,
                    "local_char_ptr1": 2,
                    "local_char_ptr_48": 1,
                    "local_char_ptr_var": 2,
                    "local_char_ptr_variable": 1,
                    "local_char_var": 2,
                    "local_name": 1,
                    "local_pointer1": 1,
                    "local_pointer_char": 1,
                    "local_pointer_char_var48": 1,
                    "local_pointer_var48": 1,
                    "local_pointer_variable48": 1,
                    "local_ptr1": 1,
                    "local_ptr48": 1,
                    "local_ptr_48": 1,
                    "local_ptr_char": 1,
                    "local_ptr_char1": 1,
                    "local_var": 1,
                    "temp_char_ptr2": 1,
                    "temp_local_48": 1
                },
                "log10": {
                    "log_base10": 1
                },
                "lseek": {
                    "seek_position": 1
                },
                "param_1": {
                    "context": 1,
                    "filename": 2,
                    "function_address": 1,
                    "param": 2,
                    "param0": 1,
                    "param1": 6,
                    "param_1": 11,
                    "param_address": 1,
                    "param_entry": 1,
                    "param_name": 1,
                    "param_source": 1,
                    "source_file": 1
                },
                "param_2": {
                    "debug_info": 3,
                    "entry": 1,
                    "long_array_param": 1,
                    "param1": 1,
                    "param2": 6,
                    "param_2": 4,
                    "param_array": 1,
                    "param_file": 1,
                    "param_list": 1,
                    "param_variables": 1,
                    "parameters": 1,
                    "params": 1,
                    "stab_data": 1,
                    "stab_entry": 3,
                    "stab_info": 1,
                    "start_info": 1,
                    "symbol_table": 1
                },
                "param_3": {
                    "command": 1,
                    "directive_code": 1,
                    "entry_type": 2,
                    "flag": 1,
                    "int_param_1": 1,
                    "op_code": 1,
                    "opcode": 4,
                    "param2": 1,
                    "param3": 6,
                    "param_3": 4,
                    "param_opcode": 1,
                    "param_operation": 1,
                    "param_type": 1,
                    "stab_type": 1,
                    "subtype": 1,
                    "type": 2
                },
                "param_4": {
                    "block_depth": 1,
                    "count": 1,
                    "data_type": 1,
                    "entry_info": 1,
                    "flag": 1,
                    "int_param_2": 1,
                    "label_line": 1,
                    "line_num": 1,
                    "line_number": 3,
                    "num_args": 1,
                    "param3": 1,
                    "param4": 6,
                    "param_4": 7,
                    "param_index": 1,
                    "param_line": 1,
                    "param_value": 1
                },
                "param_5": {
                    "address": 7,
                    "current_address": 1,
                    "current_line": 1,
                    "entry_value": 1,
                    "line": 1,
                    "param4": 1,
                    "param5": 6,
                    "param_5": 6,
                    "param_address": 2,
                    "param_u_long": 1,
                    "section": 1,
                    "ulong_param": 1
                },
                "param_6": {
                    "char_array_param": 1,
                    "directive_value": 1,
                    "entry": 1,
                    "entry_string": 1,
                    "name": 9,
                    "param5": 1,
                    "param6": 6,
                    "param_6": 4,
                    "param_str": 1,
                    "param_string": 2,
                    "str": 1,
                    "string_data": 1
                },
                "parse_stab_type": {
                    "parse_stab_type": 2
                },
                "pcVar16": {
                    "char_pointer_2": 1,
                    "char_pointer_result": 1,
                    "char_ptr2": 1,
                    "char_ptr_2": 1,
                    "char_ptr_var2": 2,
                    "char_ptr_var_16": 1,
                    "char_ptr_variable_2": 1,
                    "char_var2": 1,
                    "char_var4": 1,
                    "pointer_char2": 1,
                    "pointer_char_var16": 1,
                    "pointer_char_variable16": 1,
                    "pointer_var16": 1,
                    "pointer_var3": 1,
                    "ptr_char2": 1,
                    "ptr_char_var2": 1,
                    "ptr_to_char2": 1,
                    "ptr_var16": 3,
                    "ptr_var_16": 1,
                    "temp14": 1,
                    "temp_char_ptr": 2,
                    "var16": 1
                },
                "pcVar8": {
                    "char_array_result": 1,
                    "char_pointer": 1,
                    "char_ptr": 5,
                    "char_ptr_var": 3,
                    "char_ptr_var_8": 1,
                    "char_ptr_variable": 1,
                    "char_var": 1,
                    "char_var3": 1,
                    "pointer_char": 1,
                    "pointer_char_var8": 1,
                    "pointer_char_variable8": 1,
                    "pointer_var1": 1,
                    "pointer_var8": 1,
                    "ptr_char": 1,
                    "ptr_char_var1": 1,
                    "ptr_to_char": 1,
                    "ptr_var8": 3,
                    "ptr_var_8": 1,
                    "temp7": 1,
                    "var8": 1
                },
                "plVar7": {
                    "long_array_result": 1,
                    "long_pointer": 1,
                    "long_ptr": 3,
                    "long_ptr_var": 1,
                    "long_val": 1,
                    "long_var": 4,
                    "long_var1": 1,
                    "long_var7": 1,
                    "long_variable": 1,
                    "pointer_long_variable7": 1,
                    "pointer_var2": 1,
                    "pointer_var7": 1,
                    "ptr_long_var": 2,
                    "ptr_to_long": 1,
                    "ptr_var2": 2,
                    "ptr_var7": 3,
                    "ptr_var_7": 2,
                    "temp6": 1
                },
                "pplVar13": {
                    "double_pointer_long_variable13": 1,
                    "double_pointer_var": 1,
                    "long_pointer_pointer": 1,
                    "long_pointer_pointer_result": 1,
                    "long_ptr_ptr": 4,
                    "long_ptr_ptr_var": 1,
                    "pointer_pointer_long_var13": 1,
                    "pointer_pointer_var1": 1,
                    "pointer_pointer_var13": 1,
                    "ptr_ptr": 1,
                    "ptr_ptr_long1": 1,
                    "ptr_ptr_long_var": 1,
                    "ptr_ptr_long_var1": 1,
                    "ptr_ptr_var13": 2,
                    "ptr_to_ptr_long": 1,
                    "temp16": 1
                },
                "pplVar14": {
                    "ptr_ptr_var1": 1
                },
                "pplVar18": {
                    "long_ptr_ptr2": 1,
                    "ptr_ptr_long2": 1,
                    "ptr_ptr_long_var": 1,
                    "ptr_ptr_var18": 2,
                    "ptr_ptr_var2": 1
                },
                "printf": {
                    "print_formatted": 1
                },
                "puVar6": {
                    "dynamic_ptr": 1,
                    "pointer": 1,
                    "pointer_var1": 1,
                    "pointer_var2": 1,
                    "pointer_var6": 2,
                    "pointer_variable6": 1,
                    "ptr2": 1,
                    "ptr_array_result": 1,
                    "ptr_to_undefined8": 1,
                    "ptr_val": 1,
                    "ptr_var": 5,
                    "ptr_var1": 2,
                    "ptr_var2": 2,
                    "ptr_var6": 3,
                    "ptr_var_6": 2,
                    "ptr_variable_2": 1,
                    "temp5": 1,
                    "undefined_ptr": 1
                },
                "savestring": {
                    "save_string": 1
                },
                "setbuf": {
                    "set_buffering": 1
                },
                "stab_emit_pending_vars": {
                    "emit_pending_variables": 1,
                    "emit_stab_pending_vars": 1
                },
                "stab_record_variable": {
                    "record_stab_variable": 1
                },
                "strchr": {
                    "find_first_occurrence": 1
                },
                "strcmp": {
                    "compare_strings": 2
                },
                "strlen": {
                    "get_string_length": 1,
                    "string_length": 1
                },
                "strtod": {
                    "convert_to_double": 1
                },
                "strtol": {
                    "convert_to_long": 1
                },
                "uVar14": {
                    "temp17": 1,
                    "temp_ulong_1": 1,
                    "ulong1": 1,
                    "ulong_result": 1,
                    "ulong_val2": 1,
                    "ulong_value1": 1,
                    "ulong_value_1": 1,
                    "ulong_var": 5,
                    "ulong_var1": 5,
                    "ulong_var14": 5,
                    "ulong_var_14": 2,
                    "ulong_variable": 1,
                    "unsigned_variable14": 1
                },
                "uVar15": {
                    "temp18": 1,
                    "temp_ulong_2": 1,
                    "ulong_result_2": 1,
                    "ulong_val3": 1,
                    "ulong_value2": 1,
                    "ulong_value_2": 1,
                    "ulong_var15": 5,
                    "ulong_var2": 9,
                    "ulong_var_15": 2,
                    "ulong_var_2": 1,
                    "ulong_variable_2": 1,
                    "unsigned_variable15": 1
                },
                "uVar17": {
                    "temp15": 1,
                    "temp_uint": 1,
                    "uint_result": 1,
                    "uint_val": 1,
                    "uint_value": 2,
                    "uint_var": 6,
                    "uint_var1": 2,
                    "uint_var17": 5,
                    "uint_var_17": 2,
                    "uint_variable": 1,
                    "ulong_var3": 1,
                    "unsigned_var": 1,
                    "unsigned_variable17": 1,
                    "var17": 1
                },
                "uVar18": {
                    "unsigned_var2": 1,
                    "var18": 1
                },
                "uVar19": {
                    "var19": 1
                },
                "uVar4": {
                    "result": 1,
                    "return_value": 1,
                    "temp_undefined": 1,
                    "u_var4": 1,
                    "undefined1": 1,
                    "undefined_result": 1,
                    "undefined_val": 1,
                    "undefined_value": 2,
                    "undefined_var": 7,
                    "undefined_var1": 1,
                    "undefined_var4": 6,
                    "undefined_var_4": 2,
                    "undefined_variable": 1,
                    "undefined_variable4": 1,
                    "var4": 1
                },
                "uVar9": {
                    "result2": 1,
                    "temp8": 1,
                    "temp_ulong": 1,
                    "ulong_val": 1,
                    "undefined2": 1,
                    "undefined8_result": 1,
                    "undefined8_value": 2,
                    "undefined8_var": 2,
                    "undefined_var2": 5,
                    "undefined_var9": 6,
                    "undefined_var_2": 1,
                    "undefined_var_9": 2,
                    "undefined_variable9": 1,
                    "undefined_variable_2": 1,
                    "var9": 2
                },
                "ulVar15": {
                    "ulong_var1": 1
                },
                "ulVar16": {
                    "ulong_var2": 1
                },
                "warn_stab": {
                    "warn_stab": 2
                },
                "xmalloc": {
                    "allocate_memory": 2
                },
                "xstrdup": {
                    "duplicate_string": 1
                }
            },
            "called": [
                "FUN_00104170",
                "FUN_00112996",
                "FUN_00109a0b",
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_00113d3a",
                "FUN_0010be1a",
                "FUN_0010bbd3",
                "FUN_0010bf86",
                "FUN_0010c05d",
                "FUN_00104240",
                "FUN_0010bc80",
                "FUN_00104510",
                "FUN_00104470",
                "FUN_001042b0",
                "FUN_00104390",
                "FUN_001043d0",
                "FUN_0010ee3f",
                "FUN_0010be88",
                "FUN_00104290",
                "FUN_00104270",
                "FUN_00104320",
                "FUN_00108f08",
                "FUN_00108fe8",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_001048f0",
                "FUN_0010bf20",
                "FUN_0010bd62",
                "FUN_00108fb9",
                "FUN_00113ce0",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined parse_stab_type_entry_0011173a(undefined8 param_1,long *param2,int param3,int param_4,ulong address,\n                      char *name)\n\n{\n  char char_var1;\n  byte byte_var2;\n  void *ptr;\n  char char_var2;\n  undefined undefined_var;\n  int int_var;\n  undefined8 *ptr_var;\n  long *long_var;\n  char *char_ptr;\n  undefined8 undefined_var9;\n  long long_var1;\n  long long_var2;\n  long long_var3;\n  long **long_ptr_ptr;\n  ulong ulong_var1;\n  ulong ulong_var2;\n  char *ptr_var16;\n  uint uint_var;\n  long **ptr_ptr_var18;\n  double double_var;\n  char *local_char_ptr;\n  long **local_ptr_long_var [2];\n  \n  if (param2[4] != 0) {\n    if (((param3 == 100) && (*name != '\\0')) && (param2[5] == address)) goto LAB_00111a06;\n    char_var2 = set_debug_filename(param_1);\n    if (char_var2 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)param2 + 0x44) = 0;\n    *(undefined4 *)(param2 + 8) = 0;\n    param2[9] = param2[4];\n    if (*(char *)(param2 + 1) == '\\0') {\n      param2[6] = param2[5];\n    }\n    *(undefined4 *)(param2 + 0x10) = 1;\n    ptr_var = (undefined8 *)allocate_memory(8);\n    param2[0x11] = (long)ptr_var;\n    *ptr_var = 0;\n    param2[4] = 0;\n  }\n  string_length(name);\n  if (param3 == 0x84) {\nLAB_00111ab7:\n    undefined_var = start_debug_source(param_1,name);\n    return undefined_var;\n  }\n  if (param3 < 0x85) {\n    if (param3 == 0x3c) {\n      int_var = compare_strings(name,\"gcc2_compiled.\");\n      if (int_var == 0) {\n        *(undefined4 *)(param2 + 8) = 2;\n        return 1;\n      }\n      int_var = compare_strings(name,\"gcc_compiled.\");\n      if (int_var == 0) {\n        *(undefined4 *)(param2 + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)param2 + 0x44) = 1;\n      return 1;\n    }\n    if (param3 < 0x3d) {\n      if (param3 == 0x24) {\n        if (*name == '\\0') {\n          if (*(char *)(param2 + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(param2 + 1) != '\\0') {\n            address = address + param2[7];\n          }\n          char_var2 = emit_pending_variables(param_1,param2);\n          if (char_var2 != '\\0') {\n            char_var2 = end_debug_function(param_1,address);\n            if (char_var2 != '\\0') {\n              *(undefined *)(param2 + 0xc) = 0;\n              param2[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(param2 + 0xc) != '\\0') &&\n           ((address < (ulong)param2[0xd] || (param2[0xd] == 0xffffffffffffffff)))) {\n          param2[0xd] = address;\n        }\n      }\n      else if (param3 < 0x25) {\n        if (param3 == 0xc) {\n          return 1;\n        }\n        if (param3 - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (param3 == 0x2a) {\n          return 1;\n        }\n        if (param3 == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (param3 == 100) {\nLAB_00111a06:\n        if (*(char *)(param2 + 0xc) != '\\0') {\n          ulong_var1 = address;\n          if (((*name != '\\0') && (ulong_var2 = param2[0xd], ulong_var2 != 0xffffffffffffffff)) &&\n             (ulong_var1 = ulong_var2, address < ulong_var2)) {\n            ulong_var1 = address;\n          }\n          char_var2 = emit_pending_variables(param_1,param2);\n          if (char_var2 == '\\0') {\n            return 0;\n          }\n          char_var2 = end_debug_function(param_1,ulong_var1);\n          if (char_var2 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(param2 + 0xc) = 0;\n          param2[0xd] = -1;\n        }\n        if (*name == '\\0') {\n          return 1;\n        }\n        ptr = (void *)param2[4];\n        if (ptr == (void *)0x0) {\n          long_var3 = duplicate_string(name);\n          param2[4] = long_var3;\n        }\n        else {\n          if (*name == '/') {\n            long_var3 = duplicate_string(name);\n          }\n          else {\n            long_var3 = concatenate_strings(ptr,name,0);\n          }\n          param2[4] = long_var3;\n          release_memory(ptr);\n        }\n        param2[5] = address;\n        return 1;\n      }\n      if (param3 < 0x65) {\n        if (param3 == 0x44) {\n          long_var3 = 0;\n          if (*(char *)(param2 + 0xc) != '\\0') {\n            long_var3 = param2[7];\n          }\n          undefined_var = record_debug_line(param_1,(long)param_4,long_var3 + address);\n          return undefined_var;\n        }\n        if (param3 == 0x62) {\n          return 1;\n        }\n      }\n      else if (param3 == 0x82) {\n        long_var = (long *)allocate_memory();\n        int_var = *(int *)(param2 + 0x10);\n        long_var1 = param2[10];\n        long_var2 = param2[0xb];\n        long_var[5] = 0;\n        long_var3 = param2[0x11];\n        *(int *)(long_var + 4) = int_var;\n        uint_var = int_var + 1;\n        *(uint *)(param2 + 0x10) = uint_var;\n        *long_var = long_var2;\n        long_var[1] = long_var1;\n        long_var[2] = (long)name;\n        long_var[3] = address;\n        param2[10] = (long)long_var;\n        param2[0xb] = (long)long_var;\n        long_var3 = xrealloc(long_var3,(ulong)uint_var << 3);\n        uint_var = *(uint *)(long_var + 4);\n        param2[0x11] = long_var3;\n        *(undefined8 *)(long_var3 + (ulong)uint_var * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    char_ptr = find_first_occurrence(name,0x3a);\n    if ((char_ptr != (char *)0x0) && ((char_ptr[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(param2 + 0xc) != '\\0') {\n        ulong_var1 = param2[0xd];\n        ulong_var2 = address;\n        if ((ulong_var1 != 0xffffffffffffffff) && (ulong_var2 = ulong_var1, address < ulong_var1)) {\n          ulong_var2 = address;\n        }\n        char_var2 = emit_pending_variables(param_1,param2);\n        if (char_var2 == '\\0') {\n          return 0;\n        }\n        char_var2 = end_debug_function(param_1,ulong_var2);\n        if (char_var2 == '\\0') {\n          return 0;\n        }\n        param2[0xd] = -1;\n      }\n      if (*(char *)(param2 + 1) != '\\0') {\n        param2[7] = address;\n      }\n      *(undefined *)(param2 + 0xc) = 1;\n    }\n    local_char_ptr = find_first_occurrence(name,0x3a);\n    if (local_char_ptr == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_char_ptr[1] == ':') goto code_r0x00111cc7;\n    if (*name == '$') {\n      char_var2 = name[1];\n      ptr_var16 = \"eh_throw\";\n      if (char_var2 != 'e') {\n        if (char_var2 < 'f') {\n          if ((char_var2 != 'X') && (char_var2 != '_')) {\nLAB_00111d1a:\n            undefined_var9 = get_translated_string(0,\"unknown C++ encoded name\",5);\n            warn_stab(name,undefined_var9);\n          }\n        }\n        else {\n          ptr_var16 = \"this\";\n          if (char_var2 == 't') goto LAB_00111d62;\n          if (char_var2 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      ptr_var16 = (char *)0x0;\n      if ((name != local_char_ptr) && ((*name != ' ' || (local_char_ptr != name + 1)))) {\n        ptr_var16 = (char *)save_string(name,(int)local_char_ptr - (int)name);\n      }\n    }\nLAB_00111d62:\n    byte_var2 = local_char_ptr[1];\n    char_ptr = local_char_ptr + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte_var2 * 2) >> 2) & 1 |\n        (byte_var2 == 0x2d || byte_var2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_char_ptr = char_ptr;\n      long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 4;\n      goto LAB_001123e8;\n    }\n    if (byte_var2 == 0) goto switchD_00111de5_caseD_44;\n    char_ptr = local_char_ptr + 2;\n    char_var2 = local_char_ptr[1];\n    switch(char_var2) {\n    case 'C':\n      local_char_ptr = char_ptr;\n      long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n      char_ptr = \"record_debug_label: not implemented\";\n      if (long_var3 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_char_ptr = char_ptr;\n      long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      char_var2 = record_debug_function(param_1,ptr_var16,long_var3,char_var2 == 'F',address);\n      if (char_var2 != '\\0') {\n        do {\n          if (*local_char_ptr != ';') {\n            return 1;\n          }\n          local_char_ptr = local_char_ptr + 1;\n          long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n        } while (long_var3 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_char_ptr = char_ptr;\n      long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      if (ptr_var16 == (char *)0x0) goto LAB_0011208f;\n      long_var1 = param2[3];\n      long_var = (long *)param2[2];\n      char_var2 = *(char *)(*(long *)(*param2 + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (param3 == 0x24) {\n        local_char_ptr = char_ptr;\n        do {\n          if (*local_char_ptr != ';') {\n            return 1;\n          }\n          local_char_ptr = local_char_ptr + 1;\n          long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n        } while (long_var3 != 0);\n        return 0;\n      }\n    case 'R':\n      local_char_ptr = char_ptr;\n      long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 2;\n      break;\n    case 'S':\n      local_char_ptr = char_ptr;\n      long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      char_var2 = local_char_ptr[2];\n      if (char_var2 == 't') {\n        char_ptr = local_char_ptr + 3;\n      }\n      local_char_ptr = char_ptr;\n      long_var3 = parse_stab_type(param_1,param2,ptr_var16,&local_char_ptr,local_ptr_long_var);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      if (ptr_var16 == (char *)0x0) {\n        return 1;\n      }\n      char_var1 = *(char *)(param2 + 0x35);\n      long_var = (long *)debug_tag_type(param_1,ptr_var16,long_var3);\n      if (long_var == (long *)0x0) {\n        return 0;\n      }\n      if (local_ptr_long_var[0] != (long **)0x0) {\n        *local_ptr_long_var[0] = long_var;\n      }\n      if (char_var1 != '\\0') goto LAB_001122f0;\n      long_ptr_ptr = (long **)(param2 + 0x34);\n      ptr_ptr_var18 = (long **)param2[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_char_ptr = char_ptr;\n      long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      char_ptr = local_char_ptr + 3;\n      if (((local_char_ptr[2] != '\\0') && (char_ptr = local_char_ptr + 4, local_char_ptr[3] == 'n')) &&\n         (char_ptr = local_char_ptr + 5, ptr_var16 = local_char_ptr + 4, local_char_ptr = char_ptr, *ptr_var16 == '0')) {\n        for (; char_ptr = local_char_ptr, *local_char_ptr != '\\0'; local_char_ptr = local_char_ptr + 1) {\n          if (*local_char_ptr == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_char_ptr = char_ptr;\n      long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 4;\n      break;\n    case 'c':\n      if (local_char_ptr[2] == '=') {\n        char_ptr = local_char_ptr + 4;\n        char_var2 = local_char_ptr[3];\n        local_char_ptr = char_ptr;\n        if (char_var2 == 'i') {\n          long_var3 = convert_to_long(char_ptr,(char **)0x0,10);\n          if (ptr_var16 == (char *)0x0) {\n            return 0;\n          }\n          long_var1 = add_to_current_namespace(param_1,ptr_var16,4);\n          if (long_var1 != 0) {\n            *(long *)(long_var1 + 0x20) = (long)(int)long_var3;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var2 == 'r') {\n          double_var = convert_to_double(char_ptr,(char **)0x0);\n          if (ptr_var16 == (char *)0x0) {\n            return 0;\n          }\n          long_var3 = add_to_current_namespace(param_1,ptr_var16,5);\n          if (long_var3 != 0) {\n            *(double *)(long_var3 + 0x20) = double_var;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var2 == 'e') {\n          long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n          if (long_var3 == 0) {\n            return 0;\n          }\n          char_ptr = local_char_ptr;\n          if (*local_char_ptr == ',') {\n            long_var1 = convert_to_long(local_char_ptr,(char **)0x0,10);\n            if (ptr_var16 == (char *)0x0) {\n              return 0;\n            }\n            long_var2 = add_to_current_namespace(param_1,ptr_var16,6);\n            if (long_var2 != 0) {\n              long_var = (long *)allocate_memory(0x10);\n              *long_var = long_var3;\n              long_var[1] = (long)(int)long_var1;\n              *(long **)(long_var2 + 0x20) = long_var;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_char_ptr[2] == 'F') {\n        local_char_ptr = local_char_ptr + 3;\n        long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n        if (long_var3 == 0) {\n          return 0;\n        }\n        undefined_var9 = make_function_type(long_var3,0,0);\n        long_var3 = make_pointer_type(undefined_var9);\n      }\n      else {\n        local_char_ptr = char_ptr;\n        long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n      }\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 1;\n      break;\n    case 'r':\n      local_char_ptr = char_ptr;\n      long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 5;\nLAB_001123e8:\n      char_var2 = record_stab_variable(param_1,param2,ptr_var16,long_var3,undefined_var9,address);\n      goto joined_r0x001123f8;\n    case 't':\n      local_char_ptr = char_ptr;\n      long_var3 = parse_stab_type(param_1,param2,ptr_var16,&local_char_ptr,local_ptr_long_var);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      if (ptr_var16 == (char *)0x0) {\n        return 1;\n      }\n      long_var = (long *)debug_name_type(param_1,ptr_var16,long_var3);\n      if (long_var == (long *)0x0) {\n        return 0;\n      }\n      if (local_ptr_long_var[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_ptr_long_var[0] = long_var;\n      return 1;\n    case 'v':\n      local_char_ptr = char_ptr;\n      long_var3 = parse_stab_type(param_1,param2,0,&local_char_ptr,0);\n      if (long_var3 == 0) {\n        return 0;\n      }\n      undefined_var9 = 3;\n    }\n    char_var2 = record_debug_parameter(param_1,ptr_var16,long_var3,undefined_var9,address);\n    goto joined_r0x001123f8;\n  }\n  if (param3 == 0xe0) {\n    if ((*(char *)((long)param2 + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    char_var2 = emit_pending_variables(param_1,param2);\n    if (char_var2 == '\\0') {\n      return 0;\n    }\n    char_var2 = end_debug_block(param_1,param2[7] + param2[6] + address);\n    if (char_var2 == '\\0') {\n      return 0;\n    }\n    param2 = param2 + 0xe;\n    *(int *)param2 = *(int *)param2 + -1;\n    char_ptr = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)param2) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < param3) {\n      if (param3 == 0xe2) {\n        char_ptr = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        char_ptr = \"end_debug_common_block: not implemented\";\n        if (param3 != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefined_var9 = get_translated_string(0,char_ptr,5);\n      print_formatted(_stderr,\"%s\\n\",undefined_var9);\n      return 0;\n    }\n    if (param3 != 0xc0) {\n      if (param3 == 0xc2) {\n        int_var = *(int *)(param2 + 0x10);\n        *(uint *)(param2 + 0x10) = int_var + 1U;\n        long_var3 = xrealloc(param2[0x11],(ulong)(int_var + 1U) << 3);\n        ptr_var = (undefined8 *)param2[0xb];\n        param2[0x11] = long_var3;\n        while( true ) {\n          if (ptr_var == (undefined8 *)0x0) {\n            undefined_var9 = get_translated_string(0,\"Undefined N_EXCL\",5);\n            warn_stab(name,undefined_var9);\n            *(undefined8 *)(param2[0x11] + (ulong)(*(int *)(param2 + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((address == ptr_var[3]) && (int_var = compare_strings((char *)ptr_var[2],name), int_var == 0))\n          break;\n          ptr_var = (undefined8 *)*ptr_var;\n        }\n        *(undefined8 *)(long_var3 + (ulong)(*(int *)(param2 + 0x10) - 1) * 8) = ptr_var[5];\n        return 1;\n      }\n      if (param3 == 0xa2) {\n        long_var3 = param2[10];\n        if (long_var3 != 0) {\n          long_var1 = *(long *)(long_var3 + 8);\n          uint_var = *(uint *)(long_var3 + 0x20);\n          param2[10] = long_var1;\n          if ((uint_var < *(uint *)(param2 + 0x10)) &&\n             (*(undefined8 *)(long_var3 + 0x28) = *(undefined8 *)(param2[0x11] + (ulong)uint_var * 8),\n             long_var1 != 0)) {\n            name = *(char **)(long_var1 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        name = (char *)param2[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)param2 + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(param2 + 0xc) != '\\0') {\n      char_var2 = start_debug_block(param_1,param2[7] + param2[6] + address);\n      if (char_var2 == '\\0') {\n        return 0;\n      }\n      char_var2 = emit_pending_variables(param_1,param2);\n      if (char_var2 != '\\0') {\n        *(int *)(param2 + 0xe) = *(int *)(param2 + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    char_ptr = \"N_LBRAC not within function\\n\";\n  }\n  char_ptr = (char *)get_translated_string(0,char_ptr,5);\n  print_formatted(_stderr,char_ptr);\n  return 0;\ncode_r0x00111cc7:\n  local_char_ptr = local_char_ptr + 2;\n  local_char_ptr = find_first_occurrence(local_char_ptr,0x3a);\n  if (local_char_ptr == (char *)0x0) {\n    char_ptr = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_char_ptr = char_ptr;\n    handle_bad_stab(name);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (ptr_ptr_var18 == (long **)0x0) {\nLAB_001122f0:\n    if (char_var2 != 't') {\n      return 1;\n    }\n    long_var = (long *)debug_name_type(param_1,ptr_var16,long_var);\n    if (long_var != (long *)0x0) {\n      if (local_ptr_long_var[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_ptr_long_var[0] = long_var;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)ptr_ptr_var18[1] == *ptr_var16) &&\n     (int_var = compare_strings((char *)ptr_ptr_var18[1],ptr_var16), int_var == 0)) {\n    ptr_ptr_var18[3] = long_var;\n    *long_ptr_ptr = *ptr_ptr_var18;\n    goto LAB_001122f0;\n  }\n  long_ptr_ptr = ptr_ptr_var18;\n  ptr_ptr_var18 = (long **)*ptr_ptr_var18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (long_var1 < 1) {\nLAB_0011208f:\n    undefined_var9 = 1;\nLAB_001121c4:\n    char_var2 = record_debug_variable(param_1,ptr_var16,long_var3,undefined_var9,address);\njoined_r0x001123f8:\n    if (char_var2 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  char_ptr = *(char **)(*long_var + 8);\n  if ((char_var2 != '\\0') && (char_var2 == *char_ptr)) {\n    char_ptr = char_ptr + 1;\n  }\n  if ((*char_ptr == *ptr_var16) && (int_var = compare_strings(char_ptr,ptr_var16), int_var == 0)) {\n    address = *(long *)(*long_var + 0x10) + *(long *)(*(long *)(*long_var + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  long_var1 = long_var1 + -1;\n  long_var = long_var + 1;\n  goto LAB_00112045;\n}\n\n",
            "current_name": "parse_stab_type_entry_0011173a",
            "entrypoint": "0x0011173a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011173a": "parse_stab_type_entry_0011173a",
                "__ptr": "ptr",
                "bVar2": "byte_var2",
                "bad_stab": "handle_bad_stab",
                "cVar1": "char_var1",
                "cVar3": "char_var2",
                "concat": "concatenate_strings",
                "dVar19": "double_var",
                "dcgettext": "get_translated_string",
                "debug_add_to_current_namespace_constprop_0": "add_to_current_namespace",
                "debug_end_block": "end_debug_block",
                "debug_end_common_block": "end_debug_common_block",
                "debug_end_function": "end_debug_function",
                "debug_make_function_type_isra_0": "make_function_type",
                "debug_make_pointer_type_isra_0": "make_pointer_type",
                "debug_record_function": "record_debug_function",
                "debug_record_label": "record_debug_label",
                "debug_record_line": "record_debug_line",
                "debug_record_parameter": "record_debug_parameter",
                "debug_record_variable": "record_debug_variable",
                "debug_set_filename": "set_debug_filename",
                "debug_start_block": "start_debug_block",
                "debug_start_source": "start_debug_source",
                "fprintf": "print_formatted",
                "free": "release_memory",
                "iVar5": "int_var",
                "lVar10": "long_var1",
                "lVar11": "long_var2",
                "lVar12": "long_var3",
                "lVar13": "long_var4",
                "lVar18": "long_var18",
                "local_40": "local_ptr_long_var",
                "local_48": "local_char_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_5": "address",
                "param_6": "name",
                "pcVar16": "ptr_var16",
                "pcVar8": "char_ptr",
                "plVar7": "long_var",
                "pplVar13": "long_ptr_ptr",
                "pplVar18": "ptr_ptr_var18",
                "printf": "print_formatted",
                "puVar6": "ptr_var",
                "savestring": "save_string",
                "stab_emit_pending_vars": "emit_pending_variables",
                "stab_record_variable": "record_stab_variable",
                "strchr": "find_first_occurrence",
                "strcmp": "compare_strings",
                "strlen": "string_length",
                "strtod": "convert_to_double",
                "strtol": "convert_to_long",
                "uVar14": "ulong_var1",
                "uVar15": "ulong_var2",
                "uVar17": "uint_var",
                "uVar4": "undefined_var",
                "uVar9": "undefined_var9",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112502": {
            "additional_data": {
                "FUN_00112502": {
                    "check_and_execute": 1,
                    "check_and_increment": 1,
                    "check_and_process_data": 2,
                    "check_and_return": 1,
                    "check_and_update": 1,
                    "check_and_update_values": 1,
                    "check_array_for_value": 1,
                    "check_condition_and_continue": 1,
                    "check_condition_and_process": 1,
                    "check_conditions": 4,
                    "check_conditions_and_update": 1,
                    "check_param": 1,
                    "check_param_validity": 1,
                    "check_parameter": 1,
                    "check_stability": 1,
                    "check_threshold": 1,
                    "check_threshold_and_continue": 1,
                    "check_threshold_and_line_number": 1,
                    "check_threshold_and_validate": 1,
                    "check_value_and_line_number": 1,
                    "check_value_in_array": 1,
                    "extract_and_check_data": 1,
                    "find_line_number": 1,
                    "find_lineno_within_range": 1,
                    "find_target": 1,
                    "process_data": 1,
                    "verify_param": 1
                },
                "cVar4": {
                    "line_check": 2,
                    "line_check_result": 4,
                    "line_found": 1,
                    "line_number_result": 1,
                    "line_status": 1,
                    "result": 21,
                    "status": 1
                },
                "param_1": {
                    "arg1": 2,
                    "array": 1,
                    "array_ptr": 1,
                    "base_address": 1,
                    "data": 3,
                    "data_address": 1,
                    "data_ptr": 4,
                    "data_struct": 1,
                    "function_context": 1,
                    "input": 4,
                    "input_data_ptr": 1,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_ptr": 2,
                    "input_struct": 1,
                    "param_1": 2,
                    "param_ptr": 1,
                    "ptr1": 1,
                    "struct_ptr": 1,
                    "target": 1
                },
                "param_2": {
                    "address": 1,
                    "arg2": 2,
                    "config": 1,
                    "config_data_ptr": 1,
                    "config_param": 1,
                    "context": 3,
                    "data": 2,
                    "data_ptr": 1,
                    "func_param": 1,
                    "input_param2": 1,
                    "input_value": 1,
                    "obj": 1,
                    "param": 5,
                    "param2": 2,
                    "param2_val": 1,
                    "param_2": 2,
                    "param_data": 1,
                    "param_ptr": 1,
                    "param_val": 1,
                    "ptr2": 1,
                    "symbol_table": 1
                },
                "param_3": {
                    "arg3": 2,
                    "check_value": 1,
                    "input": 1,
                    "input_param3": 1,
                    "input_value": 1,
                    "length": 1,
                    "limit": 5,
                    "line_number": 1,
                    "max_value": 2,
                    "param_3": 2,
                    "param_limit": 1,
                    "param_value": 1,
                    "target": 1,
                    "target_value": 1,
                    "threshold": 7,
                    "value": 3
                },
                "param_4": {
                    "offset": 1
                },
                "puVar2": {
                    "array": 3,
                    "array_pointer": 3,
                    "array_ptr": 7,
                    "data_array": 1,
                    "data_ptr": 1,
                    "entry": 1,
                    "func_array_ptr": 1,
                    "function_data": 1,
                    "next_list": 1,
                    "pointer": 1,
                    "pointer_array": 1,
                    "ptr": 2,
                    "ptr_array": 6,
                    "sub_data_ptr": 1,
                    "subarray_ptr": 1
                },
                "stab_lineno_lto_priv_0": {
                    "check_line_number": 2,
                    "check_privacy": 1,
                    "validate_sub_data": 1
                },
                "uVar1": {
                    "array_index": 1,
                    "count": 2,
                    "counter": 8,
                    "index": 19,
                    "iteration_count": 1
                },
                "uVar3": {
                    "current_element": 1,
                    "current_item": 2,
                    "current_value": 1,
                    "element": 1,
                    "func_result": 1,
                    "next_array_ptr": 1,
                    "next_entry": 1,
                    "next_function": 1,
                    "next_ptr": 1,
                    "next_sub_data_ptr": 1,
                    "pointer_value": 1,
                    "result": 1,
                    "return_value": 4,
                    "temp": 4,
                    "temp_val": 1,
                    "temp_value": 4,
                    "temp_var": 3,
                    "value": 2
                }
            },
            "called": [
                "FUN_0010edb4"
            ],
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f",
                "FUN_001135a5"
            ],
            "code": "\nundefined check_conditions_and_update_00112502(long input,undefined8 param,ulong threshold)\n\n{\n  uint index;\n  undefined8 *array_ptr;\n  undefined8 temp;\n  char result;\n  \n  do {\n    array_ptr = *(undefined8 **)(input + 0x40);\n    if (array_ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(input + 0x48), index < 10 && (array_ptr[(ulong)index + 2] != -1))) {\n      if (threshold <= (ulong)array_ptr[(ulong)index + 0xc]) {\n        return 1;\n      }\n      result = check_line_number(param,*(undefined8 *)(array_ptr[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(input + 0x48) = *(int *)(input + 0x48) + 1;\n    }\n    temp = *array_ptr;\n    *(undefined4 *)(input + 0x48) = 0;\n    *(undefined8 *)(input + 0x40) = temp;\n  } while( true );\n}\n\n",
            "current_name": "check_conditions_and_update_00112502",
            "entrypoint": "0x00112502",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112502": "check_conditions_and_update_00112502",
                "cVar4": "result",
                "param_1": "input",
                "param_2": "param",
                "param_3": "threshold",
                "puVar2": "array_ptr",
                "stab_lineno_lto_priv_0": "check_line_number",
                "uVar1": "index",
                "uVar3": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011256b": {
            "additional_data": {
                "FUN_0011256b": {
                    "print_matching_formats": 30
                },
                "FUn_0011256b": {
                    "print_matching_formats": 1
                },
                "__format": {
                    "format_message": 1,
                    "format_str": 1,
                    "format_string": 23,
                    "localized_format_string": 1
                },
                "_stderr": {
                    "": 1,
                    "standard_error": 6,
                    "standard_error_file": 1,
                    "stderr": 1,
                    "stderr_stream": 1
                },
                "_stdout": {
                    "": 1,
                    "standard_output": 6,
                    "standard_output_file": 1,
                    "stdout": 1,
                    "stdout_stream": 1
                },
                "fprintf": {
                    "fprintf": 1
                },
                "fputc": {
                    "write_character": 1
                },
                "param_1": {
                    "format_list": 7,
                    "format_strings": 7,
                    "formats": 13,
                    "formats_array": 1,
                    "formats_list": 1,
                    "matching_formats": 2
                },
                "plVar2": {
                    "current_format": 22,
                    "current_format_string": 2,
                    "format_ptr": 2
                },
                "uVar1": {
                    "data": 5,
                    "default_format": 4,
                    "default_locale": 1,
                    "default_value": 2,
                    "format_string": 1,
                    "format_variable": 1,
                    "initial_value": 1,
                    "matching_format": 4,
                    "matching_formats": 1,
                    "matching_formats_header": 1,
                    "matching_formats_message": 1,
                    "user_data": 1
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_001045e0",
                "FUN_001043f0",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\n\n\nvoid print_matching_formats_0011256b(long *formats)\n\n{\n  undefined8 data;\n  char *format_string;\n  long *current_format;\n  \n  fflush(standard_output);\n  data = DAT_00127600;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standard_error,format_string,data);\n  for (current_format = formats; *current_format != 0; current_format = current_format + 1) {\n    fprintf(standard_error,\" %s\");\n  }\n  free(formats);\n  write_character(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_matching_formats_0011256b",
            "entrypoint": "0x0011256b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "__format": "format_string",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fputc": "write_character",
                "param_1": "formats",
                "plVar2": "current_format",
                "uVar1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001125fa": {
            "additional_data": {
                "DAT_00127a50": {
                    "formatted_string": 1,
                    "modified_filename": 2
                },
                "DAT_00127a58": {
                    "current_buffer_size": 1,
                    "max_string_length": 1,
                    "maximum_length": 1
                },
                "FUN_001125fa": {
                    "concatenate_strings": 1,
                    "create_improved_filename": 1,
                    "format_filename": 1,
                    "generate_archive_filename": 1,
                    "generate_concatenated_string": 1,
                    "generate_filename": 1,
                    "get_archive_filename": 2,
                    "get_concatenated_string": 2,
                    "get_formatted_filename": 1,
                    "get_formatted_string": 7,
                    "get_modified_file_name": 1,
                    "get_modified_filename": 5,
                    "get_modified_string": 5,
                    "get_protocol_string": 1,
                    "improve_file_name": 1
                },
                "__assert_fail": {
                    "assert_fail": 3,
                    "assertion_failed": 1
                },
                "__s": {
                    "base_file_name": 1,
                    "file": 1,
                    "filename": 1,
                    "first_param": 1,
                    "formatted_string": 1,
                    "input_string": 4,
                    "modified_filename": 1,
                    "modified_string": 2,
                    "original_filename": 5,
                    "original_string": 7,
                    "output": 1,
                    "output_string": 3,
                    "result": 1,
                    "result_string": 2
                },
                "param_1": {
                    "args": 3,
                    "arguments": 8,
                    "input_array": 2,
                    "input_parameters": 1,
                    "input_params": 4,
                    "input_strings": 5,
                    "parameters": 3,
                    "params": 3,
                    "protocol_list": 1,
                    "string_array": 1
                },
                "ppcVar2": {
                    "archive": 4,
                    "archive_file": 1,
                    "archive_filename": 7,
                    "archive_filename_ptr": 1,
                    "archive_path": 1,
                    "archive_ptr": 1,
                    "file_info_pointer": 1,
                    "file_pointer": 1,
                    "first_string_ptr": 1,
                    "pointer": 1,
                    "pointer_to_args": 1,
                    "pointer_to_char": 1,
                    "pointer_to_modified_string": 1,
                    "pointer_to_param1d": 1,
                    "protocol": 1,
                    "ptr_param1_d": 1,
                    "ptr_to_char_ptr": 1,
                    "ptr_to_field": 1,
                    "second_string": 1,
                    "string_ptr": 3
                },
                "sVar3": {
                    "archive_filename_length": 7,
                    "archive_len": 1,
                    "archive_length": 2,
                    "archive_name_length": 1,
                    "archive_path_length": 1,
                    "archive_string_length": 1,
                    "file_info_length": 1,
                    "file_length": 1,
                    "first_string_length": 1,
                    "len1": 1,
                    "len_second_string": 1,
                    "length1": 3,
                    "length_archive_filename": 1,
                    "length_modified_string": 1,
                    "length_of_arg1": 1,
                    "length_of_param1d": 1,
                    "length_of_param2": 1,
                    "param1_length": 2,
                    "protocol_length": 1,
                    "string1_length": 1
                },
                "sVar4": {
                    "file_len": 1,
                    "file_name_length": 1,
                    "filename_length": 1,
                    "first_param_length": 1,
                    "input_length": 2,
                    "input_string_length": 2,
                    "len2": 1,
                    "len_first_string": 1,
                    "length2": 3,
                    "length_input_string": 1,
                    "length_of_original_string": 1,
                    "length_of_param1": 2,
                    "length_original_string": 1,
                    "original_filename_length": 5,
                    "original_length": 1,
                    "original_string_length": 2,
                    "second_string_length": 1,
                    "string2_length": 1,
                    "string_length": 2
                },
                "strlen": {
                    "string_length": 1
                },
                "uVar1": {
                    "combined_string_length": 1,
                    "concatenated_string_length": 1,
                    "final_filename_length": 1,
                    "final_length": 4,
                    "final_string_length": 1,
                    "formatted_filename_length": 1,
                    "formatted_string_length": 4,
                    "modified_file_name_length": 1,
                    "modified_filename_length": 2,
                    "modified_string_length": 1,
                    "new_filename_length": 2,
                    "new_length": 2,
                    "new_string_length": 2,
                    "result_len": 1,
                    "total_length": 6
                }
            },
            "called": [
                "FUN_001047e0",
                "FUN_001048f0",
                "FUN_00104270",
                "FUN_00104300",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00107976",
                "FUN_00105828",
                "FUN_001152b6"
            ],
            "code": "\nchar * get_formatted_string_001125fa(char **arguments)\n\n{\n  ulong total_length;\n  char **archive_filename;\n  size_t archive_filename_length;\n  size_t original_filename_length;\n  char *original_string;\n  \n  if (arguments == (char **)0x0) {\n                    \n    assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  archive_filename = (char **)arguments[0x1d];\n  original_string = *arguments;\n  if ((archive_filename != (char **)0x0) && ((*(byte *)((long)archive_filename + 0x49) & 0x10) == 0)) {\n    archive_filename_length = string_length(*archive_filename);\n    original_filename_length = string_length(original_string);\n    total_length = archive_filename_length + 3 + original_filename_length;\n    if (DAT_00127a58 < total_length) {\n      if (DAT_00127a58 != 0) {\n        free(DAT_00127a50);\n      }\n      DAT_00127a58 = (total_length >> 1) + total_length;\n      DAT_00127a50 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a50,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    original_string = DAT_00127a50;\n  }\n  return original_string;\n}\n\n",
            "current_name": "get_formatted_string_001125fa",
            "entrypoint": "0x001125fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001125fa": "get_formatted_string_001125fa",
                "__assert_fail": "assert_fail",
                "__s": "original_string",
                "param_1": "arguments",
                "ppcVar2": "archive_filename",
                "sVar3": "archive_filename_length",
                "sVar4": "original_filename_length",
                "strlen": "string_length",
                "uVar1": "total_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001126c0": {
            "additional_data": {
                "FUN_001126c0": {
                    "handle_error": 1,
                    "print_bfd_error": 3,
                    "print_bfd_error_message": 1,
                    "print_error": 5,
                    "print_error_details": 1,
                    "print_error_message": 19
                },
                "_stderr": {
                    "standard_error": 1
                },
                "bfd_errmsg": {
                    "get_bfd_error_msg": 1
                },
                "bfd_get_error": {
                    "get_bfd_error": 1
                },
                "dcgettext": {
                    "get_localized_text": 1
                },
                "fclose": {
                    "close_file": 1
                },
                "fflush": {
                    "flush_output": 1
                },
                "fprintf": {
                    "format_print": 1
                },
                "fputs": {
                    "write_string": 1
                },
                "fwrite": {
                    "write_data": 1
                },
                "iVar1": {
                    "bfd_error": 4,
                    "error": 9,
                    "error_check": 1,
                    "error_code": 2,
                    "error_flag": 1,
                    "error_type": 1,
                    "error_value": 1
                },
                "in_AL": {
                    "boolean": 1,
                    "condition": 2,
                    "condition_al": 1,
                    "flag": 14,
                    "has_additional_info": 1,
                    "input_flag": 4,
                    "is_error": 2
                },
                "local_100": {
                    "": 1,
                    "buffer_size": 8,
                    "buffer_size1": 5,
                    "error_message_len": 1,
                    "format_buf_size": 1,
                    "length": 1,
                    "length1": 1,
                    "local1": 2,
                    "local_size1": 1,
                    "local_var1": 2,
                    "size": 1,
                    "size1": 2,
                    "size_1": 1,
                    "sizeof_error": 1
                },
                "local_48": {
                    "": 1,
                    "error8_copy": 1,
                    "error8_local": 1,
                    "error_code8": 1,
                    "error_code8_backup": 1,
                    "error_code8_copy": 3,
                    "error_code_backup8": 1,
                    "error_param8_local": 1,
                    "error_param_8_copy": 1,
                    "local120": 1,
                    "local_error_code8": 2,
                    "local_flag8": 1,
                    "local_param8": 2,
                    "local_var18": 1,
                    "local_var8": 1,
                    "param8_copy": 1,
                    "param8_new": 1,
                    "param_8": 2,
                    "param_8_copy": 1,
                    "saved_error_filter": 1,
                    "var10": 1
                },
                "local_58": {
                    "": 1,
                    "error7_copy": 1,
                    "error7_local": 1,
                    "error_code7": 1,
                    "error_code7_backup": 1,
                    "error_code7_copy": 3,
                    "error_code_backup7": 1,
                    "error_param7_local": 1,
                    "error_param_7_copy": 1,
                    "local128": 1,
                    "local_error_code7": 2,
                    "local_flag7": 1,
                    "local_param7": 2,
                    "local_var17": 1,
                    "local_var7": 1,
                    "param7_copy": 1,
                    "param7_new": 1,
                    "param_7": 2,
                    "param_7_copy": 1,
                    "saved_data_filter": 1,
                    "var9": 1
                },
                "local_68": {
                    "": 1,
                    "error6_copy": 1,
                    "error6_local": 1,
                    "error_code6": 1,
                    "error_code6_backup": 1,
                    "error_code6_copy": 3,
                    "error_code_backup6": 1,
                    "error_param6_local": 1,
                    "error_param_6_copy": 1,
                    "local136": 1,
                    "local_error_code6": 2,
                    "local_flag6": 1,
                    "local_param6": 2,
                    "local_var16": 1,
                    "local_var6": 1,
                    "param6_copy": 1,
                    "param6_new": 1,
                    "param_6": 2,
                    "param_6_copy": 1,
                    "saved_section_filter": 1,
                    "var8": 1
                },
                "local_78": {
                    "": 1,
                    "error5_copy": 1,
                    "error5_local": 1,
                    "error_code5": 1,
                    "error_code5_backup": 1,
                    "error_code5_copy": 3,
                    "error_code_backup5": 1,
                    "error_param5_local": 1,
                    "error_param_5_copy": 1,
                    "local144": 1,
                    "local_error_code5": 2,
                    "local_flag5": 1,
                    "local_param5": 2,
                    "local_var15": 1,
                    "local_var5": 1,
                    "param5_copy": 1,
                    "param5_new": 1,
                    "param_5": 2,
                    "param_5_copy": 1,
                    "saved_symbol_filter": 1,
                    "var7": 1
                },
                "local_88": {
                    "": 1,
                    "error4_copy": 1,
                    "error4_local": 1,
                    "error_code4": 1,
                    "error_code4_backup": 1,
                    "error_code4_copy": 3,
                    "error_code_backup4": 1,
                    "error_param4_local": 1,
                    "error_param_4_copy": 1,
                    "local152": 1,
                    "local_error_code4": 2,
                    "local_flag4": 1,
                    "local_param4": 2,
                    "local_var14": 1,
                    "local_var4": 1,
                    "param4_copy": 1,
                    "param4_new": 1,
                    "param_4": 2,
                    "param_4_copy": 1,
                    "saved_target_filter": 1,
                    "var6": 1
                },
                "local_98": {
                    "": 1,
                    "error3_copy": 1,
                    "error3_local": 1,
                    "error_code3": 1,
                    "error_code3_backup": 1,
                    "error_code3_copy": 3,
                    "error_code_backup3": 1,
                    "error_param3_local": 1,
                    "error_param_3_copy": 1,
                    "local160": 1,
                    "local_error_code3": 2,
                    "local_flag3": 1,
                    "local_param3": 2,
                    "local_var13": 1,
                    "local_var3": 1,
                    "param3_copy": 1,
                    "param3_new": 1,
                    "param_3": 2,
                    "param_3_copy": 1,
                    "saved_object_file_filter": 1,
                    "var5": 1
                },
                "local_a8": {
                    "": 1,
                    "error2_copy": 1,
                    "error2_local": 1,
                    "error_code2": 1,
                    "error_code2_backup": 1,
                    "error_code2_copy": 3,
                    "error_code_backup2": 1,
                    "error_code_copy": 1,
                    "error_param2_local": 1,
                    "error_param_2_copy": 1,
                    "local168": 1,
                    "local_error_code2": 2,
                    "local_flag2": 1,
                    "local_param2": 2,
                    "local_var12": 1,
                    "local_var2": 1,
                    "param2_new": 1,
                    "param_2": 2,
                    "param_2_copy": 1,
                    "saved_archive_filter": 1,
                    "var4": 1
                },
                "local_b8": {
                    "": 1,
                    "error1_copy": 1,
                    "error1_local": 1,
                    "error_code1": 1,
                    "error_code1_backup": 1,
                    "error_code1_copy": 3,
                    "error_code_backup1": 1,
                    "error_code_new": 1,
                    "error_param1_local": 1,
                    "error_param_1_copy": 1,
                    "error_type_copy": 1,
                    "local176": 1,
                    "local_error_code1": 2,
                    "local_flag1": 1,
                    "local_param1": 2,
                    "local_var1": 1,
                    "local_var11": 1,
                    "param_1": 2,
                    "param_1_copy": 1,
                    "saved_bfd_handle": 1,
                    "var3": 1
                },
                "local_c0": {
                    "": 1,
                    "arg2_copy": 1,
                    "buffer2": 1,
                    "error_cause2_copy": 1,
                    "error_code_buffer_2": 1,
                    "error_text": 1,
                    "local_param14": 1,
                    "local_param2": 1,
                    "message_param2": 1,
                    "param14": 2,
                    "param14_copy": 6,
                    "param14_local": 2,
                    "param14_new": 1,
                    "param2": 1,
                    "param2_backup": 1,
                    "param2_copy": 1,
                    "param4": 1,
                    "param_14": 1,
                    "param_14_copy": 2,
                    "var2": 2
                },
                "local_c8": {
                    "": 1,
                    "arg1_copy": 1,
                    "buffer1": 1,
                    "error_cause1_copy": 1,
                    "error_code_buffer_1": 1,
                    "local_param1": 1,
                    "local_param13": 1,
                    "message_param1": 1,
                    "param1": 1,
                    "param13": 2,
                    "param13_copy": 6,
                    "param13_local": 2,
                    "param13_new": 1,
                    "param1_backup": 1,
                    "param1_copy": 1,
                    "param3": 1,
                    "param_13": 1,
                    "param_13_copy": 2,
                    "unknown_error": 1,
                    "var1": 2
                },
                "local_e8": {
                    "": 1,
                    "additional_error_buffer": 1,
                    "additional_info": 1,
                    "buffer": 5,
                    "buffer_array": 1,
                    "error_message_buffer": 1,
                    "error_msg_array": 1,
                    "format_array": 1,
                    "local_array": 4,
                    "local_buffer": 6,
                    "local_error_buffer": 1,
                    "local_error_string": 1,
                    "local_info": 1,
                    "local_var": 1,
                    "message_buffer": 1,
                    "param_array": 1,
                    "temporary_buffer": 1
                },
                "local_f0": {
                    "": 1,
                    "buffer": 2,
                    "buffer2": 1,
                    "error_message": 1,
                    "f0_ptr": 1,
                    "format_buf": 1,
                    "local16": 1,
                    "local4": 1,
                    "local_array2": 1,
                    "local_buffer": 7,
                    "local_ptr_0": 1,
                    "local_var10": 1,
                    "local_var2": 1,
                    "local_var4": 1,
                    "param13_str": 1,
                    "param4": 1,
                    "pointer2": 1,
                    "ptr2": 3,
                    "s2": 1,
                    "stack_var2": 1
                },
                "local_f8": {
                    "": 1,
                    "buffer1": 1,
                    "buffer_ptr": 1,
                    "f8_ptr": 1,
                    "format_buffer": 1,
                    "local3": 1,
                    "local8": 1,
                    "local_array1": 1,
                    "local_ptr_8": 1,
                    "local_var1": 1,
                    "local_var3": 1,
                    "local_var9": 1,
                    "message_stack": 1,
                    "param11_str": 1,
                    "param3": 1,
                    "param_buffer": 1,
                    "param_ptr": 2,
                    "pointer1": 1,
                    "ptr1": 3,
                    "ptr_stack": 1,
                    "s1": 1,
                    "stack_pointer": 1,
                    "stack_ptr": 2,
                    "stack_var1": 1,
                    "temp_ptr1": 1
                },
                "local_fc": {
                    "": 1,
                    "buffer_alignment": 1,
                    "buffer_num": 1,
                    "buffer_size2": 5,
                    "format_buf_space": 1,
                    "format_size": 3,
                    "info_size": 1,
                    "length2": 1,
                    "local2": 2,
                    "local_size2": 1,
                    "local_var2": 2,
                    "param12_size": 1,
                    "size2": 2,
                    "size_2": 1,
                    "sizeof_stack": 1,
                    "width": 2
                },
                "param_1": {
                    "arg1": 1,
                    "bfd_handle": 1,
                    "error1": 3,
                    "error_code": 8,
                    "error_code1": 9,
                    "error_param1": 1,
                    "error_param_1": 1,
                    "error_type": 2,
                    "local_var1": 1,
                    "local_var9": 1
                },
                "param_10": {
                    "archive": 6,
                    "archive_descriptor": 1,
                    "archive_file_ptr": 1,
                    "archive_handle": 2,
                    "archive_handler": 4,
                    "bfd": 2,
                    "bfd_handle": 3,
                    "error_code": 1,
                    "error_param10": 1,
                    "error_param_10": 1,
                    "error_status": 1,
                    "error_type": 1,
                    "file_index": 2,
                    "filename": 1,
                    "object_file": 1,
                    "param10": 2
                },
                "param_11": {
                    "archive_member": 1,
                    "bfd_archive_data": 1,
                    "bfd_errno": 1,
                    "error": 1,
                    "error_array": 1,
                    "error_code_ptr": 1,
                    "error_codes": 2,
                    "error_details": 1,
                    "error_flag": 1,
                    "error_flag_ptr": 1,
                    "error_indicator": 1,
                    "error_location": 1,
                    "error_msg": 1,
                    "error_offset": 1,
                    "error_param11": 1,
                    "error_param_11": 1,
                    "error_ptr": 1,
                    "error_string": 1,
                    "file_error": 1,
                    "file_name": 1,
                    "file_names": 1,
                    "filename_len": 1,
                    "param11": 4,
                    "param_11": 1,
                    "string_param": 1,
                    "symbol": 1
                },
                "param_12": {
                    "additional_info": 2,
                    "custom_error_msg": 1,
                    "custom_message": 1,
                    "error_description": 1,
                    "error_message": 8,
                    "error_message_format": 4,
                    "error_msg": 2,
                    "error_msg_format": 1,
                    "error_string": 1,
                    "format": 1,
                    "format_string": 5,
                    "message": 1,
                    "more_details": 1,
                    "param12": 1
                },
                "param_13": {
                    "arg1": 1,
                    "error_cause1": 1,
                    "error_code_1": 1,
                    "error_param1": 1,
                    "param1": 5,
                    "param13": 15,
                    "param_13": 4,
                    "unknown_error_msg": 1,
                    "unknown_param1": 1
                },
                "param_14": {
                    "arg2": 1,
                    "error_cause2": 1,
                    "error_code_2": 1,
                    "error_msg": 1,
                    "error_param2": 1,
                    "param14": 15,
                    "param2": 5,
                    "param_14": 4,
                    "unknown_param2": 1
                },
                "param_2": {
                    "": 1,
                    "archive_filter": 1,
                    "arg2": 1,
                    "error2": 3,
                    "error_code": 1,
                    "error_code2": 9,
                    "error_message": 1,
                    "error_param2": 1,
                    "error_param_2": 1,
                    "local_var10": 1,
                    "local_var2": 1,
                    "param2": 6,
                    "param_2": 1
                },
                "param_3": {
                    "": 1,
                    "arg3": 1,
                    "error3": 3,
                    "error_code3": 9,
                    "error_param3": 1,
                    "error_param_3": 1,
                    "local_var11": 1,
                    "local_var3": 1,
                    "object_file_filter": 1,
                    "param3": 7,
                    "param_3": 2
                },
                "param_4": {
                    "": 1,
                    "arg4": 1,
                    "error4": 3,
                    "error_code4": 9,
                    "error_param4": 1,
                    "error_param_4": 1,
                    "local_var12": 1,
                    "local_var4": 1,
                    "param4": 7,
                    "param_4": 2,
                    "target_filter": 1
                },
                "param_5": {
                    "": 1,
                    "arg5": 1,
                    "error5": 3,
                    "error_code5": 9,
                    "error_param5": 1,
                    "error_param_5": 1,
                    "local_var13": 1,
                    "local_var5": 1,
                    "param5": 7,
                    "param_5": 2,
                    "symbol_filter": 1
                },
                "param_6": {
                    "": 1,
                    "arg6": 1,
                    "error6": 3,
                    "error_code6": 9,
                    "error_param6": 1,
                    "error_param_6": 1,
                    "local_var14": 1,
                    "local_var6": 1,
                    "param6": 7,
                    "param_6": 2,
                    "section_filter": 1
                },
                "param_7": {
                    "": 1,
                    "arg7": 1,
                    "data_filter": 1,
                    "error7": 3,
                    "error_code7": 9,
                    "error_param7": 1,
                    "error_param_7": 1,
                    "local_var15": 1,
                    "local_var7": 1,
                    "param7": 7,
                    "param_7": 2
                },
                "param_8": {
                    "": 1,
                    "arg8": 1,
                    "error8": 3,
                    "error_code8": 9,
                    "error_filter": 1,
                    "error_param8": 1,
                    "error_param_8": 1,
                    "local_var16": 1,
                    "local_var8": 1,
                    "param8": 7,
                    "param_8": 2
                },
                "param_9": {
                    "archive": 1,
                    "archive_file": 4,
                    "archive_file_name": 5,
                    "archive_filename": 13,
                    "archive_length": 1,
                    "error_param9": 1,
                    "file_list_size": 1,
                    "file_size": 2,
                    "filename": 1,
                    "param_9": 1
                },
                "uVar2": {
                    "err_msg": 2,
                    "error_message": 11,
                    "error_message_ptr": 1,
                    "error_msg": 2,
                    "error_string": 2,
                    "error_text": 1,
                    "message": 1
                }
            },
            "called": [
                "FUN_00104800",
                "FUN_00104370",
                "FUN_001045e0",
                "FUN_001125fa",
                "FUN_00104770",
                "FUN_00104240",
                "FUN_001047a0",
                "FUN_001044b0",
                "FUN_00104310"
            ],
            "calling": [
                "FUN_0010551d",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_00115dc0",
                "FUN_00114e50",
                "FUN_00108466",
                "FUN_00116110",
                "FUN_00104d25",
                "FUN_00107880",
                "FUN_001086af",
                "FUN_0010808f",
                "FUN_00114690",
                "FUN_0010554f"
            ],
            "code": "\n\n\nvoid print_bfd_error_message_001126c0(undefined4 error_code1,undefined4 error_code2,undefined4 error_code3,undefined4 error_code4,\n                 undefined4 error_code5,undefined4 error_code6,undefined4 error_code7,undefined4 error_code8,\n                 long archive_filename,long archive,long *param11,char *error_message,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char flag;\n  int error;\n  undefined8 error_message;\n  undefined4 buffer_size;\n  undefined4 buffer_size2;\n  undefined *ptr1;\n  undefined *local_buffer;\n  undefined local_buffer [32];\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code1_copy;\n  undefined4 error_code2_copy;\n  undefined4 error_code3_copy;\n  undefined4 error_code4_copy;\n  undefined4 error_code5_copy;\n  undefined4 error_code6_copy;\n  undefined4 error_code7_copy;\n  undefined4 error_code8_copy;\n  \n  if (flag != '\\0') {\n    error_code1_copy = error_code1;\n    error_code2_copy = error_code2;\n    error_code3_copy = error_code3;\n    error_code4_copy = error_code4;\n    error_code5_copy = error_code5;\n    error_code6_copy = error_code6;\n    error_code7_copy = error_code7;\n    error_code8_copy = error_code8;\n  }\n  param13_copy = param13;\n  param14_copy = param14;\n  error = get_bfd_error();\n  if (error == 0) {\n    error_message = get_localized_text(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = get_bfd_error_msg();\n  }\n  flush_output(_stdout);\n  write_string(DAT_00127600,standard_error);\n  if (archive != 0) {\n    if (archive_filename == 0) {\n      archive_filename = bfd_get_archive_filename(archive);\n    }\n    if ((param11 != (long *)0x0) && (*param11 != 0)) {\n      format_print(standard_error,\": %s[%s]\",archive_filename);\n      goto LAB_001127c1;\n    }\n  }\n  format_print(standard_error,\": %s\",archive_filename);\nLAB_001127c1:\n  if (error_message != (char *)0x0) {\n    ptr1 = &stack0x00000008;\n    local_buffer = local_buffer;\n    buffer_size = 0x20;\n    buffer_size2 = 0x30;\n    write_data(&DAT_0011b4a0,1,2,standard_error);\n    vformat_print(standard_error,error_message,&buffer_size);\n  }\n  format_print(standard_error,\": %s\\n\",error_message);\n  return;\n}\n\n",
            "current_name": "print_bfd_error_message_001126c0",
            "entrypoint": "0x001126c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001126c0": "print_bfd_error_message_001126c0",
                "_stderr": "standard_error",
                "bfd_errmsg": "get_bfd_error_msg",
                "bfd_get_error": "get_bfd_error",
                "dcgettext": "get_localized_text",
                "fflush": "flush_output",
                "fprintf": "format_print",
                "fputs": "write_string",
                "fwrite": "write_data",
                "iVar1": "error",
                "in_AL": "flag",
                "local_100": "buffer_size",
                "local_48": "error_code8_copy",
                "local_58": "error_code7_copy",
                "local_68": "error_code6_copy",
                "local_78": "error_code5_copy",
                "local_88": "error_code4_copy",
                "local_98": "error_code3_copy",
                "local_a8": "error_code2_copy",
                "local_b8": "error_code1_copy",
                "local_c0": "param14_copy",
                "local_c8": "param13_copy",
                "local_e8": "local_buffer",
                "local_f0": "local_buffer",
                "local_f8": "ptr1",
                "local_fc": "buffer_size2",
                "param_1": "error_code1",
                "param_10": "archive",
                "param_11": "param11",
                "param_12": "error_message",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "error_code2",
                "param_3": "error_code3",
                "param_4": "error_code4",
                "param_5": "error_code5",
                "param_6": "error_code6",
                "param_7": "error_code7",
                "param_8": "error_code8",
                "param_9": "archive_filename",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011283f": {
            "additional_data": {
                "FUN_0011283f": {
                    "check_and_update_directory": 1,
                    "check_directory_access": 10,
                    "check_directory_accessible": 1,
                    "check_directory_permission": 6,
                    "check_directory_permissions": 3,
                    "check_permission_directory": 1,
                    "find_directory": 4,
                    "get_directory": 1,
                    "get_readable_directory": 1,
                    "validate_directory": 2,
                    "validate_directory_path": 1
                },
                "iVar1": {
                    "access_result": 23
                },
                "iVar2": {
                    "stat_result": 1
                },
                "param_1": {
                    "directory_path": 18,
                    "file_path": 2,
                    "filepath": 1,
                    "path": 10
                },
                "param_2": {
                    "current_directory": 3,
                    "default_directory": 7,
                    "default_directory_path": 1,
                    "default_path": 9,
                    "dir": 1,
                    "directory": 2,
                    "directory_path": 3,
                    "existing_directory": 1,
                    "original_path": 1,
                    "result": 2,
                    "target_directory": 1
                },
                "sStack_a8": {
                    "directory_info": 1,
                    "file_info": 8,
                    "file_stat": 10,
                    "file_stat_info": 2,
                    "file_stats": 3,
                    "file_status": 3,
                    "path_stat": 1,
                    "stat_buffer": 2,
                    "stat_result": 1
                }
            },
            "called": [
                "FUN_001044f0",
                "FUN_00104740"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nchar * check_directory_access_0011283f(char *directory_path,char *default_path)\n\n{\n  int access_result;\n  stat file_stat;\n  \n  if ((default_path == (char *)0x0) && (directory_path != (char *)0x0)) {\n    access_result = access(directory_path,7);\n    if (access_result == 0) {\n      access_result = stat(directory_path,&file_stat);\n      if ((access_result == 0) && ((file_stat.st_mode & 0xf000) == 0x4000)) {\n        default_path = directory_path;\n      }\n    }\n  }\n  return default_path;\n}\n\n",
            "current_name": "check_directory_access_0011283f",
            "entrypoint": "0x0011283f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "iVar1": "access_result",
                "param_1": "directory_path",
                "param_2": "default_path",
                "sStack_a8": "file_stat"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112894": {
            "additional_data": {
                "FUN_00112894": {
                    "allocate_and_initialize_structure": 1,
                    "allocate_data_structure": 1,
                    "allocate_memory_and_initialize": 2,
                    "create_data_struct": 1,
                    "create_data_structure": 1,
                    "create_dynamic_struct": 1,
                    "create_memory": 1,
                    "create_memory_block": 1,
                    "create_memory_structure": 1,
                    "initialize_array": 1,
                    "initialize_buffer": 1,
                    "initialize_data_structure": 9,
                    "initialize_memory": 9,
                    "initialize_memory_block": 1
                },
                "bVar4": {
                    "b_value": 1,
                    "byte_counter": 4,
                    "byte_value": 10,
                    "byte_var": 2,
                    "counter": 1,
                    "increment": 1,
                    "initial_value": 1,
                    "iteration_count": 1,
                    "loop_condition": 1,
                    "num_iterations": 1,
                    "offset": 5,
                    "zero": 3
                },
                "lVar3": {
                    "count": 1,
                    "counter": 6,
                    "index": 1,
                    "iteration_count": 2,
                    "loop_count": 2,
                    "loop_counter": 19
                },
                "param_1": {
                    "data": 2,
                    "data1": 1,
                    "data_1": 1,
                    "data_pointer": 3,
                    "initial_value": 1,
                    "input": 1,
                    "input1": 6,
                    "input_1": 3,
                    "input_data": 1,
                    "input_data1": 1,
                    "input_param1": 1,
                    "input_value": 2,
                    "input_value1": 1,
                    "structure_param": 1,
                    "value1": 5,
                    "value_1": 1
                },
                "param_2": {
                    "byte_input": 1,
                    "byte_value": 2,
                    "data2": 1,
                    "data_2": 1,
                    "flag": 3,
                    "input2": 6,
                    "input_2": 3,
                    "input_byte": 1,
                    "input_data2": 1,
                    "input_flag": 1,
                    "input_param2": 1,
                    "input_value2": 1,
                    "param2": 1,
                    "undefined_param": 1,
                    "value": 1,
                    "value2": 5,
                    "value_2": 1
                },
                "param_3": {
                    "data3": 1,
                    "data_3": 1,
                    "input3": 6,
                    "input_3": 3,
                    "input_data3": 1,
                    "input_param3": 1,
                    "input_value2": 1,
                    "input_value3": 1,
                    "input_value_2": 1,
                    "param1": 1,
                    "param3": 3,
                    "param3_value": 1,
                    "param_3": 1,
                    "parameter3": 1,
                    "value1": 2,
                    "value3": 5,
                    "value_3": 1
                },
                "param_4": {
                    "data4": 1,
                    "data_4": 1,
                    "input4": 6,
                    "input_4": 3,
                    "input_data4": 1,
                    "input_param4": 1,
                    "input_value3": 1,
                    "input_value4": 1,
                    "input_value_3": 1,
                    "param2": 1,
                    "param4": 3,
                    "param4_value": 1,
                    "param_4": 1,
                    "parameter4": 1,
                    "value2": 2,
                    "value4": 5,
                    "value_4": 1
                },
                "puVar1": {
                    "allocated_memory": 2,
                    "array": 1,
                    "buffer": 1,
                    "data_struct": 1,
                    "data_structure": 7,
                    "data_structure_ptr": 2,
                    "dynamic_struct": 1,
                    "mem_block": 1,
                    "memory": 1,
                    "memory_block": 12,
                    "memory_structure": 1,
                    "structure_ptr": 1
                },
                "puVar2": {
                    "array_pointer": 1,
                    "current_block": 2,
                    "current_element": 1,
                    "current_entry": 1,
                    "current_pointer": 6,
                    "current_position": 1,
                    "current_ptr": 5,
                    "dynamic_array": 1,
                    "memory_pointer": 1,
                    "pointer": 1,
                    "ptr_holder": 1,
                    "ptr_to_memory": 1,
                    "temp_block": 1,
                    "temp_data": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 5
                },
                "xmalloc": {
                    "allocate_memory": 4
                }
            },
            "called": [
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nundefined8 *\nallocate_memory_and_initialize_00112894(undefined8 input1,undefined input2,undefined8 input3,undefined8 input4)\n\n{\n  undefined8 *memory_block;\n  undefined8 *current_pointer;\n  long loop_counter;\n  byte byte_value;\n  \n  byte_value = 0;\n  memory_block = (undefined8 *)allocate_memory(0x1b0);\n  current_pointer = memory_block;\n  for (loop_counter = 0x6c; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *(undefined4 *)current_pointer = 0;\n    current_pointer = (undefined8 *)((long)current_pointer + (ulong)byte_value * -8 + 4);\n  }\n  *memory_block = input1;\n  *(undefined *)(memory_block + 1) = input2;\n  memory_block[2] = input3;\n  memory_block[3] = input4;\n  *(undefined4 *)(memory_block + 0x10) = 1;\n  current_pointer = (undefined8 *)allocate_memory(8);\n  memory_block[0xd] = 0xffffffffffffffff;\n  memory_block[0x11] = current_pointer;\n  *current_pointer = 0;\n  return memory_block;\n}\n\n",
            "current_name": "allocate_memory_and_initialize_00112894",
            "entrypoint": "0x00112894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112894": "allocate_memory_and_initialize_00112894",
                "bVar4": "byte_value",
                "lVar3": "loop_counter",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "puVar1": "memory_block",
                "puVar2": "current_pointer",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112904": {
            "additional_data": {
                "FUN_00112904": {
                    "allocate_and_initialize_user_data": 1,
                    "allocate_memory_and_initialize": 1,
                    "initialize_data": 8,
                    "initialize_data_struct": 1,
                    "initialize_data_structure": 7,
                    "initialize_memory": 6,
                    "initialize_memory_block": 4,
                    "initialize_pointer": 1,
                    "initialize_struct": 1,
                    "initialize_user": 1
                },
                "param_1": {
                    "data1": 4,
                    "data_1": 1,
                    "input_param1": 1,
                    "input_value1": 2,
                    "memory_size": 1,
                    "original_value": 1,
                    "size": 1,
                    "source": 1,
                    "source_address": 1,
                    "source_value": 2,
                    "user_id": 1,
                    "user_value1": 1,
                    "value1": 14
                },
                "param_2": {
                    "data2": 4,
                    "data_2": 1,
                    "data_id": 1,
                    "destination": 1,
                    "destination_address": 1,
                    "destination_value": 2,
                    "input_param2": 1,
                    "input_value2": 2,
                    "new_value": 1,
                    "user_value2": 1,
                    "value": 2,
                    "value2": 14
                },
                "puVar1": {
                    "allocated_data": 1,
                    "allocated_mem": 1,
                    "allocated_memory": 10,
                    "allocated_memory_block": 1,
                    "data_pointer": 1,
                    "data_struct": 1,
                    "data_structure": 1,
                    "dynamic_memory": 2,
                    "memory": 1,
                    "memory_block": 6,
                    "new_struct": 1,
                    "pointer_to_data": 1,
                    "ptr_to_memory": 1,
                    "structure_ptr": 1,
                    "user_data": 1,
                    "user_ptr": 1
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_00113da9",
                "FUN_0010c892",
                "FUN_00113e17",
                "FUN_00113cb9",
                "FUN_00113d3a",
                "FUN_00113b4a",
                "FUN_00113df2",
                "FUN_0010c218",
                "FUN_0010b0fa",
                "FUN_0010c6be",
                "FUN_0010c2d2",
                "FUN_00113c43",
                "FUN_00113dfe",
                "FUN_00113b98",
                "FUN_00113b71",
                "FUN_00113bfa",
                "FUN_00113e23",
                "FUN_00113d6e",
                "FUN_00113ce0"
            ],
            "code": "\nvoid initialize_data_structure_00112904(undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *allocated_memory;\n  \n  allocated_memory = (undefined4 *)allocate_memory(0x18);\n  *allocated_memory = value1;\n  allocated_memory[1] = value2;\n  *(undefined (*) [16])(allocated_memory + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_00112904",
            "entrypoint": "0x00112904",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112904": "initialize_data_structure_00112904",
                "param_1": "value1",
                "param_2": "value2",
                "puVar1": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112925": {
            "additional_data": {
                "FUN_00112925": {
                    "initialize_array": 5,
                    "initialize_data": 3,
                    "initialize_data_structure": 7,
                    "initialize_data_structures": 1,
                    "initialize_memory": 15
                },
                "bVar5": {
                    "byte_flag": 1,
                    "byte_val": 1,
                    "byte_value": 4,
                    "byte_var": 3,
                    "default_value": 1,
                    "flag": 9,
                    "index": 4,
                    "is_first_iteration": 2,
                    "is_zero": 2,
                    "temp_flag": 1,
                    "temp_value": 1,
                    "zero": 1,
                    "zero_value": 1
                },
                "lVar3": {
                    "count": 4,
                    "counter": 3,
                    "index": 1,
                    "iteration": 1,
                    "loop_counter": 22
                },
                "param_1": {
                    "arr_ptr": 1,
                    "array": 2,
                    "array_pointer": 3,
                    "array_ptr": 3,
                    "data": 1,
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_structure": 6,
                    "data_structure_ptr": 1,
                    "data_structures": 1,
                    "memory": 4,
                    "memory_array": 4,
                    "memory_block": 1,
                    "memory_pointer": 2
                },
                "param_2": {
                    "data": 2,
                    "memory_value": 1,
                    "param2": 5,
                    "param2_val": 1,
                    "param2_value": 1,
                    "param_2": 1,
                    "param_value": 2,
                    "param_value1": 1,
                    "val": 1,
                    "value": 13,
                    "value1": 3
                },
                "param_3": {
                    "param3": 18,
                    "param3_val": 1,
                    "param3_value": 1,
                    "param_3": 1,
                    "param_a": 1,
                    "param_value2": 1,
                    "parameter3": 2,
                    "size": 1,
                    "val2": 1,
                    "value1": 1,
                    "value2": 3
                },
                "param_4": {
                    "count": 1,
                    "param4": 18,
                    "param4_val": 1,
                    "param4_value": 1,
                    "param_4": 1,
                    "param_b": 1,
                    "param_value3": 1,
                    "parameter4": 2,
                    "val3": 1,
                    "value2": 1,
                    "value3": 3
                },
                "pauVar2": {
                    "allocated_array": 1,
                    "array": 1,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "dynamic_arr": 1,
                    "existing_array": 3,
                    "existing_array_ptr": 1,
                    "existing_data": 4,
                    "existing_data_array": 1,
                    "existing_data_ptr": 1,
                    "existing_data_structure": 1,
                    "existing_memory": 4,
                    "existing_memory_array": 1,
                    "existing_memory_block": 1,
                    "existing_structure": 1,
                    "existing_structure_ptr": 1,
                    "memory_array": 1,
                    "new_memory": 1,
                    "pointer": 1,
                    "pointer_array": 1,
                    "temp_array": 2,
                    "temp_array_ptr": 1
                },
                "puVar1": {
                    "allocated_array": 1,
                    "allocated_memory": 7,
                    "allocated_memory_ptr": 1,
                    "array": 1,
                    "array_pointer": 2,
                    "data": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "memory_pointer": 2,
                    "memory_ptr": 4,
                    "new_array": 2,
                    "new_data": 1,
                    "new_data_array": 1,
                    "new_memory": 2,
                    "pointer": 1,
                    "ptr": 1,
                    "ptr_to_data": 1,
                    "result_pointer": 1
                },
                "puVar4": {
                    "current_array_element": 1,
                    "current_array_ptr": 1,
                    "current_data": 2,
                    "current_element": 2,
                    "current_memory": 1,
                    "current_memory_address": 1,
                    "current_pointer": 8,
                    "current_ptr": 5,
                    "ptr_to_data_iteration": 1,
                    "temp_memory": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 2
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c218",
                "FUN_00112996",
                "FUN_0010c6be",
                "FUN_0010c05d",
                "FUN_0010bc80"
            ],
            "code": "\nundefined4 *\ninitialize_memory_00112925(undefined (**data_structure) [16],undefined8 value,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *allocated_memory;\n  undefined (*existing_data) [16];\n  long loop_counter;\n  undefined4 *current_pointer;\n  byte flag;\n  \n  flag = 0;\n  allocated_memory = (undefined4 *)allocate_memory(0x28);\n  current_pointer = allocated_memory;\n  for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *current_pointer = 0;\n    current_pointer = current_pointer + (ulong)flag * -2 + 1;\n  }\n  existing_data = *data_structure;\n  *(undefined8 *)(allocated_memory + 2) = value;\n  allocated_memory[5] = param3;\n  allocated_memory[6] = param4;\n  if (existing_data == (undefined (*) [16])0x0) {\n    existing_data = (undefined (*) [16])allocate_memory(0x10);\n    *existing_data = ZEXT816(0);\n    *data_structure = existing_data;\n    *(undefined (**) [16])(*existing_data + 8) = existing_data;\n  }\n  **(undefined8 **)(*existing_data + 8) = allocated_memory;\n  *(undefined4 **)(*existing_data + 8) = allocated_memory;\n  return allocated_memory;\n}\n\n",
            "current_name": "initialize_memory_00112925",
            "entrypoint": "0x00112925",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "bVar5": "flag",
                "lVar3": "loop_counter",
                "param_1": "data_structure",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "pauVar2": "existing_data",
                "puVar1": "allocated_memory",
                "puVar4": "current_pointer",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112996": {
            "additional_data": {
                "FUN_00112925": {
                    "init_debug_function": 1
                },
                "FUN_00112996": {
                    "add_data_to_namespace": 1,
                    "add_debug_to_namespace": 2,
                    "add_to_current_namespace": 13,
                    "add_to_current_namespace_file": 1,
                    "add_to_namespace": 12,
                    "debug_add_to_current_namespace": 2
                },
                "_stderr": {
                    "file_output": 1
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "debug_add_to_namespace_constprop_0": {
                    "add_to_namespace": 1
                },
                "lVar2": {
                    "address": 1,
                    "adjusted_pointer": 1,
                    "curr_file_ptr": 1,
                    "file_address": 2,
                    "file_offset": 2,
                    "file_ptr": 3,
                    "namespace_addr": 1,
                    "namespace_offset": 2,
                    "namespace_ptr": 1,
                    "offset": 9,
                    "ptr_offset": 1,
                    "target_addr": 1,
                    "temp_address": 1,
                    "temp_var": 2,
                    "value_ptr": 1,
                    "var_1": 1
                },
                "param_1": {
                    "address": 1,
                    "base_address": 1,
                    "data_ptr": 1,
                    "debug_struct": 1,
                    "file_address": 1,
                    "file_data": 1,
                    "file_info": 4,
                    "file_pointer": 2,
                    "file_ptr": 5,
                    "file_struct_ptr": 1,
                    "handle": 1,
                    "input": 2,
                    "input_param": 2,
                    "input_ptr": 1,
                    "namespace_address": 2,
                    "namespace_ptr": 3,
                    "namespace_struct_ptr": 1
                },
                "param_2": {
                    "arg1": 2,
                    "const_1": 1,
                    "data_1": 1,
                    "file_address": 1,
                    "namespace": 1,
                    "namespace_param": 1,
                    "namespace_ptr": 1,
                    "param2": 4,
                    "param_2": 14,
                    "param_a": 1,
                    "param_ptr": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "param_3": {
                    "arg2": 2,
                    "arg_1": 1,
                    "const_2": 1,
                    "constant": 1,
                    "constant_address": 1,
                    "data_2": 1,
                    "file_param": 1,
                    "param3": 4,
                    "param_3": 14,
                    "param_b": 1,
                    "param_data": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "uVar1": {
                    "error_message": 2,
                    "result": 28
                }
            },
            "called": [
                "FUN_00112925",
                "FUN_00104240",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8 debug_add_to_current_namespace_00112996(long file_ptr,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(file_ptr + 8) != 0) && (*(long *)(file_ptr + 0x10) != 0)) {\n    offset = *(long *)(file_ptr + 0x10) + 0x10;\n    if (*(long *)(file_ptr + 0x20) != 0) {\n      offset = *(long *)(file_ptr + 0x20) + 0x28;\n    }\n    result = add_to_namespace(offset,param_2,param_3,3);\n    return result;\n  }\n  result = get_error_message(0,\"debug_add_to_current_namespace_00112996: no current file\",5);\n  fprintf(file_output,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "current_name": "debug_add_to_current_namespace_00112996",
            "entrypoint": "0x00112996",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112996": "debug_add_to_current_namespace_00112996",
                "_stderr": "file_output",
                "dcgettext": "get_error_message",
                "debug_add_to_namespace_constprop_0": "add_to_namespace",
                "lVar2": "offset",
                "param_1": "file_ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001129f4": {
            "additional_data": {
                "FUN_001129f4": {
                    "extract_and_return_data": 1,
                    "extract_data": 3,
                    "extract_data_from_binary": 2,
                    "extract_value": 1,
                    "extract_value_from_binary": 4,
                    "get_return_value": 1,
                    "process_input": 1,
                    "retrieve_value": 1,
                    "reverse_and_get_value": 1,
                    "reverse_func": 1
                },
                "param_1": {
                    "array": 1,
                    "array_ptr": 1,
                    "binary_data": 1,
                    "binary_param": 1,
                    "data_array": 2,
                    "data_ptr": 2,
                    "input": 1,
                    "input_array": 19,
                    "input_data": 1,
                    "input_ptr": 1,
                    "value_ptr": 1
                },
                "piVar2": {
                    "current_address_ptr": 1,
                    "current_array_element": 1,
                    "current_array_ptr": 2,
                    "current_index": 1,
                    "current_pointer": 4,
                    "current_ptr": 6,
                    "nested_array_ptr": 1,
                    "nested_data_ptr": 1,
                    "nested_value_ptr": 1,
                    "next_array_element": 1,
                    "next_element": 1,
                    "pointer_to_variable": 1,
                    "ptr_to_int": 1,
                    "ptr_to_value": 1,
                    "temp_int": 1,
                    "temp_pointer": 3,
                    "temp_ptr": 2
                },
                "puVar1": {
                    "array_pointer": 4,
                    "array_ptr": 4,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_ptr_plus_4": 1,
                    "internal_array_ptr": 1,
                    "next_address_ptr": 1,
                    "pointer": 1,
                    "pointer_to_arguments": 1,
                    "pointer_to_data": 1,
                    "pointer_to_data_array": 1,
                    "pointer_to_output": 1,
                    "pointer_to_parameter": 1,
                    "ptr_to_array": 2,
                    "ptr_to_data": 1,
                    "ptr_to_func": 1,
                    "ptr_to_input_plus_4": 1,
                    "ptr_to_value": 1,
                    "ptr_to_var": 1,
                    "sub_array_pointer": 1,
                    "temp_ptr": 1,
                    "value_ptr_plus4": 1
                }
            },
            "called": [
                "FUN_001129f4"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_0010d559",
                "FUN_001129f4",
                "FUN_00112b6e"
            ],
            "code": "\nundefined8 extract_value_from_binary_001129f4(int *input_array)\n\n{\n  undefined8 *array_ptr;\n  int *current_ptr;\n  \n  do {\n    if (*input_array != 1) {\n      if (1 < *input_array - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input_array + 4) + 8);\n    }\n    array_ptr = (undefined8 *)(input_array + 4);\n    current_ptr = **(int ***)(undefined8 *)*array_ptr;\n  } while ((input_array != current_ptr) && (input_array = current_ptr, current_ptr != (int *)0x0));\n  return ((undefined8 *)*array_ptr)[1];\n}\n\n",
            "current_name": "extract_value_from_binary_001129f4",
            "entrypoint": "0x001129f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001129f4": "extract_value_from_binary_001129f4",
                "param_1": "input_array",
                "piVar2": "current_ptr",
                "puVar1": "array_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112a33": {
            "additional_data": {
                "DEBUG_RECORD_VARIABLE_CONSTANT": {
                    "record_variable_constant": 1
                },
                "FUN_0010bd62": {
                    "record_parameter": 2
                },
                "FUN_0010c05d": {
                    "record_variable": 2
                },
                "FUN_0010c218": {
                    "get_tag_type": 1,
                    "get_type": 1
                },
                "FUN_0010c6be": {
                    "get_name": 1,
                    "get_slot_lto": 1
                },
                "FUN_0010da0b": {
                    "get_slot": 1,
                    "record_debug_name": 1
                },
                "FUN_00112a33": {
                    "improved_record_debug_info": 1,
                    "process_debug_info": 1,
                    "process_debug_record": 5,
                    "record_debug_info": 14,
                    "record_debug_information": 6,
                    "record_debug_variable": 1,
                    "record_variable": 1,
                    "record_variable_or_parameter": 2
                },
                "coff_get_slot_lto_priv_0": {
                    "coff_get_slot": 1,
                    "coff_get_slot_lto_priv": 1,
                    "coff_slot_lto_priv": 1,
                    "get_coff_slot": 2,
                    "get_coof_slot_lto_priv_0": 1,
                    "get_private_slot_from_coff": 1,
                    "get_slot": 2,
                    "get_slot_lto_priv": 3
                },
                "debug_name_type": {
                    "get_name_type": 1,
                    "get_type_from_name": 1,
                    "name_type": 4,
                    "name_type_debug": 2,
                    "name_type_debug_info": 1,
                    "type_debug_name": 1,
                    "type_name": 1
                },
                "debug_record_parameter": {
                    "record_parameter": 9,
                    "record_parameter_debug": 2,
                    "record_parameter_debug_info": 1
                },
                "debug_record_variable": {
                    "record_variable": 9,
                    "record_variable_debug": 2,
                    "record_variable_debug_info": 1
                },
                "debug_tag_type": {
                    "get_tag_type": 1,
                    "get_type_from_tag": 1,
                    "tag_type": 5,
                    "tag_type_debug": 2,
                    "tag_type_debug_info": 1,
                    "type_debug_tag": 1
                },
                "false": {
                    "false": 1
                },
                "getSlotLtoPriv": {
                    "get_slot_lto_private": 1
                },
                "lVar2": {
                    "debug_result": 2,
                    "get_type": 1,
                    "result": 3,
                    "tag": 1,
                    "tag_type": 1,
                    "tag_type_result": 1,
                    "type": 7,
                    "type_result": 8,
                    "type_value": 6,
                    "value1": 1
                },
                "nameTypeDebugInfo": {
                    "get_name_type_debug_info": 1
                },
                "param_1": {
                    "arg1": 13,
                    "base_address": 1,
                    "binary_handle": 1,
                    "binary_param": 1,
                    "coff_ctx": 1,
                    "function_pointer": 1,
                    "p_context": 1,
                    "param1": 5,
                    "param_1": 3,
                    "param_func_info": 1,
                    "param_ptr": 1,
                    "record": 1,
                    "unknown1": 1
                },
                "param_2": {
                    "address": 1,
                    "arg2": 13,
                    "data_offset": 1,
                    "data_ptr": 2,
                    "debug_info_ptr": 1,
                    "offset_param": 1,
                    "param2": 4,
                    "param_2": 2,
                    "record_address": 1,
                    "record_info": 1,
                    "source_data": 1,
                    "struct_ptr": 1,
                    "var1": 1,
                    "var_index": 1
                },
                "param_3": {
                    "address_param": 1,
                    "arg3": 13,
                    "p_variable": 1,
                    "param3": 6,
                    "param_3": 3,
                    "param_ptr": 2,
                    "parameter_data": 1,
                    "priv_data": 1,
                    "type_info": 1,
                    "type_ptr": 1,
                    "unknown2": 1
                },
                "param_4": {
                    "arg4": 5,
                    "byte_value": 2,
                    "debug_code": 1,
                    "debug_param": 1,
                    "debug_type": 3,
                    "info": 1,
                    "param4": 2,
                    "param_4": 1,
                    "record_type": 7,
                    "tag": 2,
                    "tag_type": 1,
                    "type": 2,
                    "var2": 1,
                    "var_type": 2
                },
                "param_5": {
                    "arg5": 9,
                    "dbg_ctx": 1,
                    "debug_context": 1,
                    "debug_data": 1,
                    "debug_info": 2,
                    "debug_param": 1,
                    "debug_pointer": 1,
                    "debug_ptr": 2,
                    "debugger": 1,
                    "p_debug_data": 1,
                    "param5": 5,
                    "param_5": 1,
                    "record": 1,
                    "record_data": 1,
                    "source_param": 1,
                    "unknown3": 1,
                    "var3": 1
                },
                "param_6": {
                    "arg6": 11,
                    "context_ptr": 1,
                    "debug_arg": 1,
                    "debug_data_size": 1,
                    "debug_flag": 1,
                    "destination_param": 1,
                    "param6": 6,
                    "param_6": 3,
                    "param_offset": 1,
                    "record_ptr": 1,
                    "source_file": 1,
                    "type": 1,
                    "unknown4": 1,
                    "var4": 1
                },
                "param_7": {
                    "arg7": 10,
                    "debug_flag": 1,
                    "extra_info": 1,
                    "flag_mask": 1,
                    "flags": 1,
                    "param7": 6,
                    "param_7": 3,
                    "param_flag": 1,
                    "param_val": 1,
                    "param_value": 1,
                    "params": 1,
                    "type_param": 1,
                    "unknown5": 1,
                    "value": 1,
                    "var5": 1
                },
                "plVar3": {
                    "coff_slot": 9,
                    "coff_slot_pointer": 1,
                    "coff_slot_ptr": 1,
                    "p_slot": 1,
                    "slot": 4,
                    "slot_lto_priv": 1,
                    "slot_pointer": 3,
                    "slot_ptr": 4,
                    "slot_result": 1,
                    "type_pointer": 1,
                    "type_ptr": 1,
                    "type_slot": 2,
                    "value2": 1,
                    "var_type_slot": 1
                },
                "recordDebugInfo": {
                    "is_debug_info_valid": 1
                },
                "recordParameterDebugInfo": {
                    "is_parameter_debug_info_valid": 1
                },
                "recordVariableDebugInfo": {
                    "is_variable_debug_info_valid": 1
                },
                "tagTypeDebugInfo": {
                    "get_tag_type_debug_info": 1
                },
                "true": {
                    "true": 1
                },
                "uVar1": {
                    "is_recorded": 1,
                    "is_valid": 1,
                    "record_result": 1,
                    "result": 21,
                    "return_value": 4,
                    "status": 1,
                    "success": 2
                }
            },
            "called": [
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010c05d",
                "FUN_0010bd62",
                "FUN_0010da0b"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nbool improved_record_debug_info_00112a33(undefined8 arg1,long arg2,undefined8 arg3,byte record_type,undefined8 arg5\n                 ,undefined8 arg6,uint arg7)\n\n{\n  undefined result;\n  long type_result;\n  long *coff_slot;\n  \n  if (record_type < 0x12) {\n    if (record_type != 0) {\n      switch(record_type) {\n      case 1:\n        result = record_variable\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,4,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = record_variable\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,(arg7 & 0xff) + 2,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 4:\n        result = record_variable\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,5,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 9:\n        result = record_parameter\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,1,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        type_result = tag_type(arg5,*(undefined8 *)(arg2 + 8));\n        if (type_result == 0) {\n          return false;\n        }\n        coff_slot = (long *)get_slot_lto_priv(arg1,arg3);\n        *coff_slot = type_result;\n        break;\n      case 0xd:\n        type_result = name_type(arg5,*(undefined8 *)(arg2 + 8));\n        return type_result != 0;\n      case 0x11:\n        result = record_parameter\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,2,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      }\n    }\n  }\n  else if (record_type == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = record_variable\n                      (arg5,*(undefined8 *)(arg2 + 8),arg6,1,\n                       *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "current_name": "improved_record_debug_info_00112a33",
            "entrypoint": "0x00112a33",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112a33": "improved_record_debug_info_00112a33",
                "coff_get_slot_lto_priv_0": "get_slot_lto_priv",
                "debug_name_type": "name_type",
                "debug_record_parameter": "record_parameter",
                "debug_record_variable": "record_variable",
                "debug_tag_type": "tag_type",
                "lVar2": "type_result",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "record_type",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "arg7",
                "plVar3": "coff_slot",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112b6e": {
            "additional_data": {
                "FUN_00112b6e": {
                    "check_debug_info": 1,
                    "check_debug_info_for_circularity": 1,
                    "debug_get_real_type_info": 1,
                    "extract_real_type": 2,
                    "find_circular_debug_info": 1,
                    "find_circular_debug_information": 2,
                    "find_circular_dependency": 1,
                    "find_debug_real_type": 1,
                    "find_debug_type": 1,
                    "find_real_type": 3,
                    "get_real_type": 2,
                    "get_real_type_recursive": 1,
                    "resolve_circular_debug_info": 1,
                    "resolve_debug_info_circular_dependency": 1,
                    "reverse_debug_info": 1,
                    "reverse_debug_information": 2
                },
                "__format": {
                    "debug_format": 1,
                    "debug_message_format": 1,
                    "error_format": 3,
                    "error_format_string": 1,
                    "error_message_format": 4,
                    "error_msg": 1,
                    "error_msg_format": 1,
                    "format_string": 19
                },
                "_stderr": {
                    "error_stream": 1
                },
                "bVar5": {
                    "is_circular": 28,
                    "is_circular_debug_info": 1,
                    "is_circular_dependency": 1,
                    "is_circular_info": 1
                },
                "extract_value_from_binary_001129f4": {
                    "extract_value_from_binary": 2
                },
                "fprintf": {
                    "print_error_message": 1
                },
                "iVar1": {
                    "array_length": 10,
                    "array_size": 6,
                    "array_value": 1,
                    "element_count": 1,
                    "first_element": 3,
                    "input_array_value": 2,
                    "type_id": 1,
                    "value": 6
                },
                "local_10": {
                    "checked_input_array": 1,
                    "current_array": 11,
                    "current_entry": 1,
                    "current_input_array": 3,
                    "current_ptr": 1,
                    "input_array": 1,
                    "input_array_ptr": 1,
                    "input_array_stack": 1,
                    "input_array_storage": 1,
                    "local_array": 1,
                    "local_input_array": 2,
                    "original_input_array": 1,
                    "temp_array": 1,
                    "temp_input_array": 3,
                    "temp_ptr2": 1,
                    "updated_input_array": 1
                },
                "local_18": {
                    "checked_debug_info": 1,
                    "current_debug": 1,
                    "current_debug_info": 1,
                    "current_debug_info_stack": 1,
                    "current_debug_info_storage": 1,
                    "debug_chain": 1,
                    "debug_info_chain": 1,
                    "debug_info_list": 1,
                    "debug_info_ptr": 1,
                    "debug_info_stack": 2,
                    "debug_info_tail": 1,
                    "dependency_stack": 1,
                    "local_debug_info": 2,
                    "local_debug_info_ptr": 1,
                    "original_debug_info": 1,
                    "pointer_list": 1,
                    "previous_debug_info": 2,
                    "previous_infos": 1,
                    "remaining_debug_info": 1,
                    "temp_debug_info": 4,
                    "temp_ptr1": 1,
                    "updated_debug_info": 1,
                    "visited_debug_info": 3
                },
                "param_1": {
                    "input_array": 31
                },
                "param_2": {
                    "debug_info": 23,
                    "debug_info_list": 2,
                    "debug_info_ptr": 1,
                    "debug_information": 4,
                    "dependency_list": 1
                },
                "piVar3": {
                    "next_array": 1,
                    "result": 23,
                    "result_array": 6,
                    "return_value": 1
                },
                "plVar4": {
                    "current": 1,
                    "current_debug_info": 19,
                    "current_dependency": 1,
                    "current_info": 1,
                    "debug_info_entry": 1,
                    "debug_info_iterator": 1,
                    "debug_pointer": 1,
                    "debug_ptr": 5,
                    "temp_ptr": 1
                },
                "uVar2": {
                    "type_name": 18,
                    "type_name_constprop_0": 1
                }
            },
            "called": [
                "FUN_001129f4",
                "FUN_00104240",
                "FUN_00112b6e",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_0010922b",
                "FUN_0010ee3f",
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_00112c1f"
            ],
            "code": "\n\n\nint * find_debug_real_type_00112b6e(int *input_array,long *debug_info)\n\n{\n  int array_length;\n  undefined8 type_name;\n  char *format_string;\n  int *result;\n  long *current_debug_info;\n  bool is_circular;\n  long *temp_debug_info;\n  int *current_array;\n  \n  array_length = *input_array;\n  if ((array_length != 1) && (1 < array_length - 0x16U)) {\n    return input_array;\n  }\n  current_debug_info = debug_info;\n  while (current_debug_info != (long *)0x0) {\n    if ((input_array == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      type_name = debug_get_type_name_constprop_0\n                        (input_array,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      print_error_message(error_stream,format_string,type_name);\n      return (int *)0x0;\n    }\n  }\n  temp_debug_info = debug_info;\n  current_array = input_array;\n  if (array_length - 0x16U < 2) {\n    result = (int *)find_debug_real_type_00112b6e((*(undefined8 **)(input_array + 4))[1],&temp_debug_info);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(input_array + 4);\n  if (input_array == result) {\n    return input_array;\n  }\n  if (result == (int *)0x0) {\n    return input_array;\n  }\n  result = (int *)find_debug_real_type_00112b6e(result,&temp_debug_info);\n  return result;\n}\n\n",
            "current_name": "find_debug_real_type_00112b6e",
            "entrypoint": "0x00112b6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112b6e": "find_debug_real_type_00112b6e",
                "__format": "format_string",
                "_stderr": "error_stream",
                "bVar5": "is_circular",
                "fprintf": "print_error_message",
                "iVar1": "array_length",
                "local_10": "current_array",
                "local_18": "temp_debug_info",
                "param_1": "input_array",
                "param_2": "debug_info",
                "piVar3": "result",
                "plVar4": "current_debug_info",
                "uVar2": "type_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112c1f": {
            "additional_data": {
                "FUN_00112c1f": {
                    "generate_stab_entry": 1,
                    "generate_stab_type": 1,
                    "generate_type_declaration": 1,
                    "process_debug_type": 2,
                    "reverse_and_write_type": 1
                },
                "bVar14": {
                    "b_var14": 2,
                    "bool_1": 1,
                    "bool_value": 1,
                    "bool_var": 11,
                    "bool_var1": 1,
                    "bool_var14": 7,
                    "boolean1": 1,
                    "condition": 1,
                    "conditional_flag": 1,
                    "flag2": 2,
                    "flag4": 1,
                    "temp_bool": 1
                },
                "cVar5": {
                    "char_1": 1,
                    "char_value": 1,
                    "char_var": 14,
                    "char_var5": 3,
                    "char_variable": 1,
                    "character": 1,
                    "flag": 7,
                    "flag1": 1,
                    "flag_var": 1,
                    "temp_char": 1
                },
                "iVar9": {
                    "i_var9": 6,
                    "int_1": 1,
                    "int_value": 1,
                    "int_value1": 1,
                    "int_value_1": 1,
                    "int_var": 3,
                    "int_var1": 2,
                    "int_var2": 2,
                    "int_var9": 1,
                    "int_var_2": 1,
                    "integer_var9": 1,
                    "integer_variable": 1,
                    "temp_int": 1,
                    "value2": 3,
                    "value3": 1,
                    "var9": 1,
                    "variable4": 1
                },
                "lVar2": {
                    "data_value": 1,
                    "length_var2": 1,
                    "local_var1": 1,
                    "long_1": 1,
                    "long_value_1": 1,
                    "long_var": 3,
                    "long_var1": 1,
                    "long_var2": 10,
                    "long_variable2": 1,
                    "temp_long": 1,
                    "temp_ptr": 1,
                    "temp_var": 1,
                    "type_value": 1,
                    "value7": 1,
                    "var1": 2,
                    "var2": 2,
                    "variable1": 1,
                    "variable_1": 1
                },
                "local_3c": {
                    "local_3c": 1,
                    "local_uint_value": 1,
                    "local_var": 11,
                    "local_var1": 5,
                    "local_var2": 1,
                    "local_var3c": 6,
                    "local_var_3c": 1,
                    "local_variable": 1,
                    "local_variable3c": 1,
                    "local_variable_1": 1,
                    "temp_uint": 1,
                    "uint_2": 1
                },
                "param_1": {
                    "base_address": 15,
                    "input": 1,
                    "input1": 1,
                    "input_1": 1,
                    "input_param": 2,
                    "input_param1": 2,
                    "input_param_1": 1,
                    "input_value": 3,
                    "input_value1": 1,
                    "param1": 2,
                    "param_address": 2
                },
                "param_2": {
                    "argument2": 1,
                    "input2": 1,
                    "input_2": 1,
                    "input_param2": 2,
                    "input_param_2": 1,
                    "input_string": 1,
                    "input_value2": 1,
                    "param": 1,
                    "param2": 11,
                    "param_2": 8,
                    "param_data": 1,
                    "parameter_array": 1,
                    "symbol_table": 1
                },
                "param_3": {
                    "input3": 1,
                    "input_array": 3,
                    "input_param3": 2,
                    "input_param_3": 1,
                    "input_parameters": 1,
                    "param3": 2,
                    "param_3": 1,
                    "param_array": 10,
                    "param_int_pointer": 1,
                    "parameter_array": 1,
                    "parameters": 1,
                    "stab_entry": 1,
                    "type_array": 4,
                    "type_data": 1,
                    "type_list": 1
                },
                "param_4": {
                    "argument4": 1,
                    "class_id": 1,
                    "input4": 1,
                    "input_param4": 2,
                    "input_param_4": 1,
                    "input_value3": 1,
                    "param4": 11,
                    "param_4": 9,
                    "param_long_value": 1,
                    "struct_size": 1,
                    "type_info": 1,
                    "value": 1
                },
                "piVar6": {
                    "int_pointer": 2,
                    "int_pointer_var": 1,
                    "int_ptr": 6,
                    "int_ptr1": 1,
                    "int_var": 2,
                    "int_var_1": 1,
                    "integer_pointer_var": 1,
                    "integer_pointer_var6": 1,
                    "p_int_var6": 1,
                    "pi_var6": 1,
                    "pointer4": 1,
                    "pointer_to_integer_1": 1,
                    "pointer_var4": 1,
                    "pointer_var6": 5,
                    "ptr": 1,
                    "ptr1": 1,
                    "ptr4": 1,
                    "ptr6": 1,
                    "ptr_int_var": 1,
                    "ptr_var6": 1
                },
                "plVar1": {
                    "long_ptr": 1,
                    "p_long_var1": 1,
                    "pointer1": 1,
                    "pointer_1": 2,
                    "pointer_array": 3,
                    "pointer_var1": 14,
                    "pointer_variable_1": 1,
                    "ptr1": 2,
                    "ptr_list1": 1,
                    "ptr_var1": 1,
                    "type_pointer": 1,
                    "type_ptr": 1,
                    "value6": 1,
                    "var1": 1
                },
                "puVar3": {
                    "p_u_var3": 1,
                    "pointer2": 1,
                    "pointer_2": 2,
                    "pointer_var2": 3,
                    "pointer_var3": 13,
                    "pointer_var_3": 1,
                    "pointer_variable_2": 1,
                    "ptr2": 1,
                    "ptr3": 2,
                    "ptr_list2": 1,
                    "ptr_var3": 1,
                    "pu_var3": 1,
                    "undefined8_ptr": 1,
                    "value8": 1,
                    "var3": 1
                },
                "puVar4": {
                    "p_u_var4": 1,
                    "pointer3": 1,
                    "pointer_3": 2,
                    "pointer_var3": 3,
                    "pointer_var4": 13,
                    "pointer_var_4": 1,
                    "pointer_variable_3": 1,
                    "ptr3": 1,
                    "ptr4": 2,
                    "ptr_list3": 1,
                    "ptr_var4": 1,
                    "pu_var4": 1,
                    "undefined8_ptr": 1,
                    "value9": 1,
                    "var4": 1
                },
                "uVar10": {
                    "i_var10": 1,
                    "output3": 1,
                    "output_value2": 1,
                    "output_var3": 2,
                    "size": 1,
                    "temp_undefined4": 1,
                    "temp_value": 1,
                    "u_var10": 5,
                    "u_var_10": 1,
                    "u_variable10": 1,
                    "undefined4_value": 1,
                    "undefined4_var": 3,
                    "undefined_int_var10": 1,
                    "undefined_var": 1,
                    "unused_var10": 1,
                    "value2": 1,
                    "value3": 3,
                    "value4": 1,
                    "value_2": 2,
                    "var10": 1,
                    "variable5": 1
                },
                "uVar11": {
                    "hash_value": 1,
                    "output4": 1,
                    "output_value3": 1,
                    "output_var4": 2,
                    "param3": 1,
                    "result3": 1,
                    "temp_undefined8": 1,
                    "u_var11": 7,
                    "u_var_11": 1,
                    "u_variable11": 1,
                    "undefined8_value_2": 1,
                    "undefined8_var2": 3,
                    "unused_var11": 1,
                    "value2": 2,
                    "value4": 3,
                    "value_3": 2,
                    "var11": 1,
                    "variable6": 1
                },
                "uVar12": {
                    "flag2": 1,
                    "num": 1,
                    "output5": 1,
                    "output_value4": 1,
                    "output_var5": 2,
                    "quantity": 1,
                    "result4": 1,
                    "temp_ulong": 1,
                    "u_value": 1,
                    "u_var12": 7,
                    "u_var_12": 1,
                    "u_variable12": 1,
                    "ulong_value": 1,
                    "ulong_var": 3,
                    "unused_var12": 1,
                    "value": 1,
                    "value3": 1,
                    "value5": 1,
                    "value_4": 2,
                    "var12": 1,
                    "variable7": 1
                },
                "uVar13": {
                    "count": 1,
                    "flag3": 1,
                    "output6": 1,
                    "output_value5": 1,
                    "output_var6": 2,
                    "size": 1,
                    "temp_uint": 1,
                    "u_value2": 1,
                    "u_var13": 7,
                    "u_var_13": 1,
                    "u_variable13": 1,
                    "uint_1": 1,
                    "uint_value": 1,
                    "uint_var": 3,
                    "uint_var13": 1,
                    "unsigned_int_var": 1,
                    "unused_var13": 1,
                    "value4": 1,
                    "value6": 1,
                    "value_5": 1,
                    "var13": 1,
                    "variable8": 1
                },
                "uVar14": {
                    "value_6": 1
                },
                "uVar7": {
                    "output1": 1,
                    "output_value": 2,
                    "output_var": 1,
                    "output_var1": 1,
                    "result": 11,
                    "result_var": 2,
                    "return_val": 1,
                    "return_value": 4,
                    "temp_ulong": 1,
                    "u_var7": 4,
                    "u_var_7": 1,
                    "u_variable7": 1,
                    "variable2": 1
                },
                "uVar8": {
                    "output2": 1,
                    "output_value1": 1,
                    "output_var2": 2,
                    "result2": 1,
                    "temp_undefined8": 1,
                    "u_var8": 6,
                    "u_var_8": 1,
                    "u_variable8": 1,
                    "undefined8_value_1": 1,
                    "undefined8_var": 2,
                    "undefined8_var1": 1,
                    "unused_var8": 1,
                    "value1": 8,
                    "value_1": 2,
                    "var8": 1,
                    "variable3": 1
                },
                "uVar9": {
                    "int_var": 1,
                    "value2": 2
                }
            },
            "called": [
                "FUN_0010b800",
                "FUN_0010b948",
                "FUN_0010a69a",
                "FUN_001040a0",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ba08",
                "FUN_00112b6e",
                "FUN_0010e5db",
                "FUN_0010adf2",
                "FUN_0010ae0e",
                "FUN_0010a0e9",
                "FUN_0010a0a0",
                "FUN_00109e76",
                "FUN_00109d5c",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_0010a77a",
                "FUN_0010a0d3",
                "FUN_00104240",
                "FUN_0010add5",
                "FUN_0010c7a0",
                "FUN_0010a83e",
                "FUN_00109dfe",
                "FUN_0010a2b9",
                "FUN_0010e453",
                "FUN_00104300",
                "FUN_0010a181",
                "FUN_00112c1f",
                "FUN_0010a083",
                "FUN_0010a0bd",
                "FUN_0010ab4d",
                "FUN_00109bbb",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010bba1",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_001135a5"
            ],
            "code": "\n\n\nundefined8 process_debug_type_00112c1f(ulong base_address,undefined8 param2,int *param_array,long param4)\n\n{\n  long *pointer_var1;\n  long long_var2;\n  undefined8 *pointer_var3;\n  undefined8 *pointer_var4;\n  char char_var;\n  int *int_ptr;\n  undefined8 result;\n  undefined8 value1;\n  int i_var9;\n  undefined4 u_var10;\n  undefined8 u_var11;\n  ulong u_var12;\n  uint u_var13;\n  bool bool_var;\n  uint local_var;\n  \n  u_var12 = base_address;\nLAB_00112c39:\n  if (param_array != (int *)0x0) {\n    i_var9 = *param_array;\n    if (i_var9 - 0x16U < 2) {\n      do {\n        pointer_var1 = *(long **)(param_array + 4);\n        u_var13 = *(uint *)(base_address + 0x30);\n        u_var12 = (ulong)u_var13;\n        long_var2 = *pointer_var1;\n        if (*(uint *)(long_var2 + 0x10) == u_var13) {\n          if (i_var9 == 0x16) {\n            result = stab_typedef_type_lto_priv_0(param2,*(undefined8 *)(long_var2 + 8));\n            return result;\n          }\nLAB_00112c94:\n          int_ptr = (int *)debug_get_real_type_isra_0(param_array,0);\n          if (int_ptr == (int *)0x0) goto LAB_00112dd6;\n          if ((*int_ptr - 7U < 4) && (*(long *)(int_ptr + 4) != 0)) {\n            if ((*(uint *)(*(long *)(int_ptr + 4) + 0xc) <= *(uint *)(base_address + 0x38)) &&\n               (char_var = debug_set_class_id_lto_priv_0\n                                  (base_address,*(undefined8 *)(**(long **)(param_array + 4) + 8),int_ptr),\n               char_var == '\\0')) {\n              return 0;\n            }\n            u_var13 = *(uint *)(*(long *)(int_ptr + 4) + 0xc);\n          }\n          else {\n            u_var13 = 0;\n          }\n          i_var9 = *int_ptr;\n          result = *(undefined8 *)(**(long **)(param_array + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (i_var9 == 0x17) {\n          if (long_var2 != param4) goto LAB_00112c94;\n          *(uint *)(param4 + 0x10) = u_var13;\n          param4 = *pointer_var1;\n          param_array = (int *)pointer_var1[1];\n          goto LAB_00112c39;\n        }\n        if (param4 != 0) {\n          *(uint *)(param4 + 0x10) = u_var13;\n        }\n        param_array = (int *)pointer_var1[1];\n        if (param_array == (int *)0x0) goto LAB_00112dd6;\n        i_var9 = *param_array;\n        param4 = 0;\n      } while (i_var9 - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (param4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param4 + 0x10) = *(undefined4 *)(base_address + 0x30);\n      if (*(int *)(param4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(param4 + 8);\n    }\n    switch(i_var9) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = stab_void_type_lto_priv_0(param2);\n      return result;\n    case 3:\n      result = stab_int_type_lto_priv_0(param2,param_array[1],*(undefined *)(param_array + 4));\n      return result;\n    case 4:\n      result = stab_float_type_lto_priv_0(param2,param_array[1]);\n      return result;\n    case 5:\n      result = stab_complex_type_lto_priv_0(param2,param_array[1]);\n      return result;\n    case 6:\n      result = stab_bool_type_lto_priv_0(param2,param_array[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(param_array + 4) != 0) {\n        if ((*(uint *)(*(long *)(param_array + 4) + 0xc) <= *(uint *)(base_address + 0x38)) &&\n           (char_var = debug_set_class_id_lto_priv_0(base_address,result,param_array), char_var == '\\0')) {\n          return 0;\n        }\n        long_var2 = *(long *)(param_array + 4);\n        if (*(int *)(base_address + 0x30) == *(int *)(long_var2 + 8)) {\n          u_var13 = *(uint *)(long_var2 + 0xc);\n          if (u_var13 <= *(uint *)(base_address + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          i_var9 = *param_array;\nLAB_00112ed2:\n          result = stab_tag_type_lto_priv_0(param2,result,u_var13,i_var9);\n          return result;\n        }\n        *(int *)(long_var2 + 8) = *(int *)(base_address + 0x30);\n      }\n      u_var10 = 0;\n      if (*(long *)(param_array + 4) != 0) {\n        u_var10 = *(undefined4 *)(*(long *)(param_array + 4) + 0xc);\n      }\n      char_var = stab_start_struct_type_lto_priv_0(param2,result,u_var10,*param_array == 7,param_array[1]);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(param_array + 4) != (long *)0x0) && (u_var12 = 0, **(long **)(param_array + 4) != 0)) {\n        while( true ) {\n          pointer_var4 = *(undefined8 **)(**(long **)(param_array + 4) + u_var12 * 8);\n          if (pointer_var4 == (undefined8 *)0x0) break;\n          char_var = process_debug_type_00112c1f(base_address,param2,pointer_var4[1],0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n          char_var = stab_struct_field_lto_priv_0\n                            (param2,*pointer_var4,*(undefined4 *)(pointer_var4 + 3),\n                             *(undefined4 *)((long)pointer_var4 + 0x1c),*(undefined4 *)(pointer_var4 + 2));\n          if (char_var == '\\0') {\n            return 0;\n          }\n          u_var12 = (ulong)((int)u_var12 + 1);\n        }\n      }\n      result = stab_end_struct_type_lto_priv_0(param2);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(param_array + 4) == 0) {\n        u_var13 = 0;\n        int_ptr = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(param_array + 4) + 0xc) <= *(uint *)(base_address + 0x38)) &&\n           (u_var12 = base_address, char_var = debug_set_class_id_lto_priv_0(base_address,result,param_array),\n           char_var == '\\0')) {\n          return 0;\n        }\n        long_var2 = *(long *)(param_array + 4);\n        u_var13 = *(uint *)(long_var2 + 0xc);\n        if (*(int *)(base_address + 0x30) == *(int *)(long_var2 + 8)) {\n          if (u_var13 <= *(uint *)(base_address + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          i_var9 = *param_array;\n          goto LAB_00112ed2;\n        }\n        int_ptr = *(int **)(long_var2 + 0x20);\n        *(int *)(long_var2 + 8) = *(int *)(base_address + 0x30);\n        if (((int_ptr != (int *)0x0) && (param_array != int_ptr)) &&\n           (u_var12 = base_address, char_var = process_debug_type_00112c1f(base_address,param2,int_ptr,0), char_var == '\\0')) {\n          return 0;\n        }\n      }\n      char_var = stab_start_class_type_lto_priv_0\n                        (param2,result,u_var13,*param_array == 9,param_array[1],int_ptr != (int *)0x0,\n                         param_array == int_ptr,u_var12);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (*(long **)(param_array + 4) != (long *)0x0) {\n        u_var13 = 0;\n        if (**(long **)(param_array + 4) != 0) {\n          while (pointer_var4 = *(undefined8 **)(**(long **)(param_array + 4) + (ulong)u_var13 * 8),\n                pointer_var4 != (undefined8 *)0x0) {\n            char_var = process_debug_type_00112c1f(base_address,param2,pointer_var4[1],0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)pointer_var4 + 0x14) == '\\0') {\n              char_var = stab_struct_field_lto_priv_0(param2,*pointer_var4,*(undefined4 *)(pointer_var4 + 3));\n            }\n            else {\n              char_var = stab_class_static_member_lto_priv_0(param2,*pointer_var4,pointer_var4[3]);\n            }\n            if (char_var == '\\0') {\n              return 0;\n            }\n            u_var13 = u_var13 + 1;\n          }\n        }\n        u_var13 = 0;\n        if (*(long *)(*(long *)(param_array + 4) + 0x10) != 0) {\n          while (pointer_var4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param_array + 4) + 0x10) + (ulong)u_var13 * 8),\n                pointer_var4 != (undefined8 *)0x0) {\n            char_var = process_debug_type_00112c1f(base_address,param2,*pointer_var4,0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            char_var = stab_class_baseclass_lto_priv_0\n                              (param2,*(undefined4 *)(pointer_var4 + 1),\n                               *(undefined *)((long)pointer_var4 + 0xc));\n            if (char_var == '\\0') {\n              return 0;\n            }\n            u_var13 = u_var13 + 1;\n          }\n        }\n        local_var = 0;\n        if (*(long *)(*(long *)(param_array + 4) + 0x18) != 0) {\n          while (pointer_var4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param_array + 4) + 0x18) + (ulong)local_var * 8),\n                pointer_var4 != (undefined8 *)0x0) {\n            char_var = stab_class_start_method_lto_priv_0(param2,*pointer_var4);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            u_var13 = 0;\n            while (pointer_var3 = *(undefined8 **)(pointer_var4[1] + (ulong)u_var13 * 8),\n                  pointer_var3 != (undefined8 *)0x0) {\n              if ((pointer_var3[4] != 0) &&\n                 (char_var = process_debug_type_00112c1f(base_address,param2,pointer_var3[4],0), char_var == '\\0')) {\n                return 0;\n              }\n              char_var = process_debug_type_00112c1f(base_address,param2,pointer_var3[1],0);\n              if (char_var == '\\0') {\n                return 0;\n              }\n              if (pointer_var3[3] == -1) {\n                char_var = stab_class_static_method_variant_lto_priv_0\n                                  (param2,*pointer_var3,*(undefined4 *)(pointer_var3 + 2),\n                                   *(undefined *)((long)pointer_var3 + 0x14),\n                                   *(undefined *)((long)pointer_var3 + 0x15));\n              }\n              else {\n                char_var = stab_class_method_variant_lto_priv_0(param2);\n              }\n              if (char_var == '\\0') {\n                return 0;\n              }\n              u_var13 = u_var13 + 1;\n            }\n            char_var = stab_class_end_method_lto_priv_0(param2);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            local_var = local_var + 1;\n          }\n        }\n      }\n      result = stab_end_class_type_lto_priv_0(param2);\n      return result;\n    case 0xb:\n      pointer_var4 = *(undefined8 **)(param_array + 4);\n      if (pointer_var4 == (undefined8 *)0x0) {\n        value1 = 0;\n        u_var11 = 0;\n      }\n      else {\n        value1 = pointer_var4[1];\n        u_var11 = *pointer_var4;\n      }\n      result = stab_enum_type_lto_priv_0(param2,result,u_var11,value1);\n      return result;\n    case 0xc:\n      char_var = process_debug_type_00112c1f(base_address,param2,*(undefined8 *)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_pointer_type_lto_priv_0(param2);\n      return result;\n    case 0xd:\n      char_var = process_debug_type_00112c1f(base_address,param2,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      u_var12 = 0;\n      if (*(long *)(*(long *)(param_array + 4) + 8) == 0) {\n        u_var12 = 0xffffffff;\n      }\n      else {\n        while (long_var2 = *(long *)(*(long *)(*(long *)(param_array + 4) + 8) + u_var12 * 8), long_var2 != 0) {\n          u_var12 = u_var12 + 1;\n          char_var = process_debug_type_00112c1f(base_address,param2,long_var2,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n        u_var12 = u_var12 & 0xffffffff;\n      }\n      result = stab_function_type_lto_priv_0\n                        (param2,u_var12,*(undefined *)(*(long *)(param_array + 4) + 0x10));\n      return result;\n    case 0xe:\n      char_var = process_debug_type_00112c1f(base_address,param2,*(undefined8 *)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_reference_type_lto_priv_0(param2);\n      return result;\n    case 0xf:\n      char_var = process_debug_type_00112c1f(base_address,param2,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_range_type_lto_priv_0\n                        (param2,*(undefined8 *)(*(long *)(param_array + 4) + 8),\n                         *(undefined8 *)(*(long *)(param_array + 4) + 0x10));\n      return result;\n    case 0x10:\n      char_var = process_debug_type_00112c1f(base_address,param2,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = process_debug_type_00112c1f(base_address,param2,*(undefined8 *)(*(long *)(param_array + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      long_var2 = *(long *)(param_array + 4);\n      result = stab_array_type_lto_priv_0\n                        (param2,*(undefined8 *)(long_var2 + 0x10),*(undefined8 *)(long_var2 + 0x18),\n                         *(undefined *)(long_var2 + 0x20));\n      return result;\n    case 0x11:\n      char_var = process_debug_type_00112c1f(base_address,param2,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_set_type_lto_priv_0(param2,*(undefined *)(*(long *)(param_array + 4) + 8));\n      return result;\n    case 0x12:\n      char_var = process_debug_type_00112c1f(base_address,param2,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = process_debug_type_00112c1f(base_address,param2,*(undefined8 *)(*(long *)(param_array + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_offset_type_lto_priv_0(param2);\n      return result;\n    case 0x13:\n      char_var = process_debug_type_00112c1f(base_address,param2,**(undefined8 **)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      u_var12 = 0;\n      if (*(long *)(*(long *)(param_array + 4) + 0x10) == 0) {\n        u_var12 = 0xffffffff;\n      }\n      else {\n        while (long_var2 = *(long *)(*(long *)(*(long *)(param_array + 4) + 0x10) + u_var12 * 8), long_var2 != 0)\n        {\n          u_var12 = u_var12 + 1;\n          char_var = process_debug_type_00112c1f(base_address,param2,long_var2,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(param_array + 4) + 8) != 0) &&\n         (char_var = process_debug_type_00112c1f(base_address,param2,*(long *)(*(long *)(param_array + 4) + 8),0),\n         char_var == '\\0')) {\n        return 0;\n      }\n      result = stab_method_type_lto_priv_0\n                        (param2,*(long *)(*(long *)(param_array + 4) + 8) != 0,u_var12 & 0xffffffff,\n                         *(undefined *)(*(long *)(param_array + 4) + 0x18));\n      return result;\n    case 0x14:\n      char_var = process_debug_type_00112c1f(base_address,param2,*(undefined8 *)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_const_type_lto_priv_0(param2);\n      return result;\n    case 0x15:\n      char_var = process_debug_type_00112c1f(base_address,param2,*(undefined8 *)(param_array + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = stab_volatile_type_lto_priv_0(param2);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bool_var = *(int **)**(undefined8 **)(param_array + 4) == param_array;\n  param_array = *(int **)**(undefined8 **)(param_array + 4);\n  if (bool_var) {\nLAB_00112dd6:\n    result = stab_empty_type_lto_priv_0(param2);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "current_name": "process_debug_type_00112c1f",
            "entrypoint": "0x00112c1f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112c1f": "process_debug_type_00112c1f",
                "bVar14": "bool_var",
                "cVar5": "char_var",
                "iVar9": "i_var9",
                "lVar2": "long_var2",
                "local_3c": "local_var",
                "param_1": "base_address",
                "param_2": "param2",
                "param_3": "param_array",
                "param_4": "param4",
                "piVar6": "int_ptr",
                "plVar1": "pointer_var1",
                "puVar3": "pointer_var3",
                "puVar4": "pointer_var4",
                "uVar10": "u_var10",
                "uVar11": "u_var11",
                "uVar12": "u_var12",
                "uVar13": "u_var13",
                "uVar7": "result",
                "uVar8": "value1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001135a5": {
            "additional_data": {
                "DEBUG_WRITE_BLOCK_CONSTPROP_0": {
                    "write_block": 1
                },
                "FUN_00108f05": {
                    "abort": 2,
                    "reverse_data": 1
                },
                "FUN_0010e6a8": {
                    "debug_write_type": 1,
                    "process_data1": 1,
                    "write_debug_constant_block1": 1
                },
                "FUN_0010e7c2": {
                    "process_data2": 1,
                    "stab_write_type": 1,
                    "write_debug_constant_block2": 1
                },
                "FUN_0010e842": {
                    "debug_write_block": 1,
                    "debug_write_linenos_constprop_0": 1,
                    "process_data7": 1
                },
                "FUN_0010e8a9": {
                    "process_data6": 1,
                    "stab_variable_lto_priv": 1,
                    "write_debug_block_constprop": 1
                },
                "FUN_0010e918": {
                    "debug_write_type2": 1,
                    "process_data4": 1,
                    "write_debug_type_constant": 1
                },
                "FUN_0010e9a0": {
                    "process_data5": 1,
                    "stab_function_parameter": 1,
                    "write_stab_parameter": 1
                },
                "FUN_0010eafe": {
                    "debug_write_block_constprop_0": 1,
                    "debug_write_lineno": 1,
                    "process_data8": 1
                },
                "FUN_0010ebb0": {
                    "process_data9": 1,
                    "stab_tag_lto_priv": 1
                },
                "FUN_00112502": {
                    "debug_write_type": 1,
                    "process_data": 1,
                    "write_debug_type": 1
                },
                "FUN_00112c1f": {
                    "process_data3": 1,
                    "stab_typedef_lto_priv": 1,
                    "write_stab_constant_block": 1
                },
                "FUN_001135a5": {
                    "process_code": 1,
                    "process_data": 1,
                    "process_data_type": 1,
                    "process_debug_info": 7,
                    "process_debug_information": 1,
                    "process_entry": 1,
                    "process_extracted_data": 2,
                    "process_stab_entry": 1,
                    "process_type": 1,
                    "translate_debug_info": 1,
                    "write_debug_info": 5,
                    "write_debug_symbols": 1,
                    "write_stab_entry": 1,
                    "write_symbol": 1,
                    "write_symbol_and_get_result": 1
                },
                "FUN_00113a4d": {
                    "reverse_data2": 1,
                    "stab_start_function_lto_priv": 1,
                    "write_stab_typed_constant_block": 1
                },
                "abort": {
                    "abort_execution": 2,
                    "abort_function": 2
                },
                "cVar2": {
                    "char_value": 1,
                    "char_variable": 1,
                    "condition": 2,
                    "flag": 1,
                    "is_successful": 1,
                    "is_valid": 2,
                    "result": 12,
                    "success": 8,
                    "success_flag": 1,
                    "variable2": 1
                },
                "debug_write_block_constprop_0": {
                    "debug_write_block": 1,
                    "write_block": 4,
                    "write_block_info": 1
                },
                "debug_write_linenos_constprop_0": {
                    "debug_write_linenos": 1,
                    "write_line_number_info": 1,
                    "write_line_numbers": 3,
                    "write_lineno": 1,
                    "write_linenos": 1,
                    "write_linenos_constprop": 1
                },
                "debug_write_type_constprop_0": {
                    "debug_write_type": 1,
                    "write_type": 4,
                    "write_type_constprop": 1,
                    "write_type_info": 1,
                    "write_type_information": 1
                },
                "defined8": {
                    "undefined8": 1
                },
                "iVar1": {
                    "case_value": 1,
                    "count": 1,
                    "index": 13,
                    "index_var": 1,
                    "info_type": 1,
                    "int_value": 1,
                    "iteration_count": 1,
                    "iteration_variable1": 1,
                    "num_parameters": 1,
                    "param_count": 1,
                    "parameter_count": 2,
                    "result": 1,
                    "switch_case": 1,
                    "var1": 2,
                    "variable1": 2
                },
                "param_1": {
                    "arg1": 7,
                    "buffer": 1,
                    "file": 1,
                    "input_1": 1,
                    "input_buffer": 1,
                    "output_buffer": 3,
                    "output_file": 1,
                    "output_stream": 1,
                    "param1": 12,
                    "param_1": 1,
                    "result": 1
                },
                "param_2": {
                    "arg2": 7,
                    "context": 1,
                    "data": 1,
                    "input_2": 1,
                    "input_buffer": 2,
                    "input_file": 1,
                    "output_buffer": 1,
                    "param2": 12,
                    "param_2": 1,
                    "size": 1,
                    "symbol": 1,
                    "type": 1
                },
                "param_3": {
                    "arg3": 6,
                    "data": 2,
                    "debug_info": 2,
                    "debug_info_ptr": 1,
                    "entry": 1,
                    "entry_data": 1,
                    "info_pointer": 1,
                    "info_ptr": 2,
                    "input_3": 1,
                    "param3": 12,
                    "symbol_index": 1
                },
                "puVar4": {
                    "current": 3,
                    "current_entry": 2,
                    "current_item": 2,
                    "current_param": 2,
                    "current_parameter": 1,
                    "current_pointer": 1,
                    "current_var1": 1,
                    "param_list": 1,
                    "parameter": 2,
                    "parameter_list": 2,
                    "parameter_list_ptr": 1,
                    "pointer1": 1,
                    "pointer_var1": 1,
                    "pointer_variable1": 1,
                    "pointer_variable4": 1,
                    "ptr1": 6,
                    "ptr_var1": 2
                },
                "puVar5": {
                    "block_list": 1,
                    "current_block": 3,
                    "current_list": 1,
                    "current_var2": 1,
                    "entry_ptr": 1,
                    "function": 2,
                    "function_block": 1,
                    "function_block_list": 1,
                    "function_entry": 1,
                    "function_ptr": 1,
                    "head": 1,
                    "next": 2,
                    "next_item": 1,
                    "pointer2": 1,
                    "pointer_array": 1,
                    "pointer_var2": 1,
                    "pointer_variable2": 1,
                    "pointer_variable5": 1,
                    "ptr2": 6,
                    "ptr_var2": 2
                },
                "stab_end_function_lto_priv_0": {
                    "end_function": 4,
                    "end_function_info": 1,
                    "end_function_private": 1,
                    "stab_end_function_lto_priv": 1,
                    "translate_end_function": 1
                },
                "stab_float_constant_lto_priv_0": {
                    "float_constant": 2,
                    "float_constant_private": 1,
                    "get_float_constant_info": 1,
                    "process_float_constant": 1,
                    "stab_float_constant_lto_priv": 1,
                    "translate_float_constant": 1,
                    "write_float_constant": 1
                },
                "stab_function_parameter_lto_priv_0": {
                    "function_parameter": 2,
                    "function_parameter_info": 1,
                    "function_parameter_private": 1,
                    "process_function_parameter": 1,
                    "stab_function_parameter_lto_priv": 1,
                    "translate_function_parameter": 1,
                    "write_function_parameter": 1
                },
                "stab_int_constant_lto_priv_0": {
                    "get_int_constant_info": 1,
                    "int_constant": 2,
                    "int_constant_private": 1,
                    "process_int_constant": 1,
                    "stab_int_constant_lto_priv": 1,
                    "translate_int_constant": 1,
                    "write_int_constant": 1
                },
                "stab_start_function_lto_priv_0": {
                    "stab_start_function_lto_priv": 1,
                    "start_function": 4,
                    "start_function_info": 1,
                    "start_function_private": 1,
                    "translate_start_function": 1
                },
                "stab_tag_lto_priv_0": {
                    "get_tag_info": 1,
                    "process_tag": 2,
                    "stab_tag_lto_priv": 1,
                    "tag_private": 1,
                    "tag_type": 1,
                    "translate_tag": 1,
                    "write_tag": 1
                },
                "stab_typdef_lto_priv_0": {
                    "define_type": 1,
                    "get_typedef_info": 1,
                    "process_typedef": 2,
                    "stab_typedef_lto_priv": 1,
                    "translate_type_def": 1,
                    "typedef_private": 1,
                    "write_typedef": 1
                },
                "stab_typed_constant_lto_priv_0": {
                    "get_typed_constant_info": 1,
                    "process_typed_constant": 1,
                    "stab_typed_constant_lto_priv": 1,
                    "translate_typed_constant": 1,
                    "typed_constant": 2,
                    "typed_constant_private": 1,
                    "write_typed_constant": 1
                },
                "stab_variable_lto_priv_0": {
                    "declare_variable": 1,
                    "get_variable_info": 1,
                    "process_variable": 2,
                    "stab_variable_lto_priv": 1,
                    "translate_variable": 1,
                    "variable_private": 1,
                    "write_variable": 1
                },
                "uVar3": {
                    "output": 2,
                    "result": 11,
                    "return_value": 16,
                    "variable3": 1
                },
                "undefined4": {
                    "undefined4": 1
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_001040a0",
                "FUN_0010e6a8",
                "FUN_0010e7c2",
                "FUN_00112c1f",
                "FUN_0010e918",
                "FUN_0010e9a0",
                "FUN_0010e8a9",
                "FUN_00108f05",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_00113a4d",
                "FUN_0010ebb0"
            ],
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "code": "\nunundefined8 process_debug_info_001135a5(unundefined8 param1,unundefined8 param2,long param3)\n\n{\n  int index;\n  char result;\n  unundefined8 return_value;\n  unundefined8 *ptr1;\n  unundefined8 *ptr2;\n  \n  if (6 < *(uint *)(param3 + 0x14)) {\n                    \n    abort_function();\n  }\n  switch(*(undefined4 *)(param3 + 0x14)) {\n  case 0:\n    result = write_type(param1,param2,*(unundefined8 *)(param3 + 0x20),param3);\n    if (result != '\\0') {\n      return_value = process_typedef(param2,*(unundefined8 *)(param3 + 8));\n      return return_value;\n    }\n    break;\n  case 1:\n    result = write_type(param1,param2,*(unundefined8 *)(param3 + 0x20),param3);\n    if (result != '\\0') {\n      return_value = process_tag(param2,*(unundefined8 *)(param3 + 8));\n      return return_value;\n    }\n    break;\n  case 2:\n    result = write_type\n                      (param1,param2,*(unundefined8 *)(*(long *)(param3 + 0x20) + 8),0);\n    if (result != '\\0') {\n      return_value = process_variable\n                        (param2,*(unundefined8 *)(param3 + 8),**(undefined4 **)(param3 + 0x20),\n                         *(unundefined8 *)(*(undefined4 **)(param3 + 0x20) + 4));\n      return return_value;\n    }\n    break;\n  case 3:\n    ptr2 = *(unundefined8 **)(param3 + 0x20);\n    index = *(int *)(param3 + 0x18);\n    return_value = *(unundefined8 *)(param3 + 8);\n    result = write_line_numbers(param1,param2,*(unundefined8 *)(ptr2[2] + 0x18));\n    if (((result != '\\0') &&\n        (result = write_type(param1,param2,*ptr2,0), result != '\\0')) &&\n       (result = start_function(param2,return_value,index == 2), result != '\\0')) {\n      for (ptr1 = (unundefined8 *)ptr2[1]; ptr1 != (unundefined8 *)0x0;\n          ptr1 = (unundefined8 *)*ptr1) {\n        result = write_type(param1,param2,ptr1[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = function_parameter(param2,ptr1[1],*(undefined4 *)(ptr1 + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      ptr2 = (unundefined8 *)ptr2[2];\n      while( true ) {\n        if (ptr2 == (unundefined8 *)0x0) {\n          return_value = end_function(param2);\n          return return_value;\n        }\n        result = write_block(param1,param2,ptr2);\n        if (result == '\\0') break;\n        ptr2 = (unundefined8 *)*ptr2;\n      }\n    }\n    break;\n  case 4:\n    return_value = int_constant\n                      (param2,*(unundefined8 *)(param3 + 8),*(unundefined8 *)(param3 + 0x20));\n    return return_value;\n  case 5:\n    return_value = float_constant\n                      (*(unundefined8 *)(param3 + 0x20),param2,*(unundefined8 *)(param3 + 8));\n    return return_value;\n  case 6:\n    result = write_type(param1,param2,**(unundefined8 **)(param3 + 0x20),0);\n    if (result != '\\0') {\n      return_value = typed_constant\n                        (param2,*(unundefined8 *)(param3 + 8),\n                         *(unundefined8 *)(*(long *)(param3 + 0x20) + 8));\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_debug_info_001135a5",
            "entrypoint": "0x001135a5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001135a5": "process_debug_info_001135a5",
                "abort": "abort_function",
                "cVar2": "result",
                "debug_write_block_constprop_0": "write_block",
                "debug_write_linenos_constprop_0": "write_line_numbers",
                "debug_write_type_constprop_0": "write_type",
                "defined8": "undefined8",
                "iVar1": "index",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar4": "ptr1",
                "puVar5": "ptr2",
                "stab_end_function_lto_priv_0": "end_function",
                "stab_float_constant_lto_priv_0": "float_constant",
                "stab_function_parameter_lto_priv_0": "function_parameter",
                "stab_int_constant_lto_priv_0": "int_constant",
                "stab_start_function_lto_priv_0": "start_function",
                "stab_tag_lto_priv_0": "process_tag",
                "stab_typdef_lto_priv_0": "process_typedef",
                "stab_typed_constant_lto_priv_0": "typed_constant",
                "stab_variable_lto_priv_0": "process_variable",
                "uVar3": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011378f": {
            "additional_data": {
                "FUN_0011378f": {
                    "extract_and_improve_binary": 1,
                    "extract_and_process_binary_data": 1,
                    "extract_and_update_symbols": 1,
                    "extract_function_information": 1,
                    "extract_symbol_data": 1,
                    "generate_debug_symbols": 1,
                    "process_binary": 1,
                    "reconstruct_and_write_debug_symbols": 1
                },
                "__dest": {
                    "dest": 6,
                    "dest_ptr": 2,
                    "destination": 13,
                    "destination_string": 3,
                    "destination_var": 1,
                    "temp_dest": 2,
                    "var_dest": 1
                },
                "auVar1": {
                    "aux_var_1": 1,
                    "auxiliary_variable": 2,
                    "temp1": 1,
                    "temp_array": 17,
                    "temp_buffer": 2,
                    "temp_buffer1": 1,
                    "temp_var": 2,
                    "temporary_var_1": 1,
                    "var_au": 1,
                    "variable_16": 1
                },
                "bVar12": {
                    "boolean_flag": 1,
                    "byte_val": 1,
                    "byte_value": 2,
                    "byte_var": 6,
                    "condition": 1,
                    "flag": 13,
                    "is_initialized": 1,
                    "temp_byte": 3,
                    "var_b": 1,
                    "variable_15": 1
                },
                "cVar2": {
                    "char_value": 1,
                    "char_var": 6,
                    "flag": 1,
                    "result": 11,
                    "status": 5,
                    "success": 1,
                    "temp_char": 3,
                    "var_c": 1
                },
                "lVar7": {
                    "counter": 2,
                    "index": 5,
                    "iter": 1,
                    "long_value": 1,
                    "long_var": 1,
                    "loop_counter": 7,
                    "loop_index": 1,
                    "loop_var": 5,
                    "loop_variable": 3,
                    "temp_long": 3,
                    "var_l": 1
                },
                "local_1e8": {
                    "arr": 1,
                    "array": 3,
                    "array1": 1,
                    "array_1": 2,
                    "array_variable": 1,
                    "buffer1": 1,
                    "data_array": 1,
                    "enum_array": 1,
                    "local_array": 1,
                    "local_array2": 1,
                    "local_array3": 2,
                    "local_array_2": 1,
                    "local_array_3": 2,
                    "local_buffer3": 1,
                    "local_var_9": 1,
                    "local_var_array": 1,
                    "stab_buf": 1,
                    "symbol_array_2": 1,
                    "symbol_table_array": 1,
                    "temp_array": 1,
                    "temp_array_2": 1,
                    "temp_undefined_array_3": 1,
                    "var_array": 2,
                    "var_local_8": 1,
                    "variable_array": 1
                },
                "local_1f0": {
                    "boolean_flag_1": 1,
                    "enum_value_3": 1,
                    "flag3": 1,
                    "flag_5": 1,
                    "local_value_6": 1,
                    "local_var3": 1,
                    "local_var5": 1,
                    "local_var6": 1,
                    "local_var7": 1,
                    "local_var_5": 1,
                    "local_var_7": 1,
                    "local_var_8": 2,
                    "local_variable6": 1,
                    "start_line": 1,
                    "temp_undefined_5": 1,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "value6": 1,
                    "value7": 1,
                    "value_5": 1,
                    "var10": 1,
                    "var7": 2,
                    "var_1f0": 1,
                    "var_7": 1,
                    "var_local_7": 1,
                    "variable2": 1,
                    "variable3": 1,
                    "variable_7": 1,
                    "variable_9": 1
                },
                "local_1f8": {
                    "enum_value_2": 1,
                    "flag2": 1,
                    "flag_4": 1,
                    "local_value_5": 1,
                    "local_var2": 1,
                    "local_var4": 1,
                    "local_var5": 1,
                    "local_var6": 1,
                    "local_var_4": 1,
                    "local_var_6": 1,
                    "local_var_7": 2,
                    "local_variable5": 1,
                    "loop_counter_1": 1,
                    "output_section": 1,
                    "temp_long_4": 1,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "value2": 1,
                    "value5": 1,
                    "value6": 1,
                    "value_4": 1,
                    "var6": 2,
                    "var9": 1,
                    "var_1f8": 1,
                    "var_6": 1,
                    "var_local_6": 1,
                    "variable2": 1,
                    "variable_6": 1,
                    "variable_8": 1
                },
                "local_220": {
                    "array2": 1,
                    "buffer": 1,
                    "buffer2": 1,
                    "hash_table": 2,
                    "hash_table_1": 1,
                    "hash_table_2": 1,
                    "local_array1": 1,
                    "local_array2": 2,
                    "local_array_1": 1,
                    "local_array_2": 2,
                    "local_buffer": 1,
                    "local_buffer2": 1,
                    "local_var4": 1,
                    "local_var_6": 1,
                    "local_variable_2": 1,
                    "name_hash_table": 1,
                    "source_string": 1,
                    "string_array": 1,
                    "string_buffer": 1,
                    "string_variable": 1,
                    "temp3": 1,
                    "temp_array1": 1,
                    "temp_array3": 1,
                    "temp_array_3": 1,
                    "temp_buffer_1": 1,
                    "temp_undefined_array_2": 1,
                    "temporary_buffer": 1,
                    "var_local_5": 1
                },
                "local_228": {
                    "compilation_unit": 1,
                    "compilation_unit_data": 1,
                    "constant": 1,
                    "enum_value_1": 1,
                    "flag1": 1,
                    "input_section": 1,
                    "local_param": 1,
                    "local_var": 1,
                    "local_var3": 2,
                    "local_var5": 1,
                    "local_var_3": 1,
                    "local_var_4": 1,
                    "local_var_5": 1,
                    "local_var_6": 1,
                    "local_variable4": 1,
                    "symbol_table": 1,
                    "temp_output": 1,
                    "temp_var2": 1,
                    "value1": 1,
                    "value5": 1,
                    "value_3": 1,
                    "var5": 2,
                    "var8": 1,
                    "var_228": 1,
                    "var_5": 1,
                    "var_local_4": 1,
                    "variable1": 1,
                    "variable_5": 1,
                    "variable_6": 1
                },
                "local_238": {
                    "array": 1,
                    "array1": 1,
                    "aux_buf": 1,
                    "buffer": 2,
                    "hash_table_1": 1,
                    "local_array": 3,
                    "local_array1": 1,
                    "local_buffer1": 1,
                    "local_var2": 1,
                    "local_var_2": 1,
                    "local_var_5": 1,
                    "local_variable_1": 1,
                    "name_buffer": 1,
                    "temp2": 1,
                    "temp_array2": 2,
                    "temp_array_2": 3,
                    "temp_buffer": 3,
                    "temp_undefined_array": 1,
                    "temp_variable": 1,
                    "value_2": 1,
                    "var5": 1,
                    "var_local_3": 1,
                    "variable_5": 1
                },
                "local_248": {
                    "counter": 1,
                    "flag_1": 1,
                    "local_int": 1,
                    "local_value": 1,
                    "local_var1": 2,
                    "local_var2": 1,
                    "local_var_1": 2,
                    "local_var_2": 1,
                    "local_var_3": 1,
                    "local_variable3": 1,
                    "symbol_counter": 1,
                    "symbol_type": 1,
                    "table_init_result": 1,
                    "temp_undefined_4": 1,
                    "temp_var1": 1,
                    "value1": 3,
                    "value_1": 1,
                    "var1": 3,
                    "var4": 1,
                    "var_1": 1,
                    "var_248": 1,
                    "var_local_2": 1,
                    "variable1": 1,
                    "variable_1": 2
                },
                "local_250": {
                    "allocated_array": 1,
                    "allocated_buffer": 1,
                    "allocated_mem": 2,
                    "allocated_memory": 3,
                    "allocated_memory_size": 1,
                    "buf_size": 1,
                    "buffer_len": 1,
                    "buffer_size": 4,
                    "local_long": 1,
                    "local_long_value": 1,
                    "local_size": 2,
                    "local_var1": 1,
                    "local_var_1": 1,
                    "local_var_2": 1,
                    "local_variable2": 1,
                    "memory_allocation_1": 1,
                    "memory_size": 2,
                    "output_buffer": 1,
                    "symbol_buffer": 1,
                    "symbol_data_buffer": 1,
                    "temp_long_2": 1,
                    "var_local_1": 1,
                    "xmalloc_result": 1
                },
                "local_258": {
                    "bfd_handle": 1,
                    "bfd_handler": 1,
                    "buffer_ptr1": 1,
                    "file_data_ptr": 1,
                    "file_hash_table": 1,
                    "hash_table": 1,
                    "hash_table_1": 1,
                    "input_array1_copy": 1,
                    "input_array_ptr": 1,
                    "input_data": 1,
                    "input_data_ptr": 2,
                    "input_param_1": 1,
                    "input_ptr": 1,
                    "input_ptr_3": 1,
                    "local_pointer": 1,
                    "local_ptr": 2,
                    "local_ptr1": 1,
                    "local_ptr_1": 2,
                    "local_var_1": 1,
                    "local_variable1": 1,
                    "output_ptr": 1,
                    "output_ptr_temp": 1,
                    "param1_ptr": 1,
                    "param_1": 1,
                    "param_1_copy": 1,
                    "symbol_table": 1,
                    "table_array1": 1,
                    "var_local_ptr_1": 1
                },
                "local_58": {
                    "enum_value_7": 1,
                    "error_code_2": 1,
                    "flag6": 1,
                    "flag_7": 1,
                    "local_value_10": 1,
                    "local_var11": 2,
                    "local_var8": 1,
                    "local_var_11": 2,
                    "local_var_14": 1,
                    "local_var_8": 1,
                    "local_variable9": 1,
                    "stab_buf_5": 1,
                    "temp_undefined_7": 1,
                    "temp_var5": 1,
                    "temp_var8": 1,
                    "value10": 1,
                    "value11": 1,
                    "value5": 1,
                    "value_9": 1,
                    "var11": 2,
                    "var14": 1,
                    "var_10": 1,
                    "var_58": 1,
                    "var_local_12": 1,
                    "variable6": 1,
                    "variable_11": 1,
                    "variable_13": 1
                },
                "local_60": {
                    "enum_value_6": 1,
                    "error_code_1": 1,
                    "flag5": 1,
                    "flag_6": 1,
                    "local_value_9": 1,
                    "local_var10": 2,
                    "local_var5": 1,
                    "local_var7": 1,
                    "local_var_10": 2,
                    "local_var_13": 1,
                    "local_var_7": 1,
                    "local_variable8": 1,
                    "stab_buf_4": 1,
                    "temp_undefined_6": 1,
                    "temp_var4": 1,
                    "temp_var7": 1,
                    "value10": 1,
                    "value4": 1,
                    "value9": 1,
                    "value_8": 1,
                    "var10": 2,
                    "var13": 1,
                    "var_60": 1,
                    "var_9": 1,
                    "var_local_11": 1,
                    "variable5": 1,
                    "variable_10": 1,
                    "variable_12": 1
                },
                "local_68": {
                    "end_line": 1,
                    "enum_value_5": 1,
                    "flag4": 1,
                    "index": 1,
                    "local_value_8": 1,
                    "local_var4": 1,
                    "local_var6": 1,
                    "local_var9": 2,
                    "local_var_12": 1,
                    "local_var_6": 1,
                    "local_var_9": 2,
                    "local_variable7": 1,
                    "symbol_index": 1,
                    "temp_output_3": 1,
                    "temp_var3": 1,
                    "temp_var6": 1,
                    "value3": 1,
                    "value8": 1,
                    "value9": 1,
                    "value_7": 1,
                    "var12": 1,
                    "var9": 2,
                    "var_68": 1,
                    "var_8": 1,
                    "variable4": 1,
                    "variable_11": 1,
                    "variable_9": 1
                },
                "local_78": {
                    "array3": 1,
                    "array4": 1,
                    "array_3": 1,
                    "buffer3": 2,
                    "buffer4": 1,
                    "enum_value_4": 1,
                    "local_array4": 1,
                    "local_array5": 2,
                    "local_array_4": 1,
                    "local_array_5": 2,
                    "local_buffer5": 1,
                    "local_var8": 1,
                    "local_var_11": 1,
                    "offsets": 1,
                    "second_buffer": 1,
                    "stab_buf_2": 1,
                    "temp5": 1,
                    "temp_array5": 1,
                    "temp_array_5": 1,
                    "temp_buffer3": 1,
                    "temp_buffer_3": 1,
                    "temp_undefined_array_5": 1,
                    "temp_variable": 1,
                    "temp_variable_2": 1,
                    "var_78": 1,
                    "var_local_10": 1
                },
                "local_a0": {
                    "array2": 1,
                    "array3": 1,
                    "array_2": 1,
                    "buffer": 1,
                    "buffer2": 2,
                    "buffer3": 1,
                    "buffer_2": 1,
                    "hash_table_2": 1,
                    "local_array": 1,
                    "local_array3": 1,
                    "local_array4": 2,
                    "local_array_3": 1,
                    "local_array_4": 2,
                    "local_buffer4": 1,
                    "local_var7": 1,
                    "local_var_10": 1,
                    "local_variable": 1,
                    "local_variable_3": 1,
                    "name_buffer_1": 1,
                    "string_array_2": 1,
                    "symbol_buf": 1,
                    "temp4": 1,
                    "temp_array4": 1,
                    "temp_array_4": 1,
                    "temp_buffer2": 1,
                    "temp_buffer_2": 1,
                    "temp_undefined_array_4": 1,
                    "var_local_9": 1
                },
                "param_1": {
                    "array_ptr": 1,
                    "buffer1": 1,
                    "file_data": 1,
                    "input": 1,
                    "input1": 2,
                    "input_1": 2,
                    "input_array": 1,
                    "input_array1": 1,
                    "input_data": 1,
                    "input_param1": 1,
                    "input_param_1": 3,
                    "input_ptr": 2,
                    "input_ptr1": 1,
                    "input_ptr_1": 1,
                    "output": 1,
                    "output_buffer": 1,
                    "output_file": 1,
                    "output_param_1": 1,
                    "output_ptr": 2,
                    "output_symbols": 1,
                    "param_ptr_1": 1,
                    "source_files": 1,
                    "symbol_table": 3
                },
                "param_2": {
                    "buffer2": 1,
                    "compilation_data": 1,
                    "compilation_unit": 2,
                    "count": 1,
                    "count_ptr": 1,
                    "counter_ptr": 1,
                    "file_info": 1,
                    "input2": 2,
                    "input_2": 2,
                    "input_array2": 1,
                    "input_buffer": 1,
                    "input_param2": 1,
                    "input_param_2": 3,
                    "input_ptr2": 1,
                    "input_ptr_2": 1,
                    "output": 1,
                    "output_array": 1,
                    "output_data": 1,
                    "output_param_2": 1,
                    "output_ptr": 2,
                    "param_ptr_2": 1,
                    "stat": 1,
                    "stats": 1,
                    "stats_ptr": 1,
                    "symbol_data": 1
                },
                "param_3": {
                    "address": 1,
                    "allocation_size_ptr": 1,
                    "buffer3": 1,
                    "buffer_ptr": 1,
                    "buffer_size": 1,
                    "data_ptr": 1,
                    "debug_symbols_addr": 1,
                    "file_offset": 1,
                    "file_size": 1,
                    "input3": 1,
                    "input_param_3": 1,
                    "memory_alloc": 1,
                    "output1": 1,
                    "output_1": 3,
                    "output_array1": 1,
                    "output_data": 1,
                    "output_length": 2,
                    "output_param1": 1,
                    "output_param_1": 2,
                    "output_param_3": 1,
                    "output_ptr": 1,
                    "output_ptr1": 1,
                    "output_ptr_1": 1,
                    "output_symbols_size": 1,
                    "param_ptr_3": 1,
                    "result_ptr": 1,
                    "symbol_table": 1
                },
                "param_4": {
                    "buffer4": 1,
                    "debug_info": 1,
                    "hash_table1": 1,
                    "input4": 1,
                    "input_param_4": 1,
                    "output2": 1,
                    "output_2": 3,
                    "output_array2": 1,
                    "output_param2": 1,
                    "output_param_2": 2,
                    "output_param_4": 1,
                    "output_ptr2": 1,
                    "output_ptr_2": 1,
                    "param_4": 1,
                    "param_ptr_4": 1,
                    "ptr1": 1,
                    "ptr_1": 1,
                    "result_ptr": 1,
                    "string_array_1": 1,
                    "strtab_addr": 1,
                    "symbol_data": 1,
                    "symbol_offset": 1,
                    "symbol_table": 3,
                    "temp_ptr": 1,
                    "temp_var1": 1,
                    "var1": 1
                },
                "param_5": {
                    "buffer5": 1,
                    "debug_info": 1,
                    "hash_table2": 1,
                    "input5": 1,
                    "input_param_5": 1,
                    "output3": 1,
                    "output_3": 3,
                    "output_array3": 1,
                    "output_param3": 1,
                    "output_param_3": 2,
                    "output_param_5": 1,
                    "output_ptr3": 1,
                    "output_ptr_3": 1,
                    "output_symbols": 1,
                    "param_5": 1,
                    "param_ptr_5": 1,
                    "ptr2": 1,
                    "ptr_2": 1,
                    "source_file_names": 1,
                    "source_files": 2,
                    "string_array_2": 1,
                    "string_data": 1,
                    "strings_ptr": 2,
                    "strtab_len": 1,
                    "temp_var2": 1,
                    "var2": 1
                },
                "param_6": {
                    "buffer6": 1,
                    "compilation_unit": 1,
                    "compilation_unit_count": 1,
                    "compilation_units": 1,
                    "debug_info": 1,
                    "error": 1,
                    "flag_ptr": 2,
                    "input6": 1,
                    "input_param_6": 1,
                    "num_source_files": 1,
                    "output4": 1,
                    "output_4": 3,
                    "output_array4": 1,
                    "output_count": 1,
                    "output_param4": 1,
                    "output_param_4": 2,
                    "output_param_6": 1,
                    "output_ptr4": 1,
                    "output_ptr_4": 1,
                    "output_sections": 1,
                    "output_size": 1,
                    "param_6": 1,
                    "param_ptr_6": 1,
                    "ptr_3": 1,
                    "result_ptr": 1,
                    "temp_var3": 1,
                    "var3": 1
                },
                "plVar11": {
                    "compilation_unit_data": 1,
                    "list_ptr": 1,
                    "long_pointer": 1,
                    "long_ptr": 1,
                    "loop_ptr": 1,
                    "loop_ptr3": 1,
                    "pointer": 2,
                    "pointer3": 1,
                    "pointer_3": 2,
                    "pointer_long_value": 1,
                    "pointer_to_long": 1,
                    "pointer_var_5": 1,
                    "pointer_variable_5": 1,
                    "ptr11": 1,
                    "ptr4": 1,
                    "ptr5": 1,
                    "ptr_4": 1,
                    "ptr_var_11": 1,
                    "source_array": 1,
                    "source_file": 2,
                    "source_pointer": 1,
                    "temp_long_ptr": 2,
                    "temp_ptr4": 1,
                    "temp_ptr5": 1,
                    "temp_ptr_4": 1,
                    "var_pl": 1
                },
                "puVar10": {
                    "compilation_unit": 1,
                    "outer_pointer": 1,
                    "pointer": 1,
                    "pointer2": 1,
                    "pointer_2": 1,
                    "pointer_value_3": 1,
                    "pointer_var_4": 1,
                    "pointer_variable_4": 1,
                    "ptr10": 1,
                    "ptr3": 1,
                    "ptr4": 1,
                    "ptr_3": 1,
                    "ptr_ptr": 1,
                    "ptr_temp": 1,
                    "ptr_var_10": 1,
                    "temp_ptr2": 1,
                    "temp_ptr3": 1,
                    "temp_ptr4": 1,
                    "temp_ptr_3": 1,
                    "temp_ptr_4": 1,
                    "var_pu4": 1
                },
                "puVar5": {
                    "allocated_memory": 2,
                    "buffer": 2,
                    "buffer_ptr_temp": 1,
                    "dynamic_memory": 1,
                    "new_symbol": 1,
                    "pointer": 1,
                    "pointer_value": 1,
                    "pointer_var_1": 1,
                    "pointer_variable": 1,
                    "ptr": 5,
                    "ptr1": 1,
                    "ptr5": 1,
                    "ptr_var_5": 1,
                    "temp_pointer": 3,
                    "temp_ptr": 6,
                    "temp_ptr_1": 1,
                    "var_pu": 1
                },
                "puVar8": {
                    "array_ptr": 1,
                    "inner_pointer": 1,
                    "iterator": 1,
                    "list_element": 1,
                    "loop_ptr": 1,
                    "pointer": 3,
                    "pointer_1": 1,
                    "pointer_value_2": 1,
                    "pointer_var_2": 1,
                    "pointer_variable_2": 1,
                    "ptr": 1,
                    "ptr2": 3,
                    "ptr8": 1,
                    "ptr_2": 1,
                    "ptr_var": 1,
                    "ptr_var_8": 1,
                    "source_file": 1,
                    "symbol": 1,
                    "symbol_ptr": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 2,
                    "temp_ptr_2": 3,
                    "var_pu2": 1
                },
                "puVar9": {
                    "arr_ptr": 1,
                    "array_pointer": 1,
                    "array_ptr": 3,
                    "array_ptr2": 1,
                    "local_array": 1,
                    "loop_ptr2": 1,
                    "pointer": 1,
                    "pointer_2": 1,
                    "pointer_array": 2,
                    "pointer_var_3": 1,
                    "pointer_variable_3": 1,
                    "ptr3": 2,
                    "ptr9": 1,
                    "ptr_1": 1,
                    "ptr_array": 1,
                    "ptr_var_9": 1,
                    "stab_array": 1,
                    "symbol_array": 1,
                    "symbol_data": 1,
                    "symbol_ptr_array": 1,
                    "symbol_table_entry": 1,
                    "temp_ptr3": 1,
                    "temp_ptr_3": 2,
                    "temp_ptr_array": 1,
                    "var_pu3": 1
                },
                "sVar6": {
                    "length": 7,
                    "length_of_string": 1,
                    "size": 2,
                    "size_val": 1,
                    "size_value": 1,
                    "size_var": 1,
                    "str_len": 2,
                    "str_length": 4,
                    "string_length": 8,
                    "temp_size": 2,
                    "var_s": 1
                },
                "uStack_23c": {
                    "flag_3": 1,
                    "local_value_4": 1,
                    "local_var4": 1,
                    "local_var_4": 1,
                    "local_var_5": 1,
                    "stack_var3": 1,
                    "stack_var_3": 1,
                    "string_hash_index": 1,
                    "symbol_alignment": 1,
                    "temp_undefined_40": 1,
                    "temp_var3": 1,
                    "u_stack_var3": 1,
                    "value4": 3,
                    "var4": 3,
                    "var7": 1,
                    "var_23c": 1,
                    "var_4": 1,
                    "var_u_stack_3": 1,
                    "variable_4": 2
                },
                "uStack_240": {
                    "local_value_3": 1,
                    "local_var3": 1,
                    "local_var_3": 1,
                    "local_var_4": 1,
                    "size": 1,
                    "stack_var2": 1,
                    "stack_var_2": 1,
                    "string_hash_value": 1,
                    "symbol_limit": 1,
                    "temp_undefined_41": 1,
                    "temp_var2": 1,
                    "u_stack_var2": 1,
                    "value3": 3,
                    "var3": 3,
                    "var6": 1,
                    "var_240": 1,
                    "var_3": 1,
                    "var_u_stack_2": 1,
                    "variable_3": 2
                },
                "uStack_244": {
                    "flag_2": 1,
                    "local_value_2": 1,
                    "local_var2": 1,
                    "local_var_2": 1,
                    "local_var_3": 1,
                    "stack_var1": 1,
                    "stack_var_1": 1,
                    "symbol_size": 1,
                    "symbol_value": 1,
                    "temp_undefined_42": 1,
                    "temp_var1": 1,
                    "u_stack_var1": 1,
                    "value2": 3,
                    "var2": 3,
                    "var5": 1,
                    "var_2": 1,
                    "var_244": 1,
                    "var_u_stack_1": 1,
                    "variable_2": 2
                },
                "uStack_4c": {
                    "enum_value_10": 1,
                    "error_code_5": 1,
                    "flag_10": 1,
                    "local_value_13": 1,
                    "local_var14": 1,
                    "local_var_14": 1,
                    "stab_buf_8": 1,
                    "stack_var7": 1,
                    "stack_var_4": 1,
                    "stack_var_7": 1,
                    "stack_variable4": 1,
                    "temp_undefined_10": 1,
                    "temp_var11": 1,
                    "temp_var7": 1,
                    "temp_var8": 1,
                    "u_stack_var7": 1,
                    "u_stack_var_4": 1,
                    "value13": 1,
                    "value14": 1,
                    "value8": 2,
                    "value_12": 1,
                    "var14": 2,
                    "var17": 1,
                    "var_13": 1,
                    "var_4c": 1,
                    "var_u_stack_8": 1,
                    "variable_14": 1,
                    "variable_16": 1
                },
                "uStack_50": {
                    "enum_value_9": 1,
                    "error_code_4": 1,
                    "flag_9": 1,
                    "local_value_12": 1,
                    "local_var13": 1,
                    "local_var_13": 1,
                    "stab_buf_7": 1,
                    "stack_var6": 1,
                    "stack_var_3": 1,
                    "stack_var_6": 1,
                    "stack_variable3": 1,
                    "temp_undefined_9": 1,
                    "temp_var10": 1,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "u_stack_var6": 1,
                    "u_stack_var_3": 1,
                    "value12": 1,
                    "value13": 1,
                    "value7": 2,
                    "value_11": 1,
                    "var13": 2,
                    "var16": 1,
                    "var_12": 1,
                    "var_50": 1,
                    "var_u_stack_7": 1,
                    "variable_13": 1,
                    "variable_15": 1
                },
                "uStack_54": {
                    "enum_value_8": 1,
                    "error_code_3": 1,
                    "flag_8": 1,
                    "local_value_11": 1,
                    "local_var12": 1,
                    "local_var_12": 1,
                    "stab_buf_6": 1,
                    "stack_var5": 1,
                    "stack_var_2": 1,
                    "stack_var_5": 1,
                    "stack_variable2": 1,
                    "temp_undefined_8": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_var9": 1,
                    "u_stack_var5": 1,
                    "u_stack_var_2": 1,
                    "value11": 1,
                    "value12": 1,
                    "value6": 2,
                    "value_10": 1,
                    "var12": 2,
                    "var15": 1,
                    "var_11": 1,
                    "var_54": 1,
                    "var_u_stack_6": 1,
                    "variable_12": 1,
                    "variable_14": 1
                },
                "uStack_68": {
                    "var_u_stack_5": 1
                },
                "uStack_70": {
                    "local_value_7": 1,
                    "local_var8": 1,
                    "local_var_8": 1,
                    "result_variable_2": 1,
                    "stab_buf_3": 1,
                    "stack_var4": 1,
                    "stack_var_1": 1,
                    "stack_var_4": 1,
                    "stack_variable1": 1,
                    "temp_data": 1,
                    "temp_offset": 1,
                    "temp_output_2": 1,
                    "temp_value": 2,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_variable_1": 1,
                    "u_stack_var": 1,
                    "u_stack_var4": 1,
                    "value5": 1,
                    "value7": 1,
                    "value8": 1,
                    "value_6": 1,
                    "var11": 1,
                    "var8": 2,
                    "var_70": 1,
                    "var_u_stack_4": 1,
                    "variable_10": 1,
                    "variable_8": 1
                },
                "uVar3": {
                    "error": 1,
                    "error_code": 17,
                    "error_num": 1,
                    "result": 6,
                    "return_value": 3,
                    "undefined4_var": 1,
                    "var_u": 1
                },
                "uVar4": {
                    "bfd_error_msg": 1,
                    "errmsg": 2,
                    "error_message": 16,
                    "error_msg": 5,
                    "result_msg": 1,
                    "temp_ud": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "undefined8_var": 1,
                    "var_u2": 1
                },
                "unique0x100000e9": {
                    "temp_unique_1": 1,
                    "unique_value_1": 3
                },
                "unique0x100000ed": {
                    "temp_unique_2": 1,
                    "unique_value_2": 3
                },
                "unique0x100000f1": {
                    "unique_value_3": 1
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_00104270",
                "FUN_0010e451",
                "FUN_001135a5",
                "FUN_00104370",
                "FUN_00104100",
                "FUN_0010e439",
                "FUN_0010e2f0",
                "FUN_0010bb52",
                "FUN_001047a0",
                "FUN_00104830",
                "FUN_00119ed0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nundefined4\nextract_and_process_binary_data_0011378f(undefined8 *symbol_table,undefined8 *input_param_2,long *output_1,undefined8 *symbol_table,\n            undefined8 *output_3,undefined8 *output_4)\n\n{\n  undefined temp_array [16];\n  char result;\n  undefined4 error_code;\n  undefined8 error_message;\n  undefined *temp_ptr;\n  size_t string_length;\n  long loop_counter;\n  undefined8 *pointer;\n  undefined4 *array_ptr;\n  char *destination;\n  undefined8 *temp_ptr3;\n  long *temp_long_ptr;\n  byte flag;\n  undefined8 *input_data_ptr;\n  long buffer_size;\n  undefined4 var1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 var4;\n  undefined temp_buffer [16];\n  undefined8 var5;\n  undefined hash_table [40];\n  undefined8 local_var_7;\n  undefined8 local_var_8;\n  undefined4 array [82];\n  undefined local_array4 [40];\n  undefined local_array5 [8];\n  undefined8 var8;\n  undefined8 local_var_9;\n  undefined4 var10;\n  undefined4 local_var_11;\n  undefined4 var12;\n  undefined4 var13;\n  undefined4 value8;\n  \n  flag = 0;\n  var1 = 0;\n  value2 = 0;\n  value3 = 500;\n  var4 = 0;\n  input_data_ptr = symbol_table;\n  buffer_size = xmalloc(500);\n  var5 = 1;\n  temp_buffer = ZEXT816(0);\n  result = bfd_hash_table_init(hash_table,string_hash_newfunc_lto_priv_0,0x30);\n  if ((result == '\\0') ||\n     (result = bfd_hash_table_init(local_array4,string_hash_newfunc_lto_priv_0,0x30), result == '\\0')) {\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    non_fatal(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    local_var_7 = 0;\n    unique_value_1 = 0xffffffff;\n    local_array5 = (undefined  [8])0xffffffffffffffff;\n    unique_value_2 = 0xffffffff;\n    array_ptr = array;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *array_ptr = 0;\n      array_ptr = array_ptr + (ulong)flag * -2 + 1;\n    }\n    local_var_9 = 0;\n    var10 = 0;\n    local_var_8 = 1;\n    local_var_11 = 0;\n    var12 = 0;\n    var13 = 0xffffffff;\n    value8 = 0xffffffff;\n    result = stab_write_symbol_lto_priv_0(&input_data_ptr,0,0,0,0);\n    temp_array = _local_array5;\n    if (result != '\\0') {\n      local_array5._4_4_ = value2;\n      local_array5._0_4_ = var1;\n      var8 = temp_array._8_8_;\n      result = stab_write_symbol_lto_priv_0(&input_data_ptr,100,0,0,*symbol_table);\n      if (result != '\\0') {\n        *(int *)(input_param_2 + 6) = *(int *)(input_param_2 + 6) + 1;\n        input_param_2[10] = 0;\n        temp_ptr3 = (undefined8 *)*input_param_2;\n        *(undefined4 *)(input_param_2 + 7) = *(undefined4 *)((long)input_param_2 + 0x34);\n        for (; temp_ptr3 != (undefined8 *)0x0; temp_ptr3 = (undefined8 *)*temp_ptr3) {\n          input_param_2[8] = temp_ptr3[2];\n          *(undefined4 *)(input_param_2 + 9) = 0;\n          result = stab_start_compilation_unit_lto_priv_0(&input_data_ptr,*(undefined8 *)(temp_ptr3[1] + 8))\n          ;\n          if (result == '\\0') {\n            return 0;\n          }\n          temp_long_ptr = (long *)temp_ptr3[1];\n          if (temp_long_ptr != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)temp_long_ptr[2] != (undefined8 *)0x0) {\n                for (pointer = *(undefined8 **)(undefined8 *)temp_long_ptr[2]; pointer != (undefined8 *)0x0;\n                    pointer = (undefined8 *)*pointer) {\n                  result = debug_write_name_constprop_0(input_param_2,&input_data_ptr);\n                  if (result == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              temp_long_ptr = (long *)*temp_long_ptr;\n              if (temp_long_ptr == (long *)0x0) break;\n              result = stab_start_source_lto_priv_0(&input_data_ptr,temp_long_ptr[1]);\n              if (result == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result = debug_write_linenos_constprop_0(input_param_2,&input_data_ptr,0xffffffffffffffff);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(value8,var13) == -1) &&\n           (error_code = stab_write_symbol_lto_priv_0(&input_data_ptr,100,0,local_var_9,0), (char)error_code != '\\0'))\n        {\n          (**(code **)(symbol_table[1] + 0x50))(var5,buffer_size + 8);\n          *output_1 = buffer_size;\n          *symbol_table = CONCAT44(value2,var1);\n          *output_4 = var5;\n          temp_ptr = (undefined *)xmalloc();\n          *temp_ptr = 0;\n          destination = temp_ptr + 1;\n          *output_3 = temp_ptr;\n          for (loop_counter = temp_buffer._0_8_; loop_counter != 0; loop_counter = *(long *)(loop_counter + 0x18)) {\n            strcpy(destination,*(char **)(loop_counter + 8));\n            string_length = strlen(destination);\n            destination = destination + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "extract_and_process_binary_data_0011378f",
            "entrypoint": "0x0011378f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011378f": "extract_and_process_binary_data_0011378f",
                "__dest": "destination",
                "auVar1": "temp_array",
                "bVar12": "flag",
                "cVar2": "result",
                "lVar7": "loop_counter",
                "local_1e8": "array",
                "local_1f0": "local_var_8",
                "local_1f8": "local_var_7",
                "local_220": "hash_table",
                "local_228": "var5",
                "local_238": "temp_buffer",
                "local_248": "var1",
                "local_250": "buffer_size",
                "local_258": "input_data_ptr",
                "local_58": "local_var_11",
                "local_60": "var10",
                "local_68": "local_var_9",
                "local_78": "local_array5",
                "local_a0": "local_array4",
                "param_1": "symbol_table",
                "param_2": "input_param_2",
                "param_3": "output_1",
                "param_4": "symbol_table",
                "param_5": "output_3",
                "param_6": "output_4",
                "plVar11": "temp_long_ptr",
                "puVar10": "temp_ptr3",
                "puVar5": "temp_ptr",
                "puVar8": "pointer",
                "puVar9": "array_ptr",
                "sVar6": "string_length",
                "uStack_23c": "var4",
                "uStack_240": "value3",
                "uStack_244": "value2",
                "uStack_4c": "value8",
                "uStack_50": "var13",
                "uStack_54": "var12",
                "uStack_70": "var8",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "unique0x100000e9": "unique_value_1",
                "unique0x100000ed": "unique_value_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113a4d": {
            "additional_data": {
                "FUN_00113a4d": {
                    "process_block": 1,
                    "process_debug_and_write_info": 1,
                    "process_debug_blocks": 1,
                    "process_debug_data": 5,
                    "process_debug_info": 8,
                    "process_debug_info_001135a5": 1,
                    "process_debug_information": 1,
                    "process_debug_symbols": 7,
                    "process_debugging_information": 1,
                    "process_function": 1,
                    "traverse_debug_info": 2,
                    "write_debug_symbols": 1
                },
                "auVar4": {
                    "auxiliary_var": 1,
                    "block_info": 1,
                    "block_result": 1,
                    "debug_info": 2,
                    "debug_write_result": 1,
                    "info": 3,
                    "info_array": 1,
                    "info_buffer": 1,
                    "is_write_linenos_successful": 1,
                    "line_result": 1,
                    "result_array": 1,
                    "update_info": 11,
                    "variable": 1,
                    "write_result": 4
                },
                "cVar1": {
                    "condition_result": 1,
                    "condition_variable": 1,
                    "debug_written": 1,
                    "flag": 3,
                    "is_debug": 1,
                    "is_debug_write_successful": 1,
                    "result": 22,
                    "status": 1
                },
                "check_conditions_and_update_00112502": {
                    "check_and_update": 2,
                    "check_and_update_conditions": 4,
                    "check_conditions_and_update": 3
                },
                "debug_write_linenos_constprop_0": {
                    "check_and_write_linenos": 1,
                    "check_conditions_and_update": 1,
                    "check_conditions_and_update_00112502": 2,
                    "write_debug_linenos": 1,
                    "write_line_numbers": 1,
                    "write_linenos_constprop": 1
                },
                "debug_write_linenos_constprop_0_": {
                    "write_line_numbers_": 1
                },
                "debug_write_name_constprop_0": {
                    "process_data": 1,
                    "process_debug_info_001135a5": 1,
                    "update_info_and_write_symbol_0010ed2c": 1,
                    "write_debug_name": 1,
                    "write_name": 2,
                    "write_name_constprop": 1
                },
                "input": {
                    "threshold": 1
                },
                "param_1": {
                    "arg1": 2,
                    "data_ptr": 1,
                    "input_1": 7,
                    "input_data": 1,
                    "input_param": 3,
                    "input_param1": 1,
                    "input_param_1": 4,
                    "input_symbol": 1,
                    "output_stream": 2,
                    "param1": 1,
                    "param_1": 3,
                    "param_a": 4
                },
                "param_2": {
                    "arg2": 2,
                    "debug_param": 1,
                    "input_2": 7,
                    "input_param2": 1,
                    "input_param_2": 4,
                    "input_stream": 1,
                    "output_param": 2,
                    "output_symbol": 1,
                    "param2": 1,
                    "param_2": 3,
                    "param_a": 1,
                    "param_b": 4,
                    "param_ptr": 1,
                    "version": 1
                },
                "param_3": {
                    "arg3": 2,
                    "block": 1,
                    "data": 5,
                    "data_index": 2,
                    "data_param": 3,
                    "data_pointer": 1,
                    "info": 1,
                    "info_ptr": 1,
                    "input_param3": 1,
                    "input_param_3": 4,
                    "param3": 1,
                    "param_3": 2,
                    "param_c": 4,
                    "symbol_data": 1,
                    "symbol_info": 1
                },
                "param_4": {
                    "arg4": 2,
                    "index": 1,
                    "index_param": 3,
                    "input_3": 1,
                    "input_4": 2,
                    "input_param4": 1,
                    "input_param_4": 4,
                    "param4": 1,
                    "param_4": 4,
                    "param_a": 6,
                    "param_b": 1,
                    "param_d": 4
                },
                "param_5": {
                    "arg5": 2,
                    "input_5": 2,
                    "input_param5": 1,
                    "input_param_5": 4,
                    "param5": 1,
                    "param_4_1": 1,
                    "param_5": 4,
                    "param_a": 1,
                    "param_b": 6,
                    "param_c": 1,
                    "param_e": 4,
                    "size_param": 1,
                    "threshold_param": 2
                },
                "process_data_0010ec73": {
                    "process_data": 11
                },
                "process_debug_info_001135a5": {
                    "process_debug_info": 10,
                    "process_debug_info_internal": 1
                },
                "puVar3": {
                    "current_data": 1,
                    "current_node": 1,
                    "current_pointer": 1,
                    "current_ptr": 2,
                    "data_ptr": 1,
                    "debug_ptr": 1,
                    "debug_symbol": 1,
                    "iterator": 1,
                    "pointer": 5,
                    "ptr": 14,
                    "ptr_iterator": 1,
                    "symbol_ptr": 2
                },
                "stab_end_block_lto_priv_0": {
                    "end_block": 1,
                    "end_block_lto": 1,
                    "end_block_lto_priv": 1,
                    "end_lto_block": 1,
                    "update_info_and_write_symbol": 1,
                    "update_info_and_write_symbol_0010ed2c": 1
                },
                "stab_start_block_lto_priv_0": {
                    "check_conditions_and_update_2": 1,
                    "process_data_0010ec73": 2,
                    "start_block": 1,
                    "start_block_lto": 1,
                    "start_block_lto_priv": 1,
                    "start_lto_block": 1
                },
                "uVar2": {
                    "func_result": 1,
                    "output": 6,
                    "output_value": 1,
                    "result": 10,
                    "result_2": 1,
                    "return_value": 11,
                    "value": 1
                },
                "update_info_and_write_symbol_0010ed2c": {
                    "update_and_write_symbol": 2,
                    "update_and_write_symbol_info": 1,
                    "update_info_and_write_symbol": 8
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_0010ec73",
                "FUN_00113a4d",
                "FUN_0010ed2c",
                "FUN_001135a5"
            ],
            "calling": [
                "FUN_00113a4d",
                "FUN_001135a5"
            ],
            "code": "\nundefined8\nprocess_debug_info_001135a5_00113a4d(undefined8 input_1,undefined8 input_2,long data,undefined8 param_a,\n            undefined8 param_b)\n\n{\n  char result;\n  undefined8 return_value;\n  undefined8 *ptr;\n  undefined update_info [16];\n  \n  result = check_conditions_and_update_00112502(input_1,input_2,*(undefined8 *)(data + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(data + 0x28) == 0 && (*(long *)(data + 8) != 0)) ||\n      (result = process_data_0010ec73(input_2,*(undefined8 *)(data + 0x18)), result != '\\0'))\n     )) {\n    if (*(undefined8 **)(data + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(data + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = write_name(input_1,input_2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(data + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = process_debug_info_001135a5_00113a4d(input_1,input_2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    update_info = check_conditions_and_update_00112502(input_1,input_2,*(undefined8 *)(data + 0x20));\n    if (update_info[0] != '\\0') {\n      if ((*(long *)(data + 0x28) == 0) && (*(long *)(data + 8) != 0)) {\n        return update_info._0_8_;\n      }\n      return_value = end_block_lto\n                        (input_2,*(undefined8 *)(data + 0x20),update_info._8_8_,param_b);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_debug_info_001135a5_00113a4d",
            "entrypoint": "0x00113a4d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113a4d": "process_debug_info_001135a5_00113a4d",
                "auVar4": "update_info",
                "cVar1": "result",
                "debug_write_linenos_constprop_0": "check_conditions_and_update_00112502",
                "debug_write_name_constprop_0": "write_name",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "data",
                "param_4": "param_a",
                "param_5": "param_b",
                "puVar3": "ptr",
                "stab_end_block_lto_priv_0": "end_block_lto",
                "stab_start_block_lto_priv_0": "process_data_0010ec73",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b1e": {
            "additional_data": {
                "FUN_00113b1e": {
                    "decode_parameter": 1,
                    "decode_value": 1,
                    "extract_data_from_binary": 1,
                    "extract_real_type": 14,
                    "extract_real_type_from_binary": 1,
                    "extract_value_from_debug_type": 1,
                    "get_param_value": 1,
                    "get_real_type": 2,
                    "get_real_type_information": 1,
                    "get_real_type_value": 3,
                    "reverse_get_debug_type": 1
                },
                "auVar1": {
                    "decoded_value": 1,
                    "default_output": 2,
                    "default_result": 2,
                    "default_value": 1,
                    "final_output": 1,
                    "output": 2,
                    "output1": 1,
                    "output_2": 1,
                    "output_var": 1,
                    "output_variable": 1,
                    "result": 4,
                    "result_default_value": 1,
                    "result_not_found": 1,
                    "result_zero": 1,
                    "return_value1": 1,
                    "temp_result": 1,
                    "zero_result": 1
                },
                "auVar4": {
                    "decoded_value": 1,
                    "extracted_value": 1,
                    "modified_output": 1,
                    "modified_result": 2,
                    "new_result": 2,
                    "output": 2,
                    "output2": 1,
                    "output_value": 1,
                    "output_var": 1,
                    "result": 14,
                    "result_additional_value": 1,
                    "result_nonzero": 1,
                    "result_variable": 1,
                    "return_value2": 1,
                    "updated_result": 1
                },
                "param_1": {
                    "binary_address": 1,
                    "input_1": 1,
                    "input_address": 1,
                    "input_param": 7,
                    "input_param1": 1,
                    "input_pointer": 2,
                    "input_ptr": 2,
                    "input_value": 10,
                    "param": 1,
                    "type_address": 2,
                    "type_ptr": 1,
                    "value": 1,
                    "value_ptr": 1
                },
                "param_2": {
                    "data_address": 1,
                    "debug_info": 2,
                    "debugging_param": 1,
                    "dummy": 1,
                    "ignored_param": 1,
                    "input_2": 1,
                    "input_param2": 1,
                    "output_param": 1,
                    "output_ptr": 1,
                    "param_2": 3,
                    "real_type_address": 1,
                    "size": 1,
                    "temp_param": 1,
                    "unneeded_param": 1,
                    "unused": 3,
                    "unused_param": 9,
                    "unused_parameter": 2
                },
                "param_3": {
                    "additional_param": 2,
                    "data_param": 1,
                    "data_size": 1,
                    "data_value": 1,
                    "default_value": 7,
                    "input_3": 1,
                    "input_param3": 1,
                    "input_value": 2,
                    "output_param": 3,
                    "output_value": 5,
                    "param_3": 1,
                    "ptr_value": 1,
                    "result_address": 1,
                    "size": 1,
                    "type_id": 1,
                    "upper_bits": 1,
                    "value1": 1
                },
                "param_4": {
                    "additional_data": 1,
                    "additional_value": 2,
                    "auxiliary_param": 1,
                    "constant_value": 2,
                    "data_value": 1,
                    "default_value": 1,
                    "extra_value": 1,
                    "fallback_value": 1,
                    "initial_value": 1,
                    "input_4": 1,
                    "input_param4": 1,
                    "input_value": 1,
                    "output_param": 1,
                    "output_pointer": 1,
                    "output_value": 2,
                    "param_4": 1,
                    "result": 1,
                    "result_param": 1,
                    "result_ptr": 1,
                    "secondary_data_param": 1,
                    "unknown_value": 1,
                    "unused": 2,
                    "unused_param": 1,
                    "unused_param_2": 1,
                    "value": 2,
                    "value2": 1
                },
                "piVar2": {
                    "debug_type_info": 1,
                    "debug_type_ptr": 1,
                    "real_type": 8,
                    "real_type_info": 1,
                    "real_type_pointer": 1,
                    "real_type_ptr": 13,
                    "type_info": 3,
                    "type_info_ptr": 1,
                    "type_ptr": 2
                },
                "uVar3": {
                    "extracted_value": 5,
                    "real_data": 1,
                    "real_type": 2,
                    "real_type_value": 4,
                    "real_value": 5,
                    "result": 9,
                    "type_value": 2,
                    "value": 2,
                    "value_ptr": 1
                }
            },
            "called": [
                "FUN_00112b6e"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559"
            ],
            "code": "\nundefined  [16] extract_real_type_from_binary_00113b1e(long input_value,undefined8 unused_param,ulong default_value,undefined8 output_value)\n\n{\n  undefined result [16];\n  int *real_type_ptr;\n  undefined8 result;\n  undefined result [16];\n  \n  if (input_value != 0) {\n    real_type_ptr = (int *)debug_get_real_type_isra_0(input_value,0);\n    if ((real_type_ptr == (int *)0x0) || (3 < *real_type_ptr - 7U)) {\n      result = 0;\n    }\n    else {\n      result = **(undefined8 **)(real_type_ptr + 4);\n    }\n    result._8_8_ = output_value;\n    result._0_8_ = result;\n    return result;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = default_value;\n  return result << 0x40;\n}\n\n",
            "current_name": "extract_real_type_from_binary_00113b1e",
            "entrypoint": "0x00113b1e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b1e": "extract_real_type_from_binary_00113b1e",
                "auVar1": "result",
                "auVar4": "result",
                "param_1": "input_value",
                "param_2": "unused_param",
                "param_3": "default_value",
                "param_4": "output_value",
                "piVar2": "real_type_ptr",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b4a": {
            "additional_data": {
                "0": {
                    "null_pointer": 1
                },
                "0x10": {
                    "offset": 1
                },
                "0x15": {
                    "constant_value": 2,
                    "type_constant": 1
                },
                "FUN_00112904": {
                    "initialize_data": 1,
                    "initialize_debug": 1,
                    "initialize_instance": 1,
                    "set_debug_info": 1,
                    "set_debug_info_properties": 1,
                    "set_debug_type": 1,
                    "set_initial_values": 1
                },
                "FUN_00113b4a": {
                    "create_const_type_instance": 1,
                    "create_constprop_type": 1,
                    "create_debug_type": 1,
                    "create_type_constprop": 1,
                    "create_type_constprop_0": 1,
                    "extract_and_return_value": 1,
                    "extract_constant_type": 1,
                    "extract_debug_info": 1,
                    "extract_debug_type": 1,
                    "extract_parameter": 2,
                    "initialize_const_prop_with_param": 1,
                    "initialize_const_property": 1,
                    "initialize_debug_type": 5,
                    "initialize_object_type": 1,
                    "initialize_type": 5,
                    "initialize_type_with_value": 1,
                    "initialize_with_type": 1,
                    "make_constprop_0": 1,
                    "process_param": 1,
                    "reverse_and_initialize": 1,
                    "set_debug_type_with_parameter": 1
                },
                "debug_make_type_constprop_0": {
                    "create_constprop": 1,
                    "create_debug_type": 1,
                    "create_type_constprop": 1
                },
                "lVar1": {
                    "const_prop_result": 1,
                    "constant_property": 1,
                    "debug_info": 1,
                    "debug_type": 5,
                    "debug_type_pointer": 1,
                    "instance": 1,
                    "object_pointer": 1,
                    "result": 7,
                    "result_value": 1,
                    "type_const": 1,
                    "type_constprop": 1,
                    "type_constprop_ptr": 1,
                    "type_object": 1,
                    "type_pointer": 7
                },
                "param_1": {
                    "input": 2,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_value": 23,
                    "object_size": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_debug_type_00113b4a(long input_value)\n\n{\n  long result;\n  \n  if (input_value != 0) {\n    result = create_constprop(0x15,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input_value;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_debug_type_00113b4a",
            "entrypoint": "0x00113b4a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b4a": "initialize_debug_type_00113b4a",
                "debug_make_type_constprop_0": "create_constprop",
                "lVar1": "result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b71": {
            "additional_data": {
                "0x10": {
                    "type_constprop_offset": 1
                },
                "0x14": {
                    "type_constprop_size": 1
                },
                "FUN_00112904": {
                    "debug_make_type_constprop_0": 1,
                    "initialize_const": 1,
                    "initialize_constant": 1,
                    "initialize_constprop_object": 1,
                    "initialize_debug_struct": 1,
                    "initialize_debug_type": 1,
                    "initialize_type_object": 1
                },
                "FUN_00113b71": {
                    "convert_to_debug_type": 1,
                    "create_constprop_object": 1,
                    "create_debug_type": 1,
                    "create_type": 1,
                    "create_type_constprop": 1,
                    "extract_debug_type": 1,
                    "extract_param": 4,
                    "extract_param_address": 1,
                    "extract_param_as_constprop": 1,
                    "extract_param_from_debug": 1,
                    "extract_parameter": 2,
                    "extract_parameter_to_constprop": 1,
                    "extract_parameter_value": 2,
                    "initialize_data": 2,
                    "initialize_debug_struct": 1,
                    "initialize_debug_type": 3,
                    "initialize_type": 4,
                    "reverse_and_initialize": 1,
                    "set_param_in_debug_struct": 1,
                    "transform_data": 1
                },
                "debug_make_type_constprop_0": {
                    "create_new_object": 1,
                    "make_type_constprop": 1
                },
                "lVar1": {
                    "allocated_memory": 1,
                    "constprop_object": 1,
                    "debug_ptr": 1,
                    "debug_struct": 1,
                    "debug_struct_ptr": 1,
                    "debug_type": 3,
                    "debug_type_pointer": 2,
                    "debug_type_ptr": 1,
                    "extracted_value": 1,
                    "new_data": 1,
                    "new_type_ptr": 1,
                    "new_var": 1,
                    "output_value": 1,
                    "pointer_to_constant": 1,
                    "result": 5,
                    "type": 1,
                    "type_const": 2,
                    "type_constant_ptr": 1,
                    "type_constprop": 1,
                    "type_object": 1,
                    "type_pointer": 2,
                    "type_ptr": 1
                },
                "param_1": {
                    "address": 1,
                    "input": 3,
                    "input_data": 2,
                    "input_param": 4,
                    "input_value": 14,
                    "original_param": 1,
                    "param_1": 1,
                    "value": 4,
                    "value_1": 1
                },
                "param_2": {
                    "param_2": 1,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_debug_type_00113b71(long input_value)\n\n{\n  long result;\n  \n  if (input_value != 0) {\n    result = make_type_constprop(0x14,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input_value;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_debug_type_00113b71",
            "entrypoint": "0x00113b71",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b71": "initialize_debug_type_00113b71",
                "debug_make_type_constprop_0": "make_type_constprop",
                "lVar1": "result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b98": {
            "additional_data": {
                "FUN_00113b98": {
                    "allocate_and_initialize": 3,
                    "create_and_assign_data_to_struct": 1,
                    "create_and_initialize_object": 1,
                    "create_and_store_object": 1,
                    "create_data_structure": 3,
                    "create_debug_type": 9,
                    "create_debug_type_constprop_object": 1,
                    "create_debugger_variable": 1,
                    "create_new_object": 1,
                    "create_object": 1,
                    "create_object_type": 1,
                    "create_type": 1,
                    "create_type_and_allocate_memory": 1,
                    "create_type_and_initialize": 1,
                    "create_type_object": 1,
                    "extract_information": 1,
                    "initialize_data_structure": 2,
                    "initialize_debug_type": 1
                },
                "debug_make_type_constprop_0": {
                    "debug_make_type": 1,
                    "get_type_id": 1
                },
                "lVar1": {
                    "allocated_pointer": 1,
                    "debug_type": 11,
                    "debug_type_constprop": 1,
                    "debug_type_constprop_object": 1,
                    "debugger_variable": 1,
                    "new_debug_type": 1,
                    "object_address": 1,
                    "object_pointer": 1,
                    "object_ptr": 1,
                    "object_type": 1,
                    "result": 1,
                    "type": 1,
                    "type_const": 1,
                    "type_const_value": 1,
                    "type_id": 1,
                    "type_object": 1,
                    "type_pointer": 1,
                    "type_ptr": 3,
                    "type_result": 1
                },
                "param_1": {
                    "data1": 1,
                    "input1": 7,
                    "input_1": 2,
                    "input_a": 1,
                    "input_data": 1,
                    "input_param": 4,
                    "input_param1": 2,
                    "input_param_1": 1,
                    "input_value": 4,
                    "input_value1": 2,
                    "input_value_1": 1,
                    "object_id": 1,
                    "type_id": 1,
                    "value1": 3
                },
                "param_2": {
                    "data2": 1,
                    "input2": 7,
                    "input_2": 2,
                    "input_b": 1,
                    "input_param2": 2,
                    "input_param_2": 1,
                    "input_value2": 2,
                    "input_value_2": 1,
                    "param2": 5,
                    "param_2": 2,
                    "parameter_1": 1,
                    "size_param": 2,
                    "value2": 3,
                    "value_2": 1
                },
                "param_3": {
                    "count_param": 1,
                    "data3": 1,
                    "input3": 7,
                    "input_3": 2,
                    "input_c": 1,
                    "input_param3": 2,
                    "input_param_3": 1,
                    "input_value3": 2,
                    "input_value_3": 1,
                    "param3": 5,
                    "param_3": 2,
                    "parameter_2": 1,
                    "position_param": 1,
                    "value3": 3,
                    "value_3": 1
                },
                "param_4": {
                    "data4": 1,
                    "flag_param": 1,
                    "input4": 7,
                    "input_4": 1,
                    "input_d": 1,
                    "input_param4": 2,
                    "input_value4": 2,
                    "input_value_4": 1,
                    "param4": 5,
                    "param_4": 2,
                    "parameter_3": 1,
                    "undefined_param": 3,
                    "value4": 3,
                    "value_4": 1
                },
                "plVar2": {
                    "allocated_memory": 7,
                    "allocated_object": 1,
                    "allocated_pointer": 2,
                    "allocated_struct": 1,
                    "data_ptr": 1,
                    "data_structure": 1,
                    "debug_data": 1,
                    "debug_pointer": 3,
                    "debug_ptr": 2,
                    "debug_type_pointer": 1,
                    "dynamic_array": 1,
                    "dynamic_object_pointer": 1,
                    "new_data_structure": 1,
                    "new_memory_block": 1,
                    "new_object": 3,
                    "new_object_ptr": 1,
                    "new_pointer": 1,
                    "object_ptr": 1,
                    "type_data": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nlong create_debug_type_constprop_object_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long debug_type;\n  long *allocated_memory;\n  \n  if ((input1 != 0) && (debug_type = debug_make_type(0x13,0), debug_type != 0)) {\n    allocated_memory = (long *)allocate_memory(0x20);\n    *(undefined4 *)((long)allocated_memory + 0x19) = 0;\n    *allocated_memory = input1;\n    *(undefined4 *)((long)allocated_memory + 0x1c) = 0;\n    allocated_memory[1] = input2;\n    allocated_memory[2] = input3;\n    *(undefined *)(allocated_memory + 3) = input4;\n    *(long **)(debug_type + 0x10) = allocated_memory;\n    return debug_type;\n  }\n  return 0;\n}\n\n",
            "current_name": "create_debug_type_constprop_object_00113b98",
            "entrypoint": "0x00113b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b98": "create_debug_type_constprop_object_00113b98",
                "debug_make_type_constprop_0": "debug_make_type",
                "lVar1": "debug_type",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113bfa": {
            "additional_data": {
                "FUN_00113bfa": {
                    "allocate_and_initialize": 1,
                    "create_and_store": 1,
                    "create_and_store_debug_type": 1,
                    "create_and_store_object": 3,
                    "create_data_structure": 3,
                    "create_debug_const": 1,
                    "create_debug_object": 3,
                    "create_debug_type": 5,
                    "create_debug_type_entry": 1,
                    "create_new_entry": 1,
                    "create_new_object": 1,
                    "create_object": 3,
                    "create_object_from_params": 1,
                    "create_type": 2,
                    "create_type_and_store_in_debug": 1,
                    "create_type_in_debug": 1,
                    "create_type_object": 1,
                    "create_type_with_params": 1
                },
                "lVar1": {
                    "allocated_memory": 1,
                    "data_structure": 1,
                    "debug_const": 1,
                    "debug_object": 2,
                    "debug_object_ptr": 1,
                    "debug_type": 4,
                    "debug_type_result": 1,
                    "object_address": 1,
                    "object_handle": 1,
                    "object_pointer": 1,
                    "object_ptr": 2,
                    "object_type": 2,
                    "result": 1,
                    "type": 2,
                    "type_const": 2,
                    "type_const_result": 1,
                    "type_constant": 1,
                    "type_entry": 1,
                    "type_helper": 1,
                    "type_object": 1,
                    "type_ptr": 1,
                    "type_result": 2
                },
                "param_1": {
                    "data_1": 2,
                    "first_param": 1,
                    "input1": 2,
                    "input_1": 6,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_param_1": 3,
                    "input_value1": 3,
                    "object_id": 1,
                    "object_param1": 1,
                    "object_parameter_1": 1,
                    "object_value_1": 1,
                    "source_address": 1,
                    "value1": 5,
                    "value_1": 2
                },
                "param_2": {
                    "data_2": 2,
                    "destination_address": 1,
                    "input2": 2,
                    "input_2": 6,
                    "input_param2": 1,
                    "input_param_2": 3,
                    "input_value2": 3,
                    "object_param2": 1,
                    "object_parameter_2": 1,
                    "object_value_2": 1,
                    "output_param": 1,
                    "property_value": 1,
                    "second_param": 1,
                    "value2": 5,
                    "value_2": 2
                },
                "plVar2": {
                    "allocated_data": 2,
                    "allocated_memory": 2,
                    "allocated_pointer": 1,
                    "allocated_ptr": 1,
                    "debug_data": 1,
                    "debug_entry": 1,
                    "debug_object": 1,
                    "debug_object_ptr": 1,
                    "debug_pointer": 1,
                    "debug_type_pointer": 1,
                    "debug_type_ptr": 1,
                    "dynamic_array": 3,
                    "memory_ptr": 1,
                    "new_entry": 1,
                    "new_object": 3,
                    "new_object_pointer": 1,
                    "object": 1,
                    "object_array": 1,
                    "object_array_ptr": 1,
                    "pointer_to_values": 1,
                    "ptr": 1,
                    "ptr_data": 1,
                    "ptr_debug_type": 1,
                    "ptr_to_allocated_memory": 1,
                    "type_ptr": 1
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nlong create_type_and_store_in_debug_00113bfa(long input_1,long input_2)\n\n{\n  long debug_type;\n  long *dynamic_array;\n  \n  if (((input_1 != 0) && (input_2 != 0)) &&\n     (debug_type = debug_make_type_constprop_0(0x12,0), debug_type != 0)) {\n    dynamic_array = (long *)xmalloc(0x10);\n    *dynamic_array = input_1;\n    dynamic_array[1] = input_2;\n    *(long **)(debug_type + 0x10) = dynamic_array;\n    return debug_type;\n  }\n  return 0;\n}\n\n",
            "current_name": "create_type_and_store_in_debug_00113bfa",
            "entrypoint": "0x00113bfa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113bfa": "create_type_and_store_in_debug_00113bfa",
                "lVar1": "debug_type",
                "param_1": "input_1",
                "param_2": "input_2",
                "plVar2": "dynamic_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113c43": {
            "additional_data": {
                "FUN_00113c43": {
                    "allocate_and_initialize_data_structure": 1,
                    "create_and_initialize_object": 1,
                    "create_data_structure": 2,
                    "create_debug_data": 1,
                    "create_debug_data_type": 1,
                    "create_debug_object": 1,
                    "create_debug_type": 2,
                    "create_new_item": 1,
                    "create_object": 1,
                    "create_type_constprop": 1,
                    "extract_data": 1,
                    "extract_data_from_binary": 1,
                    "initialize_data": 1,
                    "initialize_data_object": 1,
                    "initialize_data_struct": 1,
                    "initialize_data_structure": 6,
                    "initialize_data_structures": 1,
                    "initialize_struct": 1,
                    "initialize_structure": 1,
                    "parse_data": 1,
                    "process_parameters": 1
                },
                "auVar3": {
                    "output": 1,
                    "output_data": 1,
                    "result": 12,
                    "result_data": 1,
                    "return_value": 12
                },
                "debug_make_type_constprop_0": {
                    "create_data_structure": 1
                },
                "lVar1": {
                    "allocated_memory": 1,
                    "data_object_ptr": 1,
                    "data_ptr": 1,
                    "data_structure_ptr": 1,
                    "data_type": 2,
                    "debug_data_ptr": 1,
                    "debug_object": 1,
                    "debug_type_result": 1,
                    "item_ptr": 1,
                    "object_address": 1,
                    "object_ptr": 1,
                    "output_variable_1": 1,
                    "result": 5,
                    "structure_ptr": 1,
                    "type": 1,
                    "type_const": 2,
                    "type_const_var": 1,
                    "type_constant": 2,
                    "type_constprop_result": 1,
                    "type_index": 1,
                    "type_pointer": 2,
                    "type_ptr": 2
                },
                "param_1": {
                    "data1": 2,
                    "data_param_1": 1,
                    "data_size": 1,
                    "input1": 9,
                    "input_1": 4,
                    "input_param1": 7,
                    "input_param_1": 3,
                    "item_id": 1,
                    "object_id": 1,
                    "value1": 2
                },
                "param_2": {
                    "data2": 2,
                    "data_param_2": 1,
                    "data_ptr": 1,
                    "input2": 9,
                    "input_2": 4,
                    "input_param2": 7,
                    "input_param_2": 3,
                    "quantity": 1,
                    "value": 1,
                    "value2": 2
                },
                "param_3": {
                    "arg1": 1,
                    "data3": 2,
                    "data_param_3": 1,
                    "input3": 9,
                    "input_3": 4,
                    "input_param3": 7,
                    "input_param_3": 3,
                    "param_3": 1,
                    "price": 1,
                    "value3": 2
                },
                "param_4": {
                    "arg2": 1,
                    "data4": 2,
                    "data_param_4": 1,
                    "discount": 1,
                    "input4": 9,
                    "input_4": 4,
                    "input_param4": 7,
                    "input_param_4": 3,
                    "param_4": 1,
                    "value4": 2
                },
                "param_5": {
                    "arg3": 1,
                    "data5": 1,
                    "data_param_5": 1,
                    "input5": 9,
                    "input_5": 4,
                    "input_param5": 6,
                    "input_param_5": 3,
                    "param5": 1,
                    "param_5": 1,
                    "type": 1,
                    "undefined_param": 1,
                    "value5": 2
                },
                "param_6": {
                    "data6": 1,
                    "data_param_6": 1,
                    "input6": 9,
                    "input_6": 4,
                    "input_param6": 6,
                    "input_param_6": 3,
                    "metadata": 1,
                    "param6": 2,
                    "param_6": 1,
                    "result": 1,
                    "value6": 2
                },
                "plVar2": {
                    "allocated_data": 1,
                    "allocated_memory": 10,
                    "allocated_memory_ptr": 1,
                    "allocated_ptr": 1,
                    "data": 2,
                    "data_array_ptr": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_structure": 1,
                    "data_structure_ptr": 1,
                    "debug_object_ptr": 1,
                    "dynamic_array": 1,
                    "dynamic_array_pointer": 1,
                    "dynamic_data": 1,
                    "new_item": 1,
                    "new_object": 1,
                    "object_data_ptr": 1,
                    "output_variable_2": 1,
                    "pointer_to_allocated_memory": 1,
                    "structure_ptr": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nundefined  [16]\nallocate_and_initialize_data_structure_00113c43(long input1,long input2,long input3,long input4,undefined input5,\n            undefined8 input6)\n\n{\n  long result;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if ((input1 != 0) && (input2 != 0)) {\n    result = create_data_structure(0x10,0);\n    if (result != 0) {\n      allocated_memory = (long *)allocate_memory(0x28);\n      *(undefined4 *)((long)allocated_memory + 0x21) = 0;\n      *allocated_memory = input1;\n      *(undefined4 *)((long)allocated_memory + 0x24) = 0;\n      allocated_memory[1] = input2;\n      allocated_memory[2] = input3;\n      allocated_memory[3] = input4;\n      *(undefined *)(allocated_memory + 4) = input5;\n      *(long **)(result + 0x10) = allocated_memory;\n      goto LAB_00113caa;\n    }\n  }\n  result = 0;\nLAB_00113caa:\n  return_value._8_8_ = input6;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "allocate_and_initialize_data_structure_00113c43",
            "entrypoint": "0x00113c43",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113c43": "allocate_and_initialize_data_structure_00113c43",
                "auVar3": "return_value",
                "debug_make_type_constprop_0": "create_data_structure",
                "lVar1": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113cb9": {
            "additional_data": {
                "0x10": {
                    "offset": 1
                },
                "0xe": {
                    "structure_data": 1
                },
                "DAT_": {
                    "unchanged": 1
                },
                "FUN_00112904": {
                    "initialize_constprop": 1,
                    "initialize_debug": 1,
                    "set_debug_info": 1,
                    "set_debug_struct_values": 1,
                    "set_debug_type": 2,
                    "set_debug_value": 1,
                    "update_type": 1
                },
                "FUN_00113cb9": {
                    "assign_value_to_debug_struct": 1,
                    "convert_to_debug_type": 1,
                    "create_const_type": 1,
                    "create_constprop": 1,
                    "extract_and_assign_value": 1,
                    "extract_constprop_value": 1,
                    "extract_param_to_struct": 1,
                    "extract_parameter_value": 3,
                    "extract_value_from_parameter": 1,
                    "extracted_param": 1,
                    "initialize_debug_type": 5,
                    "initialize_debug_variable": 2,
                    "initialize_type": 4,
                    "make_constprop_0": 1,
                    "map_parameter_value": 1,
                    "process_param": 3,
                    "process_param_and_return": 1,
                    "reverse_and_store_value": 1
                },
                "PTR_": {
                    "unchanged": 1
                },
                "debug_make_type_constprop_0": {
                    "create_struct": 1,
                    "create_type": 1,
                    "initialize_structure": 1
                },
                "fun_00112904": {
                    "set_debug_information": 1
                },
                "lVar1": {
                    "constant_value": 1,
                    "debug_ptr": 1,
                    "debug_result": 2,
                    "debug_struct": 1,
                    "debug_type": 5,
                    "debug_type_object": 1,
                    "debug_type_ptr": 2,
                    "debug_variable": 2,
                    "new_struct": 1,
                    "result": 7,
                    "result_value": 1,
                    "type_const_result": 1,
                    "type_constprop": 2,
                    "type_pointer": 2,
                    "type_ptr": 1
                },
                "param_1": {
                    "input": 1,
                    "input_param": 4,
                    "input_parameter": 1,
                    "input_value": 24,
                    "value": 1
                },
                "param_2": {
                    "unknown_param": 1
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_debug_type_00113cb9(long input_value)\n\n{\n  long result;\n  \n  if (input_value != 0) {\n    result = create_type(0xe,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input_value;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_debug_type_00113cb9",
            "entrypoint": "0x00113cb9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113cb9": "initialize_debug_type_00113cb9",
                "debug_make_type_constprop_0": "create_type",
                "lVar1": "result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113ce0": {
            "additional_data": {
                "FUN_00113ce0": {
                    "allocate_and_initialize_struct": 1,
                    "convert_to_debug_type": 1,
                    "create_debug_instance": 1,
                    "create_debug_type": 5,
                    "create_debug_type_object": 1,
                    "create_new_object": 1,
                    "create_type_instance": 1,
                    "extract_and_store_data": 2,
                    "extract_data": 1,
                    "extract_data_from_binary": 1,
                    "extract_debug_info": 2,
                    "extract_information": 1,
                    "extract_param_info": 1,
                    "extract_params_and_store": 1,
                    "extract_type_info": 1,
                    "process_data": 3,
                    "process_input": 3,
                    "process_parameters": 3
                },
                "auVar3": {
                    "output": 1,
                    "output_data": 1,
                    "output_val": 1,
                    "result": 11,
                    "result_data": 1,
                    "result_value": 1,
                    "return_data": 1,
                    "return_value": 11
                },
                "debug_make_type_constprop_0": {
                    "create_debug_type": 2,
                    "get_type": 1
                },
                "lVar1": {
                    "debug_type": 6,
                    "debug_type_object": 1,
                    "debug_type_ptr": 1,
                    "debug_type_result": 1,
                    "result": 2,
                    "result_1": 1,
                    "type": 1,
                    "type_check_result": 1,
                    "type_code": 1,
                    "type_const": 5,
                    "type_const_prop": 1,
                    "type_constant": 3,
                    "type_id": 2,
                    "type_info": 1,
                    "type_instance": 1,
                    "type_value": 2
                },
                "param_1": {
                    "arg1": 1,
                    "data1": 1,
                    "input1": 1,
                    "input_1": 6,
                    "input_data": 1,
                    "input_num1": 1,
                    "input_param": 2,
                    "input_param1": 4,
                    "input_param_1": 4,
                    "input_parameter1": 1,
                    "input_parameter_1": 1,
                    "input_value": 3,
                    "input_value1": 3,
                    "object_size": 1,
                    "type_info": 1
                },
                "param_2": {
                    "address": 1,
                    "arg2": 1,
                    "data2": 1,
                    "info_length": 1,
                    "input2": 1,
                    "input_2": 6,
                    "input_num2": 1,
                    "input_param2": 4,
                    "input_param_2": 4,
                    "input_parameter2": 1,
                    "input_parameter_2": 1,
                    "input_value2": 3,
                    "object_id": 1,
                    "output_param": 1,
                    "param2": 1,
                    "param_value": 1,
                    "second_param": 1,
                    "secondary_param": 1
                },
                "param_3": {
                    "arg3": 1,
                    "data": 1,
                    "data3": 1,
                    "input3": 1,
                    "input_3": 6,
                    "input_param3": 4,
                    "input_param_3": 3,
                    "input_parameter3": 1,
                    "input_parameter_3": 1,
                    "input_undefined": 2,
                    "input_value3": 3,
                    "object_data": 1,
                    "param3": 1,
                    "third_param": 1,
                    "undefined_param": 3,
                    "undefined_value": 1
                },
                "param_4": {
                    "arg4": 1,
                    "fourth_param": 1,
                    "input4": 1,
                    "input_4": 3,
                    "input_param4": 4,
                    "input_param_4": 4,
                    "input_parameter4": 1,
                    "input_parameter_4": 1,
                    "input_val1": 1,
                    "input_value4": 2,
                    "param4": 3,
                    "param_4": 2,
                    "unused_param": 3,
                    "unused_param1": 1,
                    "unused_param_1": 2,
                    "unused_param_4": 1
                },
                "param_5": {
                    "arg5": 1,
                    "debug_param": 1,
                    "fifth_param": 1,
                    "input5": 1,
                    "input_5": 3,
                    "input_param5": 4,
                    "input_param_5": 4,
                    "input_parameter5": 1,
                    "input_parameter_5": 1,
                    "input_val2": 1,
                    "input_value5": 2,
                    "output_param": 1,
                    "output_value": 2,
                    "param5": 2,
                    "param_5": 1,
                    "result": 1,
                    "unused_param2": 1,
                    "unused_param_2": 2,
                    "unused_param_5": 1
                },
                "plVar2": {
                    "alloc_memory": 1,
                    "allocated_data": 1,
                    "allocated_memory": 14,
                    "allocated_ptr": 1,
                    "data_ptr": 1,
                    "debug_data_ptr": 1,
                    "debug_info": 2,
                    "debug_instance": 1,
                    "debug_ptr": 1,
                    "debug_type_object_ptr": 1,
                    "debug_type_ptr": 1,
                    "new_array": 1,
                    "param_info": 1,
                    "ptr_data": 1,
                    "result_2": 1,
                    "struct_ptr": 1,
                    "type_info_ptr": 1
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nundefined  [16]\ncreate_debug_type_object_00113ce0(long input_1,long input_2,undefined input_3,undefined8 input_param_4,undefined8 input_param_5)\n\n{\n  long debug_type;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if (input_1 != 0) {\n    debug_type = create_debug_type(0xd,0);\n    if (debug_type != 0) {\n      allocated_memory = (long *)allocate_memory(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input_1;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input_2;\n      *(undefined *)(allocated_memory + 2) = input_3;\n      *(long **)(debug_type + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  debug_type = 0;\nLAB_00113d2f:\n  return_value._8_8_ = input_param_5;\n  return_value._0_8_ = debug_type;\n  return return_value;\n}\n\n",
            "current_name": "create_debug_type_object_00113ce0",
            "entrypoint": "0x00113ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113ce0": "create_debug_type_object_00113ce0",
                "auVar3": "return_value",
                "debug_make_type_constprop_0": "create_debug_type",
                "lVar1": "debug_type",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113d3a": {
            "additional_data": {
                "0x10": {
                    "offset_value": 1
                },
                "0xc": {
                    "constant_value": 1
                },
                "FUN_00112904": {
                    "initialize_entry": 1
                },
                "FUN_00113d3a": {
                    "create_new_entry": 1,
                    "extract_data_from_param": 1,
                    "extract_type_from_param": 2,
                    "extract_type_from_parameter": 1,
                    "extract_type_from_pointer": 2,
                    "find_or_create_object": 1,
                    "find_or_create_type": 1,
                    "find_pointer_type": 1,
                    "find_second_pointer": 1,
                    "find_type": 1,
                    "get_constant_type": 1,
                    "get_debug_type": 1,
                    "get_linked_value": 2,
                    "get_object_type": 1,
                    "get_or_create_debug_type": 1,
                    "get_or_create_pointer": 2,
                    "get_or_create_type": 3,
                    "get_pointer_value": 2,
                    "get_value_from_pointer": 1,
                    "initialize_pointer": 1,
                    "initialize_type": 1
                },
                "debug_make_type_constprop_0": {
                    "create_const_type": 2
                },
                "lVar1": {
                    "constant_type": 1,
                    "debug_type_pointer": 1,
                    "existing_pointer": 2,
                    "extracted_type": 1,
                    "linked_value": 2,
                    "new_entry": 1,
                    "object_ptr": 1,
                    "object_type": 1,
                    "output_pointer": 1,
                    "pointer_value": 2,
                    "result": 4,
                    "result_value": 1,
                    "second_pointer": 1,
                    "type": 1,
                    "type_pointer": 3,
                    "type_ptr": 4,
                    "type_value": 1,
                    "value": 1
                },
                "param_1": {
                    "data": 1,
                    "entry_index": 1,
                    "input": 6,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_pointer": 5,
                    "input_ptr": 1,
                    "input_value": 5,
                    "object_address": 1,
                    "object_id": 1,
                    "param": 1,
                    "pointer": 3,
                    "ptr": 2,
                    "type_id": 1
                },
                "param_2": {
                    "unused_param": 1
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nlong get_or_create_debug_type_00113d3a(long input)\n\n{\n  long type_ptr;\n  \n  if (input != 0) {\n    type_ptr = *(long *)(input + 8);\n    if (type_ptr == 0) {\n      type_ptr = create_const_type(0xc,0);\n      if (type_ptr == 0) {\n        type_ptr = 0;\n      }\n      else {\n        *(long *)(type_ptr + 0x10) = input;\n        *(long *)(input + 8) = type_ptr;\n      }\n    }\n    return type_ptr;\n  }\n  return 0;\n}\n\n",
            "current_name": "get_or_create_debug_type_00113d3a",
            "entrypoint": "0x00113d3a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113d3a": "get_or_create_debug_type_00113d3a",
                "debug_make_type_constprop_0": "create_const_type",
                "lVar1": "type_ptr",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113d6e": {
            "additional_data": {
                "FUN_00113d6e": {
                    "allocate_and_store_data": 2,
                    "allocate_and_store_struct": 1,
                    "allocate_and_store_values": 1,
                    "create_and_store_debug_type": 1,
                    "create_and_store_object": 1,
                    "create_and_store_type": 1,
                    "create_and_store_type_object": 1,
                    "create_const_prop_type": 1,
                    "create_const_property": 1,
                    "create_constprop_object": 1,
                    "create_data_structure": 2,
                    "create_debug_type": 5,
                    "create_type": 2,
                    "create_type_constprop": 3,
                    "create_type_object": 1,
                    "create_type_with_value": 1,
                    "initialize_debug_type": 1,
                    "save_debug_info": 1,
                    "store_data": 1,
                    "store_input_values": 1,
                    "store_parameters_in_debug_type": 1,
                    "store_parameters_to_debug_type": 1
                },
                "lVar1": {
                    "const_prop_type": 1,
                    "data_structure": 1,
                    "data_structure_ptr": 1,
                    "debug_info": 1,
                    "debug_result": 1,
                    "debug_type": 6,
                    "debug_type_address": 1,
                    "debug_type_ptr": 1,
                    "debug_value": 1,
                    "object_ptr": 1,
                    "result": 5,
                    "struct_ptr": 1,
                    "type_constant": 1,
                    "type_object": 2,
                    "type_object_pointer": 1,
                    "type_pointer": 2,
                    "type_property": 1,
                    "type_ptr": 2,
                    "type_result": 1
                },
                "param_1": {
                    "data1": 2,
                    "data_1": 2,
                    "first_param": 1,
                    "input_1": 2,
                    "input_param1": 4,
                    "input_param_1": 4,
                    "input_val1": 1,
                    "input_value1": 2,
                    "input_value_1": 2,
                    "source_param": 1,
                    "type_info": 1,
                    "value1": 6,
                    "value_1": 3
                },
                "param_2": {
                    "data2": 2,
                    "data_2": 2,
                    "debug_data": 1,
                    "destination_param": 1,
                    "input_2": 2,
                    "input_param2": 4,
                    "input_param_2": 4,
                    "input_val2": 1,
                    "input_value2": 2,
                    "input_value_2": 2,
                    "second_param": 1,
                    "value2": 6,
                    "value_2": 3
                },
                "puVar2": {
                    "allocated_buffer": 1,
                    "allocated_data": 1,
                    "allocated_memory": 13,
                    "allocated_memory_ptr": 1,
                    "allocated_ptr": 4,
                    "debug_type_ptr": 2,
                    "malloced_pointer": 1,
                    "malloced_ptr": 1,
                    "memory_block": 1,
                    "new_object_ptr": 1,
                    "new_ptr": 1,
                    "object_ptr": 1,
                    "ptr_allocated_memory": 1,
                    "ptr_data": 1,
                    "ptr_debug_type": 1
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nlong create_and_store_debug_type_00113d6e(undefined8 value1,undefined8 value2)\n\n{\n  long debug_type;\n  undefined8 *allocated_memory;\n  \n  debug_type = debug_make_type_constprop_0(0xb,0);\n  if (debug_type != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = value1;\n    allocated_memory[1] = value2;\n    *(undefined8 **)(debug_type + 0x10) = allocated_memory;\n  }\n  return debug_type;\n}\n\n",
            "current_name": "create_and_store_debug_type_00113d6e",
            "entrypoint": "0x00113d6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113d6e": "create_and_store_debug_type_00113d6e",
                "lVar1": "debug_type",
                "param_1": "value1",
                "param_2": "value2",
                "puVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113da9": {
            "additional_data": {
                "FUN_00113da9": {
                    "allocate_and_initialize_data": 1,
                    "initialize_buffer": 2,
                    "initialize_byte_array": 1,
                    "initialize_data": 1,
                    "initialize_data_structure": 5,
                    "initialize_debug_data": 1,
                    "initialize_debug_info": 1,
                    "initialize_debug_structure": 1,
                    "initialize_debug_type": 3,
                    "initialize_memory": 5,
                    "initialize_memory_block": 1,
                    "initialize_object": 1,
                    "initialize_type": 1,
                    "reverse_and_initialize": 1,
                    "reverse_and_initialize_memory": 1,
                    "reverse_debug_type": 1
                },
                "auVar5": {
                    "debug_info": 1,
                    "output": 1,
                    "output_variable": 1,
                    "result": 14,
                    "result_variable": 1,
                    "return_val": 1,
                    "return_value": 6
                },
                "bVar4": {
                    "array_increment": 1,
                    "b_var": 1,
                    "byte_counter": 1,
                    "byte_offset": 1,
                    "byte_val": 2,
                    "byte_value": 3,
                    "byte_var": 1,
                    "counter": 1,
                    "increment": 1,
                    "initial_value": 1,
                    "inner_loop_counter": 1,
                    "offset": 3,
                    "temp_byte": 6,
                    "temporary_byte": 1,
                    "zero": 1,
                    "zero_value": 1
                },
                "byte": {
                    "param1": 1
                },
                "debug_make_type_constprop_0": {
                    "calculate_debug_type_offset": 1,
                    "calculate_offset": 1,
                    "calculate_padding": 1
                },
                "lVar2": {
                    "count": 2,
                    "counter": 3,
                    "i": 2,
                    "index": 1,
                    "iteration_count": 2,
                    "loop_count": 1,
                    "loop_counter": 16,
                    "remaining_bytes": 1
                },
                "param_1": {
                    "buffer_size": 1,
                    "byte_count": 9,
                    "byte_index": 1,
                    "byte_offset": 1,
                    "byte_param": 1,
                    "byte_size": 2,
                    "byte_value": 3,
                    "input_byte": 4,
                    "input_size": 1,
                    "length": 1,
                    "num_bytes": 1,
                    "offset": 1,
                    "size": 2
                },
                "param_2": {
                    "data_1": 1,
                    "debug_info1": 1,
                    "debug_type": 1,
                    "input_param2": 1,
                    "param1": 2,
                    "param2": 13,
                    "param_2": 5,
                    "pointer_param_1": 1,
                    "unknown1": 2,
                    "unknown_1": 1
                },
                "param_3": {
                    "buffer_size": 1,
                    "data": 3,
                    "data_2": 1,
                    "data_pointer": 1,
                    "debug_info2": 1,
                    "input_param3": 1,
                    "param2": 2,
                    "param3": 11,
                    "param_3": 3,
                    "pointer_param_2": 1,
                    "unknown2": 2,
                    "unknown_2": 1
                },
                "param_4": {
                    "data": 1,
                    "data_3": 1,
                    "debug_info3": 1,
                    "debug_value": 1,
                    "input_param4": 1,
                    "param3": 2,
                    "param4": 13,
                    "param_4": 4,
                    "pointer_param_3": 1,
                    "unknown3": 2,
                    "unknown_3": 1
                },
                "puVar1": {
                    "allocated_memory": 7,
                    "array": 1,
                    "buffer": 2,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "debug_pointer": 1,
                    "debug_structure": 1,
                    "debug_type_pointer": 1,
                    "debug_type_ptr": 2,
                    "dynamic_memory": 1,
                    "malloced_pointer": 1,
                    "memory_block": 6,
                    "object_ptr": 1,
                    "pointer_to_data": 1,
                    "ptr": 1
                },
                "puVar3": {
                    "array_pointer": 1,
                    "current_address": 2,
                    "current_element": 1,
                    "current_memory": 1,
                    "current_memory_location": 1,
                    "current_pointer": 7,
                    "current_ptr": 2,
                    "debug_data_ptr": 1,
                    "pointer_plus_one": 1,
                    "ptr": 4,
                    "ptr_increment": 1,
                    "ptr_to_data": 1,
                    "temp": 1,
                    "temp_pointer": 4
                },
                "undefined": {
                    "reverse_and_allocate_memory": 1
                },
                "undefined8": {
                    "param4": 1
                },
                "xmalloc": {
                    "allocate_memory": 3
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "code": "\nreverse_and_allocate_memory  [16] reverse_and_initialize_memory_00113da9(param1 byte_count,param4 param2,param4 param3,param4 param4)\n\n{\n  param4 *allocated_memory;\n  long loop_counter;\n  param4 *current_pointer;\n  param1 temp_byte;\n  reverse_and_allocate_memory result [16];\n  \n  temp_byte = 0;\n  result._0_8_ = calculate_padding(8 - (uint)byte_count);\n  if (result._0_8_ != 0) {\n    allocated_memory = (param4 *)allocate_memory(0x28);\n    current_pointer = allocated_memory + 1;\n    for (loop_counter = 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(reverse_and_allocate_memory4 *)current_pointer = 0;\n      current_pointer = (param4 *)((long)current_pointer + (ulong)temp_byte * -8 + 4);\n    }\n    *allocated_memory = param3;\n    *(param4 **)(result._0_8_ + 0x10) = allocated_memory;\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "current_name": "reverse_and_initialize_memory_00113da9",
            "entrypoint": "0x00113da9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113da9": "reverse_and_initialize_memory_00113da9",
                "auVar5": "result",
                "bVar4": "temp_byte",
                "byte": "param1",
                "debug_make_type_constprop_0": "calculate_padding",
                "lVar2": "loop_counter",
                "param_1": "byte_count",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "allocated_memory",
                "puVar3": "current_pointer",
                "undefined": "reverse_and_allocate_memory",
                "undefined8": "param4",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113df2": {
            "additional_data": {
                "FUN_00112904": {
                    "apply_type_modification": 1,
                    "copy_type_to_debug": 1,
                    "debug_call_subfunction": 1,
                    "debug_set_const_properties": 1,
                    "debug_set_type": 3,
                    "debug_subfunction": 1,
                    "do_something": 1,
                    "make_type_const": 1,
                    "perform_debugging": 1,
                    "process_values": 1,
                    "set_constant_property": 1,
                    "set_debug_type": 6,
                    "set_debug_type_property": 1,
                    "set_debug_value": 1,
                    "set_param_values": 2,
                    "set_property_value": 2,
                    "set_variables": 1,
                    "update_property_value": 1,
                    "update_value": 1,
                    "update_values": 1
                },
                "FUN_00113df2": {
                    "apply_const_prop": 1,
                    "debug_constprop_0": 1,
                    "debug_set_constprop": 1,
                    "initialize_const_property": 1,
                    "initialize_constant_property": 1,
                    "initialize_constant_property_value": 1,
                    "initialize_debug": 3,
                    "initialize_debug_type": 4,
                    "initialize_debugger": 1,
                    "initialize_debugging": 1,
                    "make_type_const_prop": 2,
                    "make_type_constant": 1,
                    "modify_data": 1,
                    "set_const_property": 5,
                    "set_constant_property": 1,
                    "set_constant_type": 1,
                    "set_param_to_constprop": 1,
                    "set_type_as_const": 1,
                    "set_type_constprop": 1,
                    "set_type_to_const": 1,
                    "update_debug_type": 1
                },
                "param_1": {
                    "arg": 4,
                    "data": 3,
                    "debug_type": 2,
                    "input": 3,
                    "input_data": 1,
                    "input_value": 2,
                    "param": 1,
                    "parameter1": 1,
                    "property_value": 4,
                    "type": 1,
                    "value": 9
                },
                "param_2": {
                    "arg2": 1,
                    "arg_2": 1,
                    "data": 2,
                    "debugging_parameter": 1,
                    "new_debug_type": 1,
                    "new_value": 2,
                    "param": 1,
                    "param2": 1,
                    "parameter2": 1,
                    "property_descriptor": 1,
                    "property_id": 1,
                    "property_value": 2,
                    "type": 2,
                    "value": 1,
                    "value2": 1
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nvoid initialize_debug_type_00113df2(undefined4 value)\n\n{\n  debug_make_type_constprop_0(4,value);\n  return;\n}\n\n",
            "current_name": "initialize_debug_type_00113df2",
            "entrypoint": "0x00113df2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113df2": "initialize_debug_type_00113df2",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113dfe": {
            "additional_data": {
                "FUN_00113dfe": {
                    "set_debug_type": 2,
                    "set_debug_value": 1,
                    "set_memory": 1,
                    "set_param_value": 1,
                    "set_value": 1,
                    "store_parameter_value": 1,
                    "update_const_prop": 1,
                    "update_debug_type": 3,
                    "update_element": 1,
                    "update_memory": 2,
                    "update_memory_location": 1,
                    "update_memory_value": 1,
                    "update_memory_with_param": 1,
                    "update_param_value": 3,
                    "update_parameter_value": 1,
                    "update_pointer_type": 1,
                    "update_type_property": 2,
                    "update_value_if_type_match": 2,
                    "update_value_in_debug_type": 1,
                    "update_value_in_memory": 1,
                    "update_variable_value": 1,
                    "write_value_to_debug_type": 2
                },
                "lVar1": {
                    "data_type": 1,
                    "debug_make_type": 1,
                    "debug_type_address": 2,
                    "debug_type_pointer": 1,
                    "debug_type_ptr": 1,
                    "debug_value": 1,
                    "element_address": 1,
                    "memory_location": 1,
                    "result": 4,
                    "type_address": 4,
                    "type_constant": 2,
                    "type_constant_pointer": 1,
                    "type_handle": 1,
                    "type_info_address": 1,
                    "type_object_address": 1,
                    "type_pointer": 4,
                    "type_ptr": 3
                },
                "param_1": {
                    "debug_type": 2,
                    "input_pointer": 1,
                    "input_type": 1,
                    "input_value": 3,
                    "num": 1,
                    "param_value": 2,
                    "parameter1": 1,
                    "size": 1,
                    "source_value": 1,
                    "type": 7,
                    "type_id": 3,
                    "type_identifier": 1,
                    "type_index": 1,
                    "type_pointer": 1,
                    "value": 4
                },
                "param_2": {
                    "data_value": 1,
                    "debug_param": 1,
                    "debug_value": 1,
                    "new_value": 12,
                    "parameter2": 1,
                    "property_value": 1,
                    "value": 13
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nvoid update_value_in_memory_00113dfe(undefined4 type,undefined value)\n\n{\n  long type_address;\n  \n  type_address = debug_make_type_constprop_0(3,type);\n  if (type_address != 0) {\n    *(undefined *)(type_address + 0x10) = value;\n  }\n  return;\n}\n\n",
            "current_name": "update_value_in_memory_00113dfe",
            "entrypoint": "0x00113dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113dfe": "update_value_in_memory_00113dfe",
                "lVar1": "type_address",
                "param_1": "type",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e17": {
            "additional_data": {
                "FUN_00112904": {
                    "apply_propagation": 1,
                    "apply_unknown_transformation": 1,
                    "debug_make_type_const_propagation": 1,
                    "make_const_prop": 1,
                    "process_data": 1,
                    "process_debug_type": 1,
                    "process_params": 2,
                    "set_const_property": 1,
                    "set_constant_property": 1,
                    "set_debug_type": 2
                },
                "FUN_00113e17": {
                    "constprop_make_type_debug": 1,
                    "initialize_const_prop": 1,
                    "initialize_const_property": 1,
                    "initialize_constant_propagation": 2,
                    "initialize_constants": 1,
                    "initialize_constprop": 4,
                    "initialize_debug": 3,
                    "initialize_debug_flags": 1,
                    "initialize_debug_mode": 1,
                    "initialize_debug_properties": 1,
                    "initialize_debug_type": 7,
                    "initialize_debug_type_constprop": 1,
                    "initialize_debugging": 1,
                    "initialize_type_const_propagation": 1,
                    "initialize_type_constprop": 1,
                    "make_type_const_prop": 1,
                    "set_constant_property": 1,
                    "set_constprop_type": 1,
                    "set_type_as_const": 1
                },
                "param_1": {
                    "arg1": 13,
                    "argument1": 2,
                    "first_parameter": 2,
                    "input_param_1": 1,
                    "param1": 1,
                    "parameter_1": 1,
                    "undefined1": 1,
                    "undefined_param1": 1,
                    "unknown_param_1": 1,
                    "unnamed_param1": 1
                },
                "param_2": {
                    "arg2": 13,
                    "argument2": 2,
                    "input_param_2": 1,
                    "param2": 1,
                    "parameter_2": 1,
                    "second_parameter": 2,
                    "undefined2": 1,
                    "undefined_param2": 1,
                    "unknown_param_2": 1,
                    "unnamed_param2": 1
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "code": "\nvoid initialize_debug_type_constprop_00113e17(void)\n\n{\n  debug_make_type_constprop_0(2,0);\n  return;\n}\n\n",
            "current_name": "initialize_debug_type_constprop_00113e17",
            "entrypoint": "0x00113e17",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e17": "initialize_debug_type_constprop_00113e17"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e23": {
            "additional_data": {
                "FUN_00112904": {
                    "debug_logging": 1,
                    "debug_print_info": 1
                },
                "FUN_00113e23": {
                    "allocate_and_set_debug_info": 1,
                    "allocate_and_store_data": 1,
                    "create_and_assign_type": 1,
                    "create_and_store_const_object": 1,
                    "create_and_store_debug_type": 1,
                    "create_const_debug_type": 1,
                    "create_data_structure": 1,
                    "create_debug_const_property": 1,
                    "create_debug_data": 1,
                    "create_debug_data_structure": 1,
                    "create_debug_type": 4,
                    "create_new_entry": 1,
                    "create_new_type": 4,
                    "create_type_and_allocate": 1,
                    "create_type_and_assign_param": 1,
                    "create_type_const": 3,
                    "create_type_constprop": 3,
                    "extract_data_from_binary": 1,
                    "initialize_debug_tool": 1,
                    "initialize_debug_type": 1,
                    "store_debug_type": 1
                },
                "lVar1": {
                    "allocated_data_ptr": 1,
                    "const_object": 1,
                    "debug_data_ptr": 1,
                    "debug_data_structure": 1,
                    "debug_info_ptr": 1,
                    "debug_property": 1,
                    "debug_type": 8,
                    "debug_type_handle": 1,
                    "entry": 1,
                    "new_type": 1,
                    "result": 5,
                    "type": 1,
                    "type_const": 1,
                    "type_constprop": 1,
                    "type_info": 1,
                    "type_pointer": 1,
                    "type_ptr": 1,
                    "type_result": 2,
                    "type_value": 1
                },
                "param_1": {
                    "arg_1": 1,
                    "data_1": 2,
                    "func_ptr": 1,
                    "input1": 4,
                    "input_1": 4,
                    "input_data_1": 1,
                    "input_param1": 1,
                    "input_param_1": 8,
                    "input_parameter_1": 1,
                    "input_value1": 2,
                    "object_value_1": 1,
                    "value1": 1,
                    "value_1": 4
                },
                "param_2": {
                    "arg_2": 1,
                    "data_2": 2,
                    "data_ptr": 1,
                    "input2": 4,
                    "input_2": 4,
                    "input_data_2": 1,
                    "input_param2": 1,
                    "input_param_2": 8,
                    "input_parameter_2": 1,
                    "input_value2": 2,
                    "object_value_2": 1,
                    "value2": 1,
                    "value_2": 4
                },
                "puVar2": {
                    "allocated_data": 2,
                    "allocated_memory": 10,
                    "allocated_object": 1,
                    "allocated_ptr": 7,
                    "debug_data": 2,
                    "debug_data_ptr": 1,
                    "debug_type_pointer": 2,
                    "debug_type_ptr": 2,
                    "dynamic_array": 1,
                    "new_entry_ptr": 1,
                    "new_type_info": 1,
                    "ptr": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "FUN_00112904",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010afd5"
            ],
            "code": "\nlong create_const_debug_type_00113e23(undefined8 input_param_1,undefined8 input_param_2)\n\n{\n  long debug_type;\n  undefined8 *allocated_memory;\n  \n  debug_type = debug_make_type_constprop_0(1,0);\n  if (debug_type != 0) {\n    allocated_memory = (undefined8 *)allocate_memory(0x10);\n    *allocated_memory = input_param_1;\n    allocated_memory[1] = input_param_2;\n    *(undefined8 **)(debug_type + 0x10) = allocated_memory;\n  }\n  return debug_type;\n}\n\n",
            "current_name": "create_const_debug_type_00113e23",
            "entrypoint": "0x00113e23",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e23": "create_const_debug_type_00113e23",
                "lVar1": "debug_type",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "puVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e5e": {
            "additional_data": {
                "FUN_00113e5e": {
                    "check_type_and_demangle": 1,
                    "decode_and_check_type": 1,
                    "demangle_type": 2,
                    "extract_and_demangle_type": 1,
                    "extract_type": 1,
                    "extract_type_from_binary": 4,
                    "extract_type_from_string": 2,
                    "parse_and_demangle": 1,
                    "parse_and_demangle_type": 1,
                    "parse_argument": 1,
                    "parse_symbol_type": 1,
                    "parse_type_declaration": 2,
                    "parse_type_definition": 1,
                    "parse_type_name": 1,
                    "process_function": 1,
                    "process_parameter": 1,
                    "process_type": 2,
                    "process_type_string": 1,
                    "validate_and_demangle_type": 1,
                    "validate_type": 1,
                    "validate_type_string": 1
                },
                "cVar1": {
                    "char_identifier": 1,
                    "comparison_result": 1,
                    "is_valid": 2,
                    "is_valid_type": 4,
                    "result": 7,
                    "starts_with_type": 6,
                    "startswith_result": 1
                },
                "local_20": {
                    "current_string": 4,
                    "current_type": 2,
                    "input_ptr": 1,
                    "local_var_arr": 1,
                    "modified_string": 1,
                    "modified_type_string": 1,
                    "original_string": 1,
                    "prev_str": 1,
                    "remaining_string": 1,
                    "strptr": 1,
                    "substring_ptr": 1,
                    "substrings": 1,
                    "temp": 2,
                    "temp_string": 1,
                    "temp_strings": 2,
                    "type": 1,
                    "type_identifier": 1,
                    "type_name": 1,
                    "type_start": 1,
                    "type_string": 3
                },
                "param_1": {
                    "arg1": 2,
                    "binary_path": 1,
                    "buffer": 2,
                    "function_name": 1,
                    "input": 4,
                    "input_buffer": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_string": 2,
                    "output": 3,
                    "output_buffer": 2,
                    "output_type": 2,
                    "param": 2,
                    "param_ptr": 3,
                    "result": 3,
                    "symbol_name": 1
                },
                "param_2": {
                    "arg2": 2,
                    "arg_ptr": 1,
                    "command": 1,
                    "command_line_args": 1,
                    "input": 3,
                    "input_string": 4,
                    "input_string_ptr": 1,
                    "input_strings": 1,
                    "output_buffer_ptr": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "param_arr": 1,
                    "param_values": 1,
                    "previous_string": 1,
                    "ptr_to_string": 1,
                    "str": 1,
                    "string_ptr": 2,
                    "strings": 2,
                    "strptr": 1,
                    "symbol_pointer": 1,
                    "type": 1,
                    "type_string": 2
                },
                "param_3": {
                    "arg3": 2,
                    "input_length": 2,
                    "input_string_length": 1,
                    "len": 1,
                    "length": 5,
                    "offset": 10,
                    "output_buffer_length": 1,
                    "param_offset": 1,
                    "param_val": 1,
                    "str_length": 1,
                    "string_length": 4,
                    "symbol_length": 1,
                    "type_offset": 1
                }
            },
            "called": [
                "FUN_0010c95e",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 extract_type_from_binary_00113e5e(undefined8 input,char **input_string,long offset)\n\n{\n  char result;\n  char *current_string [2];\n  \n  current_string[0] = *input_string;\n  *input_string = (char *)(offset + 2);\n  if ((((long)(char *)(offset + 2) - (long)current_string[0] < 5) ||\n      (result = startswith_lto_priv_0_lto_priv_0(current_string[0],\"type\"), result == '\\0')) ||\n     ((current_string[0][4] != '$' && (current_string[0][4] != '.')))) {\n    if (*current_string[0] != '_') {\n      return 1;\n    }\n    if (current_string[0][1] != '_') {\n      return 1;\n    }\n    if (current_string[0][2] != 'o') {\n      return 1;\n    }\n    if (current_string[0][3] != 'p') {\n      return 1;\n    }\n    current_string[0] = current_string[0] + 4;\n  }\n  else {\n    current_string[0] = current_string[0] + 5;\n  }\n  result = stab_demangle_type_lto_priv_0(input,current_string,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "extract_type_from_binary_00113e5e",
            "entrypoint": "0x00113e5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e5e": "extract_type_from_binary_00113e5e",
                "cVar1": "result",
                "local_20": "current_string",
                "param_1": "input",
                "param_2": "input_string",
                "param_3": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113ede": {
            "additional_data": {
                "FUN_00113ede": {
                    "check_and_compare_suffix": 1,
                    "check_for_suffix": 1,
                    "check_if_string_ends_with": 1,
                    "check_if_string_starts_with": 2,
                    "check_if_string_starts_with_lto_priv_0_lto_priv_0": 1,
                    "check_if_string_starts_with_pattern": 1,
                    "check_start_with_four_chars": 1,
                    "check_starting_with": 1,
                    "check_starts_with": 1,
                    "check_startswith_lto": 2,
                    "check_string": 1,
                    "check_string_length": 10,
                    "check_string_start": 2,
                    "check_string_starts_with": 1,
                    "check_suffix": 2,
                    "extract_and_check_suffix": 1,
                    "extract_and_check_suffix_length": 1,
                    "validate_string_suffix": 1
                },
                "FUN_00113fb0": {
                    "starts_with_lto_priv_0_lto_priv_0": 1
                },
                "__s": {
                    "current_string": 3,
                    "first_string": 1,
                    "input_string": 6,
                    "str": 1,
                    "string": 17,
                    "string_ptr": 3
                },
                "param_1": {
                    "input_string": 3,
                    "input_strings": 2,
                    "string": 1,
                    "string_array": 15,
                    "string_list": 3,
                    "string_to_check": 1,
                    "strings": 5,
                    "strings_array": 1
                },
                "param_2": {
                    "suffix": 1
                },
                "sVar1": {
                    "input_string_length": 1,
                    "length": 5,
                    "str_length": 1,
                    "string_length": 23,
                    "suffix_length": 1
                },
                "uVar2": {
                    "is_match": 1,
                    "is_start_with_specific_chars": 1,
                    "result": 17,
                    "starts_with": 3,
                    "starts_with_lto_priv": 2,
                    "starts_with_pattern": 1,
                    "startswith_result": 6
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_0010829e",
                "FUN_001082b3"
            ],
            "code": "\nundefined8 check_string_length_00113ede(char **string_array)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (string_array == (char **)0x0) {\n    return 0;\n  }\n  string = *string_array;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      result = startswith_lto_priv_0_lto_priv_0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_string_length_00113ede",
            "entrypoint": "0x00113ede",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113ede": "check_string_length_00113ede",
                "__s": "string",
                "param_1": "string_array",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113f20": {
            "additional_data": {
                "FUN_00113f20": {
                    "create_and_initialize_hash_table": 1,
                    "create_and_initialize_hashtable": 1,
                    "create_hash_table": 11,
                    "create_hash_table_with_alloc": 1,
                    "create_hashtable": 5,
                    "initialize_hash_tab": 2,
                    "initialize_hash_table": 8,
                    "initialize_hashtable": 1,
                    "initialize_string_hash_table": 1
                },
                "free": {
                    "deallocate_memory": 10,
                    "free_memory": 3,
                    "release_memory": 18
                },
                "htab_create_alloc": {
                    "allocate_and_create_hashtable": 1,
                    "allocate_hash_tab": 1,
                    "allocate_hash_table": 10,
                    "allocate_hashtable": 4,
                    "create_and_allocate_hash_table": 1,
                    "create_hash_table": 11,
                    "create_hash_table_with_alloc": 1,
                    "create_hashtable": 1,
                    "hash_table_create_alloc": 1
                },
                "htab_eq_string": {
                    "are_strings_equal": 1,
                    "compare_string": 3,
                    "compare_string_in_hashtable": 1,
                    "compare_strings": 17,
                    "is_equal_string": 6,
                    "is_string_equal": 1,
                    "string_equality": 1,
                    "string_equality_check": 1
                },
                "htab_hash_string": {
                    "calculate_hash": 2,
                    "calculate_string_hash": 1,
                    "hash_string": 26,
                    "hash_string_in_hashtable": 1,
                    "string_hash": 1
                },
                "xcalloc": {
                    "allocate_memory": 31
                }
            },
            "called": [
                "FUN_00104720",
                "FUN_001284f0",
                "FUN_001284f8",
                "FUN_00128500",
                "FUN_001280f0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid create_hash_table_with_alloc_00113f20(void)\n\n{\n  create_hash_table(0x10,hash_string,compare_strings,0,allocate_memory,release_memory);\n  return;\n}\n\n",
            "current_name": "create_hash_table_with_alloc_00113f20",
            "entrypoint": "0x00113f20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113f20": "create_hash_table_with_alloc_00113f20",
                "free": "release_memory",
                "htab_create_alloc": "create_hash_table",
                "htab_eq_string": "compare_strings",
                "htab_hash_string": "hash_string",
                "xcalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113f50": {
            "additional_data": {
                "FUN_00113f50": {
                    "check_file": 12,
                    "check_file_info": 5,
                    "check_file_properties": 2,
                    "check_file_stats": 3,
                    "check_file_status": 5,
                    "get_file_information": 3,
                    "get_file_stats": 1
                },
                "__errno_location": {
                    "get_error_number_ptr": 1
                },
                "dcgettext": {
                    "get_locale_text": 1,
                    "get_localized_message": 1,
                    "translate": 1
                },
                "iVar1": {
                    "result": 3,
                    "stat_result": 7,
                    "status": 20,
                    "status_code": 1
                },
                "non_fatal": {
                    "handle_error": 1,
                    "handle_warning": 1,
                    "print_warning": 2
                },
                "param_1": {
                    "file_path": 25,
                    "filename": 6
                },
                "pcVar4": {
                    "err_desc": 1,
                    "err_str": 2,
                    "error_description": 1,
                    "error_info": 1,
                    "error_message": 3,
                    "error_reason": 14,
                    "error_str": 1,
                    "error_string": 2,
                    "reason": 4,
                    "str_error": 2
                },
                "piVar2": {
                    "err_num_ptr": 1,
                    "err_ptr": 1,
                    "errno_loc": 1,
                    "errno_location": 3,
                    "errno_ptr": 12,
                    "errnum_ptr": 1,
                    "error": 4,
                    "error_code": 2,
                    "error_num_ptr": 2,
                    "error_number_ptr": 1,
                    "error_ptr": 3
                },
                "sStack_a8": {
                    "file_info": 8,
                    "file_stat": 12,
                    "file_stats": 8,
                    "file_status": 2,
                    "stat_buffer": 1
                },
                "uVar3": {
                    "err_msg": 3,
                    "error_message": 16,
                    "error_msg": 5,
                    "localized_error_message": 1,
                    "message": 4,
                    "translated_message": 1,
                    "warning_message": 1
                }
            },
            "called": [
                "FUN_001044f0",
                "FUN_00104966",
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "code": "\nlong check_file_info_00113f50(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stat;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stat);\n    if (status < 0) {\n      errno_ptr = get_error_number_ptr();\n      if (*errno_ptr == 2) {\n        error_message = get_localized_message(0,\"\\'%s\\': No such file\",5);\n        print_warning(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = get_localized_message(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_warning(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_message = get_localized_message(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_warning(error_message,file_path);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stat.st_size) {\n        return file_stat.st_size;\n      }\n      error_message = get_localized_message(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_warning(error_message,file_path);\n    }\n    else {\n      error_message = get_localized_message(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_warning(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "current_name": "check_file_info_00113f50",
            "entrypoint": "0x00113f50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113f50": "check_file_info_00113f50",
                "__errno_location": "get_error_number_ptr",
                "dcgettext": "get_localized_message",
                "iVar1": "status",
                "non_fatal": "print_warning",
                "param_1": "file_path",
                "pcVar4": "error_reason",
                "piVar2": "errno_ptr",
                "sStack_a8": "file_stat",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113fb0": {
            "additional_data": {
                "FUN_00113fb0": {
                    "compare_strings": 10,
                    "reverse_compare_string": 1,
                    "string_compare": 4,
                    "string_comparison": 16
                },
                "__n": {
                    "len": 1,
                    "length": 21,
                    "length_comparison": 1,
                    "second_string_length": 1,
                    "str2_length": 2,
                    "string2_length": 4,
                    "target_string_length": 1
                },
                "auVar2": {
                    "comparison_result": 3,
                    "comparison_result_aux": 1,
                    "comparison_result_container": 1,
                    "output": 1,
                    "output_variable": 1,
                    "result": 18,
                    "result_array": 1,
                    "return_value": 1
                },
                "extraout_var": {
                    "comparison_result": 1,
                    "extra_out": 1,
                    "extra_output": 5,
                    "extra_var": 1,
                    "result": 4
                },
                "iVar1": {
                    "compare_result": 1,
                    "comparison": 1,
                    "comparison_result": 25,
                    "result": 2
                },
                "param_1": {
                    "first_string": 2,
                    "input_string": 1,
                    "input_string1": 1,
                    "source_string": 1,
                    "str1": 8,
                    "string1": 18
                },
                "param_2": {
                    "comparison_string": 1,
                    "input_string2": 1,
                    "second_string": 2,
                    "str2": 8,
                    "string2": 18,
                    "target_string": 1
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_001040e0"
            ],
            "calling": [
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00107880",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00113ede",
                "FUN_00108c86",
                "FUN_0010554f"
            ],
            "code": "\nundefined  [16] string_comparison_00113fb0(char *string1,char *string2)\n\n{\n  int comparison_result;\n  undefined8 in_RAX;\n  size_t length;\n  undefined4 extra_output;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparison_result = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(extra_output,comparison_result) >> 8);\n  result[0] = comparison_result == 0;\n  result._8_8_ = in_RAX;\n  return result;\n}\n\n",
            "current_name": "string_comparison_00113fb0",
            "entrypoint": "0x00113fb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "__n": "length",
                "auVar2": "result",
                "extraout_var": "extra_output",
                "iVar1": "comparison_result",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113fe0": {
            "additional_data": {
                "FUN_00113fe0": {
                    "decode_section_flags": 1,
                    "parse_flags": 1,
                    "parse_section_flags": 28
                },
                "auVar8": {
                    "final_result": 1,
                    "parsed_result": 1,
                    "parsed_value": 1,
                    "result": 8,
                    "result_array": 1,
                    "result_container": 2,
                    "result_struct": 4,
                    "ret_value": 1,
                    "return_data": 1,
                    "return_val": 2,
                    "return_value": 8,
                    "return_variable": 1
                },
                "dcgettext": {
                    "get_localized_string": 1
                },
                "fatal": {
                    "fatal_error": 1
                },
                "iVar1": {
                    "cmp_result": 1,
                    "compare_result": 1,
                    "comparison_result": 13,
                    "result": 15,
                    "str_comparison_result": 1
                },
                "iVar6": {
                    "comparison_length": 1,
                    "comparison_result_int": 1,
                    "end_pos": 1,
                    "flag_index": 10,
                    "flag_length_int": 3,
                    "flag_string_index": 1,
                    "length": 1,
                    "section_flag_index": 2,
                    "section_flag_length": 2,
                    "section_length": 3,
                    "section_length_int": 1,
                    "section_name_length": 1,
                    "section_name_length_int": 1,
                    "substring_length": 1,
                    "substring_length_to_int": 1
                },
                "non_fatal": {
                    "non_fatal_error": 1
                },
                "param_1": {
                    "flag_string": 2,
                    "flags_string": 2,
                    "input_string": 4,
                    "section_flag_string": 2,
                    "section_flags": 18,
                    "section_flags_string": 3
                },
                "param_2": {
                    "param2": 15,
                    "param_2": 15,
                    "unused_param1": 1
                },
                "param_3": {
                    "param3": 15,
                    "param_3": 15,
                    "unused_param2": 1
                },
                "param_4": {
                    "flag_descriptions": 1,
                    "param4": 12,
                    "param_4": 8,
                    "result": 1,
                    "section_flag": 2,
                    "section_flag_mask": 1,
                    "section_flags": 1,
                    "section_flags_ptr": 1,
                    "section_flags_result": 1,
                    "section_name": 1,
                    "section_pointer": 1,
                    "unused_param3": 1
                },
                "pcVar3": {
                    "comma": 2,
                    "comma_index": 3,
                    "comma_location": 2,
                    "comma_pos": 5,
                    "comma_position": 12,
                    "delimiter": 2,
                    "delimiter_pos": 2,
                    "delimiter_position": 1,
                    "delimiter_ptr": 1,
                    "section_flag": 1
                },
                "pcVar4": {
                    "flag_position": 1,
                    "next_delimiter_pos": 1,
                    "next_delimiter_position": 1,
                    "next_flag": 10,
                    "next_flag_position": 1,
                    "next_flag_string": 3,
                    "next_pos": 1,
                    "next_section": 1,
                    "next_section_flag": 7,
                    "next_section_flags": 2,
                    "next_string": 2,
                    "remaining_flags": 1
                },
                "sVar5": {
                    "flag_length": 17,
                    "flag_string_length": 2,
                    "length": 1,
                    "section_flag_length": 3,
                    "section_flag_size": 1,
                    "section_flags_length": 1,
                    "section_length": 1,
                    "section_name_length": 1,
                    "string_length": 3,
                    "substring_length": 1
                },
                "uVar2": {
                    "err_msg": 1,
                    "errmsg": 1,
                    "error": 1,
                    "error_message": 12,
                    "error_msg": 2,
                    "error_string": 3,
                    "error_text": 2,
                    "localized_error_msg": 1,
                    "localized_string": 1,
                    "message": 1,
                    "msg": 3
                },
                "uVar7": {
                    "accumulated_flags": 1,
                    "flag_value": 1,
                    "flags": 1,
                    "parsed_flags": 5,
                    "result": 1,
                    "result_flag": 2,
                    "result_flags": 1,
                    "section_flag": 5,
                    "section_flag_value": 1,
                    "section_flags": 6,
                    "section_flags_bitmask": 1,
                    "section_flags_mask": 1,
                    "updated_flags": 2,
                    "updated_section_flag": 2,
                    "updated_section_flags": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] parse_section_flags_00113fe0(char *section_flags,undefined8 param_2,undefined8 param3,undefined8 param4)\n\n{\n  int result;\n  undefined8 error_message;\n  char *comma_position;\n  char *next_flag;\n  size_t flag_length;\n  int flag_index;\n  uint section_flags;\n  undefined return_value [16];\n  \n  section_flags = 0;\n  do {\n    comma_position = strchr(section_flags,0x2c);\n    if (comma_position == (char *)0x0) {\n      flag_length = strlen(section_flags);\n      flag_index = (int)flag_length;\n      next_flag = (char *)0x0;\n    }\n    else {\n      next_flag = comma_position + 1;\n      flag_index = (int)comma_position - (int)section_flags;\n    }\n    flag_length = (size_t)flag_index;\n    result = strncasecmp(\"alloc\",section_flags,flag_length);\n    if (result == 0) {\n      section_flags = section_flags | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",section_flags,flag_length);\n      if (result == 0) {\n        section_flags = section_flags | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",section_flags,flag_length);\n        if (result == 0) {\n          section_flags = section_flags | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",section_flags,flag_length);\n          if (result == 0) {\n            section_flags = section_flags | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",section_flags,flag_length);\n            if (result == 0) {\n              section_flags = section_flags | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",section_flags,flag_length);\n              if (result == 0) {\n                section_flags = section_flags | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",section_flags,flag_length);\n                if (result == 0) {\n                  section_flags = section_flags | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",section_flags,flag_length);\n                  if (result == 0) {\n                    section_flags = section_flags | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",section_flags,flag_length);\n                    if (result == 0) {\n                      section_flags = section_flags | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",section_flags,flag_length);\n                      if (result == 0) {\n                        section_flags = section_flags | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",section_flags,flag_length);\n                        if (result == 0) {\n                          section_flags = section_flags | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",section_flags,flag_length);\n                          if (result == 0) {\n                            section_flags = section_flags | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",section_flags,flag_length);\n                            if (result != 0) {\n                              comma_position = (char *)allocate_memory((long)(flag_index + 1));\n                              strncpy(comma_position,section_flags,flag_length);\n                              comma_position[flag_length] = '\\0';\n                              error_message = get_localized_string(0,\"unrecognized section flag `%s\\'\",5);\n                              non_fatal_error(error_message,comma_position);\n                              error_message = get_localized_string(0,\"supported flags: %s\",5);\n                    \n                              fatal_error(error_message,\n                                    \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                   );\n                            }\n                            section_flags = section_flags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    section_flags = next_flag;\n  } while (next_flag != (char *)0x0);\n  return_value._4_4_ = 0;\n  return_value._0_4_ = section_flags;\n  return_value._8_8_ = param4;\n  return return_value;\n}\n\n",
            "current_name": "parse_section_flags_00113fe0",
            "entrypoint": "0x00113fe0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "auVar8": "return_value",
                "dcgettext": "get_localized_string",
                "fatal": "fatal_error",
                "iVar1": "result",
                "iVar6": "flag_index",
                "non_fatal": "non_fatal_error",
                "param_1": "section_flags",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar3": "comma_position",
                "pcVar4": "next_flag",
                "sVar5": "flag_length",
                "uVar2": "error_message",
                "uVar7": "section_flags",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114190": {
            "additional_data": {
                "DCGETTEXT_PARAM": {
                    "dcgettext_param": 1
                },
                "FNMATCH_PARAM": {
                    "fnmatch_param": 1
                },
                "FUN_00114190": {
                    "check_and_alter_flags": 1,
                    "check_permission": 1,
                    "check_permissions": 1,
                    "find_matching_entry": 1,
                    "find_matching_pattern": 1,
                    "find_matching_patterns": 1,
                    "process_data": 1,
                    "process_function": 2,
                    "process_items": 1,
                    "search_and_modify": 1,
                    "update_permissions": 1
                },
                "LAB_001141e5": {
                    "skip_fnmatch_check": 1
                },
                "LAB_00114245": {
                    "return_current_array": 1
                },
                "LAB_001142a9": {
                    "create_new_array": 1
                },
                "LAB_0011438e": {
                    "set_flag_and_return_null": 1
                },
                "LAB_001143cd": {
                    "compare_current_array": 1
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "fatal": {
                    "fatal_error": 1
                },
                "fnmatch": {
                    "match_pattern": 1
                },
                "iVar4": {
                    "comparison": 1,
                    "comparison_result": 14,
                    "index": 4,
                    "integer_variable4": 1,
                    "loop_counter": 1,
                    "match_result": 1,
                    "result": 1,
                    "string_comparison_result": 1,
                    "temp_index": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var4": 2,
                    "temp_variable": 1,
                    "var3": 1
                },
                "param_1": {
                    "data_array": 1,
                    "file_path": 1,
                    "filename": 1,
                    "input": 1,
                    "input_array": 20,
                    "input_ptr": 1,
                    "input_str": 1,
                    "input_string": 3,
                    "item_array": 1,
                    "target_string": 1
                },
                "param_2": {
                    "check_flag": 1,
                    "flag": 16,
                    "flag_option": 1,
                    "ignore_case": 1,
                    "is_check_enabled": 1,
                    "is_condition_met": 2,
                    "is_copy": 1,
                    "is_exact_match": 2,
                    "is_flag": 1,
                    "is_flag_set": 1,
                    "is_inverted": 1,
                    "is_negated": 1,
                    "is_regex_pattern": 1,
                    "match_type": 1
                },
                "param_3": {
                    "condition_flags": 1,
                    "flag": 1,
                    "flag_mask": 1,
                    "flags": 7,
                    "input_flag": 1,
                    "mask": 5,
                    "match_options": 1,
                    "matching_options": 1,
                    "options": 2,
                    "options_flag": 1,
                    "param": 1,
                    "parameter": 1,
                    "permission": 1,
                    "permissions": 6,
                    "search_options": 1
                },
                "plVar2": {
                    "current_pattern": 1,
                    "current_pointer": 1,
                    "current_string": 1,
                    "element": 1,
                    "entry_pattern": 1,
                    "match_pattern": 1,
                    "pattern": 7,
                    "pointer_var1": 1,
                    "ptr1": 1,
                    "ptr2": 1,
                    "ptr_variable2": 1,
                    "string_pointer": 3,
                    "string_ptr": 1,
                    "temp_array": 2,
                    "temp_pointer": 3,
                    "temp_ptr": 2,
                    "temp_var2": 2,
                    "var1": 1
                },
                "pplVar3": {
                    "current_entry": 1,
                    "current_item": 1,
                    "current_match": 1,
                    "matches": 1,
                    "next_array": 1,
                    "output_array_pointer": 1,
                    "output_pointer": 1,
                    "pointer_pointer_var1": 1,
                    "ptr_array": 1,
                    "ptr_pointer_variable3": 1,
                    "result": 8,
                    "result_pointer": 4,
                    "result_ptr": 1,
                    "temp_ptr_array": 1,
                    "temp_ptr_ptr": 3,
                    "temp_var3": 2,
                    "var2": 1
                },
                "pplVar6": {
                    "curr_ptr": 1,
                    "current_array": 1,
                    "current_entry": 1,
                    "current_item": 1,
                    "current_match": 1,
                    "current_node": 4,
                    "current_pattern": 1,
                    "current_ptr_ptr": 1,
                    "current_result": 1,
                    "current_result_pointer": 1,
                    "inner_loop_pointer": 1,
                    "next_entry": 1,
                    "next_item": 1,
                    "next_match": 1,
                    "pointer1": 1,
                    "pointer_pointer_var2": 1,
                    "ptr_array1": 1,
                    "ptr_pointer_variable6": 1,
                    "sub_array": 1,
                    "temp_array_pointer": 1,
                    "temp_pointer1": 1,
                    "temp_pointer2": 1,
                    "temp_ptr": 1,
                    "temp_ptr_array2": 1,
                    "temp_ptr_ptr": 1,
                    "temp_result": 1,
                    "temp_var6": 1
                },
                "pplVar7": {
                    "array_pointer": 1,
                    "current_array_pointer": 1,
                    "current_list": 1,
                    "current_node": 2,
                    "current_pattern": 1,
                    "current_ptr": 2,
                    "current_result": 1,
                    "main_array": 1,
                    "next_node": 1,
                    "outer_loop_pointer": 1,
                    "parent_node": 1,
                    "pointer2": 1,
                    "prev_entry": 1,
                    "prev_item": 1,
                    "prev_node": 2,
                    "prev_ptr": 1,
                    "prev_ptr_ptr": 1,
                    "previous_match": 1,
                    "previous_node": 1,
                    "previous_pattern": 1,
                    "previous_result": 1,
                    "previous_result_pointer": 1,
                    "ptr_array": 1,
                    "ptr_array2": 1,
                    "ptr_pointer_variable7": 1,
                    "temp_pointer2": 1,
                    "temp_pointer3": 1,
                    "temp_var7": 1
                },
                "pplVar8": {
                    "next_array": 1,
                    "next_array_pointer": 2,
                    "next_entry": 1,
                    "next_item": 1,
                    "next_list": 1,
                    "next_match": 1,
                    "next_node": 6,
                    "next_pattern": 2,
                    "next_ptr": 3,
                    "next_ptr_ptr": 1,
                    "next_result": 2,
                    "next_result_pointer": 1,
                    "pointer3": 1,
                    "previous_result_pointer": 1,
                    "ptr_array2": 1,
                    "ptr_array3": 1,
                    "ptr_pointer_variable8": 1,
                    "temp_node": 1,
                    "temp_pointer3": 1,
                    "temp_pointer4": 1,
                    "temp_var8": 1
                },
                "strcmp": {
                    "compare_strings": 1
                },
                "uVar1": {
                    "flag": 1,
                    "flag1": 1,
                    "flag_value": 1,
                    "flags": 1,
                    "flags_check": 1,
                    "mask_result": 3,
                    "mask_value": 1,
                    "match_mask": 1,
                    "option_result": 1,
                    "options": 1,
                    "permission_flag": 2,
                    "result": 4,
                    "temp": 1,
                    "temp_var": 3,
                    "temp_var1": 4,
                    "temp_variable": 1,
                    "value": 1,
                    "var1": 2,
                    "variable1": 1
                },
                "uVar5": {
                    "error": 1,
                    "error_code": 1,
                    "error_message": 16,
                    "error_msg": 2,
                    "error_string": 1,
                    "result": 1,
                    "string_ptr": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var5": 2,
                    "var2": 1,
                    "var4": 1,
                    "variable5": 1
                }
            },
            "called": [
                "FUN_00119dd0",
                "FUN_00104bba",
                "FUN_00104240",
                "FUN_00104470",
                "FUN_00104340",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00115dc0",
                "FUN_00107880",
                "FUN_00116110",
                "FUN_00115b70",
                "FUN_00114c20",
                "FUN_00108072",
                "FUN_00115530"
            ],
            "code": "\nlong ** process_function_00114190(long *input_array,char flag,uint flags)\n\n{\n  uint result;\n  long *pattern;\n  long **result;\n  int comparison_result;\n  undefined8 error_message;\n  long **current_node;\n  long **current_node;\n  long **next_node;\n  \n  current_node = DAT_00127900;\n  if (DAT_00127900 == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto create_new_array;\n  }\n  if (flag == '\\0') {\n    if ((flags & *(uint *)((long)DAT_00127900 + 0x14)) == 0) {\nskip_fnmatch_check:\n      current_node = (long **)*current_node;\n      if (current_node == (long **)0x0) {\n        return (long **)0x0;\n      }\n      current_node = (long **)0x0;\n    }\n    else {\n      pattern = DAT_00127900[1];\n      if (*(char *)pattern == '!') {\n        comparison_result = match_pattern((char *)((long)pattern + 1),(char *)input_array,0);\n        current_node = current_node;\n        if (comparison_result == 0) goto set_flag_and_return_null;\n        goto skip_fnmatch_check;\n      }\n      comparison_result = match_pattern((char *)pattern,(char *)input_array,0);\n      if (comparison_result != 0) goto skip_fnmatch_check;\n      current_node = (long **)*current_node;\n      if (current_node == (long **)0x0) goto return_current_array;\n    }\n    if ((flags & *(uint *)((long)current_node + 0x14)) != 0) {\n      pattern = current_node[1];\n      if (*(char *)pattern == '!') {\n        comparison_result = match_pattern((char *)((long)pattern + 1),(char *)input_array,0);\n        if (comparison_result == 0) {\nset_flag_and_return_null:\n          *(undefined *)(current_node + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparison_result = match_pattern((char *)pattern,(char *)input_array,0);\n        if ((current_node == (long **)0x0) && (comparison_result == 0)) {\n          next_node = (long **)*current_node;\n          current_node = current_node;\n          if (next_node == (long **)0x0) goto return_current_array;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next_node = (long **)*current_node;\n    current_node = current_node;\n    if (next_node != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparison_result = compare_strings((char *)DAT_00127900[1],(char *)input_array);\n    if (comparison_result == 0) {\ncompare_current_array:\n      result = *(uint *)((long)current_node + 0x14);\n      if ((((result & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((result & 2) != 0)))) {\n        error_message = get_error_message(0,\"error: %s both copied and removed\",5);\n                    \n        fatal_error(error_message,input_array);\n      }\n      if ((((result & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = get_error_message(0,\"error: %s both sets and alters VMA\",5);\n                    \n        fatal_error(error_message,input_array);\n      }\n      if ((((result & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)current_node + 0x14) = result | flags;\n        return current_node;\n      }\n      error_message = get_error_message(0,\"error: %s both sets and alters LMA\",5);\n                    \n      fatal_error(error_message,input_array);\n    }\n    current_node = (long **)*current_node;\n    if (current_node == (long **)0x0) goto create_new_array;\n    comparison_result = compare_strings((char *)current_node[1],(char *)input_array);\n    if (comparison_result == 0) goto compare_current_array;\n    next_node = (long **)*current_node;\n    current_node = (long **)0x0;\n    if (next_node == (long **)0x0) goto create_new_array;\nLAB_00114288:\n    do {\n      current_node = current_node;\n      if (flag == '\\0') {\n        while (current_node = next_node, result = current_node, next_node = current_node,\n              (flags & *(uint *)((long)current_node + 0x14)) != 0) {\n          pattern = current_node[1];\n          if (*(char *)pattern == '!') {\n            comparison_result = match_pattern((char *)((long)pattern + 1),(char *)input_array,0);\n            if (comparison_result == 0) goto set_flag_and_return_null;\n            next_node = (long **)*current_node;\n            if ((long **)*current_node == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparison_result = match_pattern((char *)pattern,(char *)input_array,0);\n            if ((current_node == (long **)0x0) && (comparison_result == 0)) {\n              current_node = current_node;\n              next_node = (long **)*current_node;\n              if ((long **)*current_node == (long **)0x0) goto return_current_array;\n            }\n            else {\n              next_node = (long **)*current_node;\n              if ((long **)*current_node == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparison_result = compare_strings((char *)next_node[1],(char *)input_array);\n        result = current_node;\n        current_node = next_node;\n        if (comparison_result == 0) goto compare_current_array;\n      }\n      current_node = result;\n      next_node = (long **)*next_node;\n      current_node = current_node;\n    } while (next_node != (long **)0x0);\nLAB_001142a1:\n    if (flag != '\\0') {\ncreate_new_array:\n      current_node = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(current_node + 3) = (undefined  [16])0x0;\n      *(undefined *)(current_node + 2) = 0;\n      *(uint *)((long)current_node + 0x14) = flags;\n      current_node[5] = (long *)0x0;\n      current_node = current_node;\n      *current_node = (long *)DAT_00127900;\n      DAT_00127900 = current_node;\n      current_node[1] = input_array;\n      return current_node;\n    }\n  }\nLAB_00114212:\n  if (current_node == (long **)0x0) {\n    return (long **)0x0;\n  }\nreturn_current_array:\n  *(undefined *)(current_node + 2) = 1;\n  return current_node;\n}\n\n",
            "current_name": "process_function_00114190",
            "entrypoint": "0x00114190",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114190": "process_function_00114190",
                "LAB_001141e5": "skip_fnmatch_check",
                "LAB_00114245": "return_current_array",
                "LAB_001142a9": "create_new_array",
                "LAB_0011438e": "set_flag_and_return_null",
                "LAB_001143cd": "compare_current_array",
                "dcgettext": "get_error_message",
                "fatal": "fatal_error",
                "fnmatch": "match_pattern",
                "iVar4": "comparison_result",
                "param_1": "input_array",
                "param_2": "flag",
                "param_3": "flags",
                "plVar2": "pattern",
                "pplVar3": "result",
                "pplVar6": "current_node",
                "pplVar7": "current_node",
                "pplVar8": "next_node",
                "strcmp": "compare_strings",
                "uVar1": "result",
                "uVar5": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114460": {
            "additional_data": {
                "DAT_00127a40": {
                    "is_file_empty": 1
                },
                "FUN_00114460": {
                    "load_and_process_file": 3,
                    "parse_file": 6,
                    "parse_file_and_process": 1,
                    "process_file": 6,
                    "read_and_parse_file": 1,
                    "read_and_process_file": 12,
                    "read_and_process_file_lines": 1
                },
                "__n": {
                    "file_size": 30
                },
                "__ptr": {
                    "buffer": 20,
                    "file_buffer": 6,
                    "file_content": 1,
                    "file_contents": 2,
                    "file_data": 1
                },
                "__stream": {
                    "file": 7,
                    "file_pointer": 1,
                    "file_stream": 22
                },
                "bVar8": {
                    "byte": 1,
                    "byte_val": 2,
                    "byte_value": 3,
                    "current_byte": 19,
                    "current_char": 3
                },
                "bVar9": {
                    "next_byte": 1
                },
                "check_file_info_00113f50": {
                    "check_file_info": 2
                },
                "execute_report_and_exit_00119dd0": {
                    "execute_report_and_exit": 2
                },
                "iVar1": {
                    "line_count": 3,
                    "line_counter": 3,
                    "line_num": 1,
                    "line_number": 22
                },
                "param_1": {
                    "file_path": 30
                },
                "param_2": {
                    "file_info": 4,
                    "hash_map": 1,
                    "hash_table": 19,
                    "htab": 3,
                    "htab_ptr": 1,
                    "lookup_table": 1,
                    "param_map": 1
                },
                "param_3": {
                    "file_content": 13,
                    "file_contents": 2,
                    "file_data": 11,
                    "file_data_ptr": 1,
                    "output_data": 2,
                    "output_ptr": 1
                },
                "pbVar10": {
                    "buffer_pos": 1,
                    "byte_ptr": 4,
                    "char_ptr": 1,
                    "current_byte": 2,
                    "current_byte_ptr": 1,
                    "current_char": 1,
                    "current_character": 1,
                    "current_line": 2,
                    "current_line_ptr": 1,
                    "current_position": 8,
                    "current_ptr": 4,
                    "iter_ptr": 1,
                    "line_ptr": 1,
                    "ptr": 2
                },
                "pbVar11": {
                    "char_ptr_prev": 1,
                    "comment_start_position": 1,
                    "last_position": 1,
                    "line_comment": 1,
                    "line_end": 1,
                    "line_end_ptr": 1,
                    "line_start": 2,
                    "line_start_marker": 1,
                    "line_start_ptr": 1,
                    "newline_ptr": 1,
                    "next_character": 1,
                    "next_line": 1,
                    "next_line_ptr": 1,
                    "next_position": 3,
                    "next_ptr": 3,
                    "prev_pos": 1,
                    "previous_byte": 1,
                    "previous_position": 2,
                    "previous_ptr": 1,
                    "ptr2": 1,
                    "start_position": 1,
                    "temp_byte": 1,
                    "temp_ptr_2": 1
                },
                "pbVar12": {
                    "buffer_position": 1,
                    "byte_ptr_prev": 1,
                    "char_ptr_start": 1,
                    "line_end": 2,
                    "line_ptr": 2,
                    "line_start": 8,
                    "line_start_position": 3,
                    "line_start_ptr": 2,
                    "start_byte": 2,
                    "start_of_line": 3,
                    "start_of_line_ptr": 2,
                    "start_position": 1,
                    "start_ptr": 1
                },
                "pbVar6": {
                    "line_start_ptr": 1
                },
                "pbVar7": {
                    "comment_start": 1,
                    "current": 1,
                    "current_byte": 1,
                    "current_char": 7,
                    "current_ptr": 2,
                    "input_line": 1,
                    "line_data": 1,
                    "line_end_ptr": 1,
                    "line_pointer": 1,
                    "line_ptr": 3,
                    "line_start": 2,
                    "pb_var7": 2,
                    "pointer": 2,
                    "ptr": 1,
                    "ptr_7": 1,
                    "rubbish_position": 1,
                    "temp_ptr": 1,
                    "whitespace_position": 1
                },
                "pbVar8": {
                    "current_byte": 2,
                    "current_char": 1,
                    "next_char": 1
                },
                "pbVar9": {
                    "line_end": 2,
                    "next": 1,
                    "next_byte": 16,
                    "next_char": 3,
                    "next_line_ptr": 2,
                    "next_next_char": 1,
                    "next_ptr": 4,
                    "ptr_9": 1
                },
                "pcVar3": {
                    "err_string": 1,
                    "error_message": 13,
                    "error_msg": 4,
                    "error_string": 3,
                    "errstr": 1
                },
                "piVar2": {
                    "err_num": 1,
                    "errno": 1,
                    "errno_location": 6,
                    "errno_ptr": 2,
                    "errnum_ptr": 1,
                    "error_code": 1,
                    "error_code_ptr": 1,
                    "error_num": 1,
                    "error_number": 4,
                    "error_number_ptr": 2
                },
                "ppbVar6": {
                    "hash_map_slot": 1,
                    "hash_slot": 4,
                    "hash_table_entry": 1,
                    "hash_table_slot": 10,
                    "hash_table_slot_ptr": 1,
                    "slot": 8,
                    "slot_pointer": 1,
                    "slot_ptr": 3
                },
                "sVar5": {
                    "bytes_read": 26,
                    "read_size": 4
                },
                "uVar4": {
                    "error_message": 5,
                    "error_msg": 1,
                    "error_msg_translation": 1,
                    "error_translation": 2,
                    "localized_error_message": 1,
                    "translated_error": 1,
                    "translated_message": 9,
                    "translated_msg": 2,
                    "translated_str": 1,
                    "translated_string": 2,
                    "translation": 2
                }
            },
            "called": [
                "FUN_00104210",
                "FUN_00113f50",
                "FUN_00104160",
                "FUN_00119dd0",
                "FUN_00104890",
                "FUN_00104750",
                "FUN_00104130",
                "FUN_00104240",
                "FUN_001040b0",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid read_and_process_file_lines_00114460(char *file_path,undefined8 hash_table,byte **file_content)\n\n{\n  int line_number;\n  int *errno_location;\n  char *error_message;\n  undefined8 translated_message;\n  size_t file_size;\n  byte *buffer;\n  FILE *file_stream;\n  size_t bytes_read;\n  byte **hash_table_slot;\n  byte *current_char;\n  byte current_byte;\n  byte *next_byte;\n  byte *current_position;\n  byte *next_ptr;\n  byte *line_start;\n  \n  file_size = get_file_size();\n  if (file_size == 0) {\n    DAT_00127a40 = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(file_size + 2);\n    file_stream = fopen(file_path,\"r\");\n    if (file_stream == (FILE *)0x0) {\n      errno_location = __errno_location();\n      error_message = strerror(*errno_location);\n      translated_message = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      fatal(translated_message,file_path,error_message);\n    }\n    bytes_read = fread(buffer,1,file_size,file_stream);\n    if ((bytes_read == 0) || (line_number = ferror(file_stream), line_number != 0)) {\n      translated_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(translated_message,file_path);\n    }\n    line_number = 1;\n    fclose(file_stream);\n    *(undefined2 *)(buffer + file_size) = 10;\n    current_byte = *buffer;\n    line_start = buffer;\n    while (current_position = line_start, current_byte != 0) {\n      for (; current_byte = *current_position, next_ptr = current_position, current_byte != 10; current_position = current_position + 1) {\n        if ((char)current_byte < '\\v') {\n          if (current_byte == 0) {\n            next_byte = current_position + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (current_byte == 0xd) {\n            *current_position = 0;\n            next_byte = current_position + 1;\n            if (current_position[1] == 10) {\n              next_byte = current_position + 2;\n              next_ptr = current_position + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (current_byte == 0x23) {\n            parse_and_process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *current_position = 0;\n      if (current_position[1] == 0xd) {\n        next_ptr = current_position + 1;\n        next_byte = current_position + 2;\n      }\n      else {\n        next_byte = current_position + 1;\n      }\nLAB_00114553:\n      current_byte = *line_start;\n      while ((current_byte == 0x20 || (current_position = line_start, current_byte == 9))) {\n        current_position = line_start + 1;\n        line_start = line_start + 1;\n        current_byte = *current_position;\n      }\n      do {\n        if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n        if (current_byte == 0) goto LAB_00114599;\n        current_byte = current_position[1];\n        current_position = current_position + 1;\n      } while ((current_byte != 0x20) && (current_byte != 9));\n      if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        current_byte = current_position[1];\n        if ((((((current_byte == 9) || (current_byte == 0x20)) &&\n              ((current_byte = current_position[2], current_byte == 9 || (current_byte == 0x20)))) &&\n             ((current_byte = current_position[3], current_byte == 9 || (current_byte == 0x20)))) &&\n            ((current_byte = current_position[4], current_byte == 9 || (current_byte == 0x20)))) &&\n           ((current_byte = current_position[5], current_byte == 9 || (current_byte == 0x20)))) {\n          current_byte = current_position[6];\n          current_char = current_position + 6;\n          if ((current_byte == 9) || (current_byte == 0x20)) {\n            do {\n              do {\n                current_byte = current_char[1];\n                current_char = current_char + 1;\n              } while (current_byte == 0x20);\n            } while (current_byte == 9);\n          }\n        }\n        if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) {\n          translated_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          non_fatal(translated_message,file_path,line_number);\n        }\n      }\nLAB_00114599:\n      *current_position = 0;\n      if (line_start < current_position) {\n        hash_table_slot = (byte **)htab_find_slot(hash_table,line_start,1);\n        *hash_table_slot = line_start;\n      }\n      line_number = line_number + 1;\n      line_start = next_byte;\n      current_byte = next_ptr[1];\n    }\n    *file_content = buffer;\n  }\n  return;\n}\n\n",
            "current_name": "read_and_process_file_lines_00114460",
            "entrypoint": "0x00114460",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114460": "read_and_process_file_lines_00114460",
                "__n": "file_size",
                "__ptr": "buffer",
                "__stream": "file_stream",
                "bVar8": "current_byte",
                "bVar9": "next_byte",
                "iVar1": "line_number",
                "param_1": "file_path",
                "param_2": "hash_table",
                "param_3": "file_content",
                "pbVar10": "current_position",
                "pbVar11": "next_ptr",
                "pbVar12": "line_start",
                "pbVar6": "line_start_ptr",
                "pbVar7": "current_char",
                "pbVar9": "next_byte",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "ppbVar6": "hash_table_slot",
                "sVar5": "bytes_read",
                "uVar4": "translated_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114690": {
            "additional_data": {
                "DAT_001264b0": {
                    "long_sections_flag": 1,
                    "strcmp_flag_var4": 1
                },
                "DAT_001264b4": {
                    "data_var5": 1,
                    "section_mode": 1
                },
                "DAT_0012799c": {
                    "bfd_library_format": 1,
                    "case_var2": 1,
                    "data_var3": 1
                },
                "DAT_001279a4": {
                    "bfd_format": 1,
                    "case_var": 1,
                    "data_var1": 1
                },
                "DAT_001279e0": {
                    "strcmp_flag_var6": 1
                },
                "DAT_001279e2": {
                    "strcmp_flag_var5": 1
                },
                "DAT_001279e7": {
                    "strcmp_flag_var3": 1
                },
                "DAT_001279e9": {
                    "data_var10": 1,
                    "stat_negative_size_flag": 1,
                    "strcmp_flag_var2": 1
                },
                "DAT_001279eb": {
                    "data_var9": 1,
                    "strcmp_flag_var": 1,
                    "thin_archive_copy_flag": 1
                },
                "DAT_00127a30": {
                    "data_var8": 1,
                    "gnu_debug_link_flag": 1,
                    "gnu_debuglink_var": 1
                },
                "DAT_00127a40": {
                    "data_var7": 1,
                    "error_flag_var": 1,
                    "exit_flag": 1
                },
                "DAT_00127a48": {
                    "bfd_close_error_flag": 1,
                    "case_var3": 1,
                    "data_var4": 1
                },
                "FUNC_00114e50": {
                    "get_file_size": 1
                },
                "FUN_00104d25": {
                    "copy_object": 1,
                    "non_fatal": 1
                },
                "FUN_0011256b": {
                    "print_matching_formats": 1
                },
                "FUN_001126c0": {
                    "print_bfd_error_message": 1
                },
                "FUN_00113f50": {
                    "check_file_info": 1
                },
                "FUN_00114690": {
                    "copy_and_extract_files_from_archive": 1,
                    "copy_files_from_archive": 2,
                    "extract_and_copy_files": 1,
                    "extract_and_copy_files_from_archive": 10,
                    "extract_and_copy_from_archive": 1,
                    "extract_files_from_archive": 2,
                    "process_binary_file": 1
                },
                "FUN_00114d50": {
                    "execute_function_with_condition": 1
                },
                "FUN_00114e50": {
                    "get_file_size": 1
                },
                "FUN_00119dd0": {
                    "execute_report_and_exit": 1
                },
                "FUN_00119ed0": {
                    "report_and_process_data": 1
                },
                "FUN_0011a0e0": {
                    "create_temp_directory": 1
                },
                "__ptr": {
                    "long_pointer_var_19": 1,
                    "node_ptr": 1,
                    "pointer4": 1,
                    "pointer_to_func_info_structure": 1,
                    "pointer_to_u_int8_2": 1,
                    "pointer_to_uint64pointer": 1,
                    "pointer_to_undefined8_3": 1,
                    "pointer_to_unsigned_long3": 1,
                    "pointer_to_void2": 1,
                    "pointer_uint64_var3": 1,
                    "ptr_to_eight_bytes3": 1,
                    "ptr_to_temp_dir_struct": 1,
                    "temp_data_pointer": 1,
                    "undefined8_pointer_var19": 1,
                    "undefined8_ptr": 1,
                    "undefined8_ptr1": 1,
                    "undefined8_ptr2": 1,
                    "undefined8_ptr3": 1
                },
                "bVar1": {
                    "bit_variable_1": 1,
                    "byte1": 2,
                    "byte_flag": 1,
                    "byte_val": 1,
                    "byte_value": 1,
                    "byte_var": 10,
                    "byte_var1": 8,
                    "byte_var_1": 1,
                    "byte_variable": 1,
                    "byte_variable1": 3,
                    "flag1": 1
                },
                "bVar25": {
                    "bool1": 2,
                    "bool_flag2": 1,
                    "bool_val": 1,
                    "bool_value": 1,
                    "bool_var": 9,
                    "bool_var1": 4,
                    "bool_var25": 3,
                    "bool_var26": 1,
                    "bool_var_25": 1,
                    "bool_variable1": 2,
                    "bool_variable_1": 1,
                    "boolean_var": 1,
                    "boolean_variable": 1,
                    "boolean_variable1": 1,
                    "flag2": 1
                },
                "bVar26": {
                    "bool_flag": 1,
                    "bool_var2": 1,
                    "byte1": 1,
                    "byte2": 2,
                    "byte_val1": 1,
                    "byte_value2": 1,
                    "byte_var2": 11,
                    "byte_var26": 3,
                    "byte_var27": 1,
                    "byte_var_2": 2,
                    "byte_var_26": 1,
                    "byte_variable1": 1,
                    "byte_variable2": 3,
                    "byte_variable_1": 1
                },
                "cVar2": {
                    "char1": 2,
                    "char_flag": 1,
                    "char_val1": 1,
                    "char_value1": 1,
                    "char_var": 1,
                    "char_var1": 10,
                    "char_var2": 5,
                    "char_var_1": 1,
                    "char_var_2": 2,
                    "char_variable": 1,
                    "char_variable1": 3,
                    "char_variable_1": 1,
                    "check_result": 1
                },
                "cVar3": {
                    "char2": 2,
                    "char_flag2": 1,
                    "char_val2": 1,
                    "char_value2": 1,
                    "char_var2": 10,
                    "char_var3": 5,
                    "char_var_2": 1,
                    "char_var_3": 2,
                    "char_variable2": 4,
                    "char_variable_2": 1,
                    "check_format_result": 1,
                    "inner_char_var": 1
                },
                "check_file_info_00113f50": {
                    "check_file_info": 1
                },
                "create_temp_directory_0011a0e0": {
                    "create_temp_directory": 1
                },
                "execute_function_with_condition_00114d50": {
                    "execute_function_with_condition": 1
                },
                "execute_report_and_exit_00119dd0": {
                    "execute_report_and_exit": 1
                },
                "iVar4": {
                    "index_var": 2,
                    "inner_int_var": 1,
                    "int1": 2,
                    "int_value1": 1,
                    "int_var1": 9,
                    "int_var4": 4,
                    "int_var_1": 2,
                    "int_variable1": 2,
                    "int_variable_1": 1,
                    "integer1": 1,
                    "integer_var_4": 1,
                    "integer_variable1": 2,
                    "iter1": 1,
                    "operation_result": 1
                },
                "iVar5": {
                    "bfd_stat_result": 2,
                    "int2": 2,
                    "int_value2": 1,
                    "int_var2": 9,
                    "int_var5": 4,
                    "int_var_2": 2,
                    "int_variable2": 2,
                    "int_variable_2": 1,
                    "integer2": 1,
                    "integer_var_5": 1,
                    "integer_variable2": 2,
                    "iter2": 1,
                    "return_value": 1,
                    "status_var": 1
                },
                "lStack_98": {
                    "archive_size": 1,
                    "file_size": 1,
                    "file_size_error": 1,
                    "input_file_size": 1,
                    "l_stack_var": 1,
                    "l_stack_var1": 1,
                    "long4": 2,
                    "long_stack": 2,
                    "long_stack_98": 1,
                    "long_stack_value1": 1,
                    "long_stack_var": 2,
                    "long_stack_var1": 1,
                    "long_stack_var33": 1,
                    "long_stack_var_98": 1,
                    "long_stack_variable": 1,
                    "long_stack_variable1": 1,
                    "long_var3": 1,
                    "long_var4": 4,
                    "long_var_4": 2,
                    "long_variable4": 1,
                    "long_variable_3": 1,
                    "seek_position": 1,
                    "stack_var2": 1
                },
                "lVar13": {
                    "file_size": 1,
                    "file_size_temp": 1,
                    "long2": 3,
                    "long_val2": 1,
                    "long_var1": 1,
                    "long_var13": 4,
                    "long_var2": 9,
                    "long_var_13": 1,
                    "long_var_2": 2,
                    "long_variable2": 4,
                    "long_variable_2": 1,
                    "stat_result": 1,
                    "temp_long": 1
                },
                "lVar21": {
                    "block_size": 1,
                    "buffer_size": 1,
                    "copy_size": 1,
                    "long3": 3,
                    "long_var21": 1,
                    "long_var22": 1,
                    "long_var3": 7,
                    "long_var_21": 1,
                    "long_var_3": 2,
                    "long_variable3": 4,
                    "temp_size": 1,
                    "temp_var1": 1
                },
                "lVar8": {
                    "count_temp": 1,
                    "long1": 3,
                    "long_val1": 1,
                    "long_value1": 1,
                    "long_var": 4,
                    "long_var1": 8,
                    "long_var8": 4,
                    "long_var_1": 2,
                    "long_var_8": 1,
                    "long_variable1": 4,
                    "long_variable_1": 1
                },
                "local_158": {
                    "file_stat": 1,
                    "inner_stat_buf": 1,
                    "input_file_stat": 1,
                    "local_stat": 1,
                    "local_stat_buffer": 1,
                    "local_stat_info": 1,
                    "local_stat_struct": 1,
                    "local_stat_structure": 2,
                    "local_var3": 1,
                    "local_variable3": 1,
                    "stat": 1,
                    "stat_object": 1,
                    "stat_struct": 3,
                    "stat_struct1": 2,
                    "stat_struct_local_158": 1,
                    "stat_struct_var_local_158": 1,
                    "stat_structure": 3,
                    "stat_structure2": 1,
                    "stat_structure_var30": 1,
                    "stat_val": 1,
                    "stat_var": 1,
                    "stat_var1": 1,
                    "struct_variable1": 1
                },
                "local_198": {
                    "file_sizes_array_ptr": 1,
                    "local_long_pointer": 1,
                    "local_long_var_ptr": 1,
                    "local_pointer2": 2,
                    "local_pointer_to_long": 3,
                    "local_var2": 2,
                    "local_variable2": 1,
                    "long_array1": 1,
                    "long_pointer": 1,
                    "long_pointer_var": 1,
                    "long_pointer_var29": 1,
                    "long_pointer_var_local_198": 1,
                    "long_ptr": 2,
                    "long_ptr1": 2,
                    "long_ptr_local_198": 1,
                    "output_bfd_list": 1,
                    "pointer_long_var1": 1,
                    "pointer_to_long": 2,
                    "pointer_to_long1": 1,
                    "pointer_to_long2": 1,
                    "ptr_to_long": 1,
                    "temp_file_pointer": 1,
                    "tempdir_index": 1
                },
                "local_1a0": {
                    "bfd_handle_output": 1,
                    "bfd_struct_pointer": 1,
                    "local_pointer1": 2,
                    "local_pointer_to_bfd": 1,
                    "local_pointer_to_u8": 1,
                    "local_pointer_to_u_int8": 1,
                    "local_pointer_to_uint64": 1,
                    "local_var1": 2,
                    "local_variable1": 1,
                    "long_pointer_var_local_1a0": 1,
                    "output_bfd": 1,
                    "output_bfd_input_ptr": 1,
                    "output_bfd_ptr": 1,
                    "output_file": 1,
                    "output_file_pointer": 1,
                    "output_file_ptr": 1,
                    "pointer5": 1,
                    "pointer_to_undefined8_4": 1,
                    "pointer_to_void3": 1,
                    "pointer_u_int8_3": 1,
                    "pointer_uint64_var4": 1,
                    "ptr_to_eight_bytes4": 1,
                    "undefined8_pointer2": 1,
                    "undefined8_pointer_var28": 1,
                    "undefined8_ptr3": 2,
                    "undefined8_ptr4": 1,
                    "undefined8_ptr_local_1a0": 1
                },
                "local_c8": {
                    "array_of_void_pointers": 1,
                    "local_array": 1,
                    "local_pointer_array": 1,
                    "local_pointer_to_void_array": 2,
                    "local_var3": 1,
                    "local_var4": 1,
                    "local_var_array": 1,
                    "local_variable_array": 1,
                    "pointer_array1": 1,
                    "pointer_void_array": 1,
                    "pointer_void_var2": 1,
                    "ptr_to_array_of_three_pointers": 1,
                    "temp_dir_paths": 1,
                    "temp_dir_ptr_array": 1,
                    "temp_directories": 1,
                    "tempdir_array": 2,
                    "void_array1": 1,
                    "void_pointer_array": 2,
                    "void_pointer_array_var31": 1,
                    "void_pointer_array_var_local_c8": 1,
                    "void_ptr_array": 3,
                    "void_ptr_array_local_c8": 1,
                    "void_ptr_ptr1": 1
                },
                "param_1": {
                    "file_path": 3,
                    "input_file": 8,
                    "input_file_name": 1,
                    "input_file_path": 17,
                    "input_filename": 1
                },
                "param_2": {
                    "output_dir_name": 1,
                    "output_directory_path": 1,
                    "output_file": 8,
                    "output_file_path": 18,
                    "output_filename": 1,
                    "output_path": 1
                },
                "param_3": {
                    "fd": 1,
                    "file_descriptor": 28,
                    "output_file_descriptor": 1
                },
                "param_4": {
                    "attributes": 1,
                    "bfd_options": 1,
                    "bfd_stat": 1,
                    "bfd_statistics": 1,
                    "buffer": 1,
                    "file_attributes": 3,
                    "file_stat": 3,
                    "file_status": 1,
                    "input_filename": 1,
                    "mode": 1,
                    "output_file_stats": 1,
                    "params": 1,
                    "stat_buf": 3,
                    "stat_buffer": 1,
                    "stat_info": 1,
                    "stat_struct": 2,
                    "stat_structure": 2,
                    "statistics": 1,
                    "target_arch": 1,
                    "target_file": 1,
                    "target_stat_struct": 1,
                    "target_stats": 1
                },
                "param_5": {
                    "attributes": 1,
                    "bfd_data": 1,
                    "bfd_file_flag": 1,
                    "bfd_flags": 1,
                    "bfd_input": 1,
                    "bfd_open_flags": 2,
                    "bfd_options": 1,
                    "bfd_parameters": 1,
                    "bfd_target": 1,
                    "file_access_mode": 1,
                    "file_format": 3,
                    "file_open_mode": 1,
                    "file_options": 1,
                    "flags": 1,
                    "format": 1,
                    "open_flags": 1,
                    "open_mode": 1,
                    "output_filename": 1,
                    "target": 3,
                    "target_format": 5,
                    "target_triple": 1
                },
                "param_6": {
                    "archive_entry_size": 1,
                    "bfd_open_mode": 1,
                    "copy_flag": 1,
                    "copy_flags": 1,
                    "default_section_size": 1,
                    "file_mode": 1,
                    "file_size": 14,
                    "input_format": 1,
                    "section_size": 3,
                    "section_vma": 1,
                    "size": 1,
                    "target_mode": 1,
                    "target_size": 1,
                    "temp_dir_size": 1,
                    "temp_directory_path": 1
                },
                "param_7": {
                    "archive_entry_flags": 1,
                    "condition": 1,
                    "condition_flag": 5,
                    "copy_flag": 5,
                    "copy_flags": 2,
                    "debug_flag": 1,
                    "debug_mode": 1,
                    "debug_option": 1,
                    "execute_condition": 1,
                    "execute_function_flag": 1,
                    "file_copy_options": 1,
                    "flag": 6,
                    "flags": 2,
                    "param_7": 1,
                    "preserve_dates_and_times": 1
                },
                "pcVar15": {
                    "char_pointer1": 1,
                    "char_pointer_var15": 1,
                    "char_var3": 1,
                    "char_variable3": 1,
                    "pointer_char1": 1,
                    "pointer_to_char": 1,
                    "pointer_to_char1": 3,
                    "pointer_to_char_1": 1,
                    "ptr_to_char1": 1,
                    "string1": 1,
                    "string_var1": 2,
                    "string_var15": 1,
                    "temp_dir_path": 5,
                    "temp_directory_path": 2,
                    "tempdir_path": 2
                },
                "pcVar16": {
                    "archived_file_path": 1,
                    "char_variable4": 1,
                    "current_file_path": 1,
                    "pointer_char2": 1,
                    "pointer_to_char_2": 1,
                    "string_var2": 1
                },
                "pcVar17": {
                    "char_pointer1": 1,
                    "char_pointer2": 1,
                    "char_pointer_var17": 1,
                    "char_ptr_var17": 1,
                    "char_var4": 1,
                    "current_file_path": 2,
                    "current_ptr1": 1,
                    "file_path": 1,
                    "inner_char_var2": 1,
                    "path_temp": 1,
                    "pointer_char3": 1,
                    "pointer_char_var2": 1,
                    "pointer_to_char2": 4,
                    "pointer_to_char_3": 1,
                    "ptr_to_char2": 1,
                    "string2": 1,
                    "string_var17": 1,
                    "string_var2": 1,
                    "string_var3": 1,
                    "sub_file_path": 1
                },
                "pcVar18": {
                    "char_pointer2": 1,
                    "char_pointer3": 1,
                    "char_pointer_var18": 1,
                    "char_ptr_var18": 1,
                    "char_var5": 1,
                    "concatenated_path": 2,
                    "current_ptr2": 1,
                    "path_concat": 1,
                    "pointer_char4": 1,
                    "pointer_char_var3": 1,
                    "pointer_to_char3": 4,
                    "pointer_to_char_4": 1,
                    "ptr_to_char3": 1,
                    "string3": 1,
                    "string_var18": 1,
                    "string_var3": 1,
                    "string_var4": 1,
                    "temp_file": 1,
                    "temp_file_path": 2
                },
                "pcVar19": {
                    "char_pointer3": 1,
                    "double_pointer_char_var": 1,
                    "pointer_char5": 1,
                    "pointer_to_char_5": 1,
                    "string_var5": 1
                },
                "pcVar20": {
                    "bfd_close_function": 1,
                    "close_function": 1,
                    "close_function_ptr": 2,
                    "code_pointer_var": 1,
                    "code_pointer_var21": 1,
                    "code_ptr": 2,
                    "error_code_function_pointer": 1,
                    "function_pointer1": 1,
                    "function_ptr20": 1,
                    "function_to_close_bfd": 1,
                    "pointer_to_code": 3,
                    "pointer_to_code_var": 1,
                    "pointer_to_function": 5,
                    "ptr_to_function": 1
                },
                "pcVar23": {
                    "char_pointer4": 2,
                    "char_pointer_var": 1,
                    "char_pointer_var24": 1,
                    "char_ptr1": 1,
                    "char_ptr_var23": 1,
                    "char_var4": 1,
                    "char_var6": 1,
                    "char_var_3": 1,
                    "char_variable5": 1,
                    "current_ptr3": 1,
                    "filename": 1,
                    "inner_file_path": 1,
                    "pointer_char6": 1,
                    "pointer_char_var4": 1,
                    "pointer_to_c_string": 1,
                    "pointer_to_char": 1,
                    "pointer_to_char4": 4,
                    "pointer_to_char_7": 1,
                    "ptr_to_char4": 1,
                    "string4": 1,
                    "string_var23": 1,
                    "string_var4": 1,
                    "string_var6": 1,
                    "temp_pointer": 1
                },
                "pcVar24": {
                    "pointer_to_stat": 1,
                    "stat_structure_ptr": 1
                },
                "piVar10": {
                    "int_array1": 1,
                    "int_pointer_var": 1,
                    "int_pointer_var10": 1,
                    "int_pointer_var_10": 1,
                    "int_ptr": 3,
                    "int_ptr1": 2,
                    "int_ptr10": 1,
                    "int_ptr_var10": 2,
                    "integer_pointer": 1,
                    "pointer_int": 1,
                    "pointer_int_1": 1,
                    "pointer_int_var1": 1,
                    "pointer_to_int": 7,
                    "pointer_to_int1": 1,
                    "pointer_to_int_1": 1,
                    "pointer_to_int_var1": 1,
                    "pointer_to_integer": 2,
                    "ptr_error": 1,
                    "ptr_to_int": 1
                },
                "piVar15": {
                    "char_pointer_var_15": 1
                },
                "piVar17": {
                    "char_pointer_var_17": 1
                },
                "piVar18": {
                    "char_pointer_var_18": 1
                },
                "ppcVar16": {
                    "archive_file": 1,
                    "archive_member_path": 1,
                    "archived_file": 1,
                    "archived_file_ptr": 1,
                    "archived_files_ptr": 1,
                    "bfd_struct_pointer_pointer": 1,
                    "char_double_pointer_var_16": 1,
                    "char_pointer_pointer2": 1,
                    "char_ptr_ptr2": 2,
                    "double_pointer_to_char_array": 1,
                    "pointer_pointer_char_var1": 1,
                    "pointer_to_char_pointer2": 1,
                    "pointer_to_pointer_char2": 1,
                    "pointer_to_pointer_to_char1": 1,
                    "ptr_to_ptr_to_char1": 1,
                    "string_array2": 1,
                    "string_array_var16": 1,
                    "string_ptr_pointer16": 1
                },
                "ppcVar19": {
                    "archive_file_temp": 1,
                    "archived_files_ptr_copy": 1,
                    "bfd_struct_pointer_pointer_2": 1,
                    "char_ptr_ptr3": 2,
                    "double_pointer_char_var2": 1,
                    "double_pointer_to_char_array2": 1,
                    "pointer_pointer_char_var2": 1,
                    "pointer_to_char_pointer2": 1,
                    "pointer_to_char_pointer3": 1,
                    "pointer_to_pointer_char3": 1,
                    "pointer_to_pointer_to_char": 1,
                    "pointer_to_pointer_to_char2": 1,
                    "ptr_to_ptr_to_char2": 1,
                    "string_array3": 1,
                    "string_array_var20": 1,
                    "string_ptr_pointer19": 1,
                    "temp_archive_file_ptr": 1,
                    "temp_archive_member_path": 1
                },
                "ppcVar20": {
                    "function_pointer_var_20": 1,
                    "pointer_to_code": 1
                },
                "ppcVar23": {
                    "char_double_pointer_var_23": 1
                },
                "ppcVar6": {
                    "char_double_pointer_var_6": 1,
                    "char_pointer_pointer1": 1,
                    "char_pointer_pointer_var_1": 1,
                    "char_ptr_ptr": 2,
                    "char_ptr_ptr1": 2,
                    "char_ptr_ptr_var6": 1,
                    "double_pointer_char": 1,
                    "pointer_pointer_char": 1,
                    "pointer_to_char_array1": 2,
                    "pointer_to_char_pointer": 3,
                    "pointer_to_char_pointer1": 2,
                    "pointer_to_char_pointer_1": 1,
                    "pointer_to_pointer_char": 1,
                    "pointer_to_pointer_char1": 1,
                    "pointer_to_pointer_char_var1": 2,
                    "pointer_to_string_array": 1,
                    "ptr_to_array_of_strings": 1,
                    "string_array": 1,
                    "string_array1": 1,
                    "string_array_var6": 2,
                    "string_ptr_pointer6": 1
                },
                "print_bfd_error_message_001126c0": {
                    "print_bfd_error_message": 1
                },
                "print_matching_formats_0011256b": {
                    "print_matching_formats": 1
                },
                "psVar24": {
                    "file_stat_pointer": 1,
                    "file_stat_ptr_var24": 1,
                    "pointer_stat": 1,
                    "pointer_stat_var1": 1,
                    "pointer_to_stat": 7,
                    "pointer_to_stat_buffer": 1,
                    "pointer_to_stat_structure": 2,
                    "ptr_to_struct1": 1,
                    "stat_ptr": 4,
                    "stat_ptr1": 2,
                    "stat_struct_pointer": 1,
                    "stat_struct_ptr": 1,
                    "stat_struct_var_24": 1,
                    "stat_structure": 1,
                    "stat_structure_pointer": 1,
                    "stat_structure_ptr2": 1,
                    "stat_structure_var25": 1,
                    "struct_ptr24": 1
                },
                "puVar14": {
                    "bfd_file_descriptor": 1,
                    "bfd_file_ptr": 1,
                    "bfd_handle_input": 1,
                    "bfd_input_ptr": 1,
                    "bfd_pointer": 1,
                    "bfd_ptr": 1,
                    "bfd_struct_pointer": 1,
                    "input_bfd": 1,
                    "input_file_pointer": 1,
                    "long_pointer_var_14": 1,
                    "pointer3": 1,
                    "pointer_to_bfd": 1,
                    "pointer_to_bfd_structure": 1,
                    "pointer_to_u8_1": 1,
                    "pointer_to_uint64_2": 1,
                    "pointer_to_undefined8": 2,
                    "pointer_to_undefined8_2": 1,
                    "pointer_to_unsigned_long2": 1,
                    "pointer_to_void1": 1,
                    "pointer_u_int8_2": 1,
                    "pointer_uint64_var2": 1,
                    "ptr_to_eight_bytes2": 1,
                    "undefined8_pointer_var14": 1,
                    "undefined8_ptr": 1,
                    "undefined8_ptr1": 1,
                    "undefined8_ptr14": 1,
                    "undefined8_ptr2": 2
                },
                "puVar15": {
                    "pointer_char_var1": 1
                },
                "puVar19": {
                    "archived_file_bfd": 1,
                    "undefined8_ptr2": 1
                },
                "puVar9": {
                    "long_pointer_var_9": 1,
                    "pointer2": 1,
                    "pointer_to_long1": 1,
                    "pointer_to_u8": 1,
                    "pointer_to_u_int8": 1,
                    "pointer_to_uint64": 4,
                    "pointer_to_uint64_var1": 1,
                    "pointer_to_undefined": 1,
                    "pointer_to_undefined8": 2,
                    "pointer_to_unsigned_long": 1,
                    "pointer_u_int64": 1,
                    "pointer_u_int8_1": 1,
                    "pointer_uint64_var1": 1,
                    "pointer_var9": 1,
                    "ptr_temp": 1,
                    "ptr_to_eight_bytes": 1,
                    "ptr_var9": 1,
                    "undefined8_pointer": 1,
                    "undefined8_pointer_var9": 1,
                    "undefined8_ptr": 2,
                    "undefined8_ptr1": 2,
                    "undefined8_ptr9": 1,
                    "void_pointer_var_2": 1,
                    "void_ptr": 1
                },
                "pvVar7": {
                    "buffer": 1,
                    "pointer1": 1,
                    "pointer_to_void": 9,
                    "pointer_to_void_var1": 1,
                    "pointer_var": 1,
                    "pointer_void": 1,
                    "pointer_void1": 1,
                    "pointer_void_var": 1,
                    "ptr_to_void": 1,
                    "ptr_var7": 1,
                    "void_pointer": 1,
                    "void_pointer1": 1,
                    "void_pointer_var": 1,
                    "void_pointer_var7": 1,
                    "void_pointer_var_7": 1,
                    "void_ptr": 3,
                    "void_ptr1": 2,
                    "void_ptr7": 1,
                    "void_ptr_var7": 1
                },
                "report_and_process_data_00119ed0": {
                    "report_and_process_data": 1
                },
                "uStack_b0": {
                    "file_permission": 1,
                    "file_permissions": 2,
                    "file_protection": 1,
                    "permission_flags": 1,
                    "stack_var1": 1,
                    "u_stack_var": 1,
                    "u_stack_var1": 1,
                    "uint2": 1,
                    "uint32_stack_value1": 1,
                    "uint4": 1,
                    "uint_stack": 2,
                    "uint_stack_b0": 1,
                    "uint_stack_var": 1,
                    "uint_stack_var32": 1,
                    "uint_stack_var_b0": 1,
                    "uint_var": 1,
                    "uint_var2": 4,
                    "uint_var_2": 1,
                    "uint_variable2": 1,
                    "unsigned_int_var": 1,
                    "unsigned_int_variable_1": 1,
                    "unsigned_stack_var": 1,
                    "unsigned_stack_var1": 1,
                    "unsigned_stack_variable": 1,
                    "unsigned_stack_variable1": 1
                },
                "uVar11": {
                    "eight_byte_value1": 1,
                    "long_var_11": 1,
                    "message1": 1,
                    "u8_variable_1": 1,
                    "uint1": 1,
                    "uint64_value1": 1,
                    "uint64_var": 1,
                    "uint64_var1": 3,
                    "uint64_var_1": 1,
                    "uint64_variable1": 2,
                    "uintptr_var11": 1,
                    "ulong1": 1,
                    "ulong_var_1": 1,
                    "undefined8_1": 1,
                    "undefined8_val1": 1,
                    "undefined8_var": 1,
                    "undefined8_var1": 4,
                    "undefined8_var11": 2,
                    "undefined8_variable1": 1,
                    "undefined_var1": 1,
                    "unsigned_long_var1": 1,
                    "unsigned_var11": 1,
                    "unsigned_variable1": 1
                },
                "uVar12": {
                    "eight_byte_value2": 1,
                    "long_var_12": 1,
                    "message2": 1,
                    "u8_variable_2": 1,
                    "uint2": 1,
                    "uint64_value2": 1,
                    "uint64_var2": 4,
                    "uint64_var_2": 1,
                    "uint64_variable2": 2,
                    "uintptr_var12": 1,
                    "ulong2": 1,
                    "ulong_var_2": 1,
                    "undefined8_2": 1,
                    "undefined8_val2": 1,
                    "undefined8_var12": 2,
                    "undefined8_var2": 5,
                    "undefined8_variable2": 1,
                    "undefined_var2": 1,
                    "unsigned_long_var2": 1,
                    "unsigned_var12": 1,
                    "unsigned_variable2": 1
                },
                "uVar22": {
                    "archive_member_flag": 1,
                    "format_flag": 1,
                    "temp_var2": 1,
                    "uint1": 2,
                    "uint3": 1,
                    "uint32_variable1": 1,
                    "uint_val": 1,
                    "uint_value": 1,
                    "uint_var": 4,
                    "uint_var1": 4,
                    "uint_var22": 2,
                    "uint_var23": 1,
                    "uint_var_22": 1,
                    "uint_variable1": 1,
                    "unsigned_int_variable_2": 1,
                    "unsigned_var": 1,
                    "unsigned_var22": 1,
                    "unsigned_variable": 1,
                    "unsigned_variable3": 1
                }
            },
            "called": [
                "FUN_00104820",
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00104690",
                "FUN_0011256b",
                "FUN_00104810",
                "FUN_001040b0",
                "FUN_00104780",
                "FUN_00114d50",
                "FUN_00104908",
                "FUN_00104370",
                "FUN_001043c0",
                "FUN_00104900",
                "FUN_00104240",
                "FUN_0011a0e0",
                "FUN_001041b0",
                "FUN_00119ed0",
                "FUN_00119dd0",
                "FUN_00104890",
                "FUN_00104d25",
                "FUN_001043a0",
                "FUN_00113f50",
                "FUN_001048f0",
                "FUN_001048d0",
                "FUN_00104500",
                "FUN_001041f0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid copy_and_extract_files_from_archive_00114690(undefined8 input_file_path,undefined8 output_file_path,int file_descriptor,undefined8 file_attributes,\n                 undefined8 target_format,long file_size,undefined8 flag)\n\n{\n  byte byte_var;\n  char char_var1;\n  char char_var2;\n  int int_var1;\n  int int_var2;\n  char **pointer_to_char_pointer;\n  void *pointer_to_void;\n  long long_var1;\n  undefined8 *pointer_to_uint64;\n  int *pointer_to_int;\n  undefined8 undefined8_var1;\n  undefined8 undefined8_var2;\n  long long_var2;\n  undefined8 *undefined8_ptr2;\n  char *temp_dir_path;\n  char **char_ptr_ptr2;\n  char *pointer_to_char2;\n  char *pointer_to_char3;\n  undefined8 *ptr_to_temp_dir_struct;\n  char **char_ptr_ptr3;\n  code *pointer_to_function;\n  long long_var3;\n  uint uint_var1;\n  char *pointer_to_char4;\n  stat *pointer_to_stat;\n  bool bool_var;\n  byte byte_var2;\n  undefined8 *local_pointer1;\n  long *local_pointer_to_long;\n  stat stat_struct;\n  void *void_ptr_array [3];\n  uint uint_var2;\n  long long_var4;\n  \n  byte_var2 = 0;\n  long_var2 = get_file_size();\n  if (long_var2 < 1) {\n    if (long_var2 == 0) {\n      undefined8_var2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      non_fatal(undefined8_var2,input_file_path);\n    }\n    DAT_00127a40 = 1;\n    return;\n  }\n  undefined8_ptr2 = (undefined8 *)bfd_openr(input_file_path,target_format);\n  if ((undefined8_ptr2 == (undefined8 *)0x0) || (int_var2 = bfd_stat(undefined8_ptr2,file_attributes), int_var2 != 0)) {\n    bfd_nonfatal_message(input_file_path,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  switch(DAT_001279a4) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)undefined8_ptr2 + 0x44) = *(uint *)((long)undefined8_ptr2 + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)undefined8_ptr2 + 0x44) = *(uint *)((long)undefined8_ptr2 + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)undefined8_ptr2 + 0x44) = *(uint *)((long)undefined8_ptr2 + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)undefined8_ptr2 + 0x44) = *(uint *)((long)undefined8_ptr2 + 0x44) | 0x8000;\n  }\n  if (DAT_0012799c == 1) {\n    *(uint *)((long)undefined8_ptr2 + 0x44) = *(uint *)((long)undefined8_ptr2 + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012799c == 2) {\n    *(uint *)((long)undefined8_ptr2 + 0x44) = *(uint *)((long)undefined8_ptr2 + 0x44) | 0x40000;\n  }\n  char_var1 = bfd_check_format(undefined8_ptr2,2);\n  if (char_var1 != '\\0') {\n    if (file_size == 0) {\n      char_var1 = '\\0';\n      file_size = *(long *)undefined8_ptr2[1];\n    }\n    if (file_descriptor < 0) {\n      local_pointer1 = (undefined8 *)bfd_openw(output_file_path,file_size);\n    }\n    else {\n      local_pointer1 = (undefined8 *)bfd_fdopenw(output_file_path,file_size,file_descriptor);\n    }\n    if (local_pointer1 != (undefined8 *)0x0) {\n      if (DAT_00127a30 != 0) {\n        undefined8_var2 = *undefined8_ptr2;\n        undefined8_var1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        non_fatal(undefined8_var1,undefined8_var2);\n        DAT_00127a30 = 0;\n      }\n      set_long_section_mode(local_pointer1,undefined8_ptr2,DAT_001264b4);\n      local_pointer_to_long = local_pointer1 + 0x1f;\n      if ((*(byte *)((long)undefined8_ptr2 + 0x49) & 0x10) != 0) {\n        DAT_00127a40 = 1;\n        bfd_set_error(5);\n        undefined8_var2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        bfd_nonfatal_message(0,undefined8_ptr2,0,undefined8_var2);\n        return;\n      }\n      temp_dir_path = (char *)make_tempdir(*local_pointer1);\n      if (temp_dir_path == (char *)0x0) {\n        pointer_to_int = __errno_location();\n        temp_dir_path = strerror(*pointer_to_int);\n        undefined8_var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        fatal(undefined8_var2,temp_dir_path);\n      }\n      if (DAT_00127a48 == 7) {\n        byte_var = *(byte *)((long)undefined8_ptr2 + 0x49);\n        uint_var1 = 0;\n      }\n      else {\n        byte_var = *(byte *)((long)undefined8_ptr2 + 0x49);\n        uint_var1 = byte_var >> 3 & 1;\n      }\n      bool_var = _DAT_001264b0 != 0;\n      *(byte *)((long)local_pointer1 + 0x49) =\n           byte_var & 0x10 | (byte)(uint_var1 << 3) | *(byte *)((long)local_pointer1 + 0x49) & 0xe7;\n      if (bool_var) {\n        *(uint *)((long)local_pointer1 + 0x44) = *(uint *)((long)local_pointer1 + 0x44) | 0x2000;\n      }\n      ptr_to_temp_dir_struct = (undefined8 *)0x0;\n      char_ptr_ptr2 = (char **)bfd_openr_next_archived_file(undefined8_ptr2,0);\n      char_var2 = bfd_set_format(local_pointer1,*(byte *)(undefined8_ptr2 + 9) & 7);\n      if (char_var2 == '\\0') {\n        DAT_00127a40 = 1;\n        bfd_nonfatal_message(0,local_pointer1,0,0);\n        remove_directory_and_free_memory_00114b84();\n        return;\n      }\n      while ((DAT_00127a40 == 0 && (char_ptr_ptr2 != (char **)0x0))) {\n        pointer_to_char3 = *char_ptr_ptr2;\n        pointer_to_char2 = pointer_to_char3;\n        if (*pointer_to_char3 == '/') {\nLAB_0010527d:\n          undefined8_var2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          non_fatal(undefined8_var2,pointer_to_char3);\nLAB_00104e93:\n          DAT_00127a40 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pointer_to_char2 != '\\0') {\n          pointer_to_char4 = pointer_to_char2;\n          if ((*pointer_to_char2 == '.') && (pointer_to_char4 = pointer_to_char2 + 1, pointer_to_char2[1] == '.')) {\n            pointer_to_char4 = pointer_to_char2 + 2;\n            if ((pointer_to_char2[2] == '\\0') || (pointer_to_char2[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pointer_to_char4 != '\\0' && (*pointer_to_char4 != '/')); pointer_to_char4 = pointer_to_char4 + 1) {\n          }\n          pointer_to_char2 = pointer_to_char4;\n          if (*pointer_to_char4 == '/') {\n            extract_and_copy_files_from_archive_001052a2();\n            return;\n          }\n        }\n        pointer_to_char3 = (char *)concat(temp_dir_path,&DAT_0011b47d);\n        int_var2 = stat(pointer_to_char3,&stat_struct);\n        pointer_to_uint64 = ptr_to_temp_dir_struct;\n        if (-1 < int_var2) {\n          long_var2 = make_tempdir(pointer_to_char3);\n          free(pointer_to_char3);\n          if (long_var2 == 0) {\n            pointer_to_int = __errno_location();\n            pointer_to_char3 = strerror(*pointer_to_int);\n            undefined8_var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            non_fatal(undefined8_var2,pointer_to_char3);\n            goto LAB_00104e93;\n          }\n          pointer_to_uint64 = (undefined8 *)xmalloc(0x18);\n          pointer_to_char3 = *char_ptr_ptr2;\n          *pointer_to_uint64 = ptr_to_temp_dir_struct;\n          pointer_to_uint64[2] = 0;\n          pointer_to_uint64[1] = long_var2;\n          pointer_to_char3 = (char *)concat(long_var2,&DAT_0011b47d,pointer_to_char3);\n        }\n        int_var2 = 0;\n        if (DAT_001279eb != '\\0') {\n          pointer_to_stat = &stat_struct;\n          for (long_var2 = 0x24; long_var2 != 0; long_var2 = long_var2 + -1) {\n            *(undefined4 *)&pointer_to_stat->st_dev = 0;\n            pointer_to_stat = (stat *)((long)pointer_to_stat + (ulong)byte_var2 * -8 + 4);\n          }\n          char_ptr_ptr3 = (char **)char_ptr_ptr2[0x1d];\n          if ((char **)char_ptr_ptr2[0x1d] == (char **)0x0) {\n            char_ptr_ptr3 = char_ptr_ptr2;\n          }\n          int_var2 = (**(code **)(char_ptr_ptr3[1] + 0x1e8))(char_ptr_ptr2,&stat_struct);\n          if (int_var2 != 0) {\n            pointer_to_char2 = *char_ptr_ptr2;\n            undefined8_var2 = dcgettext(0,\"internal stat error on %s\",5);\n            non_fatal(undefined8_var2,pointer_to_char2);\n          }\n        }\n        ptr_to_temp_dir_struct = (undefined8 *)xmalloc(0x18);\n        ptr_to_temp_dir_struct[1] = pointer_to_char3;\n        *ptr_to_temp_dir_struct = pointer_to_uint64;\n        ptr_to_temp_dir_struct[2] = 0;\n        char_var2 = bfd_check_format(char_ptr_ptr2,1);\n        if (char_var2 == '\\0') {\n          undefined8_var2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          bfd_nonfatal_message(0,char_ptr_ptr2,0,undefined8_var2);\n          char_ptr_ptr3 = (char **)bfd_openw(pointer_to_char3,file_size);\n          if (char_ptr_ptr3 == (char **)0x0) {\nLAB_00104e80:\n            bfd_nonfatal_message(pointer_to_char3,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointer_to_char_pointer = (char **)char_ptr_ptr2[0x1d];\n          if ((char **)char_ptr_ptr2[0x1d] == (char **)0x0) {\n            pointer_to_char_pointer = char_ptr_ptr2;\n          }\n          int_var1 = (**(code **)(pointer_to_char_pointer[1] + 0x1e8))(char_ptr_ptr2);\n          long_var2 = long_var4;\n          if (int_var1 == 0) {\n            if (long_var4 < 0) {\n              bfd_get_archive_filename(char_ptr_ptr2);\n              undefined8_var2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              non_fatal(undefined8_var2);\n            }\n            else {\n              int_var1 = bfd_seek(char_ptr_ptr2,0,0);\n              if (int_var1 == 0) {\n                if (DAT_001279e9 != '\\0') {\n                  pointer_to_char2 = *char_ptr_ptr3;\n                  undefined8_var2 = bfd_get_archive_filename(char_ptr_ptr2);\n                  pointer_to_char4 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pointer_to_char4,undefined8_var2,pointer_to_char2);\n                }\n                pointer_to_void = (void *)xmalloc(0x2000);\n                for (; long_var2 != 0; long_var2 = long_var2 - long_var3) {\n                  long_var3 = 0x2000;\n                  if (long_var2 < 0x2001) {\n                    long_var3 = long_var2;\n                  }\n                  long_var1 = bfd_bread(pointer_to_void,long_var3,char_ptr_ptr2);\n                  pointer_to_char_pointer = char_ptr_ptr2;\n                  if ((long_var3 != long_var1) ||\n                     (long_var1 = bfd_bwrite(pointer_to_void,long_var3,char_ptr_ptr3), pointer_to_char_pointer = char_ptr_ptr3,\n                     long_var3 != long_var1)) {\n                    bfd_nonfatal_message(0,pointer_to_char_pointer,0,0);\n                    free(pointer_to_void);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*char_ptr_ptr3,uint_var2 | 0x100);\n                free(pointer_to_void);\n                char_var2 = bfd_close_all_done(char_ptr_ptr3);\n                if (char_var2 == '\\0') {\n                  bfd_nonfatal_message(pointer_to_char3,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              undefined8_var2 = bfd_get_archive_filename(char_ptr_ptr2);\n              bfd_nonfatal(undefined8_var2);\n            }\n          }\n          else {\n            bfd_nonfatal_message(0,char_ptr_ptr2,0,0);\n          }\nLAB_00104f00:\n          char_var2 = bfd_close_all_done(char_ptr_ptr3);\n          if (char_var2 == '\\0') {\n            bfd_nonfatal_message(pointer_to_char3,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(pointer_to_char3);\n          DAT_00127a40 = 1;\n        }\n        else {\n          if (char_var1 == '\\0') {\n            char_ptr_ptr3 = (char **)bfd_openw(pointer_to_char3,*(undefined8 *)char_ptr_ptr2[1]);\n          }\n          else {\n            char_ptr_ptr3 = (char **)bfd_openw(pointer_to_char3,file_size);\n          }\n          if (char_ptr_ptr3 == (char **)0x0) goto LAB_00104e80;\n          char_var2 = copy_object(char_ptr_ptr2,char_ptr_ptr3,flag);\n          if (char_var2 == '\\0') {\n            int_var1 = bfd_get_arch(char_ptr_ptr2);\n            if (int_var1 == 0) goto LAB_00104d75;\n            char_var2 = bfd_close_all_done(char_ptr_ptr3);\n            if (char_var2 == '\\0') {\n              bfd_nonfatal_message(pointer_to_char3,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          char_var2 = bfd_close(char_ptr_ptr3);\n          if (char_var2 == '\\0') {\n            bfd_nonfatal_message(pointer_to_char3,0,0,0);\n            DAT_00127a40 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279eb != '\\0') && (int_var2 == 0)) {\n            set_times(pointer_to_char3,&stat_struct);\n          }\n          long_var2 = bfd_openr(pointer_to_char3,file_size);\n          ptr_to_temp_dir_struct[2] = long_var2;\n          *local_pointer_to_long = long_var2;\n          local_pointer_to_long = (long *)(long_var2 + 0xf0);\n          char_ptr_ptr3 = (char **)bfd_openr_next_archived_file(undefined8_ptr2);\n          bfd_close(char_ptr_ptr2);\n          char_ptr_ptr2 = char_ptr_ptr3;\n        }\n      }\n      *local_pointer_to_long = 0;\n      pointer_to_void = (void *)xstrdup(*local_pointer1);\n      if (DAT_00127a40 == 0) {\n        pointer_to_function = bfd_close;\n      }\n      else {\n        pointer_to_function = bfd_close_all_done;\n      }\n      char_var1 = (*pointer_to_function)(local_pointer1);\n      if (char_var1 == '\\0') {\n        DAT_00127a40 = 1;\n        bfd_nonfatal_message(pointer_to_void,0,0,0);\n      }\n      free(pointer_to_void);\n      pointer_to_void = (void *)xstrdup(*undefined8_ptr2);\n      char_var1 = bfd_close(undefined8_ptr2);\n      if (char_var1 == '\\0') {\n        DAT_00127a40 = 1;\n        bfd_nonfatal_message(pointer_to_void,0,0,0);\n      }\n      free(pointer_to_void);\nLAB_00114b4b:\n      while (ptr_to_temp_dir_struct != (undefined8 *)0x0) {\n        if (ptr_to_temp_dir_struct[2] == 0) {\n          rmdir((char *)ptr_to_temp_dir_struct[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)ptr_to_temp_dir_struct[1]);\n        }\n        free((void *)ptr_to_temp_dir_struct[1]);\n        undefined8_ptr2 = (undefined8 *)*ptr_to_temp_dir_struct;\n        free(ptr_to_temp_dir_struct);\n        ptr_to_temp_dir_struct = undefined8_ptr2;\n      }\n      rmdir(temp_dir_path);\n      free(temp_dir_path);\n      return;\n    }\nLAB_00105231:\n    close(file_descriptor);\n    bfd_nonfatal_message(output_file_path,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  char_var1 = bfd_check_format_matches(undefined8_ptr2,1,void_ptr_array);\n  if (char_var1 == '\\0') {\n    int_var2 = bfd_get_error();\n    char_var1 = bfd_check_format_matches(undefined8_ptr2,3,&stat_struct);\n    if (char_var1 == '\\0') {\n      int_var1 = bfd_get_error();\n      if (int_var2 != int_var1) {\n        bfd_set_error(int_var2);\n      }\n      bfd_nonfatal_message(input_file_path,0,0,0);\n      if (int_var2 == 0xd) {\n        list_matching_formats(void_ptr_array[0]);\n      }\n      if (int_var1 != 0xd) {\n        DAT_00127a40 = 1;\n        return;\n      }\n      list_matching_formats(stat_struct.st_dev);\n      DAT_00127a40 = 1;\n      return;\n    }\n    if (int_var2 == 0xd) {\n      free(void_ptr_array[0]);\n    }\n  }\n  if (file_size == 0) {\n    file_size = *(long *)undefined8_ptr2[1];\n  }\n  if (file_descriptor < 0) {\n    long_var2 = bfd_openw(output_file_path,file_size);\n  }\n  else {\n    long_var2 = bfd_fdopenw(output_file_path,file_size,file_descriptor);\n  }\n  if (long_var2 == 0) goto LAB_00105231;\n  set_long_section_mode(long_var2,undefined8_ptr2,DAT_001264b4);\n  char_var1 = copy_object(undefined8_ptr2,long_var2,flag);\n  if (char_var1 == '\\0') {\n    DAT_00127a40 = 1;\n  }\n  else if (DAT_00127a40 == 0) {\n    char_var1 = bfd_close(long_var2);\n    goto LAB_001147d5;\n  }\n  char_var1 = bfd_close_all_done(long_var2);\nLAB_001147d5:\n  if (char_var1 != '\\x01') {\n    DAT_00127a40 = 1;\n    bfd_nonfatal_message(output_file_path,0,0,0);\n    return;\n  }\n  char_var1 = bfd_close(undefined8_ptr2);\n  if (char_var1 == '\\0') {\n    DAT_00127a40 = 1;\n    bfd_nonfatal_message(input_file_path,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "copy_and_extract_files_from_archive_00114690",
            "entrypoint": "0x00114690",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114690": "copy_and_extract_files_from_archive_00114690",
                "__ptr": "ptr_to_temp_dir_struct",
                "bVar1": "byte_var",
                "bVar25": "bool_var",
                "bVar26": "byte_var2",
                "cVar2": "char_var1",
                "cVar3": "char_var2",
                "iVar4": "int_var1",
                "iVar5": "int_var2",
                "lStack_98": "long_var4",
                "lVar13": "long_var2",
                "lVar21": "long_var3",
                "lVar8": "long_var1",
                "local_158": "stat_struct",
                "local_198": "local_pointer_to_long",
                "local_1a0": "local_pointer1",
                "local_c8": "void_ptr_array",
                "param_1": "input_file_path",
                "param_2": "output_file_path",
                "param_3": "file_descriptor",
                "param_4": "file_attributes",
                "param_5": "target_format",
                "param_6": "file_size",
                "param_7": "flag",
                "pcVar15": "temp_dir_path",
                "pcVar16": "char_variable4",
                "pcVar17": "pointer_to_char2",
                "pcVar18": "pointer_to_char3",
                "pcVar19": "char_pointer3",
                "pcVar20": "pointer_to_function",
                "pcVar23": "pointer_to_char4",
                "piVar10": "pointer_to_int",
                "ppcVar16": "char_ptr_ptr2",
                "ppcVar19": "char_ptr_ptr3",
                "ppcVar6": "pointer_to_char_pointer",
                "psVar24": "pointer_to_stat",
                "puVar14": "undefined8_ptr2",
                "puVar9": "pointer_to_uint64",
                "pvVar7": "pointer_to_void",
                "uStack_b0": "uint_var2",
                "uVar11": "undefined8_var1",
                "uVar12": "undefined8_var2",
                "uVar22": "uint_var1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114b84": {
            "additional_data": {
                "FUN_00114b84": {
                    "delete_directory": 1,
                    "remove_and_free_directory": 9,
                    "remove_directory": 17,
                    "remove_directory_and_free": 2,
                    "remove_directory_and_free_memory": 2
                },
                "param_9": {
                    "directory_path": 31
                }
            },
            "called": [
                "FUN_001048f0",
                "FUN_00104230"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00104d25"
            ],
            "code": "\nvoid remove_directory_and_free_memory_00114b84(void)\n\n{\n  char *directory_path;\n  \n  rmdir(directory_path);\n  free(directory_path);\n  return;\n}\n\n",
            "current_name": "remove_directory_and_free_memory_00114b84",
            "entrypoint": "0x00114b84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114b84": "remove_directory_and_free_memory_00114b84",
                "param_9": "directory_path"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114c20": {
            "additional_data": {
                "DAT_0011b499": {
                    "comparison_string": 2,
                    "keyword": 1,
                    "match_str": 1,
                    "pattern": 1,
                    "search_string": 2,
                    "section_name": 1,
                    "start_string": 1,
                    "target_string": 2
                },
                "DAT_001278d8": {
                    "flag": 7,
                    "global_flag": 1,
                    "is_processed": 2,
                    "return_value": 1,
                    "section_flag": 1,
                    "section_found": 1
                },
                "FUN_00113fb0": {
                    "": 1,
                    "compare_strings": 2,
                    "find_section": 1,
                    "find_section_list": 1,
                    "starts_with": 1,
                    "starts_with_lto": 1,
                    "starts_with_lto_priv_0_lto_priv_0": 5,
                    "starts_with_pattern": 1,
                    "startswith_check": 1,
                    "startswith_lto_priv_0": 1,
                    "startswith_lto_priv_0_lto_priv_0": 2
                },
                "FUN_00114190": {
                    "": 1,
                    "find_new_section_list": 1,
                    "find_section_entry": 2,
                    "find_section_list": 9,
                    "find_sections": 2,
                    "get_section_list": 1,
                    "nested_function": 1
                },
                "FUN_00114c20": {
                    "analyze_binary": 1,
                    "execute_function": 1,
                    "extract_section_data": 1,
                    "find_and_process_sections": 4,
                    "initialize_and_find_sections": 1,
                    "initialize_and_load_sections": 1,
                    "initialize_data": 2,
                    "initialize_section_list": 2,
                    "process_binary": 5,
                    "process_binary_data": 1,
                    "process_data": 2,
                    "process_function": 1,
                    "process_param": 2,
                    "process_section": 5,
                    "process_section_list": 1,
                    "process_sections": 1
                },
                "cVar1": {
                    "is_lto_privileged": 1,
                    "is_match": 1,
                    "is_section_match": 1,
                    "is_valid": 1,
                    "starts_with": 7,
                    "starts_with_dat": 1,
                    "starts_with_dat1b499": 1,
                    "starts_with_flag": 1,
                    "starts_with_header": 1,
                    "starts_with_lto": 3,
                    "starts_with_match": 2,
                    "starts_with_pattern": 1,
                    "starts_with_prefix": 1,
                    "starts_with_result": 4,
                    "starts_with_section": 1,
                    "starts_with_target": 2,
                    "startswith_lto_priv_0_result": 1,
                    "startswith_result": 1
                },
                "find_section_list": {
                    "find_sections": 1
                },
                "param_1": {
                    "": 1,
                    "address": 1,
                    "binary_address": 4,
                    "binary_data": 2,
                    "data": 1,
                    "data_pointer": 1,
                    "input": 2,
                    "input_address": 1,
                    "input_array": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "input_value": 1,
                    "source_string": 1,
                    "start": 1,
                    "str1": 7,
                    "string1": 2,
                    "string1_ptr": 1
                },
                "param_2": {
                    "": 1,
                    "character": 1,
                    "condition": 1,
                    "end": 1,
                    "flag": 1,
                    "section_type": 1,
                    "start_character": 1,
                    "str2": 7,
                    "string2": 2,
                    "string2_ptr": 1,
                    "target_string": 1
                },
                "param_3": {
                    "": 1,
                    "flag": 1,
                    "length": 1,
                    "limit": 1,
                    "param_3_value": 1,
                    "section_size": 2,
                    "section_value": 1,
                    "size": 2,
                    "threshold": 1,
                    "value": 6
                },
                "pcVar2": {
                    "address": 1,
                    "char_pointer": 2,
                    "char_ptr": 1,
                    "current_address": 1,
                    "modified_input": 1,
                    "next_address": 2,
                    "next_char": 1,
                    "next_section_data": 1,
                    "pointer": 1,
                    "secondary_address": 1,
                    "secondary_pointer": 1,
                    "section": 1,
                    "section_address": 4,
                    "section_data": 1,
                    "section_identifier": 1,
                    "section_pointer": 2,
                    "section_ptr": 4,
                    "selected_section": 1,
                    "source_section": 1,
                    "start_pointer": 1,
                    "start_ptr": 1,
                    "string_address": 1
                }
            },
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid process_binary_data_00114c20(long str1)\n\n{\n  char starts_with;\n  char *section_address;\n  \n  find_sections(str1,1,1);\n  starts_with = startswith_lto_priv_0_lto_priv_0(str1,&DAT_0011b499);\n  if (starts_with != '\\0') {\n    section_address = (char *)(str1 + 5);\n    if (*(char *)(str1 + 4) != 'a') {\n      section_address = (char *)(str1 + 4);\n    }\n    if (*section_address != '\\0') {\n      find_sections(section_address,1,0x100);\n    }\n  }\n  DAT_001278d8 = 1;\n  return;\n}\n\n",
            "current_name": "process_binary_data_00114c20",
            "entrypoint": "0x00114c20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114c20": "process_binary_data_00114c20",
                "cVar1": "starts_with",
                "find_section_list": "find_sections",
                "param_1": "str1",
                "pcVar2": "section_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114c80": {
            "additional_data": {
                "FUN_001053b5": {
                    "do_something": 1,
                    "handle_fatal_error": 1,
                    "initialize": 1
                },
                "FUN_00114c80": {
                    "extract_key_value_pair": 3,
                    "parse_argument": 1,
                    "parse_assignment": 3,
                    "parse_input_params": 1,
                    "parse_param": 2,
                    "parse_param_string": 2,
                    "parse_parameter": 10,
                    "parse_parameter_string": 1,
                    "parse_query_param": 1,
                    "parse_query_string": 4,
                    "parse_url_parameters": 1,
                    "parse_variable_assignment": 1,
                    "process_param_string": 1
                },
                "FUN_0011a480": {
                    "process_data": 1,
                    "process_substring": 1,
                    "resize_memory": 1
                },
                "STRCSPN": {
                    "find_equal_sign": 1
                },
                "auVar3": {
                    "parsed_argument": 1,
                    "parsed_assignment": 2,
                    "parsed_data": 4,
                    "parsed_param": 2,
                    "parsed_parameter": 2,
                    "parsed_parameters": 2,
                    "parsed_params": 1,
                    "parsed_query": 1,
                    "parsed_result": 2,
                    "parsed_url": 1,
                    "result": 10,
                    "result_array": 2,
                    "result_dict": 1
                },
                "dcgettext": {
                    "get_error_message": 7,
                    "get_localized_string": 1,
                    "get_text": 1
                },
                "fatal": {
                    "handle_fatal_error": 4,
                    "show_error": 1,
                    "terminate_program": 1
                },
                "param_1": {
                    "argument": 1,
                    "input": 1,
                    "input_string": 20,
                    "param_string": 1,
                    "parameter_string": 1,
                    "query_string": 5,
                    "string": 1,
                    "url": 1
                },
                "param_2": {
                    "default_value": 4,
                    "param_2": 1,
                    "param_2_value": 5,
                    "param_value": 2,
                    "start_address": 1,
                    "value": 10,
                    "value1": 4,
                    "value_1": 4
                },
                "param_3": {
                    "err_msg": 1,
                    "error_message": 15,
                    "error_msg": 2,
                    "format": 1,
                    "param_3": 1,
                    "param_3_value": 5,
                    "value2": 3,
                    "value_2": 2
                },
                "param_4": {
                    "additional_data": 2,
                    "additional_value": 2,
                    "data": 1,
                    "end_address": 1,
                    "extra_data": 5,
                    "param4": 1,
                    "param_4": 4,
                    "param_4_value": 5,
                    "param_additional": 1,
                    "param_data": 1,
                    "value2": 1,
                    "value3": 3,
                    "value_2": 2,
                    "value_3": 2
                },
                "pcVar1": {
                    "delimiter": 1,
                    "delimiter_position": 1,
                    "delimiter_ptr": 1,
                    "equal_sign": 2,
                    "equal_sign_pos": 4,
                    "equal_sign_position": 9,
                    "equal_sign_ptr": 3,
                    "equals_pos": 1,
                    "equals_position": 3,
                    "equals_sign": 1,
                    "equals_sign_pos": 1,
                    "equals_sign_position": 2,
                    "equals_sign_ptr": 2
                },
                "uVar2": {
                    "allocated_string": 1,
                    "copied_string": 2,
                    "duplicated_argument": 1,
                    "error_message": 2,
                    "error_msg": 1,
                    "error_text": 1,
                    "format_error": 1,
                    "key": 3,
                    "param_name": 2,
                    "parsed_string": 1,
                    "parsed_value": 1,
                    "partial_string": 1,
                    "prefix": 1,
                    "result": 1,
                    "str": 1,
                    "str_dup": 1,
                    "string_before_equal": 1,
                    "string_copy": 2,
                    "substring": 5,
                    "temp_value": 1,
                    "value_before_equals": 1
                },
                "xmalloc": {
                    "allocate_memory": 5
                },
                "xstrndup": {
                    "copy_param_name": 1,
                    "copy_string": 1,
                    "duplicate_string": 3
                }
            },
            "called": [
                "FUN_0011a480",
                "FUN_001053b5",
                "FUN_00104290",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] parse_parameter_string_00114c80(char *input_string,undefined8 value,undefined8 error_message,undefined8 extra_data)\n\n{\n  char *equal_sign_position;\n  undefined8 substring;\n  undefined result [16];\n  \n  equal_sign_position = strchr(input_string,0x3d);\n  if (equal_sign_position != (char *)0x0) {\n    result._0_8_ = (undefined8 *)allocate_memory(0x30);\n    substring = duplicate_string(input_string,(long)equal_sign_position - (long)input_string);\n    result._0_8_[2] = equal_sign_position + 1;\n    result._0_8_[1] = substring;\n    result._0_8_[4] = 0;\n    result._0_8_[3] = 0;\n    *result._0_8_ = value;\n    result._8_8_ = extra_data;\n    return result;\n  }\n  substring = get_error_message(0,\"bad format for %s\",5);\n                    \n  handle_fatal_error(substring,error_message);\n}\n\n",
            "current_name": "parse_parameter_string_00114c80",
            "entrypoint": "0x00114c80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114c80": "parse_parameter_string_00114c80",
                "auVar3": "result",
                "dcgettext": "get_error_message",
                "fatal": "handle_fatal_error",
                "param_1": "input_string",
                "param_2": "value",
                "param_3": "error_message",
                "param_4": "extra_data",
                "pcVar1": "equal_sign_position",
                "uVar2": "substring",
                "xmalloc": "allocate_memory",
                "xstrndup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114cf0": {
            "additional_data": {
                "0x2f": {
                    "slash_char": 1
                },
                "0x5858585858587473": {
                    "magic_value": 1
                },
                "FUN_00114cf0": {
                    "allocate_and_initialize_path": 1,
                    "allocate_file_path": 2,
                    "allocate_memory_and_copy_path": 1,
                    "allocate_memory_and_copy_string": 1,
                    "allocate_memory_and_initialize": 1,
                    "allocate_memory_and_initialize_path": 1,
                    "allocate_path": 1,
                    "allocate_path_and_set_default_value": 1,
                    "allocate_path_buffer": 1,
                    "create_directory_path": 2,
                    "create_file_path": 2,
                    "create_path_from_parameter": 1,
                    "extract_and_allocate_memory": 1,
                    "extract_directory_path": 1,
                    "extract_file_directory": 1,
                    "extract_file_name": 2,
                    "extract_filename": 5,
                    "extract_filepath": 1,
                    "extract_last_directory": 1,
                    "extract_path": 1,
                    "get_file_name": 1,
                    "parse_filepath": 1,
                    "reverse_file_name": 1
                },
                "bVar6": {
                    "found_slash": 9,
                    "is_backslash": 1,
                    "is_negative": 1,
                    "is_slash": 12,
                    "is_slash_present": 3,
                    "slash_count": 1,
                    "slash_found": 3,
                    "step_size": 1
                },
                "lVar2": {
                    "current": 1,
                    "current_index": 1,
                    "current_position": 2,
                    "distance": 2,
                    "index": 8,
                    "length": 7,
                    "loop_index": 1,
                    "offset": 1,
                    "path_index": 1,
                    "path_length": 2,
                    "remaining": 1,
                    "remaining_chars": 2,
                    "remaining_len": 1,
                    "remaining_length": 1
                },
                "lVar3": {
                    "copy_index": 1,
                    "copy_offset": 1,
                    "filename_length": 1,
                    "filename_start": 2,
                    "index": 2,
                    "length": 2,
                    "new_path_length": 1,
                    "offset": 2,
                    "path_len": 1,
                    "path_length": 7,
                    "prefix_length": 9,
                    "start_index": 2
                },
                "lVar4": {
                    "directory_length": 1,
                    "file_name_length": 1,
                    "filename_length": 1,
                    "last_slash_index": 3,
                    "length": 1,
                    "path_length": 2,
                    "prefix_index": 1,
                    "slash_distance": 1,
                    "slash_index": 11,
                    "slash_offset": 3,
                    "slash_position": 5,
                    "suffix_length": 1
                },
                "param_1": {
                    "file_name": 1,
                    "file_path": 8,
                    "filepath": 1,
                    "input_path": 2,
                    "input_string": 1,
                    "path": 18
                },
                "pcVar1": {
                    "filename_ptr": 1,
                    "last_forward_slash": 1,
                    "last_slash": 27,
                    "last_slash_position": 2
                },
                "pcVar5": {
                    "copy_destination": 1,
                    "copy_ptr": 1,
                    "dest": 1,
                    "dest_ptr": 1,
                    "destination": 1,
                    "file_path_ptr": 1,
                    "filename_copy": 1,
                    "filename_ptr": 1,
                    "filename_start": 1,
                    "new_file_name": 2,
                    "new_file_path": 3,
                    "new_path": 12,
                    "output_string": 1,
                    "path_copy": 1,
                    "path_ptr": 1,
                    "prefix": 1,
                    "target": 1
                },
                "xmalloc": {
                    "allocate_memory": 3
                }
            },
            "called": [
                "FUN_00104390",
                "FUN_001042c0"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0011a0e0"
            ],
            "code": "\nvoid extract_filename_00114cf0(char *path)\n\n{\n  char *last_slash;\n  long index;\n  long prefix_length;\n  long slash_index;\n  char *new_path;\n  byte is_slash;\n  \n  is_slash = 0;\n  last_slash = strrchr(path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)allocate_memory(9);\n    prefix_length = 0;\n  }\n  else {\n    slash_index = (long)last_slash - (long)path;\n    last_slash = (char *)allocate_memory(slash_index + 0xb);\n    prefix_length = slash_index + 1;\n    new_path = last_slash;\n    for (index = slash_index; index != 0; index = index + -1) {\n      *new_path = *path;\n      path = path + (ulong)is_slash * -2 + 1;\n      new_path = new_path + (ulong)is_slash * -2 + 1;\n    }\n    last_slash[slash_index] = '/';\n  }\n  *(undefined8 *)(last_slash + prefix_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + prefix_length) + 8) = 0;\n  return;\n}\n\n",
            "current_name": "extract_filename_00114cf0",
            "entrypoint": "0x00114cf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114cf0": "extract_filename_00114cf0",
                "bVar6": "is_slash",
                "lVar2": "index",
                "lVar3": "prefix_length",
                "lVar4": "slash_index",
                "param_1": "path",
                "pcVar1": "last_slash",
                "pcVar5": "new_path",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114d50": {
            "additional_data": {
                "0x0010540e": {
                    "handle_data_addr": 1,
                    "sub_function_address": 1
                },
                "0x00105422": {
                    "jump_table_address": 1,
                    "jumptable_addr": 1
                },
                "0x00105478": {
                    "function_ptr_addr": 1
                },
                "0x380": {
                    "offset": 1
                },
                "FUN_0010540e": {
                    "call_sub_function": 2,
                    "execute": 1,
                    "execute_based_on_condition": 1,
                    "execute_sub_function": 3,
                    "execute_subfunction": 1,
                    "handle_code": 1,
                    "handle_data": 1,
                    "perform_action": 3,
                    "perform_conditional_operation": 1,
                    "perform_operation": 4,
                    "process_data": 1,
                    "process_sub_function": 2,
                    "sub_function": 3,
                    "sub_process_data": 1
                },
                "FUN_001114d50": {
                    "process_parameters": 1
                },
                "FUN_00114d50": {
                    "execute_code": 2,
                    "execute_conditional_action": 1,
                    "execute_conditional_function": 1,
                    "execute_conditional_operation": 1,
                    "execute_function": 11,
                    "execute_function_based_on_condition": 1,
                    "execute_function_with_condition": 2,
                    "execute_operation": 2,
                    "execute_reverse_operation": 1,
                    "process_data": 4,
                    "process_param": 1
                },
                "byte": {
                    "byte_data": 1,
                    "byte_val": 1,
                    "byte_value": 1,
                    "flag": 1,
                    "some_data": 1,
                    "value": 3
                },
                "byteParam": {
                    "byte_value": 1
                },
                "byte_param_1": {
                    "byte_value": 1
                },
                "code": {
                    "code_ptr": 1,
                    "function_pointer": 1,
                    "function_ptr": 1
                },
                "data1": {
                    "data_struct1": 1
                },
                "data2": {
                    "data_struct2": 1
                },
                "flag": {
                    "check_flag": 1
                },
                "int_param_1": {
                    "int_value": 1
                },
                "int_param_2": {
                    "output_int_value": 1
                },
                "param_1": {
                    "arg1": 4,
                    "data1": 4,
                    "data_struct": 1,
                    "first_parameter": 1,
                    "function_param1": 1,
                    "function_pointer1": 1,
                    "input1": 4,
                    "input_1": 2,
                    "input_address": 1,
                    "input_data1": 1,
                    "input_param": 2,
                    "input_param1": 2,
                    "main_parameter": 1,
                    "object1": 1,
                    "param_ptr1": 1,
                    "parameter1": 1,
                    "source": 1,
                    "state1": 1,
                    "sub_data1": 1
                },
                "param_2": {
                    "arg2": 4,
                    "data2": 4,
                    "destination": 1,
                    "function_param2": 1,
                    "function_pointer2": 1,
                    "input2": 4,
                    "input_2": 2,
                    "input_data2": 1,
                    "input_param2": 2,
                    "main_parameter": 1,
                    "object2": 1,
                    "output_address": 1,
                    "output_param": 1,
                    "param_ptr2": 1,
                    "param_struct": 1,
                    "parameter2": 1,
                    "second_parameter": 1,
                    "secondary_param": 1,
                    "state2": 1,
                    "sub_data2": 1
                },
                "param_3": {
                    "arg3": 2,
                    "condition": 9,
                    "condition_code": 1,
                    "flag": 12,
                    "function_param3": 1,
                    "input_param3": 1,
                    "operation_param": 1,
                    "operation_type": 1,
                    "parameter3": 1,
                    "sub_flag": 1,
                    "type": 1
                },
                "value": {
                    "byte_value": 1
                }
            },
            "called": [
                "FUN_0010540e"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid execute_function_with_condition_00114d50(long input1,long input2,uint flag)\n\n{\n  if (*(int *)(*(long *)(input1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((flag == 2) && (*(int *)(*(long *)(input2 + 8) + 8) == 2)) {\n    flag = (uint)*(value *)(*(long *)(*(long *)(input2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code_ptr **)(*(long *)(*(long *)(input1 + 8) + 0x380) + 0x78))(input1,flag != 0);\n  return;\n}\n\n",
            "current_name": "execute_function_with_condition_00114d50",
            "entrypoint": "0x00114d50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114d50": "execute_function_with_condition_00114d50",
                "byte": "value",
                "code": "code_ptr",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114d60": {
            "additional_data": {
                "FUN_00114d60": {
                    "read_and_allocate_file": 1,
                    "read_and_allocate_file_contents": 1,
                    "read_and_store_file": 2,
                    "read_and_store_file_content": 1,
                    "read_and_store_file_contents": 3,
                    "read_and_store_file_data": 3,
                    "read_file": 3,
                    "read_file_and_allocate_memory": 1,
                    "read_file_and_store": 5,
                    "read_file_and_store_content": 1,
                    "read_file_and_store_contents": 1,
                    "read_file_and_store_data": 2,
                    "read_file_and_store_to_memory": 1,
                    "read_file_content": 1,
                    "read_file_contents": 4,
                    "read_file_data": 1
                },
                "__errno_location": {
                    "get_errno_location": 3
                },
                "__stream": {
                    "file": 4,
                    "file_pointer": 10,
                    "file_ptr": 2,
                    "file_stream": 15
                },
                "dcgettext": {
                    "get_error_message": 1,
                    "get_locale_text": 1,
                    "get_translated_string": 1
                },
                "fatal": {
                    "handle_fatal_error": 1,
                    "print_error_message": 1,
                    "show_error": 1
                },
                "iVar1": {
                    "end_of_file": 3,
                    "eof_check": 2,
                    "eof_flag": 1,
                    "eof_indicator": 13,
                    "feof_result": 5,
                    "feof_status": 1,
                    "is_end": 1,
                    "is_end_of_file": 1,
                    "is_eof": 2
                },
                "lVar7": {
                    "current_offset": 3,
                    "current_pos": 2,
                    "current_position": 2,
                    "current_size": 8,
                    "data_offset": 3,
                    "total_bytes_read": 11,
                    "total_read": 2
                },
                "lVar8": {
                    "allocated_bytes": 2,
                    "allocated_memory_size": 1,
                    "allocated_size": 4,
                    "buffer_size": 16,
                    "current_buffer_size": 1,
                    "data_size": 1,
                    "max_size": 6
                },
                "param_1": {
                    "file_data": 1,
                    "file_handle": 1,
                    "file_info": 16,
                    "file_name": 1,
                    "file_path": 7,
                    "file_path_ptr": 1,
                    "file_pointer": 1,
                    "file_ptr": 1,
                    "filename": 1,
                    "input_file_path": 1
                },
                "pcVar3": {
                    "err_msg": 5,
                    "error_message": 11,
                    "error_msg": 2,
                    "error_string": 13
                },
                "piVar2": {
                    "err_num_pointer": 1,
                    "errno_loc": 1,
                    "errno_location": 5,
                    "errno_location_ptr": 1,
                    "errno_pointer": 4,
                    "errno_ptr": 8,
                    "errnum_ptr": 1,
                    "error_code": 1,
                    "error_code_ptr": 1,
                    "error_location": 2,
                    "error_num_ptr": 1,
                    "error_number": 3,
                    "error_number_ptr": 2
                },
                "sVar6": {
                    "bytes_read": 25,
                    "num_bytes_read": 1,
                    "read_size": 5
                },
                "strerror": {
                    "get_error_string": 3
                },
                "uVar4": {
                    "err_msg": 1,
                    "err_msg_dc": 1,
                    "err_msg_format": 1,
                    "error_code": 1,
                    "error_format": 3,
                    "error_message": 8,
                    "error_message_2": 1,
                    "error_msg": 3,
                    "error_msg_format": 1,
                    "error_string": 4,
                    "error_text": 2,
                    "fatal_message": 1,
                    "i18n_string": 1,
                    "localized_error_message": 1,
                    "msg1": 1,
                    "translated_error_message": 1
                },
                "uVar5": {
                    "alloc_ptr": 1,
                    "allocated_memory": 7,
                    "allocation_result": 2,
                    "buffer_pointer": 1,
                    "buffer_ptr": 1,
                    "data_ptr": 1,
                    "dynamic_memory": 3,
                    "file": 1,
                    "file_descriptor": 1,
                    "file_name": 1,
                    "file_ptr2": 1,
                    "malloced_buffer": 1,
                    "memory_allocation": 1,
                    "memory_block": 1,
                    "msg2": 1,
                    "temp_data": 1,
                    "temp_pointer": 3,
                    "temp_ptr": 2,
                    "temp_variable": 1
                }
            },
            "called": [
                "FUN_00104750",
                "FUN_00104390",
                "FUN_0010543c"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid read_file_and_store_data_00114d60(long file_info)\n\n{\n  int eof_indicator;\n  int *errno_ptr;\n  char *error_string;\n  undefined8 error_message;\n  FILE *file_stream;\n  undefined8 allocated_memory;\n  size_t bytes_read;\n  long total_bytes_read;\n  long buffer_size;\n  \n  file_stream = fopen(*(char **)(file_info + 0x10),\"r\");\n  if (file_stream == (FILE *)0x0) {\n    errno_ptr = get_errno_location();\n    error_string = get_error_string(*errno_ptr);\n    allocated_memory = *(undefined8 *)(file_info + 0x10);\n    error_message = get_error_message(0,\"cannot open: %s: %s\",5);\n                    \n    print_error_message(error_message,allocated_memory,error_string);\n  }\n  buffer_size = 0x1000;\n  total_bytes_read = 0;\n  allocated_memory = xmalloc(0x1000);\n  *(undefined8 *)(file_info + 0x20) = allocated_memory;\n  while( true ) {\n    eof_indicator = feof(file_stream);\n    if (eof_indicator != 0) {\n      *(long *)(file_info + 0x18) = total_bytes_read;\n      fclose(file_stream);\n      return;\n    }\n    if (total_bytes_read == buffer_size) {\n      buffer_size = total_bytes_read * 2;\n      allocated_memory = xrealloc(*(undefined8 *)(file_info + 0x20),buffer_size);\n      *(undefined8 *)(file_info + 0x20) = allocated_memory;\n    }\n    bytes_read = fread((void *)(*(long *)(file_info + 0x20) + total_bytes_read),1,buffer_size - total_bytes_read,file_stream);\n    eof_indicator = ferror(file_stream);\n    if (eof_indicator != 0) break;\n    total_bytes_read = total_bytes_read + bytes_read;\n  }\n  allocated_memory = *(undefined8 *)(file_info + 0x10);\n  error_message = get_error_message(0,\"%s: fread failed\",5);\n                    \n  print_error_message(error_message,allocated_memory);\n}\n\n",
            "current_name": "read_file_and_store_data_00114d60",
            "entrypoint": "0x00114d60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114d60": "read_file_and_store_data_00114d60",
                "__errno_location": "get_errno_location",
                "__stream": "file_stream",
                "dcgettext": "get_error_message",
                "fatal": "print_error_message",
                "iVar1": "eof_indicator",
                "lVar7": "total_bytes_read",
                "lVar8": "buffer_size",
                "param_1": "file_info",
                "pcVar3": "error_string",
                "piVar2": "errno_ptr",
                "sVar6": "bytes_read",
                "strerror": "get_error_string",
                "uVar4": "error_message",
                "uVar5": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114dc7": {
            "additional_data": {
                "FUN_00114dc7": {
                    "process_file": 1,
                    "read_and_allocate_memory": 1,
                    "read_and_double_buffer": 1,
                    "read_and_expand_buffer": 2,
                    "read_and_expand_file": 1,
                    "read_and_process_file": 1,
                    "read_and_resize_buffer": 7,
                    "read_and_resize_data": 3,
                    "read_and_store_data": 3,
                    "read_data_from_file": 2,
                    "read_file": 1,
                    "read_file_and_allocate_memory": 1,
                    "read_file_and_resize": 1,
                    "read_file_and_resize_buffer": 5,
                    "read_from_file": 1
                },
                "iVar1": {
                    "error": 20,
                    "error_code": 2,
                    "error_flag": 6,
                    "error_status": 3
                },
                "param_1": {
                    "param1": 3
                },
                "param_2": {
                    "param2": 3
                },
                "param_3": {
                    "param3": 3
                },
                "param_4": {
                    "param4": 3
                },
                "sVar4": {
                    "bytes_read": 30,
                    "read_size": 1
                },
                "uVar2": {
                    "error_message": 22,
                    "error_msg": 5,
                    "error_string": 4
                },
                "uVar3": {
                    "context": 1,
                    "domain": 3,
                    "error_arg": 1,
                    "error_argument": 2,
                    "error_context": 4,
                    "error_format": 1,
                    "error_message": 3,
                    "file_error_message": 2,
                    "message": 2,
                    "message_arg": 1,
                    "message_argument": 2,
                    "message_format": 1,
                    "resource_string": 1,
                    "translated_error": 1,
                    "translated_error_message": 3,
                    "translated_error_msg": 3
                },
                "unaff_R12": {
                    "buffer_start": 2,
                    "current_offset": 2,
                    "current_position": 2,
                    "read_offset": 3,
                    "read_start_index": 1,
                    "start": 1,
                    "start_address": 1,
                    "start_index": 1,
                    "start_offset": 8,
                    "start_pos": 3,
                    "start_position": 7
                },
                "unaff_R14": {
                    "buffer_end": 2,
                    "buffer_size": 2,
                    "data_size": 1,
                    "end": 1,
                    "end_address": 1,
                    "end_index": 1,
                    "end_offset": 10,
                    "end_pos": 3,
                    "end_position": 8,
                    "max_offset": 1,
                    "read_end_index": 1
                },
                "unaff_RBP": {
                    "base_pointer": 3,
                    "buffer": 9,
                    "buffer_address": 1,
                    "buffer_info": 1,
                    "buffer_offset": 1,
                    "buffer_params": 1,
                    "buffer_pointer": 10,
                    "buffer_ptr": 4,
                    "data_pointer": 1
                },
                "unaff_RBX": {
                    "file": 16,
                    "file_pointer": 14,
                    "file_ptr": 1
                }
            },
            "called": [
                "FUN_00104210",
                "FUN_001044d0",
                "FUN_00104160",
                "FUN_00119dd0",
                "FUN_00104130",
                "FUN_00104240",
                "FUN_00114dc7",
                "FUN_001042b0"
            ],
            "calling": [
                "FUN_00114dc7"
            ],
            "code": "\nvoid read_file_and_resize_buffer_00114dc7(void)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 error_context;\n  size_t bytes_read;\n  FILE *file;\n  long buffer_pointer;\n  long start_offset;\n  long end_offset;\n  \n  while( true ) {\n    bytes_read = fread((void *)(*(long *)(buffer_pointer + 0x20) + start_offset),1,end_offset - start_offset,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      error_context = *(undefined8 *)(buffer_pointer + 0x10);\n      error_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(error_message,error_context);\n    }\n    start_offset = start_offset + bytes_read;\n    error = feof(file);\n    if (error != 0) break;\n    if (start_offset == end_offset) {\n      end_offset = start_offset * 2;\n      error_context = xrealloc(*(undefined8 *)(buffer_pointer + 0x20),end_offset);\n      *(undefined8 *)(buffer_pointer + 0x20) = error_context;\n    }\n  }\n  *(long *)(buffer_pointer + 0x18) = start_offset;\n  fclose(file);\n  return;\n}\n\n",
            "current_name": "read_file_and_resize_buffer_00114dc7",
            "entrypoint": "0x00114dc7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114dc7": "read_file_and_resize_buffer_00114dc7",
                "iVar1": "error",
                "sVar4": "bytes_read",
                "uVar2": "error_message",
                "uVar3": "error_context",
                "unaff_R12": "start_offset",
                "unaff_R14": "end_offset",
                "unaff_RBP": "buffer_pointer",
                "unaff_RBX": "file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114e00": {
            "additional_data": {
                "0": {
                    "category": 1,
                    "context": 1,
                    "domain": 1,
                    "null": 1
                },
                "5": {
                    "category": 1,
                    "lc_messages": 1
                },
                "FUN_00114e00": {
                    "describe_endianness": 1,
                    "determine_endianness": 1,
                    "get_endianness": 7,
                    "get_endianness_string": 1,
                    "print_endianness": 21
                },
                "dcgettext": {
                    "localize_string": 1,
                    "print_endianness": 2,
                    "print_message": 1,
                    "translate": 7,
                    "translate_message": 2,
                    "translate_string": 2,
                    "translate_text": 2
                },
                "param_1": {
                    "endian_type": 1,
                    "endianness": 20,
                    "endianness_code": 2,
                    "endianness_flag": 1,
                    "endianness_type": 5,
                    "endianness_value": 2
                }
            },
            "called": [
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\nvoid print_endianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    translate(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    translate(0,\"little endian\",5);\n    return;\n  }\n  translate(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "current_name": "print_endianness_00114e00",
            "entrypoint": "0x00114e00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114e00": "print_endianness_00114e00",
                "dcgettext": "translate",
                "param_1": "endianness"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114e50": {
            "called": [
                "FUN_001125fa",
                "FUN_001126c0",
                "FUN_00104240",
                "FUN_00107976",
                "FUN_00104500",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    bfd_nonfatal_message(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_001279a4 != 1) && ((DAT_001279a4 & 1) != 0)) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012799c != 0) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_0012790c == '\\0') {\n    if (DAT_00127978 == '\\0') {\n      lVar35 = DAT_001279b8 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_001279b8 + _DAT_00127980;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_00127910 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_00127914 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = recognize_format_of_input_file_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_2 + 8),&DAT_0011b503),\n     cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_1[1],&DAT_0011b503),\n       cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279eb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278c8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,setup_section,param_2);\n  puVar30 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279e0,\n     cVar11 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0,param_1,0);\n    puVar30 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = find_section_list(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = check_new_section_flags(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a30;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = process_binary_function_0010554f();\n    return uVar26;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)start_stab_constprop_0(param_1,1,plVar6),\n               pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = parse_stab(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = finish_stab(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = start_stab_constprop_0(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          save_stab(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = parse_stab(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar35 != 0) && (cVar11 = finish_stab(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = debug_set_filename(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = debug_set_filename(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = parse_coff_symbol_constprop_0_isra_0(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_start_block(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_lto_priv_0\n                                     (param_1,&plStack_148,&pcStack_c8,lVar16,\n                                      uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38),\n                                      puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function(puStack_1e8), cVar11 == '\\0')\n                     ) goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = debug_record_line(puStack_1e8,iVar13 + iVar32,\n                                                 *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278d0 + uStack_1f8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279c8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = create_new_symbol(puVar30);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278f0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278f0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278f8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127928;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127928;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a10,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a28,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = is_specified_symbol(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279f8), lVar35 == 0 ||\n                      (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') ||\n                   (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = create_new_symbol(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_001279a0 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,mark_symbols_used_in_relocations,DAT_001278d0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_00127a18);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a28), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_00127a08), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_00127a00), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279f8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279f0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278f0), lVar35 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278c8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,copy_relocations_in_section,param_2);\n    bfd_map_over_sections(param_1,copy_section,param_2);\n    for (puVar30 = DAT_001279e0; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = startswith_lto_priv_0_lto_priv_0(*puVar30,\".gnu.build.attributes\"),\n            cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a30,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = startswith_lto_priv_0_lto_priv_0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279d0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00114e50",
            "entrypoint": "0x00114e50",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_001152b6": {
            "called": [
                "FUN_00107880",
                "FUN_001125fa",
                "FUN_00104240",
                "FUN_00119ed0"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = bfd_get_archive_filename();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = recognize_format_of_input_file_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = process_binary_function_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278d0 + uStack0000000000000010;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_00127a18,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a10,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a28,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') ||\n                   (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_001152b6",
            "entrypoint": "0x001152b6",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00115530": {
            "additional_data": {
                "DAT_001264b8": {
                    "multiplier_value": 1
                },
                "DAT_001264bc": {
                    "constant_4": 1,
                    "constant_flag": 1
                },
                "DAT_001278f8": {
                    "section_data": 1,
                    "section_flag_list": 1
                },
                "DAT_0012790c": {
                    "constant_2": 1,
                    "use_adjusted_size": 1
                },
                "DAT_00127918": {
                    "additional_section_1": 1,
                    "append_string1": 1
                },
                "DAT_00127920": {
                    "additional_section_2": 1,
                    "append_string2": 1
                },
                "DAT_00127a3c": {
                    "constant_6": 1,
                    "divisor_value": 1
                },
                "DAT_00127a48": {
                    "constant_1": 1,
                    "constant_value": 1
                },
                "FUN_00108072": {
                    "process_function": 2
                },
                "FUN_00115530": {
                    "create_output_section": 4,
                    "improve_and_create_section": 1,
                    "process_binary_file": 1,
                    "process_binary_section": 1,
                    "process_section": 10,
                    "process_sections": 2
                },
                "_DAT_001279b0": {
                    "constant_7": 1
                },
                "bVar14": {
                    "bool_value": 1,
                    "bool_var14": 1,
                    "boolean_flag": 1,
                    "check_condition": 1,
                    "check_result": 1,
                    "condition_result": 1,
                    "flag_result": 2,
                    "group_flag": 1,
                    "has_share_flag": 1,
                    "is_coff_format": 1,
                    "is_condition_met": 1,
                    "is_flag_set": 3,
                    "is_group_section": 1,
                    "is_not_cold_section": 1,
                    "is_not_zero": 1,
                    "is_true": 2,
                    "same_section": 1,
                    "set_alignment": 1,
                    "should_update_flag": 1,
                    "strip_flag": 1,
                    "temp_bool_var14": 1,
                    "temp_var14": 3,
                    "temp_var_14": 1,
                    "true_false": 1,
                    "update_flag": 1
                },
                "bfd_convert_section_setup": {
                    "convert_section_setup": 1
                },
                "bfd_make_section_anyway_with_flags": {
                    "make_section_with_flags": 1
                },
                "bfd_nonfatal_message": {
                    "display_error_message": 1
                },
                "cVar4": {
                    "char_var": 1,
                    "conditional_variable": 1,
                    "flag": 2,
                    "is_strip_section": 14,
                    "result": 6,
                    "result_flag": 1,
                    "temp_char_var4": 1,
                    "temp_var4": 3,
                    "temp_var_4": 1
                },
                "check_new_section_flags": {
                    "check_flags": 1
                },
                "check_strip_section_001159d0": {
                    "check_strip_section": 2
                },
                "copy_private_data_0010808f": {
                    "copy_private_data": 2
                },
                "drop_share_flag_if_output_format_not_coff_00115f30": {
                    "drop_share_flag": 1,
                    "drop_share_flag_if_not_coff": 1
                },
                "find_section_list": {
                    "find_section": 1
                },
                "group_signature_isra_0": {
                    "group_signature": 1
                },
                "iVar5": {
                    "comparison_result": 22,
                    "int_var": 1,
                    "result": 3,
                    "temp_int_var5": 1,
                    "temp_var5": 3,
                    "temp_var_5": 1
                },
                "is_strip_section_isra_0": {
                    "check_strip_section": 1
                },
                "lVar1": {
                    "flags": 1,
                    "len": 1,
                    "length_of_section_names": 1,
                    "length_var1": 1,
                    "section_address": 7,
                    "section_entry": 2,
                    "section_flags": 1,
                    "section_flags1": 1,
                    "section_info": 1,
                    "section_list": 2,
                    "section_list_address": 2,
                    "section_pointer": 1,
                    "section_prop": 1,
                    "section_ptr": 1,
                    "temp_long_var1": 1,
                    "temp_var1": 3,
                    "temp_var_1": 1,
                    "var1": 1
                },
                "lVar9": {
                    "length_var9": 1,
                    "section": 1,
                    "section_address": 1,
                    "section_data": 1,
                    "section_entry": 2,
                    "section_flag": 1,
                    "section_index": 1,
                    "section_info": 2,
                    "section_list": 1,
                    "section_list_address": 3,
                    "section_list_entry": 5,
                    "section_list_index": 1,
                    "section_list_pointer": 1,
                    "section_list_position": 1,
                    "section_list_ptr": 2,
                    "section_ptr": 1,
                    "section_result": 1,
                    "temp_long_var9": 1,
                    "temp_var9": 3,
                    "temp_var_9": 1
                },
                "local_40": {
                    "local_array": 2,
                    "local_array_var40": 1,
                    "section_attributes": 1,
                    "section_data_array": 1,
                    "section_flags": 1,
                    "section_info_array": 1,
                    "section_params": 1,
                    "section_size": 8,
                    "section_size_array": 2,
                    "section_size_temp": 1,
                    "section_sizes": 2,
                    "size_array": 7,
                    "temp_array": 1,
                    "temp_long_array": 1,
                    "temp_var16": 1
                },
                "local_48": {
                    "combined_name": 1,
                    "combined_string": 1,
                    "concatenated_section_name": 1,
                    "current_section_name": 2,
                    "file_name": 1,
                    "input_array_item_copy": 1,
                    "local_string": 1,
                    "local_var48": 1,
                    "local_var_48": 1,
                    "merged_string": 1,
                    "modified_section_name": 3,
                    "new_section_name": 1,
                    "original_section_name": 2,
                    "resolved_section": 1,
                    "section_name": 3,
                    "section_name_temp": 1,
                    "temp_section": 1,
                    "temp_string2": 1,
                    "temp_var15": 1,
                    "temp_var_15": 1,
                    "updated_section_name": 4
                },
                "local_50": {
                    "error": 2,
                    "error_code": 2,
                    "error_flag": 1,
                    "error_message": 21,
                    "error_message_1": 2,
                    "failure_message": 1,
                    "local_var50": 1,
                    "result": 1
                },
                "param_1": {
                    "address": 4,
                    "function_address": 1,
                    "input_address": 5,
                    "input_array": 1,
                    "input_data": 2,
                    "input_param": 2,
                    "input_value": 1,
                    "param1": 2,
                    "param_address": 1,
                    "section": 1,
                    "section_address": 8,
                    "section_data": 1,
                    "section_flags": 1,
                    "section_info": 1
                },
                "param_2": {
                    "flags_array": 1,
                    "input_array": 6,
                    "input_files": 1,
                    "input_params": 1,
                    "input_strings": 2,
                    "param2": 1,
                    "param_array": 1,
                    "section_array": 5,
                    "section_data": 2,
                    "section_flags": 1,
                    "section_info": 1,
                    "section_list": 2,
                    "section_name": 1,
                    "section_name_array": 1,
                    "section_names": 4,
                    "strings": 1
                },
                "param_3": {
                    "flags": 9,
                    "flags_param": 1,
                    "output_address": 1,
                    "output_data": 1,
                    "output_format": 15,
                    "output_link_info": 1,
                    "param3": 2,
                    "param_flags": 1
                },
                "pcVar10": {
                    "combined_name": 1,
                    "combined_string": 1,
                    "concatenated_name": 1,
                    "error_message": 3,
                    "failed_message": 1,
                    "new_section": 1,
                    "new_section_name": 1,
                    "output_section": 6,
                    "output_section_name": 2,
                    "pc_var_10": 1,
                    "pointer_var10": 1,
                    "section_name": 4,
                    "section_name_1": 1,
                    "temp_pointer_var10": 1,
                    "temp_var10": 3,
                    "temp_var_10": 1,
                    "temp_variable_1": 1,
                    "updated_section_name": 1
                },
                "pcVar11": {
                    "first_section": 1,
                    "group_name": 1,
                    "group_section": 2,
                    "input_section": 1,
                    "input_section_name": 1,
                    "pc_var_11": 1,
                    "pointer_1": 1,
                    "pointer_var11": 1,
                    "section": 1,
                    "section_list_entry": 1,
                    "section_list_entry_name": 1,
                    "section_list_item": 1,
                    "section_name": 3,
                    "section_name_2": 1,
                    "section_start": 1,
                    "string_value": 1,
                    "temp_pointer": 1,
                    "temp_pointer_var11": 1,
                    "temp_ptr2": 1,
                    "temp_section_name": 2,
                    "temp_section_ptr": 1,
                    "temp_string": 1,
                    "temp_var11": 3,
                    "temp_var_11": 1,
                    "temp_variable_2": 1
                },
                "pcVar12": {
                    "additional_section_name": 1,
                    "data": 1,
                    "data_location": 1,
                    "data_section": 2,
                    "flag4": 1,
                    "output_section_name": 1,
                    "param12": 1,
                    "pc_var_12": 1,
                    "pointer_2": 1,
                    "pointer_section": 1,
                    "pointer_var12": 1,
                    "second_section": 1,
                    "section_data": 1,
                    "section_end": 1,
                    "section_list_entry_offset": 1,
                    "section_name_3": 1,
                    "section_value": 1,
                    "signature_pointer": 1,
                    "str": 1,
                    "temp_pointer_2": 1,
                    "temp_pointer_var12": 1,
                    "temp_ptr3": 1,
                    "temp_section_name": 2,
                    "temp_string": 1,
                    "temp_var12": 3,
                    "temp_var_12": 1,
                    "temp_variable_3": 1
                },
                "pcVar2": {
                    "current_section": 5,
                    "current_section_name": 3,
                    "current_string": 1,
                    "file": 1,
                    "input_array_item": 1,
                    "pc_var": 1,
                    "pointer_var2": 1,
                    "section_address": 1,
                    "section_entry": 1,
                    "section_name": 7,
                    "section_ptr": 2,
                    "temp_pointer_var2": 1,
                    "temp_ptr": 1,
                    "temp_var2": 3,
                    "temp_var_2": 1,
                    "var2": 1
                },
                "pcVar4": {
                    "is_strip": 1
                },
                "ppcVar3": {
                    "current_section": 1,
                    "list_ptr": 1,
                    "pointer_pointer_var3": 1,
                    "ppc_var": 1,
                    "sect_list": 1,
                    "section_info_list": 1,
                    "section_list": 17,
                    "section_list_entry": 1,
                    "section_ptr": 1,
                    "temp_pointer_pointer_var3": 1,
                    "temp_var3": 3,
                    "temp_var_3": 1
                },
                "process_function_00114190": {
                    "process_function": 1,
                    "process_function_array": 1
                },
                "sVar7": {
                    "len_section_name": 1,
                    "length1": 10,
                    "length_1": 4,
                    "length_of_current_section": 1,
                    "length_section_name_1": 1,
                    "name_length1": 1,
                    "section_name1_size": 1,
                    "section_name_length": 2,
                    "size_var7": 1,
                    "source_len": 1,
                    "source_length": 1,
                    "string_length1": 1,
                    "strlen_pc_var10": 1,
                    "temp_size_var7": 1,
                    "temp_var7": 3,
                    "temp_var_7": 1
                },
                "sVar8": {
                    "dest_len": 1,
                    "len_current_section": 1,
                    "length2": 10,
                    "length_2": 4,
                    "length_of_updated_section": 1,
                    "length_section_name_2": 1,
                    "local_name_length": 1,
                    "name_length2": 1,
                    "section_array_length": 1,
                    "section_name2_size": 1,
                    "size_var8": 1,
                    "string_length2": 1,
                    "strlen_local_48": 1,
                    "target_length": 1,
                    "temp_size_var8": 1,
                    "temp_var8": 3,
                    "temp_var_8": 1
                },
                "setup_section_cold": {
                    "section_cold_setup": 1
                },
                "uVar13": {
                    "flag_mask": 1,
                    "flags": 5,
                    "flags_value": 1,
                    "new_flags": 1,
                    "section_flags": 8,
                    "temp_flags": 7,
                    "temp_u_int_var13": 1,
                    "temp_value": 1,
                    "temp_var13": 3,
                    "temp_var_13": 1,
                    "uint_var13": 1,
                    "updated_section_flags": 1
                },
                "uVar6": {
                    "mask": 2,
                    "modified_value": 1,
                    "new_flags": 4,
                    "section_flags": 1,
                    "section_flags2": 1,
                    "temp_u_int_var6": 1,
                    "temp_value": 2,
                    "temp_var": 1,
                    "temp_var6": 3,
                    "temp_var_6": 1,
                    "u_value": 1,
                    "uint_var": 1,
                    "updated_flags": 12
                }
            },
            "called": [
                "FUN_00104270",
                "FUN_001159d0",
                "FUN_001047c0",
                "FUN_00104190",
                "FUN_001040f0",
                "FUN_00108072",
                "FUN_00104100",
                "FUN_00114190",
                "FUN_00104240",
                "FUN_00104470",
                "FUN_00104390",
                "FUN_00115f30",
                "FUN_001045f0"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid process_binary_section_00115530(long section_address,char **input_array,long output_format)\n\n{\n  long section_address;\n  char *section_name;\n  char **section_list;\n  char is_strip_section;\n  int comparison_result;\n  uint updated_flags;\n  size_t length1;\n  size_t length2;\n  long section_list_entry;\n  char *output_section;\n  char *temp_var11;\n  char *temp_var12;\n  uint section_flags;\n  bool is_flag_set;\n  long error_message;\n  char *updated_section_name;\n  long section_size [2];\n  \n  is_strip_section = check_strip_section(input_array);\n  if (is_strip_section != '\\0') {\n    return;\n  }\n  output_section = *input_array;\n  section_flags = *(uint *)((long)input_array + 0x24);\n  updated_section_name = output_section;\n  section_list = DAT_001278f8;\n  if (*(int *)(*(long *)(section_address + 8) + 8) != *(int *)(*(long *)(output_format + 8) + 8)) {\n    section_flags = section_flags & *(uint *)(*(long *)(section_address + 8) + 0x18) &\n             *(uint *)(*(long *)(output_format + 8) + 0x18);\n  }\n  for (; section_list != (char **)0x0; section_list = (char **)section_list[3]) {\n    comparison_result = strcmp(*section_list,output_section);\n    if (comparison_result == 0) {\n      if (*(uint *)(section_list + 2) != 0xffffffff) {\n        section_flags = *(uint *)(section_list + 2);\n      }\n      if (output_section != section_list[1]) {\n        updated_section_name = section_list[1];\n        section_flags = check_flags(section_flags,output_format);\n      }\n      break;\n    }\n  }\n  if (((DAT_00127918 != (char *)0x0) &&\n      (output_section = DAT_00127918, (*(byte *)((long)input_array + 0x24) & 1) != 0)) ||\n     (output_section = DAT_00127920, DAT_00127920 != (char *)0x0)) {\n    length1 = strlen(output_section);\n    length2 = strlen(updated_section_name);\n    temp_var12 = (char *)xmalloc(length1 + 1 + length2);\n    output_section = strcpy(temp_var12,output_section);\n    updated_section_name = strcat(output_section,updated_section_name);\n  }\n  section_list_entry = find_section(*input_array,0,0x80);\n  is_flag_set = false;\n  if (section_list_entry == 0) {\n    if ((DAT_00127a48 == 4) && ((section_flags & 0x2000001) != 0)) {\n      comparison_result = *(int *)(*(long *)(section_address + 8) + 8);\n      if (comparison_result == 5) {\n        if (*(int *)(input_array[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(output_format + 8) + 8) == 5) {\n            is_flag_set = (section_flags & 0x2000000) == 0;\n            updated_flags = ~((-(uint)((section_flags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)input_array + 0x24) = *(uint *)((long)input_array + 0x24) & updated_flags;\n          }\n          else {\n            updated_flags = 0xfdfffefd;\n          }\n          section_flags = section_flags & updated_flags;\n        }\n      }\n      else if ((comparison_result != 2) || (comparison_result = strcmp(*input_array,\".buildid\"), comparison_result != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    section_flags = check_flags(section_flags & 0x104 | *(uint *)(section_list_entry + 0x28),output_format,*input_array);\n  }\n  is_strip_section = convert_section_setup(section_address,input_array,output_format,&updated_section_name,section_size);\n  if (is_strip_section == '\\0') {\n    output_section = (char *)0x0;\n    error_message = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  output_section = (char *)make_section_with_flags(output_format,updated_section_name,section_flags);\n  if (output_section == (char *)0x0) {\n    error_message = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_0012790c != '\\0') {\n      section_size[0] = 0;\n      goto LAB_001158e7;\n    }\n    is_strip_section = bfd_set_section_size(output_section,section_size[0]);\n    if (is_strip_section == '\\0') {\n      section_cold_setup();\n      return;\n    }\n  }\n  else {\n    section_size[0] = ((((long)DAT_00127a3c - 1U) + section_size[0]) / (ulong)(long)DAT_00127a3c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    is_strip_section = bfd_set_section_size(output_section);\n    if (is_strip_section == '\\0') {\n      section_cold_setup();\n      return;\n    }\n  }\n  error_message = 0;\n  temp_var12 = input_array[6];\n  section_list_entry = find_section(*input_array,0,0x18);\n  if (section_list_entry == 0) {\n    output_section[0x28] = output_section[0x28] | 1;\n    temp_var11 = *input_array;\n    temp_var12 = temp_var12 + _DAT_001279b0;\n    *(char **)(output_section + 0x30) = temp_var12;\n    *(char **)(output_section + 0x38) = temp_var12;\n    temp_var12 = input_array[7];\n    section_list_entry = find_section(temp_var11,0,0x60);\n    if (section_list_entry == 0) goto LAB_00115695;\nLAB_00115860:\n    temp_var11 = *(char **)(section_list_entry + 0x20);\n    if ((*(byte *)(section_list_entry + 0x14) & 0x40) != 0) {\n      temp_var11 = temp_var11 + (long)temp_var12;\n    }\n    *(char **)(output_section + 0x38) = temp_var11;\n    section_list_entry = find_section(*input_array,0,0x200);\n    if (section_list_entry != 0) goto LAB_00115889;\nLAB_001156b8:\n    section_flags = *(uint *)((long)input_array + 0x7c);\n    if (section_flags < 0x3f) goto LAB_001156c4;\n    error_message = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(output_section + 0xb4) = *(undefined4 *)((long)input_array + 0xb4);\n    output_section[0x28] = output_section[0x28] & 0xcfU | *(byte *)(input_array + 5) & 0x30;\n    input_array[0xc] = output_section;\n    input_array[0xb] = (char *)0x0;\n    if ((*(byte *)((long)input_array + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    is_strip_section = (**(code **)(*(long *)(output_format + 8) + 0x158))(section_address,input_array,output_format,output_section);\n    if (is_strip_section == '\\0') {\n      copy_private_data();\n      return;\n    }\n  }\n  else {\n    temp_var11 = *(char **)(section_list_entry + 0x18);\n    if ((*(byte *)(section_list_entry + 0x14) & 8) == 0) {\n      temp_var11 = temp_var11 + (long)temp_var12;\n    }\n    output_section[0x28] = output_section[0x28] | 1;\n    section_name = *input_array;\n    *(char **)(output_section + 0x30) = temp_var11;\n    *(char **)(output_section + 0x38) = temp_var11;\n    temp_var12 = input_array[7];\n    section_list_entry = find_section(section_name,0,0x60);\n    if (section_list_entry != 0) goto LAB_00115860;\nLAB_00115695:\n    temp_var11 = *input_array;\n    *(char **)(output_section + 0x38) = temp_var12 + _DAT_001279b0;\n    section_list_entry = find_section(temp_var11,0,0x200);\n    if (section_list_entry == 0) goto LAB_001156b8;\nLAB_00115889:\n    section_flags = *(uint *)(section_list_entry + 0x2c);\n    if (0x3e < section_flags) {\n      set_alignment_and_copy_data_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(output_section + 0x7c) = section_flags;\n    *(undefined4 *)(output_section + 0xb4) = *(undefined4 *)((long)input_array + 0xb4);\n    output_section[0x28] = output_section[0x28] & 0xcfU | *(byte *)(input_array + 5) & 0x30;\n    input_array[0xc] = output_section;\n    input_array[0xb] = (char *)0x0;\n    if ((*(byte *)((long)input_array + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    temp_var12 = input_array[0x1a];\n    section_list_entry = group_signature(temp_var12,input_array[0x1c]);\n    if ((section_list_entry == 0) ||\n       (section_address = *(long *)(section_address + 8), *(uint *)(section_list_entry + 0x18) = *(uint *)(section_list_entry + 0x18) | 0x20,\n       *(int *)(section_address + 8) != 5)) goto LAB_00115700;\n    *(long *)(temp_var12 + 0xb0) = section_list_entry;\n    is_strip_section = (**(code **)(*(long *)(output_format + 8) + 0x158))(section_address,input_array,output_format,output_section);\n    if (is_strip_section == '\\0') {\n      copy_private_data();\n      return;\n    }\n  }\n  if (is_flag_set) {\n    *(undefined4 *)(*(long *)(output_section + 0xd0) + 4) = 8;\n  }\n  if (error_message == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a40 = 1;\n  display_error_message(0,output_format,output_section,error_message);\n  return;\n}\n\n",
            "current_name": "process_binary_section_00115530",
            "entrypoint": "0x00115530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115530": "process_binary_section_00115530",
                "bVar14": "is_flag_set",
                "bfd_convert_section_setup": "convert_section_setup",
                "bfd_make_section_anyway_with_flags": "make_section_with_flags",
                "bfd_nonfatal_message": "display_error_message",
                "cVar4": "is_strip_section",
                "check_new_section_flags": "check_flags",
                "copy_private_data_0010808f": "copy_private_data",
                "find_section_list": "find_section",
                "group_signature_isra_0": "group_signature",
                "iVar5": "comparison_result",
                "is_strip_section_isra_0": "check_strip_section",
                "lVar1": "section_address",
                "lVar9": "section_list_entry",
                "local_40": "section_size",
                "local_48": "updated_section_name",
                "local_50": "error_message",
                "param_1": "section_address",
                "param_2": "input_array",
                "param_3": "output_format",
                "pcVar10": "output_section",
                "pcVar11": "temp_var11",
                "pcVar12": "temp_var12",
                "pcVar2": "section_name",
                "ppcVar3": "section_list",
                "sVar7": "length1",
                "sVar8": "length2",
                "setup_section_cold": "section_cold_setup",
                "uVar13": "section_flags",
                "uVar6": "updated_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115970": {
            "additional_data": {
                "F1": {
                    "copy_and_set_times": 1
                },
                "FUN_00115970": {
                    "copy_and_delete_file": 5,
                    "copy_and_set_file_times": 1,
                    "copy_and_set_times": 10,
                    "copy_and_unlink_file": 3,
                    "copy_and_update_file": 2,
                    "copy_file": 5,
                    "copy_file_and_set_times": 2,
                    "copy_file_with_error_handling": 1,
                    "copy_file_with_info": 1
                },
                "__errno_location": {
                    "get_errno_location": 1
                },
                "auVar6": {
                    "new_return_value": 1,
                    "output_tuple": 1,
                    "result": 7,
                    "result_buffer": 1,
                    "result_data": 2,
                    "result_struct": 3,
                    "return_au_var": 1,
                    "return_data": 1,
                    "return_value": 11,
                    "return_value_array": 1,
                    "return_value_buffer": 1,
                    "return_values": 1
                },
                "dcgettext": {
                    "get_error_string": 1,
                    "get_localized_message": 1
                },
                "non_fatal": {
                    "handle_non_fatal_error": 2
                },
                "param_1": {
                    "file_path_destination": 1,
                    "old_file_path": 1,
                    "original_file_path": 2,
                    "source_file": 16,
                    "source_file_path": 6,
                    "source_path": 4,
                    "src_file": 1
                },
                "param_2": {
                    "dest_file": 1,
                    "destination_file": 16,
                    "destination_file_path": 7,
                    "destination_path": 4,
                    "file_path_source": 1,
                    "new_file_path": 2
                },
                "param_3": {
                    "buffer_size": 21,
                    "file_mode": 1,
                    "file_permissions": 8,
                    "flags": 1
                },
                "param_4": {
                    "attributes": 1,
                    "file_attributes": 1,
                    "file_descriptor": 1,
                    "file_info": 2,
                    "file_metadata": 1,
                    "file_modification_time": 1,
                    "file_permissions": 1,
                    "file_size": 18,
                    "file_stat": 1,
                    "file_times": 1,
                    "permissions": 1,
                    "source_file_stats": 1,
                    "timestamp": 1
                },
                "param_5": {
                    "copy_times": 1,
                    "preserve_times": 1,
                    "preserve_timestamp": 1,
                    "preserve_timestamps": 1,
                    "set_file_times": 1,
                    "set_modification_time": 1,
                    "set_time": 1,
                    "set_time_flag": 2,
                    "set_times_flag": 8,
                    "set_timestamps": 1,
                    "should_set_times": 11,
                    "should_update_timestamp": 1,
                    "update_times": 1
                },
                "param_6": {
                    "copy_result": 1,
                    "error_code": 2,
                    "file_size": 1,
                    "file_size_result": 1,
                    "original_return_value": 5,
                    "original_size": 1,
                    "result": 11,
                    "return_value": 8,
                    "user_data": 1
                },
                "pcVar3": {
                    "err_msg": 1,
                    "errno_str": 1,
                    "errno_string": 1,
                    "error_message": 23,
                    "error_msg": 1,
                    "error_str": 1,
                    "error_string": 2,
                    "str_error": 1
                },
                "piVar2": {
                    "err_num": 1,
                    "errno": 1,
                    "errno_location": 12,
                    "errno_location_ptr": 1,
                    "errno_pointer": 3,
                    "errno_ptr": 4,
                    "error_code": 1,
                    "error_location": 4,
                    "error_number": 1,
                    "error_number_location": 1,
                    "error_number_ptr": 1,
                    "error_pointer": 1
                },
                "set_times": {
                    "set_file_timestamps": 1,
                    "update_file_times": 1
                },
                "simple_copy": {
                    "copy_file": 1,
                    "perform_copy": 1
                },
                "strerror": {
                    "get_error_message": 1
                },
                "uVar1": {
                    "copy_result": 29,
                    "copy_status": 1,
                    "error_code": 1
                },
                "uVar4": {
                    "error": 2,
                    "error_description": 2,
                    "error_message": 4,
                    "error_message_2": 1,
                    "error_message_result": 1,
                    "error_msg": 2,
                    "error_string": 9,
                    "i18n_error_message": 1,
                    "localized_error_message": 4,
                    "translated_error": 1,
                    "translated_error_message": 2,
                    "translated_error_msg": 1,
                    "translated_message": 1
                },
                "uVar5": {
                    "bytes_copied": 7,
                    "copy_bytes": 6,
                    "copy_error": 3,
                    "copy_error_code": 2,
                    "copy_result_ulong": 1,
                    "copy_size": 4,
                    "copy_success": 5,
                    "error_code": 2,
                    "unlink_result": 1
                },
                "unlink": {
                    "delete_file": 1,
                    "remove_file": 1
                }
            },
            "called": [
                "FUN_00115a90",
                "FUN_00108200"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16]\ncopy_and_set_file_times_00115970(char *source_file,char *destination_file,undefined4 buffer_size,undefined8 file_size,char should_set_times,\n            undefined8 result)\n\n{\n  uint copy_result;\n  int *errno_location;\n  char *error_message;\n  undefined8 error_string;\n  ulong bytes_copied;\n  undefined return_value [16];\n  \n  if (destination_file == source_file) {\n    bytes_copied = 0;\n  }\n  else {\n    copy_result = copy_file(buffer_size,destination_file,file_size);\n    bytes_copied = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_location = get_errno_location();\n      error_message = get_error_message(*errno_location);\n      error_string = get_localized_message(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      handle_non_fatal_error(error_string,destination_file,error_message);\n    }\n    delete_file(source_file);\n  }\n  if (should_set_times != '\\0') {\n    set_file_timestamps(destination_file,file_size);\n  }\n  return_value._8_8_ = result;\n  return_value._0_8_ = bytes_copied;\n  return return_value;\n}\n\n",
            "current_name": "copy_and_set_file_times_00115970",
            "entrypoint": "0x00115970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115970": "copy_and_set_file_times_00115970",
                "__errno_location": "get_errno_location",
                "auVar6": "return_value",
                "dcgettext": "get_localized_message",
                "non_fatal": "handle_non_fatal_error",
                "param_1": "source_file",
                "param_2": "destination_file",
                "param_3": "buffer_size",
                "param_4": "file_size",
                "param_5": "should_set_times",
                "param_6": "result",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "set_times": "set_file_timestamps",
                "simple_copy": "copy_file",
                "strerror": "get_error_message",
                "uVar1": "copy_result",
                "uVar4": "error_string",
                "uVar5": "bytes_copied",
                "unlink": "delete_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001159d0": {
            "additional_data": {
                "DAT_00127a18": {
                    "some_constant_3": 1,
                    "specified_symbol2": 1
                },
                "DAT_00127a28": {
                    "some_constant_2": 1,
                    "specified_symbol1": 1
                },
                "DAT_00127a48": {
                    "some_constant_1": 1,
                    "symbol_flag": 1
                },
                "FUN_001159d0": {
                    "check_and_verify_sections": 1,
                    "check_group_signature": 1,
                    "check_strip_section": 19,
                    "initialize_module": 1,
                    "validate_and_check_sections": 1,
                    "verify_strip_section": 3
                },
                "FUN_00115b70": {
                    "is_specified_symbol": 11,
                    "is_specified_symbol_func": 1,
                    "is_symbol": 1,
                    "is_symbol_specified": 1,
                    "parse_string_array": 1
                },
                "FUN_00115d00": {
                    "calculate_group_signature": 2,
                    "calculate_second_parameter": 1,
                    "get_group_signature": 2,
                    "group_signature": 3,
                    "group_signature_func": 1,
                    "group_signature_isra_0": 6
                },
                "FUN_00115d70": {
                    "check_strip_section_isra_0": 1,
                    "execute_relevant_function": 1,
                    "is_strip_section": 2,
                    "is_strip_section_1": 5,
                    "is_strip_section_1_isra_0": 5,
                    "is_strip_section_func": 1
                },
                "cVar2": {
                    "is_present": 1,
                    "is_specified": 3,
                    "is_symbol": 2,
                    "is_symbol_ok": 1,
                    "is_symbol_specified": 7,
                    "is_symbol_valid": 4,
                    "is_valid": 1,
                    "is_valid_symbol": 1,
                    "symbol_check": 3,
                    "symbol_check_result": 1,
                    "symbol_exists": 1,
                    "symbol_found": 1,
                    "symbol_specified": 1,
                    "temp2": 1
                },
                "group_signature_isra_0": {
                    "calculate_group_signature": 1,
                    "get_group_signature": 4
                },
                "is_specified_symbol": {
                    "check_if_specified_symbol": 1,
                    "check_specified_symbol": 1,
                    "check_symbol": 2,
                    "check_symbol_specification": 1,
                    "is_symbol_specified": 1
                },
                "is_strip_section_1_isra_0": {
                    "check_if_strip_section_exists": 1,
                    "check_if_strip_section_is_zero": 1,
                    "is_strip_section": 4
                },
                "lVar4": {
                    "current_group_signature": 1,
                    "group_sig": 1,
                    "group_signature": 17,
                    "group_signature_address": 2,
                    "signature": 4,
                    "signature_1": 1,
                    "signature_info": 1,
                    "signature_ptr": 1
                },
                "lVar5": {
                    "current_address": 3,
                    "current_group": 3,
                    "current_group_sig": 1,
                    "current_group_signature": 6,
                    "current_group_signature_address": 1,
                    "current_ptr": 1,
                    "current_section": 2,
                    "current_signature": 5,
                    "next_group_signature": 3,
                    "signature_2": 1,
                    "temp_signature": 2
                },
                "param_1": {
                    "address": 1,
                    "binary": 1,
                    "binary_address": 1,
                    "first_parameter": 1,
                    "input": 1,
                    "input_address": 2,
                    "input_param": 2,
                    "param": 2,
                    "param_1_is_strip_section_1_isra_0": 1,
                    "section_address": 8,
                    "section_header": 1,
                    "section_info": 2,
                    "section_param": 1,
                    "section_ptr": 2,
                    "signature_address": 1,
                    "symbol_address": 1
                },
                "param_1_1": {
                    "section1": 1
                },
                "param_1_2": {
                    "symbol_list": 1
                },
                "param_1_3": {
                    "section": 1
                },
                "param_2": {
                    "param_2_group_signature_isra_0": 1,
                    "second_parameter": 1,
                    "section2": 1,
                    "section_address": 1,
                    "section_length": 1,
                    "symbol_address": 1,
                    "symbol_list": 1
                },
                "uVar1": {
                    "result": 1,
                    "specified_symbol_result": 1,
                    "symbol": 8,
                    "symbol_address": 11,
                    "symbol_info": 1,
                    "symbol_ptr": 2,
                    "temp1": 1
                },
                "uVar3": {
                    "is_section_strip": 1,
                    "is_strip": 1,
                    "is_strip_section": 1,
                    "result": 18,
                    "section_flag": 1,
                    "section_result": 1,
                    "strip_section_flag": 1,
                    "strip_section_result": 2,
                    "strip_section_status": 1
                }
            },
            "called": [
                "FUN_00115d00",
                "FUN_00115b70",
                "FUN_00115d70"
            ],
            "calling": [
                "FUN_00115f50",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "code": "\nundefined4 check_strip_section_001159d0(long section_address)\n\n{\n  undefined8 symbol_address;\n  char is_symbol_specified;\n  undefined4 result;\n  long group_signature;\n  long current_group_signature;\n  \n  result = is_strip_section();\n  if ((char)result == '\\0') {\n    if ((*(byte *)(section_address + 0x27) & 2) == 0) {\n      return result;\n    }\n    group_signature = get_group_signature(*(undefined8 *)(section_address + 0xd0),*(undefined8 *)(section_address + 0xe0));\n    if ((group_signature != 0) &&\n       (((symbol_address = *(undefined8 *)(group_signature + 8), DAT_00127a48 != 7 ||\n         (is_symbol_specified = check_symbol(symbol_address,DAT_00127a28), is_symbol_specified != '\\0')) &&\n        (is_symbol_specified = check_symbol(symbol_address,DAT_00127a18), is_symbol_specified == '\\0')))) {\n      group_signature = *(long *)(*(long *)(section_address + 0xd0) + 0xc0);\n      current_group_signature = group_signature;\n      do {\n        if (current_group_signature == 0) {\n          return 1;\n        }\n        is_symbol_specified = is_strip_section(current_group_signature);\n        if (is_symbol_specified == '\\0') {\n          return result;\n        }\n        current_group_signature = *(long *)(*(long *)(current_group_signature + 0xd0) + 0xc0);\n      } while (group_signature != current_group_signature);\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_strip_section_001159d0",
            "entrypoint": "0x001159d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001159d0": "check_strip_section_001159d0",
                "cVar2": "is_symbol_specified",
                "group_signature_isra_0": "get_group_signature",
                "is_specified_symbol": "check_symbol",
                "is_strip_section_1_isra_0": "is_strip_section",
                "lVar4": "group_signature",
                "lVar5": "current_group_signature",
                "param_1": "section_address",
                "uVar1": "symbol_address",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115a90": {
            "additional_data": {
                "FUN_00115a90": {
                    "copy_and_check_file": 1,
                    "copy_and_close": 1,
                    "copy_and_close_file": 2,
                    "copy_and_modify_file": 1,
                    "copy_and_rename_files": 1,
                    "copy_and_write_to_file": 1,
                    "copy_data": 1,
                    "copy_data_from_file": 1,
                    "copy_file": 16,
                    "copy_file_contents": 1,
                    "copy_file_data": 2,
                    "copy_to_file": 1,
                    "file_copy": 1,
                    "improved_file_copy": 1
                },
                "_Var3": {
                    "current_file_offset": 1,
                    "current_offset": 4,
                    "current_position": 3,
                    "cursor_position": 1,
                    "file_offset": 6,
                    "file_position": 2,
                    "file_size": 1,
                    "input_pos": 1,
                    "offset": 1,
                    "position": 1,
                    "seek_result": 5,
                    "source_file_current_offset": 1,
                    "source_file_offset": 1,
                    "source_file_pointer": 1,
                    "source_file_position": 1,
                    "source_position": 1
                },
                "__fd": {
                    "dest_file_descriptor": 1,
                    "destination_descriptor": 1,
                    "destination_fd": 3,
                    "destination_file_descriptor": 21,
                    "destination_file_fd": 1,
                    "dst_file_descriptor": 1,
                    "output_fd": 2,
                    "output_file_descriptor": 1
                },
                "iVar1": {
                    "errno_value": 6,
                    "errno_value_1": 1,
                    "error_code": 6,
                    "error_message": 1,
                    "original_errno": 12,
                    "original_error": 2,
                    "original_error_code": 1,
                    "saved_errno": 1,
                    "source_file_error_code": 1
                },
                "iVar2": {
                    "bytes_copied": 1,
                    "bytes_read": 7,
                    "current_errno": 3,
                    "current_error": 1,
                    "errno_value_2": 1,
                    "read_bytes": 3,
                    "read_count": 1,
                    "read_result": 13,
                    "result": 1
                },
                "local_2038": {
                    "buffer": 30
                },
                "param_1": {
                    "file_descriptor": 5,
                    "input_fd": 2,
                    "source_fd": 3,
                    "source_file": 1,
                    "source_file_descriptor": 18,
                    "source_file_fd": 1,
                    "src_file_descriptor": 1
                },
                "param_2": {
                    "destination_file": 2,
                    "destination_file_path": 14,
                    "destination_filename": 4,
                    "destination_path": 5,
                    "dst_filename": 1,
                    "file_path": 1,
                    "output_filename": 2,
                    "source_file": 1,
                    "source_file_path": 1
                },
                "param_3": {
                    "destination_file_info": 1,
                    "destination_file_path": 1,
                    "file_metadata": 1,
                    "file_metadata_address": 1,
                    "file_permission_pointer": 1,
                    "file_permissions": 5,
                    "file_stat": 3,
                    "file_stat_address": 1,
                    "file_stats": 1,
                    "file_stats_address": 1,
                    "file_status": 1,
                    "file_status_address": 1,
                    "mode_data": 1,
                    "mode_ptr": 1,
                    "permission_struct_address": 1,
                    "permissions": 1,
                    "permissions_pointer": 1,
                    "permissions_ptr": 1,
                    "source_file": 1,
                    "source_file_info": 1,
                    "source_file_stat": 1,
                    "stat_buffer": 1,
                    "stat_buffer_address": 2,
                    "stat_data": 1
                },
                "piVar6": {
                    "errno_location": 10,
                    "errno_location_pointer": 1,
                    "errno_pointer": 5,
                    "errno_ptr": 7,
                    "error_code_pointer": 1,
                    "error_location": 3,
                    "error_pointer": 1,
                    "error_ptr": 1,
                    "pointer_to_error_code": 1
                },
                "sVar5": {
                    "bytes_written": 25,
                    "write_result": 6
                },
                "uVar4": {
                    "bytes_copied": 14,
                    "bytes_read": 6,
                    "read_result": 2,
                    "read_write_result": 1,
                    "result": 1,
                    "return_value": 4,
                    "total_bytes_copied": 2,
                    "total_bytes_written": 1
                }
            },
            "called": [
                "FUN_00104730",
                "FUN_001043c0",
                "FUN_00108237",
                "FUN_001041c0",
                "FUN_00104410",
                "FUN_001046c0",
                "FUN_001040b0",
                "FUN_001042e0"
            ],
            "calling": [
                "FUN_00115970"
            ],
            "code": "\nulong copy_and_close_file_00115a90(int source_file_descriptor,char *destination_file_path,long file_permissions)\n\n{\n  int original_errno;\n  int destination_file_descriptor;\n  int read_result;\n  __off_t file_offset;\n  ulong bytes_copied;\n  size_t bytes_written;\n  int *errno_location;\n  undefined buffer [8200];\n  \n  if ((-1 < source_file_descriptor) && (file_offset = lseek(source_file_descriptor,0,0), file_offset == 0)) {\n    destination_file_descriptor = open(destination_file_path,0x201);\n    if (destination_file_descriptor < 0) {\n      bytes_copied = simple_copy_cold();\n      return bytes_copied;\n    }\n    do {\n      bytes_copied = read(source_file_descriptor,buffer,0x2000);\n      read_result = (int)bytes_copied;\n      if (read_result < 1) {\n        errno_location = __errno_location();\n        original_errno = *errno_location;\n        fchmod(destination_file_descriptor,*(__mode_t *)(file_permissions + 0x18));\n        close(source_file_descriptor);\n        close(destination_file_descriptor);\n        if (read_result != 0) {\n          *errno_location = original_errno;\n          return 0xffffffff;\n        }\n        return bytes_copied & 0xffffffff;\n      }\n      bytes_written = write(destination_file_descriptor,buffer,(long)read_result);\n    } while (bytes_written == (long)read_result);\n    errno_location = __errno_location();\n    read_result = *errno_location;\n    close(source_file_descriptor);\n    close(destination_file_descriptor);\n    *errno_location = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "copy_and_close_file_00115a90",
            "entrypoint": "0x00115a90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115a90": "copy_and_close_file_00115a90",
                "_Var3": "file_offset",
                "__fd": "destination_file_descriptor",
                "iVar1": "original_errno",
                "iVar2": "read_result",
                "local_2038": "buffer",
                "param_1": "source_file_descriptor",
                "param_2": "destination_file_path",
                "param_3": "file_permissions",
                "piVar6": "errno_location",
                "sVar5": "bytes_written",
                "uVar4": "bytes_copied"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115b70": {
            "additional_data": {
                "DAT_001278d8": {
                    "data_flag1": 1,
                    "flag1": 1,
                    "flag_1": 1
                },
                "DAT_001279a0": {
                    "data_flag3": 1,
                    "flag3": 1,
                    "section_flag_3": 1
                },
                "DAT_001279d8": {
                    "data_array": 1,
                    "section_update_list": 1,
                    "update_section_list": 1
                },
                "DAT_00127a39": {
                    "data_flag2": 1,
                    "flag2": 1,
                    "flag_2": 1
                },
                "DAT_00127a44": {
                    "constant_value": 1,
                    "data_value2": 1,
                    "section_flag_2": 1
                },
                "DAT_00127a48": {
                    "data_value1": 1,
                    "section_flag": 1,
                    "section_index": 1
                },
                "FUN_00115b70": {
                    "check_and_handle_section": 1,
                    "check_section": 6,
                    "check_section_and_options": 1,
                    "check_section_flags": 1,
                    "check_section_match": 3,
                    "check_section_options": 3,
                    "check_section_properties": 1,
                    "check_section_validity": 3,
                    "find_and_check_section": 1,
                    "find_section": 1,
                    "handle_section": 1,
                    "process_section": 5,
                    "process_section_match": 1,
                    "section_processing": 1,
                    "validate_section": 1,
                    "validate_sections": 1
                },
                "calculate_inverse_flag_001082b3": {
                    "calculate_inverse_flag": 1
                },
                "execute_report_and_exit_00119dd0": {
                    "execute_report_and_exit": 8
                },
                "handle_section_match_error_0010827b": {
                    "handle_section_match_error": 7,
                    "handle_section_matching_error": 1
                },
                "iVar2": {
                    "cmp_result": 1,
                    "comparison_result": 16,
                    "result": 1,
                    "section_cmp_result": 1,
                    "section_comparison": 4,
                    "section_comparison_result": 3,
                    "section_name_comparison_result": 2,
                    "strcmp_result": 1,
                    "string_comparison_result": 2
                },
                "iVar3": {
                    "comparison_result": 1,
                    "data_type": 1,
                    "flag": 3,
                    "mode": 1,
                    "option": 1,
                    "section_check": 1,
                    "section_flag": 5,
                    "section_index": 3,
                    "section_match_result": 2,
                    "section_properties": 1,
                    "section_type": 12
                },
                "is_dwo_section_constprop_0": {
                    "is_dwo_section": 1
                },
                "lVar4": {
                    "remove_section": 1,
                    "remove_section_list": 1,
                    "section_0": 1,
                    "section_1": 1,
                    "section_flag": 1,
                    "section_index": 1,
                    "section_index1": 1,
                    "section_list1": 2,
                    "section_list_0": 1,
                    "section_list_1": 14,
                    "section_list_match_result": 1,
                    "section_match": 2,
                    "section_match_1": 2,
                    "section_ptr_1": 2
                },
                "lVar5": {
                    "copy_section": 1,
                    "copy_section_list": 1,
                    "section_2": 2,
                    "section_copy": 1,
                    "section_copy_flag": 1,
                    "section_index2": 1,
                    "section_index_2": 1,
                    "section_list2": 2,
                    "section_list_1": 1,
                    "section_list_2": 14,
                    "section_list_match_result_2": 1,
                    "section_match_2": 2,
                    "section_ptr_2": 2,
                    "section_remove": 1
                },
                "param_1": {
                    "input": 1,
                    "input_array": 1,
                    "input_strings": 1,
                    "section_list": 4,
                    "section_list_ptr": 1,
                    "section_name": 8,
                    "section_name_ptr": 1,
                    "section_names": 11,
                    "sections": 2
                },
                "pcVar1": {
                    "current_section": 13,
                    "current_section_name": 4,
                    "current_string": 1,
                    "section": 1,
                    "section_name": 12
                },
                "plVar7": {
                    "current_match": 1,
                    "current_section": 4,
                    "list_pointer": 1,
                    "list_ptr": 1,
                    "section_list": 7,
                    "section_list_pointer": 1,
                    "section_list_ptr": 5,
                    "section_pointer": 4,
                    "section_ptr": 5,
                    "update_section_list": 1,
                    "update_sections": 1
                },
                "process_function_00114190": {
                    "process_function": 8
                },
                "process_unaff_ebp_value_0010829e": {
                    "process_unaff_ebp_value": 8
                },
                "process_unaff_ebp_value_001082c6": {
                    "calculate_inverse_flag": 1
                },
                "uVar6": {
                    "error_message": 2,
                    "result": 24,
                    "return_value": 5
                }
            },
            "called": [
                "FUN_0010827b",
                "FUN_00119dd0",
                "FUN_00114190",
                "FUN_0010829e",
                "FUN_00104240",
                "FUN_00104470"
            ],
            "calling": [
                "FUN_001159d0"
            ],
            "code": "\nundefined8 check_section_and_options_00115b70(char **section_names)\n\n{\n  char *current_section;\n  int comparison_result;\n  int section_type;\n  long section_list_1;\n  long section_list_2;\n  undefined8 result;\n  long *section_list;\n  \n  section_list_1 = find_section_list(*section_names,0,4);\n  if (section_list_1 == 0) {\n    if ((DAT_001278d8 != '\\0') || (DAT_00127a39 != '\\0')) {\n      section_list_1 = find_section_list(*section_names,0,1);\n      section_list_2 = find_section_list(*section_names,0,2);\n      if (section_list_1 != 0) {\n        if (section_list_2 != 0) {\n          current_section = *section_names;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          fatal(result,current_section);\n        }\n        if (section_list_1 != 0) {\n          if (DAT_001279d8 == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_names;\n          section_list = DAT_001279d8;\n          do {\n            section_type = strcmp(current_section,(char *)section_list[1]);\n            if (section_type == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              fatal(result,current_section);\n            }\n            section_list = (long *)*section_list;\n          } while (section_list != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a39 != '\\0') && (section_list_2 == 0)) {\n        return 1;\n      }\n    }\n    section_type = DAT_00127a48;\n    if ((*(byte *)((long)section_names + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a48 - 2U < 2) || (DAT_00127a48 == 7)) || (DAT_00127a44 == 2)) ||\n         (DAT_001279a0 != '\\0')) {\n        current_section = *section_names;\n        comparison_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\".gnu_debuglink\"), comparison_result != 0)) {\n          section_type = strcmp(current_section,\".reloc\");\n          if (section_type != 0) {\n            return 1;\n          }\n          result = process_unaff_ebp_value();\n          return result;\n        }\n      }\n      if (section_type == 5) {\n        result = is_dwo_section(section_names);\n        return result;\n      }\n      if (section_type == 4) {\n        return 0;\n      }\n    }\n    if (section_type == 6) {\n      result = calculate_inverse_flag();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_section_and_options_00115b70",
            "entrypoint": "0x00115b70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115b70": "check_section_and_options_00115b70",
                "calculate_inverse_flag_001082b3": "calculate_inverse_flag",
                "iVar2": "comparison_result",
                "iVar3": "section_type",
                "is_dwo_section_constprop_0": "is_dwo_section",
                "lVar4": "section_list_1",
                "lVar5": "section_list_2",
                "param_1": "section_names",
                "pcVar1": "current_section",
                "plVar7": "section_list",
                "process_unaff_ebp_value_0010829e": "process_unaff_ebp_value",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115d00": {
            "additional_data": {
                "$1": {
                    "flag": 1
                },
                "$2": {
                    "flag2": 1
                },
                "DAT_001278d0": {
                    "data_offset": 1,
                    "data_ptr": 1
                },
                "FUN_001082c3": {
                    "get_configuration_info": 1,
                    "get_some_value": 1,
                    "get_sub_function_result": 2,
                    "initialize_structure": 1
                },
                "FUN_00115d00": {
                    "find_data": 1,
                    "find_matching_value": 12,
                    "find_valid_entry": 1,
                    "find_value": 3,
                    "find_value_based_on_conditions": 2,
                    "get_matching_value": 3,
                    "get_selected_value": 2,
                    "get_valid_value": 1,
                    "get_value_from_array": 1,
                    "lookup_value": 1,
                    "retrieve_data": 3
                },
                "lVar2": {
                    "matching_value": 10,
                    "result": 19,
                    "selected_value": 1
                },
                "param_1": {
                    "input1": 3,
                    "input_data": 2,
                    "input_param": 7,
                    "input_value": 9,
                    "input_value1": 2,
                    "param1": 1,
                    "selected_value": 1,
                    "value1": 1,
                    "value_array": 3,
                    "value_list": 1,
                    "value_to_check": 1
                },
                "param_2": {
                    "binary_data": 5,
                    "binary_param": 5,
                    "data": 1,
                    "data_param": 2,
                    "data_pointer": 1,
                    "data_struct": 2,
                    "data_struct_ptr": 1,
                    "data_structure": 6,
                    "info_pointer": 1,
                    "input2": 3,
                    "input_value2": 2,
                    "param2": 1,
                    "value2": 1
                },
                "uVar1": {
                    "byte_value": 1,
                    "compare_value": 1,
                    "comparison_value": 1,
                    "condition_check": 1,
                    "count": 4,
                    "counter": 2,
                    "data_count": 1,
                    "data_size": 1,
                    "entry_count": 1,
                    "index": 2,
                    "length": 1,
                    "list_length": 1,
                    "number_of_iterations": 1,
                    "size_limit": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp_value": 2,
                    "temp_value1": 1,
                    "temp_var1": 2,
                    "threshold": 2,
                    "value": 2
                }
            },
            "called": [
                "FUN_001082c3"
            ],
            "calling": [
                "FUN_00108179",
                "FUN_001159d0"
            ],
            "code": "\nlong find_matching_value_00115d00(long input_value,long data_structure)\n\n{\n  uint count;\n  long result;\n  \n  result = DAT_001278d0;\n  if (DAT_001278d0 != 0) {\n    if (*(int *)(*(long *)(data_structure + 8) + 8) == 5) {\n      if (*(int *)(input_value + 0x28) == *(int *)(*(long *)(data_structure + 0x110) + 0xd40)) {\n        count = *(uint *)(input_value + 0x2c);\n        if (count == 0) {\n          result = 0;\n        }\n        else if ((ulong)count <\n                 *(ulong *)(*(long *)(data_structure + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(data_structure + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278d0 + (ulong)(count - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "find_matching_value_00115d00",
            "entrypoint": "0x00115d00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115d00": "find_matching_value_00115d00",
                "lVar2": "result",
                "param_1": "input_value",
                "param_2": "data_structure",
                "uVar1": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115d70": {
            "additional_data": {
                "DAT_001279ea": {
                    "flag": 1
                },
                "FUN_00115d70": {
                    "check_for_symbol": 1,
                    "check_if_symbol_exists": 3,
                    "check_symbol": 4,
                    "check_symbol_existence": 3,
                    "check_symbol_exists": 1,
                    "check_symbol_in_table": 3,
                    "check_symbol_presence": 2,
                    "find_key_in_hash_table": 1,
                    "find_or_traverse_symbol": 1,
                    "find_symbol": 6,
                    "find_symbol_in_table": 2,
                    "find_value_in_hash_table": 1,
                    "find_value_in_table": 1,
                    "reverse_search": 1
                },
                "is_specified_symbol_predicate": {
                    "check_symbol_predicate": 1
                },
                "lVar1": {
                    "found": 1,
                    "found_symbol": 1,
                    "result": 11,
                    "symbol_address": 1,
                    "symbol_entry": 1,
                    "symbol_exists": 1,
                    "symbol_found": 3,
                    "symbol_hash": 1,
                    "symbol_present": 1,
                    "symbol_result": 1,
                    "symbol_value": 1,
                    "temporary_variable": 1,
                    "value": 1,
                    "value_result": 1
                },
                "local_10": {
                    "found": 2,
                    "found_value": 1,
                    "is_found": 5,
                    "is_present": 4,
                    "is_symbol_found": 2,
                    "is_symbol_present": 2,
                    "result": 1,
                    "result_variable": 1,
                    "symbol_exists": 7,
                    "symbol_found": 5,
                    "symbol_present": 1
                },
                "local_18": {
                    "current_symbol": 4,
                    "current_value": 1,
                    "found_symbol": 1,
                    "result": 1,
                    "search_symbol": 1,
                    "searched_symbol": 1,
                    "symbol": 2,
                    "symbol_check": 1,
                    "symbol_copy": 1,
                    "symbol_count": 1,
                    "symbol_found": 2,
                    "symbol_predicate_param": 1,
                    "symbol_ptr": 5,
                    "symbol_reference": 2,
                    "symbol_to_check": 1,
                    "symbol_to_find": 2,
                    "symbol_to_traverse": 1,
                    "target_symbol": 1,
                    "temp_variable_1": 1,
                    "value": 1
                },
                "param_1": {
                    "input_param_1": 1,
                    "input_value": 1,
                    "key": 1,
                    "param": 1,
                    "search_item": 1,
                    "search_key": 1,
                    "symbol": 24,
                    "symbol_to_check": 1
                },
                "param_2": {
                    "hash_table": 3,
                    "hashtable": 1,
                    "input_param_2": 1,
                    "symbol_table": 12,
                    "table": 14
                }
            },
            "called": [
                "FUN_00104580",
                "FUN_0011a170",
                "FUN_001047d0"
            ],
            "calling": [
                "FUN_001159d0",
                "FUN_001082df",
                "FUN_0010554f"
            ],
            "code": "\nundefined check_symbol_in_table_00115d70(undefined8 symbol,undefined8 table)\n\n{\n  long result;\n  undefined8 symbol_ptr;\n  undefined symbol_exists;\n  \n  if (DAT_001279ea == '\\0') {\n    result = htab_find(table,symbol);\n    symbol_exists = result != 0;\n  }\n  else {\n    symbol_exists = 0;\n    symbol_ptr = symbol;\n    htab_traverse(table,check_symbol_predicate,&symbol_ptr);\n  }\n  return symbol_exists;\n}\n\n",
            "current_name": "check_symbol_in_table_00115d70",
            "entrypoint": "0x00115d70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115d70": "check_symbol_in_table_00115d70",
                "is_specified_symbol_predicate": "check_symbol_predicate",
                "lVar1": "result",
                "local_10": "symbol_exists",
                "local_18": "symbol_ptr",
                "param_1": "symbol",
                "param_2": "table"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115dc0": {
            "additional_data": {
                "DAT_001278d0": {
                    "constant_4": 1,
                    "reloc_data_format": 1,
                    "reloc_type": 1
                },
                "DAT_00127a28": {
                    "constant_3": 1,
                    "specified_symbol": 1
                },
                "DAT_00127a40": {
                    "constant_2": 1,
                    "is_negative_reloc_count": 1,
                    "relocation_error_flag": 1
                },
                "DAT_00127a48": {
                    "constant_1": 1,
                    "section_data_type": 1,
                    "symbol_type": 1
                },
                "FUN_001082df": {
                    "bfd_nonfatal": 1
                },
                "FUN_001126c0": {
                    "bfd_nonfatal_message": 1
                },
                "FUN_00114190": {
                    "get_specified_symbol": 1
                },
                "FUN_00115dc0": {
                    "analyze_binary": 2,
                    "check_and_process_sections": 1,
                    "extract_and_improve": 1,
                    "extract_and_process_sections": 1,
                    "parse_binary": 1,
                    "process_binary": 9,
                    "process_binary_data": 2,
                    "process_binary_file": 1,
                    "process_binary_function": 9,
                    "process_binary_section": 1,
                    "process_section_data": 1
                },
                "FUN_00115f50": {
                    "skip_section": 1
                },
                "FUN_0011a110": {
                    "find_section_list": 1
                },
                "UNRECOVERED_JUMPTABLE": {
                    "jmp_table": 3,
                    "jump_table": 13,
                    "jump_table_address": 1,
                    "jump_table_function": 2,
                    "jumptable": 2,
                    "jumptable_address": 1,
                    "jumptable_func": 3,
                    "jumptable_function": 3,
                    "jumptable_function_pointer": 1,
                    "unrecovered_jumptable": 2
                },
                "bfd_alloc": {
                    "allocate_memory": 2
                },
                "bfd_canonicalize_reloc": {
                    "canonicalize_reloc": 1,
                    "canonicalize_relocation": 1
                },
                "bfd_get_error": {
                    "get_error": 1
                },
                "bfd_get_reloc_upper_bound": {
                    "get_reloc_upper_bound": 1,
                    "get_relocation_list_size": 1
                },
                "bfd_nonfatal": {
                    "non_fatal_error": 1
                },
                "bfd_nonfatal_message": {
                    "non_fatal_error_message": 1
                },
                "cVar1": {
                    "section_check": 1,
                    "section_flag": 1,
                    "section_result": 2,
                    "section_skip_result": 2,
                    "section_skipped": 3,
                    "section_status": 2,
                    "should_skip_section": 1,
                    "skip": 2,
                    "skip_flag": 1,
                    "skip_result": 6,
                    "skip_section_result": 10
                },
                "dcgettext": {
                    "get_error_string": 1
                },
                "iVar2": {
                    "bfd_error": 10,
                    "bfd_error_code": 1,
                    "bfd_result": 1,
                    "error": 6,
                    "error_code": 7,
                    "error_number": 1,
                    "error_status": 1,
                    "error_var": 2,
                    "get_error_result": 1,
                    "reloc_upper_bound": 1
                },
                "is_specified_symbol": {
                    "is_symbol_specified": 1
                },
                "lVar4": {
                    "reloc_size": 1,
                    "reloc_upper_bound": 1,
                    "section_index": 1,
                    "section_list": 7,
                    "section_list_found": 1,
                    "section_list_offset": 3,
                    "section_list_ptr": 1,
                    "section_list_result": 8,
                    "section_list_size": 4,
                    "section_list_var": 1,
                    "section_offset": 1,
                    "section_result": 2
                },
                "param_1": {
                    "binary_data": 1,
                    "binary_file": 1,
                    "binary_file_handle": 1,
                    "data_buffer": 1,
                    "file_handle": 1,
                    "input_param": 1,
                    "param1": 15,
                    "param_1": 9,
                    "param_a": 1
                },
                "param_2": {
                    "header_data": 1,
                    "param2": 14,
                    "param2_list": 1,
                    "param_2": 4,
                    "param_array": 1,
                    "param_b": 1,
                    "parameter_list": 1,
                    "section_data": 1,
                    "section_headers": 2,
                    "section_info": 2,
                    "section_list": 1,
                    "section_pointers": 1,
                    "section_table": 1
                },
                "param_3": {
                    "base_address": 1,
                    "binary_data": 1,
                    "binary_file": 1,
                    "binary_header_offset": 1,
                    "binary_info": 1,
                    "data_info": 1,
                    "header_size": 1,
                    "param3": 15,
                    "param_3": 6,
                    "param_c": 1,
                    "param_size": 1,
                    "reloc_info_size": 1
                },
                "puVar5": {
                    "reloc_array": 10,
                    "reloc_array_ptr": 1,
                    "reloc_data": 8,
                    "reloc_data_ptr": 1,
                    "reloc_list": 3,
                    "reloc_ptr": 1,
                    "reloc_section_ptr": 1,
                    "reloc_table": 4,
                    "relocated_symbols": 1,
                    "relocation_table": 1
                },
                "puVar7": {
                    "current_reloc": 2,
                    "current_symbol": 1,
                    "dest_array": 1,
                    "filtered_reloc_array": 1,
                    "filtered_reloc_array_ptr": 1,
                    "filtered_reloc_data": 1,
                    "filtered_reloc_data_ptr": 1,
                    "filtered_reloc_list": 1,
                    "filtered_relocations": 1,
                    "new_reloc_array": 2,
                    "new_reloc_table": 1,
                    "next_reloc": 1,
                    "out_reloc_table": 1,
                    "processed_array": 1,
                    "pu_var": 1,
                    "pu_var7": 2,
                    "reloc_array_iter": 1,
                    "reloc_array_ptr": 1,
                    "reloc_list_iter": 1,
                    "reloc_ptr": 1,
                    "reloc_section_ptr1": 1,
                    "relocated_symbols": 2,
                    "result_data": 1,
                    "specified_symbols": 1,
                    "specified_symbols_array": 1,
                    "temp_ptr": 1,
                    "temp_var1": 1
                },
                "puVar8": {
                    "current_reloc": 1,
                    "current_reloc_entry": 1,
                    "current_relocation": 1,
                    "dest_array_ptr": 1,
                    "filtered_reloc_array_iter": 1,
                    "filtered_reloc_array_ptr2": 1,
                    "filtered_reloc_data_iter": 1,
                    "filtered_reloc_data_ptr_iterator": 1,
                    "filtered_reloc_list_iter": 1,
                    "filtered_reloc_list_ptr": 1,
                    "filtered_reloc_ptr": 1,
                    "filtered_symbols": 1,
                    "new_array": 1,
                    "new_ptr": 1,
                    "new_reloc_array_index": 1,
                    "new_reloc_array_pointer": 1,
                    "new_relocated_symbols": 1,
                    "next_filtered_reloc": 1,
                    "next_pu_var": 1,
                    "next_reloc": 2,
                    "next_symbol": 1,
                    "out_reloc_table_ptr": 1,
                    "pu_var8": 2,
                    "reloc_array_ptr2": 1,
                    "reloc_section_ptr2": 1,
                    "relocated_symbols_current": 1,
                    "result_data_end": 1,
                    "specified_symbols_array_end": 1,
                    "temp_var2": 1
                },
                "skip_section": {
                    "check_if_section_skippable": 1
                },
                "uStack_38": {
                    "error_message": 3,
                    "error_stack": 2,
                    "message_argument": 1,
                    "stack_param": 1,
                    "stack_var": 8,
                    "stack_variable": 9,
                    "u_stack38": 1,
                    "u_stack_38": 3,
                    "u_stack_var": 1,
                    "unknown_stack_var": 1
                },
                "uVar3": {
                    "error_message": 1,
                    "message_id": 1,
                    "reloc_count": 9,
                    "reloc_result": 2,
                    "reloc_section_size": 1,
                    "reloc_size": 2,
                    "reloc_upper_bound": 7,
                    "reloc_upper_bound_result": 1,
                    "reloc_var": 2,
                    "relocation_count": 1,
                    "result": 1,
                    "section_list": 1,
                    "section_ptr": 1,
                    "section_size": 1
                },
                "uVar6": {
                    "count": 1,
                    "reloc_array_size": 1,
                    "reloc_count": 21,
                    "reloc_count2": 1,
                    "reloc_data_size": 1,
                    "reloc_size": 2,
                    "reloc_size_adjusted": 1,
                    "relocation_count": 3
                },
                "uVar9": {
                    "filtered_reloc_count": 3,
                    "index": 8,
                    "iteration": 1,
                    "iterator": 1,
                    "loop_counter": 4,
                    "loop_index": 3,
                    "loop_var": 4,
                    "reloc_data_index": 1,
                    "reloc_index": 1,
                    "symbol_index": 3,
                    "u_var9": 1
                },
                "xexit": {
                    "exit_program": 1
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_00115f50",
                "FUN_001047b0",
                "FUN_0011a110",
                "FUN_00104250",
                "FUN_00114190",
                "FUN_001126c0",
                "FUN_001082df",
                "FUN_00104240",
                "FUN_00104760",
                "FUN_00104840"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid process_binary_function_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char skip_section_result;\n  int bfd_error;\n  undefined8 reloc_count;\n  long section_list_result;\n  undefined8 *reloc_array;\n  ulong reloc_count;\n  code *jump_table;\n  undefined8 *relocated_symbols;\n  undefined8 *next_reloc;\n  ulong index;\n  undefined8 stack_variable;\n  \n  skip_section_result = check_if_section_skippable(param1,param2,0);\n  if (skip_section_result != '\\0') {\n    return;\n  }\n  reloc_count = param2[0xc];\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a48 != 6)) &&\n     (section_list_result = find_section_list(*param2,0,0x100), section_list_result == 0)) {\n    section_list_result = get_relocation_list_size(param1,param2);\n    if (section_list_result < 0) {\n      if ((section_list_result != -1) || (bfd_error = get_error(), bfd_error != 5)) {\n        DAT_00127a40 = 1;\n        reloc_count = 0;\nLAB_00108315:\n        non_fatal_error_message(0,param1,param2,reloc_count,stack_variable);\n        return;\n      }\n    }\n    else if (section_list_result != 0) {\n      reloc_array = (undefined8 *)param2[0xe];\n      if (reloc_array == (undefined8 *)0x0) {\n        reloc_array = (undefined8 *)allocate_memory(param3);\n        if (reloc_array == (undefined8 *)0x0) {\n          non_fatal_error(0);\n                    \n          exit_program(1);\n        }\n        reloc_count = canonicalize_reloc(param1,param2,reloc_array,DAT_001278d0);\n        if ((long)reloc_count < 0) {\n          DAT_00127a40 = 1;\n          reloc_count = get_error_string(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        reloc_count = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (DAT_00127a48 == 7) {\n        relocated_symbols = reloc_array;\n        for (index = 0; index != reloc_count; index = index + 1) {\n          next_reloc = relocated_symbols;\n          if (((*(long **)reloc_array[index] != (long *)0x0) &&\n              (section_list_result = **(long **)reloc_array[index], section_list_result != 0)) &&\n             (skip_section_result = is_symbol_specified(*(undefined8 *)(section_list_result + 8),DAT_00127a28), skip_section_result != '\\0'))\n          {\n            next_reloc = relocated_symbols + 1;\n            *relocated_symbols = reloc_array[index];\n          }\n          relocated_symbols = next_reloc;\n        }\n        *relocated_symbols = 0;\n        reloc_count = (long)relocated_symbols - (long)reloc_array >> 3;\n      }\n      jump_table = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (reloc_count == 0) {\n        reloc_count = 0;\n        reloc_array = (undefined8 *)0x0;\n      }\n      else {\n        reloc_count = reloc_count & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  reloc_count = 0;\n  reloc_array = (undefined8 *)0x0;\n  jump_table = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(param3,reloc_count,reloc_array,reloc_count);\n  return;\n}\n\n",
            "current_name": "process_binary_function_00115dc0",
            "entrypoint": "0x00115dc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115dc0": "process_binary_function_00115dc0",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "bfd_alloc": "allocate_memory",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_get_error": "get_error",
                "bfd_get_reloc_upper_bound": "get_relocation_list_size",
                "bfd_nonfatal": "non_fatal_error",
                "bfd_nonfatal_message": "non_fatal_error_message",
                "cVar1": "skip_section_result",
                "dcgettext": "get_error_string",
                "iVar2": "bfd_error",
                "is_specified_symbol": "is_symbol_specified",
                "lVar4": "section_list_result",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar5": "reloc_array",
                "puVar7": "relocated_symbols",
                "puVar8": "next_reloc",
                "skip_section": "check_if_section_skippable",
                "uStack_38": "stack_variable",
                "uVar3": "reloc_count",
                "uVar6": "reloc_count",
                "uVar9": "index",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115f30": {
            "additional_data": {
                "FUN_00115f30": {
                    "check_and_drop_share_flag": 1,
                    "drop_flag_if_not_coff": 1,
                    "drop_share_flag": 7,
                    "drop_share_flag_if_not_coff": 15,
                    "drop_share_flag_if_output_format_not_coff": 1,
                    "dropping_share_flag_if_not_coff": 1,
                    "remove_share_flag": 1,
                    "remove_share_flag_if_needed": 1,
                    "remove_share_flag_if_not_coff": 2,
                    "update_flag_if_not_coff": 1
                },
                "dcgettext": {
                    "get_localized_message": 1,
                    "get_localized_string": 1
                },
                "non_fatal": {
                    "handle_non_fatal_error": 1,
                    "log_non_fatal": 1
                },
                "param_1": {
                    "flag": 2,
                    "flags": 21,
                    "input_flag": 2,
                    "input_flags": 4,
                    "original_flag": 1,
                    "original_flags": 1
                },
                "param_2": {
                    "args": 3,
                    "arguments": 6,
                    "param_array": 1,
                    "parameters": 6,
                    "params": 8,
                    "params_array": 1,
                    "pointers": 5,
                    "strings_array": 1
                },
                "param_3": {
                    "additional_param": 1,
                    "extra_param": 1,
                    "format": 2,
                    "note": 2,
                    "output": 3,
                    "output_format": 18,
                    "output_message": 1,
                    "value": 3
                },
                "uVar1": {
                    "arg1": 2,
                    "current_argument": 1,
                    "first_arg": 3,
                    "first_param": 5,
                    "first_parameter": 2,
                    "first_pointer": 2,
                    "first_string": 1,
                    "first_value": 1,
                    "param1_copy": 1,
                    "param1_value": 4,
                    "value": 4,
                    "value1": 2,
                    "var1": 3
                },
                "uVar2": {
                    "error_message": 9,
                    "error_msg": 3,
                    "error_string": 2,
                    "localized_message": 1,
                    "message": 9,
                    "note_message": 2,
                    "value2": 1,
                    "var2": 3,
                    "warning_message": 1
                }
            },
            "called": [
                "FUN_00108375"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "code": "\nuint drop_share_flag_if_output_format_not_coff_00115f30(uint flags,undefined8 *params,undefined8 output_format)\n\n{\n  undefined8 first_param;\n  undefined8 error_message;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(params[1] + 8) != 2)) {\n    first_param = *params;\n    flags = flags & 0xf7ffffff;\n    error_message = get_localized_string(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    handle_non_fatal_error(error_message,first_param,output_format);\n  }\n  return flags;\n}\n\n",
            "current_name": "drop_share_flag_if_output_format_not_coff_00115f30",
            "entrypoint": "0x00115f30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_output_format_not_coff_00115f30",
                "dcgettext": "get_localized_string",
                "non_fatal": "handle_non_fatal_error",
                "param_1": "flags",
                "param_2": "params",
                "param_3": "output_format",
                "uVar1": "first_param",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115f50": {
            "additional_data": {
                "CONCAT31": {
                    "concat_31": 1,
                    "concatenate": 1,
                    "concatenate_3_and_1": 1
                },
                "CONCAT71": {
                    "concat_71": 1,
                    "concatenate": 1,
                    "concatenate_7_and_1": 1
                },
                "DAT_0012790c": {
                    "another_flag": 1,
                    "flag2": 1,
                    "is_flag_set": 1,
                    "is_not_null": 1,
                    "is_section_explicit": 1,
                    "other_flag": 1,
                    "strip_section_flag_2": 1
                },
                "DAT_001279d8": {
                    "data_list": 1,
                    "data_ptr": 1,
                    "duplicate_file_list_ptr": 1,
                    "duplicate_section_list": 1,
                    "duplicate_section_table": 1,
                    "duplicate_sections": 1,
                    "stored_arguments": 1
                },
                "DAT_00127a20": {
                    "build_attributes_flag": 2,
                    "flag3": 1,
                    "is_build_flag": 1,
                    "is_gnu_section": 1,
                    "is_nonzero": 1,
                    "yet_another_flag": 1
                },
                "DAT_00127a40": {
                    "flag1": 1,
                    "is_not_zero": 1,
                    "is_section_banned": 1,
                    "is_strip_flag": 1,
                    "section_flag": 1,
                    "strip_section_flag": 2
                },
                "FUN_001159d0": {
                    "get_section_type": 1
                },
                "FUN_00115f50": {
                    "check_and_validate_parameters": 1,
                    "check_build_attributes": 1,
                    "check_build_section": 1,
                    "check_duplicate_entry": 1,
                    "check_duplicate_in_strip_section": 1,
                    "check_duplicate_section": 4,
                    "check_duplicate_sections": 5,
                    "check_duplicate_symbol": 1,
                    "check_if_duplicate_section": 1,
                    "check_section": 1,
                    "check_section_and_attributes": 6,
                    "check_section_and_symbols": 1,
                    "check_section_duplicate": 1,
                    "check_section_for_duplicates": 1,
                    "check_sections_and_attributes": 1,
                    "check_strip_and_build_attributes": 1,
                    "check_strip_section": 1,
                    "check_valid_section": 1,
                    "validate_build_attributes": 1
                },
                "PTR_FUN_00113fb0": {
                    "compare_sections": 1,
                    "helper_function1": 1
                },
                "PTR_FUN_001159d0": {
                    "helper_function2": 1
                },
                "__s1": {
                    "arg": 2,
                    "argument": 1,
                    "argument_string": 1,
                    "current_argument": 4,
                    "current_file_name": 1,
                    "current_name": 1,
                    "current_section": 4,
                    "current_section_name": 5,
                    "current_string": 2,
                    "current_symbol_name": 2,
                    "section": 1,
                    "section_name": 3,
                    "str1": 1,
                    "string1": 3
                },
                "auVar4": {
                    "attribute_check_result": 1,
                    "attribute_result": 2,
                    "auxiliary_variable": 1,
                    "compare_result": 1,
                    "comparison": 1,
                    "comparison_array": 1,
                    "comparison_auxiliary": 1,
                    "comparison_result": 3,
                    "comparison_result_array": 2,
                    "comparison_results_and_temporary_variables": 1,
                    "function_attributes": 1,
                    "is_strip_section_result": 1,
                    "result": 4,
                    "result_array": 2,
                    "return_value": 1,
                    "section_check_result": 1,
                    "startswith_result": 2,
                    "strip_check_result": 1,
                    "temp_array": 1,
                    "temp_var": 1,
                    "temp_variable": 1,
                    "temporary_array": 1
                },
                "duplicate_section_list": {
                    "duplicate_sections": 1
                },
                "extraout_EDX": {
                    "extra_output_edx": 1,
                    "extra_result": 1,
                    "is_strip_symbols": 1,
                    "unused_variable": 1
                },
                "is_strip_section_isra_0": {
                    "is_strip_section": 6,
                    "is_stripped_section": 1
                },
                "param_1": {
                    "address": 5,
                    "arg1": 1,
                    "argument1": 1,
                    "file_handle": 1,
                    "file_offset": 3,
                    "file_path": 1,
                    "file_ptr": 1,
                    "input": 3,
                    "input_length": 1,
                    "input_value1": 1,
                    "length": 1,
                    "offset": 1,
                    "ptr_section": 1,
                    "section_count": 2,
                    "section_header": 1,
                    "section_info": 1,
                    "section_list": 1,
                    "section_offset": 1,
                    "section_pointer": 1,
                    "section_table": 1,
                    "symbol_table_size": 1,
                    "value": 1
                },
                "param_2": {
                    "arg2": 1,
                    "arguments": 11,
                    "file_array": 1,
                    "file_content": 1,
                    "file_data": 1,
                    "input_strings": 1,
                    "input_value2": 1,
                    "section_names": 8,
                    "sections": 3,
                    "strings": 1,
                    "symbol_table": 1,
                    "symbols": 1
                },
                "param_3": {
                    "arg3": 1,
                    "check_attributes": 1,
                    "check_build_attributes": 1,
                    "check_flag": 1,
                    "enable_check": 1,
                    "flag": 17,
                    "input_value3": 1,
                    "is_debug": 1,
                    "is_elf_file": 1,
                    "is_section_needed": 1,
                    "is_static": 1,
                    "is_strip": 1,
                    "is_stripped": 2,
                    "strip": 1
                },
                "plVar3": {
                    "attribute_pointer": 1,
                    "current_attribute_list": 1,
                    "current_entry": 2,
                    "current_section": 1,
                    "entry": 2,
                    "file_list_ptr": 1,
                    "iterator": 1,
                    "linked_list": 4,
                    "linked_list_pointer": 2,
                    "linked_list_ptr": 1,
                    "list_pointer": 1,
                    "list_ptr": 1,
                    "pointer": 1,
                    "pointer_array": 1,
                    "pointer_list": 2,
                    "ptr": 1,
                    "ptr_list": 1,
                    "section_attr_list": 1,
                    "section_list": 2,
                    "section_node": 1,
                    "section_pointer": 2,
                    "symbol_entry": 1
                },
                "startswith_lto_priv_0_lto_priv_0": {
                    "starts_with": 1,
                    "startswith": 3,
                    "startswith_lto": 1
                },
                "strcmp": {
                    "compare_strings": 1
                },
                "uVar1": {
                    "cmp_result": 1,
                    "compare_result": 3,
                    "comparison": 1,
                    "comparison_result": 13,
                    "name_comparison_result": 1,
                    "result": 4,
                    "strcmp_result": 4,
                    "string_cmp_result": 1,
                    "string_comparison": 1,
                    "string_comparison_result": 2
                },
                "uVar2": {
                    "attribute_check_result": 1,
                    "auxiliary_var": 1,
                    "comparison_result": 3,
                    "extra": 1,
                    "extra_data": 1,
                    "extra_info": 1,
                    "extra_out_var": 1,
                    "extra_output": 2,
                    "extra_result": 1,
                    "func_result": 1,
                    "function_result": 1,
                    "is_build_attribute": 1,
                    "is_local_object": 1,
                    "is_strip_result": 1,
                    "result": 5,
                    "return_value": 2,
                    "retval": 1,
                    "section_attr_offset": 1,
                    "start_flag": 1,
                    "status": 1,
                    "temp_result": 2,
                    "value": 1
                }
            },
            "called": [
                "FUN_00113fb0",
                "FUN_001159d0",
                "FUN_00104470"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "code": "\nuint check_sections_and_attributes_00115f50(long address,char **arguments,char flag)\n\n{\n  char *current_section_name;\n  uint comparison_result;\n  undefined4 result;\n  undefined4 extra_output_edx;\n  long *linked_list;\n  undefined result [12];\n  \n  if ((DAT_00127a40 != 0) || (DAT_0012790c != '\\0')) {\n    return 1;\n  }\n  result = is_strip_section(arguments);\n  if (result[0] == '\\0') {\n    if (DAT_001279d8 != (long *)0x0) {\n      current_section_name = *arguments;\n      linked_list = DAT_001279d8;\n      do {\n        comparison_result = compare_strings(current_section_name,(char *)linked_list[1]);\n        result._4_4_ = 0;\n        result._0_4_ = comparison_result;\n        result._8_4_ = extra_output_edx;\n        if (comparison_result == 0) {\n          return 1;\n        }\n        linked_list = (long *)*linked_list;\n      } while (linked_list != (long *)0x0);\n    }\n    result = result._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a20 == '\\0')) ||\n         (result._8_4_ = result, result._0_8_ = *(long *)(address + 8),\n         *(int *)(*(long *)(address + 8) + 8) != 5)) ||\n        ((result._0_8_ = (ulong)arguments[0x1a], *(int *)(arguments[0x1a] + 4) != 7 ||\n         (result = startswith(*arguments,\".gnu.build.attributes\"),\n         result[0] == '\\0')))) && ((*(byte *)((long)arguments + 0x27) & 2) == 0)) {\n      return (uint)concatenate(result._1_7_,arguments[8] == (char *)0x0) |\n             concatenate_3_and_1(result._9_3_,arguments[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_sections_and_attributes_00115f50",
            "entrypoint": "0x00115f50",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT31": "concatenate_3_and_1",
                "CONCAT71": "concatenate",
                "FUN_00115f50": "check_sections_and_attributes_00115f50",
                "__s1": "current_section_name",
                "auVar4": "result",
                "extraout_EDX": "extra_output_edx",
                "is_strip_section_isra_0": "is_strip_section",
                "param_1": "address",
                "param_2": "arguments",
                "param_3": "flag",
                "plVar3": "linked_list",
                "startswith_lto_priv_0_lto_priv_0": "startswith",
                "strcmp": "compare_strings",
                "uVar1": "comparison_result",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116030": {
            "additional_data": {
                "FUN_001083b7": {
                    "get_reloc_upper_bound": 1
                },
                "FUN_00116030": {
                    "process_reloc": 3,
                    "process_reloc_data": 3,
                    "process_reloc_info": 1,
                    "process_reloc_section": 1,
                    "process_reloc_table": 2,
                    "process_relocation": 11,
                    "process_relocations": 4,
                    "process_relocs": 5,
                    "relocate_function": 1
                },
                "FUN_0011a110": {
                    "nonfatal": 1
                },
                "__ptr": {
                    "memory_pointer": 1,
                    "memory_ptr": 1,
                    "reloc_array": 2,
                    "reloc_buffer": 13,
                    "reloc_data": 5,
                    "reloc_data_buffer": 1,
                    "reloc_entries": 1,
                    "reloc_ptr": 3,
                    "reloc_ptrs": 1,
                    "reloc_table_ptr": 1,
                    "relocation_table": 1
                },
                "extraout_RAX": {
                    "exit_code": 1,
                    "extra_result": 1,
                    "extra_return_val": 1,
                    "extra_return_value": 7,
                    "final_return_value": 1,
                    "new_result": 1,
                    "result": 2,
                    "result_2": 1,
                    "return_value": 3,
                    "return_value2": 1,
                    "return_value_2": 2
                },
                "iVar5": {
                    "bfd_error": 5,
                    "bfd_error_code": 1,
                    "error": 2,
                    "error_code": 19,
                    "error_num": 1,
                    "error_val": 1,
                    "variable_4": 1
                },
                "in_RAX": {
                    "default_return_value": 1,
                    "initial_return_value": 1,
                    "original_result": 1,
                    "result": 7,
                    "return_val": 1,
                    "return_value": 18
                },
                "lVar1": {
                    "reloc_upper_bound": 1,
                    "upper_bound": 1
                },
                "lVar2": {
                    "array_value": 1,
                    "current_reloc_value": 1,
                    "error_code": 2,
                    "reloc_addr": 2,
                    "reloc_address": 4,
                    "reloc_entry": 3,
                    "reloc_entry_address": 1,
                    "reloc_entry_value": 1,
                    "reloc_val": 1,
                    "reloc_value": 11,
                    "temp_var": 1,
                    "value": 2,
                    "variable_1": 1
                },
                "lVar3": {
                    "address1": 1,
                    "address_1": 1,
                    "buffer_size": 1,
                    "constant1": 2,
                    "constant_1": 3,
                    "constant_value_1": 1,
                    "data_address_1": 1,
                    "first_constant": 1,
                    "first_reloc": 2,
                    "function1_offset": 1,
                    "function_address_1": 1,
                    "fwrite_value_a": 1,
                    "l_var3": 3,
                    "output_section_vma": 1,
                    "ptr": 1,
                    "reloc_got_address": 1,
                    "reloc_val1": 1,
                    "reloc_variable": 1,
                    "reserved_value_1": 1,
                    "target_addr_1": 1,
                    "target_entry1": 1,
                    "value_1": 1,
                    "var1": 2,
                    "variable_2": 1
                },
                "lVar4": {
                    "address2": 1,
                    "address_2": 1,
                    "constant2": 2,
                    "constant_2": 3,
                    "constant_value_2": 1,
                    "data_address_2": 1,
                    "function2_offset": 1,
                    "function_address_2": 1,
                    "fwrite_addr": 1,
                    "fwrite_address": 1,
                    "fwrite_func": 1,
                    "fwrite_value_b": 1,
                    "l_var4": 2,
                    "output_section_lma": 1,
                    "reloc_plt_address": 1,
                    "reloc_val2": 1,
                    "reserved_value_2": 1,
                    "result": 1,
                    "second_constant": 1,
                    "second_reloc": 2,
                    "target_addr_2": 1,
                    "target_entry2": 1,
                    "value_2": 1,
                    "var2": 2,
                    "variable_3": 1
                },
                "lVar5": {
                    "reloc_count": 1
                },
                "lVar6": {
                    "constant_3": 1,
                    "fwrite": 3,
                    "fwrite_addr": 1,
                    "fwrite_address": 5,
                    "fwrite_entry": 1,
                    "fwrite_fn": 1,
                    "fwrite_func": 1,
                    "fwrite_function": 1,
                    "fwrite_ptr": 1,
                    "fwrite_val": 1,
                    "fwrite_value": 2,
                    "fwrite_var": 1,
                    "l_var6": 1,
                    "reloc_size": 1,
                    "reloc_table": 1,
                    "reloc_upper_bound": 2,
                    "upper_bound": 4,
                    "variable_5": 1,
                    "write_function": 2
                },
                "lVar7": {
                    "canonicalize_result": 2,
                    "canonicalize_return": 1,
                    "num_reloc_entries": 1,
                    "num_relocations": 1,
                    "num_relocs": 10,
                    "reloc_count": 10,
                    "reloc_size": 1,
                    "reloc_table_length": 1,
                    "reloc_val": 1,
                    "reloc_value": 1,
                    "result": 1,
                    "variable_6": 1
                },
                "lVar8": {
                    "counter": 3,
                    "i": 3,
                    "idx": 1,
                    "index": 7,
                    "iter": 1,
                    "iteration": 1,
                    "iterator": 1,
                    "loop_counter": 1,
                    "loop_index": 2,
                    "loop_var": 1,
                    "reloc_index": 9,
                    "variable_7": 1
                },
                "param_1": {
                    "args": 1,
                    "arguments": 1,
                    "bfd": 1,
                    "bfd_handle": 4,
                    "bfd_handler": 1,
                    "bfile": 1,
                    "binary_file": 2,
                    "file_handle": 3,
                    "file_ptr": 1,
                    "input_file": 1,
                    "p_bfd": 1,
                    "param1": 1,
                    "param_1": 2,
                    "param_array": 6,
                    "param_bfd": 1,
                    "param_pointer": 3,
                    "param_ptr": 1
                },
                "param_2": {
                    "data": 1,
                    "num_args": 1,
                    "offset": 3,
                    "param2": 1,
                    "param_2": 2,
                    "param_length": 3,
                    "param_size": 2,
                    "param_val": 1,
                    "param_value": 3,
                    "param_vma": 1,
                    "reloc_address": 1,
                    "reloc_data": 1,
                    "reloc_info": 1,
                    "reloc_section": 1,
                    "reloc_section_address": 1,
                    "reloc_upper_bound": 1,
                    "relocation_section_offset": 1,
                    "section": 1,
                    "section_address": 1,
                    "section_header": 1,
                    "section_offset": 1,
                    "section_vma": 1,
                    "symtab_start": 1
                },
                "plVar1": {
                    "current_reloc": 4,
                    "current_reloc_entry": 1,
                    "p_reloc_ptr": 1,
                    "pointer_1": 1,
                    "pointer_var": 1,
                    "ptr": 2,
                    "ptr_array": 1,
                    "reloc_data_ptr": 1,
                    "reloc_entry": 10,
                    "reloc_pointer": 1,
                    "reloc_ptr": 4
                },
                "uStack_28": {
                    "default_result": 1,
                    "default_return": 2,
                    "default_return_value": 2,
                    "empty_stack_element": 1,
                    "fallback_value": 1,
                    "return_val2": 1,
                    "return_value_3": 1,
                    "stack_value": 3,
                    "stack_var": 3,
                    "stack_variable": 5,
                    "stack_variable_1": 1,
                    "temp": 1,
                    "temporary_variable": 1,
                    "u_stack_28": 2,
                    "unused_result": 1,
                    "updated_result": 1
                }
            },
            "called": [
                "FUN_001047b0",
                "FUN_001048f0",
                "FUN_001083b7",
                "FUN_0011a110",
                "FUN_00128450",
                "FUN_00104760",
                "FUN_00104840",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 process_relocation_00116030(undefined8 *param_array,long param_length)\n\n{\n  long *reloc_entry;\n  long reloc_value;\n  long constant_1;\n  long constant_2;\n  int error_code;\n  undefined8 return_value;\n  long fwrite_address;\n  void *reloc_buffer;\n  long reloc_count;\n  undefined8 extra_return_value;\n  long reloc_index;\n  undefined8 stack_variable;\n  \n  if (*(long *)(param_length + 0x60) == 0) {\n    return return_value;\n  }\n  fwrite_address = bfd_get_reloc_upper_bound();\n  if (fwrite_address < 0) {\n    if ((fwrite_address != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      bfd_nonfatal(*param_array);\n                    \n      xexit(1);\n    }\n  }\n  else if (fwrite_address != 0) {\n    reloc_buffer = (void *)xmalloc();\n    reloc_count = bfd_canonicalize_reloc(param_array,param_length,reloc_buffer);\n    constant_2 = _DAT_00128680;\n    constant_1 = _DAT_00128568;\n    fwrite_address = _fwrite;\n    if (reloc_count < 0) {\n      bfd_nonfatal(*param_array);\n                    \n      xexit(1);\n    }\n    if (reloc_count != 0) {\n      reloc_index = 0;\n      do {\n        reloc_entry = **(long ***)((long)reloc_buffer + reloc_index * 8);\n        if ((((reloc_entry != (long *)0x0) && (reloc_value = *reloc_entry, reloc_value != 0)) && (reloc_value != fwrite_address)) &&\n           ((reloc_value != constant_2 && (reloc_value != constant_1)))) {\n          *(uint *)(reloc_value + 0x18) = *(uint *)(reloc_value + 0x18) | 0x20;\n        }\n        reloc_index = reloc_index + 1;\n      } while (reloc_count != reloc_index);\n    }\n    free(reloc_buffer);\n    return extra_return_value;\n  }\n  return stack_variable;\n}\n\n",
            "current_name": "process_relocation_00116030",
            "entrypoint": "0x00116030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116030": "process_relocation_00116030",
                "__ptr": "reloc_buffer",
                "extraout_RAX": "extra_return_value",
                "iVar5": "error_code",
                "in_RAX": "return_value",
                "lVar1": "upper_bound",
                "lVar2": "reloc_value",
                "lVar3": "constant_1",
                "lVar4": "constant_2",
                "lVar6": "fwrite_address",
                "lVar7": "reloc_count",
                "lVar8": "reloc_index",
                "param_1": "param_array",
                "param_2": "param_length",
                "plVar1": "reloc_entry",
                "uStack_28": "stack_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116110": {
            "additional_data": {
                "DAT_001264b8": {
                    "var2": 1
                },
                "DAT_001264bc": {
                    "var3": 1
                },
                "DAT_00127908": {
                    "var1": 1
                },
                "DAT_00127a3c": {
                    "var4": 1
                },
                "DAT_00127a40": {
                    "flag_variable1": 1
                },
                "FUN_00116110": {
                    "decompile_and_improve_binary": 1,
                    "extract_section_data": 1,
                    "process_binary_section": 1,
                    "process_section": 15,
                    "replace_section_contents": 1,
                    "reverse_section_contents": 5,
                    "section_content_manipulation": 1
                },
                "__ptr": {
                    "allocated_memory": 8,
                    "allocated_section_contents": 1,
                    "buffer": 5,
                    "buffer_pointer": 1,
                    "data_pointer": 1,
                    "dynamic_array": 1,
                    "dynamic_mem_ptr": 1,
                    "malloced_memory": 1,
                    "memory_buffer": 1,
                    "memory_ptr": 1,
                    "new_section_contents": 1,
                    "pointer": 1,
                    "ptr": 1,
                    "ptr1": 1,
                    "section_buffer": 1,
                    "section_content": 3,
                    "section_contents": 1,
                    "section_data": 1
                },
                "bVar20": {
                    "bool_value": 1,
                    "byte_flag": 2,
                    "byte_var": 1,
                    "conditional": 1,
                    "flag": 7,
                    "flag2": 1,
                    "flag_var": 1,
                    "is_last_chunk": 1,
                    "reset_value": 1,
                    "skip_flag": 3,
                    "skip_flag2": 1,
                    "temp20": 1,
                    "temp_20": 1,
                    "temp_b_var20": 1,
                    "temp_byte": 1,
                    "temp_byte1": 1,
                    "temp_byte2": 2,
                    "temp_byte20": 1,
                    "temp_byte3": 1,
                    "temp_var20": 2
                },
                "bfd_convert_section_contents": {
                    "convert_section_contents": 2
                },
                "bfd_get_full_section_contents": {
                    "get_full_section_contents": 2
                },
                "bfd_nonfatal_message": {
                    "handle_non_fatal_message": 1,
                    "print_non_fatal_message": 1
                },
                "bfd_set_section_contents": {
                    "set_section_contents": 2
                },
                "bfd_set_section_size": {
                    "set_section_size": 2
                },
                "cVar6": {
                    "check_value": 1,
                    "condition_var": 1,
                    "flag": 3,
                    "result": 7,
                    "result_char": 2,
                    "return_value": 1,
                    "skip_flag": 2,
                    "skip_section_flag": 1,
                    "skip_section_result": 2,
                    "skip_section_status": 1,
                    "status": 1,
                    "temp6": 1,
                    "temp_6": 1,
                    "temp_c_var6": 1,
                    "temp_char": 4,
                    "temp_var6": 2
                },
                "dcgettext": {
                    "translate_text": 1
                },
                "fatal": {
                    "handle_fatal_message": 1,
                    "print_fatal_error": 1
                },
                "find_section_list": {
                    "find_section_list": 2
                },
                "free": {
                    "deallocate_memory": 1
                },
                "free_and_cleanup_memory_00108466": {
                    "cleanup_memory": 1
                },
                "iVar10": {
                    "counter2": 1,
                    "divider": 1,
                    "division_factor": 1,
                    "divisor": 3,
                    "loop_count": 1,
                    "loop_count2": 1,
                    "loop_counter4": 1,
                    "loop_index2": 1,
                    "loop_index3": 1,
                    "loop_size": 1,
                    "loop_var2": 1,
                    "loop_var3": 2,
                    "section_size": 1,
                    "temp10": 2,
                    "temp9": 1,
                    "temp_10": 2,
                    "temp_i_var10": 1,
                    "temp_int": 1,
                    "temp_int3": 2,
                    "temp_value": 1,
                    "temp_var10": 4,
                    "value3": 1
                },
                "iVar4": {
                    "byte_index": 1,
                    "count1": 2,
                    "counter1": 1,
                    "index_var1": 2,
                    "iterator_1": 1,
                    "length": 1,
                    "length1": 1,
                    "length_divider": 1,
                    "loop_counter1": 3,
                    "loop_index1": 1,
                    "section_flags": 1,
                    "temp3": 1,
                    "temp4": 3,
                    "temp_4": 1,
                    "temp_i_var4": 1,
                    "temp_int1": 2,
                    "temp_value3": 1,
                    "temp_var3": 2,
                    "temp_var4": 4,
                    "value1": 1
                },
                "iVar5": {
                    "byte_count": 1,
                    "count2": 2,
                    "counter2": 1,
                    "index_var2": 2,
                    "iterator_2": 1,
                    "length2": 1,
                    "length_remainder": 1,
                    "loop_counter2": 2,
                    "loop_index2": 1,
                    "remaining_length": 1,
                    "section_flags2": 1,
                    "temp4": 1,
                    "temp5": 3,
                    "temp_5": 1,
                    "temp_i_var5": 1,
                    "temp_int2": 2,
                    "temp_loop_counter": 1,
                    "temp_value4": 1,
                    "temp_var4": 2,
                    "temp_var5": 4,
                    "value2": 1
                },
                "lVar13": {
                    "list_address": 1,
                    "loop_index5": 2,
                    "loop_length": 1,
                    "loop_var1": 1,
                    "loop_var5": 1,
                    "remaining": 1,
                    "remaining_bytes": 3,
                    "remaining_content": 1,
                    "remaining_length": 2,
                    "section_list_address": 1,
                    "section_list_index": 2,
                    "size_difference": 1,
                    "temp": 1,
                    "temp11": 1,
                    "temp13": 2,
                    "temp_13": 1,
                    "temp_l_var13": 2,
                    "temp_long2": 1,
                    "temp_long3": 1,
                    "temp_var13": 4,
                    "temp_var6": 1
                },
                "lVar3": {
                    "length_var": 1,
                    "param_value2": 1,
                    "section": 1,
                    "section_address": 4,
                    "section_entry": 1,
                    "section_header": 1,
                    "section_header_index": 1,
                    "section_header_offset": 1,
                    "section_header_size": 1,
                    "section_index": 1,
                    "section_offset": 3,
                    "section_size": 3,
                    "temp3": 3,
                    "temp_3": 2,
                    "temp_long": 1,
                    "temp_long1": 1,
                    "temp_value2": 1,
                    "temp_var3": 4
                },
                "lVar8": {
                    "buffer_index": 1,
                    "byte_index2": 1,
                    "bytes_swapped": 1,
                    "counter": 1,
                    "index1": 1,
                    "inner_iterator": 1,
                    "inner_loop_counter": 1,
                    "iteration": 1,
                    "loop_count": 1,
                    "loop_counter7": 1,
                    "loop_index": 1,
                    "loop_index3": 1,
                    "loop_var1": 2,
                    "temp3": 1,
                    "temp4": 1,
                    "temp7": 1,
                    "temp8": 2,
                    "temp_8": 1,
                    "temp_l_var8": 2,
                    "temp_long1": 1,
                    "temp_long2": 1,
                    "temp_offset1": 1,
                    "temp_value6": 1,
                    "temp_var5": 1,
                    "temp_var8": 4
                },
                "local_30": {
                    "content_buffer": 1,
                    "contents": 1,
                    "local_buffer": 1,
                    "local_variable2": 1,
                    "section_content": 12,
                    "section_content_ptr": 1,
                    "section_contents": 8,
                    "section_data": 4,
                    "var2": 2
                },
                "local_38": {
                    "local_variable1": 1,
                    "section_content_size": 1,
                    "section_length": 7,
                    "section_length2": 1,
                    "section_size": 18,
                    "section_size2": 1,
                    "var1": 2
                },
                "param_1": {
                    "address": 2,
                    "arg1": 1,
                    "bfd1": 1,
                    "bfd_source": 1,
                    "binary": 1,
                    "binary_address": 1,
                    "binary_file": 1,
                    "binary_handle": 1,
                    "filename": 1,
                    "input": 2,
                    "input_1": 1,
                    "input_address": 1,
                    "input_bfd": 1,
                    "input_binary": 6,
                    "input_file": 4,
                    "input_param": 2,
                    "param1": 4
                },
                "param_2": {
                    "arg2": 1,
                    "arguments": 2,
                    "input_2": 1,
                    "input_array": 1,
                    "param2": 4,
                    "param_array": 1,
                    "section": 1,
                    "section_array": 2,
                    "section_data": 1,
                    "section_data_ptr": 1,
                    "section_header": 3,
                    "section_headers": 7,
                    "section_info": 2,
                    "section_list": 1,
                    "section_params": 1,
                    "section_properties": 1,
                    "section_table": 1
                },
                "param_3": {
                    "arg3": 1,
                    "bfd2": 1,
                    "bfd_destination": 1,
                    "flag": 1,
                    "flags": 1,
                    "output": 2,
                    "output_bfd": 6,
                    "output_binary": 5,
                    "output_file": 6,
                    "output_param": 2,
                    "output_section": 1,
                    "param3": 4
                },
                "print_bfd_error_message_001126c0": {
                    "print_error_message": 1
                },
                "process_function_00114190": {
                    "process_function": 1
                },
                "puVar12": {
                    "current_byte": 2,
                    "end_of_contents_3": 1,
                    "pointer": 1,
                    "pointer2": 1,
                    "pointer_var": 4,
                    "ptr": 2,
                    "ptr1": 1,
                    "ptr2": 2,
                    "temp_12": 1,
                    "temp_pointer": 6,
                    "temp_ptr": 3,
                    "temp_ptr1": 1,
                    "temp_ptr12": 1,
                    "temp_pu_var12": 2,
                    "temp_var12": 2
                },
                "puVar14": {
                    "aligned_ptr": 1,
                    "current_byte2": 1,
                    "end_of_contents": 1,
                    "pointer3": 1,
                    "pointer_var1": 1,
                    "pointer_var2": 4,
                    "ptr1": 5,
                    "ptr2": 2,
                    "ptr3": 2,
                    "temp4": 1,
                    "temp_14": 1,
                    "temp_pointer1": 4,
                    "temp_pointer2": 1,
                    "temp_ptr14": 1,
                    "temp_ptr2": 2,
                    "temp_pu_var14": 1,
                    "temp_var14": 2
                },
                "puVar15": {
                    "current_byte3": 1,
                    "end_of_contents_2": 1,
                    "pointer4": 1,
                    "pointer_var2": 1,
                    "pointer_var3": 4,
                    "ptr2": 5,
                    "ptr3": 2,
                    "ptr4": 2,
                    "start_ptr": 1,
                    "temp5": 1,
                    "temp_15": 1,
                    "temp_pointer2": 4,
                    "temp_pointer3": 1,
                    "temp_ptr15": 1,
                    "temp_ptr3": 2,
                    "temp_pu_var15": 1,
                    "temp_var15": 2
                },
                "pvVar16": {
                    "current_byte4": 1,
                    "current_section_ptr": 1,
                    "pointer2": 1,
                    "pointer_var4": 4,
                    "ptr3": 3,
                    "ptr4": 2,
                    "ptr5": 2,
                    "section_ptr": 1,
                    "target_ptr": 1,
                    "temp_16": 2,
                    "temp_pointer2": 1,
                    "temp_pointer3": 2,
                    "temp_ptr16": 1,
                    "temp_ptr4": 1,
                    "temp_pv_var16": 2,
                    "temp_var16": 2,
                    "temp_void_pointer": 3,
                    "void_pointer": 1
                },
                "reverse_bytes_if_section_length_not_divisible_001083de": {
                    "reverse_bytes": 1
                },
                "skip_section": {
                    "check_sections": 1,
                    "skip_section": 1
                },
                "uVar1": {
                    "byte1": 1,
                    "byte_value": 3,
                    "swap_temp": 1,
                    "temp": 1,
                    "temp1": 6,
                    "temp_1": 1,
                    "temp_byte": 6,
                    "temp_u_var1": 2,
                    "temp_var": 1,
                    "temp_var1": 5,
                    "undefined_var": 1,
                    "undefined_var1": 1,
                    "unknown1": 1,
                    "unknown_var1": 1
                },
                "uVar11": {
                    "counter3": 1,
                    "index": 1,
                    "index3": 1,
                    "inner_offset": 1,
                    "loop_counter5": 1,
                    "loop_index3": 1,
                    "loop_index4": 1,
                    "loop_var3": 1,
                    "loop_var4": 2,
                    "offset": 1,
                    "section_length": 1,
                    "start_index": 2,
                    "start_offset": 1,
                    "temp10": 1,
                    "temp11": 2,
                    "temp3": 1,
                    "temp5": 1,
                    "temp_11": 1,
                    "temp_u_int641": 1,
                    "temp_u_long7": 1,
                    "temp_u_var11": 2,
                    "temp_var11": 4,
                    "temp_var3": 1,
                    "temp_var4": 1
                },
                "uVar17": {
                    "addr_offset": 1,
                    "counter4": 1,
                    "current_index": 1,
                    "end_index": 1,
                    "index4": 1,
                    "loop_index4": 1,
                    "loop_index6": 1,
                    "loop_var6": 2,
                    "target_offset": 1,
                    "temp12": 1,
                    "temp17": 2,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp9": 1,
                    "temp_17": 1,
                    "temp_offset": 1,
                    "temp_u_int642": 1,
                    "temp_u_long8": 1,
                    "temp_u_var17": 2,
                    "temp_value": 1,
                    "temp_var17": 4,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var7": 1
                },
                "uVar18": {
                    "alignment": 1,
                    "byte_count": 1,
                    "byte_multiplier": 1,
                    "count": 1,
                    "counter5": 1,
                    "divide_value": 1,
                    "divisible_factor": 2,
                    "division_factor2": 1,
                    "divisor": 2,
                    "loop_index5": 1,
                    "loop_index7": 1,
                    "loop_var7": 2,
                    "section_size": 1,
                    "temp10": 1,
                    "temp13": 1,
                    "temp18": 2,
                    "temp7": 1,
                    "temp_18": 1,
                    "temp_u_int643": 1,
                    "temp_u_var18": 2,
                    "temp_var18": 4,
                    "temp_var6": 1,
                    "temp_var8": 1
                },
                "uVar19": {
                    "counter6": 1,
                    "loop_counter": 1,
                    "loop_index6": 1,
                    "loop_index8": 1,
                    "loop_var8": 2,
                    "original_offset": 1,
                    "previous_index": 1,
                    "temp11": 1,
                    "temp14": 1,
                    "temp19": 2,
                    "temp2": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp8": 1,
                    "temp_19": 1,
                    "temp_index": 1,
                    "temp_offset3": 1,
                    "temp_u_int644": 1,
                    "temp_u_long6": 1,
                    "temp_u_var19": 2,
                    "temp_value2": 1,
                    "temp_var19": 4,
                    "temp_var5": 1,
                    "temp_var7": 1,
                    "temp_var9": 1
                },
                "uVar2": {
                    "param_value1": 1,
                    "temp": 1,
                    "temp2": 7,
                    "temp_2": 2,
                    "temp_long": 1,
                    "temp_u_int64": 1,
                    "temp_u_var2": 2,
                    "temp_undefined": 1,
                    "temp_value1": 2,
                    "temp_var1": 1,
                    "temp_var2": 7,
                    "undefined_var2": 2,
                    "unknown2": 1,
                    "unknown_var2": 1,
                    "unused1": 1
                },
                "uVar7": {
                    "error_message": 8,
                    "error_msg": 3,
                    "message": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "temp7": 2,
                    "temp_7": 2,
                    "temp_u_int8": 1,
                    "temp_u_var7": 2,
                    "temp_value5": 1,
                    "temp_var2": 1,
                    "temp_var7": 4,
                    "translated_text": 1,
                    "undefined_var3": 1,
                    "undefined_var7": 1,
                    "unknown_var3": 1
                },
                "uVar9": {
                    "counter1": 1,
                    "counter2": 1,
                    "counter3": 1,
                    "index2": 1,
                    "inner_counter": 1,
                    "inner_loop_counter2": 1,
                    "loop_count1": 1,
                    "loop_counter3": 1,
                    "loop_counter6": 1,
                    "loop_index": 2,
                    "loop_index1": 1,
                    "loop_index2": 1,
                    "loop_index4": 1,
                    "loop_var1": 1,
                    "loop_var2": 2,
                    "temp8": 1,
                    "temp9": 2,
                    "temp_9": 2,
                    "temp_offset2": 1,
                    "temp_u_int641": 1,
                    "temp_u_var9": 2,
                    "temp_var3": 1,
                    "temp_var9": 4
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "FUN_00104440",
                "FUN_00115f50",
                "FUN_001048f0",
                "FUN_00104330",
                "FUN_00108466",
                "FUN_001126c0",
                "FUN_00114190",
                "FUN_001042f0",
                "FUN_001083de",
                "FUN_00104390",
                "FUN_001045f0"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid process_binary_section_00116110(undefined8 input_binary,undefined8 *section_headers,undefined8 output_bfd)\n\n{\n  undefined temp1;\n  undefined8 temp2;\n  long section_address;\n  int temp_var4;\n  int temp_var5;\n  char result;\n  undefined8 error_message;\n  undefined8 *allocated_memory;\n  long temp_var8;\n  ulong temp_var9;\n  int temp_var10;\n  ulong temp_var11;\n  undefined *temp_pointer;\n  long temp_var13;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  void *pointer_var4;\n  ulong temp_var17;\n  ulong temp_var18;\n  ulong temp_var19;\n  byte flag;\n  ulong section_size;\n  void *section_content;\n  \n  flag = 0;\n  result = skip_section(input_binary,section_headers,1);\n  if (result != '\\0') {\n    return;\n  }\n  section_size = section_headers[8];\n  section_address = section_headers[0xc];\n  if (((*(byte *)((long)section_headers + 0x25) & 1) == 0) || ((*(byte *)(section_address + 0x25) & 1) == 0)) {\n    temp_var13 = find_section_list(*section_headers,0,0x80);\n    if (temp_var13 == 0) {\n      return;\n    }\n    if ((*(byte *)(temp_var13 + 0x29) & 1) == 0) {\n      return;\n    }\n    allocated_memory = (undefined8 *)allocate_memory(section_size);\n    ptr2 = allocated_memory;\n    if (7 < section_size) {\n      for (temp_var18 = section_size >> 3; temp_var18 != 0; temp_var18 = temp_var18 - 1) {\n        *ptr2 = 0;\n        ptr2 = ptr2 + (ulong)flag * -2 + 1;\n      }\n    }\n    ptr1 = ptr2;\n    if ((section_size & 4) != 0) {\n      ptr1 = (undefined8 *)((long)ptr2 + (ulong)flag * -8 + 4);\n      *(undefined4 *)ptr2 = 0;\n    }\n    ptr2 = ptr1;\n    if ((section_size & 2) != 0) {\n      ptr2 = (undefined8 *)((long)ptr1 + (ulong)flag * -4 + 2);\n      *(undefined2 *)ptr1 = 0;\n    }\n    if ((section_size & 1) != 0) {\n      *(undefined *)ptr2 = 0;\n    }\n    result = set_section_contents(output_bfd,section_address,allocated_memory,0);\n    if (result != '\\0') {\n      deallocate_memory(allocated_memory);\n      return;\n    }\n    DAT_00127a40 = 1;\n    print_non_fatal_message(0,output_bfd,section_address,0);\n    deallocate_memory(allocated_memory);\n    return;\n  }\n  section_content = (void *)0x0;\n  result = get_full_section_contents(input_binary,section_headers,&section_content);\n  if ((result == '\\0') ||\n     (result = convert_section_contents(input_binary,section_headers,output_bfd,&section_content,&section_size),\n     temp_var10 = DAT_00127908, result == '\\0')) {\n    set_section_size(section_address,0);\n    DAT_00127a40 = 1;\n    print_non_fatal_message(0,input_binary,section_headers,0);\n    deallocate_memory(section_content);\n    return;\n  }\n  temp_var4 = DAT_001264b8;\n  temp_var5 = DAT_001264bc;\n  if (DAT_00127908 != 0) {\n    temp_var18 = (ulong)DAT_00127908;\n    if (section_size % temp_var18 != 0) {\n      temp2 = *section_headers;\n      error_message = translate_text(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      print_fatal_error(error_message,temp2,temp_var10);\n    }\n    temp_var10 = DAT_00127908 / 2;\n    temp_var11 = 0;\n    while (temp_var19 = temp_var11, temp_var4 = DAT_001264b8, temp_var5 = DAT_001264bc, temp_var19 < section_size) {\n      temp_var11 = temp_var18 + temp_var19;\n      temp_var17 = temp_var11;\n      for (temp_var9 = 0; temp_var9 < (ulong)(long)temp_var10; temp_var9 = temp_var9 + 1) {\n        temp_var17 = temp_var17 - 1;\n        temp_pointer = (undefined *)(temp_var19 + temp_var9 + (long)section_content);\n        temp1 = *temp_pointer;\n        *temp_pointer = *(undefined *)((long)section_content + temp_var17);\n        *(undefined *)((long)section_content + temp_var17) = temp1;\n      }\n    }\n  }\n  DAT_001264b8 = temp_var4;\n  DAT_001264bc = temp_var5;\n  if (-1 < temp_var5) {\n    temp_var18 = (ulong)DAT_00127a3c;\n    temp_var10 = (int)((ulong)section_headers[7] % temp_var18);\n    temp_var11 = ((long)temp_var5 - (long)temp_var10) + (long)section_content;\n    if (temp_var5 < temp_var10) {\n      temp_var11 = temp_var11 + temp_var18;\n    }\n    temp_var13 = (section_size + (long)section_content) - temp_var11;\n    pointer_var4 = section_content;\n    for (; temp_var11 < section_size + (long)section_content; temp_var11 = temp_var11 + temp_var18) {\n      for (temp_var8 = 0; ((int)temp_var8 < temp_var4 && (temp_var8 != temp_var13)); temp_var8 = temp_var8 + 1) {\n        *(undefined *)((long)pointer_var4 + temp_var8) = *(undefined *)(temp_var11 + temp_var8);\n      }\n      pointer_var4 = (void *)((long)pointer_var4 + temp_var8);\n      temp_var13 = temp_var13 - temp_var18;\n    }\n    section_size = ((((temp_var18 - 1) + section_size) - (long)temp_var5) / temp_var18) * (long)temp_var4;\n    temp_var18 = *(ulong *)(section_address + 0x38) / temp_var18;\n    *(ulong *)(section_address + 0x38) = temp_var18;\n    if (temp_var5 < temp_var10) {\n      *(ulong *)(section_address + 0x38) = temp_var18 + 1;\n      result = set_section_contents(output_bfd,section_address,section_content,0,section_size);\n      if (result == '\\0') {\n        cleanup_memory();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = set_section_contents(output_bfd,section_address,section_content,0,section_size);\n  if (result == '\\0') {\n    cleanup_memory();\n    return;\n  }\nLAB_001161d8:\n  deallocate_memory(section_content);\n  return;\n}\n\n",
            "current_name": "process_binary_section_00116110",
            "entrypoint": "0x00116110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116110": "process_binary_section_00116110",
                "__ptr": "allocated_memory",
                "bVar20": "flag",
                "bfd_convert_section_contents": "convert_section_contents",
                "bfd_get_full_section_contents": "get_full_section_contents",
                "bfd_nonfatal_message": "print_non_fatal_message",
                "bfd_set_section_contents": "set_section_contents",
                "bfd_set_section_size": "set_section_size",
                "cVar6": "result",
                "dcgettext": "translate_text",
                "fatal": "print_fatal_error",
                "free": "deallocate_memory",
                "free_and_cleanup_memory_00108466": "cleanup_memory",
                "iVar10": "temp_var10",
                "iVar4": "temp_var4",
                "iVar5": "temp_var5",
                "lVar13": "temp_var13",
                "lVar3": "section_address",
                "lVar8": "temp_var8",
                "local_30": "section_content",
                "local_38": "section_size",
                "param_1": "input_binary",
                "param_2": "section_headers",
                "param_3": "output_bfd",
                "puVar12": "temp_pointer",
                "puVar14": "ptr1",
                "puVar15": "ptr2",
                "pvVar16": "pointer_var4",
                "uVar1": "temp1",
                "uVar11": "temp_var11",
                "uVar17": "temp_var17",
                "uVar18": "temp_var18",
                "uVar19": "temp_var19",
                "uVar2": "temp2",
                "uVar7": "error_message",
                "uVar9": "temp_var9",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001163d0": {
            "additional_data": {
                "DAT_001278d0": {
                    "constant1": 1
                },
                "DAT_00127a40": {
                    "constant3": 1
                },
                "FUN_001163d0": {
                    "analyze_build_attribute_notes": 1,
                    "analyze_gnu_build_attribute_notes": 2,
                    "improved_gnu_build_attribute_notes": 1,
                    "parse_attribute_notes": 1,
                    "parse_build_attribute_notes": 1,
                    "parse_build_attributes": 1,
                    "parse_gnu_build_attribute_notes": 14,
                    "parse_gnu_build_notes": 1,
                    "process_gnu_build_attribute_notes": 2
                },
                "_DAT_001264c0": {
                    "constant2": 1
                },
                "__nmemb": {
                    "array_size": 1,
                    "count": 2,
                    "element_count": 1,
                    "loop_iterations": 1,
                    "nmemb": 1,
                    "note_array_size": 1,
                    "note_count": 2,
                    "notes_num": 1,
                    "num_elements": 5,
                    "num_items": 1,
                    "num_notes": 1,
                    "size": 6,
                    "size_t_var": 1,
                    "size_t_var1": 1,
                    "temp_var_25": 1,
                    "val": 1,
                    "val1": 1,
                    "var17": 1
                },
                "__ptr": {
                    "allocated_memory": 1,
                    "buffer": 7,
                    "pointer": 1,
                    "ptr": 9,
                    "ptr1": 2,
                    "ptr2": 1,
                    "reloc": 1,
                    "reloc_buf": 1,
                    "reloc_buffer": 1,
                    "reloc_data": 3,
                    "reloc_info": 1,
                    "temp_ptr": 1,
                    "temp_var_8": 1,
                    "tmp_buffer": 1
                },
                "__ptr_00": {
                    "allocated_memory_2": 1,
                    "buffer2": 1,
                    "output": 1,
                    "pointer_2": 1,
                    "ptr3": 1
                },
                "analyze_build_notes_001086af": {
                    "analyze_build_notes": 1,
                    "analyze_function": 1,
                    "analyze_notes": 2
                },
                "analyze_build_notes_00116852": {
                    "analyze_notes": 1
                },
                "bVar26": {
                    "additional_condition": 1,
                    "b_var26": 1,
                    "bool_val": 1,
                    "bool_var": 1,
                    "byte1": 2,
                    "byte_26": 1,
                    "byte_flag": 1,
                    "byte_val": 1,
                    "byte_value": 1,
                    "byte_var": 5,
                    "byte_var1": 1,
                    "flag": 4,
                    "flag_2": 1,
                    "is_negative": 1,
                    "is_null_terminated": 1,
                    "temp_bool": 1,
                    "temp_flag": 2,
                    "temp_var": 1,
                    "temp_var_27": 1,
                    "var18": 2,
                    "var21": 1
                },
                "bVar4": {
                    "check": 2,
                    "condition": 6,
                    "flag": 4,
                    "flag1": 1,
                    "is_condition_met": 1,
                    "is_condition_true": 1,
                    "is_corrupt": 1,
                    "is_equal": 1,
                    "is_true": 5,
                    "is_valid": 4,
                    "loop_condition": 3,
                    "temp_var_3": 1
                },
                "bfd_canonicalize_reloc": {
                    "canonicalize_reloc": 3
                },
                "bfd_get_reloc_upper_bound": {
                    "get_reloc_upper_bound": 3
                },
                "bfd_nonfatal_message": {
                    "print_message": 1,
                    "report_message": 1
                },
                "bfd_set_error": {
                    "set_error": 2
                },
                "cVar19": {
                    "char1": 2,
                    "char_19": 1,
                    "char_val": 1,
                    "char_var": 7,
                    "char_var1": 1,
                    "character": 6,
                    "character_var": 1,
                    "flag": 1,
                    "note_type": 2,
                    "temp_char": 3,
                    "temp_var_19": 1,
                    "var14": 2,
                    "var15": 1,
                    "version_flag": 1,
                    "version_note_character": 1
                },
                "compare_gnu_build_notes": {
                    "compare_function": 1,
                    "compare_notes": 2,
                    "compare_notes_callback": 1
                },
                "dcgettext": {
                    "get_error_message": 1,
                    "get_message": 1,
                    "get_translated_message": 1
                },
                "free": {
                    "deallocate_memory": 1,
                    "free_memory": 1,
                    "release_memory": 1
                },
                "iVar21": {
                    "count": 1,
                    "counter": 4,
                    "counter2": 2,
                    "counter_2": 1,
                    "index2": 1,
                    "int_var2": 2,
                    "loop_counter": 1,
                    "loop_index": 3,
                    "loop_var": 1,
                    "note_version": 1,
                    "temp_var": 1,
                    "temp_var_138": 1,
                    "temp_var_22": 1,
                    "var12": 1,
                    "var15": 1,
                    "var16": 2,
                    "var2": 1,
                    "var21": 2,
                    "var3": 1,
                    "var_14": 1,
                    "var_21": 2
                },
                "iVar6": {
                    "cmp_result": 2,
                    "comparison": 1,
                    "comparison_result": 3,
                    "counter": 4,
                    "i": 1,
                    "index": 5,
                    "int_var": 1,
                    "int_var1": 1,
                    "memcmp_result": 1,
                    "result": 1,
                    "temp_var_5": 1,
                    "value": 1,
                    "var1": 2,
                    "var3": 1,
                    "var5": 1,
                    "var6": 2,
                    "var_3": 1,
                    "var_6": 2
                },
                "lVar27": {
                    "length": 1
                },
                "lVar8": {
                    "err_msg_length": 1,
                    "error_code": 2,
                    "error_message": 1,
                    "length": 12,
                    "local_var": 1,
                    "long_var": 1,
                    "long_var1": 1,
                    "message_length": 2,
                    "message_size": 1,
                    "result": 1,
                    "size": 1,
                    "temp_var_4": 1,
                    "temp_var_57": 1,
                    "temp_var_7": 1,
                    "var2": 1,
                    "var5": 1,
                    "var_5": 1,
                    "var_8": 1
                },
                "local_60": {
                    "alloca_array": 1,
                    "build_notes": 2,
                    "local_array": 6,
                    "local_array1": 1,
                    "local_ptr": 3,
                    "local_ptr_1": 1,
                    "local_var5": 1,
                    "local_var_5": 3,
                    "new_ptr": 1,
                    "note_array": 2,
                    "note_pool": 1,
                    "notes": 1,
                    "notes_buf": 1,
                    "notes_data": 1,
                    "ptr8": 1,
                    "ptr_60": 1,
                    "ptr_var8": 1,
                    "temp_array": 1,
                    "temp_ptr1": 1,
                    "var23": 1
                },
                "local_68": {
                    "local_val_4": 1,
                    "local_value4": 1,
                    "local_var3": 2,
                    "local_var4": 7,
                    "local_var_4": 4,
                    "output_data_size": 1,
                    "output_size": 2,
                    "remaining_num": 1,
                    "result_68": 1,
                    "result_size": 2,
                    "section_size": 1,
                    "temp17": 1,
                    "temp4": 1,
                    "temp_var4": 1,
                    "val5": 1,
                    "value4": 1,
                    "var15": 1,
                    "var17": 1,
                    "var22": 1
                },
                "local_70": {
                    "local_val_3": 1,
                    "local_value3": 1,
                    "local_var2": 2,
                    "local_var3": 8,
                    "local_var_13": 1,
                    "local_var_3": 4,
                    "notes_start": 1,
                    "section_offset2": 1,
                    "temp16": 2,
                    "temp3": 1,
                    "temp6": 1,
                    "temp_var3": 1,
                    "tmp_buffer_3": 1,
                    "val4": 1,
                    "value3": 1,
                    "value_70": 1,
                    "var14": 1,
                    "var16": 1,
                    "var21": 1
                },
                "local_88": {
                    "local_val_1": 1,
                    "local_value1": 1,
                    "local_var1": 10,
                    "local_var_1": 4,
                    "local_var_8": 1,
                    "section_offset": 1,
                    "temp1": 1,
                    "temp14": 2,
                    "temp4": 1,
                    "temp_var1": 1,
                    "tmp_buffer_1": 1,
                    "val2": 1,
                    "value1": 1,
                    "value_88": 1,
                    "var12": 1,
                    "var14": 1,
                    "var19": 1,
                    "version_2_start": 1
                },
                "memcmp": {
                    "compare_memory": 2
                },
                "non_fatal": {
                    "report_and_process_data": 1,
                    "report_error": 2
                },
                "param_1": {
                    "bfd_session": 1,
                    "binary_data": 1,
                    "input1": 10,
                    "input_1": 1,
                    "input_param_1": 4,
                    "param1": 2,
                    "param_1": 5,
                    "param_1_instructions": 1,
                    "param_function": 1,
                    "param_input_1": 1,
                    "param_section_symbols": 1,
                    "parameter_1": 1,
                    "section": 1,
                    "section1": 1
                },
                "param_2": {
                    "bfd_file": 1,
                    "input2": 10,
                    "input_2": 1,
                    "input_param_2": 4,
                    "param2": 2,
                    "param_2": 5,
                    "param_2_instructions": 1,
                    "param_input_2": 1,
                    "param_section": 1,
                    "param_segment_symbols": 1,
                    "parameter_2": 1,
                    "section2": 2,
                    "section_data": 1
                },
                "param_3": {
                    "data_size": 2,
                    "input3": 9,
                    "input_param_3": 4,
                    "param3": 2,
                    "param_3": 4,
                    "param_section_size": 1,
                    "param_size": 3,
                    "parameter_3": 1,
                    "section_size": 1,
                    "size": 4
                },
                "param_4": {
                    "data": 2,
                    "input4": 9,
                    "input_param_4": 4,
                    "output": 3,
                    "output_buffer": 1,
                    "output_data": 2,
                    "param4": 2,
                    "param_4": 4,
                    "param_data": 2,
                    "param_output_buffer": 1,
                    "parameter_4": 1
                },
                "parse_gnu_build_attribute_notes_00116490": {
                    "parse_attribute_notes": 1,
                    "parse_notes": 1,
                    "parse_notes_callback": 1
                },
                "parse_gnu_build_notes_00116490": {
                    "parse_function": 1
                },
                "puVar17": {
                    "note": 1,
                    "note_pointer": 1,
                    "note_ptr": 1,
                    "notes": 1,
                    "notes_data_ptr": 1,
                    "notes_ptr": 1,
                    "pointer": 1,
                    "pointer2": 3,
                    "pointer_var2": 1,
                    "ptr1": 1,
                    "ptr17": 1,
                    "ptr2": 6,
                    "ptr4": 1,
                    "ptr_17": 2,
                    "ptr_var2": 1,
                    "ptr_var_2": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_ptr_126": 1,
                    "temp_var_17": 1,
                    "var12": 1,
                    "var17": 1
                },
                "puVar18": {
                    "buffer_ptr": 1,
                    "dest": 1,
                    "name_ptr": 2,
                    "pointer2": 1,
                    "pointer3": 3,
                    "pointer_var3": 1,
                    "pointer_var_2": 1,
                    "ptr1": 1,
                    "ptr18": 1,
                    "ptr2": 1,
                    "ptr3": 6,
                    "ptr5": 1,
                    "ptr_18": 2,
                    "ptr_var3": 1,
                    "ptr_var_3": 1,
                    "temp_buffer": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 1,
                    "temp_ptr_128": 1,
                    "temp_var_18": 1,
                    "var13": 1,
                    "var18": 1
                },
                "puVar20": {
                    "current": 1,
                    "data_ptr": 1,
                    "destination_ptr": 1,
                    "new_buffer_ptr": 1,
                    "pointer3": 1,
                    "pointer4": 3,
                    "pointer_var4": 1,
                    "pointer_var_3": 1,
                    "ptr2": 1,
                    "ptr20": 1,
                    "ptr3": 1,
                    "ptr4": 6,
                    "ptr6": 1,
                    "ptr_20": 2,
                    "ptr_var4": 1,
                    "ptr_var_4": 1,
                    "temp_buffer": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 1,
                    "temp_ptr_100": 1,
                    "temp_var_20": 1,
                    "var15": 1,
                    "var20": 1
                },
                "puVar22": {
                    "input": 1,
                    "input_buffer": 1,
                    "note_data": 1,
                    "notes_ptr": 1,
                    "pointer4": 1,
                    "pointer5": 3,
                    "pointer_var5": 1,
                    "pointer_var_4": 1,
                    "ptr22": 1,
                    "ptr3": 1,
                    "ptr4": 1,
                    "ptr5": 5,
                    "ptr7": 1,
                    "ptr_22": 2,
                    "ptr_var5": 1,
                    "ptr_var_5": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 1,
                    "temp_ptr3": 1,
                    "temp_ptr_125": 1,
                    "temp_var_21": 1,
                    "var17": 1,
                    "var22": 1
                },
                "puVar23": {
                    "build_note_array": 1,
                    "current_note_ptr": 1,
                    "note_pool_ptr": 1,
                    "note_ptr": 2,
                    "notes_list_ptr": 1,
                    "output_buffer_ptr": 1,
                    "pointer5": 1,
                    "pointer6": 3,
                    "pointer_var6": 1,
                    "pointer_var_5": 1,
                    "ptr23": 1,
                    "ptr5": 1,
                    "ptr6": 5,
                    "ptr8": 1,
                    "ptr_23": 2,
                    "ptr_var6": 1,
                    "ptr_var_6": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_ptr_127": 1,
                    "temp_var_23": 1,
                    "var18": 1,
                    "var23": 1
                },
                "puVar25": {
                    "comparison_data_ptr": 1,
                    "note_ptr2": 1,
                    "pointer6": 1,
                    "pointer7": 3,
                    "pointer_var7": 1,
                    "pointer_var_6": 1,
                    "ptr": 1,
                    "ptr25": 1,
                    "ptr6": 1,
                    "ptr7": 5,
                    "ptr9": 1,
                    "ptr_25": 2,
                    "ptr_var7": 1,
                    "ptr_var_7": 1,
                    "temp10": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 1,
                    "temp_ptr4": 1,
                    "temp_ptr_97": 1,
                    "temp_var_26": 1,
                    "var20": 1,
                    "var25": 1
                },
                "puVar26": {
                    "ptr7": 1
                },
                "puVar5": {
                    "p": 1,
                    "pointer1": 3,
                    "pointer_var": 1,
                    "pointer_var_1": 1,
                    "previous_data_ptr": 1,
                    "ptr": 7,
                    "ptr1": 6,
                    "ptr5": 1,
                    "ptr_5": 2,
                    "ptr_var": 2,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_ptr_111": 1,
                    "temp_var_4": 1,
                    "var5": 1
                },
                "qsort": {
                    "quicksort": 1,
                    "sort": 1,
                    "sort_array": 1
                },
                "report_and_process_data_00119ed0": {
                    "report_and_process_data": 1
                },
                "sort_gnu_build_notes": {
                    "sort_function": 1,
                    "sort_notes": 2,
                    "sort_notes_callback": 1
                },
                "uStack_80": {
                    "local_val_2": 1,
                    "local_value2": 1,
                    "local_var2": 8,
                    "local_var_14": 1,
                    "local_var_2": 4,
                    "stack_value": 1,
                    "stack_var1": 1,
                    "temp15": 2,
                    "temp2": 1,
                    "temp5": 1,
                    "temp_var2": 1,
                    "tmp_buffer_2": 1,
                    "u_stack_var": 1,
                    "val3": 1,
                    "value2": 1,
                    "value_80": 1,
                    "var13": 1,
                    "var15": 1,
                    "var20": 1,
                    "version_3_start": 1
                },
                "uVar1": {
                    "result": 24,
                    "result1": 1,
                    "result_var_1": 1,
                    "size": 1,
                    "temp1": 2,
                    "value": 1,
                    "value1": 1
                },
                "uVar10": {
                    "offset2": 1,
                    "result6": 1,
                    "temp2": 5,
                    "temp6": 2,
                    "temp_val": 1,
                    "temp_var": 1,
                    "temp_var4": 1,
                    "temp_var_10": 1,
                    "temp_var_124": 1,
                    "temp_var_6": 1,
                    "tmp2": 1,
                    "value5": 2,
                    "var10": 2,
                    "var4": 2,
                    "var5": 4,
                    "var7": 1,
                    "var8": 1,
                    "var_10": 2,
                    "var_7": 1
                },
                "uVar11": {
                    "note_type": 1,
                    "result7": 1,
                    "temp3": 5,
                    "temp7": 2,
                    "temp_val": 1,
                    "temp_var5": 1,
                    "temp_var_11": 1,
                    "temp_var_126": 1,
                    "temp_var_7": 1,
                    "tmp3": 1,
                    "value6": 2,
                    "var11": 2,
                    "var5": 2,
                    "var6": 4,
                    "var8": 1,
                    "var9": 1,
                    "var_11": 2,
                    "var_8": 1
                },
                "uVar12": {
                    "desc_size": 1,
                    "name_length": 1,
                    "result8": 1,
                    "temp4": 5,
                    "temp8": 2,
                    "temp_val": 1,
                    "temp_var6": 1,
                    "temp_var_12": 1,
                    "temp_var_125": 1,
                    "temp_var_8": 1,
                    "tmp4": 1,
                    "value7": 2,
                    "var10": 1,
                    "var12": 2,
                    "var6": 2,
                    "var7": 4,
                    "var9": 1,
                    "var_12": 2,
                    "var_9": 1
                },
                "uVar13": {
                    "align_start": 1,
                    "aligned_name_length": 1,
                    "result9": 1,
                    "rounded_size": 1,
                    "temp5": 4,
                    "temp9": 2,
                    "temp_val": 1,
                    "temp_var7": 1,
                    "temp_var_123": 1,
                    "temp_var_13": 1,
                    "temp_var_9": 1,
                    "tmp5": 1,
                    "value8": 2,
                    "var10": 1,
                    "var11": 1,
                    "var13": 2,
                    "var7": 2,
                    "var8": 4,
                    "var_10": 1,
                    "var_13": 2
                },
                "uVar14": {
                    "result10": 1,
                    "temp1": 1,
                    "temp10": 2,
                    "temp11": 1,
                    "temp5": 1,
                    "temp6": 3,
                    "temp_val": 1,
                    "temp_var8": 1,
                    "temp_var_10": 1,
                    "temp_var_136": 1,
                    "temp_var_14": 1,
                    "temp_var_2": 1,
                    "tmp6": 1,
                    "value9": 2,
                    "var11": 1,
                    "var12": 1,
                    "var14": 2,
                    "var8": 2,
                    "var9": 4,
                    "var_11": 1,
                    "var_14": 2
                },
                "uVar15": {
                    "result11": 1,
                    "start_index": 1,
                    "temp11": 2,
                    "temp12": 1,
                    "temp2": 1,
                    "temp6": 1,
                    "temp7": 3,
                    "temp_val": 1,
                    "temp_var9": 1,
                    "temp_var_11": 1,
                    "temp_var_137": 1,
                    "temp_var_15": 1,
                    "tmp7": 1,
                    "value10": 2,
                    "var10": 4,
                    "var12": 1,
                    "var13": 1,
                    "var15": 2,
                    "var9": 2,
                    "var_12": 1,
                    "var_15": 2
                },
                "uVar16": {
                    "note_size": 1,
                    "remaining_data_size": 1,
                    "remaining_size": 1,
                    "result12": 1,
                    "temp12": 2,
                    "temp13": 1,
                    "temp7": 1,
                    "temp8": 3,
                    "temp_val": 1,
                    "temp_var_12": 1,
                    "temp_var_139": 1,
                    "temp_var_16": 1,
                    "tmp8": 1,
                    "value11": 2,
                    "var10": 2,
                    "var11": 4,
                    "var13": 1,
                    "var14": 1,
                    "var16": 2,
                    "var_13": 1,
                    "var_16": 2
                },
                "uVar2": {
                    "param_1_instruction": 1,
                    "result2": 1,
                    "session": 1,
                    "symbol1": 1,
                    "temp2": 2,
                    "temp_var1": 1,
                    "temp_var_1": 3,
                    "unused_var_1": 1,
                    "value1": 2,
                    "value2": 1,
                    "var1": 11,
                    "var2": 3,
                    "var_1": 1,
                    "var_2": 2
                },
                "uVar24": {
                    "min_length": 1,
                    "result13": 1,
                    "temp13": 2,
                    "temp3": 1,
                    "temp8": 2,
                    "temp9": 3,
                    "temp_val": 1,
                    "temp_var10": 1,
                    "temp_var_13": 1,
                    "temp_var_24": 1,
                    "temp_var_45": 1,
                    "value12": 2,
                    "var11": 2,
                    "var12": 2,
                    "var13": 1,
                    "var16": 1,
                    "var17": 1,
                    "var19": 1,
                    "var24": 2,
                    "var_24": 2
                },
                "uVar26": {
                    "flag": 1
                },
                "uVar3": {
                    "file": 1,
                    "param_2_instruction": 1,
                    "result3": 1,
                    "symbol2": 1,
                    "temp3": 2,
                    "temp_var2": 1,
                    "temp_var_2": 3,
                    "unused_var_2": 1,
                    "value2": 2,
                    "value3": 1,
                    "var2": 11,
                    "var3": 3,
                    "var_2": 1,
                    "var_3": 2
                },
                "uVar4": {
                    "var3": 1
                },
                "uVar5": {
                    "var4": 1
                },
                "uVar7": {
                    "err_msg": 1,
                    "error_message": 6,
                    "error_msg": 1,
                    "message": 4,
                    "result4": 1,
                    "temp4": 2,
                    "temp_var_3": 1,
                    "temp_var_4": 1,
                    "temp_var_6": 1,
                    "unused_var_3": 1,
                    "value3": 1,
                    "var3": 4,
                    "var4": 1,
                    "var6": 1,
                    "var7": 2,
                    "var_4": 1,
                    "var_7": 2
                },
                "uVar9": {
                    "loop_var": 1,
                    "offset1": 1,
                    "result": 1,
                    "result5": 1,
                    "temp1": 4,
                    "temp10": 1,
                    "temp5": 2,
                    "temp_var3": 1,
                    "temp_var_127": 1,
                    "temp_var_5": 1,
                    "temp_var_9": 1,
                    "tmp1": 1,
                    "value4": 2,
                    "var3": 2,
                    "var4": 4,
                    "var6": 1,
                    "var7": 1,
                    "var9": 2,
                    "var_6": 1,
                    "var_9": 2
                },
                "xcalloc": {
                    "allocate_array": 1,
                    "allocate_cleared_memory": 1,
                    "allocate_memory_with_zero": 1
                },
                "xmalloc": {
                    "allocate_memory": 3
                }
            },
            "called": [
                "FUN_001047b0",
                "FUN_001048f0",
                "FUN_00104918",
                "FUN_00104240",
                "FUN_00119ed0",
                "FUN_00104390",
                "FUN_00104840"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong parse_gnu_build_attribute_notes_001163d0(undefined8 *input1,undefined8 *input2,ulong input3,undefined *input4)\n\n{\n  ulong result;\n  undefined8 var1;\n  undefined8 var2;\n  bool condition;\n  ulong *ptr;\n  int index;\n  undefined8 error_message;\n  long length;\n  void *ptr;\n  ulong var4;\n  ulong temp2;\n  ulong temp3;\n  ulong temp4;\n  undefined *allocated_memory_2;\n  ulong var8;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong *ptr2;\n  undefined *ptr3;\n  char char_var;\n  undefined *ptr4;\n  int counter;\n  undefined *ptr5;\n  ulong *ptr6;\n  ulong temp9;\n  size_t size;\n  ulong *ptr7;\n  byte byte_var;\n  ulong local_var1;\n  ulong local_var2;\n  ulong local_var3;\n  ulong local_var4;\n  ulong *local_array;\n  \n  byte_var = 0;\n  length = get_reloc_upper_bound();\n  local_var4 = input3;\n  if (0 < length) {\n    ptr = (void *)allocate_memory(length);\n    length = canonicalize_reloc(input1,input2,ptr,DAT_001278d0);\n    release_memory(ptr);\n    if (length != 0) {\n      if (_DAT_001264c0 == 0) {\n        var1 = *input1;\n        var2 = *input2;\n        error_message = get_message(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        report_error(error_message,var1,var2);\n      }\n      local_array = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  local_array = (ulong *)allocate_cleared_memory(input3 / 0xc,0x48,input3 % 0xc);\n  local_var1 = 0;\n  local_var3 = 0;\n  var11 = input3;\n  var10 = 0;\n  ptr6 = local_array;\n  var9 = 0;\n  ptr5 = input4;\n  while (0xb < var11) {\n    temp2 = (**(code **)(input1[1] + 0x40))(ptr5);\n    *ptr6 = temp2;\n    temp2 = (**(code **)(input1[1] + 0x40))(ptr5 + 4);\n    ptr6[1] = temp2;\n    temp3 = (**(code **)(input1[1] + 0x40))(ptr5 + 8);\n    temp2 = *ptr6;\n    ptr6[2] = temp3;\n    temp4 = ptr6[1];\n    var8 = temp2 + 3 & 0xfffffffffffffffc;\n    ptr6[6] = var8;\n    if (temp4 != (temp4 + 3 & 0xfffffffffffffffc)) {\n      length = get_message(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < temp3 - 0x100) {\n      length = get_message(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = var8 + temp4 + 0xc;\n    if (var11 < result) {\n      length = get_message(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (temp2 < 2) {\n      length = get_message(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr6[3] = (ulong)(ptr5 + 0xc);\n    ptr6[4] = (ulong)(ptr5 + var8 + 0xc);\n    var11 = var11 + (-0xc - (var8 + temp4));\n    if (temp2 != 2) {\n      if (ptr5[0xc] == '$') {\n        if ((ptr5[0xd] == '\\x01') && (ptr5[0xe] == '1')) {\n          var11 = parse_notes_callback();\n          return var11;\n        }\n      }\n      else if ((((4 < temp2) && (ptr5[0xc] == 'G')) && (ptr5[0xd] == 'A')) &&\n              ((ptr5[0xe] == '$' && (ptr5[0xf] == '\\x01')))) {\n        if (ptr5[0x10] == '2') {\n          var11 = parse_notes_callback();\n          return var11;\n        }\n        if (ptr5[0x10] == '3') {\n          var11 = parse_notes_callback();\n          return var11;\n        }\n        length = get_message(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var4 = var10;\n    temp9 = var9;\n    if (temp4 == 0) {\n      if (temp3 == 0x100) {\n        ptr6[7] = local_var1;\nLAB_001164af:\n        temp4 = var9;\n        temp9 = var9;\n      }\n      else {\n        ptr6[7] = local_var3;\nLAB_0011669e:\n        var4 = var10;\n        temp4 = var10;\n      }\n    }\n    else {\n      if (temp4 != 0x10) {\n        if (temp4 < 0x11) {\n          if (temp4 == 4) {\n            temp3 = (**(code **)(input1[1] + 0x40))();\n            temp4 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (temp4 == 8) {\n            var11 = analyze_notes();\n            return var11;\n          }\n        }\n        length = get_message(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      temp3 = (**(code **)(input1[1] + 0x28))(ptr5 + var8 + 0xc);\n      temp4 = (**(code **)(input1[1] + 0x28))();\n      if (temp4 < temp3) {\n        temp3 = temp4;\n      }\nLAB_00116631:\n      if (ptr6[2] == 0x100) {\n        if (temp3 == 0) {\n          temp3 = local_var1;\n        }\n        temp2 = *ptr6;\n        ptr6[7] = temp3;\n        temp9 = temp4;\n        local_var1 = temp3;\n        if (temp4 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp3 == 0) {\n          temp3 = local_var3;\n        }\n        temp2 = *ptr6;\n        ptr6[7] = temp3;\n        var4 = temp4;\n        local_var3 = temp3;\n        if (temp4 == 0) goto LAB_0011669e;\n      }\n    }\n    ptr6[8] = temp4;\n    if (*(char *)((ptr6[3] - 1) + temp2) != '\\0') {\n      length = get_message(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr6 = ptr6 + 9;\n    var10 = var4;\n    var9 = temp9;\n    ptr5 = ptr5 + result;\n  }\n  if (var11 == 0) {\n    var1 = *input1;\n    var2 = *input2;\n    error_message = get_message(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    report_error(error_message,var1,var2);\n    size = ((long)ptr6 - (long)local_array >> 3) * -0x71c71c71c71c71c7;\n    sort(local_array,size,0x48,compare_notes);\n    for (ptr2 = local_array; ptr2 < ptr6; ptr2 = ptr2 + 9) {\n      var11 = ptr2[2];\n      if (var11 != 0) {\n        var10 = ptr2[7];\n        var9 = ptr2[8];\n        ptr7 = ptr2;\n        counter = 0;\n        if (var10 == var9) {\n          ptr2[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr = ptr7;\n              ptr7 = ptr + -9;\n              if (ptr7 < local_array) goto LAB_001167f5;\n              temp2 = ptr[-7];\n            } while (temp2 == 0);\n            if ((*ptr7 != *ptr2) ||\n               (index = compare_memory((void *)ptr[-6],(void *)ptr2[3],*ptr2), index != 0)) break;\n            temp4 = ptr[-2];\n            temp3 = ptr[-1];\n            if (var10 == temp4) {\n              if (var9 == temp3) {\n                ptr2[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (var9 <= temp3) {\n                ptr2[2] = 0;\n                break;\n              }\n              if (temp3 < var10) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < temp3) || (var10 <= (temp3 + 0xf & 0xfffffffffffffff0))\n                   ) goto analyze_notes;\n              }\nLAB_001167b8:\n              if ((var11 == 0x101) == (temp2 == 0x101)) {\n                if (temp3 <= var9) {\n                  temp3 = var9;\n                }\n                if (temp4 < var10) {\n                  var10 = temp4;\n                }\n                ptr[-1] = temp3;\n                ptr[-2] = var10;\n                ptr2[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (temp4 <= var10) goto LAB_001167a6;\n              if (temp3 < var10) goto LAB_0010852c;\n              if (var9 < var10) {\n                if ((0xfffffffffffffff0 < var9) || (temp4 <= (var9 + 0xf & 0xfffffffffffffff0))\n                   ) goto analyze_notes;\n                goto LAB_001167b8;\n              }\n              if (var9 != temp3) goto LAB_001167b8;\n            }\nanalyze_notes:\n            condition = counter < 0x11;\n            counter = counter + 1;\n          } while (condition);\n        }\n      }\nLAB_001167f5:\n    }\n    sort(local_array,size,0x48,sort_notes);\n    allocated_memory_2 = (undefined *)allocate_memory(input3 * 2);\n    local_var2 = 0;\n    local_var3 = 0;\n    ptr5 = allocated_memory_2;\n    for (ptr2 = local_array; ptr2 < ptr6; ptr2 = ptr2 + 9) {\n      if (ptr2[2] != 0) {\n        ptr3 = ptr5 + 0xc;\n        if ((ptr2[7] == local_var3) && (ptr2[8] == local_var2)) {\n          (**(code **)(input1[1] + 0x50))(*ptr2,ptr5);\n          (**(code **)(input1[1] + 0x50))(0,ptr5 + 4);\n          (**(code **)(input1[1] + 0x50))(ptr2[2],ptr5 + 8);\n          var10 = ptr2[6];\n          var11 = *ptr2;\n          ptr5 = (undefined *)ptr2[3];\n          ptr4 = ptr3;\n          for (var9 = var11; var9 != 0; var9 = var9 - 1) {\n            *ptr4 = *ptr5;\n            ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n            ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n          }\n          if (var11 < var10) {\n            for (length = var10 - var11; length != 0; length = length + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          ptr5 = ptr3 + var10;\n        }\n        else {\n          (**(code **)(input1[1] + 0x50))();\n          if (*(int *)(input1[1] + 8) == 5) {\n            char_var = (*(char *)(input1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_var = '\\b';\n          }\n          (**(code **)(input1[1] + 0x50))(char_var,ptr5 + 4);\n          (**(code **)(input1[1] + 0x50))(ptr2[2],ptr5 + 8);\n          var11 = *ptr2;\n          ptr5 = (undefined *)ptr2[3];\n          ptr4 = ptr3;\n          for (var10 = var11; var10 != 0; var10 = var10 - 1) {\n            *ptr4 = *ptr5;\n            ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n            ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n          }\n          var10 = ptr2[6];\n          if (var11 < var10) {\n            for (length = var10 - var11; length != 0; length = length + -1) {\n              *ptr4 = 0;\n              ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          length = input1[1];\n          ptr3 = ptr3 + var10;\n          ptr5 = ptr3 + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(input1[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(ptr2[7],ptr3);\n            (**(code **)(input1[1] + 0x38))(ptr2[8],ptr5);\n            ptr5 = ptr3 + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(ptr2[7],ptr3);\n            (**(code **)(input1[1] + 0x50))(ptr2[8],ptr3 + 4);\n          }\n          local_var3 = ptr2[7];\n          local_var2 = ptr2[8];\n        }\n      }\n    }\n    var10 = (long)ptr5 - (long)allocated_memory_2;\n    var11 = var10;\n    ptr5 = allocated_memory_2;\n    local_var4 = input3;\n    if (var10 < input3) {\n      for (; local_var4 = var10, var11 != 0; var11 = var11 - 1) {\n        *input4 = *ptr5;\n        ptr5 = ptr5 + (ulong)byte_var * -2 + 1;\n        input4 = input4 + (ulong)byte_var * -2 + 1;\n      }\n    }\n    release_memory(allocated_memory_2);\n  }\n  else {\n    length = get_message(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (length != 0) {\n      set_error(0x11);\n      report_message(0,input1,input2,length);\n      DAT_00127a40 = 1;\n    }\n  }\nLAB_001166f8:\n  release_memory(local_array);\n  return local_var4;\n}\n\n",
            "current_name": "parse_gnu_build_attribute_notes_001163d0",
            "entrypoint": "0x001163d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001163d0": "parse_gnu_build_attribute_notes_001163d0",
                "__nmemb": "size",
                "__ptr": "ptr",
                "__ptr_00": "allocated_memory_2",
                "analyze_build_notes_001086af": "analyze_notes",
                "analyze_build_notes_00116852": "analyze_notes",
                "bVar26": "byte_var",
                "bVar4": "condition",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "bfd_nonfatal_message": "report_message",
                "bfd_set_error": "set_error",
                "cVar19": "char_var",
                "compare_gnu_build_notes": "compare_notes",
                "dcgettext": "get_message",
                "free": "release_memory",
                "iVar21": "counter",
                "iVar6": "index",
                "lVar8": "length",
                "local_60": "local_array",
                "local_68": "local_var4",
                "local_70": "local_var3",
                "local_88": "local_var1",
                "memcmp": "compare_memory",
                "non_fatal": "report_error",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "parse_gnu_build_attribute_notes_00116490": "parse_notes_callback",
                "puVar17": "ptr2",
                "puVar18": "ptr3",
                "puVar20": "ptr4",
                "puVar22": "ptr5",
                "puVar23": "ptr6",
                "puVar25": "ptr7",
                "puVar5": "ptr",
                "qsort": "sort",
                "sort_gnu_build_notes": "sort_notes",
                "uStack_80": "local_var2",
                "uVar1": "result",
                "uVar10": "temp2",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "uVar13": "var8",
                "uVar14": "var9",
                "uVar15": "var10",
                "uVar16": "var11",
                "uVar2": "var1",
                "uVar24": "temp9",
                "uVar3": "var2",
                "uVar5": "var4",
                "uVar7": "error_message",
                "uVar9": "var4",
                "xcalloc": "allocate_cleared_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116490": {
            "additional_data": {
                "DAT_00127a40": {
                    "data_00127a40": 1
                },
                "FUN_00116490": {
                    "analyze_build_attribute_notes": 1,
                    "analyze_build_attributes": 1,
                    "analyze_build_notes": 1,
                    "decode_and_analyze_build_attributes": 1,
                    "decode_and_improve": 1,
                    "improved_gnu_build_attribute_notes": 1,
                    "parse_gnu_build_attribute_notes": 1,
                    "process_gnu_build_attribute_notes": 1,
                    "process_notes": 1
                },
                "__nmemb": {
                    "alloc_size": 1,
                    "array_length": 2,
                    "array_size": 1,
                    "count": 3,
                    "length2": 1,
                    "new_variable_memb": 1,
                    "nmemb": 3,
                    "nmemb_value": 1,
                    "note_count": 3,
                    "notes_count": 1,
                    "num_bytes": 1,
                    "num_entries": 1,
                    "num_notes": 1,
                    "size": 3,
                    "size_var": 1,
                    "temp": 1,
                    "temp_var8": 1,
                    "temp_var_nmemb": 1,
                    "var11": 1
                },
                "__ptr": {
                    "alloc_ptr": 1,
                    "buffer": 6,
                    "buffer_pointer": 1,
                    "buffer_ptr": 1,
                    "dynamic_array": 1,
                    "dynamic_memory": 1,
                    "new_variable_ptr": 1,
                    "note_names_buffer": 1,
                    "pointer2": 2,
                    "pointer_var2": 2,
                    "pointer_var_2": 1,
                    "pointer_variable2": 1,
                    "ptr": 3,
                    "ptr2": 1,
                    "ptr_var": 2,
                    "result_ptr": 1,
                    "temp_pointer_2": 1,
                    "temp_ptr": 2
                },
                "bVar21": {
                    "boolean_var_2": 1,
                    "bvar21": 1,
                    "byte1": 2,
                    "byte_val": 1,
                    "byte_value": 1,
                    "byte_var": 10,
                    "byte_var21": 2,
                    "flag": 2,
                    "forward_order": 1,
                    "temp": 1,
                    "temp11": 1,
                    "temp_bool": 1,
                    "temp_byte": 2,
                    "temp_var_21": 1
                },
                "bVar4": {
                    "bool_flag": 1,
                    "bool_var": 3,
                    "bool_variable": 1,
                    "boolean": 1,
                    "boolean_result": 1,
                    "boolean_var": 1,
                    "bvar4": 1,
                    "check": 1,
                    "condition": 2,
                    "flag": 5,
                    "found": 1,
                    "is_equal": 1,
                    "is_less_than_zero": 1,
                    "is_match": 1,
                    "is_true": 3,
                    "is_valid": 1,
                    "new_variable4": 1,
                    "temp_bool": 1,
                    "temp_flag": 1,
                    "temp_var_4": 1
                },
                "bfd_nonfatal_message": {
                    "set_nonfatal_message": 1
                },
                "bfd_set_error": {
                    "set_error": 1
                },
                "cVar16": {
                    "char1": 2,
                    "char_result": 1,
                    "char_val": 1,
                    "char_var": 12,
                    "char_var16": 2,
                    "char_variable": 1,
                    "character": 1,
                    "cvar16": 1,
                    "new_var16": 1,
                    "new_variable16": 1,
                    "temp_char": 3,
                    "temp_var_16": 1,
                    "var": 1,
                    "version_flag": 1,
                    "version_note_type": 1
                },
                "compare_gnu_build_notes": {
                    "compare_build_notes": 1
                },
                "dcgettext": {
                    "get_text": 1
                },
                "free": {
                    "deallocate_memory": 1
                },
                "iVar22": {
                    "counter": 1,
                    "counter2": 2,
                    "index": 3,
                    "index2": 2,
                    "int_var1": 1,
                    "int_var2": 2,
                    "int_var22": 1,
                    "int_var_2": 1,
                    "integer_var2": 1,
                    "integer_var_2": 1,
                    "ivar22": 1,
                    "j": 1,
                    "loop_index2": 1,
                    "loop_val": 1,
                    "loop_var2": 1,
                    "temp_index_2": 1,
                    "temp_int": 1,
                    "temp_int2": 1,
                    "temp_var_22": 1,
                    "var22": 2,
                    "var8": 1
                },
                "iVar6": {
                    "count": 1,
                    "counter": 3,
                    "i": 2,
                    "index": 4,
                    "int_val": 1,
                    "int_var": 4,
                    "int_var6": 1,
                    "int_variable": 1,
                    "integer_var": 1,
                    "integer_var1": 1,
                    "ivar6": 1,
                    "loop_var": 1,
                    "new_variable6": 1,
                    "num": 1,
                    "temp_index": 1,
                    "temp_int": 1,
                    "temp_var_6": 1,
                    "var1": 1,
                    "var6": 2
                },
                "in_R11": {
                    "desc_size": 1,
                    "in_r11": 1,
                    "in_register11": 1,
                    "in_register_r11": 1,
                    "loop_var": 1,
                    "new_variable_r11": 1,
                    "note_description": 3,
                    "note_description_ptr": 1,
                    "note_description_size": 1,
                    "note_name": 2,
                    "ptr4": 1,
                    "r11_value": 1,
                    "register_r11": 3,
                    "temp11": 1,
                    "temp8": 1,
                    "temp_var_r11": 1,
                    "value2": 1,
                    "value4": 2,
                    "value9": 1,
                    "var6": 1,
                    "var9": 1
                },
                "in_RAX": {
                    "attribute_type": 1,
                    "in_rax": 1,
                    "in_register_ax": 2,
                    "loop_counter": 1,
                    "new_variable_rax": 1,
                    "note_type": 10,
                    "rax_value": 1,
                    "register_a": 1,
                    "register_rax": 1,
                    "temp5": 2,
                    "temp_var_rax": 1,
                    "value1": 4,
                    "var1": 1,
                    "var3": 1
                },
                "in_stack_00000020": {
                    "alloc_size2": 1,
                    "buffer_size": 5,
                    "description_size": 1,
                    "in_stack_variable_1": 1,
                    "new_variable_stack20": 1,
                    "note_description_buffer_size": 1,
                    "output_size": 1,
                    "result": 1,
                    "size": 2,
                    "stack_00000020": 1,
                    "stack_var1": 5,
                    "stack_variable1": 1,
                    "temp10": 1,
                    "temp_var_stack_20": 1,
                    "temporary": 1,
                    "total_buffer_size": 1,
                    "value10": 1,
                    "value3": 1,
                    "var10": 1,
                    "var13": 1
                },
                "in_stack_00000028": {
                    "dynamic_memory_pointer": 1,
                    "in_stack_variable_2": 1,
                    "new_variable_stack28": 1,
                    "note_array": 2,
                    "note_array_copy": 1,
                    "note_entry_ptr": 1,
                    "note_list": 1,
                    "notes_array": 1,
                    "notes_buffer": 2,
                    "pointer11": 1,
                    "pointer_var9": 1,
                    "ptr": 1,
                    "ptr8": 1,
                    "ptr9": 1,
                    "ptr_array": 1,
                    "ptr_var10": 1,
                    "sorted_attribute_notes": 1,
                    "stack_00000028": 1,
                    "stack_pointer_var1": 1,
                    "stack_ptr1": 1,
                    "stack_var2": 3,
                    "stack_variable2": 1,
                    "temp_array_pointer": 1,
                    "temp_pointer_11": 1,
                    "temp_ptr6": 1
                },
                "in_stack_00000030": {
                    "alloc_ptr2": 1,
                    "buffer": 1,
                    "buffer2": 1,
                    "buffer_ptr_temp": 1,
                    "dest_buffer": 1,
                    "in_stack_variable_3": 1,
                    "new_variable_stack30": 1,
                    "note_array_ptr": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "pointer12": 1,
                    "pointer_var10": 1,
                    "ptr": 2,
                    "ptr9": 1,
                    "ptr_list": 1,
                    "ptr_var11": 1,
                    "stack_00000030": 1,
                    "stack_pointer_var2": 1,
                    "stack_ptr2": 1,
                    "stack_var3": 3,
                    "stack_variable3": 1,
                    "temp_buffer_pointer": 1,
                    "temp_pointer": 1,
                    "temp_pointer_12": 1,
                    "temp_ptr2": 1,
                    "temp_ptr7": 1
                },
                "in_stack_00000038": {
                    "arg8": 1,
                    "condition2": 1,
                    "excess_data_at_end": 1,
                    "flag1": 2,
                    "flag1_temp": 1,
                    "flag2": 1,
                    "flag3": 1,
                    "flag_1": 1,
                    "flag_2": 1,
                    "in_stack_variable_4": 1,
                    "is_excess_data": 1,
                    "new_variable_stack38": 1,
                    "note_version2": 1,
                    "note_version_flag": 1,
                    "param10": 1,
                    "stack_00000038": 1,
                    "stack_var2": 2,
                    "stack_var38": 1,
                    "stack_var4": 3,
                    "stack_variable4": 1,
                    "temp_uint2": 1,
                    "temp_var_stack_38": 1,
                    "value11": 1,
                    "var11": 1,
                    "var38": 1
                },
                "in_stack_00000040": {
                    "arg9": 1,
                    "condition3": 1,
                    "flag2": 2,
                    "flag2_temp": 1,
                    "flag3": 1,
                    "flag4": 1,
                    "flag_2": 1,
                    "flag_3": 1,
                    "in_stack_variable_5": 1,
                    "is_version_note": 1,
                    "missing_note_version": 1,
                    "multiple_versions": 1,
                    "new_variable_stack40": 1,
                    "note_data2": 1,
                    "param11": 1,
                    "stack_00000040": 1,
                    "stack_var3": 2,
                    "stack_var40": 1,
                    "stack_var5": 3,
                    "stack_variable5": 1,
                    "temp_uint3": 1,
                    "temp_var_stack_40": 1,
                    "value12": 1,
                    "var12": 1,
                    "var40": 1
                },
                "in_stack_00000048": {
                    "context_ptr": 1,
                    "function_pointers": 1,
                    "in_stack_variable_6": 1,
                    "message_ptr": 1,
                    "msg": 1,
                    "new_variable_stack48": 1,
                    "pointer13": 1,
                    "pointer_var11": 1,
                    "pointer_var48": 1,
                    "ptr": 1,
                    "ptr10": 2,
                    "ptr_array2": 1,
                    "ptr_var12": 1,
                    "stack_00000048": 1,
                    "stack_pointer_var3": 1,
                    "stack_ptr3": 1,
                    "stack_var6": 3,
                    "stack_variable6": 1,
                    "strings_pointer_array": 1,
                    "temp_pointer_13": 1,
                    "temp_ptr": 1,
                    "temp_ptr3": 1,
                    "temp_ptr7": 1,
                    "warning_message": 2,
                    "warning_msg_ptr": 1
                },
                "lVar7": {
                    "err_msg": 1,
                    "error_code": 1,
                    "error_message": 1,
                    "len": 1,
                    "length": 5,
                    "length_var": 1,
                    "long_var": 5,
                    "long_variable": 1,
                    "loop_index": 1,
                    "loop_var": 1,
                    "lvar7": 1,
                    "new_variable7": 1,
                    "note_descriptor": 1,
                    "result": 2,
                    "temp_counter": 1,
                    "temp_long": 2,
                    "temp_var_7": 1,
                    "var2": 1,
                    "var7": 2
                },
                "memcmp": {
                    "memory_compare": 1
                },
                "non_fatal": {
                    "non_fatal": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 7,
                    "argument_1": 2,
                    "first_parameter": 1,
                    "input": 1,
                    "input1": 1,
                    "input_pointer": 1,
                    "param1": 9,
                    "param_1": 6,
                    "unknown_param": 1
                },
                "param_2": {
                    "arg2": 7,
                    "argument_2": 2,
                    "array_size": 1,
                    "attribute_count": 1,
                    "attribute_note_type": 1,
                    "attribute_notes_size": 1,
                    "input2": 1,
                    "note_size": 6,
                    "num_notes": 1,
                    "param2": 3,
                    "param_size": 1,
                    "second_parameter": 1,
                    "size": 3,
                    "tag": 1
                },
                "param_3": {
                    "arg3": 7,
                    "argument_3": 2,
                    "array_data": 1,
                    "attribute_name": 1,
                    "attribute_notes": 1,
                    "data": 1,
                    "input3": 1,
                    "name": 2,
                    "note_content": 1,
                    "note_data": 1,
                    "note_name": 5,
                    "notes": 1,
                    "notes_offset": 1,
                    "param3": 3,
                    "param_data": 1,
                    "third_parameter": 1
                },
                "param_4": {
                    "arg4": 7,
                    "argument_4": 2,
                    "array_length": 1,
                    "attribute_data": 1,
                    "attribute_notes_length": 1,
                    "description": 1,
                    "fourth_parameter": 1,
                    "input4": 1,
                    "length": 1,
                    "note_buffer": 1,
                    "note_count": 1,
                    "note_data": 1,
                    "note_description": 1,
                    "note_info": 1,
                    "note_num": 1,
                    "notes_payload": 1,
                    "notes_size": 1,
                    "num_notes": 1,
                    "param4": 3,
                    "param_data_length": 1,
                    "size": 1
                },
                "param_7": {
                    "arg5": 3,
                    "arg7": 4,
                    "argument_7": 2,
                    "final_result": 1,
                    "input7": 1,
                    "length_temp": 1,
                    "num_notes": 1,
                    "num_notes_sorted": 1,
                    "output_size": 1,
                    "param7": 6,
                    "result": 3,
                    "ret_val": 1,
                    "return_size": 1,
                    "return_value1": 1,
                    "seventh_parameter": 1,
                    "temp_var9": 1,
                    "value7": 1
                },
                "param_8": {
                    "arg6": 3,
                    "arg8": 4,
                    "argument_8": 2,
                    "condition1": 1,
                    "eighth_parameter": 1,
                    "flag1": 2,
                    "flag_1": 1,
                    "flag_temp": 1,
                    "input8": 1,
                    "is_version_note_missing": 1,
                    "note_version": 2,
                    "param8": 6,
                    "param_8": 1,
                    "temp_uint1": 1,
                    "value8": 1,
                    "var8_2": 1,
                    "warning_version_note_missing": 1
                },
                "param_9": {
                    "addr_temp": 1,
                    "arg7": 3,
                    "arg9": 4,
                    "argument_9": 2,
                    "attribute_version": 1,
                    "default_address": 1,
                    "flag2": 1,
                    "input9": 1,
                    "ninth_parameter": 1,
                    "note_version_2": 1,
                    "param9": 6,
                    "param_9": 2,
                    "return_address_2": 1,
                    "temp": 1,
                    "temp9": 1,
                    "temp_var10": 1,
                    "value9": 1
                },
                "puVar14": {
                    "array_pointer": 1,
                    "new_variable14": 1,
                    "note": 1,
                    "note_array_pointer": 1,
                    "note_entry": 1,
                    "note_entry_ptr": 1,
                    "note_ptr": 2,
                    "pointer3": 1,
                    "pointer4": 1,
                    "pointer_var14": 1,
                    "pointer_var2": 2,
                    "pointer_var3": 1,
                    "pointer_var_3": 2,
                    "pointer_variable3": 1,
                    "ptr": 1,
                    "ptr1": 2,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr_var1": 1,
                    "ptr_var14": 1,
                    "ptr_var2": 1,
                    "puvar14": 1,
                    "temp_pointer_3": 1,
                    "temp_ptr1": 1
                },
                "puVar15": {
                    "buffer_ptr": 1,
                    "desc_ptr": 1,
                    "dest": 1,
                    "new_variable15": 1,
                    "pointer4": 1,
                    "pointer5": 1,
                    "pointer_var3": 3,
                    "pointer_var4": 1,
                    "pointer_var_2": 1,
                    "pointer_var_4": 1,
                    "pointer_variable4": 1,
                    "ptr": 1,
                    "ptr1": 2,
                    "ptr2": 2,
                    "ptr3": 1,
                    "ptr4": 1,
                    "ptr_var15": 1,
                    "ptr_var2": 1,
                    "ptr_var3": 1,
                    "puvar15": 1,
                    "temp_buffer_ptr": 1,
                    "temp_pointer_4": 1,
                    "temp_ptr2": 2
                },
                "puVar17": {
                    "dest_2": 1,
                    "new_variable17": 1,
                    "pointer5": 1,
                    "pointer6": 1,
                    "pointer_var17": 1,
                    "pointer_var4": 3,
                    "pointer_var5": 1,
                    "pointer_var_5": 2,
                    "pointer_variable5": 1,
                    "ptr": 1,
                    "ptr2": 2,
                    "ptr3": 2,
                    "ptr4": 1,
                    "ptr5": 1,
                    "ptr_2": 1,
                    "ptr_var17": 1,
                    "ptr_var3": 1,
                    "ptr_var4": 1,
                    "puvar17": 1,
                    "temp_buffer_ptr_2": 1,
                    "temp_pointer_5": 1,
                    "temp_ptr3": 2,
                    "var_ptr": 1
                },
                "puVar18": {
                    "dest_3": 1,
                    "new_variable18": 1,
                    "pointer6": 1,
                    "pointer7": 1,
                    "pointer_var18": 1,
                    "pointer_var5": 3,
                    "pointer_var6": 1,
                    "pointer_var_6": 2,
                    "pointer_variable6": 1,
                    "ptr": 1,
                    "ptr3": 2,
                    "ptr4": 2,
                    "ptr5": 1,
                    "ptr6": 1,
                    "ptr_3": 1,
                    "ptr_var18": 1,
                    "ptr_var4": 1,
                    "ptr_var5": 1,
                    "puvar18": 1,
                    "temp7": 1,
                    "temp_buffer_ptr_3": 1,
                    "temp_pointer_6": 1,
                    "temp_ptr4": 2
                },
                "puVar19": {
                    "array_pointer2": 1,
                    "new_variable19": 1,
                    "note_array": 1,
                    "note_buffer_ptr": 1,
                    "note_end": 1,
                    "note_entry_ptr2": 1,
                    "note_ptr": 2,
                    "note_start_ptr": 1,
                    "pointer7": 1,
                    "pointer8": 1,
                    "pointer_var19": 1,
                    "pointer_var6": 2,
                    "pointer_var7": 1,
                    "pointer_var_1": 1,
                    "pointer_var_7": 1,
                    "pointer_variable7": 1,
                    "ptr": 1,
                    "ptr5": 1,
                    "ptr6": 2,
                    "ptr7": 1,
                    "ptr_var5": 1,
                    "ptr_var7": 1,
                    "puvar19": 1,
                    "temp_pointer_8": 1,
                    "temp_ptr5": 1
                },
                "puVar20": {
                    "note_ptr": 1,
                    "note_ptr_2": 1,
                    "pointer10": 1,
                    "pointer8": 1,
                    "pointer_var20": 1,
                    "pointer_var7": 2,
                    "pointer_var8": 2,
                    "pointer_var_4": 1,
                    "ptr": 1,
                    "ptr5": 1,
                    "ptr6": 1,
                    "ptr7": 1,
                    "ptr8": 2,
                    "ptr_4": 1,
                    "ptr_var21": 1,
                    "ptr_var6": 1,
                    "ptr_var9": 1,
                    "puvar20": 1,
                    "temp10": 1,
                    "temp_pointer_10": 1,
                    "temp_ptr5": 1,
                    "temp_ptr6": 1,
                    "temp_ptr_2": 1
                },
                "puVar5": {
                    "array_ptr": 1,
                    "new_variable5": 1,
                    "note_pointer": 1,
                    "pointer1": 2,
                    "pointer_var": 3,
                    "pointer_var1": 1,
                    "pointer_var5": 1,
                    "pointer_var_1": 1,
                    "pointer_var_7": 1,
                    "pointer_variable1": 1,
                    "ptr": 6,
                    "ptr1": 2,
                    "ptr_temp": 1,
                    "ptr_var": 2,
                    "ptr_var5": 1,
                    "puvar5": 1,
                    "temp_pointer_1": 1,
                    "temp_ptr": 2
                },
                "qsort": {
                    "quick_sort": 1
                },
                "sort_gnu_build_notes": {
                    "sort_build_notes": 1
                },
                "uVar1": {
                    "new_var1": 1,
                    "new_variable1": 1,
                    "result": 2,
                    "result1": 3,
                    "result_var_1": 1,
                    "result_variable1": 1,
                    "ret_value1": 1,
                    "temp1": 7,
                    "temp_1": 2,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "unknown_var1": 1,
                    "uvar1": 1,
                    "var1": 6
                },
                "uVar10": {
                    "end_addr": 1,
                    "new_var10": 1,
                    "new_variable10": 1,
                    "result10": 1,
                    "result_var_6": 1,
                    "result_variable6": 1,
                    "ret_val": 1,
                    "ret_value10": 1,
                    "temp": 1,
                    "temp4": 1,
                    "temp6": 3,
                    "temp7": 2,
                    "temp_3": 1,
                    "temp_6": 2,
                    "temp_var10": 1,
                    "temp_var2": 1,
                    "temp_var_10": 1,
                    "unknown_var6": 1,
                    "uvar10": 1,
                    "value3": 1,
                    "var10": 4,
                    "var3": 1
                },
                "uVar11": {
                    "new_var11": 1,
                    "new_variable11": 1,
                    "result11": 1,
                    "result_var_7": 1,
                    "result_variable7": 1,
                    "ret_addr": 2,
                    "ret_value11": 1,
                    "temp": 1,
                    "temp5": 1,
                    "temp7": 3,
                    "temp8": 2,
                    "temp_4": 1,
                    "temp_7": 2,
                    "temp_var11": 1,
                    "temp_var3": 1,
                    "temp_var_11": 1,
                    "unknown_var7": 1,
                    "uvar11": 1,
                    "value4": 1,
                    "var11": 4,
                    "var4": 1
                },
                "uVar12": {
                    "new_var12": 1,
                    "new_variable12": 1,
                    "result12": 1,
                    "result_var_8": 1,
                    "result_variable8": 1,
                    "ret_value12": 1,
                    "temp": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp8": 3,
                    "temp9": 2,
                    "temp_5": 1,
                    "temp_8": 2,
                    "temp_var12": 1,
                    "temp_var4": 1,
                    "temp_var_12": 1,
                    "unknown_var8": 1,
                    "uvar12": 1,
                    "value5": 1,
                    "var12": 5,
                    "var5": 1
                },
                "uVar13": {
                    "buffer_size": 1,
                    "new_var13": 1,
                    "new_variable13": 1,
                    "result13": 1,
                    "result_var_9": 1,
                    "result_variable9": 1,
                    "ret_value13": 1,
                    "temp": 1,
                    "temp10": 2,
                    "temp6": 1,
                    "temp7": 1,
                    "temp9": 3,
                    "temp_6": 1,
                    "temp_9": 2,
                    "temp_var13": 1,
                    "temp_var5": 1,
                    "temp_var_13": 1,
                    "unknown_var9": 1,
                    "uvar13": 1,
                    "value6": 1,
                    "var13": 4,
                    "var6": 1
                },
                "uVar2": {
                    "new_var2": 1,
                    "new_variable2": 1,
                    "result2": 3,
                    "result_var_2": 1,
                    "result_variable2": 1,
                    "ret_value2": 1,
                    "temp": 2,
                    "temp2": 7,
                    "temp_2": 2,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "unknown_var2": 1,
                    "uvar2": 1,
                    "var2": 6
                },
                "uVar21": {
                    "byte_var": 1
                },
                "uVar3": {
                    "new_var3": 1,
                    "new_variable3": 1,
                    "result": 1,
                    "result3": 3,
                    "result_var_3": 1,
                    "result_variable3": 1,
                    "ret_value3": 1,
                    "temp": 1,
                    "temp3": 6,
                    "temp_2": 1,
                    "temp_3": 2,
                    "temp_var3": 1,
                    "temp_var_3": 1,
                    "unknown_var3": 1,
                    "uvar3": 1,
                    "var3": 6
                },
                "uVar8": {
                    "error_message": 1,
                    "new_var8": 1,
                    "new_variable8": 1,
                    "result4": 2,
                    "result8": 1,
                    "result_var_4": 1,
                    "result_variable4": 1,
                    "ret_value8": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp4": 6,
                    "temp_4": 2,
                    "temp_var8": 1,
                    "temp_var_8": 1,
                    "unknown_var4": 1,
                    "uvar8": 1,
                    "var8": 6
                },
                "uVar9": {
                    "name_ptr": 1,
                    "new_var9": 1,
                    "new_variable9": 1,
                    "note_size": 2,
                    "result9": 1,
                    "result_var_5": 1,
                    "result_variable5": 1,
                    "ret_value9": 1,
                    "start_addr": 1,
                    "temp": 1,
                    "temp5": 3,
                    "temp6": 2,
                    "temp_5": 2,
                    "temp_var1": 1,
                    "temp_var9": 1,
                    "temp_var_9": 1,
                    "unknown_var5": 1,
                    "uvar9": 1,
                    "value2": 1,
                    "var2": 1,
                    "var9": 4
                },
                "unaff_R11": {
                    "note_buffer_end": 1,
                    "register_11": 1
                },
                "unaff_R12": {
                    "attribute_notes": 1,
                    "attribute_pointer": 1,
                    "current_note": 1,
                    "data_pointer": 1,
                    "new_variable_r12": 1,
                    "note_array_ptr": 1,
                    "note_attribute": 1,
                    "note_entry": 1,
                    "note_info": 1,
                    "note_item": 1,
                    "note_ptr": 2,
                    "notes": 1,
                    "notes_array": 1,
                    "pointer3": 1,
                    "pointer_var6": 1,
                    "ptr5": 1,
                    "ptr_var19": 1,
                    "ptr_var6": 1,
                    "r12_value": 1,
                    "register_12": 1,
                    "register_r12": 2,
                    "temp_pointer_7": 1,
                    "unaff_r12": 3,
                    "unaffected_r12": 1,
                    "unaffected_register12": 1,
                    "var_ptr": 1
                },
                "unaff_R13": {
                    "attribute_note_description_offset": 1,
                    "description_size": 1,
                    "flag3": 1,
                    "new_variable_r13": 1,
                    "note_capacity_tail": 1,
                    "note_description_base": 1,
                    "note_description_size": 1,
                    "note_index": 1,
                    "num_notes_processed": 1,
                    "r13_value": 1,
                    "register_13": 1,
                    "register_r13": 2,
                    "saved_frame_pointer": 1,
                    "stored_note_size": 1,
                    "temp9": 1,
                    "temp_var7": 1,
                    "temp_var_r13": 1,
                    "unaff_r13": 3,
                    "unaffected_r13": 1,
                    "unaffected_register13": 1,
                    "value10": 1,
                    "value5": 2,
                    "var10": 1,
                    "var16": 1,
                    "var7": 1,
                    "version_ptr": 1
                },
                "unaff_R14": {
                    "arg_list": 1,
                    "context": 1,
                    "dcgettext_params": 1,
                    "error_messages": 1,
                    "file": 1,
                    "fun_ptr": 1,
                    "func_ptr": 1,
                    "function_pointers": 2,
                    "function_ptr": 2,
                    "new_variable_r14": 1,
                    "pointer9": 1,
                    "pointer_var7": 1,
                    "ptr7": 1,
                    "ptr_var20": 1,
                    "ptr_var8": 1,
                    "r14_value": 1,
                    "register_14": 1,
                    "register_r14": 1,
                    "strings_array_pointer": 1,
                    "temp_pointer_9": 1,
                    "unaff_r14": 3,
                    "unaffected_register14": 1,
                    "var_ptr2": 1
                },
                "unaff_RAX": {
                    "register_0": 1
                },
                "unaff_RBP": {
                    "attribute_note_type": 1,
                    "base_pointer": 2,
                    "description_size": 1,
                    "frame_pointer": 1,
                    "func_addr": 1,
                    "new_variable_rbp": 1,
                    "note_version_2": 1,
                    "param_9": 1,
                    "param_value": 1,
                    "rbp_value": 1,
                    "register_bp": 1,
                    "register_rbp": 1,
                    "ret_addr": 1,
                    "return_value": 1,
                    "temp8": 1,
                    "temp_var6": 1,
                    "temp_var_rbp": 1,
                    "unaff_rbp": 3,
                    "unaffected_rbp": 1,
                    "unaffected_register_bp": 1,
                    "value3": 2,
                    "value8": 1,
                    "var15": 1,
                    "var5": 1,
                    "var8": 1,
                    "version": 1
                },
                "unaff_RBX": {
                    "array_length_remaining": 1,
                    "attribute_notes_size": 1,
                    "flag2": 1,
                    "new_variable_rbx": 1,
                    "note_capacity": 1,
                    "note_data": 1,
                    "note_size": 1,
                    "note_total_size": 1,
                    "num_notes_left": 1,
                    "rbx_value": 1,
                    "register_11": 1,
                    "register_bx": 1,
                    "register_rbx": 1,
                    "remain_size": 1,
                    "remaining_bytes": 1,
                    "remaining_note_length": 1,
                    "remaining_notes": 1,
                    "temp_var_rbx": 1,
                    "total_notes_size": 1,
                    "unaff_rbx": 3,
                    "unaffected_rb": 1,
                    "unaffected_register_bx": 1,
                    "value2": 2,
                    "value7": 1,
                    "var14": 1,
                    "var4": 1,
                    "var7": 1
                },
                "unaff_retaddr": {
                    "build_attribute": 1,
                    "note_version_3": 1,
                    "register_ret_addr": 2,
                    "ret_addr": 3,
                    "ret_addr_temp": 1,
                    "ret_addr_value": 1,
                    "ret_address": 1,
                    "return_addr": 1,
                    "return_address": 5,
                    "temp": 1,
                    "temp_ret_addr": 1,
                    "temp_return_address": 1,
                    "temp_var_retaddr": 1,
                    "unaff_ret_addr": 1,
                    "unaff_retaddr": 2,
                    "unaffected_return_address": 2,
                    "value11": 1,
                    "value6": 1,
                    "var12": 1,
                    "var9": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "FUN_00104240",
                "FUN_001086af"
            ],
            "calling": [
                "FUN_0010847a",
                "FUN_001086af"
            ],
            "code": "\nulong parse_gnu_build_attribute_notes_00116490(undefined8 param1,ulong arg2,ulong arg3,long arg4)\n\n{\n  undefined8 temp1;\n  undefined8 temp2;\n  ulong var3;\n  bool flag;\n  ulong *ptr;\n  int index;\n  long long_var;\n  undefined8 temp4;\n  ulong note_type;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *buffer;\n  ulong var13;\n  ulong unaff_rbx;\n  ulong unaff_rbp;\n  ulong *pointer_var2;\n  undefined *pointer_var3;\n  char char_var;\n  undefined *pointer_var4;\n  undefined *pointer_var5;\n  ulong note_description;\n  ulong *unaff_r12;\n  ulong *ptr6;\n  ulong unaff_r13;\n  size_t size;\n  undefined8 *unaff_r14;\n  ulong *pointer_var8;\n  byte byte_var;\n  int index;\n  ulong return_address;\n  ulong param7;\n  uint param8;\n  ulong param9;\n  ulong stack_var1;\n  ulong *stack_var2;\n  undefined *stack_var3;\n  uint stack_var4;\n  uint stack_var5;\n  undefined8 *stack_var6;\n  \n  byte_var = 0;\ncode_r0x00116490:\n  long_var = arg4;\n  var10 = unaff_rbp;\n  var13 = unaff_r13;\n  if (note_type == 0) {\n    if (arg2 == 0x100) {\n      unaff_r12[7] = return_address;\n      var11 = return_address;\nLAB_001164af:\n      var9 = unaff_r13;\n      var13 = unaff_r13;\n      return_address = var11;\n    }\n    else {\n      unaff_r12[7] = param9;\nLAB_0011669e:\n      var10 = unaff_rbp;\n      var9 = unaff_rbp;\n    }\nLAB_001164bb:\n    unaff_r12[8] = var9;\n    if (*(char *)((unaff_r12[3] - 1) + arg3) != '\\0') {\n      long_var = get_text(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr6 = unaff_r12 + 9;\n    if (0xb < unaff_rbx) {\n      var9 = (**(code **)(unaff_r14[1] + 0x40))(long_var);\n      *ptr6 = var9;\n      var9 = (**(code **)(unaff_r14[1] + 0x40))(long_var + 4);\n      unaff_r12[10] = var9;\n      arg2 = (**(code **)(unaff_r14[1] + 0x40))(long_var + 8);\n      arg3 = *ptr6;\n      unaff_r12[0xb] = arg2;\n      note_type = unaff_r12[10];\n      var9 = arg3 + 3 & 0xfffffffffffffffc;\n      unaff_r12[0xf] = var9;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        long_var = get_text(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < arg2 - 0x100) {\n        long_var = get_text(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = var9 + note_type + 0xc;\n      if (unaff_rbx < var11) {\n        long_var = get_text(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (arg3 < 2) {\n        long_var = get_text(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_r12[0xc] = long_var + 0xc;\n      note_description = long_var + 0xc + var9;\n      unaff_r12[0xd] = note_description;\n      unaff_rbx = unaff_rbx + (-0xc - (var9 + note_type));\n      arg4 = long_var + var11;\n      unaff_rbp = var10;\n      unaff_r12 = ptr6;\n      unaff_r13 = var13;\n      if (arg3 != 2) {\n        if (*(char *)(long_var + 0xc) == '$') {\n          if ((*(char *)(long_var + 0xd) == '\\x01') && (*(char *)(long_var + 0xe) == '1')) {\n            var10 = parse_gnu_build_attribute_notes_00116490();\n            return var10;\n          }\n        }\n        else if ((((4 < arg3) && (*(char *)(long_var + 0xc) == 'G')) &&\n                 (*(char *)(long_var + 0xd) == 'A')) &&\n                ((*(char *)(long_var + 0xe) == '$' && (*(char *)(long_var + 0xf) == '\\x01')))) {\n          if (*(char *)(long_var + 0x10) == '2') {\n            var10 = parse_gnu_build_attribute_notes_00116490();\n            return var10;\n          }\n          if (*(char *)(long_var + 0x10) == '3') {\n            var10 = parse_gnu_build_attribute_notes_00116490();\n            return var10;\n          }\n          long_var = get_text(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_rbx != 0) {\n      long_var = get_text(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((stack_var4 | stack_var5 | param8) == 0) {\n      temp1 = *unaff_r14;\n      temp2 = *stack_var6;\n      temp4 = get_text(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(temp4,temp1,temp2);\nLAB_0011671b:\n      size = ((long)ptr6 - (long)stack_var2 >> 3) * -0x71c71c71c71c71c7;\n      quick_sort(stack_var2,size,0x48,compare_build_notes);\n      for (pointer_var2 = stack_var2; pointer_var2 < ptr6; pointer_var2 = pointer_var2 + 9) {\n        var10 = pointer_var2[2];\n        if (var10 != 0) {\n          var13 = pointer_var2[7];\n          var9 = pointer_var2[8];\n          pointer_var8 = pointer_var2;\n          index = 0;\n          if (var13 == var9) {\n            pointer_var2[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr = pointer_var8;\n                pointer_var8 = ptr + -9;\n                if (pointer_var8 < stack_var2) goto LAB_001167f5;\n                var11 = ptr[-7];\n              } while (var11 == 0);\n              if ((*pointer_var8 != *pointer_var2) ||\n                 (index = memory_compare((void *)ptr[-6],(void *)pointer_var2[3],*pointer_var2), index != 0))\n              break;\n              var3 = ptr[-2];\n              var12 = ptr[-1];\n              if (var13 == var3) {\n                if (var9 == var12) {\n                  pointer_var2[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var9 <= var12) {\n                  pointer_var2[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto analyze_build_notes_00116852;\n                }\nLAB_001167b8:\n                if ((var10 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= var9) {\n                    var12 = var9;\n                  }\n                  if (var3 < var13) {\n                    var13 = var3;\n                  }\n                  ptr[-1] = var12;\n                  ptr[-2] = var13;\n                  pointer_var2[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (var9 < var13) {\n                  if ((0xfffffffffffffff0 < var9) || (var3 <= (var9 + 0xf & 0xfffffffffffffff0)))\n                  goto analyze_build_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (var9 != var12) goto LAB_001167b8;\n              }\nanalyze_build_notes_00116852:\n              flag = index < 0x11;\n              index = index + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      quick_sort(stack_var2,size,0x48,sort_build_notes);\n      buffer = (undefined *)allocate_memory(stack_var1 * 2);\n      param7 = 0;\n      param9 = 0;\n      pointer_var5 = buffer;\n      for (pointer_var2 = stack_var2; pointer_var2 < ptr6; pointer_var2 = pointer_var2 + 9) {\n        if (pointer_var2[2] != 0) {\n          pointer_var4 = pointer_var5 + 4;\n          pointer_var3 = pointer_var5 + 0xc;\n          if ((pointer_var2[7] == param9) && (pointer_var2[8] == param7)) {\n            (**(code **)(unaff_r14[1] + 0x50))(*pointer_var2,pointer_var5);\n            (**(code **)(unaff_r14[1] + 0x50))(0,pointer_var4);\n            (**(code **)(unaff_r14[1] + 0x50))(pointer_var2[2],pointer_var5 + 8);\n            var13 = pointer_var2[6];\n            var10 = *pointer_var2;\n            pointer_var5 = (undefined *)pointer_var2[3];\n            pointer_var4 = pointer_var3;\n            for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n              *pointer_var4 = *pointer_var5;\n              pointer_var5 = pointer_var5 + (ulong)byte_var * -2 + 1;\n              pointer_var4 = pointer_var4 + (ulong)byte_var * -2 + 1;\n            }\n            if (var10 < var13) {\n              for (long_var = var13 - var10; long_var != 0; long_var = long_var + -1) {\n                *pointer_var4 = 0;\n                pointer_var4 = pointer_var4 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            pointer_var5 = pointer_var3 + var13;\n          }\n          else {\n            (**(code **)(unaff_r14[1] + 0x50))();\n            if (*(int *)(unaff_r14[1] + 8) == 5) {\n              char_var = (*(char *)(unaff_r14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              char_var = '\\b';\n            }\n            (**(code **)(unaff_r14[1] + 0x50))(char_var,pointer_var4);\n            (**(code **)(unaff_r14[1] + 0x50))(pointer_var2[2],pointer_var5 + 8);\n            var10 = *pointer_var2;\n            pointer_var5 = (undefined *)pointer_var2[3];\n            pointer_var4 = pointer_var3;\n            for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n              *pointer_var4 = *pointer_var5;\n              pointer_var5 = pointer_var5 + (ulong)byte_var * -2 + 1;\n              pointer_var4 = pointer_var4 + (ulong)byte_var * -2 + 1;\n            }\n            var13 = pointer_var2[6];\n            if (var10 < var13) {\n              for (long_var = var13 - var10; long_var != 0; long_var = long_var + -1) {\n                *pointer_var4 = 0;\n                pointer_var4 = pointer_var4 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            long_var = unaff_r14[1];\n            pointer_var3 = pointer_var3 + var13;\n            pointer_var5 = pointer_var3 + 8;\n            if ((*(int *)(long_var + 8) == 5) && (*(char *)(unaff_r14[0x22] + 4) == '\\x02')) {\n              (**(code **)(long_var + 0x38))(pointer_var2[7],pointer_var3);\n              (**(code **)(unaff_r14[1] + 0x38))(pointer_var2[8],pointer_var5);\n              pointer_var5 = pointer_var3 + 0x10;\n            }\n            else {\n              (**(code **)(long_var + 0x50))(pointer_var2[7],pointer_var3);\n              (**(code **)(unaff_r14[1] + 0x50))(pointer_var2[8],pointer_var3 + 4);\n            }\n            param9 = pointer_var2[7];\n            param7 = pointer_var2[8];\n          }\n        }\n      }\n      var13 = (long)pointer_var5 - (long)buffer;\n      var10 = var13;\n      pointer_var5 = buffer;\n      if (var13 < stack_var1) {\n        for (; stack_var1 = var13, var10 != 0; var10 = var10 - 1) {\n          *stack_var3 = *pointer_var5;\n          pointer_var5 = pointer_var5 + (ulong)byte_var * -2 + 1;\n          stack_var3 = stack_var3 + (ulong)byte_var * -2 + 1;\n        }\n      }\n      deallocate_memory(buffer);\nLAB_001166f8:\n      deallocate_memory(stack_var2);\n      return stack_var1;\n    }\n    if (((stack_var5 | param8) == 0) || (stack_var4 == 0)) {\n      if (stack_var5 == 0) {\n        if (param8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param8 == 0) goto LAB_001166f8;\n    }\n    long_var = get_text(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      var11 = (**(code **)(unaff_r14[1] + 0x28))(note_description);\n      var9 = (**(code **)(unaff_r14[1] + 0x28))(unaff_r12[4] + 8);\n      if (var9 < var11) {\n        var11 = var9;\n      }\nLAB_00116631:\n      if (unaff_r12[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = return_address;\n        }\n        arg3 = *unaff_r12;\n        unaff_r12[7] = var11;\n        var13 = var9;\n        return_address = var11;\n        if (var9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = param9;\n        }\n        arg3 = *unaff_r12;\n        unaff_r12[7] = var11;\n        var10 = var9;\n        param9 = var11;\n        if (var9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        var11 = (**(code **)(unaff_r14[1] + 0x40))(note_description);\n        var9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        var10 = analyze_build_notes_001086af();\n        return var10;\n      }\n    }\n    long_var = get_text(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (long_var != 0) {\n    set_error(0x11);\n    set_nonfatal_message(0,unaff_r14,stack_var6,long_var);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_gnu_build_notes);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto analyze_build_notes_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto analyze_build_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nanalyze_build_notes_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,sort_gnu_build_notes);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "current_name": "parse_gnu_build_attribute_notes_00116490",
            "entrypoint": "0x00116490",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116490": "parse_gnu_build_attribute_notes_00116490",
                "__nmemb": "size",
                "__ptr": "buffer",
                "bVar21": "byte_var",
                "bVar4": "flag",
                "bfd_nonfatal_message": "set_nonfatal_message",
                "bfd_set_error": "set_error",
                "cVar16": "char_var",
                "compare_gnu_build_notes": "compare_build_notes",
                "dcgettext": "get_text",
                "free": "deallocate_memory",
                "iVar22": "index",
                "iVar6": "index",
                "in_R11": "note_description",
                "in_RAX": "note_type",
                "in_stack_00000020": "stack_var1",
                "in_stack_00000028": "stack_var2",
                "in_stack_00000030": "stack_var3",
                "in_stack_00000038": "stack_var4",
                "in_stack_00000040": "stack_var5",
                "in_stack_00000048": "stack_var6",
                "lVar7": "long_var",
                "memcmp": "memory_compare",
                "param_1": "param1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "puVar14": "pointer_var2",
                "puVar15": "pointer_var3",
                "puVar17": "pointer_var4",
                "puVar18": "pointer_var5",
                "puVar19": "ptr6",
                "puVar20": "pointer_var8",
                "puVar5": "ptr",
                "qsort": "quick_sort",
                "sort_gnu_build_notes": "sort_build_notes",
                "uVar1": "temp1",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar2": "temp2",
                "uVar3": "var3",
                "uVar8": "temp4",
                "uVar9": "var9",
                "unaff_R12": "unaff_r12",
                "unaff_R13": "unaff_r13",
                "unaff_R14": "unaff_r14",
                "unaff_RBP": "unaff_rbp",
                "unaff_RBX": "unaff_rbx",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116852": {
            "additional_data": {
                "FUN_00116852": {
                    "analyze_build_notes": 1,
                    "decode_and_process_data": 1,
                    "decompiled_function": 1,
                    "extract_and_process_notes": 1,
                    "find_and_process_notes": 1,
                    "process_build_notes": 3,
                    "process_data": 2
                },
                "FUN_0011a250": {
                    "compare_function": 1,
                    "compare_notes": 1
                },
                "__ptr": {
                    "allocated_memory": 2,
                    "buffer": 3,
                    "dynamic_array": 1,
                    "dynamic_buffer": 1,
                    "extracted_notes": 1,
                    "malloc_ptr": 1,
                    "new_array": 1,
                    "result_buffer": 1,
                    "result_ptr": 2,
                    "temp_array_pointer": 1,
                    "temp_buffer": 1,
                    "temp_memory": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 3,
                    "xmalloc_buffer": 1
                },
                "bVar14": {
                    "b_var14": 2,
                    "boolean_flag": 1,
                    "byte_size": 1,
                    "byte_step": 1,
                    "byte_value": 4,
                    "byte_var": 1,
                    "byte_variable": 1,
                    "char_value": 1,
                    "flag": 3,
                    "is_found": 1,
                    "loop_break": 1,
                    "loop_counter_byte": 1,
                    "loop_flag": 1,
                    "some_byte": 1,
                    "stop_sorting": 1,
                    "temp": 1,
                    "temp_byte": 3
                },
                "cVar10": {
                    "c_var10": 1,
                    "char_result": 1,
                    "char_value": 6,
                    "char_var": 2,
                    "character": 1,
                    "compare_char": 1,
                    "flag": 1,
                    "loop_condition": 1,
                    "some_char": 1,
                    "temp_char": 4,
                    "temp_character": 2
                },
                "free": {
                    "free_function": 1
                },
                "iVar3": {
                    "compare_result": 4,
                    "comparison_result": 8,
                    "memcmp_result": 4,
                    "result": 4,
                    "temp_result": 1,
                    "tmp_var2": 1
                },
                "in_R10": {
                    "counter": 7,
                    "counter_u32": 1,
                    "entry_index": 1,
                    "i": 3,
                    "index": 1,
                    "iteration_count": 1,
                    "loop_counter": 6,
                    "loop_counter2": 1,
                    "loop_index": 1,
                    "loop_var": 1,
                    "note_index": 2,
                    "parameter_x": 1,
                    "value2": 1
                },
                "in_R11": {
                    "build_notes_size": 1,
                    "comparison_flag": 1,
                    "comparison_value": 1,
                    "condition": 1,
                    "condition1": 1,
                    "current_note_size": 1,
                    "current_note_type": 3,
                    "loop_var2": 1,
                    "note_type": 1,
                    "param4": 1,
                    "parameter_y": 1,
                    "s_var": 1,
                    "s_var2": 1,
                    "temp_array_size": 1,
                    "value1": 1,
                    "var3": 1
                },
                "in_R13": {
                    "start_index": 1,
                    "start_pointer": 1
                },
                "in_R14": {
                    "current_index": 1
                },
                "in_R15": {
                    "end_index": 1,
                    "max_note_size_temp": 1
                },
                "in_RBP": {
                    "prev_note": 1
                },
                "in_RBX": {
                    "min_range": 1,
                    "original_element_size": 1,
                    "unaff_rbx": 2
                },
                "in_RCX": {
                    "array_end": 2,
                    "array_end_pointer": 1,
                    "array_size": 2,
                    "build_notes_array": 1,
                    "build_notes_end": 1,
                    "data_array": 1,
                    "elements_end": 1,
                    "end_ptr": 1,
                    "input_array": 1,
                    "max_size": 1,
                    "note_array": 2,
                    "note_array_end": 2,
                    "notes_start": 1,
                    "num_of_entries": 1,
                    "size_array": 2,
                    "start_pointer": 1,
                    "total_elements": 1
                },
                "lVar7": {
                    "difference": 1,
                    "length": 1,
                    "loop_counter": 10,
                    "loop_counter_2": 1,
                    "loop_index": 2,
                    "loop_var": 3,
                    "loop_variable": 2,
                    "remaining_bytes": 1,
                    "temp_var4": 1,
                    "tmp_var5": 1,
                    "var4": 1
                },
                "malloc": {
                    "malloc_function": 1
                },
                "memcmp": {
                    "memcmp_function": 1
                },
                "param_1": {
                    "input_array": 1
                },
                "param_10": {
                    "array_length": 1,
                    "buffer_size": 1,
                    "extracted_notes_size": 1,
                    "num_notes": 1,
                    "output_parameter": 1,
                    "output_size": 1,
                    "param10": 2,
                    "param3": 4,
                    "param_10": 6,
                    "param_10_value": 1,
                    "param_c": 1,
                    "result": 4,
                    "result_size": 4,
                    "target_file_size": 1,
                    "target_size": 1
                },
                "param_11": {
                    "array": 3,
                    "array_to_sort": 2,
                    "data_array": 1,
                    "element_array": 1,
                    "element_buffer": 1,
                    "input_array": 3,
                    "input_data": 2,
                    "note_array": 1,
                    "notes": 1,
                    "notes_array": 2,
                    "param11": 1,
                    "param_11": 1,
                    "param_11_array": 1,
                    "param_array": 2,
                    "param_array_ptr": 1,
                    "param_d": 1,
                    "param_entries": 1,
                    "sorted_build_notes": 1,
                    "sorted_build_notes_array": 1,
                    "sorted_notes": 2
                },
                "param_12": {
                    "dest_buffer": 1,
                    "output": 2,
                    "output_array": 2,
                    "output_array_pointer": 1,
                    "output_buffer": 7,
                    "output_data": 2,
                    "param12": 1,
                    "param_12": 2,
                    "param_12_ptr": 1,
                    "param_e": 1,
                    "param_output_buffer": 1,
                    "param_output_ptr": 1,
                    "param_ptr": 1,
                    "result": 1,
                    "result_array": 1,
                    "result_buffer": 1,
                    "result_ptr": 2,
                    "target_buffer": 1
                },
                "param_13": {
                    "additional_data_pointer": 1,
                    "context": 4,
                    "context_ptr": 1,
                    "context_variable": 1,
                    "function_data": 1,
                    "input_value_2": 1,
                    "note_processing": 1,
                    "param1": 1,
                    "param13": 2,
                    "param4": 1,
                    "param_13": 5,
                    "param_13_value": 1,
                    "param_f": 1,
                    "param_ptr": 1,
                    "param_struct": 3,
                    "param_value1": 1,
                    "parameter_1": 1,
                    "some_param": 1
                },
                "param_14": {
                    "array_length": 3,
                    "array_size": 4,
                    "data_array_size": 1,
                    "element_count": 1,
                    "input_size": 1,
                    "note_array_size": 1,
                    "note_count": 1,
                    "num_build_notes": 2,
                    "num_elements": 3,
                    "num_notes": 2,
                    "param14": 1,
                    "param_14": 3,
                    "param_14_value": 1,
                    "param_array_size": 2,
                    "param_g": 1,
                    "param_num_entries": 1,
                    "param_size": 1
                },
                "param_2": {
                    "output_array": 1
                },
                "param_7": {
                    "current_note_size": 1,
                    "first_param": 1,
                    "input_parameter_1": 1,
                    "input_size": 1,
                    "param1": 4,
                    "param7": 4,
                    "param_1": 1,
                    "param_7": 11,
                    "param_7_value": 1,
                    "param_a": 1,
                    "prev_max_size": 1,
                    "required_value1": 1,
                    "target_page": 1
                },
                "param_9": {
                    "current_note_version": 1,
                    "input_parameter_2": 1,
                    "param2": 4,
                    "param9": 3,
                    "param_2": 1,
                    "param_9": 12,
                    "param_9_value": 1,
                    "param_b": 1,
                    "required_value2": 1,
                    "second_param": 1,
                    "target_note_type": 1,
                    "target_offset": 1,
                    "target_value": 1
                },
                "pcVar2": {
                    "code_function": 1,
                    "compare_function": 1,
                    "comparison_function": 1,
                    "func_pointer": 1,
                    "function_pointer": 5,
                    "function_ptr": 4,
                    "note_processor_func": 1,
                    "note_sorting_callback": 1,
                    "some_func": 1,
                    "sort_function": 1
                },
                "psVar13": {
                    "current_build_note": 1,
                    "current_element_ptr": 1,
                    "current_item_pointer": 1,
                    "current_note_data": 1,
                    "current_note_pointer_2": 1,
                    "current_note_ptr": 1,
                    "iteration_pointer": 1,
                    "note": 1,
                    "note_ptr": 2,
                    "pointer_array": 2,
                    "ptr_array": 1,
                    "some_data": 1,
                    "sorted_build_notes_ptr": 1,
                    "struct_pointer": 1,
                    "sub_array": 1,
                    "sub_function_pointer": 1,
                    "temp_array3": 1,
                    "temp_pointer_4": 1,
                    "temp_ptr4": 1
                },
                "puVar11": {
                    "arg1_ptr": 1,
                    "buffer_pointer": 1,
                    "char_pointer1": 1,
                    "dest_ptr_2": 1,
                    "destination2": 1,
                    "destination_ptr": 1,
                    "destination_slice": 1,
                    "dst_ptr2": 1,
                    "pointer_2": 1,
                    "pointer_var2": 1,
                    "ptr2": 2,
                    "ptr5": 1,
                    "ptr_src": 1,
                    "pu_var11": 1,
                    "some_ptr2": 1,
                    "temp_buffer2": 1,
                    "temp_dest_pointer": 1,
                    "temp_pointer_2": 3,
                    "temp_ptr": 1,
                    "temp_ptr2": 1
                },
                "puVar12": {
                    "buffer_ptr": 1,
                    "char_pointer2": 1,
                    "current_destination_ptr": 1,
                    "current_result_ptr": 1,
                    "current_slice": 1,
                    "data_pointer": 1,
                    "destination3": 1,
                    "dst_ptr3": 1,
                    "next_dest_pointer": 1,
                    "pointer_3": 1,
                    "pointer_var3": 1,
                    "ptr3": 1,
                    "ptr6": 1,
                    "ptr_dest": 1,
                    "pu_var12": 1,
                    "some_ptr3": 1,
                    "src_ptr": 1,
                    "temp_pointer_3": 3,
                    "temp_ptr2": 1,
                    "temp_ptr3": 1
                },
                "puVar9": {
                    "arg2_ptr": 1,
                    "dest_pointer": 2,
                    "dest_ptr": 2,
                    "destination1": 1,
                    "dst_ptr": 1,
                    "next_output_buffer": 1,
                    "note_buffer_address": 1,
                    "pointer_1": 1,
                    "pointer_var1": 1,
                    "ptr1": 2,
                    "ptr4": 1,
                    "ptr_temp": 1,
                    "pu_var9": 1,
                    "size_ptr": 1,
                    "some_ptr": 1,
                    "source_ptr": 1,
                    "temp_buffer": 1,
                    "temp_pointer_1": 3,
                    "temp_ptr1": 1
                },
                "qsort": {
                    "qsort_function": 1
                },
                "sVar1": {
                    "array_length_bit_two": 1,
                    "array_size": 1,
                    "array_value": 2,
                    "build_note_size": 1,
                    "comp_result": 1,
                    "compare_size": 1,
                    "comparison_result": 1,
                    "current_note_length": 1,
                    "current_note_type": 1,
                    "current_note_type_data": 1,
                    "element_size": 3,
                    "item_length": 1,
                    "note_size": 4,
                    "s_var1": 1,
                    "size": 1,
                    "size_var": 1,
                    "sub_array_size": 1,
                    "temp_size": 1
                },
                "sort_gnu_build_notes": {
                    "sort_gnu_build_notes_function": 1
                },
                "uVar4": {
                    "count": 1,
                    "counter": 6,
                    "counter1": 1,
                    "counter2": 1,
                    "counter_plus_1": 1,
                    "counter_u_var": 1,
                    "increment": 1,
                    "incremented_counter": 1,
                    "loop_counter_copy": 1,
                    "loop_index": 1,
                    "loop_index_int": 1,
                    "next_i": 1,
                    "note_count": 1,
                    "note_index": 1,
                    "temp_counter": 1,
                    "temp_var1": 1,
                    "tmp_var1": 1,
                    "u_var4": 1
                },
                "uVar5": {
                    "current_index": 1,
                    "max_diff": 1,
                    "min_mapped_size": 1,
                    "min_note_size_temp": 1,
                    "min_offset": 1,
                    "min_size": 1,
                    "min_value": 1,
                    "new_start_vaddr": 1,
                    "param3": 1,
                    "prev_note_range_end": 1,
                    "temp_max_size": 1,
                    "temp_value1": 2,
                    "temp_value3": 1,
                    "temp_value_1": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_variable_1": 2,
                    "tmp_var3": 1,
                    "u_var5": 1,
                    "updated_param_7": 1,
                    "var1": 2
                },
                "uVar6": {
                    "current_end_index": 1,
                    "current_note_range_start": 1,
                    "max_mapped_size": 1,
                    "max_offset": 1,
                    "max_size": 1,
                    "max_value": 1,
                    "min_diff": 1,
                    "new_end_vaddr": 1,
                    "note_length": 1,
                    "param2": 1,
                    "temp_min_size": 1,
                    "temp_value2": 2,
                    "temp_value4": 1,
                    "temp_value_2": 1,
                    "temp_var2": 2,
                    "temp_var3": 1,
                    "temp_variable_2": 2,
                    "tmp_var4": 1,
                    "u_var6": 1,
                    "updated_param_9": 1,
                    "var2": 2
                },
                "uVar8": {
                    "compare_result": 1,
                    "counter_u64": 1,
                    "current_index": 1,
                    "current_size": 1,
                    "current_value": 1,
                    "note_address": 1,
                    "note_array_ptr": 1,
                    "note_size": 1,
                    "temp": 1,
                    "temp_value": 2,
                    "temp_value3": 1,
                    "temp_value_3": 1,
                    "temp_var3": 2,
                    "temp_var5": 1,
                    "temp_variable_3": 2,
                    "tmp_var6": 1,
                    "u_var8": 1,
                    "updated_result": 1,
                    "var3": 2
                },
                "unaff_R11": {
                    "note_type": 1
                },
                "unaff_R13": {
                    "array_end": 1,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "array_start": 2,
                    "array_start_pointer": 1,
                    "beginning_of_array_pointer": 1,
                    "build_notes_end": 1,
                    "current_element_pointer": 1,
                    "end_pointer": 1,
                    "note_end": 2,
                    "note_ptr": 1,
                    "notes_end": 1,
                    "notes_start": 2,
                    "original_unaff_r13": 1,
                    "ptr2": 1,
                    "ptr_entries_end": 1,
                    "sorted_build_notes_end": 1,
                    "start_array": 1,
                    "start_element": 1,
                    "temp_array1": 1,
                    "temp_ptr2": 1,
                    "unsorted_build_notes": 1
                },
                "unaff_R14": {
                    "array_pointer": 1,
                    "array_ptr": 2,
                    "current_array": 3,
                    "current_build_note": 1,
                    "current_element": 3,
                    "current_item": 1,
                    "current_note": 3,
                    "current_note_pointer": 1,
                    "current_note_ptr": 1,
                    "current_pointer": 1,
                    "current_position": 1,
                    "current_ptr": 2,
                    "note_array_pointer": 1,
                    "note_ptr": 1,
                    "notes": 1,
                    "previous_pointer": 1,
                    "ptr3": 1,
                    "ptr_entry": 1,
                    "temp_array2": 2
                },
                "unaff_R15": {
                    "current_note_range_end": 1,
                    "end_pointer": 1,
                    "end_ptr2": 1,
                    "file_size": 1,
                    "first_note_size": 1,
                    "max_address": 1,
                    "max_note_size": 1,
                    "max_size": 1,
                    "max_value": 2,
                    "max_value2": 1,
                    "maximum_element": 1,
                    "maximum_size": 1,
                    "maximum_value": 1,
                    "min_mapped_address": 1,
                    "note_end_size": 1,
                    "original_unaff_r15": 1,
                    "param1": 1,
                    "prev_min_size": 1,
                    "size2": 1,
                    "size_variable2": 1,
                    "start_vaddr": 1,
                    "target_start_offset": 1,
                    "temp_value1": 1,
                    "unaff_r15": 3,
                    "unaff_value2": 1,
                    "var1": 1
                },
                "unaff_RBP": {
                    "array_pointer": 1,
                    "array_start": 1,
                    "base_array": 1,
                    "build_notes": 2,
                    "comparison_array_ptr": 1,
                    "current_array": 1,
                    "current_array_element": 1,
                    "current_build_note": 1,
                    "current_note": 2,
                    "current_note_pointer": 1,
                    "current_pointer": 1,
                    "matched_values": 1,
                    "note_ptr": 1,
                    "note_start": 1,
                    "notes_ptr": 1,
                    "original_unaff_rbp": 1,
                    "prev_note": 1,
                    "prev_value": 1,
                    "previous_element": 1,
                    "previous_pointer": 1,
                    "ptr1": 1,
                    "ptr_entries": 1,
                    "sorted_elements": 1,
                    "source_array": 1,
                    "start_ptr": 1,
                    "temp_array": 1,
                    "temp_note_ptr": 1,
                    "temp_pointer": 1
                },
                "unaff_RBX": {
                    "array_length": 1,
                    "current_note_size": 1,
                    "end_vaddr": 1,
                    "filesize_copy": 1,
                    "max_note_size": 1,
                    "max_range": 1,
                    "max_size": 1,
                    "min_address": 1,
                    "min_note_size": 1,
                    "min_size": 1,
                    "min_value": 3,
                    "min_value2": 1,
                    "minimum_element": 1,
                    "minimum_size": 1,
                    "minimum_value": 1,
                    "original_unaff_rbx": 1,
                    "size1": 1,
                    "size_variable1": 1,
                    "target_last_offset": 1,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "unaff_rbx": 2,
                    "unaff_value1": 1,
                    "var2": 1
                },
                "unaff_RCX": {
                    "notes_end": 1
                },
                "unaff_RDI": {
                    "sorted_elements_end": 1
                },
                "unaff_RSI": {
                    "compare_function": 1
                },
                "xmalloc": {
                    "xmalloc_function": 1
                }
            },
            "called": [
                "FUN_00116852",
                "FUN_001048f0",
                "FUN_00104140",
                "FUN_00104420",
                "FUN_0011a250",
                "FUN_00104390"
            ],
            "calling": [
                "FUN_00116852"
            ],
            "code": "\nulong analyze_build_notes_00116852(void)\n\n{\n  size_t note_size;\n  code *function_pointer;\n  int comparison_result;\n  uint counter;\n  undefined *temp_ptr;\n  size_t *note_array_end;\n  ulong var1;\n  ulong temp_variable_2;\n  long loop_counter;\n  ulong temp_var3;\n  size_t min_value;\n  size_t *build_notes;\n  undefined *temp_pointer_1;\n  char char_value;\n  undefined *temp_pointer_2;\n  ulong counter;\n  undefined *temp_pointer_3;\n  size_t current_note_type;\n  size_t *array_start;\n  size_t *current_element;\n  size_t unaff_r15;\n  size_t *pointer_array;\n  byte byte_value;\n  size_t param_7;\n  size_t param_9;\n  ulong input_array0;\n  size_t *input_array;\n  undefined *output_buffer;\n  long input_array3;\n  size_t array_size;\n  \n  byte_value = 0;\ncode_r0x00116852:\n  counter = (int)counter + 1;\n  if (0x10 < (int)counter) goto LAB_001167f5;\nLAB_00116863:\n  current_element = current_element + -9;\n  do {\n    if (array_start <= current_element) {\n      note_size = current_element[2];\n      if (note_size == 0) goto LAB_00116863;\n      temp_var3 = (ulong)counter;\n      if ((*current_element == *build_notes) &&\n         (comparison_result = memcmp_function((void *)current_element[3],(void *)build_notes[3],*build_notes), comparison_result == 0)) {\n        temp_variable_2 = current_element[7];\n        var1 = current_element[8];\n        counter = temp_var3 & 0xffffffff;\n        if (unaff_r15 == temp_variable_2) {\n          if (min_value != var1) goto LAB_001167a6;\n          build_notes[2] = 0;\n        }\n        else {\n          if (unaff_r15 < temp_variable_2) {\n            if (var1 < unaff_r15) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < var1) || (unaff_r15 <= (var1 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (min_value < unaff_r15) {\n              if ((0xfffffffffffffff0 < min_value) ||\n                 (temp_variable_2 <= (min_value + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (min_value == var1) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (min_value <= var1) {\n              build_notes[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (var1 < unaff_r15) goto LAB_0010852c;\n          }\n          if ((current_note_type == 0x101) != (note_size == 0x101)) goto code_r0x00116852;\n          if (var1 <= min_value) {\n            var1 = min_value;\n          }\n          if (temp_variable_2 < unaff_r15) {\n            unaff_r15 = temp_variable_2;\n          }\n          current_element[8] = var1;\n          current_element[7] = unaff_r15;\n          build_notes[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        current_element = build_notes;\n        build_notes = current_element + 9;\n        if (note_array_end <= build_notes) {\n          qsort_function(input_array,array_size,0x48,sort_gnu_build_notes_function);\n          temp_ptr = (undefined *)xmalloc_function(input_array0 * 2);\n          param_7 = 0;\n          temp_pointer_3 = temp_ptr;\n          for (pointer_array = input_array; pointer_array < note_array_end; pointer_array = pointer_array + 9) {\n            if (pointer_array[2] != 0) {\n              temp_pointer_2 = temp_pointer_3 + 4;\n              temp_pointer_1 = temp_pointer_3 + 0xc;\n              function_pointer = *(code **)(*(long *)(input_array3 + 8) + 0x50);\n              if ((pointer_array[7] == param_9) && (pointer_array[8] == param_7)) {\n                (*function_pointer)(*pointer_array,temp_pointer_3);\n                (**(code **)(*(long *)(input_array3 + 8) + 0x50))(0,temp_pointer_2);\n                (**(code **)(*(long *)(input_array3 + 8) + 0x50))(pointer_array[2],temp_pointer_3 + 8);\n                temp_variable_2 = pointer_array[6];\n                temp_var3 = *pointer_array;\n                temp_pointer_3 = (undefined *)pointer_array[3];\n                temp_pointer_2 = temp_pointer_1;\n                for (var1 = temp_var3; var1 != 0; var1 = var1 - 1) {\n                  *temp_pointer_2 = *temp_pointer_3;\n                  temp_pointer_3 = temp_pointer_3 + (ulong)byte_value * -2 + 1;\n                  temp_pointer_2 = temp_pointer_2 + (ulong)byte_value * -2 + 1;\n                }\n                if (temp_var3 < temp_variable_2) {\n                  for (loop_counter = temp_variable_2 - temp_var3; loop_counter != 0; loop_counter = loop_counter + -1) {\n                    *temp_pointer_2 = 0;\n                    temp_pointer_2 = temp_pointer_2 + (ulong)byte_value * -2 + 1;\n                  }\n                }\n                temp_pointer_3 = temp_pointer_1 + temp_variable_2;\n              }\n              else {\n                (*function_pointer)();\n                if (*(int *)(*(long *)(input_array3 + 8) + 8) == 5) {\n                  char_value = (*(char *)(*(long *)(input_array3 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  char_value = '\\b';\n                }\n                (**(code **)(*(long *)(input_array3 + 8) + 0x50))(char_value,temp_pointer_2);\n                (**(code **)(*(long *)(input_array3 + 8) + 0x50))(pointer_array[2],temp_pointer_3 + 8);\n                temp_var3 = *pointer_array;\n                temp_pointer_3 = (undefined *)pointer_array[3];\n                temp_pointer_2 = temp_pointer_1;\n                for (temp_variable_2 = temp_var3; temp_variable_2 != 0; temp_variable_2 = temp_variable_2 - 1) {\n                  *temp_pointer_2 = *temp_pointer_3;\n                  temp_pointer_3 = temp_pointer_3 + (ulong)byte_value * -2 + 1;\n                  temp_pointer_2 = temp_pointer_2 + (ulong)byte_value * -2 + 1;\n                }\n                temp_variable_2 = pointer_array[6];\n                if (temp_var3 < temp_variable_2) {\n                  for (loop_counter = temp_variable_2 - temp_var3; loop_counter != 0; loop_counter = loop_counter + -1) {\n                    *temp_pointer_2 = 0;\n                    temp_pointer_2 = temp_pointer_2 + (ulong)byte_value * -2 + 1;\n                  }\n                }\n                loop_counter = *(long *)(input_array3 + 8);\n                temp_pointer_1 = temp_pointer_1 + temp_variable_2;\n                temp_pointer_3 = temp_pointer_1 + 8;\n                if ((*(int *)(loop_counter + 8) == 5) &&\n                   (*(char *)(*(long *)(input_array3 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loop_counter + 0x38))(pointer_array[7],temp_pointer_1);\n                  (**(code **)(*(long *)(input_array3 + 8) + 0x38))(pointer_array[8],temp_pointer_3);\n                  temp_pointer_3 = temp_pointer_1 + 0x10;\n                }\n                else {\n                  (**(code **)(loop_counter + 0x50))(pointer_array[7],temp_pointer_1);\n                  (**(code **)(*(long *)(input_array3 + 8) + 0x50))(pointer_array[8],temp_pointer_1 + 4);\n                }\n                param_9 = pointer_array[7];\n                param_7 = pointer_array[8];\n              }\n            }\n          }\n          temp_variable_2 = (long)temp_pointer_3 - (long)temp_ptr;\n          temp_var3 = temp_variable_2;\n          temp_pointer_3 = temp_ptr;\n          if (temp_variable_2 < input_array0) {\n            for (; input_array0 = temp_variable_2, temp_var3 != 0; temp_var3 = temp_var3 - 1) {\n              *output_buffer = *temp_pointer_3;\n              temp_pointer_3 = temp_pointer_3 + (ulong)byte_value * -2 + 1;\n              output_buffer = output_buffer + (ulong)byte_value * -2 + 1;\n            }\n          }\n          free_function(temp_ptr);\n          free_function(input_array);\n          return input_array0;\n        }\n        current_note_type = current_element[0xb];\n      } while (current_note_type == 0);\n      unaff_r15 = current_element[0x10];\n      min_value = current_element[0x11];\n      counter = 0;\n      if (unaff_r15 != min_value) break;\n      current_element[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "current_name": "analyze_build_notes_00116852",
            "entrypoint": "0x00116852",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116852": "analyze_build_notes_00116852",
                "__ptr": "temp_ptr",
                "bVar14": "byte_value",
                "cVar10": "char_value",
                "free": "free_function",
                "iVar3": "comparison_result",
                "in_R10": "counter",
                "in_R11": "current_note_type",
                "in_RCX": "note_array_end",
                "lVar7": "loop_counter",
                "malloc": "malloc_function",
                "memcmp": "memcmp_function",
                "param_1": "input_array",
                "param_11": "input_array",
                "param_12": "output_buffer",
                "param_14": "array_size",
                "pcVar2": "function_pointer",
                "psVar13": "pointer_array",
                "puVar11": "temp_pointer_2",
                "puVar12": "temp_pointer_3",
                "puVar9": "temp_pointer_1",
                "qsort": "qsort_function",
                "sVar1": "note_size",
                "sort_gnu_build_notes": "sort_gnu_build_notes_function",
                "uVar4": "counter",
                "uVar5": "var1",
                "uVar6": "temp_variable_2",
                "uVar8": "temp_var3",
                "unaff_R13": "array_start",
                "unaff_R14": "current_element",
                "unaff_R15": "unaff_r15",
                "unaff_RBP": "build_notes",
                "unaff_RBX": "min_value",
                "xmalloc": "xmalloc_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116aa0": {
            "additional_data": {
                "FUNC_00116b90": {
                    "process_parameter": 1,
                    "process_params": 1
                },
                "FUN_00116aa0": {
                    "execute_main_loop": 1,
                    "initialize_and_process": 1,
                    "process_entry": 1,
                    "start_main": 3,
                    "start_main_loop": 3,
                    "start_main_process": 2,
                    "start_process": 1
                },
                "__libc_start_main": {
                    "start_main": 1
                },
                "auStack_8": {
                    "additional_stack": 1,
                    "additional_stack_space": 1,
                    "aux_stack": 1,
                    "auxiliary_stack": 3,
                    "stack": 3,
                    "stack_8": 2,
                    "stack_buffer": 2,
                    "stack_frame": 1,
                    "stack_variable": 1,
                    "unused_array": 1,
                    "unused_stack": 1
                },
                "param_1": {
                    "arg1": 10,
                    "argc": 9,
                    "argument1": 1,
                    "entry_point": 1,
                    "entry_point_arg1": 1,
                    "param1": 2,
                    "param_1": 2,
                    "undefined_param1": 1,
                    "unused_arg_1": 1,
                    "unused_param": 2
                },
                "param_2": {
                    "arg2": 10,
                    "argument2": 1,
                    "arguments": 1,
                    "argv": 10,
                    "command_line_args": 1,
                    "entry_point_arg2": 1,
                    "param2": 2,
                    "param_2": 2,
                    "undefined_param2": 1,
                    "unused_arg_2": 1
                },
                "processEntry": {
                    "execute_main_function": 1,
                    "improved_process_entry": 1,
                    "initialize_entry": 1,
                    "run_main_function": 2,
                    "start_main_loop": 10,
                    "start_main_with_args": 1,
                    "start_main_wrapper": 2,
                    "start_program": 1
                }
            },
            "called": [
                "FUN_00116b90",
                "FUN_00128040"
            ],
            "calling": [],
            "code": "\nvoid start_main_loop_00116aa0 start_main_loop_00116aa0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stack [8];\n  \n  start_main(main,arg2,&stack0x00000008,0,0,arg1,stack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "start_main_loop_00116aa0",
            "entrypoint": "0x00116aa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116aa0": "start_main_loop_00116aa0",
                "__libc_start_main": "start_main",
                "auStack_8": "stack",
                "param_1": "arg1",
                "param_2": "arg2",
                "processEntry": "start_main_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116ad0": {
            "called": [
                "FUN_00128070"
            ],
            "calling": [
                "FUN_00116b40"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00116ad0",
            "entrypoint": "0x00116ad0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00116b00": {
            "called": [
                "FUN_00128468"
            ],
            "calling": [
                "FUN_00116b80"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00116b00",
            "entrypoint": "0x00116b00",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00116b40": {
            "additional_data": {
                "FUNC_00116ad0": {
                    "cleanup": 7,
                    "cleanup_application": 1,
                    "cleanup_resources": 8,
                    "deregister_tm_clones": 2,
                    "do_something": 1,
                    "execute_cleanup_logic": 1,
                    "execute_initialization": 1,
                    "perform_cleanup": 8,
                    "register_cleanup_tasks": 1,
                    "run_initialization_process": 1
                },
                "FUN_00116b40": {
                    "initialize": 8,
                    "initialize_and_finalize": 1,
                    "initialize_app": 1,
                    "initialize_application": 9,
                    "initialize_if_unset": 1,
                    "initialize_program": 11
                },
                "PTR_LOOP_00126468": {
                    "code_pointer": 1,
                    "loop_pointer": 1
                }
            },
            "called": [
                "FUN_00116ad0",
                "FUN_00104910"
            ],
            "calling": [],
            "code": "\nvoid initialize_program_00116b40(void)\n\n{\n  if (DAT_001275e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  deregister_tm_clones();\n  DAT_001275e0 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_program_00116b40",
            "entrypoint": "0x00116b40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116b40": "initialize_program_00116b40"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116b80": {
            "called": [
                "FUN_00116b00"
            ],
            "calling": [],
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "current_name": "FUN_00116b80",
            "entrypoint": "0x00116b80",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00116b90": {
            "called": [
                "FUN_00119970",
                "FUN_00113fe0",
                "FUN_00108898",
                "FUN_00104220",
                "FUN_00104280",
                "FUN_001044e0",
                "FUN_001041d0",
                "FUN_001040b0",
                "FUN_0011a390",
                "FUN_001046f0",
                "FUN_001043c0",
                "FUN_00104750",
                "FUN_001045d0",
                "FUN_00104240",
                "FUN_001041a0",
                "FUN_00114c20",
                "FUN_001284f8",
                "FUN_00104390",
                "FUN_00119ed0",
                "FUN_001048b0",
                "FUN_001044c0",
                "FUN_0011a480",
                "FUN_00119dd0",
                "FUN_00104890",
                "FUN_00104270",
                "FUN_00113fb0",
                "FUN_00108916",
                "FUN_00114cf0",
                "FUN_00113f50",
                "FUN_00104210",
                "FUN_001199d0",
                "FUN_00104660",
                "FUN_00114460",
                "FUN_001040d0",
                "FUN_00104720",
                "FUN_001046e0",
                "FUN_001054af",
                "FUN_001045c0",
                "FUN_00113f20",
                "FUN_001126c0",
                "FUN_00104760",
                "FUN_00104430",
                "FUN_00104610",
                "FUN_00108c86",
                "FUN_001044a0",
                "FUN_00114c80",
                "FUN_00104370",
                "FUN_00108a2a",
                "FUN_00119940",
                "FUN_00108800",
                "FUN_00114190",
                "FUN_00115970",
                "FUN_00104080",
                "FUN_00104510",
                "FUN_001042b0",
                "FUN_00104470",
                "FUN_00104790",
                "FUN_00114d60",
                "FUN_00104680",
                "FUN_001043d0",
                "FUN_001042d0",
                "FUN_00104640",
                "FUN_00104290",
                "FUN_001044f0",
                "FUN_00104710",
                "FUN_00104130",
                "FUN_001284f0",
                "FUN_00104100",
                "FUN_001048f0",
                "FUN_00104160",
                "FUN_001043b0",
                "FUN_00104150",
                "FUN_00108d9a",
                "FUN_001047a0",
                "FUN_00114690",
                "FUN_00104540",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00116aa0"
            ],
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00127600 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a48 = 0;\n  DAT_00127a44 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    fatal(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_00127600;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    fatal(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_001264c0;\n  if ((int)_DAT_001264c0 < 0) {\n    sVar15 = strlen(DAT_00127600);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_001264c0 = uVar10;\n  DAT_00127a18 = create_symbol_htab();\n  DAT_00127a10 = create_symbol_htab();\n  DAT_00127a28 = create_symbol_htab();\n  DAT_00127a08 = create_symbol_htab();\n  DAT_00127a00 = create_symbol_htab();\n  DAT_001279f8 = create_symbol_htab();\n  DAT_001279f0 = create_symbol_htab();\n  DAT_001278f0 = htab_create_alloc(0x10,htab_hash_redefnode,eq_string_redefnode);\n  DAT_001278e8 = create_symbol_htab();\n  puVar6 = PTR_DAT_001264e0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = xatexit_cleanup_lto_priv_0;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264e0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264e0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264e0;\n  iVar11 = *(int *)(PTR_DAT_001264e0 + 8);\n  *(int *)(PTR_DAT_001264e0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = delete_symbol_htabs;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_001264c0 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_00126500);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        strip_usage(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a20 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        handle_remove_section_option(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a48 = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a44 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279eb = 1;\n        break;\n      case 0x73:\n        DAT_00127a48 = 7;\n        break;\n      case 0x76:\n        DAT_001279e9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ea = 1;\n        break;\n      case 0x78:\n        DAT_00127a44 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a38 = 1;\n        break;\n      case 0xb3:\n        find_section_list(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127959 = 1;\n        break;\n      case 0xba:\n        DAT_00127a20 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a48 = 4;\n        break;\n      case 0xc6:\n        find_section_list(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a48 = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a48 < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a48 & 0x3f) & 1U) == 0)) {\n          DAT_00127a20 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a48 | DAT_00127a44) == 0) &&\n           (lVar30 = htab_elements(DAT_00127a18), lVar30 == 0)) {\n          DAT_00127a48 = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        strip_usage(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_00126500;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_00126900);\n  pFVar14 = _optarg;\n  uVar10 = DAT_00127908;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    display_info_isra_0();\n    return DAT_00127a40;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a3c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a3c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a3c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a48 | DAT_00127a44) == 0) {\n    DAT_00127a48 = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = startswith_lto_priv_0_lto_priv_0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = convert_efi_target(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = startswith_lto_priv_0_lto_priv_0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = convert_efi_target(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)template_in_dir(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  copy_file(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a40 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = smart_rename(__template,pcVar32,pcVar26,local_c8,DAT_001279eb);\n    DAT_00127a40 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_00127900;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-vma\",uVar3,\n                    (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-lma\",uVar3,\n                    (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127970);\n  free(DAT_00127968);\n  free(DAT_00127960);\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127938);\n  return DAT_00127a40;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a40;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a40;\n  }\n  lVar30 = get_file_size(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a40 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)template_in_dir(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        bfd_nonfatal_message(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a40 = 0;\n    copy_file(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a40 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = smart_rename(pFVar21,pFVar33,iVar13,local_c8,DAT_001279eb);\n      DAT_00127a40 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a48 = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        add_redefine_and_check\n                  (pFVar14,unaff_R13,\n                   (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      fatal(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    add_redefine_and_check\n              (pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_flags(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278f8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    copy_usage(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          fatal(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278f8;\n    DAT_001278f8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    copy_usage(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a20 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    handle_remove_section_option(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a48 = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a44 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a48 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a3c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a3c = (int)lVar30;\n      if (DAT_00127a3c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_section_list(_optarg,1,2);\n    DAT_00127a39 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279eb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279e9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ea = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a44 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279e0 = init_section_add(_optarg,DAT_001279e0,\"--add-section\");\n    section_add_load_file(DAT_001279e0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a30 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = xstrndup(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = xstrndup(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            non_fatal(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            fatal(uVar24,\n                  \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                 );\n          }\n          uVar24 = xstrndup(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279c8;\n        bVar39 = DAT_001279c8 == (undefined8 *)0x0;\n        DAT_001279c8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275c0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275c0 = puVar20;\n    PTR_DAT_001275c0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279c0 = DAT_001279c0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127930 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127930 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_001279b0 = parse_vma(_optarg,\"--change-addresses\");\n    DAT_001279b8 = _DAT_001279b0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_001279a8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,uVar12);\n    lVar17 = parse_vma((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_001279b8 = parse_vma(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_001279a4 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_001279a0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_001279a4 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279d0 = init_section_add(_optarg,DAT_001279d0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a48 = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_0012790c = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = parse_vma(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)parse_vma(_optarg,\"--gap-fill\");\n    DAT_00127999 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      non_fatal(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127998 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a00,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    add_specific_symbols(_optarg,DAT_00127a00,&DAT_00127948);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = parse_vma(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_00127910 = DAT_00127910 | 0x100;\n    DAT_00127914 = DAT_00127914 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    add_specific_symbols(_optarg,DAT_001279f8,&DAT_00127940);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a38 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_section_list(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    add_specific_symbols(_optarg,DAT_00127a28,&DAT_00127960);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127959 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    add_specific_symbols(_optarg,DAT_00127a08,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a20 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a48 = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127990 = parse_vma(_optarg,\"--pad-to\");\n    DAT_00127989 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_00127918 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127920 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127928 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_00127914 = DAT_00127914 | 0x100;\n    DAT_00127910 = DAT_00127910 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_00127914 = DAT_00127914 | 0x80;\n    DAT_00127910 = DAT_00127910 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    add_redefine_and_check(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      fatal(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_section_list(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_00127908;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_00127908 = (uint)uVar27;\n    if (((int)DAT_00127908 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_00127908) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      non_fatal(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = parse_vma(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_section_list(pcVar32,1,0x80);\n    uVar12 = parse_flags((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127980 = parse_vma(_optarg,\"--set-start\");\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = parse_vma(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a48 = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    add_specific_symbols(_optarg,DAT_00127a18,&DAT_00127970);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a48 = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a10,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    add_specific_symbols(_optarg,DAT_00127a10,&DAT_00127968);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        non_fatal(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      fatal(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279d8 = init_section_add(_optarg,DAT_001279d8,\"--update-section\");\n    section_add_load_file(DAT_001279d8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = parse_vma(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279e8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    add_specific_symbols(_optarg,DAT_001279f0,&DAT_00127938);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_00127910 = DAT_00127910 | 0x80;\n    DAT_00127914 = DAT_00127914 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  fatal(uVar24,pFVar14);\n}\n\n",
            "current_name": "FUNC_00116b90",
            "entrypoint": "0x00116b90",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00119940": {
            "additional_data": {
                "FUN_00119940": {
                    "check_and_fatal": 5,
                    "check_and_fatal_error": 7,
                    "check_and_fatal_if_bad_number": 3,
                    "check_and_handle_bad_number": 1,
                    "check_and_print_error": 3,
                    "check_and_report_error": 1,
                    "check_bad_number": 3,
                    "check_number": 1,
                    "handle_scan_vma": 1,
                    "parse_and_check_number": 1,
                    "parse_vma": 1,
                    "validate_and_fatal": 1,
                    "validate_and_output_message": 1,
                    "validate_and_print_error": 1,
                    "validate_and_report": 1
                },
                "local_20": {
                    "buffer": 2,
                    "result": 1,
                    "result_buffer": 1,
                    "scan_result": 12,
                    "scanned_address": 4,
                    "scanned_number": 1,
                    "scanned_result": 1,
                    "scanned_strings": 1,
                    "scanned_value": 2,
                    "scanned_vma": 1,
                    "vma_scan_result": 2,
                    "vma_string": 1
                },
                "param_1": {
                    "address": 6,
                    "input": 1,
                    "input_address": 4,
                    "input_num": 1,
                    "input_number": 3,
                    "input_param": 1,
                    "input_value": 2,
                    "memory_address": 1,
                    "number": 1,
                    "param_address": 1,
                    "vma": 2,
                    "vma_address": 7,
                    "vma_start": 1
                },
                "param_2": {
                    "additional_info": 1,
                    "bad_number": 1,
                    "error_message": 14,
                    "error_msg": 1,
                    "error_param": 1,
                    "error_text": 1,
                    "input_value": 1,
                    "message": 8,
                    "number": 1,
                    "param": 1,
                    "param_message": 1
                },
                "uVar1": {
                    "error_message": 7,
                    "error_msg": 2,
                    "error_string": 4,
                    "localized_error_message": 2,
                    "translated_error": 2,
                    "translated_error_message": 1,
                    "translated_message": 1,
                    "translated_msg": 1
                }
            },
            "called": [
                "FUN_00104920",
                "FUN_00104070"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid check_and_fatal_error_00119940(undefined8 vma_address,undefined8 error_message)\n\n{\n  undefined8 error_message;\n  char *scan_result [2];\n  \n  bfd_scan_vma(vma_address,scan_result,0);\n  if (*scan_result[0] == '\\0') {\n    return;\n  }\n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(error_message,error_message,vma_address);\n}\n\n",
            "current_name": "check_and_fatal_error_00119940",
            "entrypoint": "0x00119940",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119940": "check_and_fatal_error_00119940",
                "local_20": "scan_result",
                "param_1": "vma_address",
                "param_2": "error_message",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119970": {
            "additional_data": {
                "FUN_00119970": {
                    "print_binutils_info": 1,
                    "print_binutils_version": 1,
                    "print_gnu_info": 2,
                    "print_gnu_version_info": 1,
                    "print_license_info": 1,
                    "print_license_information": 1,
                    "print_program_info": 3,
                    "print_software_info": 1,
                    "print_version_info": 19,
                    "print_version_information": 1
                },
                "param_1": {
                    "binutils_version": 1,
                    "distribution": 2,
                    "package_name": 1,
                    "program_name": 2,
                    "tool_name": 1,
                    "version": 15,
                    "version_number": 2,
                    "version_string": 7
                },
                "pcVar1": {
                    "copy_right_message": 1,
                    "copy_right_str": 2,
                    "copy_right_string": 1,
                    "copy_right_text": 3,
                    "copyright_message": 7,
                    "copyright_msg": 1,
                    "copyright_notice": 1,
                    "copyright_string": 1,
                    "header_msg": 1,
                    "license_message": 2,
                    "license_string": 1,
                    "license_text": 1,
                    "message": 6,
                    "message1": 1,
                    "text": 2
                },
                "pcVar2": {
                    "message2": 1
                }
            },
            "called": [
                "FUN_001047f0",
                "FUN_001042a0",
                "FUN_00104240"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_gnu_version_info_00119970(undefined8 version)\n\n{\n  char *copyright_message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyright_message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyright_message);\n  copyright_message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyright_message);\n                    \n  exit(0);\n}\n\n",
            "current_name": "print_gnu_version_info_00119970",
            "entrypoint": "0x00119970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119970": "print_gnu_version_info_00119970",
                "param_1": "version",
                "pcVar1": "copyright_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001199d0": {
            "additional_data": {
                "DAT_001278e0": {
                    "temp_directory": 1,
                    "temporary_directory_path": 1,
                    "tmp_dir_path": 1
                },
                "FUN_001199d0": {
                    "display_bfd_header": 1,
                    "display_bfd_header_info": 2,
                    "display_bfd_header_information": 1,
                    "display_bfd_header_version": 1,
                    "display_bfd_headers": 1,
                    "display_bfd_tmp_file": 1,
                    "display_bfd_version": 1,
                    "display_bfd_versions": 1,
                    "display_target_architectures": 1,
                    "display_target_info": 1,
                    "display_target_information": 2,
                    "display_targets": 5,
                    "display_temp_file_and_architecture_info": 1,
                    "improve_and_display_architectures": 1,
                    "improved_display_targets": 1,
                    "print_available_binutils_features": 1,
                    "print_executable_info": 1,
                    "print_formatted_architectures": 1,
                    "print_supported_architectures": 1,
                    "print_supported_bfd_versions": 1,
                    "print_symbol_table": 1
                },
                "__errno_location": {
                    "get_errno_location": 2,
                    "get_error_location": 2
                },
                "__printf_chk": {
                    "safe_print": 1
                },
                "_stderr": {
                    "error_output": 1,
                    "error_stream": 1,
                    "standard_error": 1,
                    "stderr": 1
                },
                "_stdout": {
                    "standard_output": 1,
                    "standard_output_stream": 1,
                    "stdout": 1
                },
                "abort": {
                    "abort_function": 1,
                    "abort_process": 1,
                    "abort_program": 1,
                    "exit_program": 1,
                    "terminate_program": 1
                },
                "bfd_iterate_over_targets": {
                    "iterate_over_bfd_targets": 1,
                    "iterate_over_targets": 2,
                    "iterate_targets": 1
                },
                "bfd_printable_arch_mach": {
                    "get_printable_arch_mach": 1,
                    "get_printable_architecture": 1
                },
                "bfddo_arch_iterator": {
                    "iterate_over_arch": 1
                },
                "bfs_iterate_over_targets": {
                    "iterate_over_targets": 1
                },
                "close": {
                    "close_file": 4,
                    "close_file_descriptor": 1
                },
                "dcgettext": {
                    "get_binutils_version": 1,
                    "get_locale_string": 1,
                    "get_translated_string": 2
                },
                "do_display_target": {
                    "display_target": 4,
                    "display_target_iteration_callback": 1,
                    "print_target": 1
                },
                "fds_bits": {
                    "file_descriptor_bits": 1
                },
                "fprintf": {
                    "print_error": 1,
                    "print_error_message": 1,
                    "print_formatted": 1,
                    "print_formatted_error": 1,
                    "print_formatted_error_message": 1
                },
                "fputs": {
                    "fput_string": 1,
                    "print_string": 1,
                    "put_sring": 1
                },
                "free": {
                    "deallocate_memory": 1,
                    "free_memory": 3,
                    "release_memory": 1
                },
                "fwrite": {
                    "write_to_file": 1
                },
                "getc": {
                    "get_character": 1
                },
                "getenv": {
                    "get_env_variable": 1,
                    "get_environment_variable": 3
                },
                "iVar1": {
                    "column_width": 5,
                    "columns": 6,
                    "columns_count": 1,
                    "max_columns": 3,
                    "max_width": 1,
                    "num_columns": 3,
                    "target_info_length": 1,
                    "width": 1
                },
                "iVar2": {
                    "arch_index": 4,
                    "arch_mach_counter": 1,
                    "architecture_index": 1,
                    "count": 1,
                    "current_arch": 1,
                    "file_descriptor": 5,
                    "i": 1,
                    "loop_variable1": 1,
                    "target_index": 8
                },
                "iVar3": {
                    "arch_compare_result": 1,
                    "arch_index": 1,
                    "arch_mach_comparison": 1,
                    "arch_mismatch": 1,
                    "comp_result": 1,
                    "compare_result": 4,
                    "comparison_result": 6,
                    "result": 1,
                    "str_comparison": 1,
                    "strcmp_result": 2,
                    "string_comparison_result": 1
                },
                "iVar9": {
                    "arch": 1,
                    "arch_index": 3,
                    "arch_index2": 1,
                    "arch_mach": 1,
                    "arch_mach_index": 2,
                    "arch_mach_iter": 1,
                    "arch_mach_value": 1,
                    "arch_string_index": 1,
                    "index": 2,
                    "inner_loop_index": 1,
                    "iteration_index": 1,
                    "iterator": 3,
                    "loop_index": 1,
                    "loop_variable": 1,
                    "loop_variable2": 1,
                    "target": 1,
                    "target_index": 3,
                    "target_iterator": 1,
                    "temp_counter": 1
                },
                "lVar10": {
                    "arch_loop": 1,
                    "current_arch_mach": 1,
                    "current_length": 1,
                    "dir_str_length": 1,
                    "file_size": 1,
                    "header_file_version_length_long": 1,
                    "header_string_len": 1,
                    "index": 3,
                    "index1": 1,
                    "iterator_var1": 1,
                    "length": 2,
                    "length1": 1,
                    "length_1": 1,
                    "length_variable": 1,
                    "loop_counter": 3,
                    "loop_counter1": 1,
                    "loop_index1": 1,
                    "outer_loop_index": 1,
                    "temp_dir_length": 5,
                    "temp_dir_size": 1,
                    "temp_file_path_length": 1,
                    "temp_index": 1
                },
                "lVar11": {
                    "arch_index": 3,
                    "arch_mach_counter_copy": 1,
                    "arch_mach_index": 1,
                    "current_arch_target_index": 1,
                    "file_loop": 1,
                    "i": 1,
                    "index2": 1,
                    "inner_counter": 1,
                    "iterator2": 1,
                    "iterator_long": 1,
                    "iterator_var2": 1,
                    "length2": 1,
                    "length_2": 1,
                    "line_index": 1,
                    "loop_counter": 1,
                    "loop_counter2": 1,
                    "loop_index2": 1,
                    "loop_start": 1,
                    "loop_variable2": 1,
                    "start": 1,
                    "start_index": 3,
                    "starting_index": 1,
                    "temp_dir_index": 2,
                    "temp_file_index": 1,
                    "temp_index": 2
                },
                "length": {
                    "string_length": 1
                },
                "local_70": {
                    "arch_index": 2,
                    "arch_index_counter": 1,
                    "arch_iterator": 1,
                    "arch_mach_index": 1,
                    "arch_mach_list_length": 1,
                    "architecture_index": 2,
                    "break_flag": 1,
                    "counter": 3,
                    "file_creation_result": 1,
                    "file_descriptor": 1,
                    "file_index": 1,
                    "index": 2,
                    "loop_counter": 1,
                    "loop_index": 1,
                    "loop_variable4": 1,
                    "negative_one": 1,
                    "outer_counter": 1,
                    "outer_loop_limit": 1,
                    "target_count": 1,
                    "target_index": 1,
                    "temp_file_descriptor": 2,
                    "temp_file_suffix": 1,
                    "temp_index": 1,
                    "temp_var": 1
                },
                "mkstemps": {
                    "create_temp_file": 2,
                    "create_temporary_file": 2
                },
                "pcVar12": {
                    "arch_mach_ptr": 1
                },
                "pcVar4": {
                    "arch_str": 1,
                    "format_string": 1,
                    "header": 2,
                    "header_file": 2,
                    "header_file_version": 3,
                    "header_format": 4,
                    "header_format_string": 1,
                    "header_message": 1,
                    "header_string": 4,
                    "header_version": 4,
                    "header_version_string": 1,
                    "message": 6,
                    "string": 1
                },
                "pcVar6": {
                    "directory_path": 1,
                    "error_string": 1,
                    "temp_dir": 10,
                    "temp_dir_path": 1,
                    "temp_directory": 1,
                    "temp_file": 1,
                    "temp_file_path": 7,
                    "temp_filename": 1,
                    "temp_path": 2,
                    "temp_string": 1,
                    "temporary_dir": 2,
                    "temporary_directory": 3
                },
                "piVar78": {
                    "error_num_ptr": 1
                },
                "piVar8": {
                    "err_code": 1,
                    "errno_loc": 2,
                    "errno_location": 2,
                    "errno_pointer": 1,
                    "errno_ptr": 1,
                    "errno_value": 1,
                    "error": 4,
                    "error_code": 8,
                    "error_location": 3,
                    "error_num": 1,
                    "error_num_ptr": 2,
                    "error_number": 4,
                    "error_number_ptr": 1
                },
                "ppcVar12": {
                    "arch_and_mach_array": 1,
                    "arch_and_machine": 1,
                    "arch_mach_array": 4,
                    "arch_mach_array_ptr": 1,
                    "arch_mach_iter": 1,
                    "arch_mach_list": 4,
                    "arch_mach_pointer": 2,
                    "arch_mach_ptr": 2,
                    "arch_machine_array": 1,
                    "arch_strings": 1,
                    "architecture_list": 2,
                    "architectures": 2,
                    "archs": 1,
                    "current_arch": 1,
                    "ptr_to_file_array": 1,
                    "string_array": 1,
                    "target": 1,
                    "target_archs": 1,
                    "target_array": 1,
                    "targets": 1
                },
                "printf": {
                    "print": 1,
                    "print_formatted_string": 2,
                    "print_message": 1
                },
                "putc": {
                    "print_character": 1
                },
                "putchar": {
                    "put_char": 1,
                    "put_character": 2
                },
                "puts": {
                    "put_string": 1
                },
                "sVar5": {
                    "header_file_length": 1,
                    "header_file_version_length": 1,
                    "header_format_length": 1,
                    "header_len": 1,
                    "header_length": 6,
                    "header_string_length": 1,
                    "header_string_size": 1,
                    "header_version_length": 2,
                    "header_version_string_length": 1,
                    "length": 3,
                    "message_length": 1,
                    "str_len": 1,
                    "str_length": 1,
                    "string_length": 7,
                    "string_size": 1,
                    "temp_dir_length": 1,
                    "version_length": 1
                },
                "sVar6": {
                    "temp_directory": 1
                },
                "sVar7": {
                    "temp_env1": 1
                },
                "sVar8": {
                    "temp_env2": 1
                },
                "sVar9": {
                    "temp_env3": 1
                },
                "stderr": {
                    "standard_error": 1
                },
                "stdout": {
                    "standard_output": 1
                },
                "strcmp": {
                    "compare_strings": 3
                },
                "strcpy": {
                    "copy_string": 4
                },
                "strerror": {
                    "get_error_message": 1,
                    "get_error_string": 3
                },
                "strlen": {
                    "get_string_length": 2,
                    "string_length": 1
                },
                "strtol": {
                    "convert_string_to_long": 1
                },
                "try_dir_lto_priv_0": {
                    "try_dir_lto_priv": 1,
                    "try_directory": 1,
                    "try_directory_lto_private": 1,
                    "try_directory_path": 1
                },
                "uVar13": {
                    "max_arch_length": 6,
                    "max_arch_mach": 1,
                    "max_arch_mach_len": 1,
                    "max_arch_mach_length": 6,
                    "max_arch_mach_string_length": 1,
                    "max_arch_machine_length": 1,
                    "max_arch_name_length": 1,
                    "max_arch_size": 1,
                    "max_len": 1,
                    "max_length": 7,
                    "max_string_length": 3,
                    "maximum_architecture_length": 1,
                    "temp_index": 1
                },
                "uVar14": {
                    "arch_length": 1,
                    "arch_mach_len": 1,
                    "arch_mach_length": 4,
                    "arch_mach_string_length": 2,
                    "arch_size": 1,
                    "arch_string_length": 1,
                    "architecture_iteration": 1,
                    "iteration_limit": 1,
                    "length": 3,
                    "length_iterator": 1,
                    "loop_counter": 2,
                    "loop_var": 1,
                    "loop_variable3": 1,
                    "s_var": 1,
                    "str_length": 1,
                    "string_length": 2,
                    "target_length": 3,
                    "target_name_length": 1,
                    "temp_length": 3
                },
                "uVar7": {
                    "arch_mach": 1,
                    "arch_machine": 1,
                    "arch_str_and_mach": 1,
                    "result": 21,
                    "temp_dir_result": 3,
                    "temp_directory_result": 1,
                    "temp_result": 2,
                    "unknown_var": 1
                },
                "unlink": {
                    "delete_file": 4,
                    "remove_file": 1
                },
                "xmalloc": {
                    "allocate_memory": 3
                }
            },
            "called": [
                "FUN_001040a0",
                "FUN_00104270",
                "FUN_00104890",
                "FUN_00104030",
                "FUN_001040c0",
                "FUN_001042a0",
                "FUN_00104620",
                "FUN_001040b0",
                "FUN_00104943",
                "FUN_00104040",
                "FUN_0011283f",
                "FUN_00104100",
                "FUN_001043c0",
                "FUN_00119f70",
                "FUN_001048f0",
                "FUN_001045a0",
                "FUN_00104240",
                "FUN_00104390",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid improved_display_targets_001199d0(void)\n\n{\n  int columns;\n  int target_index;\n  int comparison_result;\n  char *message;\n  size_t string_length;\n  char *temp_dir;\n  undefined8 result;\n  int *error_code;\n  int target_index;\n  long temp_dir_length;\n  long arch_index;\n  char **arch_mach_array;\n  uint max_length;\n  ulong arch_mach_length;\n  int counter;\n  \n  message = (char *)get_translated_string(0,\"BFD header file version %s\\n\",5);\n  print_formatted_string(message,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278e0 == (char *)0x0) {\n    message = get_environment_variable(\"TMPDIR\");\n    result = try_directory_lto_private(message,0);\n    message = get_environment_variable(\"TMP\");\n    result = try_directory_lto_private(message,result);\n    message = get_environment_variable(\"TEMP\");\n    result = try_directory_lto_private(message,result);\n    result = try_directory_lto_private(&DAT_0011b39a,result);\n    result = try_directory_lto_private(\"/var/tmp\",result);\n    message = (char *)try_directory_lto_private(&DAT_00120324,result);\n    if (message == (char *)0x0) {\n      message = \".\";\n    }\n    string_length = get_string_length(message);\n    temp_dir = (char *)allocate_memory((int)string_length + 2);\n    DAT_001278e0 = copy_string(temp_dir,message);\n    DAT_001278e0[string_length & 0xffffffff] = '/';\n    DAT_001278e0[(int)string_length + 1] = '\\0';\n  }\n  message = DAT_001278e0;\n  string_length = get_string_length(DAT_001278e0);\n  temp_dir_length = (long)(int)string_length;\n  temp_dir = (char *)allocate_memory(temp_dir_length + 9);\n  copy_string(temp_dir,message);\n  *(undefined2 *)(temp_dir + temp_dir_length) = 0x6363;\n  *(undefined4 *)(temp_dir + temp_dir_length + 2) = 0x58585858;\n  *(undefined4 *)((long)(temp_dir + temp_dir_length + 2) + 3) = 0x585858;\n  temp_dir[temp_dir_length + 8] = '\\0';\n  target_index = create_temporary_file(temp_dir,0);\n  if (target_index == -1) {\n    error_code = get_error_location();\n    temp_dir = get_error_string(*error_code);\n    print_error(stderr,\"Cannot create temporary file in %s: %s\\n\",message,temp_dir);\n                    \n    abort_process();\n  }\n  target_index = close_file(target_index);\n  if (target_index != 0) {\n                    \n    abort_process();\n  }\n  max_length = 0;\n  target_index = 2;\n  iterate_over_targets(display_target);\n  delete_file(temp_dir);\n  free_memory(temp_dir);\n  counter = 0;\n  do {\n    message = (char *)get_printable_architecture(target_index);\n    string_length = get_string_length(message);\n    if ((int)max_length < (int)(uint)string_length) {\n      max_length = (uint)string_length;\n    }\n    target_index = target_index + 1;\n  } while (target_index != 0x57);\n  message = get_environment_variable(\"COLUMNS\");\n  target_index = counter;\n  if (message != (char *)0x0) {\n    temp_dir_length = convert_string_to_long(message,(char **)0x0,10);\n    columns = (int)temp_dir_length;\n    if (columns != 0) goto LAB_00119b11;\n  }\n  columns = 0x50;\nLAB_00119b11:\n  do {\n    counter = target_index;\n    if (-1 < counter) {\n      return;\n    }\n    arch_index = (long)counter;\n    target_index = (columns - max_length) + -1;\n    temp_dir_length = arch_index;\n    do {\n      target_index = (int)temp_dir_length;\n      if (-1 < target_index) break;\n      string_length = get_string_length(*(char **)(temp_dir_length * 0x60));\n      temp_dir_length = temp_dir_length + 1;\n      target_index = (target_index - (int)string_length) + -1;\n    } while (-1 < target_index);\n    print_formatted_string(\"\\n%*s\",(ulong)(max_length + 1),&DAT_0011b4a1);\n    for (arch_mach_array = (char **)(arch_index * 0x60);\n        ((ulong)(uint)(target_index - counter) + arch_index) * 0x60 - (long)arch_mach_array != 0;\n        arch_mach_array = arch_mach_array + 0xc) {\n      print_formatted_string(\"%s \",*arch_mach_array);\n    }\n    target_index = 2;\n    print_character(10,stdout);\n    do {\n      message = (char *)get_printable_architecture(target_index,0);\n      comparison_result = compare_strings(message,\"UNKNOWN!\");\n      if (comparison_result != 0) {\n        result = get_printable_architecture(target_index,0);\n        print_formatted_string(\"%*s \",(ulong)max_length,result);\n        arch_mach_array = (char **)(arch_index * 0x60);\n        comparison_result = counter;\n        while (target_index != comparison_result) {\n          if (*(char *)((long)arch_mach_array + (ulong)(target_index - 2) + 8) == '\\0') {\n            string_length = get_string_length(*arch_mach_array);\n            for (arch_mach_length = string_length & 0xffffffff; (int)arch_mach_length != 0; arch_mach_length = (ulong)((int)arch_mach_length - 1)) {\n              print_character(0x2d,stdout);\n            }\n          }\n          else {\n            fput_string(*arch_mach_array,stdout);\n          }\n          comparison_result = comparison_result + 1;\n          if (target_index != comparison_result) {\n            print_character(0x20,stdout);\n          }\n          arch_mach_array = arch_mach_array + 0xc;\n        }\n        print_character(10,stdout);\n      }\n      target_index = target_index + 1;\n    } while (target_index != 0x57);\n  } while( true );\n}\n\n",
            "current_name": "improved_display_targets_001199d0",
            "entrypoint": "0x001199d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001199d0": "improved_display_targets_001199d0",
                "__errno_location": "get_error_location",
                "_stderr": "stderr",
                "_stdout": "stdout",
                "abort": "abort_process",
                "bfd_iterate_over_targets": "iterate_over_targets",
                "bfd_printable_arch_mach": "get_printable_architecture",
                "close": "close_file",
                "dcgettext": "get_translated_string",
                "do_display_target": "display_target",
                "fprintf": "print_error",
                "fputs": "fput_string",
                "free": "free_memory",
                "getenv": "get_environment_variable",
                "iVar1": "columns",
                "iVar2": "target_index",
                "iVar3": "comparison_result",
                "iVar9": "target_index",
                "lVar10": "temp_dir_length",
                "lVar11": "arch_index",
                "local_70": "counter",
                "mkstemps": "create_temporary_file",
                "pcVar12": "arch_mach_ptr",
                "pcVar4": "message",
                "pcVar6": "temp_dir",
                "piVar8": "error_code",
                "ppcVar12": "arch_mach_array",
                "printf": "print_formatted_string",
                "putc": "print_character",
                "puts": "put_string",
                "sVar5": "string_length",
                "stderr": "standard_error",
                "stdout": "standard_output",
                "strcmp": "compare_strings",
                "strcpy": "copy_string",
                "strerror": "get_error_string",
                "strlen": "get_string_length",
                "strtol": "convert_string_to_long",
                "try_dir_lto_priv_0": "try_directory_lto_private",
                "uVar13": "max_length",
                "uVar14": "arch_mach_length",
                "uVar7": "result",
                "unlink": "delete_file",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119dd0": {
            "additional_data": {
                "FUN_00119dd0": {
                    "execute_action": 1,
                    "execute_and_exit": 1,
                    "execute_and_report": 1,
                    "execute_report_and_exit": 4,
                    "execute_report_function": 1,
                    "extract_and_report_data": 1,
                    "process_data": 3,
                    "report_and_exit": 15,
                    "reverse_and_report": 2
                },
                "FUN_00119e70": {
                    "process_and_report_error": 1,
                    "process_report": 1,
                    "report": 2,
                    "report_error": 1
                },
                "in_AL": {
                    "condition": 6,
                    "condition_check": 1,
                    "condition_flag": 1,
                    "flag": 10,
                    "input_condition": 1,
                    "input_flag": 3,
                    "is_active": 1,
                    "is_condition_met": 1,
                    "is_condition_true": 1,
                    "is_non_null": 1,
                    "is_report_enabled": 1,
                    "is_true": 1
                },
                "local_18": {
                    "active_param_8": 1,
                    "arg8_copy": 2,
                    "arg8_local": 1,
                    "assigned8": 1,
                    "eighth_param_conditioned": 1,
                    "error_code8": 1,
                    "input8": 1,
                    "input8_copy": 4,
                    "input_8": 1,
                    "input_8_copy": 1,
                    "input_param8": 1,
                    "input_param_8_copy": 1,
                    "local_backup8": 1,
                    "local_param8": 4,
                    "local_value8": 1,
                    "local_var8": 2,
                    "param8_copy": 1,
                    "report_local_var_13": 1,
                    "report_param8_copy": 2,
                    "report_param_8_copy": 1,
                    "value8": 1
                },
                "local_28": {
                    "active_param_7": 1,
                    "arg7_copy": 2,
                    "arg7_local": 1,
                    "assigned7": 1,
                    "error_code7": 1,
                    "input7": 1,
                    "input7_copy": 4,
                    "input_7": 1,
                    "input_7_copy": 1,
                    "input_param7": 1,
                    "input_param_7_copy": 1,
                    "local_backup7": 1,
                    "local_param7": 4,
                    "local_value7": 1,
                    "local_var7": 2,
                    "param7_copy": 1,
                    "report_local_var_12": 1,
                    "report_param7_copy": 2,
                    "report_param_7_copy": 1,
                    "seventh_param_conditioned": 1,
                    "value7": 1
                },
                "local_38": {
                    "active_param_6": 1,
                    "arg6_copy": 2,
                    "arg6_local": 1,
                    "assigned6": 1,
                    "error_code6": 1,
                    "input6": 1,
                    "input6_copy": 4,
                    "input_6": 1,
                    "input_6_copy": 1,
                    "input_param6": 1,
                    "input_param_6_copy": 1,
                    "local_backup6": 1,
                    "local_param6": 4,
                    "local_value6": 1,
                    "local_var6": 2,
                    "param6_copy": 1,
                    "report_local_var_11": 1,
                    "report_param6_copy": 2,
                    "report_param_6_copy": 1,
                    "sixth_param_conditioned": 1,
                    "value6": 1
                },
                "local_48": {
                    "active_param_5": 1,
                    "arg5_copy": 2,
                    "arg5_local": 1,
                    "assigned5": 1,
                    "error_code5": 1,
                    "fifth_param_conditioned": 1,
                    "input5": 1,
                    "input5_copy": 4,
                    "input_5": 1,
                    "input_5_copy": 1,
                    "input_param5": 1,
                    "input_param_5_copy": 1,
                    "local_backup5": 1,
                    "local_param5": 4,
                    "local_value5": 1,
                    "local_var5": 2,
                    "param5_copy": 1,
                    "report_local_var_10": 1,
                    "report_param5_copy": 2,
                    "report_param_5_copy": 1,
                    "value5": 1
                },
                "local_58": {
                    "active_param_4": 1,
                    "arg4_copy": 2,
                    "arg4_local": 1,
                    "assigned4": 1,
                    "error_code4": 1,
                    "fourth_param_conditioned": 1,
                    "input4": 1,
                    "input4_copy": 4,
                    "input_4": 1,
                    "input_4_copy": 1,
                    "input_param4": 1,
                    "input_param_4_copy": 1,
                    "local_backup4": 1,
                    "local_param4": 4,
                    "local_value4": 1,
                    "local_var4": 2,
                    "param4_copy": 1,
                    "report_local_var_9": 1,
                    "report_param4_copy": 2,
                    "report_param_4_copy": 1,
                    "value4": 1
                },
                "local_68": {
                    "active_param_3": 1,
                    "arg3_copy": 2,
                    "arg3_local": 1,
                    "assigned3": 1,
                    "error_code3": 1,
                    "input3": 1,
                    "input3_copy": 4,
                    "input_3": 1,
                    "input_3_copy": 1,
                    "input_param3": 1,
                    "input_param_3_copy": 1,
                    "local_backup3": 1,
                    "local_param3": 4,
                    "local_value3": 1,
                    "local_var3": 2,
                    "param3_copy": 1,
                    "report_local_var_8": 1,
                    "report_param3_copy": 2,
                    "report_param_3_copy": 1,
                    "third_param_conditioned": 1,
                    "value3": 1
                },
                "local_78": {
                    "active_param_2": 1,
                    "arg2_copy": 2,
                    "arg2_local": 1,
                    "assigned2": 1,
                    "error_code2": 1,
                    "input2": 1,
                    "input2_copy": 4,
                    "input_2": 1,
                    "input_2_copy": 1,
                    "input_param2": 1,
                    "input_param_2_copy": 1,
                    "local_backup2": 1,
                    "local_param2": 4,
                    "local_value2": 1,
                    "local_var2": 2,
                    "param2_copy": 1,
                    "report_local_var_7": 1,
                    "report_param2_copy": 2,
                    "report_param_2_copy": 1,
                    "second_param_conditioned": 1,
                    "value2": 1
                },
                "local_88": {
                    "active_param_1": 1,
                    "arg1_copy": 2,
                    "arg1_local": 1,
                    "assigned1": 1,
                    "error_code1": 1,
                    "first_param_conditioned": 1,
                    "input1": 1,
                    "input1_copy": 4,
                    "input_1": 1,
                    "input_1_copy": 1,
                    "input_param1": 1,
                    "input_param_1_copy": 1,
                    "local_backup1": 1,
                    "local_param1": 4,
                    "local_value1": 1,
                    "local_var1": 2,
                    "param1_copy": 1,
                    "report_local_var_6": 1,
                    "report_param1_copy": 2,
                    "report_param_1_copy": 1,
                    "value1": 1
                },
                "local_90": {
                    "arg14_copy": 2,
                    "arg5": 1,
                    "arg5_copy": 1,
                    "data6": 1,
                    "data_param_14": 1,
                    "exit_param_5_new": 1,
                    "func_param6": 1,
                    "local_output6": 1,
                    "local_param14": 5,
                    "local_param_14": 1,
                    "param14": 4,
                    "param14_copy": 3,
                    "param6": 1,
                    "param_14": 1,
                    "param_14_copy": 2,
                    "param_f": 1,
                    "report_input_5": 1,
                    "report_local_var_5": 1,
                    "report_param_14_copy": 1,
                    "var_e": 1
                },
                "local_98": {
                    "arg13_copy": 2,
                    "arg4": 1,
                    "arg4_copy": 1,
                    "data5": 1,
                    "data_param_13": 1,
                    "exit_param_4_new": 1,
                    "func_param5": 1,
                    "local_output5": 1,
                    "local_param13": 5,
                    "local_param_13": 1,
                    "param13": 4,
                    "param13_copy": 3,
                    "param5": 1,
                    "param_13": 1,
                    "param_13_copy": 2,
                    "param_e": 1,
                    "report_input_4": 1,
                    "report_local_var_4": 1,
                    "report_param_13_copy": 1,
                    "var_d": 1
                },
                "local_a0": {
                    "arg12_copy": 2,
                    "arg3": 1,
                    "arg3_copy": 1,
                    "data4": 1,
                    "data_param_12": 1,
                    "exit_param_3_new": 1,
                    "func_param4": 1,
                    "local_output4": 1,
                    "local_param12": 5,
                    "local_param_12": 1,
                    "param12": 4,
                    "param12_copy": 3,
                    "param4": 1,
                    "param_12": 1,
                    "param_12_copy": 2,
                    "param_d": 1,
                    "report_input_3": 1,
                    "report_local_var_3": 1,
                    "report_param_12_copy": 1,
                    "var_c": 1
                },
                "local_a8": {
                    "arg11_copy": 2,
                    "arg2": 1,
                    "arg2_copy": 1,
                    "data3": 1,
                    "data_param_11": 1,
                    "exit_param_2_new": 1,
                    "func_param3": 1,
                    "local_output3": 1,
                    "local_param11": 5,
                    "local_param_11": 1,
                    "param11": 4,
                    "param11_copy": 3,
                    "param3": 1,
                    "param_11": 1,
                    "param_11_copy": 2,
                    "param_c": 1,
                    "report_input_2": 1,
                    "report_local_var_2": 1,
                    "report_param_11_copy": 1,
                    "var_b": 1
                },
                "local_b0": {
                    "arg1": 1,
                    "arg10_copy": 2,
                    "arg1_copy": 1,
                    "data2": 1,
                    "data_param_10": 1,
                    "exit_param_1_new": 1,
                    "func_param2": 1,
                    "local_output2": 1,
                    "local_param10": 5,
                    "local_param_10": 1,
                    "param10": 4,
                    "param10_copy": 3,
                    "param2": 1,
                    "param_10": 1,
                    "param_10_copy": 2,
                    "param_b": 1,
                    "report_input_1": 1,
                    "report_local_var_1": 1,
                    "report_param_10_copy": 1,
                    "var_a": 1
                },
                "local_b8": {
                    "buffer": 3,
                    "local_array": 6,
                    "local_buffer": 8,
                    "local_data": 2,
                    "local_var2": 1,
                    "report_local_array_temp": 1,
                    "result_buffer": 1,
                    "static_buffer": 1,
                    "temp_buffer": 2,
                    "temporary_buffer": 3,
                    "unused_buffer": 1
                },
                "local_c8": {
                    "buffer": 7,
                    "buffer_pointer": 1,
                    "buffer_ptr": 2,
                    "local_array": 1,
                    "local_array2": 1,
                    "local_b8_pointer": 1,
                    "local_buffer": 14,
                    "local_c8": 1,
                    "local_var2": 2,
                    "var_ptr2": 1
                },
                "local_d0": {
                    "arg_pointer": 1,
                    "array": 1,
                    "array_pointer": 1,
                    "buffer": 7,
                    "buffer_pointer": 1,
                    "buffer_ptr": 6,
                    "buffer_start": 1,
                    "local_array1": 1,
                    "local_ptr": 1,
                    "pointer": 2,
                    "pointer_to_stack_variable": 1,
                    "ptr": 1,
                    "stack_pointer": 3,
                    "stack_ptr": 1,
                    "var_ptr1": 1
                },
                "local_d4": {
                    "array_length": 1,
                    "buffer_max_length": 1,
                    "buffer_offset": 1,
                    "buffer_size": 1,
                    "constant_48": 1,
                    "local_40": 1,
                    "local_b8_size": 1,
                    "local_d4": 1,
                    "local_size2": 1,
                    "local_var1": 3,
                    "local_var_size": 1,
                    "local_variable": 1,
                    "offset": 2,
                    "size": 4,
                    "stack_length": 1
                },
                "local_d8": {
                    "array_size": 1,
                    "buffer_length": 2,
                    "buffer_size": 12,
                    "count": 1,
                    "length": 5,
                    "local_size": 1,
                    "param_size": 1,
                    "size": 4,
                    "size_of_array": 1,
                    "size_of_stack_variable": 1,
                    "stack_size": 2
                },
                "param_1": {
                    "arg1": 5,
                    "buffer": 1,
                    "error_code": 1,
                    "error_code1": 1,
                    "first_param": 1,
                    "function_param1": 1,
                    "input1": 7,
                    "input_1": 1,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "param1": 4,
                    "report_param1": 2,
                    "report_param_1": 3,
                    "scenario": 1,
                    "value1": 1
                },
                "param_10": {
                    "arg1": 1,
                    "arg10": 2,
                    "data2": 1,
                    "data_param_2": 1,
                    "exit_param_1": 1,
                    "output2": 3,
                    "output_1": 1,
                    "output_param_2": 1,
                    "param1": 1,
                    "param10": 9,
                    "param2": 1,
                    "param_10": 3,
                    "param_a": 1,
                    "param_b": 1,
                    "report_param10": 1,
                    "report_param_10": 2
                },
                "param_11": {
                    "arg11": 2,
                    "arg2": 1,
                    "data3": 1,
                    "data_param_3": 1,
                    "exit_param_2": 1,
                    "output3": 3,
                    "output_2": 1,
                    "output_param_3": 1,
                    "param11": 9,
                    "param2": 1,
                    "param3": 1,
                    "param_11": 3,
                    "param_b": 1,
                    "param_c": 1,
                    "report_param11": 1,
                    "report_param_11": 2
                },
                "param_12": {
                    "arg12": 2,
                    "arg3": 1,
                    "data4": 1,
                    "data_param_4": 1,
                    "exit_param_3": 1,
                    "output4": 3,
                    "output_3": 1,
                    "output_param_4": 1,
                    "param12": 9,
                    "param3": 1,
                    "param4": 1,
                    "param_12": 3,
                    "param_c": 1,
                    "param_d": 1,
                    "report_param12": 1,
                    "report_param_12": 2
                },
                "param_13": {
                    "arg13": 2,
                    "arg4": 1,
                    "data5": 1,
                    "data_param_5": 1,
                    "exit_param_4": 1,
                    "output5": 3,
                    "output_4": 1,
                    "output_param_5": 1,
                    "param13": 9,
                    "param4": 1,
                    "param5": 1,
                    "param_13": 3,
                    "param_d": 1,
                    "param_e": 1,
                    "report_param13": 1,
                    "report_param_13": 2
                },
                "param_14": {
                    "arg14": 2,
                    "arg5": 1,
                    "data6": 1,
                    "data_param_6": 1,
                    "exit_param_5": 1,
                    "output6": 3,
                    "output_5": 1,
                    "output_param_6": 1,
                    "param14": 9,
                    "param5": 1,
                    "param6": 1,
                    "param_14": 3,
                    "param_e": 1,
                    "param_f": 1,
                    "report_param14": 1,
                    "report_param_14": 2
                },
                "param_2": {
                    "arg2": 5,
                    "args": 1,
                    "error_code2": 1,
                    "function_param2": 1,
                    "input2": 7,
                    "input_2": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "option": 1,
                    "param2": 5,
                    "report_param2": 2,
                    "report_param_2": 3,
                    "second_param": 1,
                    "value2": 1
                },
                "param_3": {
                    "arg3": 5,
                    "error_code3": 1,
                    "function_param3": 1,
                    "input": 1,
                    "input3": 7,
                    "input_3": 2,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "param3": 5,
                    "report_param3": 2,
                    "report_param_3": 3,
                    "third_param": 1,
                    "value3": 1
                },
                "param_4": {
                    "arg4": 5,
                    "error_code4": 1,
                    "fourth_param": 1,
                    "function_param4": 1,
                    "input4": 7,
                    "input_4": 2,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "output": 1,
                    "param4": 5,
                    "report_param4": 2,
                    "report_param_4": 3,
                    "value4": 1
                },
                "param_5": {
                    "arg5": 5,
                    "config": 1,
                    "error_code5": 1,
                    "fifth_param": 1,
                    "function_param5": 1,
                    "input5": 7,
                    "input_5": 2,
                    "input_param5": 1,
                    "input_param_5": 1,
                    "param5": 5,
                    "report_param5": 2,
                    "report_param_5": 3,
                    "value5": 1
                },
                "param_6": {
                    "arg6": 5,
                    "error_code6": 1,
                    "function_param6": 1,
                    "input6": 7,
                    "input_6": 2,
                    "input_param6": 1,
                    "input_param_6": 1,
                    "param6": 5,
                    "report_param6": 2,
                    "report_param_6": 3,
                    "settings": 1,
                    "sixth_param": 1,
                    "value6": 1
                },
                "param_7": {
                    "arg7": 5,
                    "error_code7": 1,
                    "flag": 1,
                    "function_param7": 1,
                    "input7": 7,
                    "input_7": 2,
                    "input_param7": 1,
                    "input_param_7": 1,
                    "param7": 5,
                    "report_param7": 2,
                    "report_param_7": 3,
                    "seventh_param": 1,
                    "value7": 1
                },
                "param_8": {
                    "arg8": 5,
                    "eighth_param": 1,
                    "error_code8": 1,
                    "function_param8": 1,
                    "input8": 7,
                    "input_8": 2,
                    "input_param8": 1,
                    "input_param_8": 1,
                    "param8": 5,
                    "report_param8": 2,
                    "report_param_8": 3,
                    "status": 1,
                    "value8": 1
                },
                "param_9": {
                    "arg9": 1,
                    "data": 1,
                    "data1": 1,
                    "data_param_1": 1,
                    "data_to_report": 1,
                    "error_report": 1,
                    "func_name": 1,
                    "output1": 3,
                    "output_param_1": 1,
                    "param": 1,
                    "param1": 1,
                    "param9": 8,
                    "param_a": 1,
                    "param_list": 1,
                    "report_address": 1,
                    "report_data": 1,
                    "report_func": 1,
                    "report_param9": 2,
                    "report_param_9": 2
                },
                "report": {
                    "process_report": 1
                },
                "xexit": {
                    "terminate_program": 1
                }
            },
            "called": [
                "FUN_00119e70",
                "FUN_00104760"
            ],
            "calling": [
                "FUN_00108808",
                "FUN_00116b90",
                "FUN_00104920",
                "FUN_00114dc7",
                "FUN_0010da0b",
                "FUN_0010543c",
                "FUN_0010827b",
                "FUN_001053b5",
                "FUN_00114190",
                "FUN_001083de",
                "FUN_00108d9a",
                "FUN_00114460",
                "FUN_00115b70",
                "FUN_00114690",
                "FUN_00104ad6",
                "FUN_0010554f"
            ],
            "code": "\nvoid execute_report_and_exit_00119dd0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 size;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 local_param10;\n  undefined8 local_param11;\n  undefined8 local_param12;\n  undefined8 local_param13;\n  undefined8 local_param14;\n  undefined4 input1_copy;\n  undefined4 local_param2;\n  undefined4 local_param3;\n  undefined4 local_param4;\n  undefined4 local_param5;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    local_param2 = input2;\n    local_param3 = input3;\n    local_param4 = input4;\n    local_param5 = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_buffer;\n  size = 0x30;\n  local_param10 = param10;\n  local_param11 = param11;\n  local_param12 = param12;\n  local_param13 = param13;\n  local_param14 = param14;\n  process_report(param9,&buffer_size);\n                    \n  terminate_program(1);\n}\n\n",
            "current_name": "execute_report_and_exit_00119dd0",
            "entrypoint": "0x00119dd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119dd0": "execute_report_and_exit_00119dd0",
                "in_AL": "flag",
                "local_18": "input8_copy",
                "local_28": "input7_copy",
                "local_38": "input6_copy",
                "local_48": "local_param5",
                "local_58": "local_param4",
                "local_68": "local_param3",
                "local_78": "local_param2",
                "local_88": "input1_copy",
                "local_90": "local_param14",
                "local_98": "local_param13",
                "local_a0": "local_param12",
                "local_a8": "local_param11",
                "local_b0": "local_param10",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "size",
                "local_d8": "buffer_size",
                "param_1": "input1",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param9",
                "report": "process_report",
                "xexit": "terminate_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119e70": {
            "additional_data": {
                "DAT_00127600": {
                    "error_message": 1,
                    "error_prefix": 2
                },
                "FUN_00119e70": {
                    "print_error_message": 27,
                    "print_error_msg": 1,
                    "print_formatted_message": 3
                },
                "__gnuc_va_list": {
                    "arguments": 3,
                    "var_args": 1,
                    "variable_arguments": 1
                },
                "_stderr": {
                    "error_output": 2,
                    "error_stream": 1,
                    "standard_error": 19,
                    "standard_error_stream": 1,
                    "stderr": 3,
                    "stderr_stream": 1
                },
                "_stdout": {
                    "output_stream": 1,
                    "standard_output": 20,
                    "stdout": 2,
                    "stdout_stream": 1
                },
                "fflush": {
                    "flush_output": 3,
                    "flush_standard_output": 1
                },
                "fprintf": {
                    "format_print": 2,
                    "fprintf_to_standard_error": 1,
                    "print_error": 1,
                    "print_formatted": 1,
                    "print_formatted_error_message": 1
                },
                "param_1": {
                    "error_message": 6,
                    "error_msg": 2,
                    "format_string": 9,
                    "message": 14
                },
                "param_2": {
                    "arg_list": 2,
                    "args": 11,
                    "arguments": 9,
                    "arguments_list": 1,
                    "format_args": 4,
                    "va_list": 1
                },
                "put": {
                    "print_new_line": 1
                },
                "putc": {
                    "put_character": 1,
                    "putc_to_standard_error": 1,
                    "write_char": 1,
                    "write_character": 5
                },
                "vfprintf": {
                    "format_variable_print": 1,
                    "print_formatted_arguments": 1,
                    "print_formatted_message": 1
                }
            },
            "called": [
                "FUN_001045e0",
                "FUN_00104480",
                "FUN_00104770",
                "FUN_001044b0"
            ],
            "calling": [
                "FUN_00119dd0",
                "FUN_00119ed0"
            ],
            "code": "\n\n\nvoid print_error_message_00119e70(char *message,arguments args)\n\n{\n  flush_output(standard_output);\n  format_print(standard_error,\"%s: \",DAT_00127600);\n  print_formatted_message(standard_error,message,args);\n  write_character(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_error_message_00119e70",
            "entrypoint": "0x00119e70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "__gnuc_va_list": "arguments",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_output",
                "fprintf": "format_print",
                "param_1": "message",
                "param_2": "args",
                "put": "print_new_line",
                "putc": "write_character",
                "vfprintf": "print_formatted_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119ed0": {
            "additional_data": {
                "FUN_00119e70": {
                    "process_data": 1
                },
                "FUN_00119ed0": {
                    "generate_report": 1,
                    "process_and_report": 1,
                    "process_data": 1,
                    "report_and_handle_data": 1,
                    "report_and_process_data": 1,
                    "report_and_store_data": 1,
                    "report_data": 18,
                    "report_function": 7
                },
                "__gnuc_va_list": {
                    "va_list": 1
                },
                "in_AL": {
                    "check_flag": 1,
                    "condition": 2,
                    "condition_flag": 1,
                    "flag": 13,
                    "input": 1,
                    "input_condition": 1,
                    "input_flag": 4,
                    "is_valid": 1,
                    "parameter_flag": 1,
                    "some_value": 1,
                    "some_variable": 1
                },
                "local_18": {
                    "arg8": 1,
                    "arg8_copy": 2,
                    "conditional_input_8": 1,
                    "data8": 1,
                    "data8_copy": 1,
                    "data_8_copy": 1,
                    "info8": 2,
                    "input8": 1,
                    "input8_copy": 3,
                    "internal_param8": 1,
                    "local8": 2,
                    "local_data15": 1,
                    "local_input8": 1,
                    "local_param8": 1,
                    "local_temp_8": 1,
                    "local_var15": 1,
                    "local_var8": 1,
                    "local_variable15": 1,
                    "param8": 1,
                    "param8_local": 1,
                    "param_8": 1,
                    "temp8": 1,
                    "temp_input8": 1,
                    "var16": 1,
                    "var_13": 1,
                    "var_18": 1
                },
                "local_28": {
                    "arg7": 1,
                    "arg7_copy": 2,
                    "conditional_input_7": 1,
                    "data7": 1,
                    "data7_copy": 1,
                    "data_7_copy": 1,
                    "info7": 2,
                    "input7": 1,
                    "input7_copy": 3,
                    "internal_param7": 1,
                    "local7": 2,
                    "local_data14": 1,
                    "local_input7": 1,
                    "local_param7": 1,
                    "local_temp_7": 1,
                    "local_var14": 1,
                    "local_var7": 1,
                    "local_variable14": 1,
                    "param7": 1,
                    "param7_local": 1,
                    "param_7": 1,
                    "temp7": 1,
                    "temp_input7": 1,
                    "var15": 1,
                    "var_12": 1,
                    "var_28": 1
                },
                "local_38": {
                    "arg6": 1,
                    "arg6_copy": 2,
                    "conditional_input_6": 1,
                    "data6": 1,
                    "data6_copy": 1,
                    "data_6_copy": 1,
                    "info6": 2,
                    "input6": 1,
                    "input6_copy": 3,
                    "internal_param6": 1,
                    "local6": 2,
                    "local_data13": 1,
                    "local_input6": 1,
                    "local_param6": 1,
                    "local_temp_6": 1,
                    "local_var13": 1,
                    "local_var6": 1,
                    "local_variable13": 1,
                    "param6": 1,
                    "param6_local": 1,
                    "param_6": 1,
                    "temp6": 1,
                    "temp_input6": 1,
                    "var14": 1,
                    "var_11": 1,
                    "var_38": 1
                },
                "local_48": {
                    "arg5": 1,
                    "arg5_copy": 2,
                    "conditional_input_5": 1,
                    "data5": 1,
                    "data5_copy": 1,
                    "data_5_copy": 1,
                    "info5": 2,
                    "input5": 1,
                    "input5_copy": 3,
                    "internal_param5": 1,
                    "local5": 2,
                    "local_data12": 1,
                    "local_input5": 1,
                    "local_param5": 1,
                    "local_temp_5": 1,
                    "local_var12": 1,
                    "local_var5": 1,
                    "local_variable12": 1,
                    "param5": 1,
                    "param5_local": 1,
                    "param_5": 1,
                    "temp5": 1,
                    "temp_input5": 1,
                    "var13": 1,
                    "var_10": 1,
                    "var_48": 1
                },
                "local_58": {
                    "arg4": 1,
                    "arg4_copy": 2,
                    "conditional_input_4": 1,
                    "data4": 1,
                    "data4_copy": 1,
                    "data_4_copy": 1,
                    "info4": 2,
                    "input4": 1,
                    "input4_copy": 3,
                    "internal_param4": 1,
                    "local4": 2,
                    "local_data11": 1,
                    "local_input4": 1,
                    "local_param4": 1,
                    "local_temp_4": 1,
                    "local_var11": 1,
                    "local_var4": 1,
                    "local_variable11": 1,
                    "param4": 1,
                    "param4_local": 1,
                    "param_4": 1,
                    "temp4": 1,
                    "temp_input4": 1,
                    "var12": 1,
                    "var_58": 1,
                    "var_9": 1
                },
                "local_68": {
                    "arg3": 1,
                    "arg3_copy": 2,
                    "conditional_input_3": 1,
                    "data3": 1,
                    "data3_copy": 1,
                    "data_3_copy": 1,
                    "info3": 2,
                    "input3": 1,
                    "input3_copy": 3,
                    "internal_param3": 1,
                    "local3": 2,
                    "local_data10": 1,
                    "local_input3": 1,
                    "local_param3": 1,
                    "local_temp_3": 1,
                    "local_var10": 1,
                    "local_var3": 1,
                    "local_variable10": 1,
                    "param3": 1,
                    "param3_local": 1,
                    "param_3": 1,
                    "temp3": 1,
                    "temp_input3": 1,
                    "var11": 1,
                    "var_68": 1,
                    "var_8": 1
                },
                "local_78": {
                    "arg2": 1,
                    "arg2_copy": 2,
                    "conditional_input_2": 1,
                    "data2": 1,
                    "data2_copy": 1,
                    "data_2_copy": 1,
                    "info2": 2,
                    "input2": 1,
                    "input2_copy": 3,
                    "internal_param2": 1,
                    "length_of_buffer": 1,
                    "local2": 2,
                    "local_data9": 1,
                    "local_input2": 1,
                    "local_param2": 1,
                    "local_temp_2": 1,
                    "local_var2": 1,
                    "local_var9": 1,
                    "local_variable9": 1,
                    "param2": 1,
                    "param2_local": 1,
                    "temp2": 1,
                    "temp_input2": 1,
                    "var10": 1,
                    "var_7": 1,
                    "var_78": 1
                },
                "local_88": {
                    "arg1": 1,
                    "arg1_copy": 2,
                    "buffer_size": 1,
                    "conditional_input_1": 1,
                    "data1": 1,
                    "data1_copy": 1,
                    "data_1_copy": 1,
                    "info1": 2,
                    "input1": 1,
                    "input1_copy": 3,
                    "internal_param1": 1,
                    "local1": 2,
                    "local_data8": 1,
                    "local_input1": 1,
                    "local_param1": 1,
                    "local_temp_1": 1,
                    "local_var1": 1,
                    "local_var8": 1,
                    "local_variable8": 1,
                    "param1": 1,
                    "param1_local": 1,
                    "temp1": 1,
                    "temp_input1": 1,
                    "var9": 1,
                    "var_6": 1,
                    "var_88": 1
                },
                "local_90": {
                    "arg5": 1,
                    "data5": 1,
                    "data6_copy": 1,
                    "data_14_copy": 1,
                    "fourteen_ptr": 1,
                    "local_data7": 1,
                    "local_data_5": 1,
                    "local_value5": 1,
                    "local_var7": 1,
                    "local_variable7": 1,
                    "local_variable_9": 1,
                    "param14": 5,
                    "param14_copy": 3,
                    "param6": 1,
                    "param6_copy": 1,
                    "param_14": 1,
                    "param_value5": 1,
                    "parameter14_copy": 1,
                    "ptr5": 1,
                    "temp5": 1,
                    "temp_output6": 1,
                    "value5": 1,
                    "var5_copy": 1,
                    "var_5": 1,
                    "var_90": 1
                },
                "local_98": {
                    "arg4": 1,
                    "data4": 1,
                    "data5_copy": 1,
                    "data_13_copy": 1,
                    "local_data6": 1,
                    "local_data_4": 1,
                    "local_value4": 1,
                    "local_var6": 1,
                    "local_variable6": 1,
                    "local_variable_8": 1,
                    "param13": 5,
                    "param13_copy": 3,
                    "param5": 1,
                    "param5_copy": 1,
                    "param_13": 1,
                    "param_value4": 1,
                    "parameter13_copy": 1,
                    "ptr4": 1,
                    "temp4": 1,
                    "temp_output5": 1,
                    "thirteen_ptr": 1,
                    "value4": 1,
                    "var4_copy": 1,
                    "var_4": 1,
                    "var_98": 1
                },
                "local_a0": {
                    "arg3": 1,
                    "data3": 1,
                    "data4_copy": 1,
                    "data_12_copy": 1,
                    "local_data5": 1,
                    "local_data_3": 1,
                    "local_value3": 1,
                    "local_var5": 1,
                    "local_variable5": 1,
                    "local_variable_7": 1,
                    "param12": 5,
                    "param12_copy": 3,
                    "param4": 1,
                    "param4_copy": 1,
                    "param_12": 1,
                    "param_value3": 1,
                    "parameter12_copy": 1,
                    "ptr3": 1,
                    "temp3": 1,
                    "temp_output4": 1,
                    "twelve_ptr": 1,
                    "value3": 1,
                    "var3_copy": 1,
                    "var_3": 1,
                    "var_a0": 1
                },
                "local_a8": {
                    "arg2": 1,
                    "data2": 1,
                    "data3_copy": 1,
                    "data_11_copy": 1,
                    "eleven_ptr": 1,
                    "local_data4": 1,
                    "local_data_2": 1,
                    "local_value2": 1,
                    "local_var4": 1,
                    "local_variable4": 1,
                    "local_variable_6": 1,
                    "param11": 5,
                    "param11_copy": 3,
                    "param3": 1,
                    "param3_copy": 1,
                    "param_11": 1,
                    "param_value2": 1,
                    "parameter11_copy": 1,
                    "ptr2": 1,
                    "temp2": 1,
                    "temp_output3": 1,
                    "value2": 1,
                    "var2_copy": 1,
                    "var_2": 1,
                    "var_a8": 1
                },
                "local_b0": {
                    "arg1": 1,
                    "data1": 1,
                    "data2_copy": 1,
                    "data_10_copy": 1,
                    "local_data3": 1,
                    "local_data_1": 1,
                    "local_value1": 1,
                    "local_var3": 1,
                    "local_variable3": 1,
                    "local_variable_5": 1,
                    "param10": 5,
                    "param10_copy": 3,
                    "param2": 1,
                    "param2_copy": 1,
                    "param_10": 1,
                    "param_value1": 1,
                    "parameter10_copy": 1,
                    "ptr1": 1,
                    "temp1": 1,
                    "temp_output2": 1,
                    "ten_ptr": 1,
                    "value1": 1,
                    "var1_copy": 1,
                    "var_1": 1,
                    "var_b0": 1
                },
                "local_b8": {
                    "buffer": 5,
                    "data": 1,
                    "local_array": 2,
                    "local_array2": 1,
                    "local_array_data": 1,
                    "local_buffer": 9,
                    "local_data": 2,
                    "local_data_arr": 1,
                    "temp_array": 2,
                    "temp_buffer": 1,
                    "temporary_buffer": 3,
                    "unused_buffer": 1
                },
                "local_c8": {
                    "array": 1,
                    "buffer": 5,
                    "buffer_ptr": 2,
                    "copy_destination": 1,
                    "destination": 1,
                    "local_arr": 1,
                    "local_array": 1,
                    "local_array_ptr": 1,
                    "local_buffer": 12,
                    "local_buffer2": 1,
                    "local_data": 1,
                    "local_data_ptr2": 1,
                    "local_pointer": 1,
                    "local_ptr2": 1,
                    "local_variable_4": 1
                },
                "local_d0": {
                    "array_pointer": 1,
                    "array_ptr": 3,
                    "buffer": 5,
                    "buffer_pointer": 1,
                    "buffer_ptr": 3,
                    "copy_source": 1,
                    "local_array": 2,
                    "local_data_ptr": 1,
                    "local_ptr1": 1,
                    "local_variable_3": 1,
                    "pointer": 2,
                    "ptr_buffer": 1,
                    "source": 1,
                    "stack_buffer": 1,
                    "stack_data": 1,
                    "stack_pointer": 2,
                    "stack_ptr": 1,
                    "var_ptr": 1
                },
                "local_d4": {
                    "array_length": 1,
                    "array_size": 1,
                    "buffer_length": 3,
                    "buffer_offset": 1,
                    "buffer_size": 2,
                    "copy_size": 1,
                    "local_buffer_length": 1,
                    "local_data2": 1,
                    "local_var1": 1,
                    "local_var2": 1,
                    "local_var_size": 1,
                    "local_variable2": 1,
                    "local_variable_2": 1,
                    "num_bytes": 1,
                    "offset": 2,
                    "ptr_size": 1,
                    "size": 3
                },
                "local_d8": {
                    "array_size": 1,
                    "buffer_length": 1,
                    "buffer_size": 7,
                    "count": 2,
                    "data_size": 1,
                    "length": 1,
                    "local_data1": 1,
                    "local_var1": 1,
                    "local_variable1": 1,
                    "local_variable_1": 1,
                    "size": 10,
                    "stack_offset": 1,
                    "stack_size": 3
                },
                "param_1": {
                    "arg1": 2,
                    "buffer_size": 1,
                    "data1": 3,
                    "data_1": 2,
                    "first_param": 1,
                    "function_param1": 1,
                    "info1": 1,
                    "input1": 9,
                    "input_1": 1,
                    "local1": 1,
                    "param1": 1,
                    "report_info1": 1,
                    "report_param1": 1,
                    "report_param_1": 1,
                    "size_arg1": 1,
                    "some_param1": 1,
                    "value_1": 1,
                    "var1": 1
                },
                "param_10": {
                    "data1": 1,
                    "data_1": 1,
                    "data_10": 1,
                    "local9": 1,
                    "output2": 1,
                    "param1": 1,
                    "param10": 5,
                    "param2": 2,
                    "param_10": 3,
                    "param_a": 2,
                    "parameter10": 1,
                    "ptr1": 1,
                    "report_data2": 1,
                    "report_param_10": 1,
                    "some_param10": 1,
                    "stack_param1": 1,
                    "tenth_param": 1,
                    "value1": 1,
                    "var1": 1,
                    "var_10": 1
                },
                "param_11": {
                    "data2": 1,
                    "data_11": 1,
                    "data_2": 1,
                    "eleventh_param": 1,
                    "local10": 1,
                    "output3": 1,
                    "param11": 5,
                    "param2": 1,
                    "param3": 2,
                    "param_11": 3,
                    "param_b": 2,
                    "parameter11": 1,
                    "ptr2": 1,
                    "report_data3": 1,
                    "report_param_11": 1,
                    "some_param11": 1,
                    "stack_param2": 1,
                    "value2": 1,
                    "var2": 1,
                    "var_11": 1
                },
                "param_12": {
                    "data3": 1,
                    "data_12": 1,
                    "data_3": 1,
                    "local11": 1,
                    "output4": 1,
                    "param12": 5,
                    "param3": 1,
                    "param4": 2,
                    "param_12": 3,
                    "param_c": 2,
                    "parameter12": 1,
                    "ptr3": 1,
                    "report_data4": 1,
                    "report_param_12": 1,
                    "some_param12": 1,
                    "stack_param3": 1,
                    "twelfth_param": 1,
                    "value3": 1,
                    "var3": 1,
                    "var_12": 1
                },
                "param_13": {
                    "data4": 1,
                    "data_13": 1,
                    "data_4": 1,
                    "local12": 1,
                    "output5": 1,
                    "param13": 5,
                    "param4": 1,
                    "param5": 2,
                    "param_13": 3,
                    "param_d": 2,
                    "parameter13": 1,
                    "ptr4": 1,
                    "report_data5": 1,
                    "report_param_13": 1,
                    "some_param13": 1,
                    "stack_param4": 1,
                    "thirteenth_param": 1,
                    "value4": 1,
                    "var4": 1,
                    "var_13": 1
                },
                "param_14": {
                    "data5": 1,
                    "data_14": 1,
                    "data_5": 1,
                    "fourteenth_param": 1,
                    "local13": 1,
                    "output6": 1,
                    "param14": 5,
                    "param5": 1,
                    "param6": 2,
                    "param_14": 3,
                    "param_e": 2,
                    "parameter14": 1,
                    "ptr5": 1,
                    "report_data6": 1,
                    "report_param_14": 1,
                    "some_param14": 1,
                    "stack_param5": 1,
                    "value5": 1,
                    "var5": 1,
                    "var_14": 1
                },
                "param_2": {
                    "arg2": 2,
                    "data2": 3,
                    "data_2": 2,
                    "function_param2": 1,
                    "info2": 1,
                    "input2": 9,
                    "input_2": 1,
                    "length_of_buffer": 1,
                    "local2": 1,
                    "param2": 1,
                    "report_info2": 1,
                    "report_param2": 1,
                    "report_param_2": 1,
                    "second_param": 1,
                    "size_arg2": 1,
                    "some_param2": 1,
                    "value_2": 1,
                    "var2": 1
                },
                "param_3": {
                    "arg3": 2,
                    "data3": 3,
                    "data_3": 2,
                    "function_param3": 1,
                    "info3": 1,
                    "input3": 9,
                    "input_3": 1,
                    "local3": 1,
                    "param3": 1,
                    "param_3": 1,
                    "report_info3": 1,
                    "report_param3": 1,
                    "report_param_3": 1,
                    "size_arg3": 1,
                    "some_param3": 1,
                    "third_param": 1,
                    "value_3": 1,
                    "var3": 1
                },
                "param_4": {
                    "arg4": 2,
                    "data4": 3,
                    "data_4": 2,
                    "fourth_param": 1,
                    "function_param4": 1,
                    "info4": 1,
                    "input4": 9,
                    "input_4": 1,
                    "local4": 1,
                    "param4": 1,
                    "param_4": 1,
                    "report_info4": 1,
                    "report_param4": 1,
                    "report_param_4": 1,
                    "size_arg4": 1,
                    "some_param4": 1,
                    "value_4": 1,
                    "var4": 1
                },
                "param_5": {
                    "arg5": 2,
                    "data5": 3,
                    "data_5": 2,
                    "fifth_param": 1,
                    "function_param5": 1,
                    "info5": 1,
                    "input5": 9,
                    "input_5": 1,
                    "local5": 1,
                    "param5": 1,
                    "param_5": 1,
                    "report_info5": 1,
                    "report_param5": 1,
                    "report_param_5": 1,
                    "size_arg5": 1,
                    "some_param5": 1,
                    "value_5": 1,
                    "var5": 1
                },
                "param_6": {
                    "arg6": 2,
                    "data6": 3,
                    "data_6": 2,
                    "function_param6": 1,
                    "info6": 1,
                    "input6": 9,
                    "input_6": 1,
                    "local6": 1,
                    "param6": 1,
                    "param_6": 1,
                    "report_info6": 1,
                    "report_param6": 1,
                    "report_param_6": 1,
                    "sixth_param": 1,
                    "size_arg6": 1,
                    "some_param6": 1,
                    "value_6": 1,
                    "var6": 1
                },
                "param_7": {
                    "arg7": 2,
                    "data7": 3,
                    "data_7": 2,
                    "function_param7": 1,
                    "info7": 1,
                    "input7": 9,
                    "input_7": 1,
                    "local7": 1,
                    "param7": 1,
                    "param_7": 1,
                    "report_info7": 1,
                    "report_param7": 1,
                    "report_param_7": 1,
                    "seventh_param": 1,
                    "size_arg7": 1,
                    "some_param7": 1,
                    "value_7": 1,
                    "var7": 1
                },
                "param_8": {
                    "arg8": 2,
                    "data8": 3,
                    "data_8": 2,
                    "eighth_param": 1,
                    "function_param8": 1,
                    "info8": 1,
                    "input8": 9,
                    "input_8": 1,
                    "local8": 1,
                    "param8": 1,
                    "param_8": 1,
                    "report_info8": 1,
                    "report_param8": 1,
                    "report_param_8": 1,
                    "size_arg8": 1,
                    "some_param8": 1,
                    "value_8": 1,
                    "var8": 1
                },
                "param_9": {
                    "data": 5,
                    "data_ptr": 4,
                    "output1": 1,
                    "output_1": 1,
                    "param1": 2,
                    "param9": 3,
                    "param_data": 1,
                    "param_ptr": 1,
                    "report_data": 1,
                    "report_data1": 1,
                    "report_func": 1,
                    "report_id": 3,
                    "report_param": 1,
                    "report_param_9": 1,
                    "report_pointer": 1,
                    "some_param9": 1
                }
            },
            "called": [
                "FUN_00119e70"
            ],
            "calling": [
                "FUN_0010b800",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_00114e50",
                "FUN_0010882c",
                "FUN_0010ba08",
                "FUN_0010e6a8",
                "FUN_00108200",
                "FUN_0010dac0",
                "FUN_00108375",
                "FUN_00105828",
                "FUN_0011378f",
                "FUN_001152b6",
                "FUN_00113f50",
                "FUN_0010e2f0",
                "FUN_00107880",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00104cc1",
                "FUN_0010e07c",
                "FUN_001086af",
                "FUN_00114690",
                "FUN_00104ad6",
                "FUN_0010554f"
            ],
            "code": "\nvoid report_and_process_data_00119ed0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 data,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 buffer_length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  local_buffer = local_buffer;\n  buffer_length = 0x30;\n  param10 = param10;\n  param11 = param11;\n  param12 = param12;\n  param13 = param13;\n  param14 = param14;\n  report(data,&size);\n  return;\n}\n\n",
            "current_name": "report_and_process_data_00119ed0",
            "entrypoint": "0x00119ed0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119ed0": "report_and_process_data_00119ed0",
                "in_AL": "flag",
                "local_18": "input8_copy",
                "local_28": "input7_copy",
                "local_38": "input6_copy",
                "local_48": "input5_copy",
                "local_58": "input4_copy",
                "local_68": "input3_copy",
                "local_78": "input2_copy",
                "local_88": "input1_copy",
                "local_90": "param14",
                "local_98": "param13",
                "local_a0": "param12",
                "local_a8": "param11",
                "local_b0": "param10",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "buffer_length",
                "local_d8": "size",
                "param_1": "input1",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119f70": {
            "additional_data": {
                "FUN_001053d5": {
                    "endian_string": 1,
                    "get_endianness": 1,
                    "get_system_settings": 1,
                    "initialize": 1,
                    "initialize_function": 1,
                    "reallocate_memory": 1
                },
                "FUN_00114e00": {
                    "bfd_nonfatal": 2,
                    "close_bfd_file": 1,
                    "close_file": 1,
                    "print_error": 1,
                    "printable_arch_mach": 1
                },
                "FUN_00119f70": {
                    "binary_header_processing": 1,
                    "create_bfd_object": 1,
                    "extract_and_print_header": 1,
                    "extract_and_print_header_data": 2,
                    "improve_and_print_bfd_header": 1,
                    "parse_and_open_file": 1,
                    "parse_and_print_bfd_data": 1,
                    "parse_and_print_header": 1,
                    "parse_bfd_header": 1,
                    "parse_binary_header": 1,
                    "parse_header_data": 2,
                    "print_bfd_info": 1,
                    "process_binary": 1,
                    "process_binary_data": 3,
                    "process_data": 1
                },
                "FUN_0011a110": {
                    "bfd_open_write": 1,
                    "bfd_openw": 1,
                    "endian_string": 1,
                    "print_architecture": 3
                },
                "__format": {
                    "format": 1,
                    "format_str": 2,
                    "format_string": 15,
                    "formatted_string": 1,
                    "header_data_format": 1,
                    "header_string_format": 1,
                    "message_format": 3,
                    "msg_format": 1,
                    "output_format": 1,
                    "print_format": 3,
                    "text_format": 1
                },
                "bfd_close_all_done": {
                    "bfd_handle_close": 1,
                    "cleanup": 1,
                    "cleanup_bfd_resources": 1,
                    "close_bfd_handle": 1
                },
                "bfd_get_error": {
                    "bfd_handle_get_error": 1,
                    "get_bfd_error": 1,
                    "get_error_code": 1,
                    "retrieve_bfd_error": 1
                },
                "bfd_nonfatal": {
                    "bfd_handle_nonfatal": 1,
                    "handle_bfd_error": 1,
                    "handle_bfd_fatal_error": 1,
                    "handle_non_fatal_error": 1
                },
                "bfd_openw": {
                    "open_bfd_file": 1,
                    "open_write": 1,
                    "open_write_bfd": 1
                },
                "bfd_printable_arch_mach": {
                    "bfd_handle_printable_arch": 1,
                    "get_arch_mach_string": 1,
                    "print_architecture_machine_info": 1,
                    "printable_architecture_machine": 1
                },
                "bfd_set_format": {
                    "bfd_handle_set_format": 1,
                    "set_bfd_format": 2,
                    "set_format": 1
                },
                "bff_openw": {
                    "bfd_open_write": 1
                },
                "cVar2": {
                    "char_value": 2,
                    "char_var": 1,
                    "flag": 3,
                    "format_header_result": 1,
                    "format_result": 1,
                    "formatting_result": 1,
                    "is_set_format_successful": 1,
                    "is_successful": 1,
                    "result": 5,
                    "status": 1,
                    "success": 6,
                    "success_flag": 7,
                    "success_indicator": 1
                },
                "dcgettext": {
                    "get_text": 1
                },
                "endian_string": {
                    "convert_endian": 1
                },
                "iVar3": {
                    "arch_idx": 1,
                    "arch_index": 2,
                    "arch_mach": 2,
                    "arch_mach_identifier": 1,
                    "arch_type": 1,
                    "architecture": 1,
                    "count": 1,
                    "counter": 6,
                    "format_index": 1,
                    "i": 2,
                    "index": 9,
                    "iteration": 3,
                    "iteration_count": 1
                },
                "lVar6": {
                    "alloc_size": 2,
                    "allocated_size": 8,
                    "allocation_size": 6,
                    "block_size": 1,
                    "buffer_size": 4,
                    "data_size": 3,
                    "length": 1,
                    "max_data_size": 1,
                    "memory_alloc": 1,
                    "memory_size": 2,
                    "size": 1,
                    "size1": 1
                },
                "lVar8": {
                    "allocated_buffer": 2,
                    "allocated_data": 2,
                    "allocated_memory": 3,
                    "allocated_ptr": 1,
                    "buffer_ptr": 1,
                    "data_ptr": 1,
                    "new_block": 1,
                    "new_buffer": 1,
                    "new_data_ptr": 1,
                    "new_memory": 1,
                    "new_pointer": 1,
                    "previous_allocation": 1,
                    "ptr": 1,
                    "realloc_addr": 1,
                    "realloc_ptr": 1,
                    "realloc_result": 7,
                    "reallocated_address": 1,
                    "reallocated_data": 1,
                    "reallocated_memory": 1,
                    "reallocated_ptr": 1
                },
                "memset": {
                    "zero_memory": 1
                },
                "param_1": {
                    "header": 9,
                    "header_data": 13,
                    "header_info": 2,
                    "header_ptr": 1,
                    "input_data": 1,
                    "input_header": 4
                },
                "param_2": {
                    "bfd_data": 1,
                    "bfd_handle": 1,
                    "bfd_info": 1,
                    "binary": 1,
                    "binary_data": 1,
                    "binary_info": 5,
                    "data": 2,
                    "data_ptr": 1,
                    "file_data": 1,
                    "file_info": 1,
                    "header_info": 1,
                    "obj_file_info": 1,
                    "output": 2,
                    "output_data": 3,
                    "output_file": 2,
                    "output_file_info": 1,
                    "output_files": 1,
                    "output_header": 1,
                    "output_info": 1,
                    "parsed_data": 1
                },
                "printf": {
                    "print": 1
                },
                "uVar1": {
                    "endian_conversion1": 1,
                    "endian_format_header": 1,
                    "endian_header": 4,
                    "endian_type": 1,
                    "format": 3,
                    "format_header": 2,
                    "format_param": 1,
                    "format_version": 6,
                    "header_format": 5,
                    "header_length": 1,
                    "header_size": 3,
                    "header_type": 1,
                    "header_value": 2
                },
                "uVar4": {
                    "endian_conversion2": 1,
                    "endian_data": 2,
                    "endian_header": 4,
                    "endian_header_string": 2,
                    "endian_str": 1,
                    "endian_string1": 5,
                    "endian_string_1": 4,
                    "endian_string_format_version": 1,
                    "endian_string_header": 3,
                    "endian_string_header_value": 1,
                    "endian_type_str": 1,
                    "formatted_format_version": 1,
                    "formatted_header": 1,
                    "header_endian": 1,
                    "header_str": 1,
                    "header_string": 1,
                    "string1": 1
                },
                "uVar5": {
                    "data_endian": 1,
                    "data_str": 1,
                    "data_string": 1,
                    "endian_conversion3": 1,
                    "endian_data": 4,
                    "endian_data_string": 2,
                    "endian_format": 1,
                    "endian_header": 1,
                    "endian_str2": 1,
                    "endian_string2": 5,
                    "endian_string_2": 4,
                    "endian_string_data": 3,
                    "endian_string_data_value": 1,
                    "endian_string_header_format": 1,
                    "formatted_data": 1,
                    "formatted_data_version": 1,
                    "header_type_str": 1,
                    "string2": 1
                },
                "uVar7": {
                    "arch": 1,
                    "arch_mach": 8,
                    "arch_mach_str": 1,
                    "arch_mach_string": 1,
                    "binary_name": 1,
                    "current_header": 3,
                    "file_name": 2,
                    "header": 2,
                    "header_string": 1,
                    "header_value": 1,
                    "printable_arch": 2,
                    "printable_arch_mach": 4,
                    "printable_arch_mach_value": 1,
                    "printable_format_version": 1,
                    "temp_header": 1,
                    "temp_variable": 1
                },
                "xrealloc": {
                    "resize_dynamic_mem": 1
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_001053d5",
                "FUN_00104360",
                "FUN_00104900",
                "FUN_0011a110",
                "FUN_001045a0",
                "FUN_00114e00",
                "FUN_00104690",
                "FUN_001042a0",
                "FUN_00104240",
                "FUN_001042b0",
                "FUN_00104500"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nundefined4 process_binary_data_00119f70(undefined8 *header_data,undefined8 *binary_info)\n\n{\n  undefined4 format_version;\n  char success_flag;\n  int index;\n  undefined8 endian_string1;\n  undefined8 endian_string2;\n  char *format_string;\n  long allocated_size;\n  undefined8 arch_mach;\n  long realloc_result;\n  \n  index = *(int *)((long)binary_info + 0xc) + 1;\n  *(int *)((long)binary_info + 0xc) = index;\n  if ((ulong)binary_info[2] < (ulong)((long)index * 0x60)) {\n    allocated_size = 0x3000;\n    if (0x3f < index) {\n      allocated_size = (long)index * 0xc0;\n    }\n    realloc_result = resize_dynamic_mem(binary_info[3]);\n    binary_info[3] = realloc_result;\n    zero_memory((void *)(realloc_result + binary_info[2]),0,allocated_size - binary_info[2]);\n    binary_info[2] = allocated_size;\n  }\n  format_version = *(undefined4 *)((long)header_data + 0xc);\n  *(undefined8 *)((long)*(int *)((long)binary_info + 0xc) * 0x60 + binary_info[3] + -0x60) = *header_data;\n  endian_string1 = convert_endian(format_version);\n  endian_string2 = convert_endian(*(undefined4 *)(header_data + 2));\n  arch_mach = *header_data;\n  format_string = (char *)get_text(0,\"%s\\n (header %s, data %s)\\n\",5);\n  print(format_string,arch_mach,endian_string2,endian_string1);\n  allocated_size = open_bfd_file(*binary_info,*header_data);\n  if (allocated_size == 0) {\n    handle_bfd_fatal_error(*binary_info);\n    *(undefined4 *)(binary_info + 1) = 1;\n  }\n  else {\n    index = 2;\n    success_flag = set_bfd_format(allocated_size,1);\n    if (success_flag == '\\0') {\n      index = get_error_code();\n      if (index != 5) {\n        handle_bfd_fatal_error(*header_data);\n        *(undefined4 *)(binary_info + 1) = 1;\n      }\n    }\n    else {\n      do {\n        success_flag = (**(code **)(*(long *)(allocated_size + 8) + 0x2a0))(allocated_size,index,0);\n        if (success_flag != '\\0') {\n          arch_mach = bfd_handle_printable_arch(index,0);\n          print(\"  %s\\n\",arch_mach);\n          *(undefined *)\n           ((long)*(int *)((long)binary_info + 0xc) * 0x60 + binary_info[3] + -0x58 + (ulong)(index - 2)) =\n               1;\n        }\n        index = index + 1;\n      } while (index != 0x57);\n    }\n    cleanup(allocated_size);\n  }\n  return *(undefined4 *)(binary_info + 1);\n}\n\n",
            "current_name": "process_binary_data_00119f70",
            "entrypoint": "0x00119f70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119f70": "process_binary_data_00119f70",
                "__format": "format_string",
                "bfd_close_all_done": "cleanup",
                "bfd_get_error": "get_error_code",
                "bfd_nonfatal": "handle_bfd_fatal_error",
                "bfd_openw": "open_bfd_file",
                "bfd_printable_arch_mach": "bfd_handle_printable_arch",
                "bfd_set_format": "set_bfd_format",
                "cVar2": "success_flag",
                "dcgettext": "get_text",
                "endian_string": "convert_endian",
                "iVar3": "index",
                "lVar6": "allocated_size",
                "lVar8": "realloc_result",
                "memset": "zero_memory",
                "param_1": "header_data",
                "param_2": "binary_info",
                "printf": "print",
                "uVar1": "format_version",
                "uVar4": "endian_string1",
                "uVar5": "endian_string2",
                "uVar7": "arch_mach",
                "xrealloc": "resize_dynamic_mem"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a0e0": {
            "additional_data": {
                "FUN_001081e9": {
                    "generate_random_value": 1
                },
                "FUN_00114cf0": {
                    "remove_directory": 1
                },
                "FUN_0011a0e0": {
                    "create_temp_directory": 31
                },
                "__template": {
                    "directory_path": 2,
                    "directory_template": 1,
                    "template": 3,
                    "template_directory": 7,
                    "template_directory_path": 3,
                    "template_path": 14
                },
                "free": {
                    "free_memory": 1,
                    "release_memory": 4
                },
                "mkdtemp": {
                    "create_directory": 1,
                    "make_temp_directory": 12,
                    "make_temporary_directory": 3
                },
                "param_1": {
                    "template": 1
                },
                "pcVar1": {
                    "created_directory": 1,
                    "result": 4,
                    "temp_dir": 3,
                    "temp_dir_path": 2,
                    "temp_dir_result": 1,
                    "temp_directory": 7,
                    "temp_directory_path": 9,
                    "temporary_dir": 1,
                    "temporary_directory": 3
                },
                "template_in_dir": {
                    "get_template_directory": 13,
                    "get_template_directory_path": 1,
                    "get_template_in_directory": 1,
                    "get_template_path": 5
                }
            },
            "called": [
                "FUN_00104670",
                "FUN_001081e9",
                "FUN_00114cf0"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template_path;\n  char *temp_directory_path;\n  \n  template_path = (char *)get_template_directory();\n  temp_directory_path = make_temp_directory(template_path);\n  if (temp_directory_path == (char *)0x0) {\n    release_memory(template_path);\n  }\n  return temp_directory_path;\n}\n\n",
            "current_name": "create_temp_directory_0011a0e0",
            "entrypoint": "0x0011a0e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template_path",
                "free": "release_memory",
                "mkdtemp": "make_temp_directory",
                "pcVar1": "temp_directory_path",
                "template_in_dir": "get_template_directory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a110": {
            "additional_data": {
                "DAT_00127600": {
                    "program_name": 1
                },
                "FUN_0010871c": {
                    "initialize": 1
                },
                "FUN_0011a110": {
                    "handle_bfd_error": 1,
                    "print_bfd_error_message": 3,
                    "print_error": 4,
                    "print_error_message": 23
                },
                "_stderr": {
                    "standard_error": 1
                },
                "_stdout": {
                    "standard_output": 1
                },
                "iVar1": {
                    "bfd_error": 1,
                    "error": 15,
                    "error_code": 7,
                    "error_number": 1,
                    "error_status": 5,
                    "error_type": 2
                },
                "in_R10": {
                    "additional_data": 1,
                    "additional_info": 7,
                    "extra_data": 1,
                    "extra_info": 1,
                    "optional_message": 1,
                    "reserved": 1,
                    "unknown": 1,
                    "unknown_param": 1,
                    "unknown_parameter": 1,
                    "unknown_value": 1,
                    "unused_variable": 2
                },
                "param_1": {
                    "error": 1,
                    "error_code": 1,
                    "error_description": 4,
                    "error_message": 12,
                    "error_string": 2,
                    "error_type": 9,
                    "file_name": 1,
                    "filename": 1
                },
                "stderr": {
                    "standard_error": 1
                },
                "stdout": {
                    "standard_output": 1
                },
                "uVar2": {
                    "error_message": 20,
                    "error_message_description": 1,
                    "error_message_string": 1,
                    "error_message_text": 5,
                    "error_string": 4
                }
            },
            "called": [
                "FUN_00104370",
                "FUN_001047a0",
                "FUN_0010871c"
            ],
            "calling": [
                "FUN_001053d5",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_00115dc0",
                "FUN_00119f70",
                "FUN_001083b7"
            ],
            "code": "\n\n\nvoid print_bfd_error_message_0011a110(long error_message)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(standard_output);\n  if (error_message != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_00127600,error_message,error_message,additional_info);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_00127600,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_bfd_error_message_0011a110",
            "entrypoint": "0x0011a110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a110": "print_bfd_error_message_0011a110",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "iVar1": "error",
                "in_R10": "additional_info",
                "param_1": "error_message",
                "stderr": "standard_error",
                "stdout": "standard_output",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a170": {
            "additional_data": {
                "FUN_0011a170": {
                    "execute_fnmatch": 1,
                    "fnmatch_and_set": 2,
                    "match_and_set_flag": 1,
                    "match_and_toggle": 1,
                    "match_pattern": 14,
                    "match_strings": 1,
                    "pattern_match": 7,
                    "pattern_matching": 2,
                    "perform_pattern_match": 1,
                    "validate_pattern_match": 1
                },
                "__pattern": {
                    "current_pattern": 14,
                    "first_char": 1,
                    "pattern": 7,
                    "pattern_first_character": 1,
                    "pattern_ptr": 1,
                    "pattern_str": 1,
                    "pattern_string": 4,
                    "pattern_value": 1
                },
                "iVar1": {
                    "match_result": 21,
                    "result": 9
                },
                "param_1": {
                    "pattern": 25,
                    "pattern_list": 4,
                    "pattern_ptr": 1,
                    "patterns": 1
                },
                "param_2": {
                    "input": 4,
                    "input_list": 1,
                    "input_string": 14,
                    "string": 3,
                    "string_list": 2,
                    "string_ptr": 1,
                    "text": 6
                }
            },
            "called": [
                "FUN_00104340"
            ],
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "code": "\nint validate_pattern_match_0011a170(char **pattern,char **input_string)\n\n{\n  char *current_pattern;\n  int match_result;\n  \n  current_pattern = *pattern;\n  if (*current_pattern == '!') {\n    match_result = fnmatch(current_pattern + 1,*input_string,0);\n    if (match_result == 0) {\n      *(undefined *)(input_string + 1) = 0;\n      return match_result;\n    }\n  }\n  else {\n    match_result = fnmatch(current_pattern,*input_string,0);\n    if (match_result == 0) {\n      *(undefined *)(input_string + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "validate_pattern_match_0011a170",
            "entrypoint": "0x0011a170",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a170": "validate_pattern_match_0011a170",
                "__pattern": "current_pattern",
                "iVar1": "match_result",
                "param_1": "pattern",
                "param_2": "input_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a1b0": {
            "additional_data": {
                "FUN_0011a1b0": {
                    "compare_and_get_result": 1,
                    "compare_and_return": 1,
                    "compare_and_return_value": 1,
                    "compare_and_select": 4,
                    "compare_and_select_smallest": 1,
                    "compare_data": 1,
                    "compare_memory": 8,
                    "compare_memory_blocks": 2,
                    "compare_memory_regions": 4,
                    "compare_memory_segments": 1,
                    "compare_params": 3,
                    "compare_records": 3,
                    "compare_two_memory_regions": 1
                },
                "auVar5": {
                    "output": 5,
                    "output_array": 2,
                    "result": 8,
                    "result_array": 1,
                    "result_container": 1,
                    "return_val": 2,
                    "return_value": 11
                },
                "extraout_var": {
                    "comparison_result": 2,
                    "extra_out": 2,
                    "extra_out_variable": 1,
                    "extra_output_var": 2,
                    "extra_result": 2,
                    "extra_value": 1,
                    "extra_var": 4
                },
                "iVar3": {
                    "comparison_result": 17,
                    "memcmp_result": 6,
                    "memory_comparison_result": 1,
                    "result": 7
                },
                "param_1": {
                    "a_values": 1,
                    "array1": 4,
                    "array_1": 2,
                    "block1": 1,
                    "block_1": 1,
                    "buffer_1": 1,
                    "data1": 1,
                    "first_data": 1,
                    "input1": 1,
                    "input_1": 2,
                    "list1": 2,
                    "memory1": 1,
                    "memory_block1": 1,
                    "memory_region1": 2,
                    "option_1": 1,
                    "param1": 1,
                    "param_a": 1,
                    "record1": 3,
                    "region1": 1,
                    "segment1": 1,
                    "size1": 1,
                    "source_memory": 1
                },
                "param_2": {
                    "array2": 4,
                    "array_2": 2,
                    "b_values": 1,
                    "block2": 1,
                    "block_2": 1,
                    "buffer_2": 1,
                    "data2": 1,
                    "destination_memory": 1,
                    "input2": 1,
                    "input_2": 2,
                    "list2": 2,
                    "memory2": 1,
                    "memory_block2": 1,
                    "memory_region2": 2,
                    "option_2": 1,
                    "param2": 1,
                    "param_b": 1,
                    "record2": 3,
                    "region2": 1,
                    "second_data": 1,
                    "segment2": 1,
                    "size2": 1
                },
                "param_3": {
                    "data_1": 2,
                    "extra_param_1": 1,
                    "extra_var1": 1,
                    "input1": 1,
                    "input_parameter1": 1,
                    "param1": 4,
                    "param3": 3,
                    "param_3": 5,
                    "param_a": 1,
                    "size": 1,
                    "size1": 1,
                    "size_param_1": 1,
                    "unknown1": 1,
                    "unused_param1": 1,
                    "value1": 4,
                    "value_1": 2,
                    "value_a": 1
                },
                "param_4": {
                    "data_2": 2,
                    "extra_param_2": 1,
                    "extra_var2": 1,
                    "input2": 1,
                    "input_parameter2": 1,
                    "param2": 4,
                    "param4": 3,
                    "param_4": 5,
                    "param_b": 1,
                    "result": 1,
                    "size2": 1,
                    "size_param_2": 1,
                    "unknown2": 1,
                    "unused_param2": 1,
                    "value2": 4,
                    "value_2": 2,
                    "value_b": 1
                },
                "uVar1": {
                    "a_value_8": 1,
                    "array1_length": 1,
                    "array1_size": 1,
                    "block1_size": 1,
                    "block_1_offset_2": 1,
                    "buffer_1_size": 1,
                    "data1_length": 1,
                    "end_address1": 1,
                    "first_data_index": 1,
                    "input1_len": 1,
                    "input_1_max_len": 1,
                    "length_a": 1,
                    "list1_element8": 1,
                    "list1_length": 1,
                    "memory_region1_end": 1,
                    "option_1_index": 1,
                    "param1_value": 1,
                    "record1_index": 1,
                    "record1_size": 2,
                    "region1_end": 1,
                    "region1_size": 1,
                    "size1": 3,
                    "size_1": 1,
                    "size_array_1": 1,
                    "source_size": 1,
                    "value1": 1,
                    "value_1": 1,
                    "var1": 1
                },
                "uVar2": {
                    "array2_length": 1,
                    "array2_size": 1,
                    "b_value_8": 1,
                    "block2_size": 1,
                    "block_2_offset_2": 1,
                    "buffer_2_size": 1,
                    "data2_length": 1,
                    "destination_size": 1,
                    "end_address2": 1,
                    "input2_len": 1,
                    "input_2_max_len": 1,
                    "length_b": 1,
                    "list2_element8": 1,
                    "list2_length": 1,
                    "memory_region2_end": 1,
                    "option_2_index": 1,
                    "param2_value": 1,
                    "record2_index": 1,
                    "record2_size": 2,
                    "region2_end": 1,
                    "region2_size": 1,
                    "second_data_index": 1,
                    "size2": 3,
                    "size_2": 1,
                    "size_array_2": 1,
                    "value2": 1,
                    "value_2": 1,
                    "var2": 1
                },
                "uVar4": {
                    "combined_result": 12,
                    "comparison_result": 2,
                    "final_result": 9,
                    "function_result": 1,
                    "result": 5,
                    "return_value": 2
                }
            },
            "called": [
                "FUN_00104420",
                "FUN_001087da"
            ],
            "calling": [
                "FUN_001086af"
            ],
            "code": "\nundefined  [16] compare_two_memory_regions_0011a1b0(ulong *array1,ulong *array2,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong size1;\n  ulong size2;\n  int comparison_result;\n  undefined4 extra_var;\n  ulong combined_result;\n  undefined return_value [16];\n  \n  combined_result = *array1;\n  if (*array2 <= *array1) {\n    combined_result = *array2;\n  }\n  comparison_result = memcmp((void *)(array1[3] + 3),(void *)(array2[3] + 3),combined_result - 3);\n  combined_result = CONCAT44(extra_var,comparison_result);\n  if (comparison_result == 0) {\n    size1 = array1[8];\n    if (size1 < array2[7]) {\n      combined_result = 0xffffffff;\n    }\n    else {\n      size2 = array2[8];\n      if (size2 < array1[7]) {\n        combined_result = 1;\n      }\n      else {\n        combined_result = 0xffffffff;\n        if (array2[7] <= array1[7]) {\n          if (size2 < size1) {\n            combined_result = 1;\n          }\n          else {\n            combined_result = 0xffffffff;\n            if (size2 <= size1) {\n              if (array1[2] == 0x100) {\n                combined_result = (ulong)-(uint)(array2[2] != 0x100);\n              }\n              else {\n                combined_result = (ulong)(array2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return_value._8_8_ = param_4;\n  return_value._0_8_ = combined_result;\n  return return_value;\n}\n\n",
            "current_name": "compare_two_memory_regions_0011a1b0",
            "entrypoint": "0x0011a1b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a1b0": "compare_two_memory_regions_0011a1b0",
                "auVar5": "return_value",
                "extraout_var": "extra_var",
                "iVar3": "comparison_result",
                "param_1": "array1",
                "param_2": "array2",
                "uVar1": "size1",
                "uVar2": "size2",
                "uVar4": "combined_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a250": {
            "additional_data": {
                "0": {
                    "equal": 1,
                    "record1_field0": 1
                },
                "0x100": {
                    "constant_value": 1
                },
                "1": {
                    "greater_than": 1,
                    "record1_field1": 1
                },
                "2": {
                    "record1_field2": 1
                },
                "3": {
                    "character_offset": 1,
                    "record2_field3": 1,
                    "record_data": 1,
                    "record_type": 1
                },
                "4": {
                    "min_length": 1,
                    "min_value": 1,
                    "minimum_value": 1,
                    "record1_field4": 1,
                    "record_size": 1
                },
                "5": {
                    "record1_field5": 1
                },
                "6": {
                    "record1_field6": 1
                },
                "7": {
                    "record2_field7": 1,
                    "timestamp_1": 1
                },
                "8": {
                    "record2_field8": 1,
                    "timestamp_2": 1
                },
                "FUN_001087fd": {
                    "get_data_inline": 1,
                    "get_default_value": 1,
                    "get_random_value": 1,
                    "get_value": 1
                },
                "FUN_0011a250": {
                    "compare_data": 3,
                    "compare_entries": 1,
                    "compare_param_values": 2,
                    "compare_params": 1,
                    "compare_records": 24
                },
                "arg1": {
                    "4": 1
                },
                "arg2": {
                    "4": 1
                },
                "char": {
                    "character": 1
                },
                "char_1": {
                    "record_1_char": 1
                },
                "char_2": {
                    "record_2_char": 1
                },
                "else": {
                    "value": 1
                },
                "int": {
                    "result": 1
                },
                "param_1": {
                    "array_1": 1,
                    "data1": 1,
                    "data_1": 2,
                    "entry_1": 1,
                    "list_1": 1,
                    "param_a": 1,
                    "record1": 14,
                    "record_1": 10
                },
                "param_2": {
                    "array_2": 1,
                    "data2": 1,
                    "data_2": 2,
                    "entry_2": 1,
                    "list_2": 1,
                    "param_b": 1,
                    "record2": 14,
                    "record_2": 10
                },
                "uVar1": {
                    "data1_u_var": 1,
                    "data_1_value": 2,
                    "entry_1_value": 1,
                    "record1_field2": 3,
                    "record1_flag": 2,
                    "record1_second_value": 1,
                    "record1_status": 1,
                    "record1_timestamp": 1,
                    "record1_val2": 1,
                    "record1_value": 5,
                    "record1_value2": 1,
                    "record_1_field": 1,
                    "record_1_flag": 2,
                    "record_1_key": 1,
                    "record_1_last_value": 1,
                    "record_1_status": 1,
                    "record_1_value": 1,
                    "record_1_var": 1,
                    "value_1": 2,
                    "value_a2": 1
                },
                "uVar2": {
                    "record_2_status": 1
                }
            },
            "called": [
                "FUN_001087fd"
            ],
            "calling": [
                "FUN_00116852"
            ],
            "code": "\nresult compare_records_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_value;\n  \n  record1_value = record1[2];\n  if (record1_value == record2[2]) {\n    if (record2[7] <= record1[7]) {\n      if (record1[7] <= record2[7]) {\n        if (record2[8] < record1[8]) {\n          return -1;\n        }\n        if (record2[8] <= record1[8]) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(character *)(record1[3] + 3) != *(character *)(record2[3] + 3)) {\n              return (result)*(character *)(record1[3] + 3) - (result)*(character *)(record2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  value if ((record1_value == 0) || ((record1_value != 0x100 && (record2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "current_name": "compare_records_0011a250",
            "entrypoint": "0x0011a250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "char": "character",
                "else": "value",
                "int": "result",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a2e0": {
            "additional_data": {
                "FUN_0011a2e0": {
                    "extract_and_assign_section": 1,
                    "extract_and_copy_section": 2,
                    "extract_function_data": 1,
                    "extract_section": 6,
                    "extract_section_data": 3,
                    "extract_section_info": 14,
                    "extract_section_information": 1,
                    "initialize_section_info": 1,
                    "relocate_section": 1,
                    "update_section_info": 1
                },
                "PTR_FUN_00108808": {
                    "get_section_by_name": 1
                },
                "bfd_get_section_by_name": {
                    "get_section_by_name": 2
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "fatal": {
                    "handle_error": 1
                },
                "lVar3": {
                    "extracted_data": 1,
                    "extracted_section": 3,
                    "new_section": 2,
                    "new_section_info": 1,
                    "section": 1,
                    "section_copy": 1,
                    "section_data": 2,
                    "section_data_result": 1,
                    "section_handle": 1,
                    "section_header": 1,
                    "section_info": 9,
                    "section_info_ptr": 2,
                    "section_ptr": 6
                },
                "lVar4": {
                    "section": 2,
                    "section_address": 3,
                    "section_id": 1,
                    "section_name": 6,
                    "section_name_id": 1,
                    "section_name_offset": 1,
                    "section_name_ptr": 4,
                    "section_offset": 1,
                    "section_pointer": 3,
                    "section_ptr": 9
                },
                "param_1": {
                    "binary_header": 1,
                    "binary_info": 3,
                    "function_data": 1,
                    "info_source": 1,
                    "input_data": 1,
                    "input_ptr": 1,
                    "param_ptr": 2,
                    "section_data": 4,
                    "section_header": 1,
                    "section_info": 4,
                    "section_info_ptr": 3,
                    "source": 2,
                    "source_address": 1,
                    "source_binary": 1,
                    "source_data": 1,
                    "source_section": 2,
                    "source_struct": 1,
                    "src_section": 1
                },
                "param_2": {
                    "bfd_handle": 2,
                    "binary": 8,
                    "binary_data": 4,
                    "binary_file": 3,
                    "binary_handle": 3,
                    "binary_ptr": 6,
                    "destination_binary": 1,
                    "param": 1,
                    "section": 1,
                    "section_name": 1,
                    "target_binary": 1
                },
                "uVar1": {
                    "section_address": 2,
                    "section_data_ptr": 1,
                    "section_header_value": 1,
                    "section_info_ptr": 1,
                    "section_name": 4,
                    "section_name_ptr": 1,
                    "section_ptr": 1,
                    "source_section_ptr": 1
                },
                "uVar2": {
                    "error_message": 7,
                    "error_msg": 4,
                    "section_not_found_msg": 1
                }
            },
            "called": [
                "FUN_00108808",
                "FUN_00104400"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nlong extract_section_info_0011a2e0(long section_info,long binary)\n\n{\n  undefined8 section_name;\n  undefined8 error_message;\n  long section_info;\n  long section_ptr;\n  \n  section_info = (**(code **)(*(long *)(binary + 8) + 0x208))(binary);\n  section_ptr = *(long *)(section_info + 0x20);\n  *(undefined8 *)(section_info + 8) = *(undefined8 *)(section_info + 8);\n  *(undefined8 *)(section_info + 0x10) = *(undefined8 *)(section_info + 0x10);\n  *(undefined4 *)(section_info + 0x18) = *(undefined4 *)(section_info + 0x18);\n  if (section_ptr == 0) {\n    section_ptr = 0x128598;\n  }\n  else {\n    section_ptr = get_section_by_name(binary);\n    if (section_ptr == 0) {\n      section_name = *(undefined8 *)(section_info + 0x20);\n      error_message = get_error_message(0,\"Section %s not found\",5);\n                    \n      handle_error(error_message,section_name);\n    }\n  }\n  *(long *)(section_info + 0x20) = section_ptr;\n  return section_info;\n}\n\n",
            "current_name": "extract_section_info_0011a2e0",
            "entrypoint": "0x0011a2e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a2e0": "extract_section_info_0011a2e0",
                "bfd_get_section_by_name": "get_section_by_name",
                "dcgettext": "get_error_message",
                "fatal": "handle_error",
                "lVar3": "section_info",
                "lVar4": "section_ptr",
                "param_1": "section_info",
                "param_2": "binary",
                "uVar1": "section_name",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a350": {
            "additional_data": {
                "FUN_0010882c": {
                    "initialize_localization": 1
                },
                "FUN_0011a350": {
                    "set_file_modification_time": 3,
                    "set_file_time": 19,
                    "set_file_timestamp": 6,
                    "set_file_timestamps": 2,
                    "set_time": 1
                },
                "dcgettext": {
                    "get_translated_string": 1
                },
                "iVar1": {
                    "result": 22,
                    "result_code": 1,
                    "return_code": 1,
                    "return_value": 1,
                    "status": 1
                },
                "local_28": {
                    "backup_file_time": 1,
                    "backup_time": 1,
                    "file_mode": 1,
                    "file_permissions": 1,
                    "flags": 1,
                    "modification_time": 6,
                    "parent_directory": 1,
                    "saved_access_time": 1,
                    "status_mask": 1,
                    "time_spec2": 1,
                    "time_spec_value": 1,
                    "timestamp_param_5": 1,
                    "tv_nsec": 1
                },
                "local_38": {
                    "access_time": 13,
                    "atime": 1,
                    "file_time": 1,
                    "modification_time": 2,
                    "old_time1": 1,
                    "time_sec": 1,
                    "time_spec": 1,
                    "time_spec1": 1,
                    "timestamp": 3,
                    "timestamp_param_1": 1,
                    "tv": 1
                },
                "local_48": {
                    "error": 1
                },
                "non_fatal": {
                    "handle_non_fatal_error": 1
                },
                "param_1": {
                    "file_name": 1,
                    "file_path": 27,
                    "filename": 2,
                    "filepath": 1
                },
                "param_2": {
                    "data_struct": 1,
                    "file_attributes": 1,
                    "file_data": 1,
                    "file_info": 25,
                    "file_info_ptr": 1,
                    "file_metadata": 1,
                    "file_parameters": 1
                },
                "pcVar3": {
                    "err_msg": 2,
                    "error_message": 11,
                    "error_msg": 7,
                    "error_str": 2,
                    "error_string": 5
                },
                "piVar2": {
                    "err_code": 1,
                    "err_num": 1,
                    "errno_location": 3,
                    "errno_pointer": 1,
                    "errno_ptr": 9,
                    "error": 3,
                    "error_code_ptr": 2,
                    "error_number": 1,
                    "error_number_pointer": 1,
                    "error_pointer": 1,
                    "error_ptr": 3
                },
                "setFileTime": {
                    "void": 1
                },
                "strerror": {
                    "get_error_string": 1
                },
                "uStack_1c": {
                    "backup_time": 1,
                    "change_time": 1,
                    "saved_birth_time": 1
                },
                "uStack_20": {
                    "creation_time": 1,
                    "modification_time": 1,
                    "saved_change_time": 1
                },
                "uStack_24": {
                    "access_time": 1,
                    "change_time": 1,
                    "saved_mod_time": 1
                },
                "uStack_2c": {
                    "birth_time": 4,
                    "creation_time": 2,
                    "duration": 1,
                    "modification_time_nsec": 1,
                    "new_time": 1,
                    "old_time4": 1,
                    "stack_var2c": 1,
                    "timestamp_param_4": 1,
                    "tmp3": 1,
                    "unused_3": 1
                },
                "uStack_30": {
                    "change_time": 6,
                    "ctime": 1,
                    "modification_time": 1,
                    "old_time3": 1,
                    "stack_var30": 1,
                    "status_change_time": 1,
                    "timestamp_param_3": 1,
                    "tmp2": 1,
                    "unused_2": 1
                },
                "uStack_34": {
                    "access_time": 1,
                    "access_time_nsec": 1,
                    "mod_time": 2,
                    "modification_time": 3,
                    "mtime": 2,
                    "old_time2": 1,
                    "stack_var34": 1,
                    "timestamp_param_2": 1,
                    "tmp1": 1,
                    "unused_1": 1
                },
                "uVar4": {
                    "error_msg": 2,
                    "error_str": 1,
                    "error_string": 2,
                    "error_text": 1,
                    "gettext_message": 1,
                    "localized_err_msg": 1,
                    "localized_error": 4,
                    "localized_error_message": 5,
                    "localized_error_msg": 2,
                    "translated_error": 1,
                    "translated_error_message": 4,
                    "translated_error_msg": 1,
                    "translated_message": 1
                },
                "utimensat": {
                    "set_file_attributes": 1
                }
            },
            "called": [
                "FUN_0010882c",
                "FUN_00104060"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "code": "\nvoid set_file_modification_time_0011a350(char *file_path,long file_info)\n\n{\n  int result;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 localized_error_message;\n  undefined4 access_time;\n  undefined4 modification_time;\n  undefined4 change_time;\n  undefined4 birth_time;\n  undefined4 modification_time;\n  undefined4 change_time;\n  undefined4 creation_time;\n  undefined4 change_time;\n  \n  modification_time = *(undefined4 *)(file_info + 0x58);\n  change_time = *(undefined4 *)(file_info + 0x5c);\n  creation_time = *(undefined4 *)(file_info + 0x60);\n  change_time = *(undefined4 *)(file_info + 100);\n  access_time = *(undefined4 *)(file_info + 0x48);\n  modification_time = *(undefined4 *)(file_info + 0x4c);\n  change_time = *(undefined4 *)(file_info + 0x50);\n  birth_time = *(undefined4 *)(file_info + 0x54);\n  result = set_file_attributes(-100,file_path,(timespec *)&access_time,0);\n  if (result != 0) {\n    errno_ptr = __errno_location();\n    error_message = get_error_string(*errno_ptr);\n    localized_error_message = get_translated_string(0,\"%s: cannot set time: %s\",5);\n    handle_non_fatal_error(localized_error_message,file_path,error_message);\n  }\n  return;\n}\n\n",
            "current_name": "set_file_modification_time_0011a350",
            "entrypoint": "0x0011a350",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a350": "set_file_modification_time_0011a350",
                "dcgettext": "get_translated_string",
                "iVar1": "result",
                "local_28": "modification_time",
                "local_38": "access_time",
                "non_fatal": "handle_non_fatal_error",
                "param_1": "file_path",
                "param_2": "file_info",
                "pcVar3": "error_message",
                "piVar2": "errno_ptr",
                "strerror": "get_error_string",
                "uStack_1c": "change_time",
                "uStack_20": "creation_time",
                "uStack_24": "change_time",
                "uStack_2c": "birth_time",
                "uStack_30": "change_time",
                "uStack_34": "modification_time",
                "uVar4": "localized_error_message",
                "utimensat": "set_file_attributes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a390": {
            "additional_data": {
                "FUN_0011a390": {
                    "execute_callbacks": 1,
                    "execute_function_chain": 10,
                    "execute_functions": 6,
                    "execute_nested_functions": 1,
                    "execute_reverse_callbacks": 1,
                    "execute_tasks": 1,
                    "process_functions": 1,
                    "run_func": 1
                },
                "lVar1": {
                    "current_function_index": 1,
                    "current_index": 9,
                    "i": 1,
                    "index": 14,
                    "index1": 1,
                    "iteration_index": 1,
                    "last_index": 2,
                    "temp1": 1
                },
                "lVar2": {
                    "current_index": 2,
                    "index2": 1,
                    "j": 1,
                    "prev_index": 9,
                    "prev_iteration_index": 1,
                    "previous_function_index": 1,
                    "previous_index": 9,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_index": 3
                },
                "lVar3": {
                    "index": 1,
                    "index3": 1,
                    "inner_index": 1,
                    "k": 1,
                    "loop_index": 6,
                    "prev_prev_iteration_index": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_index": 17
                },
                "plVar4": {
                    "callback_list": 2,
                    "func_table": 1,
                    "function_array": 2,
                    "function_chain": 6,
                    "function_list": 5,
                    "function_pointer": 3,
                    "function_pointers": 5,
                    "function_ptr": 3,
                    "function_table": 1,
                    "task_list": 1
                },
                "uVar5": {
                    "bit_mask": 1,
                    "callback_index": 1,
                    "callback_type": 1,
                    "count": 3,
                    "counter": 4,
                    "current_index": 1,
                    "flag": 1,
                    "func_flags": 1,
                    "function_count": 1,
                    "index": 4,
                    "loop_count": 1,
                    "loop_counter": 2,
                    "num_funcs": 1,
                    "num_functions": 5,
                    "remaining_calls": 1,
                    "shift_amount": 1,
                    "sub_index": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid execute_function_chain_0011a390(void)\n\n{\n  long index;\n  long previous_index;\n  long temp_index;\n  long *function_chain;\n  uint num_functions;\n  \n  function_chain = (long *)PTR_DAT_001264e0;\n  if (PTR_DAT_001264e0 != (undefined *)0x0) {\n    do {\n      num_functions = *(int *)(function_chain + 1) - 1;\n      if (-1 < (int)num_functions) {\n        index = (long)(int)num_functions;\n        num_functions = num_functions & 7;\n        (*(code *)function_chain[index + 2])();\n        previous_index = index + -1;\n        if (-1 < (int)previous_index) {\n          temp_index = previous_index;\n          if (num_functions != 0) {\n            if (num_functions != 1) {\n              if (num_functions != 2) {\n                if (num_functions != 3) {\n                  if (num_functions != 4) {\n                    if (num_functions != 5) {\n                      if (num_functions != 6) {\n                        (*(code *)function_chain[index + 1])();\n                        previous_index = index + -2;\n                      }\n                      (*(code *)function_chain[previous_index + 2])();\n                      previous_index = previous_index + -1;\n                    }\n                    (*(code *)function_chain[previous_index + 2])();\n                    previous_index = previous_index + -1;\n                  }\n                  (*(code *)function_chain[previous_index + 2])();\n                  previous_index = previous_index + -1;\n                }\n                (*(code *)function_chain[previous_index + 2])();\n                previous_index = previous_index + -1;\n              }\n              (*(code *)function_chain[previous_index + 2])();\n              previous_index = previous_index + -1;\n            }\n            (*(code *)function_chain[previous_index + 2])();\n            temp_index = previous_index + -1;\n            if ((int)(previous_index + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)function_chain[temp_index + 2])();\n            index = temp_index + -1;\n            (*(code *)function_chain[temp_index + 1])();\n            (*(code *)function_chain[temp_index])();\n            (*(code *)function_chain[index])();\n            (*(code *)function_chain[temp_index + -2])();\n            (*(code *)function_chain[temp_index + -3])();\n            (*(code *)function_chain[temp_index + -4])();\n            (*(code *)function_chain[temp_index + -5])();\n            temp_index = temp_index + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      function_chain = (long *)*function_chain;\n    } while (function_chain != (long *)0x0);\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_chain_0011a390",
            "entrypoint": "0x0011a390",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a390": "execute_function_chain_0011a390",
                "lVar1": "index",
                "lVar2": "previous_index",
                "lVar3": "temp_index",
                "plVar4": "function_chain",
                "uVar5": "num_functions"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a480": {
            "additional_data": {
                "FUN_0011a480": {
                    "copy_and_null_terminate_string": 5,
                    "copy_and_terminate_string": 1,
                    "copy_string": 18,
                    "copy_string_and_null_terminate": 1,
                    "copy_string_and_terminate": 1,
                    "copy_string_with_length": 1,
                    "copy_string_with_length_check": 1,
                    "copy_string_with_null_terminator": 3
                },
                "__dest": {
                    "copied_string": 9,
                    "copy": 1,
                    "destination": 4,
                    "destination_buffer": 1,
                    "destination_string": 14,
                    "new_string": 2
                },
                "__n": {
                    "length": 9,
                    "source_length": 3,
                    "str_length": 1,
                    "string_length": 18
                },
                "param_1": {
                    "input_string": 5,
                    "original_string": 1,
                    "source": 4,
                    "source_string": 20,
                    "string": 1
                },
                "param_2": {
                    "input_length": 1,
                    "input_string_length": 1,
                    "length": 1,
                    "max_length": 21,
                    "max_size": 1,
                    "size": 2,
                    "source_length": 3,
                    "string_length": 1
                }
            },
            "called": [
                "FUN_00104540",
                "FUN_00104390",
                "FUN_00104380"
            ],
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90"
            ],
            "code": "\nvoid copy_string_and_null_terminate_0011a480(char *source_string,size_t max_length)\n\n{\n  size_t string_length;\n  void *destination_string;\n  \n  string_length = strnlen(source_string,max_length);\n  destination_string = (void *)xmalloc(string_length + 1);\n  *(undefined *)((long)destination_string + string_length) = 0;\n  memcpy(destination_string,source_string,string_length);\n  return;\n}\n\n",
            "current_name": "copy_string_and_null_terminate_0011a480",
            "entrypoint": "0x0011a480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a480": "copy_string_and_null_terminate_0011a480",
                "__dest": "destination_string",
                "__n": "string_length",
                "param_1": "source_string",
                "param_2": "max_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a4b4": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_0011a4b4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0011a4b4",
            "entrypoint": "0x0011a4b4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0011a4b4": "FUNC_0011a4b4"
            },
            "skipped": true,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00104000",
            "FUN_00104020",
            "FUN_00104920",
            "FUN_00104943",
            "FUN_00104966",
            "FUN_00104a35",
            "FUN_00104ad6",
            "FUN_00104bba",
            "FUN_00104c36",
            "FUN_00104d1c",
            "FUN_001052a2",
            "FUN_001053b5",
            "FUN_001053d5",
            "FUN_0010540e",
            "FUN_0010543c",
            "FUN_001054af",
            "FUN_0010554f",
            "FUN_00105828",
            "FUN_0010808f",
            "FUN_001081e9",
            "FUN_00108200",
            "FUN_00108237",
            "FUN_0010827b",
            "FUN_001082b3",
            "FUN_001082c3",
            "FUN_001082df",
            "FUN_00108375",
            "FUN_001083b7",
            "FUN_001083de",
            "FUN_00108466",
            "FUN_0010870e",
            "FUN_0010871c",
            "FUN_0010875d",
            "FUN_001087da",
            "FUN_001087fd",
            "FUN_00108800",
            "FUN_00108808",
            "FUN_0010882c",
            "FUN_00108863",
            "FUN_00108898",
            "FUN_001088ae",
            "FUN_00108916",
            "FUN_00108a2a",
            "FUN_00108b3e",
            "FUN_00108c86",
            "FUN_00108d9a",
            "FUN_00108e76",
            "FUN_00108ea1",
            "FUN_00108f05",
            "FUN_00108f08",
            "FUN_00108fb9",
            "FUN_00108fe8",
            "FUN_00109022",
            "FUN_0010911f",
            "FUN_0010914e",
            "FUN_00109a0b",
            "FUN_00109a32",
            "FUN_00109ab1",
            "FUN_00109b2f",
            "FUN_00109b52",
            "FUN_00109bbb",
            "FUN_00109be3",
            "FUN_00109c2e",
            "FUN_00109cf4",
            "FUN_00109d3e",
            "FUN_00109d5c",
            "FUN_00109d97",
            "FUN_00109dfe",
            "FUN_00109e76",
            "FUN_00109ed3",
            "FUN_0010a083",
            "FUN_0010a0a0",
            "FUN_0010a0bd",
            "FUN_0010a0d3",
            "FUN_0010a0e9",
            "FUN_0010a181",
            "FUN_0010a2b9",
            "FUN_0010a377",
            "FUN_0010a424",
            "FUN_0010a69a",
            "FUN_0010a77a",
            "FUN_0010a83e",
            "FUN_0010a94e",
            "FUN_0010aa53",
            "FUN_0010ab4d",
            "FUN_0010abdd",
            "FUN_0010add5",
            "FUN_0010adf2",
            "FUN_0010ae0e",
            "FUN_0010afd5",
            "FUN_0010b6ea",
            "FUN_0010b800",
            "FUN_0010b948",
            "FUN_0010ba08",
            "FUN_0010bb52",
            "FUN_0010bba1",
            "FUN_0010bbd3",
            "FUN_0010bc80",
            "FUN_0010bd62",
            "FUN_0010be1a",
            "FUN_0010be88",
            "FUN_0010bf20",
            "FUN_0010bf86",
            "FUN_0010c05d",
            "FUN_0010c139",
            "FUN_0010c1c6",
            "FUN_0010c218",
            "FUN_0010c2d2",
            "FUN_0010c6be",
            "FUN_0010c7a0",
            "FUN_0010c892",
            "FUN_0010d21c",
            "FUN_0010d559",
            "FUN_0010d7d4",
            "FUN_0010d882",
            "FUN_0010da0b",
            "FUN_0010e07c",
            "FUN_0010e2f0",
            "FUN_0010e439",
            "FUN_0010e453",
            "FUN_0010e5db",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010e842",
            "FUN_0010e8a9",
            "FUN_0010e918",
            "FUN_0010e9a0",
            "FUN_0010eafe",
            "FUN_0010ebb0",
            "FUN_0010ec73",
            "FUN_0010ed2c",
            "FUN_0010edb4",
            "FUN_0011173a",
            "FUN_00112502",
            "FUN_0011256b",
            "FUN_001125fa",
            "FUN_001126c0",
            "FUN_0011283f",
            "FUN_00112894",
            "FUN_00112904",
            "FUN_00112925",
            "FUN_00112996",
            "FUN_001129f4",
            "FUN_00112a33",
            "FUN_001135a5",
            "FUN_0011378f",
            "FUN_00113b1e",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00113b98",
            "FUN_00113bfa",
            "FUN_00113c43",
            "FUN_00113cb9",
            "FUN_00113ce0",
            "FUN_00113d3a",
            "FUN_00113d6e",
            "FUN_00113da9",
            "FUN_00113df2",
            "FUN_00113dfe",
            "FUN_00113e17",
            "FUN_00113e23",
            "FUN_00113e5e",
            "FUN_00113ede",
            "FUN_00113f20",
            "FUN_00113f50",
            "FUN_00113fb0",
            "FUN_00113fe0",
            "FUN_00114190",
            "FUN_00114b84",
            "FUN_00114c20",
            "FUN_00114c80",
            "FUN_00114cf0",
            "FUN_00114d50",
            "FUN_00114d60",
            "FUN_00114dc7",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_001159d0",
            "FUN_00115a90",
            "FUN_00115d00",
            "FUN_00115d70",
            "FUN_00115dc0",
            "FUN_00115f30",
            "FUN_00115f50",
            "FUN_00116030",
            "FUN_00116852",
            "FUN_00116aa0",
            "FUN_00116b40",
            "FUN_00119940",
            "FUN_00119970",
            "FUN_001199d0",
            "FUN_00119dd0",
            "FUN_00119e70",
            "FUN_00119ed0",
            "FUN_00119f70",
            "FUN_0011a0e0",
            "FUN_0011a110",
            "FUN_0011a170",
            "FUN_0011a1b0",
            "FUN_0011a250",
            "FUN_0011a2e0",
            "FUN_0011a350",
            "FUN_0011a390",
            "FUN_0011a480"
        ],
        [
            "FUN_00104cc1",
            "FUN_00104d25",
            "FUN_00104ea2",
            "FUN_0010551d",
            "FUN_00108179",
            "FUN_0010829e",
            "FUN_00114460",
            "FUN_00114690",
            "FUN_00116110"
        ],
        [
            "FUN_00108072",
            "FUN_00115530",
            "FUN_00115b70"
        ],
        [
            "FUN_0010922b",
            "FUN_0010b0fa",
            "FUN_0010c95e",
            "FUN_0010dac0",
            "FUN_00112b6e",
            "FUN_00112c1f",
            "FUN_00113a4d"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 1252032
}