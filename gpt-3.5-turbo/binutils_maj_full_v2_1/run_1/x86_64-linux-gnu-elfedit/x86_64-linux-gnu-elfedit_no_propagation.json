{
    "functions": {
        "FUN_00102020": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_00102020": {
                    "": 1
                },
                "F1": {
                    "execute_indirect_jump": 1
                },
                "FUN_00102020": {
                    "call_indirect_jump": 2,
                    "execute_code_at_address": 1,
                    "execute_function": 1,
                    "execute_function_at_address": 2,
                    "execute_function_pointer": 1,
                    "execute_indirect_call": 6,
                    "execute_indirect_function": 1,
                    "execute_indirect_jump": 15
                },
                "PTR_0": {
                    "ptr_to_func": 1
                },
                "PTR_00102020": {
                    "": 1
                },
                "code": {
                    "func_ptr": 1,
                    "function_code": 1,
                    "function_pointer": 2,
                    "function_to_call": 1,
                    "indirect_jump_function": 1
                },
                "undefined": {
                    "": 1,
                    "func_pointer": 1,
                    "func_ptr": 1,
                    "function_pointer": 3,
                    "ptr_to_data": 1,
                    "ptr_zero": 1,
                    "target_address": 2
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(function_pointer *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer",
                "undefined": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001022c0": {
            "additional_data": {
                "DAT_00109440": {
                    "feature_flag1": 1
                },
                "DAT_00109444": {
                    "feature_flag2": 1
                },
                "FUN_001022c0": {
                    "update_feature": 1,
                    "update_feature_flags": 4,
                    "update_features": 1,
                    "update_x86_feature": 13,
                    "update_x86_feature_flags": 1,
                    "update_x86_features": 11
                },
                "auVar4": {
                    "result": 11,
                    "result_variable": 1,
                    "return_value": 6,
                    "return_values": 1
                },
                "iVar1": {
                    "comparison_result": 14,
                    "name_comparison": 1,
                    "result": 1,
                    "strcasecmp_result": 5
                },
                "uVar2": {
                    "bit_mask": 1,
                    "bitmask": 1,
                    "feature_bitmask": 1,
                    "feature_flag": 3,
                    "feature_mask": 11,
                    "feature_value": 11,
                    "flag": 1,
                    "mask": 1
                },
                "uVar3": {
                    "error_message": 30
                },
                "unaff_EBP": {
                    "enable_flag": 1,
                    "flag": 4,
                    "is_disabled": 1,
                    "is_enable": 3,
                    "is_enabled": 7,
                    "is_feature_enabled": 1,
                    "is_reset": 1,
                    "is_set": 8,
                    "is_x86": 1,
                    "is_zero": 1,
                    "set_bit": 1,
                    "set_flag": 1,
                    "update_mode": 1
                },
                "unaff_RBX": {
                    "feature": 12,
                    "feature_name": 17,
                    "x86_feature": 2
                },
                "unaff_retaddr": {
                    "return_address": 17
                }
            },
            "called": [
                "dcgettext",
                "strcasecmp",
                "error"
            ],
            "calling": [
                "FUN_00104c60"
            ],
            "code": "\nundefined  [16] update_x86_feature_flags_001022c0(void)\n\n{\n  int comparison_result;\n  uint feature_value;\n  undefined8 error_message;\n  char *feature_name;\n  int is_set;\n  undefined result [16];\n  undefined8 return_address;\n  \n  comparison_result = strcasecmp(feature_name,\"lam_u48\");\n  if (comparison_result == 0) {\n    feature_value = 4;\n  }\n  else {\n    comparison_result = strcasecmp(feature_name,\"lam_u57\");\n    feature_value = 8;\n    if (comparison_result != 0) {\n      error_message = dcgettext(0,\"Unknown x86 feature: %s\\n\",5);\n      error(error_message);\n      error_message = 0xffffffff;\n      goto LAB_00104ca5;\n    }\n  }\n  if (is_set == 0) {\n    DAT_00109440 = feature_value | DAT_00109440;\n    DAT_00109444 = ~feature_value & DAT_00109444;\n  }\n  else {\n    DAT_00109444 = feature_value | DAT_00109444;\n    DAT_00109440 = DAT_00109440 & ~feature_value;\n  }\n  error_message = 0;\nLAB_00104ca5:\n  result._8_8_ = return_address;\n  result._0_8_ = error_message;\n  return result;\n}\n\n",
            "current_name": "update_x86_feature_flags_001022c0",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001022c0": "update_x86_feature_flags_001022c0",
                "auVar4": "result",
                "iVar1": "comparison_result",
                "uVar2": "feature_value",
                "uVar3": "error_message",
                "unaff_EBP": "is_set",
                "unaff_RBX": "feature_name",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102323": {
            "additional_data": {
                "FUN_00102323": {
                    "detect_unknown_osabi": 2,
                    "get_unknown_osabi": 5,
                    "get_unknown_osabi_error_message": 2,
                    "handle_unknown_osabi": 1,
                    "identify_osabi": 1,
                    "identify_unknown_osabi": 8,
                    "parse_unsupported_osabi": 1,
                    "print_unknown_osabi": 3,
                    "print_unknown_osabi_error": 8
                },
                "auVar2": {
                    "modified_return": 1,
                    "result": 2,
                    "return_address": 1,
                    "return_value": 15
                },
                "dcgettext": {
                    "get_translated_text": 1
                },
                "error": {
                    "display_error": 1
                },
                "uVar1": {
                    "error_message": 11,
                    "error_msg": 2,
                    "error_string": 3,
                    "osabi_error_string": 1,
                    "osabi_message": 1,
                    "translated_error_message": 1
                },
                "unaff_retaddr": {
                    "previous_address": 1,
                    "previous_return_address": 1,
                    "return_address": 21
                }
            },
            "called": [
                "dcgettext",
                "error"
            ],
            "calling": [
                "FUN_00104ce0"
            ],
            "code": "\nundefined  [16] print_unknown_osabi_error_00102323(void)\n\n{\n  undefined8 error_message;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"Unknown OSABI: %s\\n\",5);\n  display_error(error_message);\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = 0xffffffff;\n  return return_value;\n}\n\n",
            "current_name": "print_unknown_osabi_error_00102323",
            "entrypoint": "0x00102323",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102323": "print_unknown_osabi_error_00102323",
                "auVar2": "return_value",
                "dcgettext": "get_translated_text",
                "error": "display_error",
                "uVar1": "error_message",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010234b": {
            "additional_data": {
                "FUM_0010234b": {
                    "get_machine_type": 1
                },
                "FUN_0010234b": {
                    "check_machine_type": 3,
                    "determine_machine_type": 2,
                    "get_machine_type": 24,
                    "identify_machine_type": 1
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "iVar1": {
                    "comparison_result": 3,
                    "result": 26
                },
                "strcasecmp": {
                    "compare_strings": 1
                },
                "uVar2": {
                    "err_msg": 1,
                    "error_message": 16,
                    "error_msg": 7,
                    "error_string": 3,
                    "unknown_type_error_message": 1,
                    "unknown_type_msg": 1
                },
                "unaff_RBX": {
                    "machine_type": 31
                }
            },
            "called": [
                "dcgettext",
                "strcasecmp",
                "error"
            ],
            "calling": [
                "FUN_00104d30"
            ],
            "code": "\nint get_machine_type_0010234b(void)\n\n{\n  int result;\n  undefined8 error_message;\n  char *machine_type;\n  \n  result = strcasecmp(machine_type,\"x86_64\");\n  if (result == 0) {\n    result = 0x3e;\n  }\n  else {\n    result = strcasecmp(machine_type,\"x86-64\");\n    if (result == 0) {\n      result = 0x3e;\n    }\n    else {\n      result = strcasecmp(machine_type,\"none\");\n      if (result != 0) {\n        error_message = dcgettext(0,\"Unknown machine type: %s\\n\",5);\n        error(error_message);\n        result = -1;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "get_machine_type_0010234b",
            "entrypoint": "0x0010234b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010234b": "get_machine_type_0010234b",
                "dcgettext": "get_error_message",
                "iVar1": "result",
                "strcasecmp": "compare_strings",
                "uVar2": "error_message",
                "unaff_RBX": "machine_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001023ce": {
            "additional_data": {
                "": {
                    "": 2
                },
                "DAT_": {
                    "dat_": 1
                },
                "FUN_001023ce": {
                    "check_result": 1,
                    "count_up": 1,
                    "determine_if_flag_is_set": 1,
                    "get_default_value": 1,
                    "get_one": 18,
                    "get_return_value": 4,
                    "get_status": 1,
                    "get_true_value": 1,
                    "initialize": 1,
                    "initialize_counter": 1,
                    "is_true": 1
                },
                "PTR_": {
                    "ptr_": 1
                },
                "PTR_param_1": {
                    "param_1": 1
                },
                "PTR_param_2": {
                    "param_2": 1
                },
                "return": {
                    "result": 8,
                    "status": 1
                },
                "undefined8": {
                    "int": 1,
                    "uint64_t": 7,
                    "unsigned_long": 2,
                    "unsigned_long_int": 1,
                    "unsigned_long_long": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00104da0"
            ],
            "code": "\nuint64_t get_one_001023ce(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_one_001023ce",
            "entrypoint": "0x001023ce",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001023ce": "get_one_001023ce",
                "return": "result",
                "undefined8": "uint64_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102434": {
            "additional_data": {
                "FUN_00102434": {
                    "check_elf_header": 4,
                    "process_elf_file": 1,
                    "process_elf_header": 3,
                    "seek_and_write_to_elf_header": 1,
                    "validate_and_write_elf_header": 1,
                    "validate_elf_file": 1,
                    "validate_elf_header": 10,
                    "verify_and_write_elf_header": 1,
                    "verify_elf_file": 2,
                    "verify_elf_header": 5
                },
                "dcgettext": {
                    "get_localized_message": 1,
                    "get_localized_string": 1,
                    "get_text": 1,
                    "get_translation": 1,
                    "translate_string": 1
                },
                "error": {
                    "display_error": 1,
                    "print_error": 4
                },
                "pcVar3": {
                    "err_msg": 1,
                    "error_format": 2,
                    "error_format_string": 4,
                    "error_message": 16,
                    "error_msg": 1,
                    "error_msg_format": 1,
                    "format_str": 1,
                    "format_string": 5
                },
                "sVar2": {
                    "bytes_written": 5,
                    "num_bytes_written": 1,
                    "result": 6,
                    "write_result": 16,
                    "write_status": 1
                },
                "uVar1": {
                    "err_code": 1,
                    "err_msg": 1,
                    "error_code": 3,
                    "error_message": 10,
                    "error_msg": 1,
                    "error_string": 1,
                    "message": 1,
                    "translation": 1
                },
                "unaff_RBX": {
                    "file": 25,
                    "file_pointer": 3,
                    "file_ptr": 3
                }
            },
            "called": [
                "dcgettext",
                "error"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nundefined8 validate_and_write_elf_header_00102434(void)\n\n{\n  undefined8 error_message;\n  size_t write_result;\n  FILE *file;\n  char *error_message;\n  \n  error_message = dcgettext(0,\"%s: Failed to seek to ELF header\\n\",5);\n  print_error(error_message);\n  if (DAT_001093e6 == '\\x01') {\n    if (DAT_0010941a == DAT_0010916c) {\n      return 0;\n    }\n    if (DAT_00109170 == 0xffffffff) {\n      if (DAT_0010941a == 6) {\n        DAT_00109170 = 1;\n      }\n      else if (DAT_0010941a < 7) {\n        DAT_00109170 = (DAT_0010941a != 3) + 1 + (uint)(DAT_0010941a != 3);\n      }\n      else {\n        DAT_00109170 = 3 - ((ushort)(DAT_0010941a - 0xb4) < 2);\n      }\n    }\n    if ((DAT_001093e4 == DAT_00109170) || (DAT_00109170 == 3)) {\n      if ((DAT_001093e4 == DAT_00109168) || (DAT_00109168 == 3)) {\n        if ((DAT_0010941a == DAT_00109174) || (DAT_00109174 == 0xffffffff)) {\n          if ((DAT_00109164 == 0xffffffff) || (DAT_00109418 == DAT_00109164)) {\n            if ((DAT_0010915c == 0xffffffff) || (DAT_001093e7 == DAT_0010915c)) {\n              if ((DAT_001093e8 == DAT_00109154) || (DAT_00109154 == 0xffffffff)) {\n                if (DAT_001093e4 == 1) {\n                  if (DAT_0010916c != 0xffffffff) {\n                    (*DAT_001093b8)(&DAT_00109392,(long)(int)DAT_0010916c,2);\n                  }\n                  if (DAT_00109160 != -1) {\n                    (*DAT_001093b8)(&DAT_00109390,(long)DAT_00109160,2);\n                  }\n                  if (DAT_00109158 != -1) {\n                    DAT_00109387 = (undefined)DAT_00109158;\n                  }\n                  if (DAT_00109150 != -1) {\n                    DAT_00109388 = (undefined)DAT_00109150;\n                  }\n                  write_result = fwrite(&DAT_00109380,0x34,1,file);\n                  if (write_result == 1) {\n                    return 0;\n                  }\n                  error_message = FUN_001024ec();\n                  return error_message;\n                }\n                if (DAT_001093e4 != 2) {\n                    \n                  abort();\n                }\n                if (DAT_0010916c != 0xffffffff) {\n                  (*DAT_001093b8)(&DAT_00109352,(long)(int)DAT_0010916c,2);\n                }\n                if (DAT_00109160 != -1) {\n                  (*DAT_001093b8)(&DAT_00109350,(long)DAT_00109160,2);\n                }\n                if (DAT_00109158 != -1) {\n                  DAT_00109347 = (undefined)DAT_00109158;\n                }\n                if (DAT_00109150 != -1) {\n                  DAT_00109348 = (undefined)DAT_00109150;\n                }\n                write_result = fwrite(&DAT_00109340,0x40,1,file);\n                if (write_result == 1) {\n                  return 0;\n                }\n                error_message = FUN_001024ec();\n                return error_message;\n              }\n              error_message = \"%s: Unmatched EI_ABIVERSION: %d is not %d\\n\";\n            }\n            else {\n              error_message = \"%s: Unmatched EI_OSABI: %d is not %d\\n\";\n            }\n          }\n          else {\n            error_message = \"%s: Unmatched e_type: %d is not %d\\n\";\n          }\n        }\n        else {\n          error_message = \"%s: Unmatched e_machine: %d is not %d\\n\";\n        }\n        error_message = dcgettext(0,error_message,5);\n        print_error(error_message);\n        return 1;\n      }\n      error_message = \"%s: Unmatched output EI_CLASS: %d is not %d\\n\";\n    }\n    else {\n      error_message = \"%s: Unmatched input EI_CLASS: %d is not %d\\n\";\n    }\n    error_message = dcgettext(0,error_message,5);\n    print_error(error_message);\n  }\n  else {\n    error_message = dcgettext(0,\"%s: Unsupported EI_VERSION: %d is not %d\\n\",5);\n    print_error(error_message);\n  }\n  return 1;\n}\n\n",
            "current_name": "validate_and_write_elf_header_00102434",
            "entrypoint": "0x00102434",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102434": "validate_and_write_elf_header_00102434",
                "dcgettext": "get_text",
                "error": "print_error",
                "pcVar3": "error_message",
                "sVar2": "write_result",
                "uVar1": "error_message",
                "unaff_RBX": "file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001024ec": {
            "additional_data": {
                "F00hTE1gCv": {
                    "update_elf_header_and_handle_error": 1
                },
                "FUN_001024ec": {
                    "handle_elf_header_update_failure": 1,
                    "update_elf_header": 15,
                    "update_elf_header_error": 4,
                    "update_elf_header_fail": 1,
                    "update_elf_header_failed": 5,
                    "update_elf_header_failure": 4
                },
                "__errno_location": {
                    "get_errno_location": 5,
                    "get_error_code": 1,
                    "get_error_code_address": 1,
                    "get_error_code_location": 2,
                    "get_error_number": 1
                },
                "__errnum": {
                    "errno_value": 1,
                    "errnum": 1,
                    "error_code": 1,
                    "error_number": 2
                },
                "dcgettext": {
                    "get_error_message": 2,
                    "get_locale_string": 2,
                    "get_localized_error_message": 1,
                    "get_localized_message": 2,
                    "get_localized_string": 3
                },
                "error": {
                    "display_error": 3,
                    "display_error_message": 1,
                    "print_error": 2,
                    "print_error_message": 4
                },
                "param_1": {
                    "error_string1": 1,
                    "message_id": 1
                },
                "param_2": {
                    "default_message": 1,
                    "error_string2": 1
                },
                "param_3": {
                    "count": 1,
                    "error_string3": 1
                },
                "param_4": {
                    "args": 1,
                    "error_string4": 1
                },
                "piVar1": {
                    "errno_location": 6,
                    "errno_pointer": 1,
                    "errno_ptr": 3,
                    "error_code": 4,
                    "error_code_pointer": 1,
                    "error_code_ptr": 1,
                    "error_num_ptr": 1,
                    "error_number": 4,
                    "error_number_ptr": 6
                },
                "strerror": {
                    "get_error_message": 2,
                    "get_error_string": 8
                },
                "uVar2": {
                    "error_message": 20,
                    "error_msg": 3,
                    "error_string": 4,
                    "header_error_message": 1
                }
            },
            "called": [
                "strerror",
                "__errno_location",
                "dcgettext",
                "error"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nundefined8 update_elf_header_failed_001024ec(void)\n\n{\n  int *error_number_ptr;\n  undefined8 error_message;\n  \n  error_number_ptr = __errno_location();\n  strerror(*error_number_ptr);\n  error_message = dcgettext(0,\"%s: Failed to update ELF header: %s\\n\",5);\n  print_error_message(error_message);\n  return 1;\n}\n\n",
            "current_name": "update_elf_header_failed_001024ec",
            "entrypoint": "0x001024ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001024ec": "update_elf_header_failed_001024ec",
                "__errno_location": "get_errno_location",
                "dcgettext": "get_localized_string",
                "error": "print_error_message",
                "piVar1": "error_number_ptr",
                "strerror": "get_error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102558": {
            "additional_data": {
                "FUN_00102558": {
                    "read_elf_header": 12,
                    "read_elf_header_error": 9,
                    "read_elf_header_failed": 7,
                    "read_elf_header_failure": 3
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "error": {
                    "print_error": 1
                },
                "uVar1": {
                    "error_message": 23,
                    "error_msg": 4,
                    "error_string": 3
                }
            },
            "called": [
                "dcgettext",
                "error"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nundefined8 read_elf_header_error_00102558(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"%s: Failed to read ELF header\\n\",5);\n  print_error(error_message);\n  return 1;\n}\n\n",
            "current_name": "read_elf_header_error_00102558",
            "entrypoint": "0x00102558",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102558": "read_elf_header_error_00102558",
                "dcgettext": "get_error_message",
                "error": "print_error",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001025ab": {
            "additional_data": {
                "ERROR_MESSAGE": {
                    "error_message": 1
                },
                "FUN_001025ab": {
                    "analyze_archive": 1,
                    "extract_archive": 1,
                    "extract_archive_header": 2,
                    "parse_archive": 2,
                    "parse_archive_header": 11,
                    "process_archive": 7,
                    "process_archive_file": 3,
                    "process_archive_header": 4
                },
                "FUN_001027fd": {
                    "check_substring": 1
                },
                "FUN_001028be": {
                    "process_data": 1
                },
                "F_001027fd": {
                    "find_symbol": 1
                },
                "F_001028be": {
                    "process_symbol": 1
                },
                "__base": {
                    "base": 2
                },
                "__endptr": {
                    "endptr": 2
                },
                "__nptr": {
                    "nptr": 1,
                    "str": 1
                },
                "__off": {
                    "offset": 2
                },
                "__ptr": {
                    "archive_header": 2,
                    "buffer": 1,
                    "header": 3,
                    "header_buffer": 2,
                    "header_data": 3,
                    "header_ptr": 1,
                    "mem": 1,
                    "ptr": 13,
                    "symbol_names": 1,
                    "symbol_table": 1,
                    "temp_ptr": 1,
                    "temp_strings": 1
                },
                "__size": {
                    "size": 1
                },
                "__stream": {
                    "file": 1,
                    "stream": 1
                },
                "__whence": {
                    "whence": 2
                },
                "cVar2": {
                    "char1": 1,
                    "char_result": 3,
                    "char_val": 1,
                    "char_var": 3,
                    "check_result": 2,
                    "check_value": 1,
                    "condition_var": 1,
                    "first_char": 1,
                    "flag": 3,
                    "is_archive_format": 1,
                    "is_match": 1,
                    "is_sym64": 1,
                    "is_valid": 1,
                    "result": 6,
                    "symbol_flag": 1,
                    "symbol_type": 1,
                    "temp_2": 1,
                    "temp_var2": 2
                },
                "dcgettext": {
                    "get_error_message": 1,
                    "get_localized_text": 1,
                    "gettext": 1
                },
                "error": {
                    "display_error": 1,
                    "print_error": 3
                },
                "fread": {
                    "read_data": 1,
                    "read_file": 2,
                    "read_from_file": 2
                },
                "free": {
                    "deallocate_memory": 1,
                    "release_memory": 1
                },
                "fseek": {
                    "file_seek": 1,
                    "move_file_pointer": 1,
                    "reposition_file": 1,
                    "seek_file": 2
                },
                "getc": {
                    "get_character": 2,
                    "get_file_char": 1,
                    "get_next_char": 1,
                    "read_char": 1
                },
                "iVar3": {
                    "error": 1,
                    "int_var": 3,
                    "result": 14,
                    "ret_val": 2,
                    "seek_result": 2,
                    "status": 7,
                    "temp_3": 1,
                    "temp_var3": 1
                },
                "malloc": {
                    "allocate_memory": 6
                },
                "param_1": {
                    "archive_data": 2,
                    "archive_header": 2,
                    "args": 2,
                    "argv": 5,
                    "array": 1,
                    "extracted_files": 1,
                    "file_info": 2,
                    "output": 6,
                    "output_data": 1,
                    "output_file": 1,
                    "output_params": 2,
                    "outputs": 1,
                    "parameters": 1,
                    "parsed_data": 2,
                    "strings": 2
                },
                "param_2": {
                    "archive_file": 1,
                    "archive_file_path": 1,
                    "archive_name": 2,
                    "archive_path": 1,
                    "file_name": 2,
                    "file_path": 1,
                    "filename": 13,
                    "input": 1,
                    "input_file": 1,
                    "input_file_name": 1,
                    "input_file_path": 1,
                    "input_string": 6
                },
                "param_3": {
                    "archive_file": 4,
                    "file": 15,
                    "file_pointer": 3,
                    "file_ptr": 1,
                    "input_file": 8
                },
                "param_4": {
                    "long_name_table_size": 3,
                    "max_long_name_size": 1,
                    "max_long_name_table_size": 3,
                    "max_longname_size": 1,
                    "max_name": 1,
                    "max_name_size": 1,
                    "max_size": 11,
                    "max_string_size": 1,
                    "name_table_size": 3,
                    "table_size": 6
                },
                "param_5": {
                    "default_size": 1,
                    "default_value": 1,
                    "file_mode": 1,
                    "file_status": 1,
                    "flag": 1,
                    "flags": 3,
                    "language_flag": 1,
                    "offset": 1,
                    "option": 1,
                    "param": 3,
                    "param5": 2,
                    "param_5": 13,
                    "parameter_5": 1,
                    "unknown": 1
                },
                "pcVar4": {
                    "allocated_file_path": 1,
                    "duplicate_file_name": 1,
                    "duplicate_filename": 2,
                    "err_msg": 1,
                    "error_message": 15,
                    "error_msg": 2,
                    "file_copy": 1,
                    "fmt": 1,
                    "format_string": 1,
                    "str": 2,
                    "str_archive_name": 1,
                    "str_copy": 1,
                    "temp": 1,
                    "tmp_msg": 1
                },
                "pcVar7": {
                    "buffer": 1,
                    "error_message": 1,
                    "long_name_buffer": 1,
                    "long_name_table": 6,
                    "long_name_table_string": 1,
                    "long_names_table": 1,
                    "long_symbol_name": 1,
                    "long_symbol_name_string_table": 1,
                    "long_symbol_names": 3,
                    "long_symbol_table": 2,
                    "memory": 1,
                    "message2": 1,
                    "msg": 1,
                    "ptr": 1,
                    "str": 1,
                    "str_var": 1,
                    "string_table": 2,
                    "substring": 1,
                    "symbol_name": 1,
                    "symbol_table": 1,
                    "temp_string": 2
                },
                "pcVar8": {
                    "long_name_error_message": 1,
                    "malloc_error": 1,
                    "memory_error_message": 2
                },
                "sVar5": {
                    "bytes_read": 3,
                    "num_bytes_read": 1,
                    "num_read": 1,
                    "read_bytes": 1,
                    "read_result": 2,
                    "read_size": 19,
                    "size_var": 4
                },
                "strdup": {
                    "duplicate_string": 3
                },
                "strtoul": {
                    "convert_string_to_ulong": 1,
                    "convert_string_to_unsigned_long": 1,
                    "convert_to_unsigned_long": 1,
                    "string_to_ulong": 1
                },
                "uVar1": {
                    "byte": 1,
                    "old_value": 1,
                    "original_flag": 1,
                    "original_value": 1,
                    "prev_char": 1,
                    "previous_byte": 1,
                    "return_value": 1,
                    "saved_char": 1,
                    "temp": 7,
                    "temp_1": 1,
                    "temp_char": 1,
                    "temp_value": 1,
                    "temp_var": 4,
                    "temp_var1": 4,
                    "u_var1": 1,
                    "unused_variable1": 1,
                    "var1": 1
                },
                "uVar6": {
                    "error_message": 3,
                    "error_msg": 3,
                    "error_text": 1,
                    "function_result": 1,
                    "message": 5,
                    "msg": 2,
                    "result": 1,
                    "return_var": 1,
                    "temp_var6": 1,
                    "text": 1,
                    "translated_error": 1,
                    "translated_error_message": 1,
                    "translated_error_msg": 1,
                    "translated_message": 4,
                    "translation": 5
                }
            },
            "called": [
                "free",
                "FUN_001027fd",
                "strdup",
                "dcgettext",
                "FUN_001028be",
                "fseek",
                "strtoul",
                "fread",
                "getc",
                "error",
                "malloc"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_0010358d"
            ],
            "code": "\nundefined4 parse_archive_header_001025ab(char **output,char *filename,FILE *file,long max_size,undefined4 param_5)\n\n{\n  char **ptr;\n  undefined temp;\n  char result;\n  int result;\n  char *error_message;\n  size_t read_size;\n  undefined8 translation;\n  char *long_name_table;\n  \n  error_message = strdup(filename);\n  output[2] = (char *)0x0;\n  *(undefined4 *)((long)output + 0x54) = 0;\n  *output = error_message;\n  output[1] = (char *)file;\n  output[5] = (char *)0x0;\n  output[6] = (char *)0x0;\n  *(undefined4 *)(output + 10) = param_5;\n  output[9] = (char *)0x8;\n  *(undefined (*) [16])(output + 3) = ZEXT816(0);\n  *(undefined (*) [16])(output + 7) = ZEXT816(0);\n  result = fseek(file,8,0);\n  error_message = \"%s: failed to seek to first archive header\\n\";\n  if (result != 0) goto LAB_00102658;\n  ptr = output + 0xb;\n  read_size = fread(ptr,1,0x3c,file);\n  if (read_size != 0x3c) {\n    if (read_size == 0) {\n      return 0;\n    }\n    error_message = \"%s: failed to read archive header\\n\";\n    goto LAB_00102658;\n  }\n  result = FUN_001027fd(ptr,\"/               \");\n  if (result == '\\0') {\n    result = FUN_001027fd(ptr,\"/SYM64/         \");\n    if (result != '\\0') {\n      *(undefined4 *)((long)output + 0x54) = 1;\n      result = FUN_001028be(output,8);\n      goto joined_r0x001026dd;\n    }\n  }\n  else {\n    result = FUN_001028be(output,4);\njoined_r0x001026dd:\n    if (result == 0) {\n      return 1;\n    }\n  }\n  result = FUN_001027fd(ptr);\n  if (result == '\\0') {\n    return 0;\n  }\n  temp = *(undefined *)((long)output + 0x92);\n  *(undefined *)((long)output + 0x92) = 0;\n  error_message = (char *)strtoul((char *)(output + 0x11),(char **)0x0,10);\n  long_name_table = \"%s: long name table is too small, (size = %ld)\\n\";\n  output[7] = error_message;\n  *(undefined *)((long)output + 0x92) = temp;\n  if ((char *)0x7 < error_message) {\n    if (((long)error_message <= max_size) && (-1 < (long)error_message)) {\n      output[9] = error_message + 0x3c + (long)output[9];\n      long_name_table = (char *)malloc((size_t)(error_message + 1));\n      output[6] = long_name_table;\n      if (long_name_table == (char *)0x0) {\n        translation = dcgettext(0,\"Out of memory reading long symbol names in archive\\n\",5);\n        print_error(translation);\n        return 1;\n      }\n      read_size = fread(long_name_table,(size_t)error_message,1,file);\n      if (read_size == 1) {\n        if ((*(byte *)(output + 7) & 1) != 0) {\n          getc(file);\n        }\n        output[6][(long)output[7]] = '\\0';\n        return 0;\n      }\n      free(output[6]);\n      error_message = \"%s: failed to read long symbol name string table\\n\";\n      output[6] = (char *)0x0;\nLAB_00102658:\n      translation = dcgettext(0,error_message,5);\n      print_error(translation,filename);\n      return 1;\n    }\n    long_name_table = \"%s: long name table is too big, (size = %#lx)\\n\";\n  }\n  translation = dcgettext(0,long_name_table,5);\n  print_error(translation,filename,error_message);\n  return 1;\n}\n\n",
            "current_name": "parse_archive_header_001025ab",
            "entrypoint": "0x001025ab",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001025ab": "parse_archive_header_001025ab",
                "__ptr": "ptr",
                "cVar2": "result",
                "dcgettext": "get_localized_text",
                "error": "print_error",
                "fread": "read_from_file",
                "free": "release_memory",
                "fseek": "seek_file",
                "getc": "get_character",
                "iVar3": "result",
                "malloc": "allocate_memory",
                "param_1": "output",
                "param_2": "filename",
                "param_3": "file",
                "param_4": "max_size",
                "pcVar4": "error_message",
                "pcVar7": "long_name_table",
                "sVar5": "read_size",
                "strdup": "duplicate_string",
                "strtoul": "convert_to_unsigned_long",
                "uVar1": "temp",
                "uVar6": "translation"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001027fd": {
            "additional_data": {
                "FUN_001027fd": {
                    "compare_and_return": 1,
                    "compare_and_return_result": 1,
                    "compare_strings": 15,
                    "reverse_strncmp": 1,
                    "string_compare": 2,
                    "string_comparison": 11
                },
                "__n": {
                    "length": 25,
                    "str_length": 1,
                    "string2_length": 3,
                    "string_length": 1,
                    "target_length": 1
                },
                "auVar2": {
                    "comparison_result": 3,
                    "comparison_result_array": 1,
                    "modified_result": 1,
                    "output": 1,
                    "result": 21,
                    "result_array": 1,
                    "return_value": 1
                },
                "extraout_var": {
                    "additional_result": 1,
                    "comparison_result": 4,
                    "extra_info": 1,
                    "extra_output": 3,
                    "extra_var": 1,
                    "extra_variable": 1,
                    "result": 2,
                    "unused_var": 1
                },
                "extrout_var": {
                    "extra_var": 1
                },
                "iVar1": {
                    "comparison": 1,
                    "comparison_result": 20,
                    "comparison_value": 1,
                    "result": 3,
                    "result_code": 1,
                    "string_comparison": 2,
                    "string_comparison_result": 1,
                    "strncmp_result": 1
                },
                "in_RAX": {
                    "return_value": 3
                },
                "param_1": {
                    "source_string": 1,
                    "str1": 6,
                    "string1": 23,
                    "string_1": 1
                },
                "param_2": {
                    "str2": 6,
                    "string2": 23,
                    "string_2": 1,
                    "target_string": 1
                },
                "strlen": {
                    "get_length": 1
                },
                "strncmp": {
                    "compare_substring": 1
                }
            },
            "called": [
                "strlen",
                "strncmp"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\nundefined  [16] compare_strings_001027fd(char *string1,char *string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  size_t length;\n  undefined4 comparison_result;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparison_result = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(comparison_result,comparison_result) >> 8);\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "compare_strings_001027fd",
            "entrypoint": "0x001027fd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001027fd": "compare_strings_001027fd",
                "__n": "length",
                "auVar2": "result",
                "extraout_var": "comparison_result",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2",
                "strlen": "get_length",
                "strncmp": "compare_substring"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001028be": {
            "additional_data": {
                "FUN_001028be": {
                    "check_archive_header_and_read": 1,
                    "extract_and_read_archive_header": 1,
                    "extract_archive_header": 4,
                    "extract_archive_index": 1,
                    "parse_archive_header": 1,
                    "process_archive": 2,
                    "process_archive_header": 8,
                    "process_archive_index": 1,
                    "read_archive_header": 1,
                    "read_archive_header_and_validate": 1,
                    "validate_archive_header": 7,
                    "validate_archive_header_size": 1,
                    "validate_header_and_read": 1,
                    "validate_header_size": 1
                },
                "iVar2": {
                    "file_error": 1,
                    "file_operation_result": 3,
                    "file_seek_result": 2,
                    "file_seek_status": 2,
                    "fseek_result": 1,
                    "result": 9,
                    "return_value": 1,
                    "seek_result": 8,
                    "seek_status": 1,
                    "status": 3
                },
                "param_1": {
                    "archive": 3,
                    "archive_data": 3,
                    "archive_header": 8,
                    "archive_header_ptr": 1,
                    "archive_info": 4,
                    "archive_ptr": 1,
                    "file_info": 1,
                    "header": 3,
                    "header_data": 1,
                    "header_info": 1,
                    "input": 1,
                    "input_data": 1,
                    "parameters": 2,
                    "params": 1
                },
                "pcVar7": {
                    "error_fmt": 1,
                    "error_format": 19,
                    "error_format_string": 3,
                    "error_message": 2,
                    "error_message_format": 1,
                    "error_msg_template": 1,
                    "error_template": 2,
                    "error_text": 1,
                    "format_string": 1
                },
                "sVar5": {
                    "bytes_read": 15,
                    "read_bytes": 1,
                    "read_result": 4,
                    "read_size": 11
                },
                "uVar1": {
                    "old_flag": 1,
                    "old_value": 4,
                    "original_flag": 1,
                    "original_value": 3,
                    "prev_byte": 1,
                    "prev_value": 4,
                    "previous_char": 1,
                    "previous_value": 13,
                    "saved_value": 1,
                    "temp": 2
                },
                "uVar3": {
                    "archive_header_size": 3,
                    "header_size": 28
                },
                "uVar4": {
                    "error_message": 26,
                    "error_msg": 3,
                    "error_string": 2
                },
                "uVar6": {
                    "archive_file": 1,
                    "archive_name": 12,
                    "file_name": 8,
                    "filename": 3,
                    "input_filename": 1,
                    "program_name": 5
                }
            },
            "called": [
                "dcgettext",
                "fseek",
                "strtoul",
                "fread",
                "error"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\nundefined8 check_archive_header_and_read_001028be(undefined8 *archive_header)\n\n{\n  undefined previous_value;\n  int result;\n  ulong header_size;\n  undefined8 error_message;\n  size_t bytes_read;\n  undefined8 archive_name;\n  char *error_format;\n  \n  previous_value = *(undefined *)((long)archive_header + 0x92);\n  *(undefined *)((long)archive_header + 0x92) = 0;\n  header_size = strtoul((char *)(archive_header + 0x11),(char **)0x0,10);\n  *(undefined *)((long)archive_header + 0x92) = previous_value;\n  if ((long)header_size < 0) {\n    archive_name = *archive_header;\n    error_message = dcgettext(0,\"%s: invalid archive header size: %ld\\n\",5);\n    error(error_message,archive_name,header_size);\n  }\n  else {\n    header_size = header_size + 1 & 0xfffffffffffffffe;\n    archive_header[9] = header_size + 0x3c + archive_header[9];\n    result = fseek((FILE *)archive_header[1],header_size,1);\n    if (result == 0) {\n      bytes_read = fread(archive_header + 0xb,1,0x3c,(FILE *)archive_header[1]);\n      if ((bytes_read == 0x3c) || (bytes_read == 0)) {\n        return 1;\n      }\n      archive_name = *archive_header;\n      error_format = \"%s: failed to read archive header following archive index\\n\";\n    }\n    else {\n      archive_name = *archive_header;\n      error_format = \"%s: failed to skip archive symbol table\\n\";\n    }\n    error_message = dcgettext(0,error_format,5);\n    error(error_message,archive_name);\n  }\n  return 0;\n}\n\n",
            "current_name": "check_archive_header_and_read_001028be",
            "entrypoint": "0x001028be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001028be": "check_archive_header_and_read_001028be",
                "iVar2": "result",
                "param_1": "archive_header",
                "pcVar7": "error_format",
                "sVar5": "bytes_read",
                "uVar1": "previous_value",
                "uVar3": "header_size",
                "uVar4": "error_message",
                "uVar6": "archive_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001029a5": {
            "additional_data": {
                "FUN_001025ab": {
                    "process_archive_data": 1
                },
                "FUN_001029a5": {
                    "extract_and_open_archive_member": 2,
                    "extract_and_process_archive_member": 1,
                    "extract_archive_member": 8,
                    "extract_archive_member_from_binary": 1,
                    "extract_archive_member_from_table": 1,
                    "extract_archive_member_name": 1,
                    "extract_archived_file": 1,
                    "extract_data_from_archive": 1,
                    "extract_file_from_archive": 12,
                    "extract_file_from_binary": 1,
                    "extract_member_from_archive": 1,
                    "process_archive_member": 1
                },
                "FUN_00102cc4": {
                    "extract_file_path": 1
                },
                "FUN_00102f65": {
                    "clear_output_file_data": 1
                },
                "FUN_00103160": {
                    "extract_from_current_archive_path": 1
                },
                "__base": {
                    "base": 1
                },
                "__buf": {
                    "buffer": 1
                },
                "__endptr": {
                    "end_pointer": 1
                },
                "__fd": {
                    "file_descriptor": 1
                },
                "__n": {
                    "count": 1
                },
                "__nptr": {
                    "string": 1
                },
                "__off": {
                    "offset": 1
                },
                "__ptr": {
                    "pointer": 1
                },
                "__s1": {
                    "string1": 1
                },
                "__s2": {
                    "string2": 1
                },
                "__size": {
                    "element_size": 1
                },
                "__stream": {
                    "file": 7,
                    "file_pointer": 3,
                    "file_ptr": 1,
                    "file_stream": 20
                },
                "__whence": {
                    "position": 1
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "error": {
                    "print_error": 1
                },
                "fileno": {
                    "get_file_descriptor": 1
                },
                "fread": {
                    "read_file": 1
                },
                "fseek": {
                    "seek_file": 1
                },
                "fstat": {
                    "get_file_status": 1
                },
                "iVar6": {
                    "error_code": 1,
                    "file_desc": 1,
                    "file_descriptor": 3,
                    "result": 2,
                    "result2": 1,
                    "return_value": 1,
                    "status": 10,
                    "status_code": 1,
                    "temp6": 1,
                    "temp_var5": 1,
                    "temp_var6": 7,
                    "tempi_var6": 1
                },
                "lVar13": {
                    "count": 1,
                    "counter": 3,
                    "current_char": 1,
                    "i": 1,
                    "index": 9,
                    "iter": 1,
                    "length": 1,
                    "long_name_table": 1,
                    "loop_count": 1,
                    "loop_index": 3,
                    "loop_var": 4,
                    "loop_variable": 1,
                    "name_len": 1,
                    "temp8": 1,
                    "temp_long_var13": 1
                },
                "local_b8": {
                    "file_info": 2,
                    "file_stat": 16,
                    "file_statistics": 1,
                    "file_stats": 2,
                    "file_status": 5,
                    "local_stat": 1,
                    "stat_buffer": 1,
                    "stat_data": 1,
                    "stat_struct": 2
                },
                "local_c0": {
                    "buffer": 5,
                    "endptr": 2,
                    "extracted_file_path": 1,
                    "file_name_buffer": 1,
                    "local_buffer": 11,
                    "local_name": 1,
                    "long_name": 1,
                    "path": 1,
                    "path_ptr": 1,
                    "str_end_ptr": 1,
                    "temp10": 1,
                    "temp_array": 1,
                    "temp_buffer": 3,
                    "temp_string": 1
                },
                "param_1": {
                    "archive_data": 1,
                    "archive_header": 3,
                    "archive_info": 5,
                    "archive_member": 3,
                    "archive_member_data": 1,
                    "archive_member_info": 3,
                    "archive_ptr": 1,
                    "arg1": 1,
                    "file_info": 7,
                    "file_information": 1,
                    "filename": 1,
                    "metadata": 1,
                    "param_1_extract": 1,
                    "param_archive": 1,
                    "param_fileptr": 1
                },
                "param_2": {
                    "archive_file_path": 1,
                    "archive_members": 1,
                    "archive_table": 2,
                    "arg2": 1,
                    "extracted_file_path_ptr": 1,
                    "extracted_files": 1,
                    "file_data": 1,
                    "file_info": 1,
                    "file_path": 1,
                    "file_paths": 2,
                    "modes": 1,
                    "open_file_params": 1,
                    "output": 1,
                    "output_file": 4,
                    "output_file_path": 4,
                    "output_files": 4,
                    "output_path": 1,
                    "param_2_extract": 1,
                    "param_file": 1,
                    "param_filename": 1
                },
                "pcVar14": {
                    "error_message": 4,
                    "error_message1": 2,
                    "error_msg": 2,
                    "file_error": 1,
                    "file_name": 10,
                    "file_or_directory": 1,
                    "filename": 7,
                    "filepath": 1,
                    "temp9": 1,
                    "temp_string_var14": 1,
                    "temp_var14": 1
                },
                "pcVar15": {
                    "err_msg": 1,
                    "error_message": 15,
                    "error_message2": 3,
                    "error_msg": 5,
                    "error_string": 5,
                    "temp_string_var15": 1,
                    "temp_var15": 1
                },
                "pcVar16": {
                    "err_msg": 1,
                    "error_format": 6,
                    "error_format_string": 2,
                    "error_message": 8,
                    "error_message2": 2,
                    "error_message3": 3,
                    "error_message_format": 1,
                    "error_message_template": 1,
                    "error_msg": 2,
                    "error_msg_format": 1,
                    "format_string": 1,
                    "printf_format": 1,
                    "temp_string_var16": 1,
                    "temp_var16": 1
                },
                "pcVar17": {
                    "archive_header_error": 1
                },
                "puVar12": {
                    "extracted_file_info": 2,
                    "new_file_info": 1,
                    "output_data": 1,
                    "output_metadata": 1,
                    "result": 11,
                    "result_array": 1,
                    "result_pointer": 3,
                    "result_ptr": 6,
                    "return_val": 2,
                    "return_value": 2,
                    "tempu_var12": 1
                },
                "sVar11": {
                    "bytes_read": 11,
                    "read_bytes": 2,
                    "read_count": 2,
                    "read_size": 16
                },
                "strcmp": {
                    "compare_strings": 1
                },
                "strtoul": {
                    "convert_to_unsigned_long": 1
                },
                "uVar1": {
                    "old_char": 1,
                    "original_long_name_table_flag": 1,
                    "prev_char": 1,
                    "previous_byte": 1,
                    "saved_char": 1,
                    "temp": 6,
                    "temp1": 3,
                    "temp_char": 1,
                    "temp_flag": 1,
                    "temp_var": 3,
                    "temp_var1": 12
                },
                "uVar10": {
                    "err_msg": 1,
                    "error_message": 7,
                    "error_msg": 1,
                    "error_string": 3,
                    "error_text": 1,
                    "locale": 1,
                    "localized_string": 1,
                    "message": 2,
                    "temp": 1,
                    "temp7": 1,
                    "temp_var10": 6,
                    "tempu_var10": 1,
                    "translated_error_message": 1,
                    "translation": 3,
                    "u_msg": 1
                },
                "uVar2": {
                    "result": 10,
                    "result1": 3,
                    "return_value": 1,
                    "temp2": 3,
                    "temp_var2": 10,
                    "tempu_var2": 1,
                    "var1": 3
                },
                "uVar3": {
                    "file_info1": 1,
                    "result": 2,
                    "result2": 3,
                    "return_value": 1,
                    "temp1": 1,
                    "temp3": 3,
                    "temp_var2": 1,
                    "temp_var3": 10,
                    "tempu_var3": 1,
                    "u_var3": 3,
                    "var1": 1,
                    "var2": 3,
                    "var3": 1
                },
                "uVar4": {
                    "file_info2": 1,
                    "result": 2,
                    "result3": 3,
                    "return_value": 1,
                    "temp2": 1,
                    "temp4": 3,
                    "temp_var3": 1,
                    "temp_var4": 10,
                    "tempu_var4": 1,
                    "u_var4": 3,
                    "var2": 1,
                    "var3": 3,
                    "var4": 1
                },
                "uVar5": {
                    "file_info3": 1,
                    "result": 2,
                    "result4": 3,
                    "return_value": 1,
                    "temp3": 1,
                    "temp5": 3,
                    "temp_var4": 1,
                    "temp_var5": 10,
                    "tempu_var5": 1,
                    "u_var5": 3,
                    "var3": 1,
                    "var4": 3,
                    "var5": 1
                },
                "uVar6": {
                    "iteration_count": 1
                },
                "uVar7": {
                    "archive_index": 1,
                    "file_index": 1,
                    "index": 4,
                    "long_name_index": 12,
                    "name_index": 1,
                    "start_index": 12
                },
                "uVar8": {
                    "end_index": 9,
                    "length": 1,
                    "long_name_index": 1,
                    "long_name_table_end": 1,
                    "long_name_table_offset": 1,
                    "long_name_table_size": 13,
                    "longname_table_size": 1,
                    "table_end": 1,
                    "table_size": 3
                },
                "uVar9": {
                    "current_char": 2,
                    "current_char_index": 1,
                    "current_index": 12,
                    "current_length": 1,
                    "current_long_name_index": 1,
                    "current_offset": 1,
                    "index": 3,
                    "index2": 1,
                    "long_name_index": 2,
                    "long_name_length": 1,
                    "long_name_string_length": 1,
                    "name_index": 3,
                    "temp_index": 1,
                    "temp_var9": 1
                }
            },
            "called": [
                "free",
                "FUN_001029a5",
                "dcgettext",
                "fseek",
                "fread",
                "fstat",
                "FUN_00102f65",
                "error",
                "fclose",
                "FUN_00102cc4",
                "fileno",
                "FUN_001025ab",
                "FUN_00105370",
                "fopen",
                "strtoul",
                "strcmp",
                "FUN_00103160"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_0010358d"
            ],
            "code": "\nundefined4 * extract_file_from_archive_001029a5(undefined8 *file_info,char **output_file)\n\n{\n  undefined temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  undefined4 temp_var5;\n  int status;\n  ulong long_name_index;\n  ulong long_name_table_size;\n  ulong current_index;\n  undefined8 error_message;\n  FILE *file_stream;\n  size_t read_size;\n  undefined4 *result;\n  long index;\n  char *file_name;\n  char *error_message;\n  char *error_message;\n  char *local_buffer;\n  stat file_stat;\n  \n  if (*(char *)(file_info + 0xb) != '/') {\n    index = 0;\n    do {\n      if (*(char *)((long)file_info + index + 0x58) == '/') {\n        *(undefined *)((long)file_info + index + 0x58) = 0;\n        result = (undefined4 *)FUN_00103160(file_info + 0xb);\n        return result;\n      }\n      index = index + 1;\n    } while (index != 0x10);\n    result = (undefined4 *)FUN_00105370(0x11);\n    temp_var2 = *(undefined4 *)(file_info + 0xb);\n    temp_var3 = *(undefined4 *)((long)file_info + 0x5c);\n    temp_var4 = *(undefined4 *)(file_info + 0xc);\n    temp_var5 = *(undefined4 *)((long)file_info + 100);\n    *(undefined *)(result + 4) = 0;\n    *result = temp_var2;\n    result[1] = temp_var3;\n    result[2] = temp_var4;\n    result[3] = temp_var5;\n    return result;\n  }\n  if ((file_info[6] == 0) || (file_info[7] == 0)) {\n    error_message = \"Archive member uses long names, but no longname table found\\n\";\nLAB_00102acd:\n    error_message = dcgettext(0,error_message,5);\n    print_error(error_message);\n    return (undefined4 *)0x0;\n  }\n  temp_var1 = *(undefined *)((long)file_info + 0x92);\n  file_info[8] = 0;\n  *(undefined *)((long)file_info + 0x92) = 0;\n  long_name_index = strtoul((char *)((long)file_info + 0x59),&local_buffer,10);\n  if (((*(int *)(file_info + 10) != 0) && (local_buffer != (char *)0x0)) && (*local_buffer == ':')) {\n    long_name_table_size = strtoul(local_buffer + 1,(char **)0x0,10);\n    file_info[8] = long_name_table_size;\n  }\n  long_name_table_size = file_info[7];\n  *(undefined *)((long)file_info + 0x92) = temp_var1;\n  if (long_name_table_size < long_name_index) {\n    error_message = dcgettext(0,\"Found long name index (%ld) beyond end of long name table\\n\",5);\n    print_error(error_message,long_name_index);\n    return (undefined4 *)0x0;\n  }\n  index = file_info[6];\n  for (current_index = long_name_index;\n      ((long_name_table_size != current_index && (*(char *)(index + current_index) != '\\0')) &&\n      (*(char *)(index + current_index) != '\\n')); current_index = current_index + 1) {\n  }\n  if ((current_index != 0) && (*(char *)(index + -1 + current_index) == '/')) {\n    current_index = current_index - 1;\n  }\n  if (current_index < long_name_table_size) {\n    long_name_table_size = current_index;\n  }\n  *(undefined *)(index + long_name_table_size) = 0;\n  if ((*(int *)(file_info + 10) == 0) || (file_info[8] == 0)) goto LAB_00102c2d;\n  if (long_name_table_size <= long_name_index) {\n    error_message = \"Invalid Thin archive member name\\n\";\n    goto LAB_00102acd;\n  }\n  error_message = (char *)FUN_00102cc4(*file_info,file_info[6] + long_name_index,long_name_table_size - long_name_index);\n  if (error_message != (char *)0x0) {\n    if ((*output_file == (char *)0x0) || (status = strcmp(*output_file,error_message), status != 0)) {\n      if ((FILE *)output_file[1] != (FILE *)0x0) {\n        fclose((FILE *)output_file[1]);\n        output_file[1] = (char *)0x0;\n      }\n      FUN_00102f65(output_file);\n      file_stream = fopen(error_message,\"rb\");\n      if (file_stream != (FILE *)0x0) {\n        status = fileno(file_stream);\n        status = fstat(status,&file_stat);\n        if ((-1 < status) &&\n           (status = FUN_001025ab(output_file,error_message,file_stream,file_stat.st_size,0), status == 0))\n        goto LAB_00102b84;\n      }\n    }\n    else {\nLAB_00102b84:\n      status = fseek((FILE *)output_file[1],file_info[8],0);\n      if (status == 0) {\n        read_size = fread(output_file + 0xb,1,0x3c,(FILE *)output_file[1]);\n        if (read_size == 0x3c) {\n          if (*(short *)((long)output_file + 0x92) == 0xa60) {\n            result = (undefined4 *)extract_file_from_archive_001029a5(output_file,0);\n            if (result != (undefined4 *)0x0) {\n              free(error_message);\n              return result;\n            }\n            goto LAB_00102c25;\n          }\n          file_name = *output_file;\n          error_message = \"%s: did not find a valid archive header\\n\";\n        }\n        else {\n          file_name = *output_file;\n          error_message = \"%s: failed to read archive header\\n\";\n        }\n      }\n      else {\n        file_name = *output_file;\n        error_message = \"%s: failed to seek to next file name\\n\";\n      }\n      error_message = dcgettext(0,error_message,5);\n      print_error(error_message,file_name);\n    }\n  }\nLAB_00102c25:\n  free(error_message);\nLAB_00102c2d:\n  result = (undefined4 *)FUN_00103160(file_info[6] + long_name_index);\n  return result;\n}\n\n",
            "current_name": "extract_file_from_archive_001029a5",
            "entrypoint": "0x001029a5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001029a5": "extract_file_from_archive_001029a5",
                "__stream": "file_stream",
                "dcgettext": "get_error_message",
                "error": "print_error",
                "fileno": "get_file_descriptor",
                "fread": "read_file",
                "fseek": "seek_file",
                "fstat": "get_file_status",
                "iVar6": "status",
                "lVar13": "index",
                "local_b8": "file_stat",
                "local_c0": "local_buffer",
                "param_1": "file_info",
                "param_2": "output_file",
                "pcVar14": "file_name",
                "pcVar15": "error_message",
                "pcVar16": "error_message",
                "puVar12": "result",
                "sVar11": "read_size",
                "strcmp": "compare_strings",
                "strtoul": "convert_to_unsigned_long",
                "uVar1": "temp_var1",
                "uVar10": "error_message",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar7": "long_name_index",
                "uVar8": "long_name_table_size",
                "uVar9": "current_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102c98": {
            "additional_data": {
                "FUN_00102c98": {
                    "handle_unhandled_data_length": 30,
                    "handle_unhandled_data_length_error": 1
                },
                "dcgettext": {
                    "get_message": 1
                },
                "error": {
                    "report_error": 1
                },
                "uVar1": {
                    "error_message": 14,
                    "error_msg": 1
                },
                "unaff_EBX": {
                    "error_code": 28,
                    "error_condition": 1,
                    "error_flag": 2
                }
            },
            "called": [
                "dcgettext",
                "abort",
                "error"
            ],
            "calling": [
                "FUN_00103ad0"
            ],
            "code": "\nvoid handle_unhandled_data_length_error_00102c98(void)\n\n{\n  undefined8 error_message;\n  undefined4 error_code;\n  \n  error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  report_error(error_message,error_code);\n                    \n  abort();\n}\n\n",
            "current_name": "handle_unhandled_data_length_error_00102c98",
            "entrypoint": "0x00102c98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102c98": "handle_unhandled_data_length_error_00102c98",
                "dcgettext": "get_message",
                "error": "report_error",
                "uVar1": "error_message",
                "unaff_EBX": "error_code"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102cbc": {
            "additional_data": {
                "FUN_00102cbc": {
                    "extract_file_name": 8,
                    "extract_file_name_from_filepath": 1,
                    "extract_file_name_from_path": 2,
                    "extract_filename": 4,
                    "extract_last_path_component": 1,
                    "parse_file_name": 3,
                    "parse_file_path": 8,
                    "parse_filename": 1,
                    "parse_path": 2,
                    "reverse_and_modify_path": 1
                },
                "__size": {
                    "allocated_size": 3,
                    "allocation_size": 2,
                    "buffer_size": 2,
                    "new_size": 4,
                    "realloc_size": 1,
                    "size": 6,
                    "total_size": 9
                },
                "bVar8": {
                    "byte_value": 2,
                    "flag": 5,
                    "increment": 1,
                    "is_first_slash": 1,
                    "is_flag_set": 1,
                    "is_found": 1,
                    "is_negative": 12,
                    "is_previous_char_slash": 1,
                    "is_slash": 1,
                    "is_slash_present": 1,
                    "is_unsigned": 1,
                    "slash_found": 1,
                    "zero": 1,
                    "zero_byte": 1
                },
                "cVar2": {
                    "character": 1,
                    "current_char": 21
                },
                "dcgettext": {
                    "get_error_message": 4,
                    "get_string": 2,
                    "get_translated_message": 1
                },
                "error": {
                    "display_error": 1,
                    "display_error_message": 1,
                    "print_error": 3,
                    "print_error_message": 2
                },
                "extraout_RDX": {
                    "computed_size": 1,
                    "exp_rdx": 1,
                    "extra_size": 2,
                    "file_name_length": 2,
                    "file_size": 1,
                    "filename_length": 1,
                    "input_length": 1,
                    "last_char_index": 1,
                    "length": 3,
                    "loop_count2": 1,
                    "loop_counter2": 1,
                    "loop_limit": 1,
                    "max_length": 1,
                    "original_length": 1,
                    "read_size": 1,
                    "remaining_chars": 1,
                    "remaining_chars2": 1,
                    "remaining_length": 1,
                    "remaining_path_length": 1,
                    "remaining_size": 1,
                    "return_value": 1,
                    "retval": 1,
                    "slash_distance": 1,
                    "slash_index": 2,
                    "sub_length": 1
                },
                "lVar1": {
                    "combined_size": 1,
                    "computed_size": 1,
                    "file_name_size": 2,
                    "file_size": 2,
                    "filename_size": 1,
                    "final_length": 2,
                    "final_size": 1,
                    "length": 6,
                    "name_size": 1,
                    "new_path_size": 1,
                    "padding": 1,
                    "relative_file_name_size": 1,
                    "total_len": 1,
                    "total_length": 5,
                    "total_size": 2
                },
                "param_1": {
                    "arg1": 1,
                    "file_descriptor": 1,
                    "file_ptr": 1,
                    "file_size": 3,
                    "handle": 1,
                    "input_param": 3,
                    "param": 2,
                    "param1": 15,
                    "param_1": 2,
                    "size": 1,
                    "unknown": 1
                },
                "param_2": {
                    "file_name": 2,
                    "file_path": 10,
                    "filename": 3,
                    "filepath": 1,
                    "input_string": 1,
                    "param2": 9,
                    "path": 5
                },
                "pcVar3": {
                    "copy_pointer": 1,
                    "current_char": 4,
                    "current_char_pointer": 1,
                    "current_char_ptr": 3,
                    "current_path": 1,
                    "current_pointer": 2,
                    "current_pos": 1,
                    "current_position": 1,
                    "current_ptr": 2,
                    "file_path_ptr": 2,
                    "next_char": 1,
                    "path_iterator": 1,
                    "path_ptr": 4,
                    "ptr1": 3,
                    "ptr_char": 1,
                    "ptr_current_char": 1,
                    "result": 1,
                    "temp_ptr1": 1
                },
                "pcVar4": {
                    "filename_ptr": 2,
                    "filename_start_ptr": 1,
                    "last_path_component": 1,
                    "last_slash": 4,
                    "last_slash_char": 1,
                    "last_slash_pointer": 2,
                    "last_slash_position": 1,
                    "last_slash_ptr": 6,
                    "ptr2": 3,
                    "ptr_last_slash": 1,
                    "ptr_slash": 1,
                    "separator_pointer": 1,
                    "slash_char_pointer": 1,
                    "slash_index": 1,
                    "slash_pos": 1,
                    "slash_position": 2,
                    "slash_ptr": 1,
                    "temp_ptr2": 1
                },
                "uVar5": {
                    "err_msg": 2,
                    "error_message": 16,
                    "error_msg": 2,
                    "error_str": 1,
                    "error_string": 6,
                    "error_text": 3,
                    "result": 1
                },
                "uVar6": {
                    "count": 2,
                    "file_name_length": 2,
                    "file_name_size": 1,
                    "length": 2,
                    "loop_count1": 1,
                    "loop_counter": 2,
                    "name_length": 1,
                    "path_length": 1,
                    "remaining_bytes": 1,
                    "remaining_chars": 2,
                    "remaining_length": 3,
                    "remaining_path_length": 1,
                    "remaining_size": 11,
                    "size": 1
                },
                "uVar7": {
                    "diff": 2,
                    "difference": 1,
                    "file_name_length": 2,
                    "file_name_pos": 1,
                    "file_name_size": 1,
                    "filename_length": 3,
                    "input_size": 1,
                    "last_path_component_size": 1,
                    "length_diff": 1,
                    "path_length": 1,
                    "path_size": 1,
                    "prefix_size": 1,
                    "ptr_diff": 1,
                    "ptr_difference": 1,
                    "relative_file_name_length": 1,
                    "remaining_chars_from_last_slash": 1,
                    "remaining_data_size": 1,
                    "remaining_length": 1,
                    "separator_index": 1,
                    "slash_distance": 1,
                    "slash_index": 3,
                    "slash_offset": 2,
                    "substring_length": 1
                },
                "unaff_RBX": {
                    "current_char": 2,
                    "current_char_ptr": 2,
                    "file_name": 2,
                    "file_name_pointer": 1,
                    "file_path": 3,
                    "file_path_ptr": 3,
                    "file_ptr": 1,
                    "file_start_pos": 1,
                    "filename_ptr": 1,
                    "input_ptr": 1,
                    "input_string": 1,
                    "input_string_ptr": 1,
                    "iterator_ptr": 1,
                    "original_string": 1,
                    "path": 1,
                    "path_begin": 1,
                    "path_start_ptr": 1,
                    "ptr_original_char": 1,
                    "slash_position": 1,
                    "slash_ptr": 1,
                    "start": 1,
                    "start_ptr": 1,
                    "string_ptr": 1
                }
            },
            "called": [
                "FUN_00102fc7"
            ],
            "calling": [
                "FUN_00105370"
            ],
            "code": "\nchar * extract_file_name_from_filepath_00102cbc(undefined8 param1,char *file_path)\n\n{\n  ulong total_size;\n  long length;\n  char current_char;\n  char *current_char;\n  char *last_slash_ptr;\n  undefined8 error_message;\n  ulong remaining_size;\n  ulong length;\n  char *file_path;\n  ulong filename_length;\n  byte is_negative;\n  \n  is_negative = 0;\n  FUN_00102fc7();\n  current_char = file_path;\n  last_slash_ptr = file_path;\n  while (current_char = *current_char, current_char != '\\0') {\n    current_char = current_char + 1;\n    if (current_char == '/') {\n      last_slash_ptr = current_char;\n    }\n  }\n  if ((*file_path == '/') || (file_path == last_slash_ptr)) {\n    if (length + 1 == 0) {\n      return (char *)0x0;\n    }\n    last_slash_ptr = (char *)malloc(length + 1);\n    remaining_size = length;\n    current_char = last_slash_ptr;\n    if (last_slash_ptr != (char *)0x0) {\n      for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n        *current_char = *file_path;\n        file_path = file_path + (ulong)is_negative * -2 + 1;\n        current_char = current_char + (ulong)is_negative * -2 + 1;\n      }\n      last_slash_ptr[length] = '\\0';\n      return last_slash_ptr;\n    }\n  }\n  else {\n    filename_length = (long)last_slash_ptr - (long)file_path;\n    length = filename_length + length;\n    remaining_size = length;\n    if (length <= filename_length) {\n      remaining_size = filename_length;\n    }\n    total_size = length + 1;\n    if (total_size < remaining_size) {\n      error_message = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      print_error(error_message,length);\n      return (char *)0x0;\n    }\n    last_slash_ptr = (char *)malloc(total_size);\n    current_char = last_slash_ptr;\n    if (last_slash_ptr != (char *)0x0) {\n      for (; remaining_size = length, filename_length != 0; filename_length = filename_length - 1) {\n        *current_char = *file_path;\n        file_path = file_path + (ulong)is_negative * -2 + 1;\n        current_char = current_char + (ulong)is_negative * -2 + 1;\n      }\n      for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n        *current_char = *file_path;\n        file_path = file_path + (ulong)is_negative * -2 + 1;\n        current_char = current_char + (ulong)is_negative * -2 + 1;\n      }\n      last_slash_ptr[length] = '\\0';\n      return last_slash_ptr;\n    }\n  }\n  error_message = dcgettext(0,\"Out of memory\\n\",5);\n  print_error(error_message);\n  return (char *)0x0;\n}\n\n",
            "current_name": "extract_file_name_from_filepath_00102cbc",
            "entrypoint": "0x00102cbc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102cbc": "extract_file_name_from_filepath_00102cbc",
                "__size": "total_size",
                "bVar8": "is_negative",
                "cVar2": "current_char",
                "dcgettext": "get_error_message",
                "error": "print_error",
                "extraout_RDX": "length",
                "lVar1": "length",
                "param_1": "param1",
                "param_2": "file_path",
                "pcVar3": "current_char",
                "pcVar4": "last_slash_ptr",
                "uVar5": "error_message",
                "uVar6": "remaining_size",
                "uVar7": "filename_length",
                "unaff_RBX": "file_path"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102cc4": {
            "additional_data": {
                "FUN_00102cc4": {
                    "create_file_path": 1,
                    "extract_file_from_path": 1,
                    "extract_file_name": 18,
                    "extract_filename": 5,
                    "extract_last_path_component": 1,
                    "extract_last_path_segment": 1,
                    "parse_file_name": 2,
                    "parse_path": 1,
                    "reverse_extracted_file_name": 1
                },
                "__size": {
                    "allocated_size": 5,
                    "allocation_size": 1,
                    "buffer_size": 3,
                    "dest_size": 1,
                    "malloc_size": 2,
                    "memory_size": 1,
                    "new_size": 6,
                    "new_string_size": 1,
                    "required_size": 3,
                    "size": 1,
                    "total_length": 2,
                    "total_size": 5
                },
                "bVar8": {
                    "counter": 1,
                    "flag": 3,
                    "found_slash": 1,
                    "increment_value": 1,
                    "is32_bit": 1,
                    "is_backslash": 1,
                    "is_forward_slash": 2,
                    "is_negative": 11,
                    "is_reversed": 3,
                    "is_slash": 1,
                    "is_string_terminated": 1,
                    "loop_count": 1,
                    "reverse_flag": 1,
                    "should_increment": 1,
                    "slash_flag": 2
                },
                "cVar2": {
                    "char": 1,
                    "char_value": 1,
                    "current_char": 20
                },
                "dcgettext": {
                    "get_error_message": 4,
                    "get_translation": 1,
                    "gettext": 1,
                    "translate_error": 1
                },
                "error": {
                    "display_error_msg": 1,
                    "print_error": 1,
                    "print_error_message": 3
                },
                "lVar1": {
                    "buffer_index": 1,
                    "combined_length": 1,
                    "combined_size": 1,
                    "dest_length": 1,
                    "file_name_length": 1,
                    "final_length": 3,
                    "final_size": 2,
                    "name_length": 1,
                    "new_length": 2,
                    "new_size": 1,
                    "new_string_index": 1,
                    "temp_var": 1,
                    "total_length": 12,
                    "total_size": 2
                },
                "malloc": {
                    "allocate_memory": 5
                },
                "param_1": {
                    "file_path": 17,
                    "filepath": 1,
                    "input_string": 1,
                    "path": 10,
                    "source_path": 1,
                    "source_string": 1
                },
                "param_2": {
                    "copy_string": 1,
                    "extension": 1,
                    "file_name": 10,
                    "file_string": 1,
                    "filename": 7,
                    "segment": 1,
                    "source": 5,
                    "source_data": 2,
                    "source_string": 3
                },
                "param_3": {
                    "file_name_length": 7,
                    "file_name_size": 1,
                    "file_size": 1,
                    "length": 17,
                    "name_length": 2,
                    "segment_length": 1,
                    "source_data_length": 1,
                    "string_length": 1
                },
                "pcVar3": {
                    "buffer": 1,
                    "current_char": 2,
                    "dest": 3,
                    "dest_ptr": 4,
                    "destination": 1,
                    "dst_ptr": 1,
                    "file_path_iterator": 1,
                    "file_path_ptr": 2,
                    "file_ptr": 1,
                    "input_ptr": 1,
                    "new_file_name": 2,
                    "new_file_path": 1,
                    "new_path": 2,
                    "new_string": 1,
                    "new_string_pointer": 1,
                    "output": 2,
                    "path_ptr": 3,
                    "ptr1": 1,
                    "result": 1
                },
                "pcVar4": {
                    "end_of_path": 1,
                    "filename_ptr": 1,
                    "last_separator_ptr": 1,
                    "last_slash": 13,
                    "last_slash_pointer": 1,
                    "last_slash_position": 1,
                    "last_slash_ptr": 9,
                    "new_filename": 2,
                    "ptr2": 1,
                    "ptr_slash": 1
                },
                "uVar5": {
                    "": 1,
                    "error_message": 21,
                    "error_msg": 4,
                    "error_str": 1,
                    "error_string": 4
                },
                "uVar6": {
                    "copy_count": 1,
                    "copy_length": 1,
                    "current_length": 1,
                    "file_length": 1,
                    "length": 1,
                    "loop_counter": 2,
                    "loop_index": 2,
                    "remaining_length": 17,
                    "remaining_size": 4,
                    "temp_length": 1
                },
                "uVar7": {
                    "file_length": 1,
                    "file_name_length": 3,
                    "file_name_length_after_last_slash": 1,
                    "file_path_length": 2,
                    "file_size": 1,
                    "file_substr_length": 1,
                    "filename_length": 4,
                    "path_length": 11,
                    "prefix_length": 5,
                    "string_length": 1,
                    "substring_length": 1
                }
            },
            "called": [
                "dcgettext",
                "error",
                "malloc"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_0010358d"
            ],
            "code": "\nchar * extract_file_name_00102cc4(char *file_path,char *file_name,ulong length)\n\n{\n  ulong new_size;\n  long total_length;\n  char current_char;\n  char *dest_ptr;\n  char *last_slash;\n  undefined8 error_message;\n  ulong remaining_length;\n  ulong path_length;\n  byte is_negative;\n  \n  is_negative = 0;\n  dest_ptr = file_path;\n  last_slash = file_path;\n  while (current_char = *dest_ptr, current_char != '\\0') {\n    dest_ptr = dest_ptr + 1;\n    if (current_char == '/') {\n      last_slash = dest_ptr;\n    }\n  }\n  if ((*file_name == '/') || (file_path == last_slash)) {\n    if (length + 1 == 0) {\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(length + 1);\n    remaining_length = length;\n    dest_ptr = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_length != 0; remaining_length = remaining_length - 1) {\n        *dest_ptr = *file_name;\n        file_name = file_name + (ulong)is_negative * -2 + 1;\n        dest_ptr = dest_ptr + (ulong)is_negative * -2 + 1;\n      }\n      last_slash[length] = '\\0';\n      return last_slash;\n    }\n  }\n  else {\n    path_length = (long)last_slash - (long)file_path;\n    total_length = path_length + length;\n    remaining_length = length;\n    if (length <= path_length) {\n      remaining_length = path_length;\n    }\n    new_size = total_length + 1;\n    if (new_size < remaining_length) {\n      error_message = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      print_error_message(error_message,length);\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(new_size);\n    dest_ptr = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; path_length != 0; path_length = path_length - 1) {\n        *dest_ptr = *file_path;\n        file_path = file_path + (ulong)is_negative * -2 + 1;\n        dest_ptr = dest_ptr + (ulong)is_negative * -2 + 1;\n      }\n      for (; length != 0; length = length - 1) {\n        *dest_ptr = *file_name;\n        file_name = file_name + (ulong)is_negative * -2 + 1;\n        dest_ptr = dest_ptr + (ulong)is_negative * -2 + 1;\n      }\n      last_slash[total_length] = '\\0';\n      return last_slash;\n    }\n  }\n  error_message = dcgettext(0,\"Out of memory\\n\",5);\n  print_error_message(error_message);\n  return (char *)0x0;\n}\n\n",
            "current_name": "extract_file_name_00102cc4",
            "entrypoint": "0x00102cc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102cc4": "extract_file_name_00102cc4",
                "__size": "new_size",
                "bVar8": "is_negative",
                "cVar2": "current_char",
                "dcgettext": "get_error_message",
                "error": "print_error_message",
                "lVar1": "total_length",
                "malloc": "allocate_memory",
                "param_1": "file_path",
                "param_2": "file_name",
                "param_3": "length",
                "pcVar3": "dest_ptr",
                "pcVar4": "last_slash",
                "uVar5": "error_message",
                "uVar6": "remaining_length",
                "uVar7": "path_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f65": {
            "additional_data": {
                "FUN_00102f65": {
                    "cleanup_memory": 1,
                    "clear_memory": 15,
                    "dealloc_memory": 1,
                    "deallocate_memory": 2,
                    "free_and_reset_pointers": 1,
                    "free_memory": 5,
                    "free_memory_and_reset": 2,
                    "free_memory_and_reset_pointers": 2,
                    "free_resources": 1,
                    "release_memory": 1
                },
                "ZEXT816": {
                    "zero_extend": 1
                },
                "__ptr": {
                    "pointer_to_free": 1
                },
                "arrayElement3": {
                    "element3": 1
                },
                "arrayElement4": {
                    "element4": 1
                },
                "arrayElement6": {
                    "element6": 1
                },
                "free": {
                    "release_memory": 1
                },
                "param_1": {
                    "memory": 3,
                    "memory_address": 1,
                    "memory_areas": 1,
                    "memory_array": 1,
                    "memory_block": 3,
                    "memory_blocks": 10,
                    "memory_data": 1,
                    "memory_pointer": 1,
                    "memory_pointers": 2,
                    "memory_ptr": 2,
                    "pointer_array": 1,
                    "pointer_list": 1,
                    "pointers": 3,
                    "resources": 1
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_0010358d"
            ],
            "code": "\nvoid clear_memory_00102f65(void **memory_blocks)\n\n{\n  free(*memory_blocks);\n  free(memory_blocks[3]);\n  free(memory_blocks[4]);\n  free(memory_blocks[6]);\n  *memory_blocks = (void *)0x0;\n  memory_blocks[6] = (void *)0x0;\n  *(undefined (*) [16])(memory_blocks + 3) = zero_extend(0);\n  return;\n}\n\n",
            "current_name": "clear_memory_00102f65",
            "entrypoint": "0x00102f65",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f65": "clear_memory_00102f65",
                "ZEXT816": "zero_extend",
                "free": "release_memory",
                "param_1": "memory_blocks"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fa0": {
            "additional_data": {
                "0x40": {
                    "matching_flag": 1
                },
                "DAT_00107040": {
                    "character_flags": 1
                },
                "FUN_00102fa0": {
                    "find_end_of_valid_data": 1,
                    "skip_byte_if_flag_set": 1,
                    "skip_invalid_bytes": 2,
                    "skip_invalid_characters": 2,
                    "skip_invalid_chars": 1,
                    "skip_non_ascii": 1,
                    "skip_non_ascii_characters": 3,
                    "skip_non_ascii_chars": 2,
                    "skip_non_control_chars": 1,
                    "skip_non_displayable_characters": 1,
                    "skip_non_executable_bytes": 3,
                    "skip_non_matching_bytes": 1,
                    "skip_non_printable_chars": 1,
                    "skip_non_readable_bytes": 1,
                    "skip_non_relevant_bytes": 1,
                    "skip_nonprintable_chars": 2,
                    "skip_to_next_non_quoted_character": 1,
                    "skip_to_non_matching_character": 1,
                    "skip_unset_bits": 2,
                    "skip_white_space": 1,
                    "skip_whitespace": 2
                },
                "param_1": {
                    "buffer": 3,
                    "byte_array": 4,
                    "byte_array_ptr": 3,
                    "byte_data": 1,
                    "bytes": 1,
                    "data": 3,
                    "data_pointer": 7,
                    "data_ptr": 1,
                    "input": 1,
                    "input_data": 1,
                    "input_string": 3,
                    "string_ptr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid skip_non_ascii_characters_00102fa0(byte **data_pointer)\n\n{\n  while (((&DAT_00107040)[(ulong)**data_pointer * 2] & 0x40) != 0) {\n    *data_pointer = *data_pointer + 1;\n  }\n  return;\n}\n\n",
            "current_name": "skip_non_ascii_characters_00102fa0",
            "entrypoint": "0x00102fa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fa0": "skip_non_ascii_characters_00102fa0",
                "param_1": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fbc": {
            "additional_data": {
                "FUN_00102fbc": {
                    "exit_application": 1,
                    "exit_function": 1,
                    "exit_program": 24,
                    "exit_with_error": 3,
                    "terminate_program": 2
                },
                "__status": {
                    "error_code": 3,
                    "exit_code": 4,
                    "exit_status": 8,
                    "status": 12
                },
                "exit": {
                    "exit_status": 1
                }
            },
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_00102fc7"
            ],
            "code": "\nvoid exit_program_00102fbc(void)\n\n{\n                    \n  exit_status(1);\n}\n\n",
            "current_name": "exit_program_00102fbc",
            "entrypoint": "0x00102fbc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fbc": "exit_program_00102fbc",
                "exit": "exit_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fc7": {
            "additional_data": {
                "2134234": {
                    "register_4": 1
                },
                "876543": {
                    "register_3": 1
                },
                "DCBA98": {
                    "register_2": 1
                },
                "FEDcba": {
                    "register_1": 1
                },
                "FUN_00102fbc": {
                    "check_condition": 1,
                    "check_input_value": 1,
                    "check_result": 1
                },
                "FUN_00102fc7": {
                    "allocate_and_format_error_message": 5,
                    "allocate_and_format_memory": 1,
                    "allocate_formatted_error_message": 2,
                    "allocate_formatted_string": 1,
                    "allocate_memory": 4,
                    "allocate_memory_and_concatenate_strings": 2,
                    "allocate_memory_and_copy_string": 1,
                    "allocate_memory_and_copy_strings": 4,
                    "allocate_memory_and_fill_string": 1,
                    "allocate_memory_and_format_error_message": 2,
                    "allocate_memory_and_format_string": 5,
                    "allocate_memory_and_format_strings": 1,
                    "create_error_message": 1,
                    "generate_error_message": 1
                },
                "PCStack20": {
                    "string_pointer": 1
                },
                "__format": {
                    "format_string": 1
                },
                "__ptr": {
                    "error_file": 2,
                    "error_file_pointer": 1,
                    "error_output": 1,
                    "error_output_file": 1,
                    "error_stream": 2,
                    "file_pointer": 5,
                    "file_ptr": 1,
                    "file_stream": 1,
                    "output_file": 3,
                    "output_stream": 6,
                    "stderr": 2,
                    "stderr_file": 1,
                    "stderr_pointer": 1,
                    "stream": 3
                },
                "__s": {
                    "current_char": 1,
                    "current_line": 1,
                    "current_string": 1,
                    "error_message": 2,
                    "error_message_format": 1,
                    "format": 2,
                    "format_specifier": 1,
                    "format_string": 17,
                    "format_string2": 1,
                    "message_format_str": 1,
                    "string_format": 1
                },
                "__stream": {
                    "output_stream": 1
                },
                "apcStack_e0": {
                    "array_of_pointers": 1,
                    "array_of_strings": 1,
                    "char_ptr_array": 1,
                    "error_message_stack": 1,
                    "formatted_string_array": 1,
                    "line_addresses_stack": 1,
                    "stack": 1,
                    "stack_array": 3,
                    "string_arr_stack": 1,
                    "string_array": 12,
                    "string_cache": 1,
                    "string_list": 2,
                    "string_stack": 4,
                    "strings_stack": 1
                },
                "bVar9": {
                    "boolean_flag": 1,
                    "boolean_variable": 2,
                    "byte_flag": 1,
                    "byte_value": 2,
                    "byte_var": 2,
                    "condition": 1,
                    "condition_variable": 1,
                    "decrement_value": 1,
                    "flag": 3,
                    "format_index": 1,
                    "increment": 1,
                    "index": 1,
                    "is_backward": 2,
                    "is_formatted": 1,
                    "is_increasing": 1,
                    "is_increment": 1,
                    "is_incrementing": 1,
                    "is_negative": 3,
                    "is_odd": 1,
                    "is_reverse": 1,
                    "loop_flag": 1,
                    "reverse_direction": 1,
                    "reverse_iteration": 1
                },
                "cVar1": {
                    "char_check": 1,
                    "char_value": 2,
                    "character": 1,
                    "check_flag": 1,
                    "check_result": 2,
                    "is_extra_output": 1,
                    "is_not_null": 1,
                    "is_valid": 4,
                    "result": 8,
                    "return_value": 1,
                    "success": 1
                },
                "extraout_RDX": {
                    "current_string": 1,
                    "dynamic_allocation_size": 1,
                    "extra1": 1,
                    "extra_out1": 1,
                    "extra_out_rdx": 1,
                    "extra_output": 1,
                    "extra_output_register_1": 1,
                    "extra_result": 2,
                    "extra_return_value_function1": 1,
                    "format_string_copy": 1,
                    "formatted_message_size": 1,
                    "new_extraout_rdx": 1,
                    "size_copy": 1
                },
                "extraout_XMM0_Qa": {
                    "extra2": 1,
                    "extra_out2": 1,
                    "extra_out_xmm0_qa": 1,
                    "extra_output_float": 1,
                    "extra_output_register_2": 1,
                    "extra_result": 2,
                    "extra_result2": 2,
                    "extra_return_value": 1,
                    "new_extraout_xmm0_qa": 1,
                    "result_copy": 1,
                    "return_value": 1
                },
                "fprintf": {
                    "print_error_message": 1,
                    "print_formatted": 1
                },
                "free": {
                    "deallocate_memory": 1
                },
                "lStack_b8": {
                    "adjusted_break": 1,
                    "base_address": 1,
                    "base_pointer": 1,
                    "base_ptr": 1,
                    "difference": 2,
                    "dynamic_memory_address": 1,
                    "dynamic_memory_start": 1,
                    "heap_offset": 3,
                    "initial_offset": 1,
                    "l_var_b8": 1,
                    "long_stack_variable": 1,
                    "memory_offset": 2,
                    "new_break": 1,
                    "offset": 1,
                    "pointer_adjustment": 1,
                    "stack_base": 1,
                    "stack_base_address": 1,
                    "stack_offset": 2,
                    "stack_top": 1,
                    "stack_var": 1,
                    "stack_var2": 1,
                    "stack_variable3": 1,
                    "string_stack_addr": 1,
                    "string_stack_offset": 1,
                    "temp_length": 1,
                    "total_bytes_offset": 1
                },
                "lVar7": {
                    "loop_counter": 1,
                    "total_length": 11
                },
                "param_1": {
                    "bytes_allocated": 1,
                    "error_message": 1,
                    "format_string": 1,
                    "input_string": 1,
                    "num_bytes": 1,
                    "size": 14,
                    "size_in_bytes": 2,
                    "size_of_allocation": 1,
                    "total_allocated_bytes": 2,
                    "total_bytes": 5
                },
                "pcVar1": {
                    "character": 1
                },
                "pcVar10": {
                    "temp_ptr1": 1
                },
                "pcVar5": {
                    "allocated_string": 1,
                    "concatenated_string": 1,
                    "error_message": 1,
                    "final_error_message": 1,
                    "formatted_error_message": 3,
                    "formatted_message": 2,
                    "formatted_string": 7,
                    "message": 2,
                    "new_string": 1,
                    "result": 4,
                    "result_string": 6
                },
                "pcVar8": {
                    "buffer": 1,
                    "current_char": 14,
                    "current_position": 1,
                    "current_string": 1,
                    "dest_string": 1,
                    "formatted_error_message": 1,
                    "formatted_message": 1,
                    "formatted_string2": 1,
                    "formatted_string_ptr": 1,
                    "message_buffer": 1,
                    "new_string": 2,
                    "next_char_in_formatted_error": 1,
                    "output_string": 1,
                    "ptr": 1,
                    "result_ptr": 2,
                    "string_pointer": 1
                },
                "ppcVar10": {
                    "array_iterator": 1,
                    "current_double_pointer": 1,
                    "current_string_arr": 1,
                    "current_string_array": 2,
                    "current_string_pointer": 2,
                    "current_string_ptr": 3,
                    "line_addresses_array": 1,
                    "pointer1": 1,
                    "pointer_array": 1,
                    "pointer_array1": 1,
                    "pointer_array2": 1,
                    "pointer_list": 1,
                    "pointer_to_pointer_3": 1,
                    "ppc_var_a": 1,
                    "previous_pointer": 1,
                    "ptr_to_char_ptr": 1,
                    "saved_register": 1,
                    "stack_pointer1": 1,
                    "stack_ptr": 1,
                    "string_array": 1,
                    "string_array_ptr1": 1,
                    "temp_pointer2": 1,
                    "temp_string_ptr": 1
                },
                "ppcVar11": {
                    "another_double_pointer": 1,
                    "next_array_iterator": 1,
                    "next_line_addresses_array": 1,
                    "next_pointer": 1,
                    "next_string_array": 2,
                    "next_string_pointer": 1,
                    "next_string_ptr": 2,
                    "pointer2": 1,
                    "pointer_array2": 2,
                    "pointer_array3": 1,
                    "pointer_to_pointer_2": 1,
                    "ppc_var_b": 1,
                    "prev_string_ptr": 1,
                    "previous_string_arr": 1,
                    "ptr_to_char_ptr_temp": 1,
                    "register_pointer2": 1,
                    "stack_pointer2": 1,
                    "string_array_ptr2": 1,
                    "string_list_ptr": 1,
                    "temp_array": 1,
                    "temp_pointer2": 1,
                    "temp_pointer3": 1,
                    "temp_ptr": 1,
                    "temp_ptr3": 1
                },
                "ppcVar6": {
                    "current_line_addr": 1,
                    "current_pointer": 1,
                    "current_string": 7,
                    "current_string_array": 1,
                    "double_pointer": 1,
                    "pointer_array": 2,
                    "pointer_to_pointer": 1,
                    "ppc_arg": 1,
                    "ptr_to_array_element": 1,
                    "string_array": 2,
                    "string_array_pointer": 1,
                    "string_pointer": 1,
                    "string_pointer_array": 1,
                    "temp_pointer": 1,
                    "temp_pointer1": 2,
                    "temp_ptr2": 1
                },
                "pvVar2": {
                    "brk_address": 1,
                    "brk_pointer": 1,
                    "brk_ptr": 1,
                    "current_break": 6,
                    "current_break_addr": 1,
                    "current_break_address": 1,
                    "current_brk": 3,
                    "current_brk_address": 1,
                    "current_brk_pointer": 1,
                    "current_end_addr": 1,
                    "current_heap": 2,
                    "current_heap_end": 1,
                    "current_heap_pointer": 2,
                    "current_heap_ptr": 1,
                    "current_memory": 1,
                    "current_memory_ptr": 1,
                    "heap_pointer": 1
                },
                "sVar3": {
                    "length": 7,
                    "str_len": 2,
                    "str_length": 2,
                    "string_length": 14,
                    "strlen_result": 1
                },
                "sbrk": {
                    "allocate_memory": 1,
                    "increase_break": 1
                },
                "strlen": {
                    "string_length": 1
                },
                "uStack_28": {
                    "arg28": 1,
                    "current_bytes": 1,
                    "extra3": 1,
                    "initial_bytes": 1,
                    "input_size": 2,
                    "input_value": 1,
                    "original_num_bytes": 1,
                    "original_param": 1,
                    "original_param1": 1,
                    "original_param_value": 1,
                    "original_size": 1,
                    "param1_copy": 3,
                    "param_1": 1,
                    "param_1_28": 1,
                    "param_1_copy2": 3,
                    "param_1_copy_2": 1,
                    "param_1_copy_copy": 1,
                    "param_1_temp": 1,
                    "param_3": 1,
                    "result_pointer": 1,
                    "stack_param": 1,
                    "stack_variable5": 1,
                    "total_allocated_bytes_formatted": 1,
                    "total_bytes3": 1,
                    "total_bytes_copy": 1,
                    "ulong_stack_variable_3": 1
                },
                "uStack_b0": {
                    "additional_bytes": 1,
                    "arg_b0": 1,
                    "extra_input": 1,
                    "extra_out3": 1,
                    "extra_output_format": 1,
                    "extra_output_value": 2,
                    "extra_param": 3,
                    "extra_result": 3,
                    "extra_return_value": 3,
                    "extra_value": 3,
                    "extra_value2": 1,
                    "extraout_xmm0_qa": 1,
                    "extraout_xmm0_qa_copy": 1,
                    "extraout_xmm0_qa_var": 1,
                    "param2": 1,
                    "param_value2": 1,
                    "result": 1,
                    "result_param": 1,
                    "return_var": 1,
                    "stack_value2": 1,
                    "stack_variable4": 1,
                    "ulong_stack_variable_2": 1
                },
                "uStack_c0": {
                    "arg_c0": 1,
                    "error_message_format": 1,
                    "extra_allocation": 1,
                    "extra_value": 1,
                    "format_string_size": 1,
                    "input": 1,
                    "input_ptr": 1,
                    "input_size": 2,
                    "original_num_bytes": 1,
                    "param": 1,
                    "param1": 4,
                    "param1_copy": 1,
                    "param_1": 2,
                    "param_1_c0": 1,
                    "param_1_copy": 6,
                    "param_2": 1,
                    "param_value1": 1,
                    "stack_variable2": 1,
                    "total_bytes": 1,
                    "total_bytes2": 1,
                    "ulong_stack_variable": 1
                },
                "uStack_f8": {
                    "counter": 2,
                    "current_index": 1,
                    "current_stack_amount": 1,
                    "current_stack_size": 1,
                    "loop_counter": 1,
                    "max_stack_size": 1,
                    "stack_counter": 1,
                    "stack_index": 1,
                    "stack_size": 9,
                    "stack_value": 3,
                    "stack_var": 3,
                    "stack_variable": 3,
                    "str_len_increment": 1,
                    "u_stack_f8": 1,
                    "uint_stack_variable": 1
                },
                "uVar4": {
                    "increment": 3,
                    "new_value": 1,
                    "temp": 3,
                    "temp_length": 1,
                    "temp_size": 3,
                    "temp_value": 2,
                    "temp_var": 4,
                    "temp_variable": 1,
                    "temporary_value": 1,
                    "u_value": 1,
                    "u_var4": 1,
                    "ulong_value": 3,
                    "ulong_var": 1,
                    "ulong_variable": 1,
                    "unsigned_variable": 1
                }
            },
            "called": [
                "sbrk",
                "FUN_00102fbc",
                "fprintf"
            ],
            "calling": [
                "FUN_00103449",
                "FUN_00102cbc"
            ],
            "code": "\n\n\nchar * allocate_memory_and_format_error_message_00102fc7(undefined8 size)\n\n{\n  char result;\n  void *current_break;\n  size_t strlen;\n  ulong temp_var;\n  char *formatted_string;\n  char **current_string;\n  undefined8 extra_result;\n  long total_length;\n  char *format_string;\n  FILE *output_stream;\n  char *current_char;\n  byte flag;\n  undefined8 extra_result2;\n  uint stack_size;\n  char **current_string_ptr;\n  char **next_string_ptr;\n  char *string_array [4];\n  undefined8 param_1_copy;\n  long heap_offset;\n  undefined8 extra_param;\n  undefined8 param_1_copy2;\n  \n  flag = 0;\n  current_break = sbrk(0);\n  heap_offset = (long)current_break + -0x10a0e0;\n  string_array[3] = \"\";\n  format_string = \"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\";\n  output_stream = _stderr;\n  param_1_copy = size;\n  fprintf(_stderr,\"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\");\n  result = FUN_00102fbc();\n  if (result != '\\0') {\n    extra_param = extra_result2;\n  }\n  total_length = 0;\n  stack_size = 0x10;\n  current_char = format_string;\n  current_string_ptr = (char **)register0x00000020;\n  string_array[2] = (char *)extra_result;\n  param_1_copy2 = size;\n  do {\n    string_length = string_length(current_char);\n    total_length = total_length + string_length;\n    if (stack_size < 0x30) {\n      temp_var = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      current_string = (char **)((long)string_array + temp_var);\n      next_string_ptr = current_string_ptr;\n    }\n    else {\n      next_string_ptr = current_string_ptr + 1;\n      current_string = current_string_ptr;\n    }\n    current_char = *current_string;\n    current_string_ptr = next_string_ptr;\n  } while (current_char != (char *)0x0);\n  formatted_string = (char *)FUN_00105370(total_length + 1);\n  stack_size = 0x10;\n  current_char = formatted_string;\n  current_string_ptr = (char **)register0x00000020;\n  do {\n    string_length = string_length(format_string);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *current_char = *format_string;\n      format_string = format_string + (ulong)flag * -2 + 1;\n      current_char = current_char + (ulong)flag * -2 + 1;\n    }\n    if (stack_size < 0x30) {\n      temp_var = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      current_string = (char **)((long)string_array + temp_var);\n      next_string_ptr = current_string_ptr;\n    }\n    else {\n      next_string_ptr = current_string_ptr + 1;\n      current_string = current_string_ptr;\n    }\n    format_string = *current_string;\n    current_string_ptr = next_string_ptr;\n  } while (format_string != (char *)0x0);\n  *current_char = '\\0';\n  free(output_stream);\n  return formatted_string;\n}\n\n",
            "current_name": "allocate_memory_and_format_error_message_00102fc7",
            "entrypoint": "0x00102fc7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fc7": "allocate_memory_and_format_error_message_00102fc7",
                "__ptr": "output_stream",
                "__s": "format_string",
                "apcStack_e0": "string_array",
                "bVar9": "flag",
                "cVar1": "result",
                "extraout_RDX": "extra_result",
                "extraout_XMM0_Qa": "extra_result2",
                "fprintf": "print_error_message",
                "free": "deallocate_memory",
                "lStack_b8": "heap_offset",
                "lVar7": "total_length",
                "param_1": "size",
                "pcVar1": "character",
                "pcVar10": "temp_ptr1",
                "pcVar5": "formatted_string",
                "pcVar8": "current_char",
                "ppcVar10": "current_string_ptr",
                "ppcVar11": "next_string_ptr",
                "ppcVar6": "current_string",
                "pvVar2": "current_break",
                "sVar3": "string_length",
                "sbrk": "increase_break",
                "strlen": "string_length",
                "uStack_28": "param_1_copy2",
                "uStack_b0": "extra_param",
                "uStack_c0": "param_1_copy",
                "uStack_f8": "stack_size",
                "uVar4": "temp_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103006": {
            "additional_data": {
                "FUN_00103006": {
                    "combine_strings": 3,
                    "concatenate_strings": 5,
                    "copy_and_free_memory": 1,
                    "copy_concat_strings": 1,
                    "copy_concatenated_string": 1,
                    "copy_concatenated_strings": 1,
                    "copy_string_with_alloc": 1,
                    "create_improved_string": 1,
                    "parse_arguments": 1,
                    "reverse_and_copy_string": 2,
                    "reverse_and_free_memory": 2,
                    "reverse_and_free_string": 1,
                    "reverse_string": 6,
                    "reverse_string_and_free": 1,
                    "string_concatenation": 2,
                    "string_concatenator": 1
                },
                "F_00103006": {
                    "reverse_string": 1
                },
                "bVar7": {
                    "bit_variable": 1,
                    "boolean_flag": 1,
                    "byte_val": 1,
                    "byte_value": 4,
                    "byte_var": 6,
                    "flag": 4,
                    "flag_byte": 2,
                    "increment": 4,
                    "increment_var": 1,
                    "inner_loop_flag": 1,
                    "is_negative": 1,
                    "loop_counter": 1,
                    "loop_flag": 1,
                    "loop_index": 2,
                    "loop_var": 1
                },
                "in_AL": {
                    "bool_input": 1,
                    "boolean_check": 1,
                    "boolean_flag": 1,
                    "check_char": 1,
                    "check_flag": 1,
                    "condition": 2,
                    "condition_flag": 1,
                    "conditional_flag": 1,
                    "flag": 14,
                    "input_char": 1,
                    "is_condition_true": 1,
                    "is_not_null": 2,
                    "some_condition": 1
                },
                "lVar5": {
                    "accumulated_length": 1,
                    "accumulator": 1,
                    "total_len": 1,
                    "total_length": 19,
                    "total_string_length": 2
                },
                "local_38": {
                    "arg8_copy": 2,
                    "flag8_copy": 1,
                    "input16": 1,
                    "input8": 1,
                    "input8_copy": 2,
                    "input8_ptr": 1,
                    "input_param8_copy": 2,
                    "input_param8_new": 1,
                    "local_input_8": 1,
                    "local_param_8": 1,
                    "local_val11": 1,
                    "local_var10": 1,
                    "local_var11": 1,
                    "local_var8": 1,
                    "new_param_16": 1,
                    "param8": 2,
                    "param_38": 1,
                    "size8": 1,
                    "temp13": 1,
                    "temp_arg8": 1,
                    "temp_var10": 1,
                    "temp_variable10": 1,
                    "undefined_param8": 1,
                    "unused14": 1,
                    "unused_local_var_38": 1,
                    "var8": 1
                },
                "local_48": {
                    "arg7_copy": 2,
                    "flag7_copy": 1,
                    "input15": 1,
                    "input7": 1,
                    "input7_copy": 2,
                    "input7_ptr": 1,
                    "input_param7_copy": 2,
                    "input_param7_new": 1,
                    "local_input_7": 1,
                    "local_param_7": 1,
                    "local_val10": 1,
                    "local_var10": 1,
                    "local_var7": 1,
                    "local_var9": 1,
                    "new_param_15": 1,
                    "param7": 2,
                    "param_48": 1,
                    "size7": 1,
                    "temp12": 1,
                    "temp_arg7": 1,
                    "temp_var9": 1,
                    "temp_variable9": 1,
                    "undefined_param7": 1,
                    "unused13": 1,
                    "unused_local_var_48": 1,
                    "var7": 1
                },
                "local_58": {
                    "arg6_copy": 2,
                    "flag6_copy": 1,
                    "input14": 1,
                    "input6": 1,
                    "input6_copy": 2,
                    "input6_ptr": 1,
                    "input_param6_copy": 2,
                    "input_param6_new": 1,
                    "local_input_6": 1,
                    "local_param_6": 1,
                    "local_val9": 1,
                    "local_var6": 1,
                    "local_var8": 1,
                    "local_var9": 1,
                    "new_param_14": 1,
                    "param6": 2,
                    "param_58": 1,
                    "size6": 1,
                    "temp11": 1,
                    "temp_arg6": 1,
                    "temp_var8": 1,
                    "temp_variable8": 1,
                    "undefined_param6": 1,
                    "unused12": 1,
                    "unused_local_var_58": 1,
                    "var6": 1
                },
                "local_68": {
                    "arg5_copy": 2,
                    "flag5_copy": 1,
                    "input13": 1,
                    "input5": 1,
                    "input5_copy": 2,
                    "input5_ptr": 1,
                    "input_param5_copy": 2,
                    "input_param5_new": 1,
                    "local_input_5": 1,
                    "local_param_5": 1,
                    "local_val8": 1,
                    "local_var5": 1,
                    "local_var7": 1,
                    "local_var8": 1,
                    "new_param_13": 1,
                    "param5": 2,
                    "param_68": 1,
                    "size5": 1,
                    "temp10": 1,
                    "temp_arg5": 1,
                    "temp_var7": 1,
                    "temp_variable7": 1,
                    "undefined_param5": 1,
                    "unused11": 1,
                    "unused_local_var_68": 1,
                    "var5": 1
                },
                "local_78": {
                    "arg4_copy": 2,
                    "flag4_copy": 1,
                    "input12": 1,
                    "input4": 1,
                    "input4_copy": 2,
                    "input4_ptr": 1,
                    "input_param4_copy": 2,
                    "input_param4_new": 1,
                    "local_input_4": 1,
                    "local_param_4": 1,
                    "local_val7": 1,
                    "local_var4": 1,
                    "local_var6": 1,
                    "local_var7": 1,
                    "new_param_12": 1,
                    "param4": 2,
                    "param_78": 1,
                    "size4": 1,
                    "temp9": 1,
                    "temp_arg4": 1,
                    "temp_var6": 1,
                    "temp_variable6": 1,
                    "undefined_param4": 1,
                    "unused10": 1,
                    "unused_local_var_78": 1,
                    "var4": 1
                },
                "local_88": {
                    "arg3_copy": 2,
                    "flag3_copy": 1,
                    "input11": 1,
                    "input3": 1,
                    "input3_copy": 2,
                    "input3_ptr": 1,
                    "input_param3_copy": 2,
                    "input_param3_new": 1,
                    "local_input_3": 1,
                    "local_param_3": 1,
                    "local_val6": 1,
                    "local_var3": 1,
                    "local_var5": 1,
                    "local_var6": 1,
                    "new_param_11": 1,
                    "param3": 2,
                    "param_88": 1,
                    "size3": 1,
                    "temp8": 1,
                    "temp_arg3": 1,
                    "temp_var5": 1,
                    "temp_variable5": 1,
                    "undefined_param3": 1,
                    "unused9": 1,
                    "unused_local_var_88": 1,
                    "var3": 1
                },
                "local_98": {
                    "arg2_copy": 2,
                    "flag2_copy": 1,
                    "input10": 1,
                    "input2": 1,
                    "input2_copy": 2,
                    "input2_ptr": 1,
                    "input_param2_copy": 2,
                    "input_param2_new": 1,
                    "local_input_2": 1,
                    "local_param_2": 1,
                    "local_val5": 1,
                    "local_var2": 1,
                    "local_var4": 1,
                    "local_var5": 1,
                    "new_param_10": 1,
                    "param2": 2,
                    "param_98": 1,
                    "size2": 1,
                    "temp7": 1,
                    "temp_arg2": 1,
                    "temp_var4": 1,
                    "temp_variable4": 1,
                    "undefined_param2": 1,
                    "unused8": 1,
                    "unused_local_var_98": 1,
                    "var2": 1
                },
                "local_a8": {
                    "arg1_copy": 2,
                    "flag1_copy": 1,
                    "input1": 1,
                    "input1_copy": 2,
                    "input1_ptr": 1,
                    "input9": 1,
                    "input_param1_copy": 2,
                    "input_param1_new": 1,
                    "local_input_1": 1,
                    "local_param_1": 1,
                    "local_val4": 1,
                    "local_var1": 1,
                    "local_var3": 1,
                    "local_var4": 1,
                    "new_param_9": 1,
                    "param1": 2,
                    "param_a8": 1,
                    "size1": 1,
                    "temp6": 1,
                    "temp_arg1": 1,
                    "temp_var3": 1,
                    "temp_variable3": 1,
                    "undefined_param1": 1,
                    "unused7": 1,
                    "unused_local_var_a8": 1,
                    "var10": 1
                },
                "local_b0": {
                    "address_param4_new": 1,
                    "arg14_copy": 1,
                    "input14_copy": 1,
                    "input_param14_copy": 1,
                    "local_long_2": 1,
                    "local_param2": 1,
                    "local_param_14": 1,
                    "local_val3": 1,
                    "local_var2": 1,
                    "local_var3": 1,
                    "param14": 5,
                    "param14_copy": 3,
                    "param14_ptr": 1,
                    "param_b0": 1,
                    "ptr_6": 1,
                    "temp5": 1,
                    "temp_arg14": 1,
                    "temp_var2": 1,
                    "temp_variable2": 1,
                    "undefined_string6": 1,
                    "unused6": 1,
                    "unused_local_var_b0": 1,
                    "value6": 1,
                    "var9": 1
                },
                "local_b8": {
                    "address_param3_new": 1,
                    "arg13_copy": 1,
                    "input13_copy": 1,
                    "input_param13_copy": 1,
                    "local_long_1": 1,
                    "local_param1": 1,
                    "local_param_13": 1,
                    "local_val2": 1,
                    "local_var1": 1,
                    "local_var2": 1,
                    "param13": 5,
                    "param13_copy": 3,
                    "param13_ptr": 1,
                    "param_b8": 1,
                    "ptr_5": 1,
                    "temp4": 1,
                    "temp_arg13": 1,
                    "temp_var1": 1,
                    "temp_variable1": 1,
                    "undefined_string5": 1,
                    "unused5": 1,
                    "unused_local_var_b8": 1,
                    "value5": 1,
                    "var8": 1
                },
                "local_d8": {
                    "array_of_pointers": 1,
                    "conversion_array": 1,
                    "local_arr1": 1,
                    "local_array": 5,
                    "local_pointers": 1,
                    "local_ptr2": 1,
                    "local_string_array": 1,
                    "local_strings": 1,
                    "local_var_d8": 1,
                    "param_array": 1,
                    "pointer_array": 1,
                    "pointer_array2": 1,
                    "pointers_array": 1,
                    "stack_array": 1,
                    "string_array": 3,
                    "string_array_pointer": 1,
                    "string_pointer_array2": 1,
                    "strings": 1,
                    "temp3": 1,
                    "temp_buffer": 1,
                    "temp_stack_variables": 1,
                    "temp_string_array": 2,
                    "transfer_arr": 1
                },
                "local_e8": {
                    "array_of_strings": 1,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "double_pointer": 1,
                    "heap_array": 1,
                    "local_array": 1,
                    "local_ptr1": 2,
                    "local_string_array": 1,
                    "local_string_ptr": 1,
                    "local_var_e8": 1,
                    "pointer_array": 5,
                    "ptr_array2": 1,
                    "stack_pointer_array": 1,
                    "stack_pointers": 1,
                    "stack_ptr_array": 1,
                    "stack_top": 1,
                    "string_array": 3,
                    "string_array_ptr": 1,
                    "string_pointer_array": 2,
                    "string_pointers": 1,
                    "string_ptr_ptr_array": 1,
                    "strings_arr": 1,
                    "temp2": 1
                },
                "local_f0": {
                    "array_index": 1,
                    "array_size": 2,
                    "buffer_size": 3,
                    "count_var": 1,
                    "counter": 4,
                    "counter1": 1,
                    "counter_f0": 1,
                    "current_offset": 1,
                    "dynamic_size1": 1,
                    "increment_value": 1,
                    "local_count": 2,
                    "local_counter": 3,
                    "local_val1": 1,
                    "local_var1": 1,
                    "local_var_f0": 1,
                    "pointer_index": 1,
                    "size": 3,
                    "stack_size": 2,
                    "temp1": 1
                },
                "param_1": {
                    "arg1": 4,
                    "flag1": 2,
                    "flags": 1,
                    "input1": 11,
                    "input_1": 1,
                    "input_param1": 4,
                    "new_param_1": 1,
                    "num1": 1,
                    "param1": 1,
                    "size1": 2,
                    "size_param": 2,
                    "unused_param": 1
                },
                "param_10": {
                    "copy_string": 1,
                    "input_array": 1,
                    "input_string": 8,
                    "original_string": 2,
                    "source_str": 1,
                    "source_string": 6,
                    "source_strings": 1,
                    "str": 1,
                    "str_to_reverse": 1,
                    "string": 1,
                    "string2": 1,
                    "string_array": 5,
                    "string_to_copy": 1,
                    "strings": 1
                },
                "param_11": {
                    "address_param1": 1,
                    "arg11": 1,
                    "concat_string1": 1,
                    "data1": 1,
                    "input11": 1,
                    "input_param11": 1,
                    "long_ptr_1": 1,
                    "param11": 14,
                    "param_11": 2,
                    "ptr1": 1,
                    "ptr2": 1,
                    "ptr_1": 1,
                    "undefined_string1": 1,
                    "unused1": 1,
                    "unused_param_long_1": 1,
                    "value1": 1,
                    "var11": 1
                },
                "param_12": {
                    "address_param2": 1,
                    "arg12": 1,
                    "concat_string2": 1,
                    "data2": 1,
                    "input12": 1,
                    "input_param12": 1,
                    "long_ptr_2": 1,
                    "param12": 14,
                    "param_12": 2,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr_2": 1,
                    "undefined_string2": 1,
                    "unused2": 1,
                    "unused_param_long_2": 1,
                    "value2": 1,
                    "var12": 1
                },
                "param_13": {
                    "address_param3": 1,
                    "arg13": 1,
                    "data3": 1,
                    "input13": 1,
                    "input_param13": 1,
                    "long_1": 1,
                    "num9": 1,
                    "param13": 14,
                    "param_13": 2,
                    "parameter13": 1,
                    "ptr3": 1,
                    "ptr_3": 1,
                    "undefined_string3": 1,
                    "unused3": 1,
                    "unused_param_long_3": 1,
                    "value3": 1,
                    "var13": 1
                },
                "param_14": {
                    "address_param4": 1,
                    "arg14": 1,
                    "data4": 1,
                    "input14": 1,
                    "input_param14": 1,
                    "long_2": 1,
                    "num10": 1,
                    "param14": 14,
                    "param_14": 2,
                    "parameter14": 1,
                    "ptr4": 1,
                    "ptr_4": 1,
                    "undefined_string4": 1,
                    "unused4": 1,
                    "unused_param_long_4": 1,
                    "value4": 1,
                    "var14": 1
                },
                "param_2": {
                    "arg2": 3,
                    "counter": 1,
                    "flag2": 2,
                    "input2": 11,
                    "input_2": 1,
                    "input_param2": 4,
                    "new_param_2": 1,
                    "num2": 1,
                    "param2": 1,
                    "param_2": 1,
                    "size2": 2,
                    "undefined2_param": 1,
                    "unused_param": 1
                },
                "param_3": {
                    "arg3": 3,
                    "flag3": 2,
                    "input3": 11,
                    "input_3": 1,
                    "input_param3": 4,
                    "new_param_3": 1,
                    "num3": 1,
                    "param3": 1,
                    "param_3": 1,
                    "size3": 2,
                    "size_param": 1,
                    "undefined4_param": 1,
                    "unused_param": 1
                },
                "param_4": {
                    "arg4": 3,
                    "flag4": 2,
                    "input4": 11,
                    "input_4": 1,
                    "input_param4": 4,
                    "new_param_4": 1,
                    "num4": 1,
                    "param4": 1,
                    "param_4": 2,
                    "size4": 2,
                    "undefined6_param": 1,
                    "unused_param": 1
                },
                "param_5": {
                    "arg5": 3,
                    "flag5": 2,
                    "input5": 11,
                    "input_5": 1,
                    "input_param5": 4,
                    "new_param_5": 1,
                    "num5": 1,
                    "param5": 1,
                    "param_5": 2,
                    "size5": 2,
                    "undefined8_param": 1,
                    "unused_param": 1
                },
                "param_6": {
                    "arg6": 3,
                    "flag6": 2,
                    "input6": 11,
                    "input_6": 1,
                    "input_param6": 4,
                    "new_param_6": 1,
                    "num6": 1,
                    "param6": 1,
                    "param_6": 2,
                    "size6": 2,
                    "undefined10_param": 1,
                    "unused_param": 1
                },
                "param_7": {
                    "arg7": 3,
                    "flag7": 2,
                    "input7": 11,
                    "input_7": 1,
                    "input_param7": 4,
                    "new_param_7": 1,
                    "num7": 1,
                    "param7": 1,
                    "param_7": 2,
                    "size7": 2,
                    "undefined12_param": 1,
                    "unused_param": 1
                },
                "param_8": {
                    "arg8": 3,
                    "flag8": 2,
                    "input8": 11,
                    "input_8": 1,
                    "input_param8": 4,
                    "new_param_8": 1,
                    "num8": 1,
                    "param8": 1,
                    "param_8": 2,
                    "size8": 2,
                    "undefined14_param": 1,
                    "unused_param": 1
                },
                "param_9": {
                    "allocated_memory": 1,
                    "buffer": 4,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "dynamic_memory": 2,
                    "input_buffer": 2,
                    "input_pointer": 2,
                    "input_string": 1,
                    "memory": 2,
                    "memory_block": 8,
                    "original_string": 1,
                    "ptr1": 1,
                    "str_to_free": 1,
                    "string1": 1,
                    "string_array": 1,
                    "string_to_free": 1,
                    "string_to_reverse": 1
                },
                "pcVar3": {
                    "combined_string": 1,
                    "concatenated_string": 2,
                    "new_str": 1,
                    "new_string": 1,
                    "output_string": 2,
                    "result": 8,
                    "result_ptr": 1,
                    "result_str": 1,
                    "result_string": 10,
                    "return_string": 1,
                    "reversed_string": 2
                },
                "pcVar6": {
                    "copy_destination": 1,
                    "copy_pointer": 1,
                    "curr_char": 2,
                    "current_char": 10,
                    "current_char_ptr": 1,
                    "current_str": 1,
                    "current_string": 7,
                    "dest_ptr": 1,
                    "dest_string": 1,
                    "destination": 1,
                    "output_string": 2,
                    "source": 1,
                    "source_ptr": 1
                },
                "ppcVar4": {
                    "current_string": 2,
                    "current_string_pointer": 1,
                    "current_string_ptr": 2,
                    "double_pointer": 1,
                    "param_ptr": 1,
                    "pointer_array_ptr": 1,
                    "pointer_to_array": 1,
                    "pointer_to_array_of_strings": 1,
                    "pointer_to_string": 2,
                    "ppc_var": 1,
                    "ptr": 1,
                    "ptr_array": 1,
                    "str_ptr": 1,
                    "string_array": 3,
                    "string_array_ptr": 1,
                    "string_pp": 1,
                    "string_ptr_ptr": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 1
                },
                "sVar1": {
                    "length": 6,
                    "str_len": 1,
                    "str_length": 1,
                    "string_length": 13
                },
                "uVar2": {
                    "index": 2,
                    "nsu_integer": 1,
                    "size": 2,
                    "temp": 7,
                    "temp_size": 1,
                    "temp_value": 1,
                    "temp_var": 3,
                    "ulong_length": 1,
                    "ulong_val": 1,
                    "ulong_value": 2
                }
            },
            "called": [
                "free",
                "strlen",
                "FUN_00105370"
            ],
            "calling": [
                "FUN_001032de"
            ],
            "code": "\nchar * reverse_and_copy_string_00103006(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                   undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                   void *memory_block,char *input_string,undefined8 param11,undefined8 param12,\n                   undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  size_t string_length;\n  ulong temp;\n  char *result_string;\n  char **string_array;\n  long total_length;\n  char *current_char;\n  byte byte_var;\n  uint counter;\n  char **pointer_array;\n  char *local_array [4];\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 param1;\n  undefined4 input_param2_copy;\n  undefined4 input_param3_copy;\n  undefined4 arg4_copy;\n  undefined4 arg5_copy;\n  undefined4 arg6_copy;\n  undefined4 arg7_copy;\n  undefined4 arg8_copy;\n  \n  byte_var = 0;\n  if (flag != '\\0') {\n    param1 = input1;\n    input_param2_copy = input2;\n    input_param3_copy = input3;\n    arg4_copy = input4;\n    arg5_copy = input5;\n    arg6_copy = input6;\n    arg7_copy = input7;\n    arg8_copy = input8;\n  }\n  pointer_array = (char **)&stack0x00000008;\n  total_length = 0;\n  counter = 0x10;\n  current_char = input_string;\n  local_array[2] = (char *)param11;\n  local_array[3] = (char *)param12;\n  param13 = param13;\n  param14 = param14;\n  do {\n    string_length = strlen(current_char);\n    total_length = total_length + string_length;\n    if (counter < 0x30) {\n      temp = (ulong)counter;\n      counter = counter + 8;\n      string_array = (char **)((long)local_array + temp);\n    }\n    else {\n      string_array = pointer_array;\n      pointer_array = pointer_array + 1;\n    }\n    current_char = *string_array;\n  } while (current_char != (char *)0x0);\n  result_string = (char *)FUN_00105370(total_length + 1);\n  counter = 0x10;\n  pointer_array = (char **)&stack0x00000008;\n  current_char = result_string;\n  do {\n    string_length = strlen(input_string);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *current_char = *input_string;\n      input_string = input_string + (ulong)byte_var * -2 + 1;\n      current_char = current_char + (ulong)byte_var * -2 + 1;\n    }\n    if (counter < 0x30) {\n      temp = (ulong)counter;\n      counter = counter + 8;\n      string_array = (char **)((long)local_array + temp);\n    }\n    else {\n      string_array = pointer_array;\n      pointer_array = pointer_array + 1;\n    }\n    input_string = *string_array;\n  } while (input_string != (char *)0x0);\n  *current_char = '\\0';\n  free(memory_block);\n  return result_string;\n}\n\n",
            "current_name": "reverse_and_copy_string_00103006",
            "entrypoint": "0x00103006",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103006": "reverse_and_copy_string_00103006",
                "bVar7": "byte_var",
                "in_AL": "flag",
                "lVar5": "total_length",
                "local_38": "arg8_copy",
                "local_48": "arg7_copy",
                "local_58": "arg6_copy",
                "local_68": "arg5_copy",
                "local_78": "arg4_copy",
                "local_88": "input_param3_copy",
                "local_98": "input_param2_copy",
                "local_a8": "param1",
                "local_b0": "param14",
                "local_b8": "param13",
                "local_d8": "local_array",
                "local_e8": "pointer_array",
                "local_f0": "counter",
                "param_1": "input1",
                "param_10": "input_string",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "memory_block",
                "pcVar3": "result_string",
                "pcVar6": "current_char",
                "ppcVar4": "string_array",
                "sVar1": "string_length",
                "uVar2": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103160": {
            "additional_data": {
                "FUN_00103160": {
                    "copy_and_advance": 1,
                    "copy_and_increment": 1,
                    "copy_and_modify_string": 1,
                    "copy_string": 26,
                    "copy_string_with_offset": 2
                },
                "bVar4": {
                    "byte_increment": 1,
                    "byte_value": 5,
                    "byte_var": 4,
                    "counter": 2,
                    "flag": 1,
                    "increment": 3,
                    "increment_value": 1,
                    "index": 4,
                    "iteration": 1,
                    "iteration_counter": 1,
                    "iteration_variable": 1,
                    "loop_count": 1,
                    "offset": 6
                },
                "lVar3": {
                    "buffer_length": 1,
                    "copied_length": 1,
                    "length": 7,
                    "length_plus_one": 11,
                    "length_with_null": 2,
                    "length_with_null_terminator": 2,
                    "loop_counter": 1,
                    "new_length": 1,
                    "new_string_length": 1,
                    "string_length": 1,
                    "total_length": 3
                },
                "param_1": {
                    "input_string": 14,
                    "original_string": 2,
                    "source_string": 15
                },
                "pcVar2": {
                    "copied_string": 18,
                    "copy_buffer": 1,
                    "dest_string": 1,
                    "destination_string": 6,
                    "new_string": 2,
                    "new_string_pointer": 1,
                    "output_string": 2
                },
                "sVar1": {
                    "input_length": 4,
                    "source_length": 7,
                    "source_string_length": 1,
                    "string_length": 19
                }
            },
            "called": [
                "strlen",
                "FUN_00105370"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\nvoid copy_string_with_offset_00103160(char *source_string)\n\n{\n  size_t string_length;\n  char *copied_string;\n  long length_plus_one;\n  byte offset;\n  \n  offset = 0;\n  string_length = strlen(source_string);\n  length_plus_one = string_length + 1;\n  copied_string = (char *)FUN_00105370(length_plus_one);\n  for (; length_plus_one != 0; length_plus_one = length_plus_one + -1) {\n    *copied_string = *source_string;\n    source_string = source_string + (ulong)offset * -2 + 1;\n    copied_string = copied_string + (ulong)offset * -2 + 1;\n  }\n  return;\n}\n\n",
            "current_name": "copy_string_with_offset_00103160",
            "entrypoint": "0x00103160",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103160": "copy_string_with_offset_00103160",
                "bVar4": "offset",
                "lVar3": "length_plus_one",
                "param_1": "source_string",
                "pcVar2": "copied_string",
                "sVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103186": {
            "additional_data": {
                "FUN_00103186": {
                    "concatenate_strings": 1,
                    "extract_concatenated_strings": 1,
                    "extract_data": 1,
                    "extract_data_from_binary": 1,
                    "extract_string": 2,
                    "extract_string_from_binary": 1,
                    "extract_string_from_params": 1,
                    "extract_strings": 3,
                    "parse_string": 1,
                    "process_data": 1,
                    "reconstruct_string": 2,
                    "reverse_and_combine_strings": 1,
                    "reverse_and_concat_strings": 1,
                    "reverse_and_concatenate_strings": 5,
                    "reverse_string": 4,
                    "reverse_string_concatenation": 2
                },
                "bVar8": {
                    "backwards_flag": 1,
                    "boolean_variable": 1,
                    "byte_flag": 1,
                    "byte_value": 1,
                    "byte_var": 5,
                    "flag": 9,
                    "increment": 3,
                    "increment_flag": 1,
                    "is_flag_set": 1,
                    "is_negative": 4,
                    "reverse_direction": 2,
                    "reverse_flag": 1,
                    "temp_var": 1
                },
                "in_AL": {
                    "bool_flag": 1,
                    "condition": 6,
                    "condition_flag": 1,
                    "conditional_flag": 1,
                    "flag": 10,
                    "input_char": 4,
                    "input_flag": 1,
                    "is_empty_string": 1,
                    "is_non_null": 1,
                    "should_extract": 1
                },
                "lVar5": {
                    "accumulator": 1,
                    "string_accumulator": 1,
                    "string_length": 1,
                    "total_len": 1,
                    "total_length": 19,
                    "total_str_len": 1,
                    "total_str_length": 1
                },
                "local_28": {
                    "additional_input_8": 1,
                    "arg8": 1,
                    "arg8_new": 1,
                    "argument8": 1,
                    "eighth_param": 1,
                    "eighth_variable": 1,
                    "input21": 1,
                    "input8": 2,
                    "input8_copy": 1,
                    "input_8_copy": 1,
                    "input_8_saved": 1,
                    "input_param24": 1,
                    "local_param8": 1,
                    "local_param_8": 3,
                    "local_var10": 1,
                    "local_var_28": 1,
                    "local_variable_10": 1,
                    "param8": 1,
                    "param8_copy": 1,
                    "temp_param8": 1,
                    "temp_var10": 1,
                    "unknown_var10": 1,
                    "unused11": 1,
                    "unused8": 1,
                    "unused_var10": 2
                },
                "local_38": {
                    "additional_input_7": 1,
                    "arg7": 1,
                    "arg7_new": 1,
                    "argument7": 1,
                    "input20": 1,
                    "input7": 2,
                    "input7_copy": 1,
                    "input_7_copy": 1,
                    "input_7_saved": 1,
                    "input_param23": 1,
                    "local_param7": 1,
                    "local_param_7": 3,
                    "local_var9": 1,
                    "local_var_38": 1,
                    "local_variable_9": 1,
                    "param7": 1,
                    "param7_copy": 1,
                    "seventh_param": 1,
                    "seventh_variable": 1,
                    "temp_param7": 1,
                    "temp_var9": 1,
                    "unknown_var9": 1,
                    "unused10": 1,
                    "unused7": 1,
                    "unused_var9": 2
                },
                "local_48": {
                    "additional_input_6": 1,
                    "arg6": 1,
                    "arg6_new": 1,
                    "argument6": 1,
                    "input19": 1,
                    "input6": 2,
                    "input6_copy": 1,
                    "input_6_copy": 1,
                    "input_6_saved": 1,
                    "input_param22": 1,
                    "local_param6": 1,
                    "local_param_6": 3,
                    "local_var8": 1,
                    "local_var_48": 1,
                    "local_variable_8": 1,
                    "param6": 1,
                    "param6_copy": 1,
                    "sixth_param": 1,
                    "sixth_variable": 1,
                    "temp_param6": 1,
                    "temp_var8": 1,
                    "unknown_var8": 1,
                    "unused6": 1,
                    "unused9": 1,
                    "unused_var8": 2
                },
                "local_58": {
                    "additional_input_5": 1,
                    "arg5": 1,
                    "arg5_new": 1,
                    "argument5": 1,
                    "fifth_param": 1,
                    "fifth_variable": 1,
                    "input18": 1,
                    "input5": 2,
                    "input5_copy": 1,
                    "input_5_copy": 1,
                    "input_5_saved": 1,
                    "input_param21": 1,
                    "local_param5": 1,
                    "local_param_5": 3,
                    "local_var7": 1,
                    "local_var_58": 1,
                    "local_variable_7": 1,
                    "param5": 1,
                    "param5_copy": 1,
                    "temp_param5": 1,
                    "temp_var7": 1,
                    "unknown_var7": 1,
                    "unused5": 1,
                    "unused8": 1,
                    "unused_var7": 2
                },
                "local_68": {
                    "additional_input_4": 1,
                    "arg4": 1,
                    "arg4_new": 1,
                    "argument4": 1,
                    "fourth_param": 1,
                    "fourth_variable": 1,
                    "input17": 1,
                    "input4": 2,
                    "input4_copy": 1,
                    "input_4_copy": 1,
                    "input_4_saved": 1,
                    "input_param20": 1,
                    "local_param4": 1,
                    "local_param_4": 3,
                    "local_var6": 1,
                    "local_var_68": 1,
                    "local_variable_6": 1,
                    "param4": 1,
                    "param4_copy": 1,
                    "temp_param4": 1,
                    "temp_var6": 1,
                    "unknown_var6": 1,
                    "unused4": 1,
                    "unused7": 1,
                    "unused_var6": 2
                },
                "local_78": {
                    "additional_input_3": 1,
                    "arg3": 1,
                    "arg3_new": 1,
                    "argument3": 1,
                    "input16": 1,
                    "input3": 2,
                    "input3_copy": 1,
                    "input_3_copy": 1,
                    "input_3_saved": 1,
                    "input_param19": 1,
                    "local_param3": 1,
                    "local_param_3": 3,
                    "local_var5": 1,
                    "local_var_78": 1,
                    "local_variable_5": 1,
                    "param3": 1,
                    "param3_copy": 1,
                    "temp_param3": 1,
                    "temp_var5": 1,
                    "third_param": 1,
                    "third_variable": 1,
                    "unknown_var5": 1,
                    "unused3": 1,
                    "unused6": 1,
                    "unused_var5": 2
                },
                "local_88": {
                    "additional_input_2": 1,
                    "arg2": 1,
                    "arg2_new": 1,
                    "argument2": 1,
                    "input15": 1,
                    "input2": 2,
                    "input2_copy": 1,
                    "input_2_copy": 1,
                    "input_2_saved": 1,
                    "input_param18": 1,
                    "local_param2": 1,
                    "local_param_2": 3,
                    "local_var4": 1,
                    "local_var_88": 1,
                    "local_variable_4": 1,
                    "param2": 1,
                    "param2_copy": 1,
                    "second_param": 1,
                    "second_variable": 1,
                    "temp_param2": 1,
                    "temp_var4": 1,
                    "unknown_var4": 1,
                    "unused2": 1,
                    "unused5": 1,
                    "unused_var4": 2
                },
                "local_98": {
                    "additional_input_1": 1,
                    "arg1": 1,
                    "arg1_new": 1,
                    "argument1": 1,
                    "first_param": 1,
                    "first_variable": 1,
                    "input1": 2,
                    "input14": 1,
                    "input1_copy": 1,
                    "input_1_copy": 1,
                    "input_1_saved": 1,
                    "input_param17": 1,
                    "local_param1": 1,
                    "local_param_1": 3,
                    "local_var3": 1,
                    "local_var_98": 1,
                    "local_variable_3": 1,
                    "param1": 1,
                    "param1_copy": 1,
                    "temp_param1": 1,
                    "temp_var3": 1,
                    "unknown_var3": 1,
                    "unused1": 1,
                    "unused4": 1,
                    "unused_var3": 2
                },
                "local_a0": {
                    "additional_offset_2": 1,
                    "additional_value_2": 1,
                    "arg14": 1,
                    "arg14_new": 1,
                    "argument10": 1,
                    "data6": 1,
                    "fourteenth_variable": 1,
                    "input13": 1,
                    "input_14_copy": 1,
                    "input_param16": 1,
                    "local_param14": 1,
                    "local_param_14": 3,
                    "local_var2": 1,
                    "local_var_a0": 1,
                    "local_variable_2": 1,
                    "param10": 1,
                    "param14": 2,
                    "param14_copy": 1,
                    "param_14": 1,
                    "size_limit5": 1,
                    "temp_param14": 1,
                    "temp_var2": 1,
                    "unknown_var2": 1,
                    "unused3": 1,
                    "unused_var2": 2,
                    "var8": 1
                },
                "local_a8": {
                    "additional_offset_1": 1,
                    "additional_value_1": 1,
                    "arg13": 1,
                    "arg13_new": 1,
                    "argument9": 1,
                    "data5": 1,
                    "input12": 1,
                    "input_13_copy": 1,
                    "input_param15": 1,
                    "local_param13": 1,
                    "local_param_13": 3,
                    "local_var1": 1,
                    "local_var_a8": 1,
                    "local_variable_1": 1,
                    "param13": 2,
                    "param13_copy": 1,
                    "param9": 1,
                    "param_13": 1,
                    "size_limit4": 1,
                    "temp_param13": 1,
                    "temp_var1": 1,
                    "thirteenth_variable": 1,
                    "unknown_var1": 1,
                    "unused2": 1,
                    "unused_var1": 2,
                    "var7": 1
                },
                "local_c8": {
                    "arguments": 1,
                    "input_array": 2,
                    "input_strings": 1,
                    "local_array": 1,
                    "local_array_c8": 1,
                    "local_buffers": 1,
                    "local_params_array": 1,
                    "local_ptr_array": 1,
                    "local_string_array": 1,
                    "local_string_list": 1,
                    "offsets": 1,
                    "param_10_to_12": 1,
                    "param_array": 4,
                    "parameters_array": 1,
                    "parsed_string_array": 1,
                    "pointer_array": 1,
                    "ptr_array": 1,
                    "stack_array": 1,
                    "str_array": 2,
                    "string_array": 3,
                    "strings": 1,
                    "temp_array": 1,
                    "temp_string_array": 1
                },
                "local_d8": {
                    "array_of_strings": 1,
                    "array_pointer_array": 1,
                    "current_string_array": 1,
                    "current_string_pointer": 1,
                    "extra_ptr": 1,
                    "local_array": 3,
                    "local_array_d8": 1,
                    "local_buffer": 1,
                    "local_pointer": 1,
                    "local_ptr_array": 1,
                    "local_string_array": 2,
                    "pointer_array": 1,
                    "pointer_to_current_str": 1,
                    "pointer_to_pointer": 1,
                    "pointer_to_stack_memory": 1,
                    "ppc_var": 1,
                    "ppc_var_array": 1,
                    "ptr_to_ptr_to_str": 1,
                    "str_array_ptr": 1,
                    "string_array": 3,
                    "string_array_pointer": 1,
                    "string_array_ptr": 2,
                    "string_list": 1,
                    "string_pointers": 1,
                    "string_ptr_ptr_array": 1
                },
                "local_e0": {
                    "array_size": 1,
                    "buffer_size": 1,
                    "count": 1,
                    "counter": 4,
                    "counter_var": 1,
                    "current_limit": 1,
                    "current_offset": 1,
                    "dynamic_alloc_size": 1,
                    "increment": 1,
                    "local_count": 2,
                    "local_counter": 5,
                    "local_index": 3,
                    "local_offset": 2,
                    "local_value": 1,
                    "local_var0": 1,
                    "local_var1": 1,
                    "local_var_e0": 1,
                    "loop_counter": 1,
                    "offset": 1,
                    "string_offset": 1
                },
                "param_1": {
                    "arg1": 4,
                    "buffer1": 1,
                    "first_input": 1,
                    "first_param": 3,
                    "flag1": 1,
                    "input1": 8,
                    "input_1": 6,
                    "input_param1": 3,
                    "input_param_1": 2,
                    "param1": 1,
                    "string1": 1
                },
                "param_10": {
                    "arg10": 3,
                    "data2": 1,
                    "input10": 1,
                    "input_10": 3,
                    "input_param10": 3,
                    "input_param_10": 2,
                    "offset_2": 1,
                    "param10": 6,
                    "param_10": 2,
                    "param_ten": 1,
                    "string1": 1,
                    "string_1": 1,
                    "string_param1": 1,
                    "string_pointer1": 1,
                    "tenth_param": 1,
                    "unknown_param2": 1,
                    "unused_param2": 1,
                    "var2": 1
                },
                "param_11": {
                    "arg11": 3,
                    "data3": 1,
                    "eleventh_param": 1,
                    "input11": 1,
                    "input_11": 3,
                    "input_param11": 3,
                    "input_param_11": 2,
                    "offset_3": 1,
                    "param11": 6,
                    "param_11": 2,
                    "param_eleven": 1,
                    "string2": 1,
                    "string_2": 1,
                    "string_param2": 1,
                    "string_pointer2": 1,
                    "unknown_param3": 1,
                    "unused_param3": 1,
                    "var3": 1
                },
                "param_12": {
                    "arg12": 3,
                    "data4": 1,
                    "input12": 1,
                    "input_12": 3,
                    "input_param12": 3,
                    "input_param_12": 2,
                    "offset_4": 1,
                    "param12": 6,
                    "param_12": 2,
                    "param_twelve": 1,
                    "string3": 1,
                    "string_3": 1,
                    "string_param3": 1,
                    "string_pointer3": 1,
                    "twelfth_param": 1,
                    "unknown_param4": 1,
                    "unused_param4": 1,
                    "var4": 1
                },
                "param_13": {
                    "additional_offset_1": 1,
                    "arg13": 3,
                    "data5": 1,
                    "input10": 1,
                    "input13": 1,
                    "input_13": 3,
                    "input_param13": 3,
                    "input_param_13": 2,
                    "param13": 6,
                    "param_13": 2,
                    "param_thirteen": 1,
                    "size_limit2": 1,
                    "thirteenth_param": 1,
                    "unknown_param5": 1,
                    "unused_param2": 1,
                    "unused_param5": 1,
                    "value_1": 1,
                    "var5": 1
                },
                "param_14": {
                    "additional_offset_2": 1,
                    "arg14": 3,
                    "data6": 1,
                    "fourteenth_param": 1,
                    "input11": 1,
                    "input14": 1,
                    "input_14": 3,
                    "input_param14": 3,
                    "input_param_14": 2,
                    "param14": 6,
                    "param_14": 2,
                    "param_fourteen": 1,
                    "size_limit3": 1,
                    "unknown_param6": 1,
                    "unused_param3": 1,
                    "unused_param6": 1,
                    "value_2": 1,
                    "var6": 1
                },
                "param_2": {
                    "arg2": 4,
                    "buffer2": 1,
                    "flag2": 1,
                    "input2": 8,
                    "input_2": 6,
                    "input_param2": 3,
                    "input_param_2": 2,
                    "param2": 1,
                    "second_input": 1,
                    "second_param": 3,
                    "string2": 1
                },
                "param_3": {
                    "arg3": 4,
                    "buffer3": 1,
                    "flag3": 1,
                    "input3": 8,
                    "input_3": 6,
                    "input_param3": 3,
                    "input_param_3": 2,
                    "param3": 1,
                    "string3": 1,
                    "third_input": 1,
                    "third_param": 3
                },
                "param_4": {
                    "arg4": 4,
                    "buffer4": 1,
                    "flag4": 1,
                    "fourth_input": 1,
                    "fourth_param": 3,
                    "input4": 8,
                    "input_4": 6,
                    "input_param4": 3,
                    "input_param_4": 2,
                    "param4": 1,
                    "string4": 1
                },
                "param_5": {
                    "arg5": 4,
                    "buffer5": 1,
                    "fifth_input": 1,
                    "fifth_param": 3,
                    "flag5": 1,
                    "input5": 8,
                    "input_5": 6,
                    "input_param5": 3,
                    "input_param_5": 2,
                    "param5": 1,
                    "string5": 1
                },
                "param_6": {
                    "arg6": 4,
                    "buffer6": 1,
                    "flag6": 1,
                    "input6": 8,
                    "input_6": 6,
                    "input_param6": 3,
                    "input_param_6": 2,
                    "param6": 1,
                    "sixth_input": 1,
                    "sixth_param": 3,
                    "string6": 1
                },
                "param_7": {
                    "arg7": 4,
                    "buffer7": 1,
                    "flag7": 1,
                    "input7": 8,
                    "input_7": 6,
                    "input_param7": 3,
                    "input_param_7": 2,
                    "param7": 1,
                    "seventh_input": 1,
                    "seventh_param": 3,
                    "string7": 1
                },
                "param_8": {
                    "arg8": 4,
                    "buffer8": 1,
                    "eighth_input": 1,
                    "eighth_param": 3,
                    "flag8": 1,
                    "input8": 8,
                    "input_8": 6,
                    "input_param8": 3,
                    "input_param_8": 2,
                    "param8": 1,
                    "string8": 1
                },
                "param_9": {
                    "arg9": 3,
                    "data1": 1,
                    "input9": 1,
                    "input_9": 4,
                    "input_param9": 3,
                    "input_param_9": 2,
                    "ninth_param": 1,
                    "offset_1": 1,
                    "param9": 6,
                    "param_9": 2,
                    "param_nine": 1,
                    "size_limit1": 1,
                    "unknown_param1": 1,
                    "unused1": 1,
                    "unused_param1": 2,
                    "var1": 1
                },
                "pcVar3": {
                    "extracted_str": 1,
                    "extracted_string": 1,
                    "new_str": 1,
                    "output_str": 1,
                    "output_string": 3,
                    "parsed_string": 1,
                    "reconstructed_string": 1,
                    "result": 9,
                    "result_array": 1,
                    "result_string": 9,
                    "return_string": 1,
                    "reversed_str": 1
                },
                "pcVar4": {
                    "pointer_to_pointer": 1,
                    "ptr_to_str": 1
                },
                "pcVar6": {
                    "current_char": 4,
                    "current_str": 3,
                    "current_string": 16,
                    "default_string": 1,
                    "inner_string": 1,
                    "input_string": 1,
                    "original_string": 1,
                    "source_string": 1,
                    "str": 2,
                    "temp_str": 1
                },
                "pcVar7": {
                    "copy_ptr": 1,
                    "current_char": 5,
                    "current_char_in_result": 1,
                    "current_output_char": 1,
                    "current_parsed_string": 1,
                    "current_result_char": 1,
                    "dest_str": 1,
                    "destination_string": 1,
                    "new_char_array": 1,
                    "new_string": 2,
                    "output_str": 1,
                    "output_string": 2,
                    "output_string_ptr": 1,
                    "ptr": 1,
                    "result_char": 2,
                    "result_copy": 1,
                    "result_ptr": 3,
                    "result_str": 1,
                    "result_string": 2,
                    "result_string_pointer": 1,
                    "str_copy": 1
                },
                "ppcVar4": {
                    "current_buffer": 1,
                    "current_ptr": 1,
                    "current_string": 4,
                    "current_string_pointer_array": 1,
                    "parsed_string_ptr": 1,
                    "pointer": 1,
                    "pointer_to_pointer": 1,
                    "pointer_to_string": 1,
                    "ppc_var": 1,
                    "ptr_ptr": 1,
                    "str_ptr": 2,
                    "string_array": 2,
                    "string_array_pointer": 1,
                    "string_pointer": 1,
                    "string_pointer_array": 1,
                    "string_ptr": 1,
                    "temp": 1,
                    "temp_ptr": 1
                },
                "sVar1": {
                    "length": 4,
                    "str_len": 4,
                    "str_length": 4,
                    "string_length": 15
                },
                "stack0x00000008": {
                    "stack_var": 1
                },
                "uVar2": {
                    "dynamic_alloc_offset": 1,
                    "index": 4,
                    "limit": 1,
                    "local_var": 1,
                    "offset": 2,
                    "size": 1,
                    "temp": 4,
                    "temp_var": 2,
                    "uint_val": 1,
                    "ulong_offset": 1,
                    "ulong_value": 1,
                    "ulong_var": 5,
                    "ulong_variable": 1
                }
            },
            "called": [
                "strlen",
                "FUN_00105370"
            ],
            "calling": [
                "FUN_001032de"
            ],
            "code": "\nchar * reverse_string_concatenation_00103186(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                   undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                   undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                   undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  size_t string_length;\n  ulong ulong_var;\n  char *result_string;\n  char **current_string;\n  long total_length;\n  char *current_string;\n  char *current_char;\n  byte flag;\n  uint local_counter;\n  char **string_array;\n  char *param_array [4];\n  undefined8 local_param_13;\n  undefined8 local_param_14;\n  undefined4 local_param_1;\n  undefined4 local_param_2;\n  undefined4 local_param_3;\n  undefined4 local_param_4;\n  undefined4 local_param_5;\n  undefined4 local_param_6;\n  undefined4 local_param_7;\n  undefined4 local_param_8;\n  \n  flag = 0;\n  if (flag != '\\0') {\n    local_param_1 = input1;\n    local_param_2 = input2;\n    local_param_3 = input3;\n    local_param_4 = input4;\n    local_param_5 = input5;\n    local_param_6 = input6;\n    local_param_7 = input7;\n    local_param_8 = input8;\n  }\n  string_array = (char **)&stack_var;\n  total_length = 0;\n  local_counter = 8;\n  current_string = \"none\";\n  param_array[1] = (char *)param10;\n  param_array[2] = (char *)param11;\n  param_array[3] = (char *)param12;\n  local_param_13 = param13;\n  local_param_14 = param14;\n  do {\n    string_length = strlen(current_string);\n    total_length = total_length + string_length;\n    if (local_counter < 0x30) {\n      ulong_var = (ulong)local_counter;\n      local_counter = local_counter + 8;\n      current_string = (char **)((long)param_array + ulong_var);\n    }\n    else {\n      current_string = string_array;\n      string_array = string_array + 1;\n    }\n    current_string = *current_string;\n  } while (current_string != (char *)0x0);\n  current_string = \"none\";\n  result_string = (char *)FUN_00105370(total_length + 1);\n  local_counter = 8;\n  string_array = (char **)&stack_var;\n  current_char = result_string;\n  do {\n    string_length = strlen(current_string);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *current_char = *current_string;\n      current_string = current_string + (ulong)flag * -2 + 1;\n      current_char = current_char + (ulong)flag * -2 + 1;\n    }\n    if (local_counter < 0x30) {\n      ulong_var = (ulong)local_counter;\n      local_counter = local_counter + 8;\n      current_string = (char **)((long)param_array + ulong_var);\n    }\n    else {\n      current_string = string_array;\n      string_array = string_array + 1;\n    }\n    current_string = *current_string;\n  } while (current_string != (char *)0x0);\n  *current_char = '\\0';\n  return result_string;\n}\n\n",
            "current_name": "reverse_string_concatenation_00103186",
            "entrypoint": "0x00103186",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103186": "reverse_string_concatenation_00103186",
                "bVar8": "flag",
                "in_AL": "flag",
                "lVar5": "total_length",
                "local_28": "local_param_8",
                "local_38": "local_param_7",
                "local_48": "local_param_6",
                "local_58": "local_param_5",
                "local_68": "local_param_4",
                "local_78": "local_param_3",
                "local_88": "local_param_2",
                "local_98": "local_param_1",
                "local_a0": "local_param_14",
                "local_a8": "local_param_13",
                "local_c8": "param_array",
                "local_d8": "string_array",
                "local_e0": "local_counter",
                "param_1": "input1",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param9",
                "pcVar3": "result_string",
                "pcVar4": "pointer_to_pointer",
                "pcVar6": "current_string",
                "pcVar7": "current_char",
                "ppcVar4": "current_string",
                "sVar1": "string_length",
                "stack0x00000008": "stack_var",
                "uVar2": "ulong_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001032de": {
            "additional_data": {
                "DAT_00106137": {
                    "initial_string1": 1
                },
                "DAT_001061ef": {
                    "initial_string2": 1
                },
                "DAT_00108ca0": {
                    "initial_data": 1
                },
                "DAT_00108d90": {
                    "end_data": 1
                },
                "FUN_00103006": {
                    "manipulate_string": 1,
                    "process_data": 1
                },
                "FUN_00103186": {
                    "get_localized_text": 1,
                    "get_string": 1
                },
                "FUN_001032de": {
                    "improve_elfedit_usage_help": 1,
                    "print_elf_edit_options": 1,
                    "print_elf_edit_usage": 10,
                    "print_elf_editor_usage": 1,
                    "print_elf_header_usage": 1,
                    "print_elfedit_usage": 1,
                    "print_usage_and_exit": 7,
                    "print_usage_message": 1,
                    "update_elf_header": 8
                },
                "__ptr": {
                    "buffer": 6,
                    "buffer_ptr": 1,
                    "header_buffer": 1,
                    "header_ptr": 1,
                    "input_string": 2,
                    "message": 1,
                    "message_buffer": 1,
                    "msg_buffer": 1,
                    "msg_pointer": 1,
                    "output_string": 1,
                    "ptr": 2,
                    "ptr_result": 1,
                    "string_ptr": 2,
                    "translated_string": 2,
                    "translated_text": 1,
                    "translation": 2,
                    "translation_pointer": 1,
                    "translation_ptr": 2,
                    "translation_table": 1,
                    "usage_string": 1
                },
                "dcgettext": {
                    "get_localized_string": 1,
                    "get_translation": 1,
                    "translate_text": 1
                },
                "exit": {
                    "exit_program": 1,
                    "terminate_program": 1
                },
                "fprintf": {
                    "print_formatted_output": 2,
                    "print_to_file": 1
                },
                "free": {
                    "deallocate_memory": 1,
                    "free_buffer": 1
                },
                "param_1": {
                    "file": 4,
                    "file_pointer": 2,
                    "file_ptr": 1,
                    "file_stream": 2,
                    "output_file": 22
                },
                "param_2": {
                    "error_code": 1,
                    "exit_code": 13,
                    "exit_status": 14,
                    "status": 3
                },
                "pcVar2": {
                    "locale_string": 1,
                    "localized_string": 1,
                    "message": 7,
                    "message_ptr": 3,
                    "msg": 1,
                    "msg_string": 1,
                    "str": 2,
                    "string": 1,
                    "text": 3,
                    "translated_str": 1,
                    "translated_string": 3,
                    "translated_text": 2,
                    "translation": 4,
                    "translation_string": 1
                },
                "puVar1": {
                    "array_ptr": 1,
                    "config_param": 1,
                    "config_ptr": 1,
                    "feature": 1,
                    "feature_array_item": 1,
                    "feature_pointer": 2,
                    "feature_ptr": 2,
                    "feature_type": 1,
                    "machine_type": 5,
                    "machine_type_ptr": 3,
                    "option_pointer": 1,
                    "pointer": 4,
                    "ptr": 3,
                    "ptr1": 1,
                    "ptr_arg1": 1,
                    "ptr_value": 1,
                    "unused_pointer": 1,
                    "word_ptr": 1
                },
                "puVar3": {
                    "config_data": 1,
                    "data_array_ptr": 1,
                    "data_pointer": 4,
                    "data_ptr": 4,
                    "header_ptr": 1,
                    "option_array": 1,
                    "option_array_item": 1,
                    "option_list": 2,
                    "option_pointer": 1,
                    "option_ptr": 3,
                    "options": 1,
                    "options_pointer": 1,
                    "pointer_array": 2,
                    "ptr3": 1,
                    "ptr_array": 2,
                    "ptr_data": 2,
                    "ptr_to_data": 1,
                    "ptr_var": 1,
                    "undefined_var": 1
                }
            },
            "called": [
                "free",
                "exit",
                "FUN_00103006",
                "dcgettext",
                "fprintf",
                "FUN_00103186"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid print_elf_edit_usage_001032de(FILE *output_file,int exit_status)\n\n{\n  undefined8 *machine_type;\n  void *buffer;\n  char *message;\n  undefined4 *data_ptr;\n  \n  data_ptr = &DAT_00108ca0;\n  buffer = (void *)FUN_00103186(&DAT_00106137,0);\n  do {\n    machine_type = (undefined8 *)(data_ptr + 6);\n    data_ptr = data_ptr + 4;\n    buffer = (void *)FUN_00103006(buffer,buffer,&DAT_001061ef,*machine_type,0);\n  } while (data_ptr != (undefined4 *)&DAT_00108d90);\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> elffile(s)\\n\",5);\n  fprintf(output_file,message,\"elfedit\");\n  message = (char *)dcgettext(0,\" Update the ELF header of ELF files\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  --input-mach [none|i386|iamcu|l1om|k1om|x86_64]\\n                              Set input machine type\\n  --output-mach [none|i386|iamcu|l1om|k1om|x86_64]\\n                              Set output machine type\\n  --input-type [none|rel|exec|dyn]\\n                              Set input file type\\n  --output-type [none|rel|exec|dyn]\\n                              Set output file type\\n  --input-osabi [%s]\\n                              Set input OSABI\\n  --output-osabi [%s]\\n                              Set output OSABI\\n  --input-abiversion [0-255]  Set input ABIVERSION\\n  --output-abiversion [0-255] Set output ABIVERSION\\n\"\n                             ,5);\n  fprintf(output_file,message,buffer,buffer);\n  message = (char *)dcgettext(0,\n                             \"  --enable-x86-feature [ibt|shstk|lam_u48|lam_u57]\\n                              Enable x86 feature\\n  --disable-x86-feature [ibt|shstk|lam_u48|lam_u57]\\n                              Disable x86 feature\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -h --help                   Display this information\\n  -v --version                Display the version number of %s\\n\"\n                             ,5);\n  fprintf(output_file,message,\"elfedit\");\n  if (exit_status == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n  free(buffer);\n                    \n  exit_program(exit_status);\n}\n\n",
            "current_name": "print_elf_edit_usage_001032de",
            "entrypoint": "0x001032de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001032de": "print_elf_edit_usage_001032de",
                "__ptr": "buffer",
                "dcgettext": "translate_text",
                "exit": "exit_program",
                "fprintf": "print_formatted_output",
                "free": "deallocate_memory",
                "param_1": "output_file",
                "param_2": "exit_status",
                "pcVar2": "message",
                "puVar1": "machine_type",
                "puVar3": "data_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103449": {
            "additional_data": {
                "FUN_00102fc7": {
                    "handle_allocation_error": 1
                },
                "FUN_00103449": {
                    "allocate_memory": 5,
                    "allocate_or_resize_memory": 3,
                    "resize_memory": 17,
                    "resize_memory_block": 5,
                    "resize_or_allocate_memory": 1
                },
                "__size": {
                    "actual_size": 1,
                    "allocated_size": 4,
                    "final_size": 3,
                    "initial_size": 1,
                    "new_block_size": 1,
                    "new_size": 5,
                    "size": 14
                },
                "malloc": {
                    "allocate": 1
                },
                "param_1": {
                    "buffer": 3,
                    "data": 1,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "existing_memory": 2,
                    "memory_block": 6,
                    "memory_pointer": 3,
                    "old_memory": 2,
                    "old_ptr": 1,
                    "original_memory": 1,
                    "pointer": 3,
                    "previous_block": 1,
                    "previous_memory": 3,
                    "ptr": 3
                },
                "param_2": {
                    "block_size": 1,
                    "buffer_size": 2,
                    "memory_size": 1,
                    "new_size": 20,
                    "size": 7
                },
                "pvVar1": {
                    "allocated_buffer": 2,
                    "allocated_memory": 2,
                    "new_buffer": 1,
                    "new_memory": 5,
                    "new_memory_block": 6,
                    "new_memory_pointer": 3,
                    "new_pointer": 4,
                    "new_ptr": 4,
                    "resized_block": 1,
                    "resized_memory": 1
                },
                "realloc": {
                    "reallocate": 1
                }
            },
            "called": [
                "FUN_00102fc7",
                "realloc",
                "malloc"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid resize_memory_block_00103449(void *memory_block,size_t new_size)\n\n{\n  size_t size;\n  void *new_memory_block;\n  \n  size = 1;\n  if (new_size != 0) {\n    size = new_size;\n  }\n  if (memory_block == (void *)0x0) {\n    new_memory_block = malloc(size);\n  }\n  else {\n    new_memory_block = remalloc(memory_block,size);\n  }\n  if (new_memory_block == (void *)0x0) {\n    FUN_00102fc7(size);\n  }\n  return;\n}\n\n",
            "current_name": "resize_memory_block_00103449",
            "entrypoint": "0x00103449",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103449": "resize_memory_block_00103449",
                "__size": "size",
                "malloc": "allocate",
                "param_1": "memory_block",
                "param_2": "new_size",
                "pvVar1": "new_memory_block",
                "realloc": "reallocate"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010347f": {
            "additional_data": {
                "FUN_0010347f": {
                    "convert_data": 7,
                    "decode_data": 7,
                    "extract_data": 13,
                    "extract_data_from_param": 2,
                    "get_decompiled_value": 1,
                    "parse_data": 1
                },
                "param_1": {
                    "data": 21,
                    "data_pointer": 5,
                    "data_ptr": 5
                },
                "param_2": {
                    "data_length": 28,
                    "data_type": 1,
                    "length": 2
                },
                "uVar1": {
                    "temp": 15,
                    "temp1": 4,
                    "temp_uint": 2,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "temp_var": 2,
                    "temp_var1": 3,
                    "val1": 1
                },
                "uVar2": {
                    "result": 17,
                    "result_value": 1,
                    "temp2": 4,
                    "temp_ulong": 2,
                    "temp_value2": 1,
                    "temp_var2": 3,
                    "val2": 1
                },
                "uVar3": {
                    "err_msg": 1,
                    "error_message": 15,
                    "error_msg": 7,
                    "error_string": 6
                }
            },
            "called": [
                "dcgettext",
                "abort",
                "error"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nulong extract_data_from_param_0010347f(ulong *data,undefined4 data_length)\n\n{\n  uint temp;\n  ulong result;\n  undefined8 error_message;\n  \n  switch(data_length) {\n  case 1:\n    return (ulong)*(byte *)data;\n  case 2:\n    return (ulong)CONCAT11((char)*(undefined2 *)data,(char)((ushort)*(undefined2 *)data >> 8))\n    ;\n  case 3:\n    return (ulong)*(byte *)((long)data + 1) << 8 | (ulong)*(byte *)data << 0x10 |\n           (ulong)*(byte *)((long)data + 2);\n  case 4:\n    temp = *(uint *)data;\n    return (ulong)(temp >> 0x18 | (temp & 0xff0000) >> 8 | (temp & 0xff00) << 8 | temp << 0x18);\n  case 5:\n    temp = *(uint *)((long)data + 1);\n    return (ulong)CONCAT14(*(byte *)data,\n                           temp >> 0x18 | (temp & 0xff0000) >> 8 | (temp & 0xff00) << 8 |\n                           temp << 0x18);\n  case 6:\n    temp = *(uint *)((long)data + 2);\n    return (ulong)*(byte *)((long)data + 1) << 0x20 | (ulong)*(byte *)data << 0x28 |\n           (ulong)(temp >> 0x18 | (temp & 0xff0000) >> 8 | (temp & 0xff00) << 8 | temp << 0x18);\n  case 7:\n    temp = *(uint *)((long)data + 3);\n    return (ulong)*(byte *)((long)data + 2) << 0x20 | (ulong)*(byte *)((long)data + 1) << 0x28\n           | (ulong)*(byte *)data << 0x30 |\n           (ulong)(temp >> 0x18 | (temp & 0xff0000) >> 8 | (temp & 0xff00) << 8 | temp << 0x18);\n  case 8:\n    result = *data;\n    return result >> 0x38 | (result & 0xff000000000000) >> 0x28 | (result & 0xff0000000000) >> 0x18 |\n           (result & 0xff00000000) >> 8 | (result & 0xff000000) << 8 | (result & 0xff0000) << 0x18 |\n           (result & 0xff00) << 0x28 | result << 0x38;\n  default:\n    error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    error(error_message,data_length);\n                    \n    abort();\n  }\n}\n\n",
            "current_name": "extract_data_from_param_0010347f",
            "entrypoint": "0x0010347f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010347f": "extract_data_from_param_0010347f",
                "param_1": "data",
                "param_2": "data_length",
                "uVar1": "temp",
                "uVar2": "result",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010354e": {
            "additional_data": {
                "FUN_0010354e": {
                    "copy_data": 2,
                    "copy_data_to_memory": 4,
                    "copy_value_to_memory": 1,
                    "fill_buffer": 1,
                    "fill_buffer_with_byte": 1,
                    "fill_data": 1,
                    "fill_data_buffer": 1,
                    "fill_memory": 2,
                    "fill_memory_with_char": 1,
                    "handle_data": 1,
                    "memset": 2,
                    "memset_buffer": 1,
                    "memset_data": 1,
                    "set_data": 1,
                    "set_data_length": 2,
                    "write_data": 7,
                    "write_data_to_memory": 2
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "error": {
                    "print_error_message": 1
                },
                "iVar2": {
                    "count": 3,
                    "counter": 5,
                    "current_iteration": 1,
                    "iteration_count": 7,
                    "iteration_counter": 1,
                    "iterations": 1,
                    "iterator": 1,
                    "loop_counter": 5,
                    "temp_length": 2
                },
                "param_1": {
                    "address": 3,
                    "buffer": 4,
                    "buffer_address": 5,
                    "data_address": 2,
                    "data_start_address": 1,
                    "dest_addr": 1,
                    "dest_address": 4,
                    "destination": 7,
                    "destination_address": 2,
                    "memory_address": 2
                },
                "param_2": {
                    "byte_value": 2,
                    "char_to_fill": 1,
                    "data": 10,
                    "data_to_copy": 2,
                    "data_value": 7,
                    "fill_value": 1,
                    "pattern": 1,
                    "value": 7
                },
                "param_3": {
                    "data_length": 15,
                    "length": 16
                },
                "uVar1": {
                    "error_message": 19,
                    "error_msg": 4,
                    "error_string": 1,
                    "message": 2
                },
                "uVar3": {
                    "converted_length": 1,
                    "counter": 1,
                    "current_length": 2,
                    "data_counter": 1,
                    "data_length_copy": 1,
                    "data_length_counter": 1,
                    "length_copy": 1,
                    "loop_counter": 1,
                    "remaining_iterations": 1,
                    "remaining_length": 4,
                    "temp": 1,
                    "temp_data_length": 5,
                    "temp_length": 4,
                    "temp_length_unsigned": 1,
                    "unsigned_length": 1
                }
            },
            "called": [
                "dcgettext",
                "abort",
                "error"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nvoid write_data_to_memory_0010354e(long destination,ulong data,uint length)\n\n{\n  undefined8 error_message;\n  int iteration_count;\n  ulong temp_data_length;\n  \n  temp_data_length = (ulong)length;\n  if (8 < length) {\n    error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    print_error_message(error_message,length);\n                    \n    abort();\n  }\n  while (iteration_count = (int)temp_data_length, temp_data_length = (ulong)(iteration_count - 1), iteration_count != 0) {\n    *(char *)(destination + temp_data_length) = (char)data;\n    data = data >> 8;\n  }\n  return;\n}\n\n",
            "current_name": "write_data_to_memory_0010354e",
            "entrypoint": "0x0010354e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010354e": "write_data_to_memory_0010354e",
                "dcgettext": "get_error_message",
                "error": "print_error_message",
                "iVar2": "iteration_count",
                "param_1": "destination",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "error_message",
                "uVar3": "temp_data_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010358d": {
            "additional_data": {
                "DAT_00109438": {
                    "alignment": 1,
                    "archive_header_size": 1,
                    "file_size": 1,
                    "value": 1
                },
                "FUN_0010358d": {
                    "extract_and_process_archive": 3,
                    "extract_archive": 7,
                    "extract_archive_data": 1,
                    "extract_archive_file": 1,
                    "extract_archive_files": 2,
                    "extract_archives": 2,
                    "process_archive": 10,
                    "process_archive_file": 3,
                    "process_archive_files": 1,
                    "process_archives": 1
                },
                "__s": {
                    "char_ptr_2": 1,
                    "corrupt": 3,
                    "corrupt_message": 4,
                    "corrupt_msg": 1,
                    "corrupt_ptr": 1,
                    "corrupt_str": 2,
                    "corrupt_string": 8,
                    "corrupt_text": 3,
                    "corrupted": 1,
                    "corrupted_message": 1,
                    "corrupted_text": 1,
                    "error_message": 1,
                    "error_msg": 1,
                    "str": 1,
                    "string_var1": 1,
                    "unknown_string": 1
                },
                "__s_00": {
                    "allocated_str": 1,
                    "archive_file_name": 2,
                    "char_ptr_3": 1,
                    "combined_name": 2,
                    "combined_string": 1,
                    "concatenated_name": 1,
                    "file_name": 2,
                    "file_path": 1,
                    "formatted_string": 1,
                    "full_filename": 1,
                    "full_name": 7,
                    "modified_file_name": 2,
                    "name_ptr": 1,
                    "new_filename": 3,
                    "new_str": 1,
                    "new_string": 1,
                    "processed_string": 1,
                    "str2": 1,
                    "string_var2": 1
                },
                "__s_01": {
                    "merged_filename": 1
                },
                "__stream": {
                    "archive_file": 5,
                    "archive_file_pointer": 1,
                    "archive_file_ptr": 1,
                    "archive_stream": 1,
                    "file": 2,
                    "file_handle": 1,
                    "file_ptr": 1,
                    "file_ptr2": 1,
                    "file_ptr_2": 1,
                    "file_stream": 1,
                    "file_stream_2": 1,
                    "input_file": 1,
                    "output_file": 1,
                    "stream": 6,
                    "stream_var": 1
                },
                "iVar3": {
                    "int_var": 1,
                    "int_var3": 1,
                    "result": 21,
                    "return_code": 1,
                    "return_value": 1,
                    "status": 4,
                    "var_3": 1
                },
                "lVar1": {
                    "combined_name_length2": 1,
                    "file_path_length": 1,
                    "length": 23,
                    "length_var": 1,
                    "length_var1": 3,
                    "length_var_1": 1,
                    "str_length": 1
                },
                "local_118": {
                    "error_message3": 1
                },
                "local_148": {
                    "arg2": 1,
                    "counter1": 1,
                    "current_archive": 1,
                    "error_code": 1,
                    "file_offset": 1,
                    "ignored_value": 1,
                    "index": 1,
                    "initialized_var1": 1,
                    "local_undefined3": 1,
                    "local_undefined8": 1,
                    "local_var3": 1,
                    "result": 2,
                    "result1": 1,
                    "start_index": 1,
                    "status": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp_var2": 1,
                    "temp_variable1": 1,
                    "undefined_var1": 1,
                    "unknown1": 1,
                    "unknown_value1": 1,
                    "value": 2,
                    "value1": 1,
                    "zero": 2,
                    "zero_value": 2
                },
                "local_160": {
                    "allocated_memory2": 1,
                    "buffer2": 6,
                    "buffer_var_2": 1,
                    "corrupt_data": 1,
                    "current_file": 1,
                    "data_buffer1": 1,
                    "fake_offset": 1,
                    "format_string": 1,
                    "ignored_buffer": 1,
                    "local_undefined16": 1,
                    "local_undefined2": 1,
                    "local_var2": 1,
                    "padding": 1,
                    "ptr3": 1,
                    "ptr_data2": 1,
                    "string_buffer2": 1,
                    "string_var2": 1,
                    "temp2": 1,
                    "temp_header": 1,
                    "temp_var1": 1,
                    "uninitialized_array2": 1,
                    "unknown_buffer1": 1,
                    "zero_array": 2,
                    "zero_buffer": 1
                },
                "local_178": {
                    "allocated_memory1": 1,
                    "archive_file": 1,
                    "archive_name_buffer": 1,
                    "buffer": 1,
                    "buffer1": 5,
                    "buffer_var_1": 1,
                    "corrupt_file": 1,
                    "corrupt_file_name": 1,
                    "corrupt_list": 1,
                    "current_file_name": 1,
                    "file_content": 1,
                    "file_path": 1,
                    "file_path_buffer": 1,
                    "local_undefined1": 1,
                    "local_undefined24": 1,
                    "local_var1": 1,
                    "modified_file_name_buffer": 1,
                    "output_file": 1,
                    "parent_file": 1,
                    "ptr1": 2,
                    "ptr_data1": 1,
                    "string_buffer1": 1,
                    "string_var1": 1,
                    "temp1": 1,
                    "uninitialized_array1": 1
                },
                "local_208": {
                    "file_info": 1,
                    "file_stat": 15,
                    "file_stats": 3,
                    "file_status": 5,
                    "local_stat": 2,
                    "stat_buffer": 2,
                    "stat_data": 1,
                    "status": 1
                },
                "local_46": {
                    "archive_code": 1,
                    "archive_header_check": 1,
                    "archive_header_length": 1,
                    "archive_size": 1,
                    "file_type": 1,
                    "header": 1,
                    "header_buffer": 1,
                    "header_flag": 1,
                    "header_identifier": 1,
                    "header_magic": 1,
                    "header_size": 2,
                    "header_type": 3,
                    "header_value": 5,
                    "local_array3": 1,
                    "local_short": 2,
                    "magic_number": 2,
                    "short_value": 1,
                    "short_var": 1,
                    "valid_header": 1,
                    "value": 2
                },
                "local_50": {
                    "archive_header": 9,
                    "buffer": 1,
                    "buffer2": 1,
                    "buffer6": 3,
                    "file_size_buffer": 2,
                    "header": 7,
                    "header_buffer": 1,
                    "header_size_str": 1,
                    "local_array2": 1,
                    "local_char_10": 1,
                    "local_char_arr": 1,
                    "number_string": 1,
                    "version": 1
                },
                "local_80": {
                    "archive_buffer": 1,
                    "archive_header": 1,
                    "buffer": 14,
                    "buffer5": 3,
                    "data_buffer": 1,
                    "file_buffer": 1,
                    "header_buffer": 3,
                    "local_array1": 1,
                    "local_buffer": 2,
                    "local_undefined48": 1,
                    "read_buffer": 1
                },
                "local_88": {
                    "file_cond": 1,
                    "file_type": 2,
                    "flag2": 9,
                    "flag_var": 1,
                    "has_archive_path": 1,
                    "initialized_var3": 1,
                    "is_archive": 1,
                    "is_archive_list": 1,
                    "is_directory": 1,
                    "is_in_place_flag": 1,
                    "is_rewritable": 1,
                    "is_special_file": 1,
                    "local_int": 1,
                    "local_int1": 1,
                    "mode": 1,
                    "offset_var3": 1,
                    "result": 1,
                    "unknown4": 1,
                    "unknown_value3": 1,
                    "value": 1
                },
                "local_90": {
                    "current_offset": 10,
                    "current_pos": 1,
                    "file_offset": 1,
                    "file_pos": 1,
                    "header_offset": 3,
                    "length": 1,
                    "local_long": 1,
                    "local_long2": 1,
                    "next_archive_offset": 1,
                    "offset": 2,
                    "offset_value2": 1,
                    "offset_var2": 1,
                    "offset_var_2": 1,
                    "source_file_seek_position": 1,
                    "value": 2,
                    "var3": 1
                },
                "local_98": {
                    "archive_offset": 2,
                    "file_offset": 3,
                    "file_pos": 1,
                    "length2": 1,
                    "local_long1": 1,
                    "local_long_1": 1,
                    "local_var7": 1,
                    "member_offset": 2,
                    "offset": 5,
                    "offset_value1": 1,
                    "offset_var1": 1,
                    "offset_var_1": 1,
                    "second_offset": 1,
                    "seek_offset": 4,
                    "source_file_size": 1,
                    "unknown3": 1,
                    "value": 2,
                    "var2": 1
                },
                "local_a8": {
                    "archive_buffer": 1,
                    "archive_file": 1,
                    "counter2": 1,
                    "file_flag": 1,
                    "file_offset_2": 1,
                    "formatted_name": 1,
                    "ignored_value2": 1,
                    "initialized_var2": 1,
                    "local_undefined6": 1,
                    "local_undefined8_2": 1,
                    "local_var6": 1,
                    "ptr2": 1,
                    "result": 1,
                    "result2": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp_header_name": 1,
                    "temp_variable2": 1,
                    "undefined_var2": 1,
                    "unknown2": 1,
                    "unknown_value2": 1,
                    "value": 2,
                    "value2": 1,
                    "value4": 1,
                    "zero": 2,
                    "zero2": 1,
                    "zero_value2": 1
                },
                "local_c0": {
                    "buffer2": 1,
                    "buffer4": 4,
                    "buffer_var_4": 1,
                    "corrupt_archive": 1,
                    "corrupt_str3": 1,
                    "data_buffer3": 1,
                    "header_buffer": 1,
                    "jump_size": 1,
                    "local_undefined16_3": 1,
                    "local_undefined5": 1,
                    "local_var5": 1,
                    "ptr5": 1,
                    "string_buffer4": 1,
                    "string_var3": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp_buffer2": 1,
                    "temp_name": 1,
                    "temp_var3": 1,
                    "temporary_path": 1,
                    "uninitialized_array4": 1,
                    "unknown_buffer2": 1,
                    "value3": 1,
                    "zero_array2": 2,
                    "zero_buffer": 1
                },
                "local_d8": {
                    "archive_name": 1,
                    "archive_path": 1,
                    "buffer1": 1,
                    "buffer3": 4,
                    "buffer_size": 1,
                    "buffer_var_3": 1,
                    "corrupt_str2": 1,
                    "d8_pointer": 1,
                    "data_buffer2": 1,
                    "directory_name": 1,
                    "extracted_data": 1,
                    "file_data": 1,
                    "header_buffer": 1,
                    "input_file_buffer": 1,
                    "local_undefined16_2": 1,
                    "local_undefined4": 1,
                    "local_var4": 1,
                    "ptr2_value": 1,
                    "ptr4": 1,
                    "string_buffer3": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp_buffer": 1,
                    "temporary_buffer": 1,
                    "uninitialized_array3": 1,
                    "value2": 1
                },
                "param_1": {
                    "archive_name": 2,
                    "arg1": 2,
                    "error_message": 1,
                    "file_name": 4,
                    "file_path": 3,
                    "filename": 4,
                    "param": 5,
                    "param1": 4,
                    "param_1": 2,
                    "param_file_name": 1,
                    "param_pointer": 1,
                    "param_ptr": 1,
                    "program_name": 1
                },
                "param_2": {
                    "archive_file": 2,
                    "file": 16,
                    "file_pointer": 4,
                    "file_ptr": 4,
                    "file_stream": 1,
                    "input_file": 3,
                    "param_file": 1
                },
                "param_3": {
                    "corruption_check": 1,
                    "create_file_if_not_exist": 1,
                    "enable_modification": 1,
                    "flag": 14,
                    "is_dry_run": 1,
                    "is_in_place": 1,
                    "is_overwrite": 1,
                    "is_read_only": 2,
                    "is_writable": 1,
                    "mode": 1,
                    "param_char": 2,
                    "param_is_writable": 1,
                    "readable_only": 1,
                    "reverse_flag": 3
                },
                "pcVar12": {
                    "archive": 1,
                    "archive_file_name": 1,
                    "archive_file_string": 1,
                    "archive_name": 3,
                    "archive_name_ptr": 1,
                    "archive_path_plus_filename": 1,
                    "char_pointer2": 1,
                    "char_ptr_4": 1,
                    "context2": 1,
                    "file1": 1,
                    "file_name": 1,
                    "file_path": 1,
                    "full_filename_ptr": 1,
                    "modified_file_name2": 1,
                    "name": 1,
                    "new_str2": 1,
                    "parent_name": 1,
                    "pointer": 1,
                    "pointer2": 1,
                    "pointer_var12": 1,
                    "pointer_var_2": 1,
                    "processed_string": 1,
                    "ptr": 2,
                    "ptr1": 1,
                    "ptr2": 2,
                    "source_file_name": 1,
                    "str_ptr2": 1
                },
                "pcVar13": {
                    "char_ptr_5": 1,
                    "err_msg": 2,
                    "error_format": 1,
                    "error_message": 10,
                    "error_message2": 1,
                    "error_msg": 3,
                    "error_msg_ptr": 1,
                    "error_str": 1,
                    "error_string": 2,
                    "filename2": 1,
                    "format": 1,
                    "format_string": 2,
                    "pointer": 1,
                    "pointer3": 1,
                    "pointer_var13": 1,
                    "pointer_var_3": 1,
                    "ptr": 1
                },
                "pcVar2": {
                    "archive_directory_name": 1,
                    "archive_name": 1,
                    "archive_path_plus_filename2": 1,
                    "char_pointer": 1,
                    "char_ptr": 1,
                    "corrupt_message": 1,
                    "corrupt_msg": 1,
                    "corrupt_string": 1,
                    "corrupt_warning_message": 1,
                    "error_message": 1,
                    "pointer": 2,
                    "pointer_var2": 1,
                    "pointer_var_1": 1,
                    "ptr": 6,
                    "str": 5,
                    "str_ptr": 2,
                    "string": 2,
                    "string_var": 1
                },
                "sVar10": {
                    "archive_name_length": 3,
                    "archive_name_size": 1,
                    "archive_path_length": 1,
                    "combined_length1": 1,
                    "context1_len": 1,
                    "corrupt_length": 2,
                    "d8_length": 1,
                    "file_name_length": 1,
                    "file_string": 1,
                    "length": 2,
                    "length2": 1,
                    "msg_length": 1,
                    "name_len1": 1,
                    "old_name_length": 1,
                    "ptr_length": 1,
                    "s_var10": 1,
                    "size": 1,
                    "size_var10": 1,
                    "size_var_3": 1,
                    "source_file_name_length": 1,
                    "str1_length": 1,
                    "str_length": 2,
                    "str_length2": 1,
                    "str_size": 1,
                    "string_length_1": 1
                },
                "sVar11": {
                    "archive_file_length": 1,
                    "archive_name_length": 1,
                    "combined_length2": 1,
                    "combined_name_length": 1,
                    "context2_len": 1,
                    "file_name_length": 3,
                    "full_name_length": 1,
                    "full_name_size": 1,
                    "header_length": 1,
                    "length": 2,
                    "length3": 1,
                    "msg_length": 1,
                    "name_len2": 1,
                    "name_length": 3,
                    "name_length2": 1,
                    "name_size": 1,
                    "name_string": 1,
                    "new_name_length": 1,
                    "s_var11": 1,
                    "size": 1,
                    "size_var11": 1,
                    "size_var_4": 1,
                    "str2_length": 1,
                    "str_length3": 1,
                    "string_length_2": 1
                },
                "sVar12": {
                    "merged_filename_length": 1
                },
                "sVar13": {
                    "error_message2": 1
                },
                "sVar6": {
                    "bytes_read": 4,
                    "count": 1,
                    "malloc_size": 1,
                    "read": 1,
                    "read_length": 1,
                    "read_size": 10,
                    "s_var6": 1,
                    "size": 8,
                    "size_var": 1,
                    "size_var6": 2
                },
                "sVar9": {
                    "archive_file_name_length": 1,
                    "file_name_length": 5,
                    "filename_len": 1,
                    "filename_length": 4,
                    "len": 1,
                    "length": 3,
                    "name_length": 9,
                    "name_size": 2,
                    "size": 1,
                    "size_var9": 1,
                    "size_var_2": 1,
                    "str_length": 1
                },
                "uVar14": {
                    "error_flag": 7,
                    "error_occurred": 1,
                    "errors": 1,
                    "final_result": 6,
                    "final_status": 1,
                    "flag2": 1,
                    "output_status": 1,
                    "output_uint": 1,
                    "result": 5,
                    "result_flag": 1,
                    "return_status": 1,
                    "return_val": 2,
                    "return_value": 1,
                    "status": 1,
                    "uint_var_2": 1
                },
                "uVar4": {
                    "archive_result": 1,
                    "combined_result": 1,
                    "error_code": 1,
                    "file_result": 1,
                    "flag": 1,
                    "function_result": 1,
                    "is_error": 1,
                    "result": 4,
                    "result_value": 1,
                    "return_val": 1,
                    "return_value": 1,
                    "status": 8,
                    "uint_var": 1,
                    "uint_var4": 1,
                    "value": 4,
                    "var4": 1
                },
                "uVar5": {
                    "error_message": 8,
                    "error_msg": 3,
                    "error_string": 2,
                    "message": 5,
                    "msg": 2,
                    "msg_ptr": 1,
                    "str": 1,
                    "text": 3,
                    "translated_error": 1,
                    "translated_error_message": 2,
                    "u_var5": 1,
                    "undefined8_var": 1,
                    "var5": 1
                },
                "uVar7": {
                    "error_message": 3,
                    "error_msg": 1,
                    "error_msg2": 1,
                    "error_string": 3,
                    "error_string2": 1,
                    "error_substring": 1,
                    "invalid_header_message": 1,
                    "localized_message": 1,
                    "message": 4,
                    "message2": 2,
                    "msg": 4,
                    "msg_ptr2": 1,
                    "prompt_message": 1,
                    "text2": 1,
                    "translated_error_message": 1,
                    "translated_error_message2": 1,
                    "u_var7": 1,
                    "undefined8_var_2": 1,
                    "var7": 1
                },
                "uVar8": {
                    "base": 1,
                    "conversion_result": 1,
                    "count": 2,
                    "file_count": 1,
                    "file_size": 5,
                    "header_size": 1,
                    "num": 2,
                    "num_files": 1,
                    "num_value": 1,
                    "number": 1,
                    "read_size2": 1,
                    "strtol_result": 1,
                    "u_var8": 1,
                    "ulong_var": 1,
                    "value": 9,
                    "var8": 1
                }
            },
            "called": [
                "free",
                "FUN_001029a5",
                "dcgettext",
                "strlen",
                "fseek",
                "fread",
                "fstat",
                "error",
                "malloc",
                "FUN_00102f65",
                "fclose",
                "FUN_00102cc4",
                "FUN_001025ab",
                "fileno",
                "snprintf",
                "fopen",
                "FUN_00104de0",
                "strtoul"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nuint process_archive_file_0010358d(undefined8 param,FILE *file,char flag)\n\n{\n  long length;\n  char *ptr;\n  int result;\n  uint status;\n  undefined8 error_message;\n  size_t read_size;\n  undefined8 message;\n  ulong value;\n  size_t name_length;\n  char *corrupt_string;\n  size_t archive_name_length;\n  size_t name_length;\n  char *full_name;\n  char *archive_name;\n  FILE *stream;\n  char *error_message;\n  uint error_flag;\n  stat file_stat;\n  undefined buffer1 [24];\n  undefined buffer2 [16];\n  undefined8 result;\n  undefined buffer3 [16];\n  undefined buffer4 [16];\n  undefined8 zero;\n  long offset;\n  long current_offset;\n  int flag2;\n  undefined buffer [48];\n  char archive_header [10];\n  short header_value;\n  \n  result = 0;\n  buffer3 = ZEXT816(0);\n  buffer4 = ZEXT816(0);\n  buffer1._0_16_ = ZEXT816(0);\n  buffer2 = ZEXT816(0);\n  zero = 0;\n  result = fileno(file);\n  result = fstat(result,&file_stat);\n  if ((result < 0) ||\n     (result = FUN_001025ab(buffer3,param,file,file_stat.st_size,flag), result != 0)) {\nLAB_001036cc:\n    error_flag = 1;\nLAB_00103a46:\n    if ((FILE *)buffer1._8_8_ != (FILE *)0x0) {\n      fclose((FILE *)buffer1._8_8_);\n    }\n    FUN_00102f65(buffer1);\n    FUN_00102f65(buffer3);\n  }\n  else {\n    error_flag = 0;\n    while (result = fseek(file,current_offset,0), result == 0) {\n      read_size = fread(buffer,1,0x3c,file);\n      if (read_size != 0x3c) {\n        if (read_size == 0) goto LAB_00103a46;\n        error_message = \"%s: failed to read archive header\\n\";\nLAB_001036b8:\n        error_message = dcgettext(0,error_message,5);\n        error(error_message,param);\n        goto LAB_001036cc;\n      }\n      if (header_value != 0xa60) {\n        error_message = buffer3._0_8_;\n        message = dcgettext(0,\"%s: did not find a valid archive header\\n\",5);\n        error(message,error_message);\n        goto LAB_001036cc;\n      }\n      current_offset = current_offset + 0x3c;\n      value = strtoul(archive_header,(char **)0x0,10);\n      DAT_00109438 = (value + 1) - (ulong)((value & 1) == 0);\n      error_message = (char *)FUN_001029a5(buffer3,buffer1);\n      if (error_message == (char *)0x0) {\n        error_message = \"%s: bad archive file name\\n\";\n        goto LAB_001036b8;\n      }\n      name_length = strlen(error_message);\n      corrupt_string = (char *)dcgettext(0,\"<corrupt>\",5);\n      archive_name = (char *)buffer3._0_8_;\n      archive_name_length = strlen((char *)buffer3._0_8_);\n      name_length = strlen(error_message);\n      read_size = archive_name_length + name_length + 3;\n      if (flag2 == 0) {\n        full_name = (char *)malloc(read_size);\n        if (full_name == (char *)0x0) goto LAB_001037d3;\n        snprintf(full_name,read_size,\"%s(%s)\",archive_name,error_message);\n      }\n      else if (offset == 0) {\n        full_name = (char *)malloc(read_size);\n        if (full_name == (char *)0x0) {\nLAB_001037d3:\n          error_message = dcgettext(0,\"Out of memory\\n\",5);\n          error(error_message);\n          error_message = dcgettext(0,\"%s: bad archive file name\\n\",5);\n          error(error_message,param);\n          free(error_message);\n          goto LAB_001036cc;\n        }\n        snprintf(full_name,read_size,\"%s[%s]\",archive_name,error_message);\n      }\n      else {\n        ptr = (char *)buffer1._0_8_;\n        length = archive_name_length + name_length + 5;\n        if ((char *)buffer1._0_8_ == (char *)0x0) {\n          read_size = strlen(corrupt_string);\n          read_size = length + read_size;\n          full_name = (char *)malloc(read_size);\n          ptr = corrupt_string;\n        }\n        else {\n          read_size = strlen((char *)buffer1._0_8_);\n          read_size = length + read_size;\n          full_name = (char *)malloc(read_size);\n        }\n        if (full_name == (char *)0x0) goto LAB_001037d3;\n        snprintf(full_name,read_size,\"%s[%s(%s)]\",archive_name,ptr,error_message);\n      }\n      if (flag == '\\0') {\n        free(error_message);\n        current_offset = current_offset + DAT_00109438;\n        status = FUN_00104de0(full_name,file);\n        error_flag = error_flag | status;\n      }\n      else {\n        if (offset == 0) {\n          archive_name = (char *)FUN_00102cc4(param,error_message,name_length);\n          free(error_message);\n          if (archive_name != (char *)0x0) {\n            stream = fopen(archive_name,\"r+b\");\n            if (stream != (FILE *)0x0) {\n              status = FUN_00104de0(full_name,stream);\n              error_flag = error_flag | status;\n              fclose(stream);\n              free(archive_name);\n              goto LAB_00103a39;\n            }\n            error_message = dcgettext(0,\"Input file \\'%s\\' is not readable\\n\",5);\n            error(error_message,archive_name);\n            free(archive_name);\n          }\n          free(full_name);\n          goto LAB_001036cc;\n        }\n        free(error_message);\n        result = fseek((FILE *)buffer1._8_8_,offset + 0x3c,0);\n        if (result != 0) {\n          error_message = buffer1._0_8_;\n          message = dcgettext(0,\"%s: failed to seek to archive member\\n\",5);\n          error(message,error_message);\n          free(full_name);\n          goto LAB_001036cc;\n        }\n        status = FUN_00104de0(full_name,buffer1._8_8_);\n        error_flag = error_flag | status;\n      }\nLAB_00103a39:\n      free(full_name);\n    }\n    error_message = dcgettext(0,\"%s: failed to seek to next archive header\\n\",5);\n    error_flag = 1;\n    error(error_message,param);\n  }\n  return error_flag;\n}\n\n",
            "current_name": "process_archive_file_0010358d",
            "entrypoint": "0x0010358d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010358d": "process_archive_file_0010358d",
                "__s": "corrupt_string",
                "__s_00": "full_name",
                "__stream": "stream",
                "iVar3": "result",
                "lVar1": "length",
                "local_148": "result",
                "local_160": "buffer2",
                "local_178": "buffer1",
                "local_208": "file_stat",
                "local_46": "header_value",
                "local_50": "archive_header",
                "local_80": "buffer",
                "local_88": "flag2",
                "local_90": "current_offset",
                "local_98": "offset",
                "local_a8": "zero",
                "local_c0": "buffer4",
                "local_d8": "buffer3",
                "param_1": "param",
                "param_2": "file",
                "param_3": "flag",
                "pcVar12": "archive_name",
                "pcVar13": "error_message",
                "pcVar2": "ptr",
                "sVar10": "archive_name_length",
                "sVar11": "name_length",
                "sVar6": "read_size",
                "sVar9": "name_length",
                "uVar14": "error_flag",
                "uVar4": "status",
                "uVar5": "error_message",
                "uVar7": "message",
                "uVar8": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103a90": {
            "additional_data": {
                "FUNC_00103ab3": {
                    "process_data": 3,
                    "process_data_length": 1,
                    "reverse_data": 1
                },
                "FUN_00103a90": {
                    "convert_data_length": 1,
                    "convert_data_length_to_value": 1,
                    "decode_data": 2,
                    "decode_data_length": 4,
                    "extract_data": 3,
                    "extract_data_from_param": 1,
                    "extract_data_value": 1,
                    "get_data_from_param": 1,
                    "get_data_length": 1,
                    "get_data_value": 8,
                    "get_value_from_byte_array": 1,
                    "get_value_from_param": 1,
                    "get_variable_from_data": 1,
                    "handle_data_length": 1,
                    "parse_data_length": 2,
                    "process_data": 2
                },
                "abort": {
                    "abort_execution": 1,
                    "exit_program": 1,
                    "terminate_program": 2
                },
                "dcgettext": {
                    "get_error_message": 3,
                    "get_localized_message": 1
                },
                "error": {
                    "print_error_message": 3
                },
                "param_1": {
                    "byte_array": 1,
                    "data": 5,
                    "data_array": 3,
                    "data_pointer": 15,
                    "data_ptr": 6,
                    "input_data": 1
                },
                "param_2": {
                    "byte_array_length": 1,
                    "data_length": 26,
                    "length": 4
                },
                "uVar1": {
                    "converted_data": 1,
                    "result": 30
                },
                "uVar2": {
                    "error_message": 23,
                    "error_msg": 6,
                    "error_string": 2
                }
            },
            "called": [
                "caseD_3",
                "caseD_0",
                "FUN_00103ab3"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nulong get_data_value_00103a90(ulong *data_pointer,ulong data_length)\n\n{\n  ulong result;\n  undefined8 error_message;\n  \n  switch(data_length & 0xffffffff) {\n  default:\n    error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    print_error_message(error_message,data_length & 0xffffffff);\n                    \n    abort();\n  case 1:\n    return (ulong)*(byte *)data_pointer;\n  case 2:\n    return (ulong)*(ushort *)data_pointer;\n  case 3:\n    result = FUNC_00103ab3(data_pointer,data_length,\n                         (ulong)*(byte *)((long)data_pointer + 1) << 8 |\n                         (ulong)*(byte *)((long)data_pointer + 2) << 0x10);\n    return result;\n  case 4:\n    return (ulong)*(uint *)data_pointer;\n  case 5:\n    result = FUNC_00103ab3(data_pointer,data_length,(ulong)*(byte *)((long)data_pointer + 4) << 0x20);\n    return result;\n  case 6:\n    result = FUNC_00103ab3(data_pointer,data_length,\n                         (ulong)*(byte *)((long)data_pointer + 4) << 0x20 |\n                         (ulong)*(byte *)((long)data_pointer + 5) << 0x28);\n    return result;\n  case 7:\n    result = FUNC_00103ab3(data_pointer,data_length,\n                         (ulong)*(byte *)((long)data_pointer + 4) << 0x20 |\n                         (ulong)*(byte *)((long)data_pointer + 5) << 0x28 | (ulong)*(uint *)data_pointer);\n    return result;\n  case 8:\n    return *data_pointer;\n  }\n}\n\n",
            "current_name": "get_data_value_00103a90",
            "entrypoint": "0x00103a90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103a90": "get_data_value_00103a90",
                "abort": "terminate_program",
                "dcgettext": "get_error_message",
                "error": "print_error_message",
                "param_1": "data_pointer",
                "param_2": "data_length",
                "uVar1": "result",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103ab3": {
            "called": [],
            "calling": [
                "caseD_3",
                "FUN_00103a90"
            ],
            "code": "\nvoid FUNC_00103ab3(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103ab3",
            "entrypoint": "0x00103ab3",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103ab3": "FUNC_00103ab3"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103ad0": {
            "additional_data": {
                "FUN_00103ad0": {
                    "copy_data": 3,
                    "copy_data_to_memory": 3,
                    "fill_buffer": 1,
                    "fill_data": 3,
                    "fill_memory": 1,
                    "fill_memory_block": 1,
                    "fill_memory_with_byte": 1,
                    "reverse_and_update_memory_bytes": 1,
                    "set_data": 1,
                    "store_data": 1,
                    "update_data": 1,
                    "write_byte_sequence": 1,
                    "write_data": 9,
                    "write_data_to_memory": 4
                },
                "param_1": {
                    "address": 1,
                    "buffer": 10,
                    "buffer_address": 1,
                    "data_address": 1,
                    "data_buffer": 1,
                    "dest": 1,
                    "dest_address": 4,
                    "dest_ptr": 1,
                    "destination": 5,
                    "destination_address": 3,
                    "dst_address": 1,
                    "memory_address": 2
                },
                "param_2": {
                    "byte_value": 1,
                    "data": 21,
                    "data_to_copy": 1,
                    "data_to_reverse": 1,
                    "data_value": 5,
                    "value": 2
                },
                "param_3": {
                    "data_length": 15,
                    "length": 16
                },
                "uVar1": {
                    "error_message": 23,
                    "error_msg": 2,
                    "error_string": 3,
                    "message": 2
                },
                "uVar2": {
                    "counter": 5,
                    "i": 11,
                    "index": 12,
                    "iteration": 1,
                    "iterator": 1
                }
            },
            "called": [
                "FUN_00102c98"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nvoid write_data_to_memory_00103ad0(long buffer,ulong data,uint length)\n\n{\n  undefined8 error_message;\n  ulong index;\n  \n  if (length < 9) {\n    for (index = 0; length != index; index = index + 1) {\n      *(char *)(buffer + index) = (char)data;\n      data = data >> 8;\n    }\n    return;\n  }\n  error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(error_message,length);\n                    \n  abort();\n}\n\n",
            "current_name": "write_data_to_memory_00103ad0",
            "entrypoint": "0x00103ad0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103ad0": "write_data_to_memory_00103ad0",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "error_message",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103b30": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103b43) */\n/* WARNING: Removing unreachable block (ram,0x00103b4f) */\n\nvoid FUNC_00103b30(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103b30",
            "entrypoint": "0x00103b30",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103b30": "FUNC_00103b30"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103b60": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103b84) */\n/* WARNING: Removing unreachable block (ram,0x00103b90) */\n\nvoid FUNC_00103b60(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103b60",
            "entrypoint": "0x00103b60",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103b60": "FUNC_00103b60"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103bf0": {
            "additional_data": {
                "DAT_0010604c": {
                    "options": 1
                },
                "DAT_00107040": {
                    "data_array1": 1
                },
                "DAT_0010912c": {
                    "l_var29": 1
                },
                "DAT_00109130": {
                    "l_var29": 1
                },
                "DAT_00109134": {
                    "l_var24": 1
                },
                "DAT_00109138": {
                    "l_var23": 1
                },
                "DAT_0010913c": {
                    "local_d0": 1
                },
                "DAT_00109140": {
                    "l_var20": 1
                },
                "DAT_00109144": {
                    "b_var5": 1
                },
                "DAT_00109148": {
                    "b_var7": 1
                },
                "DAT_0010914c": {
                    "b_var6": 1
                },
                "DAT_00109150": {
                    "abiversion_minor": 1,
                    "data_var11": 1
                },
                "DAT_00109154": {
                    "abiversion": 1,
                    "data_var10": 1
                },
                "DAT_00109158": {
                    "segment_alignment_power": 1
                },
                "DAT_0010915c": {
                    "data_var9": 1,
                    "segment_alignment": 1
                },
                "DAT_00109160": {
                    "data_var8": 1,
                    "e_flags": 1
                },
                "DAT_00109164": {
                    "e_machine": 1
                },
                "DAT_00109168": {
                    "data_var6": 1,
                    "osabi_mode": 1
                },
                "DAT_0010916c": {
                    "data_var3": 1,
                    "osabi_version": 1
                },
                "DAT_00109170": {
                    "data_var5": 1,
                    "version_info": 1
                },
                "DAT_00109174": {
                    "abi_version": 1,
                    "data_var7": 1
                },
                "DAT_001092b8": {
                    "strlen_func": 1
                },
                "DAT_001092bc": {
                    "error_func": 1
                },
                "DAT_001092c0": {
                    "printf_func": 1
                },
                "DAT_001092c4": {
                    "error_func": 1
                },
                "DAT_001092c8": {
                    "printf_func": 1
                },
                "DAT_001092cc": {
                    "error_func": 1
                },
                "DAT_001092d0": {
                    "error_func": 1
                },
                "DAT_001092d4": {
                    "printf_func": 1
                },
                "DAT_001092d8": {
                    "error_func": 1
                },
                "DAT_001092dc": {
                    "dcgettext_func": 1
                },
                "DAT_001092e0": {
                    "printf_func": 1
                },
                "DAT_001092e4": {
                    "dcgettext_func": 1
                },
                "DAT_001092e8": {
                    "dcgettext_func": 1
                },
                "DAT_001092ec": {
                    "strtol_func": 1
                },
                "DAT_001092f0": {
                    "error_func": 1
                },
                "DAT_001092f4": {
                    "printf_func": 1
                },
                "DAT_001092f8": {
                    "printf_func": 1
                },
                "DAT_001092fc": {
                    "strcmp_func": 1
                },
                "DAT_00109300": {
                    "malloc_func": 1
                },
                "DAT_00109304": {
                    "realloc_func": 1
                },
                "DAT_00109308": {
                    "memset_func": 1
                },
                "DAT_0010930c": {
                    "fun_00103449": 1
                },
                "DAT_00109310": {
                    "fun_00105370": 1
                },
                "DAT_00109314": {
                    "realloc_func": 1
                },
                "DAT_00109318": {
                    "fprintf_func": 1
                },
                "DAT_0010931c": {
                    "fprintf_func": 1
                },
                "DAT_00109320": {
                    "fun_error_func": 1
                },
                "DAT_00109324": {
                    "fileno_func": 1
                },
                "DAT_00109328": {
                    "fopen_func": 1
                },
                "DAT_0010932c": {
                    "fileno_func": 1
                },
                "DAT_00109330": {
                    "fclose_func": 1
                },
                "DAT_00109334": {
                    "free_func": 1
                },
                "DAT_00109338": {
                    "free_func": 1
                },
                "DAT_0010933c": {
                    "fun_error_func": 1
                },
                "DAT_00109340": {
                    "fstat_func": 1
                },
                "DAT_00109344": {
                    "ftell_func": 1
                },
                "DAT_00109348": {
                    "fseek_func": 1
                },
                "DAT_00109350": {
                    "strtol_func": 1
                },
                "DAT_00109354": {
                    "strtol_func": 1
                },
                "DAT_00109358": {
                    "munmap_func": 1
                },
                "DAT_0010935c": {
                    "mmap_func": 1
                },
                "DAT_00109360": {
                    "memcpy_func": 1
                },
                "DAT_00109364": {
                    "strlen_func": 1
                },
                "DAT_00109368": {
                    "printf_func": 1
                },
                "DAT_0010936c": {
                    "memcpy_func": 1
                },
                "DAT_00109370": {
                    "strerror_func": 1
                },
                "DAT_00109374": {
                    "exit_func": 1
                },
                "DAT_00109378": {
                    "printf_func": 1
                },
                "DAT_0010937c": {
                    "dcgettext_func": 1
                },
                "DAT_001093b8": {
                    "data_array3": 1,
                    "set_value_func": 1
                },
                "DAT_001093c0": {
                    "data_array2": 1,
                    "ptr_func": 1
                },
                "DAT_001093dc": {
                    "i_var8": 1
                },
                "DAT_001093e0": {
                    "flag_b_endian": 1
                },
                "DAT_001093e4": {
                    "data_array8": 1,
                    "is64_bit_elf": 1
                },
                "DAT_001093e8": {
                    "flag_b_swap": 1
                },
                "DAT_001093f0": {
                    "flag_write": 1
                },
                "DAT_001093f8": {
                    "data_array7": 1,
                    "parsed_note_section": 1
                },
                "DAT_001093fc": {
                    "flag_exec": 1
                },
                "DAT_00109404": {
                    "flag_read": 1
                },
                "DAT_00109418": {
                    "data_array5": 1,
                    "elf_type": 1
                },
                "DAT_0010941a": {
                    "data_var4": 1,
                    "elf_arch": 1
                },
                "DAT_00109424": {
                    "data_array6": 1,
                    "n_sections": 1
                },
                "DAT_00109438": {
                    "data_array4": 1,
                    "e_machine": 1
                },
                "DAT_00109440": {
                    "data_var2": 1,
                    "show_version_option": 1
                },
                "DAT_00109444": {
                    "data_var1": 1,
                    "debug_option": 1
                },
                "ERROR_00102FA0": {
                    "error_function": 1
                },
                "FUN_00102FBC": {
                    "func2": 1
                },
                "FUN_00102fa0": {
                    "fun_parameter3": 1,
                    "func_3": 1,
                    "get_next_byte": 1,
                    "helper_func2": 1,
                    "process_byte": 1
                },
                "FUN_00102fbc": {
                    "clean_up": 1,
                    "cleanup": 1,
                    "cleanup_and_exit": 1,
                    "func_4": 1
                },
                "FUN_00103160": {
                    "fun_parameter7": 1,
                    "func4": 1,
                    "func_10": 1,
                    "helper_func4": 1,
                    "process_string": 1
                },
                "FUN_001032de": {
                    "helper_func1": 1,
                    "print_func": 1,
                    "print_result": 1,
                    "print_version_info": 1,
                    "set_output_file": 1
                },
                "FUN_00103449": {
                    "func6": 1,
                    "func_7": 1,
                    "helper_func3": 1,
                    "reallocate_memory": 1,
                    "resize_memory": 1,
                    "resize_memory_block": 1
                },
                "FUN_0010358D": {
                    "func5": 1
                },
                "FUN_0010358d": {
                    "fun_parameter5": 1,
                    "func_6": 1,
                    "process_binary_file": 1,
                    "process_option": 1
                },
                "FUN_00103bf0": {
                    "analyze_binary": 1,
                    "process_binary_files": 1,
                    "process_files": 1
                },
                "FUN_00104CE0": {
                    "func8": 1
                },
                "FUN_00104D30": {
                    "func10": 1
                },
                "FUN_00104DA0": {
                    "func9": 1
                },
                "FUN_00104DE0": {
                    "func7": 1
                },
                "FUN_00104c60": {
                    "calculate_crc": 1,
                    "fun_parameter2": 1,
                    "func_2": 1,
                    "parse_option_value": 1
                },
                "FUN_00104d30": {
                    "convert_string_to_int": 1,
                    "fun_parameter4": 1,
                    "func_5": 1,
                    "parse_option": 1
                },
                "FUN_00104da0": {
                    "convert_string_to_int": 1,
                    "fun_parameter1": 1,
                    "func_1": 1,
                    "parse_number": 1
                },
                "FUN_00104de0": {
                    "fun_parameter6": 1,
                    "func_9": 1,
                    "process_elf_file": 1
                },
                "FUN_00105370": {
                    "allocate_memory": 3,
                    "func3": 1,
                    "func_8": 1
                },
                "FUN_00109438": {
                    "func1": 1
                },
                "FUn_00102fa0": {
                    "func_1": 1
                },
                "FUn_00103160": {
                    "func_5": 1
                },
                "FUn_001032de": {
                    "print_func": 1
                },
                "FUn_00104c60": {
                    "func_3": 1
                },
                "FUn_00104d30": {
                    "func_4": 1
                },
                "FUn_00104da0": {
                    "func_2": 1
                },
                "FVar16": {
                    "file_pointer": 1,
                    "file_ptr": 1
                },
                "__addr": {
                    "addr": 6,
                    "addr_ptr": 3,
                    "address": 11,
                    "address_ptr": 1,
                    "address_var": 2,
                    "file_addr": 1,
                    "mapped_address": 2,
                    "mmap_address": 2,
                    "temp_addr": 1
                },
                "__errno_location": {
                    "errno_loc": 1,
                    "error_number": 1,
                    "error_ptr_func": 1,
                    "get_errno_location": 1,
                    "get_errno_ptr": 1,
                    "get_error_number": 1,
                    "int_ptr_func": 1
                },
                "__fd": {
                    "file_descriptor": 1
                },
                "__off_t": {
                    "offset_t": 1
                },
                "__optarg": {
                    "char_ptr_3": 1,
                    "optarg": 1,
                    "option_argument": 2
                },
                "__optind": {
                    "opt_index": 1
                },
                "__ptr": {
                    "buffer": 1,
                    "copied_data": 1,
                    "destination_ptr": 1,
                    "file_ptr": 1,
                    "new_ptr": 1,
                    "pointer": 11,
                    "pointer_var": 2,
                    "ptr": 10,
                    "temp_ptr": 1
                },
                "__s": {
                    "buffer": 3,
                    "byte_ar": 1,
                    "byte_ptr": 6,
                    "byte_ptr_var": 1,
                    "byte_string": 4,
                    "data_buffer": 1,
                    "file_content": 1,
                    "str_var": 1,
                    "string": 5,
                    "string_buffer": 2,
                    "string_var": 1,
                    "temp_byte_ptr": 1,
                    "temp_byte_ptr1": 1
                },
                "_optind": {
                    "opt_index": 1
                },
                "_stderr": {
                    "standard_error": 1
                },
                "_stdin": {
                    "standard_input": 1
                },
                "_stdout": {
                    "standard_output": 1
                },
                "bVar2": {
                    "byte_val": 3,
                    "byte_value": 3,
                    "byte_var": 8,
                    "byte_var2": 5,
                    "byte_variable": 1,
                    "current_byte": 7,
                    "temp_byte": 1
                },
                "bVar4": {
                    "bool1": 1,
                    "bool_1": 1,
                    "bool_flag_1": 1,
                    "bool_val1": 1,
                    "bool_val_1": 2,
                    "bool_value_1": 1,
                    "bool_var1": 6,
                    "bool_var4": 5,
                    "bool_var_1": 5,
                    "bool_variable_1": 1,
                    "flag1": 2,
                    "is_true1": 1,
                    "temp_bool1": 1
                },
                "bVar5": {
                    "bool2": 1,
                    "bool_2": 1,
                    "bool_flag_2": 1,
                    "bool_val2": 1,
                    "bool_val_2": 2,
                    "bool_value_2": 1,
                    "bool_var2": 6,
                    "bool_var5": 5,
                    "bool_var_2": 5,
                    "bool_variable_2": 1,
                    "flag2": 2,
                    "is_true2": 1,
                    "temp_bool2": 1
                },
                "bVar6": {
                    "bool3": 1,
                    "bool_3": 1,
                    "bool_flag_3": 1,
                    "bool_val3": 1,
                    "bool_val_3": 2,
                    "bool_value_3": 1,
                    "bool_var3": 6,
                    "bool_var6": 5,
                    "bool_var_3": 5,
                    "bool_variable_3": 1,
                    "flag3": 2,
                    "is_true3": 1,
                    "temp_bool3": 1
                },
                "bVar7": {
                    "bool4": 1,
                    "bool_4": 1,
                    "bool_flag_4": 1,
                    "bool_val4": 1,
                    "bool_val_4": 2,
                    "bool_value_4": 1,
                    "bool_var4": 6,
                    "bool_var7": 5,
                    "bool_var_4": 5,
                    "bool_variable_4": 1,
                    "flag4": 2,
                    "is_true4": 1,
                    "temp_bool4": 1
                },
                "bindtextdomain": {
                    "bind_text_domain": 3,
                    "bind_text_domain_func": 1,
                    "bindtextdomain_func": 2
                },
                "cVar1": {
                    "ch": 2,
                    "char_value": 1,
                    "char_var": 8,
                    "char_var1": 5,
                    "char_variable": 1,
                    "character": 2,
                    "current_char": 8,
                    "temp_char": 1
                },
                "dcgettext": {
                    "dc_get_text": 1,
                    "dcgettext_func": 2,
                    "get_text": 1,
                    "get_translation": 1,
                    "gettext": 1
                },
                "error": {
                    "display_error": 1,
                    "error_func": 3,
                    "print_error_message": 1,
                    "show_error_message": 1
                },
                "exit": {
                    "exit_func": 2,
                    "exit_program": 3
                },
                "fclose": {
                    "close_file": 3,
                    "close_file_func": 1,
                    "fclose_func": 2,
                    "file_close": 1
                },
                "ferror": {
                    "error_func": 1,
                    "ferror_func": 2,
                    "file_error": 3
                },
                "fileno": {
                    "fileno_func": 2,
                    "get_file_descriptor": 2,
                    "get_file_no": 1,
                    "get_file_num_func": 1,
                    "get_file_number": 1
                },
                "fopen": {
                    "file_open": 1,
                    "fopen_func": 2,
                    "open_file": 3,
                    "open_file_func": 1
                },
                "fprintf": {
                    "fprintf_func": 2,
                    "print_formatted": 1,
                    "print_formatted_message": 1
                },
                "fread": {
                    "file_read": 1,
                    "fread_func": 2,
                    "read_file": 2,
                    "read_from_file": 1
                },
                "free": {
                    "deallocate_memory": 1,
                    "free_func": 2,
                    "free_mem_func": 1,
                    "free_memory": 3
                },
                "fseek": {
                    "file_seek": 1,
                    "fseek_func": 2,
                    "seek_file_func": 1,
                    "set_file_position": 3
                },
                "fstat": {
                    "fstat_func": 2,
                    "get_file_info": 1,
                    "get_file_stat_func": 1,
                    "get_file_status": 2
                },
                "ftell": {
                    "file_tell": 1,
                    "ftell_func": 2,
                    "get_file_position": 2,
                    "tell_file_func": 1
                },
                "fun_getopt_long": {
                    "getopt_long_func": 1
                },
                "getopt_long": {
                    "get_long_option_func": 1,
                    "get_option_long": 1,
                    "getopt_long_func": 1,
                    "parse_command_line": 1,
                    "parse_command_line_options": 1,
                    "parse_options": 1
                },
                "iVar10": {
                    "file_stat_result": 1,
                    "file_status": 2,
                    "i_var": 1,
                    "index_var2": 1,
                    "index_variable": 1,
                    "inner_counter": 1,
                    "iteration_result": 1,
                    "opt": 1,
                    "result": 1,
                    "ret_val": 1,
                    "stat_var": 1,
                    "status": 5,
                    "temp": 1,
                    "temp_counter": 1,
                    "temp_index": 1,
                    "temp_int2": 1,
                    "temp_var": 6,
                    "temp_var_1": 1,
                    "var10": 1
                },
                "iVar31": {
                    "counter": 1,
                    "counter_3": 1,
                    "counter_variable_2": 1,
                    "file_limit": 1,
                    "i_var1": 1,
                    "index_value": 1,
                    "index_var1": 1,
                    "index_var2": 1,
                    "index_var3": 1,
                    "int_var": 3,
                    "int_var31": 1,
                    "iteration_count": 1,
                    "iteration_value": 1,
                    "loop_var_4": 1,
                    "max_files": 2,
                    "max_files_num": 1,
                    "max_iterations": 1,
                    "temp_counter2": 1,
                    "temp_int": 1,
                    "temp_int3": 1,
                    "temp_value": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var_2": 1,
                    "tmp_int_var": 1
                },
                "iVar8": {
                    "count": 1,
                    "counter": 2,
                    "counter_variable": 1,
                    "current_index": 1,
                    "file_index": 2,
                    "i": 2,
                    "index": 11,
                    "index_var": 5,
                    "iteration_var": 1,
                    "iterator": 1,
                    "loop_counter": 1,
                    "temp_int1": 1,
                    "var8": 1
                },
                "lVar20": {
                    "counter": 1,
                    "i": 1,
                    "iterator": 1,
                    "long_val": 1,
                    "long_value": 3,
                    "long_var": 7,
                    "long_var1": 2,
                    "long_var20": 1,
                    "long_var_1": 1,
                    "long_variable_1": 1,
                    "loop_index": 2,
                    "loop_var": 6,
                    "loop_var_1": 1,
                    "temp_long": 1,
                    "temp_long1": 1,
                    "temp_long_1": 1
                },
                "lVar23": {
                    "counter_2": 1,
                    "file_index": 1,
                    "long_val_2": 1,
                    "long_value1": 1,
                    "long_value_2": 2,
                    "long_var2": 8,
                    "long_var23": 1,
                    "long_var_2": 2,
                    "long_variable_2": 1,
                    "loop_index": 1,
                    "loop_var2": 1,
                    "loop_var23": 2,
                    "loop_var_2": 2,
                    "temp_file_index": 1,
                    "temp_index": 1,
                    "temp_long2": 2,
                    "temp_long_2": 1,
                    "tmp_long_var": 1
                },
                "lVar29": {
                    "current_file_index": 1,
                    "i_64": 1,
                    "index_temp": 1,
                    "long_val_3": 1,
                    "long_value_2": 1,
                    "long_value_3": 2,
                    "long_var2": 1,
                    "long_var29": 1,
                    "long_var3": 7,
                    "long_var_3": 2,
                    "long_variable_3": 1,
                    "loop_index": 1,
                    "loop_var2": 1,
                    "loop_var29": 1,
                    "loop_var3": 1,
                    "loop_var_3": 2,
                    "temp_long3": 2,
                    "temp_long_3": 1,
                    "tmp_long_var2": 1,
                    "value": 1
                },
                "local_120": {
                    "current_offset": 1,
                    "current_ulong_8": 1,
                    "local_long": 1,
                    "local_u_long_var": 1,
                    "local_ulong": 2,
                    "local_ulong1": 1,
                    "local_ulong_1": 1,
                    "local_ulong_value": 1,
                    "local_ulong_var": 2,
                    "local_var": 1,
                    "local_var1": 1,
                    "local_var120": 3,
                    "local_var2": 1,
                    "new_ulong": 1,
                    "output_size": 1,
                    "temp_long": 1,
                    "temp_ulong_8": 1,
                    "ulong_var120": 1,
                    "ulong_var8": 1,
                    "ulong_var_8": 1,
                    "ulong_variable_8": 1,
                    "value_2": 1,
                    "var6": 1
                },
                "local_138": {
                    "file_names": 1,
                    "local_array": 2,
                    "local_array1": 2,
                    "local_array_ptr": 1,
                    "local_array_var": 1,
                    "local_long_pointer": 1,
                    "local_ptr": 1,
                    "local_var1": 1,
                    "long_array": 1,
                    "new_file_names": 1,
                    "new_file_paths_ptr": 1,
                    "new_long_ptr": 1,
                    "new_output_array": 1,
                    "output": 1,
                    "output_buffer": 1,
                    "output_files": 1,
                    "param_array_copy": 1,
                    "parsed_file_names": 1,
                    "result_array": 1,
                    "result_ptr": 1,
                    "temp_array": 1,
                    "ulong8_ptr": 1,
                    "ulong_pointer_2": 1,
                    "ulong_ptr1": 1,
                    "updated_file_list": 1
                },
                "local_c8": {
                    "file_info": 3,
                    "file_stat": 1,
                    "file_stat_result_pointer": 1,
                    "file_stats": 3,
                    "file_status": 1,
                    "local_stat": 9,
                    "local_stat_struct": 1,
                    "local_stat_var": 1,
                    "stat_struct": 3,
                    "stat_structure": 1,
                    "stat_val": 1,
                    "stat_var": 2,
                    "stat_var_2": 1
                },
                "local_d0": {
                    "byte_array": 3,
                    "byte_ptr3": 1,
                    "byte_ptr_4": 1,
                    "byte_var_2": 1,
                    "file_data": 1,
                    "local_array3": 1,
                    "local_buffer": 1,
                    "local_buffer_2": 1,
                    "local_byte_pointer": 2,
                    "local_byte_ptr": 3,
                    "local_byte_ptr1": 1,
                    "local_byte_var": 2,
                    "local_ptr3": 1,
                    "local_var3": 1,
                    "local_var4": 1,
                    "local_var_d0": 1,
                    "magic_number": 1,
                    "magic_number_buffer": 1,
                    "new_byte_ptr": 1,
                    "temp_buffer": 1,
                    "temp_byte": 1,
                    "temp_byte_array": 1
                },
                "local_d8": {
                    "char_array": 2,
                    "char_ptr3": 1,
                    "char_var_3": 1,
                    "error_buffer": 1,
                    "local_array2": 1,
                    "local_buffer_1": 1,
                    "local_char_pointer": 1,
                    "local_char_ptr": 3,
                    "local_char_ptr1": 1,
                    "local_char_var": 1,
                    "local_char_var1": 1,
                    "local_ptr2": 1,
                    "local_string": 2,
                    "local_var2": 1,
                    "local_var3": 1,
                    "local_var_d8": 1,
                    "new_string_ptr": 1,
                    "read_buffer": 1,
                    "str_3": 1,
                    "temp_char_array": 1,
                    "temp_string": 2
                },
                "memcpy": {
                    "copy_memory": 3,
                    "memcpy_func": 2,
                    "memory_copy": 1
                },
                "memmove": {
                    "memmove_func": 2,
                    "memory_move": 1,
                    "move_mem_func": 1,
                    "move_memory": 3
                },
                "mmap": {
                    "create_memory_map": 1,
                    "map_file": 1,
                    "map_file_to_memory": 1,
                    "map_mem_func": 1,
                    "memory_map": 1,
                    "mmap_func": 2
                },
                "munmap": {
                    "memory_unmap": 1,
                    "munmap_func": 2,
                    "unmap_file": 1,
                    "unmap_func": 1,
                    "unmap_memory": 2
                },
                "optarg": {
                    "option_arg": 1
                },
                "pFVar16": {
                    "current_file": 1,
                    "file": 1,
                    "file_pointer": 13,
                    "file_pointer_var": 1,
                    "file_ptr": 8,
                    "file_ptr_2": 1,
                    "file_stream": 1,
                    "file_var": 2,
                    "temp_file_pointer": 1
                },
                "param": {
                    "parameter": 1
                },
                "param_1": {
                    "count": 1,
                    "input_length": 1,
                    "limit": 1,
                    "n": 1,
                    "num_entries": 1,
                    "num_files": 10,
                    "num_iterations": 2,
                    "num_of_parameters": 1,
                    "num_params": 11,
                    "param_count": 1,
                    "parameter1": 1
                },
                "param_2": {
                    "file_array": 1,
                    "file_list": 1,
                    "file_names": 2,
                    "file_paths": 11,
                    "input_array": 1,
                    "input_files": 1,
                    "param_array": 8,
                    "param_list": 2,
                    "param_ptr": 1,
                    "parameter2": 1,
                    "parameters_array": 1,
                    "params": 1
                },
                "pbVar22": {
                    "byte_array": 1,
                    "byte_array_var": 1,
                    "byte_pointer": 4,
                    "byte_pointer1": 1,
                    "byte_pointer_var": 1,
                    "byte_ptr": 6,
                    "byte_ptr1": 1,
                    "byte_ptr2": 1,
                    "byte_ptr22": 1,
                    "byte_ptr_2": 4,
                    "byte_ptr_var_2": 1,
                    "current_byte_ptr": 1,
                    "dest_char": 1,
                    "new_buffer": 1,
                    "new_byte_ptr": 1,
                    "output_buffer": 1,
                    "pointer_var_3": 1,
                    "temp_byte_ptr2": 1,
                    "temp_byte_ptr_2": 1
                },
                "pbVar27": {
                    "byte_pointer": 2,
                    "byte_pointer2": 3,
                    "byte_pointer_1": 1,
                    "byte_pointer_2": 1,
                    "byte_pointer_var1": 1,
                    "byte_ptr": 1,
                    "byte_ptr2": 4,
                    "byte_ptr27": 1,
                    "byte_ptr3": 1,
                    "byte_ptr_2": 1,
                    "byte_ptr_3": 4,
                    "byte_ptr_var_3": 1,
                    "current_byte_pointer": 1,
                    "current_byte_ptr": 1,
                    "current_byte_ptr2": 1,
                    "current_char": 1,
                    "temp_buffer": 1,
                    "temp_byte_ptr3": 1,
                    "temp_byte_ptr_3": 1
                },
                "pcVar34": {
                    "char_pointer": 2,
                    "char_pointer34": 1,
                    "char_pointer_1": 1,
                    "char_ptr": 5,
                    "char_ptr1": 1,
                    "char_ptr3": 1,
                    "char_ptr_var": 2,
                    "char_var2": 1,
                    "current_string": 1,
                    "current_string_ptr": 1,
                    "error_message": 1,
                    "error_message_ptr": 1,
                    "error_msg": 1,
                    "printable_char_pointer": 1,
                    "str": 1,
                    "str_var": 1,
                    "string": 1,
                    "string_1": 1,
                    "string_ptr": 1,
                    "temp_char_ptr": 1,
                    "temp_char_ptr1": 1,
                    "temp_string": 1,
                    "tmp_char_var": 1
                },
                "pcVar36": {
                    "char_pointer2": 2,
                    "char_pointer36": 1,
                    "char_pointer_2": 1,
                    "char_ptr2": 4,
                    "char_ptr_2": 3,
                    "char_ptr_var1": 1,
                    "char_ptr_var2": 1,
                    "char_var3": 1,
                    "current_file": 1,
                    "current_string_2": 1,
                    "current_string_ptr2": 1,
                    "error_message_ptr_2": 1,
                    "path": 1,
                    "printable_char_pointer2": 1,
                    "str_2": 1,
                    "str_var_2": 1,
                    "string_2": 1,
                    "string_ptr_2": 1,
                    "string_var": 1,
                    "temp_char_ptr2": 1,
                    "temp_char_ptr_2": 1,
                    "temp_string": 1,
                    "tmp_char_var2": 1
                },
                "pcVar37": {
                    "char_ptr3": 1,
                    "temp_char_ptr3": 1
                },
                "piVar19": {
                    "err_num": 1,
                    "errno_location": 3,
                    "errno_ptr": 2,
                    "errno_value": 1,
                    "errnum_ptr": 1,
                    "error_code": 1,
                    "error_num_pointer": 1,
                    "error_number": 4,
                    "error_ptr": 1,
                    "error_var": 1,
                    "int_pointer": 2,
                    "int_pointer_var": 1,
                    "int_ptr": 6,
                    "int_ptr_var": 1,
                    "pointer_to_integer": 1,
                    "pointer_var19": 1,
                    "ptr_i_var": 1,
                    "temp_int_ptr1": 1
                },
                "plVar11": {
                    "current_long_ptr": 1,
                    "file_sizes": 1,
                    "file_vals": 1,
                    "long_pointer": 1,
                    "long_pointer1": 1,
                    "long_pointer_1": 1,
                    "long_pointer_var": 1,
                    "long_ptr": 6,
                    "long_ptr_1": 1,
                    "long_ptr_var": 1,
                    "long_var": 1,
                    "long_var11": 1,
                    "param_array2": 1,
                    "param_array_temp": 1,
                    "param_list": 1,
                    "param_pointer3": 1,
                    "pointer_list": 1,
                    "pointer_var11": 1,
                    "pointer_var_1": 1,
                    "ptr": 1,
                    "ptr_lvar": 1,
                    "ptr_var11": 1,
                    "temp_long_ptr": 1,
                    "temp_long_ptr1": 1,
                    "temp_pointer": 1
                },
                "plVar21": {
                    "current_file_path": 1,
                    "current_long_ptr2": 1,
                    "file_array_lvar": 1,
                    "file_names_ptr": 1,
                    "file_paths_pointer": 1,
                    "file_paths_ptr": 3,
                    "files": 1,
                    "long_pointer2": 1,
                    "long_pointer_1": 1,
                    "long_pointer_2": 1,
                    "long_pointer_var1": 1,
                    "long_ptr1": 1,
                    "long_ptr2": 1,
                    "long_ptr_2": 3,
                    "long_ptr_var_2": 1,
                    "new_file_paths": 3,
                    "new_input_array": 1,
                    "param_array3": 1,
                    "param_array_ptr": 1,
                    "param_array_temp2": 1,
                    "param_list2": 1,
                    "param_pointer": 1,
                    "parameters_array_ptr": 1,
                    "pointer_var_2": 1,
                    "temp_long_ptr2": 1
                },
                "plVar24": {
                    "current_long_ptr3": 1,
                    "file_array_lvar2": 1,
                    "file_names_ptr_2": 1,
                    "file_paths_ptr_2": 1,
                    "long_pointer3": 1,
                    "long_pointer_2": 1,
                    "long_pointer_3": 1,
                    "long_pointer_var2": 1,
                    "long_ptr2": 1,
                    "long_ptr3": 1,
                    "long_ptr_3": 3,
                    "long_ptr_var_3": 1,
                    "new_file_paths": 2,
                    "new_file_paths_ptr": 1,
                    "param_array4": 1,
                    "param_array_ptr2": 1,
                    "param_array_temp3": 1,
                    "param_list3": 1,
                    "param_pointer2": 1,
                    "parameters_array_ptr2": 1,
                    "pointer_var_4": 1,
                    "temp_file_paths": 1,
                    "temp_long_ptr3": 1,
                    "temp_long_ptr_2": 1,
                    "temp_ptr": 1,
                    "tmp_long_var_ptr": 1,
                    "updated_file_paths": 1
                },
                "ppuVar32": {
                    "current_pointer_ptr": 1,
                    "double_pointer": 1,
                    "double_ptr": 1,
                    "locales": 1,
                    "new_option": 1,
                    "optional_arguments": 1,
                    "pointer_1": 1,
                    "pointer_pointer": 2,
                    "pointer_ptr": 2,
                    "pointer_ptr_var": 1,
                    "pointer_to_pointer": 1,
                    "pointer_to_pointer_to_undefined": 1,
                    "ptr_to_ptr_to_undefined": 1,
                    "string_array": 1,
                    "temp_void_ptr_ptr": 1,
                    "temp_void_ptr_ptr1": 1,
                    "undefined_pointer_pointer": 1,
                    "undefined_ptr_ptr": 7,
                    "undefined_ptr_var": 1,
                    "usage_msg": 1,
                    "void_ptr_ptr": 1
                },
                "printf": {
                    "print_func": 1,
                    "print_function": 1,
                    "print_message": 2,
                    "printf_func": 2
                },
                "ptr_s_input_mach_00109180": {
                    "ptr_input_mach": 1
                },
                "puVar37": {
                    "current_pointer_ptr2": 1,
                    "new_pointer": 1,
                    "new_ptr_2": 1,
                    "pointer_pointer2": 1,
                    "pointer_var1": 1,
                    "pointer_var37": 1,
                    "pointer_var_5": 1,
                    "ptr_to_undefined8": 1,
                    "temp_void_ptr_ptr_2": 1,
                    "tmp_ulong_var_ptr": 1,
                    "ulong_pointer": 2,
                    "ulong_ptr": 2,
                    "undefined8_ptr": 1,
                    "undefined_var": 1,
                    "unsigned_value_ptr": 1,
                    "updated_value": 1
                },
                "reverseEngineerFunction": {
                    "new_function": 1
                },
                "rewind": {
                    "reset_file_position": 2,
                    "rewind_func": 1,
                    "set_file_position_zero": 1
                },
                "sVar17": {
                    "file_size": 1,
                    "num_read": 1,
                    "read_result": 1,
                    "read_size": 5,
                    "size": 6,
                    "size_val": 1,
                    "size_val_1": 1,
                    "size_var": 5,
                    "size_var1": 3,
                    "size_var17": 2,
                    "size_var_1": 1,
                    "size_variable_1": 1,
                    "temp_size": 1,
                    "temp_size_t1": 1
                },
                "sVar18": {
                    "buffer_size": 1,
                    "bytes_read": 1,
                    "num_read2": 1,
                    "read_data": 1,
                    "read_size": 2,
                    "read_size_2": 1,
                    "size2": 1,
                    "size_1": 1,
                    "size_2": 2,
                    "size_val_2": 2,
                    "size_var": 1,
                    "size_var18": 2,
                    "size_var2": 7,
                    "size_var_2": 2,
                    "size_variable_2": 1,
                    "temp_size2": 1,
                    "temp_size_t2": 1,
                    "temp_size_t_1": 1
                },
                "setlocale": {
                    "set_language": 1,
                    "set_locale": 3,
                    "set_locale_func": 1,
                    "setlocale_func": 2
                },
                "stat": {
                    "get_file_info": 1,
                    "get_file_stat": 1,
                    "get_file_status": 2,
                    "stat_func": 3
                },
                "stderr": {
                    "standard_error": 1
                },
                "stdin": {
                    "standard_input": 1
                },
                "stdout": {
                    "standard_output": 1
                },
                "strcmp": {
                    "compare_strings": 2,
                    "strcmp_func": 2
                },
                "strerror": {
                    "error_msg_func": 1,
                    "get_error_message": 2,
                    "get_error_string": 1,
                    "get_string_error": 1,
                    "strerror_func": 1
                },
                "strlen": {
                    "get_string_length": 3,
                    "get_string_length_func": 1,
                    "string_length": 1,
                    "strlen_func": 2
                },
                "strtoul": {
                    "string_to_ulong": 2,
                    "strtoul_func": 2
                },
                "textdomain": {
                    "set_text_domain": 3,
                    "text_domain": 1,
                    "text_domain_func": 1,
                    "textdomain_func": 2
                },
                "uVar12": {
                    "current_ulong_2": 1,
                    "segment_type": 1,
                    "temp_u_long_var1": 1,
                    "temp_ulong1": 2,
                    "temp_ulong_1": 1,
                    "temp_value": 1,
                    "ulong_val_2": 2,
                    "ulong_value_1": 1,
                    "ulong_value_2": 1,
                    "ulong_var1": 4,
                    "ulong_var12": 5,
                    "ulong_var2": 3,
                    "ulong_var_1": 2,
                    "ulong_var_two": 1,
                    "ulong_variable_1": 1,
                    "unsigned_value_2": 1,
                    "var12": 1,
                    "var3": 1
                },
                "uVar13": {
                    "current_ulong_3": 1,
                    "segment_flags": 1,
                    "temp_u_long_var2": 1,
                    "temp_ulong2": 2,
                    "temp_ulong_2": 1,
                    "temp_value": 1,
                    "ulong_val_3": 2,
                    "ulong_value_2": 1,
                    "ulong_value_3": 1,
                    "ulong_var13": 5,
                    "ulong_var2": 4,
                    "ulong_var3": 3,
                    "ulong_var_2": 2,
                    "ulong_var_three": 1,
                    "ulong_variable_2": 1,
                    "unsigned_value_3": 1,
                    "var13": 1,
                    "var4": 1
                },
                "uVar14": {
                    "alignment": 1,
                    "current_ulong_4": 1,
                    "temp_u_long_var3": 1,
                    "temp_ulong3": 2,
                    "temp_ulong_3": 1,
                    "temp_value": 1,
                    "ulong_val_4": 2,
                    "ulong_value_3": 1,
                    "ulong_value_4": 1,
                    "ulong_var14": 5,
                    "ulong_var3": 4,
                    "ulong_var4": 3,
                    "ulong_var_3": 2,
                    "ulong_var_four": 1,
                    "ulong_variable_3": 1,
                    "unsigned_value_4": 1,
                    "var14": 1,
                    "var5": 1
                },
                "uVar15": {
                    "current_ulong_5": 1,
                    "temp_u_long_var4": 1,
                    "temp_ulong4": 2,
                    "temp_ulong_4": 1,
                    "temp_value": 1,
                    "ulong_val_5": 2,
                    "ulong_value_4": 1,
                    "ulong_value_5": 1,
                    "ulong_var15": 5,
                    "ulong_var4": 4,
                    "ulong_var5": 3,
                    "ulong_var_4": 2,
                    "ulong_var_five": 1,
                    "ulong_variable_4": 1,
                    "unsigned_value_5": 1,
                    "value": 1,
                    "var15": 1
                },
                "uVar25": {
                    "error_message": 1,
                    "error_msg": 2,
                    "result_var2": 1,
                    "result_var25": 1,
                    "return_value": 1,
                    "temp_u_long_var5": 1,
                    "temp_ulong": 1,
                    "temp_ulong5": 1,
                    "temp_ulong_5": 1,
                    "temp_ulong_ptr1": 1,
                    "tmp_ulong_var": 1,
                    "ulong_val_6": 1,
                    "ulong_var25": 2,
                    "ulong_var5": 4,
                    "ulong_var6": 2,
                    "ulong_var_5": 1,
                    "ulong_var_six": 1,
                    "ulong_variable_5": 1,
                    "unit_value": 1,
                    "unknown_value": 1,
                    "unsigned_result": 1
                },
                "uVar26": {
                    "bit_mask": 1,
                    "mask": 1,
                    "temp_u_long_var6": 1,
                    "temp_ulong5": 1,
                    "temp_ulong6": 1,
                    "temp_ulong_2": 1,
                    "temp_ulong_6": 1,
                    "temp_value": 1,
                    "tmp_ulong_var2": 1,
                    "ulong_val_6": 1,
                    "ulong_val_7": 1,
                    "ulong_value_5": 1,
                    "ulong_value_6": 1,
                    "ulong_var26": 4,
                    "ulong_var6": 4,
                    "ulong_var7": 2,
                    "ulong_var_6": 1,
                    "ulong_var_seven": 1,
                    "ulong_variable_6": 1,
                    "unsigned_value_6": 1
                },
                "uVar28": {
                    "current_ulong_6": 1,
                    "loop_offset": 1,
                    "temp_u_long_var7": 1,
                    "temp_uint": 1,
                    "temp_uint2": 1,
                    "temp_uint_1": 1,
                    "temp_ulong7": 1,
                    "temp_value": 1,
                    "temp_var2": 1,
                    "tmp_uint_var": 1,
                    "uint_value": 1,
                    "uint_var": 3,
                    "uint_var1": 1,
                    "uint_var2": 1,
                    "uint_var28": 2,
                    "uint_var_2": 1,
                    "uint_variable_2": 1,
                    "ulong_val_8": 1,
                    "ulong_var7": 1,
                    "ulong_var8": 1,
                    "ulong_var_eight": 1,
                    "unit_value_2": 1,
                    "unsigned_value_7": 1,
                    "val": 1
                },
                "uVar3": {
                    "current_u_long": 1,
                    "current_ulong": 4,
                    "current_value": 2,
                    "temp_ulong": 1,
                    "ulong_val": 3,
                    "ulong_value": 2,
                    "ulong_var": 8,
                    "ulong_var3": 5,
                    "ulong_variable": 1,
                    "unsigned_value": 1
                },
                "uVar30": {
                    "combined_result": 2,
                    "final_result": 2,
                    "flags": 1,
                    "result": 4,
                    "result2": 4,
                    "result_flag": 1,
                    "result_val": 1,
                    "result_value": 1,
                    "result_var1": 1,
                    "result_var3": 1,
                    "result_var_two": 1,
                    "temp_uint_2": 1,
                    "temp_uint_result": 1,
                    "tmp_uint_var2": 1,
                    "uint_var3": 1,
                    "uint_var30": 1,
                    "uint_var_3": 1,
                    "uint_variable_3": 1,
                    "unit_value_3": 1
                },
                "uVar33": {
                    "flag": 2,
                    "temp_u_long_var8": 1,
                    "temp_uint3": 1,
                    "temp_uint_2": 1,
                    "temp_uint_3": 1,
                    "temp_ulong8": 1,
                    "temp_value": 1,
                    "tmp_uint_var3": 1,
                    "uint_value_1": 1,
                    "uint_var": 1,
                    "uint_var1": 1,
                    "uint_var2": 3,
                    "uint_var33": 1,
                    "uint_var4": 1,
                    "uint_var_4": 1,
                    "uint_variable_4": 1,
                    "ulong_val_9": 1,
                    "ulong_var33": 1,
                    "ulong_var8": 1,
                    "ulong_var9": 1,
                    "ulong_var_nine": 1,
                    "unit_value_4": 1,
                    "unsigned_value_8": 1,
                    "updated_flags": 1,
                    "updated_ulong": 1,
                    "val_2": 1
                },
                "uVar35": {
                    "current_ulong_7": 1,
                    "segment_size": 1,
                    "temp_u_long_var9": 1,
                    "temp_ulong6": 1,
                    "temp_ulong9": 1,
                    "temp_ulong_3": 1,
                    "temp_ulong_7": 1,
                    "temp_value": 1,
                    "tmp_ulong_var3": 1,
                    "uint_var35": 1,
                    "ulong_val_10": 1,
                    "ulong_value_6": 1,
                    "ulong_value_7": 1,
                    "ulong_var10": 1,
                    "ulong_var35": 3,
                    "ulong_var6": 1,
                    "ulong_var7": 3,
                    "ulong_var8": 1,
                    "ulong_var9": 1,
                    "ulong_var_7": 1,
                    "ulong_var_ten": 1,
                    "ulong_variable_7": 1,
                    "unsigned_value_9": 1,
                    "var1": 1
                },
                "uVar38": {
                    "segment_offset": 1,
                    "tmp_ulong_var4": 1,
                    "ulong_value_7": 1,
                    "ulong_var38": 2,
                    "ulong_var7": 1,
                    "var2": 1
                },
                "uVar9": {
                    "result": 17,
                    "result_var": 3,
                    "return_val": 1,
                    "return_value": 1,
                    "temp_uint1": 1,
                    "u": 1,
                    "uint_var": 2,
                    "uint_var9": 1,
                    "uint_variable_1": 1
                }
            },
            "called": [
                "FUN_00104ce0",
                "exit",
                "dcgettext",
                "printf",
                "FUN_00104da0",
                "ferror",
                "fclose",
                "stat",
                "munmap",
                "strerror",
                "FUN_00104c60",
                "__errno_location",
                "getopt_long",
                "fileno",
                "fopen",
                "memmove",
                "free",
                "FUN_001032de",
                "FUN_00102fa0",
                "strlen",
                "mmap",
                "fseek",
                "FUN_00102fbc",
                "fread",
                "memcpy",
                "FUN_00104d30",
                "fstat",
                "error",
                "setlocale",
                "textdomain",
                "FUN_0010358d",
                "FUN_00103449",
                "rewind",
                "FUN_00105370",
                "fprintf",
                "bindtextdomain",
                "FUN_00104de0",
                "strtoul",
                "strcmp",
                "FUN_00103160",
                "ftell"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nuint process_binary_files_00103bf0(int num_params,long *file_paths)\n\n{\n  char current_char;\n  byte byte_var;\n  ulong ulong_var;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  bool bool_var4;\n  int index;\n  uint result;\n  int temp_var;\n  void *address;\n  void *pointer;\n  long *long_ptr;\n  ulong ulong_var12;\n  ulong ulong_var13;\n  ulong ulong_var14;\n  ulong ulong_var15;\n  FILE *file_pointer;\n  size_t size;\n  byte *byte_ptr;\n  size_t size_var2;\n  int *int_ptr;\n  long long_var;\n  long *file_paths_ptr;\n  byte *byte_ptr;\n  long long_var2;\n  long *long_ptr_3;\n  undefined8 ulong_var5;\n  ulong ulong_var26;\n  byte *byte_ptr_3;\n  uint uint_var;\n  long long_var3;\n  uint result;\n  int int_var;\n  undefined **undefined_ptr_ptr;\n  uint uint_var2;\n  char *char_ptr;\n  ulong ulong_var35;\n  char *char_ptr2;\n  undefined8 *ulong_pointer;\n  ulong ulong_var38;\n  undefined8 *local_array;\n  ulong local_var120;\n  char *local_char_ptr;\n  byte *local_byte_ptr;\n  stat_func local_stat;\n  \n  index = 0;\n  int_var = 2000;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  file_paths_ptr = file_paths;\nLAB_00103c54:\n  long_var3 = (long)(index + 1);\n  do {\n    index = (int)long_var3;\n    if (num_params <= index) {\n      undefined_ptr_ptr = &PTR_s_input_mach_00109180;\n      break;\n    }\n    if (*(char *)file_paths_ptr[long_var3] == '@') {\n      int_var = int_var + -1;\n      if (int_var == 0) {\n        long_var3 = *file_paths_ptr;\n        char_ptr2 = \"%s: error_func: too many @-files encountered\\n\";\n        goto LAB_00104739;\n      }\n      char_ptr2 = (char *)file_paths_ptr[long_var3] + 1;\n      temp_var = stat_func(char_ptr2,&local_stat);\n      if (-1 < temp_var) {\n        if ((local_stat.st_mode & 0xf000) == 0x4000) {\n          do {\n            long_var3 = *file_paths_ptr;\n            char_ptr2 = \"%s: error_func: @-file refers to a directory\\n\";\nLAB_00104739:\n            fprintf_func(standard_error,char_ptr2,long_var3);\n            FUN_00102fbc();\n          } while( true );\n        }\n        file_pointer = fopen(char_ptr2,\"r\");\n        if (file_pointer != (FILE *)0x0) goto code_r0x00104650;\n      }\n    }\n    long_var3 = long_var3 + 1;\n  } while( true );\nLAB_00103c87:\n  index = getopt_long(num_params,file_paths_ptr,&DAT_0010604c,undefined_ptr_ptr,0);\n  if (index == -1) {\n    if ((opt_index == num_params) ||\n       (((DAT_00109444 | DAT_00109440) == 0 &&\n        (undefined_ptr_ptr = (undefined **)0x0,\n        (DAT_0010916c & DAT_00109160 & DAT_00109158 & DAT_00109150) == 0xffffffff))))\n    goto switchD_00103cba_caseD_69;\n    result = 0;\n    goto LAB_00103d1c;\n  }\n  switch(index) {\n  case 0x68:\n    FUN_001032de(standard_output,0);\n  default:\nswitchD_00103cba_caseD_69:\n    FUN_001032de(standard_error,1);\n    goto switchD_00103cba_caseD_9a;\n  case 0x76:\n    printf_func(\"GNU %s %s\\n\",\"elfedit\",\"(GNU Binutils for Debian) 2.40\");\n    char_ptr2 = (char *)dcgettext_func(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf_func(char_ptr2);\n    char_ptr2 = (char *)dcgettext_func(0,\n                                \"This program is free_memory software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf_func(char_ptr2);\n                    \n    exit_program(0);\n  case 0x96:\n    DAT_00109174 = FUN_00104d30(_option_arg);\n    if (DAT_00109174 < 0) {\n      return 1;\n    }\n    if (DAT_00109174 == 6) {\n      DAT_00109170 = 1;\n    }\n    else if (DAT_00109174 < 7) {\n      DAT_00109170 = (DAT_00109174 != 3) + 1 + (uint)(DAT_00109174 != 3);\n    }\n    else {\n      DAT_00109170 = 3 - (uint)(DAT_00109174 - 0xb4U < 2);\n    }\n    goto LAB_00103c87;\n  case 0x97:\n    DAT_0010916c = FUN_00104d30(_option_arg);\n    if ((int)DAT_0010916c < 0) {\n      return 1;\n    }\n    if ((int)DAT_0010916c < 0xb6) {\n      DAT_00109168 = 2;\n      if (((int)DAT_0010916c < 0xb4) && (DAT_00109168 = 1, DAT_0010916c != 3)) {\n        DAT_00109168 = (DAT_0010916c != 6) + 1 + (uint)(DAT_0010916c != 6);\n      }\n    }\n    else {\n      DAT_00109168 = 3;\n    }\n    goto LAB_00103c87;\n  case 0x98:\n    DAT_00109164 = FUN_00104da0(_option_arg);\n    result = DAT_00109164;\n    break;\n  case 0x99:\n    DAT_00109160 = FUN_00104da0(_option_arg);\n    result = DAT_00109160;\n    break;\n  case 0x9a:\n    goto switchD_00103cba_caseD_9a;\n  case 0x9b:\n    DAT_00109158 = FUN_00104ce0(_option_arg);\n    result = DAT_00109158;\n    break;\n  case 0x9c:\n    ulong_var15 = strtoul(_option_arg,&local_char_ptr,0);\n    result = (uint)ulong_var15;\n    current_char = *local_char_ptr;\n    DAT_00109154 = result;\n    char_ptr2 = _option_arg;\n    goto joined_r0x00104334;\n  case 0x9d:\n    ulong_var15 = strtoul(_option_arg,&local_char_ptr,0);\n    result = (uint)ulong_var15;\n    current_char = *local_char_ptr;\n    DAT_00109150 = result;\n    char_ptr2 = _option_arg;\njoined_r0x00104334:\n    _option_arg = char_ptr2;\n    if ((current_char != '\\0') || (0xff < result)) {\n      ulong_var5 = dcgettext_func(0,\"Invalid ABIVERSION: %s\\n\",5);\n      error_func(ulong_var5,char_ptr2);\n      return 1;\n    }\n    goto LAB_00103c87;\n  case 0x9e:\n    ulong_var5 = 1;\n    goto LAB_00103e9d;\n  case 0x9f:\n    ulong_var5 = 0;\nLAB_00103e9d:\n    result = FUN_00104c60(_option_arg,ulong_var5);\n  }\njoined_r0x00103eae:\n  if ((int)result < 0) {\n    return 1;\n  }\n  goto LAB_00103c87;\nLAB_00103d1c:\n  long_var3 = (long)opt_index;\n  if (num_params <= opt_index) {\n    return result;\n  }\n  opt_index = opt_index + 1;\n  char_ptr2 = (char *)file_paths_ptr[long_var3];\n  index = stat_func(char_ptr2,&local_stat);\n  if (index < 0) {\n    int_ptr = __errno_location();\n    char_ptr = \"\\'%s\\': No such file\\n\";\n    if (*int_ptr == 2) goto LAB_00104497;\n    char_ptr = strerror(*int_ptr);\n    ulong_var5 = dcgettext_func(0,\"Could not locate \\'%s\\'.  System error_func message: %s\\n\",5);\n    error_func(ulong_var5,char_ptr2,char_ptr);\nLAB_001044ab:\n    result = 1;\n  }\n  else {\n    if ((local_stat.st_mode & 0xf000) != 0x8000) {\n      char_ptr = \"\\'%s\\' is not an ordinary file\\n\";\nLAB_00104497:\n      ulong_var5 = dcgettext_func(0,char_ptr,5);\n      error_func(ulong_var5,char_ptr2);\n      goto LAB_001044ab;\n    }\n    file_pointer = fopen(char_ptr2,\"r+b\");\n    if (file_pointer == (FILE *)0x0) {\n      char_ptr = \"Input file \\'%s\\' is not readable\\n\";\n      goto LAB_00104497;\n    }\n    size = fread(&local_byte_ptr,8,1,file_pointer);\n    if (size != 1) {\n      ulong_var5 = dcgettext_func(0,\"%s: Failed to read file\\'s magic number\\n\",5);\n      error_func(ulong_var5,char_ptr2);\n      fclose(file_pointer);\n      goto LAB_001044ab;\n    }\n    if (local_byte_ptr == (byte *)0xa3e686372613c21) {\n      result = FUN_0010358d(char_ptr2,file_pointer,0);\n    }\n    else if (local_byte_ptr == (byte *)0xa3e6e6968743c21) {\n      result = FUN_0010358d(char_ptr2,file_pointer,1);\n    }\n    else {\n      rewind(file_pointer);\n      DAT_00109438 = 0;\n      result = FUN_00104de0(char_ptr2,file_pointer);\n      if (((result == 0) && ((ushort)(DAT_00109418 - 2U) < 2)) &&\n         ((DAT_00109444 | DAT_00109440) != 0)) {\n        if ((DAT_0010941a == 3) ||\n           (char_ptr = \"%s: Not an i386 nor x86-64 ELF file\\n\", DAT_0010941a == 0x3e)) {\n          index = fileno_func(file_pointer);\n          index = fstat(index,&local_stat);\n          if (index < 0) {\n            ulong_var5 = dcgettext_func(0,\"%s: stat_func () failed\\n\",5);\n            error_func(ulong_var5,char_ptr2);\n            result = 1;\n          }\n          else {\n            index = fileno_func(file_pointer);\n            address = mmap_func((void *)0x0,local_stat.st_size,3,1,index,0);\n            if (address == (void *)0xffffffffffffffff) {\n              char_ptr = \"%s: mmap_func () failed\\n\";\n              goto LAB_0010438d;\n            }\n            pointer = (void *)FUN_00105370((ulong)DAT_00109424 << 6);\n            long_var3 = DAT_001093f8;\n            if (DAT_001093e4 == '\\x01') {\n              for (ulong_var15 = 0; (uint)ulong_var15 < DAT_00109424; ulong_var15 = (ulong)((uint)ulong_var15 + 1)) {\n                long_var = ulong_var15 * 0x20 + long_var3 + (long)address;\n                ulong_pointer = (undefined8 *)((long)pointer + ulong_var15 * 0x40);\n                ulong_var5 = (*DAT_001093c0)(long_var,4);\n                *ulong_pointer = ulong_var5;\n                ulong_var5 = (*DAT_001093c0)(long_var + 4,4);\n                ulong_pointer[2] = ulong_var5;\n                ulong_var5 = (*DAT_001093c0)(long_var + 8,4);\n                ulong_pointer[3] = ulong_var5;\n                ulong_var5 = (*DAT_001093c0)(long_var + 0xc,4);\n                ulong_pointer[4] = ulong_var5;\n                ulong_var5 = (*DAT_001093c0)(long_var + 0x10,4);\n                ulong_pointer[5] = ulong_var5;\n                ulong_var5 = (*DAT_001093c0)(long_var + 0x14,4);\n                ulong_pointer[6] = ulong_var5;\n                ulong_var5 = (*DAT_001093c0)(long_var + 0x18,4);\n                ulong_pointer[1] = ulong_var5;\n                ulong_var5 = (*DAT_001093c0)(long_var + 0x1c,4);\n                ulong_pointer[7] = ulong_var5;\n              }\n            }\n            else {\n              for (uint_var = 0; uint_var < DAT_00109424; uint_var = uint_var + 1) {\n                long_var = (ulong)uint_var * 0x38 + long_var3 + (long)address;\n                ulong_pointer = (undefined8 *)((ulong)uint_var * 0x40 + (long)pointer);\n                ulong_var5 = (*DAT_001093c0)(long_var,4);\n                *ulong_pointer = ulong_var5;\n                ulong_var5 = (*DAT_001093c0)(long_var + 8,8);\n                ulong_pointer[2] = ulong_var5;\n                ulong_var5 = (*DAT_001093c0)(long_var + 0x10,8);\n                ulong_pointer[3] = ulong_var5;\n                ulong_var5 = (*DAT_001093c0)(long_var + 0x18,8);\n                ulong_pointer[4] = ulong_var5;\n                ulong_var5 = (*DAT_001093c0)(long_var + 0x20,8);\n                ulong_pointer[5] = ulong_var5;\n                ulong_var5 = (*DAT_001093c0)(long_var + 0x28,8);\n                ulong_pointer[6] = ulong_var5;\n                ulong_var5 = (*DAT_001093c0)(long_var + 4,4);\n                ulong_pointer[1] = ulong_var5;\n                ulong_var5 = (*DAT_001093c0)(long_var + 0x30,8);\n                ulong_pointer[7] = ulong_var5;\n              }\n            }\n            for (ulong_var15 = 0; (uint)ulong_var15 < DAT_00109424; ulong_var15 = (ulong)((uint)ulong_var15 + 1)) {\n              long_ptr = (long *)(ulong_var15 * 0x40 + (long)pointer);\n              if (*long_ptr == 4) {\n                long_var3 = long_ptr[5];\n                ulong_var = long_ptr[7];\n                ulong_var35 = (long)address + long_ptr[2];\n                for (local_var120 = ulong_var35; local_var120 < ulong_var35 + long_var3;\n                    local_var120 = local_var120 + ((ulong_var - 1) + ulong_var14 + ulong_var13 & ulong_var26)) {\n                  if ((ulong_var35 - local_var120) + long_var3 < 0xc) {\nLAB_001044cb:\n                    ulong_var5 = dcgettext_func(0,\"%s: Invalid PT_NOTE segment\\n\",5);\n                    error_func(ulong_var5,char_ptr2);\n                    result = 1;\n                    goto LAB_001042bf;\n                  }\n                  long_var = (*DAT_001093c0)(local_var120 + 8,4);\n                  ulong_var12 = (*DAT_001093c0)(local_var120,4);\n                  if ((ulong_var35 - (long)(char *)(local_var120 + 0xc)) + long_var3 < ulong_var12)\n                  goto LAB_001044cb;\n                  ulong_var13 = (*DAT_001093c0)(local_var120 + 4,4);\n                  ulong_var26 = -ulong_var;\n                  ulong_var14 = ulong_var + 0xb + ulong_var12 & ulong_var26;\n                  ulong_var38 = local_var120 + ulong_var14;\n                  if ((ulong_var13 != 0) &&\n                     ((ulong_var35 + long_var3 <= ulong_var38 || ((ulong_var35 - ulong_var38) + long_var3 < ulong_var13))))\n                  goto LAB_001044cb;\n                  if ((ulong_var12 == 4) &&\n                     ((index = strcmp((char *)(local_var120 + 0xc),\"GNU\"), index == 0 && (long_var == 5))\n                     )) {\n                    if ((ulong_var13 < 8) || (ulong_var13 % ulong_var != 0)) goto LAB_001044cb;\n                    ulong_var12 = ulong_var38 + ulong_var13;\n                    do {\n                      index = (*DAT_001093c0)(ulong_var38,4);\n                      uint_var = (*DAT_001093c0)(ulong_var38 + 4,4);\n                      long_var = ulong_var38 + 8;\n                      if (ulong_var12 < long_var + (ulong)uint_var) goto LAB_001044cb;\n                      if (index == -0x3ffffffe) {\n                        if (uint_var != 4) goto LAB_001044cb;\n                        uint_var = (*DAT_001093c0)(long_var,4);\n                        if (DAT_00109444 == 0) {\n                          uint_var2 = uint_var;\n                          if (DAT_00109440 == 0) goto LAB_001042bf;\nLAB_001042ac:\n                          uint_var2 = uint_var2 & ~DAT_00109440;\n                        }\n                        else {\n                          uint_var2 = DAT_00109444 | uint_var;\n                          if (DAT_00109440 != 0) goto LAB_001042ac;\n                        }\n                        if (uint_var != uint_var2) {\n                          (*DAT_001093b8)(long_var,uint_var2,4);\n                        }\n                        goto LAB_001042bf;\n                      }\n                      ulong_var38 = long_var + ((ulong)uint_var + (ulong_var - 1) & ulong_var26);\n                    } while (7 < (long)(ulong_var12 - ulong_var38));\n                  }\n                }\n              }\n            }\nLAB_001042bf:\n            free_memory(pointer);\n            munmap(address,local_stat.st_size);\n          }\n        }\n        else {\nLAB_0010438d:\n          ulong_var5 = dcgettext_func(0,char_ptr,5);\n          error_func(ulong_var5,char_ptr2);\n        }\n      }\n    }\n    fclose(file_pointer);\n  }\n  result = result | result;\n  goto LAB_00103d1c;\nswitchD_00103cba_caseD_9a:\n  DAT_0010915c = FUN_00104ce0(_option_arg);\n  result = DAT_0010915c;\n  goto joined_r0x00103eae;\ncode_r0x00104650:\n  temp_var = fseek(file_pointer,0,2);\n  if (((temp_var != -1) && (size = ftell_func(file_pointer), size != 0xffffffffffffffff)) &&\n     (temp_var = fseek(file_pointer,0,0), temp_var != -1)) {\n    byte_ptr = (byte *)FUN_00105370(size + 1);\n    size_var2 = fread(byte_ptr,1,size,file_pointer);\n    if ((size == size_var2) || (temp_var = ferror(file_pointer), temp_var == 0)) {\n      byte_ptr[size_var2] = 0;\n      byte_ptr_3 = byte_ptr;\nLAB_001046fc:\n      if (*byte_ptr_3 == 0) {\n        local_array = (undefined8 *)FUN_00105370(8);\n        *local_array = 0;\n      }\n      else {\n        if (((&DAT_00107040)[(ulong)*byte_ptr_3 * 2] & 0x40) != 0) goto code_r0x00104718;\n        local_byte_ptr = byte_ptr;\n        strlen((char *)byte_ptr);\n        byte_ptr_3 = (byte *)FUN_00105370();\n        local_array = (undefined8 *)0x0;\n        temp_var = 0;\n        bool_var3 = false;\n        bool_var2 = false;\n        bool_var4 = false;\n        long_var = 0;\n        do {\n          FUN_00102fa0(&local_byte_ptr);\n          byte_ptr = byte_ptr_3;\n          if ((temp_var == 0) || (temp_var + -1 <= (int)long_var)) {\n            if (local_array == (undefined8 *)0x0) {\n              temp_var = 8;\n              local_array = (undefined8 *)FUN_00105370(0x40);\n            }\n            else {\n              temp_var = temp_var * 2;\n              local_array = (undefined8 *)FUN_00103449(local_array,(long)temp_var << 3);\n            }\n            local_array[long_var] = 0;\n          }\n          for (; byte_var = *local_byte_ptr, byte_var != 0; local_byte_ptr = local_byte_ptr + 1) {\n            if ((((&DAT_00107040)[(ulong)byte_var * 2] & 0x40) != 0) &&\n               (bool_var1 = (bool)(bool_var2 | bool_var4 | bool_var3), !bool_var1)) {\n              bool_var3 = false;\n              bool_var4 = false;\n              bool_var2 = bool_var1;\n              break;\n            }\n            if (bool_var3) {\n              *byte_ptr = byte_var;\n              bool_var3 = false;\n              byte_ptr = byte_ptr + 1;\n            }\n            else if (byte_var == 0x5c) {\n              bool_var3 = true;\n            }\n            else if (bool_var2) {\n              if (byte_var == 0x27) {\n                bool_var2 = false;\n              }\n              else {\nLAB_00104c08:\n                *byte_ptr = byte_var;\n                byte_ptr = byte_ptr + 1;\n              }\n            }\n            else if (bool_var4) {\n              if (byte_var != 0x22) goto LAB_00104c08;\n              bool_var4 = false;\n            }\n            else if (byte_var == 0x27) {\n              bool_var2 = true;\n            }\n            else {\n              if (byte_var != 0x22) goto LAB_00104c08;\n              bool_var4 = true;\n            }\n          }\n          *byte_ptr = 0;\n          ulong_var5 = FUN_00103160();\n          local_array[long_var] = ulong_var5;\n          local_array[long_var + 1] = 0;\n          FUN_00102fa0(&local_byte_ptr);\n          long_var = long_var + 1;\n        } while (*local_byte_ptr != 0);\n        free_memory(byte_ptr_3);\n      }\n      if (file_paths_ptr == file_paths) {\n        long_var = 1;\n        do {\n          long_var2 = long_var;\n          long_var = long_var2 + 1;\n        } while (file_paths_ptr[long_var2 + -1] != 0);\n        long_ptr_3 = (long *)FUN_00105370((long)(int)long_var2 << 3);\n        long_ptr = long_ptr_3;\n        while (long_var = *file_paths_ptr, file_paths_ptr = file_paths_ptr + 1, long_var != 0) {\n          long_var = FUN_00103160();\n          *long_ptr = long_var;\n          long_ptr = long_ptr + 1;\n        }\n        *long_ptr = 0;\n        long_var = 0;\n      }\n      else {\n        long_var = 0;\n        long_ptr_3 = file_paths_ptr;\n      }\n      for (; local_array[long_var] != 0; long_var = long_var + 1) {\n      }\n      free_memory((void *)long_ptr_3[long_var3]);\n      file_paths_ptr = (long *)FUN_00103449(long_ptr_3,(long_var + 1 + (long)num_params) * 8);\n      memmove(file_paths_ptr + long_var3 + long_var,file_paths_ptr + long_var3 + 1,(long)(num_params - index) << 3);\n      num_params = num_params + -1 + (int)long_var;\n      memcpy(file_paths_ptr + long_var3,local_array,long_var * 8);\n      free_memory(local_array);\n      free_memory(byte_ptr);\n      index = index + -1;\n    }\n    else {\n      free_memory(byte_ptr);\n    }\n  }\n  fclose(file_pointer);\n  goto LAB_00103c54;\ncode_r0x00104718:\n  byte_ptr_3 = byte_ptr_3 + 1;\n  goto LAB_001046fc;\n}\n\n",
            "current_name": "process_binary_files_00103bf0",
            "entrypoint": "0x00103bf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103bf0": "process_binary_files_00103bf0",
                "FVar16": "file_ptr",
                "__addr": "address",
                "__errno_location": "int_ptr_func",
                "__ptr": "pointer",
                "__s": "byte_ptr",
                "_optind": "opt_index",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "bVar2": "byte_var",
                "bVar4": "bool_var1",
                "bVar5": "bool_var2",
                "bVar6": "bool_var3",
                "bVar7": "bool_var4",
                "bindtextdomain": "bind_text_domain",
                "cVar1": "current_char",
                "dcgettext": "dcgettext_func",
                "error": "error_func",
                "exit": "exit_program",
                "fclose": "close_file",
                "ferror": "file_error",
                "fileno": "fileno_func",
                "fopen": "open_file",
                "fprintf": "fprintf_func",
                "fread": "read_file",
                "free": "free_memory",
                "fseek": "set_file_position",
                "fstat": "get_file_status",
                "ftell": "ftell_func",
                "getopt_long": "parse_command_line",
                "iVar10": "temp_var",
                "iVar31": "int_var",
                "iVar8": "index",
                "lVar20": "long_var",
                "lVar23": "long_var2",
                "lVar29": "long_var3",
                "local_120": "local_var120",
                "local_138": "local_array",
                "local_c8": "local_stat",
                "local_d0": "local_byte_ptr",
                "local_d8": "local_char_ptr",
                "memcpy": "copy_memory",
                "memmove": "move_memory",
                "mmap": "mmap_func",
                "munmap": "unmap_memory",
                "optarg": "option_arg",
                "pFVar16": "file_pointer",
                "param": "parameter",
                "param_1": "num_params",
                "param_2": "file_paths",
                "pbVar22": "byte_ptr",
                "pbVar27": "byte_ptr_3",
                "pcVar34": "char_ptr",
                "pcVar36": "char_ptr2",
                "piVar19": "int_ptr",
                "plVar11": "long_ptr",
                "plVar21": "file_paths_ptr",
                "plVar24": "long_ptr_3",
                "ppuVar32": "undefined_ptr_ptr",
                "printf": "printf_func",
                "puVar37": "ulong_pointer",
                "rewind": "reset_file_position",
                "sVar17": "size",
                "sVar18": "size_var2",
                "setlocale": "set_locale",
                "stat": "stat_func",
                "stderr": "standard_error",
                "stdout": "standard_output",
                "strcmp": "compare_strings",
                "strerror": "get_error_message",
                "strlen": "get_string_length",
                "strtoul": "string_to_ulong",
                "textdomain": "set_text_domain",
                "uVar12": "ulong_var12",
                "uVar13": "ulong_var13",
                "uVar14": "ulong_var14",
                "uVar15": "ulong_var15",
                "uVar25": "ulong_var5",
                "uVar26": "ulong_var26",
                "uVar28": "uint_var",
                "uVar3": "ulong_var",
                "uVar30": "result",
                "uVar33": "uint_var2",
                "uVar35": "ulong_var35",
                "uVar38": "ulong_var38",
                "uVar9": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104c60": {
            "additional_data": {
                "FUN_001022c0": {
                    "initialize": 1
                },
                "FUN_00104c60": {
                    "get_x86_feature": 1,
                    "identify_and_set_x86_feature": 1,
                    "identify_x86_feature": 10,
                    "map_x86_feature": 1,
                    "parse_x86_feature": 2,
                    "process_x86_feature": 4,
                    "set_x86_feature": 1,
                    "update_feature_bitmap": 1,
                    "update_x86_feature": 5,
                    "update_x86_feature_status": 1,
                    "update_x86_features": 3
                },
                "auVar4": {
                    "output_buffer": 1,
                    "result": 11,
                    "result_struct": 1,
                    "result_tuple": 1,
                    "return_buffer": 1,
                    "return_data": 1,
                    "return_val": 1,
                    "return_value": 14
                },
                "iVar1": {
                    "comparison_result": 12,
                    "result": 4,
                    "str_cmp_result": 1,
                    "strcasecmp_result": 13
                },
                "param_1": {
                    "feature": 3,
                    "feature_name": 25,
                    "x86_feature": 3
                },
                "param_2": {
                    "add_feature": 1,
                    "add_flag": 1,
                    "enable": 10,
                    "enable_feature": 3,
                    "enable_flag": 2,
                    "flag": 5,
                    "is_active": 1,
                    "is_enabled": 5,
                    "is_set": 3
                },
                "param_3": {
                    "context": 1,
                    "data1": 1,
                    "error_message": 5,
                    "error_message_handle": 1,
                    "error_string": 4,
                    "error_text": 1,
                    "message": 1,
                    "message_ptr": 1,
                    "msg": 1,
                    "msg_catalog": 1,
                    "msg_id": 1,
                    "param_3": 1,
                    "undefined_argument_1": 1,
                    "unknown1": 1,
                    "unknown_param_1": 1,
                    "unused1": 3,
                    "unused_param": 2,
                    "unused_param_1": 1,
                    "unused_param_3": 1,
                    "var3": 1
                },
                "param_4": {
                    "data2": 1,
                    "error_code": 1,
                    "error_message": 2,
                    "param_4": 2,
                    "result": 4,
                    "return_address": 2,
                    "return_value": 5,
                    "return_value_ptr": 1,
                    "undefined_argument_2": 1,
                    "unknown2": 1,
                    "unknown_feature": 1,
                    "unknown_param_2": 1,
                    "unused2": 3,
                    "unused_param2": 2,
                    "unused_param_2": 1,
                    "unused_param_4": 1,
                    "var4": 1
                },
                "strcasecmp": {
                    "case_insensitive_compare": 1,
                    "compare_ignore_case": 1
                },
                "uVar2": {
                    "feature_bit": 2,
                    "feature_bitmap": 1,
                    "feature_bitmask": 2,
                    "feature_code": 1,
                    "feature_flag": 7,
                    "feature_mask": 2,
                    "feature_value": 11,
                    "flag_value": 1,
                    "mask": 1,
                    "status": 1,
                    "x86_feature_bitmask": 1,
                    "x86_feature_mask": 1
                },
                "uVar3": {
                    "dcgettext_result": 1,
                    "error": 1,
                    "error_code": 1,
                    "error_message": 13,
                    "error_msg": 2,
                    "error_string": 3,
                    "error_string_result": 1,
                    "result": 3,
                    "return_value": 5,
                    "translation": 1
                }
            },
            "called": [
                "FUN_001022c0",
                "strcasecmp"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nundefined  [16] identify_and_set_x86_feature_00104c60(char *feature_name,int enable,undefined8 error_message,undefined8 return_value)\n\n{\n  int strcasecmp_result;\n  uint feature_value;\n  undefined8 error_message;\n  undefined return_value [16];\n  \n  strcasecmp_result = compare_ignore_case(feature_name,\"ibt\");\n  feature_value = 1;\n  if (strcasecmp_result != 0) {\n    strcasecmp_result = compare_ignore_case(feature_name,\"shstk\");\n    feature_value = 2;\n    if (strcasecmp_result != 0) {\n      strcasecmp_result = compare_ignore_case(feature_name,\"lam_u48\");\n      if (strcasecmp_result == 0) {\n        feature_value = 4;\n      }\n      else {\n        strcasecmp_result = compare_ignore_case(feature_name,\"lam_u57\");\n        feature_value = 8;\n        if (strcasecmp_result != 0) {\n          error_message = dcgettext(0,\"Unknown x86 feature: %s\\n\",5);\n          error(error_message,feature_name);\n          error_message = 0xffffffff;\n          goto LAB_00104ca5;\n        }\n      }\n    }\n  }\n  if (enable == 0) {\n    DAT_00109440 = feature_value | DAT_00109440;\n    DAT_00109444 = ~feature_value & DAT_00109444;\n  }\n  else {\n    DAT_00109444 = feature_value | DAT_00109444;\n    DAT_00109440 = DAT_00109440 & ~feature_value;\n  }\n  error_message = 0;\nLAB_00104ca5:\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "identify_and_set_x86_feature_00104c60",
            "entrypoint": "0x00104c60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104c60": "identify_and_set_x86_feature_00104c60",
                "auVar4": "return_value",
                "iVar1": "strcasecmp_result",
                "param_1": "feature_name",
                "param_2": "enable",
                "param_3": "error_message",
                "param_4": "return_value",
                "strcasecmp": "compare_ignore_case",
                "uVar2": "feature_value",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ce0": {
            "additional_data": {
                "FUN_00102323": {
                    "get_osabi": 1,
                    "initialize": 2
                },
                "FUN_00104ce0": {
                    "check_osabi": 1,
                    "find_osabi": 22,
                    "find_osabi_by_name": 1,
                    "find_osabi_code": 1,
                    "find_osabi_index": 2,
                    "find_osabi_match": 1,
                    "get_osabi_id": 1,
                    "lookup_osabi": 1,
                    "process_osabi": 1
                },
                "auVar6": {
                    "result": 17,
                    "result_array": 2,
                    "result_au_var": 1,
                    "result_struct": 1,
                    "return_data": 1,
                    "return_value": 7
                },
                "iVar1": {
                    "comparison_result": 26,
                    "result": 4
                },
                "param_1": {
                    "desired_osabi": 1,
                    "input_osabi": 3,
                    "input_string": 1,
                    "os_name": 3,
                    "osabi": 4,
                    "osabi_input": 1,
                    "osabi_name": 11,
                    "osabi_str": 1,
                    "osabi_string": 1,
                    "target_osabi": 5
                },
                "param_2": {
                    "arg1": 1,
                    "arg2": 3,
                    "arg_2": 1,
                    "param2": 4,
                    "param2_unused": 1,
                    "param_2": 12,
                    "ptr1": 1,
                    "unknown_1": 2,
                    "unknown_param_2": 2,
                    "unused_1": 1,
                    "unused_param": 1,
                    "unused_param_1": 1,
                    "unused_param_2": 1
                },
                "param_3": {
                    "arg2": 1,
                    "arg3": 3,
                    "arg_3": 1,
                    "param3": 4,
                    "param3_unused": 1,
                    "param_3": 12,
                    "ptr2": 1,
                    "unknown_2": 2,
                    "unknown_param_3": 2,
                    "unused_2": 1,
                    "unused_param": 1,
                    "unused_param_2": 1,
                    "unused_param_3": 1
                },
                "param_4": {
                    "arg3": 1,
                    "arg4": 3,
                    "default_osabi": 1,
                    "error_message": 5,
                    "param4": 3,
                    "param_4": 7,
                    "ptr3": 1,
                    "response": 1,
                    "result": 3,
                    "return_value": 1,
                    "unknown_3": 2,
                    "unknown_param_4": 2,
                    "unused_3": 1
                },
                "puVar5": {
                    "array_ptr": 2,
                    "data_array": 2,
                    "data_pointer": 2,
                    "data_ptr": 6,
                    "osabi_array": 3,
                    "osabi_array_ptr": 1,
                    "osabi_data": 2,
                    "osabi_data_ptr": 1,
                    "osabi_list": 1,
                    "osabi_list_ptr": 1,
                    "osabi_table": 4,
                    "pointer_to_data": 1,
                    "ptr_array": 1,
                    "ptr_osabi_table": 1,
                    "ptr_to_osabi": 1,
                    "string_array": 2
                },
                "strcasecmp": {
                    "compare_strings": 2
                },
                "uVar2": {
                    "error_message": 13,
                    "error_message_handle": 1,
                    "error_msg": 4,
                    "error_string": 3,
                    "localized_error_message": 2,
                    "message": 2,
                    "os_message": 1,
                    "osabi_error": 1,
                    "result": 1,
                    "translation": 2,
                    "unknown_osabi_error_message": 1
                },
                "uVar3": {
                    "index": 23,
                    "osabi_code": 1,
                    "osabi_id": 1,
                    "osabi_index": 5,
                    "osabi_value": 1
                },
                "uVar4": {
                    "increment": 2,
                    "incremented_index": 1,
                    "index": 1,
                    "index_plus_one": 2,
                    "loop_counter": 1,
                    "new_index": 1,
                    "next_index": 22,
                    "u_var4": 1
                }
            },
            "called": [
                "FUN_00102323",
                "strcasecmp"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nundefined  [16] find_osabi_index_00104ce0(char *osabi_name,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  ulong index;\n  uint next_index;\n  undefined4 *data_ptr;\n  undefined result [16];\n  \n  data_ptr = &DAT_00108ca0;\n  index = 0;\n  do {\n    comparison_result = strcasecmp(osabi_name,*(char **)(data_ptr + 2));\n    if (comparison_result == 0) {\n      index = (ulong)(uint)(&DAT_00108ca0)[index * 4];\n      goto LAB_00104d20;\n    }\n    next_index = (int)index + 1;\n    index = (ulong)next_index;\n    data_ptr = data_ptr + 4;\n  } while (next_index != 0x10);\n  error_message = dcgettext(0,\"Unknown OSABI: %s\\n\",5);\n  error(error_message,osabi_name);\n  index = 0xffffffff;\nLAB_00104d20:\n  result._8_8_ = param_4;\n  result._0_8_ = index;\n  return result;\n}\n\n",
            "current_name": "find_osabi_index_00104ce0",
            "entrypoint": "0x00104ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ce0": "find_osabi_index_00104ce0",
                "auVar6": "result",
                "iVar1": "comparison_result",
                "param_1": "osabi_name",
                "puVar5": "data_ptr",
                "strcasecmp": "compare_strings",
                "uVar2": "error_message",
                "uVar3": "index",
                "uVar4": "next_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d30": {
            "additional_data": {
                "DAT_0010234b": {
                    "some_data": 1
                },
                "FUN_0010234b": {
                    "error": 1
                },
                "FUN_00104d30": {
                    "find_machine_type": 1,
                    "get_machine_type": 27,
                    "identify_machine_type": 2
                },
                "FUN_001104d30": {
                    "get_machine_type": 1
                },
                "iVar1": {
                    "comparison_result": 4,
                    "is_equal": 1,
                    "result": 26
                },
                "iVar2": {
                    "cmp_result": 2,
                    "compare_result": 3,
                    "comparison_result": 20,
                    "comparison_result2": 4,
                    "strcmp_result": 1,
                    "temp_result": 1
                },
                "param_1": {
                    "machine_type": 31
                },
                "strcasecmp": {
                    "compare_ignore_case": 2,
                    "compare_strings": 1
                },
                "uVar3": {
                    "": 1,
                    "err_msg": 1,
                    "error_message": 16,
                    "error_msg": 2,
                    "error_string": 9,
                    "unknown_type_message": 1
                }
            },
            "called": [
                "FUN_0010234b",
                "strcasecmp"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nint get_machine_type_00104d30(char *machine_type)\n\n{\n  int result;\n  int comparison_result;\n  undefined8 error_message;\n  \n  result = strcasecmp(machine_type,\"i386\");\n  if (result == 0) {\n    result = 3;\n  }\n  else {\n    result = strcasecmp(machine_type,\"iamcu\");\n    if (result == 0) {\n      return 6;\n    }\n    comparison_result = strcasecmp(machine_type,\"l1om\");\n    result = 0xb4;\n    if (comparison_result != 0) {\n      result = strcasecmp(machine_type,\"k1om\");\n      if (result == 0) {\n        return 0xb5;\n      }\n      result = strcasecmp(machine_type,\"x86_64\");\n      if (result == 0) {\n        result = 0x3e;\n      }\n      else {\n        result = strcasecmp(machine_type,\"x86-64\");\n        if (result == 0) {\n          result = 0x3e;\n        }\n        else {\n          result = strcasecmp(machine_type,\"none\");\n          if (result != 0) {\n            error_message = dcgettext(0,\"Unknown machine type: %s\\n\",5);\n            error(error_message,machine_type);\n            result = -1;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "get_machine_type_00104d30",
            "entrypoint": "0x00104d30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d30": "get_machine_type_00104d30",
                "iVar1": "result",
                "iVar2": "comparison_result",
                "param_1": "machine_type",
                "strcasecmp": "compare_ignore_case",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104da0": {
            "additional_data": {
                "FUN_001023ce": {
                    "get_unknown_code": 1
                },
                "FUN_00104da0": {
                    "get_file_type": 18,
                    "get_program_type": 1,
                    "get_type": 9,
                    "get_type_code": 2,
                    "get_type_index": 1
                },
                "dcgettext": {
                    "get_error_message": 2,
                    "get_message": 2,
                    "gettext": 1,
                    "localized_error": 1
                },
                "error": {
                    "display_error": 2,
                    "print_error": 2
                },
                "iVar1": {
                    "comp_result": 1,
                    "comparison_result": 1,
                    "index": 1,
                    "result": 25,
                    "type": 1,
                    "type_code": 2
                },
                "iVar2": {
                    "cmp_result": 7,
                    "comp_result": 1,
                    "compare_result": 2,
                    "comparison_result": 15,
                    "comparison_result2": 1,
                    "exec_comparison": 2,
                    "exec_result": 1,
                    "result": 1,
                    "strcmp_result": 1
                },
                "param_1": {
                    "file_type": 16,
                    "program_name": 1,
                    "type": 4,
                    "type_string": 10
                },
                "strcasecmp": {
                    "compare_ignore_case": 1,
                    "compare_strings": 5
                },
                "uVar3": {
                    "err_msg": 1,
                    "error_message": 21,
                    "error_msg": 4,
                    "error_string": 1,
                    "unknown_type_message": 4
                }
            },
            "called": [
                "dcgettext",
                "strcasecmp",
                "FUN_001023ce",
                "error"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nint get_file_type_00104da0(char *file_type)\n\n{\n  int result;\n  int comparison_result;\n  undefined8 error_message;\n  \n  result = strcasecmp(file_type,\"rel\");\n  if (result == 0) {\n    result = 1;\n  }\n  else {\n    comparison_result = strcasecmp(file_type,\"exec\");\n    result = 2;\n    if (comparison_result != 0) {\n      result = strcasecmp(file_type,\"dyn\");\n      if (result == 0) {\n        result = 3;\n      }\n      else {\n        result = strcasecmp(file_type,\"none\");\n        if (result != 0) {\n          error_message = dcgettext(0,\"Unknown type: %s\\n\",5);\n          display_error(error_message,file_type);\n          result = -1;\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "get_file_type_00104da0",
            "entrypoint": "0x00104da0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104da0": "get_file_type_00104da0",
                "dcgettext": "get_message",
                "error": "display_error",
                "iVar1": "result",
                "iVar2": "comparison_result",
                "param_1": "file_type",
                "strcasecmp": "compare_strings",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104de0": {
            "additional_data": {
                "FUN_001024ec": {
                    "cleanup_function": 1,
                    "handle_write_error": 1
                },
                "FUN_00102558": {
                    "handle_read_error": 2
                },
                "FUN_0010347f": {
                    "decode_field2": 1,
                    "process_class2": 1
                },
                "FUN_0010354e": {
                    "decode_field1": 1,
                    "process_class1": 1
                },
                "FUN_00103a90": {
                    "decode_field2_extended2": 1
                },
                "FUN_00103ad0": {
                    "decode_field2_extended": 1,
                    "process_class3": 1
                },
                "FUN_00104de0": {
                    "check_and_update_elf_header": 1,
                    "check_elf_header": 3,
                    "decode_elf_header": 2,
                    "parse_elf_header": 5,
                    "process_elf_file": 1,
                    "process_elf_header": 3,
                    "read_and_validate_elf_header": 1,
                    "read_elf_header": 11,
                    "validate_elf_header": 2
                },
                "__n": {
                    "count": 1,
                    "elements_count": 1
                },
                "__off": {
                    "current_offset": 2,
                    "current_position": 3,
                    "file_offset": 8,
                    "file_position": 1,
                    "offset": 12,
                    "original_file_position": 1,
                    "pos": 1,
                    "position": 2
                },
                "__ptr": {
                    "buffer": 1,
                    "data": 1
                },
                "__s": {
                    "file": 2
                },
                "__size": {
                    "element_size": 2
                },
                "__stream": {
                    "file": 1,
                    "stream": 1
                },
                "__whence": {
                    "origin": 1,
                    "whence": 1
                },
                "abort": {
                    "terminate_program": 1
                },
                "dcgettext": {
                    "get_localized_message": 1
                },
                "error": {
                    "display_error_message": 1
                },
                "fread": {
                    "read_from_file": 1
                },
                "fseek": {
                    "seek_in_file": 1
                },
                "ftell": {
                    "get_current_file_offset": 1
                },
                "fwrite": {
                    "write_to_file": 1
                },
                "iVar1": {
                    "file_seek_result": 1,
                    "fseek_result": 1,
                    "result": 10,
                    "return_code": 1,
                    "return_value": 1,
                    "seek_result": 6,
                    "seek_ret_val": 1,
                    "seek_status": 1,
                    "status": 8
                },
                "param_1": {
                    "error_message": 1,
                    "file_path": 1,
                    "param": 6,
                    "param1": 7,
                    "param_1": 5,
                    "param_elf_file": 2,
                    "param_elf_file_path": 2,
                    "param_elf_path": 1,
                    "param_file": 3,
                    "param_file_name": 1,
                    "param_ptr": 1
                },
                "param_2": {
                    "file": 12,
                    "file_pointer": 2,
                    "file_ptr": 2,
                    "input_file": 1,
                    "param2": 3,
                    "param_2": 2,
                    "param_file": 5,
                    "param_file_pointer": 1,
                    "param_fp": 1,
                    "stream": 1
                },
                "param_3": {
                    "param3": 1,
                    "type": 1,
                    "value16": 1
                },
                "pcVar4": {
                    "err_msg": 1,
                    "err_msg_format": 1,
                    "error_format": 1,
                    "error_message": 23,
                    "error_msg": 3
                },
                "sVar2": {
                    "bytes_read": 9,
                    "num_read": 1,
                    "read_bytes": 3,
                    "read_result": 14,
                    "read_size": 3
                },
                "uVar3": {
                    "result": 6,
                    "return_val": 1,
                    "return_value": 21
                },
                "uVar5": {
                    "abi_version": 1,
                    "class_flag": 1,
                    "class_identifier": 1,
                    "data_type": 1,
                    "ei_class": 1,
                    "input_class": 5,
                    "input_template": 1,
                    "temp1": 1,
                    "temp_val1": 1,
                    "temp_var1": 3,
                    "temp_var_1": 1,
                    "temp_variable1": 1,
                    "u_var5": 2,
                    "value1": 2,
                    "var1": 4,
                    "var_1": 2,
                    "var_5": 1,
                    "variable1": 1
                },
                "uVar6": {
                    "abi_os": 1,
                    "comparison_value": 1,
                    "data_type2": 1,
                    "ei_version": 1,
                    "input_class": 1,
                    "output_class": 6,
                    "temp2": 1,
                    "temp_val2": 1,
                    "temp_var2": 3,
                    "temp_var_2": 1,
                    "temp_variable2": 1,
                    "u_var6": 2,
                    "value2": 2,
                    "var2": 4,
                    "var_2": 2,
                    "var_6": 1,
                    "variable2": 1
                }
            },
            "called": [
                "fwrite",
                "dcgettext",
                "FUN_001024ec",
                "FUN_0010354e",
                "FUN_0010347f",
                "fseek",
                "FUN_00103ad0",
                "fread",
                "FUN_00102434",
                "FUN_00103a90",
                "error",
                "FUN_00102558",
                "abort",
                "ftell"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_0010358d"
            ],
            "code": "\n\n\nundefined8 read_and_validate_elf_header_00104de0(undefined8 param1,FILE *file)\n\n{\n  int result;\n  long offset;\n  size_t read_result;\n  undefined8 return_value;\n  char *error_message;\n  uint input_class;\n  uint output_class;\n  \n  offset = ftell(file);\n  read_result = fread(&DAT_001093e0,0x10,1,file);\n  if ((read_result == 1) && (_DAT_001093e0 == 0x464c457f)) {\n    DAT_001093b8 = FUN_0010354e;\n    if (DAT_001093e5 != '\\x02') {\n      DAT_001093b8 = FUN_00103ad0;\n    }\n    DAT_001093c0 = FUN_0010347f;\n    if (DAT_001093e5 != '\\x02') {\n      DAT_001093c0 = FUN_00103a90;\n    }\n    if ((char)_DAT_001093e4 == '\\x01') {\n      read_result = fread(&DAT_00109390,0x24,1,file);\n      if (read_result != 1) goto code_r0x00102558;\n      DAT_00109418 = (*DAT_001093c0)(&DAT_00109390,2);\n      DAT_0010941a = (*DAT_001093c0)(&DAT_00109392,2);\n      _DAT_00109408 = (*DAT_001093c0)(&DAT_00109394,4);\n      _DAT_001093f0 = (*DAT_001093c0)(&DAT_00109398,4);\n      DAT_001093f8 = (*DAT_001093c0)(&DAT_0010939c,4);\n      _DAT_00109400 = (*DAT_001093c0)(&DAT_001093a0,4);\n      _DAT_00109410 = (*DAT_001093c0)(&DAT_001093a4,4);\n      _DAT_0010941c = (*DAT_001093c0)(&DAT_001093a8,2);\n      _DAT_00109420 = (*DAT_001093c0)(&DAT_001093aa,2);\n      DAT_00109424 = (*DAT_001093c0)(&DAT_001093ac,2);\n      _DAT_00109428 = (*DAT_001093c0)(&DAT_001093ae,2);\n      _DAT_0010942c = (*DAT_001093c0)(&DAT_001093b0,2);\n      _DAT_00109430 = (*DAT_001093c0)(&DAT_001093b2,2);\n      _DAT_00109380 = _DAT_001093e0;\n      uRam0000000000109384 = _DAT_001093e4;\n      _DAT_00109388 = _DAT_001093e8;\n      uRam000000000010938c = uRam00000000001093ec;\n    }\n    else {\n      if ((char)_DAT_001093e4 != '\\x02') {\n        return_value = FUN_00102558();\n        return return_value;\n      }\n      read_result = fread(&DAT_00109350,0x30,1,file);\n      if (read_result != 1) goto code_r0x00102558;\n      DAT_00109418 = (*DAT_001093c0)(&DAT_00109350,2);\n      DAT_0010941a = (*DAT_001093c0)(&DAT_00109352,2);\n      _DAT_00109408 = (*DAT_001093c0)(&DAT_00109354,4);\n      _DAT_001093f0 = (*DAT_001093c0)(&DAT_00109358,8);\n      DAT_001093f8 = (*DAT_001093c0)(&DAT_00109360,8);\n      _DAT_00109400 = (*DAT_001093c0)(&DAT_00109368,8);\n      _DAT_00109410 = (*DAT_001093c0)(&DAT_00109370,4);\n      _DAT_0010941c = (*DAT_001093c0)(&DAT_00109374,2);\n      _DAT_00109420 = (*DAT_001093c0)(&DAT_00109376,2);\n      DAT_00109424 = (*DAT_001093c0)(&DAT_00109378,2);\n      _DAT_00109428 = (*DAT_001093c0)(&DAT_0010937a,2);\n      _DAT_0010942c = (*DAT_001093c0)(&DAT_0010937c,2);\n      _DAT_00109430 = (*DAT_001093c0)(&DAT_0010937e,2);\n      _DAT_00109340 = _DAT_001093e0;\n      uRam0000000000109344 = _DAT_001093e4;\n      _DAT_00109348 = _DAT_001093e8;\n      uRam000000000010934c = uRam00000000001093ec;\n    }\n    result = fseek(file,offset,0);\n    if (result != 0) {\n      return_value = dcgettext(0,\"%s: Failed to seek to ELF header\\n\",5);\n      display_error_message(return_value,param1);\n    }\n    input_class = _DAT_001093e4 >> 0x10 & 0xff;\n    if ((char)input_class == '\\x01') {\n      input_class = (uint)DAT_0010941a;\n      if (input_class == DAT_0010916c) {\n        return 0;\n      }\n      output_class = _DAT_001093e4 & 0xff;\n      if (DAT_00109170 == 0xffffffff) {\n        if (DAT_0010941a == 6) {\n          DAT_00109170 = 1;\n        }\n        else if (DAT_0010941a < 7) {\n          DAT_00109170 = (DAT_0010941a != 3) + 1 + (uint)(DAT_0010941a != 3);\n        }\n        else {\n          DAT_00109170 = 3 - ((ushort)(DAT_0010941a - 0xb4) < 2);\n        }\n      }\n      if ((output_class == DAT_00109170) || (DAT_00109170 == 3)) {\n        if ((output_class == DAT_00109168) || (DAT_00109168 == 3)) {\n          if ((input_class == DAT_00109174) || (DAT_00109174 == 0xffffffff)) {\n            input_class = (uint)DAT_00109418;\n            if ((DAT_00109164 == 0xffffffff) || (input_class == DAT_00109164)) {\n              input_class = _DAT_001093e4 >> 0x18;\n              if ((DAT_0010915c == 0xffffffff) || (input_class == DAT_0010915c)) {\n                input_class = _DAT_001093e8 & 0xff;\n                if ((input_class == DAT_00109154) || (DAT_00109154 == 0xffffffff)) {\n                  if ((char)output_class == '\\x01') {\n                    if (DAT_0010916c != 0xffffffff) {\n                      (*DAT_001093b8)(&DAT_00109392,(long)(int)DAT_0010916c,2);\n                    }\n                    if (DAT_00109160 != -1) {\n                      (*DAT_001093b8)(&DAT_00109390,(long)DAT_00109160,2);\n                    }\n                    if (DAT_00109158 != -1) {\n                      uRam0000000000109384 =\n                           CONCAT13((char)DAT_00109158,(undefined3)uRam0000000000109384);\n                    }\n                    if (DAT_00109150 != -1) {\n                      _DAT_00109388 = CONCAT31(DAT_00109388_1,(char)DAT_00109150);\n                    }\n                    read_result = fwrite(&DAT_00109380,0x34,1,file);\n                    if (read_result == 1) {\n                      return 0;\n                    }\n                    return_value = FUN_001024ec();\n                    return return_value;\n                  }\n                  if ((char)output_class != '\\x02') {\n                    \n                    abort();\n                  }\n                  if (DAT_0010916c != 0xffffffff) {\n                    (*DAT_001093b8)(&DAT_00109352,(long)(int)DAT_0010916c,2);\n                  }\n                  if (DAT_00109160 != -1) {\n                    (*DAT_001093b8)(&DAT_00109350,(long)DAT_00109160,2);\n                  }\n                  if (DAT_00109158 != -1) {\n                    uRam0000000000109344 =\n                         CONCAT13((char)DAT_00109158,(undefined3)uRam0000000000109344);\n                  }\n                  if (DAT_00109150 != -1) {\n                    _DAT_00109348 = CONCAT31(DAT_00109348_1,(char)DAT_00109150);\n                  }\n                  read_result = fwrite(&DAT_00109340,0x40,1,file);\n                  if (read_result == 1) {\n                    return 0;\n                  }\n                  return_value = FUN_001024ec();\n                  return return_value;\n                }\n                error_message = \"%s: Unmatched EI_ABIVERSION: %d is not %d\\n\";\n                output_class = DAT_00109154;\n              }\n              else {\n                error_message = \"%s: Unmatched EI_OSABI: %d is not %d\\n\";\n                output_class = DAT_0010915c;\n              }\n            }\n            else {\n              error_message = \"%s: Unmatched e_type: %d is not %d\\n\";\n              output_class = DAT_00109164;\n            }\n          }\n          else {\n            error_message = \"%s: Unmatched e_machine: %d is not %d\\n\";\n            output_class = DAT_00109174;\n          }\n          return_value = dcgettext(0,error_message,5);\n          display_error_message(return_value,param1,input_class,output_class);\n          return 1;\n        }\n        error_message = \"%s: Unmatched output EI_CLASS: %d is not %d\\n\";\n        input_class = DAT_00109168;\n      }\n      else {\n        error_message = \"%s: Unmatched input EI_CLASS: %d is not %d\\n\";\n        input_class = DAT_00109170;\n      }\n      return_value = dcgettext(0,error_message,5);\n      display_error_message(return_value,param1,output_class,input_class);\n    }\n    else {\n      return_value = dcgettext(0,\"%s: Unsupported EI_VERSION: %d is not %d\\n\",5);\n      display_error_message(return_value,param1,input_class,1);\n    }\n  }\n  else {\ncode_r0x00102558:\n    return_value = dcgettext(0,\"%s: Failed to read ELF header\\n\",5);\n    display_error_message(return_value,param1);\n  }\n  return 1;\n}\n\n",
            "current_name": "read_and_validate_elf_header_00104de0",
            "entrypoint": "0x00104de0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104de0": "read_and_validate_elf_header_00104de0",
                "__off": "offset",
                "abort": "terminate_program",
                "dcgettext": "get_localized_message",
                "error": "display_error_message",
                "fread": "read_from_file",
                "fseek": "seek_in_file",
                "ftell": "get_current_file_offset",
                "fwrite": "write_to_file",
                "iVar1": "result",
                "param_1": "param1",
                "param_2": "file",
                "pcVar4": "error_message",
                "sVar2": "read_result",
                "uVar3": "return_value",
                "uVar5": "input_class",
                "uVar6": "output_class"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105370": {
            "additional_data": {
                "FUN_00102cbc": {
                    "allocate_memory": 1,
                    "concat_strings": 1
                },
                "FUN_00105370": {
                    "allocate_and_copy_path": 1,
                    "extract_archive_name": 1,
                    "extract_file_from_path": 1,
                    "extract_file_name": 10,
                    "extract_file_name_from_path": 1,
                    "extract_file_path": 1,
                    "extract_filename": 2,
                    "extract_filename_from_path": 1,
                    "parse_file_path": 1,
                    "parse_path": 5
                },
                "__size": {
                    "allocated_size": 2,
                    "buffer_size": 2,
                    "file_name_and_contents_length": 1,
                    "file_size": 1,
                    "final_string_length": 1,
                    "malloc_size": 1,
                    "new_file_name_size": 3,
                    "new_path_size": 2,
                    "new_size": 2,
                    "output_file_name_length_plus_one": 1,
                    "output_size": 1,
                    "output_string_size": 1,
                    "path_size": 1,
                    "required_size": 1,
                    "size": 5,
                    "string_size": 2,
                    "total_length": 2,
                    "total_size": 1
                },
                "bVar9": {
                    "boolean_flag": 1,
                    "byte_value": 2,
                    "flag": 8,
                    "increment": 2,
                    "increment_value": 1,
                    "is_directory": 1,
                    "is_first_delimiter_char": 1,
                    "is_forward_slash": 1,
                    "is_negative": 8,
                    "is_negative_offset": 1,
                    "is_reverse": 1,
                    "is_slash": 1,
                    "is_slash_present": 1,
                    "modifier": 1,
                    "toggle": 1
                },
                "cVar2": {
                    "character": 1,
                    "current_char": 16,
                    "current_character": 1
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "error": {
                    "print_error_message": 1
                },
                "extraout_RDX": {
                    "file_data_length": 1,
                    "file_name_length": 4,
                    "file_name_size": 1,
                    "file_size": 1,
                    "filename_length2": 1,
                    "input_string_size": 1,
                    "length_of_output_file_path": 1,
                    "output_file_name_length": 1,
                    "output_path_length": 1,
                    "path_size": 1,
                    "separator_length": 1
                },
                "lVar1": {
                    "combined_length": 1,
                    "diff_size": 1,
                    "full_length": 1,
                    "length": 3,
                    "modified_length": 1,
                    "output_length": 1,
                    "output_string_length": 1,
                    "path_length": 1,
                    "total_file_name_length": 1,
                    "total_length": 4,
                    "total_size": 12,
                    "total_substring_size": 1
                },
                "malloc": {
                    "allocate_memory": 2
                },
                "param_1": {
                    "directory_path": 1,
                    "file_path": 6,
                    "input_file_path": 2,
                    "input_path": 5,
                    "input_string": 11,
                    "input_string1": 1,
                    "original_path": 1,
                    "path": 4
                },
                "param_2": {
                    "delimiter": 4,
                    "file_contents": 1,
                    "file_data": 1,
                    "file_extension": 1,
                    "file_name": 7,
                    "file_path": 5,
                    "filename": 3,
                    "input_string2": 1,
                    "output_file_path": 2,
                    "output_path": 1,
                    "output_string": 1,
                    "search_string": 1,
                    "separator": 2,
                    "separator_string": 1
                },
                "pcVar4": {
                    "file_name": 2,
                    "file_path": 1,
                    "filename": 1,
                    "filename_start": 2,
                    "last_occurrence": 1,
                    "last_separator": 2,
                    "last_slash": 11,
                    "last_slash_position": 2,
                    "new_file_name": 1,
                    "output_path": 1,
                    "parsed_path": 1,
                    "result_string": 1,
                    "slash_position": 1,
                    "substring": 1,
                    "substring_start": 1,
                    "temp_path": 1
                },
                "pcVar5": {
                    "allocated_string": 1,
                    "buffer": 1,
                    "buffer_size": 1,
                    "default_output_file_path": 1,
                    "dir_name_length": 1,
                    "dynamic_size": 3,
                    "file_name": 1,
                    "file_name_length": 3,
                    "file_name_size": 1,
                    "filename_end": 1,
                    "filename_length": 1,
                    "input_copy": 1,
                    "input_file_name": 1,
                    "input_length": 1,
                    "input_path_pointer": 1,
                    "malloc_size": 1,
                    "original_size": 1,
                    "path_length": 4,
                    "ptr_to_input": 1,
                    "string_length": 2,
                    "temp_file_name": 1,
                    "temp_path_size": 1,
                    "temp_ptr": 1
                },
                "pcVar6": {
                    "allocated_dir_path": 1,
                    "allocated_output_file_path": 1,
                    "allocated_path": 1,
                    "current_position": 2,
                    "dynamic_path": 1,
                    "extracted_filename": 1,
                    "file_name": 1,
                    "file_name_copy": 1,
                    "filename": 1,
                    "new_file_name": 3,
                    "new_path": 3,
                    "new_string": 1,
                    "output_file_name": 1,
                    "output_name": 1,
                    "output_path_pointer": 1,
                    "output_string": 3,
                    "path_copy": 1,
                    "ptr": 1,
                    "ptr_to_result": 1,
                    "result": 3,
                    "substring_end": 1,
                    "temp_string": 1
                },
                "uVar3": {
                    "err_msg": 3,
                    "error_message": 14,
                    "error_msg": 2,
                    "error_string": 2,
                    "error_text": 1,
                    "msg": 1
                },
                "uVar7": {
                    "copy_length": 1,
                    "copy_size": 1,
                    "count": 1,
                    "extension_length": 1,
                    "file_contents_length": 1,
                    "file_data_length_remaining": 1,
                    "file_name_length": 2,
                    "file_name_size": 1,
                    "filename_length": 1,
                    "filename_size": 1,
                    "i": 2,
                    "index": 1,
                    "input_file_name_length": 1,
                    "input_length": 1,
                    "input_length_remaining": 1,
                    "length_remaining": 1,
                    "loop_counter": 1,
                    "remaining_chars": 2,
                    "remaining_length": 3,
                    "remaining_size": 6,
                    "string_length": 1
                },
                "uVar8": {
                    "delimiter_offset": 1,
                    "dir_name_length_diff": 1,
                    "file_name_diff": 1,
                    "file_name_length": 5,
                    "file_name_offset": 1,
                    "file_name_part_size": 1,
                    "file_path_length": 3,
                    "filename_size": 1,
                    "input_filename_size": 1,
                    "input_string_remaining": 1,
                    "length_of_file_path": 1,
                    "new_file_name_size": 1,
                    "num_chars_after_last_slash": 1,
                    "original_string_length": 1,
                    "path_length": 2,
                    "path_size": 2,
                    "path_without_extension_length": 1,
                    "remaining_count": 1,
                    "remaining_path_length": 1,
                    "substring_length": 2,
                    "substring_size": 2
                }
            },
            "called": [
                "FUN_00102cbc",
                "malloc"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_00103006",
                "FUN_00103160",
                "FUN_00103186"
            ],
            "code": "\nchar * extract_file_name_from_path_00105370(char *input_string,char *file_name)\n\n{\n  ulong size;\n  long total_size;\n  char current_char;\n  undefined8 error_message;\n  char *last_slash;\n  char *path_length;\n  char *result;\n  ulong remaining_size;\n  ulong file_name_length;\n  ulong file_name_length;\n  byte flag;\n  \n  flag = 0;\n  path_length = (char *)0x1;\n  if (input_string != (char *)0x0) {\n    path_length = input_string;\n  }\n  result = (char *)malloc((size_t)path_length);\n  if (result != (char *)0x0) {\n    return result;\n  }\n  FUN_00102fc7();\n  result = path_length;\n  last_slash = path_length;\n  while (current_char = *result, current_char != '\\0') {\n    result = result + 1;\n    if (current_char == '/') {\n      last_slash = result;\n    }\n  }\n  if ((*file_name == '/') || (path_length == last_slash)) {\n    if (file_name_length + 1 == 0) {\n      return (char *)0x0;\n    }\n    result = (char *)malloc(file_name_length + 1);\n    remaining_size = file_name_length;\n    path_length = result;\n    if (result != (char *)0x0) {\n      for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n        *path_length = *file_name;\n        file_name = file_name + (ulong)flag * -2 + 1;\n        path_length = path_length + (ulong)flag * -2 + 1;\n      }\n      result[file_name_length] = '\\0';\n      return result;\n    }\n  }\n  else {\n    file_name_length = (long)last_slash - (long)path_length;\n    total_size = file_name_length + file_name_length;\n    remaining_size = file_name_length;\n    if (file_name_length <= file_name_length) {\n      remaining_size = file_name_length;\n    }\n    size = total_size + 1;\n    if (size < remaining_size) {\n      error_message = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      print_error_message(error_message,file_name_length);\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(size);\n    result = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_size = file_name_length, file_name_length != 0; file_name_length = file_name_length - 1) {\n        *result = *path_length;\n        path_length = path_length + (ulong)flag * -2 + 1;\n        result = result + (ulong)flag * -2 + 1;\n      }\n      for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n        *result = *file_name;\n        file_name = file_name + (ulong)flag * -2 + 1;\n        result = result + (ulong)flag * -2 + 1;\n      }\n      last_slash[total_size] = '\\0';\n      return last_slash;\n    }\n  }\n  error_message = dcgettext(0,\"Out of memory\\n\",5);\n  print_error_message(error_message);\n  return (char *)0x0;\n}\n\n",
            "current_name": "extract_file_name_from_path_00105370",
            "entrypoint": "0x00105370",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105370": "extract_file_name_from_path_00105370",
                "__size": "size",
                "bVar9": "flag",
                "cVar2": "current_char",
                "dcgettext": "get_error_message",
                "error": "print_error_message",
                "extraout_RDX": "file_name_length",
                "lVar1": "total_size",
                "malloc": "allocate_memory",
                "param_1": "input_string",
                "param_2": "file_name",
                "pcVar4": "last_slash",
                "pcVar5": "path_length",
                "pcVar6": "result",
                "uVar3": "error_message",
                "uVar7": "remaining_size",
                "uVar8": "file_name_length"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x00105394",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "__cxa_finalize",
                "FUN_00103b30"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_00109320 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00109148);\n  FUNC_00103b30();\n  DAT_00109320 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x00103ba0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00103b60"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00103b60();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x00103be0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_001024ec"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "abort": {
            "called": [
                "abort"
            ],
            "calling": [
                "caseD_0",
                "FUN_00102c98",
                "FUN_0010354e",
                "FUN_0010347f",
                "FUN_00104de0"
            ],
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "current_name": "abort",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "caseD_0": {
            "called": [
                "dcgettext",
                "abort",
                "error"
            ],
            "calling": [
                "FUN_00103a90"
            ],
            "code": "\nvoid switchD_00103aac::caseD_0(void)\n\n{\n  undefined8 uVar1;\n  undefined4 unaff_EBX;\n  \n  uVar1 = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(uVar1,unaff_EBX);\n                    \n  abort();\n}\n\n",
            "current_name": "caseD_0",
            "entrypoint": "0x0010289a",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "caseD_3": {
            "called": [
                "FUN_00103ab3"
            ],
            "calling": [
                "FUN_00103a90"
            ],
            "code": "\nvoid switchD_00103aac::caseD_3(long param_1,undefined8 param_2)\n\n{\n  FUNC_00103ab3(param_1,param_2,\n               (ulong)*(byte *)(param_1 + 1) << 8 | (ulong)*(byte *)(param_1 + 2) << 0x10);\n  return;\n}\n\n",
            "current_name": "caseD_3",
            "entrypoint": "0x00102825",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_001032de",
                "FUN_001022c0",
                "FUN_001029a5",
                "FUN_00103bf0",
                "caseD_0",
                "warn",
                "FUN_001024ec",
                "FUN_0010354e",
                "FUN_0010347f",
                "FUN_00104da0",
                "FUN_00102434",
                "error",
                "FUN_0010234b",
                "FUN_00102323",
                "FUN_00102558",
                "FUN_0010358d",
                "FUN_001028be",
                "FUN_00102cc4",
                "FUN_00102c98",
                "FUN_001025ab",
                "FUN_00104de0"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "__libc_start_main",
                "FUN_00103bf0"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00103bf0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00103b00",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "error": {
            "called": [
                "fflush",
                "dcgettext",
                "vfprintf",
                "fprintf"
            ],
            "calling": [
                "FUN_001022c0",
                "FUN_001029a5",
                "FUN_00103bf0",
                "caseD_0",
                "FUN_001024ec",
                "FUN_0010354e",
                "FUN_0010347f",
                "FUN_00104da0",
                "FUN_00102434",
                "FUN_0010234b",
                "FUN_00102323",
                "FUN_00102558",
                "FUN_0010358d",
                "FUN_001028be",
                "FUN_00102cc4",
                "FUN_00102c98",
                "FUN_001025ab",
                "FUN_00104de0"
            ],
            "code": "\n\n\nvoid error(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n          undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,char *param_9,\n          undefined8 param_10,undefined8 param_11,undefined8 param_12,undefined8 param_13,\n          undefined8 param_14)\n\n{\n  char in_AL;\n  char *__format;\n  undefined4 local_e0;\n  undefined4 local_dc;\n  undefined *local_d8;\n  undefined *local_d0;\n  undefined local_c8 [8];\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  \n  if (in_AL != '\\0') {\n    local_98 = param_1;\n    local_88 = param_2;\n    local_78 = param_3;\n    local_68 = param_4;\n    local_58 = param_5;\n    local_48 = param_6;\n    local_38 = param_7;\n    local_28 = param_8;\n  }\n  local_c0 = param_10;\n  local_b8 = param_11;\n  local_b0 = param_12;\n  local_a8 = param_13;\n  local_a0 = param_14;\n  fflush(_stdout);\n  local_d8 = &stack0x00000008;\n  local_d0 = local_c8;\n  local_e0 = 8;\n  local_dc = 0x30;\n  __format = (char *)dcgettext(0,\"%s: Error: \",5);\n  fprintf(_stderr,__format,\"elfedit\");\n  vfprintf(_stderr,param_9,&local_e0);\n  return;\n}\n\n",
            "current_name": "error",
            "entrypoint": "0x00102e85",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_001032de",
                "FUN_00103bf0",
                "FUN_00102fbc"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_0010358d"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "warn",
                "error"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fileno": {
            "called": [
                "fileno"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_0010358d"
            ],
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fileno",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_0010358d"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_001032de",
                "FUN_00103bf0",
                "warn",
                "FUN_00102fc7",
                "error"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_0010358d",
                "FUN_001028be",
                "FUN_001025ab",
                "FUN_00104de0"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_001032de",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_00103006",
                "FUN_0010358d",
                "FUN_001025ab",
                "FUN_00102f65"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_0010358d",
                "FUN_001028be",
                "FUN_001025ab",
                "FUN_00104de0"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fstat": {
            "called": [
                "fstat"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_0010358d"
            ],
            "code": "\n\n\nint fstat(int __fd,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = fstat(__fd,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "fstat",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_00104de0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getc": {
            "called": [
                "getc"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "getc",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "malloc": {
            "called": [
                "malloc"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_00102cc4",
                "FUN_00103449",
                "FUN_001025ab",
                "FUN_00105370"
            ],
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "current_name": "malloc",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mmap": {
            "called": [
                "mmap"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid * mmap(void *__addr,size_t __len,int __prot,int __flags,int __fd,__off_t __offset)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = mmap(__addr,__len,__prot,__flags,__fd,__offset);\n  return pvVar1;\n}\n\n",
            "current_name": "mmap",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "munmap": {
            "called": [
                "munmap"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint munmap(void *__addr,size_t __len)\n\n{\n  int iVar1;\n  \n  iVar1 = munmap(__addr,__len);\n  return iVar1;\n}\n\n",
            "current_name": "munmap",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "realloc": {
            "called": [
                "realloc"
            ],
            "calling": [
                "FUN_00103449"
            ],
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "current_name": "realloc",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "rewind": {
            "called": [
                "rewind"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid rewind(FILE *__stream)\n\n{\n  rewind(__stream);\n  return;\n}\n\n",
            "current_name": "rewind",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "sbrk": {
            "called": [
                "sbrk"
            ],
            "calling": [
                "FUN_00102fc7"
            ],
            "code": "\n\n\nvoid * sbrk(intptr_t __delta)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = sbrk(__delta);\n  return pvVar1;\n}\n\n",
            "current_name": "sbrk",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "snprintf": {
            "called": [
                "snprintf"
            ],
            "calling": [
                "FUN_0010358d"
            ],
            "code": "\n\n\nint snprintf(char *__s,size_t __maxlen,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = snprintf(__s,__maxlen,__format);\n  return iVar1;\n}\n\n",
            "current_name": "snprintf",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcasecmp": {
            "called": [
                "strcasecmp"
            ],
            "calling": [
                "FUN_0010234b",
                "FUN_00104ce0",
                "FUN_001022c0",
                "FUN_00104c60",
                "FUN_00104da0",
                "FUN_00104d30"
            ],
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcasecmp",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strdup": {
            "called": [
                "strdup"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "current_name": "strdup",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_001024ec"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_001027fd",
                "FUN_00103006",
                "FUN_0010358d",
                "FUN_00103160",
                "FUN_00103186"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncmp": {
            "called": [
                "strncmp"
            ],
            "calling": [
                "FUN_001027fd"
            ],
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "strncmp",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtoul": {
            "called": [
                "strtoul"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_0010358d",
                "FUN_001028be",
                "FUN_001025ab"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "strtoul",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "warn",
                "error"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "warn": {
            "called": [
                "fflush",
                "dcgettext",
                "vfprintf",
                "fprintf"
            ],
            "calling": [],
            "code": "\n\n\nvoid warn(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n         undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,char *param_9,\n         undefined8 param_10,undefined8 param_11,undefined8 param_12,undefined8 param_13,\n         undefined8 param_14)\n\n{\n  char in_AL;\n  char *__format;\n  undefined4 local_e0;\n  undefined4 local_dc;\n  undefined *local_d8;\n  undefined *local_d0;\n  undefined local_c8 [8];\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  \n  if (in_AL != '\\0') {\n    local_98 = param_1;\n    local_88 = param_2;\n    local_78 = param_3;\n    local_68 = param_4;\n    local_58 = param_5;\n    local_48 = param_6;\n    local_38 = param_7;\n    local_28 = param_8;\n  }\n  local_c0 = param_10;\n  local_b8 = param_11;\n  local_b0 = param_12;\n  local_a8 = param_13;\n  local_a0 = param_14;\n  fflush(_stdout);\n  local_d8 = &stack0x00000008;\n  local_d0 = local_c8;\n  local_e0 = 8;\n  local_dc = 0x30;\n  __format = (char *)dcgettext(0,\"%s: Warning: \",5);\n  fprintf(_stderr,__format,\"elfedit\");\n  vfprintf(_stderr,param_9,&local_e0);\n  return;\n}\n\n",
            "current_name": "warn",
            "entrypoint": "0x00102da5",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102020",
            "FUN_001022c0",
            "FUN_00102323",
            "FUN_0010234b",
            "FUN_001023ce",
            "FUN_00102434",
            "FUN_001024ec",
            "FUN_00102558",
            "FUN_001025ab",
            "FUN_001027fd",
            "FUN_001028be",
            "FUN_001029a5",
            "FUN_00102c98",
            "FUN_00102cbc",
            "FUN_00102cc4",
            "FUN_00102f65",
            "FUN_00102fa0",
            "FUN_00102fbc",
            "FUN_00102fc7",
            "FUN_00103006",
            "FUN_00103160",
            "FUN_00103186",
            "FUN_001032de",
            "FUN_00103449",
            "FUN_0010347f",
            "FUN_0010354e",
            "FUN_0010358d",
            "FUN_00103a90",
            "FUN_00103ad0",
            "FUN_00103bf0",
            "FUN_00104c60",
            "FUN_00104ce0",
            "FUN_00104d30",
            "FUN_00104da0",
            "FUN_00104de0",
            "FUN_00105370"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 199926
}