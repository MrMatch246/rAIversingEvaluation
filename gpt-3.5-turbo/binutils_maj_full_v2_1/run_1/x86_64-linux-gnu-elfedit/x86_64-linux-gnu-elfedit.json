{
    "functions": {
        "FUN_00102020": {
            "additional_data": {
                "FUN_00102020": {
                    "call_indirect_jump": 2,
                    "execute_external_function": 1,
                    "execute_function": 4,
                    "execute_indirect_call": 8,
                    "execute_indirect_function": 1,
                    "execute_indirect_function_call": 1,
                    "execute_indirect_jump": 13
                },
                "PTR_0": {
                    "function_ptr": 1,
                    "jump_function_pointer": 1
                },
                "PTR_00102020": {
                    "indirect_function_pointer": 1
                },
                "PTR_undefined": {
                    "target_address": 1
                },
                "code": {
                    "function_pointer": 1,
                    "indirect_call": 2,
                    "indirect_function": 1,
                    "indirect_jump_function": 1,
                    "jump_function": 1
                },
                "undefined": {
                    "address": 1,
                    "func_ptr": 1,
                    "function_pointer": 3,
                    "indirect_address": 1,
                    "jump_target_address": 1,
                    "ptr_to_function": 1,
                    "target_address": 2
                },
                "unk_00102020": {
                    "indirect_function_pointer": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_function_call_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(indirect_call *)(function_pointer *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_function_call_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_function_call_00102020",
                "code": "indirect_call",
                "undefined": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001022c0": {
            "additional_data": {
                "FUN_001022c0": {
                    "check_and_update_x86_features": 1,
                    "check_x86_feature": 1,
                    "process_x86_feature": 1,
                    "update_feature_flags": 2,
                    "update_feature_status": 2,
                    "update_x86_feature": 16,
                    "update_x86_feature_flags": 1,
                    "update_x86_features": 7
                },
                "auVar4": {
                    "result": 8,
                    "return_value": 15
                },
                "iVar1": {
                    "compare_result": 1,
                    "comparison_result": 17,
                    "strcasecmp_result": 11,
                    "strcmp_result": 2
                },
                "uVar2": {
                    "bit_mask": 1,
                    "bitmask": 2,
                    "feature_bit": 1,
                    "feature_bitmask": 2,
                    "feature_mask": 11,
                    "feature_value": 11,
                    "flag": 2,
                    "x86_feature_value": 1
                },
                "uVar3": {
                    "error_message": 28,
                    "error_msg": 1,
                    "error_msg_ptr": 1,
                    "error_string": 1
                },
                "unaff_EBP": {
                    "flag": 3,
                    "is_active": 1,
                    "is_add": 1,
                    "is_adding": 1,
                    "is_addition": 1,
                    "is_disable": 1,
                    "is_disabled": 2,
                    "is_enable": 1,
                    "is_enabled": 11,
                    "is_set": 4,
                    "is_zero": 1,
                    "mode": 1,
                    "reverse_flag": 1,
                    "update_enabled": 1,
                    "update_flag": 1
                },
                "unaff_RBX": {
                    "feature": 11,
                    "feature_name": 14,
                    "x86_feature": 5,
                    "x86_feature_string": 1
                },
                "unaff_retaddr": {
                    "return_address": 11
                }
            },
            "called": [
                "dcgettext",
                "error",
                "strcasecmp"
            ],
            "calling": [
                "FUN_00104c60"
            ],
            "code": "\nundefined  [16] update_x86_feature_flags_001022c0(void)\n\n{\n  int comparison_result;\n  uint feature_value;\n  undefined8 error_message;\n  char *feature_name;\n  int is_enabled;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  comparison_result = strcasecmp(feature_name,\"lam_u48\");\n  if (comparison_result == 0) {\n    feature_value = 4;\n  }\n  else {\n    comparison_result = strcasecmp(feature_name,\"lam_u57\");\n    feature_value = 8;\n    if (comparison_result != 0) {\n      error_message = dcgettext(0,\"Unknown x86 feature: %s\\n\",5);\n      error(error_message);\n      error_message = 0xffffffff;\n      goto LAB_00104ca5;\n    }\n  }\n  if (is_enabled == 0) {\n    DAT_00109440 = feature_value | DAT_00109440;\n    DAT_00109444 = ~feature_value & DAT_00109444;\n  }\n  else {\n    DAT_00109444 = feature_value | DAT_00109444;\n    DAT_00109440 = DAT_00109440 & ~feature_value;\n  }\n  error_message = 0;\nLAB_00104ca5:\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "update_x86_feature_flags_001022c0",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001022c0": "update_x86_feature_flags_001022c0",
                "auVar4": "return_value",
                "iVar1": "comparison_result",
                "uVar2": "feature_value",
                "uVar3": "error_message",
                "unaff_EBP": "is_enabled",
                "unaff_RBX": "feature_name",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102323": {
            "additional_data": {
                "FUN_00102323": {
                    "find_unknown_osabi": 1,
                    "handle_unknown_osabi": 1,
                    "print_unknown_os": 2,
                    "print_unknown_osabi": 4,
                    "print_unknown_osabi_error": 18,
                    "print_unknown_osabi_error_message": 5
                },
                "auVar2": {
                    "result": 2,
                    "return_address_and_status": 1,
                    "return_data": 3,
                    "return_struct": 1,
                    "return_value": 12,
                    "return_values": 1
                },
                "uVar1": {
                    "error_message": 17,
                    "error_string": 3
                },
                "unaff_retaddr": {
                    "return_address": 21,
                    "unknown_return_address": 1
                }
            },
            "called": [
                "dcgettext",
                "error"
            ],
            "calling": [
                "FUN_00104ce0"
            ],
            "code": "\nundefined  [16] print_unknown_osabi_error_message_00102323(void)\n\n{\n  undefined8 error_message;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"Unknown OSABI: %s\\n\",5);\n  error(error_message);\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = 0xffffffff;\n  return return_value;\n}\n\n",
            "current_name": "print_unknown_osabi_error_message_00102323",
            "entrypoint": "0x00102323",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102323": "print_unknown_osabi_error_message_00102323",
                "auVar2": "return_value",
                "uVar1": "error_message",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010234b": {
            "additional_data": {
                "FUN_0010234b": {
                    "check_machine_type": 1,
                    "determine_machine_type": 1,
                    "get_machine_type": 27,
                    "identify_machine_type": 1
                },
                "F_UNK_MACHINE_TYPE": {
                    "get_machine_type": 1
                },
                "iVar1": {
                    "comparison_result": 2,
                    "result": 27
                },
                "uVar2": {
                    "err_msg": 1,
                    "error_message": 18,
                    "error_msg": 6,
                    "error_string": 3,
                    "unknown_machine_type": 1
                },
                "unaff_RBX": {
                    "machine_type": 30,
                    "target_machine": 1
                }
            },
            "called": [
                "dcgettext",
                "error",
                "strcasecmp"
            ],
            "calling": [
                "FUN_00104d30"
            ],
            "code": "\nint get_machine_type_0010234b(void)\n\n{\n  int result;\n  undefined8 error_message;\n  char *machine_type;\n  \n  result = strcasecmp(machine_type,\"x86_64\");\n  if (result == 0) {\n    result = 0x3e;\n  }\n  else {\n    result = strcasecmp(machine_type,\"x86-64\");\n    if (result == 0) {\n      result = 0x3e;\n    }\n    else {\n      result = strcasecmp(machine_type,\"none\");\n      if (result != 0) {\n        error_message = dcgettext(0,\"Unknown machine type: %s\\n\",5);\n        error(error_message);\n        result = -1;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "get_machine_type_0010234b",
            "entrypoint": "0x0010234b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010234b": "get_machine_type_0010234b",
                "iVar1": "result",
                "uVar2": "error_message",
                "unaff_RBX": "machine_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001023ce": {
            "additional_data": {
                "DAT_": {
                    "": 1
                },
                "FUN_001023ce": {
                    "calculate_return_value": 1,
                    "check_success": 1,
                    "get_default_value": 1,
                    "get_one": 7,
                    "get_result": 1,
                    "get_return_code": 1,
                    "get_return_value": 4,
                    "get_status": 3,
                    "initialize": 7,
                    "initialize_flag": 2,
                    "initialize_return_value": 1,
                    "initialize_value": 1,
                    "is_true": 1
                },
                "PTR_": {
                    "": 1
                },
                "RET": {
                    "result": 1
                },
                "ret": {
                    "result": 1
                },
                "return": {
                    "result": 12,
                    "status": 3
                },
                "undefined8": {
                    "bool": 2,
                    "int": 4,
                    "uint64_t": 2,
                    "unsigned_long": 1,
                    "void": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_00104da0"
            ],
            "code": "\nint initialize_flag_001023ce(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "initialize_flag_001023ce",
            "entrypoint": "0x001023ce",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001023ce": "initialize_flag_001023ce",
                "ret": "result",
                "return": "result",
                "undefined8": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102434": {
            "additional_data": {
                "FUN_00102434": {
                    "update_elf_header": 30,
                    "update_elf_header_information": 1
                },
                "abort": {
                    "terminate_execution": 1
                },
                "dcgettext": {
                    "get_localized_message": 1,
                    "translate": 1
                },
                "error": {
                    "print_error_message": 1,
                    "report_error": 1
                },
                "pcVar3": {
                    "error_format": 6,
                    "error_format_string": 2,
                    "error_message": 19,
                    "error_message_format": 3,
                    "format_string": 1
                },
                "sVar2": {
                    "bytes_written": 5,
                    "result": 3,
                    "write_result": 21,
                    "write_status": 2
                },
                "uVar1": {
                    "error_code": 2,
                    "error_message": 12,
                    "error_result": 1,
                    "error_string": 1,
                    "message": 5,
                    "result": 1
                },
                "unaff_RBX": {
                    "file": 25,
                    "file_pointer": 1,
                    "file_ptr": 2,
                    "file_stream": 1,
                    "output_file": 2
                }
            },
            "called": [
                "dcgettext",
                "error"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nundefined8 update_elf_header_information_00102434(void)\n\n{\n  undefined8 error_message;\n  size_t write_result;\n  FILE *file;\n  char *error_message;\n  \n  error_message = dcgettext(0,\"%s: Failed to seek to ELF header\\n\",5);\n  print_error_message(error_message);\n  if (DAT_001093e6 == '\\x01') {\n    if (DAT_0010941a == DAT_0010916c) {\n      return 0;\n    }\n    if (DAT_00109170 == 0xffffffff) {\n      if (DAT_0010941a == 6) {\n        DAT_00109170 = 1;\n      }\n      else if (DAT_0010941a < 7) {\n        DAT_00109170 = (DAT_0010941a != 3) + 1 + (uint)(DAT_0010941a != 3);\n      }\n      else {\n        DAT_00109170 = 3 - ((ushort)(DAT_0010941a - 0xb4) < 2);\n      }\n    }\n    if ((DAT_001093e4 == DAT_00109170) || (DAT_00109170 == 3)) {\n      if ((DAT_001093e4 == DAT_00109168) || (DAT_00109168 == 3)) {\n        if ((DAT_0010941a == DAT_00109174) || (DAT_00109174 == 0xffffffff)) {\n          if ((DAT_00109164 == 0xffffffff) || (DAT_00109418 == DAT_00109164)) {\n            if ((DAT_0010915c == 0xffffffff) || (DAT_001093e7 == DAT_0010915c)) {\n              if ((DAT_001093e8 == DAT_00109154) || (DAT_00109154 == 0xffffffff)) {\n                if (DAT_001093e4 == 1) {\n                  if (DAT_0010916c != 0xffffffff) {\n                    (*DAT_001093b8)(&DAT_00109392,(long)(int)DAT_0010916c,2);\n                  }\n                  if (DAT_00109160 != -1) {\n                    (*DAT_001093b8)(&DAT_00109390,(long)DAT_00109160,2);\n                  }\n                  if (DAT_00109158 != -1) {\n                    DAT_00109387 = (undefined)DAT_00109158;\n                  }\n                  if (DAT_00109150 != -1) {\n                    DAT_00109388 = (undefined)DAT_00109150;\n                  }\n                  write_result = fwrite(&DAT_00109380,0x34,1,file);\n                  if (write_result == 1) {\n                    return 0;\n                  }\n                  error_message = update_elf_header_print_error_message_message_001024ec();\n                  return error_message;\n                }\n                if (DAT_001093e4 != 2) {\n                    \n                  abort();\n                }\n                if (DAT_0010916c != 0xffffffff) {\n                  (*DAT_001093b8)(&DAT_00109352,(long)(int)DAT_0010916c,2);\n                }\n                if (DAT_00109160 != -1) {\n                  (*DAT_001093b8)(&DAT_00109350,(long)DAT_00109160,2);\n                }\n                if (DAT_00109158 != -1) {\n                  DAT_00109347 = (undefined)DAT_00109158;\n                }\n                if (DAT_00109150 != -1) {\n                  DAT_00109348 = (undefined)DAT_00109150;\n                }\n                write_result = fwrite(&DAT_00109340,0x40,1,file);\n                if (write_result == 1) {\n                  return 0;\n                }\n                error_message = update_elf_header_print_error_message_message_001024ec();\n                return error_message;\n              }\n              error_message = \"%s: Unmatched EI_ABIVERSION: %d is not %d\\n\";\n            }\n            else {\n              error_message = \"%s: Unmatched EI_OSABI: %d is not %d\\n\";\n            }\n          }\n          else {\n            error_message = \"%s: Unmatched e_type: %d is not %d\\n\";\n          }\n        }\n        else {\n          error_message = \"%s: Unmatched e_machine: %d is not %d\\n\";\n        }\n        error_message = dcgettext(0,error_message,5);\n        print_error_message(error_message);\n        return 1;\n      }\n      error_message = \"%s: Unmatched output EI_CLASS: %d is not %d\\n\";\n    }\n    else {\n      error_message = \"%s: Unmatched input EI_CLASS: %d is not %d\\n\";\n    }\n    error_message = dcgettext(0,error_message,5);\n    print_error_message(error_message);\n  }\n  else {\n    error_message = dcgettext(0,\"%s: Unsupported EI_VERSION: %d is not %d\\n\",5);\n    print_error_message(error_message);\n  }\n  return 1;\n}\n\n",
            "current_name": "update_elf_header_information_00102434",
            "entrypoint": "0x00102434",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102434": "update_elf_header_information_00102434",
                "abort": "terminate_execution",
                "dcgettext": "get_localized_message",
                "error": "print_error_message",
                "pcVar3": "error_message",
                "sVar2": "write_result",
                "uVar1": "error_message",
                "unaff_RBX": "file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001024ec": {
            "additional_data": {
                "FUN_001024ec": {
                    "handle_failed_update": 1,
                    "update_elf_header": 15,
                    "update_elf_header_error": 5,
                    "update_elf_header_error_message": 1,
                    "update_elf_header_fail": 1,
                    "update_elf_header_failed": 2,
                    "update_elf_header_failure": 5,
                    "update_header_error": 1
                },
                "__errno_location": {
                    "get_error_number_pointer": 1
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "error": {
                    "display_error_message": 1
                },
                "piVar1": {
                    "errno": 1,
                    "errno_location": 5,
                    "errno_pointer": 1,
                    "errno_ptr": 6,
                    "errno_value": 1,
                    "error_code": 3,
                    "error_code_pointer": 1,
                    "error_code_ptr": 1,
                    "error_location": 5,
                    "error_num": 1,
                    "error_num_ptr": 1,
                    "error_number": 5
                },
                "strerror": {
                    "get_error_string": 1
                },
                "uVar2": {
                    "error_message": 20,
                    "error_msg": 1,
                    "error_string": 6,
                    "error_text": 1,
                    "header_error_message": 1,
                    "message": 1,
                    "update_error_msg": 1
                }
            },
            "called": [
                "dcgettext",
                "error",
                "strerror",
                "__errno_location"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nundefined8 update_elf_header_error_message_001024ec(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  strerror(*errno_ptr);\n  error_message = dcgettext(0,\"%s: Failed to update ELF header: %s\\n\",5);\n  display_error_message(error_message);\n  return 1;\n}\n\n",
            "current_name": "update_elf_header_error_message_001024ec",
            "entrypoint": "0x001024ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001024ec": "update_elf_header_error_message_001024ec",
                "__errno_location": "get_error_number_pointer",
                "dcgettext": "get_error_message",
                "error": "display_error_message",
                "piVar1": "errno_ptr",
                "strerror": "get_error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102558": {
            "additional_data": {
                "FUN_00102558": {
                    "read_elf_header": 4,
                    "read_elf_header_and_handle_failure": 1,
                    "read_elf_header_error": 17,
                    "read_elf_header_failed": 6,
                    "read_elf_header_failure": 3
                },
                "uVar1": {
                    "error_message": 20,
                    "error_msg": 4,
                    "error_string": 7
                }
            },
            "called": [
                "dcgettext",
                "error"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nundefined8 read_elf_header_error_00102558(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"%s: Failed to read ELF header\\n\",5);\n  error(error_message);\n  return 1;\n}\n\n",
            "current_name": "read_elf_header_error_00102558",
            "entrypoint": "0x00102558",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102558": "read_elf_header_error_00102558",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001025ab": {
            "additional_data": {
                "DAT_001027fd": {
                    "compare_strings_001027fd": 1
                },
                "FUN_001025ab": {
                    "analyze_archive": 1,
                    "extract_and_validate_archive_header": 1,
                    "extract_archive": 1,
                    "extract_archive_header": 4,
                    "extract_symbol_names_from_archive": 1,
                    "initialize_archive": 1,
                    "parse_archive": 1,
                    "parse_archive_file": 1,
                    "parse_archive_header": 6,
                    "process_archive": 4,
                    "process_archive_file": 4,
                    "process_archive_header": 3,
                    "read_and_validate_archive": 1,
                    "read_archive_header": 2
                },
                "ZEXT816": {
                    "zero": 1,
                    "zero_extend": 1
                },
                "__ptr": {
                    "archive_header": 4,
                    "archive_header_ptr": 1,
                    "buffer": 3,
                    "current_header": 1,
                    "header": 3,
                    "header_buffer": 3,
                    "header_data": 1,
                    "header_ptr": 4,
                    "pointer": 1,
                    "ptr": 4,
                    "ptr_array": 2,
                    "temp_ptr": 1,
                    "tmp_ptr": 1
                },
                "cVar2": {
                    "char_result": 1,
                    "compare_result": 11,
                    "comparison": 1,
                    "comparison_result": 9,
                    "result": 6,
                    "temp_c_var2": 1
                },
                "compare_strings_001027fd": {
                    "compare_strings": 1
                },
                "dcgettext": {
                    "retrieve_translated_message": 1
                },
                "error": {
                    "report_error": 1
                },
                "free": {
                    "deallocate_memory": 1
                },
                "fseek": {
                    "seek_archive_header": 1
                },
                "getc": {
                    "get_character": 1
                },
                "iVar3": {
                    "error": 1,
                    "error_code": 1,
                    "result": 19,
                    "seek_result": 2,
                    "status": 6,
                    "temp_var": 1,
                    "validation_result": 1
                },
                "malloc": {
                    "allocate_memory": 1
                },
                "param_1": {
                    "archive": 2,
                    "archive_data": 1,
                    "archive_header": 4,
                    "args": 1,
                    "arguments": 2,
                    "config": 1,
                    "file_data": 1,
                    "file_info": 2,
                    "header": 3,
                    "input_params": 1,
                    "output": 6,
                    "output_data": 1,
                    "output_files": 1,
                    "output_params": 2,
                    "parameters": 1,
                    "parsed_data": 1,
                    "symbol_names": 1
                },
                "param_2": {
                    "archive_filename": 1,
                    "archive_name": 5,
                    "archive_path": 1,
                    "file": 1,
                    "file_name": 1,
                    "filename": 15,
                    "input": 2,
                    "input_file": 1,
                    "input_file_name": 1,
                    "input_filename": 1,
                    "input_string": 1,
                    "source_file_path": 1
                },
                "param_3": {
                    "archive_file": 4,
                    "file": 17,
                    "file_pointer": 3,
                    "file_ptr": 4,
                    "input_file": 2,
                    "source_file": 1
                },
                "param_4": {
                    "long_name_table_size": 1,
                    "max_file_size": 2,
                    "max_long_name_size": 2,
                    "max_size": 18,
                    "max_symbol_name_size": 1,
                    "max_table_name_size": 1,
                    "max_table_size": 1,
                    "name_table_size": 1,
                    "table_size": 4
                },
                "param_5": {
                    "flag": 5,
                    "flags": 4,
                    "info": 1,
                    "locale_category": 1,
                    "option": 1,
                    "param": 4,
                    "param5": 1,
                    "param_5": 12,
                    "param_flags": 2
                },
                "pcVar4": {
                    "archive_filename_copy": 1,
                    "copy_filename": 1,
                    "dup_filename": 1,
                    "duplicate_name": 1,
                    "duplicated_filename": 1,
                    "error_message": 10,
                    "error_msg": 3,
                    "error_str": 1,
                    "error_string": 1,
                    "file_name_copy": 1,
                    "filename_copy": 2,
                    "input_file_copy": 1,
                    "input_file_name_dup": 1,
                    "long_name_table_size": 1,
                    "output_string": 1,
                    "parsed_filename": 1,
                    "str": 2,
                    "str_alloc_result": 1
                },
                "pcVar7": {
                    "allocated_memory": 1,
                    "err_msg": 1,
                    "error_message": 7,
                    "error_message2": 1,
                    "long_name_table": 5,
                    "long_name_table_buffer": 1,
                    "long_name_table_error_msg": 1,
                    "long_name_table_size_err_msg": 1,
                    "long_names": 1,
                    "long_names_table": 1,
                    "long_symbol_name_table": 1,
                    "long_symbol_string": 1,
                    "long_symbol_table": 1,
                    "malloc_ptr": 1,
                    "name_table_size": 1,
                    "string": 1,
                    "symbol_name": 2,
                    "symbol_table": 2,
                    "table_memory": 1
                },
                "sVar5": {
                    "bytes_read": 4,
                    "read_bytes": 1,
                    "read_result": 3,
                    "read_size": 23
                },
                "strdup": {
                    "duplicate_string": 1
                },
                "strtoul": {
                    "convert_string_to_unsigned_long": 1
                },
                "uVar1": {
                    "pre_value": 1,
                    "previous_char": 1,
                    "saved_byte": 1,
                    "saved_value": 1,
                    "temp": 10,
                    "temp_byte": 1,
                    "temp_char": 1,
                    "temp_u_var1": 1,
                    "temp_value": 1,
                    "temp_var": 4
                },
                "uVar6": {
                    "err_msg": 2,
                    "error_message": 5,
                    "error_msg": 1,
                    "error_string": 2,
                    "error_text": 2,
                    "gettext_message": 1,
                    "gettext_result": 1,
                    "locale": 1,
                    "locale_str": 1,
                    "localized_message": 1,
                    "message": 2,
                    "msg": 2,
                    "translated_message": 2,
                    "translated_msg": 1,
                    "translated_string": 1,
                    "translation": 2,
                    "translation_msg": 1,
                    "translation_result": 1,
                    "translation_string": 1
                },
                "validate_and_read_archive_header_001028be": {
                    "validate_and_read_archive_header": 1
                }
            },
            "called": [
                "dcgettext",
                "error",
                "free",
                "fread",
                "malloc",
                "fseek",
                "FUN_001027fd",
                "strtoul",
                "FUN_001028be",
                "getc",
                "strdup"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "code": "\nundefined4 process_archive_file_001025ab(char **output,char *filename,FILE *file,long max_size,undefined4 param_5)\n\n{\n  char **ptr;\n  undefined temp;\n  char compare_result;\n  int result;\n  char *error_message;\n  size_t read_size;\n  undefined8 error_message;\n  char *error_message;\n  \n  error_message = strdup(filename);\n  output[2] = (char *)0x0;\n  *(undefined4 *)((long)output + 0x54) = 0;\n  *output = error_message;\n  output[1] = (char *)file;\n  output[5] = (char *)0x0;\n  output[6] = (char *)0x0;\n  *(undefined4 *)(output + 10) = param_5;\n  output[9] = (char *)0x8;\n  *(undefined (*) [16])(output + 3) = zero_extend(0);\n  *(undefined (*) [16])(output + 7) = zero_extend(0);\n  result = fseek(file,8,0);\n  error_message = \"%s: failed to seek to first archive header\\n\";\n  if (result != 0) goto LAB_00102658;\n  ptr = output + 0xb;\n  read_size = fread(ptr,1,0x3c,file);\n  if (read_size != 0x3c) {\n    if (read_size == 0) {\n      return 0;\n    }\n    error_message = \"%s: failed to read archive header\\n\";\n    goto LAB_00102658;\n  }\n  compare_result = compare_strings(ptr,\"/               \");\n  if (compare_result == '\\0') {\n    compare_result = compare_strings(ptr,\"/SYM64/         \");\n    if (compare_result != '\\0') {\n      *(undefined4 *)((long)output + 0x54) = 1;\n      result = validate_and_read_archive_header(output,8);\n      goto joined_r0x001026dd;\n    }\n  }\n  else {\n    result = validate_and_read_archive_header(output,4);\njoined_r0x001026dd:\n    if (result == 0) {\n      return 1;\n    }\n  }\n  compare_result = compare_strings(ptr);\n  if (compare_result == '\\0') {\n    return 0;\n  }\n  temp = *(undefined *)((long)output + 0x92);\n  *(undefined *)((long)output + 0x92) = 0;\n  error_message = (char *)strtoul((char *)(output + 0x11),(char **)0x0,10);\n  error_message = \"%s: long name table is too small, (size = %ld)\\n\";\n  output[7] = error_message;\n  *(undefined *)((long)output + 0x92) = temp;\n  if ((char *)0x7 < error_message) {\n    if (((long)error_message <= max_size) && (-1 < (long)error_message)) {\n      output[9] = error_message + 0x3c + (long)output[9];\n      error_message = (char *)malloc((size_t)(error_message + 1));\n      output[6] = error_message;\n      if (error_message == (char *)0x0) {\n        error_message = dcgettext(0,\"Out of memory reading long symbol names in archive\\n\",5);\n        report_error(error_message);\n        return 1;\n      }\n      read_size = fread(error_message,(size_t)error_message,1,file);\n      if (read_size == 1) {\n        if ((*(byte *)(output + 7) & 1) != 0) {\n          getc(file);\n        }\n        output[6][(long)output[7]] = '\\0';\n        return 0;\n      }\n      free(output[6]);\n      error_message = \"%s: failed to read long symbol name string table\\n\";\n      output[6] = (char *)0x0;\nLAB_00102658:\n      error_message = dcgettext(0,error_message,5);\n      report_error(error_message,filename);\n      return 1;\n    }\n    error_message = \"%s: long name table is too big, (size = %#lx)\\n\";\n  }\n  error_message = dcgettext(0,error_message,5);\n  report_error(error_message,filename,error_message);\n  return 1;\n}\n\n",
            "current_name": "process_archive_file_001025ab",
            "entrypoint": "0x001025ab",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001025ab": "process_archive_file_001025ab",
                "ZEXT816": "zero_extend",
                "__ptr": "ptr",
                "cVar2": "compare_result",
                "compare_strings_001027fd": "compare_strings",
                "dcgettext": "retrieve_translated_message",
                "error": "report_error",
                "free": "deallocate_memory",
                "fseek": "seek_archive_header",
                "getc": "get_character",
                "iVar3": "result",
                "malloc": "allocate_memory",
                "param_1": "output",
                "param_2": "filename",
                "param_3": "file",
                "param_4": "max_size",
                "pcVar4": "error_message",
                "pcVar7": "error_message",
                "sVar5": "read_size",
                "strdup": "duplicate_string",
                "strtoul": "convert_string_to_unsigned_long",
                "uVar1": "temp",
                "uVar6": "error_message",
                "validate_and_read_archive_header_001028be": "validate_and_read_archive_header"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001027fd": {
            "additional_data": {
                "FUN_001027fd": {
                    "compare_strings": 19,
                    "reverse_string_comparison": 1,
                    "string_compare": 6,
                    "string_comparison": 5
                },
                "__n": {
                    "comparison_length": 1,
                    "length": 20,
                    "second_string_length": 1,
                    "second_string_size": 1,
                    "string2_length": 6,
                    "string_length": 1,
                    "target_string_length": 1
                },
                "auVar2": {
                    "comparison": 1,
                    "comparison_result": 2,
                    "comparison_result_struct": 1,
                    "output": 2,
                    "result": 21,
                    "result_array": 1,
                    "return_value": 2
                },
                "extraout_var": {
                    "additional_variable": 1,
                    "comparison_result": 3,
                    "extra_output": 1,
                    "extra_var": 1,
                    "extra_variable": 2,
                    "result": 2,
                    "unused": 1,
                    "unused_extra_var": 1
                },
                "iVar1": {
                    "comparison": 1,
                    "comparison_result": 19,
                    "result": 2,
                    "string_comparison_result": 4
                },
                "in_RAX": {
                    "return_value": 4,
                    "temporary_value": 1,
                    "unknown_value": 1
                },
                "param_1": {
                    "first_string": 2,
                    "input_string": 1,
                    "input_string1": 1,
                    "source_string": 1,
                    "str1": 1,
                    "string1": 25
                },
                "param_2": {
                    "comparison_string": 1,
                    "input_string2": 1,
                    "second_string": 2,
                    "str2": 1,
                    "string2": 25,
                    "target_string": 1
                }
            },
            "called": [
                "strncmp",
                "strlen"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\nundefined  [16] compare_strings_001027fd(char *string1,char *string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  size_t length;\n  undefined4 comparison_result;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparison_result = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(comparison_result,comparison_result) >> 8);\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "compare_strings_001027fd",
            "entrypoint": "0x001027fd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001027fd": "compare_strings_001027fd",
                "__n": "length",
                "auVar2": "result",
                "extraout_var": "comparison_result",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001028be": {
            "additional_data": {
                "FUN_001028be": {
                    "check_and_read_archive_header": 1,
                    "check_archive_header": 1,
                    "check_archive_header_validity": 2,
                    "extract_archive_header": 8,
                    "parse_archive_header": 6,
                    "process_archive": 1,
                    "process_archive_file": 1,
                    "process_archive_header": 2,
                    "read_archive_header": 1,
                    "validate_and_read_archive_header": 4,
                    "validate_archive_header": 4
                },
                "iVar2": {
                    "file_operation_result": 1,
                    "file_seek_result": 4,
                    "result": 11,
                    "return_value": 1,
                    "seek_result": 10,
                    "seek_status": 1,
                    "status": 3
                },
                "param_1": {
                    "archive": 4,
                    "archive_data": 5,
                    "archive_handle": 1,
                    "archive_header": 11,
                    "archive_info": 2,
                    "header_data": 2,
                    "header_info": 3,
                    "input": 1,
                    "input_params": 1,
                    "parameters": 1
                },
                "pcVar7": {
                    "err_msg_format": 1,
                    "error_format": 20,
                    "error_format_string": 3,
                    "error_message": 2,
                    "error_message_format": 1,
                    "error_msg_format": 1,
                    "error_template": 2,
                    "failure_message": 1
                },
                "sVar5": {
                    "bytes_read": 20,
                    "header_read": 1,
                    "header_read_size": 1,
                    "num_bytes_read": 1,
                    "read_result": 2,
                    "read_size": 6
                },
                "uVar1": {
                    "old_value": 5,
                    "original_byte_value": 1,
                    "original_flag": 1,
                    "original_value": 4,
                    "prev_byte": 1,
                    "prev_byte_value": 1,
                    "prev_value": 2,
                    "previous_byte": 1,
                    "previous_value": 9,
                    "saved_byte": 1,
                    "temp": 1,
                    "temp_flag": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "value1": 1
                },
                "uVar3": {
                    "header_size": 31
                },
                "uVar4": {
                    "error_message": 26,
                    "error_msg": 3,
                    "error_string": 2
                },
                "uVar6": {
                    "archive": 1,
                    "archive_name": 15,
                    "executable_name": 1,
                    "file_name": 1,
                    "filename": 4
                }
            },
            "called": [
                "dcgettext",
                "error",
                "fread",
                "fseek",
                "strtoul"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\nundefined8 validate_and_read_archive_header_001028be(undefined8 *archive_header)\n\n{\n  undefined previous_value;\n  int result;\n  ulong header_size;\n  undefined8 error_message;\n  size_t bytes_read;\n  undefined8 archive_name;\n  char *error_format;\n  \n  previous_value = *(undefined *)((long)archive_header + 0x92);\n  *(undefined *)((long)archive_header + 0x92) = 0;\n  header_size = strtoul((char *)(archive_header + 0x11),(char **)0x0,10);\n  *(undefined *)((long)archive_header + 0x92) = previous_value;\n  if ((long)header_size < 0) {\n    archive_name = *archive_header;\n    error_message = dcgettext(0,\"%s: invalid archive header size: %ld\\n\",5);\n    error(error_message,archive_name,header_size);\n  }\n  else {\n    header_size = header_size + 1 & 0xfffffffffffffffe;\n    archive_header[9] = header_size + 0x3c + archive_header[9];\n    result = fseek((FILE *)archive_header[1],header_size,1);\n    if (result == 0) {\n      bytes_read = fread(archive_header + 0xb,1,0x3c,(FILE *)archive_header[1]);\n      if ((bytes_read == 0x3c) || (bytes_read == 0)) {\n        return 1;\n      }\n      archive_name = *archive_header;\n      error_format = \"%s: failed to read archive header following archive index\\n\";\n    }\n    else {\n      archive_name = *archive_header;\n      error_format = \"%s: failed to skip archive symbol table\\n\";\n    }\n    error_message = dcgettext(0,error_format,5);\n    error(error_message,archive_name);\n  }\n  return 0;\n}\n\n",
            "current_name": "validate_and_read_archive_header_001028be",
            "entrypoint": "0x001028be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001028be": "validate_and_read_archive_header_001028be",
                "iVar2": "result",
                "param_1": "archive_header",
                "pcVar7": "error_format",
                "sVar5": "bytes_read",
                "uVar1": "previous_value",
                "uVar3": "header_size",
                "uVar4": "error_message",
                "uVar6": "archive_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001029a5": {
            "additional_data": {
                "FUN_001029a5": {
                    "extract_archive_member": 2,
                    "extract_file": 1,
                    "extract_file_and_process": 1,
                    "extract_file_from_archive": 1,
                    "extract_file_name": 6,
                    "extract_file_name_and_open": 1,
                    "extract_file_name_from_archive": 1,
                    "extract_file_name_from_file": 2,
                    "extract_file_name_from_path": 9,
                    "extract_file_path": 1,
                    "extract_file_path_and_file_name": 1,
                    "extract_file_path_and_filename": 1,
                    "extract_filename_from_path": 1,
                    "extract_path_or_file_name": 1,
                    "parse_archive_member": 1,
                    "process_archive_file": 1
                },
                "__stream": {
                    "file": 5,
                    "file_stream": 25,
                    "stream": 1
                },
                "iVar6": {
                    "error_code": 2,
                    "file_desc": 1,
                    "file_descriptor": 6,
                    "file_descriptor_result": 1,
                    "index": 1,
                    "index_var": 2,
                    "result": 5,
                    "status": 6,
                    "temp_var6": 6,
                    "temp_var_4": 1
                },
                "lVar13": {
                    "count": 1,
                    "counter": 2,
                    "file_offset": 2,
                    "file_table_index": 1,
                    "i": 2,
                    "index": 6,
                    "iteration_index": 1,
                    "iterator": 1,
                    "iterator1": 1,
                    "length": 3,
                    "length_counter": 1,
                    "loop_counter": 1,
                    "loop_index": 3,
                    "loop_var": 5,
                    "temp_var_5": 1
                },
                "local_b8": {
                    "file_info": 2,
                    "file_info_buffer": 1,
                    "file_info_stats": 1,
                    "file_stat": 13,
                    "file_stats": 1,
                    "file_status": 4,
                    "stat_data": 1,
                    "stat_info": 2,
                    "stat_struct": 1,
                    "temp_stat_struct": 1
                },
                "local_c0": {
                    "buffer": 10,
                    "character_ptr": 1,
                    "copy_ptr": 1,
                    "file_name_buffer": 2,
                    "file_number": 1,
                    "file_path": 2,
                    "file_size_string": 1,
                    "filename_ptr": 1,
                    "local_buffer": 5,
                    "local_path": 1,
                    "local_string": 1,
                    "temp_buffer": 1,
                    "temp_local_buffer": 1
                },
                "param_1": {
                    "archive_member": 1,
                    "archive_member_info": 1,
                    "file_info": 14,
                    "file_parameters": 1,
                    "file_params": 2,
                    "file_path": 2,
                    "file_path_and_file_name": 1,
                    "input_array": 1,
                    "input_data": 1,
                    "input_params": 2,
                    "options": 1,
                    "param_file_path_and_filename": 1,
                    "path": 1,
                    "path_info": 1,
                    "path_or_file_name": 1
                },
                "param_2": {
                    "archive": 1,
                    "archive_info": 2,
                    "arguments": 1,
                    "extracted_files": 1,
                    "file_buffer": 2,
                    "file_data": 2,
                    "file_info": 2,
                    "file_list": 1,
                    "file_names": 1,
                    "file_ptr": 2,
                    "open_file_params": 1,
                    "output": 7,
                    "output_array": 1,
                    "output_data": 1,
                    "output_info": 1,
                    "output_params": 3,
                    "param_data": 1,
                    "result": 1
                },
                "pcVar14": {
                    "char_ptr1": 1,
                    "current_file_name": 1,
                    "error_message": 1,
                    "error_message11": 1,
                    "error_string": 1,
                    "file_name": 15,
                    "file_name1": 3,
                    "file_ptr": 1,
                    "filename": 6,
                    "temp_var14": 1
                },
                "pcVar15": {
                    "char_ptr2": 1,
                    "err_msg": 2,
                    "err_msg1": 1,
                    "error_message": 12,
                    "error_message1": 3,
                    "error_message13": 1,
                    "error_messsage": 1,
                    "error_msg": 4,
                    "error_msg_2": 1,
                    "error_string": 2,
                    "error_text1": 1,
                    "message": 1,
                    "temp_var15": 1
                },
                "pcVar16": {
                    "char_ptr3": 1,
                    "err_format": 1,
                    "err_msg": 1,
                    "err_msg2": 1,
                    "error_format": 4,
                    "error_format_string": 1,
                    "error_message": 2,
                    "error_message12": 1,
                    "error_message2": 5,
                    "error_message_format": 2,
                    "error_msg": 1,
                    "error_msg2": 1,
                    "error_msg_3": 1,
                    "error_text2": 1,
                    "fmt_str": 1,
                    "fmt_string": 1,
                    "format": 1,
                    "format_str": 1,
                    "format_string": 3,
                    "temp_var16": 1
                },
                "pcVar17": {
                    "err_msg3": 1,
                    "file_name2": 1,
                    "file_path": 2,
                    "header_error_message": 1,
                    "new_file_name": 3,
                    "path_copy": 1
                },
                "pcVar18": {
                    "error_message": 1,
                    "header_error_format": 1,
                    "new_file_name": 1
                },
                "puVar12": {
                    "extracted_file_name": 1,
                    "file_info_copy": 1,
                    "new_file_path": 1,
                    "new_string": 3,
                    "output": 3,
                    "result": 12,
                    "result_buffer": 1,
                    "result_pointer": 3,
                    "result_ptr": 3,
                    "result_string": 1
                },
                "sVar11": {
                    "bytes_read": 11,
                    "data_size": 1,
                    "file_size": 1,
                    "read_count": 1,
                    "read_size": 14,
                    "result": 1,
                    "size_var": 1,
                    "temp_var11": 1
                },
                "uVar1": {
                    "byte_value": 1,
                    "prev_char": 1,
                    "temp": 7,
                    "temp1": 1,
                    "temp_char": 2,
                    "temp_var": 5,
                    "temp_var1": 12,
                    "tmp": 1,
                    "unused": 1
                },
                "uVar10": {
                    "err_msg": 2,
                    "error_message": 3,
                    "error_msg": 3,
                    "error_string": 5,
                    "error_text": 2,
                    "msg": 1,
                    "result": 1,
                    "string": 1,
                    "temp6": 1,
                    "temp_var10": 3,
                    "temp_var6": 2,
                    "temp_var7": 1,
                    "translated_string": 2,
                    "translation": 4
                },
                "uVar2": {
                    "file_info_result1": 1,
                    "file_path1": 1,
                    "result": 1,
                    "result1": 2,
                    "result_1": 1,
                    "return_value": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_var2": 11,
                    "u1": 1,
                    "u_var2": 1,
                    "unused": 1,
                    "var1": 7,
                    "var2": 1
                },
                "uVar3": {
                    "file_info_result2": 1,
                    "file_path2": 1,
                    "result2": 2,
                    "result_2": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_var3": 11,
                    "temp_var_1": 1,
                    "u2": 1,
                    "u_var3": 1,
                    "unused": 1,
                    "var2": 7,
                    "var3": 1
                },
                "uVar4": {
                    "file_info_result3": 1,
                    "file_path3": 1,
                    "result3": 2,
                    "result_3": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_var4": 11,
                    "temp_var_2": 1,
                    "u3": 1,
                    "u_var4": 1,
                    "unused": 1,
                    "var3": 7,
                    "var4": 1
                },
                "uVar5": {
                    "file_info_result4": 1,
                    "file_path4": 1,
                    "result4": 2,
                    "result_4": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_var5": 11,
                    "temp_var_3": 1,
                    "u4": 1,
                    "u_var5": 1,
                    "unused": 1,
                    "var4": 7,
                    "var5": 1
                },
                "uVar7": {
                    "index": 4,
                    "index1": 2,
                    "index_1": 1,
                    "index_var2": 1,
                    "long_index": 1,
                    "long_name_index": 13,
                    "name_index": 4,
                    "start": 2,
                    "start_index": 2,
                    "temp_var7": 1
                },
                "uVar8": {
                    "end": 2,
                    "end_index": 1,
                    "end_of_long_name_table": 1,
                    "index2": 2,
                    "index_2": 1,
                    "index_var3": 1,
                    "long_name_table": 1,
                    "long_name_table_size": 12,
                    "long_names": 1,
                    "table_end": 3,
                    "table_size": 5,
                    "temp_var8": 1
                },
                "uVar9": {
                    "cur_index": 1,
                    "current_char_index": 2,
                    "current_index": 2,
                    "current_long_name_index": 1,
                    "end_index": 2,
                    "filename_length": 1,
                    "i": 2,
                    "index": 3,
                    "index3": 2,
                    "index_3": 1,
                    "index_var4": 1,
                    "long_name_pos": 1,
                    "name_end": 2,
                    "name_index": 4,
                    "name_length": 3,
                    "temp_index": 1,
                    "temp_var6": 1,
                    "temp_var9": 1
                },
                "undefined4": {
                    "size": 1
                }
            },
            "called": [
                "fopen",
                "free",
                "error",
                "fseek",
                "FUN_001029a5",
                "FUN_00102f65",
                "strtoul",
                "strcmp",
                "dcgettext",
                "fileno",
                "fread",
                "fclose",
                "FUN_001025ab",
                "FUN_00102cc4",
                "FUN_00105370",
                "FUN_00103160",
                "fstat"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "code": "\nsize * extract_file_name_from_path_001029a5(undefined8 *file_info,char **output)\n\n{\n  undefined temp_var1;\n  size temp_var2;\n  size temp_var3;\n  size temp_var4;\n  size temp_var5;\n  int temp_var6;\n  ulong long_name_index;\n  ulong long_name_table_size;\n  ulong name_index;\n  undefined8 error_string;\n  FILE *file_stream;\n  size_t read_size;\n  size *result;\n  long index;\n  char *file_name;\n  char *error_message;\n  char *error_message2;\n  char *buffer;\n  stat file_stat;\n  \n  if (*(char *)(file_info + 0xb) != '/') {\n    index = 0;\n    do {\n      if (*(char *)((long)file_info + index + 0x58) == '/') {\n        *(undefined *)((long)file_info + index + 0x58) = 0;\n        result = (size *)copy_string_characters_00103160(file_info + 0xb);\n        return result;\n      }\n      index = index + 1;\n    } while (index != 0x10);\n    result = (size *)extract_file_name_from_path_001029a5_00105370(0x11);\n    temp_var2 = *(size *)(file_info + 0xb);\n    temp_var3 = *(size *)((long)file_info + 0x5c);\n    temp_var4 = *(size *)(file_info + 0xc);\n    temp_var5 = *(size *)((long)file_info + 100);\n    *(undefined *)(result + 4) = 0;\n    *result = temp_var2;\n    result[1] = temp_var3;\n    result[2] = temp_var4;\n    result[3] = temp_var5;\n    return result;\n  }\n  if ((file_info[6] == 0) || (file_info[7] == 0)) {\n    error_message = \"Archive member uses long names, but no longname table found\\n\";\nLAB_00102acd:\n    error_string = dcgettext(0,error_message,5);\n    error(error_string);\n    return (size *)0x0;\n  }\n  temp_var1 = *(undefined *)((long)file_info + 0x92);\n  file_info[8] = 0;\n  *(undefined *)((long)file_info + 0x92) = 0;\n  long_name_index = strtoul((char *)((long)file_info + 0x59),&buffer,10);\n  if (((*(int *)(file_info + 10) != 0) && (buffer != (char *)0x0)) && (*buffer == ':')) {\n    long_name_table_size = strtoul(buffer + 1,(char **)0x0,10);\n    file_info[8] = long_name_table_size;\n  }\n  long_name_table_size = file_info[7];\n  *(undefined *)((long)file_info + 0x92) = temp_var1;\n  if (long_name_table_size < long_name_index) {\n    error_string = dcgettext(0,\"Found long name index (%ld) beyond end of long name table\\n\",5);\n    error(error_string,long_name_index);\n    return (size *)0x0;\n  }\n  index = file_info[6];\n  for (name_index = long_name_index;\n      ((long_name_table_size != name_index && (*(char *)(index + name_index) != '\\0')) &&\n      (*(char *)(index + name_index) != '\\n')); name_index = name_index + 1) {\n  }\n  if ((name_index != 0) && (*(char *)(index + -1 + name_index) == '/')) {\n    name_index = name_index - 1;\n  }\n  if (name_index < long_name_table_size) {\n    long_name_table_size = name_index;\n  }\n  *(undefined *)(index + long_name_table_size) = 0;\n  if ((*(int *)(file_info + 10) == 0) || (file_info[8] == 0)) goto LAB_00102c2d;\n  if (long_name_table_size <= long_name_index) {\n    error_message = \"Invalid Thin archive member name\\n\";\n    goto LAB_00102acd;\n  }\n  error_message = (char *)extract_file_name_from_path_001029a5_00102cc4(*file_info,file_info[6] + long_name_index,long_name_table_size - long_name_index);\n  if (error_message != (char *)0x0) {\n    if ((*output == (char *)0x0) || (temp_var6 = strcmp(*output,error_message), temp_var6 != 0)) {\n      if ((FILE *)output[1] != (FILE *)0x0) {\n        fclose((FILE *)output[1]);\n        output[1] = (char *)0x0;\n      }\n      free_memory_and_reset_00102f65(output);\n      file_stream = fopen(error_message,\"rb\");\n      if (file_stream != (FILE *)0x0) {\n        temp_var6 = fileno(file_stream);\n        temp_var6 = fstat(temp_var6,&file_stat);\n        if ((-1 < temp_var6) &&\n           (temp_var6 = process_archive_file_001025ab(output,error_message,file_stream,file_stat.st_size,0), temp_var6 == 0))\n        goto LAB_00102b84;\n      }\n    }\n    else {\nLAB_00102b84:\n      temp_var6 = fseek((FILE *)output[1],file_info[8],0);\n      if (temp_var6 == 0) {\n        read_size = fread(output + 0xb,1,0x3c,(FILE *)output[1]);\n        if (read_size == 0x3c) {\n          if (*(short *)((long)output + 0x92) == 0xa60) {\n            result = (size *)extract_file_name_from_path_001029a5(output,0);\n            if (result != (size *)0x0) {\n              free(error_message);\n              return result;\n            }\n            goto LAB_00102c25;\n          }\n          file_name = *output;\n          error_message2 = \"%s: did not find a valid archive header\\n\";\n        }\n        else {\n          file_name = *output;\n          error_message2 = \"%s: failed to read archive header\\n\";\n        }\n      }\n      else {\n        file_name = *output;\n        error_message2 = \"%s: failed to seek to next file name\\n\";\n      }\n      error_string = dcgettext(0,error_message2,5);\n      error(error_string,file_name);\n    }\n  }\nLAB_00102c25:\n  free(error_message);\nLAB_00102c2d:\n  result = (size *)copy_string_characters_00103160(file_info[6] + long_name_index);\n  return result;\n}\n\n",
            "current_name": "extract_file_name_from_path_001029a5",
            "entrypoint": "0x001029a5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001029a5": "extract_file_name_from_path_001029a5",
                "__stream": "file_stream",
                "iVar6": "temp_var6",
                "lVar13": "index",
                "local_b8": "file_stat",
                "local_c0": "buffer",
                "param_1": "file_info",
                "param_2": "output",
                "pcVar14": "file_name",
                "pcVar15": "error_message",
                "pcVar16": "error_message2",
                "puVar12": "result",
                "sVar11": "read_size",
                "uVar1": "temp_var1",
                "uVar10": "error_string",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar7": "long_name_index",
                "uVar8": "long_name_table_size",
                "uVar9": "name_index",
                "undefined4": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102c98": {
            "additional_data": {
                "FUN_00102c98": {
                    "handle_data_length_error": 1,
                    "handle_error": 1,
                    "handle_unhandled_data": 1,
                    "handle_unhandled_data_length": 27,
                    "handle_unhandled_data_length_error": 1
                },
                "uVar1": {
                    "error_message": 16,
                    "error_string": 1,
                    "translated_error_message": 1
                },
                "unaff_EBX": {
                    "error_code": 27,
                    "error_flag": 1,
                    "error_type": 1,
                    "error_value": 2
                }
            },
            "called": [
                "dcgettext",
                "error",
                "abort"
            ],
            "calling": [
                "FUN_00103ad0"
            ],
            "code": "\nvoid handle_unhandled_data_length_error_00102c98(void)\n\n{\n  undefined8 error_message;\n  undefined4 error_code;\n  \n  error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(error_message,error_code);\n                    \n  abort();\n}\n\n",
            "current_name": "handle_unhandled_data_length_error_00102c98",
            "entrypoint": "0x00102c98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102c98": "handle_unhandled_data_length_error_00102c98",
                "uVar1": "error_message",
                "unaff_EBX": "error_code"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102cbc": {
            "additional_data": {
                "FUN_00102cbc": {
                    "decode_file_path": 1,
                    "extract_archive_member_name": 1,
                    "extract_file_name": 10,
                    "extract_file_name_from_path": 3,
                    "extract_filename_from_path": 1,
                    "extract_path_component": 1,
                    "extract_string": 1,
                    "parse_archive_member": 1,
                    "parse_archive_member_name": 1,
                    "parse_file_name": 4,
                    "parse_file_path": 5,
                    "parse_filename": 1,
                    "reverse_parse_file_path": 1
                },
                "__size": {
                    "allocated_memory_size": 1,
                    "allocated_size": 3,
                    "allocation_size": 1,
                    "buffer_size": 3,
                    "file_name_size": 1,
                    "file_path_size": 1,
                    "malloc_size": 1,
                    "new_size": 2,
                    "size": 9,
                    "string_size": 1,
                    "total_size": 7
                },
                "allocate_memory_and_print_error_message_00102fc7": {
                    "allocate_memory_and_print_error_message": 1
                },
                "bVar8": {
                    "bit_value": 1,
                    "bool_value": 1,
                    "boolean_flag": 2,
                    "byte_flag": 1,
                    "byte_var": 2,
                    "flag": 1,
                    "found_slash": 1,
                    "is_backslash": 2,
                    "is_backward": 2,
                    "is_little_endian": 1,
                    "is_negative": 7,
                    "is_negative_offset": 2,
                    "is_reversed": 1,
                    "is_slash": 1,
                    "is_slash_char": 1,
                    "is_thin_archive": 1,
                    "is_windows": 1,
                    "offset": 1,
                    "skip_flag": 1,
                    "temp_byte": 1
                },
                "cVar2": {
                    "char": 1,
                    "char_value": 1,
                    "current_char": 27
                },
                "dcgettext": {
                    "get_error_message": 1,
                    "get_translated_text": 1
                },
                "error": {
                    "print_error": 1,
                    "print_error_message": 1
                },
                "extraout_RDX": {
                    "extra_count": 1,
                    "extra_length": 2,
                    "extra_out_rdx": 1,
                    "extra_size": 1,
                    "file_name_length": 2,
                    "file_name_length_remaining": 1,
                    "file_path_length": 1,
                    "filename_length": 3,
                    "filename_size": 1,
                    "initialized_size": 1,
                    "length": 2,
                    "length_diff": 1,
                    "length_path": 1,
                    "loop_counter2": 1,
                    "name_length": 1,
                    "original_length": 1,
                    "path_length": 1,
                    "remaining_length_extra": 1,
                    "remaining_size": 1,
                    "remaining_size2": 1,
                    "slash_count": 1,
                    "slash_position": 1,
                    "string_length": 1,
                    "temp_size2": 1
                },
                "lVar1": {
                    "combined_length": 1,
                    "difference": 1,
                    "file_name_size": 1,
                    "file_path_length": 1,
                    "filename_size": 1,
                    "full_name_length": 1,
                    "length": 7,
                    "name_length": 2,
                    "offset": 4,
                    "result": 1,
                    "size_difference": 1,
                    "total_length": 5,
                    "total_size": 3
                },
                "malloc": {
                    "allocate_memory": 2
                },
                "param_1": {
                    "arg1": 2,
                    "buffer": 1,
                    "file_pointer": 1,
                    "file_size": 1,
                    "param": 13,
                    "param1": 5,
                    "param_1": 3,
                    "param_error": 1,
                    "param_pointer": 1,
                    "param_ptr": 1,
                    "param_size": 2
                },
                "param_2": {
                    "archive_name": 1,
                    "arg2": 1,
                    "file_name": 2,
                    "file_path": 15,
                    "file_string": 1,
                    "filename": 1,
                    "full_path": 1,
                    "input_string": 3,
                    "name": 1,
                    "param2": 1,
                    "path": 4
                },
                "pcVar3": {
                    "char_ptr": 1,
                    "current_char": 3,
                    "current_char_ptr": 3,
                    "current_pos": 1,
                    "current_position": 3,
                    "current_ptr": 3,
                    "file_path_ptr": 1,
                    "file_ptr": 2,
                    "filename": 1,
                    "name_buffer": 1,
                    "path_pointer": 1,
                    "ptr1": 4,
                    "ptr_char": 2,
                    "ptr_current_char": 1,
                    "ptr_to_current_char": 1,
                    "source_ptr": 1,
                    "start": 1,
                    "string_ptr": 1
                },
                "pcVar4": {
                    "allocation": 1,
                    "file_name_start_ptr": 1,
                    "filename_pointer": 1,
                    "filename_position": 1,
                    "filename_start": 3,
                    "last_slash": 6,
                    "last_slash_position": 2,
                    "last_slash_ptr": 8,
                    "ptr2": 4,
                    "ptr_last_slash": 1,
                    "ptr_to_last_slash": 1,
                    "separator_ptr": 1,
                    "slash_ptr": 1
                },
                "uVar5": {
                    "err_msg": 4,
                    "error_message": 16,
                    "error_msg": 2,
                    "error_string": 5,
                    "message": 2,
                    "result": 1,
                    "translation": 1
                },
                "uVar6": {
                    "count": 1,
                    "file_name_length": 1,
                    "len": 1,
                    "length": 5,
                    "length_remaining": 1,
                    "loop_counter": 2,
                    "loop_counter1": 1,
                    "name_length": 1,
                    "path_length": 1,
                    "remaining_chars": 1,
                    "remaining_length": 3,
                    "remaining_size": 12,
                    "temp_size": 1
                },
                "uVar7": {
                    "diff": 1,
                    "file_name_length": 3,
                    "file_name_size": 1,
                    "filename_diff": 1,
                    "filename_length": 2,
                    "filename_offset": 1,
                    "filename_prefix_length": 1,
                    "filename_start_offset": 1,
                    "length_before_slash": 1,
                    "name_length": 2,
                    "name_offset": 1,
                    "path_length": 1,
                    "prefix_length": 2,
                    "ptr_difference": 1,
                    "relative_path_size": 1,
                    "slash_difference": 1,
                    "slash_distance": 3,
                    "slash_index": 1,
                    "slash_offset": 2,
                    "slash_position": 1,
                    "slice_length": 1,
                    "temp_counter": 1,
                    "temp_length": 1
                },
                "unaff_RBX": {
                    "archive_name_ptr": 1,
                    "current_char": 2,
                    "current_position": 1,
                    "file_name": 1,
                    "file_name_ptr": 2,
                    "file_name_start_pointer": 1,
                    "file_path": 1,
                    "file_path_ptr": 4,
                    "filename_ptr": 1,
                    "initial_ptr": 1,
                    "name_start": 1,
                    "path": 1,
                    "path_ptr": 1,
                    "ptr": 2,
                    "ptr_char_start": 1,
                    "ptr_filename_start": 1,
                    "ptr_to_path": 1,
                    "slash_ptr": 2,
                    "start_of_name": 1,
                    "start_pointer": 1,
                    "string": 1,
                    "temp_ptr": 1,
                    "unaffected_rbx": 1
                }
            },
            "called": [
                "FUN_00102fc7"
            ],
            "calling": [
                "FUN_00105370"
            ],
            "code": "\nchar * extract_file_name_from_path_00102cbc(undefined8 param,char *file_path)\n\n{\n  ulong size;\n  long length;\n  char current_char;\n  char *ptr1;\n  char *last_slash_ptr;\n  undefined8 error_message;\n  ulong remaining_size;\n  ulong filename_length;\n  char *file_path_ptr;\n  ulong file_name_length;\n  byte is_negative;\n  \n  is_negative = 0;\n  malloc_and_print_error_message();\n  ptr1 = file_path_ptr;\n  last_slash_ptr = file_path_ptr;\n  while (current_char = *ptr1, current_char != '\\0') {\n    ptr1 = ptr1 + 1;\n    if (current_char == '/') {\n      last_slash_ptr = ptr1;\n    }\n  }\n  if ((*file_path == '/') || (file_path_ptr == last_slash_ptr)) {\n    if (filename_length + 1 == 0) {\n      return (char *)0x0;\n    }\n    last_slash_ptr = (char *)malloc(filename_length + 1);\n    remaining_size = filename_length;\n    ptr1 = last_slash_ptr;\n    if (last_slash_ptr != (char *)0x0) {\n      for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n        *ptr1 = *file_path;\n        file_path = file_path + (ulong)is_negative * -2 + 1;\n        ptr1 = ptr1 + (ulong)is_negative * -2 + 1;\n      }\n      last_slash_ptr[filename_length] = '\\0';\n      return last_slash_ptr;\n    }\n  }\n  else {\n    file_name_length = (long)last_slash_ptr - (long)file_path_ptr;\n    length = file_name_length + filename_length;\n    remaining_size = filename_length;\n    if (filename_length <= file_name_length) {\n      remaining_size = file_name_length;\n    }\n    size = length + 1;\n    if (size < remaining_size) {\n      error_message = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      print_error_message(error_message,filename_length);\n      return (char *)0x0;\n    }\n    last_slash_ptr = (char *)malloc(size);\n    ptr1 = last_slash_ptr;\n    if (last_slash_ptr != (char *)0x0) {\n      for (; remaining_size = filename_length, file_name_length != 0; file_name_length = file_name_length - 1) {\n        *ptr1 = *file_path_ptr;\n        file_path_ptr = file_path_ptr + (ulong)is_negative * -2 + 1;\n        ptr1 = ptr1 + (ulong)is_negative * -2 + 1;\n      }\n      for (; remaining_size != 0; remaining_size = remaining_size - 1) {\n        *ptr1 = *file_path;\n        file_path = file_path + (ulong)is_negative * -2 + 1;\n        ptr1 = ptr1 + (ulong)is_negative * -2 + 1;\n      }\n      last_slash_ptr[length] = '\\0';\n      return last_slash_ptr;\n    }\n  }\n  error_message = dcgettext(0,\"Out of memory\\n\",5);\n  print_error_message(error_message);\n  return (char *)0x0;\n}\n\n",
            "current_name": "extract_file_name_from_path_00102cbc",
            "entrypoint": "0x00102cbc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102cbc": "extract_file_name_from_path_00102cbc",
                "__size": "size",
                "allocate_memory_and_print_error_message_00102fc7": "allocate_memory_and_print_error_message",
                "bVar8": "is_negative",
                "cVar2": "current_char",
                "dcgettext": "get_translated_text",
                "error": "print_error_message",
                "extraout_RDX": "filename_length",
                "lVar1": "length",
                "malloc": "allocate_memory",
                "param_1": "param",
                "param_2": "file_path",
                "pcVar3": "ptr1",
                "pcVar4": "last_slash_ptr",
                "uVar5": "error_message",
                "uVar6": "remaining_size",
                "uVar7": "file_name_length",
                "unaff_RBX": "file_path_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102cc4": {
            "additional_data": {
                "FUN_00102cc4": {
                    "extract_file": 1,
                    "extract_file_name": 22,
                    "extract_file_name_from_path": 1,
                    "extract_file_path": 1,
                    "extract_filename": 2,
                    "parse_file_name": 1,
                    "parse_file_path": 1,
                    "parse_filepath": 1,
                    "parse_path": 1
                },
                "__size": {
                    "allocate_size": 1,
                    "allocated_size": 9,
                    "buffer_size": 3,
                    "malloc_size": 1,
                    "new_path_size": 1,
                    "new_size": 2,
                    "required_size": 1,
                    "size": 3,
                    "total_length": 1,
                    "total_size": 4
                },
                "bVar8": {
                    "byte_flag": 1,
                    "flag": 3,
                    "increment_value": 1,
                    "is_backslash": 1,
                    "is_byte_char": 1,
                    "is_forward_slash": 1,
                    "is_incremented": 1,
                    "is_negative": 13,
                    "is_odd": 1,
                    "is_reverse": 2,
                    "is_reversed": 3,
                    "is_slash": 1,
                    "offset": 1,
                    "should_decrement": 1
                },
                "cVar2": {
                    "char": 1,
                    "character": 1,
                    "current_char": 21
                },
                "cvar2": {
                    "current_char": 1
                },
                "lVar1": {
                    "filename_size": 1,
                    "final_length": 1,
                    "new_length": 1,
                    "new_string_length": 1,
                    "required_size": 1,
                    "result_length": 1,
                    "total_length": 15,
                    "total_size": 4,
                    "total_size_plus_length": 1
                },
                "param_1": {
                    "file_path": 10,
                    "filepath": 1,
                    "input_path": 4,
                    "input_string": 1,
                    "path": 15
                },
                "param_2": {
                    "file_content": 1,
                    "file_data": 1,
                    "file_name": 6,
                    "file_path": 1,
                    "filename": 8,
                    "input": 1,
                    "input_string": 2,
                    "output_path": 1,
                    "path": 1,
                    "source": 7,
                    "source_string": 2
                },
                "param_3": {
                    "file_name_length": 3,
                    "file_size": 2,
                    "length": 22,
                    "name_length": 2,
                    "string_length": 2
                },
                "pcVar3": {
                    "buffer": 1,
                    "buffer_pointer": 1,
                    "current_char": 7,
                    "current_path_char": 2,
                    "current_pos": 1,
                    "dest": 1,
                    "dest_ptr": 2,
                    "file_path_iterator": 1,
                    "filename_ptr": 1,
                    "input_path_ptr": 1,
                    "new_file_path": 1,
                    "new_path": 1,
                    "output": 2,
                    "output_string": 1,
                    "path_ptr": 3,
                    "pointer1": 1,
                    "ptr1": 2,
                    "source_pointer": 1,
                    "source_ptr": 1
                },
                "pcVar4": {
                    "file_name_pointer": 1,
                    "file_start_ptr": 1,
                    "filename_ptr": 1,
                    "last_slash": 14,
                    "last_slash_index": 1,
                    "last_slash_pos": 2,
                    "last_slash_position": 1,
                    "last_slash_ptr": 6,
                    "pointer2": 1,
                    "ptr2": 2,
                    "separator": 1
                },
                "uVar5": {
                    "err_message": 1,
                    "err_msg": 2,
                    "error_message": 18,
                    "error_msg": 4,
                    "error_str": 1,
                    "error_string": 5
                },
                "uVar6": {
                    "copy_length": 2,
                    "count": 1,
                    "iterator": 1,
                    "loop_counter": 2,
                    "remaining_length": 20,
                    "remaining_size": 5
                },
                "uVar7": {
                    "difference": 1,
                    "file_name_length": 2,
                    "file_name_offset": 1,
                    "file_path_length": 2,
                    "file_subpath_length": 1,
                    "filename_size": 1,
                    "filepath_length": 1,
                    "index": 1,
                    "input_length": 1,
                    "name_length": 1,
                    "path_length": 13,
                    "path_size": 1,
                    "prefix_size": 1,
                    "ptr_difference": 1,
                    "segment_size": 1,
                    "slash_position": 1,
                    "start_index": 1
                }
            },
            "called": [
                "dcgettext",
                "error",
                "malloc"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "code": "\nchar * extract_file_name_from_path_00102cc4(char *path,char *filename,ulong length)\n\n{\n  ulong allocated_size;\n  long total_length;\n  char current_char;\n  char *current_char;\n  char *last_slash;\n  undefined8 error_message;\n  ulong remaining_length;\n  ulong path_length;\n  byte is_negative;\n  \n  is_negative = 0;\n  current_char = path;\n  last_slash = path;\n  while (current_char = *current_char, current_char != '\\0') {\n    current_char = current_char + 1;\n    if (current_char == '/') {\n      last_slash = current_char;\n    }\n  }\n  if ((*filename == '/') || (path == last_slash)) {\n    if (length + 1 == 0) {\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(length + 1);\n    remaining_length = length;\n    current_char = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_length != 0; remaining_length = remaining_length - 1) {\n        *current_char = *filename;\n        filename = filename + (ulong)is_negative * -2 + 1;\n        current_char = current_char + (ulong)is_negative * -2 + 1;\n      }\n      last_slash[length] = '\\0';\n      return last_slash;\n    }\n  }\n  else {\n    path_length = (long)last_slash - (long)path;\n    total_length = path_length + length;\n    remaining_length = length;\n    if (length <= path_length) {\n      remaining_length = path_length;\n    }\n    allocated_size = total_length + 1;\n    if (allocated_size < remaining_length) {\n      error_message = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      error(error_message,length);\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(allocated_size);\n    current_char = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; path_length != 0; path_length = path_length - 1) {\n        *current_char = *path;\n        path = path + (ulong)is_negative * -2 + 1;\n        current_char = current_char + (ulong)is_negative * -2 + 1;\n      }\n      for (; length != 0; length = length - 1) {\n        *current_char = *filename;\n        filename = filename + (ulong)is_negative * -2 + 1;\n        current_char = current_char + (ulong)is_negative * -2 + 1;\n      }\n      last_slash[total_length] = '\\0';\n      return last_slash;\n    }\n  }\n  error_message = dcgettext(0,\"Out of memory\\n\",5);\n  error(error_message);\n  return (char *)0x0;\n}\n\n",
            "current_name": "extract_file_name_from_path_00102cc4",
            "entrypoint": "0x00102cc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102cc4": "extract_file_name_from_path_00102cc4",
                "__size": "allocated_size",
                "bVar8": "is_negative",
                "cVar2": "current_char",
                "lVar1": "total_length",
                "param_1": "path",
                "param_2": "filename",
                "param_3": "length",
                "pcVar3": "current_char",
                "pcVar4": "last_slash",
                "uVar5": "error_message",
                "uVar6": "remaining_length",
                "uVar7": "path_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f65": {
            "additional_data": {
                "FUN_00102f65": {
                    "cleanup_memory": 1,
                    "clear_memory": 6,
                    "deallocate_resources": 1,
                    "free_memory": 18,
                    "free_memory_and_reset": 2,
                    "free_memory_blocks": 2,
                    "free_pointers": 1
                },
                "NULL": {
                    "0x0": 1
                },
                "ZEXT816": {
                    "zero_extend": 1,
                    "zero_extension": 1
                },
                "free": {
                    "release": 1
                },
                "memoryBlocks": {
                    "memory_blocks": 1
                },
                "param_1": {
                    "memory": 3,
                    "memory_address": 1,
                    "memory_addresses": 1,
                    "memory_block": 3,
                    "memory_blocks": 9,
                    "memory_chunks": 1,
                    "memory_pointer": 1,
                    "memory_pointers": 2,
                    "memory_ptr": 2,
                    "memory_to_free": 1,
                    "pointer": 1,
                    "pointer_array": 1,
                    "pointers": 4,
                    "resources": 1
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "code": "\nvoid free_memory_and_reset_00102f65(void **memory_blocks)\n\n{\n  release(*memory_blocks);\n  release(memory_blocks[3]);\n  release(memory_blocks[4]);\n  release(memory_blocks[6]);\n  *memory_blocks = (void *)0x0;\n  memory_blocks[6] = (void *)0x0;\n  *(undefined (*) [16])(memory_blocks + 3) = zero_extension(0);\n  return;\n}\n\n",
            "current_name": "free_memory_and_reset_00102f65",
            "entrypoint": "0x00102f65",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f65": "free_memory_and_reset_00102f65",
                "ZEXT816": "zero_extension",
                "free": "release",
                "param_1": "memory_blocks"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fa0": {
            "additional_data": {
                "DAT_00107040": {
                    "lookup_table": 1,
                    "validity_array": 1
                },
                "FUN_00102fa0": {
                    "skip_characters": 1,
                    "skip_invalid_bytes": 2,
                    "skip_invalid_chars": 1,
                    "skip_leading_whitespace": 1,
                    "skip_non_alpha_chars": 1,
                    "skip_non_alphabetic_characters": 1,
                    "skip_non_alphabetic_chars": 1,
                    "skip_non_ascii_characters": 3,
                    "skip_non_ascii_chars": 1,
                    "skip_non_data_characters": 1,
                    "skip_non_executable_bytes": 2,
                    "skip_non_executable_code": 1,
                    "skip_non_printable_chars": 1,
                    "skip_non_relevant_bytes": 3,
                    "skip_non_set_bits": 1,
                    "skip_non_whitespace_characters": 1,
                    "skip_nonprintable_chars": 2,
                    "skip_not_set_bits": 1,
                    "skip_to_next_non_matching_byte": 1,
                    "skip_to_non_control_character": 1,
                    "skip_to_non_flagged_byte": 1,
                    "skip_to_non_flagged_data": 1,
                    "skip_to_non_matching_byte": 1,
                    "skip_until_non_reversed_bit_set": 1
                },
                "param_1": {
                    "byte_array": 5,
                    "byte_array_ptr": 2,
                    "byte_pointer": 2,
                    "byte_ptr": 1,
                    "bytes": 1,
                    "data": 1,
                    "data_pointer": 4,
                    "data_ptr": 6,
                    "input_bytes": 1,
                    "input_data": 1,
                    "input_string": 3,
                    "ptr_data": 1,
                    "remaining_bytes": 1,
                    "string_ptr": 1
                },
                "ulong": {
                    "index": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid skip_non_ascii_characters_00102fa0(byte **data_ptr)\n\n{\n  while (((&DAT_00107040)[(index)**data_ptr * 2] & 0x40) != 0) {\n    *data_ptr = *data_ptr + 1;\n  }\n  return;\n}\n\n",
            "current_name": "skip_non_ascii_characters_00102fa0",
            "entrypoint": "0x00102fa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fa0": "skip_non_ascii_characters_00102fa0",
                "param_1": "data_ptr",
                "ulong": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fbc": {
            "additional_data": {
                "DAT_": {
                    "unchanged": 1
                },
                "FUN_00102fbc": {
                    "exit_function": 2,
                    "exit_program": 23,
                    "exit_with_error": 6
                },
                "PTR_": {
                    "unchanged": 1
                }
            },
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_00102fc7",
                "FUN_00103bf0"
            ],
            "code": "\nvoid exit_program_00102fbc(void)\n\n{\n                    \n  exit(1);\n}\n\n",
            "current_name": "exit_program_00102fbc",
            "entrypoint": "0x00102fbc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fbc": "exit_program_00102fbc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fc7": {
            "additional_data": {
                "FUNC_00105370": {
                    "allocate_memory": 2
                },
                "FUN_00102fc7": {
                    "allocate_and_format_error_message": 1,
                    "allocate_memory": 6,
                    "allocate_memory_and_build_string": 1,
                    "allocate_memory_and_copy_strings": 6,
                    "allocate_memory_and_format_error_message": 4,
                    "allocate_memory_and_format_string": 2,
                    "allocate_memory_and_print_error": 1,
                    "allocate_memory_and_print_error_message": 6,
                    "allocate_memory_and_print_message": 2,
                    "allocate_memory_error": 1
                },
                "__ptr": {
                    "error_file": 4,
                    "error_output": 1,
                    "error_output_file": 1,
                    "error_stream": 10,
                    "file_descriptor": 1,
                    "file_pointer": 6,
                    "file_stream": 1,
                    "output_stream": 1,
                    "stderr": 1,
                    "stderr_file": 1,
                    "stderr_file_pointer": 1,
                    "stderr_ptr": 1,
                    "stderr_stream": 1
                },
                "__s": {
                    "error_message": 2,
                    "error_message_format": 2,
                    "error_message_template": 1,
                    "error_string": 1,
                    "format_specifier": 1,
                    "format_string": 20,
                    "message": 1,
                    "message_format": 1,
                    "message_template": 1
                },
                "apcStack_e0": {
                    "char_array": 1,
                    "constant_strings": 1,
                    "error_string_stack": 1,
                    "message_stack": 1,
                    "ptr_stack": 1,
                    "stack_array": 3,
                    "string_array": 7,
                    "string_array_buffer": 2,
                    "string_stack": 8,
                    "strings_array": 2,
                    "temp_array": 1,
                    "temp_string_array": 1
                },
                "bVar9": {
                    "b_var": 1,
                    "backward_step": 1,
                    "backwards": 1,
                    "buffer_index": 1,
                    "byte_flag": 3,
                    "byte_value": 1,
                    "byte_var": 1,
                    "byte_variable": 1,
                    "counter": 1,
                    "flag": 1,
                    "increment": 1,
                    "invert_flag": 1,
                    "is_backward": 1,
                    "is_backwards": 1,
                    "is_negative": 3,
                    "is_negative_byte": 1,
                    "is_odd_length": 1,
                    "loop_flag": 2,
                    "reverse_direction": 1,
                    "reverse_flag": 2,
                    "switch_flag": 1,
                    "toggle": 2,
                    "toggle_variable": 1
                },
                "cVar1": {
                    "exit_code": 2,
                    "exit_flag": 15,
                    "exit_program": 2,
                    "exit_program_flag": 1,
                    "exit_status": 1,
                    "return_value": 1
                },
                "extraout_RDX": {
                    "extra_input": 1,
                    "extra_output1": 1,
                    "extra_output_rdx": 1,
                    "extra_size": 1,
                    "total_bytes": 1
                },
                "extraout_XMM0_Qa": {
                    "exit_code": 1,
                    "extra_data": 1,
                    "extra_output2": 1,
                    "extra_output_xmm0_qa": 1
                },
                "lStack_b8": {
                    "adjusted_break": 1,
                    "allocated_memory": 1,
                    "allocated_memory_offset": 1,
                    "break_ptr_offset": 1,
                    "buffer_offset": 1,
                    "calculated_value1": 1,
                    "current_ptr": 1,
                    "current_stack_offset": 1,
                    "delta_brk": 1,
                    "heap_offset": 5,
                    "heap_size": 2,
                    "heap_start": 1,
                    "heap_start_position": 1,
                    "memory_allocation_offset": 1,
                    "memory_offset": 2,
                    "stack_array_start": 1,
                    "stack_offset": 1,
                    "string_array_buffer_offset": 1,
                    "string_array_start": 2,
                    "string_stack_offset": 1,
                    "temporary_value2": 1
                },
                "lVar7": {
                    "str_length": 1,
                    "string_length_accumulator": 1,
                    "total_length": 5,
                    "total_string_length": 3
                },
                "param_1": {
                    "input_data": 1,
                    "input_parameter": 1,
                    "input_size": 3,
                    "input_value": 1,
                    "num_bytes": 4,
                    "requested_bytes": 2,
                    "size": 15,
                    "total_bytes": 4
                },
                "pcVar10": {
                    "current_pointer": 1,
                    "current_string": 1
                },
                "pcVar11": {
                    "prev_string": 1
                },
                "pcVar5": {
                    "allocated_memory": 12,
                    "allocated_string": 1,
                    "formatted_error_message": 3,
                    "formatted_message": 1,
                    "formatted_string": 2,
                    "message": 1,
                    "output_string": 2,
                    "result": 4,
                    "result_string": 3,
                    "string_result": 1
                },
                "pcVar6": {
                    "current_string": 2
                },
                "pcVar8": {
                    "current_char": 14,
                    "current_char_ptr": 1,
                    "current_character": 3,
                    "current_result_ptr": 1,
                    "current_string": 2,
                    "formatted_string": 1,
                    "formatted_string_pointer": 1,
                    "message_buffer": 1,
                    "message_pointer": 1,
                    "output_char": 1,
                    "output_string": 1,
                    "result_pointer": 1,
                    "result_ptr": 1,
                    "source_string": 1,
                    "string_pointer": 1
                },
                "ppcVar10": {
                    "array_pointer": 1,
                    "current_array_ptr": 1,
                    "current_ptr": 2,
                    "current_ptr_array": 1,
                    "current_stack_ptr": 1,
                    "current_string": 1,
                    "current_string_array": 3,
                    "current_string_ptr": 2,
                    "pointer_array": 2,
                    "previous_string_pointer": 1,
                    "stack_ptr": 1,
                    "string_array": 6,
                    "string_array_pointer": 2,
                    "string_array_ptr": 1,
                    "string_pointer": 1,
                    "string_ptr": 1,
                    "temp_string": 1
                },
                "ppcVar11": {
                    "current_array_pointer": 1,
                    "next_array_pointer": 1,
                    "next_array_ptr": 1,
                    "next_ptr": 1,
                    "next_ptr_array": 1,
                    "next_string": 1,
                    "next_string_array": 2,
                    "next_string_array_pointer": 1,
                    "next_string_pointer": 1,
                    "next_string_ptr": 2,
                    "pointer_array2": 1,
                    "prev_string_array": 3,
                    "previous_pointer": 1,
                    "previous_ptr": 1,
                    "previous_stack_ptr": 1,
                    "previous_string": 1,
                    "previous_string_array": 1,
                    "previous_string_pointer": 1,
                    "previous_string_ptr": 1,
                    "string_array_pointer": 1,
                    "temp_array_ptr": 1,
                    "temp_pointer_array": 1,
                    "temp_string_array_pointer": 1,
                    "temp_string_array_ptr": 1,
                    "temp_string_pointer": 1
                },
                "ppcVar6": {
                    "array_pointer": 1,
                    "current_pointer": 1,
                    "current_string": 10,
                    "current_string_pointer": 3,
                    "current_string_ptr": 3,
                    "pointer_array": 1,
                    "ptr_array": 1,
                    "string_array": 2,
                    "string_array_pointer": 2,
                    "string_pointer": 1,
                    "temp_string_array": 1
                },
                "pvVar2": {
                    "current_break": 9,
                    "current_break_ptr": 2,
                    "current_brk": 2,
                    "current_heap": 1,
                    "current_heap_address": 2,
                    "current_heap_end": 4,
                    "current_heap_pointer": 2,
                    "current_memory": 1,
                    "current_memory_location": 1,
                    "current_memory_ptr": 1,
                    "heap_end": 2,
                    "heap_ptr": 1,
                    "memory_end": 1
                },
                "register0x00000020": {
                    "register_pointer": 1
                },
                "sVar3": {
                    "length": 2,
                    "str_length": 1,
                    "string_length": 25,
                    "strlen_result": 2
                },
                "uStack_28": {
                    "input_copy": 1,
                    "input_num_bytes": 1,
                    "input_param": 1,
                    "input_parameter_copy2": 1,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "input_size_copy": 1,
                    "num_bytes_copy": 1,
                    "original_input": 1,
                    "original_param_backup": 1,
                    "original_size_copy": 1,
                    "param1": 1,
                    "param1_copy": 2,
                    "param1_copy2": 1,
                    "param_1": 1,
                    "param_1_copy2": 4,
                    "param_1_copy_copy": 2,
                    "param_1_original": 1,
                    "parameter": 1,
                    "parameter_copy": 1,
                    "saved_input_data": 1,
                    "size_copy": 1,
                    "temporary_value4": 1
                },
                "uStack_b0": {
                    "exit_code": 1,
                    "exit_data": 1,
                    "exit_program_result": 1,
                    "exit_result": 1,
                    "exit_status": 1,
                    "exit_value": 2,
                    "extra_data": 1,
                    "extra_output": 4,
                    "extra_output_value": 1,
                    "extra_result": 2,
                    "extra_ret_value": 1,
                    "extra_return": 1,
                    "extra_return_value": 4,
                    "extra_val": 1,
                    "extra_value": 2,
                    "extraout_param": 1,
                    "extraout_xmm0_qa": 1,
                    "extraout_xmm0_qa_copy": 1,
                    "temporary_value3": 1
                },
                "uStack_c0": {
                    "argument": 1,
                    "error_message_ptr": 1,
                    "extra_output": 1,
                    "input_bytes": 1,
                    "input_copy": 1,
                    "input_parameter_copy": 1,
                    "input_size": 3,
                    "original_param": 1,
                    "original_size": 1,
                    "output_data": 1,
                    "param1_copy": 3,
                    "param_1": 1,
                    "param_1_copy": 9,
                    "parameter": 1,
                    "temporary_value1": 1,
                    "total_bytes": 1
                },
                "uStack_f8": {
                    "buffer_size": 1,
                    "counter": 2,
                    "current_offset": 1,
                    "current_stack_size": 1,
                    "current_string_length": 1,
                    "index": 1,
                    "stack_counter": 2,
                    "stack_frame_size": 1,
                    "stack_size": 5,
                    "stack_value": 2,
                    "stack_value1": 1,
                    "stack_variable": 1,
                    "string_array_index": 2,
                    "string_array_size": 2
                },
                "uVar4": {
                    "dynamic_size": 1,
                    "increment": 1,
                    "index": 1,
                    "num_bytes_assigned": 1,
                    "stack_index": 1,
                    "stack_size": 1,
                    "temp": 3,
                    "temp_size": 4,
                    "temp_value": 7,
                    "temp_var": 4,
                    "temp_variable": 1,
                    "u_stack": 1,
                    "ulong_var": 1,
                    "ulong_variable": 1
                }
            },
            "called": [
                "sbrk",
                "FUN_00102fbc",
                "fprintf"
            ],
            "calling": [
                "FUN_00103449",
                "FUN_00102cbc"
            ],
            "code": "\n\n\nchar * allocate_memory_and_print_error_message_00102fc7(undefined8 size)\n\n{\n  char exit_flag;\n  void *current_break;\n  size_t string_length;\n  ulong temp_value;\n  char *allocated_memory;\n  char **current_string;\n  undefined8 extra_output_rdx;\n  long total_length;\n  char *format_string;\n  FILE *error_stream;\n  char *current_char;\n  byte is_negative;\n  undefined8 extra_data;\n  uint stack_size;\n  char **string_array;\n  char **prev_string_array;\n  char *string_stack [4];\n  undefined8 param_1_copy;\n  long heap_offset;\n  undefined8 extra_return_value;\n  undefined8 param_1_copy2;\n  \n  is_negative = 0;\n  current_break = sbrk(0);\n  heap_offset = (long)current_break + -0x10a0e0;\n  string_stack[3] = \"\";\n  format_string = \"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\";\n  error_stream = _stderr;\n  param_1_copy = size;\n  fprintf(_stderr,\"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\");\n  exit_flag = exit_program_00102fbc();\n  if (exit_flag != '\\0') {\n    extra_return_value = extra_data;\n  }\n  total_length = 0;\n  stack_size = 0x10;\n  current_char = format_string;\n  string_array = (char **)register_pointer;\n  string_stack[2] = (char *)extra_output_rdx;\n  param_1_copy2 = size;\n  do {\n    string_length = strlen(current_char);\n    total_length = total_length + string_length;\n    if (stack_size < 0x30) {\n      temp_value = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      current_string = (char **)((long)string_stack + temp_value);\n      prev_string_array = string_array;\n    }\n    else {\n      prev_string_array = string_array + 1;\n      current_string = string_array;\n    }\n    current_char = *current_string;\n    string_array = prev_string_array;\n  } while (current_char != (char *)0x0);\n  allocated_memory = (char *)extract_file_name_from_path_00105370(total_length + 1);\n  stack_size = 0x10;\n  current_char = allocated_memory;\n  string_array = (char **)register_pointer;\n  do {\n    string_length = strlen(format_string);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *current_char = *format_string;\n      format_string = format_string + (ulong)is_negative * -2 + 1;\n      current_char = current_char + (ulong)is_negative * -2 + 1;\n    }\n    if (stack_size < 0x30) {\n      temp_value = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      current_string = (char **)((long)string_stack + temp_value);\n      prev_string_array = string_array;\n    }\n    else {\n      prev_string_array = string_array + 1;\n      current_string = string_array;\n    }\n    format_string = *current_string;\n    string_array = prev_string_array;\n  } while (format_string != (char *)0x0);\n  *current_char = '\\0';\n  free(error_stream);\n  return allocated_memory;\n}\n\n",
            "code_backup": "\n\n\nchar * FUN_00102fc7(undefined8 param_1)\n\n{\n  char cVar1;\n  void *pvVar2;\n  size_t sVar3;\n  ulong uVar4;\n  char *pcVar5;\n  char **ppcVar6;\n  undefined8 extraout_RDX;\n  long lVar7;\n  char *__s;\n  FILE *__ptr;\n  char *pcVar8;\n  byte bVar9;\n  undefined8 extraout_XMM0_Qa;\n  uint uStack_f8;\n  char **ppcVar10;\n  char **ppcVar11;\n  char *apcStack_e0 [4];\n  undefined8 uStack_c0;\n  long lStack_b8;\n  undefined8 uStack_b0;\n  undefined8 uStack_28;\n  \n  bVar9 = 0;\n  pvVar2 = sbrk(0);\n  lStack_b8 = (long)pvVar2 + -0x10a0e0;\n  apcStack_e0[3] = \"\";\n  __s = \"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\";\n  __ptr = _stderr;\n  uStack_c0 = param_1;\n  fprintf(_stderr,\"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\");\n  cVar1 = exit_program_00102fbc();\n  if (cVar1 != '\\0') {\n    uStack_b0 = extraout_XMM0_Qa;\n  }\n  lVar7 = 0;\n  uStack_f8 = 0x10;\n  pcVar8 = __s;\n  ppcVar10 = (char **)register0x00000020;\n  apcStack_e0[2] = (char *)extraout_RDX;\n  uStack_28 = param_1;\n  do {\n    sVar3 = strlen(pcVar8);\n    lVar7 = lVar7 + sVar3;\n    if (uStack_f8 < 0x30) {\n      uVar4 = (ulong)uStack_f8;\n      uStack_f8 = uStack_f8 + 8;\n      ppcVar6 = (char **)((long)apcStack_e0 + uVar4);\n      ppcVar11 = ppcVar10;\n    }\n    else {\n      ppcVar11 = ppcVar10 + 1;\n      ppcVar6 = ppcVar10;\n    }\n    pcVar8 = *ppcVar6;\n    ppcVar10 = ppcVar11;\n  } while (pcVar8 != (char *)0x0);\n  pcVar5 = (char *)FUNC_00105370(lVar7 + 1);\n  uStack_f8 = 0x10;\n  pcVar8 = pcVar5;\n  ppcVar10 = (char **)register0x00000020;\n  do {\n    sVar3 = strlen(__s);\n    for (; sVar3 != 0; sVar3 = sVar3 - 1) {\n      *pcVar8 = *__s;\n      __s = __s + (ulong)bVar9 * -2 + 1;\n      pcVar8 = pcVar8 + (ulong)bVar9 * -2 + 1;\n    }\n    if (uStack_f8 < 0x30) {\n      uVar4 = (ulong)uStack_f8;\n      uStack_f8 = uStack_f8 + 8;\n      ppcVar6 = (char **)((long)apcStack_e0 + uVar4);\n      ppcVar11 = ppcVar10;\n    }\n    else {\n      ppcVar11 = ppcVar10 + 1;\n      ppcVar6 = ppcVar10;\n    }\n    __s = *ppcVar6;\n    ppcVar10 = ppcVar11;\n  } while (__s != (char *)0x0);\n  *pcVar8 = '\\0';\n  free(__ptr);\n  return pcVar5;\n}\n\n",
            "current_name": "allocate_memory_and_print_error_message_00102fc7",
            "entrypoint": "0x00102fc7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fc7": "allocate_memory_and_print_error_message_00102fc7",
                "__ptr": "error_stream",
                "__s": "format_string",
                "apcStack_e0": "string_stack",
                "bVar9": "is_negative",
                "cVar1": "exit_flag",
                "extraout_RDX": "extra_output_rdx",
                "extraout_XMM0_Qa": "extra_data",
                "lStack_b8": "heap_offset",
                "lVar7": "total_length",
                "param_1": "size",
                "pcVar10": "current_pointer",
                "pcVar11": "prev_string",
                "pcVar5": "allocated_memory",
                "pcVar6": "current_string",
                "pcVar8": "current_char",
                "ppcVar10": "string_array",
                "ppcVar11": "prev_string_array",
                "ppcVar6": "current_string",
                "pvVar2": "current_break",
                "register0x00000020": "register_pointer",
                "sVar3": "string_length",
                "uStack_28": "param_1_copy2",
                "uStack_b0": "extra_return_value",
                "uStack_c0": "param_1_copy",
                "uStack_f8": "stack_size",
                "uVar4": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103006": {
            "additional_data": {
                "FUN_00103006": {
                    "concatenate_strings": 1,
                    "copy_and_concat_strings": 1,
                    "copy_and_concatenate_strings": 4,
                    "copy_string": 1,
                    "copy_string_and_free_memory": 1,
                    "copy_strings_with_free": 1,
                    "process_string": 3,
                    "reverse_and_concatenate_strings": 1,
                    "reverse_and_free_string": 2,
                    "reverse_string": 10,
                    "reverse_string_and_free_memory": 1,
                    "string_concatenation": 5
                },
                "bVar7": {
                    "b_value": 1,
                    "bool_value": 1,
                    "byte_flag": 2,
                    "byte_val": 1,
                    "byte_value": 1,
                    "byte_var": 1,
                    "char_inc": 1,
                    "counter": 1,
                    "current_index": 1,
                    "flag": 1,
                    "flag2": 1,
                    "found_null": 1,
                    "increment": 4,
                    "invert_bit": 1,
                    "is_alternative_flag": 1,
                    "is_first_iteration": 1,
                    "is_negative": 1,
                    "is_positive": 1,
                    "is_reversed": 1,
                    "is_reversed_flag": 1,
                    "iteration_flag": 1,
                    "next_character": 1,
                    "null_terminator": 1,
                    "reverse_direction": 2,
                    "temp_byte": 1
                },
                "in_AL": {
                    "condition": 4,
                    "condition_flag": 1,
                    "enable_flag": 1,
                    "flag": 12,
                    "include_empty_strings": 1,
                    "input_flag": 1,
                    "is_copy_needed": 1,
                    "is_non_zero": 1,
                    "is_reverse": 1,
                    "is_reversed": 1,
                    "null_check": 1,
                    "null_terminated": 1,
                    "start_from_pattern": 1
                },
                "lVar5": {
                    "length": 3,
                    "str_length_sum": 1,
                    "total_length": 20,
                    "total_string_length": 1
                },
                "local_38": {
                    "arg8_copy": 1,
                    "input8_copy": 1,
                    "local13": 1,
                    "local_address10": 1,
                    "local_data8": 1,
                    "local_param8": 3,
                    "local_source8": 1,
                    "local_string8": 1,
                    "local_var10": 1,
                    "local_var11": 1,
                    "local_var8": 1,
                    "param12": 1,
                    "param8": 2,
                    "param8_copy": 1,
                    "param8_value": 1,
                    "param_8": 1,
                    "param_buffer10": 1,
                    "size8": 1,
                    "size_param_8_copy": 1,
                    "source8_copy": 2,
                    "temp_local38": 1,
                    "temp_param10": 1,
                    "temp_param8": 1,
                    "unused14": 1,
                    "var8_copy1": 1,
                    "var_38": 1
                },
                "local_48": {
                    "arg7_copy": 1,
                    "input7_copy": 1,
                    "local12": 1,
                    "local_address9": 1,
                    "local_data7": 1,
                    "local_param7": 3,
                    "local_source7": 1,
                    "local_string7": 1,
                    "local_var10": 1,
                    "local_var7": 1,
                    "local_var9": 1,
                    "param11": 1,
                    "param7": 2,
                    "param7_copy": 1,
                    "param7_value": 1,
                    "param_7": 1,
                    "param_buffer9": 1,
                    "size7": 1,
                    "size_param_7_copy": 1,
                    "source7_copy": 2,
                    "temp_local48": 1,
                    "temp_param7": 1,
                    "temp_param9": 1,
                    "unused13": 1,
                    "var7_copy1": 1,
                    "var_48": 1
                },
                "local_58": {
                    "arg6_copy": 1,
                    "input6_copy": 1,
                    "local11": 1,
                    "local_address8": 1,
                    "local_data6": 1,
                    "local_param6": 3,
                    "local_source6": 1,
                    "local_string6": 1,
                    "local_var6": 1,
                    "local_var8": 1,
                    "local_var9": 1,
                    "param10": 1,
                    "param6": 2,
                    "param6_copy": 1,
                    "param6_value": 1,
                    "param_6": 1,
                    "param_buffer8": 1,
                    "size6": 1,
                    "size_param_6_copy": 1,
                    "source6_copy": 2,
                    "temp_local58": 1,
                    "temp_param6": 1,
                    "temp_param8": 1,
                    "unused12": 1,
                    "var6_copy1": 1,
                    "var_58": 1
                },
                "local_68": {
                    "arg5_copy": 1,
                    "input5_copy": 1,
                    "local10": 1,
                    "local_address7": 1,
                    "local_data5": 1,
                    "local_param5": 3,
                    "local_source5": 1,
                    "local_string5": 1,
                    "local_var5": 1,
                    "local_var7": 1,
                    "local_var8": 1,
                    "param5": 2,
                    "param5_copy": 1,
                    "param5_value": 1,
                    "param9": 1,
                    "param_5": 1,
                    "param_buffer7": 1,
                    "size5": 1,
                    "size_param_5_copy": 1,
                    "source5_copy": 2,
                    "temp_local68": 1,
                    "temp_param5": 1,
                    "temp_param7": 1,
                    "unused11": 1,
                    "var5_copy1": 1,
                    "var_68": 1
                },
                "local_78": {
                    "arg4_copy": 1,
                    "input4_copy": 1,
                    "local9": 1,
                    "local_address6": 1,
                    "local_data4": 1,
                    "local_param4": 3,
                    "local_source4": 1,
                    "local_string4": 1,
                    "local_var4": 1,
                    "local_var6": 1,
                    "local_var7": 1,
                    "param4": 2,
                    "param4_copy": 1,
                    "param4_value": 1,
                    "param8": 1,
                    "param_4": 1,
                    "param_buffer6": 1,
                    "size4": 1,
                    "size_param_4_copy": 1,
                    "source4_copy": 2,
                    "temp_local78": 1,
                    "temp_param4": 1,
                    "temp_param6": 1,
                    "unused10": 1,
                    "var4_copy1": 1,
                    "var_78": 1
                },
                "local_88": {
                    "arg3_copy": 1,
                    "input3_copy": 1,
                    "local8": 1,
                    "local_address5": 1,
                    "local_data3": 1,
                    "local_param3": 3,
                    "local_source3": 1,
                    "local_string3": 1,
                    "local_var3": 1,
                    "local_var5": 1,
                    "local_var6": 1,
                    "param3": 2,
                    "param3_copy": 1,
                    "param3_value": 1,
                    "param7": 1,
                    "param_3": 1,
                    "param_buffer5": 1,
                    "size3": 1,
                    "size_param_3_copy": 1,
                    "source3_copy": 2,
                    "temp_local88": 1,
                    "temp_param3": 1,
                    "temp_param5": 1,
                    "unused9": 1,
                    "var3_copy1": 1,
                    "var_88": 1
                },
                "local_98": {
                    "arg2_copy": 1,
                    "input2_copy": 1,
                    "local7": 1,
                    "local_address4": 1,
                    "local_data2": 1,
                    "local_param2": 3,
                    "local_source2": 1,
                    "local_string2": 1,
                    "local_var2": 1,
                    "local_var4": 1,
                    "local_var5": 1,
                    "param2": 2,
                    "param2_copy": 1,
                    "param2_value": 1,
                    "param6": 1,
                    "param_2": 1,
                    "param_buffer4": 1,
                    "size2": 1,
                    "size_param_2_copy": 1,
                    "source2_copy": 2,
                    "temp_local98": 1,
                    "temp_param2": 1,
                    "temp_param4": 1,
                    "unused8": 1,
                    "var2_copy1": 1,
                    "var_98": 1
                },
                "local_a8": {
                    "arg1_copy": 1,
                    "input1_copy": 1,
                    "local6": 1,
                    "local_address3": 1,
                    "local_data1": 1,
                    "local_param1": 3,
                    "local_source1": 1,
                    "local_string1": 1,
                    "local_var1": 1,
                    "local_var3": 1,
                    "local_var4": 1,
                    "param1": 2,
                    "param1_copy": 1,
                    "param1_value": 1,
                    "param5": 1,
                    "param_1": 1,
                    "param_buffer3": 1,
                    "size1": 1,
                    "size_param_copy": 1,
                    "source1_copy": 2,
                    "temp_local_a8": 1,
                    "temp_param1": 1,
                    "temp_param3": 1,
                    "unused7": 1,
                    "var1_copy1": 1,
                    "var_a8": 1
                },
                "local_b0": {
                    "local5": 1,
                    "local_address2": 1,
                    "local_long_value2": 1,
                    "local_param14": 4,
                    "local_var2": 2,
                    "local_var3": 1,
                    "long_value_2": 1,
                    "param14": 3,
                    "param14_copy": 4,
                    "param14_value": 1,
                    "param4": 1,
                    "param_14": 1,
                    "param_14_copy": 1,
                    "param_buffer2": 1,
                    "temp_local_b0": 1,
                    "temp_param2": 1,
                    "temp_value2": 1,
                    "unused6": 1,
                    "unused_param14": 1,
                    "var8_copy2": 1,
                    "var_b0": 1
                },
                "local_b8": {
                    "local4": 1,
                    "local_address1": 1,
                    "local_long_value1": 1,
                    "local_param13": 4,
                    "local_var1": 2,
                    "local_var2": 1,
                    "long_value_1": 1,
                    "param13": 3,
                    "param13_copy": 4,
                    "param13_value": 1,
                    "param3": 1,
                    "param_13": 1,
                    "param_13_copy": 1,
                    "param_buffer1": 1,
                    "temp_local_b8": 1,
                    "temp_param1": 1,
                    "temp_value1": 1,
                    "unused5": 1,
                    "unused_param13": 1,
                    "var8_copy1": 1,
                    "var_b8": 1
                },
                "local_d8": {
                    "char_array": 1,
                    "data_array": 1,
                    "local3": 1,
                    "local_array": 1,
                    "local_buffers": 1,
                    "local_char_buffer": 1,
                    "local_mem_array": 1,
                    "local_params": 1,
                    "local_ptr": 1,
                    "local_string_array": 2,
                    "local_string_buffer": 1,
                    "local_strings": 1,
                    "local_values": 1,
                    "param": 1,
                    "param_array": 2,
                    "pointer_array": 1,
                    "pointer_array2": 1,
                    "pointer_array_buffer": 1,
                    "pointers": 1,
                    "pointers_stack": 1,
                    "ptr_array": 1,
                    "string_buffer": 1,
                    "string_pointers": 2,
                    "temp_local_d8": 1,
                    "unused_stack_pointers": 1,
                    "var_array": 1,
                    "var_d8": 1
                },
                "local_e8": {
                    "array_pointer": 1,
                    "char_ptr_array": 1,
                    "current_array": 1,
                    "local2": 1,
                    "local_array": 2,
                    "local_array_pointer": 2,
                    "local_pointer_array": 2,
                    "local_ptr_array": 1,
                    "local_ptr_ptr": 1,
                    "local_ptrs_array": 1,
                    "local_strings": 1,
                    "pointer_array": 1,
                    "stack_pointer": 1,
                    "stack_pointer_arr": 1,
                    "stack_pointers": 5,
                    "stack_strings": 1,
                    "string_array": 3,
                    "string_pointer_array": 1,
                    "string_ptrs": 1,
                    "temp_local_e8": 1,
                    "var_e8": 1
                },
                "local_f0": {
                    "array_size": 1,
                    "buffer_size": 1,
                    "count": 1,
                    "counter": 2,
                    "counter_var": 1,
                    "current_size": 1,
                    "local1": 1,
                    "local_counter": 2,
                    "local_index": 1,
                    "local_offset": 1,
                    "local_size": 5,
                    "local_var0": 1,
                    "local_var1": 1,
                    "loop_counter": 1,
                    "max_stack": 1,
                    "max_var": 1,
                    "size": 1,
                    "size_flag": 1,
                    "stack_size": 4,
                    "temp_local_f0": 1,
                    "var_f0": 1
                },
                "param_1": {
                    "arg1": 2,
                    "base_address": 1,
                    "data1": 1,
                    "dest_size": 1,
                    "first_arg": 1,
                    "flag1": 1,
                    "input": 1,
                    "input1": 5,
                    "input_1": 1,
                    "input_param1": 1,
                    "length_param": 1,
                    "size": 2,
                    "size1": 2,
                    "size_param": 1,
                    "source1": 5,
                    "src1": 1,
                    "str1": 2,
                    "string1": 1,
                    "var1": 1
                },
                "param_10": {
                    "concatenated_string": 1,
                    "input_string": 9,
                    "output_string": 1,
                    "reversed_string": 1,
                    "source": 1,
                    "source_string": 6,
                    "string": 2,
                    "string_array": 2,
                    "string_to_process": 1,
                    "strings": 3,
                    "strings_array": 2,
                    "target_string": 1
                },
                "param_11": {
                    "address8": 1,
                    "address_1": 1,
                    "arg11": 1,
                    "long_value1": 1,
                    "param11": 16,
                    "param_11": 2,
                    "ptr1": 2,
                    "str1": 1,
                    "string1": 1,
                    "unused1": 1,
                    "unused_param11": 1,
                    "value1": 1,
                    "var11": 1
                },
                "param_12": {
                    "address9": 1,
                    "address_2": 1,
                    "arg12": 1,
                    "long_value2": 1,
                    "param12": 16,
                    "param_12": 2,
                    "ptr2": 2,
                    "str2": 1,
                    "string2": 1,
                    "unused2": 1,
                    "unused_param12": 1,
                    "value2": 1,
                    "var12": 1
                },
                "param_13": {
                    "address10": 1,
                    "arg13": 1,
                    "long_value3": 1,
                    "output_value1": 1,
                    "param1": 1,
                    "param13": 16,
                    "param_13": 2,
                    "string3": 1,
                    "unused3": 1,
                    "unused_param13": 1,
                    "value_1": 1,
                    "var1": 2,
                    "var13": 1
                },
                "param_14": {
                    "address11": 1,
                    "arg14": 1,
                    "long_value4": 1,
                    "output_value2": 1,
                    "param14": 16,
                    "param2": 1,
                    "param_14": 2,
                    "string4": 1,
                    "unused4": 1,
                    "unused_param14": 1,
                    "value_2": 1,
                    "var14": 1,
                    "var2": 2
                },
                "param_2": {
                    "address1": 1,
                    "arg2": 2,
                    "count": 1,
                    "data2": 1,
                    "flag2": 1,
                    "index1": 1,
                    "input2": 5,
                    "input_2": 1,
                    "input_param2": 1,
                    "output": 1,
                    "param_2": 1,
                    "second_arg": 1,
                    "size2": 2,
                    "size_param_2": 1,
                    "source2": 5,
                    "src2": 1,
                    "str2": 2,
                    "var2": 1,
                    "width_param": 1
                },
                "param_3": {
                    "address2": 1,
                    "arg3": 2,
                    "buffer": 1,
                    "data3": 1,
                    "flag3": 1,
                    "height_param": 1,
                    "index2": 1,
                    "input3": 5,
                    "input_3": 1,
                    "input_param3": 1,
                    "length": 1,
                    "param_3": 1,
                    "size3": 2,
                    "size_param_3": 1,
                    "source3": 5,
                    "src3": 1,
                    "str3": 2,
                    "third_arg": 1,
                    "var3": 1
                },
                "param_4": {
                    "address3": 1,
                    "arg4": 2,
                    "color_param": 1,
                    "data4": 1,
                    "flag4": 1,
                    "fourth_arg": 1,
                    "index": 1,
                    "index3": 1,
                    "input4": 5,
                    "input_4": 1,
                    "input_param4": 1,
                    "param_4": 1,
                    "size4": 2,
                    "size_param_4": 1,
                    "source4": 5,
                    "src4": 1,
                    "str4": 2,
                    "string4": 1,
                    "var4": 1
                },
                "param_5": {
                    "address4": 1,
                    "arg5": 2,
                    "data5": 1,
                    "fifth_arg": 1,
                    "flag5": 1,
                    "increment": 1,
                    "index4": 1,
                    "input5": 5,
                    "input_5": 1,
                    "input_param5": 1,
                    "param_5": 1,
                    "size5": 2,
                    "size_param": 1,
                    "size_param_5": 1,
                    "source5": 5,
                    "src5": 1,
                    "str5": 2,
                    "var5": 1
                },
                "param_6": {
                    "address5": 1,
                    "arg6": 2,
                    "data6": 1,
                    "flag6": 1,
                    "index5": 1,
                    "input6": 5,
                    "input_6": 1,
                    "input_param6": 1,
                    "offset": 1,
                    "param_6": 1,
                    "sixth_arg": 1,
                    "size6": 2,
                    "size_param_6": 1,
                    "source6": 5,
                    "src6": 1,
                    "str6": 2,
                    "string6": 1,
                    "var6": 1,
                    "weight_param": 1
                },
                "param_7": {
                    "address": 1,
                    "address6": 1,
                    "angle_param": 1,
                    "arg7": 2,
                    "data7": 1,
                    "flag7": 1,
                    "index6": 1,
                    "input7": 5,
                    "input_7": 1,
                    "input_param7": 1,
                    "param_7": 1,
                    "seventh_arg": 1,
                    "size7": 2,
                    "size_param_7": 1,
                    "source7": 5,
                    "src7": 1,
                    "str7": 2,
                    "var7": 1
                },
                "param_8": {
                    "address7": 1,
                    "arg8": 2,
                    "data8": 1,
                    "eighth_arg": 1,
                    "flag8": 1,
                    "index7": 1,
                    "input8": 5,
                    "input_8": 1,
                    "input_param8": 1,
                    "opacity_param": 1,
                    "param_8": 1,
                    "size8": 2,
                    "size_param_8": 1,
                    "source8": 5,
                    "src8": 1,
                    "str8": 2,
                    "value": 1,
                    "var8": 1
                },
                "param_9": {
                    "allocated_memory": 2,
                    "buffer": 7,
                    "data": 4,
                    "input_buffer": 1,
                    "input_string": 1,
                    "memory": 1,
                    "memory_block": 3,
                    "original_string": 1,
                    "source_string": 1,
                    "src": 1,
                    "str_array": 1,
                    "str_to_reverse": 1,
                    "string": 1,
                    "string_to_free": 2,
                    "string_to_reverse": 2
                },
                "pcVar3": {
                    "copied_string": 1,
                    "output_string": 2,
                    "result": 13,
                    "result_ptr": 1,
                    "result_string": 9,
                    "reverse_string_result": 1,
                    "reversed_string": 1,
                    "reversed_string_mem": 1
                },
                "pcVar6": {
                    "concatenated_string": 1,
                    "copy_ptr": 1,
                    "curr_char": 1,
                    "current_char": 9,
                    "current_char_ptr": 1,
                    "current_character": 1,
                    "current_ptr": 1,
                    "current_string": 7,
                    "dest_string": 1,
                    "dest_string_ptr": 1,
                    "result": 1,
                    "result_pointer": 1,
                    "source_string": 1,
                    "temp_pointer": 1,
                    "temp_string": 2
                },
                "ppcVar4": {
                    "current_ptr": 1,
                    "current_string": 4,
                    "current_string_ptr": 1,
                    "param_ptr": 1,
                    "pointer_array": 2,
                    "ptr_to_current_string": 1,
                    "stack_strings": 1,
                    "str_array": 1,
                    "str_array_pointer": 1,
                    "string_pointer": 4,
                    "string_pointer_array": 1,
                    "string_ptr_ptr": 1,
                    "strings_pointer": 1,
                    "strings_ptr": 1,
                    "temp_pointer_pointer": 1,
                    "temp_ptr": 1
                },
                "sVar1": {
                    "length": 1,
                    "source_string_length": 1,
                    "str_len": 1,
                    "str_length": 3,
                    "string_length": 7,
                    "strlen_result": 1
                },
                "uVar2": {
                    "counter": 1,
                    "index": 1,
                    "local_size": 1,
                    "offset": 1,
                    "size": 1,
                    "temp": 2,
                    "temp_size": 1,
                    "temp_unsigned_var": 1,
                    "temp_var": 4,
                    "ulong_val": 1
                }
            },
            "called": [
                "free",
                "strlen",
                "FUN_00105370"
            ],
            "calling": [
                "FUN_001032de"
            ],
            "code": "\nchar * reverse_string_and_free_memory_00103006(undefined4 source1,undefined4 input2,undefined4 input3,undefined4 input4,\n                   undefined4 input5,undefined4 source6,undefined4 input7,undefined4 input8,\n                   void *buffer,char *input_string,undefined8 param11,undefined8 param12,\n                   undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  size_t string_length;\n  ulong temp_var;\n  char *result;\n  char **string_pointer;\n  long total_length;\n  char *current_char;\n  byte increment;\n  uint local_size;\n  char **stack_pointers;\n  char *string_pointers [4];\n  undefined8 param13_copy;\n  undefined8 local_param14;\n  undefined4 local_param1;\n  undefined4 local_param2;\n  undefined4 local_param3;\n  undefined4 local_param4;\n  undefined4 local_param5;\n  undefined4 local_param6;\n  undefined4 local_param7;\n  undefined4 local_param8;\n  \n  increment = 0;\n  if (flag != '\\0') {\n    local_param1 = source1;\n    local_param2 = input2;\n    local_param3 = input3;\n    local_param4 = input4;\n    local_param5 = input5;\n    local_param6 = source6;\n    local_param7 = input7;\n    local_param8 = input8;\n  }\n  stack_pointers = (char **)&stack0x00000008;\n  total_length = 0;\n  local_size = 0x10;\n  current_char = input_string;\n  string_pointers[2] = (char *)param11;\n  string_pointers[3] = (char *)param12;\n  param13_copy = param13;\n  local_param14 = param14;\n  do {\n    string_length = strlen(current_char);\n    total_length = total_length + string_length;\n    if (local_size < 0x30) {\n      temp_var = (ulong)local_size;\n      local_size = local_size + 8;\n      string_pointer = (char **)((long)string_pointers + temp_var);\n    }\n    else {\n      string_pointer = stack_pointers;\n      stack_pointers = stack_pointers + 1;\n    }\n    current_char = *string_pointer;\n  } while (current_char != (char *)0x0);\n  result = (char *)extract_file_name_from_path_00105370(total_length + 1);\n  local_size = 0x10;\n  stack_pointers = (char **)&stack0x00000008;\n  current_char = result;\n  do {\n    string_length = strlen(input_string);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *current_char = *input_string;\n      input_string = input_string + (ulong)increment * -2 + 1;\n      current_char = current_char + (ulong)increment * -2 + 1;\n    }\n    if (local_size < 0x30) {\n      temp_var = (ulong)local_size;\n      local_size = local_size + 8;\n      string_pointer = (char **)((long)string_pointers + temp_var);\n    }\n    else {\n      string_pointer = stack_pointers;\n      stack_pointers = stack_pointers + 1;\n    }\n    input_string = *string_pointer;\n  } while (input_string != (char *)0x0);\n  *current_char = '\\0';\n  free(buffer);\n  return result;\n}\n\n",
            "code_backup": "\nchar * FUN_00103006(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                   undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                   void *param_9,char *param_10,undefined8 param_11,undefined8 param_12,\n                   undefined8 param_13,undefined8 param_14)\n\n{\n  char in_AL;\n  size_t sVar1;\n  ulong uVar2;\n  char *pcVar3;\n  char **ppcVar4;\n  long lVar5;\n  char *pcVar6;\n  byte bVar7;\n  uint local_f0;\n  char **local_e8;\n  char *local_d8 [4];\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined4 local_a8;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  \n  bVar7 = 0;\n  if (in_AL != '\\0') {\n    local_a8 = param_1;\n    local_98 = param_2;\n    local_88 = param_3;\n    local_78 = param_4;\n    local_68 = param_5;\n    local_58 = param_6;\n    local_48 = param_7;\n    local_38 = param_8;\n  }\n  local_e8 = (char **)&stack0x00000008;\n  lVar5 = 0;\n  local_f0 = 0x10;\n  pcVar6 = param_10;\n  local_d8[2] = (char *)param_11;\n  local_d8[3] = (char *)param_12;\n  local_b8 = param_13;\n  local_b0 = param_14;\n  do {\n    sVar1 = strlen(pcVar6);\n    lVar5 = lVar5 + sVar1;\n    if (local_f0 < 0x30) {\n      uVar2 = (ulong)local_f0;\n      local_f0 = local_f0 + 8;\n      ppcVar4 = (char **)((long)local_d8 + uVar2);\n    }\n    else {\n      ppcVar4 = local_e8;\n      local_e8 = local_e8 + 1;\n    }\n    pcVar6 = *ppcVar4;\n  } while (pcVar6 != (char *)0x0);\n  pcVar3 = (char *)FUNC_00105370(lVar5 + 1);\n  local_f0 = 0x10;\n  local_e8 = (char **)&stack0x00000008;\n  pcVar6 = pcVar3;\n  do {\n    sVar1 = strlen(param_10);\n    for (; sVar1 != 0; sVar1 = sVar1 - 1) {\n      *pcVar6 = *param_10;\n      param_10 = param_10 + (ulong)bVar7 * -2 + 1;\n      pcVar6 = pcVar6 + (ulong)bVar7 * -2 + 1;\n    }\n    if (local_f0 < 0x30) {\n      uVar2 = (ulong)local_f0;\n      local_f0 = local_f0 + 8;\n      ppcVar4 = (char **)((long)local_d8 + uVar2);\n    }\n    else {\n      ppcVar4 = local_e8;\n      local_e8 = local_e8 + 1;\n    }\n    param_10 = *ppcVar4;\n  } while (param_10 != (char *)0x0);\n  *pcVar6 = '\\0';\n  free(param_9);\n  return pcVar3;\n}\n\n",
            "current_name": "reverse_string_and_free_memory_00103006",
            "entrypoint": "0x00103006",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103006": "reverse_string_and_free_memory_00103006",
                "bVar7": "increment",
                "in_AL": "flag",
                "lVar5": "total_length",
                "local_38": "local_param8",
                "local_48": "local_param7",
                "local_58": "local_param6",
                "local_68": "local_param5",
                "local_78": "local_param4",
                "local_88": "local_param3",
                "local_98": "local_param2",
                "local_a8": "local_param1",
                "local_b0": "local_param14",
                "local_b8": "param13_copy",
                "local_d8": "string_pointers",
                "local_e8": "stack_pointers",
                "local_f0": "local_size",
                "param_1": "source1",
                "param_10": "input_string",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "source6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "buffer",
                "pcVar3": "result",
                "pcVar6": "current_char",
                "ppcVar4": "string_pointer",
                "sVar1": "string_length",
                "uVar2": "temp_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103160": {
            "additional_data": {
                "FUN_00103160": {
                    "copy_and_increment": 2,
                    "copy_string": 27,
                    "copy_string_characters": 1,
                    "reverse_string": 1
                },
                "bVar4": {
                    "byte_flag": 1,
                    "byte_step": 1,
                    "byte_value": 2,
                    "byte_var": 3,
                    "count": 1,
                    "counter": 3,
                    "increment": 2,
                    "increment_value": 1,
                    "index": 5,
                    "is_negative": 2,
                    "is_reversed": 1,
                    "offset": 9
                },
                "lVar3": {
                    "buffer_size": 1,
                    "copied_string_length": 1,
                    "copy_index": 1,
                    "copy_length": 2,
                    "index": 1,
                    "iteration": 1,
                    "length": 8,
                    "length_plus_one": 7,
                    "length_with_null": 3,
                    "new_length": 2,
                    "new_string_length": 1,
                    "size": 1,
                    "string_length": 1,
                    "string_size": 1
                },
                "param_1": {
                    "input_string": 21,
                    "source_string": 10
                },
                "pcVar2": {
                    "copied_string": 19,
                    "copy_buffer": 1,
                    "destination_string": 4,
                    "new_string": 3,
                    "output_string": 2,
                    "reversed_string": 1
                },
                "sVar1": {
                    "input_length": 3,
                    "length": 2,
                    "source_length": 7,
                    "string_length": 19
                }
            },
            "called": [
                "strlen",
                "FUN_00105370"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\nvoid copy_string_characters_00103160(char *input_string)\n\n{\n  size_t string_length;\n  char *copied_string;\n  long length;\n  byte offset;\n  \n  offset = 0;\n  string_length = strlen(input_string);\n  length = string_length + 1;\n  copied_string = (char *)extract_file_name_from_path_00105370(length);\n  for (; length != 0; length = length + -1) {\n    *copied_string = *input_string;\n    input_string = input_string + (ulong)offset * -2 + 1;\n    copied_string = copied_string + (ulong)offset * -2 + 1;\n  }\n  return;\n}\n\n",
            "code_backup": "\nvoid FUN_00103160(char *param_1)\n\n{\n  size_t sVar1;\n  char *pcVar2;\n  long lVar3;\n  byte bVar4;\n  \n  bVar4 = 0;\n  sVar1 = strlen(param_1);\n  lVar3 = sVar1 + 1;\n  pcVar2 = (char *)FUNC_00105370(lVar3);\n  for (; lVar3 != 0; lVar3 = lVar3 + -1) {\n    *pcVar2 = *param_1;\n    param_1 = param_1 + (ulong)bVar4 * -2 + 1;\n    pcVar2 = pcVar2 + (ulong)bVar4 * -2 + 1;\n  }\n  return;\n}\n\n",
            "current_name": "copy_string_characters_00103160",
            "entrypoint": "0x00103160",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103160": "copy_string_characters_00103160",
                "bVar4": "offset",
                "lVar3": "length",
                "param_1": "input_string",
                "pcVar2": "copied_string",
                "sVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103186": {
            "additional_data": {
                "FUN_00103186": {
                    "convert_string_array_to_string": 1,
                    "create_improved_string": 1,
                    "decode_string": 2,
                    "extract_strings": 1,
                    "generate_string": 4,
                    "process_strings": 1,
                    "reverse_and_concatenate_strings": 4,
                    "reverse_string": 9,
                    "reverse_string_and_concatenate": 1,
                    "reverse_string_concatenation": 4,
                    "string_concatenation": 1,
                    "transform_string": 1
                },
                "bVar8": {
                    "addition_factor": 1,
                    "byte_flag": 1,
                    "condition": 1,
                    "flag": 5,
                    "flag2": 2,
                    "increment": 5,
                    "is_backward": 1,
                    "is_first_char": 1,
                    "is_flag_set": 1,
                    "is_increment": 1,
                    "is_neg": 1,
                    "is_negative": 2,
                    "is_reverse": 1,
                    "is_upper_case": 1,
                    "offset": 1,
                    "reverse_flag": 2,
                    "should_decrement": 1,
                    "toggle": 1,
                    "zero_flag": 1
                },
                "in_AL": {
                    "condition": 3,
                    "flag": 16,
                    "input_char": 3,
                    "input_flag": 2,
                    "is_in_al": 1,
                    "is_reverse": 2,
                    "is_string_null": 1
                },
                "lVar5": {
                    "length": 1,
                    "running_total": 1,
                    "string_length": 1,
                    "total_len": 4,
                    "total_length": 16,
                    "total_string_length": 1
                },
                "local_28": {
                    "arg10": 1,
                    "constant_16": 1,
                    "eighth_param": 1,
                    "flag8": 1,
                    "flagged_input8": 1,
                    "input8": 4,
                    "input8_copy": 3,
                    "input_8_copy": 2,
                    "local_param8": 1,
                    "local_var10": 1,
                    "param8": 1,
                    "ptr_8": 1,
                    "str8": 1,
                    "string8_addr": 1,
                    "temp_10": 1,
                    "temp_input_8": 1,
                    "unused_param13": 1,
                    "unused_var_28": 1,
                    "var12": 1
                },
                "local_38": {
                    "arg9": 1,
                    "constant_15": 1,
                    "flag7": 1,
                    "flagged_input7": 1,
                    "input7": 4,
                    "input7_copy": 3,
                    "input_7_copy": 2,
                    "local_param7": 1,
                    "local_var9": 1,
                    "param7": 1,
                    "ptr_7": 1,
                    "seventh_param": 1,
                    "str7": 1,
                    "string7_addr": 1,
                    "temp_9": 1,
                    "temp_input_7": 1,
                    "unused_param12": 1,
                    "unused_var_38": 1,
                    "var11": 1
                },
                "local_48": {
                    "arg8": 1,
                    "constant_14": 1,
                    "flag6": 1,
                    "flagged_input6": 1,
                    "input6": 4,
                    "input6_copy": 3,
                    "input_6_copy": 2,
                    "local_param6": 1,
                    "local_var8": 1,
                    "param6": 1,
                    "ptr_6": 1,
                    "sixth_param": 1,
                    "str6": 1,
                    "string6_addr": 1,
                    "temp_8": 1,
                    "temp_input_6": 1,
                    "unused_param11": 1,
                    "unused_var_48": 1,
                    "var10": 1
                },
                "local_58": {
                    "arg7": 1,
                    "constant_13": 1,
                    "fifth_param": 1,
                    "flag5": 1,
                    "flagged_input5": 1,
                    "input5": 4,
                    "input5_copy": 3,
                    "input_5_copy": 2,
                    "local_param5": 1,
                    "local_var7": 1,
                    "param5": 1,
                    "ptr_5": 1,
                    "str5": 1,
                    "string5_addr": 1,
                    "temp_7": 1,
                    "temp_input_5": 1,
                    "unused_param10": 1,
                    "unused_var_58": 1,
                    "var9": 1
                },
                "local_68": {
                    "arg6": 1,
                    "constant_12": 1,
                    "flag4": 1,
                    "flagged_input4": 1,
                    "fourth_param": 1,
                    "input4": 4,
                    "input4_copy": 3,
                    "input_4_copy": 2,
                    "local_param4": 1,
                    "local_var6": 1,
                    "param4": 1,
                    "ptr_4": 1,
                    "str4": 1,
                    "string4_addr": 1,
                    "temp_6": 1,
                    "temp_input_4": 1,
                    "unused_param9": 1,
                    "unused_var_68": 1,
                    "var8": 1
                },
                "local_78": {
                    "arg5": 1,
                    "constant_11": 1,
                    "flag3": 1,
                    "flagged_input3": 1,
                    "input3": 4,
                    "input3_copy": 3,
                    "input_3_copy": 2,
                    "local_param3": 1,
                    "local_var5": 1,
                    "param3": 1,
                    "ptr_3": 1,
                    "str3": 1,
                    "string3_addr": 1,
                    "temp_5": 1,
                    "temp_input_3": 1,
                    "third_param": 1,
                    "unused_param8": 1,
                    "unused_var_78": 1,
                    "var7": 1
                },
                "local_88": {
                    "arg4": 1,
                    "constant_10": 1,
                    "flag2": 1,
                    "flagged_input2": 1,
                    "input2": 4,
                    "input2_copy": 3,
                    "input_2_copy": 2,
                    "local_param2": 1,
                    "local_var4": 1,
                    "param2": 1,
                    "ptr_2": 1,
                    "second_param": 1,
                    "str2": 1,
                    "string2_addr": 1,
                    "temp_4": 1,
                    "temp_input_2": 1,
                    "unused_param7": 1,
                    "unused_var_88": 1,
                    "value10": 1,
                    "var6": 1
                },
                "local_98": {
                    "arg3": 1,
                    "constant_9": 1,
                    "first_param": 1,
                    "flag1": 1,
                    "flagged_input1": 1,
                    "input1": 4,
                    "input1_copy": 3,
                    "input_1_copy": 2,
                    "local_param1": 1,
                    "local_var3": 1,
                    "param1": 1,
                    "ptr_1": 1,
                    "str1": 1,
                    "string1_addr": 1,
                    "temp_3": 1,
                    "temp_input_1": 1,
                    "unused_param6": 1,
                    "unused_var_98": 1,
                    "value9": 1,
                    "var5": 1
                },
                "local_a0": {
                    "additional_param2": 1,
                    "arg2": 1,
                    "argument8": 1,
                    "constant_8": 1,
                    "input14": 1,
                    "local_param10": 1,
                    "local_value2": 1,
                    "local_var2": 1,
                    "long_param_6_copy": 1,
                    "long_param_array2": 1,
                    "long_var2": 1,
                    "num6": 1,
                    "param12": 1,
                    "param14": 3,
                    "param14_copy": 3,
                    "param_14_copy": 1,
                    "param_b2": 1,
                    "ptr_14": 1,
                    "sixth_long_param": 1,
                    "temp_2": 1,
                    "temp_input_14": 1,
                    "unused_param5": 1,
                    "unused_var_a0": 1,
                    "value12": 1,
                    "var4": 1
                },
                "local_a8": {
                    "additional_param1": 1,
                    "arg1": 1,
                    "argument7": 1,
                    "constant_7": 1,
                    "fifth_long_param": 1,
                    "input13": 1,
                    "local_param8": 1,
                    "local_value1": 1,
                    "local_var1": 1,
                    "long_param_5_copy": 1,
                    "long_param_array1": 1,
                    "long_var1": 1,
                    "num5": 1,
                    "param11": 1,
                    "param13": 3,
                    "param13_copy": 3,
                    "param_13_copy": 1,
                    "param_a2": 1,
                    "ptr_13": 1,
                    "temp_1": 1,
                    "temp_input_13": 1,
                    "unused_param4": 1,
                    "unused_var_a8": 1,
                    "value11": 1,
                    "var3": 1
                },
                "local_c8": {
                    "converted_strings": 1,
                    "data_array": 1,
                    "input_array": 3,
                    "local_array": 1,
                    "local_str_arr": 1,
                    "long_param_array": 2,
                    "param_arr": 1,
                    "param_array": 8,
                    "param_ptrs": 1,
                    "param_strings": 1,
                    "parameters": 1,
                    "ptr_arr": 1,
                    "str_array": 1,
                    "string_params": 1,
                    "temp_buffer": 1,
                    "unused_char_array": 1
                },
                "local_d8": {
                    "arr_ptr_array": 1,
                    "array_ptr": 1,
                    "local_array_pointer": 1,
                    "local_ptr_ptr_str": 1,
                    "local_string_array": 1,
                    "local_strings": 1,
                    "pointer_array": 2,
                    "stack_pointer": 1,
                    "stack_pointer_array": 1,
                    "stack_pointers": 1,
                    "str_arr": 2,
                    "str_ptrs": 1,
                    "string_array": 6,
                    "string_array_ptr": 2,
                    "string_collection": 1,
                    "string_list": 1,
                    "string_pointer_array": 1,
                    "string_ptr_array": 2,
                    "strings": 1
                },
                "local_e0": {
                    "array_size": 1,
                    "buffer_size": 1,
                    "count": 3,
                    "counter": 4,
                    "current_index": 1,
                    "current_length": 1,
                    "current_position": 1,
                    "index": 2,
                    "iterator": 1,
                    "local_counter": 4,
                    "local_index": 2,
                    "local_offset": 1,
                    "local_var_e0": 1,
                    "next_index": 1,
                    "offset": 2,
                    "size": 1,
                    "stack_pointer": 1,
                    "stack_size": 1
                },
                "param_1": {
                    "first_param": 1,
                    "flag1": 2,
                    "input1": 16,
                    "input_1": 5,
                    "option1": 1,
                    "param1": 1,
                    "ptr_1": 1,
                    "size": 1,
                    "str1": 1,
                    "string1": 1,
                    "value1": 1
                },
                "param_10": {
                    "argument2": 1,
                    "constant_2": 1,
                    "input1": 1,
                    "input10": 3,
                    "input9": 1,
                    "input_10": 3,
                    "long_num2": 1,
                    "long_param2": 1,
                    "long_param_2": 1,
                    "num2": 1,
                    "param10": 9,
                    "param_a": 1,
                    "ptr_10": 1,
                    "second_long_param": 1,
                    "str1": 2,
                    "string1": 1
                },
                "param_11": {
                    "argument3": 1,
                    "constant_3": 1,
                    "input10": 1,
                    "input11": 3,
                    "input2": 1,
                    "input_11": 3,
                    "long_num3": 1,
                    "long_param3": 1,
                    "long_param_3": 1,
                    "num3": 1,
                    "param11": 9,
                    "param_b": 1,
                    "ptr_11": 1,
                    "str2": 2,
                    "string2": 2,
                    "third_long_param": 1
                },
                "param_12": {
                    "argument4": 1,
                    "constant_4": 1,
                    "fourth_long_param": 1,
                    "input12": 3,
                    "input3": 1,
                    "input_12": 3,
                    "long_num4": 1,
                    "long_param4": 1,
                    "long_param_4": 1,
                    "num4": 1,
                    "param12": 9,
                    "param_c": 1,
                    "ptr_12": 1,
                    "str3": 2,
                    "string3": 2
                },
                "param_13": {
                    "argument5": 1,
                    "constant_5": 1,
                    "fifth_long_param": 1,
                    "input13": 3,
                    "input_13": 3,
                    "long_num5": 1,
                    "long_param5": 1,
                    "long_param_5": 1,
                    "num5": 1,
                    "param1": 1,
                    "param13": 10,
                    "param_d": 1,
                    "ptr_13": 1,
                    "unused_param2": 1,
                    "unused_param_13": 1,
                    "val1": 1,
                    "value13": 1,
                    "var1": 1
                },
                "param_14": {
                    "argument6": 1,
                    "constant_6": 1,
                    "input14": 3,
                    "input_14": 3,
                    "long_num6": 1,
                    "long_param6": 1,
                    "long_param_6": 1,
                    "num6": 1,
                    "param14": 10,
                    "param2": 1,
                    "param_e": 1,
                    "ptr_14": 1,
                    "sixth_long_param": 1,
                    "unused_param3": 1,
                    "unused_param_14": 1,
                    "val2": 1,
                    "value14": 1,
                    "var2": 1
                },
                "param_2": {
                    "flag2": 2,
                    "input2": 16,
                    "input_2": 5,
                    "length": 1,
                    "param2": 1,
                    "ptr_2": 1,
                    "second_param": 1,
                    "str2": 1,
                    "string2": 1,
                    "value2": 1
                },
                "param_3": {
                    "flag3": 2,
                    "input3": 16,
                    "input_3": 5,
                    "num1": 1,
                    "param3": 1,
                    "ptr_3": 1,
                    "str3": 1,
                    "string3": 1,
                    "third_param": 1,
                    "value3": 1
                },
                "param_4": {
                    "flag4": 2,
                    "fourth_param": 1,
                    "input4": 16,
                    "input_4": 5,
                    "num2": 1,
                    "param4": 1,
                    "ptr_4": 1,
                    "str4": 1,
                    "string4": 1,
                    "value4": 1
                },
                "param_5": {
                    "fifth_param": 1,
                    "flag5": 2,
                    "input5": 16,
                    "input_5": 5,
                    "num3": 1,
                    "param5": 1,
                    "ptr_5": 1,
                    "str5": 1,
                    "string5": 1,
                    "value5": 1
                },
                "param_6": {
                    "flag6": 2,
                    "input6": 16,
                    "input_6": 5,
                    "num4": 1,
                    "param6": 1,
                    "ptr_6": 1,
                    "sixth_param": 1,
                    "str6": 1,
                    "string6": 1,
                    "value6": 1
                },
                "param_7": {
                    "flag7": 2,
                    "input7": 16,
                    "input_7": 5,
                    "num5": 1,
                    "param7": 1,
                    "ptr_7": 1,
                    "seventh_param": 1,
                    "str7": 1,
                    "string7": 1,
                    "value7": 1
                },
                "param_8": {
                    "eighth_param": 1,
                    "flag8": 2,
                    "input8": 16,
                    "input_8": 5,
                    "num6": 1,
                    "param8": 1,
                    "ptr_8": 1,
                    "str8": 1,
                    "string8": 1,
                    "value8": 1
                },
                "param_9": {
                    "argument1": 1,
                    "constant_1": 1,
                    "first_long_param": 1,
                    "input9": 3,
                    "input_9": 3,
                    "long_num1": 1,
                    "long_param1": 1,
                    "long_param_1": 1,
                    "num1": 1,
                    "param9": 6,
                    "size": 1,
                    "unused_param1": 1
                },
                "pcVar3": {
                    "concatenated_string": 2,
                    "converted_string": 1,
                    "decoded_str": 1,
                    "final_str": 1,
                    "final_string": 1,
                    "generated_str": 1,
                    "generated_string": 1,
                    "new_string": 1,
                    "output_string": 1,
                    "result": 10,
                    "result_str": 2,
                    "result_string": 7
                },
                "pcVar4": {
                    "current_arr_ptr": 1
                },
                "pcVar6": {
                    "curr_str": 1,
                    "current_char": 7,
                    "current_str": 3,
                    "current_string": 11,
                    "original_string": 1,
                    "source_string": 2,
                    "str": 3,
                    "string": 1,
                    "sub_string": 1
                },
                "pcVar7": {
                    "concatenated_string": 1,
                    "converted_string_ptr": 1,
                    "current_char": 4,
                    "current_concatenated_string": 1,
                    "current_result": 1,
                    "current_result_char": 1,
                    "decoded_str_ptr": 1,
                    "dest": 1,
                    "dest_str": 1,
                    "destination_string": 1,
                    "generated_string_ptr": 1,
                    "new_string": 1,
                    "new_string_ptr": 1,
                    "output": 1,
                    "output_string": 1,
                    "res": 1,
                    "result": 1,
                    "result_char": 1,
                    "result_char_ptr": 1,
                    "result_ptr": 2,
                    "result_str": 1,
                    "result_string": 1,
                    "result_string_copy": 1,
                    "result_string_ptr": 1,
                    "str_dest": 1
                },
                "ppcVar4": {
                    "current_input": 1,
                    "current_str": 1,
                    "current_string": 5,
                    "current_string_ptr": 3,
                    "nested_string": 1,
                    "pointer_pointer": 1,
                    "pointer_to_string": 1,
                    "pointer_to_string_array": 1,
                    "ptr_ptr": 1,
                    "ptr_ptr_str": 1,
                    "ptr_to_str": 1,
                    "str_ptr": 1,
                    "string": 1,
                    "string_array": 2,
                    "string_pointer": 1,
                    "temp_string_ptr": 1
                },
                "sVar1": {
                    "current_str_length": 1,
                    "len": 1,
                    "length": 1,
                    "source_len": 1,
                    "str_len": 5,
                    "str_length": 3,
                    "string_length": 6,
                    "sub_string_length": 1
                },
                "uVar2": {
                    "index": 1,
                    "iter": 1,
                    "length": 1,
                    "offset": 1,
                    "temp": 4,
                    "temp_index": 1,
                    "temp_length": 1,
                    "temp_var": 4,
                    "temp_variable": 1,
                    "ulong_var": 1
                }
            },
            "called": [
                "strlen",
                "FUN_00105370"
            ],
            "calling": [
                "FUN_001032de"
            ],
            "code": "\nchar * reverse_string_concatenation_00103186(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                   undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                   undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                   undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  size_t string_length;\n  ulong temp;\n  char *result;\n  char **current_string;\n  long total_length;\n  char *current_string;\n  char *current_char;\n  byte flag;\n  uint counter;\n  char **string_array;\n  char *param_array [4];\n  undefined8 param13;\n  undefined8 param14_copy;\n  undefined4 input1;\n  undefined4 input2;\n  undefined4 input3;\n  undefined4 input4;\n  undefined4 input5;\n  undefined4 input6;\n  undefined4 input7;\n  undefined4 input8;\n  \n  flag = 0;\n  if (flag != '\\0') {\n    input1 = input1;\n    input2 = input2;\n    input3 = input3;\n    input4 = input4;\n    input5 = input5;\n    input6 = input6;\n    input7 = input7;\n    input8 = input8;\n  }\n  string_array = (char **)&stack0x00000008;\n  total_length = 0;\n  counter = 8;\n  current_string = \"none\";\n  param_array[1] = (char *)param10;\n  param_array[2] = (char *)param11;\n  param_array[3] = (char *)param12;\n  param13 = param13;\n  param14_copy = param14;\n  do {\n    string_length = strlen(current_string);\n    total_length = total_length + string_length;\n    if (counter < 0x30) {\n      temp = (ulong)counter;\n      counter = counter + 8;\n      current_string = (char **)((long)param_array + temp);\n    }\n    else {\n      current_string = string_array;\n      string_array = string_array + 1;\n    }\n    current_string = *current_string;\n  } while (current_string != (char *)0x0);\n  current_string = \"none\";\n  result = (char *)extract_file_name_from_path_00105370(total_length + 1);\n  counter = 8;\n  string_array = (char **)&stack0x00000008;\n  current_char = result;\n  do {\n    string_length = strlen(current_string);\n    for (; string_length != 0; string_length = string_length - 1) {\n      *current_char = *current_string;\n      current_string = current_string + (ulong)flag * -2 + 1;\n      current_char = current_char + (ulong)flag * -2 + 1;\n    }\n    if (counter < 0x30) {\n      temp = (ulong)counter;\n      counter = counter + 8;\n      current_string = (char **)((long)param_array + temp);\n    }\n    else {\n      current_string = string_array;\n      string_array = string_array + 1;\n    }\n    current_string = *current_string;\n  } while (current_string != (char *)0x0);\n  *current_char = '\\0';\n  return result;\n}\n\n",
            "code_backup": "\nchar * FUN_00103186(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                   undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                   undefined8 param_9,undefined8 param_10,undefined8 param_11,undefined8 param_12,\n                   undefined8 param_13,undefined8 param_14)\n\n{\n  char in_AL;\n  size_t sVar1;\n  ulong uVar2;\n  char *pcVar3;\n  char **ppcVar4;\n  long lVar5;\n  char *pcVar6;\n  char *pcVar7;\n  byte bVar8;\n  uint local_e0;\n  char **local_d8;\n  char *local_c8 [4];\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  \n  bVar8 = 0;\n  if (in_AL != '\\0') {\n    local_98 = param_1;\n    local_88 = param_2;\n    local_78 = param_3;\n    local_68 = param_4;\n    local_58 = param_5;\n    local_48 = param_6;\n    local_38 = param_7;\n    local_28 = param_8;\n  }\n  local_d8 = (char **)&stack0x00000008;\n  lVar5 = 0;\n  local_e0 = 8;\n  pcVar6 = \"none\";\n  local_c8[1] = (char *)param_10;\n  local_c8[2] = (char *)param_11;\n  local_c8[3] = (char *)param_12;\n  local_a8 = param_13;\n  local_a0 = param_14;\n  do {\n    sVar1 = strlen(pcVar6);\n    lVar5 = lVar5 + sVar1;\n    if (local_e0 < 0x30) {\n      uVar2 = (ulong)local_e0;\n      local_e0 = local_e0 + 8;\n      ppcVar4 = (char **)((long)local_c8 + uVar2);\n    }\n    else {\n      ppcVar4 = local_d8;\n      local_d8 = local_d8 + 1;\n    }\n    pcVar6 = *ppcVar4;\n  } while (pcVar6 != (char *)0x0);\n  pcVar6 = \"none\";\n  pcVar3 = (char *)FUNC_00105370(lVar5 + 1);\n  local_e0 = 8;\n  local_d8 = (char **)&stack0x00000008;\n  pcVar7 = pcVar3;\n  do {\n    sVar1 = strlen(pcVar6);\n    for (; sVar1 != 0; sVar1 = sVar1 - 1) {\n      *pcVar7 = *pcVar6;\n      pcVar6 = pcVar6 + (ulong)bVar8 * -2 + 1;\n      pcVar7 = pcVar7 + (ulong)bVar8 * -2 + 1;\n    }\n    if (local_e0 < 0x30) {\n      uVar2 = (ulong)local_e0;\n      local_e0 = local_e0 + 8;\n      ppcVar4 = (char **)((long)local_c8 + uVar2);\n    }\n    else {\n      ppcVar4 = local_d8;\n      local_d8 = local_d8 + 1;\n    }\n    pcVar6 = *ppcVar4;\n  } while (pcVar6 != (char *)0x0);\n  *pcVar7 = '\\0';\n  return pcVar3;\n}\n\n",
            "current_name": "reverse_string_concatenation_00103186",
            "entrypoint": "0x00103186",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103186": "reverse_string_concatenation_00103186",
                "bVar8": "flag",
                "in_AL": "flag",
                "lVar5": "total_length",
                "local_28": "input8",
                "local_38": "input7",
                "local_48": "input6",
                "local_58": "input5",
                "local_68": "input4",
                "local_78": "input3",
                "local_88": "input2",
                "local_98": "input1",
                "local_a0": "param14_copy",
                "local_a8": "param13",
                "local_c8": "param_array",
                "local_d8": "string_array",
                "local_e0": "counter",
                "param_1": "input1",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param9",
                "pcVar3": "result",
                "pcVar4": "current_arr_ptr",
                "pcVar6": "current_string",
                "pcVar7": "current_char",
                "ppcVar4": "current_string",
                "sVar1": "string_length",
                "uVar2": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001032de": {
            "additional_data": {
                "FUN_001032de": {
                    "display_usage": 1,
                    "print_elf_edit_help": 2,
                    "print_elf_edit_usage": 10,
                    "print_elf_header": 2,
                    "print_elf_header_usage": 1,
                    "print_elfedit_usage": 2,
                    "print_usage": 3,
                    "print_usage_and_exit": 9,
                    "update_elf_header": 1
                },
                "__ptr": {
                    "concatenated_string": 12,
                    "help_message": 1,
                    "memory_ptr": 1,
                    "message": 1,
                    "reverse_string_result": 1,
                    "reversed_string": 9,
                    "str_pointer": 1,
                    "str_ptr": 1,
                    "string_buffer": 1,
                    "string_concatenated": 1,
                    "string_pointer": 1,
                    "string_ptr": 1
                },
                "dcgettext": {
                    "get_translated_text": 1
                },
                "param_1": {
                    "file": 4,
                    "file_output": 1,
                    "file_pointer": 2,
                    "file_ptr": 2,
                    "output_file": 22
                },
                "param_2": {
                    "error_code": 3,
                    "exit_code": 26,
                    "exit_status": 2
                },
                "pcVar2": {
                    "error_string": 1,
                    "localization_string": 1,
                    "localized_string": 15,
                    "message": 5,
                    "message_ptr": 1,
                    "str": 1,
                    "string_var": 1,
                    "text_message": 1,
                    "translated_string": 2,
                    "translated_text": 2,
                    "translation": 1
                },
                "puVar1": {
                    "array_pointer": 1,
                    "config_ptr": 1,
                    "data_ptr": 1,
                    "feature_array": 1,
                    "feature_ptr": 1,
                    "header_pointer": 1,
                    "machine_type": 5,
                    "machine_types": 3,
                    "memory_pointer": 1,
                    "option": 1,
                    "options": 1,
                    "options_ptr": 1,
                    "pointer_value1": 1,
                    "ptr": 2,
                    "ptr1": 2,
                    "ptr_data": 1,
                    "ptr_iterator": 1,
                    "ptr_to_var1": 1,
                    "ptr_var1": 1,
                    "temp_ptr": 1,
                    "unused_pointer": 1
                },
                "puVar3": {
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "config_array": 1,
                    "data_array": 1,
                    "data_pointer": 6,
                    "data_ptr": 3,
                    "function_pointer": 1,
                    "message": 1,
                    "option_list": 1,
                    "option_ptr": 1,
                    "options": 2,
                    "options_list_ptr": 1,
                    "pointer_to_data": 1,
                    "pointer_value_array": 1,
                    "ptr3": 1,
                    "ptr_dat": 1,
                    "ptr_iterator": 1,
                    "ptr_to_data": 1,
                    "ptr_to_var3": 1,
                    "ptr_var3": 1,
                    "string_array": 1,
                    "string_pointer": 1,
                    "strings_array": 1
                }
            },
            "called": [
                "dcgettext",
                "FUN_00103186",
                "free",
                "fprintf",
                "exit",
                "FUN_00103006"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid print_elf_edit_usage_001032de(FILE *output_file,int exit_code)\n\n{\n  undefined8 *machine_type;\n  void *concatenated_string;\n  char *localized_string;\n  undefined4 *data_pointer;\n  \n  data_pointer = &DAT_00108ca0;\n  concatenated_string = (void *)reverse_string_concatenation_00103186(&DAT_00106137,0);\n  do {\n    machine_type = (undefined8 *)(data_pointer + 6);\n    data_pointer = data_pointer + 4;\n    concatenated_string = (void *)reverse_string_and_free_memory_00103006(concatenated_string,concatenated_string,&DAT_001061ef,*machine_type,0);\n  } while (data_pointer != (undefined4 *)&DAT_00108d90);\n  localized_string = (char *)dcgettext(0,\"Usage: %s <option(s)> elffile(s)\\n\",5);\n  fprintf(output_file,localized_string,\"elfedit\");\n  localized_string = (char *)dcgettext(0,\" Update the ELF header of ELF files\\n\",5);\n  fprintf(output_file,localized_string);\n  localized_string = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,localized_string);\n  localized_string = (char *)dcgettext(0,\n                             \"  --input-mach [none|i386|iamcu|l1om|k1om|x86_64]\\n                              Set input machine type\\n  --output-mach [none|i386|iamcu|l1om|k1om|x86_64]\\n                              Set output machine type\\n  --input-type [none|rel|exec|dyn]\\n                              Set input file type\\n  --output-type [none|rel|exec|dyn]\\n                              Set output file type\\n  --input-osabi [%s]\\n                              Set input OSABI\\n  --output-osabi [%s]\\n                              Set output OSABI\\n  --input-abiversion [0-255]  Set input ABIVERSION\\n  --output-abiversion [0-255] Set output ABIVERSION\\n\"\n                             ,5);\n  fprintf(output_file,localized_string,concatenated_string,concatenated_string);\n  localized_string = (char *)dcgettext(0,\n                             \"  --enable-x86-feature [ibt|shstk|lam_u48|lam_u57]\\n                              Enable x86 feature\\n  --disable-x86-feature [ibt|shstk|lam_u48|lam_u57]\\n                              Disable x86 feature\\n\"\n                             ,5);\n  fprintf(output_file,localized_string);\n  localized_string = (char *)dcgettext(0,\n                             \"  -h --help                   Display this information\\n  -v --version                Display the version number of %s\\n\"\n                             ,5);\n  fprintf(output_file,localized_string,\"elfedit\");\n  if (exit_code == 0) {\n    localized_string = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,localized_string,\"<https://sourceware.org/bugzilla/>\");\n  }\n  free(concatenated_string);\n                    \n  exit(exit_code);\n}\n\n",
            "current_name": "print_elf_edit_usage_001032de",
            "entrypoint": "0x001032de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001032de": "print_elf_edit_usage_001032de",
                "__ptr": "concatenated_string",
                "dcgettext": "get_translated_text",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "localized_string",
                "puVar1": "machine_type",
                "puVar3": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103449": {
            "additional_data": {
                "FUN_00103449": {
                    "allocate_memory": 7,
                    "allocate_memory_if_null_or_resize": 1,
                    "allocate_memory_or_resize": 1,
                    "allocate_or_reallocate_memory": 9,
                    "allocate_or_resize_memory": 6,
                    "initialize_memory": 1,
                    "resize_memory": 6
                },
                "__size": {
                    "alloc_size": 1,
                    "allocation_size": 3,
                    "effective_size": 1,
                    "final_size": 1,
                    "memory_size": 1,
                    "new_size": 7,
                    "size": 15,
                    "size_to_allocate": 2
                },
                "param_1": {
                    "buffer": 8,
                    "current_memory": 1,
                    "data": 1,
                    "data_ptr": 1,
                    "existing_memory": 2,
                    "input_memory": 1,
                    "memory_block": 7,
                    "memory_pointer": 1,
                    "old_memory": 2,
                    "original_memory": 1,
                    "previous_allocation": 2,
                    "previous_block": 1,
                    "previous_memory": 3
                },
                "param_2": {
                    "block_size": 3,
                    "buffer_size": 5,
                    "input_size": 1,
                    "new_memory_size": 1,
                    "new_size": 11,
                    "requested_size": 3,
                    "size": 7
                },
                "pvVar1": {
                    "allocated_buffer": 4,
                    "allocated_memory": 6,
                    "new_allocation": 2,
                    "new_block": 1,
                    "new_buffer": 4,
                    "new_data_ptr": 1,
                    "new_memory": 5,
                    "new_memory_block": 5,
                    "new_memory_pointer": 1,
                    "resized_memory": 2
                }
            },
            "called": [
                "FUN_00102fc7",
                "malloc",
                "realloc"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid allocate_or_reallocate_memory_00103449(void *buffer,size_t new_size)\n\n{\n  size_t size;\n  void *allocated_memory;\n  \n  size = 1;\n  if (new_size != 0) {\n    size = new_size;\n  }\n  if (buffer == (void *)0x0) {\n    allocated_memory = malloc(size);\n  }\n  else {\n    allocated_memory = realloc(buffer,size);\n  }\n  if (allocated_memory == (void *)0x0) {\n    allocate_memory_and_print_error_message_00102fc7(size);\n  }\n  return;\n}\n\n",
            "current_name": "allocate_or_reallocate_memory_00103449",
            "entrypoint": "0x00103449",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103449": "allocate_or_reallocate_memory_00103449",
                "__size": "size",
                "param_1": "buffer",
                "param_2": "new_size",
                "pvVar1": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010347f": {
            "additional_data": {
                "FUN_0010347F": {
                    "extract_data": 1
                },
                "FUN_0010347f": {
                    "convert_data": 12,
                    "convert_data_to_unsigned_long": 1,
                    "convert_to_unsigned_long": 2,
                    "decode_data": 3,
                    "decode_parameter_value": 1,
                    "extract_data": 9,
                    "reverse_data": 1
                },
                "param_1": {
                    "data": 22,
                    "data_pointer": 3,
                    "data_ptr": 2,
                    "input": 1,
                    "input_data": 1,
                    "input_pointer": 1
                },
                "param_2": {
                    "data_length": 27,
                    "length": 4
                },
                "uVar1": {
                    "temp": 10,
                    "temp1": 7,
                    "temp_uint": 1,
                    "temp_value": 3,
                    "temp_value1": 3,
                    "temp_var": 1,
                    "temp_var1": 5,
                    "value": 1
                },
                "uVar2": {
                    "result": 13,
                    "temp2": 7,
                    "temp_ulong": 1,
                    "temp_value2": 3,
                    "temp_var2": 5,
                    "value": 2
                },
                "uVar3": {
                    "err_msg": 1,
                    "error_message": 20,
                    "error_msg": 6,
                    "error_string": 2,
                    "temp_var3": 1,
                    "translated_err_msg": 1
                }
            },
            "called": [
                "dcgettext",
                "error",
                "abort"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nulong convert_data_to_unsigned_long_0010347f(ulong *data,undefined4 data_length)\n\n{\n  uint temp;\n  ulong result;\n  undefined8 error_message;\n  \n  switch(data_length) {\n  case 1:\n    return (ulong)*(byte *)data;\n  case 2:\n    return (ulong)CONCAT11((char)*(undefined2 *)data,(char)((ushort)*(undefined2 *)data >> 8))\n    ;\n  case 3:\n    return (ulong)*(byte *)((long)data + 1) << 8 | (ulong)*(byte *)data << 0x10 |\n           (ulong)*(byte *)((long)data + 2);\n  case 4:\n    temp = *(uint *)data;\n    return (ulong)(temp >> 0x18 | (temp & 0xff0000) >> 8 | (temp & 0xff00) << 8 | temp << 0x18);\n  case 5:\n    temp = *(uint *)((long)data + 1);\n    return (ulong)CONCAT14(*(byte *)data,\n                           temp >> 0x18 | (temp & 0xff0000) >> 8 | (temp & 0xff00) << 8 |\n                           temp << 0x18);\n  case 6:\n    temp = *(uint *)((long)data + 2);\n    return (ulong)*(byte *)((long)data + 1) << 0x20 | (ulong)*(byte *)data << 0x28 |\n           (ulong)(temp >> 0x18 | (temp & 0xff0000) >> 8 | (temp & 0xff00) << 8 | temp << 0x18);\n  case 7:\n    temp = *(uint *)((long)data + 3);\n    return (ulong)*(byte *)((long)data + 2) << 0x20 | (ulong)*(byte *)((long)data + 1) << 0x28\n           | (ulong)*(byte *)data << 0x30 |\n           (ulong)(temp >> 0x18 | (temp & 0xff0000) >> 8 | (temp & 0xff00) << 8 | temp << 0x18);\n  case 8:\n    result = *data;\n    return result >> 0x38 | (result & 0xff000000000000) >> 0x28 | (result & 0xff0000000000) >> 0x18 |\n           (result & 0xff00000000) >> 8 | (result & 0xff000000) << 8 | (result & 0xff0000) << 0x18 |\n           (result & 0xff00) << 0x28 | result << 0x38;\n  default:\n    error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    error(error_message,data_length);\n                    \n    abort();\n  }\n}\n\n",
            "current_name": "convert_data_to_unsigned_long_0010347f",
            "entrypoint": "0x0010347f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010347f": "convert_data_to_unsigned_long_0010347f",
                "param_1": "data",
                "param_2": "data_length",
                "uVar1": "temp",
                "uVar2": "result",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010354e": {
            "additional_data": {
                "FUN_0010354e": {
                    "copy_data": 3,
                    "copy_data_with_length_check": 1,
                    "fill_buffer": 1,
                    "fill_data": 1,
                    "fill_data_with_byte": 2,
                    "fill_memory": 1,
                    "fill_memory_with_byte": 2,
                    "fill_memory_with_data": 1,
                    "memset_data": 1,
                    "memset_with_value": 1,
                    "set_bytes": 1,
                    "set_data": 1,
                    "store_data": 1,
                    "write_byte_sequence": 1,
                    "write_bytes": 1,
                    "write_data": 8,
                    "write_data_to_memory": 2,
                    "write_repeated_bytes": 1,
                    "write_repeated_value": 1
                },
                "abort": {
                    "end_program": 1
                },
                "iVar2": {
                    "counter": 6,
                    "index": 5,
                    "int_length": 1,
                    "iteration": 2,
                    "iteration_count": 4,
                    "iterator": 1,
                    "loop_counter": 3,
                    "num_iterations": 1,
                    "remaining_length": 4
                },
                "param_1": {
                    "address": 1,
                    "buffer": 5,
                    "buffer_address": 5,
                    "data_address": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_start": 1,
                    "dest": 3,
                    "dest_address": 4,
                    "dest_ptr": 2,
                    "destination": 5,
                    "memory_address": 2
                },
                "param_2": {
                    "byte": 2,
                    "byte_to_fill": 1,
                    "byte_value": 4,
                    "data": 13,
                    "data_value": 3,
                    "value": 8
                },
                "param_3": {
                    "byte_count": 1,
                    "data_length": 10,
                    "length": 19,
                    "num_bytes": 1
                },
                "uVar1": {
                    "error_message": 25,
                    "error_msg": 1,
                    "error_string": 1
                },
                "uVar3": {
                    "converted_length": 2,
                    "count": 1,
                    "current_length": 1,
                    "length": 4,
                    "length_converted": 1,
                    "length_copy": 1,
                    "length_counter": 1,
                    "remaining_iterations": 1,
                    "remaining_length": 7,
                    "size": 1,
                    "temp_byte_count": 1,
                    "temp_length": 4,
                    "ulong_length": 1,
                    "updated_num_bytes": 1
                }
            },
            "called": [
                "dcgettext",
                "error",
                "abort"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nvoid write_data_to_memory_0010354e(long buffer_address,ulong data,uint length)\n\n{\n  undefined8 error_message;\n  int counter;\n  ulong remaining_length;\n  \n  remaining_length = (ulong)length;\n  if (8 < length) {\n    error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    error(error_message,length);\n                    \n    abort();\n  }\n  while (counter = (int)remaining_length, remaining_length = (ulong)(counter - 1), counter != 0) {\n    *(char *)(buffer_address + remaining_length) = (char)data;\n    data = data >> 8;\n  }\n  return;\n}\n\n",
            "current_name": "write_data_to_memory_0010354e",
            "entrypoint": "0x0010354e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010354e": "write_data_to_memory_0010354e",
                "abort": "end_program",
                "iVar2": "counter",
                "param_1": "buffer_address",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "error_message",
                "uVar3": "remaining_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010358d": {
            "additional_data": {
                "DAT_00109438": {
                    "variable": 1
                },
                "FUN_0010358d": {
                    "process_and_validate_archive": 1,
                    "process_and_validate_archives": 1,
                    "process_archive": 18,
                    "process_archive_file": 4,
                    "process_archive_files": 5,
                    "process_archived_files": 2
                },
                "__s": {
                    "char_pointer_2": 1,
                    "corrupt": 5,
                    "corrupt_message": 2,
                    "corrupt_msg": 1,
                    "corrupt_msg_ptr": 1,
                    "corrupt_str": 4,
                    "corrupt_string": 8,
                    "corrupted": 1,
                    "corrupted_label": 1,
                    "corrupted_string": 2,
                    "corruption_message": 1,
                    "default_corrupt": 1,
                    "message2": 1,
                    "str_ptr4": 1,
                    "string_var1": 1
                },
                "__s_00": {
                    "archive_filename": 1,
                    "char_pointer_3": 1,
                    "combined_filename": 1,
                    "combined_filepath": 1,
                    "combined_string": 2,
                    "file_name": 3,
                    "file_name_string": 1,
                    "filename": 1,
                    "formatted_filename": 1,
                    "full_file_name": 1,
                    "full_name": 3,
                    "full_path": 4,
                    "malloc_str": 1,
                    "message3": 1,
                    "new_name": 2,
                    "new_path": 1,
                    "output_path": 1,
                    "output_string": 1,
                    "path_file": 1,
                    "str_ptr5": 1,
                    "string_var2": 1,
                    "temp_string": 1
                },
                "__stream": {
                    "archive_file": 3,
                    "file_pointer_2": 1,
                    "file_ptr2": 3,
                    "file_stream": 9,
                    "file_stream2": 1,
                    "input_file": 3,
                    "new_file": 2,
                    "output_file": 3,
                    "stream": 2
                },
                "iVar3": {
                    "int_var": 3,
                    "result": 25,
                    "status": 2
                },
                "lVar1": {
                    "file_size": 1,
                    "len": 1,
                    "length": 17,
                    "length1": 2,
                    "length_var": 2,
                    "length_var1": 1,
                    "long_var_1": 1,
                    "size": 3,
                    "string_length": 1
                },
                "local_148": {
                    "additional_memory": 1,
                    "buf1": 1,
                    "dummy_1": 1,
                    "flag_1": 1,
                    "flag_value": 1,
                    "initialize_1": 1,
                    "local_1": 1,
                    "memory_3": 2,
                    "num1": 1,
                    "temp": 1,
                    "temp_var3": 1,
                    "undefined_var_1": 1,
                    "unk_value1": 1,
                    "unknown_value": 1,
                    "unused1": 1,
                    "unused2": 1,
                    "value": 2,
                    "value1": 1,
                    "value2": 1,
                    "var1": 2,
                    "var_1": 1,
                    "var_one": 1,
                    "zero": 1,
                    "zero1": 1,
                    "zero_buffer": 1,
                    "zero_value": 1,
                    "zerofill2": 1
                },
                "local_160": {
                    "buf2": 1,
                    "buffer2": 1,
                    "combined_memory_2": 1,
                    "flag_5": 1,
                    "local_5": 1,
                    "memory2": 3,
                    "memory_2": 6,
                    "memory_chunk2": 1,
                    "memory_two": 1,
                    "padding": 1,
                    "placeholder": 1,
                    "temp_buffer2": 1,
                    "temp_var2": 1,
                    "undefined_array_2": 1,
                    "unk_buffer": 1,
                    "unknown_buffer": 1,
                    "unused1": 1,
                    "value": 1,
                    "var2": 1,
                    "zero_buffer": 3,
                    "zerofill1": 1
                },
                "local_178": {
                    "archive_buf": 1,
                    "archive_name": 2,
                    "archive_path": 2,
                    "archive_path_buf": 1,
                    "archive_path_buffer": 1,
                    "buffer1": 1,
                    "combined_memory_1": 1,
                    "extracted_file": 1,
                    "extracted_path": 1,
                    "file_buffer": 1,
                    "file_info": 1,
                    "file_memory": 1,
                    "flag_4": 1,
                    "local_4": 1,
                    "memory1": 3,
                    "memory_1": 5,
                    "memory_chunk1": 1,
                    "memory_one": 1,
                    "output_name_buffer": 1,
                    "temp_buffer": 1,
                    "temp_var1": 1,
                    "undefined_array_1": 1
                },
                "local_208": {
                    "file_info": 4,
                    "file_stat": 13,
                    "file_stats": 3,
                    "file_status": 1,
                    "st": 1,
                    "stat_info": 6,
                    "stat_struct": 2
                },
                "local_46": {
                    "archive_header_size": 1,
                    "expected_size": 1,
                    "flag": 1,
                    "header_flag": 2,
                    "header_id": 2,
                    "header_magic": 2,
                    "header_size": 1,
                    "header_type": 3,
                    "header_val": 1,
                    "header_value": 7,
                    "local_short": 1,
                    "magic_number": 1,
                    "magic_value": 1,
                    "num5": 1,
                    "short_var": 1,
                    "value": 3,
                    "value4": 1
                },
                "local_50": {
                    "archive_header": 5,
                    "char_array": 1,
                    "file_header": 1,
                    "file_name": 1,
                    "file_number": 2,
                    "header": 11,
                    "header_buf": 1,
                    "header_text": 1,
                    "local_arr2": 1,
                    "memory6": 1,
                    "name": 2,
                    "num_str": 1,
                    "number": 1,
                    "number_buffer": 1
                },
                "local_80": {
                    "buffer": 18,
                    "buffer3": 1,
                    "buffer_data": 1,
                    "file_buffer": 1,
                    "header_buffer": 5,
                    "local_arr1": 1,
                    "memory5": 1,
                    "read_buf": 1,
                    "undefined_array_5": 1
                },
                "local_88": {
                    "extract_type": 2,
                    "file_seek_option": 1,
                    "flag": 5,
                    "flag1": 2,
                    "flag2": 4,
                    "flag_type": 1,
                    "has_output_name": 1,
                    "int_var_2": 1,
                    "is_directory": 1,
                    "local_9": 1,
                    "local_var3": 1,
                    "option": 1,
                    "option_flag": 3,
                    "type_flag": 1,
                    "use_bracket": 1,
                    "use_corrupt": 1,
                    "value": 1,
                    "var_7": 1,
                    "var_five": 1
                },
                "local_90": {
                    "cur_offset": 1,
                    "current_offset": 8,
                    "file_offset": 1,
                    "file_pos": 1,
                    "file_seek_offset": 1,
                    "header_offset": 1,
                    "header_pos": 1,
                    "length3": 1,
                    "local_8": 1,
                    "local_var2": 2,
                    "long_var_3": 1,
                    "num4": 1,
                    "offset": 3,
                    "offset2": 1,
                    "offset_2": 1,
                    "position": 2,
                    "value": 1,
                    "var_6": 1,
                    "var_four": 1
                },
                "local_98": {
                    "archive_member_offset": 1,
                    "archive_offset": 1,
                    "current_position": 1,
                    "file_offset": 5,
                    "file_seek_offset": 1,
                    "length2": 1,
                    "local_7": 1,
                    "local_var1": 2,
                    "long_var_2": 1,
                    "member_offset": 1,
                    "num3": 1,
                    "offset": 4,
                    "offset1": 2,
                    "offset_1": 1,
                    "other_variable": 1,
                    "position": 2,
                    "seek_offset": 1,
                    "value": 1,
                    "var_5": 1,
                    "var_three": 1
                },
                "local_a8": {
                    "adjustment": 1,
                    "another_flag": 1,
                    "decoded_path": 1,
                    "dummy_4": 1,
                    "flag_6": 1,
                    "initialize_4": 1,
                    "local_6": 1,
                    "memory_6": 2,
                    "num2": 1,
                    "temp_var6": 1,
                    "undefined_var_2": 1,
                    "unk_value2": 1,
                    "unknown_value": 1,
                    "unused2": 1,
                    "unused4": 1,
                    "value": 2,
                    "value3": 1,
                    "value4": 1,
                    "var1": 1,
                    "var4": 1,
                    "var5": 1,
                    "var_4": 1,
                    "var_two": 1,
                    "zero2": 1,
                    "zero_buffer": 1,
                    "zero_value2": 1,
                    "zerofill4": 1
                },
                "local_c0": {
                    "buf3": 1,
                    "dummy_3": 1,
                    "flag_3": 1,
                    "initialize_3": 1,
                    "local_3": 1,
                    "memory": 1,
                    "memory2": 1,
                    "memory4": 2,
                    "memory_1": 1,
                    "memory_4": 1,
                    "memory_5": 2,
                    "memory_chunk4": 1,
                    "memory_four": 1,
                    "output_buffer2": 1,
                    "padding": 1,
                    "placeholder2": 1,
                    "temp_var5": 1,
                    "undefined_array_4": 1,
                    "unk_buffer2": 1,
                    "unknown_buffer": 1,
                    "unused3": 1,
                    "value3": 1,
                    "var3": 1,
                    "var4": 1,
                    "var_3": 1,
                    "zero_buffer2": 1,
                    "zero_buffers": 1,
                    "zerofill3": 1
                },
                "local_d8": {
                    "archive_name": 1,
                    "archive_path": 1,
                    "data_buffer": 1,
                    "dummy_2": 1,
                    "extracted_archive_path_buffer": 1,
                    "extracted_file": 3,
                    "file_buf": 1,
                    "file_content": 1,
                    "flag_2": 1,
                    "initialize_2": 1,
                    "local_2": 1,
                    "memory": 2,
                    "memory1": 1,
                    "memory3": 2,
                    "memory_3": 1,
                    "memory_4": 2,
                    "memory_chunk3": 1,
                    "memory_three": 1,
                    "output_buffer": 1,
                    "temp_var4": 1,
                    "undefined_array_3": 1,
                    "value2": 1,
                    "var2": 1,
                    "var3": 1,
                    "var_2": 1
                },
                "param_1": {
                    "arg1": 1,
                    "argument_1": 1,
                    "file_name": 1,
                    "filename": 5,
                    "param": 7,
                    "param1": 3,
                    "param_": 1,
                    "param_1": 2,
                    "param_file_path": 3,
                    "param_filepath": 1,
                    "param_one": 2,
                    "param_path": 1,
                    "param_pointer": 1,
                    "param_ptr": 2
                },
                "param_2": {
                    "archive_file": 1,
                    "file": 15,
                    "file_pointer": 2,
                    "file_ptr": 8,
                    "file_stream": 2,
                    "input_file": 1,
                    "param_file": 1,
                    "param_fileptr": 1
                },
                "param_3": {
                    "extract": 1,
                    "flag": 18,
                    "is_archived": 1,
                    "param3": 1,
                    "param_char": 1,
                    "param_check": 1,
                    "param_option": 1,
                    "param_three": 1,
                    "read_mode": 2,
                    "reverse": 2,
                    "reverse_flag": 1,
                    "seek_option": 1
                },
                "pcVar12": {
                    "archive_file": 1,
                    "archive_filename": 1,
                    "archive_name": 2,
                    "archive_path": 5,
                    "base_path": 1,
                    "char_pointer_4": 1,
                    "char_ptr3": 1,
                    "compressed_name": 1,
                    "current_path": 1,
                    "extracted_filepath": 1,
                    "extracted_name": 2,
                    "file_name": 1,
                    "file_name_var": 1,
                    "original_filename": 1,
                    "output_name": 1,
                    "path": 4,
                    "path_ptr": 1,
                    "path_string": 1,
                    "ptr1": 1,
                    "ptr2": 1,
                    "str_ptr6": 1
                },
                "pcVar13": {
                    "archive_file_name": 1,
                    "archive_filename": 1,
                    "archive_message": 1,
                    "char_pointer_5": 1,
                    "char_ptr4": 1,
                    "err_msg_ptr2": 1,
                    "error_format": 2,
                    "error_message": 6,
                    "error_message_fmt": 1,
                    "error_msg2": 1,
                    "error_msg3": 1,
                    "error_text": 1,
                    "file_name": 3,
                    "filename": 2,
                    "fmt_str_ptr": 1,
                    "format_string": 1,
                    "formatted_string": 1,
                    "message": 2,
                    "ptr3": 1,
                    "str_ptr7": 1,
                    "str_var2": 1
                },
                "pcVar2": {
                    "archive_file": 1,
                    "archive_path": 1,
                    "char_pointer_1": 1,
                    "char_ptr": 2,
                    "char_ptr2": 1,
                    "corrupt_error": 1,
                    "corrupt_message": 1,
                    "corrupt_str": 1,
                    "error_message": 1,
                    "file_name": 1,
                    "message": 1,
                    "msg": 1,
                    "path": 4,
                    "path_name": 1,
                    "ptr1": 1,
                    "src": 1,
                    "str": 5,
                    "str_ptr": 2,
                    "str_ptr1": 1,
                    "str_var": 1
                },
                "sVar10": {
                    "archive_file_length": 1,
                    "archive_filepath_length": 1,
                    "archive_length": 1,
                    "archive_path_len": 1,
                    "archive_path_length": 1,
                    "extracted_filename_size": 1,
                    "input_length": 1,
                    "length": 3,
                    "name_length": 1,
                    "original_filename_length": 1,
                    "original_name_length": 2,
                    "param1_length": 1,
                    "path_len": 2,
                    "path_length": 5,
                    "size2": 1,
                    "size3": 1,
                    "size_var3": 2,
                    "size_var_3": 1,
                    "src_len": 1,
                    "str_length": 1,
                    "str_length_1": 1,
                    "string_length_three": 1
                },
                "sVar11": {
                    "extracted_name_length": 1,
                    "file_length": 1,
                    "file_name_len": 1,
                    "file_name_length": 4,
                    "file_name_length2": 1,
                    "filename_len2": 1,
                    "filename_length": 3,
                    "length": 3,
                    "name_len": 1,
                    "name_len2": 1,
                    "name_length": 1,
                    "name_length1": 1,
                    "name_length2": 2,
                    "name_length_2": 1,
                    "original_filename_size": 1,
                    "path_length": 1,
                    "size3": 1,
                    "size4": 1,
                    "size_var4": 2,
                    "size_var_4": 1,
                    "str_length_2": 1,
                    "string_length_one": 1
                },
                "sVar6": {
                    "bytes_read": 3,
                    "header_length": 1,
                    "header_read": 1,
                    "header_read_size": 1,
                    "read_size": 11,
                    "size": 8,
                    "size1": 2,
                    "size_var": 2,
                    "size_var_1": 1,
                    "string_length_two": 1
                },
                "sVar9": {
                    "file_name_length": 4,
                    "filename_len": 1,
                    "filename_length": 3,
                    "filename_size": 1,
                    "length": 3,
                    "length2": 1,
                    "name_len": 2,
                    "name_length": 10,
                    "path_len": 1,
                    "size2": 1,
                    "size_var2": 2,
                    "size_var_2": 1
                },
                "uVar14": {
                    "error_code": 2,
                    "error_flag": 2,
                    "flag2": 1,
                    "is_error": 1,
                    "output": 1,
                    "result": 4,
                    "result_flag": 2,
                    "result_status": 1,
                    "ret_value": 1,
                    "return_status": 1,
                    "return_val": 1,
                    "return_value": 4,
                    "status": 2,
                    "success": 1,
                    "uint_var_4": 1
                },
                "uVar4": {
                    "combined_result": 1,
                    "error_flag": 2,
                    "flags": 4,
                    "header_result": 1,
                    "result": 2,
                    "return_value": 6,
                    "status": 10,
                    "uint_var": 3,
                    "value": 1
                },
                "uVar5": {
                    "err_msg": 1,
                    "error_message": 8,
                    "error_msg": 1,
                    "error_string": 3,
                    "localized_string": 1,
                    "message": 10,
                    "msg_ptr": 2,
                    "str_ptr2": 1,
                    "text": 1,
                    "uint_var2": 2,
                    "uint_var_2": 1
                },
                "uVar7": {
                    "err_msg": 1,
                    "err_msg_ptr": 1,
                    "error_message": 8,
                    "error_msg": 1,
                    "error_msg2": 1,
                    "error_string": 2,
                    "localized_string": 1,
                    "message": 6,
                    "message1": 1,
                    "message_2": 1,
                    "msg": 1,
                    "msg_ptr2": 1,
                    "str_ptr3": 1,
                    "text": 1,
                    "uint_var3": 2,
                    "uint_var_3": 1
                },
                "uVar8": {
                    "archive_number": 1,
                    "archive_size": 1,
                    "file_count": 1,
                    "file_size": 8,
                    "header_number": 1,
                    "num": 1,
                    "number": 1,
                    "ulong_var": 3,
                    "unsigned_var": 1,
                    "value": 11,
                    "value1": 1
                }
            },
            "called": [
                "fopen",
                "error",
                "free",
                "malloc",
                "FUN_00104de0",
                "fseek",
                "FUN_001029a5",
                "FUN_00102f65",
                "strtoul",
                "dcgettext",
                "fileno",
                "strlen",
                "fread",
                "fclose",
                "snprintf",
                "FUN_001025ab",
                "FUN_00102cc4",
                "fstat"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nuint process_archive_files_0010358d(undefined8 param,FILE *file,char flag)\n\n{\n  long length;\n  char *str;\n  int result;\n  uint status;\n  undefined8 message;\n  size_t read_size;\n  undefined8 error_message;\n  ulong value;\n  size_t name_length;\n  char *corrupt_string;\n  size_t path_length;\n  size_t file_name_length;\n  char *full_path;\n  char *archive_path;\n  FILE *file_stream;\n  char *error_message;\n  uint return_value;\n  stat file_stat;\n  undefined memory_1 [24];\n  undefined memory_2 [16];\n  undefined8 var1;\n  undefined extracted_file [16];\n  undefined memory4 [16];\n  undefined8 memory_6;\n  long file_offset;\n  long current_offset;\n  int flag;\n  undefined buffer [48];\n  char header [10];\n  short header_value;\n  \n  var1 = 0;\n  extracted_file = ZEXT816(0);\n  memory4 = ZEXT816(0);\n  memory_1._0_16_ = ZEXT816(0);\n  memory_2 = ZEXT816(0);\n  memory_6 = 0;\n  result = fileno(file);\n  result = fstat(result,&file_stat);\n  if ((result < 0) ||\n     (result = process_archive_file_001025ab(extracted_file,param,file,file_stat.st_size,flag), result != 0)) {\nLAB_001036cc:\n    return_value = 1;\nLAB_00103a46:\n    if ((FILE *)memory_1._8_8_ != (FILE *)0x0) {\n      fclose((FILE *)memory_1._8_8_);\n    }\n    free_memory_and_reset_00102f65(memory_1);\n    free_memory_and_reset_00102f65(extracted_file);\n  }\n  else {\n    return_value = 0;\n    while (result = fseek(file,current_offset,0), result == 0) {\n      read_size = fread(buffer,1,0x3c,file);\n      if (read_size != 0x3c) {\n        if (read_size == 0) goto LAB_00103a46;\n        error_message = \"%s: failed to read archive header\\n\";\nLAB_001036b8:\n        message = dcgettext(0,error_message,5);\n        error(message,param);\n        goto LAB_001036cc;\n      }\n      if (header_value != 0xa60) {\n        message = extracted_file._0_8_;\n        error_message = dcgettext(0,\"%s: did not find a valid archive header\\n\",5);\n        error(error_message,message);\n        goto LAB_001036cc;\n      }\n      current_offset = current_offset + 0x3c;\n      value = strtoul(header,(char **)0x0,10);\n      DAT_00109438 = (value + 1) - (ulong)((value & 1) == 0);\n      error_message = (char *)extract_file_name_from_path_001029a5(extracted_file,memory_1);\n      if (error_message == (char *)0x0) {\n        error_message = \"%s: bad archive file name\\n\";\n        goto LAB_001036b8;\n      }\n      name_length = strlen(error_message);\n      corrupt_string = (char *)dcgettext(0,\"<corrupt>\",5);\n      archive_path = (char *)extracted_file._0_8_;\n      path_length = strlen((char *)extracted_file._0_8_);\n      file_name_length = strlen(error_message);\n      read_size = path_length + file_name_length + 3;\n      if (flag == 0) {\n        full_path = (char *)malloc(read_size);\n        if (full_path == (char *)0x0) goto LAB_001037d3;\n        snprintf(full_path,read_size,\"%s(%s)\",archive_path,error_message);\n      }\n      else if (file_offset == 0) {\n        full_path = (char *)malloc(read_size);\n        if (full_path == (char *)0x0) {\nLAB_001037d3:\n          message = dcgettext(0,\"Out of memory\\n\",5);\n          error(message);\n          message = dcgettext(0,\"%s: bad archive file name\\n\",5);\n          error(message,param);\n          free(error_message);\n          goto LAB_001036cc;\n        }\n        snprintf(full_path,read_size,\"%s[%s]\",archive_path,error_message);\n      }\n      else {\n        str = (char *)memory_1._0_8_;\n        length = path_length + file_name_length + 5;\n        if ((char *)memory_1._0_8_ == (char *)0x0) {\n          read_size = strlen(corrupt_string);\n          read_size = length + read_size;\n          full_path = (char *)malloc(read_size);\n          str = corrupt_string;\n        }\n        else {\n          read_size = strlen((char *)memory_1._0_8_);\n          read_size = length + read_size;\n          full_path = (char *)malloc(read_size);\n        }\n        if (full_path == (char *)0x0) goto LAB_001037d3;\n        snprintf(full_path,read_size,\"%s[%s(%s)]\",archive_path,str,error_message);\n      }\n      if (flag == '\\0') {\n        free(error_message);\n        current_offset = current_offset + DAT_00109438;\n        status = read_and_validate_elf_header_00104de0(full_path,file);\n        return_value = return_value | status;\n      }\n      else {\n        if (file_offset == 0) {\n          archive_path = (char *)extract_file_name_from_path_00102cc4(param,error_message,name_length);\n          free(error_message);\n          if (archive_path != (char *)0x0) {\n            file_stream = fopen(archive_path,\"r+b\");\n            if (file_stream != (FILE *)0x0) {\n              status = read_and_validate_elf_header_00104de0(full_path,file_stream);\n              return_value = return_value | status;\n              fclose(file_stream);\n              free(archive_path);\n              goto LAB_00103a39;\n            }\n            message = dcgettext(0,\"Input file \\'%s\\' is not readable\\n\",5);\n            error(message,archive_path);\n            free(archive_path);\n          }\n          free(full_path);\n          goto LAB_001036cc;\n        }\n        free(error_message);\n        result = fseek((FILE *)memory_1._8_8_,file_offset + 0x3c,0);\n        if (result != 0) {\n          message = memory_1._0_8_;\n          error_message = dcgettext(0,\"%s: failed to seek to archive member\\n\",5);\n          error(error_message,message);\n          free(full_path);\n          goto LAB_001036cc;\n        }\n        status = read_and_validate_elf_header_00104de0(full_path,memory_1._8_8_);\n        return_value = return_value | status;\n      }\nLAB_00103a39:\n      free(full_path);\n    }\n    message = dcgettext(0,\"%s: failed to seek to next archive header\\n\",5);\n    return_value = 1;\n    error(message,param);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_archive_files_0010358d",
            "entrypoint": "0x0010358d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010358d": "process_archive_files_0010358d",
                "__s": "corrupt_string",
                "__s_00": "full_path",
                "__stream": "file_stream",
                "iVar3": "result",
                "lVar1": "length",
                "local_148": "var1",
                "local_160": "memory_2",
                "local_178": "memory_1",
                "local_208": "file_stat",
                "local_46": "header_value",
                "local_50": "header",
                "local_80": "buffer",
                "local_88": "flag",
                "local_90": "current_offset",
                "local_98": "file_offset",
                "local_a8": "memory_6",
                "local_c0": "memory4",
                "local_d8": "extracted_file",
                "param_1": "param",
                "param_2": "file",
                "param_3": "flag",
                "pcVar12": "archive_path",
                "pcVar13": "error_message",
                "pcVar2": "str",
                "sVar10": "path_length",
                "sVar11": "file_name_length",
                "sVar6": "read_size",
                "sVar9": "name_length",
                "uVar14": "return_value",
                "uVar4": "status",
                "uVar5": "message",
                "uVar7": "error_message",
                "uVar8": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103a90": {
            "additional_data": {
                "FUN_00103a90": {
                    "convert_data_length": 4,
                    "convert_data_to_unsigned_long": 1,
                    "convert_data_to_value": 1,
                    "decode_data": 1,
                    "decode_data_length": 1,
                    "extract_data": 3,
                    "extract_data_value": 1,
                    "extract_integer_from_pointer": 1,
                    "get_byte_from_data": 1,
                    "get_data": 3,
                    "get_data_from_param": 1,
                    "get_data_length": 2,
                    "get_data_size": 1,
                    "get_data_value": 4,
                    "get_value_from_data": 2,
                    "parse_data_length": 2,
                    "read_data": 1,
                    "reverse_data_length": 1
                },
                "abort": {
                    "end_program": 1,
                    "exit_program": 1
                },
                "dcgettext": {
                    "get_error_message": 2
                },
                "error": {
                    "print_error": 1,
                    "print_error_message": 1
                },
                "param_1": {
                    "data": 13,
                    "data_buffer": 1,
                    "data_pointer": 11,
                    "data_ptr": 6
                },
                "param_2": {
                    "data_length": 23,
                    "length": 8
                },
                "uVar1": {
                    "converted_value": 2,
                    "extracted_data": 1,
                    "extracted_value": 1,
                    "result": 27
                },
                "uVar2": {
                    "error_message": 22,
                    "error_msg": 7,
                    "error_string": 2
                }
            },
            "called": [
                "FUN_00103ab3",
                "caseD_0",
                "caseD_3"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nulong get_value_from_data_00103a90(ulong *data,ulong data_length)\n\n{\n  ulong result;\n  undefined8 error_message;\n  \n  switch(data_length & 0xffffffff) {\n  default:\n    error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    print_error_message(error_message,data_length & 0xffffffff);\n                    \n    abort();\n  case 1:\n    return (ulong)*(byte *)data;\n  case 2:\n    return (ulong)*(ushort *)data;\n  case 3:\n    result = FUNC_00103ab3(data,data_length,\n                         (ulong)*(byte *)((long)data + 1) << 8 |\n                         (ulong)*(byte *)((long)data + 2) << 0x10);\n    return result;\n  case 4:\n    return (ulong)*(uint *)data;\n  case 5:\n    result = FUNC_00103ab3(data,data_length,(ulong)*(byte *)((long)data + 4) << 0x20);\n    return result;\n  case 6:\n    result = FUNC_00103ab3(data,data_length,\n                         (ulong)*(byte *)((long)data + 4) << 0x20 |\n                         (ulong)*(byte *)((long)data + 5) << 0x28);\n    return result;\n  case 7:\n    result = FUNC_00103ab3(data,data_length,\n                         (ulong)*(byte *)((long)data + 4) << 0x20 |\n                         (ulong)*(byte *)((long)data + 5) << 0x28 | (ulong)*(uint *)data);\n    return result;\n  case 8:\n    return *data;\n  }\n}\n\n",
            "current_name": "get_value_from_data_00103a90",
            "entrypoint": "0x00103a90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103a90": "get_value_from_data_00103a90",
                "abort": "exit_program",
                "dcgettext": "get_error_message",
                "error": "print_error_message",
                "param_1": "data",
                "param_2": "data_length",
                "uVar1": "result",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103ab3": {
            "called": [],
            "calling": [
                "FUN_00103a90",
                "caseD_3"
            ],
            "code": "\nvoid FUNC_00103ab3(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103ab3",
            "entrypoint": "0x00103ab3",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103ab3": "FUNC_00103ab3"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103ad0": {
            "additional_data": {
                "FUN_00103ad0": {
                    "copy_data": 7,
                    "copy_data_to_memory": 2,
                    "fill_buffer": 2,
                    "fill_buffer_with_repeated_value": 1,
                    "fill_data": 1,
                    "fill_data_with_byte": 1,
                    "fill_memory": 2,
                    "fill_memory_with_byte": 1,
                    "initialize_memory": 1,
                    "memset": 1,
                    "set_bytes": 2,
                    "write_data": 6,
                    "write_data_to_memory": 3,
                    "write_param_to_memory": 1
                },
                "param_1": {
                    "address": 1,
                    "buffer": 5,
                    "buffer_address": 2,
                    "data": 1,
                    "data_start": 1,
                    "dest_addr": 2,
                    "dest_address": 2,
                    "dest_pointer": 1,
                    "dest_ptr": 4,
                    "destination": 3,
                    "destination_address": 3,
                    "destination_ptr": 1,
                    "memory_address": 4,
                    "memory_pointer": 1
                },
                "param_2": {
                    "byte_to_fill": 2,
                    "data": 10,
                    "data_to_copy": 2,
                    "data_to_write": 2,
                    "data_value": 7,
                    "fill_value": 1,
                    "src_data": 1,
                    "value": 6
                },
                "param_3": {
                    "data_length": 18,
                    "length": 13
                },
                "uVar1": {
                    "error_message": 19,
                    "error_msg": 5,
                    "error_string": 2
                },
                "uVar2": {
                    "counter": 5,
                    "current_index": 1,
                    "i": 9,
                    "index": 8,
                    "iteration_count": 3
                }
            },
            "called": [
                "FUN_00102c98"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\nvoid write_param_to_memory_00103ad0(long buffer,ulong data,uint data_length)\n\n{\n  undefined8 error_message;\n  ulong i;\n  \n  if (data_length < 9) {\n    for (i = 0; data_length != i; i = i + 1) {\n      *(char *)(buffer + i) = (char)data;\n      data = data >> 8;\n    }\n    return;\n  }\n  error_message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(error_message,data_length);\n                    \n  abort();\n}\n\n",
            "current_name": "write_param_to_memory_00103ad0",
            "entrypoint": "0x00103ad0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103ad0": "write_param_to_memory_00103ad0",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "data_length",
                "uVar1": "error_message",
                "uVar2": "i"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103b30": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103b43) */\n/* WARNING: Removing unreachable block (ram,0x00103b4f) */\n\nvoid FUNC_00103b30(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103b30",
            "entrypoint": "0x00103b30",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103b30": "FUNC_00103b30"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103b60": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103b84) */\n/* WARNING: Removing unreachable block (ram,0x00103b90) */\n\nvoid FUNC_00103b60(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103b60",
            "entrypoint": "0x00103b60",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103b60": "FUNC_00103b60"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103bf0": {
            "additional_data": {
                "BOOL_00103bf1": {
                    "bool_flag1": 1
                },
                "BOOL_00103d1f": {
                    "bool_flag2": 1
                },
                "BOOL_00103d21": {
                    "bool_flag3": 1
                },
                "BOOL_00103e9e": {
                    "bool_flag4": 1
                },
                "BOOL_00103eae": {
                    "bool_flag6": 1
                },
                "BOOL_00103eb0": {
                    "bool_flag5": 1
                },
                "BOOL_00103eb3": {
                    "bool_flag7": 1
                },
                "CHAR_00103eb4": {
                    "char_value2": 1
                },
                "DAG_69": {
                    "switch_d_69_case_d_69": 1
                },
                "DAG_96": {
                    "switch_d_96_case_d_96": 1
                },
                "DAG_97": {
                    "switch_d_97_case_d_97": 1
                },
                "DAG_98": {
                    "switch_d_98_case_d_98": 1
                },
                "DAG_99": {
                    "switch_d_99_case_d_99": 1
                },
                "DAG_9a": {
                    "switch_d_9a_case_d_9a": 1
                },
                "DAG_9b": {
                    "switch_d_9b_case_d_9b": 1
                },
                "DAG_9c": {
                    "switch_d_9c_case_d_9c": 1
                },
                "DAG_9d": {
                    "switch_d_9d_case_d_9d": 1
                },
                "DAG_9e": {
                    "switch_d_9e_case_d_9e": 1
                },
                "DAG_9f": {
                    "switch_d_9f_case_d_9f": 1
                },
                "FUN_00103bf0": {
                    "elfedit_main": 1,
                    "extract_and_process_elf_files": 1,
                    "parse_command": 1,
                    "parse_command_line": 3,
                    "process_arguments": 1,
                    "process_binary": 7,
                    "process_binary_file": 1,
                    "process_elf_edit": 2,
                    "process_elf_edit_arguments": 1,
                    "process_elf_edit_command": 1,
                    "process_elf_files": 1,
                    "process_elfedit_options": 1,
                    "process_input": 3,
                    "process_input_files": 1
                },
                "LONG_00103eb8": {
                    "long_value4": 1
                },
                "LONG_00103ecc": {
                    "long_value5": 1
                },
                "VOID_00103edc": {
                    "void_value1": 1
                },
                "VOID_00103ee8": {
                    "void_value2": 1
                },
                "VOID_00103eed": {
                    "void_value3": 1
                },
                "VOID_00103ef0": {
                    "void_value4": 1
                },
                "VOID_00103f08": {
                    "exit_program_00102fbc": 1
                },
                "VOID_00103f0d": {
                    "print_elf_edit_usage_001032de": 1
                },
                "VOID_00103f1d": {
                    "copy_string_characters_00103160": 1
                },
                "VOID_00103f29": {
                    "allocate_or_reallocate_memory_00103449": 1
                },
                "VOID_00103f3b": {
                    "skip_non_ascii_characters_00102fa0": 1
                },
                "VOID_00103f4f": {
                    "error": 1
                },
                "VOID_00103f51": {
                    "process_archive_files_0010358d": 1
                },
                "VOID_00103f57": {
                    "extract_file_name_from_path_00105370": 1
                },
                "VOID_00103f63": {
                    "read_and_validate_elf_header_00104de0": 1
                },
                "VOID_00103f83": {
                    "get_machine_type_00104d30": 1
                },
                "VOID_00103f8d": {
                    "get_file_type_00104da0": 1
                },
                "VOID_00103fd5": {
                    "find_osabi_index_00104ce0": 1
                },
                "VOID_00104057": {
                    "identify_x86_feature_00104c60": 1
                },
                "VOID_0010406b": {
                    "mmap": 1
                },
                "__addr": {
                    "addr": 6,
                    "addr_ptr": 4,
                    "address": 12,
                    "address_ptr": 2,
                    "address_variable": 1,
                    "mapped_addr": 1,
                    "mapped_address": 2,
                    "mem_address": 1,
                    "mmap_addr": 1,
                    "mmap_address": 1
                },
                "__errno_location": {
                    "errno_location": 1
                },
                "__optarg": {
                    "opt_arg": 1,
                    "option_arg": 1
                },
                "__optind": {
                    "opt_index": 1
                },
                "__ptr": {
                    "extracted_file_name": 2,
                    "file_name": 2,
                    "file_path": 1,
                    "name_ptr": 1,
                    "placeholder": 1,
                    "pointer": 12,
                    "pointer_variable": 1,
                    "ptr": 10,
                    "ptr_var": 1
                },
                "__s": {
                    "buffer": 6,
                    "byte_arr": 1,
                    "byte_array": 4,
                    "byte_ptr": 3,
                    "byte_ptr3": 1,
                    "byte_string_variable": 1,
                    "file_name": 1,
                    "magic_number": 1,
                    "str": 1,
                    "str_ptr": 1,
                    "str_var": 1,
                    "string": 4,
                    "string_buffer": 1,
                    "string_pointer": 1,
                    "string_ptr": 2,
                    "temp_string": 2
                },
                "_stderr": {
                    "standard_error": 1
                },
                "_stdout": {
                    "standard_output": 1
                },
                "allocateOrReallocateMemory": {
                    "allocate_or_reallocate_memory": 1
                },
                "bVar2": {
                    "byte1": 1,
                    "byte_val": 5,
                    "byte_value": 6,
                    "byte_var": 7,
                    "byte_var2": 6,
                    "byte_variable2": 1,
                    "current_byte": 3
                },
                "bVar4": {
                    "bool1": 3,
                    "bool_val": 3,
                    "bool_val1": 1,
                    "bool_value1": 4,
                    "bool_var": 1,
                    "bool_var1": 6,
                    "bool_var4": 7,
                    "bool_var_1": 1,
                    "bool_variable4": 1,
                    "is_condition_true": 1,
                    "is_feature_flag": 1,
                    "is_true": 1
                },
                "bVar5": {
                    "bool1": 1,
                    "bool2": 3,
                    "bool_val1": 1,
                    "bool_val2": 2,
                    "bool_value2": 4,
                    "bool_var2": 7,
                    "bool_var5": 7,
                    "bool_var_2": 1,
                    "bool_variable5": 1,
                    "is_single_quote": 3
                },
                "bVar6": {
                    "bool2": 1,
                    "bool3": 3,
                    "bool_val2": 1,
                    "bool_val3": 2,
                    "bool_value3": 4,
                    "bool_var3": 7,
                    "bool_var6": 7,
                    "bool_var_3": 1,
                    "bool_variable6": 1,
                    "is_backslash": 2,
                    "is_escaped": 1
                },
                "bVar7": {
                    "bool3": 1,
                    "bool4": 3,
                    "bool_val3": 1,
                    "bool_val4": 2,
                    "bool_value4": 4,
                    "bool_var4": 7,
                    "bool_var7": 7,
                    "bool_var_4": 1,
                    "bool_variable7": 1,
                    "is_double_quote": 3
                },
                "cVar1": {
                    "ch": 7,
                    "char1": 1,
                    "char_value": 3,
                    "char_var": 3,
                    "char_var1": 7,
                    "char_variable1": 1,
                    "character": 2,
                    "curr_char": 1,
                    "current_char": 5
                },
                "compareString": {
                    "compare_string": 1
                },
                "copyStringCharacters": {
                    "copy_string_characters": 1
                },
                "exitProgram": {
                    "exit_program": 1
                },
                "extractFileNameFromPath": {
                    "extract_file_name_from_path": 1
                },
                "fVar25": {
                    "float_var25": 1
                },
                "free": {
                    "free": 1
                },
                "getErrorString": {
                    "get_error_string": 1
                },
                "getFileType": {
                    "get_file_type": 1
                },
                "getMachineType": {
                    "get_machine_type": 1
                },
                "getOsabiIndex": {
                    "get_osabi_index": 1
                },
                "iVar10": {
                    "count": 1,
                    "i_var10": 1,
                    "index_var_2": 1,
                    "loop_var": 1,
                    "result": 2,
                    "return_value2": 1,
                    "status": 14,
                    "temp_index": 3,
                    "temp_var": 5,
                    "temp_variable": 1
                },
                "iVar31": {
                    "another_index": 1,
                    "constant_value": 1,
                    "count": 1,
                    "counter": 1,
                    "counter2": 1,
                    "file_count": 1,
                    "i_var31": 1,
                    "index2": 2,
                    "index_var_3": 1,
                    "index_variable31": 1,
                    "initial_var": 1,
                    "iterations_count": 1,
                    "limit": 5,
                    "loop_count": 1,
                    "max_files": 2,
                    "max_length": 1,
                    "max_options": 1,
                    "option": 1,
                    "temp_index2": 1,
                    "temp_int": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var7": 1,
                    "var31": 1
                },
                "iVar8": {
                    "counter": 4,
                    "file_index": 1,
                    "i": 1,
                    "i_var8": 1,
                    "index": 18,
                    "index_var": 3,
                    "index_var_1": 1,
                    "index_variable": 1,
                    "option": 1
                },
                "identifyX86Feature": {
                    "identify_x86_feature": 1
                },
                "iptr1": {
                    "error_handler_func_ptr": 1
                },
                "iptr2": {
                    "mmap_func_ptr": 1
                },
                "iptr3": {
                    "dcgettext_func_ptr": 1
                },
                "iptr4": {
                    "fprintf_func_ptr": 1
                },
                "iptr5": {
                    "print_usage_func_ptr": 1
                },
                "lVar20": {
                    "counter": 2,
                    "index": 1,
                    "iter": 1,
                    "long_val": 1,
                    "long_value": 2,
                    "long_var": 5,
                    "long_var1": 1,
                    "long_var20": 1,
                    "long_var_1": 1,
                    "long_variable20": 1,
                    "loop_index": 2,
                    "loop_var": 6,
                    "loop_var2": 1,
                    "new_loop_variable": 1,
                    "temp_long": 1,
                    "temp_long1": 1,
                    "temp_var": 1,
                    "temp_var2": 2
                },
                "lVar23": {
                    "counter1": 1,
                    "counter2": 1,
                    "file_index": 1,
                    "long_val2": 1,
                    "long_value2": 2,
                    "long_var1": 1,
                    "long_var2": 5,
                    "long_var23": 1,
                    "long_var_2": 1,
                    "long_variable23": 1,
                    "loop_index2": 1,
                    "loop_var1": 1,
                    "loop_var2": 5,
                    "loop_var3": 1,
                    "new_loop_variable2": 1,
                    "temp": 1,
                    "temp_index": 1,
                    "temp_long2": 2,
                    "temp_var2": 1,
                    "temp_var3": 2
                },
                "lVar29": {
                    "file_index": 1,
                    "len_var": 1,
                    "long1": 1,
                    "long_val": 1,
                    "long_val3": 1,
                    "long_value3": 1,
                    "long_value5": 1,
                    "long_var": 2,
                    "long_var2": 1,
                    "long_var29": 1,
                    "long_var3": 4,
                    "long_var_3": 1,
                    "long_variable29": 1,
                    "loop_index": 1,
                    "loop_index3": 1,
                    "loop_var": 1,
                    "loop_var3": 4,
                    "loop_var4": 1,
                    "loop_variable": 1,
                    "param_counter": 1,
                    "start": 1,
                    "temp_long3": 2,
                    "temp_var6": 1
                },
                "local_120": {
                    "local_long": 1,
                    "local_segment_start": 1,
                    "local_size": 1,
                    "local_ulong": 2,
                    "local_ulong_var": 1,
                    "local_value1": 1,
                    "local_var": 4,
                    "local_var1": 3,
                    "local_var120": 2,
                    "local_variable120": 1,
                    "segment_address": 2,
                    "start_address": 1,
                    "temp_size": 1,
                    "temp_uint10": 1,
                    "ulong_value11": 1,
                    "ulong_value9": 1,
                    "ulong_var": 1,
                    "ulong_var120": 1,
                    "ulong_var8": 1,
                    "ulong_var_10": 1
                },
                "local_138": {
                    "dynamic_allocation_1": 1,
                    "extracted_file_name": 1,
                    "file_name_buffer": 1,
                    "file_name_list": 1,
                    "file_names": 1,
                    "filename": 1,
                    "local_array": 1,
                    "local_file_names": 1,
                    "local_pointer1": 1,
                    "local_ptr": 1,
                    "local_string_array": 1,
                    "local_var138": 1,
                    "local_variable138": 1,
                    "long_ptr3": 1,
                    "new_file_names": 1,
                    "new_param_array": 1,
                    "new_ptr": 2,
                    "output_file_names": 1,
                    "output_file_path": 1,
                    "output_files": 1,
                    "param_array": 1,
                    "param_name_array": 1,
                    "pointer_array3": 1,
                    "temp_buffer": 1,
                    "ulong_ptr1": 1,
                    "ulong_ptr_2": 1
                },
                "local_c8": {
                    "file_info": 1,
                    "file_stat": 3,
                    "file_stats": 2,
                    "file_status": 1,
                    "local_stat": 3,
                    "local_stat_struct": 1,
                    "local_struct": 1,
                    "local_variable_c8": 1,
                    "stat_buffer": 1,
                    "stat_struct": 6,
                    "stat_value": 1,
                    "stat_var": 5,
                    "struct_variable": 1,
                    "temp_stat": 1
                },
                "local_d0": {
                    "buffer": 2,
                    "byte_array1": 1,
                    "byte_array2": 1,
                    "byte_array_var": 1,
                    "byte_buffer": 1,
                    "byte_pointer3": 1,
                    "byte_ptr3": 2,
                    "byte_ptr_4": 1,
                    "byte_var1": 1,
                    "byte_var2": 1,
                    "byte_var3": 1,
                    "local_byte": 1,
                    "local_byte_arr": 1,
                    "local_byte_pointer": 3,
                    "local_byte_ptr": 3,
                    "local_byte_ptr1": 1,
                    "local_byte_ptrd0": 1,
                    "local_byte_var": 1,
                    "local_var2": 1,
                    "local_var_d0": 1,
                    "local_variable_d0": 1,
                    "temp_byte_ptr3": 1
                },
                "local_d8": {
                    "char_array": 2,
                    "char_buffer1": 1,
                    "char_ptr": 1,
                    "char_ptr_3": 1,
                    "char_var4": 1,
                    "err_msg1": 1,
                    "file_error_msg": 1,
                    "local_char": 1,
                    "local_char_pointer": 2,
                    "local_char_ptr1": 1,
                    "local_char_ptrd8": 1,
                    "local_error_message": 1,
                    "local_str": 1,
                    "local_str_ptr": 1,
                    "local_string1": 1,
                    "local_string_ptr": 1,
                    "local_string_var1": 1,
                    "local_var1": 1,
                    "local_var2": 1,
                    "local_var_d8": 1,
                    "local_variable_d8": 1,
                    "str_var4": 1,
                    "string_value3": 1,
                    "string_var1": 1,
                    "temp_char_ptr3": 1,
                    "temp_file_path": 1
                },
                "mmap": {
                    "mmap": 1
                },
                "munmap": {
                    "munmap": 1
                },
                "openFile": {
                    "open_file": 1
                },
                "pFVar16": {
                    "file": 3,
                    "file_pointer": 8,
                    "file_pointer_variable": 1,
                    "file_ptr": 16
                },
                "param_1": {
                    "argc": 15,
                    "file_count": 1,
                    "num_arguments": 1,
                    "num_files": 4,
                    "num_input": 1,
                    "num_parameters": 3,
                    "num_params": 6
                },
                "param_2": {
                    "arguments": 1,
                    "argv": 15,
                    "file_paths": 6,
                    "param_array": 3,
                    "param_list": 2,
                    "param_pointers": 1,
                    "param_values": 1,
                    "parameter_array": 1,
                    "params": 1
                },
                "pbVar22": {
                    "buffer2": 1,
                    "buffer_ptr": 1,
                    "byte_pointer": 5,
                    "byte_pointer1": 1,
                    "byte_pointer_variable": 1,
                    "byte_ptr": 9,
                    "byte_ptr2": 1,
                    "byte_ptr22": 1,
                    "byte_ptr_2": 1,
                    "byte_var": 1,
                    "byte_var22": 1,
                    "temp_byte_ptr1": 1
                },
                "pbVar27": {
                    "buffer3": 1,
                    "byte_pointer2": 6,
                    "byte_pointer_variable27": 1,
                    "byte_ptr": 5,
                    "byte_ptr1": 1,
                    "byte_ptr2": 8,
                    "byte_ptr27": 1,
                    "byte_ptr3": 1,
                    "byte_ptr_3": 1,
                    "byte_var2": 1,
                    "byte_var27": 1,
                    "ptr": 1,
                    "string_pointer": 1,
                    "string_ptr": 1,
                    "temp_byte_ptr2": 1
                },
                "pcVar34": {
                    "char_pointer": 1,
                    "char_pointer_variable34": 1,
                    "char_ptr": 3,
                    "char_ptr1": 1,
                    "char_ptr34": 1,
                    "char_ptr_var34": 1,
                    "char_var": 1,
                    "char_var2": 1,
                    "err_msg": 3,
                    "error_message": 2,
                    "error_string": 1,
                    "pointer_to_char": 1,
                    "print_string": 1,
                    "str_ptr1": 1,
                    "str_val": 1,
                    "str_var": 1,
                    "string_pointer2": 1,
                    "string_ptr": 1,
                    "string_ptr1": 1,
                    "string_value": 1,
                    "string_var": 1,
                    "string_var1": 1,
                    "temp_char_ptr1": 1,
                    "text_var": 1
                },
                "pcVar36": {
                    "char_pointer2": 1,
                    "char_pointer_variable36": 1,
                    "char_ptr2": 3,
                    "char_ptr36": 1,
                    "char_ptr_2": 1,
                    "char_ptr_var36": 1,
                    "char_var2": 1,
                    "char_var3": 1,
                    "error_message": 1,
                    "file_name": 1,
                    "file_string": 1,
                    "input_file": 1,
                    "name_str": 1,
                    "pointer_to_char2": 1,
                    "str_ptr2": 1,
                    "str_val2": 1,
                    "str_var2": 1,
                    "str_var3": 1,
                    "string_pointer3": 1,
                    "string_ptr2": 2,
                    "string_value2": 1,
                    "string_var2": 2,
                    "temp_char_ptr2": 1,
                    "text_var2": 1
                },
                "pcVar37": {
                    "pointer_val": 1
                },
                "piVar19": {
                    "err_code_ptr": 1,
                    "err_num": 2,
                    "err_num_ptr": 1,
                    "err_var": 1,
                    "errno": 1,
                    "errno_ptr": 5,
                    "errno_value": 1,
                    "errnum": 1,
                    "error_code": 1,
                    "error_num": 3,
                    "error_num_pointer": 1,
                    "error_number": 3,
                    "error_pointer": 2,
                    "error_ptr": 1,
                    "error_var": 2,
                    "int_ptr": 2,
                    "int_ptr19": 1,
                    "p_errno": 1,
                    "pointer_variable19": 1
                },
                "plVar11": {
                    "file_sizes": 1,
                    "long_pointer": 1,
                    "long_pointer1": 1,
                    "long_ptr": 6,
                    "long_ptr1": 1,
                    "long_ptr11": 1,
                    "long_ptr_1": 1,
                    "param_list_ptr": 1,
                    "param_ptr": 2,
                    "parameter_list": 1,
                    "path_list": 1,
                    "pl_var": 2,
                    "pointer_array": 1,
                    "pointer_to_long": 1,
                    "pointer_value": 1,
                    "pointer_var11": 1,
                    "ptr": 1,
                    "ptr_array": 1,
                    "ptr_list": 1,
                    "ptr_var": 1,
                    "ptr_var1": 3,
                    "ptr_variable11": 1
                },
                "plVar21": {
                    "arguments2": 1,
                    "argv": 1,
                    "file_names": 1,
                    "files": 3,
                    "input_files": 1,
                    "long_pointer2": 2,
                    "long_ptr21": 1,
                    "long_ptr_2": 1,
                    "new_ptr_array": 1,
                    "newargv": 1,
                    "param_array": 1,
                    "param_list_ptr": 1,
                    "param_list_ptr2": 1,
                    "param_ptr": 1,
                    "parameter_list2": 1,
                    "parameters": 1,
                    "parameters_array": 1,
                    "path_arr": 1,
                    "pointer_to_long2": 1,
                    "ptr_array": 1,
                    "ptr_variable21": 1,
                    "updated_file_paths": 1
                },
                "plVar24": {
                    "additional_parameters": 1,
                    "arguments3": 1,
                    "files1": 1,
                    "files2": 1,
                    "long_pointer3": 2,
                    "long_ptr2": 3,
                    "long_ptr24": 1,
                    "long_ptr_3": 1,
                    "new_long_ptr": 1,
                    "new_parameters_array": 1,
                    "new_path_list": 1,
                    "new_ptr_array2": 1,
                    "param_array2": 1,
                    "param_list_ptr3": 1,
                    "param_ptr2": 1,
                    "parameter_list3": 1,
                    "pointer_array2": 1,
                    "pointer_to_long3": 1,
                    "ptr_array2": 1,
                    "ptr_list3": 1,
                    "ptr_var2": 3,
                    "ptr_variable24": 1,
                    "temp_arr": 1,
                    "temp_file_names": 1,
                    "temp_files": 1,
                    "updated_file_paths2": 1
                },
                "ppuVar32": {
                    "arg_var": 1,
                    "arg_var_list": 1,
                    "cmd_line": 1,
                    "double_ptr": 1,
                    "double_ptr_var32": 1,
                    "double_ptr_variable32": 1,
                    "locales": 2,
                    "long_options": 1,
                    "newundefined_ptr_ptr": 1,
                    "null_temp_var_ptr": 1,
                    "option_arguments": 1,
                    "pointer_array": 1,
                    "pointer_pointer": 4,
                    "ppu_var": 1,
                    "ptr_array": 1,
                    "ptr_ptr": 2,
                    "ptr_ptr_var32": 1,
                    "ptr_to_ptr": 1,
                    "text_domain_var": 1,
                    "text_ptr": 1,
                    "undefined_double_pointer": 1,
                    "undefined_pointer": 1,
                    "undefined_ptr_ptr": 1,
                    "void_ptr_ptr": 2
                },
                "printElfEditUsage": {
                    "print_elf_edit_usage": 1
                },
                "puVar37": {
                    "file_type_ptr": 1,
                    "newundefined_ptr": 1,
                    "pointer_pointer2": 1,
                    "ptr_var": 1,
                    "ptr_var3": 2,
                    "temp_uint_ptr": 1,
                    "ulong_ptr": 5,
                    "ulong_ptr37": 1,
                    "ulong_ptr_variable37": 1,
                    "undefined8_pointer": 1,
                    "undefined8_ptr_var37": 1,
                    "undefined_pointer2": 1,
                    "void_ptr": 1
                },
                "sVar17": {
                    "bytes_read": 2,
                    "num_read": 1,
                    "read_size": 1,
                    "size": 15,
                    "size_val": 1,
                    "size_var": 7,
                    "size_var17": 1,
                    "size_var_1": 1,
                    "size_variable17": 1,
                    "temp_size": 1
                },
                "sVar18": {
                    "buffer_size": 1,
                    "file_size": 1,
                    "num_bytes": 1,
                    "read": 1,
                    "read_result": 1,
                    "read_var": 1,
                    "size1": 1,
                    "size2": 8,
                    "size_val2": 1,
                    "size_var": 1,
                    "size_var1": 1,
                    "size_var18": 1,
                    "size_var2": 4,
                    "size_var3": 1,
                    "size_var_2": 1,
                    "size_variable18": 1,
                    "str_len": 1,
                    "string_length": 2,
                    "string_size": 1,
                    "temp_string_size": 1
                },
                "skipNonAsciiCharacters": {
                    "skip_non_ascii_characters": 1
                },
                "uVar12": {
                    "segment_offset": 1,
                    "segment_size": 1,
                    "segment_type": 2,
                    "temp_uint1": 1,
                    "ulong2": 1,
                    "ulong_val1": 3,
                    "ulong_val2": 2,
                    "ulong_value2": 4,
                    "ulong_var1": 4,
                    "ulong_var12": 7,
                    "ulong_var2": 1,
                    "ulong_var_2": 1,
                    "ulong_variable12": 1,
                    "unsigned_var2": 1,
                    "var12": 1
                },
                "uVar13": {
                    "alignment": 2,
                    "segment_align": 1,
                    "segment_size": 1,
                    "temp_uint2": 1,
                    "ulong3": 1,
                    "ulong_val2": 3,
                    "ulong_val3": 2,
                    "ulong_value3": 4,
                    "ulong_var13": 7,
                    "ulong_var2": 4,
                    "ulong_var3": 1,
                    "ulong_var_3": 1,
                    "ulong_variable13": 1,
                    "unsigned_var3": 1,
                    "var13": 1
                },
                "uVar14": {
                    "padding": 2,
                    "padding_size": 1,
                    "segment_add": 1,
                    "temp_uint3": 1,
                    "ulong4": 1,
                    "ulong_val3": 3,
                    "ulong_val4": 2,
                    "ulong_value4": 4,
                    "ulong_var14": 7,
                    "ulong_var3": 4,
                    "ulong_var4": 1,
                    "ulong_var_4": 1,
                    "ulong_variable14": 1,
                    "unsigned_var4": 1,
                    "var14": 1
                },
                "uVar15": {
                    "segment_size": 1,
                    "temp_uint4": 1,
                    "ulong5": 1,
                    "ulong_val4": 3,
                    "ulong_val5": 2,
                    "ulong_value5": 4,
                    "ulong_var15": 7,
                    "ulong_var4": 4,
                    "ulong_var5": 1,
                    "ulong_var_5": 1,
                    "ulong_variable15": 1,
                    "unsigned_var": 1,
                    "unsigned_var5": 1,
                    "value": 2,
                    "var15": 1
                },
                "uVar25": {
                    "error_message": 1,
                    "error_msg": 1,
                    "message": 1,
                    "msg": 1,
                    "new_value": 1,
                    "result": 1,
                    "result2": 1,
                    "result_var": 2,
                    "return_value": 2,
                    "return_value2": 1,
                    "return_value3": 1,
                    "return_var": 1,
                    "retval": 1,
                    "str_var": 1,
                    "temp_uint5": 1,
                    "temp_val": 1,
                    "temp_var": 1,
                    "temp_var4": 1,
                    "ulong_var25": 3,
                    "ulong_var5": 1,
                    "ulong_var6": 1,
                    "ulong_var_6": 1,
                    "ulong_variable25": 1,
                    "unsigned_var6": 1
                },
                "uVar26": {
                    "bool_val2": 1,
                    "mask": 4,
                    "temp_uint6": 1,
                    "ulong6": 1,
                    "ulong_val5": 2,
                    "ulong_val6": 2,
                    "ulong_value6": 4,
                    "ulong_var26": 7,
                    "ulong_var5": 3,
                    "ulong_var6": 1,
                    "ulong_var7": 1,
                    "ulong_var_7": 1,
                    "ulong_variable26": 1,
                    "unsigned_var7": 1,
                    "var26": 1
                },
                "uVar28": {
                    "additional_flags": 1,
                    "feature_flag": 1,
                    "feature_index": 1,
                    "note_type": 1,
                    "temp_uint7": 1,
                    "temp_var5": 1,
                    "uint1": 1,
                    "uint_val": 5,
                    "uint_value": 1,
                    "uint_var": 6,
                    "uint_var_2": 1,
                    "uint_variable28": 1,
                    "ulong_value7": 3,
                    "ulong_var28": 3,
                    "ulong_var8": 1,
                    "unsigned_var8": 1,
                    "var28": 2
                },
                "uVar3": {
                    "current_uint": 1,
                    "current_unsigned_var": 1,
                    "current_value": 1,
                    "ulong1": 1,
                    "ulong_val": 5,
                    "ulong_value": 4,
                    "ulong_value1": 1,
                    "ulong_var": 7,
                    "ulong_var3": 7,
                    "ulong_variable3": 1,
                    "unsigned_var": 1
                },
                "uVar30": {
                    "combined_result": 1,
                    "exit_status": 1,
                    "final_result": 5,
                    "final_result_var": 1,
                    "flags": 3,
                    "option": 1,
                    "result": 1,
                    "result2": 5,
                    "result3": 1,
                    "result_var": 2,
                    "result_var2": 1,
                    "return_code": 1,
                    "return_val": 1,
                    "return_value": 1,
                    "return_value2": 1,
                    "return_value4": 1,
                    "status2": 1,
                    "uint_var_3": 1,
                    "uint_variable30": 1,
                    "var30": 1
                },
                "uVar33": {
                    "features": 1,
                    "flags1": 1,
                    "new_flag": 1,
                    "new_flags": 1,
                    "temp_uint8": 1,
                    "temp_var8": 1,
                    "uint_val1": 1,
                    "uint_val2": 2,
                    "uint_value2": 1,
                    "uint_var1": 1,
                    "uint_var2": 4,
                    "uint_var_4": 1,
                    "uint_variable33": 1,
                    "ulong_value8": 3,
                    "ulong_var33": 3,
                    "ulong_var9": 1,
                    "unsigned_var9": 1,
                    "updated_feature": 1,
                    "var33": 2
                },
                "uVar35": {
                    "abi_version": 1,
                    "base_address": 1,
                    "segment_start": 1,
                    "temp_uint9": 1,
                    "ulong_val6": 2,
                    "ulong_val7": 2,
                    "ulong_value7": 1,
                    "ulong_value9": 3,
                    "ulong_var10": 1,
                    "ulong_var35": 6,
                    "ulong_var4": 1,
                    "ulong_var6": 1,
                    "ulong_var7": 1,
                    "ulong_var_8": 1,
                    "ulong_variable35": 1,
                    "unsigned_var10": 1,
                    "var35": 2
                },
                "uVar38": {
                    "newulong_value": 1,
                    "ulong_val8": 1,
                    "ulong_value10": 2,
                    "ulong_var38": 3,
                    "ulong_var_9": 1,
                    "ulong_variable38": 1,
                    "unsigned_var11": 1
                },
                "uVar9": {
                    "result": 21,
                    "result_var": 1,
                    "return_value": 4,
                    "u_var9": 1,
                    "uint_var": 1,
                    "uint_variable": 1
                }
            },
            "called": [
                "bindtextdomain",
                "fopen",
                "free",
                "setlocale",
                "FUN_00103449",
                "FUN_00104d30",
                "FUN_001032de",
                "exit",
                "mmap",
                "strtoul",
                "FUN_00104da0",
                "strcmp",
                "memcpy",
                "FUN_0010358d",
                "FUN_00102fbc",
                "strlen",
                "fclose",
                "memmove",
                "FUN_00103160",
                "getopt_long",
                "munmap",
                "__errno_location",
                "error",
                "fprintf",
                "FUN_00104de0",
                "fseek",
                "textdomain",
                "dcgettext",
                "FUN_00102fa0",
                "fileno",
                "ferror",
                "strerror",
                "fread",
                "FUN_00104c60",
                "FUN_00105370",
                "ftell",
                "fstat",
                "printf",
                "rewind",
                "FUN_00104ce0",
                "stat"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nuint process_binary_file_00103bf0(int argc,long *argv)\n\n{\n  char ch;\n  byte byte_var;\n  ulong ulong_var3;\n  bool bool_var4;\n  bool bool_var5;\n  bool bool_var6;\n  bool bool_var4;\n  int index;\n  uint result;\n  int status;\n  void *address;\n  void *pointer;\n  long *long_ptr;\n  ulong ulong_var12;\n  ulong ulong_var13;\n  ulong ulong_var14;\n  ulong ulong_var15;\n  FILE *file_ptr;\n  size_t size;\n  byte *buffer;\n  size_t size2;\n  int *errno_ptr;\n  long loop_var;\n  long *files;\n  byte *byte_ptr;\n  long long_var2;\n  long *long_ptr2;\n  undefined8 ulong_var25;\n  ulong ulong_var26;\n  byte *byte_ptr2;\n  uint uint_var;\n  long loop_var3;\n  uint final_result;\n  int limit;\n  undefined **pointer_pointer;\n  uint uint_var2;\n  char *char_ptr;\n  ulong ulong_var35;\n  char *char_ptr2;\n  undefined8 *ulong_ptr;\n  ulong ulong_var38;\n  undefined8 *new_ptr;\n  ulong local_var;\n  char *local_char_pointer;\n  byte *local_byte_ptr;\n  stat stat_struct;\n  \n  index = 0;\n  limit = 2000;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  files = argv;\nLAB_00103c54:\n  loop_var3 = (long)(index + 1);\n  do {\n    index = (int)loop_var3;\n    if (argc <= index) {\n      pointer_pointer = &PTR_s_input_mach_00109180;\n      break;\n    }\n    if (*(char *)files[loop_var3] == '@') {\n      limit = limit + -1;\n      if (limit == 0) {\n        loop_var3 = *files;\n        char_ptr2 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00104739;\n      }\n      char_ptr2 = (char *)files[loop_var3] + 1;\n      status = stat(char_ptr2,&stat_struct);\n      if (-1 < status) {\n        if ((stat_struct.st_mode & 0xf000) == 0x4000) {\n          do {\n            loop_var3 = *files;\n            char_ptr2 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00104739:\n            fprintf(standard_error,char_ptr2,loop_var3);\n            exit_program_00102fbc();\n          } while( true );\n        }\n        file_ptr = fopen(char_ptr2,\"r\");\n        if (file_ptr != (FILE *)0x0) goto code_r0x00104650;\n      }\n    }\n    loop_var3 = loop_var3 + 1;\n  } while( true );\nLAB_00103c87:\n  index = getopt_long(argc,files,&DAT_0010604c,pointer_pointer,0);\n  if (index == -1) {\n    if ((_optind == argc) ||\n       (((DAT_00109444 | DAT_00109440) == 0 &&\n        (pointer_pointer = (undefined **)0x0,\n        (DAT_0010916c & DAT_00109160 & DAT_00109158 & DAT_00109150) == 0xffffffff))))\n    goto switchD_00103cba_caseD_69;\n    final_result = 0;\n    goto LAB_00103d1c;\n  }\n  switch(index) {\n  case 0x68:\n    print_elf_edit_usage_001032de(standard_output,0);\n  default:\nswitchD_00103cba_caseD_69:\n    print_elf_edit_usage_001032de(standard_error,1);\n    goto switchD_00103cba_caseD_9a;\n  case 0x76:\n    printf(\"GNU %s %s\\n\",\"elfedit\",\"(GNU Binutils for Debian) 2.40\");\n    char_ptr2 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(char_ptr2);\n    char_ptr2 = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(char_ptr2);\n                    \n    exit(0);\n  case 0x96:\n    DAT_00109174 = get_machine_type_00104d30(_optarg);\n    if (DAT_00109174 < 0) {\n      return 1;\n    }\n    if (DAT_00109174 == 6) {\n      DAT_00109170 = 1;\n    }\n    else if (DAT_00109174 < 7) {\n      DAT_00109170 = (DAT_00109174 != 3) + 1 + (uint)(DAT_00109174 != 3);\n    }\n    else {\n      DAT_00109170 = 3 - (uint)(DAT_00109174 - 0xb4U < 2);\n    }\n    goto LAB_00103c87;\n  case 0x97:\n    DAT_0010916c = get_machine_type_00104d30(_optarg);\n    if ((int)DAT_0010916c < 0) {\n      return 1;\n    }\n    if ((int)DAT_0010916c < 0xb6) {\n      DAT_00109168 = 2;\n      if (((int)DAT_0010916c < 0xb4) && (DAT_00109168 = 1, DAT_0010916c != 3)) {\n        DAT_00109168 = (DAT_0010916c != 6) + 1 + (uint)(DAT_0010916c != 6);\n      }\n    }\n    else {\n      DAT_00109168 = 3;\n    }\n    goto LAB_00103c87;\n  case 0x98:\n    DAT_00109164 = get_file_type_00104da0(_optarg);\n    final_result = DAT_00109164;\n    break;\n  case 0x99:\n    DAT_00109160 = get_file_type_00104da0(_optarg);\n    final_result = DAT_00109160;\n    break;\n  case 0x9a:\n    goto switchD_00103cba_caseD_9a;\n  case 0x9b:\n    DAT_00109158 = find_osabi_index_00104ce0(_optarg);\n    final_result = DAT_00109158;\n    break;\n  case 0x9c:\n    ulong_var15 = strtoul(_optarg,&local_char_pointer,0);\n    final_result = (uint)ulong_var15;\n    ch = *local_char_pointer;\n    DAT_00109154 = final_result;\n    char_ptr2 = _optarg;\n    goto joined_r0x00104334;\n  case 0x9d:\n    ulong_var15 = strtoul(_optarg,&local_char_pointer,0);\n    final_result = (uint)ulong_var15;\n    ch = *local_char_pointer;\n    DAT_00109150 = final_result;\n    char_ptr2 = _optarg;\njoined_r0x00104334:\n    _optarg = char_ptr2;\n    if ((ch != '\\0') || (0xff < final_result)) {\n      ulong_var25 = dcgettext(0,\"Invalid ABIVERSION: %s\\n\",5);\n      error(ulong_var25,char_ptr2);\n      return 1;\n    }\n    goto LAB_00103c87;\n  case 0x9e:\n    ulong_var25 = 1;\n    goto LAB_00103e9d;\n  case 0x9f:\n    ulong_var25 = 0;\nLAB_00103e9d:\n    final_result = identify_x86_feature_00104c60(_optarg,ulong_var25);\n  }\njoined_r0x00103eae:\n  if ((int)final_result < 0) {\n    return 1;\n  }\n  goto LAB_00103c87;\nLAB_00103d1c:\n  loop_var3 = (long)_optind;\n  if (argc <= _optind) {\n    return final_result;\n  }\n  _optind = _optind + 1;\n  char_ptr2 = (char *)files[loop_var3];\n  index = stat(char_ptr2,&stat_struct);\n  if (index < 0) {\n    errno_ptr = __errno_location();\n    char_ptr = \"\\'%s\\': No such file\\n\";\n    if (*errno_ptr == 2) goto LAB_00104497;\n    char_ptr = strerror(*errno_ptr);\n    ulong_var25 = dcgettext(0,\"Could not locate \\'%s\\'.  System error message: %s\\n\",5);\n    error(ulong_var25,char_ptr2,char_ptr);\nLAB_001044ab:\n    result = 1;\n  }\n  else {\n    if ((stat_struct.st_mode & 0xf000) != 0x8000) {\n      char_ptr = \"\\'%s\\' is not an ordinary file\\n\";\nLAB_00104497:\n      ulong_var25 = dcgettext(0,char_ptr,5);\n      error(ulong_var25,char_ptr2);\n      goto LAB_001044ab;\n    }\n    file_ptr = fopen(char_ptr2,\"r+b\");\n    if (file_ptr == (FILE *)0x0) {\n      char_ptr = \"Input file \\'%s\\' is not readable\\n\";\n      goto LAB_00104497;\n    }\n    size = fread(&local_byte_ptr,8,1,file_ptr);\n    if (size != 1) {\n      ulong_var25 = dcgettext(0,\"%s: Failed to read file\\'s magic number\\n\",5);\n      error(ulong_var25,char_ptr2);\n      fclose(file_ptr);\n      goto LAB_001044ab;\n    }\n    if (local_byte_ptr == (byte *)0xa3e686372613c21) {\n      result = process_archive_files_0010358d(char_ptr2,file_ptr,0);\n    }\n    else if (local_byte_ptr == (byte *)0xa3e6e6968743c21) {\n      result = process_archive_files_0010358d(char_ptr2,file_ptr,1);\n    }\n    else {\n      rewind(file_ptr);\n      DAT_00109438 = 0;\n      result = read_and_validate_elf_header_00104de0(char_ptr2,file_ptr);\n      if (((result == 0) && ((ushort)(DAT_00109418 - 2U) < 2)) &&\n         ((DAT_00109444 | DAT_00109440) != 0)) {\n        if ((DAT_0010941a == 3) ||\n           (char_ptr = \"%s: Not an i386 nor x86-64 ELF file\\n\", DAT_0010941a == 0x3e)) {\n          index = fileno(file_ptr);\n          index = fstat(index,&stat_struct);\n          if (index < 0) {\n            ulong_var25 = dcgettext(0,\"%s: stat () failed\\n\",5);\n            error(ulong_var25,char_ptr2);\n            result = 1;\n          }\n          else {\n            index = fileno(file_ptr);\n            address = mmap((void *)0x0,stat_struct.st_size,3,1,index,0);\n            if (address == (void *)0xffffffffffffffff) {\n              char_ptr = \"%s: mmap () failed\\n\";\n              goto LAB_0010438d;\n            }\n            pointer = (void *)extract_file_name_from_path_00105370((ulong)DAT_00109424 << 6);\n            loop_var3 = DAT_001093f8;\n            if (DAT_001093e4 == '\\x01') {\n              for (ulong_var15 = 0; (uint)ulong_var15 < DAT_00109424; ulong_var15 = (ulong)((uint)ulong_var15 + 1)) {\n                loop_var = ulong_var15 * 0x20 + loop_var3 + (long)address;\n                ulong_ptr = (undefined8 *)((long)pointer + ulong_var15 * 0x40);\n                ulong_var25 = (*DAT_001093c0)(loop_var,4);\n                *ulong_ptr = ulong_var25;\n                ulong_var25 = (*DAT_001093c0)(loop_var + 4,4);\n                ulong_ptr[2] = ulong_var25;\n                ulong_var25 = (*DAT_001093c0)(loop_var + 8,4);\n                ulong_ptr[3] = ulong_var25;\n                ulong_var25 = (*DAT_001093c0)(loop_var + 0xc,4);\n                ulong_ptr[4] = ulong_var25;\n                ulong_var25 = (*DAT_001093c0)(loop_var + 0x10,4);\n                ulong_ptr[5] = ulong_var25;\n                ulong_var25 = (*DAT_001093c0)(loop_var + 0x14,4);\n                ulong_ptr[6] = ulong_var25;\n                ulong_var25 = (*DAT_001093c0)(loop_var + 0x18,4);\n                ulong_ptr[1] = ulong_var25;\n                ulong_var25 = (*DAT_001093c0)(loop_var + 0x1c,4);\n                ulong_ptr[7] = ulong_var25;\n              }\n            }\n            else {\n              for (uint_var = 0; uint_var < DAT_00109424; uint_var = uint_var + 1) {\n                loop_var = (ulong)uint_var * 0x38 + loop_var3 + (long)address;\n                ulong_ptr = (undefined8 *)((ulong)uint_var * 0x40 + (long)pointer);\n                ulong_var25 = (*DAT_001093c0)(loop_var,4);\n                *ulong_ptr = ulong_var25;\n                ulong_var25 = (*DAT_001093c0)(loop_var + 8,8);\n                ulong_ptr[2] = ulong_var25;\n                ulong_var25 = (*DAT_001093c0)(loop_var + 0x10,8);\n                ulong_ptr[3] = ulong_var25;\n                ulong_var25 = (*DAT_001093c0)(loop_var + 0x18,8);\n                ulong_ptr[4] = ulong_var25;\n                ulong_var25 = (*DAT_001093c0)(loop_var + 0x20,8);\n                ulong_ptr[5] = ulong_var25;\n                ulong_var25 = (*DAT_001093c0)(loop_var + 0x28,8);\n                ulong_ptr[6] = ulong_var25;\n                ulong_var25 = (*DAT_001093c0)(loop_var + 4,4);\n                ulong_ptr[1] = ulong_var25;\n                ulong_var25 = (*DAT_001093c0)(loop_var + 0x30,8);\n                ulong_ptr[7] = ulong_var25;\n              }\n            }\n            for (ulong_var15 = 0; (uint)ulong_var15 < DAT_00109424; ulong_var15 = (ulong)((uint)ulong_var15 + 1)) {\n              long_ptr = (long *)(ulong_var15 * 0x40 + (long)pointer);\n              if (*long_ptr == 4) {\n                loop_var3 = long_ptr[5];\n                ulong_var3 = long_ptr[7];\n                ulong_var35 = (long)address + long_ptr[2];\n                for (local_var = ulong_var35; local_var < ulong_var35 + loop_var3;\n                    local_var = local_var + ((ulong_var3 - 1) + ulong_var14 + ulong_var13 & ulong_var26)) {\n                  if ((ulong_var35 - local_var) + loop_var3 < 0xc) {\nLAB_001044cb:\n                    ulong_var25 = dcgettext(0,\"%s: Invalid PT_NOTE segment\\n\",5);\n                    error(ulong_var25,char_ptr2);\n                    result = 1;\n                    goto LAB_001042bf;\n                  }\n                  loop_var = (*DAT_001093c0)(local_var + 8,4);\n                  ulong_var12 = (*DAT_001093c0)(local_var,4);\n                  if ((ulong_var35 - (long)(char *)(local_var + 0xc)) + loop_var3 < ulong_var12)\n                  goto LAB_001044cb;\n                  ulong_var13 = (*DAT_001093c0)(local_var + 4,4);\n                  ulong_var26 = -ulong_var3;\n                  ulong_var14 = ulong_var3 + 0xb + ulong_var12 & ulong_var26;\n                  ulong_var38 = local_var + ulong_var14;\n                  if ((ulong_var13 != 0) &&\n                     ((ulong_var35 + loop_var3 <= ulong_var38 || ((ulong_var35 - ulong_var38) + loop_var3 < ulong_var13))))\n                  goto LAB_001044cb;\n                  if ((ulong_var12 == 4) &&\n                     ((index = strcmp((char *)(local_var + 0xc),\"GNU\"), index == 0 && (loop_var == 5))\n                     )) {\n                    if ((ulong_var13 < 8) || (ulong_var13 % ulong_var3 != 0)) goto LAB_001044cb;\n                    ulong_var12 = ulong_var38 + ulong_var13;\n                    do {\n                      index = (*DAT_001093c0)(ulong_var38,4);\n                      uint_var = (*DAT_001093c0)(ulong_var38 + 4,4);\n                      loop_var = ulong_var38 + 8;\n                      if (ulong_var12 < loop_var + (ulong)uint_var) goto LAB_001044cb;\n                      if (index == -0x3ffffffe) {\n                        if (uint_var != 4) goto LAB_001044cb;\n                        uint_var = (*DAT_001093c0)(loop_var,4);\n                        if (DAT_00109444 == 0) {\n                          uint_var2 = uint_var;\n                          if (DAT_00109440 == 0) goto LAB_001042bf;\nLAB_001042ac:\n                          uint_var2 = uint_var2 & ~DAT_00109440;\n                        }\n                        else {\n                          uint_var2 = DAT_00109444 | uint_var;\n                          if (DAT_00109440 != 0) goto LAB_001042ac;\n                        }\n                        if (uint_var != uint_var2) {\n                          (*DAT_001093b8)(loop_var,uint_var2,4);\n                        }\n                        goto LAB_001042bf;\n                      }\n                      ulong_var38 = loop_var + ((ulong)uint_var + (ulong_var3 - 1) & ulong_var26);\n                    } while (7 < (long)(ulong_var12 - ulong_var38));\n                  }\n                }\n              }\n            }\nLAB_001042bf:\n            free(pointer);\n            munmap(address,stat_struct.st_size);\n          }\n        }\n        else {\nLAB_0010438d:\n          ulong_var25 = dcgettext(0,char_ptr,5);\n          error(ulong_var25,char_ptr2);\n        }\n      }\n    }\n    fclose(file_ptr);\n  }\n  final_result = final_result | result;\n  goto LAB_00103d1c;\nswitchD_00103cba_caseD_9a:\n  DAT_0010915c = find_osabi_index_00104ce0(_optarg);\n  final_result = DAT_0010915c;\n  goto joined_r0x00103eae;\ncode_r0x00104650:\n  status = fseek(file_ptr,0,2);\n  if (((status != -1) && (size = ftell(file_ptr), size != 0xffffffffffffffff)) &&\n     (status = fseek(file_ptr,0,0), status != -1)) {\n    buffer = (byte *)extract_file_name_from_path_00105370(size + 1);\n    size2 = fread(buffer,1,size,file_ptr);\n    if ((size == size2) || (status = ferror(file_ptr), status == 0)) {\n      buffer[size2] = 0;\n      byte_ptr2 = buffer;\nLAB_001046fc:\n      if (*byte_ptr2 == 0) {\n        new_ptr = (undefined8 *)extract_file_name_from_path_00105370(8);\n        *new_ptr = 0;\n      }\n      else {\n        if (((&DAT_00107040)[(ulong)*byte_ptr2 * 2] & 0x40) != 0) goto code_r0x00104718;\n        local_byte_ptr = buffer;\n        strlen((char *)buffer);\n        byte_ptr2 = (byte *)extract_file_name_from_path_00105370();\n        new_ptr = (undefined8 *)0x0;\n        status = 0;\n        bool_var6 = false;\n        bool_var5 = false;\n        bool_var4 = false;\n        loop_var = 0;\n        do {\n          skip_non_ascii_characters_00102fa0(&local_byte_ptr);\n          byte_ptr = byte_ptr2;\n          if ((status == 0) || (status + -1 <= (int)loop_var)) {\n            if (new_ptr == (undefined8 *)0x0) {\n              status = 8;\n              new_ptr = (undefined8 *)extract_file_name_from_path_00105370(0x40);\n            }\n            else {\n              status = status * 2;\n              new_ptr = (undefined8 *)allocate_or_reallocate_memory_00103449(new_ptr,(long)status << 3);\n            }\n            new_ptr[loop_var] = 0;\n          }\n          for (; byte_var = *local_byte_ptr, byte_var != 0; local_byte_ptr = local_byte_ptr + 1) {\n            if ((((&DAT_00107040)[(ulong)byte_var * 2] & 0x40) != 0) &&\n               (bool_var4 = (bool)(bool_var5 | bool_var4 | bool_var6), !bool_var4)) {\n              bool_var6 = false;\n              bool_var4 = false;\n              bool_var5 = bool_var4;\n              break;\n            }\n            if (bool_var6) {\n              *byte_ptr = byte_var;\n              bool_var6 = false;\n              byte_ptr = byte_ptr + 1;\n            }\n            else if (byte_var == 0x5c) {\n              bool_var6 = true;\n            }\n            else if (bool_var5) {\n              if (byte_var == 0x27) {\n                bool_var5 = false;\n              }\n              else {\nLAB_00104c08:\n                *byte_ptr = byte_var;\n                byte_ptr = byte_ptr + 1;\n              }\n            }\n            else if (bool_var4) {\n              if (byte_var != 0x22) goto LAB_00104c08;\n              bool_var4 = false;\n            }\n            else if (byte_var == 0x27) {\n              bool_var5 = true;\n            }\n            else {\n              if (byte_var != 0x22) goto LAB_00104c08;\n              bool_var4 = true;\n            }\n          }\n          *byte_ptr = 0;\n          ulong_var25 = copy_string_characters_00103160();\n          new_ptr[loop_var] = ulong_var25;\n          new_ptr[loop_var + 1] = 0;\n          skip_non_ascii_characters_00102fa0(&local_byte_ptr);\n          loop_var = loop_var + 1;\n        } while (*local_byte_ptr != 0);\n        free(byte_ptr2);\n      }\n      if (files == argv) {\n        loop_var = 1;\n        do {\n          long_var2 = loop_var;\n          loop_var = long_var2 + 1;\n        } while (files[long_var2 + -1] != 0);\n        long_ptr2 = (long *)extract_file_name_from_path_00105370((long)(int)long_var2 << 3);\n        long_ptr = long_ptr2;\n        while (loop_var = *files, files = files + 1, loop_var != 0) {\n          loop_var = copy_string_characters_00103160();\n          *long_ptr = loop_var;\n          long_ptr = long_ptr + 1;\n        }\n        *long_ptr = 0;\n        loop_var = 0;\n      }\n      else {\n        loop_var = 0;\n        long_ptr2 = files;\n      }\n      for (; new_ptr[loop_var] != 0; loop_var = loop_var + 1) {\n      }\n      free((void *)long_ptr2[loop_var3]);\n      files = (long *)allocate_or_reallocate_memory_00103449(long_ptr2,(loop_var + 1 + (long)argc) * 8);\n      memmove(files + loop_var3 + loop_var,files + loop_var3 + 1,(long)(argc - index) << 3);\n      argc = argc + -1 + (int)loop_var;\n      memcpy(files + loop_var3,new_ptr,loop_var * 8);\n      free(new_ptr);\n      free(buffer);\n      index = index + -1;\n    }\n    else {\n      free(buffer);\n    }\n  }\n  fclose(file_ptr);\n  goto LAB_00103c54;\ncode_r0x00104718:\n  byte_ptr2 = byte_ptr2 + 1;\n  goto LAB_001046fc;\n}\n\n",
            "current_name": "process_binary_file_00103bf0",
            "entrypoint": "0x00103bf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103bf0": "process_binary_file_00103bf0",
                "__addr": "address",
                "__errno_location": "errno_location",
                "__ptr": "pointer",
                "__s": "buffer",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "bVar2": "byte_var",
                "bVar4": "bool_var4",
                "bVar5": "bool_var5",
                "bVar6": "bool_var6",
                "bVar7": "bool_var4",
                "cVar1": "ch",
                "iVar10": "status",
                "iVar31": "limit",
                "iVar8": "index",
                "lVar20": "loop_var",
                "lVar23": "long_var2",
                "lVar29": "loop_var3",
                "local_120": "local_var",
                "local_138": "new_ptr",
                "local_c8": "stat_struct",
                "local_d0": "local_byte_ptr",
                "local_d8": "local_char_pointer",
                "pFVar16": "file_ptr",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar22": "byte_ptr",
                "pbVar27": "byte_ptr2",
                "pcVar34": "char_ptr",
                "pcVar36": "char_ptr2",
                "piVar19": "errno_ptr",
                "plVar11": "long_ptr",
                "plVar21": "files",
                "plVar24": "long_ptr2",
                "ppuVar32": "pointer_pointer",
                "puVar37": "ulong_ptr",
                "sVar17": "size",
                "sVar18": "size2",
                "uVar12": "ulong_var12",
                "uVar13": "ulong_var13",
                "uVar14": "ulong_var14",
                "uVar15": "ulong_var15",
                "uVar25": "ulong_var25",
                "uVar26": "ulong_var26",
                "uVar28": "uint_var",
                "uVar3": "ulong_var3",
                "uVar30": "final_result",
                "uVar33": "uint_var2",
                "uVar35": "ulong_var35",
                "uVar38": "ulong_var38",
                "uVar9": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104c60": {
            "additional_data": {
                "FUN_00104c60": {
                    "decode_x86_feature": 1,
                    "determine_x86_feature": 1,
                    "find_x86_feature": 1,
                    "get_x86_feature": 1,
                    "get_x86_feature_code": 1,
                    "identify_x86_feature": 9,
                    "map_x86_feature": 1,
                    "map_x86_features": 1,
                    "parse_x86_feature": 2,
                    "process_x86_feature": 4,
                    "reverse_and_set_flag": 1,
                    "set_x86_feature": 1,
                    "update_feature_flags": 1,
                    "update_x86_feature": 2,
                    "update_x86_features": 2,
                    "x86_feature_detection": 1
                },
                "auVar4": {
                    "result": 12,
                    "result_container": 1,
                    "result_struct": 1,
                    "return_array": 2,
                    "return_data": 2,
                    "return_pair": 1,
                    "return_value": 9,
                    "return_value_with_data": 1,
                    "return_variable": 1,
                    "updated_return_value": 1
                },
                "dcgettext": {
                    "get_localized_error_message": 1,
                    "translate": 1
                },
                "error": {
                    "print_error_message": 2
                },
                "iVar1": {
                    "cmp_result": 1,
                    "comparison_result": 14,
                    "result": 2,
                    "str_cmp_result": 1,
                    "strcasecmp_result": 13
                },
                "param_1": {
                    "feature": 2,
                    "feature_name": 23,
                    "feature_string": 2,
                    "x86_feature": 3,
                    "x86_feature_name": 1
                },
                "param_2": {
                    "enable": 3,
                    "enable_feature": 3,
                    "enable_flag": 1,
                    "flag": 6,
                    "flag_value": 1,
                    "is_disabled": 1,
                    "is_enable": 2,
                    "is_enabled": 12,
                    "is_set": 2
                },
                "param_3": {
                    "arg1": 3,
                    "arg3": 2,
                    "context_1": 2,
                    "error_message": 7,
                    "error_msg": 1,
                    "message": 4,
                    "msg_catalog": 1,
                    "msg_ptr": 1,
                    "param3": 1,
                    "unknown_param_1": 2,
                    "unknown_param_3": 1,
                    "unspecified_input1": 1,
                    "unused_param": 3,
                    "unused_param_1": 1,
                    "unused_param_3": 1
                },
                "param_4": {
                    "arg2": 3,
                    "arg4": 2,
                    "auxiliary_data": 1,
                    "context_2": 2,
                    "err_ptr": 1,
                    "error_code": 1,
                    "error_msg": 1,
                    "error_param": 1,
                    "param4": 1,
                    "result": 6,
                    "return_value": 4,
                    "unknown_param_2": 2,
                    "unknown_param_4": 1,
                    "unspecified_input2": 1,
                    "unused_param": 1,
                    "unused_param_2": 2,
                    "unused_param_4": 1
                },
                "uVar2": {
                    "bitmask": 1,
                    "feature_bit": 3,
                    "feature_bitmask": 3,
                    "feature_code": 1,
                    "feature_flag": 5,
                    "feature_mask": 2,
                    "feature_value": 13,
                    "flag": 1,
                    "flag_value": 1,
                    "x86_feature_flag": 1
                },
                "uVar3": {
                    "error_code": 1,
                    "error_message": 13,
                    "error_msg": 2,
                    "error_text": 1,
                    "gettext_result": 1,
                    "result": 3,
                    "return_value": 9,
                    "status_code": 1
                }
            },
            "called": [
                "FUN_001022c0",
                "strcasecmp"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nundefined  [16] identify_x86_feature_00104c60(char *feature_name,int is_enabled,undefined8 error_message,undefined8 result)\n\n{\n  int comparison_result;\n  uint feature_value;\n  undefined8 error_message;\n  undefined result [16];\n  \n  comparison_result = strcasecmp(feature_name,\"ibt\");\n  feature_value = 1;\n  if (comparison_result != 0) {\n    comparison_result = strcasecmp(feature_name,\"shstk\");\n    feature_value = 2;\n    if (comparison_result != 0) {\n      comparison_result = strcasecmp(feature_name,\"lam_u48\");\n      if (comparison_result == 0) {\n        feature_value = 4;\n      }\n      else {\n        comparison_result = strcasecmp(feature_name,\"lam_u57\");\n        feature_value = 8;\n        if (comparison_result != 0) {\n          error_message = dcgettext(0,\"Unknown x86 feature: %s\\n\",5);\n          print_error_message(error_message,feature_name);\n          error_message = 0xffffffff;\n          goto LAB_00104ca5;\n        }\n      }\n    }\n  }\n  if (is_enabled == 0) {\n    DAT_00109440 = feature_value | DAT_00109440;\n    DAT_00109444 = ~feature_value & DAT_00109444;\n  }\n  else {\n    DAT_00109444 = feature_value | DAT_00109444;\n    DAT_00109440 = DAT_00109440 & ~feature_value;\n  }\n  error_message = 0;\nLAB_00104ca5:\n  result._8_8_ = result;\n  result._0_8_ = error_message;\n  return result;\n}\n\n",
            "current_name": "identify_x86_feature_00104c60",
            "entrypoint": "0x00104c60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104c60": "identify_x86_feature_00104c60",
                "auVar4": "result",
                "dcgettext": "get_localized_error_message",
                "error": "print_error_message",
                "iVar1": "comparison_result",
                "param_1": "feature_name",
                "param_2": "is_enabled",
                "param_3": "error_message",
                "param_4": "result",
                "uVar2": "feature_value",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ce0": {
            "additional_data": {
                "FUN_00104ce0": {
                    "find_osabi": 20,
                    "find_osabi_by_name": 1,
                    "find_osabi_index": 4,
                    "identify_osaabi": 1,
                    "identify_osabi": 3
                },
                "auVar6": {
                    "result": 26,
                    "return_value": 5
                },
                "iVar1": {
                    "comparison_result": 30,
                    "result": 1
                },
                "param_1": {
                    "input": 1,
                    "input_osabi": 2,
                    "input_string": 2,
                    "os": 1,
                    "os_name": 2,
                    "osabi": 8,
                    "osabi_name": 10,
                    "osabi_string": 1,
                    "search_string": 1,
                    "target_osabi": 3
                },
                "param_2": {
                    "arg1": 1,
                    "arg2": 7,
                    "not_used_1": 1,
                    "param2": 4,
                    "param_2": 11,
                    "param_a": 1,
                    "undefined_param_2": 1,
                    "unknown_param1": 1,
                    "unknown_param_2": 1,
                    "unused_param": 2,
                    "var_2": 1
                },
                "param_3": {
                    "arg2": 1,
                    "arg3": 7,
                    "not_used_2": 1,
                    "param3": 4,
                    "param_3": 11,
                    "param_b": 1,
                    "undefined_param_3": 1,
                    "unknown_param2": 1,
                    "unknown_param_3": 1,
                    "unused_param": 2,
                    "var_3": 1
                },
                "param_4": {
                    "arg3": 1,
                    "arg4": 7,
                    "default_value": 1,
                    "error_message": 7,
                    "flag": 1,
                    "param4": 3,
                    "param_4": 6,
                    "param_c": 1,
                    "result": 1,
                    "unknown_osabi": 1,
                    "unknown_param3": 1,
                    "var_4": 1
                },
                "puVar5": {
                    "array_pointer": 3,
                    "array_ptr": 1,
                    "base_address": 1,
                    "data_pointer": 5,
                    "data_ptr": 9,
                    "osabi_array": 1,
                    "osabi_data": 3,
                    "osabi_data_ptr": 1,
                    "osabi_list": 2,
                    "osabi_ptr": 1,
                    "osabi_table": 1,
                    "pointer": 3
                },
                "uVar2": {
                    "err_msg": 1,
                    "error_message": 14,
                    "error_string": 2,
                    "localized_error": 1,
                    "localized_error_message": 2,
                    "localized_message": 1,
                    "message": 2,
                    "msg": 1,
                    "osabi_error": 1,
                    "result_string": 1,
                    "translated_error_message": 2,
                    "translation": 3
                },
                "uVar3": {
                    "chosen_osabi_value": 1,
                    "current_index": 1,
                    "index": 26,
                    "osabi_index": 2,
                    "osabi_value": 1
                },
                "uVar4": {
                    "counter": 2,
                    "increment": 4,
                    "index": 1,
                    "new_index": 2,
                    "next_index": 15,
                    "temp_counter": 1,
                    "temp_index": 5,
                    "updated_index": 1
                }
            },
            "called": [
                "FUN_00102323",
                "strcasecmp"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nundefined  [16] find_osabi_index_00104ce0(char *osabi_name,undefined8 param_2,undefined8 param_3,undefined8 arg4)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  ulong index;\n  uint next_index;\n  undefined4 *data_ptr;\n  undefined result [16];\n  \n  data_ptr = &DAT_00108ca0;\n  index = 0;\n  do {\n    comparison_result = strcasecmp(osabi_name,*(char **)(data_ptr + 2));\n    if (comparison_result == 0) {\n      index = (ulong)(uint)(&DAT_00108ca0)[index * 4];\n      goto LAB_00104d20;\n    }\n    next_index = (int)index + 1;\n    index = (ulong)next_index;\n    data_ptr = data_ptr + 4;\n  } while (next_index != 0x10);\n  error_message = dcgettext(0,\"Unknown OSABI: %s\\n\",5);\n  error(error_message,osabi_name);\n  index = 0xffffffff;\nLAB_00104d20:\n  result._8_8_ = arg4;\n  result._0_8_ = index;\n  return result;\n}\n\n",
            "current_name": "find_osabi_index_00104ce0",
            "entrypoint": "0x00104ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ce0": "find_osabi_index_00104ce0",
                "auVar6": "result",
                "iVar1": "comparison_result",
                "param_1": "osabi_name",
                "param_4": "arg4",
                "puVar5": "data_ptr",
                "uVar2": "error_message",
                "uVar3": "index",
                "uVar4": "next_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d30": {
            "additional_data": {
                "FUN_00104d30": {
                    "get_machine_type": 29,
                    "identify_machine_type": 1,
                    "machine_type_to_code": 1
                },
                "dcgettext": {
                    "get_error_message": 1,
                    "retrieve_error_message": 1
                },
                "error": {
                    "print_error": 1,
                    "print_error_message": 1
                },
                "iVar1": {
                    "comparison_result": 2,
                    "machine_type_check": 1,
                    "result": 23,
                    "result_code": 1,
                    "strcasecmp_result": 4
                },
                "iVar2": {
                    "cmp_result": 2,
                    "compare_result": 1,
                    "compared_value": 1,
                    "comparison": 2,
                    "comparison_result": 13,
                    "comparison_result2": 1,
                    "second_comparison_result": 1,
                    "second_strcasecmp_result": 1,
                    "str_comparison": 1,
                    "strcasecmp_result2": 3,
                    "strcmp_result": 1,
                    "temp": 1,
                    "temp_result": 2,
                    "tmp_result": 1
                },
                "param_1": {
                    "input_machine_type": 1,
                    "input_param": 1,
                    "machine_type": 29
                },
                "uVar3": {
                    "err_message": 1,
                    "error_message": 18,
                    "error_msg": 1,
                    "error_string": 8,
                    "unknown_machine_type_msg": 1,
                    "unknown_type": 1
                }
            },
            "called": [
                "FUN_0010234b",
                "strcasecmp"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nint get_machine_type_00104d30(char *machine_type)\n\n{\n  int result;\n  int comparison_result;\n  undefined8 error_message;\n  \n  result = strcasecmp(machine_type,\"i386\");\n  if (result == 0) {\n    result = 3;\n  }\n  else {\n    result = strcasecmp(machine_type,\"iamcu\");\n    if (result == 0) {\n      return 6;\n    }\n    comparison_result = strcasecmp(machine_type,\"l1om\");\n    result = 0xb4;\n    if (comparison_result != 0) {\n      result = strcasecmp(machine_type,\"k1om\");\n      if (result == 0) {\n        return 0xb5;\n      }\n      result = strcasecmp(machine_type,\"x86_64\");\n      if (result == 0) {\n        result = 0x3e;\n      }\n      else {\n        result = strcasecmp(machine_type,\"x86-64\");\n        if (result == 0) {\n          result = 0x3e;\n        }\n        else {\n          result = strcasecmp(machine_type,\"none\");\n          if (result != 0) {\n            error_message = dcgettext(0,\"Unknown machine type: %s\\n\",5);\n            print_error_message(error_message,machine_type);\n            result = -1;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "get_machine_type_00104d30",
            "entrypoint": "0x00104d30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d30": "get_machine_type_00104d30",
                "dcgettext": "retrieve_error_message",
                "error": "print_error_message",
                "iVar1": "result",
                "iVar2": "comparison_result",
                "param_1": "machine_type",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104da0": {
            "additional_data": {
                "FUN_00104da0": {
                    "get_file_type": 8,
                    "get_symbol_type": 1,
                    "get_type": 11,
                    "get_type_code": 2,
                    "get_type_from_param": 7,
                    "get_type_index": 1
                },
                "iVar1": {
                    "comparison_result": 2,
                    "file_type": 1,
                    "index": 1,
                    "result": 19,
                    "type": 5,
                    "type_result": 1,
                    "type_value": 1
                },
                "iVar2": {
                    "cmp_result": 1,
                    "comp_result": 1,
                    "compare_result": 3,
                    "comparison_result": 19,
                    "comparison_result2": 2,
                    "result": 1,
                    "strcasecmp_result": 1,
                    "strcmp_result": 2
                },
                "param_1": {
                    "file_name": 1,
                    "file_type": 7,
                    "input": 1,
                    "param": 3,
                    "parameter": 2,
                    "symbol": 1,
                    "type": 4,
                    "type_param": 2,
                    "type_string": 9
                },
                "uVar3": {
                    "error_message": 21,
                    "error_msg": 4,
                    "error_string": 2,
                    "localized_error_msg": 1,
                    "translated_error_msg": 1,
                    "unknown_type_msg": 1
                }
            },
            "called": [
                "dcgettext",
                "error",
                "FUN_001023ce",
                "strcasecmp"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nint get_file_type_00104da0(char *type_string)\n\n{\n  int result;\n  int comparison_result;\n  undefined8 error_message;\n  \n  result = strcasecmp(type_string,\"rel\");\n  if (result == 0) {\n    result = 1;\n  }\n  else {\n    comparison_result = strcasecmp(type_string,\"exec\");\n    result = 2;\n    if (comparison_result != 0) {\n      result = strcasecmp(type_string,\"dyn\");\n      if (result == 0) {\n        result = 3;\n      }\n      else {\n        result = strcasecmp(type_string,\"none\");\n        if (result != 0) {\n          error_message = dcgettext(0,\"Unknown type: %s\\n\",5);\n          error(error_message,type_string);\n          result = -1;\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "get_file_type_00104da0",
            "entrypoint": "0x00104da0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104da0": "get_file_type_00104da0",
                "iVar1": "result",
                "iVar2": "comparison_result",
                "param_1": "type_string",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104de0": {
            "additional_data": {
                "DAT_00109150": {
                    "data_read_value_3": 1
                },
                "DAT_00109154": {
                    "matching_output_abiversion": 1
                },
                "DAT_00109158": {
                    "data_read_value_2": 1
                },
                "DAT_0010915c": {
                    "matching_output_osabi": 1
                },
                "DAT_00109160": {
                    "data_read_value_1": 1
                },
                "DAT_00109164": {
                    "matching_output_type": 1
                },
                "DAT_00109168": {
                    "matching_output_class": 1
                },
                "DAT_0010916c": {
                    "matching_value_1": 1
                },
                "DAT_00109170": {
                    "matching_value_2": 1
                },
                "DAT_00109174": {
                    "matching_output_machine": 1
                },
                "DAT_00109380": {
                    "header_data_copy": 1
                },
                "DAT_00109390": {
                    "data_1": 1,
                    "string_buffer": 1
                },
                "DAT_00109392": {
                    "data_2": 1,
                    "e_machine": 1
                },
                "DAT_00109394": {
                    "data_3": 1,
                    "e_entry": 1
                },
                "DAT_00109398": {
                    "data_4": 1,
                    "e_flags": 1
                },
                "DAT_0010939c": {
                    "data_5": 1,
                    "e_phentsize": 1
                },
                "DAT_001093a0": {
                    "data_6": 1,
                    "ei_osabi": 1
                },
                "DAT_001093a4": {
                    "data_7": 1,
                    "ei_abiversion": 1
                },
                "DAT_001093a8": {
                    "data_8": 1
                },
                "DAT_001093aa": {
                    "data_9": 1
                },
                "DAT_001093ac": {
                    "data_10": 1
                },
                "DAT_001093ae": {
                    "data_11": 1
                },
                "DAT_001093b0": {
                    "data_12": 1
                },
                "DAT_001093b2": {
                    "data_13": 1
                },
                "DAT_001093b8": {
                    "write_data_func": 1,
                    "write_data_function": 1,
                    "write_function": 1
                },
                "DAT_001093c0": {
                    "convert_func": 1,
                    "convert_function": 1
                },
                "DAT_001093e0": {
                    "header_buffer": 1,
                    "header_data": 1
                },
                "DAT_001093e4": {
                    "type_val": 1
                },
                "DAT_001093e5": {
                    "ei_class": 1,
                    "output_value_src": 1
                },
                "DAT_001093e8": {
                    "class_value_copy": 1
                },
                "DAT_001093f8": {
                    "data_val_5": 1
                },
                "DAT_00109418": {
                    "data_val_1": 1,
                    "e_type": 1
                },
                "DAT_0010941a": {
                    "data_val_2": 1,
                    "e_version": 1
                },
                "DAT_00109424": {
                    "data_val_10": 1
                },
                "FUN_00104de0": {
                    "check_elf_header": 1,
                    "parse_elf_header": 4,
                    "process_elf_header": 6,
                    "read_and_validate_elf_header": 3,
                    "read_elf_file_header": 1,
                    "read_elf_header": 10,
                    "read_elf_header_data": 1,
                    "read_elf_header_from_file": 1,
                    "validate_elf_header": 1,
                    "verify_and_update_elf_header": 1,
                    "verify_elf_header": 1
                },
                "_DAT_00109380": {
                    "original_magic_number": 2
                },
                "_DAT_00109388": {
                    "original_ei_data": 1,
                    "original_header_type": 1
                },
                "_DAT_00109390": {
                    "string_data": 1
                },
                "_DAT_00109392": {
                    "another_string_data": 1
                },
                "_DAT_00109394": {
                    "integer_data1": 1
                },
                "_DAT_00109398": {
                    "integer_data3": 1
                },
                "_DAT_0010939c": {
                    "integer_data4": 1
                },
                "_DAT_001093a0": {
                    "integer_data5": 1
                },
                "_DAT_001093a4": {
                    "integer_data6": 1
                },
                "_DAT_001093a8": {
                    "integer_data7": 1
                },
                "_DAT_001093aa": {
                    "integer_data8": 1
                },
                "_DAT_001093ac": {
                    "integer_data9": 1
                },
                "_DAT_001093ae": {
                    "integer_data10": 1
                },
                "_DAT_001093b0": {
                    "integer_data11": 1
                },
                "_DAT_001093b2": {
                    "integer_data12": 1
                },
                "_DAT_001093c0": {
                    "data_converter": 1
                },
                "_DAT_001093e0": {
                    "magic_number": 2
                },
                "_DAT_001093e4": {
                    "ei_data": 1,
                    "header_type": 1
                },
                "_DAT_001093e5": {
                    "file_class": 1
                },
                "_DAT_001093e8": {
                    "input_class_value": 1,
                    "original_ei_abiversion": 1
                },
                "_DAT_001093ec": {
                    "output_class_value": 1
                },
                "_DAT_001093f0": {
                    "converted_data4": 1,
                    "data_val_4": 1,
                    "e_shoff": 1
                },
                "_DAT_001093f8": {
                    "converted_data5": 1,
                    "e_ehsize": 1
                },
                "_DAT_00109400": {
                    "converted_data6": 1,
                    "data_val_6": 1,
                    "e_phnum": 1
                },
                "_DAT_00109408": {
                    "converted_data3": 1,
                    "data_val_3": 1,
                    "e_phoff": 1
                },
                "_DAT_00109410": {
                    "converted_data7": 1,
                    "data_val_7": 1,
                    "e_shentsize": 1
                },
                "_DAT_00109418": {
                    "converted_data1": 1
                },
                "_DAT_0010941a": {
                    "converted_data2": 1
                },
                "_DAT_0010941c": {
                    "converted_data8": 1,
                    "data_val_8": 1,
                    "e_shnum": 1
                },
                "_DAT_00109420": {
                    "converted_data9": 1,
                    "data_val_9": 1,
                    "e_shstrndx": 1
                },
                "_DAT_00109424": {
                    "converted_data10": 1
                },
                "_DAT_00109428": {
                    "converted_data11": 1,
                    "data_val_11": 1
                },
                "_DAT_0010942c": {
                    "converted_data12": 1,
                    "data_val_12": 1
                },
                "_DAT_00109430": {
                    "converted_data13": 1,
                    "data_val_13": 1
                },
                "__off": {
                    "current_file_position": 1,
                    "current_offset": 2,
                    "file_offset": 11,
                    "file_position": 7,
                    "offset": 9
                },
                "class_value": {
                    "class_value": 1
                },
                "class_value_copy": {
                    "class_value_copy": 1
                },
                "class_value_src": {
                    "class_value_src": 1
                },
                "convert_func": {
                    "convert_func": 1
                },
                "data_1": {
                    "data_1": 1
                },
                "data_10": {
                    "data_10": 1
                },
                "data_11": {
                    "data_11": 1
                },
                "data_12": {
                    "data_12": 1
                },
                "data_13": {
                    "data_13": 1
                },
                "data_2": {
                    "data_2": 1
                },
                "data_3": {
                    "data_3": 1
                },
                "data_4": {
                    "data_4": 1
                },
                "data_5": {
                    "data_5": 1
                },
                "data_6": {
                    "data_6": 1
                },
                "data_7": {
                    "data_7": 1
                },
                "data_8": {
                    "data_8": 1
                },
                "data_9": {
                    "data_9": 1
                },
                "data_val_1": {
                    "data_value_1": 1
                },
                "data_val_10": {
                    "data_value_10": 1
                },
                "data_val_11": {
                    "data_value_11": 1
                },
                "data_val_12": {
                    "data_value_12": 1
                },
                "data_val_13": {
                    "data_value_13": 1
                },
                "data_val_2": {
                    "data_value_2": 1
                },
                "data_val_3": {
                    "data_value_3": 1
                },
                "data_val_4": {
                    "data_value_4": 1
                },
                "data_val_5": {
                    "data_value_5": 1
                },
                "data_val_6": {
                    "data_value_6": 1
                },
                "data_val_7": {
                    "data_value_7": 1
                },
                "data_val_8": {
                    "data_value_8": 1
                },
                "data_val_9": {
                    "data_value_9": 1
                },
                "error_msg": {
                    "error_message": 1
                },
                "get_value_from_data_00103a90": {
                    "get_value_from_data": 1
                },
                "header_data": {
                    "elf_header_data": 1
                },
                "header_data_copy": {
                    "elf_header_data_copy": 1
                },
                "iVar1": {
                    "fseek_result": 1,
                    "result": 1,
                    "seek_result": 23,
                    "seek_status": 1,
                    "status": 3
                },
                "istream_file": {
                    "file": 1
                },
                "offset": {
                    "header_offset": 1
                },
                "output_value": {
                    "output_value": 1
                },
                "output_value_copy": {
                    "output_value_copy": 1
                },
                "output_value_src_copy": {
                    "output_value_src_copy": 1
                },
                "param_1": {
                    "error_message": 1,
                    "file_name": 1,
                    "file_path": 5,
                    "filename": 2,
                    "message": 1,
                    "param": 6,
                    "param1": 1,
                    "param_1": 1,
                    "param_elf_file": 2,
                    "param_elf_header": 3,
                    "param_elf_header_file_path": 1,
                    "param_file": 3,
                    "param_file_name": 1,
                    "param_filename": 1,
                    "param_filepath": 1
                },
                "param_2": {
                    "elf_file": 1,
                    "file": 11,
                    "file_pointer": 4,
                    "file_ptr": 3,
                    "file_stream": 1,
                    "input_file": 1,
                    "param_2": 1,
                    "param_elf_data": 1,
                    "param_file": 6,
                    "param_file_stream": 1
                },
                "pcVar4": {
                    "err_msg": 1,
                    "error_message": 26,
                    "error_message_format": 1,
                    "error_msg": 1,
                    "format": 1
                },
                "read_data_to_memory_0010354e": {
                    "write_data_to_memory": 1
                },
                "read_status": {
                    "read_result": 1
                },
                "sVar2": {
                    "bytes_read": 3,
                    "num_blocks": 1,
                    "num_read": 1,
                    "read_count": 2,
                    "read_result": 14,
                    "read_size": 3,
                    "read_status": 2,
                    "result": 2,
                    "write_result": 1,
                    "write_status": 1
                },
                "type_val": {
                    "type_value": 1
                },
                "type_val_copy": {
                    "type_value_copy": 1
                },
                "uRam0000000000109384": {
                    "original_ei_class": 1,
                    "type_val_copy": 1
                },
                "uRam000000000010938c": {
                    "original_ei_osabi": 1,
                    "output_value_copy": 1
                },
                "uRam00000000001093ec": {
                    "output_value_src_copy": 1
                },
                "uVar3": {
                    "function_result": 1,
                    "result": 15,
                    "return_value": 13
                },
                "uVar5": {
                    "class": 2,
                    "class_header": 1,
                    "class_type": 2,
                    "class_value": 3,
                    "e_class": 1,
                    "e_class_input": 1,
                    "ei_class": 1,
                    "elf_version": 1,
                    "header_class": 1,
                    "input_class": 12,
                    "input_ei_class": 3,
                    "input_val": 1,
                    "matching_output_version": 1
                },
                "uVar6": {
                    "abi_type": 1,
                    "comparison_val": 1,
                    "comparison_value": 1,
                    "e_class_output": 1,
                    "e_version": 1,
                    "ei_osabi": 1,
                    "other_header_class": 1,
                    "output_class": 13,
                    "output_class_type": 1,
                    "output_ei_class": 4,
                    "output_val": 1,
                    "output_value": 2,
                    "version": 1,
                    "version_value": 1
                },
                "write_data_func": {
                    "write_data_func": 1
                },
                "write_param_to_memory_00103ad0": {
                    "write_param_to_memory": 1
                },
                "write_status": {
                    "write_result": 1
                }
            },
            "called": [
                "error",
                "FUN_00102434",
                "FUN_00103a90",
                "fseek",
                "fwrite",
                "dcgettext",
                "fread",
                "FUN_0010354e",
                "FUN_001024ec",
                "ftell",
                "FUN_00102558",
                "abort",
                "FUN_00103ad0",
                "FUN_0010347f"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nundefined8 read_and_validate_elf_header_00104de0(undefined8 param,FILE *file)\n\n{\n  int seek_result;\n  long file_offset;\n  size_t read_result;\n  undefined8 result;\n  char *error_message;\n  uint input_class;\n  uint output_class;\n  \n  file_offset = ftell(file);\n  read_result = fread(&DAT_001093e0,0x10,1,file);\n  if ((read_result == 1) && (_DAT_001093e0 == 0x464c457f)) {\n    DAT_001093b8 = write_data_to_memory_0010354e;\n    if (DAT_001093e5 != '\\x02') {\n      DAT_001093b8 = write_param_to_memory;\n    }\n    DAT_001093c0 = convert_data_to_unsigned_long_0010347f;\n    if (DAT_001093e5 != '\\x02') {\n      DAT_001093c0 = get_value_from_data;\n    }\n    if ((char)_DAT_001093e4 == '\\x01') {\n      read_result = fread(&DAT_00109390,0x24,1,file);\n      if (read_result != 1) goto code_r0x00102558;\n      DAT_00109418 = (*DAT_001093c0)(&DAT_00109390,2);\n      DAT_0010941a = (*DAT_001093c0)(&DAT_00109392,2);\n      _DAT_00109408 = (*DAT_001093c0)(&DAT_00109394,4);\n      _DAT_001093f0 = (*DAT_001093c0)(&DAT_00109398,4);\n      DAT_001093f8 = (*DAT_001093c0)(&DAT_0010939c,4);\n      _DAT_00109400 = (*DAT_001093c0)(&DAT_001093a0,4);\n      _DAT_00109410 = (*DAT_001093c0)(&DAT_001093a4,4);\n      _DAT_0010941c = (*DAT_001093c0)(&DAT_001093a8,2);\n      _DAT_00109420 = (*DAT_001093c0)(&DAT_001093aa,2);\n      DAT_00109424 = (*DAT_001093c0)(&DAT_001093ac,2);\n      _DAT_00109428 = (*DAT_001093c0)(&DAT_001093ae,2);\n      _DAT_0010942c = (*DAT_001093c0)(&DAT_001093b0,2);\n      _DAT_00109430 = (*DAT_001093c0)(&DAT_001093b2,2);\n      _DAT_00109380 = _DAT_001093e0;\n      type_val_copy = _DAT_001093e4;\n      _DAT_00109388 = _DAT_001093e8;\n      original_ei_osabi = output_value_src_copy;\n    }\n    else {\n      if ((char)_DAT_001093e4 != '\\x02') {\n        result = read_elf_header_error_00102558();\n        return result;\n      }\n      read_result = fread(&DAT_00109350,0x30,1,file);\n      if (read_result != 1) goto code_r0x00102558;\n      DAT_00109418 = (*DAT_001093c0)(&DAT_00109350,2);\n      DAT_0010941a = (*DAT_001093c0)(&DAT_00109352,2);\n      _DAT_00109408 = (*DAT_001093c0)(&DAT_00109354,4);\n      _DAT_001093f0 = (*DAT_001093c0)(&DAT_00109358,8);\n      DAT_001093f8 = (*DAT_001093c0)(&DAT_00109360,8);\n      _DAT_00109400 = (*DAT_001093c0)(&DAT_00109368,8);\n      _DAT_00109410 = (*DAT_001093c0)(&DAT_00109370,4);\n      _DAT_0010941c = (*DAT_001093c0)(&DAT_00109374,2);\n      _DAT_00109420 = (*DAT_001093c0)(&DAT_00109376,2);\n      DAT_00109424 = (*DAT_001093c0)(&DAT_00109378,2);\n      _DAT_00109428 = (*DAT_001093c0)(&DAT_0010937a,2);\n      _DAT_0010942c = (*DAT_001093c0)(&DAT_0010937c,2);\n      _DAT_00109430 = (*DAT_001093c0)(&DAT_0010937e,2);\n      _DAT_00109340 = _DAT_001093e0;\n      uRam0000000000109344 = _DAT_001093e4;\n      _DAT_00109348 = _DAT_001093e8;\n      uRam000000000010934c = output_value_src_copy;\n    }\n    seek_result = fseek(file,file_offset,0);\n    if (seek_result != 0) {\n      result = dcgettext(0,\"%s: Failed to seek to ELF header\\n\",5);\n      error(result,param);\n    }\n    input_class = _DAT_001093e4 >> 0x10 & 0xff;\n    if ((char)input_class == '\\x01') {\n      input_class = (uint)DAT_0010941a;\n      if (input_class == DAT_0010916c) {\n        return 0;\n      }\n      output_class = _DAT_001093e4 & 0xff;\n      if (DAT_00109170 == 0xffffffff) {\n        if (DAT_0010941a == 6) {\n          DAT_00109170 = 1;\n        }\n        else if (DAT_0010941a < 7) {\n          DAT_00109170 = (DAT_0010941a != 3) + 1 + (uint)(DAT_0010941a != 3);\n        }\n        else {\n          DAT_00109170 = 3 - ((ushort)(DAT_0010941a - 0xb4) < 2);\n        }\n      }\n      if ((output_class == DAT_00109170) || (DAT_00109170 == 3)) {\n        if ((output_class == DAT_00109168) || (DAT_00109168 == 3)) {\n          if ((input_class == DAT_00109174) || (DAT_00109174 == 0xffffffff)) {\n            input_class = (uint)DAT_00109418;\n            if ((DAT_00109164 == 0xffffffff) || (input_class == DAT_00109164)) {\n              input_class = _DAT_001093e4 >> 0x18;\n              if ((DAT_0010915c == 0xffffffff) || (input_class == DAT_0010915c)) {\n                input_class = _DAT_001093e8 & 0xff;\n                if ((input_class == DAT_00109154) || (DAT_00109154 == 0xffffffff)) {\n                  if ((char)output_class == '\\x01') {\n                    if (DAT_0010916c != 0xffffffff) {\n                      (*DAT_001093b8)(&DAT_00109392,(long)(int)DAT_0010916c,2);\n                    }\n                    if (DAT_00109160 != -1) {\n                      (*DAT_001093b8)(&DAT_00109390,(long)DAT_00109160,2);\n                    }\n                    if (DAT_00109158 != -1) {\n                      type_val_copy =\n                           CONCAT13((char)DAT_00109158,(undefined3)type_val_copy);\n                    }\n                    if (DAT_00109150 != -1) {\n                      _DAT_00109388 = CONCAT31(DAT_00109388_1,(char)DAT_00109150);\n                    }\n                    read_result = fwrite(&DAT_00109380,0x34,1,file);\n                    if (read_result == 1) {\n                      return 0;\n                    }\n                    result = update_elf_header_error_message_001024ec();\n                    return result;\n                  }\n                  if ((char)output_class != '\\x02') {\n                    \n                    abort();\n                  }\n                  if (DAT_0010916c != 0xffffffff) {\n                    (*DAT_001093b8)(&DAT_00109352,(long)(int)DAT_0010916c,2);\n                  }\n                  if (DAT_00109160 != -1) {\n                    (*DAT_001093b8)(&DAT_00109350,(long)DAT_00109160,2);\n                  }\n                  if (DAT_00109158 != -1) {\n                    uRam0000000000109344 =\n                         CONCAT13((char)DAT_00109158,(undefined3)uRam0000000000109344);\n                  }\n                  if (DAT_00109150 != -1) {\n                    _DAT_00109348 = CONCAT31(DAT_00109348_1,(char)DAT_00109150);\n                  }\n                  read_result = fwrite(&DAT_00109340,0x40,1,file);\n                  if (read_result == 1) {\n                    return 0;\n                  }\n                  result = update_elf_header_error_message_001024ec();\n                  return result;\n                }\n                error_message = \"%s: Unmatched EI_ABIVERSION: %d is not %d\\n\";\n                output_class = DAT_00109154;\n              }\n              else {\n                error_message = \"%s: Unmatched EI_OSABI: %d is not %d\\n\";\n                output_class = DAT_0010915c;\n              }\n            }\n            else {\n              error_message = \"%s: Unmatched e_type: %d is not %d\\n\";\n              output_class = DAT_00109164;\n            }\n          }\n          else {\n            error_message = \"%s: Unmatched e_machine: %d is not %d\\n\";\n            output_class = DAT_00109174;\n          }\n          result = dcgettext(0,error_message,5);\n          error(result,param,input_class,output_class);\n          return 1;\n        }\n        error_message = \"%s: Unmatched output EI_CLASS: %d is not %d\\n\";\n        input_class = DAT_00109168;\n      }\n      else {\n        error_message = \"%s: Unmatched input EI_CLASS: %d is not %d\\n\";\n        input_class = DAT_00109170;\n      }\n      result = dcgettext(0,error_message,5);\n      error(result,param,output_class,input_class);\n    }\n    else {\n      result = dcgettext(0,\"%s: Unsupported EI_VERSION: %d is not %d\\n\",5);\n      error(result,param,input_class,1);\n    }\n  }\n  else {\ncode_r0x00102558:\n    result = dcgettext(0,\"%s: Failed to read ELF header\\n\",5);\n    error(result,param);\n  }\n  return 1;\n}\n\n",
            "current_name": "read_and_validate_elf_header_00104de0",
            "entrypoint": "0x00104de0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104de0": "read_and_validate_elf_header_00104de0",
                "__off": "file_offset",
                "get_value_from_data_00103a90": "get_value_from_data",
                "iVar1": "seek_result",
                "param_1": "param",
                "param_2": "file",
                "pcVar4": "error_message",
                "sVar2": "read_result",
                "uRam0000000000109384": "type_val_copy",
                "uRam000000000010938c": "original_ei_osabi",
                "uRam00000000001093ec": "output_value_src_copy",
                "uVar3": "result",
                "uVar5": "input_class",
                "uVar6": "output_class",
                "write_param_to_memory_00103ad0": "write_param_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105370": {
            "additional_data": {
                "FUN_00105370": {
                    "allocate_and_copy_string": 4,
                    "extract_and_allocate_path": 1,
                    "extract_archive_member_name": 1,
                    "extract_file_name": 7,
                    "extract_file_name_from_path": 1,
                    "extract_file_path": 4,
                    "extract_file_path_and_extension": 1,
                    "extract_filename_and_create_string": 1,
                    "parse_file_name": 1,
                    "parse_file_path": 4,
                    "parse_path": 4,
                    "reverse_and_allocate_memory": 1,
                    "reverse_filename": 1
                },
                "__size": {
                    "allocated_size": 4,
                    "allocation_size": 2,
                    "buffer_size": 3,
                    "destination_size": 1,
                    "final_allocation_size": 1,
                    "malloc_size": 1,
                    "new_path_size": 1,
                    "new_size": 2,
                    "output_size": 1,
                    "required_size": 1,
                    "size": 1,
                    "total_length": 1,
                    "total_size": 4
                },
                "bVar9": {
                    "allocation_failed": 1,
                    "flag": 7,
                    "found_slash": 1,
                    "is_backslash": 1,
                    "is_backward": 2,
                    "is_backward_slash": 2,
                    "is_delimiter": 1,
                    "is_negative": 7,
                    "is_negative_length": 1,
                    "is_slash_found": 1,
                    "loop_direction": 1,
                    "negative_flag": 1,
                    "slash_flag": 1,
                    "use_increment": 1
                },
                "cVar2": {
                    "current_char": 13
                },
                "error": {
                    "print_error": 1
                },
                "extraout_RDX": {
                    "delimiter_index": 1,
                    "delimiter_length": 1,
                    "destination_path_length": 1,
                    "file_length": 1,
                    "file_name_length": 3,
                    "filename_length": 2,
                    "filepath_length": 1,
                    "new_path_length": 1,
                    "output_length": 1,
                    "source_length": 1,
                    "substring_length": 1
                },
                "lVar1": {
                    "calculated_size": 1,
                    "combined_length": 1,
                    "combined_size": 1,
                    "difference": 1,
                    "input_path_length": 1,
                    "length": 1,
                    "name_length": 1,
                    "source_length": 1,
                    "total_allocation_size": 1,
                    "total_bytes": 1,
                    "total_length": 8,
                    "total_size": 5
                },
                "param_1": {
                    "file_path": 7,
                    "filepath": 1,
                    "input_file_path": 1,
                    "input_path": 11,
                    "input_string": 4,
                    "original_filename": 1,
                    "original_path": 1,
                    "path": 1,
                    "source_path": 2,
                    "source_string": 2
                },
                "param_2": {
                    "delimiter": 3,
                    "delimiter_string": 1,
                    "destination_path": 2,
                    "destination_string": 1,
                    "file_content": 1,
                    "file_contents": 1,
                    "file_name": 9,
                    "file_path": 3,
                    "filename": 3,
                    "member_name": 1,
                    "new_path": 1,
                    "output_file_path": 1,
                    "output_path": 2,
                    "path_string": 1,
                    "replacement_text": 1
                },
                "param_3": {
                    "buffer": 1
                },
                "pcVar4": {
                    "current_position": 1,
                    "destination_string": 1,
                    "end_of_path": 1,
                    "file_name": 1,
                    "file_name_start": 3,
                    "filename_ptr": 1,
                    "last_delimiter": 1,
                    "last_delimiter_pos": 1,
                    "last_slash": 12,
                    "last_slash_index": 1,
                    "last_slash_position": 2,
                    "new_path": 1,
                    "path_copy": 1,
                    "path_end": 1,
                    "result": 1,
                    "source": 1,
                    "start_of_file_name": 1
                },
                "pcVar5": {
                    "allocated_input_path": 1,
                    "allocated_size1": 1,
                    "base_path": 1,
                    "default_file_path": 1,
                    "destination": 1,
                    "file_name": 1,
                    "file_name_end": 2,
                    "file_name_length": 3,
                    "file_name_size": 1,
                    "file_path_length": 2,
                    "filename_size": 1,
                    "filepath_ptr": 1,
                    "initial_size": 1,
                    "input_length": 1,
                    "input_path_length": 2,
                    "input_path_size": 1,
                    "path_copy": 1,
                    "path_length": 4,
                    "source_length": 2,
                    "source_path_length": 1,
                    "source_string_length": 1,
                    "start_position": 1
                },
                "pcVar6": {
                    "allocated_file_name": 1,
                    "allocated_file_path": 1,
                    "allocated_memory": 1,
                    "allocated_path": 3,
                    "allocated_size2": 1,
                    "allocated_string": 2,
                    "allocation_size": 1,
                    "buffer": 1,
                    "current_char": 1,
                    "current_position": 2,
                    "file_name": 2,
                    "file_name_start": 1,
                    "file_path": 1,
                    "file_path_copy": 1,
                    "filename": 2,
                    "last_slash_position": 1,
                    "new_path": 1,
                    "new_path_ptr": 1,
                    "new_string": 1,
                    "path": 1,
                    "path_buffer": 1,
                    "source_ptr": 1,
                    "temp_position": 1,
                    "temp_ptr": 2
                },
                "uVar3": {
                    "error_message": 16,
                    "error_msg": 2,
                    "error_text": 1,
                    "message": 1,
                    "translated_string": 1
                },
                "uVar7": {
                    "file_name_length": 2,
                    "file_name_size": 1,
                    "file_size": 1,
                    "filename_length": 1,
                    "length": 3,
                    "loop_counter": 1,
                    "name_copy_size": 1,
                    "num_characters": 1,
                    "output_path_length": 1,
                    "path_length": 1,
                    "remaining_bytes": 1,
                    "remaining_chars": 5,
                    "remaining_length": 5,
                    "remaining_size": 4,
                    "size_remaining": 1,
                    "source_length_remaining": 1
                },
                "uVar8": {
                    "base_path_length": 1,
                    "chars_before_slash": 1,
                    "copy_size": 1,
                    "difference": 1,
                    "file_name_length": 3,
                    "file_name_size": 2,
                    "file_path_length": 1,
                    "filename_bytes": 1,
                    "filename_length": 2,
                    "filename_start_index": 1,
                    "input_file_path_length": 1,
                    "input_path_length": 2,
                    "name_length": 1,
                    "offset": 1,
                    "path_diff": 1,
                    "path_length": 2,
                    "path_length_without_file_name": 1,
                    "path_size": 1,
                    "prefix_length": 1,
                    "relative_size": 1,
                    "remaining_characters": 1,
                    "remaining_length": 1,
                    "slash_index": 1,
                    "start_of_file_name": 1,
                    "substring_length": 1
                }
            },
            "called": [
                "malloc",
                "FUN_00102cbc"
            ],
            "calling": [
                "FUN_00103186",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_00103006",
                "FUN_00103160"
            ],
            "code": "\nchar * extract_file_name_from_path_00105370(char *input_path,char *file_name)\n\n{\n  ulong total_size;\n  long total_length;\n  char current_char;\n  undefined8 error_message;\n  char *last_slash;\n  char *path_length;\n  char *allocated_path;\n  ulong remaining_chars;\n  ulong file_name_length;\n  ulong file_name_length;\n  byte flag;\n  \n  flag = 0;\n  path_length = (char *)0x1;\n  if (input_path != (char *)0x0) {\n    path_length = input_path;\n  }\n  allocated_path = (char *)malloc((size_t)path_length);\n  if (allocated_path != (char *)0x0) {\n    return allocated_path;\n  }\n  allocate_memory_and_print_print_error_message_00102fc7();\n  allocated_path = path_length;\n  last_slash = path_length;\n  while (current_char = *allocated_path, current_char != '\\0') {\n    allocated_path = allocated_path + 1;\n    if (current_char == '/') {\n      last_slash = allocated_path;\n    }\n  }\n  if ((*file_name == '/') || (path_length == last_slash)) {\n    if (file_name_length + 1 == 0) {\n      return (char *)0x0;\n    }\n    allocated_path = (char *)malloc(file_name_length + 1);\n    remaining_chars = file_name_length;\n    path_length = allocated_path;\n    if (allocated_path != (char *)0x0) {\n      for (; remaining_chars != 0; remaining_chars = remaining_chars - 1) {\n        *path_length = *file_name;\n        file_name = file_name + (ulong)flag * -2 + 1;\n        path_length = path_length + (ulong)flag * -2 + 1;\n      }\n      allocated_path[file_name_length] = '\\0';\n      return allocated_path;\n    }\n  }\n  else {\n    file_name_length = (long)last_slash - (long)path_length;\n    total_length = file_name_length + file_name_length;\n    remaining_chars = file_name_length;\n    if (file_name_length <= file_name_length) {\n      remaining_chars = file_name_length;\n    }\n    total_size = total_length + 1;\n    if (total_size < remaining_chars) {\n      error_message = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      print_error(error_message,file_name_length);\n      return (char *)0x0;\n    }\n    last_slash = (char *)malloc(total_size);\n    allocated_path = last_slash;\n    if (last_slash != (char *)0x0) {\n      for (; remaining_chars = file_name_length, file_name_length != 0; file_name_length = file_name_length - 1) {\n        *allocated_path = *path_length;\n        path_length = path_length + (ulong)flag * -2 + 1;\n        allocated_path = allocated_path + (ulong)flag * -2 + 1;\n      }\n      for (; remaining_chars != 0; remaining_chars = remaining_chars - 1) {\n        *allocated_path = *file_name;\n        file_name = file_name + (ulong)flag * -2 + 1;\n        allocated_path = allocated_path + (ulong)flag * -2 + 1;\n      }\n      last_slash[total_length] = '\\0';\n      return last_slash;\n    }\n  }\n  error_message = dcgettext(0,\"Out of memory\\n\",5);\n  print_error(error_message);\n  return (char *)0x0;\n}\n\n",
            "current_name": "extract_file_name_from_path_00105370",
            "entrypoint": "0x00105370",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105370": "extract_file_name_from_path_00105370",
                "__size": "total_size",
                "bVar9": "flag",
                "cVar2": "current_char",
                "error": "print_error",
                "extraout_RDX": "file_name_length",
                "lVar1": "total_length",
                "param_1": "input_path",
                "param_2": "file_name",
                "pcVar4": "last_slash",
                "pcVar5": "path_length",
                "pcVar6": "allocated_path",
                "uVar3": "error_message",
                "uVar7": "remaining_chars",
                "uVar8": "file_name_length"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x00105394",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "FUN_00103b30",
                "__cxa_finalize"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_00109320 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00109148);\n  FUNC_00103b30();\n  DAT_00109320 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x00103ba0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00103b60"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00103b60();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x00103be0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_001024ec"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "abort": {
            "called": [
                "abort"
            ],
            "calling": [
                "FUN_00102c98",
                "FUN_0010354e",
                "FUN_00104de0",
                "caseD_0",
                "FUN_0010347f"
            ],
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "current_name": "abort",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "caseD_0": {
            "called": [
                "dcgettext",
                "error",
                "abort"
            ],
            "calling": [
                "FUN_00103a90"
            ],
            "code": "\nvoid switchD_00103aac::caseD_0(void)\n\n{\n  undefined8 uVar1;\n  undefined4 unaff_EBX;\n  \n  uVar1 = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(uVar1,unaff_EBX);\n                    \n  abort();\n}\n\n",
            "current_name": "caseD_0",
            "entrypoint": "0x0010289a",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "caseD_3": {
            "called": [
                "FUN_00103ab3"
            ],
            "calling": [
                "FUN_00103a90"
            ],
            "code": "\nvoid switchD_00103aac::caseD_3(long param_1,undefined8 param_2)\n\n{\n  FUNC_00103ab3(param_1,param_2,\n               (ulong)*(byte *)(param_1 + 1) << 8 | (ulong)*(byte *)(param_1 + 2) << 0x10);\n  return;\n}\n\n",
            "current_name": "caseD_3",
            "entrypoint": "0x00102825",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_00102323",
                "FUN_00102c98",
                "error",
                "FUN_00102434",
                "FUN_00104de0",
                "FUN_001032de",
                "FUN_001029a5",
                "FUN_00104da0",
                "caseD_0",
                "FUN_0010358d",
                "FUN_0010234b",
                "FUN_0010354e",
                "warn",
                "FUN_001025ab",
                "FUN_00103bf0",
                "FUN_001024ec",
                "FUN_00102cc4",
                "FUN_00102558",
                "FUN_001028be",
                "FUN_001022c0",
                "FUN_0010347f"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "__libc_start_main",
                "FUN_00103bf0"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(process_binary_file_00103bf0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00103b00",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "error": {
            "called": [
                "dcgettext",
                "fprintf",
                "fflush",
                "vfprintf"
            ],
            "calling": [
                "FUN_00102323",
                "FUN_00102c98",
                "FUN_00102434",
                "FUN_00104de0",
                "FUN_001029a5",
                "FUN_00104da0",
                "caseD_0",
                "FUN_0010358d",
                "FUN_0010234b",
                "FUN_0010354e",
                "FUN_001025ab",
                "FUN_00103bf0",
                "FUN_001024ec",
                "FUN_00102cc4",
                "FUN_00102558",
                "FUN_001028be",
                "FUN_001022c0",
                "FUN_0010347f"
            ],
            "code": "\n\n\nvoid error(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n          undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,char *param_9,\n          undefined8 param_10,undefined8 param_11,undefined8 param_12,undefined8 param_13,\n          undefined8 param_14)\n\n{\n  char in_AL;\n  char *__format;\n  undefined4 local_e0;\n  undefined4 local_dc;\n  undefined *local_d8;\n  undefined *local_d0;\n  undefined local_c8 [8];\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  \n  if (in_AL != '\\0') {\n    local_98 = param_1;\n    local_88 = param_2;\n    local_78 = param_3;\n    local_68 = param_4;\n    local_58 = param_5;\n    local_48 = param_6;\n    local_38 = param_7;\n    local_28 = param_8;\n  }\n  local_c0 = param_10;\n  local_b8 = param_11;\n  local_b0 = param_12;\n  local_a8 = param_13;\n  local_a0 = param_14;\n  fflush(_stdout);\n  local_d8 = &stack0x00000008;\n  local_d0 = local_c8;\n  local_e0 = 8;\n  local_dc = 0x30;\n  __format = (char *)dcgettext(0,\"%s: Error: \",5);\n  fprintf(_stderr,__format,\"elfedit\");\n  vfprintf(_stderr,param_9,&local_e0);\n  return;\n}\n\n",
            "current_name": "error",
            "entrypoint": "0x00102e85",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_00102fbc",
                "FUN_001032de",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "error",
                "warn"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fileno": {
            "called": [
                "fileno"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fileno",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_00102fc7",
                "error",
                "warn",
                "FUN_001032de",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_00104de0",
                "FUN_001025ab",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_001028be"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001032de",
                "FUN_001025ab",
                "FUN_001029a5",
                "FUN_00102f65",
                "FUN_00103bf0",
                "FUN_00103006"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_00104de0",
                "FUN_001025ab",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_001028be"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fstat": {
            "called": [
                "fstat"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint fstat(int __fd,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = fstat(__fd,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "fstat",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_00104de0",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_00104de0"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getc": {
            "called": [
                "getc"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "getc",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "malloc": {
            "called": [
                "malloc"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_00103449",
                "FUN_001025ab",
                "FUN_00102cc4",
                "FUN_00105370"
            ],
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "current_name": "malloc",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mmap": {
            "called": [
                "mmap"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid * mmap(void *__addr,size_t __len,int __prot,int __flags,int __fd,__off_t __offset)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = mmap(__addr,__len,__prot,__flags,__fd,__offset);\n  return pvVar1;\n}\n\n",
            "current_name": "mmap",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "munmap": {
            "called": [
                "munmap"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint munmap(void *__addr,size_t __len)\n\n{\n  int iVar1;\n  \n  iVar1 = munmap(__addr,__len);\n  return iVar1;\n}\n\n",
            "current_name": "munmap",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "realloc": {
            "called": [
                "realloc"
            ],
            "calling": [
                "FUN_00103449"
            ],
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "current_name": "realloc",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "rewind": {
            "called": [
                "rewind"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nvoid rewind(FILE *__stream)\n\n{\n  rewind(__stream);\n  return;\n}\n\n",
            "current_name": "rewind",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "sbrk": {
            "called": [
                "sbrk"
            ],
            "calling": [
                "FUN_00102fc7"
            ],
            "code": "\n\n\nvoid * sbrk(intptr_t __delta)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = sbrk(__delta);\n  return pvVar1;\n}\n\n",
            "current_name": "sbrk",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "snprintf": {
            "called": [
                "snprintf"
            ],
            "calling": [
                "FUN_0010358d"
            ],
            "code": "\n\n\nint snprintf(char *__s,size_t __maxlen,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = snprintf(__s,__maxlen,__format);\n  return iVar1;\n}\n\n",
            "current_name": "snprintf",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcasecmp": {
            "called": [
                "strcasecmp"
            ],
            "calling": [
                "FUN_0010234b",
                "FUN_00104c60",
                "FUN_00104d30",
                "FUN_001022c0",
                "FUN_00104ce0",
                "FUN_00104da0"
            ],
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcasecmp",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_001029a5",
                "FUN_00103bf0"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strdup": {
            "called": [
                "strdup"
            ],
            "calling": [
                "FUN_001025ab"
            ],
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "current_name": "strdup",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_00103bf0",
                "FUN_001024ec"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_00103186",
                "FUN_001027fd",
                "FUN_00103bf0",
                "FUN_00103006",
                "FUN_00103160"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncmp": {
            "called": [
                "strncmp"
            ],
            "calling": [
                "FUN_001027fd"
            ],
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "strncmp",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtoul": {
            "called": [
                "strtoul"
            ],
            "calling": [
                "FUN_0010358d",
                "FUN_001025ab",
                "FUN_001029a5",
                "FUN_00103bf0",
                "FUN_001028be"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "strtoul",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_00103bf0"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "error",
                "warn"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "warn": {
            "called": [
                "dcgettext",
                "fflush",
                "fprintf",
                "vfprintf"
            ],
            "calling": [],
            "code": "\n\n\nvoid warn(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n         undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,char *param_9,\n         undefined8 param_10,undefined8 param_11,undefined8 param_12,undefined8 param_13,\n         undefined8 param_14)\n\n{\n  char in_AL;\n  char *__format;\n  undefined4 local_e0;\n  undefined4 local_dc;\n  undefined *local_d8;\n  undefined *local_d0;\n  undefined local_c8 [8];\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  \n  if (in_AL != '\\0') {\n    local_98 = param_1;\n    local_88 = param_2;\n    local_78 = param_3;\n    local_68 = param_4;\n    local_58 = param_5;\n    local_48 = param_6;\n    local_38 = param_7;\n    local_28 = param_8;\n  }\n  local_c0 = param_10;\n  local_b8 = param_11;\n  local_b0 = param_12;\n  local_a8 = param_13;\n  local_a0 = param_14;\n  fflush(_stdout);\n  local_d8 = &stack0x00000008;\n  local_d0 = local_c8;\n  local_e0 = 8;\n  local_dc = 0x30;\n  __format = (char *)dcgettext(0,\"%s: Warning: \",5);\n  fprintf(_stderr,__format,\"elfedit\");\n  vfprintf(_stderr,param_9,&local_e0);\n  return;\n}\n\n",
            "current_name": "warn",
            "entrypoint": "0x00102da5",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102020",
            "FUN_001022c0",
            "FUN_00102323",
            "FUN_0010234b",
            "FUN_001023ce",
            "FUN_001024ec",
            "FUN_00102558",
            "FUN_001027fd",
            "FUN_001028be",
            "FUN_00102c98",
            "FUN_00102cc4",
            "FUN_00102f65",
            "FUN_00102fa0",
            "FUN_00102fbc",
            "FUN_0010347f",
            "FUN_0010354e",
            "FUN_00103a90",
            "FUN_00103ad0",
            "FUN_00104c60",
            "FUN_00104ce0",
            "FUN_00104d30",
            "FUN_00104da0"
        ],
        [
            "FUN_00102434",
            "FUN_001025ab",
            "FUN_00104de0"
        ],
        [
            "FUN_00102fc7",
            "FUN_00103006",
            "FUN_00103160",
            "FUN_00103186"
        ],
        [
            "FUN_00102cbc",
            "FUN_001032de",
            "FUN_00103449",
            "FUN_00105370"
        ],
        [
            "FUN_001029a5"
        ],
        [
            "FUN_0010358d"
        ],
        [
            "FUN_00103bf0"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 185268
}