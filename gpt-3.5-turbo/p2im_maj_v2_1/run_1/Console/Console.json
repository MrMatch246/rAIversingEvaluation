{
    "functions": {
        "FUN_00000410": {
            "additional_data": {
                "FUN_00000410": {
                    "assertion_failure_handler": 1,
                    "handle_assertion_failure": 30
                },
                "PTR_FUN_00000df4": {
                    "assertion_failure_handler": 1
                },
                "PTR_parameter1": {
                    "ptr_parameter1": 1
                },
                "PTR_parameter2": {
                    "ptr_parameter2": 1
                },
                "handle_assertion_failure_00000df4": {
                    "assertion_failure_callback": 1,
                    "assertion_failure_handler": 7,
                    "error_handler": 1,
                    "handle_assertion_failure": 2
                }
            },
            "called": [
                "FUN_00000df4"
            ],
            "calling": [
                "FUN_0000459c"
            ],
            "code": "\nvoid handle_assertion_failure_00000410(void)\n\n{\n  assertion_failure_handler();\n  return;\n}\n\n",
            "current_name": "handle_assertion_failure_00000410",
            "entrypoint": "0x00000410",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000410": "handle_assertion_failure_00000410",
                "handle_assertion_failure_00000df4": "assertion_failure_handler"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000428": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "relocation_table": 1
                },
                "FUN_00000428": {
                    "extract_offset_and_check_range": 1,
                    "extract_offset_from_binary": 1,
                    "get_elf32_rel_offset": 1,
                    "get_filtered_offset": 1,
                    "get_first_valid_offset": 1,
                    "get_interrupt_offset": 2,
                    "get_memory_offset": 1,
                    "get_offset": 1,
                    "get_offset_if_in_range": 1,
                    "get_offset_or_fail": 1,
                    "get_offset_value": 1,
                    "get_offset_within_range": 1,
                    "get_relocated_offset": 6,
                    "get_relocation_offset": 1,
                    "get_updated_offset": 3,
                    "get_valid_r_offset": 1,
                    "process_interrupt": 1,
                    "process_interrupt_status": 1,
                    "process_irq_interrupt_status": 1,
                    "update_offset": 1,
                    "validate_and_assign_offset": 1,
                    "validate_and_update_offset": 1
                },
                "local_c": {
                    "adjusted_offset": 1,
                    "current_offset": 1,
                    "extracted_offset": 1,
                    "filtered_offset": 1,
                    "offset": 1,
                    "offset_value": 1,
                    "old_offset": 1,
                    "original_offset": 2,
                    "output_offset": 1,
                    "relocated_offset": 4,
                    "result": 9,
                    "result_offset": 3,
                    "return_value": 1,
                    "updated_offset": 4
                },
                "param_1": {
                    "destination": 1,
                    "error_code": 1,
                    "output": 4,
                    "output_param": 1,
                    "output_pointer": 3,
                    "output_ptr": 3,
                    "output_status": 1,
                    "output_value": 2,
                    "result": 5,
                    "result_ptr": 2,
                    "status": 3,
                    "status_pointer": 2,
                    "status_ptr": 3
                },
                "param_2": {
                    "base_offset": 2,
                    "current_offset": 1,
                    "initial_offset": 1,
                    "input": 2,
                    "input_offset": 5,
                    "input_param": 1,
                    "input_value": 10,
                    "new_value": 1,
                    "offset": 5,
                    "original_offset": 3
                },
                "uVar1": {
                    "interrupt_status": 17,
                    "irq_interrupt_status": 10,
                    "irq_status": 3
                }
            },
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "calling": [
                "FUN_00004bd0"
            ],
            "code": "\ndword get_relocated_offset_00000428(undefined4 *result,int input_value)\n\n{\n  undefined4 interrupt_status;\n  dword result;\n  \n  interrupt_status = get_irq_interrupt_status_00000cd0();\n  result = relocation_table[0].r_offset;\n  if ((input_value + relocation_table[0].r_offset < 0x20030001) &&\n     (0x1fff0def < input_value + relocation_table[0].r_offset)) {\n    relocation_table[0].r_offset = input_value + relocation_table[0].r_offset;\n  }\n  else {\n    *result = 0xc;\n    result = 0xffffffff;\n  }\n  enable_ir_qinterrupts_if_current_mode_is_privileged_00000d0c(interrupt_status);\n  return result;\n}\n\n",
            "current_name": "get_relocated_offset_00000428",
            "entrypoint": "0x00000428",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "relocation_table",
                "FUN_00000428": "get_relocated_offset_00000428",
                "local_c": "result",
                "param_1": "result",
                "param_2": "input_value",
                "uVar1": "interrupt_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000490": {
            "additional_data": {
                "FUN_00000490": {
                    "copy_and_increment_array": 7,
                    "copy_and_increment_array_elements": 23,
                    "copy_and_increment_elements": 1
                },
                "param_1": {
                    "": 1,
                    "array": 1,
                    "array1": 1,
                    "array_length": 1,
                    "array_size": 6,
                    "input1": 6,
                    "input_1": 1,
                    "input_param1": 2,
                    "original_param": 1,
                    "param1": 3,
                    "source_array": 3,
                    "unused_param": 1,
                    "unused_param1": 1
                },
                "param_2": {
                    "": 1,
                    "array2": 1,
                    "array_capacity": 2,
                    "array_size": 1,
                    "data_type": 1,
                    "destination_array": 3,
                    "element_size": 3,
                    "input2": 6,
                    "input_2": 1,
                    "input_param2": 2,
                    "length": 1,
                    "param2": 4,
                    "unused_param": 1,
                    "unused_param2": 1
                },
                "param_3": {
                    "array": 4,
                    "array_param1": 1,
                    "original_array": 1,
                    "source_array": 22,
                    "source_array_size": 1,
                    "source_size": 2
                },
                "param_4": {
                    "array_length": 7,
                    "array_param2": 1,
                    "array_size": 7,
                    "destination_array": 9,
                    "element_size": 3,
                    "length": 4
                },
                "uVar1": {
                    "copied_array": 1,
                    "result": 12
                }
            },
            "called": [
                "FUN_00000e14"
            ],
            "calling": [
                "FUN_00004dc8"
            ],
            "code": "\nundefined4 copy_and_increment_array_elements_00000490(undefined4 array_size,undefined4 input2,undefined4 source_array,undefined4 destination_array)\n\n{\n  undefined4 result;\n  \n  result = copy_array_and_increment_elements_00000e14(source_array,destination_array);\n  return result;\n}\n\n",
            "current_name": "copy_and_increment_array_elements_00000490",
            "entrypoint": "0x00000490",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000490": "copy_and_increment_array_elements_00000490",
                "param_1": "array_size",
                "param_2": "input2",
                "param_3": "source_array",
                "param_4": "destination_array",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000004f2": {
            "additional_data": {
                "0x13": {
                    "initial_value": 1
                },
                "DAT_00000001": {
                    "default_data": 1
                },
                "FUN_000004f2": {
                    "initialize_and_return_error": 1,
                    "initialize_memory": 4,
                    "initialize_param_and_return": 1,
                    "initialize_param_with_19": 1,
                    "initialize_value": 2,
                    "initialize_value_and_return": 5,
                    "initialize_value_and_return_error": 2,
                    "initialize_variable": 3,
                    "set_default_value": 2,
                    "set_memory_value_and_return": 1,
                    "set_param_and_return": 4,
                    "set_param_to19": 1,
                    "set_to19": 1,
                    "set_to19_and_return_negative_one": 1,
                    "set_value_and_return": 1,
                    "set_value_and_return_negative_one": 1
                },
                "PTR_00000000": {
                    "memory": 1
                },
                "param_1": {
                    "initialized_value_ptr": 1,
                    "memory_address": 2,
                    "memory_pointer": 2,
                    "memory_ptr": 1,
                    "output": 1,
                    "output_param": 3,
                    "output_pointer": 3,
                    "output_value": 11,
                    "output_variable": 1,
                    "result": 2,
                    "result_ptr": 1,
                    "value_pointer": 1,
                    "value_ptr": 2
                },
                "param_1_error": {
                    "error": 1
                },
                "param_1_value": {
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00004dee",
                "FUN_00004e26"
            ],
            "code": "\nundefined4 initialize_value_and_return_error_000004f2(undefined4 *output_value)\n\n{\n  *output_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "current_name": "initialize_value_and_return_error_000004f2",
            "entrypoint": "0x000004f2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000004f2": "initialize_value_and_return_error_000004f2",
                "param_1": "output_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000514": {
            "additional_data": {
                "": {
                    "": 1
                },
                "0x13": {
                    "initial_value": 2,
                    "value_to_set": 1
                },
                "0xffffffff": {
                    "error_code": 1,
                    "return_value": 1
                },
                "FUN_00000514": {
                    "initialize_and_return": 1,
                    "initialize_memory": 2,
                    "initialize_param_and_return": 1,
                    "initialize_parameter": 1,
                    "initialize_return_code": 1,
                    "initialize_value_and_return": 2,
                    "initialize_value_and_return_error": 1,
                    "initialize_variable": 1,
                    "set_default_value": 3,
                    "set_initial_value": 1,
                    "set_integer_and_return_error": 1,
                    "set_param_and_return": 3,
                    "set_param_to19": 1,
                    "set_param_value": 1,
                    "set_return_value_to19": 2,
                    "set_to19": 1,
                    "set_to19_and_return": 1,
                    "set_value_and_return": 2,
                    "set_value_and_return_error": 4,
                    "set_variable_and_return": 1
                },
                "param_1": {
                    "integer_pointer": 1,
                    "memory_address": 1,
                    "memory_pointer": 1,
                    "output": 3,
                    "output_pointer": 1,
                    "output_ptr": 2,
                    "output_value": 9,
                    "param_ptr": 1,
                    "result": 4,
                    "result_ptr": 1,
                    "return_code": 1,
                    "return_value": 2,
                    "value_ptr": 2,
                    "variable_pointer": 1,
                    "variable_ptr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000056b8"
            ],
            "code": "\nundefined4 set_value_and_return_error_00000514(undefined4 *output_value)\n\n{\n  *output_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "current_name": "set_value_and_return_error_00000514",
            "entrypoint": "0x00000514",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000514": "set_value_and_return_error_00000514",
                "param_1": "output_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000534": {
            "additional_data": {
                "FUN_00000534": {
                    "check_input": 1,
                    "check_input_range": 1,
                    "check_input_validity": 2,
                    "check_param": 1,
                    "check_param_and_get_flag": 1,
                    "check_param_validity": 1,
                    "check_parameter_validity": 1,
                    "check_parameter_value": 1,
                    "check_valid_input": 11,
                    "check_valid_param": 3,
                    "check_valid_param_value": 1,
                    "check_valid_parameter": 3,
                    "check_valid_value": 1,
                    "is_valid_param": 1,
                    "validate_input": 2
                },
                "param_1": {
                    "output": 7,
                    "output_status": 1,
                    "output_value": 2,
                    "result": 21
                },
                "param_2": {
                    "input": 9,
                    "input_param": 5,
                    "input_parameter": 2,
                    "input_value": 13,
                    "value": 2
                },
                "uVar1": {
                    "is_valid": 24,
                    "is_valid_flag": 1,
                    "valid": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00005700"
            ],
            "code": "\nundefined4 check_valid_input_00000534(undefined4 *result,int input_value)\n\n{\n  undefined4 is_valid;\n  \n  *result = 0;\n  if (((input_value == 0) || (input_value == 1)) || (input_value == 2)) {\n    is_valid = 1;\n  }\n  else {\n    is_valid = 0;\n  }\n  return is_valid;\n}\n\n",
            "current_name": "check_valid_input_00000534",
            "entrypoint": "0x00000534",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000534": "check_valid_input_00000534",
                "param_1": "result",
                "param_2": "input_value",
                "uVar1": "is_valid"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000566": {
            "additional_data": {
                "FUN_00000566": {
                    "byte_to_int": 1,
                    "convert_byte_order": 1,
                    "convert_byte_to_int": 6,
                    "convert_byte_to_integer": 4,
                    "convert_bytes_to_int": 2,
                    "convert_param_to_big_endian": 1,
                    "convert_to_little_endian": 2,
                    "decode_byte": 1,
                    "decode_integer": 4,
                    "decode_value": 1,
                    "decode_with_count": 1,
                    "extract_bits": 1,
                    "extract_byte": 1,
                    "extract_byte_from_int": 1,
                    "extract_least_significant_byte": 1,
                    "get_bitwise_reversal": 1,
                    "reverse_bits": 1,
                    "reverse_byte_order": 1
                },
                "bVar1": {
                    "bit7": 1,
                    "byte0": 1,
                    "byte1": 12,
                    "byte3": 5,
                    "byte4": 2,
                    "byte_3": 1,
                    "encoded_byte4": 1,
                    "first_byte": 3,
                    "fourth_byte": 2,
                    "input_byte_4": 1,
                    "msb": 1,
                    "shifted_byte_1": 1
                },
                "bVar2": {
                    "bit0": 1,
                    "byte0": 5,
                    "byte1": 3,
                    "byte2": 12,
                    "byte_0": 1,
                    "encoded_byte1": 1,
                    "first_byte": 2,
                    "input_byte_1": 1,
                    "lsb": 1,
                    "second_byte": 3,
                    "shifted_byte_2": 1
                },
                "bVar3": {
                    "bit8": 1,
                    "byte1": 5,
                    "byte2": 3,
                    "byte3": 12,
                    "byte_1": 1,
                    "encoded_byte2": 1,
                    "input_byte_2": 1,
                    "second_byte": 3,
                    "shifted_byte_3": 1,
                    "third_byte": 3
                },
                "bVar4": {
                    "bit16": 1,
                    "byte2": 5,
                    "byte3": 3,
                    "byte4": 12,
                    "byte_2": 1,
                    "encoded_byte3": 1,
                    "fourth_byte": 3,
                    "input_byte_3": 1,
                    "shifted_byte_4": 1,
                    "third_byte": 3
                },
                "iVar5": {
                    "converted_number": 1,
                    "converted_value": 4,
                    "decoded_integer": 1,
                    "decoded_value": 3,
                    "output": 1,
                    "result": 20,
                    "reversed_value": 1
                },
                "param_1": {
                    "byte_value": 1,
                    "encoded_value": 1,
                    "input": 14,
                    "input_int": 1,
                    "input_integer": 1,
                    "input_number": 1,
                    "input_value": 7,
                    "number": 1,
                    "value": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_00000610"
            ],
            "code": "\nint convert_byte_to_int_00000566(int input)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)input;\n  byte3 = (byte)((uint)input >> 8);\n  byte4 = (byte)((uint)input >> 0x10);\n  byte1 = (byte)((uint)input >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (input == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "current_name": "convert_byte_to_int_00000566",
            "entrypoint": "0x00000566",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000566": "convert_byte_to_int_00000566",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "result",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000058e": {
            "additional_data": {
                "FUN_0000058e": {
                    "copy_and_assign_ptr": 1,
                    "copy_and_replace_pointer": 1,
                    "copy_and_replace_ptr": 1,
                    "copy_data_to_pointer": 1,
                    "copy_to_new_pointer": 1,
                    "reverse_and_update_pointer": 1,
                    "reverse_if_zero": 1,
                    "reverse_pointer": 1,
                    "transform_data": 1,
                    "update_param_and_return": 1,
                    "update_pointer": 20,
                    "update_ptr_value": 1
                },
                "param_1": {
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "old_pointer": 1,
                    "param": 1,
                    "pointer": 6,
                    "ptr": 1,
                    "source": 3,
                    "source_data": 1,
                    "source_pointer": 8,
                    "source_ptr": 6,
                    "target_ptr": 1
                },
                "param_2": {
                    "destination": 3,
                    "destination_pointer": 5,
                    "destination_ptr": 4,
                    "new_pointer": 5,
                    "new_pointer_value": 1,
                    "new_ptr": 2,
                    "new_ptr_value": 1,
                    "new_value": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "target_pointer": 3,
                    "target_ptr": 1,
                    "value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00000698"
            ],
            "code": "\nvoid reverse_and_update_pointer_0000058e(int *source_pointer,undefined4 *destination_pointer)\n\n{\n  if (*source_pointer == 0) {\n    *destination_pointer = destination_pointer;\n  }\n  else {\n    *destination_pointer = *(undefined4 *)*source_pointer;\n    *(undefined4 **)*source_pointer = destination_pointer;\n  }\n  *source_pointer = (int)destination_pointer;\n  return;\n}\n\n",
            "current_name": "reverse_and_update_pointer_0000058e",
            "entrypoint": "0x0000058e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000058e": "reverse_and_update_pointer_0000058e",
                "param_1": "source_pointer",
                "param_2": "destination_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000005ca": {
            "additional_data": {
                "FUN_000005ca": {
                    "copy_and_reset_pointer": 1,
                    "extract_and_clear_pointer": 1,
                    "extract_and_reset": 1,
                    "extract_and_reset_pointer": 1,
                    "extract_data": 2,
                    "extract_data_from_pointer": 1,
                    "extract_non_null_value": 1,
                    "extract_pointer": 2,
                    "extract_pointer_from_array": 1,
                    "extract_pointer_from_memory": 1,
                    "extract_value": 6,
                    "extract_value_from_pointer": 8,
                    "extract_values_from_pointer": 1,
                    "get_pointer_from_param": 1,
                    "get_value_from_pointer": 1,
                    "retrieve_pointer": 1,
                    "reverse_linked_list": 1
                },
                "param_1": {
                    "array": 1,
                    "array_ptr": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "head": 1,
                    "input": 1,
                    "input_arr": 1,
                    "input_array": 2,
                    "input_pointer": 9,
                    "input_ptr": 2,
                    "list_ptr": 1,
                    "memory_address": 1,
                    "pointer": 3,
                    "ptr": 2,
                    "source_pointer": 2
                },
                "puVar1": {
                    "copied_pointer": 1,
                    "destination_pointer": 1,
                    "extracted_data": 3,
                    "extracted_pointer": 5,
                    "extracted_value": 11,
                    "next_node": 1,
                    "output_pointer": 2,
                    "output_ptr": 1,
                    "result": 2,
                    "value": 2,
                    "value_pointer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00000698"
            ],
            "code": "\nundefined4 * extract_value_from_pointer_000005ca(int *input_pointer)\n\n{\n  undefined4 *extracted_value;\n  \n  if (*input_pointer == 0) {\n    extracted_value = (undefined4 *)0x0;\n  }\n  else {\n    extracted_value = *(undefined4 **)*input_pointer;\n    if (extracted_value == (undefined4 *)*input_pointer) {\n      *input_pointer = 0;\n    }\n    else {\n      *(undefined4 *)*input_pointer = *extracted_value;\n    }\n  }\n  return extracted_value;\n}\n\n",
            "current_name": "extract_value_from_pointer_000005ca",
            "entrypoint": "0x000005ca",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000005ca": "extract_value_from_pointer_000005ca",
                "param_1": "input_pointer",
                "puVar1": "extracted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000610": {
            "additional_data": {
                "DAT_1fff0354": {
                    "converted_data_flag": 1,
                    "converted_data_length": 1,
                    "converted_value": 1,
                    "flag": 1,
                    "is_success": 1,
                    "result": 2,
                    "some_variable": 1
                },
                "DAT_1fff03dc": {
                    "data_pointer_after_conversion": 1,
                    "initial_pointer": 1,
                    "original_data": 2,
                    "original_value_ptr": 1,
                    "previous_data": 1,
                    "previous_value": 1,
                    "source_address": 1
                },
                "DAT_1fff03e0": {
                    "converted_data_endianess": 1,
                    "converted_value": 1,
                    "new_data": 1,
                    "previous_value": 3,
                    "target_data": 1,
                    "temporary": 1
                },
                "DAT_1fff03e4": {
                    "array_address": 1,
                    "array_ptr": 1,
                    "conversion_table": 1,
                    "data_array": 1,
                    "pointer_array": 1,
                    "table_address": 1
                },
                "DAT_1fff0424": {
                    "byte_array": 1,
                    "byte_data": 5,
                    "byte_value": 1,
                    "input_data": 1
                },
                "FUN_00000610": {
                    "convert_and_adjust_value": 1,
                    "convert_and_check_byte": 1,
                    "convert_and_check_value": 1,
                    "convert_and_check_value_validity": 1,
                    "convert_and_compare_integers": 1,
                    "convert_and_modify_data": 2,
                    "convert_and_process_data": 1,
                    "convert_and_replace": 1,
                    "convert_and_store_data": 1,
                    "convert_and_update_data": 4,
                    "convert_and_update_value": 1,
                    "convert_byte_to_int": 5,
                    "convert_byte_to_int_and_update": 2,
                    "convert_bytes_to_integer": 1,
                    "convert_data": 5,
                    "convert_value": 1,
                    "decode_and_update_data": 1,
                    "process_data": 1
                },
                "convert_byte_to_int_00000566": {
                    "convert_byte_to_int": 7,
                    "convert_byte_to_integer": 1
                },
                "iVar1": {
                    "byte_pointer": 1,
                    "current_data": 1,
                    "current_value": 3,
                    "data_offset": 1,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "input_data": 1,
                    "input_value": 4,
                    "original_data_pointer": 1,
                    "original_data_ptr": 2,
                    "original_value": 10,
                    "previous_value": 2,
                    "source_offset": 1
                },
                "iVar2": {
                    "array_index": 2,
                    "byte_index": 1,
                    "converted_data": 5,
                    "converted_data_ptr": 1,
                    "converted_value": 17,
                    "current_value": 1,
                    "index": 1,
                    "index_value": 1,
                    "lookup_index": 1,
                    "target_offset": 1
                },
                "uVar3": {
                    "is_conversion_successful": 1,
                    "is_valid": 1,
                    "result": 15,
                    "return_value": 10,
                    "success": 4
                }
            },
            "called": [
                "FUN_00000566"
            ],
            "calling": [],
            "code": "\nundefined4 convert_and_update_data_00000610(void)\n\n{\n  int original_value;\n  int converted_value;\n  undefined4 result;\n  \n  original_value = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  converted_value = convert_byte_to_int(DAT_1fff0424);\n  converted_value = **(int **)(&DAT_1fff03e4 + converted_value * 4);\n  if (original_value == converted_value + -8) {\n    result = 0;\n  }\n  else {\n    if ((original_value != 0) && (*(char *)(original_value + 4) == '\\t')) {\n      *(undefined *)(original_value + 4) = 10;\n    }\n    *(undefined *)(converted_value + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(converted_value + -2);\n    result = 1;\n    DAT_1fff03dc = converted_value + -8;\n  }\n  return result;\n}\n\n",
            "current_name": "convert_and_update_data_00000610",
            "entrypoint": "0x00000610",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000610": "convert_and_update_data_00000610",
                "convert_byte_to_int_00000566": "convert_byte_to_int",
                "iVar1": "original_value",
                "iVar2": "converted_value",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000698": {
            "additional_data": {
                "DAT_1fff03e4": {
                    "pointer": 1,
                    "pointer1": 1,
                    "pointer_array": 2
                },
                "DAT_1fff0424": {
                    "bit_field": 1,
                    "bitmap": 1,
                    "bitmask": 2,
                    "bitwise_flags": 1,
                    "control_flag": 1,
                    "flag": 9,
                    "flag_array": 1,
                    "flag_register": 1,
                    "flag_value": 1,
                    "flags": 2,
                    "status": 3,
                    "variable1": 1
                },
                "FUN_00000698": {
                    "update_data": 5,
                    "update_flag_and_value": 1,
                    "update_param": 1,
                    "update_parameter": 2,
                    "update_parameter_value": 1,
                    "update_pointer": 2,
                    "update_pointer_and_flag": 9,
                    "update_pointer_and_value": 1,
                    "update_pointer_value": 1,
                    "update_value": 8
                },
                "byte": {
                    "byte_value": 1
                },
                "extract_value_from_pointer_000005ca": {
                    "extract_value": 8,
                    "extract_value_and_update": 1,
                    "extract_value_and_update_pointer": 1,
                    "extract_value_from_pointer": 6,
                    "get_value": 3,
                    "get_value_at_index": 1,
                    "get_value_from_pointer": 1,
                    "retrieve_value": 1
                },
                "param_1": {
                    "address": 1,
                    "data_address": 1,
                    "data_index": 2,
                    "data_offset": 2,
                    "data_pointer": 1,
                    "flag": 1,
                    "index": 1,
                    "input_code": 1,
                    "input_index": 2,
                    "input_param": 1,
                    "input_value": 2,
                    "offset": 1,
                    "param1": 1,
                    "param_index": 1,
                    "parameter": 1,
                    "pointer": 3,
                    "pointer_address": 4,
                    "pointer_index": 1,
                    "reference": 1,
                    "val1": 1,
                    "value_index": 2
                },
                "param_2": {
                    "new_byte_value": 1,
                    "new_value": 23,
                    "param2": 1,
                    "val2": 1,
                    "value": 5
                },
                "reverse_and_update_pointer_0000058e": {
                    "reverse_and_set_pointer": 1,
                    "reverse_and_update": 3,
                    "reverse_and_update_pointer": 12
                },
                "sbyte": {
                    "byte_index": 1,
                    "signed_byte": 1
                }
            },
            "called": [
                "FUN_0000058e",
                "FUN_000005ca"
            ],
            "calling": [
                "FUN_00002434",
                "FUN_00000794",
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "code": "\nvoid update_pointer_and_flag_00000698(int pointer_address,uint new_value)\n\n{\n  if (new_value < 9) {\n    if ((8 < *(byte_value *)(pointer_address + 4)) &&\n       (extract_value(&DAT_1fff03e4 + (uint)*(byte_value *)(pointer_address + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte_value *)(pointer_address + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(byte_index *)(pointer_address + 5));\n    }\n  }\n  else if (*(byte_value *)(pointer_address + 4) < 9) {\n    reverse_and_update_pointer(&DAT_1fff03e4 + (uint)*(byte_value *)(pointer_address + 5) * 4,pointer_address + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(byte_index *)(pointer_address + 5);\n  }\n  *(char *)(pointer_address + 4) = (char)new_value;\n  return;\n}\n\n",
            "current_name": "update_pointer_and_flag_00000698",
            "entrypoint": "0x00000698",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000698": "update_pointer_and_flag_00000698",
                "byte": "byte_value",
                "extract_value_from_pointer_000005ca": "extract_value",
                "param_1": "pointer_address",
                "param_2": "new_value",
                "reverse_and_update_pointer_0000058e": "reverse_and_update_pointer",
                "sbyte": "byte_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000738": {
            "additional_data": {
                "DAT_1fff0354": {
                    "flag": 1
                },
                "FUN_00000738": {
                    "check_and_set_memory_protection": 1,
                    "check_exception_limits": 1,
                    "check_memory_access": 1,
                    "check_memory_protection": 21,
                    "check_memory_protection_and_update_flags": 1,
                    "check_memory_protection_limits": 1,
                    "check_protection_and_set_flag": 1,
                    "handle_memory_exception": 1,
                    "memory_protection_check": 1,
                    "protect_memory": 1,
                    "verify_memory_protection": 1
                },
                "get_current_exception_number_00000d2a": {
                    "get_current_exception_number": 2
                },
                "iVar1": {
                    "current_exception_number": 3,
                    "exception_number": 28
                },
                "param_1": {
                    "access_size": 1,
                    "data_size": 1,
                    "exception_level": 1,
                    "exception_number": 3,
                    "exception_type": 1,
                    "input_value": 19,
                    "param": 1,
                    "value": 4
                },
                "set_memory_protection_flag_0000093c": {
                    "set_memory_protection_flag": 2
                }
            },
            "called": [
                "FUN_0000093c",
                "FUN_00000d2a"
            ],
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "code": "\nvoid check_and_set_memory_protection_00000738(ushort input_value)\n\n{\n  int exception_number;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (input_value < *(byte *)(DAT_1fff03dc + 5))) {\n    exception_number = get_current_exception_number();\n    if (exception_number == 0) {\n      set_memory_protection_flag();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "check_and_set_memory_protection_00000738",
            "entrypoint": "0x00000738",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000738": "check_and_set_memory_protection_00000738",
                "get_current_exception_number_00000d2a": "get_current_exception_number",
                "iVar1": "exception_number",
                "param_1": "input_value",
                "set_memory_protection_flag_0000093c": "set_memory_protection_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000794": {
            "additional_data": {
                "FUN_00000794": {
                    "clear_interrupt_status": 1,
                    "initialize_and_return_array": 1,
                    "initialize_data": 6,
                    "initialize_data_structures": 1,
                    "initialize_interrupt": 3,
                    "initialize_interrupt_and_pointers": 1,
                    "initialize_interrupt_control": 1,
                    "initialize_interrupt_handler": 1,
                    "initialize_interrupt_status": 4,
                    "initialize_interrupts": 5,
                    "initialize_memory": 2,
                    "initialize_memory_layout": 1,
                    "update_interrupt_status": 3,
                    "update_irq_status": 1
                },
                "execute_software_interrupt_00000930": {
                    "execute_interrupt": 1,
                    "execute_software_interrupt": 2,
                    "process_interrupt": 1
                },
                "extraout_r1": {
                    "error_code": 1,
                    "error_value": 1,
                    "extra_output1": 1,
                    "extra_result": 1,
                    "extra_return_value": 1,
                    "extra_value": 3,
                    "interrupt_status": 5,
                    "irq_interrupt_status": 1,
                    "result": 6,
                    "return_value": 5,
                    "status": 2,
                    "updated_status": 1
                },
                "get_irq_interrupt_status_00000cd0": {
                    "get_interrupt_status": 2,
                    "get_irq_interrupt_status": 2
                },
                "iStack_18": {
                    "count2": 2,
                    "count_1": 1,
                    "counter2": 1,
                    "i2": 1,
                    "index2": 1,
                    "inner_loop_counter": 4,
                    "inner_loop_index": 2,
                    "inner_loop_var": 1,
                    "inner_loop_variable": 1,
                    "loop": 1,
                    "loop_count_inner": 1,
                    "loop_counter": 3,
                    "loop_counter2": 6,
                    "loop_index2": 1,
                    "loop_variable2": 3,
                    "middle_loop": 1,
                    "second_loop_counter": 1
                },
                "iStack_1c": {
                    "count1": 2,
                    "count_2": 1,
                    "count_down": 1,
                    "counter": 1,
                    "counter1": 1,
                    "i1": 1,
                    "index": 1,
                    "index1": 1,
                    "loop_count_outer": 1,
                    "loop_counter": 1,
                    "loop_counter1": 6,
                    "loop_counter2": 1,
                    "loop_index": 1,
                    "loop_index1": 1,
                    "loop_variable1": 3,
                    "outer_loop": 1,
                    "outer_loop_counter": 4,
                    "outer_loop_index": 1,
                    "outer_loop_var": 1,
                    "outer_loop_variable": 1
                },
                "iVar1": {
                    "count": 3,
                    "counter": 10,
                    "i": 1,
                    "index": 5,
                    "iteration": 1,
                    "loop_counter": 2,
                    "loop_index": 1,
                    "loop_var": 1,
                    "number_of_loops": 1,
                    "temp_var1": 1,
                    "value1": 1
                },
                "piStack_14": {
                    "array": 1,
                    "array_pointer": 1,
                    "data_array": 1,
                    "data_pointer": 2,
                    "initialized_data": 1,
                    "memory_ptr": 1,
                    "pointer_array": 1,
                    "pointer_stack": 4,
                    "ptr": 3,
                    "ptr_array": 1,
                    "result": 1,
                    "stack_pointer": 12,
                    "stack_ptr": 1
                },
                "puVar2": {
                    "pointer": 23,
                    "pointer1": 1,
                    "pointer_var": 3
                },
                "uVar3": {
                    "address": 1,
                    "adjusted_pointer": 2,
                    "adjusted_value": 1,
                    "aligned_address": 3,
                    "aligned_pointer": 13,
                    "alignment_var": 1,
                    "calculated_offset": 1,
                    "mask": 1,
                    "masked_pointer": 1,
                    "offset": 1,
                    "shifted_pointer_var": 1,
                    "value2": 1
                },
                "update_pointer_and_flag_00000698": {
                    "update_pointer_and_flag": 4
                }
            },
            "called": [
                "FUN_00000930",
                "FUN_00000698",
                "FUN_00000cd0"
            ],
            "calling": [],
            "code": "\nint * initialize_data_structures_00000794(void)\n\n{\n  int result;\n  int counter;\n  undefined4 *pointer;\n  uint aligned_pointer;\n  int loop_counter1;\n  int loop_counter2;\n  int *stack_pointer;\n  \n  get_interrupt_status();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  update_pointer_and_flag(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  counter = 0;\n  DAT_1fff03dc = 0;\n  execute_software_interrupt();\n  aligned_pointer = (int)pointer + counter & 0xfffffffc;\n  stack_pointer = (int *)(aligned_pointer - 4);\n  *stack_pointer = 0x77777777;\n  if (((uint)stack_pointer & 7) != 0) {\n    stack_pointer = (int *)(aligned_pointer - 8);\n    *stack_pointer = 0x88888888;\n  }\n  stack_pointer[-1] = 0x1000000;\n  stack_pointer[-2] = counter << 0xd;\n  stack_pointer[-3] = 0x795;\n  stack_pointer = stack_pointer + -4;\n  *stack_pointer = 0;\n  for (loop_counter2 = 3; 0 < loop_counter2; loop_counter2 = loop_counter2 + -1) {\n    stack_pointer = stack_pointer + -1;\n    *stack_pointer = loop_counter2;\n  }\n  stack_pointer = stack_pointer + -1;\n  *stack_pointer = result;\n  for (loop_counter1 = 0xb; 3 < loop_counter1; loop_counter1 = loop_counter1 + -1) {\n    stack_pointer = stack_pointer + -1;\n    *stack_pointer = loop_counter1;\n  }\n  stack_pointer[-1] = -3;\n  return stack_pointer + -1;\n}\n\n",
            "current_name": "initialize_data_structures_00000794",
            "entrypoint": "0x00000794",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000794": "initialize_data_structures_00000794",
                "execute_software_interrupt_00000930": "execute_software_interrupt",
                "extraout_r1": "result",
                "get_irq_interrupt_status_00000cd0": "get_interrupt_status",
                "iStack_18": "loop_counter2",
                "iStack_1c": "loop_counter1",
                "iVar1": "counter",
                "piStack_14": "stack_pointer",
                "puVar2": "pointer",
                "uVar3": "aligned_pointer",
                "update_pointer_and_flag_00000698": "update_pointer_and_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000007dc": {
            "additional_data": {
                "FUN_000007dc": {
                    "allocate_memory": 1,
                    "initialize_array": 1,
                    "initialize_data": 2,
                    "initialize_memory": 24,
                    "initialize_memory_block": 3
                },
                "local_10": {
                    "count1": 1,
                    "count2": 2,
                    "countdown": 1,
                    "counter2": 6,
                    "counter_2": 1,
                    "i": 2,
                    "inner_loop_index": 1,
                    "j": 7,
                    "loop_counter": 1,
                    "loop_counter2": 5,
                    "loop_var": 1,
                    "loop_variable2": 3
                },
                "local_14": {
                    "count1": 2,
                    "count2": 1,
                    "counter": 3,
                    "counter1": 6,
                    "counter_1": 1,
                    "i": 7,
                    "iterator": 1,
                    "j": 1,
                    "loop_counter": 2,
                    "loop_counter1": 3,
                    "loop_variable1": 3,
                    "outer_loop_index": 1
                },
                "local_4": {
                    "constant": 1,
                    "loop_var": 1
                },
                "local_c": {
                    "array_ptr": 1,
                    "current_pointer": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "mem_pointer": 1,
                    "mem_ptr": 3,
                    "memory": 1,
                    "memory_block": 2,
                    "memory_pointer": 2,
                    "memory_ptr": 2,
                    "pointer": 1,
                    "ptr": 14,
                    "ptr1": 1
                },
                "param_1": {
                    "arg1": 5,
                    "init_value": 1,
                    "initial_value": 1,
                    "input": 2,
                    "input1": 2,
                    "input_1": 1,
                    "input_param": 1,
                    "input_value": 3,
                    "param": 2,
                    "param1": 8,
                    "pointer": 1,
                    "ptr": 2,
                    "ptr_to_value": 1,
                    "value": 1
                },
                "param_2": {
                    "arg2": 5,
                    "counter": 1,
                    "initial_value": 1,
                    "input2": 2,
                    "input_2": 1,
                    "input_value": 1,
                    "param2": 8,
                    "parameter2": 1,
                    "size": 2,
                    "value": 7,
                    "value_param": 1,
                    "value_to_set": 1
                },
                "param_3": {
                    "arg3": 5,
                    "input3": 1,
                    "num_words": 1,
                    "offset": 4,
                    "offset1": 3,
                    "offset_param": 1,
                    "param3": 7,
                    "parameter3": 1,
                    "size": 2,
                    "size1": 4,
                    "start_address": 1,
                    "value_a": 1
                },
                "param_4": {
                    "alignment": 3,
                    "arg4": 5,
                    "base_address": 1,
                    "base_param": 1,
                    "buffer_size": 1,
                    "input4": 1,
                    "offset2": 3,
                    "param4": 7,
                    "parameter4": 1,
                    "size": 3,
                    "size2": 4,
                    "value_b": 1
                },
                "uVar1": {
                    "adjusted_size": 3,
                    "aligned_address": 1,
                    "aligned_offset": 1,
                    "aligned_param4": 1,
                    "aligned_size": 14,
                    "alignment_size": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000010d4"
            ],
            "code": "\nint * initialize_memory_block_000007dc(undefined4 param1,int param2,int param3,int param4)\n\n{\n  uint aligned_size;\n  int i;\n  int j;\n  int *ptr;\n  \n  aligned_size = param4 + param3 & 0xfffffffc;\n  ptr = (int *)(aligned_size - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(aligned_size - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = param1;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (j = 3; 0 < j; j = j + -1) {\n    ptr = ptr + -1;\n    *ptr = j;\n  }\n  ptr = ptr + -1;\n  *ptr = param2;\n  for (i = 0xb; 3 < i; i = i + -1) {\n    ptr = ptr + -1;\n    *ptr = i;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "current_name": "initialize_memory_block_000007dc",
            "entrypoint": "0x000007dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000007dc": "initialize_memory_block_000007dc",
                "local_10": "j",
                "local_14": "i",
                "local_c": "ptr",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000008b8": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "array_end": 1,
                    "array_end_address": 1,
                    "rel_array_end": 1
                },
                "FUN_000008b8": {
                    "calculate_array_offset": 2,
                    "calculate_array_size": 1,
                    "calculate_num_relocations": 1,
                    "calculate_offset": 2,
                    "calculate_relative_offset": 1,
                    "calculate_relocation_offset": 2,
                    "calculate_remaining_count": 1,
                    "calculate_remaining_offset": 1,
                    "count_elf_rel_entries": 1,
                    "count_elf_relocations": 1,
                    "count_relocations": 1,
                    "find_array_offset": 1,
                    "find_last_offset": 4,
                    "find_last_positive_offset": 1,
                    "find_last_reloc_offset": 1,
                    "get_array_size": 1,
                    "get_offset": 1,
                    "get_offset_difference": 1,
                    "get_relative_offset": 1,
                    "get_relocation_offset": 4,
                    "get_remaining_array_size": 1,
                    "get_remaining_relocations": 1
                },
                "local_c": {
                    "current_entry": 3,
                    "current_rel": 3,
                    "current_rel_entry": 3,
                    "current_relocation": 1,
                    "current_relocation_entry": 1,
                    "rel_entry": 9,
                    "rel_offset_ptr": 1,
                    "rel_pointer": 2,
                    "rel_ptr": 1,
                    "rel_table_entry": 1,
                    "reloc_entry": 1,
                    "relocation_entry": 5
                }
            },
            "called": [],
            "calling": [
                "FUN_0000211c"
            ],
            "code": "\nint get_remaining_array_size_000008b8(void)\n\n{\n  Elf32_Rel *rel_entry;\n  \n  for (rel_entry = (Elf32_Rel *)&DAT_1fff0000;\n      (rel_entry->r_offset == 0xe7fee7fe && (rel_entry < array_end_address));\n      rel_entry = (Elf32_Rel *)&rel_entry->r_info) {\n  }\n  return ((int)array_end_address - (int)rel_entry >> 2) << 2;\n}\n\n",
            "current_name": "get_remaining_array_size_000008b8",
            "entrypoint": "0x000008b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "array_end_address",
                "FUN_000008b8": "get_remaining_array_size_000008b8",
                "local_c": "rel_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000900": {
            "additional_data": {
                "FUN_00000900": {
                    "get_main_stack_pointer": 16,
                    "get_main_stack_pointer_wrapper": 1,
                    "get_stack_pointer": 13,
                    "obtain_main_stack_pointer": 1
                },
                "uVar1": {
                    "main_stack_pointer": 17,
                    "stack_pointer": 14
                }
            },
            "called": [],
            "calling": [
                "FUN_0000211c"
            ],
            "code": "\nundefined4 get_main_stack_pointer_wrapper_00000900(void)\n\n{\n  undefined4 main_stack_pointer;\n  \n  main_stack_pointer = getMainStackPointer();\n  return main_stack_pointer;\n}\n\n",
            "current_name": "get_main_stack_pointer_wrapper_00000900",
            "entrypoint": "0x00000900",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_wrapper_00000900",
                "uVar1": "main_stack_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000091c": {
            "additional_data": {
                "": {
                    "": 1
                },
                "0x1fff0000": {
                    "base_address": 2,
                    "constant_value": 1,
                    "magic_number": 1,
                    "memory_base_address": 1
                },
                "FUN_0000091c": {
                    "get_base_address": 7,
                    "get_constant_value": 1,
                    "get_initial_value": 2,
                    "get_magic_number": 3,
                    "get_mask_value": 1,
                    "get_masked_memory_address": 1,
                    "get_maximum_value": 1,
                    "get_memory_address": 10,
                    "get_memory_offset": 1,
                    "get_memory_size": 1,
                    "get_memory_value": 1,
                    "get_return_value": 1,
                    "get_upper_limit": 1
                },
                "return": {
                    "base_address": 1
                },
                "undefined4": {
                    "uint32": 4,
                    "uint32_t": 12,
                    "unsigned_return_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0000211c"
            ],
            "code": "\nuint32_t get_masked_memory_address_0000091c(void)\n\n{\n  base_address 0x1fff0000;\n}\n\n",
            "current_name": "get_masked_memory_address_0000091c",
            "entrypoint": "0x0000091c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000091c": "get_masked_memory_address_0000091c",
                "return": "base_address",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000930": {
            "additional_data": {
                "FUN_00000930": {
                    "check_irq_interrupts_and_trigger_interrupt": 1,
                    "continuous_interrupt": 1,
                    "continuous_interrupt_handling": 1,
                    "endless_loop": 1,
                    "execute_infinite_loop": 3,
                    "execute_infinite_loop_with_interrupts": 1,
                    "execute_interrupt_and_loop": 1,
                    "execute_interrupt_handler": 3,
                    "execute_interruptible_loop": 1,
                    "execute_software_interrupt": 8,
                    "handle_irq_interrupt": 1,
                    "infinite_loop": 1,
                    "main_loop": 1,
                    "perform_interrupt_and_wait": 2,
                    "perform_software_interrupt": 3,
                    "process_interrupt": 1,
                    "run_infinite_loop": 1
                },
                "PTR_check_irq_interrupts_enabled_00000cf0": {
                    "irq_interrupts_enabled": 1
                },
                "check_irq_interrupts_enabled_00000cf0": {
                    "check_interrupts": 1,
                    "check_interrupts_enabled": 9,
                    "check_irq_interrupts": 1,
                    "check_irq_interrupts_enabled": 16,
                    "ensure_interrupts_enabled": 1
                },
                "software_interrupt": {
                    "trigger_interrupt": 10,
                    "trigger_soft_interrupt": 1,
                    "trigger_software_interrupt": 19
                }
            },
            "called": [
                "FUN_00000cf0"
            ],
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "code": "\nvoid execute_software_interrupt_00000930(void)\n\n{\n  check_irq_interrupts_enabled();\n  trigger_software_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "execute_software_interrupt_00000930",
            "entrypoint": "0x00000930",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000930": "execute_software_interrupt_00000930",
                "check_irq_interrupts_enabled_00000cf0": "check_irq_interrupts_enabled",
                "software_interrupt": "trigger_software_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000093c": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_e000ed04": {
                    "register_value": 1
                },
                "FUN_0000093c": {
                    "enable_interrupt": 3,
                    "enable_memory_protection": 2,
                    "set_bit_in_register": 4,
                    "set_e000ed04_bit": 2,
                    "set_feature_flag": 1,
                    "set_flag": 4,
                    "set_flag_in_control_register": 1,
                    "set_flag_in_ed04": 1,
                    "set_flag_in_register": 2,
                    "set_flag_in_status_register": 1,
                    "set_flag_on_dat_e000ed04": 1,
                    "set_high_bit_in_register": 1,
                    "set_memory_flag": 3,
                    "set_memory_protection": 2,
                    "set_memory_protection_flag": 3
                },
                "_DAT_e000ed04": {
                    "control_register": 1,
                    "dat_flag": 1,
                    "feature_flag": 1,
                    "flag": 3,
                    "flag_ed04": 1,
                    "flag_register": 1,
                    "interrupt_control_register": 2,
                    "interrupt_flags": 1,
                    "memory_flag": 2,
                    "memory_protection_flag": 3,
                    "memory_protection_register": 4,
                    "register": 1,
                    "register_flags": 1,
                    "register_value": 5,
                    "status_register": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00002434",
                "FUN_00001348",
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00000738"
            ],
            "code": "\n\n\nvoid set_memory_protection_flag_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "current_name": "set_memory_protection_flag_0000093c",
            "entrypoint": "0x0000093c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000093c": "set_memory_protection_flag_0000093c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000990": {
            "called": [],
            "calling": [
                "entry"
            ],
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00000990",
            "entrypoint": "0x00000990",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00000a30": {
            "additional_data": {
                "FUN_00000a30": {
                    "calculate_panic_handler_address": 1,
                    "get_nmi_handler_address": 1,
                    "get_panic_stack_address": 1,
                    "get_return_address": 1,
                    "get_stack_pointer": 1,
                    "handle_kernel_panic": 1,
                    "handle_nmi": 15,
                    "handle_nmi_exception": 7,
                    "handle_nmi_fault": 1,
                    "handle_non_maskable_interrupt": 1,
                    "handle_panic_and_return_pointer": 1
                },
                "PTR_stack0_e000ffe0": {
                    "stack_pointer": 1
                },
                "handle_kernel_panic_00000f04": {
                    "handle_kernel_panic": 2,
                    "handle_panic": 1,
                    "panic_handler": 1,
                    "report_panic": 2,
                    "trigger_kernel_panic": 1
                },
                "in_r3": {
                    "arg": 1,
                    "base_address": 1,
                    "cpu_context": 1,
                    "exception_context": 2,
                    "exception_flag": 1,
                    "exception_info": 2,
                    "fault_address": 1,
                    "input": 1,
                    "input_param": 1,
                    "input_pointer": 1,
                    "input_register": 1,
                    "input_value": 1,
                    "interrupt_handler": 1,
                    "kernel_panic_code": 2,
                    "nmi_data": 1,
                    "nmi_parameter": 1,
                    "offset": 3,
                    "panic_handler_struct_address": 1,
                    "param1": 1,
                    "parameter": 1,
                    "register_value": 4,
                    "stack_offset": 2
                },
                "stack0xe000ffe0": {
                    "exception_stack": 1,
                    "panic_stack_base": 1,
                    "stack": 1,
                    "stack_base": 5,
                    "stack_base_address": 1,
                    "stack_buffer": 1,
                    "stack_data": 1,
                    "stack_pointer": 2,
                    "stack_ptr": 1
                }
            },
            "called": [
                "FUN_00000f04"
            ],
            "calling": [],
            "code": "\nundefined * handle_nmi_exception_00000a30(void)\n\n{\n  int register_value;\n  \n  report_panic(4,\"NMI HANDLER\");\n  return &stack_base + -*(int *)(register_value + 0x4c);\n}\n\n",
            "current_name": "handle_nmi_exception_00000a30",
            "entrypoint": "0x00000a30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000a30": "handle_nmi_exception_00000a30",
                "handle_kernel_panic_00000f04": "report_panic",
                "in_r3": "register_value",
                "stack0xe000ffe0": "stack_base"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "additional_data": {
                "FUN_00000cc0": {
                    "disable_and_return_irq_interrupts": 1,
                    "disable_interrupts": 1,
                    "disable_ir_qand_return_interrupt_status": 1,
                    "disable_ir_qand_return_irq_status": 1,
                    "disable_ir_qinterrupt_and_return_status": 1,
                    "disable_ir_qinterrupts_and_check_ir_qinterrupt_state": 1,
                    "disable_ir_qinterrupts_and_get_ir_qinterrupts_status": 2,
                    "disable_ir_qinterrupts_and_get_irq_interrupts_enabled_status": 1,
                    "disable_ir_qinterrupts_and_return_interrupt_status": 1,
                    "disable_ir_qinterrupts_and_return_irq_state": 3,
                    "disable_ir_qinterrupts_and_return_irq_status": 1,
                    "disable_ir_qinterrupts_and_return_status": 1,
                    "disable_irq_and_ret_irq_state": 1,
                    "disable_irq_and_return_irq_status": 1,
                    "disable_irq_interrupts_and_return_current_mode": 1,
                    "disable_irq_interrupts_and_return_enable_status": 1,
                    "disable_irq_interrupts_and_return_irq_state": 1,
                    "disable_irq_interrupts_and_return_irq_status": 1,
                    "disable_irq_interrupts_and_return_status": 1,
                    "get_ir_qinterrupt_state": 1,
                    "get_ir_qinterrupts_status": 1,
                    "get_irq_interrupts_status": 1,
                    "handle_and_disable_interrupts": 1,
                    "handle_and_disable_irq_interrupts": 1,
                    "handle_interrupts": 1,
                    "handle_irq_interrupts": 1,
                    "handle_panic_and_disable_irq": 1,
                    "interrupt_status": 1
                },
                "bVar1": {
                    "is_current_mode_privileged": 7,
                    "is_privileged": 6,
                    "is_privileged_mode": 16
                },
                "disableIRQinterrupts": {
                    "disable_irq_interrupts": 1
                },
                "handle_kernel_panic_00000f04": {
                    "handle_kernel_panic": 1
                },
                "isCurrentModePrivileged": {
                    "check_current_mode_privilege": 1,
                    "is_current_mode_privileged": 2,
                    "is_privileged_mode": 1
                },
                "isIRQinterruptsEnabled": {
                    "are_ir_qinterrupts_enabled": 1,
                    "check_irq_interrupts_enabled": 1,
                    "is_ir_qinterrupts_enabled": 1,
                    "is_irq_interrupts_enabled": 1
                },
                "uVar2": {
                    "are_interrupts_enabled": 1,
                    "current_irq_state": 1,
                    "interrupt_state": 1,
                    "interrupt_status": 2,
                    "interrupts_enabled": 4,
                    "interrupts_enabled_status": 3,
                    "ir_qinterrupts_status": 1,
                    "irq_interrupt_state": 1,
                    "irq_interrupts_enabled": 1,
                    "irq_status": 3,
                    "is_ir_qenabled": 1,
                    "is_ir_qinterrupts_enabled": 3,
                    "is_ir_qinterrupts_enabled_result": 1,
                    "is_irq_interrupts_enabled": 4,
                    "is_irq_state_enabled": 1,
                    "status": 1
                }
            },
            "called": [
                "FUN_00000f04"
            ],
            "calling": [
                "FUN_00000dc0"
            ],
            "code": "\nundefined4 disable_ir_qinterrupts_and_get_irq_interrupts_enabled_status_00000cc0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  handle_kernel_panic(10,\"DUMMY HANDLER\");\n  interrupts_enabled = 0;\n  is_privileged_mode = (bool)is_current_mode_privileged();\n  if (is_privileged_mode) {\n    interrupts_enabled = check_irq_interrupts_enabled();\n  }\n  disable_irq_interrupts();\n  return interrupts_enabled;\n}\n\n",
            "current_name": "disable_ir_qinterrupts_and_get_irq_interrupts_enabled_status_00000cc0",
            "entrypoint": "0x00000cc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000cc0": "disable_ir_qinterrupts_and_get_irq_interrupts_enabled_status_00000cc0",
                "bVar1": "is_privileged_mode",
                "disableIRQinterrupts": "disable_irq_interrupts",
                "handle_kernel_panic_00000f04": "handle_kernel_panic",
                "isCurrentModePrivileged": "is_current_mode_privileged",
                "isIRQinterruptsEnabled": "check_irq_interrupts_enabled",
                "uVar2": "interrupts_enabled"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "additional_data": {
                "FUN_00000cd0": {
                    "check_interrupt_status": 6,
                    "check_interrupts_enabled": 1,
                    "check_interrupts_status": 1,
                    "check_ir_qinterrupts": 2,
                    "check_irq_interrupt_status": 1,
                    "check_irq_interrupts": 2,
                    "disable_and_get_interrupt_state": 1,
                    "disable_ir_qinterrupts_if_privileged": 1,
                    "disable_irq_and_check_status": 1,
                    "get_enabled_irq_interrupts": 1,
                    "get_interrupt_enabled_status": 1,
                    "get_interrupt_state": 1,
                    "get_interrupt_status": 8,
                    "get_ir_qinterrupt_status": 1,
                    "get_ir_qinterrupts_status": 1,
                    "get_irq_interrupt_status": 1,
                    "get_irq_interrupts_status": 1
                },
                "bVar1": {
                    "is_current_mode_privileged": 4,
                    "is_mode_privileged": 1,
                    "is_privileged": 2,
                    "is_privileged_mode": 23
                },
                "disableIRQinterrupts": {
                    "disable_interrupts": 1,
                    "disable_irq_interrupts": 1
                },
                "isCurrentModePrivileged": {
                    "check_current_mode_privileged": 1,
                    "check_privileged_mode": 1,
                    "get_current_mode_privilege": 1
                },
                "isIRQinterruptsEnabled": {
                    "are_interrupts_enabled": 1,
                    "check_irq_interrupts_enabled": 2
                },
                "uVar2": {
                    "are_ir_qinterrupts_enabled": 1,
                    "interrupt_enabled": 1,
                    "interrupt_state": 1,
                    "interrupt_status": 12,
                    "interrupts_enabled": 14,
                    "is_enabled_irq_interrupts": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002434",
                "FUN_00000e58",
                "FUN_00001c84",
                "FUN_00000f04",
                "FUN_00000f8c",
                "FUN_00000428",
                "FUN_00000794",
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "code": "\nundefined4 get_irq_interrupt_status_00000cd0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  interrupts_enabled = 0;\n  is_privileged_mode = (bool)check_privileged_mode();\n  if (is_privileged_mode) {\n    interrupts_enabled = check_irq_interrupts_enabled();\n  }\n  disable_irq_interrupts();\n  return interrupts_enabled;\n}\n\n",
            "current_name": "get_irq_interrupt_status_00000cd0",
            "entrypoint": "0x00000cd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000cd0": "get_irq_interrupt_status_00000cd0",
                "bVar1": "is_privileged_mode",
                "disableIRQinterrupts": "disable_irq_interrupts",
                "isCurrentModePrivileged": "check_privileged_mode",
                "isIRQinterruptsEnabled": "check_irq_interrupts_enabled",
                "uVar2": "interrupts_enabled"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "additional_data": {
                "FUN_00000cf0": {
                    "check_interrupt_status": 2,
                    "check_interrupts": 1,
                    "check_interrupts_status": 1,
                    "check_ir_qinterrupt_status": 2,
                    "check_ir_qinterrupts": 3,
                    "check_ir_qinterrupts_enabled": 4,
                    "check_ir_qinterrupts_status": 2,
                    "check_irq_interrupt_status": 2,
                    "check_irq_interrupts": 6,
                    "check_irq_interrupts_enabled": 4,
                    "check_irq_interrupts_status": 1,
                    "get_irq_interrupt_state": 2,
                    "get_irq_interrupt_status": 1
                },
                "bVar1": {
                    "is_current_mode_privileged": 10,
                    "is_mode_privileged": 1,
                    "is_privileged": 2,
                    "is_privileged_mode": 14
                },
                "enableIRQinterrupts": {
                    "enable_interrupts": 1
                },
                "isCurrentModePrivileged": {
                    "check_privileged_mode": 1,
                    "is_current_mode_privileged": 2,
                    "is_privileged_mode": 2
                },
                "isIRQinterruptsEnabled": {
                    "are_irq_interrupts_enabled": 1,
                    "check_interrupts_enabled": 2,
                    "is_interrupts_enabled": 1,
                    "is_ir_qinterrupts_enabled": 1
                },
                "uVar2": {
                    "enabled_interrupts": 1,
                    "interrupt_status": 1,
                    "interrupts_enabled": 18,
                    "interrupts_enabled_status": 1,
                    "ir_qinterrupts_enabled": 1,
                    "is_interrupts_enabled": 3,
                    "is_ir_qinterrupts_enabled": 1,
                    "is_irq_interrupts_enabled": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00000930"
            ],
            "code": "\nundefined4 check_irq_interrupts_enabled_00000cf0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  enable_interrupts();\n  interrupts_enabled = 0;\n  is_privileged_mode = (bool)is_privileged_mode();\n  if (is_privileged_mode) {\n    interrupts_enabled = check_interrupts_enabled();\n  }\n  return interrupts_enabled;\n}\n\n",
            "current_name": "check_irq_interrupts_enabled_00000cf0",
            "entrypoint": "0x00000cf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000cf0": "check_irq_interrupts_enabled_00000cf0",
                "bVar1": "is_privileged_mode",
                "enableIRQinterrupts": "enable_interrupts",
                "isCurrentModePrivileged": "is_privileged_mode",
                "isIRQinterruptsEnabled": "check_interrupts_enabled",
                "uVar2": "interrupts_enabled"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "additional_data": {
                "FUN_00000d0c": {
                    "configure_ir_qinterrupts": 1,
                    "enable_interrupts_based_on_privilege": 1,
                    "enable_interrupts_for_privileged_mode": 1,
                    "enable_interrupts_if_needed": 2,
                    "enable_interrupts_if_privileged": 4,
                    "enable_ir_qinterrupts_if_current_mode_is_privileged": 1,
                    "enable_ir_qinterrupts_if_mode_privileged": 1,
                    "enable_ir_qinterrupts_if_needed": 4,
                    "enable_ir_qinterrupts_if_privileged": 8,
                    "enable_ir_qinterrupts_with_privilege_check": 1,
                    "enable_irq_interrupts_if_needed": 3,
                    "enable_irq_interrupts_if_privileged": 3,
                    "set_interrupt_enable_state": 1
                },
                "bVar1": {
                    "is_privileged": 6,
                    "is_privileged_mode": 15
                },
                "enableIRQinterrupts": {
                    "configure_interrupts": 1,
                    "enable_interrupts": 5,
                    "enable_irq": 1,
                    "enable_irq_interrupts": 1,
                    "set_interrupt_state": 1,
                    "set_ir_qinterrupts_enabled": 1
                },
                "isCurrentModePrivileged": {
                    "check_if_privileged_mode": 2,
                    "check_privilege_mode": 3,
                    "check_privileged_mode": 2
                },
                "param_1": {
                    "configuration": 1,
                    "flags": 2,
                    "input": 1,
                    "input_flag": 1,
                    "input_flags": 1,
                    "input_param": 1,
                    "interrupt_bitmask": 2,
                    "interrupt_flag": 7,
                    "interrupt_flags": 7,
                    "interrupt_mask": 2,
                    "interrupt_number": 2,
                    "interrupt_option": 1,
                    "interrupt_type": 2,
                    "interrupts_flag": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002434",
                "FUN_00001c84",
                "FUN_00000428",
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "code": "\nvoid enable_ir_qinterrupts_if_current_mode_is_privileged_00000d0c(uint interrupt_flags)\n\n{\n  bool is_privileged_mode;\n  \n  is_privileged_mode = (bool)check_privilege_mode();\n  if (is_privileged_mode) {\n    enable_interrupts((interrupt_flags & 1) == 1);\n  }\n  return;\n}\n\n",
            "current_name": "enable_ir_qinterrupts_if_current_mode_is_privileged_00000d0c",
            "entrypoint": "0x00000d0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d0c": "enable_ir_qinterrupts_if_current_mode_is_privileged_00000d0c",
                "bVar1": "is_privileged_mode",
                "enableIRQinterrupts": "enable_interrupts",
                "isCurrentModePrivileged": "check_privilege_mode",
                "param_1": "interrupt_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "additional_data": {
                "FUN_00000d2a": {
                    "get_current_exception_number": 1,
                    "get_exception_number": 30
                },
                "bVar1": {
                    "is_current_mode_privileged": 1,
                    "is_privileged": 5,
                    "is_privileged_mode": 19
                },
                "getCurrentExceptionNumber": {
                    "fetch_current_exception_number": 1,
                    "fetch_exception_number": 3,
                    "get_current_exception": 1,
                    "get_current_exception_number": 1,
                    "get_exception_number": 1
                },
                "isCurrentModePrivileged": {
                    "check_if_current_mode_is_privileged": 1,
                    "check_privileged_mode": 2,
                    "is_current_mode_privileged": 1,
                    "is_privileged_mode": 5
                },
                "uVar2": {
                    "exception_number": 27
                }
            },
            "called": [],
            "calling": [
                "FUN_00000738"
            ],
            "code": "\nuint get_current_exception_number_00000d2a(void)\n\n{\n  bool is_privileged_mode;\n  uint exception_number;\n  \n  exception_number = 0;\n  is_privileged_mode = (bool)is_privileged_mode();\n  if (is_privileged_mode) {\n    exception_number = fetch_exception_number();\n    exception_number = exception_number & 0x1f;\n  }\n  return exception_number;\n}\n\n",
            "current_name": "get_current_exception_number_00000d2a",
            "entrypoint": "0x00000d2a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d2a": "get_current_exception_number_00000d2a",
                "bVar1": "is_privileged_mode",
                "getCurrentExceptionNumber": "fetch_exception_number",
                "isCurrentModePrivileged": "is_privileged_mode",
                "uVar2": "exception_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d44": {
            "additional_data": {
                "0x2000000": {
                    "constant_offset": 1
                },
                "DAT_": {
                    "data_": 1
                },
                "DAT_abcdef12": {
                    "unchanged_dat_variable": 1
                },
                "FUN_00000d44": {
                    "calculate_adjusted_value": 1,
                    "calculate_new_value": 1,
                    "calculate_offset": 20,
                    "calculate_result": 2,
                    "calculate_sum": 1,
                    "calculate_updated_value": 2,
                    "calculate_value": 1,
                    "multiply_and_shift": 2
                },
                "PTR_": {
                    "pointer_": 1
                },
                "PTR_12345678": {
                    "unchanged_ptr_variable": 1
                },
                "param_1": {
                    "address": 4,
                    "base_address": 3,
                    "base_value": 1,
                    "data": 1,
                    "input_value": 20,
                    "offset": 1,
                    "original_value": 1
                },
                "param_2": {
                    "index": 2,
                    "multiplier": 26,
                    "offset": 1,
                    "offset_factor": 1,
                    "value": 1
                },
                "param_3": {
                    "masked_value": 1,
                    "result": 2,
                    "shift_value": 1
                },
                "param_4": {
                    "constant_offset": 1,
                    "shifted_value": 1
                },
                "param_5": {
                    "adjusted_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00000d76"
            ],
            "code": "\nint calculate_offset_00000d44(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "current_name": "calculate_offset_00000d44",
            "entrypoint": "0x00000d44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d76": {
            "additional_data": {
                "FUN_00000d76": {
                    "clear_memory": 18,
                    "clear_offset": 3,
                    "clear_offset_value": 2,
                    "initialize_memory": 2,
                    "initialize_offset": 2,
                    "reset_offset_to_zero": 1,
                    "set_offset_to_zero": 3
                },
                "calculate_offset_00000d44": {
                    "calculate_offset": 3
                },
                "param_1": {
                    "address": 4,
                    "base_address": 3,
                    "function_pointer": 1,
                    "input": 2,
                    "input1": 7,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_pointer": 2,
                    "input_ptr": 1,
                    "offset": 5,
                    "offset_address": 1,
                    "offset_pointer": 1,
                    "source_address": 1
                },
                "param_2": {
                    "additional_param": 1,
                    "destination_address": 1,
                    "flag": 1,
                    "input2": 7,
                    "input_data": 2,
                    "input_value": 1,
                    "offset": 4,
                    "size": 7,
                    "undefined_param": 1,
                    "undefined_value": 1,
                    "value": 5
                },
                "puVar1": {
                    "clear_address": 1,
                    "destination_address": 1,
                    "memory_address": 1,
                    "memory_location": 3,
                    "memory_offset": 1,
                    "memory_pointer": 3,
                    "offset_address": 1,
                    "offset_pointer": 8,
                    "offset_ptr": 3,
                    "output_pointer": 1,
                    "pointer_to_int": 1,
                    "pointer_to_offset": 1,
                    "ptr": 1,
                    "result": 1,
                    "result_pointer": 1,
                    "result_ptr": 1,
                    "target_address": 1,
                    "target_pointer": 1
                }
            },
            "called": [
                "FUN_00000d44"
            ],
            "calling": [
                "FUN_00000d9c"
            ],
            "code": "\nvoid clear_memory_00000d76(undefined4 input1,undefined size)\n\n{\n  undefined4 *offset_pointer;\n  \n  offset_pointer = (undefined4 *)calculate_offset(input1,size);\n  *offset_pointer = 0;\n  return;\n}\n\n",
            "current_name": "clear_memory_00000d76",
            "entrypoint": "0x00000d76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d76": "clear_memory_00000d76",
                "calculate_offset_00000d44": "calculate_offset",
                "param_1": "input1",
                "param_2": "size",
                "puVar1": "offset_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "additional_data": {
                "": {
                    "base_address": 1
                },
                "0x40048040": {
                    "memory_address": 13,
                    "start_address": 1
                },
                "CLR_MEM_ADDR": {
                    "memory_address": 1
                },
                "CLR_MEM_SIZE": {
                    "memory_size": 1
                },
                "FUN_00000d9c": {
                    "clear_memory": 29,
                    "initialize_memory": 2
                },
                "Original_Parameter_1": {
                    "address": 1
                },
                "Original_Parameter_2": {
                    "value": 1
                },
                "Original_Variable_1": {
                    "address_pointer": 1
                },
                "Original_Variable_2": {
                    "value_pointer": 1
                },
                "PTR_clearMemoryPointer": {
                    "clear_memory_pointer": 1
                },
                "clear_memory_00000d76": {
                    "clear_memory": 7,
                    "clear_memory_block": 2,
                    "clear_memory_helper": 3,
                    "clear_memory_location": 1,
                    "clear_memory_region": 1,
                    "clear_memory_segment": 2
                }
            },
            "called": [
                "FUN_00000d76"
            ],
            "calling": [
                "FUN_00000db0"
            ],
            "code": "\nvoid clear_memory_00000d9c(void)\n\n{\n  clear_memory_00000d9c(0x40048040,0);\n  return;\n}\n\n",
            "current_name": "clear_memory_00000d9c",
            "entrypoint": "0x00000d9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d9c": "clear_memory_00000d9c",
                "clear_memory_00000d76": "clear_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000db0": {
            "additional_data": {
                "FUN_00000db0": {
                    "initialize_and_clear": 2,
                    "initialize_and_clear_data": 4,
                    "initialize_and_clear_memory": 25
                },
                "FUN_00000dcc": {
                    "initialize_data": 1
                },
                "clear_memory_00000d9c": {
                    "clear_memory": 31
                },
                "initialize_data_00000dcc": {
                    "initialize_data": 30
                }
            },
            "called": [
                "FUN_00000dcc",
                "FUN_00000d9c"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid initialize_and_clear_memory_00000db0(void)\n\n{\n  initialize_data();\n  clear_memory();\n  return;\n}\n\n",
            "current_name": "initialize_and_clear_memory_00000db0",
            "entrypoint": "0x00000db0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000db0": "initialize_and_clear_memory_00000db0",
                "clear_memory_00000d9c": "clear_memory",
                "initialize_data_00000dcc": "initialize_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "additional_data": {
                "FUN_00000dc0": {
                    "disable_and_get_interrupt_status": 1,
                    "disable_and_get_irq_interrupts_enabled_status": 2,
                    "disable_interrupts": 5,
                    "disable_interrupts_and_check_status": 1,
                    "disable_interrupts_and_enable_interrupt_status": 1,
                    "disable_interrupts_and_get_interrupt_status": 1,
                    "disable_interrupts_and_get_interrupts_enabled_status": 1,
                    "disable_interrupts_and_get_irq_interrupts_enabled_status": 1,
                    "disable_interrupts_and_retrieve_interrupt_status": 1,
                    "disable_irq_and_check_status": 1,
                    "disable_irq_interrupts": 6,
                    "disable_irq_interrupts_and_check_irq_interrupts_enabled_status": 1,
                    "disable_irq_interrupts_and_get_irq_interrupts_enabled_status": 1,
                    "disable_irq_interrupts_and_get_status": 6,
                    "disable_irq_interrupts_and_return_status": 1,
                    "disable_irq_interrupts_get_enabled_status": 1
                },
                "disable_ir_qinterrupts_and_get_irq_interrupts_enabled_status_00000cc0": {
                    "disable_and_check_irq_enabled_status": 1,
                    "disable_and_get_enabled_status": 1,
                    "disable_and_get_interrupt_status": 1,
                    "disable_and_get_irq_interrupts_status": 1,
                    "disable_interrupts_and_get_irq_interrupts_enabled_status": 1,
                    "disable_ir_q_interrupts_and_get_irq_interrupts_enabled_status": 1,
                    "disable_irq_and_check_enabled_status": 1,
                    "disable_irq_and_check_status": 1,
                    "disable_irq_and_get_enabled_status": 1,
                    "disable_irq_and_get_irq_enabled_status": 1,
                    "disable_irq_and_get_status": 1,
                    "disable_irq_and_return_status": 1,
                    "disable_irq_interrupts_and_check_irq_interrupts_enabled_status": 1,
                    "disable_irq_interrupts_and_get_enabled_status": 1,
                    "disable_irq_interrupts_and_get_irq_interrupts_enabled_status": 1,
                    "disable_irq_interrupts_and_get_status": 3,
                    "disable_irq_interrupts_get_enabled_status": 1,
                    "disable_qinterrupts_and_get_enabled_status": 1,
                    "disable_qinterrupts_get_enabled_status": 1,
                    "get_enabled_status": 1
                }
            },
            "called": [
                "FUN_00000cc0"
            ],
            "calling": [],
            "code": "\nvoid disable_interrupts_and_get_irq_interrupts_enabled_status_00000dc0(void)\n\n{\n  disable_irq_interrupts_and_get_status();\n  return;\n}\n\n",
            "current_name": "disable_interrupts_and_get_irq_interrupts_enabled_status_00000dc0",
            "entrypoint": "0x00000dc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000dc0": "disable_interrupts_and_get_irq_interrupts_enabled_status_00000dc0",
                "disable_ir_qinterrupts_and_get_irq_interrupts_enabled_status_00000cc0": "disable_irq_interrupts_and_get_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "additional_data": {
                "": {
                    "": 2
                },
                "FUN_00000dcc": {
                    "initialize_addresses": 1,
                    "initialize_data": 15,
                    "initialize_memory": 8,
                    "initialize_registers": 4,
                    "initialize_settings": 1,
                    "initialize_values": 1,
                    "set_initial_values": 1
                },
                "_": {
                    "_": 1
                },
                "_DAT_40052000": {
                    "another_value": 1,
                    "control_byte": 1,
                    "control_register": 1,
                    "data": 1,
                    "data_index": 1,
                    "data_register2": 1,
                    "data_value": 3,
                    "data_value2": 3,
                    "device_code": 1,
                    "flag": 1,
                    "initial_value": 4,
                    "initialized_value2": 1,
                    "memory_address2": 1,
                    "memory_value": 2,
                    "register2": 1,
                    "register_value": 1,
                    "register_value2": 2,
                    "value": 1,
                    "variable2": 1
                },
                "_DAT_4005200e": {
                    "data_address": 2,
                    "data_length": 1,
                    "data_register1": 1,
                    "data_value": 1,
                    "data_value1": 3,
                    "error_code": 1,
                    "initial_value": 1,
                    "initialized_value1": 1,
                    "magic_number": 1,
                    "memory_address": 7,
                    "memory_address1": 1,
                    "memory_value": 1,
                    "register1": 1,
                    "register_value1": 2,
                    "settings_register": 1,
                    "some_constant": 1,
                    "some_value": 1,
                    "variable1": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00000db0"
            ],
            "code": "\n\n\nvoid initialize_data_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "current_name": "initialize_data_00000dcc",
            "entrypoint": "0x00000dcc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000dcc": "initialize_data_00000dcc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000df4": {
            "additional_data": {
                "": {
                    "": 1
                },
                "0": {
                    "arg1": 1,
                    "error_code": 2,
                    "param1": 5,
                    "param_1": 2
                },
                "0x12b5": {
                    "arg3": 1,
                    "error_type": 1,
                    "fault_code": 1,
                    "line_number": 3,
                    "param3": 5,
                    "param_3": 2,
                    "parameter2": 1,
                    "var2": 1,
                    "variable_b": 1
                },
                "0x1c200": {
                    "arg2": 1,
                    "error_code": 1,
                    "fault_address": 1,
                    "file_offset": 1,
                    "file_size": 1,
                    "line_number": 1,
                    "param2": 5,
                    "param_2": 2,
                    "parameter1": 1,
                    "var1": 1,
                    "variable_a": 1
                },
                "0x1fff0204": {
                    "address": 1,
                    "arg4": 1,
                    "error_code": 2,
                    "error_data": 1,
                    "param4": 5,
                    "param_4": 2,
                    "parameter3": 1,
                    "system_state": 1,
                    "var3": 1,
                    "variable_c": 1
                },
                "ARG_PARAMETER_1": {
                    "param1": 1
                },
                "ARG_PARAMETER_2": {
                    "param2": 1
                },
                "ARG_PARAMETER_3": {
                    "param3": 1
                },
                "ARG_PARAMETER_4": {
                    "param4": 1
                },
                "DAT_0000012b5": {
                    "error_code": 1,
                    "parameter2": 1
                },
                "DAT_000012b5": {
                    "assertion_param3": 1
                },
                "DAT_00001c200": {
                    "assertion_param2": 1,
                    "message_buffer": 1,
                    "parameter1": 1
                },
                "DAT_1fff0204": {
                    "assertion_param4": 1,
                    "parameter3": 1,
                    "register_data": 1
                },
                "FUN_00000df4": {
                    "handle_assertion_failure": 31
                },
                "NULL": {
                    "ptr_null": 1
                },
                "None": {
                    "": 1
                },
                "PTR_000012b5": {
                    "error_code": 1
                },
                "PTR_000013b8": {
                    "assertion": 1,
                    "assertion_data": 1,
                    "assertion_param1": 1,
                    "handle_exception": 1
                },
                "PTR_00001c200": {
                    "handle": 1
                },
                "PTR_1fff0204": {
                    "extra_data": 1
                },
                "arg1": {
                    "param1": 1
                },
                "arg2": {
                    "param2": 1
                },
                "arg3": {
                    "param3": 1
                },
                "arg4": {
                    "param4": 1
                },
                "handle_assertion_failure_000013b8": {
                    "assertion_failure_handler": 2,
                    "handle_assertion_failure": 8,
                    "handle_assertion_failure_fn": 1
                },
                "original_variable_name_1": {
                    "error_type": 1
                },
                "original_variable_name_2": {
                    "message": 1
                },
                "original_variable_name_3": {
                    "flag": 1
                },
                "param_1": {
                    "assertion_type": 1
                },
                "param_2": {
                    "error_code": 1
                },
                "param_3": {
                    "line_number": 1
                },
                "param_4": {
                    "additional_info": 1
                },
                "parameter_1": {
                    "error_code": 1
                },
                "parameter_2": {
                    "memory_address": 1
                },
                "parameter_3": {
                    "line_number": 1
                },
                "parameter_4": {
                    "data": 1
                },
                "stackParam_1": {
                    "param1": 1
                },
                "stackParam_2": {
                    "param2": 1
                },
                "stackParam_3": {
                    "param3": 1
                },
                "stackVar_1": {
                    "variable1": 1
                }
            },
            "called": [
                "FUN_000013b8"
            ],
            "calling": [
                "FUN_00000410"
            ],
            "code": "\nvoid handle_assertion_failure_00000df4(void)\n\n{\n  handle_assertion_failure_00000df4(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "current_name": "handle_assertion_failure_00000df4",
            "entrypoint": "0x00000df4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000df4": "handle_assertion_failure_00000df4",
                "handle_assertion_failure_000013b8": "handle_assertion_failure"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000e14": {
            "additional_data": {
                "FUN_00000e14": {
                    "copy_and_increment_elements": 25,
                    "copy_and_increment_loop": 1,
                    "copy_array_and_increment_elements": 1,
                    "copy_bytes_and_increment": 1,
                    "copy_elements_and_increment": 2,
                    "copy_elements_and_increment_loop": 1
                },
                "param_1": {
                    "input_address": 1,
                    "input_array": 4,
                    "input_array_pointer": 1,
                    "source": 4,
                    "source_array": 19,
                    "source_pointer": 1,
                    "src_array": 1
                },
                "param_2": {
                    "array_length": 1,
                    "array_size": 1,
                    "dest_array": 1,
                    "destination": 4,
                    "destination_array": 18,
                    "destination_pointer": 1,
                    "output_address": 1,
                    "output_array": 2,
                    "output_array_pointer": 1,
                    "target_array": 1
                },
                "uVar1": {
                    "num_copied_elements": 1,
                    "result": 8,
                    "return_value": 1,
                    "status": 1
                }
            },
            "called": [
                "FUN_000012e2"
            ],
            "calling": [
                "FUN_00000490"
            ],
            "code": "\nundefined4 copy_array_and_increment_elements_00000e14(undefined4 source_array,undefined4 destination_array)\n\n{\n  undefined4 result;\n  \n  result = copy_and_increment_elements_loop_000012e2(0x1fff0204,source_array,destination_array);\n  return result;\n}\n\n",
            "current_name": "copy_array_and_increment_elements_00000e14",
            "entrypoint": "0x00000e14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000e14": "copy_array_and_increment_elements_00000e14",
                "param_1": "source_array",
                "param_2": "destination_array",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000e38": {
            "additional_data": {
                "FUN_00000e38": {
                    "copy_and_return_data": 1,
                    "copy_data_to_memory": 25,
                    "copy_data_to_memory_and_return": 1,
                    "copy_memory_data": 1,
                    "copy_param_to_memory": 2
                },
                "param_1": {
                    "destination": 1,
                    "source": 4,
                    "source_address": 17,
                    "source_data": 7,
                    "source_pointer": 2
                },
                "param_2": {
                    "destination": 4,
                    "destination_address": 16,
                    "destination_data": 6,
                    "destination_pointer": 2,
                    "destination_ptr": 1,
                    "source": 1,
                    "target_address": 1
                }
            },
            "called": [
                "FUN_000015d0"
            ],
            "calling": [
                "FUN_00004dee"
            ],
            "code": "\nundefined4 copy_data_to_memory_and_return_00000e38(undefined4 source_address,undefined4 destination_address)\n\n{\n  copy_data_to_memory_000015d0(0,source_address,destination_address);\n  return destination_address;\n}\n\n",
            "current_name": "copy_data_to_memory_and_return_00000e38",
            "entrypoint": "0x00000e38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000e38": "copy_data_to_memory_and_return_00000e38",
                "param_1": "source_address",
                "param_2": "destination_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000e58": {
            "additional_data": {
                "FUN_00000e58": {
                    "infinite_loop": 24,
                    "infinite_loop_until_interrupt": 1,
                    "infinite_loop_with_interrupt_handling": 1,
                    "loop_forever": 1,
                    "run_forever_loop": 1,
                    "run_infinite_loop": 2,
                    "wait_for_interrupt": 1
                },
                "do": {
                    "loop": 1
                },
                "get_irq_interrupt_status_00000cd0": {
                    "get_interrupt_status": 28,
                    "get_irq_interrupt_status": 2,
                    "get_irq_status": 1
                }
            },
            "called": [
                "FUN_00000cd0"
            ],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nvoid run_infinite_loop_00000e58(void)\n\n{\n  get_interrupt_status();\n  loop {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "run_infinite_loop_00000e58",
            "entrypoint": "0x00000e58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000e58": "run_infinite_loop_00000e58",
                "do": "loop",
                "get_irq_interrupt_status_00000cd0": "get_interrupt_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000e64": {
            "additional_data": {
                "FUN_00000e64": {
                    "configure_and_initialize_system": 1,
                    "configure_system": 6,
                    "initialize_and_configure": 1,
                    "initialize_and_configure_devices": 1,
                    "initialize_and_configure_system": 6,
                    "initialize_system": 10,
                    "initialize_system_and_update_values": 5,
                    "initialize_system_config": 1
                },
                "_DAT_40048038": {
                    "config_register": 1,
                    "configuration_flags": 1,
                    "configuration_register": 2,
                    "device_control_register": 1,
                    "flag_register": 1,
                    "memory_address": 1,
                    "memory_flag": 1,
                    "register1": 1,
                    "register_a": 1,
                    "register_flag": 1,
                    "register_flags": 1,
                    "some_register": 1,
                    "system_configuration": 1,
                    "system_configuration_flag": 1,
                    "system_flags": 3
                },
                "_DAT_40049048": {
                    "another_register": 1,
                    "config_register": 1,
                    "configuration_flag": 1,
                    "configuration_flags": 1,
                    "control_register": 1,
                    "interrupt_control_register": 1,
                    "memory_access_register": 1,
                    "memory_address": 1,
                    "memory_address2": 1,
                    "memory_address_register": 1,
                    "memory_config": 1,
                    "memory_configuration": 1,
                    "memory_control_register": 1,
                    "register2": 1,
                    "register_b": 1,
                    "system_config": 1,
                    "system_configuration": 2
                },
                "initialize_and_configure_system_00001274": {
                    "configure_system": 2,
                    "initialize_and_configure_system": 15,
                    "initialize_system": 8
                },
                "set_bit_in_memory_address_00001ff6": {
                    "set_bit_in_memory": 3,
                    "set_bit_in_memory_address": 27,
                    "set_memory_address_bit": 1
                },
                "update_extracted_value_00001eea": {
                    "update_configuration_value": 1,
                    "update_extracted_value": 25,
                    "update_value": 5
                }
            },
            "called": [
                "FUN_00001274",
                "FUN_00001ff6",
                "FUN_00001eea"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid configure_and_initialize_system_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initialize_and_configure_system();\n  update_extracted_value(0x2056,0x80);\n  update_extracted_value(0x511a,0x80);\n  update_extracted_value(0x2055,0x80);\n  set_bit_in_memory_address(0x2056);\n  set_bit_in_memory_address(0x511a);\n  set_bit_in_memory_address(0x2055);\n  return;\n}\n\n",
            "current_name": "configure_and_initialize_system_00000e64",
            "entrypoint": "0x00000e64",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000e64": "configure_and_initialize_system_00000e64",
                "initialize_and_configure_system_00001274": "initialize_and_configure_system",
                "set_bit_in_memory_address_00001ff6": "set_bit_in_memory_address",
                "update_extracted_value_00001eea": "update_extracted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "additional_data": {
                "FUNC_00004c84": {
                    "process_data": 3
                },
                "FUN_00000ed8": {
                    "initialize_data": 27,
                    "initialize_data_structures": 1,
                    "read_data_from_memory": 1
                },
                "in_lr": {
                    "initial_link_register": 1,
                    "initial_return_address": 1,
                    "input_link_register": 2,
                    "input_register": 1,
                    "internal_link_register": 1,
                    "link_register": 13,
                    "return_address": 8,
                    "saved_link_register": 2,
                    "saved_return_address": 1
                }
            },
            "called": [
                "FUN_00004c84"
            ],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nvoid initialize_data_structures_00000ed8(void)\n\n{\n  undefined4 link_register;\n  \n  process_elf_data_00004c84(&DAT_00006f58,link_register);\n  return;\n}\n\n",
            "code_backup": "\nvoid FUN_00000ed8(void)\n\n{\n  undefined4 in_lr;\n  \n  FUNC_00004c84(&DAT_00006f58,in_lr);\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00000ed8",
            "entrypoint": "0x00000ed8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000ed8": "initialize_data_structures_00000ed8",
                "in_lr": "link_register"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "called": [],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00000ef8",
            "entrypoint": "0x00000ef8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00000f04": {
            "additional_data": {
                "0xf4d": {
                    "recovered_jumptable": 1
                },
                "FUNC_00000ef8": {
                    "execute_function": 1,
                    "perform_cleanup": 1,
                    "perform_initialization": 1,
                    "some_function": 1
                },
                "FUNC_00002400": {
                    "another_function": 1,
                    "cleanup_after_execution": 1,
                    "cleanup_resources": 1,
                    "execute_another_function": 1
                },
                "FUN_00000f04": {
                    "handle_kernel_panic": 22,
                    "handle_panic": 2,
                    "handle_panic_and_halt": 1,
                    "kernel_panic_handler": 1,
                    "panic_and_halt": 1,
                    "panic_handler": 1,
                    "perform_kernel_panic": 1,
                    "process_kernel_panic": 1,
                    "run_kernel": 1
                },
                "UNRECOVERED_JUMPTABLE": {
                    "jump_table": 6,
                    "jumptable": 1,
                    "jumptable_func": 1,
                    "recovery_jumptable": 1
                },
                "get_irq_interrupt_status_00000cd0": {
                    "get_interrupt_status": 4
                },
                "initialize_data_structures_00000ed8": {
                    "initialize_data_structures": 3
                },
                "initialize_system_000023a4": {
                    "initialize_system": 3,
                    "prepare_system": 1
                },
                "local_10": {
                    "error_message_length": 2,
                    "error_message_ptr": 1,
                    "formatted_message": 1,
                    "info_param": 1,
                    "kernel_msg": 1,
                    "kernel_version_local": 1,
                    "message": 4,
                    "message_address": 1,
                    "message_param": 3,
                    "message_pointer": 1,
                    "panic_data_copy": 1,
                    "panic_info_copy": 1,
                    "panic_message_copy": 5,
                    "panic_message_len": 1,
                    "panic_message_local": 1,
                    "panic_message_param": 2,
                    "panic_message_tmp": 1,
                    "panic_msg": 1,
                    "param_2_copy": 1,
                    "version": 1
                },
                "local_9": {
                    "code": 1,
                    "code_buffer": 1,
                    "error_code_char": 1,
                    "error_code_copy": 1,
                    "error_message_type": 1,
                    "error_type": 1,
                    "panic_lvl": 1,
                    "panic_reason_copy": 2,
                    "panic_reason_local": 1,
                    "panic_reason_param": 2,
                    "panic_signal_copy": 1,
                    "panic_trigger_tmp": 1,
                    "panic_type": 1,
                    "panic_type_char": 1,
                    "panic_type_copy": 4,
                    "panic_type_local": 1,
                    "panic_type_temp": 1,
                    "reason_param": 2,
                    "signal": 1,
                    "status": 1,
                    "trigger_value": 1,
                    "type": 3,
                    "type_param": 1
                },
                "param_1": {
                    "error_code": 5,
                    "kernel_status": 1,
                    "panic_code": 2,
                    "panic_level": 1,
                    "panic_reason": 7,
                    "panic_signal": 2,
                    "panic_trigger": 2,
                    "panic_type": 11
                },
                "param_2": {
                    "additional_info": 1,
                    "error_message": 3,
                    "kernel_message": 1,
                    "kernel_version": 1,
                    "message": 2,
                    "panic_data": 1,
                    "panic_info": 1,
                    "panic_message": 20,
                    "version_number": 1
                },
                "print_process_stack_information_0000211c": {
                    "print_stack_information": 3
                },
                "process_elf_data_00004c84": {
                    "log_message": 1,
                    "print_elf_data": 1,
                    "process_elf_data": 1
                },
                "run_infinite_loop_00000e58": {
                    "execute_infinite_loop": 1,
                    "run_infinite_loop": 3
                },
                "uStack_18": {
                    "stack_param": 1,
                    "stack_pointer": 1,
                    "stack_value": 1,
                    "stack_var": 1,
                    "stack_variable": 3,
                    "stack_variable_1": 1,
                    "temp_stack": 1,
                    "temp_var": 1
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00000ef8",
                "FUN_00002400",
                "FUN_00000ed8",
                "FUN_00000e58",
                "FUN_000023a4",
                "FUN_0000211c",
                "FUN_00000cd0"
            ],
            "calling": [
                "FUN_000013b8",
                "FUN_00000a30",
                "FUN_00000fec",
                "FUN_00001034",
                "FUN_00000cc0",
                "FUN_00003ec4"
            ],
            "code": "\nvoid handle_kernel_panic_00000f04(char panic_type,undefined4 panic_message)\n\n{\n  undefined4 stack_variable;\n  code *jump_table;\n  undefined4 panic_message_copy;\n  char panic_type_copy;\n  \n  panic_message_copy = panic_message;\n  panic_type_copy = panic_type;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panic_type == '\\x03') {\n      initialize_data_structures();\n    }\n    process_elf_data(\"*** RIOT kernel panic:\\n%s\\n\\n\",panic_message_copy);\n    print_stack_information();\n    process_elf_data(&DAT_00006f78);\n    process_elf_data(\"*** halted.\\n\\n\");\n  }\n  get_interrupt_status();\n  FUNC_00000ef8();\n  jump_table = (code *)0xf4d;\n  run_infinite_loop();\n  stack_variable = (int)&stack_variable + 1;\n  FUNC_00002400();\n  process_elf_data(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  initialize_system();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "handle_kernel_panic_00000f04",
            "entrypoint": "0x00000f04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "get_irq_interrupt_status_00000cd0": "get_interrupt_status",
                "initialize_data_structures_00000ed8": "initialize_data_structures",
                "initialize_system_000023a4": "initialize_system",
                "local_10": "panic_message_copy",
                "local_9": "panic_type_copy",
                "param_1": "panic_type",
                "param_2": "panic_message",
                "print_process_stack_information_0000211c": "print_stack_information",
                "process_elf_data_00004c84": "process_elf_data",
                "run_infinite_loop_00000e58": "run_infinite_loop",
                "uStack_18": "stack_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "additional_data": {
                "DAT_1fff046c": {
                    "memory_block_2": 1
                },
                "DAT_1fff0a6c": {
                    "memory_block_1": 1
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "elf_relocation_array": 1
                },
                "FUN_00000f8c": {
                    "initialize_and_configure_interrupts": 3,
                    "initialize_and_execute": 1,
                    "initialize_and_handle_interrupts": 1,
                    "initialize_interrupt_handler": 1,
                    "initialize_interrupt_handling": 2,
                    "initialize_interrupt_status": 1,
                    "initialize_interrupts": 7,
                    "initialize_memory": 6,
                    "initialize_memory_and_execute": 1,
                    "initialize_memory_and_execute_interrupt": 2,
                    "initialize_memory_and_execute_software_interrupt": 1,
                    "initialize_memory_and_execution": 1,
                    "initialize_memory_and_interrupt": 1,
                    "initialize_memory_and_interrupts": 2,
                    "initialize_memory_blocks": 1
                },
                "execute_software_interrupt_00000930": {
                    "execute_software_interrupt": 1
                },
                "get_irq_interrupt_status_00000cd0": {
                    "get_interrupt_status": 1
                },
                "handle_kernel_panic_00000f04": {
                    "handle_kernel_assertion_failure": 1,
                    "handle_panic": 1,
                    "panic_handler": 1
                },
                "iStack_24": {
                    "interrupt_bit_shift": 1,
                    "interrupt_flag": 2,
                    "interrupt_flag_shifted": 1,
                    "interrupt_flags": 1,
                    "interrupt_handler": 1,
                    "interrupt_offset": 1,
                    "interrupt_stack_variable": 1,
                    "interrupt_status": 1,
                    "memory_block_shift": 1,
                    "nested_offset": 1,
                    "offset": 4,
                    "offset_value": 1,
                    "shift_value": 3,
                    "shifted_block": 1,
                    "shifted_block_size": 4,
                    "shifted_memory_size": 1,
                    "shifted_value": 2,
                    "stack_offset": 2,
                    "stack_value": 1,
                    "stack_variable_1": 1
                },
                "initialize_memory_block_000010d4": {
                    "initialize_memory_block": 1,
                    "initialize_memory_block_2": 1
                },
                "local_10": {
                    "interrupt_info_1": 1,
                    "interrupt_status": 4,
                    "irq_interrupt_status": 3,
                    "mem_block_offset1": 1,
                    "memory_block_offset": 1,
                    "rel_array_offset_1": 1,
                    "rel_info": 2
                },
                "local_10_2": {
                    "memory_block_offset_1": 1
                },
                "local_10_3": {
                    "memory_block_offset_2": 1
                },
                "local_14": {
                    "block1_size": 1,
                    "dummy_variable_1": 1,
                    "init_value_2": 1,
                    "interrupt_info_2": 1,
                    "mem_block_offset2": 1,
                    "memory_block_size_2": 1,
                    "memory_size2": 1,
                    "memory_size_2": 1,
                    "rel_array_offset_2": 1,
                    "second_block_size": 1,
                    "temp_var": 1,
                    "temp_variable": 1,
                    "unused_variable_1": 1
                },
                "local_14_2": {
                    "unused_variable_3": 1
                },
                "local_14_3": {
                    "unused_variable_5": 1
                },
                "local_18": {
                    "block1_start": 1,
                    "dummy_variable_2": 1,
                    "init_value_1": 1,
                    "interrupt_info_3": 1,
                    "irq_number": 1,
                    "mem_block_size1": 1,
                    "memory_block_size_1": 1,
                    "memory_size1": 1,
                    "memory_size_1": 1,
                    "rel_array_offset_3": 1,
                    "second_block_value": 1,
                    "temp_variable_2": 1,
                    "unused_variable_2": 1
                },
                "local_18_2": {
                    "unused_variable_4": 1
                },
                "local_18_3": {
                    "unused_variable_6": 1
                },
                "local_1c": {
                    "interrupt_status": 1,
                    "software_interrupt": 1,
                    "stack_value": 1
                },
                "local_20": {
                    "interrupt_flag": 1
                },
                "local_2c": {
                    "block2_start": 1
                },
                "piStack_20": {
                    "interrupt_bit_shift_pointer": 1,
                    "interrupt_flag_pointer": 2,
                    "interrupt_flag_shifted_pointer": 1,
                    "interrupt_flags_ptr": 1,
                    "interrupt_ptr": 1,
                    "interrupt_stack_pointer": 1,
                    "memory_block_shift_pointer": 1,
                    "nested_pointer": 1,
                    "offset_ptr": 4,
                    "pointer_to_offset": 2,
                    "pointer_to_shifted_block": 1,
                    "pointer_to_shifted_block_size": 2,
                    "pointer_to_shifted_memory_size": 1,
                    "shift_pointer": 2,
                    "shift_ptr": 1,
                    "shifted_block_size_ptr": 2,
                    "shifted_pointer": 1,
                    "shifted_value_ptr": 1,
                    "stack_pointer": 2,
                    "stack_ptr": 1,
                    "stack_variable_2": 1,
                    "status_pointer": 1
                },
                "puVar2": {
                    "block_pointer": 1,
                    "memory_block": 13,
                    "memory_block_pointer": 6,
                    "memory_block_ptr": 8,
                    "memory_location": 1,
                    "memory_ptr": 1,
                    "target_address": 1
                },
                "uStack_1c": {
                    "interrupt_code": 4,
                    "interrupt_flag": 2,
                    "interrupt_handler": 1,
                    "interrupt_parameter": 1,
                    "interrupt_status": 2,
                    "interrupt_value": 1,
                    "software_interrupt": 2,
                    "software_interrupt_code": 2,
                    "software_interrupt_flag": 1,
                    "software_interrupt_param": 2,
                    "software_interrupt_result": 1,
                    "software_interrupt_value": 3
                },
                "uVar1": {
                    "interrupt_bit": 1,
                    "interrupt_flag": 2,
                    "interrupt_flags": 1,
                    "interrupt_result": 14,
                    "interrupt_status": 7,
                    "interrupt_value": 3,
                    "irq_interrupt_status": 1,
                    "irq_status": 1,
                    "software_interrupt_result": 1
                },
                "uVar3": {
                    "block2_size": 1,
                    "block_index": 2,
                    "block_size": 17,
                    "interrupt_count": 1,
                    "iterator": 1,
                    "loop_counter": 1,
                    "memory_block_count": 1,
                    "memory_block_index": 2,
                    "memory_block_size": 2,
                    "memory_block_size_1": 1,
                    "memory_size": 1,
                    "num_blocks": 1
                }
            },
            "called": [
                "FUN_00000930",
                "FUN_00000cd0",
                "FUN_000010d4"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid initialize_and_configure_interrupts_00000f8c(void)\n\n{\n  uint interrupt_result;\n  undefined4 *memory_block;\n  uint block_size;\n  int shifted_block_size;\n  int *offset_ptr;\n  undefined4 interrupt_code;\n  undefined4 temp_variable_2;\n  undefined4 mem_block_offset2;\n  dword interrupt_status;\n  \n  get_interrupt_status();\n  interrupt_status = elf_relocation_array[3].r_info;\n  mem_block_offset2 = 0;\n  temp_variable_2 = 0xf81;\n  initialize_memory_block_2(&DAT_1fff0a6c,0x100,0xf,0xc);\n  interrupt_status = elf_relocation_array[3].r_offset;\n  mem_block_offset2 = 0;\n  temp_variable_2 = 0xf5d;\n  block_size = 0xc;\n  initialize_memory_block_2(&DAT_1fff046c,0x600,7);\n  interrupt_code = 0xfd3;\n  interrupt_result = execute_software_interrupt();\n  interrupt_result = interrupt_result >> 0x1e;\n  memory_block = (undefined4 *)(block_size * 0x100);\n  shifted_block_size = (block_size >> 0x1d) << 0x11;\n  offset_ptr = &shifted_block_size;\n  if ((interrupt_result & interrupt_result - 1) != 0) {\n    handle_kernel_assertion_failure(3,\"FAILED ASSERTION.\");\n  }\n  *memory_block = 0;\n  memory_block[1] = 0;\n  memory_block[2] = interrupt_result - 1;\n  return;\n}\n\n",
            "current_name": "initialize_and_configure_interrupts_00000f8c",
            "entrypoint": "0x00000f8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "elf_relocation_array",
                "FUN_00000f8c": "initialize_and_configure_interrupts_00000f8c",
                "execute_software_interrupt_00000930": "execute_software_interrupt",
                "get_irq_interrupt_status_00000cd0": "get_interrupt_status",
                "handle_kernel_panic_00000f04": "handle_kernel_assertion_failure",
                "iStack_24": "shifted_block_size",
                "initialize_memory_block_000010d4": "initialize_memory_block_2",
                "local_10": "interrupt_status",
                "local_14": "mem_block_offset2",
                "local_18": "temp_variable_2",
                "piStack_20": "offset_ptr",
                "puVar2": "memory_block",
                "uStack_1c": "interrupt_code",
                "uVar1": "interrupt_result",
                "uVar3": "block_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000fec": {
            "additional_data": {
                "FUN_00000fec": {
                    "initialize_and_set_values": 1,
                    "initialize_and_validate": 1,
                    "initialize_array": 7,
                    "initialize_array_with_length": 1,
                    "initialize_data_structure": 2,
                    "initialize_memory": 13,
                    "initialize_memory_block": 2,
                    "initialize_memory_region": 1,
                    "initialize_param_array": 2,
                    "initialize_values": 1
                },
                "PTR_00000xf04": {
                    "kernel_panic_handler": 1
                },
                "handle_kernel_panic_00000f04": {
                    "handle_error": 2,
                    "handle_kernel_panic": 1,
                    "handle_panic": 4
                },
                "param_1": {
                    "array": 8,
                    "array_ptr": 1,
                    "data_structure": 1,
                    "mem_ptr": 1,
                    "memory": 1,
                    "memory_array": 3,
                    "memory_block": 3,
                    "memory_buffer": 1,
                    "memory_pointer": 2,
                    "memory_ptr": 1,
                    "memory_region": 1,
                    "memory_segment": 1,
                    "output_array": 5,
                    "output_buffer": 1,
                    "param_array": 1
                },
                "param_2": {
                    "array_length": 3,
                    "array_size": 3,
                    "block_size": 1,
                    "buffer_size": 2,
                    "length": 1,
                    "mem_size": 1,
                    "memory_size": 3,
                    "region_size": 1,
                    "size": 14,
                    "size_of_data": 1,
                    "value_count": 1
                }
            },
            "called": [
                "FUN_00000f04"
            ],
            "calling": [
                "FUN_000010d4"
            ],
            "code": "\nvoid initialize_memory_block_00000fec(undefined4 *array,uint size)\n\n{\n  if ((size & size - 1) != 0) {\n    handle_panic(3,\"FAILED ASSERTION.\");\n  }\n  *array = 0;\n  array[1] = 0;\n  array[2] = size - 1;\n  return;\n}\n\n",
            "current_name": "initialize_memory_block_00000fec",
            "entrypoint": "0x00000fec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000fec": "initialize_memory_block_00000fec",
                "handle_kernel_panic_00000f04": "handle_panic",
                "param_1": "array",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001034": {
            "additional_data": {
                "FUN_00001034": {
                    "assign_and_link_node": 1,
                    "copy_pointers": 1,
                    "find_and_assign_node": 1,
                    "find_and_replace": 1,
                    "find_and_replace_pointer": 2,
                    "find_and_set_pointer": 1,
                    "find_and_update_element": 1,
                    "find_and_update_node": 1,
                    "find_and_update_pointer": 1,
                    "find_best_match": 1,
                    "find_insert_position": 3,
                    "find_next_linked_node": 1,
                    "find_valid_entry": 1,
                    "linked_list_insertion": 1,
                    "update_array_pointer": 1,
                    "update_linked_list": 1,
                    "update_list": 1,
                    "update_param_value": 1,
                    "update_pointer": 4,
                    "update_pointer_array": 2,
                    "update_pointer_list": 2,
                    "update_pointer_value": 1
                },
                "local_1c": {
                    "current_element": 3,
                    "current_entry": 1,
                    "current_match": 1,
                    "current_node": 7,
                    "current_pointer": 16,
                    "current_ptr": 2,
                    "temp": 1
                },
                "param_1": {
                    "array": 3,
                    "array_of_pointers": 1,
                    "array_pointer": 1,
                    "entries": 1,
                    "head": 1,
                    "linked_list": 3,
                    "list": 2,
                    "list_of_pointers": 2,
                    "list_ptr": 2,
                    "node_list": 2,
                    "param_list_ptr": 1,
                    "pointer_array": 3,
                    "pointer_list": 9
                },
                "param_2": {
                    "byte_array": 1,
                    "byte_offset": 1,
                    "bytes": 1,
                    "data": 4,
                    "element": 1,
                    "element_data": 1,
                    "index": 8,
                    "kernel_data": 1,
                    "key": 1,
                    "match_info": 1,
                    "node": 1,
                    "node_data": 1,
                    "node_idx": 1,
                    "node_to_insert": 1,
                    "param_index": 1,
                    "search_value": 3,
                    "size": 1,
                    "target_node": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_00000f04"
            ],
            "calling": [
                "FUN_00002434"
            ],
            "code": "\nvoid update_array_pointer_00001034(int **pointer_list,int index)\n\n{\n  int **current_pointer;\n  \n  if (8 < *(byte *)(index + 4)) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (current_pointer = pointer_list;\n      (*current_pointer != (int *)0x0 && (*(byte *)((int)*current_pointer + -3) <= *(byte *)(index + 5)));\n      current_pointer = (int **)*current_pointer) {\n  }\n  *(int **)(index + 8) = *current_pointer;\n  *current_pointer = (int *)(int **)(index + 8);\n  return;\n}\n\n",
            "current_name": "update_array_pointer_00001034",
            "entrypoint": "0x00001034",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001034": "update_array_pointer_00001034",
                "local_1c": "current_pointer",
                "param_1": "pointer_list",
                "param_2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000010a0": {
            "additional_data": {
                "FUN_000010a0": {
                    "calculate_array_offset": 4,
                    "calculate_array_size": 1,
                    "calculate_difference": 1,
                    "calculate_distance": 1,
                    "calculate_offset": 7,
                    "calculate_parameter_difference": 1,
                    "count_elements": 1,
                    "count_items": 1,
                    "count_matching_addresses": 1,
                    "find_array_end_index": 1,
                    "find_displacement": 1,
                    "find_distance_between_pointers": 1,
                    "find_end_offset": 1,
                    "find_last_index": 1,
                    "find_matching_index": 1,
                    "find_offset": 3,
                    "get_array_length": 2,
                    "get_distance_between_pointers": 1,
                    "get_element_offset": 1
                },
                "local_c": {
                    "current_address": 1,
                    "current_element": 20,
                    "current_index": 2,
                    "current_item": 1,
                    "current_pointer": 3,
                    "current_ptr": 3
                },
                "param_1": {
                    "address_list": 1,
                    "array": 27,
                    "array_pointer": 1,
                    "input_array": 1,
                    "pointer_array": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0000211c"
            ],
            "code": "\nint calculate_array_offset_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "current_name": "calculate_array_offset_000010a0",
            "entrypoint": "0x000010a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000010a0": "calculate_array_offset_000010a0",
                "local_c": "current_element",
                "param_1": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000010d4": {
            "additional_data": {
                "DAT_1fff0350": {
                    "counter": 1
                },
                "DAT_1fff0358": {
                    "memory_table": 1
                },
                "FUN_000010d4": {
                    "allocate_memory_block": 4,
                    "initialize_block": 1,
                    "initialize_memory": 5,
                    "initialize_memory_block": 21
                },
                "iVar3": {
                    "result": 28,
                    "return_value": 3
                },
                "local_10": {
                    "end_address": 1,
                    "iter": 1,
                    "local_10": 1,
                    "local_var10": 1,
                    "loop_count": 1,
                    "loop_counter": 13,
                    "loop_index": 6,
                    "loop_var": 2,
                    "loop_variable": 3,
                    "temp_address": 2
                },
                "local_2c": {
                    "adjusted_address": 7,
                    "adjusted_base_address": 1,
                    "adjusted_start_address": 2,
                    "aligned_address": 17,
                    "aligned_base": 1,
                    "aligned_offset": 1,
                    "aligned_pointer": 1,
                    "aligned_start_address": 1
                },
                "local_30": {
                    "adjusted_block_size": 2,
                    "adjusted_size": 8,
                    "adjusted_size_temp": 1,
                    "aligned_size": 3,
                    "aligned_size_adjustment": 1,
                    "aligned_size_bytes": 1,
                    "aligned_size_correction": 1,
                    "aligned_size_diff": 1,
                    "aligned_size_offset": 2,
                    "aligned_size_temp": 1,
                    "alignment": 1,
                    "alignment_offset": 4,
                    "buffer_offset": 1,
                    "padding_size": 2,
                    "remaining_size": 2
                },
                "local_a": {
                    "available_block": 1,
                    "available_index": 8,
                    "available_slot": 4,
                    "current_index": 1,
                    "empty_block_number": 1,
                    "empty_slot": 1,
                    "first_free_block": 1,
                    "first_free_slot": 2,
                    "free_index": 1,
                    "index": 2,
                    "index2": 2,
                    "index_a": 1,
                    "new_block_index": 1,
                    "new_slot": 2,
                    "short_value2": 1,
                    "short_var2": 1,
                    "short_variable2": 1
                },
                "local_c": {
                    "available_block": 2,
                    "available_block_index": 1,
                    "available_slot": 4,
                    "available_space": 1,
                    "block_index": 3,
                    "block_number": 1,
                    "block_type_index": 1,
                    "current_loop": 1,
                    "empty_slot": 2,
                    "found_index": 2,
                    "index": 3,
                    "index1": 2,
                    "index_c": 1,
                    "iteration_count": 1,
                    "loop_variable2": 1,
                    "memory_block_size": 1,
                    "search_index": 1,
                    "short_value1": 1,
                    "short_var1": 1,
                    "short_variable1": 1
                },
                "param_1": {
                    "address": 11,
                    "base_address": 1,
                    "data_address": 1,
                    "init_address": 1,
                    "initial_address": 1,
                    "input_address": 1,
                    "input_pointer": 1,
                    "input_size": 1,
                    "length": 1,
                    "mem_base": 1,
                    "start_address": 9,
                    "starting_address": 2
                },
                "param_2": {
                    "address": 1,
                    "block_size": 3,
                    "buffer_size": 1,
                    "data_size": 1,
                    "init_size": 1,
                    "input_size": 2,
                    "mem_size": 1,
                    "size": 21
                },
                "param_3": {
                    "alignment": 1,
                    "block_flag": 1,
                    "block_size": 6,
                    "block_type": 8,
                    "byte": 1,
                    "byte_count": 5,
                    "byte_value": 1,
                    "bytes": 1,
                    "flag": 1,
                    "length": 4,
                    "memory_permission": 1,
                    "size": 1
                },
                "param_4": {
                    "flags": 28,
                    "options": 2,
                    "param": 1
                },
                "param_5": {
                    "arg1": 6,
                    "param5": 19,
                    "param5_value": 1,
                    "param_5": 5
                },
                "param_6": {
                    "arg2": 6,
                    "param6": 19,
                    "param6_value": 1,
                    "param_6": 5
                },
                "param_7": {
                    "arg3": 6,
                    "param7": 19,
                    "param7_value": 1,
                    "param_7": 5
                },
                "puVar5": {
                    "block_pointer": 17,
                    "block_ptr": 3,
                    "mem_block_pointer": 1,
                    "mem_block_ptr": 3,
                    "memory_block": 2,
                    "memory_block_pointer": 2,
                    "memory_block_ptr": 2,
                    "ptr": 1
                },
                "uVar1": {
                    "interrupt_status": 10,
                    "irq_int_status": 1,
                    "irq_interrupt_status": 7,
                    "irq_status": 13
                },
                "uVar2": {
                    "block_initialization": 1,
                    "block_value": 2,
                    "init_memory_block_result": 1,
                    "init_result": 1,
                    "init_val": 1,
                    "initial_value": 1,
                    "initialized_block": 3,
                    "initialized_memory": 2,
                    "initialized_memory_block": 2,
                    "initialized_value": 2,
                    "mem_block": 1,
                    "mem_block_value": 3,
                    "memory_block": 9,
                    "memory_block_value": 1,
                    "u_var2": 1
                },
                "uVar4": {
                    "adjusted_block_size": 1,
                    "adjusted_size": 2,
                    "aligned_length": 1,
                    "aligned_size": 25,
                    "temp_size": 1,
                    "u_var4": 1
                }
            },
            "called": [
                "FUN_00000fec",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000698",
                "FUN_000007dc",
                "FUN_00000cd0"
            ],
            "calling": [
                "FUN_00000f8c"
            ],
            "code": "\nint initialize_memory_block_000010d4(uint address,int size,byte block_type,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 irq_status;\n  undefined4 memory_block;\n  int result;\n  uint aligned_size;\n  undefined4 *block_pointer;\n  int adjusted_size;\n  uint aligned_address;\n  uint loop_counter;\n  short available_slot;\n  short available_index;\n  \n  if (block_type < 0x10) {\n    adjusted_size = size;\n    aligned_address = address;\n    if ((address & 3) != 0) {\n      adjusted_size = 4 - (address & 3);\n      aligned_address = adjusted_size + address;\n      adjusted_size = size - adjusted_size;\n    }\n    aligned_size = adjusted_size - 0x30U & 0xfffffffc;\n    block_pointer = (undefined4 *)(aligned_size + aligned_address);\n    if ((flags & 8) == 0) {\n      *(uint *)aligned_address = aligned_address;\n    }\n    else {\n      for (loop_counter = aligned_address; loop_counter < aligned_size + aligned_address; loop_counter = loop_counter + 4) {\n        *(uint *)loop_counter = loop_counter;\n      }\n    }\n    irq_status = get_irq_interrupt_status_00000cd0();\n    available_index = 0;\n    for (available_slot = 1; available_slot < 0x21; available_slot = available_slot + 1) {\n      if (*(int *)(&DAT_1fff0358 + available_slot * 4) == 0) {\n        available_index = available_slot;\n        break;\n      }\n    }\n    if (available_index == 0) {\n      enable_ir_qinterrupts_if_current_mode_is_privileged_00000d0c(irq_status);\n      result = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + available_index * 4) = block_pointer;\n      *(short *)((int)block_pointer + 6) = available_index;\n      memory_block = initialize_memory_block_000010d4_000007dc(param5,param6,aligned_address,aligned_size);\n      *block_pointer = memory_block;\n      block_pointer[9] = aligned_address;\n      block_pointer[0xb] = size;\n      block_pointer[10] = param7;\n      *(byte *)((int)block_pointer + 5) = block_type;\n      *(undefined *)(block_pointer + 1) = 0;\n      block_pointer[2] = 0;\n      block_pointer[3] = 0;\n      block_pointer[4] = 0;\n      initialize_memory_block_000010d4_00000fec(block_pointer + 5,0);\n      block_pointer[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        update_pointer_and_flag_00000698(block_pointer,10);\n        if ((flags & 4) == 0) {\n          enable_ir_qinterrupts_if_current_mode_is_privileged_00000d0c(irq_status);\n          check_and_set_memory_protection_00000738(block_type);\n          return (int)available_index;\n        }\n      }\n      else {\n        update_pointer_and_flag_00000698(block_pointer,1);\n      }\n      enable_ir_qinterrupts_if_current_mode_is_privileged_00000d0c(irq_status);\n      result = (int)available_index;\n    }\n  }\n  else {\n    result = -0x16;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_memory_block_000010d4",
            "entrypoint": "0x000010d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000010d4": "initialize_memory_block_000010d4",
                "iVar3": "result",
                "local_10": "loop_counter",
                "local_2c": "aligned_address",
                "local_30": "adjusted_size",
                "local_a": "available_index",
                "local_c": "available_slot",
                "param_1": "address",
                "param_2": "size",
                "param_3": "block_type",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "puVar5": "block_pointer",
                "uVar1": "irq_status",
                "uVar2": "memory_block",
                "uVar4": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001274": {
            "additional_data": {
                "FUN_00001274": {
                    "initialize_and_configure": 1,
                    "initialize_and_configure_system": 10,
                    "initialize_and_setup_components": 1,
                    "initialize_and_setup_system": 8,
                    "initialize_components": 1,
                    "initialize_function": 1,
                    "initialize_system": 9
                },
                "initialize_memory_0000258c": {
                    "initialize_memory": 28
                },
                "initialize_system_00002396": {
                    "initialize_system": 24,
                    "initialize_system_00002396": 1,
                    "initialize_system_components": 2,
                    "initialize_system_other": 1
                },
                "initialize_system_components_00001c84": {
                    "initialize_components": 2,
                    "initialize_system_components": 26
                }
            },
            "called": [
                "FUN_0000258c",
                "FUN_00001c84",
                "FUN_00002396"
            ],
            "calling": [
                "FUN_00000e64"
            ],
            "code": "\nvoid initialize_and_configure_system_00001274(void)\n\n{\n  initialize_memory();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_system_components();\n  initialize_system();\n  return;\n}\n\n",
            "current_name": "initialize_and_configure_system_00001274",
            "entrypoint": "0x00001274",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001274": "initialize_and_configure_system_00001274",
                "initialize_memory_0000258c": "initialize_memory",
                "initialize_system_00002396": "initialize_system",
                "initialize_system_components_00001c84": "initialize_system_components"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000129c": {
            "additional_data": {
                "FUN_0000129c": {
                    "set_irq_interrupt_status": 1,
                    "update_interrupt_status": 3,
                    "update_irq_interrupt_status": 27
                },
                "PTR_00002434": {
                    "irq_interrupt_status_ptr": 1
                },
                "param_1": {
                    "data": 1,
                    "interrupt_status": 5,
                    "irq_interrupt": 1,
                    "irq_interrupt_status": 5,
                    "irq_status": 2,
                    "param": 3,
                    "status": 14
                },
                "param_2": {
                    "enable": 1,
                    "irq": 1
                },
                "param_3": {
                    "disable": 1,
                    "new_status": 1
                },
                "param_4": {
                    "irq_interrupt_status": 1
                },
                "param_5": {
                    "param_5": 1
                },
                "param_6": {
                    "param_6": 1
                },
                "param_7": {
                    "param_7": 1
                },
                "param_8": {
                    "param_8": 1
                },
                "update_irq_interrupt_status_00002434": {
                    "update_interrupt_status": 4,
                    "update_interrupt_status_func": 1,
                    "update_irq_interrupt_status": 7,
                    "update_irq_status": 1,
                    "update_status": 3
                }
            },
            "called": [
                "FUN_00002434"
            ],
            "calling": [
                "FUN_000012e2"
            ],
            "code": "\nvoid update_irq_interrupt_status_0000129c(undefined4 status)\n\n{\n  update_irq_interrupt_status_0000129c(status,1);\n  return;\n}\n\n",
            "current_name": "update_irq_interrupt_status_0000129c",
            "entrypoint": "0x0000129c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000129c": "update_irq_interrupt_status_0000129c",
                "param_1": "status",
                "update_irq_interrupt_status_00002434": "update_irq_interrupt_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000012b4": {
            "additional_data": {
                "FUN_000012b4": {
                    "handle_and_update_interrupt": 1,
                    "handle_interrupt": 13,
                    "handle_interrupt_and_update_value": 1,
                    "handle_irq": 2,
                    "handle_irq_and_update_value": 1,
                    "handle_irq_interrupt": 5,
                    "handle_irq_interrupt_and_update": 1,
                    "handle_irq_interrupt_and_update_value": 4,
                    "handle_irq_interrupt_with_update": 1,
                    "handle_irq_interrupt_with_updated_value": 1,
                    "update_and_handle_irq_interrupt": 1
                },
                "param_1": {
                    "addr": 1,
                    "base_address": 2,
                    "device_id": 1,
                    "input_value": 2,
                    "interrupt_address": 1,
                    "interrupt_handler": 2,
                    "irq": 1,
                    "irq_address": 3,
                    "irq_handler": 2,
                    "irq_id": 1,
                    "irq_interrupt": 1,
                    "irq_interrupt_number": 1,
                    "irq_num": 2,
                    "irq_number": 7,
                    "irq_param": 4
                },
                "param_2": {
                    "input_param": 1,
                    "input_parameter": 1,
                    "interrupt_data": 5,
                    "interrupt_param": 1,
                    "interrupt_status": 1,
                    "interrupt_type": 2,
                    "interrupt_value": 2,
                    "interrupt_vector": 1,
                    "irq_data": 1,
                    "irq_handler": 1,
                    "irq_parameter": 1,
                    "irq_status": 2,
                    "irq_type": 1,
                    "irq_value": 3,
                    "new_value": 3,
                    "update_value": 1,
                    "updated_value": 1,
                    "value": 3
                },
                "uVar1": {
                    "result": 2,
                    "update_result": 8,
                    "updated_value": 9
                }
            },
            "called": [
                "FUN_00002364",
                "FUN_000024bc"
            ],
            "calling": [],
            "code": "\nundefined4 handle_irq_interrupt_and_update_value_000012b4(int irq_number,undefined interrupt_data)\n\n{\n  undefined4 updated_value;\n  \n  updated_value = update_value_if_not_equal_00002364(irq_number + 4,interrupt_data);\n  handle_irq_interrupt_000024bc(irq_number);\n  return updated_value;\n}\n\n",
            "current_name": "handle_irq_interrupt_and_update_value_000012b4",
            "entrypoint": "0x000012b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000012b4": "handle_irq_interrupt_and_update_value_000012b4",
                "param_1": "irq_number",
                "param_2": "interrupt_data",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000012e2": {
            "additional_data": {
                "FUN_000012e2": {
                    "copy_and_increment_elements": 9,
                    "copy_and_increment_elements_iteratively": 1,
                    "copy_and_increment_elements_loop": 7,
                    "copy_and_increment_elements_until_zero": 1,
                    "copy_and_increment_until_nonzero": 1,
                    "copy_and_update_elements": 7,
                    "copy_elements_and_update_irq_status": 1,
                    "copy_elements_with_increment": 3,
                    "perform_copy_and_increment": 1
                },
                "iVar1": {
                    "copy_result": 4,
                    "copy_status": 2,
                    "copy_success": 2,
                    "error": 1,
                    "error_code": 5,
                    "result": 10,
                    "return_value": 2
                },
                "param_1": {
                    "array": 6,
                    "array_address": 3,
                    "array_offset": 1,
                    "array_ptr": 7,
                    "array_start": 5,
                    "buffer_address": 1,
                    "data_ptr": 1,
                    "input_array": 3,
                    "input_buffer": 1,
                    "source_array": 3
                },
                "param_2": {
                    "destination_address": 1,
                    "destination_array": 2,
                    "element_increment": 1,
                    "element_size": 4,
                    "param2": 3,
                    "param_2": 3,
                    "size": 6,
                    "size_of_element": 2,
                    "size_of_param_1": 1,
                    "start_index": 5,
                    "start_ptr": 1,
                    "value1": 2
                },
                "param_3": {
                    "array_length": 3,
                    "count": 1,
                    "element_count": 2,
                    "element_size": 1,
                    "end_index": 5,
                    "end_ptr": 1,
                    "increment": 1,
                    "num_elements": 3,
                    "param3": 3,
                    "param_3": 3,
                    "size_of_param_2": 1,
                    "step": 4,
                    "total_elements": 1,
                    "value2": 2
                }
            },
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "calling": [
                "FUN_00000e14"
            ],
            "code": "\nint copy_and_increment_elements_loop_000012e2(int array_ptr,undefined4 size,undefined4 end_index)\n\n{\n  int result;\n  \n  while( true ) {\n    result = copy_and_increment_elements_0000231c(array_ptr + 4,size,end_index);\n    if (result != 0) break;\n    update_irq_interrupt_status_0000129c(array_ptr);\n  }\n  return result;\n}\n\n",
            "current_name": "copy_and_increment_elements_loop_000012e2",
            "entrypoint": "0x000012e2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000012e2": "copy_and_increment_elements_loop_000012e2",
                "iVar1": "result",
                "param_1": "array_ptr",
                "param_2": "size",
                "param_3": "end_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001318": {
            "additional_data": {
                "0x1f": {
                    "bit_mask": 1
                },
                "0x1fff1f00": {
                    "base_address": 1
                },
                "1": {
                    "bit_value": 1
                },
                "DAT_": {
                    "": 1
                },
                "FUN_00001318": {
                    "initialize_bit": 1,
                    "reverse_and_set_bit": 1,
                    "set_bit": 8,
                    "set_bit_at_index": 3,
                    "set_bit_in_array": 2,
                    "set_bit_in_memory": 13,
                    "set_bit_value": 1,
                    "update_bit_value": 1,
                    "update_memory": 1
                },
                "PTR_": {
                    "": 1
                },
                "char": {
                    "character": 1,
                    "int8": 1
                },
                "int": {
                    "int32": 1,
                    "integer": 1
                },
                "param_1": {
                    "bit_index": 2,
                    "bit_position": 2,
                    "byte_index": 1,
                    "byte_to_set": 2,
                    "byte_value": 5,
                    "data": 1,
                    "input": 2,
                    "input_byte": 14,
                    "input_value": 1,
                    "value": 1
                },
                "param_2": {
                    "bit_position": 1,
                    "new_parameter_name_2": 1,
                    "new_value": 1
                },
                "param_3": {
                    "memory_base_address": 1
                },
                "param_4": {
                    "bitmask": 1
                },
                "param_5": {
                    "shift_count": 1
                },
                "ptr": {
                    "memory_pointer": 1
                },
                "uint": {
                    "unsigned_integer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000014c4"
            ],
            "code": "\nvoid set_bit_in_memory_00001318(byte input_byte)\n\n{\n  *(integer *)(((unsigned_integer)(integer)(int8)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_00001318",
            "entrypoint": "0x00001318",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "char": "int8",
                "int": "integer",
                "param_1": "input_byte",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001348": {
            "additional_data": {
                "DAT_1fff0354": {
                    "memory_flag": 1,
                    "memory_protection_flag": 19
                },
                "FUN_00001348": {
                    "check_and_set_memory_protection": 3,
                    "check_and_set_memory_protection_flag": 3,
                    "check_memory_protection": 3,
                    "check_memory_protection_flag": 2,
                    "disable_memory_protection": 1,
                    "enable_memory_protection": 4,
                    "execute_memory_protection": 1,
                    "execute_protected_memory_operation": 1,
                    "initialize_memory_protection": 3,
                    "set_memory_protection": 6,
                    "set_memory_protection_flag": 1,
                    "set_memory_protection_if_flag_set": 1,
                    "set_memory_protection_if_needed": 1,
                    "set_memory_protection_if_not_zero": 1
                },
                "set_memory_protection_flag_0000093c": {
                    "enable_memory_protection": 1,
                    "set_memory_flag": 1,
                    "set_memory_protection_flag": 7
                }
            },
            "called": [
                "FUN_0000093c"
            ],
            "calling": [
                "FUN_00001628"
            ],
            "code": "\nvoid check_and_set_memory_protection_flag_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_memory_protection_flag();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_set_memory_protection_flag_00001348",
            "entrypoint": "0x00001348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001348": "check_and_set_memory_protection_flag_00001348",
                "set_memory_protection_flag_0000093c": "set_memory_protection_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001360": {
            "additional_data": {
                "0x2000000": {
                    "constant_offset": 2,
                    "offset": 2
                },
                "0xf0000000": {
                    "bit_mask_a": 1
                },
                "0xfffff": {
                    "bit_mask_b": 1
                },
                "FUN_00001360": {
                    "calculate_final_result": 1,
                    "calculate_modified_address": 1,
                    "calculate_new_value": 2,
                    "calculate_offset": 25,
                    "calculate_result": 2
                },
                "VAR_00000001": {
                    "masked_address": 1
                },
                "VAR_00000002": {
                    "lower_bits": 1
                },
                "VAR_00000003": {
                    "shifted_lower_bits": 1
                },
                "param_1": {
                    "address": 2,
                    "base_address": 7,
                    "base_value": 1,
                    "data": 1,
                    "input1": 1,
                    "input_value": 13,
                    "input_value1": 1,
                    "offset": 2,
                    "offset_value": 1,
                    "value": 2
                },
                "param_2": {
                    "count": 1,
                    "index": 4,
                    "input2": 1,
                    "input_value2": 1,
                    "multiplier": 20,
                    "offset": 1,
                    "offset_multiplier": 1,
                    "offset_value": 1,
                    "value": 1
                },
                "param_3": {
                    "offset": 1,
                    "result": 1,
                    "temporary": 1,
                    "temporary_variable": 1
                },
                "param_4": {
                    "constant": 1,
                    "mask1": 1,
                    "multiplier": 1
                },
                "param_5": {
                    "mask2": 1,
                    "offset": 1
                },
                "param_6": {
                    "result": 1,
                    "shift_bits": 1
                },
                "param_7": {
                    "base_offset": 1
                },
                "result": {
                    "new_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001392"
            ],
            "code": "\nint calculate_offset_00001360(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "current_name": "calculate_offset_00001360",
            "entrypoint": "0x00001360",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001392": {
            "additional_data": {
                "FUN_00001392": {
                    "initialize_flag": 1,
                    "initialize_memory": 1,
                    "set_flag_to1": 2,
                    "set_flag_to_one": 1,
                    "set_flag_to_true": 1,
                    "set_offset": 1,
                    "set_offset_to1": 2,
                    "set_offset_to_one": 10,
                    "set_offset_to_value": 7,
                    "set_offset_to_value_one": 3,
                    "set_offset_value": 1,
                    "write_value_to_offset": 1
                },
                "param_1": {
                    "address": 1,
                    "base_address": 1,
                    "data_offset": 1,
                    "input1": 3,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_ptr": 1,
                    "input_value": 1,
                    "input_value1": 1,
                    "offset": 13,
                    "offset_address": 1,
                    "offset_param": 1,
                    "size": 1,
                    "value": 1,
                    "value_address": 1
                },
                "param_2": {
                    "address": 1,
                    "data": 1,
                    "data_value": 1,
                    "flag": 2,
                    "input": 1,
                    "input2": 3,
                    "input_value": 2,
                    "input_value2": 1,
                    "offset": 2,
                    "offset_parameter": 1,
                    "offset_value": 1,
                    "undefined_param": 3,
                    "value": 11,
                    "value_to_set": 1
                },
                "puVar1": {
                    "address_ptr": 1,
                    "flag_pointer": 1,
                    "flag_ptr": 1,
                    "memory_location": 1,
                    "offset_address": 1,
                    "offset_pointer": 16,
                    "offset_ptr": 6,
                    "output_ptr": 1,
                    "ptr_to_offset": 1,
                    "result_ptr": 1
                }
            },
            "called": [
                "FUN_00001360"
            ],
            "calling": [
                "FUN_000013b8"
            ],
            "code": "\nvoid set_offset_to_value_one_00001392(undefined4 offset,undefined value)\n\n{\n  undefined4 *offset_pointer;\n  \n  offset_pointer = (undefined4 *)calculate_offset_00001360(offset,value);\n  *offset_pointer = 1;\n  return;\n}\n\n",
            "current_name": "set_offset_to_value_one_00001392",
            "entrypoint": "0x00001392",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001392": "set_offset_to_value_one_00001392",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offset_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000013b8": {
            "additional_data": {
                "DAT_00006ffc": {
                    "memory_data_array": 1,
                    "memory_data_ptr": 1
                },
                "DAT_1fff0b6c": {
                    "extracted_values_array": 1,
                    "extracted_values_ptr": 1
                },
                "DAT_1fff0b70": {
                    "offset_array": 1,
                    "offsets_ptr": 1
                },
                "FUN_000013b8": {
                    "handle_assertion": 3,
                    "handle_assertion_failure": 8,
                    "handle_kernel_panic": 2,
                    "handle_kernel_panic_and_update_memory": 1,
                    "initialize_kernel_panic_handler": 1,
                    "initialize_memory": 1,
                    "set_extracted_values": 1,
                    "store_and_update_values": 1,
                    "store_values_and_update_memory": 1,
                    "update_and_set_values": 1,
                    "update_kernel_data": 2,
                    "update_kernel_values": 1,
                    "update_memory_data": 6,
                    "update_memory_with_value": 1,
                    "update_values_and_check_assertion": 1
                },
                "handle_kernel_panic_00000f04": {
                    "handle_kernel_panic": 5,
                    "handle_panic": 1
                },
                "param_1": {
                    "assertion": 1,
                    "assertion_condition": 1,
                    "assertion_failed": 1,
                    "assertion_flag": 2,
                    "assertion_index": 1,
                    "assertion_result": 4,
                    "assertion_status": 2,
                    "condition": 1,
                    "error_code": 1,
                    "index": 12,
                    "input_index": 1,
                    "size": 1,
                    "status": 1,
                    "value_index": 2
                },
                "param_2": {
                    "data": 1,
                    "error_code": 6,
                    "new_value": 3,
                    "panic_message": 2,
                    "result": 2,
                    "result_value": 1,
                    "value": 16
                },
                "param_3": {
                    "address_ptr": 1,
                    "data1": 5,
                    "data_1": 4,
                    "data_ptr_1": 1,
                    "extracted_value1": 2,
                    "extracted_value_1": 4,
                    "new_value_1": 1,
                    "offset_value": 1,
                    "param3": 1,
                    "param_1_new_value": 1,
                    "value1": 3,
                    "value_1": 6,
                    "value_ptr": 1
                },
                "param_4": {
                    "data2": 5,
                    "data_2": 4,
                    "data_ptr": 2,
                    "data_ptr_2": 1,
                    "extracted_value2": 2,
                    "extracted_value_2": 4,
                    "memory_data_value": 1,
                    "new_value_2": 1,
                    "param4": 1,
                    "param_1_new_value": 1,
                    "value2": 3,
                    "value_2": 6
                },
                "set_offset_to_value_one_00001392": {
                    "set_offset_to_one": 2,
                    "set_offset_to_value_one": 7,
                    "set_value_offset": 1
                },
                "uVar1": {
                    "result": 11,
                    "return_val": 1,
                    "return_value": 11
                },
                "update_extracted_values_00001448": {
                    "update_extracted_values": 11
                },
                "update_memory_data_000014c4": {
                    "update_memory_data": 11
                }
            },
            "called": [
                "FUN_00001392",
                "FUN_000014c4",
                "FUN_00000f04",
                "FUN_00001448"
            ],
            "calling": [
                "FUN_00000df4"
            ],
            "code": "\nundefined4 handle_assertion_failure_000013b8(int index,undefined4 value,undefined4 value_1,undefined4 value_2)\n\n{\n  undefined4 result;\n  \n  if (index != 0) {\n    handle_kernel_panic(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = value_1;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = value_2;\n  update_extracted_values(index);\n  set_offset_to_value_one(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    update_memory_data(index,value);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "current_name": "handle_assertion_failure_000013b8",
            "entrypoint": "0x000013b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000013b8": "handle_assertion_failure_000013b8",
                "handle_kernel_panic_00000f04": "handle_kernel_panic",
                "param_1": "index",
                "param_2": "value",
                "param_3": "value_1",
                "param_4": "value_2",
                "set_offset_to_value_one_00001392": "set_offset_to_value_one",
                "uVar1": "result",
                "update_extracted_values_00001448": "update_extracted_values",
                "update_memory_data_000014c4": "update_memory_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001448": {
            "additional_data": {
                "DAT_00006fec": {
                    "data_buffer_1": 1,
                    "values1_data": 1
                },
                "DAT_00006fee": {
                    "data_buffer_2": 1,
                    "values2_data": 1
                },
                "FUN_00001448": {
                    "process_extracted_values": 3,
                    "update_extracted_values": 9,
                    "update_related_values": 1,
                    "update_value": 1,
                    "update_values": 16,
                    "update_values_from_binary": 1
                },
                "int": {
                    "int": 1
                },
                "p1": {
                    "value_ptr": 1
                },
                "p2": {
                    "data_ptr": 1
                },
                "param_1": {
                    "index": 31
                },
                "short": {
                    "short_value": 1,
                    "value": 2
                },
                "short_dat_00006fec": {
                    "extracted_values1": 1
                },
                "short_dat_00006fee": {
                    "extracted_values2": 1
                },
                "update_extracted_value_00001f80": {
                    "update_extracted_value": 9,
                    "update_value": 7,
                    "update_value_2": 1,
                    "update_value_function": 1
                },
                "void": {
                    "void": 1
                }
            },
            "called": [
                "FUN_00001f80"
            ],
            "calling": [
                "FUN_000013b8"
            ],
            "code": "\nvoid update_extracted_values_00001448(int index)\n\n{\n  if (*(value *)(&DAT_00006fec + index * 0x20) != -1) {\n    update_extracted_value(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(value *)(&DAT_00006fee + index * 0x20) != -1) {\n    update_extracted_value(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "current_name": "update_extracted_values_00001448",
            "entrypoint": "0x00001448",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001448": "update_extracted_values_00001448",
                "param_1": "index",
                "short": "value",
                "update_extracted_value_00001f80": "update_extracted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000014c4": {
            "additional_data": {
                "FUN_000014c4": {
                    "improve_code": 1,
                    "initialize_data": 1,
                    "update_configuration": 6,
                    "update_data": 11,
                    "update_memory": 3,
                    "update_memory_block": 1,
                    "update_memory_data": 1,
                    "update_memory_entry": 1,
                    "update_memory_flags": 1,
                    "update_memory_values": 1,
                    "update_settings": 3
                },
                "new_variable_name_1": {
                    "flag": 1
                },
                "new_variable_name_2": {
                    "shifted_value": 1
                },
                "param_1": {
                    "block_index": 1,
                    "entry_index": 1,
                    "index": 29
                },
                "param_2": {
                    "block_size": 2,
                    "divider": 1,
                    "divisor": 6,
                    "size": 2,
                    "value": 20
                },
                "pbVar1": {
                    "byte_array": 2,
                    "config": 3,
                    "config_array": 1,
                    "config_ptr": 2,
                    "current_data": 1,
                    "current_memory": 1,
                    "data": 1,
                    "data_pointer": 7,
                    "data_ptr": 3,
                    "memory_address": 1,
                    "memory_block": 2,
                    "memory_entry": 1,
                    "memory_pointer": 2,
                    "ptr_data": 1,
                    "ptr_to_data": 1,
                    "setting": 1,
                    "settings": 1
                },
                "set_bit_in_memory_00001318": {
                    "set_flag": 1,
                    "set_memory_bit": 2
                },
                "uVar2": {
                    "block_metadata": 1,
                    "config_value": 4,
                    "data": 2,
                    "data_offset": 1,
                    "data_size": 3,
                    "data_value": 4,
                    "data_value1": 1,
                    "entry_value": 1,
                    "flags": 1,
                    "offset": 1,
                    "setting_value": 2,
                    "settings_value": 1,
                    "uint_value1": 1,
                    "value": 1,
                    "value1": 5,
                    "value2": 1,
                    "value_1": 1
                },
                "uVar3": {
                    "adjusted_value": 1,
                    "calculated_value": 7,
                    "data_value2": 1,
                    "div_result": 1,
                    "division_result": 1,
                    "divisor": 2,
                    "new_value": 1,
                    "result": 3,
                    "scaled_value": 2,
                    "shifted_value": 5,
                    "uint_value2": 1,
                    "value": 1,
                    "value2": 4,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_00001318"
            ],
            "calling": [
                "FUN_000013b8"
            ],
            "code": "\nvoid update_memory_data_000014c4(int index,uint value)\n\n{\n  byte *data_pointer;\n  uint value1;\n  uint calculated_value;\n  \n  data_pointer = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  data_pointer[3] = data_pointer[3] & 0xf3;\n  data_pointer[2] = (&DAT_00007001)[index * 0x20];\n  calculated_value = value1 / (value << 4);\n  *data_pointer = (byte)(calculated_value >> 8) & 0x1f;\n  data_pointer[1] = (byte)calculated_value;\n  data_pointer[10] = (byte)((value1 << 2) / value + 1 >> 1) & 0x1f;\n  data_pointer[0x10] = data_pointer[0x10] | 0x88;\n  if ((data_pointer[0x10] & 0x70) == 0) {\n    data_pointer[0x13] = 0;\n  }\n  else {\n    data_pointer[0x13] = (char)(2 << (data_pointer[0x10] >> 4 & 7)) - 1;\n  }\n  data_pointer[0x15] = 1;\n  data_pointer[0x11] = 0xc0;\n  data_pointer[3] = data_pointer[3] | 0x2c;\n  set_memory_bit((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "current_name": "update_memory_data_000014c4",
            "entrypoint": "0x000014c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000014c4": "update_memory_data_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "data_pointer",
                "set_bit_in_memory_00001318": "set_memory_bit",
                "uVar2": "value1",
                "uVar3": "calculated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000015d0": {
            "additional_data": {
                "FUN_000015d0": {
                    "copy_bytes_to_memory": 1,
                    "copy_data": 11,
                    "copy_data_to_buffer": 4,
                    "copy_data_to_dest": 1,
                    "copy_data_to_destination": 3,
                    "copy_data_to_memory": 7,
                    "copy_data_to_pointer": 1,
                    "copy_data_to_ptr": 1,
                    "copy_to_destination": 1
                },
                "F_UNION": {
                    "copy_data": 1
                },
                "iVar1": {
                    "address": 1,
                    "array_pointer": 1,
                    "buffer_address": 3,
                    "buffer_offset": 1,
                    "current_element": 1,
                    "data_address": 1,
                    "data_offset": 2,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "dest_addr": 1,
                    "dest_address": 1,
                    "destination": 2,
                    "destination_address": 6,
                    "destination_index": 1,
                    "destination_ptr": 1,
                    "entry_address": 1,
                    "memory_addr": 1,
                    "pointer_address": 1,
                    "ptr": 1,
                    "ptr_address": 1,
                    "target_address": 1
                },
                "local_c": {
                    "byte_index": 1,
                    "count": 6,
                    "counter": 6,
                    "current_index": 1,
                    "element_counter": 1,
                    "element_index": 1,
                    "i": 9,
                    "index": 4,
                    "iteration_count": 1,
                    "loop_index": 1
                },
                "param_1": {
                    "array_index": 2,
                    "buffer_index": 1,
                    "buffer_offset": 1,
                    "index": 23,
                    "offset": 1,
                    "pointer_index": 1,
                    "source_index": 1,
                    "source_offset": 1
                },
                "param_2": {
                    "data_offset": 1,
                    "dest_offset": 1,
                    "source": 10,
                    "source_addr": 2,
                    "source_address": 11,
                    "source_array": 3,
                    "source_data": 2,
                    "source_ptr": 1
                },
                "param_3": {
                    "count": 2,
                    "data_length": 4,
                    "data_size": 1,
                    "element_count": 1,
                    "length": 14,
                    "num_bytes": 2,
                    "num_elements": 3,
                    "size": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_00000e38"
            ],
            "code": "\nvoid copy_data_to_memory_000015d0(int index,int source_address,uint length)\n\n{\n  int destination_address;\n  uint i;\n  \n  destination_address = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (i = 0; i < length; i = i + 1) {\n    do {\n    } while (-1 < *(char *)(destination_address + 4));\n    *(undefined *)(destination_address + 7) = *(undefined *)(i + source_address);\n  }\n  return;\n}\n\n",
            "current_name": "copy_data_to_memory_000015d0",
            "entrypoint": "0x000015d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000015d0": "copy_data_to_memory_000015d0",
                "iVar1": "destination_address",
                "local_c": "i",
                "param_1": "index",
                "param_2": "source_address",
                "param_3": "length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001628": {
            "additional_data": {
                "0x20": {
                    "entry_size": 1
                },
                "DAT_00006fe4": {
                    "data_array": 2,
                    "data_map": 1,
                    "data_offsets": 1,
                    "data_structure": 1,
                    "function_array": 1,
                    "function_pointer_table": 1
                },
                "DAT_1fff0b6c": {
                    "callback_array": 1,
                    "function_array": 2,
                    "function_pointer_table": 1,
                    "function_pointers": 1,
                    "function_table": 1,
                    "memory_function_table": 1,
                    "memory_protection_flag": 1
                },
                "DAT_1fff0b70": {
                    "arg": 1,
                    "argument_array": 1,
                    "function_argument": 2
                },
                "FUN_00001628": {
                    "execute_callback_if_enabled": 1,
                    "execute_callback_if_flag_set": 1,
                    "execute_code_if_flag_set": 1,
                    "execute_conditional_function": 1,
                    "execute_function": 2,
                    "execute_function_if_condition_met": 2,
                    "execute_memory_function": 5,
                    "execute_memory_operation": 1,
                    "execute_protected_action": 2,
                    "execute_protected_code": 2,
                    "execute_protected_function": 11,
                    "process_data": 1,
                    "process_memory_and_protection": 1
                },
                "byte": {
                    "flag": 1,
                    "flags": 7
                },
                "byte_var": {
                    "flag": 1
                },
                "check_and_set_memory_protection_flag_00001348": {
                    "check_and_set_memory_protection_flag": 7,
                    "ensure_memory_protection_flag": 1,
                    "set_memory_protection_flag": 8,
                    "set_protection_flag": 1,
                    "update_memory_protection_flag": 1
                },
                "code": {
                    "action": 1,
                    "callback": 1,
                    "function": 1,
                    "function_pointer": 4,
                    "function_ptr": 2
                },
                "dataOffsets": {
                    "data_offsets": 1
                },
                "functionPointers": {
                    "function_pointers": 1
                },
                "int": {
                    "address": 1,
                    "function_pointer": 1,
                    "offset": 1,
                    "ptr": 1
                },
                "int_var": {
                    "function_pointer": 1
                },
                "param_1": {
                    "function_index": 1,
                    "index": 29,
                    "operation_index": 1
                },
                "undefined": {
                    "arg2": 1,
                    "parameter2": 1
                },
                "undefined4": {
                    "arg1": 1,
                    "parameter1": 1
                },
                "undefined4_var": {
                    "arg1": 1
                },
                "undefined_var": {
                    "arg2": 1
                }
            },
            "called": [
                "FUN_00001348"
            ],
            "calling": [
                "FUN_00001688"
            ],
            "code": "\nvoid execute_protected_function_00001628(offset index)\n\n{\n  if (((*(flags *)(*(offset *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(offset *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(function_pointer **)(&DAT_1fff0b6c + index * 8))\n              (*(arg1 *)(&DAT_1fff0b70 + index * 8),\n               *(arg2 *)(*(offset *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  set_memory_protection_flag();\n  return;\n}\n\n",
            "current_name": "execute_protected_function_00001628",
            "entrypoint": "0x00001628",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001628": "execute_protected_function_00001628",
                "byte": "flags",
                "check_and_set_memory_protection_flag_00001348": "set_memory_protection_flag",
                "code": "function_pointer",
                "int": "offset",
                "param_1": "index",
                "undefined": "arg2",
                "undefined4": "arg1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001688": {
            "additional_data": {
                "": {
                    "": 1
                },
                "0": {
                    "param": 1,
                    "parameter": 7
                },
                "FUN_00001688": {
                    "execute_function_with_argument_zero": 1,
                    "execute_initialization": 2,
                    "execute_initialization_process": 1,
                    "execute_protected_function": 27
                },
                "FUN_00001688_param_1": {
                    "param": 1
                },
                "execute_protected_function": {
                    "execute_protected_function": 1
                },
                "execute_protected_function_00001628": {
                    "execute_function": 4,
                    "execute_function_with_protection": 1,
                    "execute_protected_function": 18,
                    "execute_with_protection_level": 1,
                    "initialize_protected_function": 1,
                    "protected_function": 1,
                    "start_protected_function": 1
                },
                "execute_protected_function_00001628_param_0": {
                    "param": 1
                },
                "execute_protected_function_00001628_param_0_value": {
                    "0": 1
                },
                "execute_protected_function_00001628_param_1": {
                    "param": 1,
                    "param_1": 1
                }
            },
            "called": [
                "FUN_00001628"
            ],
            "calling": [],
            "code": "\nvoid execute_protected_function_00001688(void)\n\n{\n  execute_protected_function_00001688(0);\n  return;\n}\n\n",
            "current_name": "execute_protected_function_00001688",
            "entrypoint": "0x00001688",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001688": "execute_protected_function_00001688",
                "execute_protected_function_00001628": "execute_protected_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001696": {
            "additional_data": {
                "0x2000000": {
                    "constant_offset": 1
                },
                "FUN_00001696": {
                    "calculate_modified_value": 1,
                    "calculate_new_value": 1,
                    "calculate_offset": 22,
                    "calculate_result": 3,
                    "calculate_return_value": 1,
                    "calculate_updated_value": 1,
                    "calculate_value": 1,
                    "multiply_and_shift": 1
                },
                "multiplied_offset": {
                    "result": 1
                },
                "offset": {
                    "constant_offset": 1,
                    "offset": 1
                },
                "offset_sum": {
                    "final_result": 1
                },
                "param_1": {
                    "address": 3,
                    "base_address": 4,
                    "data_mask": 1,
                    "input": 1,
                    "input_1": 1,
                    "input_number": 1,
                    "input_value": 11,
                    "input_value_1": 1,
                    "offset": 2,
                    "offset_input": 1,
                    "original_value": 1,
                    "value": 2,
                    "value1": 2
                },
                "param_1_changed": {
                    "base_portion": 1
                },
                "param_1_mask": {
                    "base_mask": 1
                },
                "param_1_shifted": {
                    "input_shifted": 1,
                    "shifted_base": 1
                },
                "param_1_shifted_changed": {
                    "shifted_portion": 1
                },
                "param_2": {
                    "index": 4,
                    "input_2": 1,
                    "input_value_2": 1,
                    "multiplier": 21,
                    "multiplier_factor": 1,
                    "offset": 1,
                    "offset_multiplier": 1,
                    "value2": 1
                },
                "param_2_changed": {
                    "multiplied_index": 1
                },
                "param_3": {
                    "multiplier": 2,
                    "offset": 1
                },
                "param_4": {
                    "constant": 1,
                    "shift_amount": 1
                },
                "param_5": {
                    "bitmask": 1,
                    "constant": 1
                },
                "param_6": {
                    "shift": 1
                },
                "result": {
                    "calculated_offset": 1,
                    "improved_result": 1,
                    "offset": 1,
                    "output": 1
                },
                "value1": {
                    "input_value": 1
                },
                "value2": {
                    "shifted_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001710",
                "FUN_000016c8",
                "FUN_000016ec"
            ],
            "code": "\nint calculate_offset_00001696(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "current_name": "calculate_offset_00001696",
            "entrypoint": "0x00001696",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000016c8": {
            "additional_data": {
                "FUN_000016c8": {
                    "initialize_memory": 1,
                    "initialize_offset": 4,
                    "initialize_value": 1,
                    "set_flag": 3,
                    "set_offset_to1": 3,
                    "set_offset_to_one": 11,
                    "set_offset_to_value": 6,
                    "set_offset_to_value_one": 1,
                    "set_to_one": 1
                },
                "calculate_offset_00001696": {
                    "calculate_offset": 1
                },
                "param_1": {
                    "base_address": 2,
                    "input1": 7,
                    "input_param": 2,
                    "input_parameter": 1,
                    "offset": 16,
                    "offset_address": 1,
                    "param": 1,
                    "source_address": 1
                },
                "param_2": {
                    "data": 7,
                    "flag": 1,
                    "input": 1,
                    "input2": 7,
                    "offset": 3,
                    "target_address": 1,
                    "undefined": 1,
                    "undefined_param": 1,
                    "value": 9
                },
                "puVar1": {
                    "flag_address": 1,
                    "flag_ptr": 1,
                    "offset_address": 1,
                    "offset_pointer": 17,
                    "offset_ptr": 7,
                    "result_pointer": 2,
                    "result_ptr": 1,
                    "target_address": 1
                }
            },
            "called": [
                "FUN_00001696"
            ],
            "calling": [
                "FUN_000017dc"
            ],
            "code": "\nvoid set_offset_to_value_one_000016c8(undefined4 offset,undefined value)\n\n{\n  undefined4 *offset_pointer;\n  \n  offset_pointer = (undefined4 *)calculate_offset(offset,value);\n  *offset_pointer = 1;\n  return;\n}\n\n",
            "current_name": "set_offset_to_value_one_000016c8",
            "entrypoint": "0x000016c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000016c8": "set_offset_to_value_one_000016c8",
                "calculate_offset_00001696": "calculate_offset",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offset_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000016ec": {
            "additional_data": {
                "FUN_000016ec": {
                    "initialize_memory": 1,
                    "mark_offset_as_one": 2,
                    "set_flag": 1,
                    "set_flag_to_true": 1,
                    "set_memory_value_to_true": 1,
                    "set_offset": 2,
                    "set_offset_to1": 6,
                    "set_offset_to_one": 10,
                    "set_offset_to_value": 5,
                    "set_offset_to_value_one": 1,
                    "set_offset_value": 1
                },
                "calculate_offset_00001696": {
                    "calculate_offset": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 2,
                    "data": 1,
                    "input1": 3,
                    "input_param": 2,
                    "input_pointer": 1,
                    "memory_address": 1,
                    "new_value": 1,
                    "offset": 15,
                    "offset_param": 1,
                    "offset_parameter": 1,
                    "offset_value": 1,
                    "value_offset": 1
                },
                "param_2": {
                    "another_param": 1,
                    "arg2": 2,
                    "data": 1,
                    "input": 1,
                    "input2": 3,
                    "input_data": 1,
                    "offset": 3,
                    "target_memory_location": 1,
                    "undefined_param": 2,
                    "undefined_parameter": 1,
                    "value": 15
                },
                "puVar1": {
                    "memory_address": 1,
                    "memory_location": 1,
                    "offset_pointer": 18,
                    "offset_ptr": 4,
                    "pointer": 1,
                    "pointer_to_offset": 1,
                    "ptr_to_offset": 1,
                    "target_address": 1,
                    "target_pointer": 1
                }
            },
            "called": [
                "FUN_00001696"
            ],
            "calling": [
                "FUN_00001a18",
                "FUN_00001a60",
                "FUN_0000182c",
                "FUN_00001a3c",
                "FUN_00001778"
            ],
            "code": "\nvoid set_offset_to_value_one_000016ec(undefined4 offset,undefined value)\n\n{\n  undefined *offset_pointer;\n  \n  offset_pointer = (undefined *)calculate_offset(offset,value);\n  *offset_pointer = 1;\n  return;\n}\n\n",
            "current_name": "set_offset_to_value_one_000016ec",
            "entrypoint": "0x000016ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000016ec": "set_offset_to_value_one_000016ec",
                "calculate_offset_00001696": "calculate_offset",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offset_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001710": {
            "additional_data": {
                "FUN_00001710": {
                    "clear_memory": 27,
                    "clear_offset_value": 1,
                    "initialize_memory": 1,
                    "initialize_offset": 1,
                    "set_offset_to_zero": 1
                },
                "param_1": {
                    "address": 3,
                    "input1": 4,
                    "input_param1": 1,
                    "input_pointer": 1,
                    "offset": 15,
                    "offset_address": 2,
                    "param": 1,
                    "param1": 1,
                    "ptr": 1,
                    "size": 1,
                    "value1": 1
                },
                "param_2": {
                    "data": 7,
                    "input2": 4,
                    "input_param2": 1,
                    "offset": 3,
                    "param2": 1,
                    "size": 2,
                    "undefined_value": 1,
                    "value": 11,
                    "value2": 1
                },
                "puVar1": {
                    "address": 1,
                    "memory_address": 9,
                    "memory_location": 3,
                    "memory_pointer": 6,
                    "offset_pointer": 2,
                    "offset_ptr": 1,
                    "ptr_to_address": 1,
                    "ptr_to_clear": 1,
                    "ptr_to_offset": 1,
                    "target_address": 4,
                    "target_memory": 1,
                    "target_ptr": 1
                }
            },
            "called": [
                "FUN_00001696"
            ],
            "calling": [
                "FUN_000019c0",
                "FUN_00001734",
                "FUN_000018bc",
                "FUN_00001a60",
                "FUN_00001960",
                "FUN_0000182c",
                "FUN_00001bb8",
                "FUN_00001778"
            ],
            "code": "\nvoid clear_memory_00001710(undefined4 offset,undefined value)\n\n{\n  undefined *memory_address;\n  \n  memory_address = (undefined *)calculate_offset_00001696(offset,value);\n  *memory_address = 0;\n  return;\n}\n\n",
            "current_name": "clear_memory_00001710",
            "entrypoint": "0x00001710",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001734": {
            "additional_data": {
                "6": {
                    "num_bytes": 1
                },
                "DAT_40064005": {
                    "data": 1,
                    "data_buffer": 1,
                    "data_pointer": 3,
                    "memory_block": 3,
                    "memory_data": 2
                },
                "FUN_00001734": {
                    "clear_buffer": 1,
                    "clear_data": 1,
                    "clear_memory": 26,
                    "initialize_memory": 3
                },
                "clear_memory_00001710": {
                    "clear_memory": 12,
                    "clear_memory_block": 2,
                    "clear_memory_helper": 3,
                    "clear_memory_sub": 1
                }
            },
            "called": [
                "FUN_00001710"
            ],
            "calling": [
                "FUN_000019c0",
                "FUN_00001a18",
                "FUN_00001a3c"
            ],
            "code": "\nvoid clear_memory_00001734(void)\n\n{\n  clear_memory_00001734(&DAT_40064005,6);\n  return;\n}\n\n",
            "current_name": "clear_memory_00001734",
            "entrypoint": "0x00001734",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001734": "clear_memory_00001734",
                "clear_memory_00001710": "clear_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001748": {
            "additional_data": {
                "DAT_40064003": {
                    "combined_byte": 1,
                    "current_bits": 1,
                    "current_flags": 1,
                    "existing_bits": 1,
                    "existing_byte": 1,
                    "existing_flags": 1,
                    "existing_value": 3,
                    "flag_register": 1,
                    "flags": 3,
                    "masked_value": 1,
                    "previous_bits": 1,
                    "register_value": 1
                },
                "FUN_00001748": {
                    "combine_and_mask_bytes": 1,
                    "merge_and_mask": 1,
                    "merge_bits": 1,
                    "set_bits_in_variable": 2,
                    "update_bit_and_mask": 1,
                    "update_bits": 2,
                    "update_bits_on_byte": 1,
                    "update_bits_with_mask": 1,
                    "update_byte_mask": 1,
                    "update_byte_with_mask": 1,
                    "update_data_with_mask": 1,
                    "update_flag": 2,
                    "update_flag_bits": 1,
                    "update_flag_value": 1,
                    "update_flags": 8,
                    "update_masked_value": 1,
                    "update_parameter_with_mask": 1,
                    "update_permission_flag": 1,
                    "update_register": 1,
                    "update_variable_with_mask": 1
                },
                "param_1": {
                    "bitmask": 1,
                    "bits_to_be_updated": 1,
                    "bits_to_set": 1,
                    "byte_to_combine": 1,
                    "byte_to_merge": 1,
                    "byte_to_update": 1,
                    "data": 1,
                    "flag": 1,
                    "flag_value": 2,
                    "input": 3,
                    "input_byte": 6,
                    "input_data": 1,
                    "input_flag": 1,
                    "input_value": 2,
                    "new_input_byte": 1,
                    "new_parameter": 1,
                    "new_value": 3,
                    "permission_flag": 1,
                    "updated_byte": 1,
                    "value": 1
                },
                "param_2": {
                    "mask": 1
                },
                "param_n": {
                    "new_parameter_name_n": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000019c0",
                "FUN_000018bc",
                "FUN_0000191c",
                "FUN_00001960",
                "FUN_00001bb8"
            ],
            "code": "\nvoid update_flags_00001748(byte input_byte)\n\n{\n  DAT_40064003 = input_byte | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "current_name": "update_flags_00001748",
            "entrypoint": "0x00001748",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001748": "update_flags_00001748",
                "param_1": "input_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001778": {
            "additional_data": {
                "DAT_40064001": {
                    "data": 5,
                    "data_access_permissions": 1,
                    "data_register": 1,
                    "memory": 1,
                    "memory_flags": 2,
                    "memory_status": 1,
                    "register_value": 1
                },
                "FUN_00001778": {
                    "clear_and_set_flag": 2,
                    "clear_and_set_flags": 1,
                    "clear_and_set_memory": 1,
                    "clear_and_set_memory_flags": 1,
                    "clear_bits_and_clear_memory": 1,
                    "clear_bits_in_register": 1,
                    "clear_memory": 11,
                    "clear_register_bits": 1,
                    "initialize_memory": 4,
                    "update_and_clear_memory": 1,
                    "update_data_access_permissions": 1,
                    "update_memory": 2,
                    "update_memory_and_clear": 1,
                    "update_memory_flags": 2,
                    "update_memory_status": 1
                },
                "clear_memory_00001710": {
                    "clear_buffer": 1,
                    "clear_memory": 22,
                    "clear_memory_helper": 2,
                    "clear_memory_recursive": 1,
                    "clear_register_memory": 1
                }
            },
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid clear_bits_and_clear_memory_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  clear_memory(&DAT_40064001,2);\n  return;\n}\n\n",
            "current_name": "clear_bits_and_clear_memory_00001778",
            "entrypoint": "0x00001778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001778": "clear_bits_and_clear_memory_00001778",
                "clear_memory_00001710": "clear_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000017dc": {
            "additional_data": {
                "DAT_4004803c": {
                    "device_configuration": 1,
                    "offset_value": 1
                },
                "FUN_000017dc": {
                    "configure_hardware": 1,
                    "initialize_device": 1,
                    "initialize_hardware": 2,
                    "initialize_memory": 7,
                    "initialize_memory_config": 1,
                    "initialize_offset_and_flags": 1,
                    "initialize_offsets": 1,
                    "initialize_registers": 1,
                    "initialize_system": 1,
                    "set_offset_and_check_flag": 1,
                    "set_offset_and_check_status": 2,
                    "set_offset_and_conditionally_set_data": 1,
                    "set_offset_and_value": 7,
                    "set_offset_to_value_one": 2,
                    "update_memory_configuration": 1,
                    "update_offset_and_value": 1
                },
                "_DATA_4003d010": {
                    "status_register": 1
                },
                "_DATA_40047000": {
                    "control_register": 1
                },
                "_DAT_4003d010": {
                    "control_reg": 1,
                    "control_register": 4,
                    "flag": 2,
                    "flag_value": 1,
                    "hardware_status": 2,
                    "memory_config": 1,
                    "memory_status": 1,
                    "register_flags": 2,
                    "register_status": 1,
                    "register_value": 3,
                    "some_flag": 1,
                    "status": 2,
                    "status_register": 9
                },
                "_DAT_40047000": {
                    "configuration_register": 1,
                    "control_register": 1,
                    "data_register": 2,
                    "device_configuration_register": 1,
                    "hardware_config_register": 1,
                    "hardware_control_register": 1,
                    "memory_address": 2,
                    "memory_address_variable": 1,
                    "memory_config": 1,
                    "memory_configuration_register": 4,
                    "memory_layout_flags": 1,
                    "memory_offset": 1,
                    "memory_reg": 1,
                    "memory_register": 3,
                    "memory_status": 1,
                    "memory_value": 3,
                    "offset_and_value": 1,
                    "register": 1,
                    "register_value": 3
                },
                "_DAT_4004803c": {
                    "memory_address": 1,
                    "offset_variable": 1
                },
                "data_1": {
                    "value": 1
                },
                "set_offset_to_value_one_000016c8": {
                    "set_offset_to_one": 2,
                    "set_offset_to_value": 1,
                    "set_offset_to_value_one": 6
                }
            },
            "called": [
                "FUN_000016c8"
            ],
            "calling": [
                "FUN_00001c84"
            ],
            "code": "\n\n\nvoid initialize_memory_config_000017dc(void)\n\n{\n  set_offset_to_value_one(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_config_000017dc",
            "entrypoint": "0x000017dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000017dc": "initialize_memory_config_000017dc",
                "set_offset_to_value_one_000016c8": "set_offset_to_value_one"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000182c": {
            "additional_data": {
                "DAT_40064000": {
                    "memory_array": 1
                },
                "DAT_40064001": {
                    "offset_array": 1
                },
                "FUN_0000182c": {
                    "clear_memory": 1,
                    "clear_memory_and_set_offset": 13,
                    "initialize_data": 4,
                    "initialize_memory": 9,
                    "modify_data": 1,
                    "update_data_and_clear_memory": 1,
                    "update_data_offset": 1,
                    "update_memory_values": 1
                },
                "clear_memory_00001710": {
                    "clear_memory": 30
                },
                "set_offset_to_value_one_000016ec": {
                    "set_offset": 1,
                    "set_offset_to_one": 9,
                    "set_offset_to_value_one": 20
                }
            },
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "calling": [
                "FUN_00001c84"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid clear_memory_and_set_offset_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  set_offset_to_value_one(&DAT_40064001,0);\n  clear_memory(&DAT_40064000,1);\n  clear_memory(&DAT_40064000,0);\n  return;\n}\n\n",
            "current_name": "clear_memory_and_set_offset_0000182c",
            "entrypoint": "0x0000182c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000182c": "clear_memory_and_set_offset_0000182c",
                "clear_memory_00001710": "clear_memory",
                "set_offset_to_value_one_000016ec": "set_offset_to_value_one"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000018bc": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "counter": 2,
                    "data_value": 1,
                    "error_count": 1,
                    "temp_variable": 1
                },
                "DAT_40064000": {
                    "data_register": 1,
                    "flags": 1,
                    "status_flags": 1,
                    "system_config": 1,
                    "system_flags": 1
                },
                "DAT_40064001": {
                    "memory": 1,
                    "memory_address": 1,
                    "memory_location": 2
                },
                "DAT_40064006": {
                    "control_flags": 1,
                    "device_status": 1,
                    "status": 1,
                    "status_register": 2
                },
                "FUN_000018bc": {
                    "initialize": 1,
                    "initialize_device": 1,
                    "initialize_flags": 4,
                    "initialize_memory": 8,
                    "initialize_system": 13,
                    "update_and_clear_flags": 1,
                    "update_and_clear_memory": 3
                },
                "clear_memory_00001710": {
                    "clear_buffer": 1,
                    "clear_device_memory": 1,
                    "clear_memory": 27,
                    "clear_specific_memory": 1
                },
                "update_flags_00001748": {
                    "set_device_flags": 1,
                    "set_flag": 3,
                    "set_flags": 2,
                    "set_status_flags": 1,
                    "update_flags": 21,
                    "update_status_flags": 1
                }
            },
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_system_000018bc(void)\n\n{\n  update_flags(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  clear_memory(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_system_000018bc",
            "entrypoint": "0x000018bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000018bc": "initialize_system_000018bc",
                "clear_memory_00001710": "clear_memory",
                "update_flags_00001748": "update_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000191c": {
            "additional_data": {
                "0x3b": {
                    "bit_mask": 1
                },
                "0x40": {
                    "flag_value": 2
                },
                "DAT_1fff0b74": {
                    "": 1,
                    "completion_flag": 1,
                    "completion_status": 1,
                    "control_variable": 1,
                    "counter": 1,
                    "flag": 2,
                    "flag_data3": 1,
                    "flag_variable": 2,
                    "initialization_result": 1,
                    "initialized": 2,
                    "initialized_variable": 1,
                    "is_initialized": 3,
                    "result_flag": 1,
                    "status": 1,
                    "status_variable": 1,
                    "system_flag": 1,
                    "system_initialized": 1,
                    "system_initialized_flag": 1,
                    "system_status": 1,
                    "termination_variable": 1
                },
                "DAT_40064000": {
                    "": 1,
                    "config_register": 1,
                    "data": 3,
                    "data1": 1,
                    "data_register": 3,
                    "data_value": 1,
                    "data_variable": 1,
                    "data_variable_1": 1,
                    "flag_data": 1,
                    "flag_register": 2,
                    "flag_value": 1,
                    "flag_variable": 1,
                    "flags": 3,
                    "system_flags": 3,
                    "system_register": 1
                },
                "DAT_40064006": {
                    "": 1,
                    "condition": 1,
                    "control": 1,
                    "control_register": 2,
                    "control_variable": 1,
                    "data2": 1,
                    "data_variable_2": 1,
                    "flag_check": 1,
                    "flag_data2": 1,
                    "flag_variable": 1,
                    "flags": 3,
                    "status": 1,
                    "status_bits": 1,
                    "status_register": 5,
                    "system_flags": 1,
                    "system_status": 3
                },
                "FUN_0000191c": {
                    "initialize": 3,
                    "initialize_and_update": 1,
                    "initialize_and_wait": 2,
                    "initialize_data": 2,
                    "initialize_flags": 11,
                    "initialize_flags_and_memory": 1,
                    "initialize_memory": 2,
                    "initialize_memory_and_flags": 1,
                    "initialize_system": 8
                },
                "PTR_40064000": {
                    "memory_location": 1
                },
                "PTR_PARAM": {
                    "new_parameter": 1
                },
                "clearBitsAndMemory": {
                    "": 1,
                    "clear_bits_and_memory": 2
                },
                "clear_bits_and_clear_memory": {
                    "clear_bits_and_clear_memory": 1
                },
                "clear_bits_and_clear_memory_00001778": {
                    "clear_bits_and_clear_memory": 9,
                    "clear_bits_and_memory": 18,
                    "clear_memory": 4
                },
                "clear_bits_and_memory": {
                    "clear_bits_and_memory": 1
                },
                "initialize": {
                    "initialize": 1
                },
                "initializeData": {
                    "initialize_data": 1
                },
                "initializeFlags": {
                    "": 1
                },
                "initialize_flags": {
                    "initialize_flags": 2
                },
                "set_flag": {
                    "set_flag": 2
                },
                "updateFlags": {
                    "": 1,
                    "update_flags": 2
                },
                "update_flags_00001748": {
                    "set_flag": 12,
                    "update_flag": 1,
                    "update_flags": 18
                }
            },
            "called": [
                "FUN_00001748",
                "FUN_00001778"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_memory_and_flags_0000191c(void)\n\n{\n  clear_bits_and_memory();\n  update_flags(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_memory_and_flags_0000191c",
            "entrypoint": "0x0000191c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000191c": "initialize_memory_and_flags_0000191c",
                "clear_bits_and_clear_memory_00001778": "clear_bits_and_memory",
                "update_flags_00001748": "update_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001960": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "count": 1,
                    "operation_status": 1,
                    "process_status": 1,
                    "result": 3,
                    "status": 1,
                    "system_state": 2,
                    "system_status": 1
                },
                "DAT_40064000": {
                    "data_reg": 1,
                    "data_register": 1,
                    "data_value": 1,
                    "flags": 3,
                    "register_value": 1,
                    "system_config": 1,
                    "system_configuration": 1,
                    "system_flags": 1
                },
                "DAT_40064001": {
                    "data_block": 1,
                    "data_buffer": 1,
                    "memory_address": 1,
                    "memory_block": 1,
                    "memory_buffer": 1,
                    "memory_location": 2
                },
                "DAT_40064006": {
                    "control_reg": 1,
                    "flag": 1,
                    "flag_register": 1,
                    "flags": 1,
                    "status": 1,
                    "status_register": 2,
                    "system_status": 2
                },
                "FUN_00001960": {
                    "initialize_data": 4,
                    "initialize_memory": 15,
                    "initialize_system": 11,
                    "update_and_clear_memory": 1
                },
                "clearMemory": {
                    "clear_memory": 1
                },
                "clear_memory_00001710": {
                    "clear_memory": 30
                },
                "initializeSystem": {
                    "initialize_system": 1
                },
                "updateFlags": {
                    "update_flags": 1
                },
                "update_flags_00001748": {
                    "set_flag": 4,
                    "set_flags": 2,
                    "update_flags": 24
                }
            },
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_memory_00001960(void)\n\n{\n  update_flags(0xa0);\n  clear_memory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "current_name": "initialize_memory_00001960",
            "entrypoint": "0x00001960",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001960": "initialize_memory_00001960",
                "clear_memory_00001710": "clear_memory",
                "update_flags_00001748": "update_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000019c0": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "constant": 1,
                    "counter": 2,
                    "data_variable3": 1,
                    "data_variable4": 1,
                    "error_flag": 1,
                    "result": 1,
                    "status": 2,
                    "status_code": 1,
                    "status_variable": 1
                },
                "DAT_40064000": {
                    "control_flags": 1,
                    "control_register": 1,
                    "data": 2,
                    "data_value": 2,
                    "data_var": 1,
                    "data_variable": 3,
                    "data_variable2": 1,
                    "flag": 2,
                    "memory_data": 1,
                    "memory_value": 1,
                    "peripheral_status": 1,
                    "updated_value": 1
                },
                "DAT_40064001": {
                    "data_buffer": 3,
                    "data_pointer": 2,
                    "data_variable1": 1,
                    "input_data": 1,
                    "memory_block": 2,
                    "memory_ptr": 1,
                    "peripheral_data": 1
                },
                "DAT_40064006": {
                    "control_bits": 1,
                    "control_data": 1,
                    "control_register": 2,
                    "data2": 1,
                    "data_flag": 1,
                    "data_mask": 1,
                    "data_variable2": 2,
                    "data_variable3": 1,
                    "flag_var": 1,
                    "peripheral_config": 1,
                    "register_value": 1,
                    "state_variable": 1,
                    "status_flags": 1,
                    "status_register": 1
                },
                "FUN_000019c0": {
                    "clear_and_update_memory": 1,
                    "initialize_data": 4,
                    "initialize_flags": 5,
                    "initialize_flags_and_memory": 1,
                    "initialize_memory": 6,
                    "initialize_memory_and_flags": 2,
                    "initialize_peripheral": 1,
                    "initialize_program": 1,
                    "initialize_system": 10
                },
                "clear_bits_and_clear_memory_00001778": {
                    "clear_bits_and_clear_memory": 9,
                    "clear_bits_and_memory": 15,
                    "clear_flags_and_memory": 2,
                    "clear_peripheral_bits_and_memory": 1
                },
                "clear_memory_00001710": {
                    "clear_memory": 29
                },
                "clear_memory_00001734": {
                    "clear_additional_memory": 7,
                    "clear_cache": 1,
                    "clear_memory": 3,
                    "clear_memory2": 6,
                    "clear_memory_after_loop": 1,
                    "clear_memory_block": 1,
                    "clear_memory_blocks": 1,
                    "clear_memory_conditionally": 1,
                    "clear_memory_final_step": 1,
                    "clear_memory_loop": 1,
                    "clear_peripheral_memory": 1,
                    "clear_remaining_memory": 1,
                    "clear_reserved_memory": 1,
                    "reset_memory": 2
                },
                "update_flags_00001748": {
                    "set_flag": 4,
                    "update_flags": 25
                }
            },
            "called": [
                "FUN_00001734",
                "FUN_00001710",
                "FUN_00001748",
                "FUN_00001778"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_flags_and_memory_000019c0(void)\n\n{\n  clear_bits_and_memory();\n  update_flags(0x40);\n  clear_memory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  clear_additional_memory();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "current_name": "initialize_flags_and_memory_000019c0",
            "entrypoint": "0x000019c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000019c0": "initialize_flags_and_memory_000019c0",
                "clear_bits_and_clear_memory_00001778": "clear_bits_and_memory",
                "clear_memory_00001710": "clear_memory",
                "clear_memory_00001734": "clear_additional_memory",
                "update_flags_00001748": "update_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001a18": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "default_value": 1,
                    "memory_size": 2,
                    "memory_value": 1
                },
                "DAT_40064001": {
                    "memory_address": 1
                },
                "FUN_00001a18": {
                    "initialize_data": 1,
                    "initialize_memory": 28,
                    "set_offset_and_clear_memory": 1,
                    "set_offset_to_value_one": 1
                },
                "clear_memory_00001734": {
                    "clear_memory": 30
                },
                "set_offset_to_value_one_000016ec": {
                    "set_initial_offset": 1,
                    "set_offset_to_one": 11,
                    "set_offset_to_value_one": 16,
                    "set_offset_value": 2
                }
            },
            "called": [
                "FUN_00001734",
                "FUN_000016ec"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_memory_00001a18(void)\n\n{\n  set_offset_to_value_one(&DAT_40064001,1);\n  clear_memory();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "current_name": "initialize_memory_00001a18",
            "entrypoint": "0x00001a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001a18": "initialize_memory_00001a18",
                "clear_memory_00001734": "clear_memory",
                "set_offset_to_value_one_000016ec": "set_offset_to_value_one"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "data_value": 1,
                    "initial_value": 1,
                    "memory_size": 4,
                    "value_to_update": 1
                },
                "DAT_40064001": {
                    "memory_offset": 1
                },
                "FUN_00001a3c": {
                    "initialize_data": 2,
                    "initialize_memory": 23,
                    "set_memory_offset_and_value": 1,
                    "set_offset_and_clear_memory": 5
                },
                "clear_memory_00001734": {
                    "clear_memory": 30
                },
                "set_offset_to_value_one_000016ec": {
                    "set_offset_to_one": 8,
                    "set_offset_to_value_one": 20,
                    "set_one_offset": 1
                }
            },
            "called": [
                "FUN_00001734",
                "FUN_000016ec"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_memory_00001a3c(void)\n\n{\n  set_offset_to_value_one(&DAT_40064001,1);\n  clear_memory();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "current_name": "initialize_memory_00001a3c",
            "entrypoint": "0x00001a3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001a3c": "initialize_memory_00001a3c",
                "clear_memory_00001734": "clear_memory",
                "set_offset_to_value_one_000016ec": "set_offset_to_value_one"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001a60": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "constant_value": 3,
                    "data_value": 1,
                    "memory_data5": 1,
                    "new_offset_value": 1,
                    "new_value": 1,
                    "new_variable": 1,
                    "offset": 1,
                    "offset_value": 1,
                    "result": 1,
                    "value": 2
                },
                "DAT_40064000": {
                    "control_byte": 1,
                    "control_register": 1,
                    "data_flag": 1,
                    "flag": 1,
                    "flags": 1,
                    "memory_data": 3,
                    "memory_data2": 1,
                    "memory_value": 4
                },
                "DAT_40064001": {
                    "memory": 1,
                    "memory_address": 8,
                    "memory_block": 1,
                    "memory_data1": 1,
                    "pointer_to_memory": 1
                },
                "DAT_40064005": {
                    "memory_data4": 1,
                    "offset": 3,
                    "offset_address": 3,
                    "offset_data": 1,
                    "offset_pointer": 1,
                    "offset_register": 1,
                    "offset_value": 1,
                    "value_block": 1
                },
                "DAT_40064006": {
                    "memory_data3": 1,
                    "memory_status": 1,
                    "offset_data": 1,
                    "offset_value": 1,
                    "status": 3,
                    "status_byte": 1,
                    "status_flag": 1,
                    "status_register": 4
                },
                "FUN_00001a60": {
                    "clear_memory_and_set_offset": 1,
                    "initialize_memory": 29,
                    "initialize_memory_offsets": 1
                },
                "clearMemory": {
                    "clear_memory": 3
                },
                "clear_memory_00001710": {
                    "clear_memory": 30
                },
                "initializeMemory": {
                    "initialize_memory": 3
                },
                "setOffsetToOne": {
                    "set_offset_to_one": 3
                },
                "set_offset_to_value_one_000016ec": {
                    "set_offset_to_one": 11,
                    "set_offset_to_value": 1,
                    "set_offset_to_value_one": 18
                }
            },
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_memory_offsets_00001a60(void)\n\n{\n  clear_memory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  set_offset_to_value_one(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "current_name": "initialize_memory_offsets_00001a60",
            "entrypoint": "0x00001a60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001a60": "initialize_memory_offsets_00001a60",
                "clear_memory_00001710": "clear_memory",
                "set_offset_to_value_one_000016ec": "set_offset_to_value_one"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "constant": 1,
                    "control_value": 1,
                    "count": 4,
                    "counter": 10,
                    "error_flag": 1,
                    "flag": 1,
                    "init_value": 1,
                    "initial_value": 2,
                    "output_data": 2,
                    "output_value": 3,
                    "result": 1,
                    "status": 2,
                    "value": 1,
                    "variable": 1
                },
                "DAT_40064000": {
                    "config_flag": 1,
                    "configuration_flags": 1,
                    "data": 5,
                    "data_flag": 9,
                    "data_flags": 1,
                    "data_mask": 2,
                    "data_register": 1,
                    "flag_register": 1,
                    "flags": 4,
                    "input_data": 1,
                    "mask": 1,
                    "masked_value": 1,
                    "settings": 1,
                    "status_flag": 1,
                    "value_and_count": 1
                },
                "DAT_40064006": {
                    "check_flag": 1,
                    "check_flags": 1,
                    "check_value": 1,
                    "control": 2,
                    "control_bits": 2,
                    "control_flag": 6,
                    "control_register": 1,
                    "data_mask": 3,
                    "flag": 2,
                    "flags": 1,
                    "input_data": 1,
                    "mask": 1,
                    "status": 5,
                    "status_flag": 1,
                    "status_register": 3
                },
                "FUN_00001ad4": {
                    "clear_bits_and_set_count": 1,
                    "clear_bits_and_set_flag": 1,
                    "clear_bits_and_set_seven": 1,
                    "clear_bits_and_update": 1,
                    "clear_flag_bits": 1,
                    "clear_flags": 1,
                    "clear_flags_and_set_initial_value": 1,
                    "initialize_data": 15,
                    "initialize_settings": 1,
                    "reset_variable": 1,
                    "sanitize_data": 1,
                    "set_and_check_flags": 1,
                    "update_configuration": 1,
                    "update_data": 3,
                    "update_value_and_count": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_data_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "current_name": "initialize_data_00001ad4",
            "entrypoint": "0x00001ad4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001b10": {
            "additional_data": {
                "DAT_00007004": {
                    "component_initialization_table": 1,
                    "component_table": 1
                },
                "DAT_1fff0b74": {
                    "component_count": 3
                },
                "FUN_00001b10": {
                    "initialize_all_components": 2,
                    "initialize_component": 2,
                    "initialize_components": 14,
                    "initialize_functions": 1,
                    "initialize_resources": 1,
                    "initialize_sequential_operations": 1,
                    "initialize_subsystems": 2,
                    "initialize_system": 3,
                    "initialize_system_components": 5
                },
                "initialize_data_00001ad4": {
                    "initialize_data": 1
                },
                "initialize_flags_and_memory_000019c0": {
                    "initialize_flags_and_memory": 1
                },
                "initialize_memory_00001960": {
                    "initialize_memory": 1
                },
                "initialize_memory_00001a18": {
                    "initialize_memory": 1
                },
                "initialize_memory_00001a3c": {
                    "initialize_memory": 1
                },
                "initialize_memory_and_flags_0000191c": {
                    "initialize_memory_and_flags": 1
                },
                "initialize_memory_offsets_00001a60": {
                    "initialize_memory_offsets": 1
                },
                "initialize_system_000018bc": {
                    "initialize_system": 1
                },
                "param_1": {
                    "byte_value": 2,
                    "component_count": 1,
                    "component_id": 2,
                    "component_index": 16,
                    "component_type": 2,
                    "index": 2,
                    "input_param": 1,
                    "operation_number": 1,
                    "param": 1,
                    "resource_count": 1,
                    "subsystem_count": 1,
                    "system_count": 1
                },
                "uVar1": {
                    "result": 27,
                    "result_code": 1,
                    "return_value": 2,
                    "status": 1
                }
            },
            "called": [
                "FUN_000019c0",
                "FUN_00001a18",
                "FUN_00001ad4",
                "FUN_000018bc",
                "FUN_00001a60",
                "FUN_00001960",
                "FUN_0000191c",
                "FUN_00001a3c"
            ],
            "calling": [
                "FUN_00001c84"
            ],
            "code": "\nundefined4 initialize_system_components_00001b10(byte component_index)\n\n{\n  undefined4 result;\n  \n  if (component_index < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)component_index + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        initialize_system();\n        break;\n      case 1:\n        initialize_memory_and_flags();\n        break;\n      case 2:\n        initialize_memory();\n        break;\n      case 3:\n        initialize_flags_and_memory();\n        break;\n      case 4:\n        initialize_memory();\n        break;\n      case 5:\n        initialize_memory();\n        break;\n      case 6:\n        initialize_memory_offsets();\n        break;\n      case 7:\n        initialize_data();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (component_index != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_system_components_00001b10",
            "entrypoint": "0x00001b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001b10": "initialize_system_components_00001b10",
                "initialize_data_00001ad4": "initialize_data",
                "initialize_flags_and_memory_000019c0": "initialize_flags_and_memory",
                "initialize_memory_00001960": "initialize_memory",
                "initialize_memory_00001a18": "initialize_memory",
                "initialize_memory_00001a3c": "initialize_memory",
                "initialize_memory_and_flags_0000191c": "initialize_memory_and_flags",
                "initialize_memory_offsets_00001a60": "initialize_memory_offsets",
                "initialize_system_000018bc": "initialize_system",
                "param_1": "component_index",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "counter": 1,
                    "result": 1,
                    "result_flag": 1,
                    "return_value": 1
                },
                "DAT_40064000": {
                    "flags": 1,
                    "memory_data": 1,
                    "register1": 1
                },
                "DAT_40064001": {
                    "flag1": 1,
                    "mask1": 1,
                    "memory_flags1": 1
                },
                "DAT_40064005": {
                    "flag2": 1,
                    "mask2": 1,
                    "memory_flags2": 1
                },
                "DAT_40064006": {
                    "memory_control": 1,
                    "register2": 1,
                    "status_register": 1
                },
                "FUN_00001bb8": {
                    "clear_and_update_flags": 3,
                    "clear_and_update_memory": 5,
                    "clear_memory_and_update_flags": 12,
                    "initialize_memory": 6,
                    "initialize_system": 2,
                    "process_memory": 1,
                    "reset_flags": 1,
                    "update_memory_and_flags": 1
                },
                "clear_memory_00001710": {
                    "clear_flag": 1,
                    "clear_memory": 30
                },
                "update_flags_00001748": {
                    "update_flags": 31
                }
            },
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "calling": [
                "FUN_00001c84"
            ],
            "code": "\nvoid clear_memory_and_update_flags_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    clear_memory(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    clear_memory(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  update_flags(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "current_name": "clear_memory_and_update_flags_00001bb8",
            "entrypoint": "0x00001bb8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001bb8": "clear_memory_and_update_flags_00001bb8",
                "clear_memory_00001710": "clear_memory",
                "update_flags_00001748": "update_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001c84": {
            "additional_data": {
                "DAT_40064000": {
                    "config": 1,
                    "data_register2": 1,
                    "data_register_3": 1,
                    "data_value2": 1,
                    "flag2": 1,
                    "memory_config": 17,
                    "memory_config2": 3,
                    "memory_config_3": 1,
                    "memory_config_flags": 2,
                    "memory_config_register": 1,
                    "var_40064000": 1
                },
                "DAT_40064004": {
                    "data_register3": 1,
                    "data_register_4": 1,
                    "data_value3": 1,
                    "flag": 1,
                    "flag2": 1,
                    "flag3": 1,
                    "flag_value": 1,
                    "flags": 3,
                    "interrupt_config": 2,
                    "interrupt_register": 1,
                    "memory_config3": 2,
                    "memory_config_4": 1,
                    "memory_config_value1": 1,
                    "memory_flag": 1,
                    "memory_offset": 2,
                    "memory_value": 1,
                    "offset": 1,
                    "offset_register": 1,
                    "offset_value": 2,
                    "value_2": 1,
                    "var_40064004": 1
                },
                "DAT_40064005": {
                    "count": 2,
                    "counter": 1,
                    "data_register4": 1,
                    "data_register_5": 1,
                    "data_value4": 1,
                    "extra_flag": 1,
                    "flag": 2,
                    "flag2": 1,
                    "flag3": 1,
                    "flag4": 1,
                    "flags_register": 1,
                    "initialized_flag": 1,
                    "interrupt_flag": 1,
                    "memory_config4": 2,
                    "memory_config_5": 1,
                    "memory_config_value2": 1,
                    "memory_offset": 1,
                    "memory_value": 1,
                    "offset": 1,
                    "offset_value_2": 1,
                    "system_components": 1,
                    "system_status": 1,
                    "value_3": 1,
                    "var_40064005": 1
                },
                "DAT_4006400c": {
                    "counter": 2,
                    "data": 1,
                    "data_register": 2,
                    "data_register1": 1,
                    "data_register_2": 2,
                    "data_value1": 1,
                    "flag1": 3,
                    "flag_value": 1,
                    "memory_config": 1,
                    "memory_config_2": 1,
                    "memory_offset": 1,
                    "offset": 10,
                    "offset_value": 1,
                    "timer_value": 1,
                    "value_1": 1,
                    "var_4006400c": 1
                },
                "FUN_00001c84": {
                    "initialize_device": 1,
                    "initialize_machine": 1,
                    "initialize_system": 26,
                    "initialize_system_components": 3
                },
                "_DAT_40048044": {
                    "data_register": 1,
                    "data_register_1": 2,
                    "device_configuration": 1,
                    "device_control_register": 1,
                    "mem_reg": 1,
                    "memory_address": 8,
                    "memory_config": 5,
                    "memory_config_1": 1,
                    "memory_configuration_register": 1,
                    "memory_control_register": 2,
                    "memory_data": 1,
                    "memory_mode": 1,
                    "memory_offset": 2,
                    "memory_register": 1,
                    "memory_register1": 1,
                    "memory_value": 2
                },
                "clear_memory_and_set_offset_0000182c": {
                    "clear_memory_and_set_offset": 19,
                    "clear_memory_set_offset": 10,
                    "reset_memory_and_set_offset": 1
                },
                "clear_memory_and_update_flags_00001bb8": {
                    "clear_memory_and_update_flags": 19,
                    "clear_memory_update_flags": 10,
                    "reset_memory_and_update_flags": 1
                },
                "enable_ir_qinterrupts_if_current_mode_is_privileged_00000d0c": {
                    "enable_interrupts": 1,
                    "enable_interrupts_if_privileged": 10,
                    "enable_interrupts_privileged": 2,
                    "enable_ir_interrupts_if_privileged": 2,
                    "enable_ir_interrupts_in_privileged_mode": 1,
                    "enable_ir_qinterrupts_if_privileged": 1,
                    "enable_irq_interrupts": 4,
                    "enable_irq_interrupts_if_privileged": 10
                },
                "get_irq_interrupt_status_00000cd0": {
                    "get_interrupt_status": 20,
                    "get_irq_interrupt_status": 9
                },
                "initialize_memory_config_000017dc": {
                    "initialize_memory_config": 31
                },
                "initialize_system_components_00001b10": {
                    "initialize_components": 5,
                    "initialize_system_components": 26
                },
                "uVar1": {
                    "interrupt_status": 21,
                    "irq_interrupt_status": 9,
                    "irq_status": 1
                }
            },
            "called": [
                "FUN_00001b10",
                "FUN_00000d0c",
                "FUN_00001bb8",
                "FUN_000017dc",
                "FUN_0000182c",
                "FUN_00000cd0"
            ],
            "calling": [
                "FUN_00001274"
            ],
            "code": "\n\n\nvoid initialize_system_components_00001c84(void)\n\n{\n  undefined4 interrupt_status;\n  \n  interrupt_status = get_interrupt_status();\n  clear_memory_and_update_flags();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  clear_memory_and_set_offset();\n  initialize_memory_config();\n  initialize_system_components_00001c84(7);\n  enable_interrupts_if_privileged(interrupt_status);\n  return;\n}\n\n",
            "current_name": "initialize_system_components_00001c84",
            "entrypoint": "0x00001c84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001c84": "initialize_system_components_00001c84",
                "clear_memory_and_set_offset_0000182c": "clear_memory_and_set_offset",
                "clear_memory_and_update_flags_00001bb8": "clear_memory_and_update_flags",
                "enable_ir_qinterrupts_if_current_mode_is_privileged_00000d0c": "enable_interrupts_if_privileged",
                "get_irq_interrupt_status_00000cd0": "get_interrupt_status",
                "initialize_memory_config_000017dc": "initialize_memory_config",
                "initialize_system_components_00001b10": "initialize_system_components",
                "uVar1": "interrupt_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "additional_data": {
                "DAT_1fff0354": {
                    "memory_protection_flag": 12
                },
                "FUN_00001cf0": {
                    "check_and_set_memory_protection_flag": 8,
                    "check_memory_protection": 5,
                    "check_memory_protection_flag": 3,
                    "enable_memory_protection": 7,
                    "initialize_memory_protection": 2,
                    "perform_memory_protection": 2,
                    "perform_memory_protection_check": 1,
                    "set_memory_protection": 2,
                    "set_memory_protection_if_flag_set": 1
                },
                "set_memory_protection_flag_0000093c": {
                    "activate_memory_protection_flag": 1,
                    "enable_protection_flag": 1,
                    "set_memory_protection_flag": 13
                }
            },
            "called": [
                "FUN_0000093c"
            ],
            "calling": [
                "FUN_00002028"
            ],
            "code": "\nvoid check_and_set_memory_protection_flag_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_memory_protection_flag();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_set_memory_protection_flag_00001cf0",
            "entrypoint": "0x00001cf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001cf0": "check_and_set_memory_protection_flag_00001cf0",
                "set_memory_protection_flag_0000093c": "set_memory_protection_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001d08": {
            "additional_data": {
                "0x2000000": {
                    "base_offset": 1
                },
                "0xf0000000": {
                    "upper_bits_mask": 1
                },
                "0xfffff": {
                    "lower_bits_mask": 1
                },
                "FUN_00001d08": {
                    "calculate_new_value": 2,
                    "calculate_offset": 20,
                    "calculate_result": 7,
                    "calculate_updated_value": 1,
                    "multiply_and_shift": 1
                },
                "new_variable_name_1": {
                    "masked_input": 1
                },
                "new_variable_name_2": {
                    "lower_20_bits": 1
                },
                "new_variable_name_3": {
                    "shifted_bits": 1
                },
                "new_variable_name_4": {
                    "offset": 1
                },
                "param_1": {
                    "address": 3,
                    "base_address": 4,
                    "input": 2,
                    "input1": 1,
                    "input_flag": 1,
                    "input_value": 14,
                    "input_value1": 1,
                    "input_value_1": 1,
                    "number": 1,
                    "param_a": 1,
                    "value_1": 2
                },
                "param_2": {
                    "input2": 1,
                    "input_value2": 1,
                    "input_value_2": 1,
                    "multiplier": 21,
                    "offset": 1,
                    "offset_multiplier": 1,
                    "offset_value": 2,
                    "param_b": 1,
                    "value_2": 2
                },
                "param_3": {
                    "addition_value": 1,
                    "constant_addition": 1,
                    "new_parameter_name_3": 1,
                    "shift_constant": 1,
                    "total_offset": 1
                },
                "param_4": {
                    "bitwise_operators": 1,
                    "new_parameter_name_4": 1
                },
                "param_5": {
                    "offset": 1
                },
                "param_6": {
                    "constant_value": 1
                },
                "param_7": {
                    "shift_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001d3a"
            ],
            "code": "\nint calculate_offset_00001d08(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "current_name": "calculate_offset_00001d08",
            "entrypoint": "0x00001d08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "additional_data": {
                "FUN_00001d3a": {
                    "initialize_offset": 1,
                    "initialize_value": 1,
                    "initialize_variable": 1,
                    "mark_offset_as_one": 1,
                    "set_flag": 2,
                    "set_flag_to1": 2,
                    "set_offset_to1": 4,
                    "set_offset_to_one": 7,
                    "set_offset_to_value": 9,
                    "set_offset_value": 2,
                    "write_value_to_offset": 1
                },
                "param_1": {
                    "input": 1,
                    "input1": 3,
                    "input_param1": 1,
                    "input_parameter": 1,
                    "input_pointer": 1,
                    "input_value": 2,
                    "offset": 18,
                    "offset_value": 1,
                    "param1": 1,
                    "value": 1,
                    "value_pointer": 1
                },
                "param_2": {
                    "calculation_input": 1,
                    "data": 1,
                    "flag": 6,
                    "input2": 3,
                    "input_param2": 1,
                    "offset": 3,
                    "param2": 1,
                    "unused_parameter": 1,
                    "value": 14
                },
                "puVar1": {
                    "address": 1,
                    "flag_pointer": 1,
                    "offset_pointer": 17,
                    "offset_ptr": 6,
                    "ptr_offset": 1,
                    "ptr_to_offset": 1,
                    "result_pointer": 2
                }
            },
            "called": [
                "FUN_00001d08"
            ],
            "calling": [
                "FUN_00001ddc"
            ],
            "code": "\nvoid set_offset_to_value_00001d3a(undefined4 offset,undefined value)\n\n{\n  undefined4 *offset_pointer;\n  \n  offset_pointer = (undefined4 *)calculate_offset_00001d08(offset,value);\n  *offset_pointer = 1;\n  return;\n}\n\n",
            "current_name": "set_offset_to_value_00001d3a",
            "entrypoint": "0x00001d3a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001d3a": "set_offset_to_value_00001d3a",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offset_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "additional_data": {
                "0x40048000": {
                    "default_value": 1,
                    "flag": 1
                },
                "0x7000": {
                    "bit_mask": 2
                },
                "DAT_": {
                    "dat": 1
                },
                "DAT_XXXX": {
                    "unchanged_variable": 1
                },
                "FUN_00001d5e": {
                    "apply_bit_mask": 1,
                    "apply_bitmask": 3,
                    "apply_bitwise_operations": 1,
                    "apply_mask": 6,
                    "apply_mask_and_shift": 2,
                    "calculate_masked_value": 1,
                    "combine_and_shift": 1,
                    "combine_bits": 1,
                    "combine_bits_with_mask": 2,
                    "combine_flags": 1,
                    "combine_mask_with_value": 1,
                    "convert_value_to_flag": 1,
                    "extract_bits": 2,
                    "extract_bits_from_param": 2,
                    "get_bit_fields": 1,
                    "get_flag_value": 1,
                    "get_modified_value": 1,
                    "mask_bits_with_flag": 1,
                    "merge_bits": 1,
                    "set_descriptive_name": 1
                },
                "PTR_": {
                    "ptr": 1
                },
                "PTR_XXXX": {
                    "unchanged_variable": 1
                },
                "param_1": {
                    "bit_field": 1,
                    "bits": 1,
                    "bits_to_combine": 1,
                    "flag": 1,
                    "flags": 1,
                    "input": 1,
                    "input_value": 22,
                    "mask_bits": 1,
                    "masked": 1,
                    "value": 1
                },
                "param_2": {
                    "new_parameter_name_2": 1,
                    "unused_variable": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea"
            ],
            "code": "\nuint apply_mask_and_shift_00001d5e(ushort input_value)\n\n{\n  return input_value & 0x7000 | 0x40048000;\n}\n\n",
            "current_name": "apply_mask_and_shift_00001d5e",
            "entrypoint": "0x00001d5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001d5e": "apply_mask_and_shift_00001d5e",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001d80": {
            "additional_data": {
                "0x1c0": {
                    "bit_mask": 3,
                    "mask": 1
                },
                "0x400ff000": {
                    "bit_pattern": 1,
                    "constant": 1,
                    "default_bits": 1,
                    "extension": 1
                },
                "FUNK_00001d80": {
                    "map_bits_and_merge": 1
                },
                "FUN_00001d80": {
                    "apply_and_mask": 1,
                    "apply_bitmask": 1,
                    "apply_mask": 3,
                    "apply_mask_and_merge": 1,
                    "apply_mask_and_set_bits": 2,
                    "apply_mask_to_value": 1,
                    "combine_and_mask": 1,
                    "combine_bits": 4,
                    "combine_bits_and_mask": 1,
                    "combine_flags": 1,
                    "combine_mask_and_value": 1,
                    "extend_and_mask": 1,
                    "extract_bits": 3,
                    "extract_bits_and_set_mask": 1,
                    "extract_bits_and_set_values": 1,
                    "get_modified_value": 3,
                    "get_result": 1,
                    "map_bit_and_concat": 1,
                    "map_parameters": 1,
                    "mask_bits": 1
                },
                "new_value": {
                    "modified_value": 1
                },
                "param_1": {
                    "bit_pattern": 1,
                    "bitfield": 1,
                    "flags": 1,
                    "input": 1,
                    "input_value": 23,
                    "mask": 1,
                    "result": 1,
                    "value": 2
                },
                "param_2": {
                    "output_value": 1
                },
                "return": {
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "code": "\nuint combine_bits_and_mask_00001d80(ushort input_value)\n\n{\n  result input_value & 0x1c0 | 0x400ff000;\n}\n\n",
            "current_name": "combine_bits_and_mask_00001d80",
            "entrypoint": "0x00001d80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001d80": "combine_bits_and_mask_00001d80",
                "param_1": "input_value",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001da2": {
            "additional_data": {
                "7": {
                    "bit_mask": 1
                },
                "FUN_00001da2": {
                    "extract_bits": 20,
                    "extract_bits_from_input": 1,
                    "extract_bits_from_param": 1,
                    "extract_bits_from_short": 1,
                    "extract_last_bits": 1,
                    "extracted_bits": 1,
                    "get_bits": 1,
                    "get_bits_from_param": 2,
                    "get_bits_from_parameter": 1,
                    "get_bits_from_sixth_to_eighth": 1,
                    "get_three_bits": 1
                },
                "newVariableName": {
                    "result": 1
                },
                "param_1": {
                    "bits_to_extract": 2,
                    "extracted_bits": 1,
                    "input": 12,
                    "input_data": 1,
                    "input_number": 1,
                    "input_value": 12,
                    "output": 2
                },
                "param_2": {
                    "output": 1,
                    "unused": 2
                },
                "return": {
                    "bits": 1,
                    "extracted_bits": 1
                },
                "var_1": {
                    "shifted_value": 1
                },
                "var_2": {
                    "bit_masked_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "code": "\nushort extract_last_bits_00001da2(ushort input)\n\n{\n  extracted_bits input >> 6 & 7;\n}\n\n",
            "current_name": "extract_last_bits_00001da2",
            "entrypoint": "0x00001da2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001da2": "extract_last_bits_00001da2",
                "param_1": "input",
                "return": "extracted_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "additional_data": {
                "0x3f": {
                    "least_significant_bit_mask": 1,
                    "lower_six_bits": 1
                },
                "FUN_00001dc0": {
                    "clear_bit_mask": 1,
                    "clear_bits": 1,
                    "clear_top_bits": 1,
                    "extract_bits": 2,
                    "extract_least_significant_bits": 1,
                    "extract_lesser_bits": 1,
                    "extract_low_bits": 3,
                    "extract_low_six_bits": 1,
                    "extract_lower6_bits": 1,
                    "extract_lower_bits": 4,
                    "extract_lower_six_bits": 1,
                    "extract_lowest_bits": 1,
                    "extract_lowest_six_bits": 1,
                    "extract_six_bits": 2,
                    "extract_six_lower_bits": 1,
                    "mask_and_return_lower_bits": 1,
                    "mask_low6_bits": 1,
                    "mask_lower_six_bits": 2,
                    "mask_lowest_six_bits": 1,
                    "truncate_to_lowest_six_bits": 1,
                    "truncate_to_lsb": 1,
                    "truncate_to_six_bits": 2
                },
                "param_1": {
                    "cleared_input": 1,
                    "extracted_value": 1,
                    "input": 3,
                    "input_number": 1,
                    "input_value": 22,
                    "masked_input": 1,
                    "output": 1,
                    "value": 1
                },
                "param_2": {
                    "output": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "code": "\nushort extract_lower_six_bits_00001dc0(ushort input_value)\n\n{\n  return input_value & 0x3f;\n}\n\n",
            "current_name": "extract_lower_six_bits_00001dc0",
            "entrypoint": "0x00001dc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001dc0": "extract_lower_six_bits_00001dc0",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "additional_data": {
                "DAT_40048038": {
                    "data_variable": 1,
                    "offset_value": 2
                },
                "FUN_00001ddc": {
                    "set_offset_to_adjusted_value": 1,
                    "set_offset_to_extracted_bits": 5,
                    "set_offset_to_extracted_value": 5,
                    "set_offset_to_last_bits": 2,
                    "set_offset_to_value": 8,
                    "update_offset": 5,
                    "update_offset_to_value": 1,
                    "update_offset_value": 3,
                    "update_offset_with_extracted_bits": 1
                },
                "cVar1": {
                    "bits": 1,
                    "bits_extracted": 2,
                    "extracted_bits": 14,
                    "extracted_value": 2,
                    "last_bits": 11
                },
                "extract_last_bits_00001da2": {
                    "extract_bits": 2,
                    "extract_last_bits": 10
                },
                "param_1": {
                    "data": 2,
                    "input": 6,
                    "input_data": 1,
                    "input_parameter": 1,
                    "input_value": 21
                },
                "set_offset_to_value_00001d3a": {
                    "set_offset_to_value": 11,
                    "set_offset_value": 1,
                    "update_offset": 1
                }
            },
            "called": [
                "FUN_00001da2",
                "FUN_00001d3a"
            ],
            "calling": [
                "FUN_00001f80"
            ],
            "code": "\nvoid set_offset_to_extracted_value_00001ddc(undefined2 input_value)\n\n{\n  char extracted_bits;\n  \n  extracted_bits = extract_last_bits(input_value);\n  set_offset_to_value(&DAT_40048038,extracted_bits + '\\t');\n  return;\n}\n\n",
            "current_name": "set_offset_to_extracted_value_00001ddc",
            "entrypoint": "0x00001ddc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001ddc": "set_offset_to_extracted_value_00001ddc",
                "cVar1": "extracted_bits",
                "extract_last_bits_00001da2": "extract_last_bits",
                "param_1": "input_value",
                "set_offset_to_value_00001d3a": "set_offset_to_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "additional_data": {
                "": {
                    "mask": 1
                },
                "0xf": {
                    "bit_mask": 3,
                    "mask": 2
                },
                "4": {
                    "bits_per_item": 1
                },
                "DAT_1fff0bd8": {
                    "bit_array": 1,
                    "data": 1,
                    "data_array": 3,
                    "memory_block": 1
                },
                "FUN_00001e0c": {
                    "decode_bits": 1,
                    "extract_bit": 4,
                    "extract_bits": 18,
                    "extract_bits_and_return": 1,
                    "extract_bits_from_offset": 1,
                    "extracted_unsigned_value": 1,
                    "get_bit": 1,
                    "get_bits_from_data": 1,
                    "get_last_nibble": 1,
                    "read_bits": 1,
                    "reverse_bits": 1
                },
                "new_variable_name": {
                    "masked_bits": 1
                },
                "param_1": {
                    "byte_offset": 2,
                    "data_offset": 2,
                    "index": 10,
                    "input_offset": 2,
                    "offset": 12,
                    "shift_factor": 1,
                    "start_index": 1,
                    "start_offset": 1
                },
                "param_2": {
                    "bit": 1,
                    "bit_data": 1,
                    "bit_index": 2,
                    "bit_offset": 3,
                    "bit_pattern": 1,
                    "bit_pos": 1,
                    "bit_position": 1,
                    "bitstream": 3,
                    "data": 9,
                    "input": 1,
                    "input_data": 1,
                    "input_value": 2,
                    "value": 5
                },
                "param_3": {
                    "result": 1
                },
                "return": {
                    "extracted_bit": 2,
                    "extracted_bits": 1
                },
                "uint": {
                    "unsigned_integer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001ec4",
                "FUN_00002028"
            ],
            "code": "\nunsigned_integer extract_bits_and_return_00001e0c(int offset,unsigned_integer data)\n\n{\n  extracted_bit *(unsigned_integer *)(&DAT_1fff0bd8 + (((int)data >> 3) + offset * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "current_name": "extract_bits_and_return_00001e0c",
            "entrypoint": "0x00001e0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001e0c": "extract_bits_and_return_00001e0c",
                "param_1": "offset",
                "param_2": "data",
                "return": "extracted_bit",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001e44": {
            "additional_data": {
                "0xf": {
                    "mask": 1
                },
                "DAT_1fff0bd8": {
                    "data_buffer": 1
                },
                "FUN_00001e44": {
                    "set_bit_value": 1,
                    "update_bit_at_index": 1,
                    "update_bit_in_memory": 1,
                    "update_bit_mask": 1,
                    "update_bit_pattern": 1,
                    "update_bit_value": 1,
                    "update_bitfield": 2,
                    "update_bits": 10,
                    "update_bitwise_op": 1,
                    "update_bitwise_value": 2,
                    "update_data": 4,
                    "update_data_at_index": 1,
                    "update_memory": 1,
                    "update_value": 1,
                    "update_value_in_array": 1,
                    "update_values": 1
                },
                "F_UN00001e44": {
                    "update_bit_pattern": 1
                },
                "iVar1": {
                    "byte_index": 4,
                    "byte_offset": 3,
                    "byte_shift": 1,
                    "num_bytes": 1,
                    "num_chunks": 1,
                    "num_of_words": 1,
                    "num_words": 1,
                    "shift_amount": 5,
                    "shift_index": 1,
                    "shifted_index": 6,
                    "shifted_offset": 1,
                    "word_index": 4,
                    "word_offset": 1
                },
                "param_1": {
                    "base_address": 2,
                    "base_offset": 2,
                    "bit_index": 1,
                    "data_index": 1,
                    "index": 18,
                    "offset": 4,
                    "start_index": 1,
                    "start_position": 1,
                    "value_index": 1
                },
                "param_2": {
                    "bit_index": 3,
                    "bit_offset": 12,
                    "bit_position": 12,
                    "bits_to_update": 1,
                    "byte_index": 1,
                    "offset": 2
                },
                "param_3": {
                    "bit_value": 2,
                    "new_value": 21,
                    "value": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_00001ec4"
            ],
            "code": "\nvoid update_bits_00001e44(int index,uint bit_position,int new_value)\n\n{\n  int shifted_index;\n  \n  shifted_index = (int)bit_position >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shifted_index + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shifted_index + index * 4) * 4) & ~(0xf << ((bit_position & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shifted_index + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shifted_index + index * 4) * 4) | new_value << ((bit_position & 7) << 2);\n  return;\n}\n\n",
            "current_name": "update_bits_00001e44",
            "entrypoint": "0x00001e44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001e44": "update_bits_00001e44",
                "iVar1": "shifted_index",
                "param_1": "index",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "additional_data": {
                "FUN_00001ec4": {
                    "extract_and_update_bits": 5,
                    "update_and_extract_bits": 2,
                    "update_bits": 24
                },
                "extract_bits_and_return_00001e0c": {
                    "extract_bits": 1
                },
                "param_1": {
                    "input1": 14,
                    "input_1": 6,
                    "input_data_1": 1,
                    "input_param": 5,
                    "input_param1": 2,
                    "input_param_1": 2,
                    "source_param": 1
                },
                "param_2": {
                    "flag_param": 1,
                    "input2": 14,
                    "input_2": 6,
                    "input_data_2": 1,
                    "input_param2": 2,
                    "input_param_2": 2,
                    "output_param": 3,
                    "target_param": 1,
                    "update_param": 1
                },
                "uVar1": {
                    "bit_extraction_result": 2,
                    "bits": 2,
                    "bits_extracted": 3,
                    "bits_to_extract": 2,
                    "extracted_bits": 21,
                    "extracted_value": 1
                },
                "update_bits_00001e44": {
                    "update_bits": 1
                }
            },
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "calling": [
                "FUN_00001f80"
            ],
            "code": "\nvoid update_and_extract_bits_00001ec4(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 extracted_bits;\n  \n  extracted_bits = extract_bits(input1,input2);\n  update_bits(input1,input2,extracted_bits);\n  return;\n}\n\n",
            "current_name": "update_and_extract_bits_00001ec4",
            "entrypoint": "0x00001ec4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001ec4": "update_and_extract_bits_00001ec4",
                "extract_bits_and_return_00001e0c": "extract_bits",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "extracted_bits",
                "update_bits_00001e44": "update_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001eea": {
            "additional_data": {
                "FUN_00001eea": {
                    "apply_permission": 1,
                    "record_data": 1,
                    "update_and_apply_bitmask": 2,
                    "update_and_apply_mask": 1,
                    "update_and_set_bit": 1,
                    "update_and_shift_bits": 1,
                    "update_bit_mask": 1,
                    "update_bitmask": 1,
                    "update_bitmask_value": 1,
                    "update_bits_with_value": 1,
                    "update_extracted_value": 7,
                    "update_flags_and_value": 1,
                    "update_value": 6,
                    "update_value_and_apply_mask": 1,
                    "update_value_in_memory": 1,
                    "update_value_with_bits": 1,
                    "update_value_with_flag": 1,
                    "update_value_with_mask": 1,
                    "update_values": 1
                },
                "apply_mask_and_shift_00001d5e": {
                    "apply_mask_and_shift": 11
                },
                "combine_bits_and_mask_00001d80": {
                    "combine_bits_and_mask": 11
                },
                "extract_lower_six_bits_00001dc0": {
                    "extract_lower_bits": 1,
                    "extract_lower_six_bits": 10
                },
                "iVar2": {
                    "bitmask_offset": 1,
                    "bits_and_mask": 2,
                    "bits_and_mask_result": 1,
                    "combined_bits": 21,
                    "combined_bits_address": 1,
                    "combined_bits_and_mask": 1,
                    "combined_mask": 1,
                    "combined_value": 3
                },
                "iVar3": {
                    "bit_index": 1,
                    "bit_position": 1,
                    "extracted_bits": 7,
                    "index": 4,
                    "lower_bits": 1,
                    "lower_bits_2": 1,
                    "lower_six_bits2": 4,
                    "lower_six_bits_2": 3,
                    "lower_six_bits_address": 1,
                    "lower_six_bits_extracted": 1,
                    "lower_six_bits_index": 2,
                    "lower_six_bits_result": 1,
                    "masked_value_index": 1,
                    "selected_bit": 1,
                    "shifted_bits": 1,
                    "shifted_value": 1
                },
                "param_1": {
                    "data": 1,
                    "extracted_value": 2,
                    "input": 1,
                    "input1": 1,
                    "input_data": 2,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 16,
                    "param1": 2,
                    "permission": 1,
                    "value": 2,
                    "value_address": 1
                },
                "param_2": {
                    "bit_mask": 1,
                    "bit_value": 1,
                    "bitmask": 1,
                    "byte_data": 1,
                    "byte_value": 15,
                    "data": 1,
                    "flag": 1,
                    "input2": 1,
                    "input_byte": 3,
                    "mask_value": 1,
                    "param2": 2,
                    "update_byte": 1,
                    "value": 2
                },
                "uVar1": {
                    "bits": 1,
                    "lower_bits": 2,
                    "lower_six_bits": 28
                },
                "update_extracted_value_00001f80": {
                    "update_extracted_value": 9,
                    "update_extracted_value_in_memory": 1,
                    "update_extracted_value_one": 1
                }
            },
            "called": [
                "FUN_00001d5e",
                "FUN_00001f80",
                "FUN_00001dc0",
                "FUN_00001d80"
            ],
            "calling": [
                "FUN_00000e64"
            ],
            "code": "\nundefined4 update_extracted_value_00001eea(undefined2 input_value,byte byte_value)\n\n{\n  uint lower_six_bits;\n  int combined_bits;\n  int extracted_bits;\n  \n  update_extracted_value_00001eea(input_value,0);\n  if ((char)byte_value < '\\0') {\n    lower_six_bits = extract_lower_six_bits(input_value);\n    combined_bits = combine_bits_and_mask(input_value);\n    *(uint *)(combined_bits + 0x14) = *(uint *)(combined_bits + 0x14) | 1 << (lower_six_bits & 0xff);\n  }\n  else {\n    lower_six_bits = extract_lower_six_bits(input_value);\n    combined_bits = combine_bits_and_mask(input_value);\n    *(uint *)(combined_bits + 0x14) = *(uint *)(combined_bits + 0x14) & ~(1 << (lower_six_bits & 0xff));\n  }\n  combined_bits = apply_mask_and_shift(input_value);\n  extracted_bits = extract_lower_six_bits(input_value);\n  *(uint *)(combined_bits + extracted_bits * 4) = byte_value & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "current_name": "update_extracted_value_00001eea",
            "entrypoint": "0x00001eea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001eea": "update_extracted_value_00001eea",
                "apply_mask_and_shift_00001d5e": "apply_mask_and_shift",
                "combine_bits_and_mask_00001d80": "combine_bits_and_mask",
                "extract_lower_six_bits_00001dc0": "extract_lower_six_bits",
                "iVar2": "combined_bits",
                "iVar3": "extracted_bits",
                "param_1": "input_value",
                "param_2": "byte_value",
                "uVar1": "lower_six_bits",
                "update_extracted_value_00001f80": "update_extracted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001f80": {
            "additional_data": {
                "FUN_00001f80": {
                    "update_and_extract_bits": 1,
                    "update_data": 1,
                    "update_extracted_value": 10,
                    "update_memory_value": 1,
                    "update_parameter_in_array": 1,
                    "update_value": 9,
                    "update_value_and_bits": 2,
                    "update_value_and_extract_bits": 2,
                    "update_value_in_array": 3,
                    "update_value_in_memory": 1
                },
                "iVar1": {
                    "applied_offset": 3,
                    "applied_value_offset": 1,
                    "masked_offset": 4,
                    "masked_shifted_address": 1,
                    "masked_shifted_offset": 1,
                    "masked_shifted_value": 2,
                    "masked_value1": 1,
                    "offset": 16,
                    "offset_and_masked": 1
                },
                "iVar2": {
                    "bit_position": 1,
                    "bits": 1,
                    "extracted_bits": 3,
                    "index": 4,
                    "lower_bits": 10,
                    "lower_six_bits": 6,
                    "shifted_index": 3,
                    "shifted_offset": 1,
                    "shifted_value": 1
                },
                "param_1": {
                    "array_index": 1,
                    "data": 1,
                    "extracted_value": 1,
                    "input": 6,
                    "input_index": 1,
                    "input_value": 4,
                    "offset": 7,
                    "value": 3,
                    "value_address": 2,
                    "value_offset": 5
                },
                "param_2": {
                    "new_value": 30,
                    "value": 1
                },
                "uVar3": {
                    "extracted_bits": 2,
                    "extracted_bits1": 1,
                    "last_bits": 28
                },
                "uVar4": {
                    "extracted_bits": 7,
                    "extracted_bits2": 1,
                    "extracted_six_bits": 1,
                    "lower_bits": 11,
                    "lower_bits2": 1,
                    "lower_bits_updated": 1,
                    "lower_six_bits": 4,
                    "lower_six_bits2": 2,
                    "masked_bits": 1,
                    "six_bits": 1,
                    "updated_bits": 1
                },
                "uVar5": {
                    "current_value": 1,
                    "extracted_value": 29,
                    "extracted_value_at_offset": 1
                }
            },
            "called": [
                "FUN_00001d5e",
                "FUN_00001dc0",
                "FUN_00001ddc",
                "FUN_00001da2",
                "FUN_00001ec4"
            ],
            "calling": [
                "FUN_00001448",
                "FUN_00001eea"
            ],
            "code": "\nvoid update_extracted_value_00001f80(undefined2 offset,undefined4 new_value)\n\n{\n  int offset;\n  int lower_bits;\n  undefined4 last_bits;\n  undefined4 lower_bits;\n  uint extracted_value;\n  \n  set_offset_to_extracted_value_00001ddc(offset);\n  offset = apply_mask_and_shift_00001d5e(offset);\n  lower_bits = extract_lower_six_bits_00001dc0(offset);\n  extracted_value = *(uint *)(offset + lower_bits * 4);\n  offset = apply_mask_and_shift_00001d5e(offset);\n  lower_bits = extract_lower_six_bits_00001dc0(offset);\n  *(undefined4 *)(offset + lower_bits * 4) = new_value;\n  if ((extracted_value & 0xf0000) != 0) {\n    last_bits = extract_last_bits_00001da2(offset);\n    lower_bits = extract_lower_six_bits_00001dc0(offset);\n    update_and_extract_bits_00001ec4(last_bits,lower_bits);\n  }\n  return;\n}\n\n",
            "current_name": "update_extracted_value_00001f80",
            "entrypoint": "0x00001f80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001f80": "update_extracted_value_00001f80",
                "iVar1": "offset",
                "iVar2": "lower_bits",
                "param_1": "offset",
                "param_2": "new_value",
                "uVar3": "last_bits",
                "uVar4": "lower_bits",
                "uVar5": "extracted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "additional_data": {
                "4": {
                    "bit_offset": 1
                },
                "FUN_00001ff6": {
                    "set_bit": 2,
                    "set_bit_at_index": 5,
                    "set_bit_at_position": 3,
                    "set_bit_by_lower_six_bits": 1,
                    "set_bit_in_address": 1,
                    "set_bit_in_integer": 1,
                    "set_bit_in_mask": 2,
                    "set_bit_in_memory": 9,
                    "set_bit_in_memory_address": 1,
                    "set_bit_in_value": 1,
                    "set_bit_value": 3,
                    "set_bit_value_in_memory": 1,
                    "set_bits_with_mask": 1
                },
                "combine_bits_and_mask_00001d80": {
                    "combine_bits_and_mask": 2
                },
                "extract_lower_six_bits_00001dc0": {
                    "extract_lower_six_bits": 2
                },
                "iVar2": {
                    "bit_and_mask": 1,
                    "bit_masked_value": 1,
                    "bit_position": 1,
                    "combined_bits": 11,
                    "combined_bits_address": 2,
                    "combined_bits_and_mask": 9,
                    "combined_bits_with_mask": 3,
                    "combined_result": 1,
                    "combined_value": 1,
                    "mask_combination": 1
                },
                "param_1": {
                    "data": 2,
                    "input": 10,
                    "input_value": 19
                },
                "uVar1": {
                    "bit_index": 1,
                    "extracted_bits": 1,
                    "lower_six_bits": 29
                }
            },
            "called": [
                "FUN_00001dc0",
                "FUN_00001d80"
            ],
            "calling": [
                "FUN_00000e64"
            ],
            "code": "\nvoid set_bit_in_memory_address_00001ff6(undefined2 input_value)\n\n{\n  uint lower_six_bits;\n  int combined_bits;\n  \n  lower_six_bits = extract_lower_six_bits(input_value);\n  combined_bits = combine_bits_and_mask(input_value);\n  *(int *)(combined_bits + 4) = 1 << (lower_six_bits & 0xff);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_address_00001ff6",
            "entrypoint": "0x00001ff6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001ff6": "set_bit_in_memory_address_00001ff6",
                "combine_bits_and_mask_00001d80": "combine_bits_and_mask",
                "extract_lower_six_bits_00001dc0": "extract_lower_six_bits",
                "iVar2": "combined_bits",
                "param_1": "input_value",
                "uVar1": "lower_six_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002028": {
            "additional_data": {
                "FUN_00002028": {
                    "check_and_execute_functions": 1,
                    "decode_and_execute": 1,
                    "extract_and_execute_instructions": 1,
                    "extract_and_process_bits": 1,
                    "iterate_and_execute_instructions": 1,
                    "process_bits": 4,
                    "process_bits_and_call_functions": 1,
                    "process_bits_and_execute": 2,
                    "process_data": 8,
                    "process_flagged_bits": 3,
                    "process_flags": 2,
                    "process_flags_and_execute": 4,
                    "process_flags_and_execute_functions": 1,
                    "reverse_bits_and_execute": 1
                },
                "iVar1": {
                    "bit_extraction": 1,
                    "bit_extraction_result": 3,
                    "bit_index": 9,
                    "bit_result": 1,
                    "bit_value": 2,
                    "bits": 1,
                    "bits_extracted": 1,
                    "extracted_bits": 1,
                    "extracted_value": 4,
                    "index": 5,
                    "instruction_index": 1,
                    "result": 2
                },
                "local_c": {
                    "bit_index": 14,
                    "bit_position": 5,
                    "counter": 5,
                    "current_bit": 1,
                    "i": 1,
                    "index": 3,
                    "iteration": 1,
                    "loop_counter": 1
                },
                "param_1": {
                    "arg1": 1,
                    "base_address": 7,
                    "data": 3,
                    "data_address": 3,
                    "data_offset": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "flag_pointer": 1,
                    "function_data": 1,
                    "input_address": 2,
                    "input_buffer": 1,
                    "input_data": 5,
                    "memory_start": 1,
                    "param": 1
                },
                "param_2": {
                    "additional_data": 2,
                    "additional_info": 1,
                    "arg2": 1,
                    "config": 1,
                    "data": 7,
                    "extra_data": 1,
                    "flag": 1,
                    "flag_bits": 1,
                    "flags": 1,
                    "input_data": 2,
                    "input_param": 1,
                    "input_value": 1,
                    "instruction_set": 1,
                    "other_param": 1,
                    "param": 2,
                    "param_value": 1,
                    "parameter": 3,
                    "parameter_data": 1,
                    "value": 2
                },
                "uVar2": {
                    "bit_mask": 10,
                    "bitmask": 2,
                    "flag": 4,
                    "flag_bits": 1,
                    "flag_value": 1,
                    "flags": 10,
                    "mask": 3
                }
            },
            "called": [
                "FUN_00001cf0",
                "FUN_00001e0c"
            ],
            "calling": [
                "FUN_000020cc",
                "FUN_000020f4",
                "FUN_00002108",
                "FUN_000020b8",
                "FUN_000020e0"
            ],
            "code": "\nvoid process_data_00002028(int base_address,undefined4 data)\n\n{\n  int bit_index;\n  uint bit_mask;\n  uint bit_index;\n  \n  bit_mask = *(uint *)(base_address + 0xa0);\n  for (bit_index = 0; (int)bit_index < 0x20; bit_index = bit_index + 1) {\n    if (((bit_mask & 1 << (bit_index & 0xff)) != 0) &&\n       ((*(uint *)(base_address + bit_index * 4) & 0xf0000) != 0)) {\n      *(int *)(base_address + 0xa0) = 1 << (bit_index & 0xff);\n      bit_index = extract_bits_and_return_00001e0c(data,bit_index);\n      (**(code **)(&DAT_1fff0b78 + bit_index * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + bit_index * 0xc));\n    }\n  }\n  check_and_set_memory_protection_flag_00001cf0();\n  return;\n}\n\n",
            "current_name": "process_data_00002028",
            "entrypoint": "0x00002028",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002028": "process_data_00002028",
                "iVar1": "bit_index",
                "local_c": "bit_index",
                "param_1": "base_address",
                "param_2": "data",
                "uVar2": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000020b8": {
            "additional_data": {
                "0": {
                    "data_type": 1,
                    "flag": 2,
                    "initial_value": 1
                },
                "0x40049000": {
                    "base_address": 3,
                    "data": 1,
                    "data_address": 14
                },
                "DAT_40049000": {
                    "data": 1
                },
                "FUN_000020b8": {
                    "initialize_data": 5,
                    "initialize_data_processing": 19,
                    "initialize_data_processor": 1,
                    "initialize_process_data": 1,
                    "process_data": 3,
                    "process_initial_data": 2
                },
                "PTR_00002028": {
                    "memory_address": 1
                },
                "process_data_00002028": {
                    "process_data": 27
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_processing_000020b8(void)\n\n{\n  process_data(0x40049000,0);\n  return;\n}\n\n",
            "current_name": "initialize_data_processing_000020b8",
            "entrypoint": "0x000020b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000020b8": "initialize_data_processing_000020b8",
                "process_data_00002028": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000020cc": {
            "additional_data": {
                "": {
                    "": 1
                },
                "0x4004a000": {
                    "data": 2,
                    "data_address": 9,
                    "data_buffer_ptr": 1,
                    "data_chunk_address": 1,
                    "input_data": 1
                },
                "1": {
                    "chunk_size": 1,
                    "count": 1,
                    "data_flag": 1,
                    "data_length": 1,
                    "flag": 2,
                    "num_chunks": 1,
                    "num_iterations": 1,
                    "number_of_iterations": 1,
                    "process_flag": 1,
                    "processing_mode": 1
                },
                "FUN_000020cc": {
                    "initialize_data": 1,
                    "initialize_data_processing": 5,
                    "process_and_output_data": 1,
                    "process_and_return": 1,
                    "process_and_return_data": 3,
                    "process_and_send_data": 4,
                    "process_and_store_data": 1,
                    "process_data": 14,
                    "process_main_data": 1
                },
                "process_data_00002028": {
                    "process_data": 18,
                    "process_data_at_address": 1,
                    "process_data_chunk": 3,
                    "process_data_function": 1,
                    "process_data_helper": 5,
                    "process_data_impl": 1,
                    "read_and_process_data": 1
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid process_and_send_data_000020cc(void)\n\n{\n  process_data(0x4004a000,1);\n  return;\n}\n\n",
            "current_name": "process_and_send_data_000020cc",
            "entrypoint": "0x000020cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000020cc": "process_and_send_data_000020cc",
                "process_data_00002028": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000020e0": {
            "additional_data": {
                "": {
                    "": 2
                },
                "0x4004b000": {
                    "data_address": 7,
                    "data_pointer": 3,
                    "data_start_address": 2
                },
                "2": {
                    "data_count": 1,
                    "data_length": 2,
                    "data_size": 2,
                    "data_type": 1,
                    "num_iterations": 2,
                    "number_of_iterations": 4
                },
                "FUN_000020e0": {
                    "initialize_data_processing": 7,
                    "process_and_handle_data": 2,
                    "process_and_return_data": 1,
                    "process_data": 18,
                    "process_initial_data": 2,
                    "process_memory_data": 1
                },
                "param_1": {
                    "base_address": 1
                },
                "param_2": {
                    "num_iterations": 1
                },
                "process_data_00002028": {
                    "activate_process": 1,
                    "process_data": 12,
                    "process_data2": 1,
                    "process_data_chunk": 2,
                    "process_data_helper": 6,
                    "process_data_internal": 1,
                    "process_data_subset": 1,
                    "update_data": 1
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid process_and_handle_data_000020e0(void)\n\n{\n  process_data(0x4004b000,2);\n  return;\n}\n\n",
            "current_name": "process_and_handle_data_000020e0",
            "entrypoint": "0x000020e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000020e0": "process_and_handle_data_000020e0",
                "process_data_00002028": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000020f4": {
            "additional_data": {
                "0x4004c000": {
                    "base_address": 1,
                    "data": 2,
                    "data_address": 16,
                    "data_buffer": 1,
                    "data_pointer": 1
                },
                "3": {
                    "buffer_size": 1,
                    "data_length": 4,
                    "data_size": 5,
                    "num_elements": 1,
                    "num_iterations": 7,
                    "num_of_iterations": 1,
                    "number_of_processes": 1,
                    "size": 1
                },
                "FUN_00002028": {
                    "process_data_internal": 1
                },
                "FUN_000020f4": {
                    "initialize_data_processing": 10,
                    "initialize_process_data": 1,
                    "process_and_display_data": 1,
                    "process_and_print_data": 1,
                    "process_and_send_data": 1,
                    "process_data": 15,
                    "process_initial_data": 1,
                    "process_main_data": 1
                },
                "process_data_00002028": {
                    "process_data": 17,
                    "process_data_helper": 5
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid process_main_data_000020f4(void)\n\n{\n  process_data(0x4004c000,3);\n  return;\n}\n\n",
            "current_name": "process_main_data_000020f4",
            "entrypoint": "0x000020f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000020f4": "process_main_data_000020f4",
                "process_data_00002028": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002108": {
            "additional_data": {
                "0x4004d000": {
                    "data": 3,
                    "data_address": 9,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "input_data": 1,
                    "memory_address": 1
                },
                "4": {
                    "data_length": 2,
                    "data_size": 9,
                    "num_iterations": 1,
                    "size": 2
                },
                "DAT_00002028": {
                    "data_address": 1
                },
                "FUN_00002108": {
                    "initialize_data": 1,
                    "initialize_data_processing": 10,
                    "initialize_data_processor": 1,
                    "process_data": 14,
                    "process_function": 1,
                    "process_initial_data": 1,
                    "process_main_data": 1,
                    "process_memory": 1,
                    "process_memory_data": 1
                },
                "PTR_00002028": {
                    "data_pointer": 1
                },
                "arg1": {
                    "data_address": 1
                },
                "arg2": {
                    "data_size": 1
                },
                "process_data_00002028": {
                    "handle_data": 1,
                    "process_data": 15,
                    "process_data_block": 1,
                    "process_data_chunk": 2,
                    "process_data_helper": 3,
                    "process_data_subset": 1,
                    "process_data_with_offset": 1,
                    "read_memory": 1,
                    "update_memory": 1
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid process_main_data_00002108(void)\n\n{\n  process_data(0x4004d000,4);\n  return;\n}\n\n",
            "current_name": "process_main_data_00002108",
            "entrypoint": "0x00002108",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002108": "process_main_data_00002108",
                "process_data_00002028": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000211c": {
            "additional_data": {
                "0x200": {
                    "default_stack_size": 1
                },
                "DAT_000070b8": {
                    "header": 1,
                    "pid": 3,
                    "state": 1,
                    "state_string": 1,
                    "state_title": 1
                },
                "DAT_00007190": {
                    "footer1": 1,
                    "opening_delimiter": 1,
                    "padding": 1,
                    "state": 2
                },
                "DAT_00007194": {
                    "closing_delimiter": 1,
                    "footer2": 1,
                    "message": 1,
                    "padding_title": 1,
                    "q": 1
                },
                "DAT_1fff0358": {
                    "array_offsets": 1,
                    "data_array": 1,
                    "dynamic_array": 1,
                    "elf32_rel_array_1fff0200": 1
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "dynamic_array_offsets": 1,
                    "elf_rel_array": 1,
                    "rel_array": 1,
                    "relocation_array": 1
                },
                "FUNC_00004c84": {
                    "print": 1,
                    "print_formatted": 4,
                    "print_formatted_line": 1,
                    "print_formatted_output": 2,
                    "print_formatted_string": 1,
                    "print_function": 1,
                    "print_line": 3
                },
                "FUN_0000211c": {
                    "print_memory_info": 1,
                    "print_memory_information": 1,
                    "print_memory_status": 2,
                    "print_memory_usage": 2,
                    "print_process_details": 2,
                    "print_process_info": 5,
                    "print_process_information": 12,
                    "print_process_stack_information": 1,
                    "print_process_state": 1,
                    "print_process_status": 1,
                    "print_system_state": 1,
                    "print_system_status": 1
                },
                "calculate_array_offset_000010a0": {
                    "calculate_array_offset": 15,
                    "calculate_offset": 1
                },
                "get_main_stack_pointer_wrapper_00000900": {
                    "get_main_stack_pointer": 4,
                    "get_main_stack_pointer_wrapper": 8,
                    "get_main_stack_ptr": 1,
                    "get_stack_pointer": 1
                },
                "get_masked_memory_address_0000091c": {
                    "get_masked_mem_addr": 1,
                    "get_masked_memory_address": 13
                },
                "get_remaining_array_size_000008b8": {
                    "get_remaining_array_size": 14
                },
                "local_14": {
                    "accumulated_size": 1,
                    "current_memory": 1,
                    "current_memory_usage": 1,
                    "current_offset": 1,
                    "current_size": 1,
                    "current_stack": 1,
                    "current_stack_size": 6,
                    "current_stack_usage": 1,
                    "total_heap_usage": 1,
                    "total_memory_usage": 1,
                    "total_memory_used": 1,
                    "total_process_size": 1,
                    "total_size": 1,
                    "total_stack_offset": 2,
                    "total_stack_size": 4,
                    "total_stack_usage": 1,
                    "total_stack_used": 1,
                    "total_used_stack_size": 1,
                    "used_memory": 1
                },
                "local_18": {
                    "stack_size": 1,
                    "total_array_offset": 6,
                    "total_memory": 1,
                    "total_memory_usage": 1,
                    "total_offset": 1,
                    "total_size": 2,
                    "total_stack_offset": 1,
                    "total_stack_size": 9,
                    "total_stack_usage": 4,
                    "total_stack_used": 2,
                    "total_used_size": 1
                },
                "local_1a": {
                    "count": 1,
                    "counter": 6,
                    "current_iteration": 1,
                    "entry_count": 1,
                    "i": 1,
                    "idx": 1,
                    "index": 5,
                    "index2": 2,
                    "iter": 1,
                    "iteration": 1,
                    "loop_counter": 3,
                    "loop_index": 6,
                    "process_index": 1
                },
                "local_20": {
                    "array_size": 5,
                    "remaining_array_size": 16,
                    "remaining_size": 8,
                    "total_size": 1
                },
                "local_24": {
                    "masked_address": 6,
                    "masked_memory": 1,
                    "masked_memory_addr": 2,
                    "masked_memory_address": 15,
                    "mem_addr": 1,
                    "memory": 1,
                    "memory_address": 3,
                    "stack_pointer": 1
                },
                "local_28": {
                    "base_address": 1,
                    "main_stack_pointer": 15,
                    "main_stack_ptr": 1,
                    "memory_address": 1,
                    "sp": 1,
                    "stack": 1,
                    "stack_base_addr": 1,
                    "stack_pointer": 9
                },
                "local_2c": {
                    "array_pointer": 5,
                    "current_address": 1,
                    "current_element": 4,
                    "current_entry": 1,
                    "current_item_pointer": 1,
                    "current_pointer": 4,
                    "elf_info": 1,
                    "entry_pointer": 2,
                    "function_address": 1,
                    "function_pointer": 1,
                    "function_ptr": 1,
                    "pointer": 6,
                    "ptr": 1,
                    "record": 1
                },
                "local_30": {
                    "array_index": 1,
                    "byte_value": 4,
                    "entry_index": 2,
                    "index": 18,
                    "memory_index": 1,
                    "queue": 1,
                    "queue_size": 1,
                    "stack_index": 1,
                    "stack_size": 1
                },
                "local_34": {
                    "address": 3,
                    "base_addr": 2,
                    "base_address": 4,
                    "current": 1,
                    "current_addr": 1,
                    "current_address": 1,
                    "current_instruction": 1,
                    "current_offset": 1,
                    "local_variable": 1,
                    "memory_address": 9,
                    "memory_offset": 2,
                    "relocation_offset": 1,
                    "stack_address": 1,
                    "stack_base_address": 1,
                    "stack_used": 1
                },
                "local_38": {
                    "flag": 2,
                    "flags": 1,
                    "index": 1,
                    "is_big_stack": 1,
                    "is_priority": 1,
                    "is_priority_set": 2,
                    "isr_flag": 1,
                    "mask_adjustment": 1,
                    "mask_offset": 1,
                    "offset": 5,
                    "offset_index": 1,
                    "priority": 2,
                    "queue": 1,
                    "space": 1,
                    "stack_base": 2,
                    "stack_current": 1,
                    "stack_offset": 1,
                    "stack_overflow": 1,
                    "stack_size": 2,
                    "stack_used": 2
                },
                "local_3c": {
                    "array_offset": 3,
                    "array_size": 4,
                    "current_stack": 1,
                    "offset": 1,
                    "remaining_array_size": 1,
                    "remaining_stack_size": 2,
                    "size": 2,
                    "stack_base": 1,
                    "stack_offset": 2,
                    "stack_size": 6,
                    "stack_usage": 3,
                    "stack_used": 2,
                    "total_size": 1,
                    "total_stack": 1
                },
                "local_40": {
                    "format_specifier": 2,
                    "format_string": 16,
                    "header": 4,
                    "message_format": 1,
                    "padding": 2,
                    "placeholder": 1,
                    "row_separator": 1,
                    "separator": 1,
                    "title": 2
                }
            },
            "called": [
                "FUN_00000900",
                "FUN_00004c84",
                "FUN_0000091c",
                "FUN_000008b8",
                "FUN_000010a0"
            ],
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "code": "\nvoid print_process_stack_information_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 format_string;\n  int stack_size;\n  int offset;\n  dword memory_address;\n  uint index;\n  undefined4 *pointer;\n  undefined4 main_stack_pointer;\n  undefined4 masked_memory_address;\n  int remaining_array_size;\n  short counter;\n  int total_stack_size;\n  int current_stack_size;\n  \n  format_string = 0x515f;\n  current_stack_size = 0;\n  total_stack_size = 0;\n  process_elf_data_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  remaining_array_size = get_remaining_array_size();\n  masked_memory_address = get_masked_memory_address();\n  main_stack_pointer = get_main_stack_pointer_wrapper();\n  process_elf_data_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               remaining_array_size,masked_memory_address,main_stack_pointer);\n  current_stack_size = current_stack_size + 0x200;\n  if (0 < remaining_array_size) {\n    total_stack_size = remaining_array_size + total_stack_size;\n  }\n  for (counter = 1; counter < 0x21; counter = counter + 1) {\n    pointer = *(undefined4 **)(&DAT_1fff0358 + counter * 4);\n    if (pointer != (undefined4 *)0x0) {\n      index = (uint)*(byte *)(pointer + 1);\n      memory_address = (&elf_rel_array[4].r_offset)[index];\n      offset = (int)&format_string + (uint)(8 < index);\n      stack_size = pointer[0xb];\n      current_stack_size = stack_size + current_stack_size;\n      iVar1 = calculate_array_offset(pointer[9]);\n      stack_size = stack_size - iVar1;\n      total_stack_size = stack_size + total_stack_size;\n      process_elf_data_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)pointer + 6),pointer[10],memory_address,offset,\n                   *(undefined *)((int)pointer + 5),pointer[0xb],stack_size,pointer[9],*pointer);\n    }\n  }\n  process_elf_data_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,current_stack_size,total_stack_size);\n  return;\n}\n\n",
            "code_backup": "\nvoid FUN_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 local_40;\n  int local_3c;\n  int local_38;\n  dword local_34;\n  uint local_30;\n  undefined4 *local_2c;\n  undefined4 local_28;\n  undefined4 local_24;\n  int local_20;\n  short local_1a;\n  int local_18;\n  int local_14;\n  \n  local_40 = 0x515f;\n  local_14 = 0;\n  local_18 = 0;\n  FUNC_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  local_20 = get_remaining_array_size_000008b8();\n  local_24 = get_masked_memory_address_0000091c();\n  local_28 = get_main_stack_pointer_wrapper_00000900();\n  FUNC_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               local_20,local_24,local_28);\n  local_14 = local_14 + 0x200;\n  if (0 < local_20) {\n    local_18 = local_20 + local_18;\n  }\n  for (local_1a = 1; local_1a < 0x21; local_1a = local_1a + 1) {\n    local_2c = *(undefined4 **)(&DAT_1fff0358 + local_1a * 4);\n    if (local_2c != (undefined4 *)0x0) {\n      local_30 = (uint)*(byte *)(local_2c + 1);\n      local_34 = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[local_30];\n      local_38 = (int)&local_40 + (uint)(8 < local_30);\n      local_3c = local_2c[0xb];\n      local_14 = local_3c + local_14;\n      iVar1 = calculate_array_offset_000010a0(local_2c[9]);\n      local_3c = local_3c - iVar1;\n      local_18 = local_3c + local_18;\n      FUNC_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)local_2c + 6),local_2c[10],local_34,local_38,\n                   *(undefined *)((int)local_2c + 5),local_2c[0xb],local_3c,local_2c[9],*local_2c);\n    }\n  }\n  FUNC_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,local_14,local_18);\n  return;\n}\n\n",
            "current_name": "print_process_stack_information_0000211c",
            "entrypoint": "0x0000211c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "elf_rel_array",
                "FUN_0000211c": "print_process_stack_information_0000211c",
                "calculate_array_offset_000010a0": "calculate_array_offset",
                "get_main_stack_pointer_wrapper_00000900": "get_main_stack_pointer_wrapper",
                "get_masked_memory_address_0000091c": "get_masked_memory_address",
                "get_remaining_array_size_000008b8": "get_remaining_array_size",
                "local_14": "current_stack_size",
                "local_18": "total_stack_size",
                "local_1a": "counter",
                "local_20": "remaining_array_size",
                "local_24": "masked_memory_address",
                "local_28": "main_stack_pointer",
                "local_2c": "pointer",
                "local_30": "index",
                "local_34": "memory_address",
                "local_38": "offset",
                "local_3c": "stack_size",
                "local_40": "format_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002270": {
            "additional_data": {
                "FUN_00002270": {
                    "check_equal_values": 1,
                    "check_equality": 28,
                    "check_if_equal": 2
                },
                "bVar3": {
                    "equal": 1,
                    "is_equal": 18,
                    "is_equality": 1,
                    "is_match": 3,
                    "is_matching": 5,
                    "is_same": 1,
                    "is_value_at_offset8_equal": 1,
                    "is_value_equal": 1
                },
                "iVar2": {
                    "comparison_value": 1,
                    "value": 21,
                    "value1": 2,
                    "value_at_address": 1,
                    "value_at_index": 2,
                    "value_at_index_c": 1,
                    "value_at_offset12": 1,
                    "value_at_offset_c": 1,
                    "value_from_address": 1
                },
                "param_1": {
                    "arg1": 1,
                    "base_address": 1,
                    "input": 23,
                    "input_address": 1,
                    "input_value": 4,
                    "pointer": 1
                },
                "uVar1": {
                    "result": 9,
                    "return_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0000231c"
            ],
            "code": "\nundefined check_equality_00002270(int input)\n\n{\n  undefined result;\n  int value;\n  bool is_equal;\n  \n  value = *(int *)(input + 0xc);\n  is_equal = *(int *)(input + 8) == value;\n  if (is_equal) {\n    value = 1;\n  }\n  result = (undefined)value;\n  if (!is_equal) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "check_equality_00002270",
            "entrypoint": "0x00002270",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "bVar3": "is_equal",
                "iVar2": "value",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002294": {
            "additional_data": {
                "FUN_00002294": {
                    "check_arr": 1,
                    "check_array_size": 1,
                    "check_array_sum": 1,
                    "check_difference": 3,
                    "check_equality": 13,
                    "check_if_difference_equals_value": 1,
                    "check_if_difference_is_equal_to_value": 1,
                    "check_if_sum_equals": 1,
                    "check_param_difference": 1,
                    "check_parameter_consistency": 1,
                    "check_sum_is_equal": 1,
                    "check_sum_is_valid": 1,
                    "check_sum_match": 1,
                    "check_sum_matches": 1,
                    "compare_difference": 1,
                    "compare_integers": 1,
                    "is_equal": 1
                },
                "bVar3": {
                    "is_consistent": 1,
                    "is_difference_equal": 9,
                    "is_equal": 12,
                    "is_equal_size": 1,
                    "is_match": 2,
                    "is_offset_equal": 1,
                    "is_same": 1,
                    "is_sum_equal": 3,
                    "is_valid": 1
                },
                "iVar2": {
                    "checksum": 2,
                    "difference": 15,
                    "element": 1,
                    "element_size": 1,
                    "integer_difference": 1,
                    "last_element": 1,
                    "offset": 6,
                    "sum_difference": 2,
                    "value": 2
                },
                "param_1": {
                    "address": 1,
                    "arr": 1,
                    "array": 1,
                    "array_pointer": 1,
                    "base_address": 1,
                    "buffer": 1,
                    "comparison_data": 1,
                    "data": 1,
                    "input": 18,
                    "input_data": 1,
                    "input_value": 3,
                    "param": 1
                },
                "uVar1": {
                    "result": 15,
                    "return_value": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_00002364"
            ],
            "code": "\nundefined check_equality_00002294(int input)\n\n{\n  undefined result;\n  int difference;\n  bool is_equal;\n  \n  difference = *(int *)(input + 4);\n  is_equal = *(int *)(input + 0xc) - *(int *)(input + 8) == difference;\n  if (is_equal) {\n    difference = 1;\n  }\n  result = (undefined)difference;\n  if (!is_equal) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "check_equality_00002294",
            "entrypoint": "0x00002294",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002294": "check_equality_00002294",
                "bVar3": "is_equal",
                "iVar2": "difference",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000022be": {
            "additional_data": {
                "FUN_000022be": {
                    "increase_and_store_value": 3,
                    "increment_and_store_value": 11,
                    "increment_and_write_value": 1,
                    "store_byte_value_at_index_offset": 1,
                    "store_character_at_index": 1,
                    "store_param_in_array": 1,
                    "store_parameter_at_index": 1,
                    "store_value_at_index": 1,
                    "store_value_in_array": 1,
                    "update_and_store_value": 1,
                    "update_array_element": 3,
                    "update_array_value": 1,
                    "update_array_with_index": 1,
                    "update_array_with_value": 1,
                    "write_byte_to_memory": 1,
                    "write_value_to_memory": 2
                },
                "new_variable_name_1": {
                    "updated_value": 1
                },
                "param_1": {
                    "arguments": 1,
                    "array": 26,
                    "array_pointer": 2,
                    "memory": 1,
                    "memory_block": 1
                },
                "param_2": {
                    "character": 1,
                    "new_element": 1,
                    "new_value": 2,
                    "value": 23,
                    "value_to_store": 3,
                    "value_to_write": 1
                },
                "uVar1": {
                    "current_element": 1,
                    "current_index": 9,
                    "current_value": 8,
                    "index": 2,
                    "old_value": 5,
                    "original_value": 1,
                    "previous_value": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_00002364"
            ],
            "code": "\nvoid increment_and_store_value_000022be(int *array,undefined value)\n\n{\n  uint current_index;\n  \n  current_index = array[3];\n  array[3] = current_index + 1;\n  *(undefined *)((current_index & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "current_name": "increment_and_store_value_000022be",
            "entrypoint": "0x000022be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000022be": "increment_and_store_value_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "current_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000022f0": {
            "additional_data": {
                "DAT_": {
                    "dat_": 1,
                    "unchanged": 1
                },
                "FUN_000022f0": {
                    "increment_and_access_byte": 1,
                    "increment_and_access_element": 2,
                    "increment_and_access_memory": 2,
                    "increment_and_access_value": 2,
                    "increment_and_retrieve_element": 1,
                    "increment_and_retrieve_value": 4,
                    "increment_and_return": 1,
                    "increment_and_return_byte_from_offset": 1,
                    "increment_and_return_element": 8,
                    "increment_and_return_offset": 1,
                    "increment_index_and_retrieve_value": 1,
                    "increment_index_and_return_value": 1,
                    "increment_pointer_and_return_element": 1,
                    "increment_value": 1,
                    "increment_value_and_return": 1,
                    "increment_value_and_return_byte": 1,
                    "increment_value_at_index": 1,
                    "update_and_return_value": 1
                },
                "PTR_": {
                    "ptr_": 1,
                    "unchanged": 1
                },
                "param_1": {
                    "array": 27,
                    "array_ptr": 1,
                    "index_array": 1,
                    "input_array": 1,
                    "offset_array": 1
                },
                "return": {
                    "result": 2
                },
                "uVar1": {
                    "array_element": 1,
                    "current_element": 1,
                    "current_index": 3,
                    "current_offset": 2,
                    "current_value": 3,
                    "element": 4,
                    "element_at_offset2": 1,
                    "element_index": 4,
                    "index": 3,
                    "new_value": 1,
                    "old_element": 1,
                    "old_value": 1,
                    "original_value": 2,
                    "previous_value": 1,
                    "value": 3
                },
                "undefined": {
                    "data_type": 1,
                    "void": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0000231c"
            ],
            "code": "\nvoid increment_pointer_and_return_element_000022f0(int *array)\n\n{\n  uint element_index;\n  \n  element_index = array[2];\n  array[2] = element_index + 1;\n  result *(void *)((element_index & array[1] - 1U) + *array);\n}\n\n",
            "current_name": "increment_pointer_and_return_element_000022f0",
            "entrypoint": "0x000022f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000022f0": "increment_pointer_and_return_element_000022f0",
                "param_1": "array",
                "return": "result",
                "uVar1": "element_index",
                "undefined": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000231c": {
            "additional_data": {
                "FUN_0000231c": {
                    "copy_and_count": 2,
                    "copy_and_decrement": 1,
                    "copy_and_increment": 5,
                    "copy_and_increment_elements": 2,
                    "copy_elements": 12,
                    "copy_elements_from_buffer": 1,
                    "copy_incrementing_pointers_and_return_count": 1,
                    "copy_with_limit": 2,
                    "extract_and_count": 1,
                    "extract_and_count_elements": 1,
                    "extract_elements": 2,
                    "process_data": 1
                },
                "iVar2": {
                    "equality_check": 2,
                    "equality_check_result": 9,
                    "equality_result": 3,
                    "is_equal": 4
                },
                "local_14": {
                    "remaining": 2,
                    "remaining_copy_size": 1,
                    "remaining_count": 1,
                    "remaining_elements": 19,
                    "remaining_length": 4,
                    "remaining_size": 4
                },
                "local_20": {
                    "current_dest": 1,
                    "current_dest_pointer": 1,
                    "current_destination": 5,
                    "dest_pointer": 4,
                    "dest_ptr": 9,
                    "destination_ptr": 1,
                    "dst_ptr": 2,
                    "output_array_ptr": 1,
                    "output_pointer": 1,
                    "output_ptr": 5,
                    "output_ptr_copy": 1
                },
                "param_1": {
                    "array": 1,
                    "data": 1,
                    "data_ptr": 1,
                    "element": 4,
                    "element_to_copy": 1,
                    "input_element": 3,
                    "input_value": 2,
                    "param": 2,
                    "param_1": 1,
                    "param_ptr": 1,
                    "ptr": 1,
                    "source": 3,
                    "source_address": 1,
                    "source_buffer": 1,
                    "source_element": 1,
                    "source_pointer": 1,
                    "source_value": 1,
                    "src": 2,
                    "src_element": 3
                },
                "param_2": {
                    "dest": 3,
                    "dest_array": 2,
                    "dest_buffer": 1,
                    "dest_pointer": 1,
                    "destination": 9,
                    "destination_address": 1,
                    "destination_array": 4,
                    "destination_buffer": 1,
                    "dst": 1,
                    "output_array": 5,
                    "output_buffer": 2,
                    "output_ptr": 1
                },
                "param_3": {
                    "array_length": 2,
                    "buffer_size": 2,
                    "count": 1,
                    "length": 5,
                    "limit": 1,
                    "max_elements": 1,
                    "num_elements": 16,
                    "size": 3
                },
                "uVar1": {
                    "copied_value": 1,
                    "current_element": 8,
                    "current_value": 1,
                    "element": 7,
                    "incremented_value": 1
                }
            },
            "called": [
                "FUN_000022f0",
                "FUN_00002270"
            ],
            "calling": [
                "FUN_000012e2"
            ],
            "code": "\nint copy_and_increment_elements_0000231c(undefined4 element,undefined *destination,int num_elements)\n\n{\n  undefined current_element;\n  int equality_check_result;\n  undefined *dest_ptr;\n  int remaining_elements;\n  \n  dest_ptr = destination;\n  remaining_elements = num_elements;\n  while ((remaining_elements != 0 && (equality_check_result = check_equality_00002270(element), equality_check_result == 0))) {\n    current_element = increment_pointer_and_return_element_000022f0(element);\n    *dest_ptr = current_element;\n    remaining_elements = remaining_elements + -1;\n    dest_ptr = dest_ptr + 1;\n  }\n  return num_elements - remaining_elements;\n}\n\n",
            "current_name": "copy_and_increment_elements_0000231c",
            "entrypoint": "0x0000231c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000231c": "copy_and_increment_elements_0000231c",
                "iVar2": "equality_check_result",
                "local_14": "remaining_elements",
                "local_20": "dest_ptr",
                "param_1": "element",
                "param_2": "destination",
                "param_3": "num_elements",
                "uVar1": "current_element"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002364": {
            "additional_data": {
                "FUN_00002364": {
                    "check_and_increment": 2,
                    "check_and_increment_value": 5,
                    "check_and_update_value": 1,
                    "handle_equality_check": 3,
                    "perform_check_and_increment": 1,
                    "perform_operation": 1,
                    "process_equality_check": 2,
                    "process_param_data": 1,
                    "process_value": 1,
                    "update_value_if_equal": 11,
                    "update_value_if_not_equal": 3
                },
                "iVar1": {
                    "check_result": 1,
                    "equality_check_result": 7,
                    "equality_result": 3,
                    "is_equal": 17,
                    "is_equality_checked": 1,
                    "is_value_equal": 2
                },
                "param_1": {
                    "data": 1,
                    "input_value": 9,
                    "input_value1": 1,
                    "value": 18,
                    "value1": 2
                },
                "param_2": {
                    "additional_data": 2,
                    "another_param": 1,
                    "condition": 1,
                    "data": 4,
                    "flag": 3,
                    "flag_value": 1,
                    "increment": 1,
                    "increment_value": 1,
                    "input_undefined": 1,
                    "input_value2": 1,
                    "new_value": 9,
                    "other_value": 1,
                    "output_value": 1,
                    "value": 1,
                    "value2": 2,
                    "value_to_store": 1
                },
                "uVar2": {
                    "result": 12,
                    "return_code": 1,
                    "return_value": 18
                }
            },
            "called": [
                "FUN_000022be",
                "FUN_00002294"
            ],
            "calling": [
                "FUN_000012b4"
            ],
            "code": "\nundefined4 update_value_if_not_equal_00002364(undefined4 value,undefined new_value)\n\n{\n  int is_equal;\n  undefined4 return_value;\n  \n  is_equal = check_equality_00002294(value);\n  if (is_equal == 0) {\n    increment_and_store_value_000022be(value,new_value);\n    return_value = 0;\n  }\n  else {\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_value_if_not_equal_00002364",
            "entrypoint": "0x00002364",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002364": "update_value_if_not_equal_00002364",
                "iVar1": "is_equal",
                "param_1": "value",
                "param_2": "new_value",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002396": {
            "additional_data": {
                "FUN_00002396": {
                    "initialize_system": 31
                },
                "PARAM_00000000": {
                    "none": 1
                },
                "PTR_000025f4": {
                    "system_data": 1
                },
                "VAR_00000000": {
                    "none": 1
                },
                "initialize_system_000025f4": {
                    "initialize_system": 13
                }
            },
            "called": [
                "FUN_000025f4"
            ],
            "calling": [
                "FUN_00001274"
            ],
            "code": "\nvoid initialize_system_00002396(void)\n\n{\n  initialize_system_00002396();\n  return;\n}\n\n",
            "current_name": "initialize_system_00002396",
            "entrypoint": "0x00002396",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002396": "initialize_system_00002396",
                "initialize_system_000025f4": "initialize_system"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000023a4": {
            "additional_data": {
                "FUN_000023a4": {
                    "execute_initialization": 1,
                    "execute_program": 2,
                    "initialize_and_process_data": 1,
                    "initialize_routine": 1,
                    "initialize_system": 23,
                    "run_application": 1,
                    "start_execution": 1
                },
                "auStack_88": {
                    "buffer": 14,
                    "data_buffer": 10,
                    "input_buffer": 7
                },
                "process_and_validate_data_00004db8": {
                    "process_and_validate_data": 14
                },
                "process_input_and_validate_loop_00002e6c": {
                    "input_and_validate_loop": 2,
                    "input_validation_loop": 2,
                    "process_and_validate_loop": 1,
                    "process_input_and_validate_loop": 9
                },
                "send_interrupt_signal_000023d0": {
                    "send_interrupt_signal": 14
                },
                "software_interrupt": {
                    "execute_software_interrupt": 1,
                    "perform_software_interrupt": 1,
                    "trigger_software_interrupt": 12
                },
                "uVar1": {
                    "result": 2,
                    "return_value": 5
                }
            },
            "called": [
                "FUN_000023d0",
                "FUN_00004db8",
                "FUN_00002e6c"
            ],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nundefined4 initialize_system_000023a4(void)\n\n{\n  undefined4 return_value;\n  undefined buffer [128];\n  \n  send_interrupt_signal(0);\n  process_and_validate_data(\"Welcome to RIOT!\");\n  return_value = process_input_and_validate_loop(0,buffer,0x80);\n  trigger_software_interrupt(0x3f);\n  return return_value;\n}\n\n",
            "current_name": "initialize_system_000023a4",
            "entrypoint": "0x000023a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "buffer",
                "process_and_validate_data_00004db8": "process_and_validate_data",
                "process_input_and_validate_loop_00002e6c": "process_input_and_validate_loop",
                "send_interrupt_signal_000023d0": "send_interrupt_signal",
                "software_interrupt": "trigger_software_interrupt",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000023c8": {
            "additional_data": {
                "": {
                    "": 1
                },
                "FUN_000023c8": {
                    "execute_software_interrupt": 8,
                    "execute_system_call": 1,
                    "initiate_software_interrupt": 2,
                    "invoke_system_interrupt": 2,
                    "perform_software_interrupt": 1,
                    "send_interrupt": 1,
                    "send_interrupt_request": 1,
                    "send_software_interrupt": 10,
                    "trigger_software_interrupt": 4,
                    "trigger_system_interrupt": 1
                },
                "PTR_00000014": {
                    "interrupt_code": 1
                },
                "software_interrupt": {
                    "execute_interrupt": 1,
                    "execute_software_interrupt": 1,
                    "interrupt_code": 1,
                    "invoke_interrupt": 3,
                    "invoke_software_interrupt": 2,
                    "invoke_system_call": 1,
                    "perform_interrupt": 1,
                    "perform_system_call": 1,
                    "send_interrupt": 5,
                    "send_interrupt_command": 1,
                    "trigger_interrupt": 4,
                    "trigger_software_interrupt": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_000023d0"
            ],
            "code": "\nvoid send_software_interrupt_000023c8(void)\n\n{\n  send_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "send_software_interrupt_000023c8",
            "entrypoint": "0x000023c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000023c8": "send_software_interrupt_000023c8",
                "software_interrupt": "send_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000023d0": {
            "additional_data": {
                "FUN_000023d0": {
                    "check_interrupt": 1,
                    "handle_interrupt": 1,
                    "send_interrupt": 18,
                    "send_interrupt_if_needed": 1,
                    "send_interrupt_if_not_already_sent": 1,
                    "send_interrupt_if_supported": 1,
                    "send_interrupt_on_condition": 1,
                    "send_interrupt_or_zero": 1,
                    "send_interrupt_request": 1,
                    "send_interrupt_signal": 4
                },
                "param_1": {
                    "argument": 1,
                    "condition": 1,
                    "data": 6,
                    "input_data": 1,
                    "input_param": 1,
                    "input_value": 1,
                    "interrupt_code": 6,
                    "interrupt_data": 2,
                    "interrupt_flag": 1,
                    "interrupt_num": 1,
                    "interrupt_parameter": 2,
                    "interrupt_type": 4,
                    "request_code": 1,
                    "signal_number": 1,
                    "signal_type": 1,
                    "signal_value": 1
                },
                "uVar1": {
                    "result": 27,
                    "return_value": 3,
                    "status": 1
                }
            },
            "called": [
                "FUN_000023c8"
            ],
            "calling": [
                "FUN_000023a4"
            ],
            "code": "\nundefined4 send_interrupt_signal_000023d0(undefined4 data)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = send_software_interrupt_000023c8(1,data,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "send_interrupt_signal_000023d0",
            "entrypoint": "0x000023d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000023d0": "send_interrupt_signal_000023d0",
                "param_1": "data",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002400": {
            "called": [],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00002400",
            "entrypoint": "0x00002400",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0000240c": {
            "additional_data": {
                "FUN_0000240c": {
                    "copy_and_return_next": 3,
                    "copy_and_return_next_element": 1,
                    "copy_and_return_next_pointer": 1,
                    "copy_and_return_pointer": 1,
                    "copy_data": 1,
                    "copy_data_and_return_pointer": 1,
                    "copy_linked_list": 2,
                    "copy_next_ptr": 1,
                    "copy_pointer": 1,
                    "copy_ptr_value": 1,
                    "extract_and_override": 1,
                    "extract_linked_list_node": 1,
                    "extract_linked_value": 1,
                    "extract_next_element": 1,
                    "extract_next_pointer": 2,
                    "extract_next_value": 1,
                    "extract_pointer": 1,
                    "extract_value_and_assign": 1,
                    "extract_value_from_pointer": 1,
                    "extracted_pointer": 1,
                    "update_pointer": 7
                },
                "param_1": {
                    "current_element": 1,
                    "current_pointer": 2,
                    "current_ptr": 1,
                    "current_value": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input_array": 1,
                    "input_pointer": 2,
                    "input_ptr": 3,
                    "linked_list": 1,
                    "linked_list_ptr": 1,
                    "list": 2,
                    "list_head": 1,
                    "node": 1,
                    "pointer": 6,
                    "pointer_array": 1,
                    "pointer_to_data": 1,
                    "pointer_to_update": 1,
                    "ptr": 1,
                    "source_pointer": 1
                },
                "puVar1": {
                    "current_node": 1,
                    "destination_pointer": 1,
                    "extracted_value": 1,
                    "head": 1,
                    "new_pointer": 2,
                    "next_data_pointer": 1,
                    "next_data_ptr": 1,
                    "next_element": 2,
                    "next_item": 1,
                    "next_node": 1,
                    "next_node_ptr": 1,
                    "next_pointer": 8,
                    "next_ptr": 2,
                    "next_value": 1,
                    "pointer_to_next_data": 1,
                    "ptr_to_next_node": 1,
                    "source_ptr": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 1,
                    "value_pointer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000024bc"
            ],
            "code": "\nundefined4 * update_pointer_0000240c(undefined4 *pointer)\n\n{\n  undefined4 *next_pointer;\n  \n  next_pointer = (undefined4 *)*pointer;\n  if (next_pointer != (undefined4 *)0x0) {\n    *pointer = *next_pointer;\n  }\n  return next_pointer;\n}\n\n",
            "current_name": "update_pointer_0000240c",
            "entrypoint": "0x0000240c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000240c": "update_pointer_0000240c",
                "param_1": "pointer",
                "puVar1": "next_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002434": {
            "additional_data": {
                "DAT_1fff03dc": {
                    "array_base": 1,
                    "array_pointer": 1
                },
                "FUN_00002434": {
                    "configure_interrupts": 1,
                    "handle_interrupt": 2,
                    "handle_irq": 1,
                    "handle_irq_interrupt": 3,
                    "handle_irq_interrupts": 1,
                    "initialize_interrupt_handler": 2,
                    "initialize_interrupts": 1,
                    "initialize_irq": 1,
                    "initialize_irq_handler": 1,
                    "initialize_irq_handling": 2,
                    "initialize_irq_interrupts": 1,
                    "initialize_or_reset_interrupt_status": 1,
                    "process_interrupt_status": 1,
                    "process_irq_interrupt_status": 1,
                    "update_interrupt_status": 8,
                    "update_irq_handling": 1,
                    "update_irq_interrupt_status": 1,
                    "update_pointer_and_flag": 1
                },
                "enable_ir_qinterrupts_if_current_mode_is_privileged_00000d0c": {
                    "enable_interrupts": 2,
                    "enable_interrupts_if_privileged": 1,
                    "enable_irq_interrupts_if_privileged": 1
                },
                "get_irq_interrupt_status_00000cd0": {
                    "get_interrupt_status": 1,
                    "get_status": 1
                },
                "iVar1": {
                    "array_pointer": 1,
                    "data": 2,
                    "data_address": 1,
                    "initial_ptr_val": 1,
                    "initial_value": 5,
                    "irq_handler_var": 1,
                    "irq_interrupt_status": 1,
                    "irq_value": 1,
                    "old_value": 2,
                    "ptr_offset": 1,
                    "saved_interrupt_status": 1,
                    "saved_register_value": 1,
                    "saved_value": 4,
                    "temp_var": 8,
                    "temp_variable": 1
                },
                "param_1": {
                    "array": 2,
                    "data_pointer": 1,
                    "flag_pointer": 1,
                    "interrupt_flag": 7,
                    "interrupt_status": 2,
                    "interrupt_status_pointer": 1,
                    "irq_status": 2,
                    "irq_status_pointer": 1,
                    "irq_status_ptr": 1,
                    "pointer": 3,
                    "status": 2,
                    "status_flag": 2,
                    "status_flag_ptr": 1,
                    "status_pointer": 2,
                    "status_ptr": 3
                },
                "param_2": {
                    "flag": 11,
                    "flag_mode": 1,
                    "mode": 5,
                    "mode_flag": 7,
                    "privileged_mode": 1,
                    "privileged_mode_flag": 2,
                    "privileged_mode_only": 1,
                    "reset_flag": 1,
                    "update_flag": 2
                },
                "set_memory_protection_flag_0000093c": {
                    "set_memory_protection_flag": 4
                },
                "uVar2": {
                    "interrupt_status": 10,
                    "irq_interrupt_status": 2,
                    "irq_status": 2,
                    "new_value": 1,
                    "result": 12,
                    "return_status": 1,
                    "return_value": 2,
                    "status": 1
                },
                "update_array_pointer_00001034": {
                    "update_array_pointer": 4
                },
                "update_pointer_and_flag_00000698": {
                    "update_pointer_and_flag": 4
                }
            },
            "called": [
                "FUN_00000d0c",
                "FUN_0000093c",
                "FUN_00001034",
                "FUN_00000698",
                "FUN_00000cd0"
            ],
            "calling": [
                "FUN_0000129c"
            ],
            "code": "\nundefined4 update_irq_interrupt_status_00002434(int *interrupt_flag,int flag)\n\n{\n  int temp_var;\n  undefined4 result;\n  \n  result = get_status();\n  temp_var = DAT_1fff03dc;\n  if (*interrupt_flag == 0) {\n    *interrupt_flag = -1;\n    enable_interrupts(result);\n    result = 1;\n  }\n  else if (flag == 0) {\n    enable_interrupts(result);\n    result = 0;\n  }\n  else {\n    update_pointer_and_flag(DAT_1fff03dc,2);\n    if (*interrupt_flag == -1) {\n      *interrupt_flag = temp_var + 8;\n      *(undefined4 *)*interrupt_flag = 0;\n    }\n    else {\n      update_array_pointer(interrupt_flag,temp_var);\n    }\n    enable_interrupts(result);\n    set_memory_protection_flag();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "update_irq_interrupt_status_00002434",
            "entrypoint": "0x00002434",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002434": "update_irq_interrupt_status_00002434",
                "enable_ir_qinterrupts_if_current_mode_is_privileged_00000d0c": "enable_interrupts",
                "get_irq_interrupt_status_00000cd0": "get_status",
                "iVar1": "temp_var",
                "param_1": "interrupt_flag",
                "param_2": "flag",
                "set_memory_protection_flag_0000093c": "set_memory_protection_flag",
                "uVar2": "result",
                "update_array_pointer_00001034": "update_array_pointer",
                "update_pointer_and_flag_00000698": "update_pointer_and_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000024bc": {
            "additional_data": {
                "FUN_000024bc": {
                    "enable_hardware_interrupts": 1,
                    "enable_interrupts": 1,
                    "enable_interrupts_and_update_pointer": 1,
                    "enable_interrupts_and_update_ptr": 1,
                    "enable_interrupts_based_on_condition": 1,
                    "enable_irq_interrupts": 2,
                    "handle_interrupt": 10,
                    "handle_interrupt_request": 1,
                    "handle_interrupts": 4,
                    "handle_irq_interrupt": 2,
                    "handle_irq_interrupts": 1,
                    "initialize_irq_handler": 1,
                    "process_interrupt": 1,
                    "process_interrupt_and_enable_irq": 1,
                    "process_pointer": 1,
                    "update_interrupt_status": 1,
                    "update_irq_interrupt_status": 1
                },
                "check_and_set_memory_protection_00000738": {
                    "check_and_set_memory_protection": 1
                },
                "enable_ir_qinterrupts_if_current_mode_is_privileged_00000d0c": {
                    "enable_interrupts_if_privileged": 1
                },
                "get_irq_interrupt_status_00000cd0": {
                    "get_interrupt_status": 1
                },
                "iVar3": {
                    "pointer": 2,
                    "pointer_offset": 2,
                    "pointer_update_result": 5,
                    "pointer_value": 4,
                    "temp2": 1,
                    "updated_pointer": 16,
                    "updated_value": 1
                },
                "param_1": {
                    "interrupt_flag": 7,
                    "interrupt_flag_ptr": 1,
                    "interrupt_pointer": 1,
                    "interrupt_status": 13,
                    "irq_status": 2,
                    "pointer": 4,
                    "ptr": 1,
                    "value": 1
                },
                "uVar1": {
                    "byte_val": 1,
                    "flag": 2,
                    "flag_value": 1,
                    "interrupt_flag": 6,
                    "interrupt_flag_value": 1,
                    "interrupt_status": 3,
                    "interrupt_type": 1,
                    "irq_int_status": 1,
                    "memory_protection": 1,
                    "memory_protection_flag": 1,
                    "memory_protection_value": 1,
                    "pointer_byte": 1,
                    "pointer_value": 1,
                    "previous_value": 3,
                    "status": 2,
                    "status_flag": 1,
                    "target_address": 1,
                    "temp": 1,
                    "temp1": 1,
                    "undefined_value": 1
                },
                "uVar2": {
                    "current_interrupt_status": 1,
                    "interrupt_mask": 1,
                    "interrupt_running": 1,
                    "interrupt_status": 12,
                    "interrupt_status_register": 1,
                    "interrupt_status_value": 4,
                    "irq_interrupt_status": 7,
                    "irq_status": 3,
                    "status": 1
                },
                "update_pointer_0000240c": {
                    "update_pointer": 1
                },
                "update_pointer_and_flag_00000698": {
                    "update_pointer_and_flag": 1
                }
            },
            "called": [
                "FUN_0000240c",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000698",
                "FUN_00000cd0"
            ],
            "calling": [
                "FUN_000012b4"
            ],
            "code": "\nvoid handle_irq_interrupt_000024bc(int *interrupt_status)\n\n{\n  undefined interrupt_flag;\n  undefined4 interrupt_status;\n  int updated_pointer;\n  \n  interrupt_status = get_interrupt_status();\n  if (*interrupt_status == 0) {\n    enable_interrupts_if_privileged(interrupt_status);\n  }\n  else if (*interrupt_status == -1) {\n    *interrupt_status = 0;\n    enable_interrupts_if_privileged(interrupt_status);\n  }\n  else {\n    updated_pointer = update_pointer(interrupt_status);\n    update_pointer_and_flag(updated_pointer + -8,10);\n    if (*interrupt_status == 0) {\n      *interrupt_status = -1;\n    }\n    interrupt_flag = *(undefined *)(updated_pointer + -3);\n    enable_interrupts_if_privileged(interrupt_status);\n    check_and_set_memory_protection(interrupt_flag);\n  }\n  return;\n}\n\n",
            "current_name": "handle_irq_interrupt_000024bc",
            "entrypoint": "0x000024bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000024bc": "handle_irq_interrupt_000024bc",
                "check_and_set_memory_protection_00000738": "check_and_set_memory_protection",
                "enable_ir_qinterrupts_if_current_mode_is_privileged_00000d0c": "enable_interrupts_if_privileged",
                "get_irq_interrupt_status_00000cd0": "get_interrupt_status",
                "iVar3": "updated_pointer",
                "param_1": "interrupt_status",
                "uVar1": "interrupt_flag",
                "uVar2": "interrupt_status",
                "update_pointer_0000240c": "update_pointer",
                "update_pointer_and_flag_00000698": "update_pointer_and_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002538": {
            "additional_data": {
                "0x1fff1c00": {
                    "offset": 1
                },
                "0xf": {
                    "mask": 1
                },
                "0xff": {
                    "data_mask": 1
                },
                "DAT_e000ed14": {
                    "data_array": 2,
                    "memory": 1,
                    "memory_chunk": 1,
                    "output_array": 1
                },
                "FUN_00002538": {
                    "set_byte_value": 3,
                    "set_character_value": 1,
                    "set_data_byte": 1,
                    "set_memory": 1,
                    "set_memory_byte": 2,
                    "store_byte": 3,
                    "store_byte_value": 1,
                    "store_value": 1,
                    "update_byte_value": 1,
                    "update_data": 5,
                    "update_memory": 9,
                    "update_value": 1,
                    "write_byte_to_memory": 1,
                    "write_data": 1
                },
                "PTR_": {
                    "": 1,
                    "unchanged": 1
                },
                "byte": {
                    "byte": 1
                },
                "char": {
                    "": 1,
                    "byte": 2,
                    "char_value": 1,
                    "character": 1
                },
                "char_offset": {
                    "offset": 1
                },
                "data": {
                    "value": 1
                },
                "index": {
                    "i": 1
                },
                "param_1": {
                    "address": 7,
                    "byte_index": 4,
                    "byte_offset": 2,
                    "byte_value": 4,
                    "character_index": 1,
                    "data_index": 1,
                    "index": 4,
                    "input": 1,
                    "input_byte": 3,
                    "input_index": 3,
                    "input_value": 1
                },
                "param_2": {
                    "byte_value": 1,
                    "character_value": 1,
                    "data": 8,
                    "input_value": 4,
                    "new_value": 5,
                    "uint_value": 1,
                    "update_value": 2,
                    "value": 9
                },
                "param_3": {
                    "index_offset": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0000258c"
            ],
            "code": "\nvoid update_memory_00002538(byte address,uint value)\n\n{\n  if ((byte)address < '\\0') {\n    (&DAT_e000ed14)[address & 0xf] = (byte)((value & 0xff) << 4);\n  }\n  else {\n    *(byte *)((byte)address + -0x1fff1c00) = (byte)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_00002538",
            "entrypoint": "0x00002538",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002538": "update_memory_00002538",
                "char": "byte",
                "param_1": "address",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000258c": {
            "additional_data": {
                "FUN_0000258c": {
                    "initialize_memory": 30
                },
                "_DAT_e000ed08": {
                    "memory_register1": 1
                },
                "_DAT_e000ed10": {
                    "memory_register2": 1
                },
                "_DAT_e000ed14": {
                    "memory_register3": 1
                },
                "local_c": {
                    "count": 3,
                    "counter": 2,
                    "index": 25
                }
            },
            "called": [
                "FUN_00002538"
            ],
            "calling": [
                "FUN_00001274"
            ],
            "code": "\n\n\nvoid initialize_memory_0000258c(void)\n\n{\n  uint index;\n  \n  _DAT_e000ed08 = 0;\n  update_memory_00002538(0xfffffffe,1);\n  update_memory_00002538(0xfffffffb,1);\n  for (index = 0; index < 0x66; index = index + 1) {\n    update_memory_00002538((int)(char)index,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "current_name": "initialize_memory_0000258c",
            "entrypoint": "0x0000258c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000258c": "initialize_memory_0000258c",
                "local_c": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000025f4": {
            "additional_data": {
                "": {
                    "": 2
                },
                "FUN_000025f4": {
                    "initialize_system": 31
                },
                "PTR_000027b0": {
                    "system_data": 1,
                    "system_initializer": 1,
                    "system_pointer": 1
                },
                "PTR_00002eb4": {
                    "unused_variable": 1
                },
                "initialize_system_000027b0": {
                    "initialize_system": 10,
                    "initialize_system_helper": 2
                }
            },
            "called": [
                "FUN_000027b0"
            ],
            "calling": [
                "FUN_00002396"
            ],
            "code": "\nvoid initialize_system_000025f4(void)\n\n{\n  initialize_system_000025f4();\n  return;\n}\n\n",
            "current_name": "initialize_system_000025f4",
            "entrypoint": "0x000025f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4",
                "initialize_system_000027b0": "initialize_system"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002600": {
            "additional_data": {
                "FUN_00002600": {
                    "initialize_and_update_data": 4,
                    "initialize_data": 8,
                    "initialize_data_and_calculate_updated_date_time": 1,
                    "initialize_data_and_return_zero": 1,
                    "initialize_data_and_time": 4,
                    "initialize_data_and_update_date": 2,
                    "initialize_data_and_update_date_time": 3,
                    "initialize_data_with_updated_date_time": 1,
                    "initialize_system": 1,
                    "initialize_updated_data": 2,
                    "initialize_updated_date_and_time": 1,
                    "update_and_initialize": 1,
                    "update_and_initialize_data": 1,
                    "update_date_and_initialize_data": 1
                },
                "calculate_updated_date_and_time_000047e4": {
                    "calculate_updated_date_time": 1
                },
                "initialize_data_0000285c": {
                    "initialize_data": 1
                },
                "param_1": {
                    "data": 1,
                    "date_and_time": 1,
                    "date_time": 1,
                    "initial_date": 5,
                    "initial_date_time": 1,
                    "input": 1,
                    "input_data": 2,
                    "input_date": 9,
                    "input_date_and_time": 1,
                    "input_param": 3,
                    "input_parameter": 2,
                    "input_value": 2,
                    "original_date": 1,
                    "updated_date_and_time": 1
                },
                "uVar1": {
                    "calculated_date_and_time": 1,
                    "result_date": 1,
                    "updated_date": 14,
                    "updated_date_and_time": 5,
                    "updated_date_and_time_param": 1,
                    "updated_date_time": 8
                }
            },
            "called": [
                "FUN_0000285c",
                "FUN_000047e4"
            ],
            "calling": [
                "FUN_00003478"
            ],
            "code": "\nundefined4 initialize_data_and_update_date_time_00002600(undefined4 input_date)\n\n{\n  undefined4 updated_date;\n  \n  updated_date = calculate_updated_date_time(input_date);\n  initialize_data(updated_date);\n  return 0;\n}\n\n",
            "current_name": "initialize_data_and_update_date_time_00002600",
            "entrypoint": "0x00002600",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002600": "initialize_data_and_update_date_time_00002600",
                "calculate_updated_date_and_time_000047e4": "calculate_updated_date_time",
                "initialize_data_0000285c": "initialize_data",
                "param_1": "input_date",
                "uVar1": "updated_date"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002624": {
            "additional_data": {
                "FUN_00002624": {
                    "calculate_date_time": 10,
                    "calculate_date_time_components": 12,
                    "convert_date_time_components": 1,
                    "create_date_time_components": 1,
                    "extract_date_time": 2,
                    "extract_date_time_components": 1,
                    "process_date_time": 4
                },
                "local_10": {
                    "global_data": 31
                },
                "param_1": {
                    "input": 6,
                    "input_data": 3,
                    "input_date": 1,
                    "input_date_time": 2,
                    "input_param": 9,
                    "input_parameter": 3,
                    "input_value": 7
                },
                "uStack_c": {
                    "counter": 1,
                    "result": 2,
                    "stack_value": 4,
                    "stack_var": 3,
                    "stack_variable": 1,
                    "temp": 1,
                    "temp_value": 3,
                    "temp_var": 5,
                    "temp_variable": 4,
                    "temporary": 1,
                    "temporary_value": 1,
                    "temporary_variable": 1,
                    "unused_value": 1,
                    "unused_variable": 1,
                    "zero": 1,
                    "zero_variable": 1
                }
            },
            "called": [
                "FUN_0000281c",
                "FUN_0000443c"
            ],
            "calling": [
                "FUN_00003444"
            ],
            "code": "\nundefined4 calculate_date_time_components_00002624(undefined4 input_param)\n\n{\n  undefined4 global_data;\n  undefined4 temp_var;\n  \n  global_data = get_global_data_0000281c();\n  temp_var = 0;\n  calculate_date_time_components_00002624_0000443c(&global_data,input_param);\n  return 0;\n}\n\n",
            "current_name": "calculate_date_time_components_00002624",
            "entrypoint": "0x00002624",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002624": "calculate_date_time_components_00002624",
                "local_10": "global_data",
                "param_1": "input_param",
                "uStack_c": "temp_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002654": {
            "additional_data": {
                "FUN_00002654": {
                    "initialize_and_update_data": 2,
                    "initialize_data": 4,
                    "initialize_data_and_time": 6,
                    "initialize_data_and_update_time": 1,
                    "set_date_and_initialize_data": 1,
                    "update_data_and_time": 1,
                    "update_date_and_initialize_data": 2,
                    "update_date_and_time": 4,
                    "update_date_time": 10
                },
                "calculate_updated_date_and_time_000047e4": {
                    "calculate_updated_date": 4,
                    "calculate_updated_date_and_time": 3
                },
                "initialize_data_00002894": {
                    "initialize_data": 11
                },
                "param_1": {
                    "current_date": 3,
                    "date": 2,
                    "date_time": 2,
                    "initial_date": 1,
                    "input_data": 1,
                    "input_date": 12,
                    "input_value": 1,
                    "old_date_time": 1,
                    "original_date": 5,
                    "previous_date": 2,
                    "updated_date": 1
                },
                "param_2": {
                    "data": 2,
                    "data_to_update": 1,
                    "data_value": 1,
                    "input_param": 2,
                    "input_value": 3,
                    "new_data": 2,
                    "new_date": 3,
                    "new_time": 2,
                    "new_value": 2,
                    "param2": 1,
                    "param_2": 1,
                    "time": 2,
                    "updated_date": 2,
                    "updated_param": 1,
                    "updated_time": 3,
                    "user_data": 2,
                    "user_input": 1
                },
                "param_3": {
                    "additional_data": 5,
                    "additional_info": 2,
                    "additional_param": 1,
                    "config_data": 2,
                    "config_param": 1,
                    "data": 4,
                    "initial_value": 1,
                    "initialization_value": 1,
                    "input_data": 2,
                    "input_param": 1,
                    "input_value": 1,
                    "new_value": 1,
                    "other_data": 1,
                    "param": 1,
                    "param3": 3,
                    "param_3": 1,
                    "time_value": 1,
                    "update_flag": 1,
                    "value": 1
                },
                "uVar1": {
                    "calculated_date": 2,
                    "new_date": 1,
                    "updated_date": 22,
                    "updated_date_time": 5
                }
            },
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "calling": [
                "FUN_000033f4"
            ],
            "code": "\nundefined4 set_date_and_initialize_data_00002654(undefined4 input_date,undefined4 new_date,undefined4 additional_data)\n\n{\n  undefined4 updated_date;\n  \n  updated_date = calculate_updated_date(input_date);\n  DAT_1fff0d9c = new_date;\n  initialize_data(updated_date,0x26f1,additional_data);\n  return 0;\n}\n\n",
            "current_name": "set_date_and_initialize_data_00002654",
            "entrypoint": "0x00002654",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002654": "set_date_and_initialize_data_00002654",
                "calculate_updated_date_and_time_000047e4": "calculate_updated_date",
                "initialize_data_00002894": "initialize_data",
                "param_1": "input_date",
                "param_2": "new_date",
                "param_3": "additional_data",
                "uVar1": "updated_date"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002690": {
            "additional_data": {
                "FUN_00002690": {
                    "calculate_and_increment": 1,
                    "calculate_date_and_time": 1,
                    "calculate_date_time": 9,
                    "calculate_date_time_components": 2,
                    "calculate_datetime": 1,
                    "calculate_time": 1,
                    "initialize_data": 1,
                    "process_data": 11,
                    "update_data_value_and_calculate_date_time": 1,
                    "update_date_time_components": 3
                },
                "local_10": {
                    "data_value": 29,
                    "new_value": 1,
                    "value": 1
                },
                "param_1": {
                    "data": 3,
                    "data_value": 1,
                    "input": 1,
                    "input_data": 10,
                    "input_param": 2,
                    "input_parameter": 2,
                    "input_value": 11,
                    "new_value": 1
                },
                "uStack_c": {
                    "calculation_result": 1,
                    "counter": 3,
                    "placeholder": 1,
                    "result": 1,
                    "stack_c": 1,
                    "stack_pointer": 1,
                    "stack_value": 2,
                    "stack_var": 3,
                    "stack_variable": 3,
                    "temp": 1,
                    "temp_value": 3,
                    "temporary_value": 1,
                    "temporary_var": 1,
                    "temporary_variable": 3,
                    "unused_var": 1,
                    "unused_variable": 3,
                    "zero": 1,
                    "zero_value": 1
                }
            },
            "called": [
                "FUN_000028f0",
                "FUN_0000443c"
            ],
            "calling": [
                "FUN_000033c0"
            ],
            "code": "\nundefined4 calculate_date_time_components_00002690(undefined4 input_value)\n\n{\n  undefined4 data_value;\n  undefined4 stack_variable;\n  \n  data_value = increment_data_value_000028f0();\n  stack_variable = 0;\n  calculate_date_time_components_00002690_0000443c(&data_value,input_value);\n  return 0;\n}\n\n",
            "current_name": "calculate_date_time_components_00002690",
            "entrypoint": "0x00002690",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002690": "calculate_date_time_components_00002690",
                "local_10": "data_value",
                "param_1": "input_value",
                "uStack_c": "stack_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000026c0": {
            "additional_data": {
                "DAT_1fff0d9c": {
                    "status_flags": 5
                },
                "FUN_000026c0": {
                    "clear_and_reset_flags": 1,
                    "clear_flags": 2,
                    "clear_status_and_reset": 1,
                    "clear_status_flags": 18,
                    "initialize_flags": 1,
                    "initialize_status": 1,
                    "initialize_status_flags": 3,
                    "reset_status_flags": 4
                },
                "clear_status_flags_00002910": {
                    "clear_status_flags": 21,
                    "clear_status_flags_function": 1,
                    "clear_status_flags_helper": 5
                }
            },
            "called": [
                "FUN_00002910"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nvoid clear_status_flags_000026c0(void)\n\n{\n  clear_status_flags_000026c0();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "current_name": "clear_status_flags_000026c0",
            "entrypoint": "0x000026c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000026c0": "clear_status_flags_000026c0",
                "clear_status_flags_00002910": "clear_status_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000026d8": {
            "additional_data": {
                "FUN_000026d8": {
                    "initialize_flag": 7,
                    "initialize_flag_bit": 1,
                    "initialize_flags": 9,
                    "set_flag": 1,
                    "set_flag_bit": 13
                },
                "set_flag_bit_0000294c": {
                    "activate_flag": 1,
                    "set_flag": 1,
                    "set_flag_bit": 20,
                    "set_flag_bit_0000294c": 1,
                    "set_flag_bit_helper": 3
                }
            },
            "called": [
                "FUN_0000294c"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nvoid set_flag_bit_000026d8(void)\n\n{\n  set_flag_bit_000026d8();\n  return;\n}\n\n",
            "current_name": "set_flag_bit_000026d8",
            "entrypoint": "0x000026d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000026d8": "set_flag_bit_000026d8",
                "set_flag_bit_0000294c": "set_flag_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000026e4": {
            "additional_data": {
                "FUN_000026e4": {
                    "clear_interrupt_flag": 29,
                    "clear_interrupts": 1,
                    "initialize_interrupt_flag": 1
                },
                "clear_interrupt_flag_00002970": {
                    "clear_flag": 1,
                    "clear_interrupt_flag": 21,
                    "clear_interrupt_flag_helper": 3
                }
            },
            "called": [
                "FUN_00002970"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nvoid clear_interrupt_flag_000026e4(void)\n\n{\n  clear_interrupt_flag_000026e4();\n  return;\n}\n\n",
            "current_name": "clear_interrupt_flag_000026e4",
            "entrypoint": "0x000026e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000026e4": "clear_interrupt_flag_000026e4",
                "clear_interrupt_flag_00002970": "clear_interrupt_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000026f0": {
            "additional_data": {
                "DAT_1fff0d9c": {
                    "callback": 1,
                    "callback_func": 1,
                    "callback_func_ptr": 1,
                    "callback_function": 7,
                    "callback_function_ptr": 1,
                    "code_pointer": 1,
                    "function_pointer": 1
                },
                "FUN_000026f0": {
                    "call_function_if_valid": 1,
                    "execute_call_back_function": 1,
                    "execute_callback": 21,
                    "execute_callback_function": 3,
                    "execute_callback_if_exists": 1,
                    "execute_code_if_not_null": 1,
                    "execute_function_if_exists": 1,
                    "process_callback": 2
                },
                "code": {
                    "callback_function": 1
                },
                "param_1": {
                    "argument": 3,
                    "callback_argument": 1,
                    "callback_data": 2,
                    "callback_param": 10,
                    "callback_parameter": 5,
                    "data": 3,
                    "func_parameter": 1,
                    "function_argument": 1,
                    "input": 3,
                    "input_data": 1,
                    "param": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_callback_function_000026f0(undefined4 callback_param)\n\n{\n  if (DAT_1fff0d9c != (callback_function *)0x0) {\n    (*DAT_1fff0d9c)(callback_param);\n  }\n  return;\n}\n\n",
            "current_name": "execute_callback_function_000026f0",
            "entrypoint": "0x000026f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000026f0": "execute_callback_function_000026f0",
                "code": "callback_function",
                "param_1": "callback_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002714": {
            "additional_data": {
                "0x1f": {
                    "bit_index": 1
                },
                "1": {
                    "bit_mask": 1
                },
                "FUN_00002714": {
                    "set_bit": 11,
                    "set_bit_at_index": 3,
                    "set_bit_at_offset": 1,
                    "set_bit_at_position": 1,
                    "set_bit_by_index": 1,
                    "set_bit_in_memory": 11,
                    "set_bit_one": 1,
                    "set_bit_value": 1,
                    "store_bitwise_shifted_value": 1
                },
                "char": {
                    "char_val": 1,
                    "character": 1
                },
                "int": {
                    "int_ptr": 1,
                    "integer": 1
                },
                "param_1": {
                    "bit_offset": 1,
                    "byte_input": 1,
                    "byte_to_set": 3,
                    "byte_value": 6,
                    "index": 1,
                    "input_byte": 16,
                    "new_byte_value": 1,
                    "output_byte": 1
                },
                "uint": {
                    "uint_ptr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002894"
            ],
            "code": "\nvoid set_bit_in_memory_00002714(byte input_byte)\n\n{\n  *(int_ptr *)(((uint_ptr)(int_ptr)(char_val)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_00002714",
            "entrypoint": "0x00002714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002714": "set_bit_in_memory_00002714",
                "char": "char_val",
                "int": "int_ptr",
                "param_1": "input_byte",
                "uint": "uint_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002744": {
            "additional_data": {
                "DAT_": {
                    "": 1,
                    "unchanged": 1
                },
                "DAT_e000ed14": {
                    "byte_array": 1,
                    "data_array": 1
                },
                "FUN_00002744": {
                    "apply_value_to_memory": 1,
                    "set_buffer_value": 1,
                    "set_byte": 2,
                    "set_byte_at_offset": 1,
                    "set_byte_value": 5,
                    "set_memory": 1,
                    "set_memory_byte": 2,
                    "set_memory_value": 2,
                    "set_param_value": 1,
                    "store_byte_in_memory": 1,
                    "store_data": 2,
                    "store_to_memory": 1,
                    "store_value": 1,
                    "update_byte": 1,
                    "update_data": 5,
                    "update_data_record": 1,
                    "update_memory": 1,
                    "write_byte_to_memory": 1,
                    "write_data_to_memory": 1
                },
                "PTR_": {
                    "": 1,
                    "unchanged": 1
                },
                "PTR_fffffff5": {
                    "byte_ptr": 1
                },
                "byte": {
                    "unsigned_char": 1
                },
                "byteIndex": {
                    "": 1
                },
                "char": {
                    "byte": 1,
                    "signed_char": 1
                },
                "data": {
                    "value": 1
                },
                "inputByte": {
                    "byte": 1
                },
                "param_1": {
                    "address": 4,
                    "byte_index": 2,
                    "byte_to_store": 1,
                    "byte_value": 5,
                    "data_index": 3,
                    "index": 10,
                    "input_byte": 4,
                    "offset": 1,
                    "record_index": 1
                },
                "param_2": {
                    "data": 5,
                    "data_value": 1,
                    "input_value": 5,
                    "new_value": 2,
                    "uint_value": 2,
                    "update_value": 1,
                    "value": 14,
                    "value_to_store": 1
                },
                "param_3": {
                    "updated_value": 1
                },
                "signedChar": {
                    "": 1
                },
                "unsignedChar": {
                    "": 1
                },
                "value": {
                    "": 1
                },
                "writeByteToMemory": {
                    "": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002894"
            ],
            "code": "\nvoid set_byte_value_00002744(unsigned_char index,uint value)\n\n{\n  if ((signed_char)index < '\\0') {\n    (&DAT_e000ed14)[index & 0xf] = (signed_char)((value & 0xff) << 4);\n  }\n  else {\n    *(signed_char *)((signed_char)index + -0x1fff1c00) = (signed_char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "set_byte_value_00002744",
            "entrypoint": "0x00002744",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002744": "set_byte_value_00002744",
                "byte": "unsigned_char",
                "char": "signed_char",
                "param_1": "index",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002798": {
            "additional_data": {
                "DAT_1fff0354": {
                    "flag": 1,
                    "memory_flag": 1,
                    "memory_protection_flag": 19
                },
                "FUN_00002798": {
                    "check_and_set_memory_protection_flag": 11,
                    "check_memory_protection": 4,
                    "check_memory_protection_flag": 2,
                    "configure_memory_protection": 1,
                    "enable_memory_protection": 2,
                    "initialize_memory_protection": 2,
                    "protect_memory_if_flag_set": 1,
                    "set_memory_protection": 3,
                    "set_memory_protection_flag": 2,
                    "set_memory_protection_if_flag_set": 1,
                    "set_memory_protection_if_needed": 2
                },
                "set_memory_protection_flag_0000093c": {
                    "enable_memory_protection": 1,
                    "set_memory_protection_flag": 8
                }
            },
            "called": [
                "FUN_0000093c"
            ],
            "calling": [
                "FUN_00002994"
            ],
            "code": "\nvoid check_and_set_memory_protection_flag_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    set_memory_protection_flag();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_set_memory_protection_flag_00002798",
            "entrypoint": "0x00002798",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002798": "check_and_set_memory_protection_flag_00002798",
                "set_memory_protection_flag_0000093c": "set_memory_protection_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000027b0": {
            "additional_data": {
                "FUN_000027b0": {
                    "configure_peripheral": 1,
                    "enable_flag_and_initialize_data": 1,
                    "enable_interrupts": 1,
                    "initialize_flags": 5,
                    "initialize_hardware": 7,
                    "initialize_peripheral": 4,
                    "initialize_subsystems": 1,
                    "initialize_system": 10,
                    "set_flag_bit": 1
                },
                "_DAT_4003d000": {
                    "control_register": 2,
                    "data": 1,
                    "data_reg": 1,
                    "data_register": 8,
                    "data_reset": 1,
                    "device_command_reg": 1,
                    "error_code": 1,
                    "flag": 1,
                    "flag_reset": 1,
                    "gpio_data_register": 1,
                    "input_data": 1,
                    "interrupt_ctrl_reg": 1,
                    "interrupt_flag": 1,
                    "io_register2": 1,
                    "reset_value": 2,
                    "system_configuration": 1,
                    "system_reset": 1,
                    "system_state": 2,
                    "usb_config_register": 1
                },
                "_DAT_4003d008": {
                    "address_register": 1,
                    "config_reg": 1,
                    "config_register": 1,
                    "configuration": 1,
                    "configuration_value": 2,
                    "control_register": 1,
                    "control_register2": 2,
                    "data_register": 1,
                    "data_setting": 1,
                    "error_status": 1,
                    "error_threshold": 1,
                    "error_value": 1,
                    "flag_reg": 1,
                    "interrupt_disable_register": 1,
                    "interrupt_flag": 1,
                    "interrupt_flag_register": 1,
                    "interrupt_flags_register": 1,
                    "interrupt_mask": 1,
                    "interrupt_mask_register": 1,
                    "interrupt_priority_register": 1,
                    "io_register4": 1,
                    "output_data": 1,
                    "system_settings": 1,
                    "timer_ctrl_reg": 1,
                    "timer_prescaler_value": 1,
                    "timer_register": 1,
                    "timer_value": 1
                },
                "_DAT_4003d010": {
                    "control_reg": 1,
                    "control_register": 4,
                    "control_register1": 2,
                    "data_value": 1,
                    "interrupt_config": 1,
                    "interrupt_config_register": 1,
                    "interrupt_control": 2,
                    "interrupt_control_reg": 1,
                    "interrupt_control_register": 1,
                    "interrupt_enable": 1,
                    "interrupt_enable_register": 4,
                    "interrupt_mask_register": 1,
                    "interrupt_register": 2,
                    "interrupt_settings": 1,
                    "io_register3": 1,
                    "output_address": 1,
                    "system_config": 1,
                    "timer_control_register": 1,
                    "timer_interval": 1,
                    "timer_reg": 1
                },
                "_DAT_4003d014": {
                    "control_register": 1,
                    "global_flag": 1,
                    "gpio_control_register": 1,
                    "input_flags": 1,
                    "interrupt_control": 1,
                    "interrupt_reg": 1,
                    "some_data": 1,
                    "status": 1,
                    "status_flags": 1,
                    "status_reg": 2,
                    "status_register": 12,
                    "switch_register": 1,
                    "system_status": 2,
                    "system_status_register": 2,
                    "usb_status_register": 1
                },
                "_DAT_4003d01c": {
                    "additional_config": 1,
                    "control_register3": 2,
                    "counter": 3,
                    "data_reg": 1,
                    "data_register": 2,
                    "data_reset_flag": 1,
                    "extra_reg": 1,
                    "flag": 1,
                    "flag_register": 1,
                    "gpio_interrupt_register": 1,
                    "interrupt_flag": 1,
                    "interrupt_flag_register": 2,
                    "interrupt_pending_register": 1,
                    "interrupt_register": 1,
                    "interrupt_service_register": 1,
                    "io_register5": 1,
                    "reset_register": 1,
                    "status": 1,
                    "status_reg": 1,
                    "system_timestamp": 1,
                    "temp_data": 1,
                    "temp_register": 1,
                    "timeout_register": 1,
                    "timer_register": 1
                },
                "_DAT_4004803c": {
                    "configuration_reg": 1,
                    "control_register": 3,
                    "device_control_reg": 1,
                    "device_control_register": 1,
                    "flag_register": 3,
                    "flags_register": 1,
                    "hardware_config": 1,
                    "hardware_config_reg": 1,
                    "interrupt_flags": 1,
                    "io_register1": 1,
                    "peripheral_config": 1,
                    "peripheral_config_register": 1,
                    "register": 1,
                    "system_config": 1,
                    "system_control_register": 2,
                    "system_flags": 2
                },
                "set_flag_bit_0000294c": {
                    "set_flag_bit": 12,
                    "set_interrupt_flag": 2,
                    "set_interrupt_flags": 1,
                    "set_status_flag": 1,
                    "set_system_flag": 1,
                    "toggle_flag_bit": 1
                }
            },
            "called": [
                "FUN_0000294c"
            ],
            "calling": [
                "FUN_000025f4"
            ],
            "code": "\n\n\nvoid initialize_system_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  set_flag_bit();\n  return;\n}\n\n",
            "current_name": "initialize_system_000027b0",
            "entrypoint": "0x000027b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0",
                "set_flag_bit_0000294c": "set_flag_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000281c": {
            "additional_data": {
                "DAT_4003d000": {
                    "memory_address": 1
                },
                "FUN_0000281c": {
                    "get_base_address": 3,
                    "get_dat_4003d000": 1,
                    "get_data": 8,
                    "get_data_address": 2,
                    "get_data_from_memory": 1,
                    "get_data_pointer": 1,
                    "get_data_value": 1,
                    "get_default_value": 1,
                    "get_global_data": 5,
                    "get_global_variable": 4,
                    "get_initialized_data": 1,
                    "get_memory_address": 2,
                    "get_starting_address": 1
                },
                "_DAT_4003d000": {
                    "base_address": 3,
                    "data": 8,
                    "data_address": 2,
                    "data_pointer": 1,
                    "data_value": 1,
                    "default_value": 1,
                    "global_data": 5,
                    "global_var": 1,
                    "global_variable": 3,
                    "initialized_data": 1,
                    "memory_address": 1,
                    "starting_address": 1
                },
                "undefined4": {
                    "uint32_t": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002624"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nuint32_t get_global_data_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "current_name": "get_global_data_0000281c",
            "entrypoint": "0x0000281c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000281c": "get_global_data_0000281c",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000285c": {
            "additional_data": {
                "0x10": {
                    "set_mask": 2
                },
                "0xffffffef": {
                    "clear_mask": 2
                },
                "FUN_0000285c": {
                    "initialize_data": 7,
                    "initialize_flags": 1,
                    "initialize_pointer": 1,
                    "set_bit_in_register": 1,
                    "set_dat_and_flag": 1,
                    "set_data_and_flag": 3,
                    "set_data_and_update_flag": 1,
                    "set_flag": 2,
                    "set_flag_in_control_register": 1,
                    "set_flag_on": 1,
                    "set_memory_protection": 1,
                    "set_param_and_flag": 2,
                    "set_param_flag": 1,
                    "set_parameter": 2,
                    "set_register_value": 1,
                    "set_value_and_update_flags": 1,
                    "store_parameter_value": 1,
                    "update_flags_and_value": 1
                },
                "_DAT_4003d000": {
                    "config_value": 1,
                    "data_a": 1,
                    "pointer": 1,
                    "register": 1
                },
                "_DAT_4003d014": {
                    "config_data": 1,
                    "config_register": 1,
                    "control_register": 2,
                    "control_register_value": 1,
                    "data_b": 1,
                    "data_flag": 1,
                    "flag": 10,
                    "flags": 2,
                    "flags_register": 2,
                    "flags_value": 1,
                    "mask": 2,
                    "old_settings": 1,
                    "register_value": 3,
                    "status": 1,
                    "status_register": 1
                },
                "_FUN_0000285c": {
                    "initialize_data": 1
                },
                "param_1": {
                    "bit_value": 1,
                    "data": 10,
                    "data_value": 2,
                    "flag": 1,
                    "flag_value": 3,
                    "new_value": 1,
                    "param": 1,
                    "parameter": 2,
                    "protection": 1,
                    "value": 9
                }
            },
            "called": [],
            "calling": [
                "FUN_00002600"
            ],
            "code": "\n\n\nvoid initialize_data_0000285c(undefined4 data)\n\n{\n  _DAT_4003d000 = data;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "current_name": "initialize_data_0000285c",
            "entrypoint": "0x0000285c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000285c": "initialize_data_0000285c",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002894": {
            "additional_data": {
                "DAT_1fff0da0": {
                    "data_1": 1,
                    "memory_location1": 1
                },
                "DAT_1fff0da4": {
                    "data_2": 1,
                    "memory_location2": 1
                },
                "FUN_00002894": {
                    "initialize_and_set_flags": 1,
                    "initialize_application": 1,
                    "initialize_data": 14,
                    "initialize_device": 1,
                    "initialize_memory": 3,
                    "initialize_program": 1,
                    "initialize_system": 1,
                    "update_data": 2,
                    "update_data_and_flag": 1,
                    "update_data_and_set_bit": 1,
                    "update_data_info": 1,
                    "update_parameters": 3,
                    "update_register_and_memory": 1
                },
                "_DAT_4003d008": {
                    "data_1": 1,
                    "memory_address": 1,
                    "modified_input": 2,
                    "updated_input_value": 1,
                    "updated_size": 1,
                    "updated_value": 4
                },
                "_DAT_4003d01c": {
                    "data_2": 1,
                    "flag": 4,
                    "mask": 1,
                    "memory_flag": 1,
                    "memory_value1": 1,
                    "modified_bit_field": 1,
                    "updated_data_3": 1
                },
                "param_1": {
                    "count": 1,
                    "current_value": 1,
                    "data_length": 1,
                    "data_offset": 1,
                    "data_size": 1,
                    "device_id": 1,
                    "initial_value": 6,
                    "input_value": 9,
                    "new_value": 1,
                    "present_value": 1,
                    "previous_value": 2,
                    "value": 6
                },
                "param_2": {
                    "config_param1": 1,
                    "config_value_1": 1,
                    "data1": 5,
                    "data_1": 3,
                    "data_info_1": 1,
                    "data_param2": 1,
                    "data_value1": 2,
                    "data_value_1": 3,
                    "initial_state1": 1,
                    "new_value1": 1,
                    "param2_value": 1,
                    "value1": 10,
                    "value_1": 1
                },
                "param_3": {
                    "config_param2": 1,
                    "config_value_2": 1,
                    "data2": 5,
                    "data_2": 3,
                    "data_info_2": 1,
                    "data_param3": 1,
                    "data_value2": 2,
                    "data_value_2": 3,
                    "initial_state2": 1,
                    "new_value2": 1,
                    "param3_value": 1,
                    "value2": 10,
                    "value_2": 1
                },
                "set_bit_in_memory_00002714": {
                    "enable_flag": 1,
                    "set_bit": 1,
                    "set_bit_in_memory": 6,
                    "set_memory_bit": 2
                },
                "set_byte_value_00002744": {
                    "set_byte_value": 7,
                    "set_decimal_value": 1,
                    "set_default_value": 1,
                    "set_value": 1
                }
            },
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "calling": [
                "FUN_00002654"
            ],
            "code": "\n\n\nvoid initialize_data_00002894(int input_value,undefined4 value1,undefined4 value2)\n\n{\n  _DAT_4003d008 = input_value + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = value1;\n  DAT_1fff0da4 = value2;\n  set_byte_value(0x2e,10);\n  set_bit_in_memory(0x2e);\n  return;\n}\n\n",
            "current_name": "initialize_data_00002894",
            "entrypoint": "0x00002894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "input_value",
                "param_2": "value1",
                "param_3": "value2",
                "set_bit_in_memory_00002714": "set_bit_in_memory",
                "set_byte_value_00002744": "set_byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000028f0": {
            "additional_data": {
                "FUN_000028f0": {
                    "calculate_next_value": 1,
                    "get_incremented_value": 3,
                    "get_next_value": 3,
                    "increment_and_get": 1,
                    "increment_data": 2,
                    "increment_data_pointer": 1,
                    "increment_data_value": 1,
                    "increment_pointer": 1,
                    "increment_value": 15,
                    "increment_variable": 1,
                    "incremented_value": 2
                },
                "_DAT_4003d008": {
                    "current_value": 12,
                    "data": 2,
                    "data_pointer": 1,
                    "data_value": 2,
                    "original_value": 7,
                    "pointer": 1,
                    "value": 5,
                    "value_to_increment": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002690"
            ],
            "code": "\n\n\nint increment_data_value_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "current_name": "increment_data_value_000028f0",
            "entrypoint": "0x000028f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000028f0": "increment_data_value_000028f0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002910": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_1fff0da0": {
                    "data1": 12,
                    "data_a": 1,
                    "data_pointer1": 1,
                    "data_register1": 1,
                    "data_value1": 2,
                    "data_variable1": 1,
                    "data_variable_1": 1,
                    "register1": 1,
                    "value1": 3,
                    "variable1": 2
                },
                "DAT_1fff0da4": {
                    "data2": 12,
                    "data_b": 1,
                    "data_pointer2": 1,
                    "data_register2": 1,
                    "data_value2": 2,
                    "data_variable2": 1,
                    "data_variable_2": 1,
                    "register2": 1,
                    "value2": 3,
                    "variable2": 2
                },
                "FUN_00002910": {
                    "clear_bits_and_reset_values": 1,
                    "clear_data": 3,
                    "clear_flags": 12,
                    "clear_global_variables": 1,
                    "clear_registers": 5,
                    "clear_settings": 1,
                    "clear_status_bits": 1,
                    "clear_status_flags": 1,
                    "initialize_data": 1,
                    "reset_flags": 4,
                    "reset_registers": 1
                },
                "_DAT_4003d008": {
                    "control_register": 1,
                    "count": 1,
                    "counter": 20,
                    "data_register": 1,
                    "flag2": 1,
                    "global_count": 1,
                    "register2": 1,
                    "register_b": 1,
                    "register_value": 2,
                    "status_register": 1
                },
                "_DAT_4003d01c": {
                    "config_register": 1,
                    "control_register": 1,
                    "data_flag": 2,
                    "flag1": 1,
                    "flag_register": 2,
                    "flags": 10,
                    "flags_register": 3,
                    "global_flag": 1,
                    "register1": 1,
                    "register_a": 1,
                    "register_flag": 1,
                    "register_mask": 1,
                    "settings_flag": 1,
                    "status_bits": 1,
                    "status_flags": 1,
                    "status_register": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_000026c0"
            ],
            "code": "\n\n\nvoid clear_status_flags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "current_name": "clear_status_flags_00002910",
            "entrypoint": "0x00002910",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002910": "clear_status_flags_00002910"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000294c": {
            "additional_data": {
                "FUN_0000294c": {
                    "enable_interrupt": 1,
                    "set_bit": 1,
                    "set_bit_in_register": 1,
                    "set_flag": 23,
                    "set_flag_and_return": 1,
                    "set_flag_bit": 2,
                    "set_flag_in_register": 1,
                    "set_function_flag": 1
                },
                "_DAT_4003d014": {
                    "config_register": 1,
                    "flag": 20,
                    "flag_register": 3,
                    "flag_value": 1,
                    "function_flag": 1,
                    "interrupt_flags": 1,
                    "register_value": 3,
                    "status_register": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "code": "\n\n\nvoid set_flag_bit_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "current_name": "set_flag_bit_0000294c",
            "entrypoint": "0x0000294c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000294c": "set_flag_bit_0000294c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002970": {
            "additional_data": {
                "0xffffffef": {
                    "bit_mask": 1
                },
                "FUN_00002970": {
                    "clear_bit": 2,
                    "clear_bit_in_memory_address": 1,
                    "clear_bit_in_register": 1,
                    "clear_flag": 10,
                    "clear_flag_bits": 1,
                    "clear_flags": 1,
                    "clear_hardware_flag": 1,
                    "clear_interrupt_bit": 2,
                    "clear_interrupt_flag": 10,
                    "disable_interrupt": 1,
                    "disable_interrupts": 1
                },
                "_DAT_4003d014": {
                    "data": 1,
                    "flag": 10,
                    "flag_register": 2,
                    "hardware_flag": 1,
                    "interrupt_control_register": 1,
                    "interrupt_flag": 8,
                    "interrupt_flags": 1,
                    "interrupt_reg": 1,
                    "interrupt_register": 2,
                    "interrupt_status": 1,
                    "memory_address": 1,
                    "register_value": 1,
                    "status_reg": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000026e4"
            ],
            "code": "\n\n\nvoid clear_interrupt_flag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "current_name": "clear_interrupt_flag_00002970",
            "entrypoint": "0x00002970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002994": {
            "additional_data": {
                "DAT_1fff0da0": {
                    "callback1": 1,
                    "callback_func1": 1,
                    "callback_function_1": 1,
                    "first_function": 1,
                    "function1": 1,
                    "function_1_pointer": 1,
                    "function_pointer1": 6,
                    "function_pointer_1": 1,
                    "function_ptr1": 2,
                    "function_to_execute1": 1,
                    "interrupt_handler1": 1,
                    "interrupt_handler_callback1": 1,
                    "memory_function_1": 1,
                    "task1": 1,
                    "task_1": 1
                },
                "DAT_1fff0da4": {
                    "arg1": 4,
                    "arg1_callback1": 1,
                    "argument1": 1,
                    "argument_1": 1,
                    "callback_param_1": 1,
                    "data1": 1,
                    "first_function_arg": 1,
                    "function1_arg": 1,
                    "function1_parameter": 1,
                    "function_1_argument": 1,
                    "interrupt_handler_param1": 1,
                    "memory_parameter_1": 1,
                    "param1": 1,
                    "parameter1": 3,
                    "task1_data": 1,
                    "task_1_data": 1
                },
                "DAT_1fff0da8": {
                    "callback2": 1,
                    "callback_func2": 1,
                    "callback_function_2": 1,
                    "function2": 1,
                    "function_2_pointer": 1,
                    "function_pointer2": 6,
                    "function_pointer_2": 1,
                    "function_ptr2": 2,
                    "function_to_execute2": 1,
                    "interrupt_handler2": 1,
                    "interrupt_handler_callback2": 1,
                    "memory_function_2": 1,
                    "second_function": 1,
                    "task2": 1,
                    "task_2": 1
                },
                "DAT_1fff0dac": {
                    "arg1_callback2": 1,
                    "arg2": 4,
                    "argument2": 1,
                    "argument_2": 1,
                    "callback_param_2": 1,
                    "data2": 1,
                    "function2_arg": 1,
                    "function2_parameter": 1,
                    "function_2_argument": 1,
                    "interrupt_handler_param2": 1,
                    "memory_parameter_2": 1,
                    "param2": 1,
                    "parameter2": 3,
                    "second_function_arg": 1,
                    "task2_data": 1,
                    "task_2_data": 1
                },
                "FUN_00002994": {
                    "execute_binary_functions": 1,
                    "execute_callbacks": 2,
                    "execute_code": 2,
                    "execute_function": 1,
                    "execute_function_with_protection": 2,
                    "execute_functions": 1,
                    "execute_functions_with_conditions": 1,
                    "execute_functions_with_flags": 1,
                    "execute_interrupt_handler": 1,
                    "execute_memory_functions": 2,
                    "execute_memory_operations": 3,
                    "execute_memory_protection": 1,
                    "execute_memory_tasks": 1,
                    "execute_protected_code": 1,
                    "execute_protected_functions": 4,
                    "execute_protected_memory_function": 1,
                    "execute_system_tasks": 1,
                    "execute_task": 1,
                    "execute_triggered_functions": 1,
                    "handle_memory_protection": 1
                },
                "PTR_00002798": {
                    "check_and_set_memory_protection_flag": 1
                },
                "PTR_FUN_00001DA4": {
                    "function_pointer_1": 1
                },
                "PTR_FUN_00001DA8": {
                    "function_pointer_2": 1
                },
                "PTR_FUN_000029a0": {
                    "function_pointer_1": 1
                },
                "PTR_FUN_000029a4": {
                    "function_pointer_2": 1
                },
                "_DAT_4003d014": {
                    "binary_flags": 1,
                    "control_register": 1,
                    "global_flags": 1,
                    "interrupt_flags": 1,
                    "memory_flags": 1,
                    "status_reg": 1,
                    "status_register": 2,
                    "system_flags": 2,
                    "task_flags": 1,
                    "trigger_flags": 1
                },
                "_DAT_4003d01c": {
                    "control_flags": 1,
                    "control_register": 1,
                    "control_register2": 1,
                    "flag_reg": 1,
                    "global_var1": 1,
                    "memory_config": 1,
                    "status_register_mask": 2,
                    "system_flags_modified": 1,
                    "task_flag_control": 1,
                    "trigger_flags_copy": 1,
                    "updated_binary_flags": 1
                },
                "check_and_set_memory_protection_flag_00002798": {
                    "check_and_set_memory_protection_flag": 6,
                    "perform_memory_protection_check": 1,
                    "set_memory_protection_flag": 2
                },
                "code": {
                    "binary_function": 1,
                    "callback": 1,
                    "function_pointer": 5,
                    "function_to_execute": 1
                }
            },
            "called": [
                "FUN_00002798"
            ],
            "calling": [],
            "code": "\n\n\nvoid execute_protected_functions_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (function_pointer *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (function_pointer *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  check_and_set_memory_protection_flag();\n  return;\n}\n\n",
            "current_name": "execute_protected_functions_00002994",
            "entrypoint": "0x00002994",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002994": "execute_protected_functions_00002994",
                "check_and_set_memory_protection_flag_00002798": "check_and_set_memory_protection_flag",
                "code": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002a00": {
            "additional_data": {
                "FUN_00002a00": {
                    "process_input": 8,
                    "process_input_data": 23
                },
                "param_1": {
                    "data": 2,
                    "input_data": 29
                }
            },
            "called": [
                "FUN_00004cb4"
            ],
            "calling": [
                "FUN_00002d94",
                "FUN_00002e48"
            ],
            "code": "\nvoid process_input_data_00002a00(undefined4 input_data)\n\n{\n  process_input_data_00002a00_00004cb4(input_data);\n  return;\n}\n\n",
            "current_name": "process_input_data_00002a00",
            "entrypoint": "0x00002a00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002a00": "process_input_data_00002a00",
                "param_1": "input_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002a18": {
            "additional_data": {
                "FUN_00002a18": {
                    "find_byte_match": 1,
                    "find_match": 3,
                    "find_match_and_return_index": 1,
                    "find_match_in_array": 1,
                    "find_match_in_arrays": 1,
                    "find_match_value": 1,
                    "find_matching_key_value": 1,
                    "find_matching_value": 8,
                    "find_matching_value_in_arrays": 1,
                    "find_reboot_function": 1,
                    "find_reboot_offset": 1,
                    "find_reboot_value": 2,
                    "find_value_by_array_comparison": 1,
                    "find_value_by_byte_array": 2,
                    "find_value_in_array": 2,
                    "find_value_in_array_of_arrays": 1,
                    "find_value_in_arrays": 2,
                    "find_value_in_param_list": 1
                },
                "compare_byte_arrays_00004e52": {
                    "compare_arrays": 2,
                    "compare_byte_arrays": 2
                },
                "iVar1": {
                    "comparison_result": 7,
                    "is_match": 1
                },
                "local_10": {
                    "array_index": 12,
                    "current_index": 2,
                    "index": 14,
                    "offset_index": 1,
                    "pair_index": 1,
                    "string_index": 1
                },
                "local_14": {
                    "keyword_list": 1,
                    "reboot_message": 12,
                    "reboot_message_pointer": 1,
                    "reboot_message_ptr": 1,
                    "reboot_msg": 1,
                    "reboot_msgs": 1,
                    "reboot_string": 9,
                    "reboot_string_ptr": 1,
                    "reboot_strings": 1,
                    "string_array": 1,
                    "string_array_pointer": 1,
                    "string_pointers": 1
                },
                "local_18": {
                    "array_pointer": 3,
                    "current_array": 17,
                    "current_array_ptr": 1,
                    "current_element": 2,
                    "current_list": 1,
                    "current_offset": 1,
                    "current_pair": 1,
                    "current_param": 1,
                    "current_value": 1,
                    "input_array": 3
                },
                "local_c": {
                    "current_array": 3,
                    "current_array_ptr": 1,
                    "current_byte_array": 1,
                    "current_data": 1,
                    "current_element": 10,
                    "current_element_ptr": 1,
                    "current_pointer": 1,
                    "current_string": 2,
                    "current_value": 8,
                    "sub_array_pointer": 2,
                    "subarray_pointer": 1
                },
                "param_1": {
                    "array": 16,
                    "array_list": 3,
                    "array_of_arrays": 1,
                    "array_ptr": 1,
                    "data_array": 2,
                    "data_list": 1,
                    "input_array": 3,
                    "key_value_pairs": 1,
                    "param_list": 1,
                    "reboot_offsets_arr": 1,
                    "values": 1
                },
                "param_2": {
                    "array_to_compare": 1,
                    "byte_array": 1,
                    "comparison_value": 1,
                    "key": 1,
                    "pattern": 1,
                    "search_value": 3,
                    "target": 2,
                    "target_element": 1,
                    "target_value": 10,
                    "value": 7,
                    "value_to_compare": 2,
                    "value_to_match": 1
                }
            },
            "called": [
                "FUN_00004e52"
            ],
            "calling": [
                "FUN_00002b10"
            ],
            "code": "\nint find_matching_value_in_arrays_00002a18(int *array,undefined4 target_value)\n\n{\n  int comparison_result;\n  int *current_array;\n  undefined **reboot_message;\n  uint index;\n  int *current_element;\n  \n  current_array = array;\n  reboot_message = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    current_element = (&current_array)[index];\n    if (current_element != (int *)0x0) {\n      for (; *current_element != 0; current_element = current_element + 3) {\n        comparison_result = compare_byte_arrays(*current_element,target_value);\n        if (comparison_result == 0) {\n          return current_element[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "current_name": "find_matching_value_in_arrays_00002a18",
            "entrypoint": "0x00002a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002a18": "find_matching_value_in_arrays_00002a18",
                "compare_byte_arrays_00004e52": "compare_byte_arrays",
                "iVar1": "comparison_result",
                "local_10": "index",
                "local_14": "reboot_message",
                "local_18": "current_array",
                "local_c": "current_element",
                "param_1": "array",
                "param_2": "target_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002a88": {
            "additional_data": {
                "FUN_00002a88": {
                    "display_command_descriptions": 2,
                    "print_command_description": 4,
                    "print_command_descriptions": 24,
                    "print_commands": 1
                },
                "local_10": {
                    "command_index": 9,
                    "i": 4,
                    "index": 18
                },
                "local_14": {
                    "command_description": 7,
                    "command_descriptions": 2,
                    "command_name": 1,
                    "command_names": 8,
                    "command_ptr": 1,
                    "command_strings": 7,
                    "command_titles": 1,
                    "descriptions": 1,
                    "reboot_command": 1,
                    "reboot_description": 1,
                    "reboot_string": 1
                },
                "local_18": {
                    "current_command": 31
                },
                "local_c": {
                    "command_entry": 1,
                    "current_arg": 1,
                    "current_argument": 4,
                    "current_command_data": 2,
                    "current_data": 4,
                    "current_item": 6,
                    "current_param": 3,
                    "current_parameter": 9,
                    "current_params": 1
                },
                "param_1": {
                    "command_array": 2,
                    "command_list": 10,
                    "commands": 19
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "calling": [
                "FUN_00002b10"
            ],
            "code": "\nvoid print_command_descriptions_00002a88(int *commands)\n\n{\n  int *current_command;\n  undefined **command_names;\n  uint index;\n  int *current_parameter;\n  \n  process_elf_data_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  process_and_validate_data_00004db8(\"---------------------------------------\");\n  current_command = commands;\n  command_names = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    current_parameter = (&current_command)[index];\n    if (current_parameter != (int *)0x0) {\n      for (; *current_parameter != 0; current_parameter = current_parameter + 3) {\n        process_elf_data_00004c84(\"%-20s %s\\n\",*current_parameter,current_parameter[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "print_command_descriptions_00002a88",
            "entrypoint": "0x00002a88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "local_10": "index",
                "local_14": "command_names",
                "local_18": "current_command",
                "local_c": "current_parameter",
                "param_1": "commands"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002b10": {
            "additional_data": {
                "FUN_00002b10": {
                    "parse_and_execute_command": 1,
                    "process_and_execute_command": 1,
                    "process_and_validate_input": 1,
                    "process_command": 3,
                    "process_command_line": 3,
                    "process_command_string": 1,
                    "process_data": 1,
                    "process_extracted_binary": 1,
                    "process_input": 7,
                    "process_input_data": 2,
                    "process_input_string": 1,
                    "process_shell_command": 1,
                    "process_string": 3,
                    "process_string_data": 1,
                    "process_string_input": 1,
                    "process_user_input": 3
                },
                "iVar1": {
                    "comparison_result": 4,
                    "result": 1
                },
                "local_14": {
                    "cur_char": 1,
                    "curr_input": 1,
                    "current_byte": 3,
                    "current_byte_ptr": 1,
                    "current_char": 10,
                    "current_char_pointer": 1,
                    "current_char_ptr": 3,
                    "current_character": 3,
                    "current_pos": 2,
                    "current_position": 1,
                    "current_token": 1,
                    "current_word": 1,
                    "str_ptr": 1,
                    "string_ptr": 1
                },
                "local_18": {
                    "argument_index": 1,
                    "command_count": 1,
                    "num_args": 1,
                    "num_args_validated": 1,
                    "num_commands": 1,
                    "num_commands_validated": 1,
                    "num_inputs": 1,
                    "num_quotes": 8,
                    "num_tokens": 1,
                    "num_words": 2,
                    "quote_count": 9,
                    "valid_command_count": 3
                },
                "local_1c": {
                    "backslash_count": 4,
                    "escape_char_count": 1,
                    "escape_count": 9,
                    "num_backslashes": 7,
                    "num_escape_sequences": 1,
                    "num_escapes": 6,
                    "num_slashes": 1
                },
                "local_20": {
                    "arg_index": 4,
                    "command_count": 1,
                    "command_index": 7,
                    "current_argument_index": 1,
                    "current_command_index": 1,
                    "current_index": 2,
                    "i": 4,
                    "index": 9,
                    "iteration_count": 1
                },
                "local_24": {
                    "all_args": 1,
                    "arg_array": 1,
                    "arg_list": 2,
                    "arg_ptrs": 1,
                    "argument_array_ptr": 1,
                    "argument_list": 1,
                    "arguments_pointer_array": 2,
                    "command_arg_addresses": 1,
                    "command_args": 1,
                    "command_array": 1,
                    "command_list": 2,
                    "command_pointer_array": 1,
                    "command_ptr": 1,
                    "command_ptr_array": 2,
                    "command_ptrs": 1,
                    "command_string_array": 1,
                    "commands": 1,
                    "current_arg_ptr": 1,
                    "current_command": 3,
                    "current_command_ptr": 1,
                    "current_input": 1,
                    "current_pointer": 1,
                    "current_token_ptr": 1,
                    "ptr_list_ptr": 1,
                    "string_array": 1
                },
                "local_28": {
                    "arg": 1,
                    "char_ptr": 1,
                    "command": 5,
                    "command_arg": 1,
                    "command_ptr": 1,
                    "command_string": 1,
                    "curr_ptr": 1,
                    "curr_string": 1,
                    "current_arg": 3,
                    "current_argument": 4,
                    "current_char": 1,
                    "current_char_ptr": 1,
                    "current_command": 5,
                    "current_string": 2,
                    "current_token": 1,
                    "ptr_to_string": 1,
                    "sub_command": 1
                },
                "local_2c": {
                    "char_ptr": 1,
                    "curr_char": 1,
                    "current_char": 9,
                    "current_char2": 1,
                    "current_character": 1,
                    "escape_char": 9,
                    "escape_char_holder": 1,
                    "escape_character": 2,
                    "escape_sequence": 1,
                    "prev_char": 1,
                    "ptr_to_char": 1,
                    "src_ptr": 1,
                    "tmp_char": 1
                },
                "local_2d": {
                    "quote_char": 18,
                    "quote_character": 8,
                    "quote_delimiter": 1,
                    "quote_type": 3
                },
                "local_34": {
                    "arg_count": 2,
                    "argument_count": 1,
                    "arguments_count": 1,
                    "array_size": 2,
                    "command_count": 8,
                    "num_args": 4,
                    "num_arguments": 2,
                    "num_commands": 7,
                    "num_ptrs": 1,
                    "num_strings": 1,
                    "temp_var": 1,
                    "token_count": 1
                },
                "local_38": {
                    "arg_array": 1,
                    "arguments": 1,
                    "arguments_array": 2,
                    "command_args": 7,
                    "command_array": 6,
                    "command_list": 3,
                    "command_pointers": 1,
                    "command_ptr": 1,
                    "command_ptr_arr": 1,
                    "command_strings": 1,
                    "input_array": 1,
                    "input_string_tokens": 1,
                    "input_strings": 1,
                    "parsed_commands": 1,
                    "ptr_list": 1
                },
                "local_3c": {
                    "command_function": 3,
                    "command_handler": 1,
                    "function_pointer": 1,
                    "function_ptr": 1,
                    "matching_code": 2,
                    "matching_func": 5,
                    "matching_function": 16,
                    "matching_value_func": 1
                },
                "local_48": {
                    "argument_array": 1,
                    "arguments": 1,
                    "buffer": 1,
                    "byte_array_ptrs": 1,
                    "command_array": 1,
                    "command_data": 1,
                    "command_list": 2,
                    "command_params": 1,
                    "command_start": 1,
                    "command_string_addresses": 1,
                    "command_string_array": 1,
                    "command_strings": 3,
                    "data_addresses": 1,
                    "formatted_input": 1,
                    "input_array": 1,
                    "input_data_array": 2,
                    "input_list": 1,
                    "input_ptr_list": 1,
                    "input_string_copy": 1,
                    "input_string_ptr_arr": 1,
                    "param_list": 1,
                    "parsed_strings": 1,
                    "pointers_array": 1,
                    "string_array": 2,
                    "sub_strings": 1,
                    "user_inputs": 1
                },
                "param_1": {
                    "argc": 1,
                    "command": 1,
                    "command_code": 1,
                    "command_index": 1,
                    "command_length": 1,
                    "command_ptr": 1,
                    "data": 1,
                    "flags": 1,
                    "func_code": 1,
                    "input_length": 1,
                    "input_value": 1,
                    "param": 4,
                    "param1": 13,
                    "param_flags": 1,
                    "param_value": 1,
                    "status": 1
                },
                "param_2": {
                    "argv": 1,
                    "byte_array": 1,
                    "command": 4,
                    "command_string": 5,
                    "data_ptr": 1,
                    "input": 2,
                    "input_data": 3,
                    "input_string": 8,
                    "param2": 4,
                    "str": 1,
                    "string_ptr": 1
                },
                "pbVar2": {
                    "current_byte": 1,
                    "current_char": 1,
                    "next_byte": 1,
                    "next_char": 1
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00002a88",
                "FUN_00004e52",
                "FUN_00004db8",
                "FUN_00002a18"
            ],
            "calling": [
                "FUN_00002e6c"
            ],
            "code": "\nvoid process_user_input_00002b10(undefined4 param1,byte *input_string)\n\n{\n  int comparison_result;\n  byte *current_char;\n  byte *command_strings [3];\n  code *matching_function;\n  char **command_args;\n  uint command_count;\n  byte quote_char;\n  char *current_char;\n  char *current_command;\n  char **current_command;\n  uint index;\n  int escape_count;\n  uint quote_count;\n  byte *current_char;\n  \n  quote_count = 0;\n  escape_count = 0;\n  current_char = input_string;\n  while( true ) {\n    command_strings[0] = input_string;\n    command_strings[1] = (byte *)param1;\n    if (0x20 < *current_char) {\n      if ((*current_char == 0x22) || (*current_char == 0x27)) {\n        quote_char = *current_char;\n        do {\n          current_char = current_char + 1;\n          if (*current_char == 0) {\n            current_char = current_char;\n            process_and_validate_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*current_char == 0x5c) {\n            escape_count = escape_count + 1;\n            current_char = current_char + 2;\n            current_char = current_char;\n            if (*current_char == 0) {\n              process_and_validate_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          current_char = current_char;\n        } while (quote_char != *current_char);\n        if (0x20 < current_char[1]) {\n          process_and_validate_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*current_char == 0x5c) {\n            escape_count = escape_count + 1;\n            current_char = current_char + 1;\n            if (*current_char == 0) {\n              process_and_validate_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          current_char = current_char + 1;\n          if (*current_char == 0x22) {\n            process_and_validate_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *current_char);\n      }\n      quote_count = quote_count + 1;\n    }\n    if (*current_char == 0) break;\n    *current_char = 0;\n    current_char = current_char + 1;\n  }\n  if (quote_count != 0) {\n    command_count = quote_count;\n    command_args = (char **)((int)command_strings - ((quote_count + 1) * 4 + 7 & 0xfffffff8));\n    command_args[quote_count] = (char *)0x0;\n    current_char = input_string;\n    for (index = 0; current_command = command_args, index < quote_count; index = index + 1) {\n      for (; *current_char == 0; current_char = current_char + 1) {\n      }\n      if ((*current_char == 0x22) || (*current_char == 0x27)) {\n        current_char = current_char + 1;\n      }\n      command_args[index] = (char *)current_char;\n      for (; *current_char != 0; current_char = current_char + 1) {\n      }\n    }\n    for (; (escape_count != 0 && (*current_command != (char *)0x0)); current_command = current_command + 1) {\n      for (current_command = *current_command; *current_command != '\\0'; current_command = current_command + 1) {\n        if (*current_command == '\\') {\n          for (current_char = current_command; *current_char != '\\0'; current_char = current_char + 1) {\n            *current_char = current_char[1];\n          }\n          escape_count = escape_count + -1;\n          if (escape_count == 0) break;\n        }\n      }\n    }\n    matching_function = (code *)find_matching_value_in_arrays_00002a18(param1,*command_args);\n    if (matching_function == (code *)0x0) {\n      comparison_result = compare_byte_arrays_00004e52(&DAT_00007214,*command_args);\n      if (comparison_result == 0) {\n        print_command_descriptions_00002a88(command_strings[1]);\n      }\n      else {\n        process_elf_data_00004c84(\"shell: command not found: %s\\n\",*command_args);\n      }\n    }\n    else {\n      (*matching_function)(quote_count,command_args);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_user_input_00002b10",
            "entrypoint": "0x00002b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002b10": "process_user_input_00002b10",
                "iVar1": "comparison_result",
                "local_14": "current_char",
                "local_18": "quote_count",
                "local_1c": "escape_count",
                "local_20": "index",
                "local_24": "current_command",
                "local_28": "current_command",
                "local_2c": "current_char",
                "local_2d": "quote_char",
                "local_34": "command_count",
                "local_38": "command_args",
                "local_3c": "matching_function",
                "local_48": "command_strings",
                "param_1": "param1",
                "param_2": "input_string",
                "pbVar2": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002d94": {
            "additional_data": {
                "FUN_00002d94": {
                    "data_processing_function": 1,
                    "decode_input_data": 1,
                    "process_and_input_binary_data": 1,
                    "process_and_validate_input": 1,
                    "process_binary_data": 1,
                    "process_data": 2,
                    "process_elf_binary_data": 1,
                    "process_elf_data": 2,
                    "process_input": 4,
                    "process_input_and_return_byte": 1,
                    "process_input_data": 11,
                    "process_input_from_binary": 1,
                    "process_input_string": 2,
                    "reverse_and_validate_input": 1,
                    "reverse_binary_data": 1
                },
                "bVar2": {
                    "byte_flag": 1,
                    "byte_result": 1,
                    "byte_value": 6,
                    "byte_var": 1,
                    "control_byte": 1,
                    "converted_char": 1,
                    "converted_value": 1,
                    "input_byte": 1,
                    "last_byte": 1,
                    "output_byte": 3,
                    "output_char": 1,
                    "result": 1,
                    "result_byte": 3,
                    "return_value": 2
                },
                "bVar3": {
                    "is_buffer_empty": 4,
                    "is_buffer_start": 1,
                    "is_buffer_zero": 1,
                    "is_data_pointer_first": 1,
                    "is_first_byte": 6,
                    "is_first_char": 1,
                    "is_first_character": 1,
                    "is_first_element": 1,
                    "is_first_iteration": 1,
                    "is_input_buffer_empty": 1,
                    "is_input_empty": 1,
                    "is_input_string_start": 1,
                    "is_param1": 2,
                    "is_start_of_buffer": 2
                },
                "iVar1": {
                    "binary_data": 10,
                    "byte_from_data": 1,
                    "byte_value": 1,
                    "current_byte": 1,
                    "data": 4,
                    "data_value": 2,
                    "input_result": 1,
                    "processed_char": 1,
                    "processed_data": 2
                },
                "local_c": {
                    "current_byte": 3,
                    "current_char": 11,
                    "current_character": 1,
                    "current_input": 2,
                    "current_output": 1,
                    "current_output_ptr": 1,
                    "current_pos": 1,
                    "current_position": 5,
                    "current_ptr": 3,
                    "output_buffer": 1,
                    "output_data": 1,
                    "output_ptr": 1
                },
                "param_1": {
                    "buffer": 6,
                    "data": 1,
                    "data_buffer": 3,
                    "data_pointer": 2,
                    "input_buffer": 10,
                    "input_data": 5,
                    "input_string": 1,
                    "output_buffer": 2,
                    "string_buffer": 1
                },
                "param_2": {
                    "buffer_length": 2,
                    "buffer_size": 18,
                    "data_size": 5,
                    "input_length": 1,
                    "input_size": 3,
                    "length_of_input_string": 1,
                    "output_buffer_size": 1
                },
                "process_binary_data_from_elf_00004418": {
                    "get_binary_data": 1,
                    "get_binary_data_from_elf": 1,
                    "process_binary_data": 1,
                    "process_elf_binary_data": 1
                },
                "process_input_data_00002a00": {
                    "process_input_data": 3,
                    "process_output_data": 1
                }
            },
            "called": [
                "FUN_00002a00",
                "FUN_00004418"
            ],
            "calling": [
                "FUN_00002e6c"
            ],
            "code": "\nuint process_and_input_binary_data_00002d94(undefined *input_buffer,int buffer_size)\n\n{\n  int binary_data;\n  byte byte_value;\n  bool is_first_byte;\n  undefined *current_char;\n  \n  current_char = input_buffer;\n  while( true ) {\n    if (buffer_size + -1 <= (int)current_char - (int)input_buffer) {\n      return 0xffffffff;\n    }\n    binary_data = get_binary_data();\n    if (binary_data < 0) break;\n    if ((binary_data == 0xd) || (binary_data == 10)) {\n      *current_char = 0;\n      process_input_data(0xd);\n      process_input_data(10);\n      is_first_byte = current_char == input_buffer;\n      if (is_first_byte) {\n        input_buffer = (undefined *)0x1;\n      }\n      byte_value = (byte)input_buffer;\n      if (!is_first_byte) {\n        byte_value = 0;\n      }\n      return (uint)byte_value;\n    }\n    if ((binary_data == 8) || (binary_data == 0x7f)) {\n      if (current_char != input_buffer) {\n        current_char = current_char + -1;\n        *current_char = 0;\n        process_input_data(8);\n        process_input_data(0x20);\n        process_input_data(8);\n      }\n    }\n    else {\n      *current_char = (char)binary_data;\n      process_input_data(binary_data);\n      current_char = current_char + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "process_and_input_binary_data_00002d94",
            "entrypoint": "0x00002d94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002d94": "process_and_input_binary_data_00002d94",
                "bVar2": "byte_value",
                "bVar3": "is_first_byte",
                "iVar1": "binary_data",
                "local_c": "current_char",
                "param_1": "input_buffer",
                "param_2": "buffer_size",
                "process_binary_data_from_elf_00004418": "get_binary_data",
                "process_input_data_00002a00": "process_input_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002e48": {
            "additional_data": {
                "16": {
                    "index": 1
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "elf_relocations": 1,
                    "elf_relocations_array": 1,
                    "rel_array": 4,
                    "relocation_array": 8,
                    "relocation_data": 1,
                    "relocation_data_array": 1,
                    "relocations_array": 1
                },
                "FUN_00002e48": {
                    "initialize_and_process_data": 1,
                    "initialize_data_processing": 1,
                    "initialize_input_processing": 1,
                    "initialize_process": 1,
                    "process_and_validate_relocations": 4,
                    "process_data": 1,
                    "process_input": 1,
                    "process_input_and_relocate": 2,
                    "process_input_and_relocation": 1,
                    "process_input_and_relocations": 3,
                    "process_input_and_validate": 1,
                    "process_input_and_validate_relocations": 9,
                    "process_input_data": 1,
                    "process_input_data_and_relocations": 1,
                    "process_relocated_data": 1,
                    "process_relocated_input": 1,
                    "process_relocation_data": 1
                },
                "process_and_validate_relocations_000041d0": {
                    "process_and_validate_relocations": 16,
                    "process_relocations": 6,
                    "validate_and_apply_relocations": 1,
                    "validate_and_process_relocations": 1,
                    "validate_relocations": 3
                },
                "process_input_data_00002a00": {
                    "load_input_data": 1,
                    "process_input": 3,
                    "process_input_data": 27
                },
                "r_offset": {
                    "offset": 5,
                    "relocation_offset": 1
                }
            },
            "called": [
                "FUN_00002a00",
                "FUN_000041d0"
            ],
            "calling": [
                "FUN_00002e6c"
            ],
            "code": "\nvoid process_input_and_validate_relocations_00002e48(void)\n\n{\n  process_input_data(0x3e);\n  process_input_data(0x20);\n  process_and_validate_relocations(*(undefined4 *)(relocation_array[16].offset + 8));\n  return;\n}\n\n",
            "current_name": "process_input_and_validate_relocations_00002e48",
            "entrypoint": "0x00002e48",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array",
                "FUN_00002e48": "process_input_and_validate_relocations_00002e48",
                "process_and_validate_relocations_000041d0": "process_and_validate_relocations",
                "process_input_data_00002a00": "process_input_data",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "additional_data": {
                "FUN_00002e6c": {
                    "input_validation_loop": 1,
                    "process_and_validate_input": 8,
                    "process_binary_data": 1,
                    "process_binary_input": 1,
                    "process_input": 1,
                    "process_input_and_handle_relocations": 2,
                    "process_input_and_validate": 7,
                    "process_input_and_validate_loop": 1,
                    "process_input_loop": 6,
                    "process_loop": 1,
                    "process_relocated_input": 1,
                    "process_user_input_with_relocations": 1
                },
                "iVar1": {
                    "error_code": 1,
                    "input_status": 1,
                    "is_valid_data": 1,
                    "process_result": 6,
                    "result": 20,
                    "validation_result": 1
                },
                "param_1": {
                    "data_start_address": 1,
                    "function_param_1": 1,
                    "input_1": 2,
                    "input_data": 1,
                    "input_param": 12,
                    "input_param_1": 5,
                    "input_parameter_1": 1,
                    "input_value": 1,
                    "input_value_1": 1,
                    "param": 1,
                    "param_1": 1,
                    "param_ptr": 1,
                    "param_result": 1,
                    "user_input": 2
                },
                "param_2": {
                    "binary_data": 1,
                    "binary_data_1": 3,
                    "binary_data_param": 8,
                    "binary_param": 3,
                    "data_end_address": 1,
                    "data_ptr": 1,
                    "function_param_2": 1,
                    "input_2": 2,
                    "input_param": 1,
                    "input_param_2": 5,
                    "input_parameter_2": 1,
                    "input_value_2": 1,
                    "param_data": 1,
                    "relocation_data": 1,
                    "relocation_data_ptr": 1
                },
                "param_3": {
                    "binary_data": 1,
                    "binary_data_2": 3,
                    "binary_data_param": 1,
                    "binary_data_ptr": 1,
                    "data_param": 1,
                    "function_param_3": 1,
                    "input_3": 2,
                    "input_param_3": 5,
                    "input_parameter_3": 1,
                    "input_value_3": 1,
                    "param_length": 1,
                    "reloc_ptr": 1,
                    "relocation_address": 1,
                    "relocation_data_param": 1,
                    "relocation_param": 6,
                    "relocations": 1,
                    "validate_param": 2,
                    "validation_param": 1
                },
                "process_and_input_binary_data_00002d94": {
                    "process_and_input_binary_data": 1,
                    "process_binary_data": 9,
                    "process_binary_data_input": 1
                },
                "process_input_and_validate_relocations_00002e48": {
                    "process_and_validate_relocations": 1,
                    "process_relocations": 4,
                    "process_relocations_validation": 1,
                    "validate_relocations": 5
                },
                "process_user_input_00002b10": {
                    "handle_user_input": 1,
                    "process_user_input": 10
                }
            },
            "called": [
                "FUN_00002d94",
                "FUN_00002e48",
                "FUN_00002b10"
            ],
            "calling": [
                "FUN_000023a4"
            ],
            "code": "\nvoid process_input_and_validate_loop_00002e6c(undefined4 input_param,undefined4 binary_data_param,undefined4 relocation_param)\n\n{\n  int result;\n  \n  validate_relocations();\n  do {\n    result = process_binary_data(binary_data_param,relocation_param);\n    if (result == 0) {\n      process_user_input(input_param,binary_data_param);\n    }\n    validate_relocations();\n  } while( true );\n}\n\n",
            "current_name": "process_input_and_validate_loop_00002e6c",
            "entrypoint": "0x00002e6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002e6c": "process_input_and_validate_loop_00002e6c",
                "iVar1": "result",
                "param_1": "input_param",
                "param_2": "binary_data_param",
                "param_3": "relocation_param",
                "process_and_input_binary_data_00002d94": "process_binary_data",
                "process_input_and_validate_relocations_00002e48": "validate_relocations",
                "process_user_input_00002b10": "process_user_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "additional_data": {
                "": {
                    "": 1
                },
                "0": {
                    "success": 1
                },
                "FUN_00002e9c": {
                    "execute_infinite_loop": 5,
                    "initialize_infinite_loop": 1,
                    "run_infinite_loop": 16,
                    "run_infinite_loop_and_return_zero": 1,
                    "run_infinite_loop_with_no_return": 1,
                    "run_infinitely": 1,
                    "run_loop": 1,
                    "start_infinite_loop": 5
                },
                "PTR_00003688": {
                    "infinite_loop_pointer": 1
                },
                "PTR_FUN_00003688": {
                    "function_pointer": 1
                },
                "return": {
                    "": 1
                },
                "run_infinite_loop_00003688": {
                    "execute_infinite_loop": 2,
                    "infinite_loop": 9,
                    "run_infinite_loop": 8,
                    "run_loop": 1,
                    "start_infinite_loop": 1
                },
                "undefined4": {
                    "void": 1
                }
            },
            "called": [
                "FUN_00003688"
            ],
            "calling": [],
            "code": "\nvoid run_infinite_loop_and_return_zero_00002e9c(void)\n\n{\n  infinite_loop();\n  return 0;\n}\n\n",
            "current_name": "run_infinite_loop_and_return_zero_00002e9c",
            "entrypoint": "0x00002e9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002e9c": "run_infinite_loop_and_return_zero_00002e9c",
                "run_infinite_loop_00003688": "infinite_loop",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "additional_data": {
                "FUN_00002eb4": {
                    "print_and_return_process_stack_information": 2,
                    "print_process_stack_info": 4,
                    "print_process_stack_information": 13,
                    "print_stack_information": 12
                },
                "print_process_stack_information_0000211c": {
                    "print_proc_stack_info": 1,
                    "print_process_stack_information": 11,
                    "print_stack_info": 8,
                    "print_stack_information": 2
                },
                "unused": {
                    "unused_variable": 1
                }
            },
            "called": [
                "FUN_0000211c"
            ],
            "calling": [],
            "code": "\nundefined4 print_and_return_process_stack_information_00002eb4(void)\n\n{\n  print_process_stack_information();\n  return 0;\n}\n\n",
            "current_name": "print_and_return_process_stack_information_00002eb4",
            "entrypoint": "0x00002eb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002eb4": "print_and_return_process_stack_information_00002eb4",
                "print_process_stack_information_0000211c": "print_process_stack_information"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "additional_data": {
                "FUN_00002ecc": {
                    "read_and_display_device_data": 1,
                    "read_data_from_device": 6,
                    "read_device_data": 1,
                    "read_from_device": 22,
                    "read_from_device_info": 1
                },
                "auStack_1c": {
                    "buffer": 7,
                    "data_buffer": 12,
                    "read_buffer": 5,
                    "stack_data": 1,
                    "temporary_buffer": 1
                },
                "local_14": {
                    "bytes_read": 1,
                    "data_length": 2,
                    "data_size": 9,
                    "read_data_size": 1,
                    "read_length": 1,
                    "read_result": 13,
                    "read_size": 4
                },
                "param_1": {
                    "device_id": 1,
                    "device_index": 8,
                    "device_num": 1,
                    "device_number": 21
                },
                "param_2": {
                    "device_data": 11,
                    "device_data_ptr": 2,
                    "device_info": 14,
                    "device_info_ptr": 3,
                    "device_struct_ptr": 1
                },
                "uVar1": {
                    "class_name": 5,
                    "device_class": 3,
                    "device_class_name": 23
                },
                "uVar2": {
                    "address": 1,
                    "device_address": 2,
                    "device_data": 1,
                    "device_id": 1,
                    "device_name": 14,
                    "device_type": 12
                }
            },
            "called": [
                "FUN_00003694",
                "FUN_00004c84",
                "FUN_00003d64",
                "FUN_000039e8"
            ],
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "code": "\nvoid read_data_from_device_00002ecc(undefined4 device_number,int device_info)\n\n{\n  undefined4 device_class_name;\n  undefined4 device_name;\n  undefined data_buffer [8];\n  uint read_result;\n  \n  read_result = execute_function_or_error_check_00003d64(device_info,data_buffer);\n  if ((int)read_result < 1) {\n    process_elf_data_00004c84(\"error: failed to read from device #%i\\n\",device_number);\n  }\n  else {\n    device_name = *(undefined4 *)(device_info + 8);\n    device_class_name = get_device_class_name_000039e8(*(undefined *)(*(int *)(device_info + 0xc) + 8));\n    process_elf_data_00004c84(\"Reading from #%i (%s|%s)\\n\",device_number,device_name,device_class_name);\n    display_data_objects_00003694(data_buffer,read_result & 0xff);\n  }\n  return;\n}\n\n",
            "current_name": "read_data_from_device_00002ecc",
            "entrypoint": "0x00002ecc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002ecc": "read_data_from_device_00002ecc",
                "auStack_1c": "data_buffer",
                "local_14": "read_result",
                "param_1": "device_number",
                "param_2": "device_info",
                "uVar1": "device_class_name",
                "uVar2": "device_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002f30": {
            "additional_data": {
                "FUN_00002f30": {
                    "iterate_and_process_data": 1,
                    "process_data_from_device": 9,
                    "process_device_data": 11,
                    "read_and_process_data": 6,
                    "read_and_process_data_from_device": 2,
                    "read_and_process_device_data": 2
                },
                "local_10": {
                    "counter": 2,
                    "data_index": 2,
                    "device_count": 2,
                    "device_index": 9,
                    "index": 15,
                    "iteration_count": 1
                },
                "local_c": {
                    "current_data": 2,
                    "current_data_pointer": 1,
                    "current_data_ptr": 5,
                    "current_device": 3,
                    "current_node": 3,
                    "data_pointer": 3,
                    "data_ptr": 13,
                    "device_data_ptr": 1
                },
                "process_and_validate_data_00004db8": {
                    "process_and_validate_data": 5
                },
                "read_data_from_device_00002ecc": {
                    "read_data": 1,
                    "read_data_from_device": 4
                }
            },
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "calling": [
                "FUN_00002fe0"
            ],
            "code": "\nvoid read_and_process_data_from_device_00002f30(void)\n\n{\n  int index;\n  undefined4 *data_ptr;\n  \n  index = 0;\n  for (data_ptr = DAT_1fff0db0; data_ptr != (undefined4 *)0x0; data_ptr = (undefined4 *)*data_ptr) {\n    read_data_from_device(index,data_ptr);\n    process_and_validate_data(&DAT_00007380);\n    index = index + 1;\n  }\n  return;\n}\n\n",
            "current_name": "read_and_process_data_from_device_00002f30",
            "entrypoint": "0x00002f30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002f30": "read_and_process_data_from_device_00002f30",
                "local_10": "index",
                "local_c": "data_ptr",
                "process_and_validate_data_00004db8": "process_and_validate_data",
                "read_data_from_device_00002ecc": "read_data_from_device"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002f74": {
            "additional_data": {
                "DAT_1fff0db0": {
                    "device_list": 1
                },
                "FUN_00002f74": {
                    "display_device_info": 2,
                    "display_device_information": 2,
                    "display_device_list": 2,
                    "print_device_info": 4,
                    "print_device_information": 15,
                    "print_device_list": 5,
                    "print_devices": 1
                },
                "get_device_class_name_000039e8": {
                    "get_class_name": 1,
                    "get_device_class_name": 6
                },
                "local_14": {
                    "device_list": 29,
                    "device_pointer": 2
                },
                "local_18": {
                    "device_count": 26,
                    "device_index": 4,
                    "index": 1
                },
                "process_and_validate_data_00004db8": {
                    "display_header": 1,
                    "display_message": 1,
                    "process_and_validate_data": 4,
                    "process_info_message": 1
                },
                "process_and_validate_data_00004db8_1": {
                    "display_message": 1
                },
                "process_elf_data_00004c84": {
                    "print_device_data": 1,
                    "process_device_data": 2,
                    "process_elf_data": 4
                },
                "uVar1": {
                    "class_name": 4,
                    "device_class": 1,
                    "device_class_name": 16
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_000039e8"
            ],
            "calling": [
                "FUN_0000316c"
            ],
            "code": "\nvoid print_device_information_00002f74(void)\n\n{\n  undefined4 device_class_name;\n  int device_count;\n  undefined4 *device_list;\n  \n  device_list = DAT_1fff0db0;\n  device_count = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    process_and_validate_data(\"No devices found\");\n  }\n  else {\n    process_and_validate_data(\"ID\\tClass\\t\\tName\");\n  }\n  for (; device_list != (undefined4 *)0x0; device_list = (undefined4 *)*device_list) {\n    device_class_name = get_device_class_name(*(undefined *)(device_list[3] + 8));\n    process_elf_data(\"#%i\\t%s\\t%s\\n\",device_count,device_class_name,device_list[2]);\n    device_count = device_count + 1;\n  }\n  return;\n}\n\n",
            "current_name": "print_device_information_00002f74",
            "entrypoint": "0x00002f74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002f74": "print_device_information_00002f74",
                "get_device_class_name_000039e8": "get_device_class_name",
                "local_14": "device_list",
                "local_18": "device_count",
                "process_and_validate_data_00004db8": "process_and_validate_data",
                "process_elf_data_00004c84": "process_elf_data",
                "uVar1": "device_class_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "additional_data": {
                "DAT_000073d4": {
                    "default_device_data": 1
                },
                "FUN_00002fe0": {
                    "analyze_device_data": 1,
                    "process_device_data": 26,
                    "process_elf_data": 3
                },
                "F_UNPACK_BINARY": {
                    "unpack_binary_data": 1
                },
                "compare_byte_arrays_00004e52": {
                    "compare_arrays": 1,
                    "compare_command_arg": 1,
                    "compare_data_arrays": 1,
                    "compare_device_id": 8,
                    "compare_strings": 2,
                    "compare_with_constant": 1
                },
                "find_nth_element_00003d24": {
                    "find_device_element": 1,
                    "find_device_index": 9,
                    "find_element": 1,
                    "find_element_by_index": 2,
                    "find_nth_element": 1,
                    "get_element_index": 1
                },
                "iVar1": {
                    "comparison_result": 30
                },
                "param_1": {
                    "argc": 11,
                    "argument_count": 3,
                    "device_count": 12,
                    "num_args": 3,
                    "num_arguments": 1,
                    "num_params": 1
                },
                "param_2": {
                    "args": 3,
                    "arguments": 13,
                    "argv": 12,
                    "command_line_args": 1,
                    "command_line_arguments": 1,
                    "params": 1
                },
                "parse_and_validate_number_00004042": {
                    "parse_and_validate": 1,
                    "parse_and_validate_device_id": 9,
                    "parse_and_validate_id": 1,
                    "parse_and_validate_number": 1,
                    "parse_device_id": 3
                },
                "process_and_validate_data_00004db8": {
                    "process_and_validate": 1,
                    "process_and_validate_data": 3,
                    "process_data_error": 1,
                    "process_error": 3,
                    "process_error_message": 1,
                    "process_invalid_data": 1,
                    "process_invalid_data_error": 1,
                    "process_invalid_device": 1,
                    "process_invalid_device_data": 1,
                    "process_invalid_device_id_error": 1,
                    "process_validation_error": 1
                },
                "process_elf_data_00004c84": {
                    "display_usage_error": 2,
                    "print_usage": 7,
                    "print_usage_message": 1
                },
                "read_and_process_data_from_device_00002f30": {
                    "read_and_process_all_data": 2,
                    "read_and_process_all_device_data": 1,
                    "read_and_process_data": 6,
                    "read_and_process_data_from_device": 5,
                    "read_and_process_device_data": 1
                },
                "read_data_from_device_00002ecc": {
                    "read_and_process_device_data": 1,
                    "read_data": 3,
                    "read_data_from_device": 10,
                    "read_device_data": 1
                },
                "uVar2": {
                    "device_id": 14,
                    "parsed_device_id": 1,
                    "parsed_number": 15
                }
            },
            "called": [
                "FUN_00003d24",
                "FUN_00004c84",
                "FUN_00004e52",
                "FUN_00004db8",
                "FUN_00004042",
                "FUN_00002f30",
                "FUN_00002ecc"
            ],
            "calling": [
                "FUN_0000316c"
            ],
            "code": "\nvoid process_device_data_00002fe0(int device_count,undefined4 *arguments)\n\n{\n  int comparison_result;\n  undefined4 parsed_number;\n  \n  if (device_count < 3) {\n    print_usage(\"usage: %s %s <device id>|all\\n\",*arguments,arguments[1]);\n  }\n  else {\n    comparison_result = compare_device_id(arguments[2],&DAT_000073d4);\n    if (comparison_result == 0) {\n      read_and_process_data();\n    }\n    else {\n      parsed_number = parse_and_validate_device_id(arguments[2]);\n      comparison_result = find_device_index(parsed_number);\n      if (comparison_result == 0) {\n        process_error(\"error: undefined device id given\");\n      }\n      else {\n        read_data_from_device(parsed_number,comparison_result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_device_data_00002fe0",
            "entrypoint": "0x00002fe0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002fe0": "process_device_data_00002fe0",
                "compare_byte_arrays_00004e52": "compare_device_id",
                "find_nth_element_00003d24": "find_device_index",
                "iVar1": "comparison_result",
                "param_1": "device_count",
                "param_2": "arguments",
                "parse_and_validate_number_00004042": "parse_and_validate_device_id",
                "process_and_validate_data_00004db8": "process_error",
                "process_elf_data_00004c84": "print_usage",
                "read_and_process_data_from_device_00002f30": "read_and_process_data",
                "read_data_from_device_00002ecc": "read_data_from_device",
                "uVar2": "parsed_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000305c": {
            "additional_data": {
                "FUN_0000305c": {
                    "write_data_to_device": 3,
                    "write_to_device": 28
                },
                "auStack_20": {
                    "data_array": 1,
                    "data_values": 1,
                    "device_arguments": 1,
                    "device_data": 1,
                    "device_values": 10,
                    "value_array": 1,
                    "values": 10,
                    "values_array": 6
                },
                "display_data_objects_00003694": {
                    "display_data_objects": 3
                },
                "execute_function_or_return_error_00003d94": {
                    "execute_function": 1,
                    "execute_function_or_return_error": 2
                },
                "fill_array_with_value_00004622": {
                    "fill_array_with_value": 2,
                    "initialize_array": 1
                },
                "find_nth_element_00003d24": {
                    "find_device": 2,
                    "find_element_at_index": 1
                },
                "local_10": {
                    "device_id": 24,
                    "device_id_to_write": 1,
                    "device_number": 3,
                    "parsed_value": 1,
                    "value": 2
                },
                "local_14": {
                    "device": 3,
                    "device_element": 1,
                    "device_entry": 1,
                    "device_found": 1,
                    "device_index": 24,
                    "device_ptr": 1
                },
                "local_18": {
                    "device_count": 2,
                    "num_of_values": 1,
                    "num_values": 25,
                    "value_count": 3
                },
                "local_c": {
                    "counter": 1,
                    "current_value_index": 1,
                    "i": 15,
                    "index": 8,
                    "loop_counter": 1,
                    "loop_index": 2,
                    "value_index": 2
                },
                "param_1": {
                    "arg_count": 1,
                    "argc": 28,
                    "num_arguments": 2
                },
                "param_2": {
                    "args": 1,
                    "arguments": 2,
                    "argv": 28
                },
                "parse_and_validate_number_00004042": {
                    "parse_and_validate_number": 3
                },
                "process_and_validate_data_00004db8": {
                    "print_error": 1,
                    "print_error_message": 1,
                    "process_error": 1
                },
                "process_elf_data_00004c84": {
                    "print_usage": 2,
                    "print_usage_message": 1
                },
                "uVar1": {
                    "device_id": 1,
                    "device_value": 1,
                    "parsed_number": 7,
                    "parsed_value": 13,
                    "value": 3
                }
            },
            "called": [
                "FUN_00003d24",
                "FUN_00003694",
                "FUN_00004c84",
                "FUN_00004622",
                "FUN_00004db8",
                "FUN_00003d94",
                "FUN_00004042"
            ],
            "calling": [
                "FUN_0000316c"
            ],
            "code": "\nvoid write_data_to_device_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 parsed_value;\n  undefined2 device_values [4];\n  uint num_values;\n  int device_index;\n  undefined4 device_id;\n  int i;\n  \n  if (argc < 4) {\n    print_usage(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    device_id = parse_and_validate_number(argv[2]);\n    device_index = find_device(device_id);\n    if (device_index == 0) {\n      process_error(\"error: undefined device given\");\n    }\n    else {\n      fill_array_with_value(device_values,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      num_values = argc - 3;\n      for (i = 0; i < (int)num_values; i = i + 1) {\n        parsed_value = parse_and_validate_number(argv[i + 3]);\n        device_values[i] = parsed_value;\n      }\n      print_usage(\"Writing to device #%i - %s\\n\",device_id,*(undefined4 *)(device_index + 8));\n      display_data_objects(device_values,num_values & 0xff);\n      num_values = execute_function_or_return_error(device_index,device_values);\n      if ((int)num_values < 1) {\n        if (num_values == -0x86) {\n          print_usage(\"error: device #%i is not writable\\n\",device_id);\n        }\n        else {\n          print_usage(\"error: failure to write to device #%i\\n\",device_id);\n        }\n      }\n      else {\n        print_usage(\"data successfully written to device #%i\\n\",device_id);\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "write_data_to_device_0000305c",
            "entrypoint": "0x0000305c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000305c": "write_data_to_device_0000305c",
                "auStack_20": "device_values",
                "display_data_objects_00003694": "display_data_objects",
                "execute_function_or_return_error_00003d94": "execute_function_or_return_error",
                "fill_array_with_value_00004622": "fill_array_with_value",
                "find_nth_element_00003d24": "find_device",
                "local_10": "device_id",
                "local_14": "device_index",
                "local_18": "num_values",
                "local_c": "i",
                "param_1": "argc",
                "param_2": "argv",
                "parse_and_validate_number_00004042": "parse_and_validate_number",
                "process_and_validate_data_00004db8": "process_error",
                "process_elf_data_00004c84": "print_usage",
                "uVar1": "parsed_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000316c": {
            "additional_data": {
                "FUN_0000316c": {
                    "device_data_handler": 1,
                    "device_operation": 2,
                    "execute_device_operation": 1,
                    "handle_device_command": 2,
                    "handle_device_function": 1,
                    "handle_device_operation": 8,
                    "process_command": 5,
                    "process_device_command": 5,
                    "process_device_commands": 1,
                    "process_device_information": 1,
                    "process_device_operation": 3,
                    "process_input": 1
                },
                "compare_byte_arrays_00004e52": {
                    "compare_byte_arrays": 2
                },
                "iVar1": {
                    "array_comparison_result": 2,
                    "comparison_result": 27,
                    "result": 1
                },
                "param_1": {
                    "command_count": 2,
                    "command_length": 1,
                    "command_type": 4,
                    "device_command_length": 1,
                    "device_count": 6,
                    "device_operation_type": 3,
                    "device_type": 1,
                    "input_length": 1,
                    "num_commands": 1,
                    "num_params": 1,
                    "operation": 1,
                    "operation_type": 9
                },
                "param_2": {
                    "args": 1,
                    "arguments": 9,
                    "command_args": 4,
                    "command_arguments": 2,
                    "command_array": 1,
                    "command_params": 1,
                    "device_arguments": 1,
                    "device_array": 1,
                    "device_command_array": 1,
                    "device_data": 3,
                    "device_data_array": 2,
                    "device_info": 2,
                    "input_array": 1,
                    "operation_data": 1,
                    "params": 1
                },
                "print_device_information_00002f74": {
                    "print_device_information": 2
                },
                "process_device_data_00002fe0": {
                    "process_device_data": 2
                },
                "process_elf_data_00004c84": {
                    "print_usage": 2
                },
                "write_data_to_device_0000305c": {
                    "write_data_to_device": 2
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_00004e52",
                "FUN_00002f74",
                "FUN_0000305c"
            ],
            "calling": [],
            "code": "\nundefined4 handle_device_function_0000316c(int operation_type,undefined4 *arguments)\n\n{\n  int comparison_result;\n  \n  if (operation_type < 2) {\n    print_device_information();\n  }\n  else {\n    comparison_result = compare_byte_arrays(arguments[1],&DAT_000074ec);\n    if (comparison_result == 0) {\n      process_device_data(operation_type,arguments);\n    }\n    else {\n      comparison_result = compare_byte_arrays(arguments[1],\"write\");\n      if (comparison_result == 0) {\n        write_data_to_device(operation_type,arguments);\n      }\n      else {\n        print_usage(\"usage: %s read|write\\n\",*arguments);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "handle_device_function_0000316c",
            "entrypoint": "0x0000316c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000316c": "handle_device_function_0000316c",
                "compare_byte_arrays_00004e52": "compare_byte_arrays",
                "iVar1": "comparison_result",
                "param_1": "operation_type",
                "param_2": "arguments",
                "print_device_information_00002f74": "print_device_information",
                "process_device_data_00002fe0": "process_device_data",
                "process_elf_data_00004c84": "print_usage",
                "write_data_to_device_0000305c": "write_data_to_device"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000031e0": {
            "additional_data": {
                "FUNC_00004db8": {
                    "display_message": 11,
                    "print_message": 10
                },
                "FUN_000031e0": {
                    "display_alarm_message": 9,
                    "print_alarm_message": 2,
                    "ring_alarm": 20
                },
                "Message": {
                    "alarm_message": 1
                }
            },
            "called": [
                "FUN_00004db8"
            ],
            "calling": [],
            "code": "\nvoid ring_alarm_000031e0(void)\n\n{\n  process_and_validate_data_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "code_backup": "\nvoid FUN_000031e0(void)\n\n{\n  FUNC_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "current_name": "ring_alarm_000031e0",
            "entrypoint": "0x000031e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000031fc": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "day_of_week_array": 1,
                    "day_offsets": 2,
                    "days_of_week": 1,
                    "month_offset": 1,
                    "month_offsets": 1,
                    "table_of_constants": 1,
                    "week_days": 1,
                    "week_offset": 1,
                    "week_offsets": 1,
                    "weekday_offset": 3,
                    "weekdays": 1,
                    "weekdays_offsets": 1
                },
                "FUN_000031fc": {
                    "calculate_day_of_week": 11,
                    "calculate_weekday": 15,
                    "get_day_of_week": 3,
                    "get_weekday": 2
                },
                "bVar1": {
                    "adjustment": 1,
                    "is_february": 1,
                    "is_leap_year": 25,
                    "leap_year_flag": 1,
                    "leap_year_offset": 1,
                    "month_flag": 1,
                    "offset": 1
                },
                "iVar2": {
                    "adjusted_month": 11,
                    "adjusted_year": 17,
                    "adjusted_year_days": 1,
                    "normalized_month": 1,
                    "normalized_year": 1
                },
                "param_1": {
                    "day": 1,
                    "year": 29,
                    "year_days": 1
                },
                "param_2": {
                    "month": 31
                },
                "param_3": {
                    "additional_days": 1,
                    "day": 27,
                    "day_of_month": 1,
                    "extra_days": 1,
                    "year": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0000328c"
            ],
            "code": "\nint calculate_weekday_000031fc(int year,int month,int day)\n\n{\n  byte is_leap_year;\n  int adjusted_year;\n  \n  adjusted_year = month;\n  if (month < 3) {\n    adjusted_year = 1;\n  }\n  is_leap_year = (byte)adjusted_year;\n  if (2 < month) {\n    is_leap_year = 0;\n  }\n  year = year - (uint)is_leap_year;\n  adjusted_year = year;\n  if (year < 0) {\n    adjusted_year = year + 3;\n  }\n  return ((((adjusted_year >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)weekday_offset + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "current_name": "calculate_weekday_000031fc",
            "entrypoint": "0x000031fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "weekday_offset",
                "FUN_000031fc": "calculate_weekday_000031fc",
                "bVar1": "is_leap_year",
                "iVar2": "adjusted_year",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000328c": {
            "additional_data": {
                "FUN_0000328c": {
                    "extract_date_components": 1,
                    "extract_info": 1,
                    "initialize_parameters": 2,
                    "parse_and_calculate_weekday": 24,
                    "parse_date_and_calculate_weekday": 1,
                    "parse_date_and_weekday": 2
                },
                "calculate_weekday_000031fc": {
                    "calculate_weekday": 1
                },
                "iVar1": {
                    "weekday": 1
                },
                "local_10": {
                    "current_index": 7,
                    "current_position": 2,
                    "index": 15,
                    "parsed_index": 2,
                    "parsed_value": 1,
                    "pos": 1,
                    "position": 1,
                    "start_index": 1,
                    "temp_var1": 1
                },
                "local_a": {
                    "parsed_number": 28,
                    "parsed_value": 2,
                    "temp_var2": 1
                },
                "param_1": {
                    "data_array": 2,
                    "date_str": 1,
                    "date_string": 4,
                    "input_array": 11,
                    "input_data": 4,
                    "input_parameter": 1,
                    "input_parameters": 2,
                    "input_string": 2,
                    "input_strings": 3,
                    "numbers_array": 1
                },
                "param_2": {
                    "output_array": 16,
                    "output_data": 3,
                    "output_parameters": 2,
                    "output_values": 3,
                    "parsed_data": 1,
                    "parsed_date": 1,
                    "result_array": 5
                },
                "parse_number_00004f84": {
                    "parse_number_from_string": 1
                }
            },
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "code": "\nundefined4 parse_date_and_calculate_weekday_0000328c(undefined4 *input_array,int *output_array)\n\n{\n  int weekday;\n  int index;\n  short parsed_number;\n  \n  parsed_number = parse_number_from_string(*input_array,&index,10);\n  output_array[5] = parsed_number + -0x76c;\n  parsed_number = parse_number_from_string(index + 1,&index,10);\n  output_array[4] = parsed_number + -1;\n  parsed_number = parse_number_from_string(index + 1,&index,10);\n  output_array[3] = (int)parsed_number;\n  parsed_number = parse_number_from_string(input_array[1],&index,10);\n  output_array[2] = (int)parsed_number;\n  parsed_number = parse_number_from_string(index + 1,&index,10);\n  output_array[1] = (int)parsed_number;\n  parsed_number = parse_number_from_string(index + 1,&index,10);\n  *output_array = (int)parsed_number;\n  weekday = calculate_weekday(output_array[5] + 0x76c,output_array[4] + 1,output_array[3]);\n  output_array[6] = weekday;\n  output_array[8] = -1;\n  return 0;\n}\n\n",
            "current_name": "parse_date_and_calculate_weekday_0000328c",
            "entrypoint": "0x0000328c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000328c": "parse_date_and_calculate_weekday_0000328c",
                "calculate_weekday_000031fc": "calculate_weekday",
                "iVar1": "weekday",
                "local_10": "index",
                "local_a": "parsed_number",
                "param_1": "input_array",
                "param_2": "output_array",
                "parse_number_00004f84": "parse_number_from_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003378": {
            "additional_data": {
                "FUNC_00004c84": {
                    "printf": 1
                },
                "FUN_00003378": {
                    "format_and_print_date_time": 1,
                    "print_date": 1,
                    "print_date_and_time": 1,
                    "print_date_time": 22,
                    "print_datetime": 1,
                    "print_formatted_date_time": 2,
                    "print_formatted_datetime": 1,
                    "print_timestamp": 1
                },
                "param_1": {
                    "date": 1,
                    "date_time": 12,
                    "date_time_array": 8,
                    "date_time_components": 1,
                    "date_time_data": 1,
                    "date_time_params": 3,
                    "datetime_array": 2,
                    "timestamp": 1
                }
            },
            "called": [
                "FUN_00004c84"
            ],
            "calling": [
                "FUN_000033c0",
                "FUN_00003444"
            ],
            "code": "\nundefined4 print_formatted_date_time_00003378(undefined4 *date_time)\n\n{\n  process_elf_data_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",date_time[5] + 0x76c,date_time[4] + 1,date_time[3],\n               date_time[2],date_time[1],*date_time);\n  return 0;\n}\n\n",
            "code_backup": "\nundefined4 FUN_00003378(undefined4 *param_1)\n\n{\n  FUNC_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",param_1[5] + 0x76c,param_1[4] + 1,param_1[3],\n               param_1[2],param_1[1],*param_1);\n  return 0;\n}\n\n",
            "current_name": "print_formatted_date_time_00003378",
            "entrypoint": "0x00003378",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003378": "print_formatted_date_time_00003378",
                "param_1": "date_time"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000033c0": {
            "additional_data": {
                "FUN_000033c0": {
                    "get_alarm_and_print_datetime": 1,
                    "get_alarm_date_time": 8,
                    "get_alarm_time_components": 1,
                    "get_and_print_date_time": 1,
                    "get_date_time_and_print": 8,
                    "get_date_time_and_print_or_process": 1,
                    "get_date_time_components": 2,
                    "get_formatted_date_time": 8,
                    "get_time_and_print": 1
                },
                "auStack_2c": {
                    "date_components": 1,
                    "date_time_components": 29,
                    "datetime_components": 1
                },
                "calculate_date_time_components_00002690": {
                    "calculate_date_time_components": 5
                },
                "iVar1": {
                    "error": 1,
                    "error_code": 7,
                    "result": 15
                },
                "print_formatted_date_time_00003378": {
                    "print_formatted_date_time": 2
                },
                "process_and_validate_data_00004db8": {
                    "process_and_validate_data": 2
                }
            },
            "called": [
                "FUN_00002690",
                "FUN_00004db8",
                "FUN_00003378"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nbool get_date_time_and_print_or_process_000033c0(void)\n\n{\n  int result;\n  undefined date_time_components [36];\n  \n  result = calculate_date_time_components(date_time_components);\n  if (result != 0) {\n    process_and_validate_data(\"rtc: error getting alarm\");\n  }\n  else {\n    print_formatted_date_time(date_time_components);\n  }\n  return result != 0;\n}\n\n",
            "current_name": "get_date_time_and_print_or_process_000033c0",
            "entrypoint": "0x000033c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000033c0": "get_date_time_and_print_or_process_000033c0",
                "auStack_2c": "date_time_components",
                "calculate_date_time_components_00002690": "calculate_date_time_components",
                "iVar1": "result",
                "print_formatted_date_time_00003378": "print_formatted_date_time",
                "process_and_validate_data_00004db8": "process_and_validate_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000033f4": {
            "additional_data": {
                "FUN_000033f4": {
                    "activate_alarm_and_check_status": 1,
                    "check_and_set_alarm": 2,
                    "initialize_alarm": 2,
                    "initialize_data_and_set_alarm": 1,
                    "parse_and_set_alarm": 1,
                    "parse_date_and_set_alarm": 1,
                    "process_alarm": 1,
                    "process_date_and_initialize_alarm": 1,
                    "process_date_and_set_alarm": 2,
                    "set_alarm": 4,
                    "set_alarm_and_init_data": 1,
                    "set_alarm_and_initialize": 2,
                    "set_alarm_and_initialize_data": 4,
                    "set_alarm_and_return_status": 1,
                    "set_alarm_based_on_date": 1,
                    "set_alarm_date": 1,
                    "set_date_and_check_alarm": 1,
                    "set_date_and_initialize_alarm": 1,
                    "set_date_and_initialize_data": 2,
                    "validate_and_set_alarm": 1
                },
                "auStack_2c": {
                    "date_and_weekday_data": 1,
                    "date_and_weekday_info": 1,
                    "date_buffer": 8,
                    "date_data": 1,
                    "input_buffer": 1,
                    "parsed_date": 14
                },
                "iVar1": {
                    "date_parse_result": 3,
                    "error_code": 1,
                    "parse_date_result": 1,
                    "parse_result": 19,
                    "result": 7
                },
                "param_1": {
                    "alarm_time": 2,
                    "date": 3,
                    "date_input": 1,
                    "date_param": 1,
                    "input": 1,
                    "input_data": 2,
                    "input_date": 19,
                    "input_param": 2
                },
                "uVar2": {
                    "is_error": 1,
                    "result": 2,
                    "return_code": 1,
                    "return_value": 16,
                    "status": 7,
                    "success": 1,
                    "success_flag": 3
                }
            },
            "called": [
                "FUN_0000328c",
                "FUN_00004db8",
                "FUN_00002654"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nundefined4 initialize_data_and_set_alarm_000033f4(undefined4 input_date)\n\n{\n  int parse_result;\n  undefined4 return_value;\n  undefined parsed_date [36];\n  \n  parse_result = parse_date_and_calculate_weekday_0000328c(input_date,parsed_date);\n  if (parse_result == 0) {\n    parse_result = set_date_and_initialize_data_00002654(parsed_date,0x31e1,0);\n    if (parse_result == -1) {\n      process_and_validate_data_00004db8(\"rtc: error setting alarm\");\n      return_value = 1;\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  else {\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "code_backup": "\nundefined4 FUN_000033f4(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = parse_date_and_calculate_weekday_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = set_date_and_initialize_data_00002654(auStack_2c,0x31e1,0);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting alarm\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n",
            "current_name": "initialize_data_and_set_alarm_000033f4",
            "entrypoint": "0x000033f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000033f4": "initialize_data_and_set_alarm_000033f4",
                "auStack_2c": "parsed_date",
                "iVar1": "parse_result",
                "param_1": "input_date",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003444": {
            "additional_data": {
                "FUN_00003444": {
                    "get_and_print_date_time": 12,
                    "get_and_process_date_time": 1,
                    "get_date_time_and_print": 5,
                    "get_date_time_components": 1,
                    "get_formatted_date_time": 5,
                    "get_time_and_print_formatted_date_time": 1,
                    "print_date_time_and_check_error": 1,
                    "print_date_time_or_err": 1,
                    "print_date_time_or_handle_error": 2,
                    "print_date_time_or_process_error": 1,
                    "print_date_time_or_report_error": 1
                },
                "auStack_2c": {
                    "date_and_time_components": 2,
                    "date_time_components": 28,
                    "date_time_data": 1
                },
                "calculate_date_time_components_00002624": {
                    "calculate_date_time_components": 4
                },
                "iVar1": {
                    "error_code": 8,
                    "error_status": 1,
                    "result": 16,
                    "result_code": 1
                },
                "print_formatted_date_time_00003378": {
                    "print_formatted_date_time": 3
                },
                "process_and_validate_data_00004db8": {
                    "process_and_validate_data": 3
                }
            },
            "called": [
                "FUN_00004db8",
                "FUN_00002624",
                "FUN_00003378"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nbool get_time_and_print_formatted_date_time_00003444(void)\n\n{\n  int result;\n  undefined date_time_components [36];\n  \n  result = calculate_date_time_components(date_time_components);\n  if (result != 0) {\n    process_and_validate_data(\"rtc: error getting time\");\n  }\n  else {\n    print_formatted_date_time(date_time_components);\n  }\n  return result != 0;\n}\n\n",
            "current_name": "get_time_and_print_formatted_date_time_00003444",
            "entrypoint": "0x00003444",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003444": "get_time_and_print_formatted_date_time_00003444",
                "auStack_2c": "date_time_components",
                "calculate_date_time_components_00002624": "calculate_date_time_components",
                "iVar1": "result",
                "print_formatted_date_time_00003378": "print_formatted_date_time",
                "process_and_validate_data_00004db8": "process_and_validate_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003478": {
            "additional_data": {
                "FUN_00003478": {
                    "calculate_weekday_and_update_time": 1,
                    "check_and_set_date_time": 1,
                    "check_and_update_weekday": 1,
                    "initialize_and_set_time": 1,
                    "initialize_and_update_date_time": 1,
                    "initialize_and_update_datetime": 2,
                    "initialize_and_update_time": 1,
                    "initialize_data_and_update_time": 1,
                    "initialize_time_and_update_weekday": 1,
                    "parse_and_initialize_date_time": 1,
                    "parse_and_update_date": 3,
                    "parse_and_update_time": 1,
                    "parse_date_and_update_weekday": 6,
                    "process_date_time": 2,
                    "set_date_time_and_update_weekday": 2,
                    "set_time_and_date": 1,
                    "set_time_and_return_status": 1,
                    "update_date_time_and_return_status": 1,
                    "validate_and_set_time": 1,
                    "validate_and_update_date": 1,
                    "validate_and_update_time": 1
                },
                "auStack_2c": {
                    "date_and_time": 1,
                    "date_and_time_array": 1,
                    "date_and_time_buffer": 2,
                    "date_data": 2,
                    "date_info": 1,
                    "date_time_buffer": 1,
                    "parsed_data": 2,
                    "parsed_date": 8,
                    "parsed_date_buffer": 1,
                    "parsed_date_time": 2
                },
                "iVar1": {
                    "error_code": 1,
                    "parse_result": 22,
                    "parse_status": 1,
                    "parsed_date_result": 1,
                    "parsed_result": 1,
                    "parsing_result": 2,
                    "result": 2,
                    "week_day_result": 1
                },
                "param_1": {
                    "date_input": 1,
                    "date_string": 1,
                    "date_time": 4,
                    "input_date": 17,
                    "input_date_time": 1,
                    "input_datetime": 1,
                    "input_time": 2,
                    "time_data": 1,
                    "time_to_validate": 1,
                    "user_input": 2
                },
                "uVar2": {
                    "error_code": 1,
                    "error_flag": 1,
                    "result": 1,
                    "return_code": 2,
                    "return_value": 19,
                    "status": 3,
                    "success": 1,
                    "success_flag": 1,
                    "validation_result": 1
                }
            },
            "called": [
                "FUN_0000328c",
                "FUN_00002600",
                "FUN_00004db8"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nundefined4 parse_date_and_update_weekday_00003478(undefined4 input_date)\n\n{\n  int parse_result;\n  undefined4 return_value;\n  undefined parsed_date [36];\n  \n  parse_result = parse_date_and_calculate_weekday_0000328c(input_date,parsed_date);\n  if (parse_result == 0) {\n    parse_result = initialize_data_and_update_date_time_00002600(parsed_date);\n    if (parse_result == -1) {\n      process_and_validate_data_00004db8(\"rtc: error setting time\");\n      return_value = 1;\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  else {\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "code_backup": "\nundefined4 FUN_00003478(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = parse_date_and_calculate_weekday_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_data_and_update_date_time_00002600(auStack_2c);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting time\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n",
            "current_name": "parse_date_and_update_weekday_00003478",
            "entrypoint": "0x00003478",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003478": "parse_date_and_update_weekday_00003478",
                "auStack_2c": "parsed_date",
                "iVar1": "parse_result",
                "param_1": "input_date",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000034c0": {
            "additional_data": {
                "FUNC_00004db8": {
                    "print_message": 30
                },
                "FUN_000034c0": {
                    "display_usage": 1,
                    "print_command_usage": 1,
                    "print_rtc_usage": 4,
                    "print_usage": 25
                }
            },
            "called": [
                "FUN_00004db8"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nundefined4 print_rtc_usage_000034c0(void)\n\n{\n  process_and_validate_data_00004db8(\"usage: rtc <command> [arguments]\");\n  process_and_validate_data_00004db8(\"commands:\");\n  process_and_validate_data_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  process_and_validate_data_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  process_and_validate_data_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  process_and_validate_data_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  process_and_validate_data_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  process_and_validate_data_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  process_and_validate_data_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "code_backup": "\nundefined4 FUN_000034c0(void)\n\n{\n  FUNC_00004db8(\"usage: rtc <command> [arguments]\");\n  FUNC_00004db8(\"commands:\");\n  FUNC_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUNC_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUNC_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUNC_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUNC_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUNC_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUNC_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "current_name": "print_rtc_usage_000034c0",
            "entrypoint": "0x000034c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000034c0": "print_rtc_usage_000034c0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003524": {
            "additional_data": {
                "FUN_00003524": {
                    "handle_rtc_command": 21,
                    "manage_rtc_command": 1,
                    "process_rtc_command": 8,
                    "process_rtc_commands": 1
                },
                "clear_interrupt_flag_000026e4": {
                    "clear_power_off_flag": 1,
                    "clear_poweroff_flag": 6
                },
                "clear_status_flags_000026c0": {
                    "clear_alarm_flag": 2,
                    "clear_alarm_flags": 1,
                    "clear_clearalarm_flag": 4
                },
                "compare_bytes_00004e66": {
                    "compare_command": 1,
                    "compare_string": 1,
                    "compare_strings": 5
                },
                "get_date_time_and_print_or_process_000033c0": {
                    "get_alarm": 2,
                    "get_alarm_time_and_process": 1,
                    "get_and_print_alarm": 1,
                    "get_and_print_or_process_alarm": 1,
                    "get_and_process_alarm": 2
                },
                "get_time_and_print_formatted_date_time_00003444": {
                    "get_and_print_formatted_datetime": 1,
                    "get_and_print_formatted_time": 1,
                    "get_and_print_time": 2,
                    "get_time": 2,
                    "get_time_and_print_datetime": 1
                },
                "iVar1": {
                    "byte_comparison": 1,
                    "compare_result": 3,
                    "comparison_result": 19,
                    "result": 6
                },
                "initialize_data_and_set_alarm_000033f4": {
                    "initialize_and_set_alarm": 3,
                    "initialize_data_and_set_alarm": 1,
                    "set_alarm": 3
                },
                "param_1": {
                    "argc": 9,
                    "command_count": 9,
                    "num_args": 7,
                    "num_arguments": 3,
                    "num_params": 3
                },
                "param_2": {
                    "arg_list": 2,
                    "args": 5,
                    "arguments": 2,
                    "argv": 9,
                    "command": 2,
                    "command_args": 5,
                    "command_arguments": 3,
                    "command_array": 1,
                    "command_buffer": 1,
                    "command_list": 1
                },
                "parse_date_and_update_weekday_00003478": {
                    "parse_and_update_date_weekday": 1,
                    "parse_and_update_weekday": 2,
                    "parse_date_and_update_weekday": 2,
                    "set_time": 2
                },
                "print_rtc_usage_000034c0": {
                    "print_rtc_command_usage": 1,
                    "print_rtc_usage": 6
                },
                "process_elf_data_00004c84": {
                    "handle_unknown_command": 1,
                    "process_unknown_command": 6
                },
                "set_flag_bit_000026d8": {
                    "set_power_on_flag": 1,
                    "set_poweron_flag": 6
                },
                "uVar2": {
                    "error_code": 4,
                    "error_flag": 2,
                    "error_status": 1,
                    "result": 6,
                    "ret_val": 2,
                    "return_value": 7,
                    "status": 5,
                    "success_flag": 2
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_000033c0",
                "FUN_000026c0",
                "FUN_00004e66",
                "FUN_00003444",
                "FUN_000033f4",
                "FUN_00003478",
                "FUN_000026e4",
                "FUN_000034c0",
                "FUN_000026d8"
            ],
            "calling": [],
            "code": "\nundefined4 handle_rtc_command_00003524(int argc,int argv)\n\n{\n  int comparison_result;\n  undefined4 return_value;\n  \n  if (argc < 2) {\n    print_rtc_usage();\n    return_value = 1;\n  }\n  else {\n    comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"poweron\",7);\n    if (comparison_result == 0) {\n      set_poweron_flag();\n    }\n    else {\n      comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"poweroff\",8);\n      if (comparison_result == 0) {\n        clear_poweroff_flag();\n      }\n      else {\n        comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"clearalarm\",8);\n        if (comparison_result == 0) {\n          clear_clearalarm_flag();\n        }\n        else {\n          comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"getalarm\",8);\n          if (comparison_result == 0) {\n            get_and_process_alarm();\n          }\n          else {\n            comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"setalarm\",8);\n            if ((comparison_result == 0) && (argc == 4)) {\n              set_alarm(argv + 8);\n            }\n            else {\n              comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"gettime\",7);\n              if (comparison_result == 0) {\n                get_and_print_time();\n              }\n              else {\n                comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"settime\",7);\n                if ((comparison_result != 0) || (argc != 4)) {\n                  process_unknown_command(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(argv + 4));\n                  print_rtc_usage();\n                  return 1;\n                }\n                parse_date_and_update_weekday(argv + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "handle_rtc_command_00003524",
            "entrypoint": "0x00003524",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003524": "handle_rtc_command_00003524",
                "clear_interrupt_flag_000026e4": "clear_poweroff_flag",
                "clear_status_flags_000026c0": "clear_clearalarm_flag",
                "compare_bytes_00004e66": "compare_strings",
                "get_date_time_and_print_or_process_000033c0": "get_and_process_alarm",
                "get_time_and_print_formatted_date_time_00003444": "get_and_print_time",
                "iVar1": "comparison_result",
                "initialize_data_and_set_alarm_000033f4": "set_alarm",
                "param_1": "argc",
                "param_2": "argv",
                "parse_date_and_update_weekday_00003478": "parse_date_and_update_weekday",
                "print_rtc_usage_000034c0": "print_rtc_usage",
                "process_elf_data_00004c84": "process_unknown_command",
                "set_flag_bit_000026d8": "set_poweron_flag",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003658": {
            "additional_data": {
                "0xf": {
                    "barrier_value": 1,
                    "sync_value": 1,
                    "synchronization_flag": 1
                },
                "DataSynchronizationBarrier": {
                    "barrier": 3,
                    "sync_barrier": 18,
                    "synchronize_data": 2,
                    "wait_for_data_sync": 1
                },
                "FUN_00003658": {
                    "continuous_loop": 3,
                    "endless_loop": 2,
                    "infinite_loop": 15,
                    "loop_forever": 1,
                    "run_infinite_loop": 7,
                    "run_loop": 1,
                    "wait_indefinitely": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00003688"
            ],
            "code": "\nvoid run_infinite_loop_00003658(void)\n\n{\n  sync_barrier(0xf);\n  sync_barrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "run_infinite_loop_00003658",
            "entrypoint": "0x00003658",
            "imported": false,
            "improved": true,
            "renaming": {
                "DataSynchronizationBarrier": "sync_barrier",
                "FUN_00003658": "run_infinite_loop_00003658"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003688": {
            "additional_data": {
                "FUN_00003688": {
                    "execute_infinite_loop": 1,
                    "infinite_loop": 2,
                    "initialize_infinite_loop": 1,
                    "run_infinite_loop": 24,
                    "run_infinitely": 1,
                    "run_loop": 1,
                    "start_infinite_loop": 1
                },
                "run_infinite_loop_00003658": {
                    "execute_infinite_loop": 2,
                    "execute_loop": 3,
                    "infinite_loop": 9,
                    "initialize_device": 1,
                    "initiate_loop": 1,
                    "original_infinite_loop": 1,
                    "run_infinite_loop": 7,
                    "start_infinite_loop": 6,
                    "start_loop": 1
                }
            },
            "called": [
                "FUN_00003658"
            ],
            "calling": [
                "FUN_00002e9c"
            ],
            "code": "\nvoid run_infinite_loop_00003688(void)\n\n{\n  infinite_loop();\n  return;\n}\n\n",
            "current_name": "run_infinite_loop_00003688",
            "entrypoint": "0x00003688",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003688": "run_infinite_loop_00003688",
                "run_infinite_loop_00003658": "infinite_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003694": {
            "additional_data": {
                "DAT_000077e8": {
                    "memory_address_string": 1
                },
                "FUN_00003694": {
                    "display_and_process_data_object": 1,
                    "display_data": 8,
                    "display_data_object": 7,
                    "display_data_objects": 15
                },
                "PROCESS_STRING_1": {
                    "process_string1": 1
                },
                "PROCESS_STRING_10": {
                    "process_string10": 1
                },
                "PROCESS_STRING_11": {
                    "process_string11": 1
                },
                "PROCESS_STRING_12": {
                    "process_string12": 1
                },
                "PROCESS_STRING_13": {
                    "process_string13": 1
                },
                "PROCESS_STRING_14": {
                    "process_string14": 1
                },
                "PROCESS_STRING_2": {
                    "process_string2": 1
                },
                "PROCESS_STRING_3": {
                    "process_string3": 1
                },
                "PROCESS_STRING_4": {
                    "process_string4": 1
                },
                "PROCESS_STRING_5": {
                    "process_string5": 1
                },
                "PROCESS_STRING_6": {
                    "process_string6": 1
                },
                "PROCESS_STRING_7": {
                    "process_string7": 1
                },
                "PROCESS_STRING_8": {
                    "process_string8": 1
                },
                "PROCESS_STRING_9": {
                    "process_string9": 1
                },
                "auStack_18": {
                    "buffer": 1,
                    "converted_string": 4,
                    "converted_value": 1,
                    "integer_string": 1,
                    "string_buffer": 15,
                    "string_stack": 1,
                    "string_value": 1,
                    "temp_array": 1,
                    "temp_buffer": 1,
                    "value_string": 1
                },
                "bVar4": {
                    "bit_flag": 1,
                    "has_bitmask": 1,
                    "is_bit_set": 18,
                    "is_flag_set": 1,
                    "is_non_zero": 1,
                    "is_set": 7,
                    "is_true": 1
                },
                "cVar2": {
                    "bit_flag": 5,
                    "bit_value": 2,
                    "check_value": 1,
                    "flag": 9,
                    "flag_char": 1,
                    "is_data_valid": 1,
                    "is_mapped": 1,
                    "is_valid": 3,
                    "is_value_valid": 1,
                    "map_value": 2,
                    "should_process": 1,
                    "valid_flag": 1,
                    "value": 1
                },
                "convert_integer_to_string_with_precision_00003e9e": {
                    "convert_int_to_string": 1
                },
                "get_memory_address_00003810": {
                    "get_memory_address": 1
                },
                "local_10": {
                    "buffer_length": 2,
                    "converted_string_length": 1,
                    "string_length": 28
                },
                "local_9": {
                    "byte_index": 1,
                    "current_data_index": 1,
                    "current_index": 4,
                    "data_object_index": 2,
                    "element_index": 1,
                    "i": 3,
                    "index": 17,
                    "obj_index": 1,
                    "object_index": 1
                },
                "local_a": {
                    "char_value": 3,
                    "character": 3,
                    "flag_value": 1,
                    "map_value": 2,
                    "mapped_value": 16,
                    "mapping_value": 3,
                    "param_value": 3
                },
                "map_param_to_value_00003918": {
                    "map_value_to_char": 1
                },
                "param_1": {
                    "data_address": 7,
                    "data_object": 10,
                    "data_object_address": 10,
                    "data_object_ptr": 2,
                    "data_ptr": 2
                },
                "param_2": {
                    "data_length": 6,
                    "data_object_count": 2,
                    "data_object_size": 7,
                    "data_size": 7,
                    "length": 1,
                    "num_bytes": 1,
                    "num_data_objects": 2,
                    "num_elements": 4,
                    "num_objects": 1
                },
                "uVar1": {
                    "address": 2,
                    "memory_address": 21
                },
                "uVar3": {
                    "bit_mask": 23,
                    "bit_value": 1,
                    "bitmask": 3,
                    "bitwise_mask": 1,
                    "bitwise_value": 1,
                    "flag": 1
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00003810",
                "FUN_00004db8",
                "FUN_00003918",
                "FUN_00003e9e"
            ],
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "code": "\nvoid display_data_objects_00003694(int data_object,byte data_size)\n\n{\n  undefined4 memory_address;\n  char flag;\n  uint bit_mask;\n  bool is_bit_set;\n  undefined string_buffer [8];\n  int string_length;\n  char mapped_value;\n  byte index;\n  \n  if ((data_object == 0) || (3 < data_size)) {\n    process_and_validate_data_00004db8(\"Unable to display data object\");\n  }\n  else {\n    process_elf_data_00004c84(\"Data:\");\n    for (index = 0; index < data_size; index = index + 1) {\n      if (*(byte *)(data_object + 6) < 0x14) {\n        bit_mask = 1 << (uint)*(byte *)(data_object + 6) & 0x8018f;\n        is_bit_set = bit_mask != 0;\n        if (is_bit_set) {\n          bit_mask = 1;\n        }\n        flag = (char)bit_mask;\n        if (!is_bit_set) {\n          flag = '\\0';\n        }\n        if (flag == '\\0') goto LAB_000036ee;\n        mapped_value = '\\0';\n      }\n      else {\nLAB_000036ee:\n        mapped_value = map_value_to_char((int)*(char *)(data_object + 7));\n      }\n      process_elf_data_00004c84(&DAT_000077bc);\n      if (data_size < 2) {\n        process_elf_data_00004c84(\"     \");\n      }\n      else {\n        process_elf_data_00004c84(\"[%u] \",index);\n      }\n      if (mapped_value == '\\0') {\n        if (*(char *)(data_object + 7) == '\\0') {\n          process_elf_data_00004c84(&DAT_000077d8,(int)*(short *)(data_object + (uint)index * 2));\n        }\n        else if ((*(char *)(data_object + 7) + 4 < 0 == SCARRY4((int)*(char *)(data_object + 7),4)) &&\n                (*(char *)(data_object + 7) < '\\0')) {\n          string_length = convert_int_to_string(string_buffer,(int)*(short *)(data_object + (uint)index * 2),\n                                  (int)*(char *)(data_object + 7));\n          string_buffer[string_length] = 0;\n          process_elf_data_00004c84(&DAT_000077dc,string_buffer);\n        }\n        else {\n          process_elf_data_00004c84(\"%iE%i\",(int)*(short *)(data_object + (uint)index * 2),\n                       (int)*(char *)(data_object + 7));\n        }\n      }\n      else {\n        process_elf_data_00004c84(\"%6d %c\",(int)*(short *)(data_object + (uint)index * 2),mapped_value);\n      }\n      memory_address = get_memory_address(*(undefined *)(data_object + 6));\n      process_elf_data_00004c84(&DAT_000077e8,memory_address);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "display_data_objects_00003694",
            "entrypoint": "0x00003694",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003694": "display_data_objects_00003694",
                "auStack_18": "string_buffer",
                "bVar4": "is_bit_set",
                "cVar2": "flag",
                "convert_integer_to_string_with_precision_00003e9e": "convert_int_to_string",
                "get_memory_address_00003810": "get_memory_address",
                "local_10": "string_length",
                "local_9": "index",
                "local_a": "mapped_value",
                "map_param_to_value_00003918": "map_value_to_char",
                "param_1": "data_object",
                "param_2": "data_size",
                "uVar1": "memory_address",
                "uVar3": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003810": {
            "additional_data": {
                "DAT_000077ec": {
                    "address_2": 1
                },
                "DAT_000077f0": {
                    "address_3": 1
                },
                "DAT_000077f4": {
                    "address_4": 1
                },
                "DAT_000077f8": {
                    "address_5": 1
                },
                "DAT_000077fc": {
                    "address_6": 1
                },
                "DAT_00007804": {
                    "address_8": 1
                },
                "DAT_00007808": {
                    "address_9": 1
                },
                "DAT_0000780c": {
                    "address_10": 1
                },
                "DAT_00007810": {
                    "address_11": 1
                },
                "DAT_00007814": {
                    "address_12": 1
                },
                "DAT_00007818": {
                    "address_13": 1
                },
                "DAT_0000781c": {
                    "address_14": 1
                },
                "DAT_00007820": {
                    "address_15": 1
                },
                "DAT_00007824": {
                    "address_16": 1
                },
                "DAT_00007828": {
                    "address_21": 1
                },
                "DAT_0000782c": {
                    "address_17": 1
                },
                "DAT_00007830": {
                    "address_19": 1
                },
                "DAT_00007834": {
                    "default_address": 1
                },
                "FUN_00003810": {
                    "get_address_by_param": 1,
                    "get_data_pointer": 3,
                    "get_memory_address": 23,
                    "get_memory_location": 4
                },
                "param_1": {
                    "data_type": 1,
                    "input": 7,
                    "input_number": 1,
                    "input_value": 15,
                    "param": 1,
                    "value": 6
                },
                "puVar1": {
                    "address": 4,
                    "address_ptr": 1,
                    "data_pointer": 2,
                    "memory_address": 8,
                    "memory_location": 3,
                    "memory_pointer": 1,
                    "output": 1,
                    "result": 8,
                    "result_address": 1,
                    "result_ptr": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00003694"
            ],
            "code": "\nundefined * get_memory_address_00003810(undefined input_value)\n\n{\n  undefined *memory_address;\n  \n  switch(input_value) {\n  case 2:\n    memory_address = &DAT_000077ec;\n    break;\n  case 3:\n    memory_address = &DAT_000077f0;\n    break;\n  case 4:\n    memory_address = &DAT_000077f4;\n    break;\n  case 5:\n    memory_address = &DAT_000077f8;\n    break;\n  case 6:\n    memory_address = &DAT_000077fc;\n    break;\n  case 7:\n    memory_address = (undefined *)0x7800;\n    break;\n  case 8:\n    memory_address = &DAT_00007804;\n    break;\n  case 9:\n    memory_address = &DAT_00007808;\n    break;\n  case 10:\n    memory_address = &DAT_0000780c;\n    break;\n  case 0xb:\n    memory_address = &DAT_00007810;\n    break;\n  case 0xc:\n    memory_address = &DAT_00007814;\n    break;\n  case 0xd:\n    memory_address = &DAT_00007818;\n    break;\n  case 0xe:\n    memory_address = &DAT_0000781c;\n    break;\n  case 0xf:\n    memory_address = &DAT_00007820;\n    break;\n  case 0x10:\n    memory_address = &DAT_00007824;\n    break;\n  case 0x11:\n    memory_address = &DAT_0000782c;\n    break;\n  default:\n    memory_address = &DAT_00007834;\n    break;\n  case 0x13:\n    memory_address = &DAT_00007830;\n    break;\n  case 0x15:\n    memory_address = &DAT_00007828;\n  }\n  return memory_address;\n}\n\n",
            "current_name": "get_memory_address_00003810",
            "entrypoint": "0x00003810",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "input_value",
                "puVar1": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003918": {
            "additional_data": {
                "FUN_00003918": {
                    "convert_param_to_value": 3,
                    "decode_parameter": 1,
                    "get_char_code": 3,
                    "get_char_from_param": 1,
                    "get_character": 1,
                    "get_character_for_code": 1,
                    "get_character_value": 1,
                    "get_converted_value": 1,
                    "get_mapped_value": 1,
                    "get_reversed_value": 1,
                    "get_translated_value": 1,
                    "get_value_from_param": 1,
                    "map_input_to_value": 1,
                    "map_param_to_value": 13,
                    "translate_param_to_value": 1
                },
                "param_1": {
                    "character": 4,
                    "character_code": 1,
                    "code": 1,
                    "input": 9,
                    "input_param": 6,
                    "input_value": 2,
                    "param": 5,
                    "parameter": 1,
                    "value": 1
                },
                "uVar1": {
                    "char_code": 3,
                    "character": 2,
                    "character_value": 1,
                    "converted_value": 3,
                    "decoded_value": 1,
                    "mapped_value": 5,
                    "output": 5,
                    "output_value": 4,
                    "result": 4,
                    "reversed_value": 1,
                    "translated_value": 1,
                    "value": 1
                },
                "undefined": {
                    "param": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00003694"
            ],
            "code": "\nparam4 map_param_to_value_00003918(param input)\n\n{\n  param4 mapped_value;\n  \n  switch(input) {\n  case 2:\n    mapped_value = 0x68;\n    break;\n  case 3:\n    mapped_value = 0x6b;\n    break;\n  case 6:\n    mapped_value = 0x4d;\n    break;\n  case 9:\n    mapped_value = 0x47;\n    break;\n  case 0xc:\n    mapped_value = 0x54;\n    break;\n  case 0xf:\n    mapped_value = 0x50;\n    break;\n  case 0xf1:\n    mapped_value = 0x66;\n    break;\n  default:\n    mapped_value = 0;\n    break;\n  case 0xf4:\n    mapped_value = 0x70;\n    break;\n  case 0xf7:\n    mapped_value = 0x6e;\n    break;\n  case 0xfa:\n    mapped_value = 0x75;\n    break;\n  case 0xfd:\n    mapped_value = 0x6d;\n  }\n  return mapped_value;\n}\n\n",
            "current_name": "map_param_to_value_00003918",
            "entrypoint": "0x00003918",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003918": "map_param_to_value_00003918",
                "param_1": "input",
                "uVar1": "mapped_value",
                "undefined": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000039e8": {
            "additional_data": {
                "ACT_ANY": {
                    "any_action": 1
                },
                "ACT_DIMMER": {
                    "dimmer_action": 1
                },
                "ACT_LED_RGB": {
                    "rgbled_action": 1
                },
                "ACT_MOTOR": {
                    "motor_action": 1
                },
                "ACT_SERVO": {
                    "servo_action": 1
                },
                "ACT_SWITCH": {
                    "switch_action": 1
                },
                "CLASS_ANY": {
                    "any_class": 1
                },
                "CLASS_UNDEF": {
                    "undefined": 1
                },
                "CLASS_UNKNOWN": {
                    "unknown_class": 1
                },
                "FUN_000039e8": {
                    "get_class_name": 7,
                    "get_class_string": 1,
                    "get_classification_string": 1,
                    "get_description": 1,
                    "get_device_category": 1,
                    "get_device_class": 1,
                    "get_device_class_name": 3,
                    "get_device_name": 2,
                    "get_device_type_name": 4,
                    "get_parameter_description": 1,
                    "get_sensor_class": 1,
                    "get_sensor_class_from_code": 1,
                    "get_sensor_class_name": 1,
                    "get_sensor_or_action_name": 1,
                    "map_character_to_class": 2,
                    "map_class_to_description": 1,
                    "map_param_to_name": 1,
                    "translate_class": 1
                },
                "SENSE_ACCEL": {
                    "accelerometer_sensor": 1
                },
                "SENSE_ANALOG": {
                    "analog_sensor": 1
                },
                "SENSE_ANY": {
                    "any_sensor": 1
                },
                "SENSE_BTN": {
                    "button_sensor": 1
                },
                "SENSE_CO2": {
                    "co2_sensor": 1
                },
                "SENSE_COLOR": {
                    "color_sensor": 1
                },
                "SENSE_DISTANCE": {
                    "distance_sensor": 1
                },
                "SENSE_GYRO": {
                    "gyroscope_sensor": 1
                },
                "SENSE_HUM": {
                    "humidity_sensor": 1
                },
                "SENSE_LIGHT": {
                    "light_sensor": 1
                },
                "SENSE_MAG": {
                    "magnetometer_sensor": 1
                },
                "SENSE_OBJTEMP": {
                    "object_temperature_sensor": 1
                },
                "SENSE_PRESS": {
                    "pressure_sensor": 1
                },
                "SENSE_PULSE_COUNT": {
                    "pulse_count_sensor": 1
                },
                "SENSE_TEMP": {
                    "temperature_sensor": 1
                },
                "SENSE_UV": {
                    "uv_sensor": 1
                },
                "param_1": {
                    "category": 1,
                    "character": 3,
                    "class_code": 5,
                    "class_id": 3,
                    "classification_code": 1,
                    "code": 1,
                    "device_code": 3,
                    "device_type": 6,
                    "input": 1,
                    "input_char": 1,
                    "input_character": 1,
                    "param": 1,
                    "parameter": 1,
                    "sensor_class": 1,
                    "sensor_or_action_code": 1,
                    "sensor_type": 1
                },
                "pcVar1": {
                    "category_name": 1,
                    "class_description": 1,
                    "class_label": 1,
                    "class_name": 11,
                    "class_string": 2,
                    "classification_string": 1,
                    "device_class": 1,
                    "device_name": 2,
                    "device_type_name": 4,
                    "name": 1,
                    "output": 1,
                    "parameter_description": 1,
                    "sensor_class": 2,
                    "sensor_class_name": 1,
                    "sensor_or_action_name": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002f74",
                "FUN_00002ecc"
            ],
            "code": "\nchar * get_device_class_name_000039e8(char device_type)\n\n{\n  char *class_name;\n  \n  switch(device_type) {\n  case '\\0':\n    class_name = \"undefined\";\n    break;\n  case '@':\n    class_name = \"any_action\";\n    break;\n  case 'B':\n    class_name = \"rgbled_action\";\n    break;\n  case 'C':\n    class_name = \"servo_action\";\n    break;\n  case 'D':\n    class_name = \"motor_action\";\n    break;\n  case 'E':\n    class_name = \"switch_action\";\n    break;\n  case 'F':\n    class_name = \"dimmer_action\";\n    break;\n  case -0x80:\n    class_name = \"any_sensor\";\n    break;\n  case -0x7f:\n    class_name = \"button_sensor\";\n    break;\n  case -0x7e:\n    class_name = \"temperature_sensor\";\n    break;\n  case -0x7d:\n    class_name = \"humidity_sensor\";\n    break;\n  case -0x7c:\n    class_name = \"light_sensor\";\n    break;\n  case -0x7b:\n    class_name = \"accelerometer_sensor\";\n    break;\n  case -0x7a:\n    class_name = \"magnetometer_sensor\";\n    break;\n  case -0x79:\n    class_name = \"gyroscope_sensor\";\n    break;\n  case -0x78:\n    class_name = \"color_sensor\";\n    break;\n  case -0x77:\n    class_name = \"pressure_sensor\";\n    break;\n  case -0x76:\n    class_name = \"analog_sensor\";\n    break;\n  case -0x75:\n    class_name = \"uv_sensor\";\n    break;\n  case -0x74:\n    class_name = \"object_temperature_sensor\";\n    break;\n  case -0x73:\n    class_name = \"pulse_count_sensor\";\n    break;\n  case -0x72:\n    class_name = \"distance_sensor\";\n    break;\n  case -0x71:\n    class_name = \"co2_sensor\";\n    break;\n  default:\n    if (device_type == -1) {\n      return \"any_class\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    class_name = \"unknown_class\";\n  }\n  return class_name;\n}\n\n",
            "current_name": "get_device_class_name_000039e8",
            "entrypoint": "0x000039e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "ACT_ANY": "any_action",
                "ACT_DIMMER": "dimmer_action",
                "ACT_LED_RGB": "rgbled_action",
                "ACT_MOTOR": "motor_action",
                "ACT_SERVO": "servo_action",
                "ACT_SWITCH": "switch_action",
                "CLASS_ANY": "any_class",
                "CLASS_UNDEF": "undefined",
                "CLASS_UNKNOWN": "unknown_class",
                "FUN_000039e8": "get_device_class_name_000039e8",
                "SENSE_ACCEL": "accelerometer_sensor",
                "SENSE_ANALOG": "analog_sensor",
                "SENSE_ANY": "any_sensor",
                "SENSE_BTN": "button_sensor",
                "SENSE_CO2": "co2_sensor",
                "SENSE_COLOR": "color_sensor",
                "SENSE_DISTANCE": "distance_sensor",
                "SENSE_GYRO": "gyroscope_sensor",
                "SENSE_HUM": "humidity_sensor",
                "SENSE_LIGHT": "light_sensor",
                "SENSE_MAG": "magnetometer_sensor",
                "SENSE_OBJTEMP": "object_temperature_sensor",
                "SENSE_PRESS": "pressure_sensor",
                "SENSE_PULSE_COUNT": "pulse_count_sensor",
                "SENSE_TEMP": "temperature_sensor",
                "SENSE_UV": "uv_sensor",
                "param_1": "device_type",
                "pcVar1": "class_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003d24": {
            "additional_data": {
                "DAT_1fff0db0": {
                    "head": 1
                },
                "FUN_00003d24": {
                    "find_element": 9,
                    "find_element_by_index": 5,
                    "find_element_in_list": 2,
                    "find_in_list": 1,
                    "find_item_by_index": 1,
                    "find_nth_element": 10,
                    "find_nth_item": 2,
                    "find_target": 1
                },
                "local_10": {
                    "count": 16,
                    "counter": 10,
                    "current_index": 1,
                    "element_count": 2,
                    "index": 1,
                    "item_count": 1
                },
                "local_c": {
                    "current": 3,
                    "current_element": 22,
                    "current_item": 3,
                    "current_node": 3
                },
                "param_1": {
                    "element_count": 3,
                    "index": 7,
                    "n": 10,
                    "num_elements": 7,
                    "target": 2,
                    "target_index": 1,
                    "total_elements": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "code": "\nundefined4 * find_nth_element_00003d24(int n)\n\n{\n  int count;\n  undefined4 *current_element;\n  \n  count = 0;\n  for (current_element = DAT_1fff0db0; (count < n && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    count = count + 1;\n  }\n  return current_element;\n}\n\n",
            "current_name": "find_nth_element_00003d24",
            "entrypoint": "0x00003d24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "local_10": "count",
                "local_c": "current_element",
                "param_1": "n"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003d64": {
            "additional_data": {
                "FUN_00003d64": {
                    "execute_callback": 2,
                    "execute_code": 2,
                    "execute_function": 20,
                    "execute_function_or_error_check": 1,
                    "execute_function_or_return_error_code": 1,
                    "execute_subroutine": 1,
                    "perform_action": 1,
                    "perform_action_on_parameter": 1,
                    "process_function": 1,
                    "reverse": 1
                },
                "param_1": {
                    "action_pointer": 1,
                    "address": 1,
                    "callback": 1,
                    "callback_function": 1,
                    "function_pointer": 17,
                    "function_ptr": 5,
                    "input": 1,
                    "input_parameter": 1,
                    "input_value": 1,
                    "pointer": 1,
                    "subroutine_address": 1
                },
                "param_2": {
                    "additional_parameter": 1,
                    "arg": 2,
                    "argument": 7,
                    "input_data": 1,
                    "input_param": 3,
                    "input_parameter": 2,
                    "input_value": 1,
                    "param": 9,
                    "param_two": 1,
                    "param_value": 1,
                    "subroutine_argument": 1,
                    "value": 2
                },
                "uVar1": {
                    "result": 13,
                    "return_value": 17
                }
            },
            "called": [],
            "calling": [
                "FUN_00002ecc"
            ],
            "code": "\nundefined4 execute_function_or_error_check_00003d64(int function_pointer,undefined4 param)\n\n{\n  undefined4 return_value;\n  \n  if (function_pointer == 0) {\n    return_value = 0xffffffed;\n  }\n  else {\n    return_value = (***(code ***)(function_pointer + 0xc))(*(undefined4 *)(function_pointer + 4),param);\n  }\n  return return_value;\n}\n\n",
            "current_name": "execute_function_or_error_check_00003d64",
            "entrypoint": "0x00003d64",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003d64": "execute_function_or_error_check_00003d64",
                "param_1": "function_pointer",
                "param_2": "param",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003d94": {
            "additional_data": {
                "FUN_00003d94": {
                    "execute_function": 27,
                    "execute_function_or_return_error": 2,
                    "perform_operation": 1
                },
                "param_1": {
                    "data": 1,
                    "function_pointer": 13,
                    "function_ptr": 8,
                    "handle": 1,
                    "input": 4,
                    "input_value": 4
                },
                "param_2": {
                    "additional_data": 1,
                    "additional_input": 1,
                    "additional_param": 2,
                    "arg": 3,
                    "argument": 6,
                    "data": 2,
                    "input_argument": 1,
                    "input_param": 3,
                    "input_parameter": 2,
                    "input_value": 2,
                    "param": 6,
                    "param_value": 2
                },
                "uVar1": {
                    "result": 10,
                    "return_value": 21
                }
            },
            "called": [],
            "calling": [
                "FUN_0000305c"
            ],
            "code": "\nundefined4 execute_function_or_return_error_00003d94(int function_pointer,undefined4 argument)\n\n{\n  undefined4 return_value;\n  \n  if (function_pointer == 0) {\n    return_value = 0xffffffed;\n  }\n  else {\n    return_value = (**(code **)(*(int *)(function_pointer + 0xc) + 4))(*(undefined4 *)(function_pointer + 4),argument);\n  }\n  return return_value;\n}\n\n",
            "current_name": "execute_function_or_return_error_00003d94",
            "entrypoint": "0x00003d94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003d94": "execute_function_or_return_error_00003d94",
                "param_1": "function_pointer",
                "param_2": "argument",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "additional_data": {
                "FUN_00003dc4": {
                    "calculate_digit_count": 1,
                    "calculate_digits": 1,
                    "calculate_num_digits": 1,
                    "calculation_function": 1,
                    "convert_num_to_str": 1,
                    "convert_number_to_string": 1,
                    "convert_to_digit_count": 1,
                    "count_digits": 18,
                    "count_digits_and_convert_to_string": 1,
                    "count_digits_and_write": 1,
                    "get_num_digits": 1,
                    "get_num_of_digits": 1,
                    "get_number_of_digits": 2
                },
                "local_10": {
                    "base": 10,
                    "count": 1,
                    "counter": 2,
                    "current_base": 1,
                    "current_multiplier": 1,
                    "divisor": 1,
                    "iter": 1,
                    "multiplier": 5,
                    "power": 2,
                    "power_of10": 1,
                    "power_of_10": 1,
                    "power_of_ten": 5
                },
                "local_14": {
                    "buffer_ptr": 1,
                    "current_char": 1,
                    "current_digit": 5,
                    "current_position": 3,
                    "current_ptr": 1,
                    "destination": 1,
                    "digit_pointer": 1,
                    "digit_ptr": 1,
                    "digits_array": 1,
                    "num_ptr": 1,
                    "output": 1,
                    "output_buffer": 1,
                    "ptr": 1,
                    "result": 2,
                    "result_ptr": 1,
                    "result_string": 3,
                    "str_ptr": 3,
                    "string_pointer": 1,
                    "string_ptr": 1,
                    "write_pointer": 1
                },
                "local_20": {
                    "current_number": 1,
                    "input_value_copy": 1,
                    "remainder": 17,
                    "remaining": 1,
                    "remaining_number": 5,
                    "temp": 1,
                    "temp_number": 5
                },
                "local_c": {
                    "digit_count": 22,
                    "num_digits": 7,
                    "num_of_digits": 1,
                    "number_of_digits": 1
                },
                "param_1": {
                    "base_address": 6,
                    "buffer": 1,
                    "buffer_pointer": 1,
                    "destination": 1,
                    "initial_offset": 2,
                    "input_buffer": 1,
                    "input_offset": 4,
                    "input_str": 1,
                    "num_offset": 1,
                    "number": 1,
                    "offset": 2,
                    "start_position": 3,
                    "starting_address": 1,
                    "starting_index": 1,
                    "starting_position": 1,
                    "str": 1,
                    "str_buffer": 1,
                    "string_buffer": 1,
                    "target_address": 1
                },
                "param_2": {
                    "input_number": 1,
                    "input_value": 2,
                    "limit": 1,
                    "number": 27
                }
            },
            "called": [],
            "calling": [
                "FUN_00003e58"
            ],
            "code": "\nint count_digits_and_convert_to_string_00003dc4(int base_address,uint number)\n\n{\n  uint remainder;\n  char *current_digit;\n  uint base;\n  int digit_count;\n  \n  digit_count = 1;\n  if (number < 1000000000) {\n    for (base = 10; base <= number; base = base * 10) {\n      digit_count = digit_count + 1;\n    }\n  }\n  else {\n    digit_count = 10;\n  }\n  if (base_address != 0) {\n    current_digit = (char *)(digit_count + base_address);\n    remainder = number;\n    do {\n      current_digit = current_digit + -1;\n      *current_digit = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digit_count;\n}\n\n",
            "current_name": "count_digits_and_convert_to_string_00003dc4",
            "entrypoint": "0x00003dc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003dc4": "count_digits_and_convert_to_string_00003dc4",
                "local_10": "base",
                "local_14": "current_digit",
                "local_20": "remainder",
                "local_c": "digit_count",
                "param_1": "base_address",
                "param_2": "number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003e58": {
            "additional_data": {
                "FUN_00003e58": {
                    "convert_and_count_digits": 5,
                    "convert_int_to_digit_count": 1,
                    "convert_int_to_positive_string": 1,
                    "convert_int_to_string": 1,
                    "convert_int_to_string_with_sign": 1,
                    "convert_integer_to_absolute_string": 1,
                    "convert_integer_to_ascii": 1,
                    "convert_integer_to_negative_string": 1,
                    "convert_integer_to_signed_string": 1,
                    "convert_integer_to_string": 10,
                    "convert_negative_number_to_string": 1,
                    "convert_negative_to_string": 1,
                    "convert_number_to_string": 2,
                    "convert_to_absolute_value_and_count_digits": 1,
                    "convert_to_int_and_count_digits": 1,
                    "count_and_convert_neg_to_string": 1,
                    "count_digits_and_convert_to_string": 1
                },
                "count_digits_and_convert_to_string_00003dc4": {
                    "convert_absolute_to_string": 1,
                    "convert_to_string_and_count_digits": 1,
                    "count_and_convert_to_string": 2,
                    "count_digits_and_convert_to_string": 1
                },
                "iVar1": {
                    "digit_count": 8,
                    "num_digits": 1,
                    "num_of_digits": 1,
                    "result": 2,
                    "string_length": 1
                },
                "local_14": {
                    "buffer_start": 1,
                    "current_pointer": 1,
                    "modified_array": 1,
                    "modified_input_array": 1,
                    "modified_string": 2,
                    "next_char_ptr": 1,
                    "output_ptr": 1,
                    "output_string": 2,
                    "processed_string": 1,
                    "result_array": 1,
                    "result_pointer": 1,
                    "start_pointer": 1,
                    "start_position": 1,
                    "str_ptr": 1,
                    "string_pointer": 4,
                    "string_ptr": 5,
                    "string_start": 2,
                    "temp_array": 1,
                    "updated_str": 1,
                    "updated_string": 2
                },
                "local_18": {
                    "abs_input_integer": 1,
                    "abs_input_number": 1,
                    "abs_num": 1,
                    "abs_number": 1,
                    "abs_value": 2,
                    "absolute_number": 8,
                    "absolute_value": 13,
                    "converted_number": 3,
                    "updated_num": 1
                },
                "param_1": {
                    "buffer": 1,
                    "input_array": 6,
                    "input_ptr": 1,
                    "input_str": 1,
                    "input_string": 16,
                    "integer_pointer": 1,
                    "number_ptr": 1,
                    "result": 1,
                    "str": 1,
                    "string_array": 1,
                    "string_buffer": 1
                },
                "param_2": {
                    "input_integer": 3,
                    "input_num": 1,
                    "input_number": 16,
                    "input_value": 1,
                    "integer": 1,
                    "num": 1,
                    "number": 8
                }
            },
            "called": [
                "FUN_00003dc4"
            ],
            "calling": [
                "FUN_00003ec4"
            ],
            "code": "\nint convert_integer_to_absolute_string_00003e58(undefined *input_string,int input_number)\n\n{\n  int digit_count;\n  int absolute_value;\n  undefined *string_ptr;\n  \n  absolute_value = input_number;\n  string_ptr = input_string;\n  if (-(input_number >> 0x1f) != 0) {\n    if (input_string != (undefined *)0x0) {\n      string_ptr = input_string + 1;\n      *input_string = 0x2d;\n    }\n    absolute_value = -input_number;\n  }\n  digit_count = count_and_convert_to_string(string_ptr,absolute_value);\n  return -(input_number >> 0x1f) + digit_count;\n}\n\n",
            "current_name": "convert_integer_to_absolute_string_00003e58",
            "entrypoint": "0x00003e58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003e58": "convert_integer_to_absolute_string_00003e58",
                "count_digits_and_convert_to_string_00003dc4": "count_and_convert_to_string",
                "iVar1": "digit_count",
                "local_14": "string_ptr",
                "local_18": "absolute_value",
                "param_1": "input_string",
                "param_2": "input_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "additional_data": {
                "FUN_00003e9e": {
                    "convert_and_return_string": 1,
                    "convert_integer_to_string": 5,
                    "convert_integer_to_string_with_precision": 24,
                    "convert_param_to_precision_string": 1
                },
                "param_1": {
                    "input": 4,
                    "input_integer": 1,
                    "input_number": 3,
                    "input_param": 1,
                    "input_value": 14,
                    "integer": 5,
                    "integer_value": 1,
                    "value": 2
                },
                "param_2": {
                    "decimal": 1,
                    "decimal_places": 1,
                    "precision": 26,
                    "precision_value": 1,
                    "short_param": 1,
                    "short_value": 1
                },
                "param_3": {
                    "additional_param": 1,
                    "context": 1,
                    "conversion": 1,
                    "conversion_flag": 1,
                    "conversion_format": 2,
                    "conversion_options": 1,
                    "conversion_param": 1,
                    "conversion_settings": 1,
                    "conversion_type": 2,
                    "convert_bits": 1,
                    "extra_data": 1,
                    "format": 5,
                    "format_options": 2,
                    "format_specifier": 2,
                    "formatting_options": 1,
                    "other_parameter": 1,
                    "output_size": 1,
                    "param_3": 2,
                    "parameter": 1,
                    "precision": 2
                },
                "uVar1": {
                    "converted_string": 14,
                    "result": 4,
                    "string_result": 1
                }
            },
            "called": [
                "FUN_00003ec4"
            ],
            "calling": [
                "FUN_00003694"
            ],
            "code": "\nundefined4 convert_integer_to_string_with_precision_00003e9e(undefined4 input_value,short precision,undefined4 format)\n\n{\n  undefined4 converted_string;\n  \n  converted_string = convert_integer_to_string_with_precision_00003e9e_00003ec4(input_value,(int)precision,format);\n  return converted_string;\n}\n\n",
            "current_name": "convert_integer_to_string_with_precision_00003e9e",
            "entrypoint": "0x00003e9e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003e9e": "convert_integer_to_string_with_precision_00003e9e",
                "param_1": "input_value",
                "param_2": "precision",
                "param_3": "format",
                "uVar1": "converted_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "additional_data": {
                "DAT_00007978": {
                    "base_array": 1,
                    "divisor_table": 1
                },
                "FUN_00003ec4": {
                    "convert_and_format_integer": 1,
                    "convert_and_format_number": 4,
                    "convert_integer_to_decimal_string": 1,
                    "convert_integer_to_string": 12,
                    "convert_integer_to_string_with_base": 2,
                    "convert_integer_to_string_with_formatting": 1,
                    "convert_integer_to_string_with_precision": 2,
                    "convert_number_to_formatted_string": 1,
                    "convert_number_to_string": 1,
                    "convert_to_string_with_precision": 1,
                    "format_integer": 1,
                    "format_integer_to_string_with_precision": 1,
                    "format_number": 2,
                    "format_number_as_string": 1
                },
                "convert_integer_to_absolute_string_00003e58": {
                    "convert_integer_to_absolute_string": 1,
                    "convert_to_absolute_string": 1
                },
                "copy_reverse_array_and_fill_00003ff4": {
                    "copy_reverse_array_and_fill": 1
                },
                "fill_array_with_value_00004622": {
                    "fill_array_with_value": 1
                },
                "handle_kernel_panic_00000f04": {
                    "handle_kernel_panic": 1,
                    "handle_panic": 1
                },
                "iVar1": {
                    "absolute_integer_length": 1,
                    "absolute_length": 1,
                    "absolute_str_len": 1,
                    "absolute_str_length": 1,
                    "absolute_string_length": 3,
                    "conversion_length": 1,
                    "conversion_result": 3,
                    "converted_len": 1,
                    "digits_written": 1,
                    "integer_conversion_result": 1,
                    "integer_length": 3,
                    "num_digits": 1,
                    "result": 1,
                    "result_length": 1,
                    "string_length": 1,
                    "substring_length": 1,
                    "temp": 2
                },
                "iVar_1": {
                    "result": 1
                },
                "local_10": {
                    "decimal_part": 2,
                    "remainder": 29
                },
                "local_c": {
                    "characters_written": 1,
                    "formatted_size": 1,
                    "length": 2,
                    "new_length": 1,
                    "output_length": 11,
                    "output_str_length": 1,
                    "output_string_length": 1,
                    "result": 1,
                    "string_length": 3,
                    "total_characters": 1,
                    "total_digits": 1,
                    "total_len": 2,
                    "total_length": 5
                },
                "param_1": {
                    "decimal_string": 1,
                    "destination": 1,
                    "output_buffer": 10,
                    "output_str": 1,
                    "output_string": 14,
                    "result_string": 1,
                    "string": 1,
                    "string_buffer": 1,
                    "string_ptr": 1
                },
                "param_2": {
                    "input_integer": 6,
                    "input_num": 1,
                    "input_number": 10,
                    "integer": 1,
                    "integer_value": 1,
                    "number": 10,
                    "value": 2
                },
                "param_3": {
                    "base": 9,
                    "decimal_places": 4,
                    "format": 1,
                    "format_size": 1,
                    "format_specifier": 1,
                    "num_decimal_places": 1,
                    "num_digits": 5,
                    "output_format": 1,
                    "precision": 7,
                    "radix": 1
                },
                "uVar2": {
                    "absolute_string_length_part_2": 1,
                    "conversion_result": 1,
                    "conversion_result_2": 1,
                    "decimal_conversion_result": 1,
                    "decimal_len": 1,
                    "decimal_length": 3,
                    "decimal_result": 1,
                    "decimal_str_length": 1,
                    "decimal_string_length": 1,
                    "decimals_len": 1,
                    "digits_written": 1,
                    "fractional_string_length": 1,
                    "integer_length": 1,
                    "integer_length_decimal": 1,
                    "length": 1,
                    "local_variable_1": 1,
                    "sublength": 1,
                    "substring_length_2": 1,
                    "temp_conversion_length": 1,
                    "temp_length": 1,
                    "temp_result": 1,
                    "temp_value": 1,
                    "written": 1
                },
                "uVar3": {
                    "dividend": 1,
                    "divisor": 1,
                    "integer_part": 3,
                    "quotient": 20
                },
                "uVar_2": {
                    "string_length": 1
                },
                "uVar_3": {
                    "dividend": 1
                }
            },
            "called": [
                "FUN_00004622",
                "FUN_00003e58",
                "FUN_00000f04",
                "FUN_00003ff4"
            ],
            "calling": [
                "FUN_00003e9e"
            ],
            "code": "\nint convert_integer_to_string_with_precision_00003ec4(undefined *output_string,uint input_number,int base)\n\n{\n  int absolute_string_length;\n  undefined4 decimal_length;\n  uint quotient;\n  int remainder;\n  int output_length;\n  \n  if (base + 7 < 0 != SCARRY4(base,7)) {\n    handle_panic(3,\"FAILED ASSERTION.\");\n  }\n  output_length = 0;\n  if (base == 0) {\n    output_length = convert_integer_to_absolute_string(output_string,input_number);\n  }\n  else if (base < 1) {\n    quotient = input_number / *(uint *)(&DAT_00007978 + base * -4);\n    remainder = input_number - *(uint *)(&DAT_00007978 + base * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)input_number < 0)) {\n      if (output_string != (undefined *)0x0) {\n        *output_string = 0x2d;\n      }\n      output_length = 1;\n    }\n    if (output_string == (undefined *)0x0) {\n      absolute_string_length = convert_integer_to_absolute_string(0,quotient);\n      output_length = absolute_string_length + 1 + output_length;\n    }\n    else {\n      absolute_string_length = convert_integer_to_absolute_string(output_string + output_length,quotient);\n      absolute_string_length = output_length + absolute_string_length;\n      output_length = absolute_string_length + 1;\n      output_string[absolute_string_length] = 0x2e;\n      decimal_length = convert_integer_to_absolute_string(output_string + output_length,remainder);\n      copy_reverse_array_and_fill(output_string + output_length,decimal_length,-base,0x30);\n    }\n    output_length = -base + output_length;\n  }\n  else {\n    output_length = convert_integer_to_absolute_string(output_string,input_number);\n    if (output_string != (undefined *)0x0) {\n      fill_array_with_value(output_string + output_length,0x30,base);\n    }\n    output_length = base + output_length;\n  }\n  return output_length;\n}\n\n",
            "current_name": "convert_integer_to_string_with_precision_00003ec4",
            "entrypoint": "0x00003ec4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003ec4": "convert_integer_to_string_with_precision_00003ec4",
                "convert_integer_to_absolute_string_00003e58": "convert_integer_to_absolute_string",
                "copy_reverse_array_and_fill_00003ff4": "copy_reverse_array_and_fill",
                "fill_array_with_value_00004622": "fill_array_with_value",
                "handle_kernel_panic_00000f04": "handle_panic",
                "iVar1": "absolute_string_length",
                "local_10": "remainder",
                "local_c": "output_length",
                "param_1": "output_string",
                "param_2": "input_number",
                "param_3": "base",
                "uVar2": "decimal_length",
                "uVar3": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "additional_data": {
                "FUN_00003ff4": {
                    "copy_and_fill_array": 25,
                    "copy_and_reverse_array": 2,
                    "copy_and_reverse_if_valid": 1,
                    "copy_and_reverse_sub_array": 1,
                    "copy_reverse_array_and_fill": 1,
                    "reverse_and_fill_array": 1
                },
                "param_1": {
                    "array_length": 4,
                    "array_offset": 2,
                    "destination_index": 1,
                    "destination_length": 1,
                    "length": 5,
                    "offset": 3,
                    "size": 4,
                    "source_length": 1,
                    "start": 1,
                    "start_index": 7,
                    "start_offset": 1,
                    "start_position": 1
                },
                "param_2": {
                    "source_array": 2,
                    "source_array_size": 2,
                    "source_index": 2,
                    "source_length": 2,
                    "source_offset": 1,
                    "source_size": 2,
                    "source_start_index": 2,
                    "src": 1,
                    "src_array_size": 1,
                    "src_index": 1,
                    "src_offset": 1,
                    "src_size": 1,
                    "src_start_index": 1,
                    "start": 2,
                    "start_idx": 5,
                    "start_index": 4,
                    "sub_array_start_index": 1
                },
                "param_3": {
                    "array_length": 1,
                    "dest": 1,
                    "dest_array_size": 1,
                    "dest_length": 1,
                    "dest_offset": 2,
                    "dest_size": 1,
                    "destination_array": 2,
                    "destination_index": 2,
                    "dst_index": 1,
                    "end": 2,
                    "end_idx": 5,
                    "end_index": 4,
                    "source_end_index": 2,
                    "src_end_index": 1,
                    "sub_array_end_index": 1,
                    "target_array_size": 2,
                    "target_size": 2
                },
                "param_4": {
                    "default_value": 1,
                    "fill_value": 18,
                    "value": 11,
                    "value_to_fill": 1
                },
                "uVar1": {
                    "final_offset": 1,
                    "new_dest_offset": 1,
                    "new_end": 1,
                    "new_end_idx": 2,
                    "new_end_index": 2,
                    "new_sub_array_end_index": 1,
                    "result": 4,
                    "updated_dest": 1,
                    "updated_end_idx": 1
                }
            },
            "called": [
                "FUN_00004622",
                "FUN_000045ee"
            ],
            "calling": [
                "FUN_00003ec4"
            ],
            "code": "\nuint copy_reverse_array_and_fill_00003ff4(int start_index,uint start_idx,uint end_idx,undefined fill_value)\n\n{\n  uint result;\n  \n  result = start_idx;\n  if ((start_idx < end_idx) && (result = end_idx, start_index != 0)) {\n    copy_and_reverse_array_000045ee((end_idx - start_idx) + start_index,start_index,start_idx);\n    fill_array_with_value_00004622(start_index,fill_value,end_idx - start_idx);\n  }\n  return result;\n}\n\n",
            "current_name": "copy_reverse_array_and_fill_00003ff4",
            "entrypoint": "0x00003ff4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003ff4": "copy_reverse_array_and_fill_00003ff4",
                "param_1": "start_index",
                "param_2": "start_idx",
                "param_3": "end_idx",
                "param_4": "fill_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004042": {
            "additional_data": {
                "0": {
                    "lower_bound": 1,
                    "min_range": 1,
                    "min_value": 1,
                    "minimum_range": 1,
                    "start_index": 1,
                    "start_range": 2
                },
                "10": {
                    "end_index": 1,
                    "end_range": 2,
                    "max_range": 1,
                    "max_value": 1,
                    "maximum_range": 1,
                    "upper_bound": 1
                },
                "FUN_00004042": {
                    "parse_and_display_numbers": 1,
                    "parse_and_extract_number": 2,
                    "parse_and_extract_numbers": 2,
                    "parse_and_handle_number": 1,
                    "parse_and_parse_number": 1,
                    "parse_and_parse_numbers": 1,
                    "parse_and_print_number": 3,
                    "parse_and_print_numbers": 1,
                    "parse_and_process_number": 3,
                    "parse_and_process_numbers": 1,
                    "parse_and_return_number": 2,
                    "parse_and_store": 1,
                    "parse_and_store_number": 2,
                    "parse_and_validate_input": 1,
                    "parse_and_validate_number": 6,
                    "parse_number": 3
                },
                "new_variable_name_1": {
                    "new_variable_name_1": 1,
                    "parsed_number": 1
                },
                "new_variable_name_2": {
                    "new_variable_name_2": 1
                },
                "param_1": {
                    "data": 2,
                    "input": 8,
                    "input_data": 1,
                    "input_number": 12,
                    "input_string": 5,
                    "number": 2,
                    "number_to_parse_and_validate": 1
                },
                "parse_number_00004f84": {
                    "extract_number_from_data": 1,
                    "parse_number": 13,
                    "parse_number_helper": 3,
                    "parse_number_range": 3,
                    "parse_number_with_range": 1
                }
            },
            "called": [
                "FUN_00004f84"
            ],
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "code": "\nvoid parse_and_validate_number_00004042(undefined4 input_number)\n\n{\n  parse_number(input_number,0,10);\n  return;\n}\n\n",
            "current_name": "parse_and_validate_number_00004042",
            "entrypoint": "0x00004042",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004042": "parse_and_validate_number_00004042",
                "param_1": "input_number",
                "parse_number_00004f84": "parse_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000404c": {
            "additional_data": {
                "FUN_0000404c": {
                    "decode_data": 1,
                    "decompress_data": 2,
                    "perform_operation": 2,
                    "process_data": 21,
                    "process_function": 1
                },
                "bVar9": {
                    "bool_var": 1,
                    "boolean_var": 2,
                    "check_flag": 2,
                    "flag": 1,
                    "flag_var": 1,
                    "is_condition_met": 1,
                    "is_zero": 21,
                    "is_zero_length": 1,
                    "temp_var8": 1
                },
                "iVar1": {
                    "array_length": 1,
                    "counter1": 1,
                    "error_code": 1,
                    "index1": 1,
                    "item_count": 1,
                    "length": 1,
                    "num_iterations": 1,
                    "result": 9,
                    "return_value": 3,
                    "secondary_offset": 1,
                    "size": 1,
                    "status": 2,
                    "temp_var1": 3,
                    "temp_var3": 1,
                    "temp_var_1": 1,
                    "tmp_var1": 1,
                    "total_bytes_processed": 1,
                    "value": 1
                },
                "iVar5": {
                    "block_size": 1,
                    "counter2": 1,
                    "data_offset": 1,
                    "increment": 3,
                    "index2": 1,
                    "loop_var1": 1,
                    "offset": 3,
                    "step": 2,
                    "temp": 2,
                    "temp_length": 1,
                    "temp_offset": 1,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_var": 3,
                    "temp_var3": 1,
                    "temp_var5": 3,
                    "temp_var_2": 1,
                    "temp_var_4": 1,
                    "tmp_var": 1,
                    "var3": 1,
                    "var5": 1
                },
                "iVar7": {
                    "count": 2,
                    "counter": 2,
                    "counter3": 1,
                    "current_value": 1,
                    "index3": 1,
                    "info_offset": 1,
                    "iterations": 1,
                    "length": 2,
                    "loop_counter": 5,
                    "loop_var": 1,
                    "loop_var2": 1,
                    "main_offset": 1,
                    "remaining": 3,
                    "remaining_size": 2,
                    "temp_var4": 1,
                    "temp_var6": 2,
                    "temp_var7": 1,
                    "temp_var_5": 1,
                    "var4": 1,
                    "var7": 1
                },
                "initialize_data_structure_00004b34": {
                    "initialize_data_structure": 6
                },
                "param_1": {
                    "data": 3,
                    "data_array": 3,
                    "data_buffer": 3,
                    "data_pointer": 1,
                    "data_ptr": 5,
                    "input": 1,
                    "input_array": 5,
                    "input_data": 4,
                    "input_ptr": 1,
                    "output_buffer": 2,
                    "param_array": 1,
                    "source_buffer": 1,
                    "uint_array": 1
                },
                "param_2": {
                    "config": 1,
                    "config_array": 1,
                    "data_ptr": 1,
                    "decode_params": 1,
                    "decompressed_data": 1,
                    "info_array": 2,
                    "info_array_ptr": 1,
                    "info_buffer": 1,
                    "info_ptr": 3,
                    "input_buffer": 2,
                    "int_array": 1,
                    "output_array": 2,
                    "output_data": 1,
                    "param_array": 3,
                    "param_array2": 1,
                    "param_ptr": 1,
                    "parameters": 3,
                    "params": 3,
                    "params_array": 1,
                    "state_array": 1
                },
                "pcVar6": {
                    "callback": 3,
                    "callback_func": 2,
                    "code_ptr": 2,
                    "decode_function": 1,
                    "decompression_function": 1,
                    "func_pointer": 1,
                    "func_ptr": 1,
                    "function_pointer": 5,
                    "function_ptr": 12,
                    "process_func": 1,
                    "temp_var6": 1
                },
                "piVar2": {
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_structure": 2,
                    "data_structure_ptr": 1,
                    "info_ptr": 1,
                    "optional_array": 1,
                    "other_info_array": 1,
                    "p_data": 1,
                    "pi_var2": 2,
                    "pointer": 2,
                    "pointer_var": 1,
                    "ptr": 5,
                    "temp_ptr": 4,
                    "temp_var2": 3,
                    "temp_var4": 1,
                    "temp_var_2": 1,
                    "tmp_var2": 1,
                    "var2": 1
                },
                "uVar3": {
                    "data_count": 1,
                    "data_size": 1,
                    "flag": 1,
                    "flags": 2,
                    "input_size": 1,
                    "mask": 1,
                    "num_bytes": 1,
                    "short_value": 1,
                    "size_as_uint": 1,
                    "temp": 1,
                    "temp_value": 2,
                    "temp_var": 1,
                    "temp_var1": 2,
                    "temp_var3": 2,
                    "u_var1": 1,
                    "ushort_value": 4,
                    "ushort_var": 2,
                    "value": 3,
                    "value1": 1,
                    "var1": 1,
                    "var3": 1
                },
                "uVar4": {
                    "data": 1,
                    "flag": 5,
                    "flag_value": 2,
                    "flag_var": 2,
                    "flags": 9,
                    "info_flags": 1,
                    "temp_var": 1,
                    "temp_var2": 2,
                    "temp_var4": 2,
                    "temp_var_3": 1,
                    "u_var2": 1,
                    "value": 1,
                    "value2": 1,
                    "var2": 1,
                    "var4": 1
                },
                "uVar8": {
                    "original_data": 1,
                    "original_value": 1,
                    "saved_data": 1,
                    "temp": 9,
                    "temp_value": 5,
                    "temp_value2": 2,
                    "temp_var": 3,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "temp_var7": 2,
                    "temp_var8": 1,
                    "temp_var_3": 1,
                    "temp_var_6": 1,
                    "var8": 1
                }
            },
            "called": [
                "FUN_00004b34"
            ],
            "calling": [
                "FUN_00006768",
                "FUN_00004158"
            ],
            "code": "\nundefined4 process_data_0000404c(uint *input_array,int *info_ptr)\n\n{\n  int result;\n  int *ptr;\n  uint ushort_value;\n  ushort flags;\n  int temp_var;\n  code *function_ptr;\n  int loop_counter;\n  uint temp;\n  bool is_zero;\n  \n  flags = *(ushort *)(info_ptr + 3);\n  ushort_value = (uint)flags;\n  if ((int)(ushort_value << 0x1c) < 0) {\n    result = info_ptr[4];\n    if (result != 0) {\n      temp_var = ushort_value << 0x1e;\n      is_zero = temp_var == 0;\n      loop_counter = *info_ptr;\n      if (is_zero) {\n        temp_var = info_ptr[5];\n      }\n      *info_ptr = result;\n      if (!is_zero) {\n        temp_var = 0;\n      }\n      info_ptr[2] = temp_var;\n      for (loop_counter = loop_counter - result; 0 < loop_counter; loop_counter = loop_counter - temp_var) {\n        temp_var = (*(code *)info_ptr[10])(input_array,info_ptr[8],result,loop_counter);\n        if (temp_var < 1) {\n          *(ushort *)(info_ptr + 3) = *(ushort *)(info_ptr + 3) | 0x40;\n          return 0xffffffff;\n        }\n        result = result + temp_var;\n      }\n    }\n  }\n  else {\n    if ((info_ptr[1] < 1) && (info_ptr[0x10] < 1)) {\n      return 0;\n    }\n    function_ptr = (code *)info_ptr[0xb];\n    if (function_ptr == (code *)0x0) {\n      return 0;\n    }\n    temp = *input_array;\n    *input_array = 0;\n    if ((flags & 0x1000) == 0) {\n      result = (*function_ptr)(input_array,info_ptr[8],ushort_value & 0x1000,1);\n      if ((result == -1) && (ushort_value = *input_array, ushort_value != 0)) {\n        if ((ushort_value == 0x1d) || (ushort_value == 0x16)) {\n          *input_array = temp;\n          return 0;\n        }\n        flags = *(ushort *)(info_ptr + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      result = info_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(info_ptr + 3) << 0x1d) < 0) &&\n       (result = result - info_ptr[1], info_ptr[0xd] != 0)) {\n      result = result - info_ptr[0x10];\n    }\n    result = (*(code *)info_ptr[0xb])(input_array,info_ptr[8],result,0);\n    flags = *(ushort *)(info_ptr + 3);\n    if ((result == -1) &&\n       ((0x1d < *input_array || (-1 < (int)((0x20400001U >> (*input_array & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(info_ptr + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n    info_ptr[1] = 0;\n    *info_ptr = info_ptr[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((result != -1 || (*input_array == 0)))) {\n      info_ptr[0x15] = result;\n    }\n    ptr = (int *)info_ptr[0xd];\n    *input_array = temp;\n    if (ptr != (int *)0x0) {\n      if (ptr != info_ptr + 0x11) {\n        initialize_data_structure(input_array);\n      }\n      info_ptr[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0000404c",
            "entrypoint": "0x0000404c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "bVar9": "is_zero",
                "iVar1": "result",
                "iVar5": "temp_var",
                "iVar7": "loop_counter",
                "initialize_data_structure_00004b34": "initialize_data_structure",
                "param_1": "input_array",
                "param_2": "info_ptr",
                "pcVar6": "function_ptr",
                "piVar2": "ptr",
                "uVar3": "ushort_value",
                "uVar4": "flags",
                "uVar8": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004158": {
            "additional_data": {
                "DAT_00007998": {
                    "block_c": 1,
                    "config3": 1,
                    "data3": 3,
                    "data_array_3": 1,
                    "extra_config": 1
                },
                "DAT_000079b8": {
                    "block_a": 1,
                    "config1": 1,
                    "data1": 3,
                    "data_array_1": 1,
                    "default_config": 1
                },
                "DAT_000079d8": {
                    "block_b": 1,
                    "config2": 1,
                    "data2": 3,
                    "data_array_2": 1,
                    "special_config": 1
                },
                "FUNC_000042a4": {
                    "call_initialization_function": 1,
                    "check_condition": 1,
                    "handle_error": 1,
                    "handle_invalid_input": 1,
                    "initialize": 8,
                    "initialize_buffer": 1,
                    "perform_action": 1,
                    "perform_operation": 1,
                    "perform_task": 1,
                    "reverse_operation": 1
                },
                "FUNC_000045e8": {
                    "process_block": 1,
                    "process_data": 1,
                    "process_data1": 4,
                    "process_data_block": 1,
                    "process_data_function": 1,
                    "process_data_helper": 1,
                    "process_data_item": 1,
                    "process_data_part1": 1,
                    "process_data_segment": 1,
                    "process_data_step1": 1,
                    "process_output": 1,
                    "process_parameter": 1,
                    "process_valid_data": 1,
                    "reverse_data_processing": 1
                },
                "FUNC_000045ec": {
                    "cleanup": 3,
                    "cleanup_after_processing": 1,
                    "cleanup_and_close": 1,
                    "cleanup_data": 1,
                    "cleanup_data_item": 1,
                    "cleanup_function": 1,
                    "finalize_data_segment": 1,
                    "process_data2": 1,
                    "process_data3": 3,
                    "process_data_part3": 1,
                    "process_data_step3": 1,
                    "release_block": 1,
                    "reverse_data_cleanup": 1
                },
                "FUN_00004158": {
                    "process_and_handle_data": 1,
                    "process_and_validate_data": 1,
                    "process_data": 28
                },
                "F_00004158": {
                    "process_data": 1
                },
                "inputData": {
                    "input_data_1": 1
                },
                "outputData": {
                    "output_data_1": 1
                },
                "param_1": {
                    "data": 2,
                    "data_pointer": 2,
                    "data_ptr": 7,
                    "data_struct_address": 1,
                    "input": 6,
                    "input_buffer": 1,
                    "input_data": 6,
                    "input_param": 5,
                    "source": 1
                },
                "param_2": {
                    "arg_ptr": 1,
                    "arguments": 1,
                    "config_ptr": 4,
                    "data": 5,
                    "data_array": 2,
                    "data_block": 1,
                    "data_buffer": 1,
                    "data_param": 2,
                    "data_ptr": 2,
                    "output": 3,
                    "output_buffer": 1,
                    "output_data": 3,
                    "output_param": 2,
                    "parameters": 3
                },
                "process_data_0000404c": {
                    "perform_data_processing": 1,
                    "perform_operation": 1,
                    "process_data2": 3,
                    "process_data_block": 2,
                    "process_data_func": 1,
                    "process_data_function": 1,
                    "process_data_helper": 1,
                    "process_data_in_struct": 1,
                    "process_data_internal": 1,
                    "process_data_part2": 1,
                    "process_data_step2": 1,
                    "process_input_data": 1,
                    "process_subfunction": 1
                },
                "result": {
                    "result_1": 1
                },
                "uVar1": {
                    "result": 23,
                    "return_value": 8
                }
            },
            "called": [
                "FUN_0000404c",
                "FUN_000042a4",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "code": "\nundefined4 process_and_validate_data_00004158(int data_ptr,undefined4 *data)\n\n{\n  undefined4 result;\n  \n  if (data[4] != 0) {\n    if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n      initialize_memory_and_process_elf_relocations_000042a4();\n    }\n    if (data == &DAT_000079b8) {\n      data = *(undefined4 **)(data_ptr + 4);\n    }\n    else if (data == (undefined4 *)&DAT_000079d8) {\n      data = *(undefined4 **)(data_ptr + 8);\n    }\n    else if (data == (undefined4 *)&DAT_00007998) {\n      data = *(undefined4 **)(data_ptr + 0xc);\n    }\n    if (*(short *)(data + 3) != 0) {\n      if ((-1 < (int)(data[0x19] << 0x1f)) && (-1 < (int)*(short *)(data + 3) << 0x16)) {\n        FUNC_000045e8(data[0x16]);\n      }\n      result = process_data2(data_ptr,data);\n      if ((int)(data[0x19] << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(data + 3) << 0x16) < 0) {\n        return result;\n      }\n      FUNC_000045ec(data[0x16]);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined4 FUN_00004158(int param_1,undefined4 *param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n      FUNC_000042a4();\n    }\n    if (param_2 == &DAT_000079b8) {\n      param_2 = *(undefined4 **)(param_1 + 4);\n    }\n    else if (param_2 == (undefined4 *)&DAT_000079d8) {\n      param_2 = *(undefined4 **)(param_1 + 8);\n    }\n    else if (param_2 == (undefined4 *)&DAT_00007998) {\n      param_2 = *(undefined4 **)(param_1 + 0xc);\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      if ((-1 < (int)(param_2[0x19] << 0x1f)) && (-1 < (int)*(short *)(param_2 + 3) << 0x16)) {\n        FUNC_000045e8(param_2[0x16]);\n      }\n      uVar1 = process_data_0000404c(param_1,param_2);\n      if ((int)(param_2[0x19] << 0x1f) < 0) {\n        return uVar1;\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x16) < 0) {\n        return uVar1;\n      }\n      FUNC_000045ec(param_2[0x16]);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_and_validate_data_00004158",
            "entrypoint": "0x00004158",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004158": "process_and_validate_data_00004158",
                "param_1": "data_ptr",
                "param_2": "data",
                "process_data_0000404c": "process_data2",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000041d0": {
            "additional_data": {
                "FUN_000041d0": {
                    "process_and_validate_data": 1,
                    "process_and_validate_rel_array": 1,
                    "process_and_validate_relocation_data": 2,
                    "process_and_validate_relocations": 3,
                    "process_and_validate_relocs": 1,
                    "process_elf_data": 1,
                    "process_elf_relocation": 1,
                    "process_elf_relocations": 1,
                    "process_rel_array": 1,
                    "process_rel_data": 1,
                    "process_rel_entries": 1,
                    "process_relocated_data": 1,
                    "process_relocation_data": 2,
                    "process_relocation_entries": 6,
                    "process_relocation_table": 1,
                    "process_relocations": 5,
                    "validate_and_process_data": 1
                },
                "iVar2": {
                    "count": 8,
                    "counter": 1,
                    "current_relocation_length": 1,
                    "data_element_count": 1,
                    "data_length": 2,
                    "data_size": 1,
                    "entry_count": 2,
                    "entry_data_length": 1,
                    "index": 3,
                    "inner_loop_counter": 1,
                    "num_entries": 3,
                    "num_relocations": 1,
                    "offset": 1,
                    "rel_entry_index": 1
                },
                "iVar4": {
                    "curr_entry": 1,
                    "current_entry": 5,
                    "current_relocation": 1,
                    "current_relocation_offset": 1,
                    "data_entry": 1,
                    "entry": 4,
                    "entry_address": 1,
                    "entry_data": 1,
                    "entry_data_offset": 1,
                    "entry_offset": 3,
                    "entry_ptr": 1,
                    "offset_ptr": 1,
                    "rel_entry_address": 1,
                    "rel_offset": 1,
                    "relocation_address": 1,
                    "relocation_entry": 1,
                    "relocation_info": 2,
                    "relocation_info_offset": 1,
                    "section_entry": 1,
                    "section_offset": 1
                },
                "iVar6": {
                    "counter": 2,
                    "entry_count": 2,
                    "entry_index": 1,
                    "entry_size": 1,
                    "index": 1,
                    "inner_counter": 1,
                    "inner_loop_counter": 1,
                    "loop_counter": 7,
                    "num_relocation_entries": 1,
                    "rel_entry_count": 1,
                    "remaining": 1,
                    "remaining_count": 3,
                    "remaining_entries": 6,
                    "remaining_iterations": 1,
                    "remaining_relocations": 1
                },
                "param_1": {
                    "address": 1,
                    "base_address": 4,
                    "data": 1,
                    "data_offset": 2,
                    "entry_index": 1,
                    "entry_offset": 1,
                    "input_address": 1,
                    "input_data": 1,
                    "input_length": 1,
                    "input_value": 1,
                    "offset": 3,
                    "relocation": 1,
                    "relocation_entry_offset": 1,
                    "relocation_offset": 6,
                    "relocation_table_address": 1,
                    "relocation_type": 2,
                    "section_index": 1,
                    "section_offset": 1
                },
                "param_2": {
                    "additional_param": 1,
                    "base": 1,
                    "base_address": 2,
                    "data": 1,
                    "data_offset": 1,
                    "local_object1": 1,
                    "offset": 5,
                    "offset_1": 1,
                    "offset_value": 1,
                    "param2": 2,
                    "param_2": 1,
                    "param_offset": 1,
                    "relocation_entry_count": 1,
                    "relocation_info": 2,
                    "relocation_offset": 3,
                    "relocation_section": 1,
                    "size": 2,
                    "size_of_array": 1,
                    "size_of_relocation_entries": 1,
                    "symbol_table_offset": 1
                },
                "param_3": {
                    "additional_data": 1,
                    "checksum": 1,
                    "context": 2,
                    "data": 1,
                    "data_offset": 1,
                    "data_size": 1,
                    "data_validation_flag": 2,
                    "extra_param": 1,
                    "extra_parameter": 1,
                    "length_value": 1,
                    "local_object2": 1,
                    "offset_2": 1,
                    "param3": 3,
                    "param_3": 1,
                    "param_size": 1,
                    "rel_info": 1,
                    "relocation_addend": 1,
                    "relocation_address": 1,
                    "relocation_data": 2,
                    "size": 4,
                    "string_table_offset": 1,
                    "validation_parameter": 1
                },
                "pdVar3": {
                    "current_relocation_entry_ptr": 1,
                    "rel_array": 1,
                    "rel_data_ptr": 1,
                    "rel_entries": 1,
                    "rel_entry": 2,
                    "rel_info": 1,
                    "rel_ptr": 1,
                    "rel_table": 2,
                    "reloc_entry": 1,
                    "relocation": 2,
                    "relocation_array": 1,
                    "relocation_data": 1,
                    "relocation_entry": 12,
                    "relocation_entry_ptr": 2,
                    "relocation_table_entry": 1
                },
                "puVar7": {
                    "additional_data_array": 1,
                    "additional_info": 1,
                    "array_data": 1,
                    "base_reloc": 1,
                    "data": 1,
                    "data_buffer": 1,
                    "data_pointer": 3,
                    "data_ptr": 5,
                    "elf32_rel_array_start": 1,
                    "elf_data": 1,
                    "entry_data": 1,
                    "local_data": 1,
                    "reference_address": 1,
                    "rel_array_start": 1,
                    "relocation_array": 1,
                    "relocation_info": 1,
                    "relocation_table_ptr": 1,
                    "section_header": 1,
                    "section_name": 1,
                    "str_ptr": 1,
                    "string_table": 1,
                    "strings": 1,
                    "validation_data": 1,
                    "validation_data_ptr": 1
                },
                "uVar1": {
                    "current_validation_result": 1,
                    "data_validation_result": 1,
                    "result": 21,
                    "validation_result": 2
                },
                "uVar5": {
                    "combined_result": 7,
                    "combined_results": 3,
                    "final_result": 3,
                    "output_value": 1,
                    "overall_result": 2,
                    "result": 5,
                    "result_flags": 1,
                    "total_result": 6,
                    "validation_result": 2
                }
            },
            "called": [
                "FUN_00004158"
            ],
            "calling": [
                "FUN_00002e48"
            ],
            "code": "\nuint process_and_validate_relocations_000041d0(int relocation_offset,undefined4 offset,undefined4 size)\n\n{\n  uint result;\n  int count;\n  dword *relocation_entry;\n  int current_entry;\n  uint combined_result;\n  int loop_counter;\n  undefined4 *data_ptr;\n  \n  if (relocation_offset == 0) {\n    data_ptr = &DAT_000079f8;\n    relocation_entry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    combined_result = 0;\n    do {\n      loop_counter = relocation_entry[1];\n      current_entry = relocation_entry[2];\n      while (loop_counter = loop_counter + -1, -1 < loop_counter) {\n        if ((1 < *(ushort *)(current_entry + 0xc)) && (count = *(short *)(current_entry + 0xe) + 1, count != 0)) {\n          result = process_and_validate_data_00004158(0x1fff0284,current_entry,size,count,data_ptr);\n          combined_result = combined_result | result;\n        }\n        current_entry = current_entry + 0x68;\n      }\n      relocation_entry = (dword *)*relocation_entry;\n    } while (relocation_entry != (dword *)0x0);\n    return combined_result;\n  }\n  combined_result = process_and_validate_data_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,relocation_offset);\n  return combined_result;\n}\n\n",
            "current_name": "process_and_validate_relocations_000041d0",
            "entrypoint": "0x000041d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000041d0": "process_and_validate_relocations_000041d0",
                "iVar2": "count",
                "iVar4": "current_entry",
                "iVar6": "loop_counter",
                "param_1": "relocation_offset",
                "param_2": "offset",
                "param_3": "size",
                "pdVar3": "relocation_entry",
                "puVar7": "data_ptr",
                "uVar1": "result",
                "uVar5": "combined_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000041f4": {
            "additional_data": {
                "FUN_000041f4": {
                    "initialize_data": 3,
                    "initialize_data_struct": 3,
                    "initialize_data_structure": 16,
                    "initialize_data_structures": 2,
                    "initialize_parameters": 6,
                    "initialize_params": 1
                },
                "LAB_00004e4a_1": {
                    "constant_label": 1,
                    "constant_value": 2,
                    "label": 5,
                    "label1": 4,
                    "label_00004e4a": 1,
                    "label_1": 2,
                    "label_address": 1,
                    "some_label": 8
                },
                "fill_array_with_value_00004622": {
                    "fill_array_with_value": 25
                },
                "param_1": {
                    "data": 3,
                    "data_struct": 4,
                    "data_struct_ptr": 1,
                    "data_structure": 15,
                    "output": 1,
                    "output_array": 3,
                    "parameters": 4
                },
                "param_2": {
                    "param2": 1,
                    "param2_value": 1,
                    "value1": 29
                },
                "param_3": {
                    "param3": 1,
                    "param3_value": 1,
                    "value2": 29
                }
            },
            "called": [
                "FUN_00004622"
            ],
            "calling": [
                "FUN_000042a4"
            ],
            "code": "\nvoid initialize_data_structure_000041f4(undefined4 *data_structure,undefined2 value1,undefined2 value2)\n\n{\n  *data_structure = 0;\n  data_structure[1] = 0;\n  data_structure[4] = 0;\n  data_structure[5] = 0;\n  data_structure[2] = 0;\n  *(undefined2 *)(data_structure + 3) = value1;\n  data_structure[0x19] = 0;\n  *(undefined2 *)((int)data_structure + 0xe) = value2;\n  data_structure[6] = 0;\n  fill_array_with_value(data_structure + 0x17,0,8);\n  data_structure[9] = 0x4dc9;\n  data_structure[10] = 0x4def;\n  data_structure[0xb] = 0x4e27;\n  data_structure[8] = data_structure;\n  data_structure[0xc] = &some_label;\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_000041f4",
            "entrypoint": "0x000041f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000041f4": "initialize_data_structure_000041f4",
                "LAB_00004e4a_1": "some_label",
                "fill_array_with_value_00004622": "fill_array_with_value",
                "param_1": "data_structure",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004248": {
            "additional_data": {
                "FUN_00004248": {
                    "allocate_and_initialize_block": 1,
                    "allocate_and_initialize_memory": 20,
                    "allocate_and_initialize_memory_block": 5,
                    "allocate_memory_and_initialize": 1,
                    "create_and_initialize_memory_block": 1,
                    "initialize_block": 1,
                    "initialize_memory_block": 2
                },
                "allocate_and_initialize_memory_block_00004bd0": {
                    "allocate_and_initialize_block_memory": 1,
                    "allocate_and_initialize_memory_block": 1
                },
                "fill_array_with_value_00004622": {
                    "fill_array_with_value": 4,
                    "initialize_array_with_value": 1
                },
                "iVar2": {
                    "array_offset": 1,
                    "array_size": 2,
                    "block_offset": 1,
                    "block_size": 6,
                    "index": 1,
                    "memory_block_size": 1,
                    "memory_size": 2,
                    "offset": 12,
                    "total_size": 5
                },
                "param_1": {
                    "allocated_memory_base_address": 1,
                    "base_address": 2,
                    "block_start_address": 1,
                    "initial_value": 4,
                    "input_data": 1,
                    "input_param": 2,
                    "input_pointer": 1,
                    "input_size": 1,
                    "input_value": 2,
                    "mem_block_address": 1,
                    "memory_block": 2,
                    "memory_param": 2,
                    "param": 3,
                    "param1": 6,
                    "param_first": 1,
                    "parameter1": 1
                },
                "param_2": {
                    "array_size": 1,
                    "block_count": 1,
                    "block_size": 1,
                    "count": 3,
                    "num_blocks": 2,
                    "num_elements": 8,
                    "num_iterations": 1,
                    "number_of_elements": 1,
                    "param2": 5,
                    "param_count": 1,
                    "size": 6,
                    "size_param": 1
                },
                "puVar1": {
                    "allocated_block": 1,
                    "allocated_memory": 3,
                    "block": 1,
                    "block_ptr": 1,
                    "memory_block": 14,
                    "memory_block_pointer": 2,
                    "memory_block_ptr": 4,
                    "memory_ptr": 1,
                    "ptr": 1,
                    "ptr_allocated_memory": 1,
                    "result": 1,
                    "result_ptr": 1
                }
            },
            "called": [
                "FUN_00004622",
                "FUN_00004bd0"
            ],
            "calling": [
                "FUN_00004314"
            ],
            "code": "\nundefined4 * allocate_and_initialize_memory_block_00004248(undefined4 param1,int num_elements)\n\n{\n  undefined4 *memory_block;\n  int offset;\n  \n  offset = (num_elements + -1) * 0x68;\n  memory_block = (undefined4 *)allocate_and_initialize_memory_block_00004248(param1,offset + 0x74);\n  if (memory_block != (undefined4 *)0x0) {\n    *memory_block = 0;\n    memory_block[1] = num_elements;\n    memory_block[2] = memory_block + 3;\n    fill_array_with_value(memory_block + 3,0,offset + 0x68);\n  }\n  return memory_block;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_block_00004248",
            "entrypoint": "0x00004248",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004248": "allocate_and_initialize_memory_block_00004248",
                "allocate_and_initialize_memory_block_00004bd0": "allocate_and_initialize_memory_block",
                "fill_array_with_value_00004622": "fill_array_with_value",
                "iVar2": "offset",
                "param_1": "param1",
                "param_2": "num_elements",
                "puVar1": "memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004274": {
            "additional_data": {
                "DAT_1fff0dec": {
                    "data": 9,
                    "data_buffer": 1,
                    "data_to_initialize": 1
                },
                "FUNC_000045e8": {
                    "execute_data_initialization": 1,
                    "initialize_data": 1,
                    "initialize_pointer": 1,
                    "load_data": 2,
                    "process_data": 22
                },
                "FUN_00004274": {
                    "initialize_data": 28,
                    "initialize_data_structures": 1,
                    "initialize_memory": 1,
                    "load_data": 1
                }
            },
            "called": [
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_00004314"
            ],
            "code": "\nvoid initialize_data_structures_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00004274",
            "entrypoint": "0x00004274",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004274": "initialize_data_structures_00004274"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004280": {
            "additional_data": {
                "DAT_1fff0dec": {
                    "data": 9,
                    "data_buffer": 2
                },
                "FUCN_000045ec": {
                    "process_data": 1
                },
                "FUNC_000045ec": {
                    "process_data": 26,
                    "process_data_structure": 1
                },
                "FUN_00004280": {
                    "initialize_data": 30,
                    "initialize_data_structure": 1
                }
            },
            "called": [
                "FUN_000045ec"
            ],
            "calling": [
                "FUN_00004314"
            ],
            "code": "\nvoid initialize_data_structure_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_00004280",
            "entrypoint": "0x00004280",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004280": "initialize_data_structure_00004280"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000428c": {
            "additional_data": {
                "0x1fff0de7": {
                    "config_data": 1,
                    "configuration_data": 2,
                    "configuration_value": 1,
                    "initialization_data": 1,
                    "memory_address": 5,
                    "memory_configuration_parameter": 1,
                    "peripheral_address": 1
                },
                "FUNC_000045e8": {
                    "call_function": 1,
                    "call_function_with_address": 1,
                    "configure_memory": 1,
                    "configure_peripheral": 1,
                    "do_initialization": 1,
                    "execute_initialization": 1,
                    "set_configuration": 4,
                    "set_device_info": 1,
                    "set_initial_value": 1,
                    "set_memory_address": 3,
                    "set_memory_value": 9,
                    "write_data_to_memory": 4,
                    "write_to_memory": 2,
                    "write_value_to_memory": 1
                },
                "FUN_0000428c": {
                    "initialize_configuration": 1,
                    "initialize_data": 1,
                    "initialize_default_values": 1,
                    "initialize_device_info": 1,
                    "initialize_memory": 21,
                    "initialize_peripheral": 1,
                    "initialize_settings": 1,
                    "initialize_system": 3,
                    "perform_initialization": 1
                },
                "_": {
                    "_": 1
                }
            },
            "called": [
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_000042a4"
            ],
            "code": "\nvoid initialize_memory_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "current_name": "initialize_memory_0000428c",
            "entrypoint": "0x0000428c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000428c": "initialize_memory_0000428c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000042a4": {
            "additional_data": {
                "1": {
                    "success": 1
                },
                "DAT_0000423d": {
                    "data_0000423d": 1,
                    "data_structure": 1,
                    "initial_data_value": 1
                },
                "FUNC_000045ec": {
                    "execute": 1,
                    "execute_final_function": 1,
                    "execute_final_task": 1,
                    "execute_func": 2,
                    "execute_function": 16,
                    "execute_post_processing": 1,
                    "execute_some_function": 1,
                    "execute_specific_function": 1,
                    "perform_action": 2,
                    "perform_cleanup": 1,
                    "perform_final_operation": 1
                },
                "FUN_000042a4": {
                    "initialize_and_process": 2,
                    "initialize_and_process_binary": 1,
                    "initialize_and_process_data": 1,
                    "initialize_and_process_elf": 12,
                    "initialize_and_process_elf_file": 1,
                    "initialize_and_process_elf_relocations": 3,
                    "initialize_and_process_relocations": 2,
                    "initialize_func": 1,
                    "initialize_function": 1,
                    "initialize_memory": 2,
                    "initialize_memory_and_data": 1,
                    "initialize_memory_and_process_elf_relocations": 1,
                    "initialize_memory_and_process_relocations": 1,
                    "initialize_memory_and_structures": 1,
                    "initialize_process": 1
                },
                "initialize_data_structure_000041f4": {
                    "initialize_data_structure": 27
                },
                "initialize_memory_0000428c": {
                    "initialize_memory": 24
                },
                "param_1": {
                    "address": 1,
                    "base_address": 14,
                    "binary_base_address": 1,
                    "data": 1,
                    "elf_file_address": 1,
                    "elf_structure": 1,
                    "function_data": 1,
                    "function_param": 3,
                    "function_parameter": 1,
                    "input_param": 1,
                    "memory_address": 1,
                    "memory_block": 1,
                    "memory_ptr": 1,
                    "param": 1,
                    "process_address": 1,
                    "structure_address": 1
                },
                "process_elf_relocations_00004314": {
                    "process_elf_relocations": 19,
                    "process_relocations": 8
                },
                "uVar1": {
                    "init_value": 1,
                    "initial_value": 1,
                    "new_value": 1,
                    "relocation_result": 19,
                    "relocation_value": 2,
                    "result": 4,
                    "return_value": 1,
                    "status": 2
                }
            },
            "called": [
                "FUN_00004314",
                "FUN_000045ec",
                "FUN_000041f4",
                "FUN_0000428c"
            ],
            "calling": [
                "FUN_000057f8",
                "FUN_00004c84",
                "FUN_00004cb4",
                "FUN_00004db8",
                "FUN_00004418",
                "FUN_00005e10",
                "FUN_00005404",
                "FUN_00006768",
                "FUN_00004314",
                "FUN_00004158",
                "FUN_000054a8"
            ],
            "code": "\nvoid initialize_memory_and_process_elf_relocations_000042a4(int base_address)\n\n{\n  undefined4 relocation_result;\n  \n  initialize_memory();\n  if (*(int *)(base_address + 0x18) == 0) {\n    *(undefined4 *)(base_address + 0x48) = 0;\n    *(undefined4 *)(base_address + 0x4c) = 0;\n    *(undefined4 *)(base_address + 0x50) = 0;\n    relocation_result = 0x1fff0284;\n    *(undefined **)(base_address + 0x28) = &DAT_0000423d;\n    if (base_address == 0x1fff0284) {\n      relocation_result = 1;\n    }\n    if (base_address == 0x1fff0284) {\n      *(undefined4 *)(base_address + 0x18) = relocation_result;\n    }\n    relocation_result = process_elf_relocations(base_address);\n    *(undefined4 *)(base_address + 4) = relocation_result;\n    relocation_result = process_elf_relocations(base_address);\n    *(undefined4 *)(base_address + 8) = relocation_result;\n    relocation_result = process_elf_relocations(base_address);\n    *(undefined4 *)(base_address + 0xc) = relocation_result;\n    initialize_data_structure(*(undefined4 *)(base_address + 4),4,0);\n    initialize_data_structure(*(undefined4 *)(base_address + 8),9,1);\n    initialize_data_structure(*(undefined4 *)(base_address + 0xc),0x12,2);\n    *(undefined4 *)(base_address + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "current_name": "initialize_memory_and_process_elf_relocations_000042a4",
            "entrypoint": "0x000042a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000042a4": "initialize_memory_and_process_elf_relocations_000042a4",
                "initialize_data_structure_000041f4": "initialize_data_structure",
                "initialize_memory_0000428c": "initialize_memory",
                "param_1": "base_address",
                "process_elf_relocations_00004314": "process_elf_relocations",
                "uVar1": "relocation_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004314": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "elf32_rel_array": 1,
                    "rel_array": 9,
                    "relocation_array": 1
                },
                "FUNC_000042a4": {
                    "function_1": 2,
                    "function_a": 2,
                    "handle_error": 1,
                    "helper_function": 1,
                    "perform_action": 2,
                    "process_function": 1
                },
                "FUNC_000045e4": {
                    "do_something": 1,
                    "execute_function": 1,
                    "function_2": 2,
                    "function_b": 2,
                    "helper_function2": 1,
                    "initialize_structure": 1,
                    "process_function_2": 1
                },
                "FUN_00004314": {
                    "initialize_and_allocate_memory": 1,
                    "initialize_data_structures": 1,
                    "process_elf_relocations": 2
                },
                "allocate_and_initialize_memory_block_00004248": {
                    "allocate_and_initialize_memory_block": 9
                },
                "dVar1": {
                    "allocated_block": 4,
                    "allocated_block_addr": 1,
                    "allocated_memory": 16,
                    "allocated_memory_block": 4,
                    "dynamic_variable": 1,
                    "memory_block": 1
                },
                "dWord1": {
                    "d_var1": 1
                },
                "fill_array_with_value_00004622": {
                    "fill_array_with_value": 9
                },
                "iVar2": {
                    "count": 3,
                    "counter": 5,
                    "element_count": 1,
                    "index": 1,
                    "iteration_count": 6,
                    "iteration_counter": 3,
                    "iteration_variable": 2,
                    "iterations": 1,
                    "loop_counter": 2,
                    "num_iterations": 3,
                    "num_relocations": 1,
                    "remaining_iterations": 1
                },
                "initialize_data_structure_00004280": {
                    "initialize_data_structure": 9
                },
                "initialize_data_structures_00004274": {
                    "initialize_data_structures": 9
                },
                "param_1": {
                    "data_array": 1,
                    "function_parameter": 1,
                    "input": 2,
                    "input_array": 5,
                    "input_param": 1,
                    "memory_block": 1,
                    "param": 9,
                    "param_arr": 1,
                    "param_array": 3,
                    "parameter_list": 1,
                    "parameters": 1,
                    "result": 3,
                    "result_array": 2
                },
                "pdVar4": {
                    "current_data": 1,
                    "current_data_pointer": 1,
                    "current_dword_pointer": 1,
                    "current_entry": 1,
                    "current_node": 1,
                    "current_rel": 2,
                    "current_rel_info": 1,
                    "current_rel_info_pointer": 1,
                    "linked_list": 1,
                    "linked_list_node": 1,
                    "linked_list_pointer": 2,
                    "next_ptr": 1,
                    "next_rel_info": 1,
                    "pd_var": 1,
                    "pointer_data_variable": 1,
                    "pointer_to_rel_array": 2,
                    "pointer_to_rel_info_array": 1,
                    "ptr_to_rel_array": 1,
                    "rel_array": 1,
                    "rel_array_pointer": 4,
                    "rel_info_ptr": 1,
                    "rel_ptr": 1,
                    "relocation_offset": 1
                },
                "puVar3": {
                    "curr_relocation": 1,
                    "current_data": 1,
                    "current_data_pointer": 1,
                    "current_element": 4,
                    "current_pointer": 4,
                    "current_ptr": 1,
                    "data_array_pointer": 1,
                    "data_pointer": 6,
                    "data_ptr": 1,
                    "data_struct": 1,
                    "pointer": 1,
                    "pointer_to_data": 2,
                    "pointer_to_struct": 1,
                    "pointer_variable": 1,
                    "ptr_to_data": 1,
                    "pu_var": 1,
                    "relocation_entry": 1
                }
            },
            "called": [
                "FUN_00004622",
                "FUN_00004274",
                "FUN_000045e4",
                "FUN_00004248",
                "FUN_00004280",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_000042a4"
            ],
            "code": "\nundefined4 * process_elf_relocations_00004314(undefined4 *param)\n\n{\n  dword allocated_memory;\n  int iteration_count;\n  undefined4 *data_pointer;\n  dword *rel_array_pointer;\n  \n  initialize_data_structures();\n  if (rel_array[19].r_info == 0) {\n    initialize_memory_and_process_elf_relocations_000042a4(0x1fff0284);\n  }\n  rel_array_pointer = &rel_array[0x19].r_info;\n  do {\n    iteration_count = rel_array_pointer[1];\n    data_pointer = (undefined4 *)rel_array_pointer[2];\n    while (iteration_count = iteration_count + -1, -1 < iteration_count) {\n      if (*(short *)(data_pointer + 3) == 0) {\n        data_pointer[3] = 0xffff0001;\n        data_pointer[0x19] = 0;\n        FUNC_000045e4(data_pointer + 0x16);\n        initialize_data_structure();\n        data_pointer[1] = 0;\n        data_pointer[2] = 0;\n        data_pointer[4] = 0;\n        data_pointer[5] = 0;\n        *data_pointer = 0;\n        data_pointer[6] = 0;\n        fill_array_with_value(data_pointer + 0x17,0,8);\n        data_pointer[0xd] = 0;\n        data_pointer[0xe] = 0;\n        data_pointer[0x12] = 0;\n        data_pointer[0x13] = 0;\n        return data_pointer;\n      }\n      data_pointer = data_pointer + 0x1a;\n    }\n    if (*rel_array_pointer == 0) {\n      allocated_memory = allocate_and_initialize_memory_block(param,4);\n      *rel_array_pointer = allocated_memory;\n      if (allocated_memory == 0) {\n        initialize_data_structure();\n        *param = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    rel_array_pointer = (dword *)*rel_array_pointer;\n  } while( true );\n}\n\n",
            "code_backup": "\nundefined4 * FUN_00004314(undefined4 *param_1)\n\n{\n  dword dVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  dword *pdVar4;\n  \n  initialize_data_structures_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUNC_000042a4(0x1fff0284);\n  }\n  pdVar4 = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iVar2 = pdVar4[1];\n    puVar3 = (undefined4 *)pdVar4[2];\n    while (iVar2 = iVar2 + -1, -1 < iVar2) {\n      if (*(short *)(puVar3 + 3) == 0) {\n        puVar3[3] = 0xffff0001;\n        puVar3[0x19] = 0;\n        FUNC_000045e4(puVar3 + 0x16);\n        initialize_data_structure_00004280();\n        puVar3[1] = 0;\n        puVar3[2] = 0;\n        puVar3[4] = 0;\n        puVar3[5] = 0;\n        *puVar3 = 0;\n        puVar3[6] = 0;\n        fill_array_with_value_00004622(puVar3 + 0x17,0,8);\n        puVar3[0xd] = 0;\n        puVar3[0xe] = 0;\n        puVar3[0x12] = 0;\n        puVar3[0x13] = 0;\n        return puVar3;\n      }\n      puVar3 = puVar3 + 0x1a;\n    }\n    if (*pdVar4 == 0) {\n      dVar1 = allocate_and_initialize_memory_block_00004248(param_1,4);\n      *pdVar4 = dVar1;\n      if (dVar1 == 0) {\n        initialize_data_structure_00004280();\n        *param_1 = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    pdVar4 = (dword *)*pdVar4;\n  } while( true );\n}\n\n",
            "current_name": "process_elf_relocations_00004314",
            "entrypoint": "0x00004314",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_00004314": "process_elf_relocations_00004314",
                "allocate_and_initialize_memory_block_00004248": "allocate_and_initialize_memory_block",
                "dVar1": "allocated_memory",
                "fill_array_with_value_00004622": "fill_array_with_value",
                "iVar2": "iteration_count",
                "initialize_data_structure_00004280": "initialize_data_structure",
                "initialize_data_structures_00004274": "initialize_data_structures",
                "param_1": "param",
                "pdVar4": "rel_array_pointer",
                "puVar3": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000043a0": {
            "additional_data": {
                "FUN_000043a0": {
                    "calculate_checksum": 1,
                    "calculate_flags": 1,
                    "check_and_execute": 1,
                    "check_and_execute_callbacks": 1,
                    "check_and_execute_code": 1,
                    "execute_function_and_accumulate_results": 1,
                    "find_and_execute_callbacks": 2,
                    "find_and_execute_code": 1,
                    "find_and_execute_operations": 2,
                    "find_invalid_data": 1,
                    "find_markers": 1,
                    "find_value": 1,
                    "process_and_return_results": 1,
                    "process_data": 14
                },
                "iVar3": {
                    "callback_entry": 1,
                    "callback_info": 1,
                    "count": 1,
                    "current_address": 1,
                    "current_data": 1,
                    "current_index": 1,
                    "current_inner_pointer": 1,
                    "current_item_offset": 1,
                    "current_offset": 1,
                    "current_operation_address": 1,
                    "current_pointer": 1,
                    "current_struct_address": 1,
                    "current_value": 3,
                    "data_address": 1,
                    "data_offset": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "index_a": 1,
                    "inner_index": 1,
                    "inner_offset": 2,
                    "inner_value": 1,
                    "inner_var1": 2,
                    "item_offset": 1,
                    "operation_ptr": 1,
                    "struct_address": 1,
                    "struct_pointer": 1,
                    "temp_var2": 1
                },
                "iVar5": {
                    "callback_count": 2,
                    "count": 5,
                    "counter": 5,
                    "element_count": 1,
                    "index_b": 1,
                    "inner_counter": 1,
                    "inner_loop_counter": 1,
                    "inner_var2": 2,
                    "item_counter": 1,
                    "iteration_count": 3,
                    "loop_counter": 3,
                    "loop_index": 1,
                    "operations_count": 1,
                    "outer_index": 1,
                    "remaining_iterations": 2,
                    "temp_var1": 1
                },
                "param_1": {
                    "base_address": 12,
                    "data_offset": 3,
                    "data_size": 1,
                    "input": 1,
                    "input_offset": 3,
                    "input_param": 2,
                    "input_value": 3,
                    "num_elements": 1,
                    "offset": 2,
                    "start_address": 2,
                    "starting_address": 1
                },
                "param_2": {
                    "callback": 3,
                    "callback_fn": 1,
                    "callback_func": 2,
                    "callback_function": 16,
                    "data_validator": 1,
                    "function_pointer": 3,
                    "function_ptr": 3,
                    "operation_func": 1,
                    "operation_function": 1
                },
                "piVar2": {
                    "array_pointer": 1,
                    "callback_list": 1,
                    "callback_table": 1,
                    "current_address": 1,
                    "current_address_ptr": 1,
                    "current_data": 1,
                    "current_node": 2,
                    "current_pointer": 3,
                    "current_ptr": 5,
                    "current_struct": 1,
                    "data_array": 1,
                    "data_ptr": 2,
                    "list_ptr": 2,
                    "pointer": 5,
                    "pointer_array": 1,
                    "ptr_a": 1,
                    "ptr_data": 1,
                    "ptr_list": 1
                },
                "uVar1": {
                    "call_result": 1,
                    "callback_result": 8,
                    "checksum_value": 1,
                    "function_result": 1,
                    "operation_result": 1,
                    "partial_result": 1,
                    "result": 13,
                    "return_val": 1,
                    "return_value": 2,
                    "validation_result": 1
                },
                "uVar4": {
                    "callback_flags": 1,
                    "callback_results": 1,
                    "combined_result": 7,
                    "combined_results": 6,
                    "final_result": 2,
                    "flag_result": 1,
                    "invalid_data_count": 1,
                    "output": 1,
                    "output_value": 1,
                    "result": 9,
                    "total_checksum": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00006768"
            ],
            "code": "\nuint process_data_000043a0(int base_address,code *callback_function)\n\n{\n  uint result;\n  int *current_ptr;\n  int current_value;\n  uint result;\n  int counter;\n  \n  current_ptr = (int *)(base_address + 0x48);\n  result = 0;\n  do {\n    counter = current_ptr[1];\n    current_value = current_ptr[2];\n    while (counter = counter + -1, -1 < counter) {\n      if ((1 < *(ushort *)(current_value + 0xc)) && (*(short *)(current_value + 0xe) != -1)) {\n        result = (*callback_function)(current_value);\n        result = result | result;\n      }\n      current_value = current_value + 0x68;\n    }\n    current_ptr = (int *)*current_ptr;\n  } while (current_ptr != (int *)0x0);\n  return result;\n}\n\n",
            "current_name": "process_data_000043a0",
            "entrypoint": "0x000043a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "iVar3": "current_value",
                "iVar5": "counter",
                "param_1": "base_address",
                "param_2": "callback_function",
                "piVar2": "current_ptr",
                "uVar1": "result",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004418": {
            "additional_data": {
                "DAT_00007998": {
                    "data_3": 1,
                    "relocation_data_3": 1
                },
                "DAT_000079b8": {
                    "data_1": 1,
                    "relocation_data_1": 1
                },
                "DAT_000079d8": {
                    "data_2": 1,
                    "relocation_data_2": 1
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "array": 1,
                    "elf_relocation_array": 1,
                    "elf_relocations": 3,
                    "elf_relocations_array": 1,
                    "rel_array": 3,
                    "relocated_section": 1,
                    "relocation_array": 6,
                    "relocation_entries": 2
                },
                "FUNC_000045e8": {
                    "execute_function_1": 2,
                    "function_1": 2,
                    "perform_task": 1,
                    "process_data": 1,
                    "process_data_part1": 1,
                    "process_relocated_bytes": 1
                },
                "FUNC_000045ec": {
                    "execute_function_2": 2,
                    "function_2": 2,
                    "perform_additional_task": 1,
                    "process_data2": 1,
                    "process_data_part2": 1,
                    "process_relocated_bytes_2": 1
                },
                "FUN_00004418": {
                    "process_and_extract_data": 1,
                    "process_and_handle_data": 1,
                    "process_and_retrieve_data": 1,
                    "process_and_return_data": 3,
                    "process_binary_data": 7,
                    "process_binary_data_from_elf": 1,
                    "process_binary_relocations": 1,
                    "process_data": 8,
                    "process_data_and_retrieve_value": 1,
                    "process_data_and_return_result": 1,
                    "process_elf_binary": 1,
                    "process_elf_data": 3,
                    "process_elf_relocations": 2
                },
                "dVar1": {
                    "array_index": 1,
                    "data_offset": 1,
                    "data_value": 1,
                    "elf_offset": 1,
                    "first_offset": 1,
                    "offset": 7,
                    "r_offset": 4,
                    "rel_offset": 2,
                    "reloc_offset": 1,
                    "relocation_offset": 9
                },
                "initialize_memory_and_process_elf_relocations_000042a4": {
                    "init_memory_and_process_relocations": 1,
                    "initialize_memory": 2,
                    "initialize_memory_and_process_elf_relocations": 1,
                    "initialize_memory_and_process_relocations": 7
                },
                "pbVar4": {
                    "binary_data_ptr": 1,
                    "byte_pointer": 3,
                    "byte_ptr": 8,
                    "byte_value": 2,
                    "byte_var": 1,
                    "byte_variable": 1,
                    "counter": 1,
                    "current_byte": 3,
                    "current_data_pointer": 1,
                    "data_pointer": 5,
                    "data_ptr": 2,
                    "pointer_byte": 2,
                    "pointer_to_byte": 1
                },
                "ppbVar3": {
                    "byte_pointer": 2,
                    "byte_ptr_ptr": 4,
                    "current_data_pointer": 2,
                    "current_pointer": 1,
                    "data_array": 2,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "pointer_array": 5,
                    "pointer_to_byte_array": 1,
                    "rel_ptr": 1,
                    "relocated_bytes": 1,
                    "relocated_pointer": 1,
                    "relocation_data": 3,
                    "relocation_data_pointer": 1,
                    "relocation_data_ptr": 1,
                    "relocation_pointer": 1,
                    "relocation_ptr": 1
                },
                "process_binary_data_00005e10": {
                    "process_binary_data": 5
                },
                "r_offset": {
                    "offset": 1
                },
                "uVar2": {
                    "data": 1,
                    "result": 26,
                    "return_value": 4
                }
            },
            "called": [
                "FUN_00005e10",
                "FUN_000042a4",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_00002d94"
            ],
            "code": "\nuint process_binary_data_from_elf_00004418(void)\n\n{\n  dword relocation_offset;\n  uint result;\n  byte **pointer_array;\n  byte *byte_ptr;\n  \n  relocation_offset = relocation_array[16].offset;\n  if ((relocation_array[16].offset != 0) &&\n     (*(int *)(relocation_array[16].offset + 0x18) == 0)) {\n    initialize_memory_and_process_relocations(relocation_array[16].offset);\n  }\n  pointer_array = *(byte ***)(relocation_offset + 4);\n  if ((relocation_offset != 0) && (*(int *)(relocation_offset + 0x18) == 0)) {\n    initialize_memory_and_process_relocations();\n  }\n  if (pointer_array == (byte **)&DAT_000079b8) {\n    pointer_array = *(byte ***)(relocation_offset + 4);\n  }\n  else if (pointer_array == (byte **)&DAT_000079d8) {\n    pointer_array = *(byte ***)(relocation_offset + 8);\n  }\n  else if (pointer_array == (byte **)&DAT_00007998) {\n    pointer_array = *(byte ***)(relocation_offset + 0xc);\n  }\n  if ((-1 < (int)pointer_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(pointer_array + 3) << 0x16))) {\n    FUNC_000045e8(pointer_array[0x16]);\n  }\n  byte_ptr = pointer_array[1];\n  pointer_array[1] = byte_ptr + -1;\n  if ((int)(byte_ptr + -1) < 0) {\n    result = process_binary_data(relocation_offset,pointer_array);\n  }\n  else {\n    byte_ptr = *pointer_array;\n    *pointer_array = byte_ptr + 1;\n    result = (uint)*byte_ptr;\n  }\n  if ((-1 < (int)pointer_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(pointer_array + 3) << 0x16))) {\n    FUNC_000045ec(pointer_array[0x16]);\n  }\n  return result;\n}\n\n",
            "current_name": "process_binary_data_from_elf_00004418",
            "entrypoint": "0x00004418",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array",
                "FUN_00004418": "process_binary_data_from_elf_00004418",
                "dVar1": "relocation_offset",
                "initialize_memory_and_process_elf_relocations_000042a4": "initialize_memory_and_process_relocations",
                "pbVar4": "byte_ptr",
                "ppbVar3": "pointer_array",
                "process_binary_data_00005e10": "process_binary_data",
                "r_offset": "offset",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000443c": {
            "additional_data": {
                "FUN_0000443c": {
                    "calculate_date": 5,
                    "calculate_date_components": 12,
                    "calculate_date_info": 1,
                    "calculate_date_parts": 1,
                    "calculate_date_time": 6,
                    "calculate_date_time_components": 2,
                    "convert_timestamp_to_date": 1,
                    "decode_date_time": 1,
                    "extract_date_time_components": 1,
                    "get_date_time_components": 1
                },
                "bVar9": {
                    "is_leap_year": 1,
                    "is_negative": 22,
                    "is_negative_day_of_week": 1,
                    "is_negative_days": 2,
                    "is_negative_offset": 1,
                    "negative_flag": 2
                },
                "calculate_combined_quotient_and_remainder_00006974": {
                    "calculate_quotient_and_remainder": 2
                },
                "iVar1": {
                    "additional_days": 1,
                    "adjustment": 2,
                    "combined_calculation": 1,
                    "combined_quotient": 1,
                    "combined_quotient_and_remainder": 3,
                    "combined_result": 1,
                    "combined_value": 1,
                    "extra_days": 1,
                    "leap_year_offset": 1,
                    "quotient": 2,
                    "quotient_and_remainder": 2,
                    "result": 1,
                    "temp": 3,
                    "temp_value": 2,
                    "temp_var": 2,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "var1": 2,
                    "var3": 1,
                    "var4": 1
                },
                "param_1": {
                    "date": 2,
                    "date_array": 1,
                    "date_data": 1,
                    "date_input": 3,
                    "date_params": 1,
                    "date_pointer": 2,
                    "date_time": 5,
                    "date_time_array": 1,
                    "date_time_components": 1,
                    "date_time_ptr": 1,
                    "date_time_value": 1,
                    "date_values": 1,
                    "datetime": 1,
                    "input_array": 1,
                    "input_date": 4,
                    "input_params": 2,
                    "input_time": 1,
                    "input_values": 1,
                    "timestamp": 1
                },
                "param_2": {
                    "components": 3,
                    "date_components": 4,
                    "date_info": 1,
                    "date_output": 1,
                    "date_result": 1,
                    "date_time_components": 1,
                    "decoded_date_time": 1,
                    "output": 1,
                    "output_array": 2,
                    "output_components": 1,
                    "output_date": 1,
                    "output_date_components": 2,
                    "output_date_time": 1,
                    "output_params": 2,
                    "result": 4,
                    "result_array": 3,
                    "result_array_ptr": 1,
                    "result_date": 1
                },
                "uVar2": {
                    "adjusted_value": 1,
                    "combined_quotient": 2,
                    "combined_quotient_and_remainder": 1,
                    "combined_value": 2,
                    "day_of_week": 2,
                    "days": 7,
                    "days_from_epoch": 1,
                    "days_of_week": 1,
                    "days_offset": 1,
                    "days_passed": 1,
                    "days_since_monday": 1,
                    "days_since_reference": 1,
                    "days_since_start_of_year": 1,
                    "remainder": 1,
                    "total_days": 3,
                    "var1": 1,
                    "var4": 1,
                    "year": 2,
                    "year_quotient": 1
                },
                "uVar3": {
                    "adjusted_days": 2,
                    "adjusted_quotient": 1,
                    "adjusted_value": 1,
                    "combined_normalized_value": 1,
                    "combined_remainder": 1,
                    "combined_value": 1,
                    "days": 2,
                    "days_in_year": 1,
                    "days_remaining": 1,
                    "days_since_epoch": 1,
                    "normalized_days": 2,
                    "remainder": 6,
                    "remaining_days": 3,
                    "temp_days": 1,
                    "total_days": 3,
                    "total_minutes": 1,
                    "total_seconds": 1,
                    "var5": 1,
                    "year_remainder": 1
                },
                "uVar3_prev": {
                    "days_since_epoch_prev": 1
                },
                "uVar4": {
                    "adjusted_days_divided": 1,
                    "adjusted_year": 1,
                    "day_of_year": 2,
                    "days": 3,
                    "extra_years": 1,
                    "hours": 1,
                    "leap_year_adjustment": 1,
                    "leap_year_cycle": 1,
                    "leap_year_cycles": 1,
                    "leap_year_days": 1,
                    "leap_years": 2,
                    "num_years": 1,
                    "quotient": 2,
                    "temp1": 4,
                    "temp_value1": 1,
                    "temp_var": 2,
                    "temp_var1": 1,
                    "tmp1": 1,
                    "total_days": 1,
                    "value1": 1,
                    "var6": 1,
                    "year_quotient": 1
                },
                "uVar5": {
                    "adjusted_year_mod": 1,
                    "centuries": 1,
                    "day_of_month": 1,
                    "days_in_year": 1,
                    "extra_days": 1,
                    "leap_year_days": 1,
                    "leap_year_factor": 1,
                    "leap_year_years": 1,
                    "leap_years": 3,
                    "minutes": 1,
                    "num_leap_years": 1,
                    "num_years": 1,
                    "remainder": 1,
                    "temp2": 4,
                    "temp_value2": 1,
                    "temp_var2": 3,
                    "tmp2": 1,
                    "value2": 1,
                    "var7": 1,
                    "year_factor": 1,
                    "years": 2,
                    "years_in_cycle": 1,
                    "years_since_start_of_year": 1
                },
                "uVar6": {
                    "arg1": 1,
                    "first_param": 1,
                    "input_time_start": 1,
                    "input_value1": 1,
                    "leap_year_days": 1,
                    "original_value1": 1,
                    "param1": 2,
                    "quotient": 3,
                    "start_value": 1,
                    "value1": 1,
                    "var1": 3,
                    "var2": 1,
                    "var6": 4,
                    "year": 10
                },
                "uVar7": {
                    "arg2": 1,
                    "days_in_year": 1,
                    "end_value": 1,
                    "input_time_end": 1,
                    "input_value2": 1,
                    "month": 10,
                    "original_value2": 1,
                    "param2": 2,
                    "remainder": 3,
                    "second_param": 1,
                    "value2": 1,
                    "var2": 3,
                    "var3": 1,
                    "var7": 4
                },
                "uVar8": {
                    "additional_days": 1,
                    "adjusted_days_offset": 1,
                    "approx_days_since_epoch": 1,
                    "calculated_value": 1,
                    "day_of_week": 2,
                    "days_in_month": 1,
                    "extra_days": 2,
                    "leap_year_adjustment": 1,
                    "leap_year_days": 1,
                    "temp3": 1,
                    "temp_value": 1,
                    "temp_value3": 1,
                    "temp_var": 2,
                    "temp_var3": 2,
                    "var3": 2,
                    "var8": 5,
                    "week_day": 2,
                    "week_of_year": 1,
                    "weekday": 2,
                    "years_difference": 1
                },
                "uVar9": {
                    "day_of_year": 1
                }
            },
            "called": [
                "FUN_00006974"
            ],
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculate_date_time_components_0000443c(undefined4 *date_time,uint *date_components)\n\n{\n  int combined_quotient_and_remainder;\n  uint days;\n  uint remainder;\n  uint temp1;\n  uint temp2;\n  undefined4 year;\n  undefined4 month;\n  uint var8;\n  bool is_negative;\n  \n  year = *date_time;\n  month = date_time[1];\n  combined_quotient_and_remainder = calculate_quotient_and_remainder(year,month,0x15180,0);\n  remainder = 0x15180;\n  calculate_quotient_and_remainder(year,month,0x15180,0);\n  is_negative = (int)remainder < 0;\n  if (is_negative) {\n    remainder = remainder + 0x15180;\n  }\n  if (is_negative) {\n    days = combined_quotient_and_remainder + 0xafa6b;\n  }\n  else {\n    days = combined_quotient_and_remainder + 0xafa6c;\n  }\n  date_components[2] = remainder / 0xe10;\n  date_components[1] = (remainder % 0xe10) / 0x3c;\n  *date_components = (remainder % 0xe10) % 0x3c;\n  date_components[6] = (days + 3) % 7;\n  remainder = days;\n  if ((int)days < 0) {\n    remainder = days - 0x23ab0;\n  }\n  days = (remainder / 0x23ab1) * -0x23ab1 + days;\n  temp1 = ((days / 0x8eac + days) - days / 0x5b4) - days / 0x23ab0;\n  temp2 = temp1 / 0x16d;\n  days = (temp2 / 100 - temp1 / 0x5b4) + days + temp2 * -0x16d;\n  var8 = days * 5 + 2;\n  temp1 = var8 / 0x99;\n  if (var8 < 0x5fa) {\n    combined_quotient_and_remainder = 2;\n  }\n  else {\n    combined_quotient_and_remainder = -10;\n  }\n  var8 = temp1 + combined_quotient_and_remainder;\n  combined_quotient_and_remainder = (remainder / 0x23ab1) * 400 + temp2;\n  if (var8 < 2) {\n    combined_quotient_and_remainder = combined_quotient_and_remainder + 1;\n  }\n  if (days < 0x132) {\n    if (((temp2 & 3) == 0) && (temp2 != (temp2 / 100) * 100)) {\n      remainder = 1;\n    }\n    else {\n      remainder = (uint)(temp2 % 400 == 0);\n    }\n    remainder = days + 0x3b + remainder;\n  }\n  else {\n    remainder = days - 0x132;\n  }\n  date_components[7] = remainder;\n  date_components[3] = (days + 1) - (temp1 * 0x99 + 2) / 5;\n  date_components[4] = var8;\n  date_components[5] = combined_quotient_and_remainder - 0x76c;\n  date_components[8] = 0;\n  return date_components;\n}\n\n",
            "current_name": "calculate_date_time_components_0000443c",
            "entrypoint": "0x0000443c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000443c": "calculate_date_time_components_0000443c",
                "bVar9": "is_negative",
                "calculate_combined_quotient_and_remainder_00006974": "calculate_quotient_and_remainder",
                "iVar1": "combined_quotient_and_remainder",
                "param_1": "date_time",
                "param_2": "date_components",
                "uVar2": "days",
                "uVar3": "remainder",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "year",
                "uVar7": "month",
                "uVar8": "var8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000459c": {
            "additional_data": {
                "FUN_0000459c": {
                    "execute_all_handlers": 1,
                    "execute_and_handle_failures": 1,
                    "execute_code_blocks": 4,
                    "execute_function": 1,
                    "execute_function_and_fail_check": 1,
                    "execute_function_and_handle_assertion": 1,
                    "execute_function_and_handle_assertion_failure": 1,
                    "execute_function_and_handle_failure": 1,
                    "execute_function_array": 1,
                    "execute_function_chain": 1,
                    "execute_function_list": 1,
                    "execute_function_pointers": 1,
                    "execute_function_sequence": 3,
                    "execute_function_set": 1,
                    "execute_functions": 5,
                    "execute_functions_twice": 1,
                    "execute_handlers": 3,
                    "execute_tasks": 1,
                    "handle_assertion_and_exec": 1,
                    "run_function_sequence": 1
                },
                "handle_assertion_failure_00000410": {
                    "handle_assertion_failure": 3
                },
                "iVar2": {
                    "block_index": 1,
                    "counter": 1,
                    "handler_index": 1,
                    "index": 17,
                    "iteration_count": 4,
                    "iteration_counter": 2,
                    "iterations": 1,
                    "iterator": 3,
                    "num_functions": 1
                },
                "ppcVar1": {
                    "code_block_pointer": 1,
                    "code_block_ptrs": 1,
                    "code_pointer": 1,
                    "function_array": 4,
                    "function_list": 1,
                    "function_pointer": 7,
                    "function_pointer_array": 5,
                    "function_pointers": 4,
                    "function_ptr": 2,
                    "function_ptr_array": 1,
                    "handler": 2,
                    "handler_list": 1,
                    "handler_ptr": 1
                }
            },
            "called": [
                "FUN_00000410"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid execute_functions_twice_0000459c(void)\n\n{\n  code **function_pointer;\n  int index;\n  \n  function_pointer = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_pointer)();\n    function_pointer = function_pointer + 1;\n  }\n  handle_assertion_failure();\n  function_pointer = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_pointer)();\n    function_pointer = function_pointer + 1;\n  }\n  return;\n}\n\n",
            "current_name": "execute_functions_twice_0000459c",
            "entrypoint": "0x0000459c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000459c": "execute_functions_twice_0000459c",
                "handle_assertion_failure_00000410": "handle_assertion_failure",
                "iVar2": "index",
                "ppcVar1": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000045e4": {
            "called": [],
            "calling": [
                "FUN_00004314"
            ],
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000045e4",
            "entrypoint": "0x000045e4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000045e8": {
            "called": [],
            "calling": [
                "FUN_000057f8",
                "FUN_00004cb4",
                "FUN_00004db8",
                "FUN_00004418",
                "FUN_00004274",
                "FUN_00005790",
                "FUN_00005fec",
                "FUN_00004158",
                "FUN_0000428c"
            ],
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000045e8",
            "entrypoint": "0x000045e8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000045ec": {
            "called": [],
            "calling": [
                "FUN_000057f8",
                "FUN_00004cb4",
                "FUN_00004db8",
                "FUN_00005ff8",
                "FUN_00004418",
                "FUN_00004280",
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_0000579c"
            ],
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000045ec",
            "entrypoint": "0x000045ec",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000045ee": {
            "additional_data": {
                "FUN_000045ee": {
                    "copy_and_reverse": 7,
                    "copy_and_reverse_array": 1,
                    "copy_array": 1,
                    "copy_data": 4,
                    "copy_range": 6,
                    "copy_region": 1,
                    "copy_reverse": 1,
                    "copy_segment": 1,
                    "copy_within": 3,
                    "copy_within_indices": 1,
                    "reverse_copy": 4,
                    "reverse_substring": 1
                },
                "param_1": {
                    "dest": 11,
                    "dest_ptr": 1,
                    "dest_start": 1,
                    "destination": 4,
                    "source": 9,
                    "source_array": 2,
                    "source_pointer": 1,
                    "string_start": 1,
                    "target": 1
                },
                "param_2": {
                    "dest": 1,
                    "dest_pointer": 1,
                    "destination": 8,
                    "destination_array": 2,
                    "source": 5,
                    "src": 10,
                    "src_ptr": 1,
                    "src_start": 1,
                    "start": 1,
                    "string_end": 1
                },
                "param_3": {
                    "array_length": 1,
                    "end": 1,
                    "len": 1,
                    "length": 23,
                    "size": 5
                },
                "puVar1": {
                    "current_start": 1,
                    "dest_end": 9,
                    "dest_end_ptr": 1,
                    "dest_iter": 1,
                    "dest_ptr": 5,
                    "dst_pointer": 1,
                    "source_end": 4,
                    "source_ptr": 2,
                    "src": 1,
                    "src_pointer": 2,
                    "src_ptr": 3
                },
                "puVar2": {
                    "current_end": 1,
                    "dest_end": 1,
                    "dest_pointer": 2,
                    "dest_ptr": 2,
                    "destination_end": 3,
                    "destination_ptr": 1,
                    "dst": 1,
                    "dst_ptr": 2,
                    "source_ptr": 1,
                    "src_end": 9,
                    "src_end_ptr": 1,
                    "src_iter": 1,
                    "src_pointer": 1,
                    "src_ptr": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_00003ff4"
            ],
            "code": "\nvoid copy_and_reverse_array_000045ee(undefined *dest,undefined *src,int length)\n\n{\n  undefined *dest_end;\n  undefined *src_end;\n  \n  src_end = src + length;\n  if ((src < dest) && (dest < src_end)) {\n    dest_end = dest + length;\n    while (dest_end != dest) {\n      src_end = src_end + -1;\n      dest_end = dest_end + -1;\n      *dest_end = *src_end;\n    }\n  }\n  else {\n    dest = dest + -1;\n    for (; src != src_end; src = src + 1) {\n      dest = dest + 1;\n      *dest = *src;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "copy_and_reverse_array_000045ee",
            "entrypoint": "0x000045ee",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_array_000045ee",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "dest_end",
                "puVar2": "src_end"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004622": {
            "additional_data": {
                "FUN_00004622": {
                    "fill_array_with": 1,
                    "fill_array_with_value": 1,
                    "fill_memory": 8,
                    "fill_memory_with": 1,
                    "fill_memory_with_byte": 1,
                    "fill_memory_with_value": 1,
                    "fill_with_value": 1,
                    "initialize_memory": 10,
                    "initialize_memory_block": 1,
                    "memset": 3,
                    "memset_array": 2,
                    "set_memory_block": 1
                },
                "param_1": {
                    "array": 5,
                    "dest": 1,
                    "destination": 6,
                    "memory": 13,
                    "memory_block": 2,
                    "memory_pointer": 1,
                    "memory_start": 2,
                    "ptr": 1
                },
                "param_2": {
                    "byte_value": 1,
                    "initial_value": 4,
                    "value": 25,
                    "value_to_fill": 1
                },
                "param_3": {
                    "block_size": 1,
                    "count": 1,
                    "length": 8,
                    "memory_size": 1,
                    "num_elements": 1,
                    "size": 19
                },
                "puVar1": {
                    "end_address": 4,
                    "end_memory": 2,
                    "end_of_block": 1,
                    "end_of_memory": 3,
                    "end_pointer": 4,
                    "end_ptr": 7,
                    "memory_end": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00004248",
                "FUN_00004314",
                "FUN_00003ec4",
                "FUN_000041f4",
                "FUN_00003ff4",
                "FUN_0000305c"
            ],
            "code": "\nvoid fill_array_with_value_00004622(undefined *memory,undefined value,int size)\n\n{\n  undefined *end_ptr;\n  \n  end_ptr = memory + size;\n  for (; memory != end_ptr; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "current_name": "fill_array_with_value_00004622",
            "entrypoint": "0x00004622",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004622": "fill_array_with_value_00004622",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004634": {
            "additional_data": {
                "DAT_000079fc": {
                    "month_lengths": 1
                },
                "FUN_00004634": {
                    "calculate_date_offset": 1,
                    "improve_date": 1,
                    "update_date": 17,
                    "update_date_and_time": 1,
                    "update_date_time": 10,
                    "update_dates": 1
                },
                "bVar5": {
                    "is_negative": 25,
                    "negative": 1,
                    "negative_days": 2,
                    "negative_flag": 1
                },
                "divide_and_store_remainder_00005584": {
                    "divide_and_store_remainder": 3
                },
                "iVar1": {
                    "current_month_days": 2,
                    "days": 2,
                    "days_in_month": 9,
                    "days_to_add": 3,
                    "days_to_increment": 1,
                    "month_days": 2,
                    "month_index": 2,
                    "month_offset": 3,
                    "months_in_year": 2,
                    "months_to_add": 1,
                    "num_days_in_month": 1
                },
                "iVar4": {
                    "current_year": 4,
                    "days_in_month": 11,
                    "days_in_year": 3,
                    "default_month_days": 1,
                    "final_month_days": 1,
                    "is_leap_year": 1,
                    "leap_days": 1,
                    "leap_year": 1,
                    "month_days": 1,
                    "month_index": 2,
                    "month_length": 2,
                    "months_in_year": 1,
                    "num_days_in_year": 1,
                    "num_months": 1
                },
                "local_1c": {
                    "current_day": 4,
                    "current_month": 1,
                    "day_of_month": 1,
                    "days_remaining": 1,
                    "remainder": 21,
                    "remaining_days": 2
                },
                "local_20": {
                    "division_result": 1,
                    "quotient": 21,
                    "quotient_array": 2,
                    "quotient_remainder": 1,
                    "remainder": 2,
                    "remainder_arr": 1,
                    "remainder_array": 1,
                    "temp_array": 1
                },
                "param_1": {
                    "date": 7,
                    "date_and_time": 1,
                    "date_arr": 1,
                    "date_array": 12,
                    "date_time": 7,
                    "date_time_array": 2,
                    "dates": 1
                },
                "param_2": {
                    "base_day": 1,
                    "date_time_size": 1,
                    "day_of_month": 1,
                    "days": 5,
                    "days_offset": 1,
                    "days_to_add": 14,
                    "increment": 2,
                    "initial_day": 1,
                    "num_days": 3,
                    "num_of_days": 1,
                    "year": 1
                },
                "param_3": {
                    "base_month": 1,
                    "constant": 2,
                    "days_from_start": 1,
                    "extra_days": 1,
                    "flag": 2,
                    "is_leap_year": 1,
                    "is_negative": 1,
                    "leap_year_flag": 1,
                    "max_days_in_month": 1,
                    "param_3": 4,
                    "remainder": 1,
                    "stack": 1,
                    "temp": 1,
                    "temp_var": 1,
                    "temp_variable": 1,
                    "unknown": 4,
                    "unknown_param": 1,
                    "unknown_value": 1,
                    "value": 1,
                    "variable": 1,
                    "weekday_offset": 1,
                    "year": 1
                },
                "uStack_18": {
                    "constant_2": 1,
                    "extra_days_stack": 1,
                    "flag_copy": 1,
                    "param_3": 3,
                    "stack_18": 2,
                    "stack_frame": 1,
                    "stack_param": 1,
                    "stack_var": 1,
                    "stack_variable": 1,
                    "temp": 3,
                    "temp_stack": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_variable2": 1,
                    "unknown": 3,
                    "unknown_stack": 1,
                    "unknown_stack_var": 1,
                    "unused": 6
                },
                "uVar2": {
                    "current_day": 5,
                    "current_day_of_month": 1,
                    "current_index": 1,
                    "day": 1,
                    "day_of_month": 2,
                    "days_added": 1,
                    "days_remaining": 2,
                    "days_to_add": 1,
                    "month": 3,
                    "months": 1,
                    "remainder": 1,
                    "remaining_days": 1,
                    "temp": 1,
                    "temp_value1": 1,
                    "temp_var1": 1,
                    "temp_variable3": 1,
                    "total_days": 2,
                    "updated_day": 1,
                    "year": 1,
                    "year_day": 1,
                    "year_offset": 1,
                    "year_temp": 1
                },
                "uVar3": {
                    "current_month": 5,
                    "current_year": 2,
                    "days": 1,
                    "increment": 1,
                    "leap_year": 2,
                    "leap_year_check": 1,
                    "leap_year_count": 2,
                    "leap_year_value": 1,
                    "leap_year_years": 1,
                    "leap_years": 1,
                    "modified_month_days": 1,
                    "month": 1,
                    "month_temp": 1,
                    "temp_value2": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_variable4": 1,
                    "updated_month": 1,
                    "year": 6
                }
            },
            "called": [
                "FUN_00005584"
            ],
            "calling": [
                "FUN_000047e4"
            ],
            "code": "\nvoid update_date_and_time_00004634(uint *date_array,uint days_to_add,undefined4 param_3)\n\n{\n  int days_in_month;\n  uint current_day;\n  uint year;\n  int days_in_month;\n  bool is_negative;\n  uint *quotient;\n  uint remainder;\n  undefined4 unused;\n  \n  quotient = date_array;\n  remainder = days_to_add;\n  unused = param_3;\n  if (0x3b < *date_array) {\n    divide_and_store_remainder(&quotient,*date_array,0x3c);\n    current_day = date_array[1] + (int)quotient;\n    date_array[1] = current_day;\n    if ((int)remainder < 0) {\n      current_day = current_day - 1;\n      *date_array = remainder + 0x3c;\n    }\n    else {\n      *date_array = remainder;\n    }\n    if ((int)remainder < 0) {\n      date_array[1] = current_day;\n    }\n  }\n  if (0x3b < date_array[1]) {\n    divide_and_store_remainder(&quotient,date_array[1],0x3c);\n    is_negative = (int)remainder < 0;\n    year = date_array[2] + (int)quotient;\n    date_array[2] = year;\n    current_day = remainder;\n    if (is_negative) {\n      current_day = remainder + 0x3c;\n      year = year - 1;\n    }\n    if (!is_negative) {\n      date_array[1] = current_day;\n    }\n    if (is_negative) {\n      date_array[1] = current_day;\n    }\n    if (is_negative) {\n      date_array[2] = year;\n    }\n  }\n  if (0x17 < date_array[2]) {\n    divide_and_store_remainder(&quotient,date_array[2],0x18);\n    is_negative = (int)remainder < 0;\n    year = date_array[3] + (int)quotient;\n    date_array[3] = year;\n    current_day = remainder;\n    if (is_negative) {\n      current_day = remainder + 0x18;\n      year = year - 1;\n    }\n    if (!is_negative) {\n      date_array[2] = current_day;\n    }\n    if (is_negative) {\n      date_array[2] = current_day;\n    }\n    if (is_negative) {\n      date_array[3] = year;\n    }\n  }\n  if (0xb < date_array[4]) {\n    divide_and_store_remainder(&quotient,date_array[4],0xc);\n    is_negative = (int)remainder < 0;\n    current_day = date_array[5] + (int)quotient;\n    date_array[5] = current_day;\n    if (is_negative) {\n      remainder = remainder + 0xc;\n      current_day = current_day - 1;\n    }\n    if (!is_negative) {\n      date_array[4] = remainder;\n    }\n    if (is_negative) {\n      date_array[4] = remainder;\n    }\n    if (is_negative) {\n      date_array[5] = current_day;\n    }\n  }\n  current_day = date_array[5];\n  if ((current_day & 3) == 0) {\n    if (current_day == (current_day / 100) * 100) {\n      if ((current_day + 0x76c) % 400 == 0) {\n        days_in_month = 0x1d;\n      }\n      else {\n        days_in_month = 0x1c;\n      }\n    }\n    else {\n      days_in_month = 0x1d;\n    }\n  }\n  else {\n    days_in_month = 0x1c;\n  }\n  if ((int)date_array[3] < 1) {\n    while ((int)date_array[3] < 1) {\n      current_day = date_array[4];\n      date_array[4] = current_day - 1;\n      if (current_day - 1 == 0xffffffff) {\n        year = date_array[5];\n        current_day = year - 1;\n        date_array[4] = 0xb;\n        date_array[5] = current_day;\n        if ((current_day & 3) == 0) {\n          if (current_day == (current_day / 100) * 100) {\n            if ((year + 0x76b) % 400 == 0) {\n              days_in_month = 0x1d;\n            }\n            else {\n              days_in_month = 0x1c;\n            }\n          }\n          else {\n            days_in_month = 0x1d;\n          }\n        }\n        else {\n          days_in_month = 0x1c;\n        }\n      }\n      days_in_month = days_in_month;\n      if (date_array[4] != 1) {\n        days_in_month = (&DAT_000079fc)[date_array[4]];\n      }\n      date_array[3] = days_in_month + date_array[3];\n    }\n  }\n  else {\n    while( true ) {\n      current_day = date_array[4];\n      days_in_month = days_in_month;\n      if (current_day != 1) {\n        days_in_month = (&DAT_000079fc)[current_day];\n      }\n      if ((int)date_array[3] <= days_in_month) break;\n      date_array[3] = date_array[3] - days_in_month;\n      date_array[4] = current_day + 1;\n      if (current_day + 1 == 0xc) {\n        year = date_array[5];\n        current_day = year + 1;\n        date_array[4] = 0;\n        date_array[5] = current_day;\n        if ((current_day & 3) == 0) {\n          if (current_day % 100 == 0) {\n            if ((year + 0x76d) % 400 == 0) {\n              days_in_month = 0x1d;\n            }\n            else {\n              days_in_month = 0x1c;\n            }\n          }\n          else {\n            days_in_month = 0x1d;\n          }\n        }\n        else {\n          days_in_month = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_date_and_time_00004634",
            "entrypoint": "0x00004634",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004634": "update_date_and_time_00004634",
                "bVar5": "is_negative",
                "divide_and_store_remainder_00005584": "divide_and_store_remainder",
                "iVar1": "days_in_month",
                "iVar4": "days_in_month",
                "local_1c": "remainder",
                "local_20": "quotient",
                "param_1": "date_array",
                "param_2": "days_to_add",
                "uStack_18": "unused",
                "uVar2": "current_day",
                "uVar3": "year"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000047e4": {
            "additional_data": {
                "DAT_00007a2c": {
                    "days_in_month": 1
                },
                "FUN_000047e4": {
                    "calculate_adjusted_date": 3,
                    "calculate_adjusted_date_time": 1,
                    "calculate_and_update_date": 1,
                    "calculate_date": 4,
                    "calculate_date_and_time": 1,
                    "calculate_date_difference": 1,
                    "calculate_modified_date_and_time": 1,
                    "calculate_new_date": 3,
                    "calculate_new_date_and_time": 1,
                    "calculate_next_date": 3,
                    "calculate_updated_date": 7,
                    "calculate_updated_date_and_time": 1,
                    "update_date_and_time": 1,
                    "update_date_time": 2,
                    "update_date_time_and_weekday": 1
                },
                "bVar16": {
                    "flag": 1,
                    "is_condition_true": 1,
                    "is_divisible_by4": 1,
                    "is_leap": 1,
                    "is_leap_century": 1,
                    "is_leap_year": 5,
                    "is_leap_year2": 1,
                    "is_leap_year_condition": 1,
                    "is_var16": 1,
                    "temp_flag": 1,
                    "temp_var10": 1,
                    "temp_var13": 2,
                    "throwaway_var": 1,
                    "var16": 1,
                    "var_16": 1
                },
                "bVar17": {
                    "is_backward_update": 1,
                    "is_leap": 1,
                    "is_leap_year": 1,
                    "is_leap_year_condition": 1,
                    "is_leap_year_temp": 1,
                    "temp_var13": 1
                },
                "bVar18": {
                    "is_day_of_week_valid": 1,
                    "is_leap": 1,
                    "is_leap_year_condition2": 1
                },
                "iVar11": {
                    "current_days": 1,
                    "day_of_week": 1,
                    "day_of_year": 1,
                    "days_count": 1,
                    "days_elapsed_current_year": 1,
                    "days_from_year_start": 1,
                    "days_in_months": 1,
                    "days_offset": 1,
                    "days_passed": 2,
                    "days_since1900": 1,
                    "days_to_add": 1,
                    "days_to_modify": 1,
                    "increment": 1,
                    "initial_days": 1,
                    "leap_year_days": 1,
                    "num_leap_years": 1,
                    "num_of_days": 1,
                    "temp8": 1,
                    "temp_var11": 1,
                    "temp_var8": 4,
                    "total_days": 2,
                    "total_years": 1,
                    "var11": 3,
                    "year_days": 1
                },
                "iVar5": {
                    "day_adjustment": 1,
                    "day_of_week": 5,
                    "days_in_month": 1,
                    "days_in_year": 1,
                    "days_of_week_offset": 1,
                    "extra_days": 1,
                    "leap_year_adjustment": 1,
                    "leap_year_offset": 1,
                    "leap_years": 1,
                    "temp2": 3,
                    "temp_days2": 1,
                    "temp_var2": 6,
                    "temp_var5": 2,
                    "temp_var8": 1,
                    "var5": 3,
                    "var_5": 1,
                    "year_offset": 1
                },
                "iVar6": {
                    "day_difference": 1,
                    "day_of_week": 1,
                    "day_of_week_temp": 1,
                    "days_difference": 2,
                    "days_in_leap_year": 1,
                    "days_in_week": 1,
                    "days_of_week_offset2": 1,
                    "leap_year_offset_temp": 1,
                    "temp3": 3,
                    "temp_days": 1,
                    "temp_days3": 1,
                    "temp_var1": 3,
                    "temp_var3": 6,
                    "temp_var6": 2,
                    "temp_var9": 1,
                    "tmp1": 1,
                    "var6": 3,
                    "var_6": 1
                },
                "iVar7": {
                    "adjusted_date_time": 1,
                    "adjusted_days": 1,
                    "carry": 1,
                    "day": 1,
                    "day_of_week": 2,
                    "days_elapsed": 1,
                    "modified_date": 1,
                    "new_day_of_week": 1,
                    "new_year_offset": 1,
                    "temp4": 2,
                    "temp_days": 1,
                    "temp_var2": 1,
                    "temp_var4": 5,
                    "temp_var7": 1,
                    "tmp2": 1,
                    "total_days": 2,
                    "total_days_lower": 1,
                    "updated_day_of_week": 1,
                    "updated_days": 1,
                    "var7": 3,
                    "var_7": 1
                },
                "lVar1": {
                    "calculation_result": 1,
                    "days_since1900": 1,
                    "days_since_epoch": 1,
                    "days_to_add": 1,
                    "product_var1": 1,
                    "total_days": 11,
                    "total_minutes": 1,
                    "total_seconds": 12
                },
                "lVar2": {
                    "adjusted_days": 1,
                    "adjusted_seconds": 1,
                    "adjusted_total_days": 1,
                    "days_updated": 1,
                    "new_days_since1900": 1,
                    "new_days_since_epoch": 1,
                    "new_total_days": 1,
                    "new_total_seconds": 5,
                    "product_var2": 1,
                    "temp_calculation_result": 1,
                    "total_seconds": 1,
                    "updated_total_days": 7,
                    "updated_total_minutes": 1,
                    "updated_total_seconds": 6
                },
                "param_1": {
                    "date": 6,
                    "date_and_time": 1,
                    "date_and_time_values": 1,
                    "date_array": 4,
                    "date_components": 1,
                    "date_info": 3,
                    "date_params": 5,
                    "date_time_array": 3,
                    "date_time_list": 1,
                    "date_time_params": 1,
                    "date_values": 2,
                    "input_array": 1,
                    "input_parameters": 1,
                    "input_params": 1
                },
                "piVar3": {
                    "memory_address": 25,
                    "memory_address_array": 2,
                    "memory_address_ptr": 1,
                    "memory_data": 1,
                    "memory_info": 1,
                    "memory_ptr": 1
                },
                "uVar10": {
                    "days_to_subtract": 1,
                    "end_year_offset": 1,
                    "last_leap_year": 1,
                    "leap_year_check": 1,
                    "loop_limit": 1,
                    "memory_address14": 1,
                    "memory_value2": 2,
                    "previous_year": 1,
                    "start_month_days": 1,
                    "start_of_leap_year": 1,
                    "starting_year": 1,
                    "temp6": 1,
                    "temp7": 2,
                    "temp_var10": 2,
                    "temp_var4": 1,
                    "temp_var6": 1,
                    "temp_var7": 5,
                    "var10": 3,
                    "var2": 1,
                    "var_10": 1,
                    "year_start": 1,
                    "year_validation1": 1
                },
                "uVar12": {
                    "current_day": 1,
                    "current_day_of_year": 1,
                    "current_year": 3,
                    "date": 1,
                    "day_of_year": 1,
                    "days_offset": 1,
                    "memory_value3": 1,
                    "offset": 1,
                    "original_total_seconds": 1,
                    "param5": 2,
                    "param_1_5": 1,
                    "start_month": 1,
                    "temp9": 1,
                    "temp_var12": 2,
                    "temp_var7": 1,
                    "temp_var9": 2,
                    "var12": 3,
                    "year": 5,
                    "year_value": 2
                },
                "uVar13": {
                    "is_leap_year": 9,
                    "is_negative": 6,
                    "is_positive": 2,
                    "is_year_positive": 1,
                    "temp10": 1,
                    "temp_var": 1,
                    "temp_var10": 2,
                    "temp_var13": 2,
                    "temp_var5": 1,
                    "temp_var8": 2,
                    "temp_var9": 1,
                    "var13": 3
                },
                "uVar14": {
                    "day_of_month": 1,
                    "day_of_week": 2,
                    "day_of_week1": 1,
                    "days_from_current_year_start": 1,
                    "days_of_week_offset": 1,
                    "days_offset": 1,
                    "days_to_add": 1,
                    "days_to_sunday": 1,
                    "memory_address8": 1,
                    "month": 1,
                    "num_days": 1,
                    "param8": 2,
                    "param_1_8": 1,
                    "previous_day": 1,
                    "temp": 1,
                    "temp11": 1,
                    "temp_var10": 1,
                    "temp_var11": 2,
                    "temp_var14": 2,
                    "temp_var6": 1,
                    "temp_var9": 1,
                    "threshold": 1,
                    "var14": 3,
                    "var_14": 1,
                    "year_validation2": 1
                },
                "uVar15": {
                    "adjusted_days_lower": 1,
                    "adjusted_seconds_lower": 1,
                    "checked_total_seconds": 1,
                    "current_day": 2,
                    "day_of_week_temp_2": 1,
                    "days": 1,
                    "days_since1900": 1,
                    "is_not_zero": 1,
                    "lower_bits": 1,
                    "num_days": 1,
                    "result": 2,
                    "seconds": 1,
                    "seconds_portion": 1,
                    "temp12": 1,
                    "temp_var11": 1,
                    "temp_var12": 2,
                    "temp_var15": 1,
                    "temp_var7": 1,
                    "temp_var9": 2,
                    "total_seconds_lo": 1,
                    "updated_total_days_lower": 1,
                    "updated_total_days_modulo": 1,
                    "updated_total_minutes_upper": 1,
                    "var15": 3,
                    "var_15": 1
                },
                "uVar16": {
                    "is_forward_update": 1,
                    "is_leap": 1,
                    "is_leap_year": 4,
                    "result_day_of_week": 1,
                    "temp_boolean": 1,
                    "temp_var12": 1
                },
                "uVar18": {
                    "temp_var14": 1
                },
                "uVar4": {
                    "current_month": 1,
                    "day_of_week_temp": 1,
                    "day_of_year": 1,
                    "days_in_month": 1,
                    "month_end_offset": 1,
                    "remainder": 4,
                    "temp1": 3,
                    "temp_var1": 6,
                    "temp_var2": 1,
                    "temp_var4": 2,
                    "temp_year_mod100": 1,
                    "upper_bits": 1,
                    "var4": 3,
                    "var_4": 1,
                    "year": 4
                },
                "uVar8": {
                    "current_year": 1,
                    "current_year_days": 1,
                    "days_difference": 1,
                    "days_from_year_start_temp": 1,
                    "days_to_subtract": 1,
                    "first_leap_year": 1,
                    "last_year": 1,
                    "memory_address10": 1,
                    "memory_value1": 2,
                    "previous_year_days": 1,
                    "start_of_year": 1,
                    "start_year_days": 1,
                    "start_year_offset": 1,
                    "temp4": 1,
                    "temp5": 2,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var5": 5,
                    "temp_var8": 2,
                    "var8": 3,
                    "var_8": 1,
                    "year_start_offset": 1
                },
                "uVar9": {
                    "counter": 1,
                    "current_year": 1,
                    "days_to_add": 1,
                    "i": 1,
                    "is_negative": 1,
                    "loop_index": 2,
                    "loop_var": 1,
                    "loop_variable": 1,
                    "previous_is_negative": 1,
                    "start_of_century": 1,
                    "temp5": 1,
                    "temp6": 2,
                    "temp_var1": 1,
                    "temp_var2": 2,
                    "temp_var5": 1,
                    "temp_var6": 5,
                    "temp_var9": 2,
                    "temp_year": 2,
                    "var9": 3,
                    "var_9": 1
                }
            },
            "called": [
                "FUN_00004634",
                "FUN_000050e8",
                "FUN_00004f98",
                "FUN_000056b0",
                "FUN_000050f4",
                "FUN_00005100"
            ],
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculate_updated_date_and_time_000047e4(int *date)\n\n{\n  longlong total_seconds;\n  longlong updated_total_days;\n  int *memory_address;\n  uint temp_var1;\n  int temp_var2;\n  int temp_var3;\n  int temp_var4;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  int temp_var8;\n  uint year;\n  uint is_leap_year;\n  uint var14;\n  uint var15;\n  bool is_leap_year;\n  \n  memory_address = (int *)get_memory_address_000056b0();\n  update_date_and_time_00004634(date);\n  year = date[5];\n  temp_var8 = date[3] + -1 + *(int *)(&DAT_00007a2c + date[4] * 4);\n  if (((1 < date[4]) && ((year & 3) == 0)) &&\n     ((year != (year / 100) * 100 || (year + 0x76c == ((year + 0x76c) / 400) * 400)))) {\n    temp_var8 = temp_var8 + 1;\n  }\n  date[7] = temp_var8;\n  if (20000 < (int)&DAT_00002710 + year) {\n    temp_var4 = -1;\n    temp_var2 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)year < 0x47) {\n    if (year != 0x46) {\n      for (temp_var6 = 0x45; (int)year < (int)temp_var6; temp_var6 = temp_var6 - 1) {\n        if ((temp_var6 & 3) == 0) {\n          if (temp_var6 == (temp_var6 / 100) * 100) {\n            if ((temp_var6 + 0x76c) % 400 == 0) {\n              temp_var4 = 0x16e;\n            }\n            else {\n              temp_var4 = 0x16d;\n            }\n          }\n          else {\n            temp_var4 = 0x16e;\n          }\n        }\n        else {\n          temp_var4 = 0x16d;\n        }\n        temp_var8 = temp_var8 - temp_var4;\n      }\n      if ((temp_var6 & 3) == 0) {\n        if (year == (year / 100) * 100) {\n          temp_var4 = 0x16d;\n          if ((year + 0x76c) % 400 == 0) {\n            temp_var4 = 0x16e;\n          }\n        }\n        else {\n          temp_var4 = 0x16e;\n        }\n      }\n      else {\n        temp_var4 = 0x16d;\n      }\n      temp_var8 = temp_var8 - temp_var4;\n    }\n  }\n  else {\n    temp_var6 = 0x46;\n    do {\n      if ((temp_var6 & 3) == 0) {\n        if (temp_var6 % 100 == 0) {\n          if ((temp_var6 + 0x76c) % 400 == 0) {\n            temp_var4 = 0x16e;\n          }\n          else {\n            temp_var4 = 0x16d;\n          }\n        }\n        else {\n          temp_var4 = 0x16e;\n        }\n      }\n      else {\n        temp_var4 = 0x16d;\n      }\n      temp_var6 = temp_var6 + 1;\n      temp_var8 = temp_var8 + temp_var4;\n    } while (year != temp_var6);\n  }\n  total_seconds = (longlong)temp_var8 * 0x15180 + (longlong)(date[2] * 0xe10 + date[1] * 0x3c + *date)\n  ;\n  var15 = (uint)total_seconds;\n  temp_var4 = (int)((ulonglong)total_seconds >> 0x20);\n  get_memory_address_000050e8();\n  process_binary_data_and_initialize_00005100();\n  temp_var6 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    year = memory_address[10];\n    temp_var4 = (uint)total_seconds + year;\n    temp_var2 = (int)((ulonglong)total_seconds >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)total_seconds,year);\n  }\n  else {\n    var14 = date[8];\n    is_leap_year = var14;\n    if (0 < (int)var14) {\n      is_leap_year = 1;\n    }\n    if ((memory_address[1] == date[5] + 0x76c) || (temp_var2 = calculate_day_of_the_week_00004f98(), temp_var2 != 0)) {\n      temp_var7 = memory_address[0x14];\n      temp_var1 = memory_address[0x12];\n      temp_var5 = memory_address[10];\n      temp_var6 = temp_var1 - temp_var5;\n      temp_var2 = (memory_address[0x13] - ((int)temp_var5 >> 0x1f)) - (uint)(temp_var1 < temp_var5);\n      if (((int)((temp_var4 - temp_var2) - (uint)(var15 < temp_var6)) < 0 ==\n           (SBORROW4(temp_var4,temp_var2) != SBORROW4(temp_var4 - temp_var2,(uint)(var15 < temp_var6)))) &&\n         (temp_var3 = (memory_address[0x13] - ((int)temp_var7 >> 0x1f)) - (uint)(temp_var1 < temp_var7),\n         is_leap_year = var15 < temp_var1 - temp_var7,\n         (int)((temp_var4 - temp_var3) - (uint)is_leap_year) < 0 !=\n         (SBORROW4(temp_var4,temp_var3) != SBORROW4(temp_var4 - temp_var3,(uint)is_leap_year)))) goto LAB_00004a88;\n      temp_var1 = memory_address[8] - temp_var7;\n      temp_var3 = (memory_address[9] - ((int)temp_var7 >> 0x1f)) - (uint)((uint)memory_address[8] < temp_var7);\n      if (*memory_address != 0) {\n        if ((int)((temp_var4 - temp_var3) - (uint)(var15 < temp_var1)) < 0 ==\n            (SBORROW4(temp_var4,temp_var3) != SBORROW4(temp_var4 - temp_var3,(uint)(var15 < temp_var1))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        temp_var6 = 0;\n        if ((int)var14 < 0) goto LAB_00004934;\nLAB_00004a14:\n        var15 = is_leap_year ^ temp_var6;\n        is_leap_year = temp_var6;\n        if (var15 == 1) {\n          if (temp_var6 == 0) {\n            temp_var4 = temp_var7 - temp_var5;\n          }\n          else {\n            temp_var4 = temp_var5 - temp_var7;\n          }\n          temp_var2 = date[3];\n          *date = *date + temp_var4;\n          updated_total_days = total_seconds + temp_var4;\n          update_date_and_time_00004634(date);\n          temp_var2 = date[3] - temp_var2;\n          total_seconds = total_seconds + temp_var4;\n          if (temp_var2 != 0) {\n            if (temp_var2 < 2) {\n              if (temp_var2 == -2 || temp_var2 + 2 < 0 != SCARRY4(temp_var2,2)) {\n                temp_var2 = 1;\n              }\n            }\n            else {\n              temp_var2 = -1;\n            }\n            temp_var4 = temp_var2 + date[7];\n            temp_var8 = temp_var8 + temp_var2;\n            if (temp_var4 < 0) {\n              temp_var6 = year - 1;\n              if ((temp_var6 & 3) == 0) {\n                if (temp_var6 == (temp_var6 / 100) * 100) {\n                  temp_var4 = 0x16d;\n                  if ((year + 0x76b) % 400 != 0) {\n                    temp_var4 = 0x16c;\n                  }\n                }\n                else {\n                  temp_var4 = 0x16d;\n                }\n              }\n              else {\n                temp_var4 = 0x16c;\n              }\n            }\n            else {\n              if ((year & 3) == 0) {\n                if (year == (year / 100) * 100) {\n                  temp_var2 = 0x16d;\n                  if ((year + 0x76c) % 400 == 0) {\n                    temp_var2 = 0x16e;\n                  }\n                }\n                else {\n                  temp_var2 = 0x16e;\n                }\n              }\n              else {\n                temp_var2 = 0x16d;\n              }\n              if (temp_var2 <= temp_var4) {\n                temp_var4 = temp_var4 - temp_var2;\n              }\n            }\n            date[7] = temp_var4;\n            total_seconds = updated_total_days;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((temp_var4 - temp_var3) - (uint)(var15 < temp_var1)) < 0 !=\n          (SBORROW4(temp_var4,temp_var3) != SBORROW4(temp_var4 - temp_var3,(uint)(var15 < temp_var1)))) {\nLAB_0000491e:\n        if ((int)((temp_var4 - temp_var2) - (uint)(var15 < temp_var6)) < 0 ==\n            (SBORROW4(temp_var4,temp_var2) != SBORROW4(temp_var4 - temp_var2,(uint)(var15 < temp_var6))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)var14) {\n        temp_var6 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      temp_var6 = is_leap_year;\n      if (is_leap_year != 1) goto LAB_00004934;\n    }\n    year = memory_address[0x14];\n    temp_var4 = (uint)total_seconds + year;\n    temp_var2 = (int)((ulonglong)total_seconds >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)total_seconds,year);\n    temp_var6 = 1;\n  }\n  get_memory_address_000050f4();\n  date[8] = temp_var6;\n  date[6] = (temp_var8 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(temp_var2,temp_var4);\n}\n\n",
            "current_name": "calculate_updated_date_and_time_000047e4",
            "entrypoint": "0x000047e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000047e4": "calculate_updated_date_and_time_000047e4",
                "bVar16": "is_leap_year",
                "iVar11": "temp_var8",
                "iVar5": "temp_var2",
                "iVar6": "temp_var3",
                "iVar7": "temp_var4",
                "lVar1": "total_seconds",
                "lVar2": "updated_total_days",
                "param_1": "date",
                "piVar3": "memory_address",
                "uVar10": "temp_var7",
                "uVar12": "year",
                "uVar13": "is_leap_year",
                "uVar14": "var14",
                "uVar15": "var15",
                "uVar4": "temp_var1",
                "uVar8": "temp_var5",
                "uVar9": "temp_var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004b34": {
            "additional_data": {
                "DAT_1fff0db4": {
                    "data_ptr": 1,
                    "data_structure": 1,
                    "data_structure_head": 2,
                    "data_structure_ptr": 2,
                    "first_ptr": 1,
                    "global_data_structure": 1,
                    "head": 2
                },
                "FUN_00004b34": {
                    "initialize_data_structure": 28,
                    "initialize_structure": 1,
                    "update_data_structure": 1
                },
                "bVar6": {
                    "check_condition": 1,
                    "condition": 1,
                    "flag": 2,
                    "is_condition_true": 3,
                    "is_current_node_in_correct_position": 1,
                    "is_end": 3,
                    "is_equal": 8,
                    "is_found": 1,
                    "is_last_node": 3,
                    "is_match": 2,
                    "is_same": 1,
                    "is_same_entry": 1,
                    "is_same_link": 1,
                    "is_true": 2,
                    "same_node_check": 1
                },
                "extraout_r1": {
                    "extra_out": 2,
                    "extra_out_r1": 1,
                    "extra_output": 2,
                    "extra_output_ptr": 1,
                    "extra_output_var1": 2,
                    "extra_pointer": 2,
                    "extra_var": 1,
                    "next": 1,
                    "temp1": 1,
                    "temp_2": 1,
                    "temp_ptr": 2,
                    "temp_ptr1": 1,
                    "temp_ptr2": 1,
                    "temp_ptr_1": 1,
                    "temp_ptr_ptr": 1,
                    "temp_var_2": 1,
                    "tmp1": 1
                },
                "initialize_data_0000579c": {
                    "initialize_data": 3,
                    "initialize_data_2": 1,
                    "initialize_data_helper": 3
                },
                "initialize_data_structure_00005790": {
                    "initialize_data_structure": 2,
                    "initialize_data_structure_1": 1,
                    "initialize_data_structure_helper": 6
                },
                "param_1": {
                    "data_array": 1,
                    "output": 7,
                    "output_array": 6,
                    "output_buffer": 3,
                    "output_data": 3,
                    "output_param": 1,
                    "output_pointer": 1,
                    "param_array": 1,
                    "result": 8
                },
                "param_2": {
                    "array_length": 1,
                    "array_size": 2,
                    "buffer_size": 1,
                    "data_size": 1,
                    "input_array_length": 1,
                    "input_data_length": 1,
                    "input_data_size": 1,
                    "input_length": 3,
                    "input_size": 8,
                    "length": 3,
                    "size": 9
                },
                "param_3": {
                    "arg1": 1,
                    "arg3": 1,
                    "input_1": 1,
                    "param3": 12,
                    "param_3": 12,
                    "unused": 1,
                    "unused_param": 1,
                    "unused_param_1": 1,
                    "var3": 1
                },
                "param_4": {
                    "arg2": 1,
                    "arg4": 1,
                    "data": 1,
                    "input_2": 1,
                    "param4": 12,
                    "param_4": 12,
                    "unused": 1,
                    "unused_param_2": 1,
                    "var4": 1
                },
                "piVar1": {
                    "current": 1,
                    "pointer1": 1,
                    "temp": 6,
                    "temp_pointer": 5,
                    "temp_pointer1": 1,
                    "temp_ptr": 6,
                    "temp_ptr1": 1,
                    "temp_var": 1,
                    "temp_var1": 6,
                    "temp_var_1": 1,
                    "tmp": 2
                },
                "ppiVar2": {
                    "cur_ptr1": 1,
                    "current": 2,
                    "current_element": 1,
                    "current_entry": 1,
                    "current_list_node": 1,
                    "current_node": 2,
                    "current_pointer": 3,
                    "current_ptr": 6,
                    "current_ptr1": 1,
                    "head_temp1": 1,
                    "list": 1,
                    "new_link": 1,
                    "previous": 2,
                    "previous_node": 1,
                    "previous_ptr": 1,
                    "temp2": 1,
                    "temp_pointer2": 1,
                    "temp_ptr3": 1,
                    "temp_ptr_ptr1": 1,
                    "temp_var2": 1,
                    "var2_ptr": 1
                },
                "ppiVar3": {
                    "cur_ptr2": 1,
                    "current": 3,
                    "current_link": 1,
                    "current_node": 1,
                    "current_ptr": 1,
                    "current_ptr2": 1,
                    "head_temp2": 1,
                    "next_pointer": 1,
                    "prev": 1,
                    "prev_element": 1,
                    "prev_ptr": 5,
                    "previous": 1,
                    "previous_entry": 1,
                    "previous_list_node": 1,
                    "previous_node": 2,
                    "previous_pointer": 2,
                    "previous_ptr": 1,
                    "temp1": 1,
                    "temp_pointer3": 1,
                    "temp_ptr4": 1,
                    "temp_ptr_ptr2": 1,
                    "temp_var3": 1,
                    "var3_ptr": 1
                },
                "ppiVar4": {
                    "next": 5,
                    "next_element": 1,
                    "next_entry": 1,
                    "next_list_node": 1,
                    "next_node": 3,
                    "next_pointer": 2,
                    "next_ptr": 5,
                    "next_ptr1": 1,
                    "prev_link": 1,
                    "prev_pointer": 1,
                    "prev_ptr": 1,
                    "ptr_1": 1,
                    "temp2": 1,
                    "temp_pointer4": 1,
                    "temp_ptr5": 1,
                    "temp_ptr_ptr3": 1,
                    "temp_var4": 2,
                    "tmp2": 1,
                    "var4_ptr": 1
                },
                "ppiVar5": {
                    "input_ptr": 1,
                    "new_entry": 2,
                    "new_list_node": 1,
                    "new_node": 7,
                    "new_pointer": 3,
                    "new_ptr": 7,
                    "next_ptr2": 1,
                    "ptr_2": 1,
                    "selected_element": 1,
                    "temp3": 1,
                    "temp_pointer5": 1,
                    "temp_ptr6": 1,
                    "temp_ptr_ptr4": 1,
                    "temp_var5": 2,
                    "var5_ptr": 1
                }
            },
            "called": [
                "FUN_00005790",
                "FUN_0000579c"
            ],
            "calling": [
                "FUN_000060cc",
                "FUN_00005780",
                "FUN_0000404c",
                "FUN_00006768",
                "FUN_000054a8",
                "FUN_00006192"
            ],
            "code": "\nvoid initialize_data_structure_00004b34(undefined4 *result,int size,undefined4 param3,undefined4 param_4)\n\n{\n  int *temp_var1;\n  int **extra_output_var1;\n  int **current_ptr;\n  int **prev_ptr;\n  int **next_ptr;\n  int **new_ptr;\n  bool is_equal;\n  \n  if (size == 0) {\n    return;\n  }\n  new_ptr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_ptr = (int **)((int)new_ptr + *(int *)(size + -4));\n  }\n  initialize_data_structure_00004b34_helper();\n  prev_ptr = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    new_ptr[1] = (int *)0x0;\n    current_ptr = extra_output_var1;\n    DAT_1fff0db4 = new_ptr;\n  }\n  else {\n    next_ptr = DAT_1fff0db4;\n    if (new_ptr < DAT_1fff0db4) {\n      current_ptr = (int **)*new_ptr;\n      prev_ptr = (int **)((int)new_ptr + (int)current_ptr);\n      is_equal = DAT_1fff0db4 == prev_ptr;\n      if (is_equal) {\n        prev_ptr = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      new_ptr[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = new_ptr;\n      if (is_equal) {\n        prev_ptr = (int **)((int)prev_ptr + (int)current_ptr);\n        *new_ptr = (int *)prev_ptr;\n      }\n    }\n    else {\n      do {\n        prev_ptr = next_ptr;\n        next_ptr = (int **)prev_ptr[1];\n        if (next_ptr == (int **)0x0) break;\n      } while (next_ptr <= new_ptr);\n      current_ptr = (int **)*prev_ptr;\n      if ((int **)((int)prev_ptr + (int)current_ptr) == new_ptr) {\n        current_ptr = (int **)((int)current_ptr + (int)*new_ptr);\n        *prev_ptr = (int *)current_ptr;\n        if (next_ptr == (int **)((int)prev_ptr + (int)current_ptr)) {\n          temp_var1 = *next_ptr;\n          prev_ptr[1] = next_ptr[1];\n          current_ptr = (int **)((int)current_ptr + (int)temp_var1);\n          *prev_ptr = (int *)current_ptr;\n        }\n      }\n      else if (new_ptr < (int **)((int)prev_ptr + (int)current_ptr)) {\n        *result = 0xc;\n      }\n      else {\n        current_ptr = (int **)((int)new_ptr + (int)*new_ptr);\n        is_equal = next_ptr == current_ptr;\n        if (is_equal) {\n          current_ptr = (int **)*next_ptr;\n          next_ptr = (int **)next_ptr[1];\n        }\n        new_ptr[1] = (int *)next_ptr;\n        if (is_equal) {\n          current_ptr = (int **)((int)current_ptr + (int)*new_ptr);\n          *new_ptr = (int *)current_ptr;\n        }\n        prev_ptr[1] = (int *)new_ptr;\n      }\n    }\n  }\n  initialize_data_helper(result,current_ptr,prev_ptr,param_4);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_00004b34",
            "entrypoint": "0x00004b34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004b34": "initialize_data_structure_00004b34",
                "bVar6": "is_equal",
                "extraout_r1": "extra_output_var1",
                "initialize_data_0000579c": "initialize_data_helper",
                "initialize_data_structure_00005790": "initialize_data_structure_helper",
                "param_1": "result",
                "param_2": "size",
                "param_3": "param3",
                "piVar1": "temp_var1",
                "ppiVar2": "current_ptr",
                "ppiVar3": "prev_ptr",
                "ppiVar4": "next_ptr",
                "ppiVar5": "new_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "additional_data": {
                "DAT_1fff0db4": {
                    "first_block": 2
                },
                "DAT_1fff0db8": {
                    "relocated_offset": 1,
                    "relocated_offset_value": 1
                },
                "FUN_00004bd0": {
                    "allocate_and_initialize_data_structure": 1,
                    "allocate_and_initialize_memory": 2,
                    "allocate_and_initialize_memory_block": 1,
                    "allocate_memory": 9,
                    "allocate_memory_and_initialize": 1,
                    "allocate_memory_block": 6,
                    "initialize_data_structure": 3,
                    "initialize_data_structure_and_offset": 1,
                    "initialize_memory_allocation": 1,
                    "process_data": 1,
                    "reallocate_memory": 1,
                    "reallocate_memory_block": 1,
                    "resize_and_initialize_data_structure": 2,
                    "resize_initialize": 1
                },
                "LAB_00004c34": {
                    "skip_relocation": 1
                },
                "get_relocated_offset_00000428": {
                    "get_relocated_offset": 3
                },
                "iVar2": {
                    "block_size": 3,
                    "block_size_diff": 1,
                    "chunk_size": 1,
                    "difference": 21,
                    "offset": 2,
                    "offset_diff": 1,
                    "remainder": 1,
                    "temp_var": 1
                },
                "initialize_data_0000579c": {
                    "initialize_additional_data": 1,
                    "initialize_data": 2
                },
                "initialize_data_structure_00005790": {
                    "initialize_data_structure": 2,
                    "initialize_memory_data_structure": 1
                },
                "param_1": {
                    "block_address": 1,
                    "block_pointer": 1,
                    "buffer": 1,
                    "destination": 1,
                    "dst_buffer": 1,
                    "memory_pointer": 1,
                    "output": 5,
                    "output_buffer": 2,
                    "output_error_code": 1,
                    "output_pointer": 3,
                    "output_ptr": 2,
                    "output_value": 1,
                    "pointer": 1,
                    "result": 7,
                    "result_ptr": 3
                },
                "param_2": {
                    "block_size": 1,
                    "current_block_size": 1,
                    "current_size": 1,
                    "desired_size": 1,
                    "input_buffer_size": 1,
                    "input_length": 1,
                    "input_size": 10,
                    "requested_size": 4,
                    "size": 11
                },
                "param_3": {
                    "arg1": 2,
                    "arg3": 3,
                    "first_block_size": 1,
                    "input_parameter_1": 1,
                    "param3": 9,
                    "param_3": 11,
                    "unused_1": 1,
                    "unused_param": 2
                },
                "param_4": {
                    "arg2": 2,
                    "arg4": 3,
                    "input_parameter_2": 1,
                    "param4": 9,
                    "param_4": 11,
                    "relocated_offset": 3,
                    "unused_2": 1,
                    "unused_param": 1
                },
                "puVar1": {
                    "current": 1,
                    "current_block": 1,
                    "current_ptr": 1,
                    "prev": 1,
                    "prev_block": 8,
                    "prev_chunk": 1,
                    "prev_pointer": 1,
                    "prev_ptr": 2,
                    "previous": 1,
                    "previous_block": 8,
                    "previous_block_pointer": 1,
                    "previous_pointer": 1,
                    "previous_ptr": 4
                },
                "puVar4": {
                    "block": 1,
                    "curr_block": 1,
                    "curr_ptr": 2,
                    "current": 2,
                    "current_block": 14,
                    "current_block_pointer": 1,
                    "current_chunk": 1,
                    "current_pointer": 2,
                    "current_ptr": 4,
                    "prev_ptr": 1,
                    "previous": 1,
                    "previous_block": 1
                },
                "uVar3": {
                    "block_difference": 3,
                    "block_offset": 1,
                    "block_size": 2,
                    "block_size_diff": 2,
                    "block_size_difference": 3,
                    "calculation_result": 1,
                    "chunk_diff": 1,
                    "diff": 1,
                    "difference": 4,
                    "offset": 4,
                    "remaining_size": 1,
                    "result": 1,
                    "temp": 2,
                    "temp_diff": 1,
                    "temp_value": 2,
                    "temp_var": 2
                },
                "uVar5": {
                    "adjusted_size": 3,
                    "aligned_size": 1,
                    "allocated_size": 4,
                    "block_size": 3,
                    "new_allocated_size": 1,
                    "new_block_size": 8,
                    "new_chunk_size": 1,
                    "new_size": 6,
                    "required_size": 1,
                    "total_buffer_size": 1,
                    "total_size": 1,
                    "updated_size": 1
                }
            },
            "called": [
                "FUN_00005790",
                "FUN_00000428",
                "FUN_0000579c"
            ],
            "calling": [
                "FUN_000060cc",
                "FUN_000068f0",
                "FUN_00004248",
                "FUN_00005100",
                "FUN_00005700"
            ],
            "code": "\nuint allocate_and_initialize_memory_block_00004bd0(undefined4 *result,uint size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *prev_block;\n  int difference;\n  uint difference;\n  uint *current_block;\n  uint new_block_size;\n  \n  new_block_size = (size + 3 & 0xfffffffc) + 8;\n  if (new_block_size < 0xc) {\n    new_block_size = 0xc;\n  }\n  if (((int)new_block_size < 0) || (new_block_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    initialize_data_structure();\n    prev_block = DAT_1fff0db4;\n    for (current_block = DAT_1fff0db4; current_block != (uint *)0x0; current_block = (uint *)current_block[1]) {\n      difference = *current_block - new_block_size;\n      if (-1 < (int)difference) {\n        if (0xb < difference) {\n          *current_block = difference;\n          current_block = (uint *)((int)current_block + difference);\n          goto skip_relocation;\n        }\n        if (prev_block == current_block) {\n          DAT_1fff0db4 = (uint *)current_block[1];\n        }\n        if (prev_block != current_block) {\n          prev_block[1] = (uint)(uint *)current_block[1];\n        }\n        goto LAB_00004c42;\n      }\n      prev_block = current_block;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = get_relocated_offset(result,0,prev_block,0,param_4);\n    }\n    prev_block = (uint *)get_relocated_offset(result,new_block_size);\n    if ((prev_block != (uint *)0xffffffff) &&\n       ((current_block = (uint *)((int)prev_block + 3U & 0xfffffffc), prev_block == current_block ||\n        (difference = get_relocated_offset(result,(int)current_block - (int)prev_block), difference != -1)))) {\nskip_relocation:\n      *current_block = new_block_size;\nLAB_00004c42:\n      initialize_data(result);\n      new_block_size = (int)current_block + 0xbU & 0xfffffff8;\n      difference = new_block_size - (int)(current_block + 1);\n      if (difference == 0) {\n        return new_block_size;\n      }\n      *(uint *)((int)current_block + difference) = (int)(current_block + 1) - new_block_size;\n      return new_block_size;\n    }\n    *result = 0xc;\n    initialize_data(result);\n  }\n  return 0;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_block_00004bd0",
            "entrypoint": "0x00004bd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004bd0": "allocate_and_initialize_memory_block_00004bd0",
                "LAB_00004c34": "skip_relocation",
                "get_relocated_offset_00000428": "get_relocated_offset",
                "iVar2": "difference",
                "initialize_data_0000579c": "initialize_data",
                "initialize_data_structure_00005790": "initialize_data_structure",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "prev_block",
                "puVar4": "current_block",
                "uVar3": "difference",
                "uVar5": "new_block_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004c84": {
            "additional_data": {
                "FUN_00004c84": {
                    "decode_and_process_data": 6,
                    "decode_and_process_data_relocations": 1,
                    "decode_and_process_relocated_data": 1,
                    "initialize_and_process_relocations": 1,
                    "process_data": 3,
                    "process_data_and_decode": 2,
                    "process_elf_data": 9,
                    "process_elf_relocations": 8
                },
                "dVar1": {
                    "data_offset": 2,
                    "decoded_address": 1,
                    "dynamic_offset": 1,
                    "elf_data_offset": 1,
                    "offset": 6,
                    "rel_offset": 2,
                    "relocation_offset": 18
                },
                "param_1": {
                    "arg1": 5,
                    "data": 2,
                    "data1": 2,
                    "data_offset": 1,
                    "data_param": 2,
                    "input1": 2,
                    "input_param": 8,
                    "input_param1": 5,
                    "input_param_1": 2,
                    "param1": 2
                },
                "param_2": {
                    "arg2": 5,
                    "data2": 2,
                    "input2": 2,
                    "input_param2": 5,
                    "input_param_2": 2,
                    "memory_param": 1,
                    "offset": 1,
                    "param2": 5,
                    "param_2": 8
                },
                "param_3": {
                    "arg3": 5,
                    "data3": 2,
                    "input3": 2,
                    "input_param3": 5,
                    "input_param_3": 2,
                    "length": 1,
                    "param3": 5,
                    "param_3": 8,
                    "process_param": 1
                },
                "param_4": {
                    "address": 1,
                    "arg4": 5,
                    "data4": 2,
                    "input4": 2,
                    "input_param4": 5,
                    "input_param_4": 2,
                    "param4": 5,
                    "param_4": 8,
                    "relocation_param": 1
                },
                "uStack_4": {
                    "input4_copy": 1,
                    "param_4_copy": 2,
                    "stack4": 1,
                    "stack_4": 1,
                    "stack_var3": 1,
                    "stack_var_3": 1,
                    "stack_var_4": 1,
                    "var5": 1
                },
                "uStack_8": {
                    "input3_copy": 1,
                    "param_3_copy": 2,
                    "stack8": 1,
                    "stack_8": 1,
                    "stack_var2": 1,
                    "stack_var_2": 1,
                    "stack_var_8": 1,
                    "var4": 1
                },
                "uStack_c": {
                    "input2_copy": 1,
                    "offset_copy": 1,
                    "param_2_copy": 2,
                    "stack_c": 2,
                    "stack_var1": 1,
                    "stack_var_1": 1,
                    "stack_var_c": 1,
                    "var3": 1
                },
                "uVar2": {
                    "arg1_copy": 4,
                    "copy_of_input_param": 1,
                    "data1_copy": 2,
                    "data_copy": 1,
                    "data_offset_copy": 1,
                    "data_param_copy": 1,
                    "data_u_var": 1,
                    "input1_copy": 2,
                    "input_param1_copy": 2,
                    "input_param_copy": 3,
                    "input_var": 1,
                    "original_param1_value": 1,
                    "output_param": 1,
                    "param_copy": 1,
                    "stored_param1": 1,
                    "temp_var": 2,
                    "temp_var1": 3,
                    "u_var2": 1,
                    "var2": 2
                }
            },
            "called": [
                "FUN_000057f8",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_00002a88",
                "FUN_00002fe0",
                "FUN_00003524",
                "FUN_00000ed8",
                "FUN_00000f04",
                "FUN_0000211c",
                "FUN_00002ecc",
                "FUN_0000305c",
                "FUN_00003694",
                "FUN_00002f74",
                "FUN_00002b10",
                "FUN_00003378",
                "FUN_0000316c"
            ],
            "code": "\nvoid process_elf_data_00004c84(undefined4 input_param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  dword relocation_offset;\n  undefined4 arg1_copy;\n  undefined4 stack_c;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  relocation_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  arg1_copy = input_param;\n  stack_c = param_2;\n  param_3_copy = param_3;\n  param_4_copy = param_4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_elf_relocations_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  decode_and_process_data_000057f8(relocation_offset,*(undefined4 *)(relocation_offset + 8),input_param,&stack_c,arg1_copy,&stack_c);\n  return;\n}\n\n",
            "current_name": "process_elf_data_00004c84",
            "entrypoint": "0x00004c84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004c84": "process_elf_data_00004c84",
                "dVar1": "relocation_offset",
                "param_1": "input_param",
                "uStack_4": "param_4_copy",
                "uStack_8": "param_3_copy",
                "uStack_c": "stack_c",
                "uVar2": "arg1_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "additional_data": {
                "FUN_00004cb4": {
                    "decode_and_process_data": 1,
                    "process_and_return_byte": 2,
                    "process_and_update_data": 1,
                    "process_and_validate_data": 1,
                    "process_and_validate_input": 1,
                    "process_byte_data": 1,
                    "process_data": 14,
                    "process_data_and_update": 1,
                    "process_input": 2,
                    "process_input_data": 5,
                    "process_input_value": 1,
                    "reverse_and_validate_data": 1
                },
                "dVar1": {
                    "elf_rel_offset": 3,
                    "offset": 10,
                    "r_offset": 3,
                    "rel_offset": 7,
                    "relocation_offset": 8
                },
                "param_1": {
                    "data": 8,
                    "input": 7,
                    "input_byte": 1,
                    "input_data": 10,
                    "input_value": 5
                },
                "puVar2": {
                    "current_item": 1,
                    "current_ptr": 2,
                    "data": 1,
                    "data_pointer": 2,
                    "data_ptr": 5,
                    "function_data": 1,
                    "offset_ptr": 1,
                    "pointer": 2,
                    "ptr": 6,
                    "ptr_data": 1,
                    "rel_item_1": 1,
                    "rel_ptr": 1,
                    "relocated_data": 4,
                    "relocated_data_ptr": 1,
                    "target_data_ptr": 1,
                    "the_array": 1
                },
                "puVar4": {
                    "buffer": 1,
                    "byte_pointer": 1,
                    "byte_ptr": 2,
                    "char_ptr": 4,
                    "current_byte": 1,
                    "data": 1,
                    "data_pointer": 1,
                    "data_ptr": 7,
                    "data_ptr2": 1,
                    "new_byte_ptr": 1,
                    "new_ptr": 1,
                    "next_byte": 1,
                    "pointer": 3,
                    "ptr2": 2,
                    "ptr_data_byte": 1,
                    "ptr_next": 1,
                    "ptr_to_relocated_data": 1,
                    "temp_ptr": 1
                },
                "uVar3": {
                    "count": 16,
                    "counter": 5,
                    "decremented_value": 2,
                    "modified_count": 1,
                    "temp_value": 3,
                    "temp_variable": 2,
                    "updated_count": 1,
                    "value": 1
                },
                "unaff_r4": {
                    "arg4": 1,
                    "auxiliary_value_r4": 1,
                    "context_value1": 1,
                    "param4": 1,
                    "register4": 1,
                    "register_4": 2,
                    "temp_variable1": 1,
                    "temp_variable_2": 1,
                    "unaff_r4": 1,
                    "unaffected_r4": 1,
                    "unused1": 1,
                    "unused_var1": 3,
                    "unused_var_1": 1,
                    "unused_variable": 1,
                    "unused_variable_1": 1,
                    "value1": 2,
                    "var1": 1
                },
                "unaff_r5": {
                    "arg5": 1,
                    "auxiliary_value_r5": 1,
                    "context_value2": 1,
                    "param5": 1,
                    "register5": 1,
                    "register_5": 2,
                    "temp_variable2": 1,
                    "temp_variable_3": 1,
                    "unaff_r5": 1,
                    "unaffected_r5": 1,
                    "unused2": 1,
                    "unused_var2": 3,
                    "unused_var_2": 1,
                    "unused_variable": 1,
                    "unused_variable_2": 1,
                    "value2": 2,
                    "var2": 1
                }
            },
            "called": [
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_00002a00"
            ],
            "code": "\nuint process_input_data_00004cb4(uint input_data)\n\n{\n  dword offset;\n  undefined4 *ptr;\n  uint count;\n  undefined *data_ptr;\n  undefined4 unused_var1;\n  undefined4 unused_var2;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_elf_relocations_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  ptr = *(undefined4 **)(offset + 8);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize_memory_and_process_elf_relocations_000042a4();\n  }\n  if (ptr == &DAT_000079b8) {\n    ptr = *(undefined4 **)(offset + 4);\n  }\n  else if (ptr == (undefined4 *)&DAT_000079d8) {\n    ptr = *(undefined4 **)(offset + 8);\n  }\n  else if (ptr == (undefined4 *)&DAT_00007998) {\n    ptr = *(undefined4 **)(offset + 0xc);\n  }\n  if ((-1 < (int)(ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(ptr + 3) << 0x16))) {\n    FUNC_000045e8(ptr[0x16]);\n  }\n  count = ptr[2] - 1;\n  ptr[2] = count;\n  if (((int)count < 0) && (((int)count < (int)ptr[6] || (count = input_data & 0xff, count == 10))))\n  {\n    input_data = process_and_validate_data_00005404(offset,input_data,ptr,count,unused_var1,unused_var2);\n  }\n  else {\n    data_ptr = (undefined *)*ptr;\n    *ptr = data_ptr + 1;\n    *data_ptr = (char)input_data;\n    input_data = input_data & 0xff;\n  }\n  if ((-1 < (int)(ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(ptr + 3) << 0x16))) {\n    FUNC_000045ec(ptr[0x16]);\n  }\n  return input_data;\n}\n\n",
            "current_name": "process_input_data_00004cb4",
            "entrypoint": "0x00004cb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004cb4": "process_input_data_00004cb4",
                "dVar1": "offset",
                "param_1": "input_data",
                "puVar2": "ptr",
                "puVar4": "data_ptr",
                "uVar3": "count",
                "unaff_r4": "unused_var1",
                "unaff_r5": "unused_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004db8": {
            "additional_data": {
                "FUN_00004db8": {
                    "decode_and_process_data": 1,
                    "decode_and_validate_data": 1,
                    "parse_data_and_validate": 1,
                    "process_and_validate": 1,
                    "process_and_validate_data": 3,
                    "process_binary_data": 1,
                    "process_data": 22,
                    "process_relocations": 1
                },
                "cVar1": {
                    "char_value": 1,
                    "character": 2,
                    "current_char": 24,
                    "current_character": 2,
                    "current_value": 2
                },
                "dVar2": {
                    "base_offset": 1,
                    "data_array_index": 1,
                    "dword_value": 1,
                    "elf_rel_data": 1,
                    "offset": 16,
                    "rel_array_index": 1,
                    "rel_array_offset": 1,
                    "rel_offset": 7,
                    "relocation_offset": 2
                },
                "iVar3": {
                    "result": 29,
                    "return_value": 2
                },
                "param_1": {
                    "data": 3,
                    "data_size": 1,
                    "input": 12,
                    "input_data": 9,
                    "input_parameter": 1,
                    "input_size": 1,
                    "input_value": 4
                },
                "pcVar4": {
                    "char_pointer": 3,
                    "current_char": 1,
                    "current_char_ptr": 2,
                    "current_ptr": 2,
                    "current_string": 1,
                    "current_string_char": 1,
                    "data_end": 1,
                    "data_pointer": 1,
                    "inner_char_ptr": 1,
                    "ptr": 1,
                    "ptr_to_char": 1,
                    "ptr_to_data": 1,
                    "remaining_chars": 1,
                    "str_len": 1,
                    "str_pointer": 2,
                    "str_ptr": 5,
                    "string_pointer": 2,
                    "string_ptr": 3,
                    "temp_ptr": 1
                },
                "pcVar7": {
                    "char_pointer2": 1,
                    "char_ptr": 4,
                    "current_char": 2,
                    "current_character": 1,
                    "current_data": 3,
                    "current_input_char": 1,
                    "current_pointer": 1,
                    "current_position": 2,
                    "current_ptr": 3,
                    "current_string": 3,
                    "data_ptr": 1,
                    "input_pointer": 1,
                    "input_string": 1,
                    "pointer_value": 1,
                    "ptr2": 1,
                    "ptr_to_curr_char": 1,
                    "ptr_to_input_char": 1,
                    "str_ptr": 1,
                    "string_ptr": 1,
                    "temp_ptr": 1
                },
                "ppcVar5": {
                    "data": 3,
                    "data_array": 10,
                    "data_pointers": 2,
                    "data_ptr": 9,
                    "pointer_to_pointer": 1,
                    "ptr_to_ptr": 1,
                    "relocation_pointer": 2,
                    "string_array": 1,
                    "string_data": 1,
                    "string_ptr": 1
                },
                "uVar6": {
                    "output": 2,
                    "result": 2,
                    "return_val": 1,
                    "return_value": 26
                }
            },
            "called": [
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_00002a88",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00003444",
                "FUN_000033f4",
                "FUN_00002f30",
                "FUN_000034c0",
                "FUN_0000305c",
                "FUN_00003694",
                "FUN_000033c0",
                "FUN_00002f74",
                "FUN_000023a4",
                "FUN_00002b10",
                "FUN_00003478"
            ],
            "code": "\nundefined4 process_and_validate_data_00004db8(int input)\n\n{\n  char current_char;\n  dword offset;\n  int result;\n  char *str_ptr;\n  char **data_array;\n  undefined4 return_value;\n  char *char_ptr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_elf_relocations_000042a4();\n  }\n  data_array = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    initialize_memory_and_process_elf_relocations_000042a4(offset);\n  }\n  if (data_array == (char **)&DAT_000079b8) {\n    data_array = *(char ***)(offset + 4);\n  }\n  else if (data_array == (char **)&DAT_000079d8) {\n    data_array = *(char ***)(offset + 8);\n  }\n  else if (data_array == (char **)&DAT_00007998) {\n    data_array = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)data_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x16))) {\n    FUNC_000045e8(data_array[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(data_array + 3) << 0x1c) < 0) && (data_array[4] != (char *)0x0)) ||\n     (result = decode_and_process_data_000054a8(offset,data_array), result == 0)) {\n    char_ptr = (char *)(input + -1);\n    do {\n      while( true ) {\n        char_ptr = char_ptr + 1;\n        current_char = *char_ptr;\n        str_ptr = data_array[2] + -1;\n        data_array[2] = str_ptr;\n        if (current_char == '\\0') {\n          if (-1 < (int)str_ptr) {\n            char_ptr = *data_array;\n            return_value = 10;\n            *data_array = char_ptr + 1;\n            *char_ptr = '\\n';\n            goto LAB_00004d64;\n          }\n          result = process_and_validate_data_00004db8_00005404(offset,10,data_array);\n          if (result != -1) {\n            return_value = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)str_ptr < 0) && (((int)str_ptr < (int)data_array[6] || (current_char == '\\n')))) break;\n        str_ptr = *data_array;\n        *data_array = str_ptr + 1;\n        *str_ptr = current_char;\n      }\n      result = process_and_validate_data_00004db8_00005404(offset,current_char,data_array);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  return_value = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)data_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x16))) {\n    FUNC_000045ec(data_array[0x16]);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_and_validate_data_00004db8",
            "entrypoint": "0x00004db8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004db8": "process_and_validate_data_00004db8",
                "cVar1": "current_char",
                "dVar2": "offset",
                "iVar3": "result",
                "param_1": "input",
                "pcVar4": "str_ptr",
                "pcVar7": "char_ptr",
                "ppcVar5": "data_array",
                "uVar6": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "additional_data": {
                "FUN_00004dc8": {
                    "copy_and_increment_array": 1,
                    "copy_and_increment_array_elements": 6,
                    "copy_and_update_array_elements": 1,
                    "process_array": 2,
                    "process_array_elements": 1,
                    "update_array": 3,
                    "update_array_and_copy": 1,
                    "update_array_and_increment": 3,
                    "update_array_and_value": 2,
                    "update_array_and_variable": 1,
                    "update_array_elements": 9,
                    "update_array_with_offset": 1
                },
                "bVar3": {
                    "check_flag": 1,
                    "is_copied": 1,
                    "is_copy_successful": 4,
                    "is_positive": 12,
                    "is_success": 4,
                    "is_successful": 4,
                    "is_update_successful": 1,
                    "is_valid": 4
                },
                "iVar1": {
                    "copied_elements": 1,
                    "copy_result": 3,
                    "elements_copied": 1,
                    "num_copied": 2,
                    "num_copied_elements": 1,
                    "num_elements": 7,
                    "num_elements_copied": 3,
                    "num_updated_elements": 1,
                    "result": 11,
                    "updated_elements_count": 1
                },
                "param_1": {
                    "array": 16,
                    "array_destination": 1,
                    "array_dst": 1,
                    "array_pointer": 1,
                    "data_buffer": 1,
                    "dest_array": 1,
                    "destination_array": 2,
                    "input_array": 5,
                    "param1": 1,
                    "source_array": 2
                },
                "param_2": {
                    "arguments": 1,
                    "array_data": 1,
                    "array_data_address": 1,
                    "array_info": 3,
                    "array_metadata": 1,
                    "array_src": 1,
                    "context": 1,
                    "data": 12,
                    "data_address": 1,
                    "data_array_offset": 1,
                    "input_data": 1,
                    "input_struct_address": 1,
                    "memory_block": 1,
                    "param2": 1,
                    "source_array": 2,
                    "struct_pointer": 1,
                    "target_array": 1
                },
                "uVar2": {
                    "modified_value": 1,
                    "new_sum": 1,
                    "new_value": 4,
                    "result": 3,
                    "updated_value": 22
                }
            },
            "called": [
                "FUN_00000490"
            ],
            "calling": [],
            "code": "\nvoid copy_and_update_array_elements_00004dc8(undefined4 array,int data)\n\n{\n  int result;\n  uint updated_value;\n  bool is_positive;\n  \n  result = copy_and_increment_array_elements_00000490(array,(int)*(short *)(data + 0xe));\n  is_positive = -1 < result;\n  if (is_positive) {\n    updated_value = *(int *)(data + 0x54) + result;\n  }\n  else {\n    updated_value = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (is_positive) {\n    *(uint *)(data + 0x54) = updated_value;\n  }\n  if (!is_positive) {\n    *(short *)(data + 0xc) = (short)updated_value;\n  }\n  return;\n}\n\n",
            "current_name": "copy_and_update_array_elements_00004dc8",
            "entrypoint": "0x00004dc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004dc8": "copy_and_update_array_elements_00004dc8",
                "bVar3": "is_positive",
                "iVar1": "result",
                "param_1": "array",
                "param_2": "data",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004dee": {
            "additional_data": {
                "FUN_00004dee": {
                    "copy_and_initialize_data": 2,
                    "copy_and_update_data": 1,
                    "copy_data_and_initialize": 2,
                    "copy_data_and_initialize_if_negative": 1,
                    "copy_data_and_initialize_value": 1,
                    "copy_data_and_return": 3,
                    "initialize_and_copy_data": 4,
                    "initialize_data_and_copy": 2,
                    "initialize_value_and_copy_data": 5,
                    "process_data": 8,
                    "process_data_and_copy_to_memory": 1,
                    "resize_data_array": 1
                },
                "copy_data_to_memory_and_return_00000e38": {
                    "copy_data_to_memory_and_return": 1
                },
                "initialize_value_and_return_error_000004f2": {
                    "initialize_value_and_return_error": 1
                },
                "param_1": {
                    "data": 2,
                    "dest": 1,
                    "destination": 3,
                    "input_value": 2,
                    "new_param_1": 1,
                    "output": 7,
                    "output_value": 6,
                    "param_1": 1,
                    "result": 7,
                    "result_value": 1
                },
                "param_2": {
                    "array_ptr": 1,
                    "data": 1,
                    "data_pointer": 2,
                    "data_ptr": 3,
                    "input": 6,
                    "input_array": 1,
                    "input_buffer": 1,
                    "input_data": 7,
                    "input_ptr": 2,
                    "memory_address": 1,
                    "new_param_2": 1,
                    "source": 4,
                    "src": 1
                },
                "param_3": {
                    "data": 2,
                    "data_address": 2,
                    "data_ptr": 3,
                    "data_ptr1": 1,
                    "dest_ptr": 2,
                    "destination": 2,
                    "destination_address": 2,
                    "destination_ptr": 1,
                    "input1": 1,
                    "new_param_3": 1,
                    "source": 6,
                    "source_addr": 1,
                    "source_address": 1,
                    "source_data": 4,
                    "src_memory": 1,
                    "src_ptr": 1
                },
                "param_4": {
                    "data_ptr2": 1,
                    "data_size": 1,
                    "dest_addr": 1,
                    "dest_data": 1,
                    "dest_ptr": 1,
                    "destination": 6,
                    "destination_address": 1,
                    "destination_data": 3,
                    "dst_memory": 1,
                    "input2": 1,
                    "length": 1,
                    "memory_address": 1,
                    "new_param_4": 1,
                    "size": 5,
                    "source": 1,
                    "source_address": 2,
                    "source_ptr": 1,
                    "src_ptr": 2
                },
                "uVar1": {
                    "copied_data_result": 1,
                    "copy_result": 3,
                    "result": 12,
                    "result_value": 1,
                    "return_value": 6,
                    "status": 2
                }
            },
            "called": [
                "FUN_00000e38",
                "FUN_000004f2"
            ],
            "calling": [],
            "code": "\nundefined4 copy_data_and_initialize_value_00004dee(undefined4 result,int input_data,undefined4 source,undefined4 destination)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(input_data + 0xc) << 0x17) < 0) {\n    initialize_value_and_return_error(result,(int)*(short *)(input_data + 0xe),0,2);\n  }\n  *(ushort *)(input_data + 0xc) = *(ushort *)(input_data + 0xc) & 0xefff;\n  result = copy_data_to_memory_and_return(source,destination);\n  return result;\n}\n\n",
            "current_name": "copy_data_and_initialize_value_00004dee",
            "entrypoint": "0x00004dee",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004dee": "copy_data_and_initialize_value_00004dee",
                "copy_data_to_memory_and_return_00000e38": "copy_data_to_memory_and_return",
                "initialize_value_and_return_error_000004f2": "initialize_value_and_return_error",
                "param_1": "result",
                "param_2": "input_data",
                "param_3": "source",
                "param_4": "destination",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004e26": {
            "additional_data": {
                "FUN_00004e26": {
                    "initialize_and_modify_data": 1,
                    "initialize_and_modify_value": 1,
                    "initialize_and_set_error_status": 1,
                    "initialize_and_set_flag": 1,
                    "initialize_and_set_flags": 1,
                    "initialize_and_update_data": 1,
                    "initialize_and_update_value": 14,
                    "initialize_error_handling": 2,
                    "initialize_value_and_return_error": 1,
                    "initialize_value_and_set_status": 1,
                    "initialize_value_and_update_flag": 1,
                    "update_status": 2,
                    "update_value": 2,
                    "update_value_and_return_error": 1,
                    "update_value_and_set_flag": 1
                },
                "bVar3": {
                    "has_error": 1,
                    "is_error": 30
                },
                "iVar1": {
                    "error": 10,
                    "error_code": 9,
                    "error_status": 1,
                    "error_value": 3,
                    "init_result": 1,
                    "initialized_value": 3,
                    "result": 1,
                    "return_value": 1,
                    "value": 2
                },
                "param_1": {
                    "arg1": 4,
                    "data": 2,
                    "error": 1,
                    "error_code": 4,
                    "error_flag": 1,
                    "error_handler": 1,
                    "input_value": 1,
                    "param": 3,
                    "param1": 4,
                    "param_1": 2,
                    "param_a": 1,
                    "param_addr": 1,
                    "ptr_param_1": 1,
                    "status": 2,
                    "status_pointer": 1,
                    "value": 1,
                    "value_ptr": 1
                },
                "param_2": {
                    "address": 2,
                    "arg2": 4,
                    "buffer": 1,
                    "buffer_addr": 1,
                    "data": 6,
                    "data_address": 1,
                    "data_buffer": 2,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "input": 1,
                    "param2": 4,
                    "param_2": 2,
                    "param_b": 1,
                    "ptr_param_2": 1,
                    "source_address": 1
                },
                "uVar2": {
                    "flag": 3,
                    "flags": 3,
                    "modified_flags": 1,
                    "modified_value": 10,
                    "new_flag_value": 1,
                    "new_flags": 1,
                    "new_value": 1,
                    "updated_flag": 1,
                    "updated_value": 10
                }
            },
            "called": [
                "FUN_000004f2"
            ],
            "calling": [],
            "code": "\nvoid initialize_value_and_update_flag_00004e26(undefined4 arg1,int data)\n\n{\n  int error;\n  ushort updated_value;\n  bool is_error;\n  \n  error = initialize_value_and_return_error_000004f2(arg1,(int)*(short *)(data + 0xe));\n  is_error = error == -1;\n  if (is_error) {\n    updated_value = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = error;\n    updated_value = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(data + 0xc) = updated_value;\n  }\n  if (!is_error) {\n    *(ushort *)(data + 0xc) = updated_value;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_value_and_update_flag_00004e26",
            "entrypoint": "0x00004e26",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004e26": "initialize_value_and_update_flag_00004e26",
                "bVar3": "is_error",
                "iVar1": "error",
                "param_1": "arg1",
                "param_2": "data",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004e52": {
            "additional_data": {
                "FUN_00004e52": {
                    "compare_and_calculate_difference": 1,
                    "compare_and_compute_difference": 1,
                    "compare_and_return_difference": 2,
                    "compare_and_subtract": 1,
                    "compare_and_subtract_bytes": 1,
                    "compare_arrays": 1,
                    "compare_buffers": 1,
                    "compare_byte_arrays": 12,
                    "compare_bytes": 11
                },
                "bVar1": {
                    "buffer2_value": 1,
                    "byte1": 1,
                    "byte2": 2,
                    "byte_2": 1,
                    "byte_array2_element": 1,
                    "byte_from_array2": 2,
                    "byte_value2": 3,
                    "current_byte": 4,
                    "current_byte1": 8,
                    "current_byte_2": 1,
                    "current_data": 1,
                    "element2": 2,
                    "second_byte": 1,
                    "value2": 3
                },
                "bVar3": {
                    "are_equal": 2,
                    "compare_result": 1,
                    "is_comparison_true": 1,
                    "is_equal": 17,
                    "is_match": 6,
                    "is_matching": 2,
                    "is_same": 1
                },
                "param_1": {
                    "array1": 11,
                    "buffer1": 1,
                    "byte_array1": 5,
                    "byte_array_1": 1,
                    "bytes1": 4,
                    "data1": 1,
                    "first_bytes": 1,
                    "input1": 2,
                    "input_bytes1": 2,
                    "input_bytes_1": 2,
                    "input_data1": 1
                },
                "param_2": {
                    "array2": 11,
                    "buffer2": 1,
                    "byte_array2": 5,
                    "byte_array_2": 1,
                    "bytes2": 4,
                    "data2": 1,
                    "input2": 2,
                    "input_bytes2": 2,
                    "input_bytes_2": 2,
                    "input_data2": 1,
                    "second_bytes": 1
                },
                "uVar2": {
                    "array1_byte": 2,
                    "buffer1_value": 1,
                    "byte1": 3,
                    "byte_1": 1,
                    "byte_array1_element": 1,
                    "byte_from_array1": 3,
                    "byte_value1": 4,
                    "current_byte2": 6,
                    "current_byte_1": 1,
                    "element1": 2,
                    "first_byte": 3,
                    "initial_data": 1,
                    "value1": 3
                }
            },
            "called": [
                "FUN_00004e52"
            ],
            "calling": [
                "FUN_00002fe0",
                "FUN_00004e52",
                "FUN_00002a18",
                "FUN_00002b10",
                "FUN_00005100",
                "FUN_0000316c"
            ],
            "code": "\nint compare_byte_arrays_00004e52(byte *array1,byte *array2)\n\n{\n  byte current_byte1;\n  uint current_byte2;\n  bool is_equal;\n  \n  do {\n    current_byte2 = (uint)*array1;\n    current_byte1 = *array2;\n    is_equal = current_byte2 == 1;\n    if (current_byte2 != 0) {\n      is_equal = current_byte2 == current_byte1;\n    }\n    array1 = array1 + 1;\n    array2 = array2 + 1;\n  } while (is_equal);\n  return current_byte2 - current_byte1;\n}\n\n",
            "current_name": "compare_byte_arrays_00004e52",
            "entrypoint": "0x00004e52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004e52": "compare_byte_arrays_00004e52",
                "bVar1": "current_byte1",
                "bVar3": "is_equal",
                "param_1": "array1",
                "param_2": "array2",
                "uVar2": "current_byte2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004e66": {
            "additional_data": {
                "FUN_00004e66": {
                    "compare_and_calc_difference": 1,
                    "compare_and_calculate_difference": 3,
                    "compare_and_calculate_offset": 1,
                    "compare_and_get_difference": 1,
                    "compare_and_subtract": 3,
                    "compare_arrays": 3,
                    "compare_byte_arrays": 3,
                    "compare_bytes": 9,
                    "compare_data": 1,
                    "compare_with_offset": 1,
                    "find_difference": 4,
                    "find_modified_byte": 1
                },
                "iVar2": {
                    "difference": 21,
                    "offset": 1,
                    "result": 8
                },
                "param_1": {
                    "array1": 4,
                    "buffer": 3,
                    "buffer1": 1,
                    "byte_array1": 2,
                    "data": 3,
                    "data1": 2,
                    "input": 1,
                    "input_array": 3,
                    "input_buffer": 3,
                    "input_bytes": 1,
                    "input_data": 2,
                    "source": 1,
                    "source_array": 3,
                    "source_bytes": 1
                },
                "param_2": {
                    "array2_index": 1,
                    "array2_start": 1,
                    "array_length": 2,
                    "buffer1_offset": 1,
                    "byte_array2_start_index": 1,
                    "idx_base": 1,
                    "length1": 1,
                    "offset": 5,
                    "offset1": 1,
                    "src_array_length": 1,
                    "start1": 1,
                    "start_idx": 1,
                    "start_index": 11,
                    "start_offset": 1,
                    "starting_index": 1,
                    "target_index": 1
                },
                "param_3": {
                    "array2_length": 1,
                    "array_length": 2,
                    "buffer1_length": 1,
                    "byte_array1_length": 1,
                    "compare_length": 1,
                    "comparison_length": 1,
                    "dst_array_length": 1,
                    "len": 1,
                    "length": 17,
                    "length1": 2,
                    "length2": 1,
                    "size": 2
                },
                "pbVar1": {
                    "byte_ptr": 1,
                    "byte_ptr1": 1,
                    "current_byte": 16,
                    "current_byte1": 2,
                    "current_element": 1,
                    "current_element1": 1,
                    "ptr1": 3,
                    "source_pointer": 1,
                    "source_ptr": 1,
                    "src_byte": 1,
                    "src_pointer": 1,
                    "src_ptr": 1
                },
                "pbVar3": {
                    "buffer2": 1,
                    "byte_ptr2": 1,
                    "compare_array": 1,
                    "compare_byte2": 1,
                    "compare_ptr": 1,
                    "compared_byte": 1,
                    "comparison_byte": 2,
                    "current_byte2": 1,
                    "current_element2": 1,
                    "dst_pointer": 1,
                    "dst_ptr": 1,
                    "next_byte": 12,
                    "next_element": 1,
                    "ptr2": 3,
                    "target_pointer": 1,
                    "tgt_byte": 1
                },
                "uVar4": {
                    "byte1_value": 1,
                    "byte_value": 2,
                    "current_byte": 2,
                    "current_byte2": 1,
                    "current_byte_value": 8,
                    "current_value": 6,
                    "element": 1,
                    "element_value": 1,
                    "next_byte": 1,
                    "previous_byte": 1,
                    "source_value": 1,
                    "src_value": 1,
                    "temp": 1,
                    "temp_byte": 1,
                    "temp_value": 1,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "code": "\nint compare_bytes_00004e66(byte *array1,int start_index,int length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *next_byte;\n  uint current_byte_value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    next_byte = (byte *)(start_index + -1);\n    current_byte = array1;\n    do {\n      current_byte_value = (uint)*current_byte;\n      next_byte = next_byte + 1;\n      if ((current_byte_value != *next_byte) || (current_byte + 1 == array1 + length)) break;\n      current_byte = current_byte + 1;\n    } while (current_byte_value != 0);\n    difference = current_byte_value - *next_byte;\n  }\n  return difference;\n}\n\n",
            "current_name": "compare_bytes_00004e66",
            "entrypoint": "0x00004e66",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004e66": "compare_bytes_00004e66",
                "iVar2": "difference",
                "param_1": "array1",
                "param_2": "start_index",
                "param_3": "length",
                "pbVar1": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "current_byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004f84": {
            "additional_data": {
                "FUN_00004f84": {
                    "convert_hex_ascii_to_integer": 1,
                    "convert_string_to_int": 1,
                    "convert_string_to_number": 2,
                    "decode_number": 3,
                    "parse_int": 1,
                    "parse_integer": 10,
                    "parse_number": 12,
                    "parse_signed_integer": 1
                },
                "iVar5": {
                    "comp": 1,
                    "compare_result": 1,
                    "comparison": 9,
                    "comparison_result": 8,
                    "computation_result": 1,
                    "index": 1,
                    "is_negative": 1,
                    "is_overflow": 1,
                    "is_valid": 1,
                    "result_state": 1,
                    "sign": 1,
                    "sign_changed": 1,
                    "state": 1,
                    "status": 3
                },
                "param_1": {
                    "input": 10,
                    "input_buffer": 1,
                    "input_str": 1,
                    "input_string": 18
                },
                "param_2": {
                    "end_ptr": 1,
                    "next_ptr": 1,
                    "output": 9,
                    "output_pointer": 7,
                    "output_ptr": 3,
                    "output_string": 4,
                    "remainder": 1,
                    "remaining_string": 4
                },
                "param_3": {
                    "base": 30,
                    "radix": 1
                },
                "pbVar8": {
                    "curr_char": 1,
                    "current_byte": 13,
                    "current_char": 12,
                    "current_digit": 1,
                    "current_pointer": 1,
                    "current_ptr": 2,
                    "p_current_char": 1
                },
                "pbVar9": {
                    "next_byte": 13,
                    "next_char": 13,
                    "next_digit": 1,
                    "next_pointer": 1,
                    "next_ptr": 2,
                    "p_next_char": 1
                },
                "uVar1": {
                    "parsed_integer": 3,
                    "parsed_number": 4,
                    "parsed_result": 1,
                    "parsed_value": 1,
                    "result": 22
                },
                "uVar2": {
                    "ch": 6,
                    "char_value": 1,
                    "current_char": 18,
                    "current_digit": 2,
                    "current_value": 1,
                    "digit": 3
                },
                "uVar3": {
                    "char_flags": 1,
                    "flag": 2,
                    "found_non_whitespace": 1,
                    "is_negative": 25,
                    "is_sign_found": 1,
                    "valid_digit": 1
                },
                "uVar4": {
                    "char_value": 3,
                    "current_digit": 1,
                    "digit": 6,
                    "digit_value": 18,
                    "numeric_value": 1,
                    "parsed_digit": 2
                },
                "uVar6": {
                    "int_max": 2,
                    "limit": 1,
                    "max_bound": 1,
                    "max_dividend": 2,
                    "max_int": 5,
                    "max_limit": 1,
                    "max_result": 3,
                    "max_value": 15,
                    "temp": 1
                },
                "uVar7": {
                    "div_result": 1,
                    "divide_result": 1,
                    "divisor": 8,
                    "max_div": 1,
                    "max_dividend": 1,
                    "max_divisor": 1,
                    "max_quotient": 3,
                    "max_state": 1,
                    "quotient": 13,
                    "result_div": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "code": "\nuint parse_number_00004f84(byte *input_string,byte **output,uint base)\n\n{\n  uint result;\n  uint current_char;\n  uint is_negative;\n  uint digit_value;\n  int comparison;\n  uint max_value;\n  uint quotient;\n  byte *current_byte;\n  byte *next_char;\n  \n  next_char = input_string;\n  do {\n    current_byte = next_char;\n    next_char = current_byte + 1;\n    current_char = (uint)*current_byte;\n    is_negative = (byte)(&DAT_00007a99)[current_char] & 8;\n  } while (((&DAT_00007a99)[current_char] & 8) != 0);\n  if (current_char == 0x2d) {\n    current_char = (uint)*next_char;\n    is_negative = 1;\n    next_char = current_byte + 2;\n  }\n  else if (current_char == 0x2b) {\n    current_char = (uint)*next_char;\n    next_char = current_byte + 2;\n  }\n  if (base == 0) {\n    if (current_char != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (current_char != 0x30)) goto LAB_00004ed6;\n  if ((*next_char & 0xdf) == 0x58) {\n    current_char = (uint)next_char[1];\n    base = 0x10;\n    next_char = next_char + 2;\n  }\n  else {\n    current_char = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  max_value = is_negative + 0x7fffffff;\n  comparison = 0;\n  quotient = max_value / base;\n  result = 0;\n  do {\n    digit_value = current_char - 0x30;\n    if (9 < digit_value) {\n      if (current_char - 0x41 < 0x1a) {\n        digit_value = current_char - 0x37;\n      }\n      else {\n        if (0x19 < current_char - 0x61) break;\n        digit_value = current_char - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit_value) break;\n    if (comparison != -1) {\n      if ((quotient < result) || ((quotient == result && ((int)(max_value - base * quotient) < (int)digit_value)))) {\n        comparison = -1;\n      }\n      else {\n        result = result * base + digit_value;\n        comparison = 1;\n      }\n    }\n    current_char = (uint)*next_char;\n    next_char = next_char + 1;\n  } while( true );\n  if (comparison == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = max_value;\n    if (output == (byte **)0x0) {\n      return max_value;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      result = -result;\n    }\n    if (output == (byte **)0x0) {\n      return result;\n    }\n    if (comparison == 0) goto LAB_00004f64;\n  }\n  input_string = next_char + -1;\nLAB_00004f64:\n  *output = input_string;\n  return result;\n}\n\n",
            "current_name": "parse_number_00004f84",
            "entrypoint": "0x00004f84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004f84": "parse_number_00004f84",
                "iVar5": "comparison",
                "param_1": "input_string",
                "param_2": "output",
                "param_3": "base",
                "pbVar8": "current_byte",
                "pbVar9": "next_char",
                "uVar1": "result",
                "uVar2": "current_char",
                "uVar3": "is_negative",
                "uVar4": "digit_value",
                "uVar6": "max_value",
                "uVar7": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004f98": {
            "additional_data": {
                "FUN_00004f98": {
                    "calculate_date_difference": 1,
                    "calculate_date_offset": 1,
                    "calculate_day_of_the_week": 1,
                    "calculate_day_of_week": 17,
                    "calculate_leap_year": 1,
                    "calculate_leap_year_days": 1,
                    "calculate_week_number": 1,
                    "calculate_weekday": 6,
                    "calculate_weekday_of_date": 1,
                    "determine_leap_year": 1
                },
                "UNK_00007b98": {
                    "days_in_month_table": 1,
                    "days_table": 1,
                    "month_data_array": 1,
                    "month_lengths": 1,
                    "month_offsets": 1,
                    "month_table": 1,
                    "months_table": 1
                },
                "iVar11": {
                    "weekday_offset": 1
                },
                "iVar12": {
                    "temp": 1
                },
                "iVar13": {
                    "remainder": 1
                },
                "iVar14": {
                    "adjustment": 1,
                    "offset": 1
                },
                "iVar15": {
                    "result": 1
                },
                "iVar4": {
                    "adjusted_days": 2,
                    "calculation_result": 1,
                    "day_adjustment": 1,
                    "day_index": 1,
                    "day_of_week": 2,
                    "day_offset": 5,
                    "days_count": 1,
                    "days_from_ref": 1,
                    "days_passed": 1,
                    "days_since1900": 2,
                    "days_to_add": 3,
                    "leap_year_correction": 1,
                    "offset": 2,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_var1": 1,
                    "total_days": 3,
                    "total_days_offset": 1,
                    "total_offset": 1
                },
                "iVar6": {
                    "adjusted_days_of_year": 1,
                    "base_days": 2,
                    "base_offset": 3,
                    "base_value": 1,
                    "constant_var1": 1,
                    "days_offset": 1,
                    "days_since2000": 1,
                    "days_since_base_year": 1,
                    "days_since_ref": 1,
                    "days_since_reference": 1,
                    "extra_days": 4,
                    "fixed_offset": 1,
                    "initial_value": 1,
                    "leap_years": 1,
                    "month_offset": 1,
                    "num_weeks_to_add": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "total_days": 2,
                    "total_days_offset": 1,
                    "total_offset": 1,
                    "year_index": 1,
                    "year_offset": 2
                },
                "iVar8": {
                    "counter": 2,
                    "day_index": 2,
                    "i": 10,
                    "index": 3,
                    "iteration": 2,
                    "loop_counter": 1,
                    "loop_var1": 1,
                    "month_index": 4,
                    "month_offset": 2,
                    "temp3": 1,
                    "temp5": 1,
                    "week_index": 1,
                    "weekday_index": 1
                },
                "iVar9": {
                    "adjusted_day_index": 1,
                    "adjusted_offset": 1,
                    "adjustment": 1,
                    "day_index": 1,
                    "day_of_month_index": 1,
                    "day_of_month_offset": 1,
                    "day_of_week": 2,
                    "day_of_week_index": 1,
                    "day_offset": 3,
                    "days_from_first_day_of_week": 1,
                    "days_from_friday": 1,
                    "days_from_start_of_week": 1,
                    "days_in_month": 1,
                    "days_of_week_offset": 1,
                    "days_offset": 2,
                    "days_passed": 1,
                    "days_until_given_date": 1,
                    "days_until_target": 1,
                    "offset": 3,
                    "remainder": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp_var2": 1,
                    "week_day_offset": 1,
                    "week_offset": 1
                },
                "param_1": {
                    "date": 1,
                    "input_date": 1,
                    "year": 29
                },
                "puVar1": {
                    "memory": 2,
                    "memory_address": 20,
                    "memory_address_ptr": 1,
                    "memory_block": 1,
                    "memory_buffer": 1,
                    "memory_pointer": 1,
                    "memory_ptr": 2,
                    "result": 1,
                    "result_array": 2
                },
                "puVar5": {
                    "calendar": 3,
                    "calendar_data": 4,
                    "calendar_data_ptr": 1,
                    "current_block": 1,
                    "current_date": 3,
                    "current_memory_address": 2,
                    "current_ptr": 1,
                    "current_week": 1,
                    "data": 1,
                    "date_array": 1,
                    "date_info": 1,
                    "date_pointer": 1,
                    "date_table": 1,
                    "memoized_values": 1,
                    "month_array": 1,
                    "p_array1": 1,
                    "pointer": 1,
                    "ptr": 1,
                    "result_array_ptr": 1,
                    "struct_pointer": 1,
                    "table": 1,
                    "temp_pointer": 1,
                    "week_data": 1
                },
                "uVar10": {
                    "divisible_by400": 1,
                    "is_century_leap_year": 1,
                    "is_divisible": 4,
                    "is_divisible_by100": 1,
                    "is_divisible_by4": 1,
                    "is_divisible_by400": 6,
                    "is_leap": 1,
                    "is_leap_checked": 1,
                    "is_leap_year": 3,
                    "is_leap_year_factor": 1,
                    "is_leap_year_flag": 2,
                    "is_leap_year_index": 1,
                    "is_multiple_of400": 2,
                    "leap_year_extra_days": 1,
                    "leap_year_offset": 2,
                    "multiple_of400": 1,
                    "remainder": 1,
                    "temp7": 1
                },
                "uVar11": {
                    "is_divisible_by100": 1
                },
                "uVar12": {
                    "is_divisible_by4": 1
                },
                "uVar13": {
                    "is_january_or_february": 1
                },
                "uVar2": {
                    "is_leap_year": 13,
                    "is_success": 1,
                    "is_valid": 1,
                    "result": 16
                },
                "uVar3": {
                    "accumulator": 1,
                    "day_of_week": 11,
                    "day_of_week_index": 2,
                    "day_of_week_offset": 2,
                    "day_of_year": 1,
                    "days": 1,
                    "days_offset": 1,
                    "i": 1,
                    "index": 1,
                    "month_index": 1,
                    "num_days": 1,
                    "remainder": 1,
                    "temp": 1,
                    "temp1": 1,
                    "week_day": 1,
                    "weekday_index": 1,
                    "weekday_offset": 3
                },
                "uVar7": {
                    "is_century_leap_year": 1,
                    "is_divisible_by400": 1,
                    "is_leap": 3,
                    "is_leap_year": 10,
                    "is_leap_year2": 1,
                    "is_leap_year_check": 1,
                    "is_leap_year_flag": 1,
                    "is_leap_year_offset": 2,
                    "leap_year": 7,
                    "leap_year_adjustment": 1,
                    "leap_year_flag": 1,
                    "leap_year_offset": 1,
                    "temp4": 1
                }
            },
            "called": [
                "FUN_000056b0"
            ],
            "calling": [
                "FUN_000047e4",
                "FUN_00005100"
            ],
            "code": "\nundefined4 calculate_day_of_the_week_00004f98(uint year)\n\n{\n  uint *memory_address;\n  undefined4 result;\n  uint day_of_week;\n  int day_offset;\n  uint *calendar_data;\n  int extra_days;\n  uint is_leap_year;\n  int i;\n  int offset;\n  uint is_divisible_by400;\n  \n  memory_address = (uint *)get_memory_address_000056b0();\n  if ((int)year < 0x7b2) {\n    result = 0;\n  }\n  else {\n    extra_days = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    memory_address[1] = year;\n    is_divisible_by400 = (uint)(year % 400 == 0);\n    calendar_data = memory_address;\n    do {\n      day_of_week = calendar_data[5];\n      if (*(char *)(calendar_data + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)day_of_week < 0x3c) {\n            day_offset = 0;\n          }\n          else {\n            day_offset = 1;\n          }\n        }\n        else {\n          day_offset = 0;\n        }\n        day_offset = day_offset + extra_days + day_of_week + -1;\n      }\n      else if (*(char *)(calendar_data + 2) == 'D') {\n        day_offset = extra_days + day_of_week;\n      }\n      else {\n        is_leap_year = is_divisible_by400;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          is_leap_year = 1;\n        }\n        i = 0;\n        day_offset = extra_days;\n        while( true ) {\n          i = i + 1;\n          if ((int)calendar_data[3] <= i) break;\n          day_offset = day_offset + *(int *)(&month_table + i * 4 + is_leap_year * 0x30);\n        }\n        offset = day_of_week - (day_offset + 4U) % 7;\n        if (offset < 0) {\n          offset = offset + 7;\n        }\n        for (offset = (calendar_data[4] - 1) * 7 + offset;\n            *(int *)(&month_table + i * 4 + is_leap_year * 0x30) <= offset; offset = offset + -7) {\n        }\n        day_offset = day_offset + offset;\n      }\n      day_of_week = calendar_data[10] + day_offset * 0x15180 + calendar_data[6];\n      calendar_data[8] = day_of_week;\n      calendar_data[9] = (int)day_of_week >> 0x1f;\n      calendar_data = calendar_data + 10;\n    } while (memory_address + 0x14 != calendar_data);\n    day_of_week = memory_address[9];\n    is_divisible_by400 = memory_address[0x13];\n    *memory_address = (uint)((int)((day_of_week - is_divisible_by400) - (uint)(memory_address[8] < memory_address[0x12])) < 0 !=\n                    (SBORROW4(day_of_week,is_divisible_by400) !=\n                    SBORROW4(day_of_week - is_divisible_by400,(uint)(memory_address[8] < memory_address[0x12]))));\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_day_of_the_week_00004f98",
            "entrypoint": "0x00004f98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004f98": "calculate_day_of_the_week_00004f98",
                "UNK_00007b98": "month_table",
                "iVar4": "day_offset",
                "iVar6": "extra_days",
                "iVar8": "i",
                "iVar9": "offset",
                "param_1": "year",
                "puVar1": "memory_address",
                "puVar5": "calendar_data",
                "uVar10": "is_divisible_by400",
                "uVar2": "result",
                "uVar3": "day_of_week",
                "uVar7": "is_leap_year"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000050e8": {
            "additional_data": {
                "DAT_1fff0deb": {
                    "base_address": 1,
                    "data_pointer": 1,
                    "memory_address": 13,
                    "start_address": 2,
                    "starting_address": 2
                },
                "FUN_000050e8": {
                    "get_base_address": 1,
                    "get_data_address": 6,
                    "get_data_pointer": 5,
                    "get_global_data_pointer": 1,
                    "get_mem_address": 1,
                    "get_memory_address": 12,
                    "get_pointer_to_data": 1,
                    "get_start_address": 2,
                    "get_starting_address": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_000047e4"
            ],
            "code": "\nundefined * get_memory_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "current_name": "get_memory_address_000050e8",
            "entrypoint": "0x000050e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000050f4": {
            "additional_data": {
                "DAT_1fff0deb": {
                    "address": 1,
                    "data_pointer": 2,
                    "global_data": 1,
                    "memory_address": 10,
                    "memory_location": 1,
                    "start_address": 2,
                    "starting_address": 1
                },
                "FUN_000050f4": {
                    "get_address": 1,
                    "get_base_address": 1,
                    "get_dat_address": 1,
                    "get_data_address": 3,
                    "get_data_buffer": 1,
                    "get_data_pointer": 4,
                    "get_data_ptr": 2,
                    "get_global_data": 1,
                    "get_memory_address": 12,
                    "get_memory_location": 1,
                    "get_start_address": 2,
                    "get_starting_address": 2
                },
                "undefined": {
                    "pointer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000047e4"
            ],
            "code": "\npointer * get_memory_address_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "current_name": "get_memory_address_000050f4",
            "entrypoint": "0x000050f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000050f4": "get_memory_address_000050f4",
                "undefined": "pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005100": {
            "additional_data": {
                "DAT_00007a5c": {
                    "data1": 1,
                    "data_pointer": 1,
                    "key_offset": 1
                },
                "DAT_00007a5f": {
                    "data2": 1,
                    "data_info": 1,
                    "data_offset1": 1,
                    "default_offset1": 1
                },
                "DAT_1fff0dbc": {
                    "data4": 1,
                    "data_5": 1,
                    "number2": 1,
                    "offset2": 1
                },
                "DAT_1fff0dc7": {
                    "data3": 1,
                    "data_4": 1,
                    "number": 1,
                    "offset1": 1
                },
                "DAT_1fff0dd4": {
                    "data_3": 1,
                    "data_block": 2,
                    "data_offset2": 1,
                    "data_structure": 1
                },
                "DAT_1fff0dd8": {
                    "data_1": 1,
                    "key": 1,
                    "pointer1": 1
                },
                "DAT_1fff0ddc": {
                    "data_2": 1,
                    "default_offset2": 1,
                    "pointer2": 1
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "array": 1,
                    "elf_table": 1,
                    "rel_array": 2,
                    "relocation_array": 2
                },
                "FUN_00005100": {
                    "extract_data": 2,
                    "initialize_and_process_data": 1,
                    "initialize_data": 2,
                    "initialize_data_structure": 5,
                    "parse_and_store_data": 3,
                    "parse_and_update_binary_data": 2,
                    "parse_and_update_data": 2,
                    "parse_binary_data": 3,
                    "parse_data_from_binary": 1,
                    "process_binary_data": 4,
                    "process_binary_data_and_initialize": 1,
                    "process_data": 2,
                    "process_key_data": 1
                },
                "allocate_and_initialize_memory_block_00004bd0": {
                    "allocate_and_initialize_block": 1,
                    "allocate_and_initialize_memory_block": 2,
                    "allocate_memory_block": 1
                },
                "bVar8": {
                    "flag": 2,
                    "is_first": 2,
                    "is_first_data": 2,
                    "is_first_data_item": 1,
                    "is_first_entry": 2,
                    "is_first_iteration": 6,
                    "is_first_key_offset": 1,
                    "is_first_parsed_data": 1,
                    "is_first_string": 1,
                    "is_multi_record": 1,
                    "is_multiple": 3,
                    "is_next_offset_set": 1,
                    "is_second_data_set": 1,
                    "is_valid": 3
                },
                "background": {
                    "background_offset": 1
                },
                "calculate_day_of_the_week_00004f98": {
                    "calculate_day_of_week": 3
                },
                "compare_byte_arrays_00004e52": {
                    "compare_byte_arrays": 3,
                    "compare_data": 1
                },
                "copy_string_00005ebc": {
                    "copy_string": 4
                },
                "dVar1": {
                    "data_offset": 2,
                    "entry_offset": 1,
                    "offset": 16,
                    "rel_offset": 5,
                    "relocation_offset": 3
                },
                "faceValue": {
                    "number_offset": 1
                },
                "find_and_update_key_offset_000056a0": {
                    "find_and_update_key_offset": 2,
                    "find_and_update_offset": 1
                },
                "find_end_of_string_00005ecc": {
                    "find_end_of_string": 4
                },
                "foreground": {
                    "foreground_offset": 1
                },
                "get_memory_address_000056b0": {
                    "get_memory_address": 3
                },
                "iVar2": {
                    "address": 1,
                    "memory_address": 26
                },
                "iVar4": {
                    "comparison_result": 22,
                    "result": 5
                },
                "iVar5": {
                    "binary_data_result": 1,
                    "count": 1,
                    "data_count": 1,
                    "data_processing_result": 3,
                    "num_result": 1,
                    "parse_result": 3,
                    "process_result": 8,
                    "processing_result": 5,
                    "result": 2,
                    "result2": 2
                },
                "initialize_data_structure_00005780": {
                    "initialize_data_structure": 1,
                    "initialize_data_structure2": 1
                },
                "local_2c": {
                    "array": 1,
                    "buffer": 1,
                    "file_path": 2,
                    "local_array": 1,
                    "memory_block": 1,
                    "parse_result_array": 1,
                    "parse_results": 1,
                    "parsed_data": 2,
                    "parsed_str": 1,
                    "result_array": 1,
                    "string_array": 10,
                    "strings_array": 1,
                    "temp_array": 1,
                    "temp_string": 1,
                    "temp_string_array": 1
                },
                "local_30": {
                    "current_position": 1,
                    "index": 1,
                    "length": 4,
                    "num_chars": 1,
                    "offset": 1,
                    "offset_length": 1,
                    "offset_size": 1,
                    "parse_index": 1,
                    "parse_offset": 2,
                    "parse_result": 1,
                    "result": 1,
                    "size": 1,
                    "start_point": 1,
                    "string_length": 5,
                    "string_offset": 1,
                    "temp_var": 1,
                    "value": 1,
                    "value7": 1,
                    "var30": 1
                },
                "local_32": {
                    "day": 2,
                    "month": 1,
                    "num6": 2,
                    "number6": 1,
                    "second2": 1,
                    "sixth_digit": 1,
                    "value2_3": 1,
                    "value6": 6,
                    "value_6": 3,
                    "value_f": 1,
                    "value_five": 1,
                    "var32": 1,
                    "var6": 1,
                    "year": 4,
                    "year_temp": 1
                },
                "local_34": {
                    "day": 1,
                    "day_of_month": 1,
                    "day_temp": 1,
                    "fifth_digit": 1,
                    "minute2": 1,
                    "month": 5,
                    "num5": 2,
                    "number5": 1,
                    "value2_2": 1,
                    "value5": 6,
                    "value_5": 3,
                    "value_e": 1,
                    "value_four": 1,
                    "var34": 1,
                    "var5": 1
                },
                "local_36": {
                    "day": 3,
                    "day_of_week": 1,
                    "fourth_digit": 1,
                    "hour2": 1,
                    "month": 1,
                    "month_temp": 1,
                    "num4": 2,
                    "number4": 1,
                    "value2_1": 1,
                    "value4": 6,
                    "value_4": 3,
                    "value_d": 1,
                    "value_zero": 1,
                    "var36": 1,
                    "var4": 1,
                    "year": 2
                },
                "local_38": {
                    "num3": 2,
                    "number3": 1,
                    "second": 6,
                    "second1": 1,
                    "second_temp": 1,
                    "seconds": 1,
                    "third_digit": 1,
                    "value1_3": 1,
                    "value3": 6,
                    "value_3": 3,
                    "value_c": 1,
                    "value_one": 1,
                    "var3": 1,
                    "var38": 1
                },
                "local_3a": {
                    "minute": 6,
                    "minute1": 1,
                    "minute_temp": 1,
                    "minutes": 1,
                    "num2": 2,
                    "number2": 1,
                    "second_digit": 1,
                    "value1_2": 1,
                    "value2": 6,
                    "value_2": 3,
                    "value_b": 1,
                    "value_two": 1,
                    "var2": 1,
                    "var3a": 1
                },
                "local_3c": {
                    "first_digit": 1,
                    "hour": 6,
                    "hour1": 1,
                    "hour_temp": 1,
                    "hours": 1,
                    "num1": 2,
                    "number1": 1,
                    "value1": 6,
                    "value1_1": 1,
                    "value_1": 3,
                    "value_a": 1,
                    "value_three": 1,
                    "var1": 1,
                    "var3c": 1
                },
                "numbers": {
                    "number_offset": 1
                },
                "parse_and_store_number_from_rel_array_00005fd8": {
                    "parse_and_store_number": 3,
                    "parse_and_store_number_from_rel_array": 1
                },
                "pcVar3": {
                    "key": 2,
                    "key_address": 1,
                    "key_offset": 23,
                    "string": 1
                },
                "pcVar7": {
                    "additional_offset": 1,
                    "binary_data": 1,
                    "byte_array_ptr": 1,
                    "current_position": 1,
                    "data": 1,
                    "data_offset": 1,
                    "data_pointer": 4,
                    "data_ptr": 1,
                    "data_string": 2,
                    "next_key_offset": 1,
                    "next_offset": 1,
                    "parse_or_remaining_data": 1,
                    "parsed_data": 2,
                    "pc_var7": 1,
                    "pointer": 3,
                    "remaining_data": 1,
                    "string_pointer": 1,
                    "temp_ptr": 1,
                    "temp_string": 1,
                    "updated_key_offset": 1
                },
                "piVar10": {
                    "first_offset": 2,
                    "first_part_index": 1,
                    "first_value_count_pointer": 1,
                    "first_value_index": 1,
                    "index1": 1,
                    "index_pointer_a": 1,
                    "index_ptr": 1,
                    "offset1": 1,
                    "parse_index_1": 1,
                    "parse_or_remaining_data_pointer1": 1,
                    "parsed_data_result1": 1,
                    "parsed_length1": 1,
                    "parsed_offset1": 1,
                    "pointer": 1,
                    "pointer2": 5,
                    "pointer_2": 2,
                    "pointer_array1_index": 1,
                    "ptr2": 1,
                    "ptr30": 1,
                    "record_offset_ptr1": 1,
                    "temp_pointer2": 1
                },
                "piVar12": {
                    "index2": 1,
                    "index2_ptr": 1,
                    "index_pointer_b": 1,
                    "offset2": 1,
                    "parse_index_2": 1,
                    "parse_or_remaining_data_pointer2": 1,
                    "parsed_data_result2": 1,
                    "parsed_length2": 1,
                    "parsed_offset2": 1,
                    "pointer": 1,
                    "pointer4": 5,
                    "pointer_4": 2,
                    "pointer_array2_index": 1,
                    "ptr3c": 1,
                    "ptr4": 1,
                    "record_offset_ptr2": 1,
                    "second_offset": 2,
                    "second_part_index": 1,
                    "second_value_count_pointer": 1,
                    "second_value_index": 1,
                    "temp_pointer4": 1
                },
                "process_binary_data_00005e68": {
                    "process_binary_data": 3,
                    "process_binary_data4": 1
                },
                "puVar11": {
                    "data2": 1,
                    "minute": 2,
                    "minute_ptr": 1,
                    "parsed_data2": 1,
                    "parsed_value2": 2,
                    "pointer": 1,
                    "pointer3": 5,
                    "pointer_3": 2,
                    "pointer_array2": 1,
                    "pointer_b": 1,
                    "ptr3": 1,
                    "ptr38": 1,
                    "record_ptr2": 1,
                    "second_part_ptr": 1,
                    "second_value": 2,
                    "second_value_pointer": 2,
                    "temp_pointer3": 1,
                    "timestamp2": 1
                },
                "puVar9": {
                    "data1": 1,
                    "first_part_ptr": 1,
                    "first_value": 2,
                    "first_value_pointer": 2,
                    "hour": 2,
                    "hour_ptr": 1,
                    "parsed_data1": 1,
                    "parsed_value1": 2,
                    "pointer": 1,
                    "pointer1": 5,
                    "pointer_1": 2,
                    "pointer_a": 1,
                    "pointer_array1": 1,
                    "ptr1": 1,
                    "ptr3a": 1,
                    "record_ptr1": 1,
                    "temp_pointer1": 1,
                    "timestamp1": 1
                },
                "star": {
                    "number2_offset": 1
                },
                "uVar6": {
                    "char_type": 1,
                    "character_type": 1,
                    "data_type": 17,
                    "flag": 3,
                    "indicator": 1,
                    "symbol_type": 2,
                    "undefined_value": 1,
                    "variable": 1
                },
                "value": {
                    "value_offset": 1
                },
                "values": {
                    "value_offset": 1
                }
            },
            "called": [
                "FUN_00005fd8",
                "FUN_00005ebc",
                "FUN_00004e52",
                "FUN_00005780",
                "FUN_00005e68",
                "FUN_00004f98",
                "FUN_000056b0",
                "FUN_000056a0",
                "FUN_00004bd0",
                "FUN_00005ecc"
            ],
            "calling": [
                "FUN_000047e4"
            ],
            "code": "\nvoid process_binary_data_and_initialize_00005100(void)\n\n{\n  dword offset;\n  int memory_address;\n  char *key_offset;\n  int comparison_result;\n  int process_result;\n  undefined data_type;\n  char *data_pointer;\n  bool is_first_iteration;\n  ushort *pointer1;\n  int *pointer2;\n  ushort *pointer3;\n  int *pointer4;\n  ushort value1;\n  ushort value2;\n  ushort second;\n  ushort value4;\n  ushort value5;\n  ushort value6;\n  int string_length;\n  char *string_array [2];\n  \n  offset = rel_array[16].r_offset;\n  memory_address = get_memory_address();\n  key_offset = (char *)find_and_update_key_offset(offset,&DAT_00007a5c);\n  if (key_offset == (char *)0x0) {\n    rel_array[28].r_info = (dword)&DAT_00007a5f;\n    rel_array[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = key_offset;\n    DAT_1fff0ddc = key_offset;\n    initialize_data_structure(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (comparison_result = compare_byte_arrays(), comparison_result != 0)) {\n    initialize_data_structure(DAT_1fff0dd4);\n    comparison_result = find_end_of_string(key_offset);\n    DAT_1fff0dd4 = allocate_and_initialize_memory_block(offset,comparison_result + 1);\n    if (DAT_1fff0dd4 != 0) {\n      copy_string(DAT_1fff0dd4,key_offset);\n    }\n    if (*key_offset == ':') {\n      key_offset = key_offset + 1;\n    }\n    comparison_result = process_binary_data(key_offset,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&string_length);\n    if (0 < comparison_result) {\n      data_pointer = key_offset + string_length;\n      if (key_offset[string_length] == '-') {\n        data_pointer = data_pointer + 1;\n        comparison_result = -1;\n      }\n      else {\n        if (key_offset[string_length] == '+') {\n          data_pointer = data_pointer + 1;\n        }\n        comparison_result = 1;\n      }\n      value2 = 0;\n      second = 0;\n      pointer1 = &value2;\n      pointer2 = &string_length;\n      pointer3 = &second;\n      pointer4 = &string_length;\n      process_result = process_binary_data(data_pointer,\"%hu%n:%hu%n:%hu%n\",&value1,&string_length,&value2,&string_length,\n                           &second,&string_length);\n      if (0 < process_result) {\n        *(uint *)(memory_address + 0x28) =\n             ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)second) * comparison_result;\n        rel_array[28].r_info = (dword)&DAT_1fff0dc7;\n        data_pointer = data_pointer + string_length;\n        comparison_result = process_binary_data(data_pointer,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&string_length,pointer1,pointer2,pointer3,\n                             pointer4);\n        if (comparison_result < 1) {\n          rel_array[29].r_offset = rel_array[28].r_info;\n          DAT_1fff0ddc = *(char **)(memory_address + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          rel_array[29].r_offset = (dword)&DAT_1fff0dbc;\n          key_offset = data_pointer + string_length;\n          if (data_pointer[string_length] == '-') {\n            key_offset = key_offset + 1;\n            comparison_result = -1;\n          }\n          else {\n            if (data_pointer[string_length] == '+') {\n              key_offset = key_offset + 1;\n            }\n            comparison_result = 1;\n          }\n          value1 = 0;\n          value2 = 0;\n          second = 0;\n          string_length = 0;\n          process_result = process_binary_data(key_offset,\"%hu%n:%hu%n:%hu%n\",&value1,&string_length,&value2,&string_length,\n                               &second,&string_length);\n          if (process_result < 1) {\n            comparison_result = *(int *)(memory_address + 0x28) + -0xe10;\n          }\n          else {\n            comparison_result = ((uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)second) * comparison_result;\n          }\n          *(int *)(memory_address + 0x50) = comparison_result;\n          key_offset = key_offset + string_length;\n          is_first_iteration = false;\n          comparison_result = memory_address;\n          while( true ) {\n            if (*key_offset == ',') {\n              key_offset = key_offset + 1;\n            }\n            if (*key_offset == 'M') {\n              process_result = process_binary_data(key_offset,\"M%hu%n.%hu%n.%hu%n\",&value4,&string_length,&value5,\n                                   &string_length,&value6,&string_length);\n              if (process_result != 3) {\n                return;\n              }\n              if (0xb < value4 - 1) {\n                return;\n              }\n              if (4 < value5 - 1) {\n                return;\n              }\n              if (6 < value6) {\n                return;\n              }\n              *(uint *)(comparison_result + 0xc) = (uint)value4;\n              *(uint *)(comparison_result + 0x10) = (uint)value5;\n              *(undefined *)(comparison_result + 8) = 0x4d;\n              *(uint *)(comparison_result + 0x14) = (uint)value6;\n              data_pointer = key_offset + string_length;\n            }\n            else {\n              if (*key_offset == 'J') {\n                key_offset = key_offset + 1;\n                data_type = 0x4a;\n              }\n              else {\n                data_type = 0x44;\n              }\n              value6 = parse_and_store_number(key_offset,string_array,10);\n              data_pointer = string_array[0];\n              if (string_array[0] == key_offset) {\n                if (is_first_iteration) {\n                  *(undefined *)(memory_address + 0x30) = 0x4d;\n                  *(undefined4 *)(memory_address + 0x34) = 0xb;\n                  *(undefined4 *)(memory_address + 0x38) = 1;\n                  *(undefined4 *)(memory_address + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(memory_address + 8) = 0x4d;\n                  *(undefined4 *)(memory_address + 0xc) = 3;\n                  *(undefined4 *)(memory_address + 0x10) = 2;\n                  *(undefined4 *)(memory_address + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(comparison_result + 8) = data_type;\n                *(uint *)(comparison_result + 0x14) = (uint)value6;\n              }\n            }\n            value1 = 2;\n            value2 = 0;\n            second = 0;\n            string_length = 0;\n            if (*data_pointer == '/') {\n              process_binary_data(data_pointer,&DAT_00007a85,&value1,&string_length,&value2,&string_length,&second,\n                           &string_length);\n            }\n            *(uint *)(comparison_result + 0x18) =\n                 (uint)value1 * 0xe10 + (uint)value2 * 0x3c + (uint)second;\n            comparison_result = comparison_result + 0x28;\n            key_offset = data_pointer + string_length;\n            if (is_first_iteration) break;\n            is_first_iteration = true;\n          }\n          calculate_day_of_week(*(undefined4 *)(memory_address + 4));\n          DAT_1fff0ddc = *(char **)(memory_address + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(memory_address + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_binary_data_and_initialize_00005100",
            "entrypoint": "0x00005100",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_00005100": "process_binary_data_and_initialize_00005100",
                "allocate_and_initialize_memory_block_00004bd0": "allocate_and_initialize_memory_block",
                "bVar8": "is_first_iteration",
                "calculate_day_of_the_week_00004f98": "calculate_day_of_week",
                "compare_byte_arrays_00004e52": "compare_byte_arrays",
                "copy_string_00005ebc": "copy_string",
                "dVar1": "offset",
                "find_and_update_key_offset_000056a0": "find_and_update_key_offset",
                "find_end_of_string_00005ecc": "find_end_of_string",
                "get_memory_address_000056b0": "get_memory_address",
                "iVar2": "memory_address",
                "iVar4": "comparison_result",
                "iVar5": "process_result",
                "initialize_data_structure_00005780": "initialize_data_structure",
                "local_2c": "string_array",
                "local_30": "string_length",
                "local_32": "value6",
                "local_34": "value5",
                "local_36": "value4",
                "local_38": "second",
                "local_3a": "value2",
                "local_3c": "value1",
                "parse_and_store_number_from_rel_array_00005fd8": "parse_and_store_number",
                "pcVar3": "key_offset",
                "pcVar7": "data_pointer",
                "piVar10": "pointer2",
                "piVar12": "pointer4",
                "process_binary_data_00005e68": "process_binary_data",
                "puVar11": "pointer3",
                "puVar9": "pointer1",
                "uVar6": "data_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005404": {
            "additional_data": {
                "DAT_00007998": {
                    "dat_bss_3": 1,
                    "dat_value_3": 1,
                    "static_pointer_3": 1
                },
                "DAT_000079b8": {
                    "dat_bss_1": 1,
                    "dat_value_1": 1,
                    "static_pointer_1": 1
                },
                "DAT_000079d8": {
                    "dat_bss_2": 1,
                    "dat_value_2": 1,
                    "static_pointer_2": 1
                },
                "DECODE_AND_PROCESS_DATA_000054a8": {
                    "decode_and_process_data": 1
                },
                "FUN_00005404": {
                    "decode_and_process_data": 1,
                    "decode_and_process_input": 1,
                    "decode_and_update_data": 1,
                    "process_and_validate_data": 3,
                    "process_data": 24,
                    "process_input_data": 1
                },
                "decode_and_process_data_000054a8": {
                    "decode_and_process_data": 19
                },
                "iVar1": {
                    "data_index": 1,
                    "data_offset": 1,
                    "difference": 2,
                    "index": 2,
                    "index1": 1,
                    "offset": 1,
                    "result": 12,
                    "temp1": 1,
                    "temp_var1": 4
                },
                "initialize_memory_and_process_elf_relocations_000042a4": {
                    "init_memory_and_relocations": 1,
                    "initialize_memory_and_process_elf_relocations": 16,
                    "initialize_memory_and_process_relocations": 3
                },
                "param_1": {
                    "arg1": 2,
                    "base_address": 1,
                    "data_address": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "elf_base": 1,
                    "elf_module": 1,
                    "elf_pointer": 1,
                    "input": 2,
                    "input_address": 1,
                    "input_data": 2,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_pointer": 5,
                    "input_ptr": 4,
                    "input_size": 1,
                    "ptr1": 1,
                    "ptr_to_memory": 1,
                    "source": 1,
                    "status": 1
                },
                "param_2": {
                    "arg2": 2,
                    "byte_to_process": 2,
                    "character": 2,
                    "data": 5,
                    "data_size": 2,
                    "input": 1,
                    "input_flag": 1,
                    "input_length": 1,
                    "input_value": 3,
                    "size": 1,
                    "value": 11
                },
                "param_3": {
                    "buffer": 1,
                    "data": 8,
                    "data_array": 7,
                    "data_buffer": 1,
                    "data_pointer": 5,
                    "data_ptr": 4,
                    "input_buffer": 1,
                    "input_data": 2,
                    "memory": 1,
                    "ptr2": 1
                },
                "param_4": {
                    "additional_param": 3,
                    "arg4": 2,
                    "config": 3,
                    "constant": 1,
                    "flag": 6,
                    "length": 1,
                    "param": 4,
                    "param4": 1,
                    "param_4": 5,
                    "param_value": 2,
                    "parameter": 1,
                    "relocation_value": 1,
                    "value": 1
                },
                "process_and_validate_data_00004158": {
                    "process_and_validate_data": 20
                },
                "puVar3": {
                    "byte_pointer": 2,
                    "character_pointer": 1,
                    "current_byte": 2,
                    "data_byte_pointer": 1,
                    "data_byte_ptr": 1,
                    "data_pointer": 2,
                    "next_byte": 1,
                    "pointer": 2,
                    "ptr": 8,
                    "ptr3": 1,
                    "ptr_to_undefined": 1,
                    "target_byte": 1,
                    "temp_ptr": 1,
                    "temp_var3": 1
                },
                "uVar2": {
                    "data_value": 2,
                    "index2": 1,
                    "shifted_data": 1,
                    "shifted_value": 11,
                    "short_value": 1,
                    "temp2": 1,
                    "temp_var2": 4,
                    "ushort_value": 2,
                    "ushort_var": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_000042a4",
                "FUN_000054a8",
                "FUN_00004158"
            ],
            "calling": [
                "FUN_00004cb4",
                "FUN_00004db8",
                "FUN_000057a8"
            ],
            "code": "\nuint process_and_validate_data_00005404(int input_pointer,uint value,int *data,undefined4 flag)\n\n{\n  int result;\n  uint shifted_value;\n  undefined *ptr;\n  \n  if ((input_pointer != 0) && (*(int *)(input_pointer + 0x18) == 0)) {\n    initialize_memory_and_process_elf_relocations();\n  }\n  if (data == &DAT_000079b8) {\n    data = *(int **)(input_pointer + 4);\n  }\n  else if (data == (int *)&DAT_000079d8) {\n    data = *(int **)(input_pointer + 8);\n  }\n  else if (data == (int *)&DAT_00007998) {\n    data = *(int **)(input_pointer + 0xc);\n  }\n  data[2] = data[6];\n  shifted_value = (uint)*(ushort *)(data + 3);\n  result = shifted_value << 0x1c;\n  if (((result < 0) && (shifted_value = data[4], shifted_value != 0)) ||\n     (result = decode_and_process_data(input_pointer,data,result,shifted_value,flag), result == 0)) {\n    result = *data - data[4];\n    value = value & 0xff;\n    if ((result < data[5]) || (result = process_and_validate_data_00005404(input_pointer,data), result == 0)) {\n      data[2] = data[2] + -1;\n      ptr = (undefined *)*data;\n      *data = (int)(ptr + 1);\n      *ptr = (char)value;\n      if (data[5] != result + 1) {\n        if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1f)) {\n          return value;\n        }\n        if (value != 10) {\n          return value;\n        }\n      }\n      result = process_and_validate_data_00005404(input_pointer,data);\n      if (result == 0) {\n        return value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_and_validate_data_00005404",
            "entrypoint": "0x00005404",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005404": "process_and_validate_data_00005404",
                "decode_and_process_data_000054a8": "decode_and_process_data",
                "iVar1": "result",
                "initialize_memory_and_process_elf_relocations_000042a4": "initialize_memory_and_process_elf_relocations",
                "param_1": "input_pointer",
                "param_2": "value",
                "param_3": "data",
                "param_4": "flag",
                "process_and_validate_data_00004158": "process_and_validate_data",
                "puVar3": "ptr",
                "uVar2": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000054a8": {
            "additional_data": {
                "DAT_00007998": {
                    "target3": 1
                },
                "DAT_000079b8": {
                    "target1": 1
                },
                "DAT_000079d8": {
                    "target2": 1
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "array": 1
                },
                "FUNC_000042a4": {
                    "handle_offset": 1
                },
                "FUN_000054a8": {
                    "decode_and_process_data": 1,
                    "initialize_memory": 1,
                    "process_data": 23,
                    "process_paramaters": 1,
                    "process_parameters": 1,
                    "update_data_structure": 1
                },
                "F_UNDESC_000054a8": {
                    "process_data_block": 1
                },
                "allocate_and_initialize_memory_block_00005700": {
                    "allocate_and_initialize_memory": 1,
                    "allocate_and_initialize_memory_block": 3
                },
                "dVar2": {
                    "memory_offset": 1,
                    "offset": 19,
                    "offset_value": 1,
                    "r_offset": 1,
                    "temp2": 2,
                    "temp_var2": 3,
                    "value2": 1,
                    "var2": 3
                },
                "initialize_data_structure_00004b34": {
                    "initialize_data_structure": 4
                },
                "param_1": {
                    "output": 7,
                    "output1": 2,
                    "output_buffer": 2,
                    "output_data": 4,
                    "output_param": 12,
                    "output_pointer": 2,
                    "output_status": 1,
                    "output_value": 1
                },
                "param_2": {
                    "input": 7,
                    "input1": 2,
                    "input_buffer": 2,
                    "input_data": 6,
                    "input_param": 12,
                    "input_pointer": 2
                },
                "uVar1": {
                    "flag": 6,
                    "flag1": 1,
                    "flags": 3,
                    "input_data": 1,
                    "input_value1": 2,
                    "lower16_bits": 1,
                    "mask": 1,
                    "modifiers": 1,
                    "status_flag": 1,
                    "status_flags": 1,
                    "temp1": 3,
                    "temp_var1": 4,
                    "tmp1": 1,
                    "value": 1,
                    "value1": 1,
                    "var1": 3
                },
                "uVar3": {
                    "data": 2,
                    "flag": 1,
                    "flag2": 1,
                    "flag_copy": 1,
                    "flags_copy": 1,
                    "initial_modifiers": 1,
                    "input1_flag": 1,
                    "input_value2": 2,
                    "mask": 1,
                    "old_status_flag": 1,
                    "original_lower16_bits": 1,
                    "original_status_flags": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp_flag": 1,
                    "temp_flags": 2,
                    "temp_var3": 4,
                    "tmp2": 1,
                    "value": 1,
                    "value3": 1,
                    "var3": 3
                },
                "uVar4": {
                    "flag_as_uint": 1,
                    "flags_uint": 1,
                    "input1_flag_shifted": 1,
                    "temp": 2,
                    "temp1": 3,
                    "temp3": 1,
                    "temp4": 2,
                    "temp_value": 3,
                    "temp_value1": 2,
                    "temp_var": 2,
                    "temp_var1": 2,
                    "temp_var4": 4,
                    "tmp3": 1,
                    "value": 2,
                    "value4": 1,
                    "var4": 3
                },
                "uVar5": {
                    "temp": 3,
                    "temp2": 5,
                    "temp4": 1,
                    "temp5": 2,
                    "temp_result": 1,
                    "temp_value2": 3,
                    "temp_value_2": 1,
                    "temp_var2": 3,
                    "temp_var5": 4,
                    "temp_var_2": 1,
                    "temporary_flag": 1,
                    "tmp4": 1,
                    "value": 1,
                    "value5": 1,
                    "var5": 3
                }
            },
            "called": [
                "FUN_000042a4",
                "FUN_00005700",
                "FUN_00004b34"
            ],
            "calling": [
                "FUN_000057f8",
                "FUN_00004db8",
                "FUN_00005404"
            ],
            "code": "\nuint decode_and_process_data_000054a8(undefined4 *output_param,undefined4 *input_param)\n\n{\n  ushort flag;\n  dword offset;\n  ushort temp_var3;\n  uint temp_var4;\n  uint temp2;\n  \n  offset = array[16].r_offset;\n  if ((array[16].r_offset != 0) &&\n     (*(int *)(array[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_elf_relocations_000042a4(array[16].r_offset);\n  }\n  if (input_param == &DAT_000079b8) {\n    input_param = *(undefined4 **)(offset + 4);\n  }\n  else if (input_param == (undefined4 *)&DAT_000079d8) {\n    input_param = *(undefined4 **)(offset + 8);\n  }\n  else if (input_param == (undefined4 *)&DAT_00007998) {\n    input_param = *(undefined4 **)(offset + 0xc);\n  }\n  temp_var4 = (uint)*(ushort *)(input_param + 3);\n  temp_var3 = *(ushort *)(input_param + 3);\n  if (-1 < (int)(temp_var4 << 0x1c)) {\n    if (-1 < (int)(temp_var4 << 0x1b)) {\n      *output_param = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp_var4 << 0x1d) < 0) {\n      if ((undefined4 *)input_param[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_param[0xd] != input_param + 0x11) {\n          initialize_data_structure(output_param);\n        }\n        input_param[0xd] = 0;\n      }\n      *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) & 0xffdb;\n      input_param[1] = 0;\n      *input_param = input_param[4];\n    }\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 8;\n  }\n  if ((input_param[4] == 0) && ((*(ushort *)(input_param + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_memory_block(output_param,input_param);\n  }\n  flag = *(ushort *)(input_param + 3);\n  temp_var4 = (uint)flag;\n  temp_var3 = *(ushort *)(input_param + 3);\n  temp2 = temp_var4 & 1;\n  if ((flag & 1) == 0) {\n    if (-1 < (int)(temp_var4 << 0x1e)) {\n      temp2 = input_param[5];\n    }\n    input_param[2] = temp2;\n  }\n  else {\n    input_param[2] = 0;\n    input_param[6] = -input_param[5];\n  }\n  if (input_param[4] != 0) {\n    return 0;\n  }\n  if ((flag & 0x80) == 0) {\n    return temp_var4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input_param + 3) = temp_var3 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "code_backup": "\nuint FUN_000054a8(undefined4 *param_1,undefined4 *param_2)\n\n{\n  ushort uVar1;\n  dword dVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  dVar2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUNC_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (param_2 == &DAT_000079b8) {\n    param_2 = *(undefined4 **)(dVar2 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_000079d8) {\n    param_2 = *(undefined4 **)(dVar2 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_00007998) {\n    param_2 = *(undefined4 **)(dVar2 + 0xc);\n  }\n  uVar4 = (uint)*(ushort *)(param_2 + 3);\n  uVar3 = *(ushort *)(param_2 + 3);\n  if (-1 < (int)(uVar4 << 0x1c)) {\n    if (-1 < (int)(uVar4 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(uVar4 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          initialize_data_structure_00004b34(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_memory_block_00005700(param_1,param_2);\n  }\n  uVar1 = *(ushort *)(param_2 + 3);\n  uVar4 = (uint)uVar1;\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar5 = uVar4 & 1;\n  if ((uVar1 & 1) == 0) {\n    if (-1 < (int)(uVar4 << 0x1e)) {\n      uVar5 = param_2[5];\n    }\n    param_2[2] = uVar5;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] != 0) {\n    return 0;\n  }\n  if ((uVar1 & 0x80) == 0) {\n    return uVar4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "current_name": "decode_and_process_data_000054a8",
            "entrypoint": "0x000054a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "array",
                "FUN_000054a8": "decode_and_process_data_000054a8",
                "allocate_and_initialize_memory_block_00005700": "allocate_and_initialize_memory_block",
                "dVar2": "offset",
                "initialize_data_structure_00004b34": "initialize_data_structure",
                "param_1": "output_param",
                "param_2": "input_param",
                "uVar1": "flag",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005584": {
            "additional_data": {
                "FUN_00005584": {
                    "calculate_quotient_and_remainder": 1,
                    "div_rem": 1,
                    "divide_and_compute_remainder": 1,
                    "divide_and_modulo": 1,
                    "divide_and_remainder": 13,
                    "divide_and_store": 1,
                    "divide_and_store_remainder": 9,
                    "divide_and_update_remainder": 1,
                    "divide_with_remainder": 2
                },
                "param_1": {
                    "div_result": 1,
                    "quotient": 5,
                    "quotient_and_remainder": 16,
                    "quotient_and_remainder_array": 2,
                    "quotient_array": 1,
                    "quotient_ptr": 3,
                    "quotient_remainder": 1,
                    "result": 1
                },
                "param_2": {
                    "dividend": 29,
                    "numerator": 1
                },
                "param_3": {
                    "denominator": 1,
                    "divisor": 29
                },
                "uVar1": {
                    "remainder": 31
                },
                "uVar2": {
                    "quotient": 26,
                    "quotient_after_division": 1,
                    "quotient_calculation": 1,
                    "quotient_final": 1,
                    "quotient_result": 1,
                    "quotient_with_remainder": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00004634"
            ],
            "code": "\nvoid divide_and_store_remainder_00005584(uint *quotient_and_remainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotient_and_remainder = quotient;\n  quotient_and_remainder[1] = remainder;\n  return;\n}\n\n",
            "current_name": "divide_and_store_remainder_00005584",
            "entrypoint": "0x00005584",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005584": "divide_and_store_remainder_00005584",
                "param_1": "quotient_and_remainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000562c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "array": 1,
                    "array_offset": 1,
                    "elf_table": 1,
                    "offset_array": 1,
                    "rel_array": 2,
                    "relocation_array": 1
                },
                "FUN_0000562c": {
                    "find_and_return_offset": 1,
                    "find_assignment_offset": 1,
                    "find_encoded_value": 1,
                    "find_first_equal_key": 1,
                    "find_first_occurrence": 1,
                    "find_key_index": 1,
                    "find_key_offset": 4,
                    "find_key_value": 1,
                    "find_key_value_pair": 3,
                    "find_next_string": 1,
                    "find_offset": 1,
                    "find_offset_and_compare": 1,
                    "find_offset_and_initialize": 1,
                    "find_offset_matching_string": 1,
                    "find_param_index": 1,
                    "find_parameter_offset": 2,
                    "find_parameter_position": 1,
                    "find_parameter_value": 2,
                    "find_string_offset": 3,
                    "find_variable_offset": 1,
                    "search_and_extract_value": 1,
                    "search_parameter": 1
                },
                "cVar1": {
                    "character": 1,
                    "current_byte": 1,
                    "current_char": 25,
                    "current_character": 1
                },
                "compare_bytes_00004e66": {
                    "compare_bytes": 7
                },
                "iVar3": {
                    "byte_compare_result": 1,
                    "compare_result": 4,
                    "comparison_result": 23,
                    "result": 1,
                    "result_at_offset": 1
                },
                "iVar6": {
                    "current_index": 2,
                    "current_param_offset": 1,
                    "current_string_length": 1,
                    "difference": 1,
                    "input_index": 1,
                    "key_offset": 1,
                    "offset_difference": 1,
                    "param_index": 1,
                    "search_string_offset": 1,
                    "start_index": 1,
                    "str_index": 1,
                    "str_len": 1,
                    "string_difference": 1,
                    "string_index": 3,
                    "string_length": 5,
                    "string_offset": 8
                },
                "initialize_memory_00005fec": {
                    "initialize_memory": 7
                },
                "initialize_memory_00005ff8": {
                    "cleanup_memory": 1,
                    "finalize_memory": 2,
                    "initialize_memory": 1,
                    "initialize_memory_with_offset": 1,
                    "initialize_memory_with_param": 1,
                    "initialize_more_memory": 1
                },
                "param_1": {
                    "data": 1,
                    "mem_handle": 1,
                    "mem_start": 1,
                    "memory": 3,
                    "memory_address": 1,
                    "memory_info": 1,
                    "memory_initialize_flag": 1,
                    "memory_initializer": 1,
                    "memory_manager": 1,
                    "memory_param": 2,
                    "memory_ptr": 2,
                    "memory_start": 1,
                    "param": 8,
                    "param1": 4,
                    "param_1": 2,
                    "param_address": 1
                },
                "param_2": {
                    "input_string": 7,
                    "key": 1,
                    "param2": 1,
                    "param_2": 1,
                    "search_string": 3,
                    "str": 1,
                    "string": 13,
                    "string_param": 1,
                    "string_to_search": 2,
                    "target_string": 1
                },
                "param_3": {
                    "found_indices": 3,
                    "index": 5,
                    "index_pointer": 1,
                    "offset": 1,
                    "offset_ptr": 1,
                    "offset_result": 1,
                    "output_index": 2,
                    "param3": 1,
                    "param_3": 1,
                    "position": 1,
                    "result": 3,
                    "result_index": 5,
                    "result_offset": 5,
                    "result_param": 1
                },
                "pcVar4": {
                    "current_char": 3,
                    "current_char_pointer": 1,
                    "current_char_ptr": 2,
                    "current_param": 1,
                    "current_param_ptr": 1,
                    "current_pos": 1,
                    "current_position": 2,
                    "current_ptr": 7,
                    "current_string": 1,
                    "current_string_char": 1,
                    "ptr": 2,
                    "str_ptr": 2,
                    "string_pointer": 1,
                    "string_ptr": 5
                },
                "piVar2": {
                    "array_iterator": 1,
                    "array_ptr": 1,
                    "current_entry": 1,
                    "index_pointer_2": 1,
                    "key_array": 2,
                    "offset_array": 1,
                    "offset_array_ptr": 1,
                    "offset_pointer": 1,
                    "offset_ptr": 1,
                    "offsets": 1,
                    "parameter_index": 1,
                    "pointer1": 1,
                    "ptr": 1,
                    "rel_array": 3,
                    "rel_array_pointer": 1,
                    "rel_array_ptr": 1,
                    "rel_offset": 2,
                    "rel_offset_array": 3,
                    "rel_offset_pointer": 1,
                    "rel_offset_ptr": 5
                },
                "piVar5": {
                    "curr_offset_ptr": 1,
                    "current_array_ptr": 1,
                    "current_index": 1,
                    "current_key": 2,
                    "current_offset": 8,
                    "current_offset_ptr": 3,
                    "current_parameter": 1,
                    "current_rel_item": 1,
                    "current_rel_offset": 3,
                    "current_rel_offset_ptr": 2,
                    "current_rel_ptr": 1,
                    "index_pointer_3": 1,
                    "match_array": 1,
                    "pointer2": 1,
                    "ptr_current": 1,
                    "rel_array_ptr": 1,
                    "temp_offset_ptr": 1
                }
            },
            "called": [
                "FUN_00005ff8",
                "FUN_00005fec",
                "FUN_00004e66"
            ],
            "calling": [
                "FUN_000056a0"
            ],
            "code": "\nint find_key_offset_0000562c(undefined4 param,char *string,int *index)\n\n{\n  char current_char;\n  int *rel_offset_ptr;\n  int comparison_result;\n  char *current_ptr;\n  int *current_offset;\n  int string_offset;\n  \n  initialize_memory();\n  current_ptr = string;\n  if (rel_array[41].r_offset != 0) {\n    do {\n      current_char = *current_ptr;\n      if (current_char == '\\0') {\n        string_offset = (int)current_ptr - (int)string;\n        rel_offset_ptr = (int *)rel_array[41].r_offset;\n        while( true ) {\n          current_offset = rel_offset_ptr;\n          if (*current_offset == 0) break;\n          comparison_result = compare_bytes(*current_offset,string,string_offset);\n          rel_offset_ptr = current_offset + 1;\n          if ((comparison_result == 0) && (comparison_result = *current_offset, *(char *)(comparison_result + string_offset) == '=')) {\n            *index = (int)((int)current_offset - rel_array[41].r_offset) >> 2;\n            finalize_memory(param);\n            return comparison_result + string_offset + 1;\n          }\n        }\n        break;\n      }\n      current_ptr = current_ptr + 1;\n    } while (current_char != '=');\n  }\n  finalize_memory(param);\n  return 0;\n}\n\n",
            "current_name": "find_key_offset_0000562c",
            "entrypoint": "0x0000562c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_0000562c": "find_key_offset_0000562c",
                "cVar1": "current_char",
                "compare_bytes_00004e66": "compare_bytes",
                "iVar3": "comparison_result",
                "iVar6": "string_offset",
                "initialize_memory_00005fec": "initialize_memory",
                "initialize_memory_00005ff8": "finalize_memory",
                "param_1": "param",
                "param_2": "string",
                "param_3": "index",
                "pcVar4": "current_ptr",
                "piVar2": "rel_offset_ptr",
                "piVar5": "current_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000056a0": {
            "additional_data": {
                "FUN_000056a0": {
                    "find_and_store_key_offset": 2,
                    "find_and_update_key_offset": 3,
                    "find_and_verify_key_offset": 1,
                    "find_key": 1,
                    "find_key_offset": 23,
                    "find_offset": 1
                },
                "param_1": {
                    "arg1": 1,
                    "input_1": 4,
                    "input_data": 2,
                    "input_key": 1,
                    "input_param": 15,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_parameter": 1,
                    "input_parameter_1": 1,
                    "key": 2,
                    "source_address": 1,
                    "source_param": 1
                },
                "param_2": {
                    "arg2": 1,
                    "input_2": 4,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_parameter_2": 1,
                    "key": 2,
                    "key_offset": 1,
                    "key_param": 8,
                    "key_parameter": 1,
                    "offset1": 2,
                    "offset_1": 2,
                    "offset_param": 3,
                    "param2": 1,
                    "search_param": 1,
                    "stack_param_1": 1,
                    "value": 1
                },
                "param_3": {
                    "address_param": 1,
                    "arg3": 1,
                    "input_3": 4,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "input_parameter_3": 1,
                    "key_offset": 1,
                    "offset": 1,
                    "offset2": 2,
                    "offset_2": 2,
                    "offset_param": 8,
                    "offset_parameter": 1,
                    "output": 1,
                    "output_param": 2,
                    "param3": 1,
                    "stack_param": 1,
                    "stack_param_2": 1,
                    "update_offset": 1
                },
                "param_4": {
                    "additional_param": 1,
                    "additional_parameter": 1,
                    "arg4": 1,
                    "buffer": 1,
                    "data_param": 1,
                    "destination_address": 1,
                    "extra_param": 2,
                    "input_4": 3,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "input_parameter_4": 1,
                    "key_param": 1,
                    "other_param": 1,
                    "output_data": 1,
                    "output_key": 1,
                    "output_param": 3,
                    "param": 1,
                    "param4": 2,
                    "param_4": 1,
                    "result_param": 1,
                    "search_param": 1,
                    "stack_param_3": 1,
                    "temp_param": 1,
                    "verify_param": 1
                },
                "uStack_8": {
                    "address": 1,
                    "key_counter": 1,
                    "modified_input_3": 2,
                    "modified_param3": 1,
                    "new_output_param": 1,
                    "offset": 4,
                    "offset2_copy": 1,
                    "offset_2_updated": 2,
                    "offset_copy": 1,
                    "offset_param": 1,
                    "offset_stack": 1,
                    "offset_variable": 1,
                    "output_2": 1,
                    "stack_result": 1,
                    "temp2": 1,
                    "temp_offset": 2,
                    "temp_param3": 1,
                    "unused_variable": 1,
                    "update_offset_copy": 1,
                    "updated_offset": 1,
                    "updated_offset2": 1,
                    "updated_offset_param": 1,
                    "updated_param_3": 1
                },
                "uStack_c": {
                    "key": 3,
                    "key_copy": 1,
                    "key_offset": 5,
                    "key_offset_copy": 1,
                    "key_param": 1,
                    "key_stack": 1,
                    "key_variable": 1,
                    "modified_input_2": 2,
                    "modified_param2": 1,
                    "new_offset_param": 1,
                    "offset": 1,
                    "offset1_copy": 1,
                    "offset_1_updated": 2,
                    "offset_result": 1,
                    "output_1": 1,
                    "result": 1,
                    "temp1": 1,
                    "temp_param2": 1,
                    "updated_key_param": 1,
                    "updated_offset1": 1,
                    "updated_param_2": 1
                }
            },
            "called": [
                "FUN_0000562c"
            ],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid find_and_update_key_offset_000056a0(undefined4 input_param,undefined4 key_param,undefined4 offset_param,undefined4 output_param)\n\n{\n  undefined4 key_offset;\n  undefined4 offset;\n  \n  key_offset = key_param;\n  offset = offset_param;\n  find_key_offset_0000562c(input_param,key_param,&key_offset,output_param,input_param);\n  return;\n}\n\n",
            "current_name": "find_and_update_key_offset_000056a0",
            "entrypoint": "0x000056a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000056a0": "find_and_update_key_offset_000056a0",
                "param_1": "input_param",
                "param_2": "key_param",
                "param_3": "offset_param",
                "param_4": "output_param",
                "uStack_8": "offset",
                "uStack_c": "key_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000056b0": {
            "additional_data": {
                "0x1fff02f0": {
                    "default_value": 1,
                    "memory_address": 4
                },
                "FUN_000056b0": {
                    "get_constant_value": 1,
                    "get_default_return_value": 1,
                    "get_default_value": 4,
                    "get_initial_value": 4,
                    "get_magic_number": 2,
                    "get_memory_address": 16,
                    "get_memory_location": 1,
                    "get_mystery_value": 1,
                    "get_special_value": 1
                },
                "PTR_000056b0": {
                    "memory_address": 1
                },
                "return": {
                    "address": 1
                },
                "undefined4": {
                    "uint32": 2,
                    "uint32_t": 14,
                    "unsigned_int": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000047e4",
                "FUN_00004f98",
                "FUN_00005100"
            ],
            "code": "\nuint32_t get_memory_address_000056b0(void)\n\n{\n  address 0x1fff02f0;\n}\n\n",
            "current_name": "get_memory_address_000056b0",
            "entrypoint": "0x000056b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0",
                "return": "address",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000056b8": {
            "additional_data": {
                "FUN_000056b8": {
                    "calculate_status": 1,
                    "check_and_set_error_flag": 1,
                    "check_and_set_flag": 2,
                    "check_and_set_flags": 2,
                    "check_and_set_permission": 1,
                    "check_and_set_permissions": 1,
                    "check_and_set_value": 2,
                    "check_and_update_flags": 1,
                    "check_permissions_and_return_result": 1,
                    "check_return_value": 1,
                    "check_value_and_set_flag": 1,
                    "determine_access_permission": 1,
                    "extract_and_check_parameters": 1,
                    "extract_flags_from_binary": 1,
                    "get_permissions": 1,
                    "process_data": 3,
                    "set_access_permissions": 1,
                    "set_and_return_error": 1,
                    "set_error_flag": 1,
                    "set_flag_and_return_error": 1,
                    "set_flags_and_return_error": 1,
                    "set_return_value": 1,
                    "set_status_and_check_error": 1,
                    "set_status_flag": 1,
                    "update_flags_and_get_error": 1
                },
                "LAB_000056f8": {
                    "continue_label": 1
                },
                "auStack_68": {
                    "error": 1,
                    "local_buffer": 1,
                    "stack_array": 1,
                    "stack_buffer": 3,
                    "stack_value": 1,
                    "temp": 2,
                    "temp_arr": 1,
                    "temp_array": 3,
                    "temp_buffer": 3,
                    "temp_stack": 1,
                    "temp_value": 8,
                    "temp_var": 1,
                    "temporary_buffer": 1,
                    "temporary_data": 1,
                    "temporary_value": 1,
                    "value_array": 2
                },
                "iVar1": {
                    "error": 12,
                    "error_code": 11,
                    "error_flag": 1,
                    "error_status": 2,
                    "return_value": 1
                },
                "local_64": {
                    "flag": 1,
                    "flags": 3,
                    "local_data": 1,
                    "local_flag": 1,
                    "local_flags": 4,
                    "local_value": 8,
                    "local_var": 2,
                    "mask": 2,
                    "temp_flag": 1,
                    "temp_value": 3,
                    "temp_var": 1,
                    "temp_variable": 1,
                    "value": 1,
                    "value_check": 1,
                    "value_mask": 1
                },
                "param_1": {
                    "arg1": 2,
                    "input": 4,
                    "input_data": 1,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_value": 6,
                    "param1": 3,
                    "status": 2,
                    "value": 9
                },
                "param_2": {
                    "arg2": 2,
                    "array": 1,
                    "array_pointer": 1,
                    "buffer": 1,
                    "config": 1,
                    "data": 9,
                    "data_array": 1,
                    "data_offset": 1,
                    "data_ptr": 3,
                    "input_address": 1,
                    "input_array": 3,
                    "input_data": 1,
                    "input_values": 1,
                    "param2": 3,
                    "parameters": 1,
                    "pointer": 1
                },
                "param_3": {
                    "arg3": 1,
                    "flag": 1,
                    "flag_ptr": 1,
                    "flags": 1,
                    "out_status": 1,
                    "output": 3,
                    "output_flag": 1,
                    "output_flags": 1,
                    "output_param": 5,
                    "output_value": 6,
                    "output_value_pointer": 1,
                    "param3": 1,
                    "result": 6,
                    "status": 1,
                    "status_ptr": 1
                },
                "param_4": {
                    "arg4": 1,
                    "error_flag_param": 1,
                    "flag": 4,
                    "flags": 3,
                    "out_flag": 1,
                    "output_array": 1,
                    "output_flag": 1,
                    "output_flags": 2,
                    "output_value": 1,
                    "param4": 1,
                    "result": 4,
                    "result_code": 1,
                    "result_ptr": 2,
                    "result_status": 2,
                    "status": 3,
                    "status_flag": 1,
                    "status_param": 1,
                    "status_pointer": 1
                },
                "uVar2": {
                    "access_permissions": 1,
                    "flag": 8,
                    "flag_value": 1,
                    "flags": 1,
                    "new_flag": 2,
                    "new_flag_value": 1,
                    "permission": 4,
                    "result": 2,
                    "result_value": 1,
                    "return_value": 3,
                    "status": 4
                }
            },
            "called": [
                "FUN_00000514"
            ],
            "calling": [
                "FUN_00005700"
            ],
            "code": "\nundefined4 check_value_and_set_flag_000056b8(undefined4 value,int data,undefined4 *output_value,uint *flag)\n\n{\n  int error;\n  undefined4 flag;\n  undefined temp_value [4];\n  uint local_value;\n  \n  if ((*(short *)(data + 0xe) < 0) ||\n     (error = set_value_and_return_error_00000514(value,(int)*(short *)(data + 0xe),temp_value), error < 0)) {\n    *flag = 0;\n    if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n      flag = 0x40;\n      goto continue_label;\n    }\n  }\n  else {\n    *flag = (uint)((local_value & 0xf000) == 0x2000);\n  }\n  flag = 0x400;\ncontinue_label:\n  *output_value = flag;\n  return 0;\n}\n\n",
            "current_name": "check_value_and_set_flag_000056b8",
            "entrypoint": "0x000056b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000056b8": "check_value_and_set_flag_000056b8",
                "LAB_000056f8": "continue_label",
                "auStack_68": "temp_value",
                "iVar1": "error",
                "local_64": "local_value",
                "param_1": "value",
                "param_2": "data",
                "param_3": "output_value",
                "param_4": "flag",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005700": {
            "additional_data": {
                "FUN_00005700": {
                    "allocate_and_initialize_memory": 9,
                    "allocate_and_initialize_memory_block": 1,
                    "allocate_memory_and_set_flag": 3,
                    "initialize_and_allocate_memory": 2,
                    "initialize_and_allocate_memory_block": 2,
                    "initialize_data": 1,
                    "initialize_memory": 2,
                    "initialize_memory_and_set_flag": 3,
                    "initialize_memory_block": 5,
                    "initialize_memory_block_from_params": 1,
                    "process_data": 2
                },
                "allocate_and_initialize_memory_block_00004bd0": {
                    "allocate_and_initialize_memory_block": 4
                },
                "check_valid_input_00000534": {
                    "check_valid_input": 4
                },
                "check_value_and_set_flag_000056b8": {
                    "check_value_and_set_flag": 4
                },
                "iVar2": {
                    "allocated_address": 1,
                    "allocated_block": 1,
                    "allocated_mem": 1,
                    "allocated_memory": 7,
                    "allocation_result": 1,
                    "initialized_memory_block": 1,
                    "memory_block": 13,
                    "memory_block_check": 1,
                    "result": 4
                },
                "local_14": {
                    "check_result": 3,
                    "input": 2,
                    "input_buffer": 1,
                    "input_data": 4,
                    "input_ptr": 1,
                    "input_validation": 1,
                    "local_arg2": 1,
                    "local_data": 1,
                    "local_flag_address": 1,
                    "local_mem_block": 1,
                    "local_memory_block": 1,
                    "local_pointer": 3,
                    "local_var2": 4,
                    "output_copy": 1,
                    "result_ptr": 1,
                    "temp_ptr": 3,
                    "valid_input": 1
                },
                "local_18": {
                    "allocated_memory": 2,
                    "allocated_size": 2,
                    "block_size": 2,
                    "data_size": 1,
                    "input_copy": 1,
                    "input_value": 1,
                    "local_arg1": 1,
                    "local_base_address": 1,
                    "local_flags": 1,
                    "local_mem_address": 1,
                    "local_memory": 1,
                    "local_memory_address": 1,
                    "local_memory_size": 1,
                    "local_param": 1,
                    "local_var1": 4,
                    "sample_size": 1,
                    "size": 6,
                    "temp_value": 1,
                    "value": 1
                },
                "param_1": {
                    "arg1": 1,
                    "base_address": 8,
                    "context": 1,
                    "data_address": 1,
                    "data_pointer": 1,
                    "flags": 1,
                    "function_param": 2,
                    "function_pointer": 1,
                    "function_ptr": 2,
                    "input": 1,
                    "input_data": 1,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_size": 1,
                    "mem_address": 1,
                    "memory": 1,
                    "memory_address": 2,
                    "memory_base_address": 2,
                    "param1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "data": 2,
                    "data_block": 1,
                    "info_array": 1,
                    "input_array": 2,
                    "mem_block": 1,
                    "memory_block": 9,
                    "output": 1,
                    "output_array": 1,
                    "output_buffer": 2,
                    "output_data": 1,
                    "output_param": 1,
                    "output_parameter": 1,
                    "output_params": 1,
                    "param2": 1,
                    "param_ptr": 1,
                    "params": 1,
                    "pointer": 2,
                    "structure_ptr": 1
                },
                "uVar1": {
                    "checked_value": 1,
                    "flag": 16,
                    "flag_result": 1,
                    "flag_value": 8,
                    "return_value": 1,
                    "value": 1,
                    "value_flag": 2
                }
            },
            "called": [
                "FUN_000056b8",
                "FUN_00000534",
                "FUN_00004bd0"
            ],
            "calling": [
                "FUN_00006768",
                "FUN_000054a8"
            ],
            "code": "\nvoid allocate_and_initialize_memory_block_00005700(int base_address,int *memory_block)\n\n{\n  ushort flag;\n  int memory_block;\n  int size;\n  int *input_data;\n  \n  if (-1 < (int)((uint)*(ushort *)(memory_block + 3) << 0x1e)) {\n    size = base_address;\n    input_data = memory_block;\n    flag = check_value_and_set_flag(base_address,memory_block,&size,&input_data);\n    memory_block = allocate_and_initialize_memory_block_00005700(base_address,size);\n    if (memory_block != 0) {\n      *(undefined **)(base_address + 0x28) = &DAT_0000423d;\n      *memory_block = memory_block;\n      *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) | 0x80;\n      memory_block[5] = size;\n      memory_block[4] = memory_block;\n      if ((input_data != (int *)0x0) &&\n         (memory_block = check_valid_input(base_address,(int)*(short *)((int)memory_block + 0xe)), memory_block != 0)) {\n        *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_block + 3) = flag | *(ushort *)(memory_block + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_block + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_block + 3) = *(ushort *)(memory_block + 3) & 0xfffc | 2;\n  }\n  *memory_block = (int)memory_block + 0x47;\n  memory_block[4] = (int)memory_block + 0x47;\n  memory_block[5] = 1;\n  return;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_block_00005700",
            "entrypoint": "0x00005700",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005700": "allocate_and_initialize_memory_block_00005700",
                "allocate_and_initialize_memory_block_00004bd0": "allocate_and_initialize_memory_block",
                "check_valid_input_00000534": "check_valid_input",
                "check_value_and_set_flag_000056b8": "check_value_and_set_flag",
                "iVar2": "memory_block",
                "local_14": "input_data",
                "local_18": "size",
                "param_1": "base_address",
                "param_2": "memory_block",
                "uVar1": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005780": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "elf_rel_array": 3,
                    "elf_relocation_array": 3,
                    "elf_relocation_table": 1,
                    "rel_array": 10,
                    "relocation_array": 5,
                    "relocation_table": 3
                },
                "FUN_00005780": {
                    "initialize_data_structure": 26,
                    "initialize_related_data": 1,
                    "initialize_relocation_data": 2,
                    "initialize_relocation_table": 2
                },
                "param_1": {
                    "address": 1,
                    "data": 14,
                    "data_pointer": 1,
                    "data_structure": 1,
                    "input_data": 2,
                    "input_param": 1,
                    "input_parameter": 1,
                    "param": 9,
                    "parameter": 1
                },
                "r_offset": {
                    "offset": 2
                }
            },
            "called": [
                "FUN_00004b34"
            ],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid initialize_data_structure_00005780(undefined4 data)\n\n{\n  initialize_data_structure_00005780_00004b34(rel_array[16].offset,data);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_00005780",
            "entrypoint": "0x00005780",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_00005780": "initialize_data_structure_00005780",
                "param_1": "data",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005790": {
            "additional_data": {
                "1fff0de8": {
                    "data_ptr": 1
                },
                "DAT_1fff0de8": {
                    "data": 1,
                    "data_pointer": 1,
                    "data_structure": 1
                },
                "FUNC_000045e8": {
                    "initialize_memory": 1,
                    "initialize_ptr": 1,
                    "perform_initialization": 2,
                    "process_data": 25
                },
                "FUN_00005790": {
                    "initialize_data": 28,
                    "initialize_data_structure": 1,
                    "initialize_memory": 1,
                    "initiate_data_processing": 1
                },
                "initializedData": {
                    "dat_1fff0de8": 1
                },
                "pOriginalData": {
                    "data_pointer": 1
                }
            },
            "called": [
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "code": "\nvoid initialize_data_structure_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_00005790",
            "entrypoint": "0x00005790",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005790": "initialize_data_structure_00005790"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000579c": {
            "additional_data": {
                "DAT_1fff0de8": {
                    "data": 16,
                    "data_buffer": 1
                },
                "FUNC_000045ec": {
                    "configure_data": 1,
                    "copy_data": 1,
                    "process_data": 27,
                    "update_data": 1
                },
                "FUN_0000579c": {
                    "initialize_data": 31
                },
                "original_function_name": {
                    "more_descriptive_function_name": 1
                },
                "original_parameter_name_1": {
                    "new_parameter_name_1": 1
                },
                "original_variable_name_1": {
                    "new_variable_name_1": 1
                }
            },
            "called": [
                "FUN_000045ec"
            ],
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "code": "\nvoid initialize_data_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "current_name": "initialize_data_0000579c",
            "entrypoint": "0x0000579c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000057a8": {
            "additional_data": {
                "FUN_000057a8": {
                    "process_and_update_data": 3,
                    "process_and_validate": 1,
                    "process_and_validate_data": 3,
                    "process_and_validate_input": 7,
                    "process_data": 9,
                    "process_data_and_validate": 1,
                    "process_input": 2,
                    "process_input_data": 1,
                    "process_validation": 1,
                    "update_and_validate_data": 1,
                    "update_data": 2
                },
                "iVar1": {
                    "array_index": 1,
                    "count": 4,
                    "counter": 3,
                    "current_index": 3,
                    "data_count": 2,
                    "index": 8,
                    "remaining": 1,
                    "remaining_attempts": 1,
                    "remaining_count": 2,
                    "remaining_data": 1,
                    "remaining_elements": 5
                },
                "param_1": {
                    "arg1": 3,
                    "arg_1": 2,
                    "base_address": 1,
                    "input": 2,
                    "input_param": 3,
                    "input_value": 1,
                    "opcode": 1,
                    "param": 2,
                    "param1": 4,
                    "param_1": 1,
                    "result": 1,
                    "status": 9,
                    "unused": 1
                },
                "param_2": {
                    "arg2": 1,
                    "arg_2": 1,
                    "char_value": 1,
                    "data": 17,
                    "data_byte": 1,
                    "data_value": 1,
                    "input_char": 1,
                    "input_value": 5,
                    "param2": 2,
                    "value": 1
                },
                "param_3": {
                    "arg_3": 1,
                    "array": 1,
                    "buffer": 4,
                    "data": 1,
                    "data_array": 11,
                    "data_buffer": 3,
                    "data_ptr": 3,
                    "input_array": 1,
                    "input_data": 2,
                    "param3": 1,
                    "param_list": 1,
                    "parameters": 1
                },
                "process_and_validate_data_00005404": {
                    "validate_data": 2
                },
                "puVar2": {
                    "byte_ptr": 1,
                    "current_byte": 3,
                    "current_data": 1,
                    "current_element": 8,
                    "current_pointer": 2,
                    "current_ptr": 4,
                    "data_byte_ptr": 1,
                    "data_ptr": 3,
                    "pointer": 1,
                    "ptr": 5,
                    "ptr_data": 2
                }
            },
            "called": [
                "FUN_00005404"
            ],
            "calling": [
                "FUN_000057d2"
            ],
            "code": "\nint process_data_and_validate_000057a8(undefined4 status,int data,undefined4 *data_array)\n\n{\n  int index;\n  undefined *current_element;\n  \n  index = data_array[2] + -1;\n  data_array[2] = index;\n  if ((index < 0) && ((index < (int)data_array[6] || (data == 10)))) {\n    index = validate_data();\n    return index;\n  }\n  current_element = (undefined *)*data_array;\n  *data_array = current_element + 1;\n  *current_element = (char)data;\n  return data;\n}\n\n",
            "current_name": "process_data_and_validate_000057a8",
            "entrypoint": "0x000057a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000057a8": "process_data_and_validate_000057a8",
                "iVar1": "index",
                "param_1": "status",
                "param_2": "data",
                "param_3": "data_array",
                "process_and_validate_data_00005404": "validate_data",
                "puVar2": "current_element"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000057d2": {
            "additional_data": {
                "FUN_000057d2": {
                    "process_and_validate_data": 26,
                    "process_data_and_validate": 3,
                    "validate_data": 2
                },
                "iVar1": {
                    "process_result": 1,
                    "result": 29,
                    "validation_result": 1
                },
                "iVar3": {
                    "curr_length": 1,
                    "current_index": 9,
                    "current_length": 6,
                    "current_size": 2,
                    "data_length": 1,
                    "index": 1,
                    "iteration_count": 1,
                    "length_counter": 1,
                    "loop_counter": 1,
                    "remaining_data_length": 1,
                    "remaining_len": 1,
                    "remaining_length": 6
                },
                "param_1": {
                    "arg1": 15,
                    "arg_1": 1,
                    "data_id": 1,
                    "data_param_1": 1,
                    "data_processor": 1,
                    "data_size": 1,
                    "input_1": 2,
                    "input_argument_1": 1,
                    "input_param_1": 4,
                    "param": 1,
                    "parameter1": 1,
                    "value_1": 2
                },
                "param_2": {
                    "arg2": 15,
                    "arg_2": 1,
                    "data_param_2": 1,
                    "data_validator": 1,
                    "index": 1,
                    "input_2": 2,
                    "input_argument_2": 1,
                    "input_param_2": 4,
                    "parameter2": 1,
                    "validation_code": 1,
                    "validation_value": 1,
                    "value_2": 2
                },
                "param_3": {
                    "data": 12,
                    "data_array": 4,
                    "data_buffer": 1,
                    "data_pointer": 2,
                    "data_ptr": 10,
                    "input_data": 2
                },
                "param_4": {
                    "array_length": 2,
                    "array_size": 1,
                    "buffer_length": 1,
                    "data_len": 1,
                    "data_length": 15,
                    "data_size": 1,
                    "length": 9,
                    "size": 1
                },
                "puVar2": {
                    "array_end": 1,
                    "end_addr": 1,
                    "end_of_buffer": 1,
                    "end_of_data": 11,
                    "end_pointer": 2,
                    "end_ptr": 13,
                    "last_element": 1,
                    "ptr_end": 1
                }
            },
            "called": [
                "FUN_000057a8"
            ],
            "calling": [
                "FUN_000057f8"
            ],
            "code": "\nint process_data_and_validate_000057d2(undefined4 arg1,undefined4 arg2,undefined *data,int data_length)\n\n{\n  int result;\n  undefined *end_ptr;\n  int current_index;\n  \n  end_ptr = data + data_length;\n  current_index = data_length;\n  do {\n    if (data == end_ptr) {\n      return 0;\n    }\n    result = process_data_and_validate_000057d2_000057a8(arg1,*data,arg2,data_length,current_index);\n    data_length = result + 1;\n    data = data + 1;\n  } while (data_length != 0);\n  return result;\n}\n\n",
            "current_name": "process_data_and_validate_000057d2",
            "entrypoint": "0x000057d2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000057d2": "process_data_and_validate_000057d2",
                "iVar1": "result",
                "iVar3": "current_index",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data",
                "param_4": "data_length",
                "puVar2": "end_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000057f8": {
            "additional_data": {
                "FUN_000057f8": {
                    "decode_and_process_data": 6,
                    "process_and_validate_data": 1,
                    "process_data": 24
                },
                "bVar4": {
                    "bool_var": 2,
                    "boolean_var": 1,
                    "flag": 4,
                    "found": 2,
                    "is_digit": 6,
                    "is_number": 3,
                    "is_numeric": 7,
                    "is_true": 3,
                    "is_valid": 2,
                    "valid_digit": 1
                },
                "iVar1": {
                    "byte_index": 1,
                    "count1": 1,
                    "index": 4,
                    "index1": 2,
                    "iteration_var1": 1,
                    "length": 2,
                    "result": 14,
                    "result1": 3,
                    "return_value": 1,
                    "temp1": 1,
                    "value1": 1
                },
                "iVar2": {
                    "count2": 1,
                    "decode_result": 2,
                    "index2": 2,
                    "iteration_var2": 1,
                    "process_result": 1,
                    "result": 4,
                    "result2": 4,
                    "return_value": 2,
                    "temp2": 1,
                    "validation_result": 12,
                    "value2": 1
                },
                "local_30": {
                    "alignment": 1,
                    "const3": 1,
                    "constant26": 1,
                    "count": 1,
                    "end_var": 1,
                    "local_30": 1,
                    "local_var": 2,
                    "local_var10": 1,
                    "local_var30": 1,
                    "local_var5": 1,
                    "local_var6": 1,
                    "local_var7": 1,
                    "local_variable8": 1,
                    "temp3": 1,
                    "unused": 3,
                    "unused2": 3,
                    "unused_local_var": 1,
                    "unused_var": 1,
                    "unused_variable": 2,
                    "var_30": 1,
                    "zero_flag": 1
                },
                "local_45": {
                    "alignment": 1,
                    "alignment_char": 1,
                    "alternative_form_flag": 1,
                    "byte_var4": 1,
                    "constant3": 1,
                    "decimal_point": 1,
                    "fill_char": 1,
                    "flag2": 1,
                    "format_char_hash": 1,
                    "hash_flag": 2,
                    "local_byte3": 1,
                    "local_byte4": 1,
                    "local_var4": 1,
                    "local_var45": 1,
                    "local_var6": 1,
                    "local_var9": 1,
                    "local_variable7": 1,
                    "option_value": 1,
                    "padding_char_flags": 1,
                    "sign": 4,
                    "sign_symbol": 1,
                    "space_or_plus": 1,
                    "value3": 1
                },
                "local_6e": {
                    "alternate_char": 1,
                    "byte_var3": 1,
                    "const2": 1,
                    "const_var2": 1,
                    "constant2": 2,
                    "end_character": 1,
                    "flag2": 1,
                    "format_char_plus": 1,
                    "group_separator": 1,
                    "local_6e": 1,
                    "local_byte2": 1,
                    "local_byte3": 1,
                    "local_var5": 1,
                    "local_var6e": 1,
                    "local_var8": 1,
                    "local_variable6": 1,
                    "option_char2": 1,
                    "padding_char2": 1,
                    "padding_size_pos": 1,
                    "plus": 1,
                    "plus_flag": 2,
                    "plus_format": 1,
                    "sign_flag": 1,
                    "unused": 1,
                    "value2": 1
                },
                "local_6f": {
                    "byte_var2": 1,
                    "const1": 1,
                    "const_var1": 1,
                    "constant1": 2,
                    "default_char": 1,
                    "flag1": 1,
                    "format_char_space": 1,
                    "hex_format": 1,
                    "local_6f": 1,
                    "local_byte1": 1,
                    "local_byte2": 1,
                    "local_var4": 1,
                    "local_var6f": 1,
                    "local_var7": 1,
                    "local_variable5": 1,
                    "option_char1": 1,
                    "padding_char1": 1,
                    "padding_symbol_pos": 1,
                    "space": 1,
                    "space_flag": 3,
                    "start_character": 1,
                    "unused": 1,
                    "value1": 1,
                    "value_separator": 1
                },
                "local_70": {
                    "byte_val": 1,
                    "byte_value": 1,
                    "byte_var1": 1,
                    "current_byte": 3,
                    "current_char": 1,
                    "data": 1,
                    "format": 2,
                    "format_char": 7,
                    "format_specifier": 3,
                    "format_type": 1,
                    "formatting_char": 1,
                    "local_byte": 2,
                    "local_byte1": 1,
                    "local_char": 1,
                    "local_var3": 2,
                    "local_var6": 1,
                    "local_var70": 1,
                    "specifier": 1
                },
                "local_74": {
                    "local_sum": 1,
                    "local_var2": 1,
                    "local_var5": 2,
                    "local_var74": 1,
                    "local_variable4": 1,
                    "processed_data_length": 1,
                    "result": 1,
                    "total": 5,
                    "total_bytes_processed": 1,
                    "total_count": 1,
                    "total_length": 6,
                    "total_output": 1,
                    "total_output_size": 1,
                    "total_processed_size": 1,
                    "total_result": 1,
                    "total_size": 6
                },
                "local_7c": {
                    "count": 1,
                    "counter": 1,
                    "counter_local": 1,
                    "current_output": 1,
                    "current_output_param": 1,
                    "current_value": 2,
                    "int_value": 1,
                    "integer_value": 2,
                    "length": 1,
                    "local_7c": 2,
                    "local_result2": 1,
                    "local_var1": 1,
                    "local_var2": 1,
                    "local_var4": 2,
                    "local_var7c": 1,
                    "local_variable": 1,
                    "local_variable3": 1,
                    "output_value": 1,
                    "stored_count": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_var": 1,
                    "value4": 1,
                    "var_7c": 1,
                    "width": 3
                },
                "local_84": {
                    "decimal_part": 1,
                    "decimal_places": 3,
                    "decimal_precision": 1,
                    "decimal_value": 1,
                    "fixed_point_value": 1,
                    "flag2": 1,
                    "float_value": 1,
                    "fractional_length": 1,
                    "index": 1,
                    "local_result": 1,
                    "local_var": 1,
                    "local_var2": 1,
                    "local_var3": 1,
                    "local_var84": 1,
                    "local_variable2": 1,
                    "precision": 6,
                    "second_value": 1,
                    "value": 6,
                    "value3": 1
                },
                "local_88": {
                    "bitfield": 1,
                    "flag": 2,
                    "flags": 18,
                    "format_flags": 1,
                    "local_flag": 1,
                    "local_var1": 1,
                    "local_var2": 1,
                    "local_var88": 1,
                    "local_variable1": 1,
                    "options": 3,
                    "options_flags": 1
                },
                "local_8c": {
                    "count_ptr": 1,
                    "int_ptr3": 1,
                    "integer_ptr": 1,
                    "lengths_ptr": 1,
                    "local_array": 1,
                    "local_int_array": 2,
                    "local_output": 1,
                    "local_output_param": 1,
                    "local_pointer": 2,
                    "local_ptr": 3,
                    "local_ptr1": 1,
                    "local_ptr8c": 1,
                    "local_ptr_c": 1,
                    "local_var1": 1,
                    "output_pointer": 1,
                    "output_ptr": 2,
                    "output_ptr_local": 1,
                    "output_values": 1,
                    "ptr_counter_local": 1,
                    "ptr_local": 1,
                    "result_array": 1,
                    "result_code_ptr": 1,
                    "result_ptr": 2,
                    "results_array": 1,
                    "temp_int_array": 1
                },
                "param_1": {
                    "arg1": 3,
                    "data": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "elf_base_addr": 1,
                    "elf_header": 1,
                    "function_pointer": 1,
                    "input": 5,
                    "input1": 1,
                    "input_buffer": 1,
                    "input_data": 3,
                    "input_param": 1,
                    "input_ptr": 2,
                    "obj_ptr": 1,
                    "param": 1,
                    "param1": 6,
                    "param_pointer": 1
                },
                "param_2": {
                    "arg2": 3,
                    "config": 4,
                    "config_data": 1,
                    "config_param": 1,
                    "config_ptr": 1,
                    "data_pointer": 1,
                    "elf_data": 1,
                    "filter_data": 1,
                    "flags": 1,
                    "header": 1,
                    "input2": 1,
                    "input_ptr2": 1,
                    "param2": 6,
                    "param_array": 4,
                    "param_ptr": 3,
                    "pointer_array": 1
                },
                "param_3": {
                    "arg3": 2,
                    "buffer": 1,
                    "byte_array": 4,
                    "data": 13,
                    "data_param": 1,
                    "data_ptr": 4,
                    "input3": 1,
                    "param3": 5
                },
                "param_4": {
                    "arg4": 2,
                    "count_ptr": 1,
                    "counter": 1,
                    "input4": 1,
                    "int_array": 3,
                    "int_ptr": 1,
                    "length": 2,
                    "lengths": 1,
                    "output": 4,
                    "output_buffer": 1,
                    "output_param": 1,
                    "output_ptr": 2,
                    "output_results": 1,
                    "param4": 6,
                    "result": 4
                },
                "pbVar5": {
                    "byte_pointer": 4,
                    "byte_ptr": 6,
                    "byte_ptr1": 3,
                    "current_byte": 2,
                    "current_char": 1,
                    "current_char_ptr": 1,
                    "current_character": 1,
                    "current_ptr": 1,
                    "data_pointer": 1,
                    "pointer": 1,
                    "ptr": 1,
                    "ptr2": 4,
                    "ptr_byte": 3,
                    "ptr_data": 2
                },
                "pbVar6": {
                    "byte_ptr2": 7,
                    "current_byte": 2,
                    "current_byte_pointer": 2,
                    "current_byte_ptr": 1,
                    "current_char": 1,
                    "current_data": 1,
                    "current_data_pointer": 1,
                    "current_pointer": 1,
                    "current_ptr2": 1,
                    "data_ptr": 2,
                    "next_byte": 1,
                    "next_byte_pointer": 1,
                    "pb_var6": 1,
                    "ptr3": 4,
                    "ptr_byte2": 3,
                    "ptr_data_end": 1,
                    "ptr_data_temp": 1
                },
                "piVar3": {
                    "count_ptr": 1,
                    "current_output_value": 1,
                    "current_result": 1,
                    "current_result_ptr": 1,
                    "int_pointer": 1,
                    "int_ptr": 1,
                    "int_ptr2": 1,
                    "length_ptr": 1,
                    "output_value_ptr": 1,
                    "param_pointer": 1,
                    "pointer": 1,
                    "pointer1": 1,
                    "pointer_var": 2,
                    "pointer_var3": 1,
                    "ptr": 10,
                    "ptr1": 2,
                    "ptr_counter": 1,
                    "ptr_output_param": 1,
                    "ptr_var3": 1,
                    "tmp_ptr": 1
                },
                "uStack_80": {
                    "dummy": 1,
                    "local_var3": 1,
                    "padding": 1,
                    "stack80": 1,
                    "stack_var": 2,
                    "stack_var80": 1,
                    "temp1": 1,
                    "temp_stack": 1,
                    "temp_var": 1,
                    "u_stack": 1,
                    "u_stack_80": 7,
                    "undefined_var": 1,
                    "unused": 5,
                    "unused_stack": 1,
                    "unused_stack_value": 1,
                    "unused_stack_var": 2,
                    "unused_stack_variable": 1,
                    "unused_var": 1,
                    "unused_variable": 1
                },
                "unaff_r7": {
                    "condition": 1,
                    "data_format": 1,
                    "format_result": 1,
                    "format_type": 3,
                    "format_value": 1,
                    "memory_pointer": 1,
                    "processed_length": 1,
                    "temp": 1,
                    "temp_var": 2,
                    "temporary_value": 1,
                    "unaff_r7": 11,
                    "unaff_value": 1,
                    "unaff_var": 1,
                    "unaff_var7": 1,
                    "unprocessed_data": 1,
                    "unused": 1
                }
            },
            "called": [
                "FUN_00005b34",
                "FUN_00006010",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000054a8",
                "FUN_000045e8",
                "FUN_000057d2"
            ],
            "calling": [
                "FUN_00004c84"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint decode_and_process_data_000057f8(int param1,undefined4 *param2,byte *data,int *param4)\n\n{\n  int result;\n  int validation_result;\n  int *ptr;\n  bool is_numeric;\n  byte *byte_ptr;\n  int unaff_r7;\n  byte *byte_ptr2;\n  int *local_ptr;\n  uint flags;\n  int value;\n  undefined4 u_stack_80;\n  int width;\n  int total_length;\n  byte format_char;\n  undefined space_flag;\n  undefined constant2;\n  undefined sign;\n  undefined4 unused2;\n  \n  if ((param1 != 0) && (*(int *)(param1 + 0x18) == 0)) {\n    initialize_memory_and_process_elf_relocations_000042a4();\n  }\n  if (param2 == &DAT_000079b8) {\n    param2 = *(undefined4 **)(param1 + 4);\n  }\n  else if (param2 == (undefined4 *)&DAT_000079d8) {\n    param2 = *(undefined4 **)(param1 + 8);\n  }\n  else if (param2 == (undefined4 *)&DAT_00007998) {\n    param2 = *(undefined4 **)(param1 + 0xc);\n  }\n  if ((-1 < (int)(param2[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(param2 + 3) << 0x16))) {\n    FUNC_000045e8(param2[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(param2 + 3) << 0x1c)) || (param2[4] == 0)) &&\n     (result = decode_and_process_data_000057f8_000054a8(param1,param2), result != 0)) {\n    if ((-1 < (int)(param2[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(param2 + 3) << 0x16)))\n    {\n      FUNC_000045ec(param2[0x16]);\n    }\n    return -1;\n  }\n  total_length = 0;\n  space_flag = 0x20;\n  constant2 = 0x30;\n  byte_ptr2 = data;\n  local_ptr = param4;\nLAB_0000588e:\n  byte_ptr = byte_ptr2;\n  if (*byte_ptr != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  byte_ptr2 = byte_ptr + 1;\n  if (*byte_ptr == 0x25) {\nLAB_0000589a:\n    result = (int)byte_ptr - (int)data;\n    if (result != 0) {\n      validation_result = process_data_and_validate_000057d2(param1,param2,data,result);\n      if (validation_result == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(param2[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(param2 + 3) << 0x16))) {\n          FUNC_000045ec(param2[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(param2 + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return total_length;\n      }\n      total_length = total_length + result;\n    }\n    if (*byte_ptr == 0) goto LAB_00005a06;\n    value = -1;\n    u_stack_80 = 0;\n    flags = 0;\n    width = 0;\n    sign = 0;\n    unused2 = 0;\n    byte_ptr2 = byte_ptr + 1;\n    while( true ) {\n      byte_ptr = byte_ptr2 + 1;\n      result = find_byte_sequence_00006010(\"#-0+ \",*byte_ptr2,5);\n      if (result == 0) break;\n      flags = 1 << (result - 0x7bfcU & 0xff) | flags;\n      byte_ptr2 = byte_ptr;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      sign = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      sign = 0x2b;\n    }\n    if (*byte_ptr2 == 0x2a) {\n      ptr = local_ptr + 1;\n      width = *local_ptr;\n      local_ptr = ptr;\n      if (width < 0) {\n        width = -width;\n        flags = flags | 2;\n      }\n    }\n    else {\n      is_numeric = false;\n      result = width;\n      byte_ptr = byte_ptr2;\n      while( true ) {\n        if (9 < *byte_ptr - 0x30) break;\n        result = result * 10 + (*byte_ptr - 0x30);\n        is_numeric = true;\n        byte_ptr = byte_ptr + 1;\n      }\n      if (is_numeric) {\n        width = result;\n      }\n    }\n    if (*byte_ptr == 0x2e) {\n      if (byte_ptr[1] == 0x2a) {\n        value = *local_ptr;\n        if (value < 0) {\n          value = -1;\n        }\n        byte_ptr = byte_ptr + 2;\n        local_ptr = local_ptr + 1;\n      }\n      else {\n        is_numeric = false;\n        value = 0;\n        result = 0;\n        while( true ) {\n          byte_ptr = byte_ptr + 1;\n          if (9 < *byte_ptr - 0x30) break;\n          result = result * 10 + (*byte_ptr - 0x30);\n          is_numeric = true;\n        }\n        if (is_numeric) {\n          value = result;\n        }\n      }\n    }\n    result = find_byte_sequence_00006010(&DAT_00007c02,*byte_ptr,3);\n    if (result != 0) {\n      flags = flags | 0x40 << (result - 0x7c02U & 0xff);\n      byte_ptr = byte_ptr + 1;\n    }\n    data = byte_ptr + 1;\n    format_char = *byte_ptr;\n    result = find_byte_sequence_00006010(\"efgEFG\",format_char,6);\n    if (result == 0) {\n      unaff_r7 = format_and_process_data_00005b34(param1,&flags,param2,0x57d3,&local_ptr);\n      if (unaff_r7 == -1) goto LAB_00005a06;\n    }\n    else {\n      local_ptr = (int *)(((int)local_ptr + 7U & 0xfffffff8) + 8);\n    }\n    total_length = total_length + unaff_r7;\n    byte_ptr2 = data;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "current_name": "decode_and_process_data_000057f8",
            "entrypoint": "0x000057f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000057f8": "decode_and_process_data_000057f8",
                "bVar4": "is_numeric",
                "iVar1": "result",
                "iVar2": "validation_result",
                "local_30": "unused2",
                "local_45": "sign",
                "local_6e": "constant2",
                "local_6f": "space_flag",
                "local_70": "format_char",
                "local_74": "total_length",
                "local_7c": "width",
                "local_84": "value",
                "local_88": "flags",
                "local_8c": "local_ptr",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data",
                "param_4": "param4",
                "pbVar5": "byte_ptr",
                "pbVar6": "byte_ptr2",
                "piVar3": "ptr",
                "uStack_80": "u_stack_80"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005a58": {
            "additional_data": {
                "FUN_00005a58": {
                    "calculate_buffer_length": 1,
                    "calculate_checksum": 1,
                    "calculate_final_size": 1,
                    "calculate_length": 1,
                    "calculate_new_length": 1,
                    "calculate_parameter": 1,
                    "calculate_required_size": 2,
                    "count_characters": 1,
                    "decode_and_process": 1,
                    "extracted_function": 1,
                    "parse_data": 2,
                    "process_data": 10,
                    "update_data": 2,
                    "update_parameters": 2,
                    "validate_and_process_data": 2
                },
                "bVar6": {
                    "check_flag": 1,
                    "check_value": 1,
                    "condition": 4,
                    "condition_check": 1,
                    "flag": 7,
                    "has_condition": 1,
                    "has_flag": 2,
                    "is_condition_met": 6,
                    "is_condition_true": 3,
                    "is_flag_set": 3,
                    "is_special_case": 1
                },
                "iVar1": {
                    "i": 3,
                    "idx": 1,
                    "index": 12,
                    "index1": 1,
                    "iteration": 1,
                    "iteration_count": 1,
                    "iteration_counter": 1,
                    "iterator": 1,
                    "loop_counter": 3,
                    "loop_index": 5,
                    "result": 2
                },
                "iVar3": {
                    "callback_result": 15,
                    "callback_return_value": 1,
                    "index2": 1,
                    "result": 1,
                    "return_value": 3,
                    "return_value2": 2,
                    "status": 2,
                    "temp": 2,
                    "temp_var": 3
                },
                "param_1": {
                    "data": 3,
                    "input": 12,
                    "input1": 3,
                    "input_param": 5,
                    "input_value": 5,
                    "param1": 1,
                    "result": 1,
                    "value": 1
                },
                "param_2": {
                    "array": 4,
                    "buffer": 2,
                    "data": 9,
                    "data_array": 5,
                    "data_param": 1,
                    "data_ptr": 1,
                    "input2": 2,
                    "input_array": 4,
                    "input_parameters": 1,
                    "param_array": 1,
                    "parameters": 1
                },
                "param_3": {
                    "buffer_length": 1,
                    "length": 1,
                    "output": 8,
                    "output1": 1,
                    "output_array": 1,
                    "output_count": 1,
                    "output_length": 3,
                    "output_param": 2,
                    "output_parameters": 1,
                    "output_size": 4,
                    "output_value": 3,
                    "result": 4,
                    "result_ptr": 1
                },
                "param_4": {
                    "additional_input": 1,
                    "additional_param": 2,
                    "additional_value": 1,
                    "config": 1,
                    "config_param": 1,
                    "extra_info": 1,
                    "extra_param": 2,
                    "helper_param": 1,
                    "input2": 1,
                    "input3": 1,
                    "input4": 1,
                    "param": 10,
                    "param1": 1,
                    "param4": 3,
                    "param_4": 3,
                    "param_a": 1
                },
                "param_5": {
                    "callback": 17,
                    "callback_func": 3,
                    "callback_function": 6,
                    "coding_function": 1,
                    "function_callback": 2,
                    "process_byte": 1
                },
                "uVar2": {
                    "result": 15,
                    "return_val": 1,
                    "return_value": 12,
                    "status": 2
                },
                "uVar4": {
                    "max_count": 1,
                    "max_length": 4,
                    "max_size": 8,
                    "max_value": 16,
                    "temp1": 1
                },
                "uVar5": {
                    "count": 9,
                    "counter": 9,
                    "current_count": 1,
                    "increment": 1,
                    "index": 1,
                    "iteration": 1,
                    "iteration_counter": 1,
                    "loop_counter": 3,
                    "loop_index": 1,
                    "loop_index2": 1,
                    "temp2": 1,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00005b34"
            ],
            "code": "\nundefined4\nvalidate_and_process_data_00005a58(undefined4 input,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int index;\n  undefined4 result;\n  int callback_result;\n  uint max_value;\n  uint counter;\n  bool flag;\n  \n  max_value = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_value = data[2];\n  }\n  *output = max_value;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = max_value + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      callback_result = (*callback)(input,param,(int)data + 0x19,1);\n      if (callback_result == -1) goto LAB_00005afc;\n    }\n  }\n  max_value = (uint)*(byte *)((int)data + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_value + 0x43) = 0x30;\n    *(undefined *)((int)data + max_value + 0x44) = *(undefined *)((int)data + 0x45);\n    max_value = max_value + 2;\n  }\n  index = (*callback)(input,param,(int)data + 0x43,max_value);\n  if (index == -1) {\nLAB_00005afc:\n    result = 0xffffffff;\n  }\n  else {\n    max_value = data[3];\n    flag = (*data & 6) == 4;\n    if (flag) {\n      max_value = max_value - *output;\n    }\n    if (flag) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    else {\n      max_value = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_value = max_value + (data[2] - data[4]);\n    }\n    for (counter = 0; max_value != counter; counter = counter + 1) {\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) goto LAB_00005afc;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "validate_and_process_data_00005a58",
            "entrypoint": "0x00005a58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005a58": "validate_and_process_data_00005a58",
                "bVar6": "flag",
                "iVar1": "index",
                "iVar3": "callback_result",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "uVar2": "result",
                "uVar4": "max_value",
                "uVar5": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005b34": {
            "additional_data": {
                "FUN_00005b34": {
                    "convert_and_process_data": 1,
                    "convert_number": 1,
                    "convert_number_to_string": 1,
                    "convert_to_hex_string": 3,
                    "decode_string": 1,
                    "format_and_output_data": 1,
                    "format_and_process_data": 3,
                    "format_and_validate_data": 1,
                    "format_data": 3,
                    "format_data_to_string": 1,
                    "format_number": 1,
                    "format_string": 1,
                    "formatted_output": 1,
                    "parse_data": 1,
                    "parse_format_specifier": 1,
                    "print_formatted_value": 2,
                    "process_data": 6,
                    "process_input": 1
                },
                "bVar1": {
                    "condition": 2,
                    "is_condition_met": 1,
                    "is_divisible": 5,
                    "is_greater": 4,
                    "is_greater_than": 2,
                    "is_greater_than_0x78": 1,
                    "is_less_than": 1,
                    "is_negative": 3,
                    "is_new_line": 1,
                    "is_positive": 8,
                    "is_smaller": 1,
                    "use_short": 1
                },
                "bVar2": {
                    "byte_val": 6,
                    "byte_value": 11,
                    "character": 1,
                    "data_type": 2,
                    "format_byte": 3,
                    "format_char": 2,
                    "format_specifier": 1,
                    "format_type": 1,
                    "input_byte": 1,
                    "len": 1,
                    "num_type": 1
                },
                "iVar1": {
                    "loop_var1": 1
                },
                "iVar10": {
                    "base": 1
                },
                "iVar2": {
                    "loop_var2": 1
                },
                "iVar3": {
                    "index": 1,
                    "position": 1,
                    "result": 24,
                    "return_value": 1,
                    "size_diff": 1,
                    "status": 1,
                    "temp": 1
                },
                "iVar6": {
                    "byte_read": 1,
                    "callback_result": 2,
                    "callback_return": 1,
                    "callback_status": 1,
                    "check_result": 1,
                    "code_result": 1,
                    "func_result": 1,
                    "index": 1,
                    "inner_result": 2,
                    "iteration": 1,
                    "loop_counter": 2,
                    "loop_iterator": 1,
                    "loop_result": 1,
                    "loop_var": 2,
                    "output_status": 1,
                    "return_value": 2,
                    "status": 4,
                    "sub_result": 1,
                    "temp_result": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "validation_result": 1
                },
                "iVar8": {
                    "current_number": 1,
                    "digit": 1,
                    "dividend": 1
                },
                "local_24": {
                    "callback_func": 1,
                    "callback_function": 1,
                    "callback_result_2": 1,
                    "final_code": 1,
                    "fixed_value": 1,
                    "formatted_output": 1,
                    "local_buffer": 1,
                    "local_callback": 11,
                    "local_function_ptr": 1,
                    "local_output_ptr": 1,
                    "local_result": 1,
                    "local_var": 1,
                    "local_variable": 1,
                    "original_output_end": 1,
                    "output_buffer": 1,
                    "result_ptr1": 1,
                    "temp_callback_function": 1,
                    "tmp_code": 1
                },
                "param_1": {
                    "config": 1,
                    "data": 7,
                    "format_specifier": 1,
                    "input": 10,
                    "input1": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_value": 3,
                    "output": 1,
                    "param1": 3,
                    "param_1": 1,
                    "value": 1
                },
                "param_2": {
                    "arg_list": 1,
                    "buffer": 4,
                    "data": 9,
                    "data_array": 1,
                    "format": 4,
                    "format_data": 1,
                    "format_specifier": 1,
                    "input": 2,
                    "input2": 1,
                    "input_array": 2,
                    "input_buffer": 1,
                    "number": 3,
                    "param2": 1
                },
                "param_3": {
                    "arg1": 1,
                    "input3": 1,
                    "input_param1": 1,
                    "input_size": 1,
                    "input_value2": 1,
                    "length": 2,
                    "option": 1,
                    "output_data": 1,
                    "param": 8,
                    "param3": 4,
                    "param_1": 1,
                    "param_3": 6,
                    "size": 3
                },
                "param_4": {
                    "callback": 21,
                    "callback_func": 1,
                    "callback_function": 1,
                    "function_ptr": 1,
                    "input4": 1,
                    "output_function": 2,
                    "param4": 1,
                    "print_function": 1,
                    "process": 1,
                    "ptr": 1
                },
                "param_5": {
                    "arg_ptr": 1,
                    "args": 1,
                    "buffer": 1,
                    "buffer_offset": 1,
                    "count": 1,
                    "counter": 1,
                    "data": 2,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "format_data_ptr": 1,
                    "index": 2,
                    "input5": 1,
                    "input_data": 1,
                    "input_string": 1,
                    "output": 1,
                    "output_array": 1,
                    "output_array_ptr": 1,
                    "p_counter": 1,
                    "param5": 1,
                    "param_2": 1,
                    "pointer_ptr": 1,
                    "pp_data": 2,
                    "ptr": 1,
                    "ptr_data": 1,
                    "ptr_ptr": 1,
                    "ptr_to_data": 1,
                    "ptr_to_ptr": 1,
                    "ptr_to_ptr_to_uint": 1
                },
                "pcVar14": {
                    "buffer": 1,
                    "char_ptr3": 1,
                    "curr_char": 1,
                    "current_char": 1,
                    "format_output": 1,
                    "formatted_data": 1,
                    "formatted_number": 1,
                    "formatted_ptr": 1,
                    "hex_string": 1,
                    "new_pointer": 1,
                    "output": 2,
                    "output_end": 1,
                    "output_pointer": 1,
                    "output_ptr_char": 1,
                    "p_hex": 1,
                    "position": 1,
                    "ptr_result": 2,
                    "result_ptr": 2,
                    "str_ptr": 3,
                    "string_ptr": 1,
                    "string_start": 1,
                    "temp_char_pointer": 1,
                    "temp_ptr": 1
                },
                "pcVar4": {
                    "callback_result": 1,
                    "code_pointer": 1,
                    "formatted_data": 1,
                    "func_ptr": 1,
                    "func_result": 1,
                    "function": 1,
                    "function_ptr": 1,
                    "function_result": 1,
                    "output": 5,
                    "output_ptr": 1,
                    "output_result": 1,
                    "result": 3,
                    "ret_func": 1,
                    "return_val": 2,
                    "return_value": 9
                },
                "pcVar5": {
                    "char_pointer": 1,
                    "char_ptr": 1,
                    "digit_chars": 1,
                    "digit_list": 1,
                    "digit_map": 1,
                    "digit_mapping": 1,
                    "digits": 2,
                    "hex_characters": 4,
                    "hex_chars": 7,
                    "hex_digits": 7,
                    "hex_values": 1,
                    "hexadecimal_digits": 2,
                    "num_chars": 1
                },
                "pcVar7": {
                    "arg_ptr_char": 1,
                    "byte_ptr": 1,
                    "char_array": 1,
                    "char_ptr": 3,
                    "char_ptr2": 1,
                    "current_byte": 1,
                    "current_char": 4,
                    "current_digit": 2,
                    "format_buffer": 1,
                    "format_data_ptr1": 1,
                    "format_pointer": 1,
                    "format_ptr": 1,
                    "format_string": 1,
                    "hex_number": 1,
                    "num_string": 1,
                    "output_pointer": 1,
                    "pointer": 2,
                    "ptr": 3,
                    "ptr_data": 1,
                    "str_pointer": 1,
                    "temp_ptr": 1
                },
                "ppcVar12": {
                    "char_pointer_pointer": 1,
                    "char_ptr_to_ptr": 1,
                    "current_string_pointer": 1,
                    "double_char_pointer": 1,
                    "format_data_ptr4": 1,
                    "pointer_to_pointee": 1,
                    "pp_char_pointer": 1,
                    "ppc": 1,
                    "ptr3": 1,
                    "ptr_callback_result": 1,
                    "ptr_ptr2": 1,
                    "ptr_ptr_char": 1,
                    "ptr_to_ptr_byte": 1,
                    "str_counter": 1,
                    "string_ptr_ptr": 1
                },
                "ppuVar11": {
                    "buffer_ptr_ptr": 1,
                    "current_buffer_pointer": 1,
                    "double_pointer": 1,
                    "format_data_ptr3": 1,
                    "pointer_pointer": 1,
                    "pointer_to_pointer": 1,
                    "pp_data_pointer": 1,
                    "pptr": 1,
                    "ptr2": 1,
                    "ptr_counter": 1,
                    "ptr_data_ptr": 1,
                    "ptr_ptr1": 1,
                    "ptr_ptr_count": 1,
                    "ptr_to_ptr": 1,
                    "ptr_to_ptr_data": 1
                },
                "puVar9": {
                    "arg": 1,
                    "arg_ptr_ptr": 1,
                    "buffer_ptr": 1,
                    "current_data_pointer": 1,
                    "current_offset": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_ptr_2": 1,
                    "format_data_ptr2": 1,
                    "input_ptr": 1,
                    "input_value": 1,
                    "p_data": 2,
                    "p_value": 1,
                    "param_ptr": 1,
                    "pointer": 1,
                    "pointer_1": 1,
                    "ptr": 2,
                    "ptr1": 3,
                    "ptr_count": 1,
                    "ptr_data": 2,
                    "ptr_to_data": 1,
                    "ptr_to_uint": 1,
                    "ptr_to_value": 1,
                    "ptr_value1": 1
                },
                "uVar10": {
                    "base": 23,
                    "base_value": 1,
                    "numeric_base": 1,
                    "radix": 1,
                    "temp2": 1,
                    "value2": 2,
                    "value_2": 1
                },
                "uVar13": {
                    "buffer_length": 1,
                    "bytes_remaining": 1,
                    "data_length": 1,
                    "data_size": 5,
                    "format_length": 1,
                    "input_length": 1,
                    "length": 11,
                    "original_width": 1,
                    "size": 2,
                    "string_length": 1,
                    "temp3": 1,
                    "value3": 2,
                    "value_3": 1,
                    "width": 1
                },
                "uVar8": {
                    "current_value": 2,
                    "digit": 1,
                    "dividend": 1,
                    "num": 1,
                    "quotient": 3,
                    "remainder": 2,
                    "temp1": 1,
                    "val": 1,
                    "value": 13,
                    "value1": 2,
                    "value_1": 1
                },
                "ucVar7": {
                    "current_char": 1
                }
            },
            "called": [
                "FUN_00006010",
                "FUN_00005a58"
            ],
            "calling": [
                "FUN_000057f8"
            ],
            "code": "\ncode * format_and_process_data_00005b34(undefined4 input,uint *data,undefined4 param,code *callback,uint **data\n                   )\n\n{\n  bool is_positive;\n  byte byte_value;\n  int result;\n  code *return_value;\n  char *hex_digits;\n  int status;\n  char *current_char;\n  uint value;\n  uint *ptr1;\n  uint base;\n  uint **current_buffer_pointer;\n  char **string_ptr_ptr;\n  uint length;\n  char *str_ptr;\n  code *local_callback;\n  \n  byte_value = *(byte *)(data + 6);\n  current_char = (char *)((int)data + 0x43);\n  local_callback = callback;\n  if (0x78 < byte_value) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)data + 0x42) = byte_value;\nLAB_00005bdc:\n    current_char = (char *)((int)data + 0x42);\n    value = 1;\nLAB_00005d28:\n    data[4] = value;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byte_value < 99) {\n    if (byte_value == 0) goto LAB_00005d06;\n    if (byte_value == 0x58) {\n      hex_digits = \"0123456789ABCDEF\";\n      *(undefined *)((int)data + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byte_value) {\n  case 99:\n    value = **data;\n    *data = *data + 1;\n    *(char *)((int)data + 0x42) = (char)value;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *data;\n    ptr1 = *data;\n    if ((int)(base << 0x18) < 0) {\n      value = *ptr1;\n      *data = ptr1 + 1;\n    }\n    else {\n      value = *ptr1;\n      *data = ptr1 + 1;\n      if ((base & 0x40) != 0) {\n        value = (uint)(short)value;\n      }\n    }\n    if ((int)value < 0) {\n      value = -value;\n      *(undefined *)((int)data + 0x43) = 0x2d;\n    }\n    hex_digits = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    current_buffer_pointer = (uint **)*data;\n    base = *data;\n    value = data[5];\n    *data = (uint *)(current_buffer_pointer + 1);\n    ptr1 = *current_buffer_pointer;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *ptr1 = value;\n    }\n    else {\n      *(short *)ptr1 = (short)value;\n    }\nLAB_00005d06:\n    data[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    ptr1 = *data;\n    value = *data;\n    *data = ptr1 + 1;\n    if (((int)(value << 0x18) < 0) || (-1 < (int)(value << 0x19))) {\n      value = *ptr1;\n    }\n    else {\n      value = (uint)*(ushort *)ptr1;\n    }\n    hex_digits = \"0123456789ABCDEF\";\n    if (byte_value == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *data = *data | 0x20;\n  case 0x78:\n    hex_digits = \"0123456789abcdef\";\n    *(undefined *)((int)data + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *data;\n    value = **data;\n    *data = *data + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      value = value & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *data = base | 0x20;\n    }\n    if (value == 0) {\n      *data = *data & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    string_ptr_ptr = (char **)*data;\n    *data = (uint *)(string_ptr_ptr + 1);\n    current_char = *string_ptr_ptr;\n    result = find_byte_sequence_00006010(current_char,0,data[1],string_ptr_ptr,input,data,param);\n    if (result != 0) {\n      data[1] = result - (int)current_char;\n    }\n    value = data[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)data + 0x43) = 0;\nLAB_00005c36:\n  length = data[1];\n  data[2] = length;\n  if (-1 < (int)length) {\n    *data = *data & 0xfffffffb;\n  }\n  str_ptr = current_char;\n  if ((value != 0) || (length != 0)) {\n    do {\n      str_ptr = str_ptr + -1;\n      *str_ptr = hex_digits[value - base * (value / base)];\n      is_positive = base <= value;\n      value = value / base;\n    } while (is_positive);\n  }\n  if (((base == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4])) {\n    str_ptr[-1] = '0';\n    str_ptr = str_ptr + -1;\n  }\n  data[4] = (int)current_char - (int)str_ptr;\n  current_char = str_ptr;\nLAB_00005c84:\n  result = validate_and_process_data_00005a58(input,data,&local_callback,param,callback);\n  if ((result == -1) || (result = (*callback)(input,param,current_char,data[4]), result == -1)) {\nLAB_00005c98:\n    return_value = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (result = 0; result < (int)(data[3] - (int)local_callback); result = result + 1) {\n        status = (*callback)(input,param,(int)data + 0x19,1);\n        if (status == -1) goto LAB_00005c98;\n      }\n    }\n    return_value = (code *)data[3];\n    if ((int)(code *)data[3] < (int)local_callback) {\n      return_value = local_callback;\n    }\n  }\n  return return_value;\n}\n\n",
            "current_name": "format_and_process_data_00005b34",
            "entrypoint": "0x00005b34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005b34": "format_and_process_data_00005b34",
                "bVar1": "is_positive",
                "bVar2": "byte_value",
                "iVar3": "result",
                "iVar6": "status",
                "local_24": "local_callback",
                "param_1": "input",
                "param_2": "data",
                "param_3": "param",
                "param_4": "callback",
                "param_5": "data",
                "pcVar14": "str_ptr",
                "pcVar4": "return_value",
                "pcVar5": "hex_digits",
                "pcVar7": "current_char",
                "ppcVar12": "string_ptr_ptr",
                "ppuVar11": "current_buffer_pointer",
                "puVar9": "ptr1",
                "uVar10": "base",
                "uVar13": "length",
                "uVar8": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005e10": {
            "additional_data": {
                "DAT_00007998": {
                    "dat_00007998": 1
                },
                "DAT_000079b8": {
                    "dat_000079b8": 1
                },
                "DAT_000079d8": {
                    "dat_000079d8": 1
                },
                "FUN_00005e10": {
                    "decode_data": 1,
                    "extract_byte_from_binary": 1,
                    "process_and_decrement_data": 1,
                    "process_and_extract_byte": 1,
                    "process_and_retrieve_byte": 1,
                    "process_binary": 1,
                    "process_binary_data": 14,
                    "process_byte_data": 1,
                    "process_data": 7,
                    "process_input_and_retrieve_byte": 1,
                    "process_memory": 1,
                    "reverse_and_extract_data": 1
                },
                "iVar1": {
                    "error_code": 1,
                    "result": 30
                },
                "initialize_memory_and_process_elf_relocations_000042a4": {
                    "initialize_memory_and_process_elf_relocations": 2,
                    "initialize_memory_and_process_elf_restructuring": 1,
                    "initialize_memory_and_process_relocations": 1
                },
                "param_1": {
                    "arg1": 2,
                    "binary": 1,
                    "binary_data": 4,
                    "binary_handle": 1,
                    "binary_parameter": 1,
                    "data": 2,
                    "data_address": 1,
                    "data_pointer": 2,
                    "input": 2,
                    "input_data": 1,
                    "input_param": 4,
                    "input_size": 1,
                    "input_value": 1,
                    "param": 1,
                    "param1": 5,
                    "parameter1": 1,
                    "pointer_to_struct": 1
                },
                "param_2": {
                    "arg2": 2,
                    "buffer": 1,
                    "byte_array": 1,
                    "byte_array_param": 1,
                    "byte_array_pointer": 1,
                    "byte_data": 1,
                    "byte_pointer": 1,
                    "byte_pointer_parameter": 1,
                    "byte_ptr_ptr": 1,
                    "data": 2,
                    "data_array": 1,
                    "data_param": 1,
                    "data_pointer": 5,
                    "data_ptr": 3,
                    "param2": 5,
                    "parameter2": 1,
                    "pointer_to_data": 1,
                    "pointer_to_pointer": 1,
                    "ptr_to_byte_array": 1
                },
                "pbVar3": {
                    "byte_pointer": 5,
                    "byte_ptr": 3,
                    "byte_value": 11,
                    "current_byte": 11,
                    "data_pointer": 1
                },
                "process_binary_data_00006768": {
                    "process_binary_data": 3,
                    "process_binary_data_helper": 1
                },
                "uVar2": {
                    "byte_value": 2,
                    "decoded_value": 1,
                    "extracted_byte": 1,
                    "extracted_value": 1,
                    "output": 2,
                    "output_value": 2,
                    "return_value": 14,
                    "value": 2
                }
            },
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_00004418"
            ],
            "code": "\nuint process_binary_data_00005e10(int param1,byte **param2)\n\n{\n  int result;\n  uint return_value;\n  byte *current_byte;\n  \n  if ((param1 != 0) && (*(int *)(param1 + 0x18) == 0)) {\n    initialize_memory_and_process_elf_relocations();\n  }\n  if (param2 == (byte **)&DAT_000079b8) {\n    param2 = *(byte ***)(param1 + 4);\n  }\n  else if (param2 == (byte **)&DAT_000079d8) {\n    param2 = *(byte ***)(param1 + 8);\n  }\n  else if (param2 == (byte **)&DAT_00007998) {\n    param2 = *(byte ***)(param1 + 0xc);\n  }\n  result = process_binary_data_00005e10(param1,param2);\n  if (result == 0) {\n    param2[1] = param2[1] + -1;\n    current_byte = *param2;\n    *param2 = current_byte + 1;\n    return_value = (uint)*current_byte;\n  }\n  else {\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_binary_data_00005e10",
            "entrypoint": "0x00005e10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005e10": "process_binary_data_00005e10",
                "iVar1": "result",
                "initialize_memory_and_process_elf_relocations_000042a4": "initialize_memory_and_process_elf_relocations",
                "param_1": "param1",
                "param_2": "param2",
                "pbVar3": "current_byte",
                "process_binary_data_00006768": "process_binary_data",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005e68": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "elf_data": 1
                },
                "FUN_00005e68": {
                    "process_and_update_data": 1,
                    "process_binary_data": 27,
                    "process_data": 2,
                    "process_elf32_data": 1
                },
                "local_38": {
                    "constant4": 1,
                    "constant_0": 1,
                    "constant_0_copy": 1,
                    "constant_4": 2,
                    "constant_zero_2": 1,
                    "counter2": 2,
                    "counter_2": 1,
                    "local_var2": 1,
                    "local_variable_4": 1,
                    "temp": 1,
                    "unused_ptr_2": 1,
                    "var2": 1,
                    "variable_2": 2,
                    "zero": 3,
                    "zero2": 5,
                    "zero_2": 5,
                    "zero_initialized_2": 1,
                    "zero_result": 1
                },
                "local_4c": {
                    "constant3": 1,
                    "constant_0": 2,
                    "constant_3": 2,
                    "constant_zero": 1,
                    "counter": 3,
                    "counter_1": 1,
                    "local_var1": 1,
                    "local_variable_3": 1,
                    "unused_ptr": 1,
                    "var1": 1,
                    "variable_1": 2,
                    "zero": 13,
                    "zero_initialized_1": 1,
                    "zero_param": 1
                },
                "local_5c": {
                    "pointer": 1,
                    "pointer_constant": 1,
                    "start_of_string": 1,
                    "string": 1,
                    "string_address": 1,
                    "string_buffer": 1,
                    "string_data": 3,
                    "string_init_ptr": 1,
                    "string_pointer": 11,
                    "string_ptr": 5,
                    "string_start": 4,
                    "string_start_ptr": 1
                },
                "local_6c": {
                    "end_of_string2": 1,
                    "end_of_string_2": 1,
                    "end_of_string_address_copy": 1,
                    "end_of_string_clone": 1,
                    "end_of_string_copy": 15,
                    "end_of_string_current": 1,
                    "end_string_ptr_copy": 1,
                    "local_variable_2": 1,
                    "string_copy": 1,
                    "string_end_address_copy": 1,
                    "string_end_copy": 5,
                    "string_end_ptr": 1
                },
                "local_70": {
                    "address2": 1,
                    "data_init_ptr": 1,
                    "data_ptr_clone": 1,
                    "data_ptr_copy": 4,
                    "data_ptr_copy_2": 1,
                    "data_start_address_copy": 1,
                    "elf32_data_copy2": 1,
                    "input_1_copy_2": 1,
                    "input_copy": 1,
                    "input_copy_2": 1,
                    "input_copy_copy": 2,
                    "input_data2": 1,
                    "input_data_copy2": 3,
                    "input_data_copy_2": 1,
                    "input_param_copy": 1,
                    "input_param_copy2": 2,
                    "input_param_copy_2": 2,
                    "input_save": 1,
                    "input_var_2": 1,
                    "processed_data": 1,
                    "processed_data_2": 1
                },
                "local_72": {
                    "char_limit": 1,
                    "constant": 1,
                    "constant2": 1,
                    "constant_16": 1,
                    "constant_2": 3,
                    "constant_ffff": 1,
                    "constant_minus1": 1,
                    "constant_negative_1": 1,
                    "constant_value": 1,
                    "constant_value2": 1,
                    "constant_value_2": 2,
                    "default_value": 2,
                    "flag": 1,
                    "local_variable_1": 1,
                    "max_value": 3,
                    "negative_one": 1,
                    "negative_value": 1,
                    "string_length": 1,
                    "string_terminator": 1,
                    "unknown_value": 1,
                    "value": 1
                },
                "local_74": {
                    "constant": 1,
                    "constant_1": 4,
                    "constant_204": 2,
                    "constant_value": 4,
                    "string_length": 11
                },
                "local_7c": {
                    "end_of_string": 22,
                    "end_of_string_address": 1,
                    "end_string_ptr": 1,
                    "string_end": 5,
                    "string_end_address": 1,
                    "string_ptr": 1
                },
                "local_80": {
                    "address1": 1,
                    "data_address": 1,
                    "data_ptr": 6,
                    "data_ptr_copy": 2,
                    "elf32_data_copy": 1,
                    "input_1_copy": 1,
                    "input_copy": 5,
                    "input_data1": 1,
                    "input_data_copy": 5,
                    "input_param_copy": 5,
                    "input_var": 1,
                    "processed_data": 2
                },
                "param_1": {
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "data_start": 1,
                    "data_start_address": 1,
                    "elf32_data": 1,
                    "input": 1,
                    "input_address": 1,
                    "input_data": 11,
                    "input_param": 10,
                    "input_param_1": 1
                },
                "param_2": {
                    "additional_param": 1,
                    "another_param": 1,
                    "array_param": 1,
                    "data_length": 3,
                    "data_size": 3,
                    "input_param_2": 1,
                    "input_size": 1,
                    "input_value": 1,
                    "other_param": 1,
                    "output_param": 6,
                    "param2": 1,
                    "param_2": 2,
                    "parameter_2": 1,
                    "size": 6,
                    "size_of_data": 1,
                    "size_param": 1
                },
                "param_3": {
                    "aux_param1": 1,
                    "input_param_3": 1,
                    "offset": 1,
                    "offset_param": 1,
                    "param1": 2,
                    "param3": 3,
                    "param_3": 10,
                    "param_end": 1,
                    "param_ptr": 1,
                    "stack_param": 1,
                    "stack_param_1": 1,
                    "start": 1,
                    "string_end": 3,
                    "string_end_param": 1,
                    "string_start": 2,
                    "temp_param_1": 1
                },
                "param_4": {
                    "address": 1,
                    "aux_param2": 1,
                    "end": 1,
                    "input_param_4": 1,
                    "offset_param": 1,
                    "other_param": 1,
                    "param": 1,
                    "param2": 2,
                    "param4": 3,
                    "param_4": 12,
                    "size_param": 1,
                    "stack_param2": 1,
                    "stack_param_2": 1,
                    "string_end": 2,
                    "string_offset": 1,
                    "temp_param_2": 1
                },
                "uStack_4": {
                    "address_copy": 1,
                    "end_copy": 1,
                    "param4_copy": 1,
                    "param_4": 1,
                    "param_4_copy": 4
                },
                "uStack_8": {
                    "offset_copy": 1,
                    "param3_copy": 1,
                    "param_3": 1,
                    "param_3_copy": 4,
                    "param_ptr_copy": 1,
                    "start_copy": 1,
                    "temp_2": 1
                }
            },
            "called": [
                "FUN_000061cc",
                "FUN_00005ecc"
            ],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid process_binary_data_00005e68(undefined4 input_data,undefined4 size,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 data_ptr;\n  undefined4 end_of_string;\n  undefined2 string_length;\n  undefined2 max_value;\n  undefined4 data_ptr_copy;\n  undefined4 end_of_string_copy;\n  undefined *string_pointer;\n  undefined4 zero;\n  undefined4 zero2;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  string_length = 0x204;\n  data_ptr = input_data;\n  data_ptr_copy = input_data;\n  param_3_copy = param_3;\n  param_4_copy = param_4;\n  end_of_string = find_end_of_string_00005ecc();\n  string_pointer = &LAB_00004dea_1;\n  zero = 0;\n  zero2 = 0;\n  max_value = 0xffff;\n  end_of_string_copy = end_of_string;\n  process_binary_data_00005e68_000061cc(elf_data[16].r_offset,&data_ptr,size,&param_3_copy);\n  return;\n}\n\n",
            "current_name": "process_binary_data_00005e68",
            "entrypoint": "0x00005e68",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "elf_data",
                "FUN_00005e68": "process_binary_data_00005e68",
                "local_38": "zero2",
                "local_4c": "zero",
                "local_5c": "string_pointer",
                "local_6c": "end_of_string_copy",
                "local_70": "data_ptr_copy",
                "local_72": "max_value",
                "local_74": "string_length",
                "local_7c": "end_of_string",
                "local_80": "data_ptr",
                "param_1": "input_data",
                "param_2": "size",
                "uStack_4": "param_4_copy",
                "uStack_8": "param_3_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "additional_data": {
                "FUN_00005ebc": {
                    "copy_string": 31
                },
                "cVar1": {
                    "character": 1,
                    "current_char": 23,
                    "current_character": 6
                },
                "param_1": {
                    "dest": 5,
                    "destination": 21,
                    "destination_string": 4,
                    "source": 1
                },
                "param_2": {
                    "destination": 1,
                    "source": 21,
                    "source_string": 4,
                    "src": 5
                }
            },
            "called": [],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid copy_string_00005ebc(char *destination,char *source)\n\n{\n  char current_char;\n  \n  do {\n    current_char = *source;\n    *destination = current_char;\n    source = source + 1;\n    destination = destination + 1;\n  } while (current_char != '\\0');\n  return;\n}\n\n",
            "current_name": "copy_string_00005ebc",
            "entrypoint": "0x00005ebc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "cVar1": "current_char",
                "param_1": "destination",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "additional_data": {
                "FUN_00005ecc": {
                    "extract_string": 1,
                    "find_end_of_string": 18,
                    "find_last_character": 1,
                    "find_null_terminated_string": 1,
                    "find_null_terminator": 2,
                    "find_string_length": 2,
                    "get_last_character_index": 1,
                    "get_string_length": 2,
                    "reverse_string": 3
                },
                "cVar1": {
                    "char_value": 1,
                    "character": 1,
                    "current_char": 13,
                    "current_char_value": 3,
                    "current_character": 7,
                    "current_character_data": 1,
                    "current_character_value": 2,
                    "current_value": 1
                },
                "param_1": {
                    "input_string": 20,
                    "str": 1,
                    "string": 10
                },
                "pcVar2": {
                    "current_char": 1,
                    "current_character": 1,
                    "end_of_string": 1,
                    "next_char": 14,
                    "next_char_pointer": 1,
                    "next_char_ptr": 2,
                    "next_character": 10
                },
                "pcVar3": {
                    "current_char": 10,
                    "current_char_pointer": 1,
                    "current_char_ptr": 1,
                    "current_character": 7,
                    "current_position": 4,
                    "current_ptr": 2,
                    "string_ptr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00005e68",
                "FUN_00005100"
            ],
            "code": "\nchar * find_end_of_string_00005ecc(char *input_string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_char;\n  \n  current_char = input_string;\n  do {\n    next_char = current_char + 1;\n    current_char = *current_char;\n    current_char = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "current_name": "find_end_of_string_00005ecc",
            "entrypoint": "0x00005ecc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "cVar1": "current_char",
                "param_1": "input_string",
                "pcVar2": "next_char",
                "pcVar3": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005edc": {
            "additional_data": {
                "FUN_00005edc": {
                    "convert_string_to_int": 1,
                    "convert_string_to_integer": 1,
                    "convert_string_to_number": 3,
                    "parse_integer": 8,
                    "parse_integer_from_hex_string": 1,
                    "parse_integer_from_string": 3,
                    "parse_number": 12,
                    "parse_number_from_string": 1,
                    "parse_unsigned_integer": 1
                },
                "LAB_00005f26": {
                    "skip_prefix": 1
                },
                "LAB_00005fb8": {
                    "skip_zero": 1
                },
                "bVar3": {
                    "is_negative": 17,
                    "negative": 13,
                    "negative_flag": 1
                },
                "iVar4": {
                    "conversion_status": 1,
                    "error": 2,
                    "is_error": 1,
                    "is_invalid": 1,
                    "is_valid": 2,
                    "parse_result": 3,
                    "parse_status": 2,
                    "result": 1,
                    "retval": 1,
                    "status": 15,
                    "valid": 2
                },
                "param_1": {
                    "error_code": 3,
                    "error_flag": 1,
                    "num": 1,
                    "output": 3,
                    "output_value": 2,
                    "ptr_output": 1,
                    "result": 20
                },
                "param_2": {
                    "input": 8,
                    "input_str": 1,
                    "input_string": 13,
                    "str": 4,
                    "string": 5
                },
                "param_3": {
                    "end": 1,
                    "end_pointer": 1,
                    "end_ptr": 2,
                    "endptr": 2,
                    "next": 3,
                    "next_byte": 1,
                    "next_char_ptr": 2,
                    "next_character": 1,
                    "next_input": 1,
                    "next_pointer": 1,
                    "out_string": 1,
                    "ptr_remaining": 1,
                    "remain_ptr": 1,
                    "remaining": 1,
                    "remaining_chars": 1,
                    "remaining_input": 1,
                    "remaining_str": 1,
                    "remaining_string": 7,
                    "rest_of_input": 1,
                    "rest_of_string": 1
                },
                "param_4": {
                    "base": 31
                },
                "pbVar7": {
                    "cur_byte": 1,
                    "curr": 1,
                    "curr_char_ptr": 1,
                    "current": 1,
                    "current_byte": 9,
                    "current_char": 2,
                    "current_input": 1,
                    "current_pointer": 3,
                    "current_position": 1,
                    "current_ptr": 4,
                    "previous_char": 1,
                    "ptr": 3,
                    "str_ptr1": 1
                },
                "pbVar8": {
                    "current_char": 2,
                    "next": 2,
                    "next_byte": 9,
                    "next_byte_pointer": 1,
                    "next_char": 3,
                    "next_char_ptr": 1,
                    "next_input": 1,
                    "next_pointer": 3,
                    "next_position": 1,
                    "next_ptr": 4,
                    "str_ptr": 1,
                    "str_ptr2": 1
                },
                "uVar1": {
                    "converted_number": 3,
                    "converted_value": 1,
                    "number": 2,
                    "parsed_number": 6,
                    "parsed_value": 7,
                    "result": 9,
                    "value": 3
                },
                "uVar2": {
                    "byte_value": 1,
                    "ch": 7,
                    "character_code": 1,
                    "current_char": 21,
                    "digit": 1
                },
                "uVar5": {
                    "decimal_value": 1,
                    "digit": 12,
                    "digit_value": 18
                },
                "uVar6": {
                    "digit_limit": 2,
                    "max_digit": 1,
                    "max_div": 2,
                    "max_dividend": 2,
                    "max_divisible": 2,
                    "max_divisor": 6,
                    "max_val": 1,
                    "max_value": 14,
                    "overflow_limit": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00005fd8"
            ],
            "code": "\nuint parse_number_from_string_00005edc(undefined4 *result,byte *input_string,byte **remaining_string,uint base)\n\n{\n  uint result;\n  uint current_char;\n  byte is_negative;\n  int status;\n  uint digit_value;\n  uint max_value;\n  byte *current_byte;\n  byte *next_byte;\n  \n  next_byte = input_string;\n  do {\n    current_byte = next_byte;\n    next_byte = current_byte + 1;\n    current_char = (uint)*current_byte;\n    is_negative = (&DAT_00007a99)[current_char] & 8;\n  } while (((&DAT_00007a99)[current_char] & 8) != 0);\n  if (current_char == 0x2d) {\n    current_char = (uint)*next_byte;\n    is_negative = 1;\n    next_byte = current_byte + 2;\n  }\n  else if (current_char == 0x2b) {\n    current_char = (uint)*next_byte;\n    next_byte = current_byte + 2;\n  }\n  if (base == 0) {\n    if (current_char != 0x30) {\n      base = 10;\n      goto skip_prefix;\n    }\n  }\n  else if ((base != 0x10) || (current_char != 0x30)) goto skip_prefix;\n  if ((*next_byte & 0xdf) == 0x58) {\n    current_char = (uint)next_byte[1];\n    base = 0x10;\n    next_byte = next_byte + 2;\n  }\n  else {\n    current_char = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nskip_prefix:\n  status = 0;\n  max_value = 0xffffffff / base;\n  result = 0;\n  do {\n    digit_value = current_char - 0x30;\n    if (9 < digit_value) {\n      if (current_char - 0x41 < 0x1a) {\n        digit_value = current_char - 0x37;\n      }\n      else {\n        if (0x19 < current_char - 0x61) break;\n        digit_value = current_char - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit_value) break;\n    if (((status < 0) || (max_value < result)) ||\n       ((max_value == result && ((int)~(base * max_value) < (int)digit_value)))) {\n      status = -1;\n    }\n    else {\n      result = result * base + digit_value;\n      status = 1;\n    }\n    current_char = (uint)*next_byte;\n    next_byte = next_byte + 1;\n  } while( true );\n  if (status < 0) {\n    *result = 0x22;\n    result = 0xffffffff;\n    if (remaining_string == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      result = -result;\n    }\n    if (remaining_string == (byte **)0x0) {\n      return result;\n    }\n    if (status == 0) goto skip_zero;\n  }\n  input_string = next_byte + -1;\nskip_zero:\n  *remaining_string = input_string;\n  return result;\n}\n\n",
            "current_name": "parse_number_from_string_00005edc",
            "entrypoint": "0x00005edc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005edc": "parse_number_from_string_00005edc",
                "LAB_00005f26": "skip_prefix",
                "LAB_00005fb8": "skip_zero",
                "bVar3": "is_negative",
                "iVar4": "status",
                "param_1": "result",
                "param_2": "input_string",
                "param_3": "remaining_string",
                "param_4": "base",
                "pbVar7": "current_byte",
                "pbVar8": "next_byte",
                "uVar1": "result",
                "uVar2": "current_char",
                "uVar5": "digit_value",
                "uVar6": "max_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "rel_array": 1
                },
                "FUN_00005fd8": {
                    "parse_and_extract_number": 2,
                    "parse_and_extract_number_from_offset": 2,
                    "parse_and_extract_number_from_rel_entry": 1,
                    "parse_and_process_number": 2,
                    "parse_and_process_string": 1,
                    "parse_and_store_number": 6,
                    "parse_and_store_number_from_rel_array": 1,
                    "parse_instructions": 1,
                    "parse_number": 2,
                    "parse_number_from_elf_relocation": 2,
                    "parse_number_from_offset": 2,
                    "parse_number_from_string": 6,
                    "parse_relocations": 1,
                    "parse_string_to_number": 2
                },
                "param_1": {
                    "destination": 1,
                    "input_offset": 1,
                    "number_offset": 3,
                    "offset": 15,
                    "offset_param": 1,
                    "output": 2,
                    "output_param": 2,
                    "output_param1": 1,
                    "output_value": 3,
                    "relocation_offset": 2
                },
                "param_2": {
                    "arg1": 1,
                    "buffer": 1,
                    "first_input": 1,
                    "input1": 1,
                    "input_param_1": 2,
                    "input_value1": 2,
                    "output1": 1,
                    "output_param2": 1,
                    "param": 2,
                    "param1": 4,
                    "param2": 8,
                    "param_1": 1,
                    "param_2": 5,
                    "source": 1
                },
                "param_3": {
                    "arg2": 1,
                    "input2": 1,
                    "input_param_2": 2,
                    "input_value2": 2,
                    "length": 2,
                    "output2": 1,
                    "output_param3": 1,
                    "param2": 4,
                    "param3": 8,
                    "param_2": 1,
                    "param_3": 5,
                    "result": 2,
                    "second_input": 1
                },
                "r_offset": {
                    "offset": 1
                }
            },
            "called": [
                "FUN_00005edc"
            ],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid parse_and_store_number_from_rel_array_00005fd8(undefined4 offset,undefined4 param2,undefined4 param3)\n\n{\n  parse_number_from_string_00005edc(rel_array[16].offset,offset,param2,param3);\n  return;\n}\n\n",
            "current_name": "parse_and_store_number_from_rel_array_00005fd8",
            "entrypoint": "0x00005fd8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_00005fd8": "parse_and_store_number_from_rel_array_00005fd8",
                "param_1": "offset",
                "param_2": "param2",
                "param_3": "param3",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005fec": {
            "additional_data": {
                "0x1fff0de6": {
                    "configuration_data": 1,
                    "data_address": 1,
                    "data_pointer": 1,
                    "default_configuration": 1,
                    "initial_value": 1,
                    "initialization_parameter": 1,
                    "memory_address": 2,
                    "register_value": 1
                },
                "DAT_1fff0de6": {
                    "data_value": 1
                },
                "FUNC_000045e8": {
                    "configure_device": 1,
                    "execute_data_initialization": 1,
                    "initialize_data": 1,
                    "initialize_device": 1,
                    "load_data": 1,
                    "perform_operation": 1,
                    "process_data": 1,
                    "send_sensor_data": 1,
                    "set_configuration": 3,
                    "set_initial_value": 2,
                    "set_memory": 1,
                    "set_memory_value": 5,
                    "set_register_value": 1,
                    "set_sensor_value": 1,
                    "write_data_to_memory": 7,
                    "write_to_memory": 2,
                    "write_value_to_memory": 1
                },
                "FUN_00005fec": {
                    "execute_initialization": 2,
                    "initialize_configuration": 1,
                    "initialize_data": 5,
                    "initialize_memory": 17,
                    "initialize_registers": 1,
                    "initialize_sensor": 2,
                    "initialize_system": 2,
                    "initiate_data_processing": 1
                }
            },
            "called": [
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_0000562c"
            ],
            "code": "\nvoid initialize_memory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "current_name": "initialize_memory_00005fec",
            "entrypoint": "0x00005fec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "additional_data": {
                "0x1fff0de6": {
                    "configuration_data": 1,
                    "data_address": 1,
                    "data_block_address": 1,
                    "function_argument": 1,
                    "initial_value": 1,
                    "initialization_data": 1,
                    "input_data": 1,
                    "memory_address": 2,
                    "memory_value": 1,
                    "operation_input": 1,
                    "parameter": 1,
                    "sensor_data": 1
                },
                "FUNC_000045ec": {
                    "call_function": 1,
                    "call_function_with_parameter": 1,
                    "call_other_function": 1,
                    "call_with_parameter": 1,
                    "execute_data_initialization": 1,
                    "execute_function": 1,
                    "execute_operation": 1,
                    "initialize_data_block": 1,
                    "invoke_function": 1,
                    "perform_initialization": 1,
                    "perform_task": 1,
                    "process_data": 3,
                    "send_command": 1,
                    "send_sensor_data": 1,
                    "set_configuration": 1,
                    "set_data": 1,
                    "set_memory_value": 4,
                    "update_value": 1,
                    "write_data_to_memory": 4,
                    "write_to_memory": 1,
                    "write_value_to_memory": 3
                },
                "FUN_00005ff8": {
                    "execute_function": 1,
                    "execute_initialization": 1,
                    "initialize": 1,
                    "initialize_data": 9,
                    "initialize_function": 2,
                    "initialize_memory": 13,
                    "initialize_sensor": 1,
                    "initialize_system": 1,
                    "initiate_device": 1
                }
            },
            "called": [
                "FUN_000045ec"
            ],
            "calling": [
                "FUN_0000562c"
            ],
            "code": "\nvoid initialize_memory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "current_name": "initialize_memory_00005ff8",
            "entrypoint": "0x00005ff8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006010": {
            "additional_data": {
                "FUN_00006010": {
                    "decode_data": 1,
                    "find_byte_sequence": 18,
                    "find_first_occurrence": 4,
                    "find_last_occurrence": 1,
                    "find_next_byte": 3,
                    "find_occurrence": 1,
                    "find_pattern": 2,
                    "reverse_search_byte": 1
                },
                "bVar1": {
                    "byte_value": 3,
                    "current_byte": 25,
                    "current_character": 1,
                    "current_value": 1,
                    "found_byte": 1
                },
                "bVar13": {
                    "bit0_1": 1,
                    "bit_1": 1,
                    "bit_1_set": 1,
                    "bool0": 1,
                    "byte_bit_0": 1,
                    "char_bool_1": 1,
                    "check1_result": 1,
                    "check_bit_1": 1,
                    "check_flag": 1,
                    "condition5": 1,
                    "flag1": 1,
                    "is_byte_nonzero": 1,
                    "is_char_nonzero_mid": 1,
                    "is_high_byte_not_zero": 1,
                    "is_masked_byte_nonzero": 1,
                    "is_nonzero": 1,
                    "is_other_character_zero": 1,
                    "is_set_0": 1,
                    "is_true_1": 1,
                    "is_xor_byte_1_nonzero": 1,
                    "is_xor_result_zero": 1,
                    "is_zero_8_xor_result": 1,
                    "temp2_bit0": 1,
                    "temp_bool1": 1,
                    "temp_condition_1": 1,
                    "xor_1_not_zero": 1,
                    "xor_result_8_0": 1
                },
                "bVar14": {
                    "bit8_1": 1,
                    "bit_2": 1,
                    "bit_2_set": 1,
                    "bool1": 1,
                    "byte_bit_8": 1,
                    "char_bool_2": 1,
                    "check2_result": 1,
                    "check_bit_2": 1,
                    "check_flag": 1,
                    "condition6": 1,
                    "flag2": 1,
                    "is_byte_nonzero_high": 1,
                    "is_char_nonzero_high": 1,
                    "is_masked_byte_shifted_8_nonzero": 1,
                    "is_mid_high_byte_not_zero": 1,
                    "is_nonzero_high": 1,
                    "is_other_character_shifted_8": 1,
                    "is_set_1": 1,
                    "is_true_2": 1,
                    "is_xor_byte_2_nonzero": 1,
                    "is_xor_result_shifted_right_8_bits_zero": 1,
                    "is_zero_16_xor_result": 1,
                    "temp2_bit8": 1,
                    "temp_bool2": 1,
                    "temp_condition_2": 1,
                    "xor_2_not_zero": 1,
                    "xor_result_8_8": 1
                },
                "bVar15": {
                    "bit16_1": 1,
                    "bit_3": 1,
                    "bit_3_set": 1,
                    "bool2": 1,
                    "byte_bit_16": 1,
                    "char_bool_3": 1,
                    "check3_result": 1,
                    "check_bit_3": 1,
                    "check_flag": 1,
                    "condition7": 1,
                    "flag3": 1,
                    "is_byte_nonzero_mid_high": 1,
                    "is_char_nonzero_mid_high": 1,
                    "is_masked_byte_shifted_16_nonzero": 1,
                    "is_mid_low_byte_not_zero": 1,
                    "is_nonzero_higher": 1,
                    "is_other_character_shifted_16": 1,
                    "is_set_2": 1,
                    "is_true_3": 1,
                    "is_xor_byte_3_nonzero": 1,
                    "is_xor_result_shifted_right_16_bits_zero": 1,
                    "is_zero_24_xor_result": 1,
                    "temp2_bit16": 1,
                    "temp_bool3": 1,
                    "temp_condition_3": 1,
                    "xor_3_not_zero": 1,
                    "xor_result_8_16": 1
                },
                "bVar16": {
                    "bit24_1": 1,
                    "bit_4": 1,
                    "bit_4_set": 1,
                    "bool3": 1,
                    "byte_bit_24": 1,
                    "char_bool_4": 1,
                    "check4_result": 1,
                    "check_bit_4": 1,
                    "check_flag": 1,
                    "condition8": 1,
                    "flag4": 1,
                    "is_byte_nonzero_high": 1,
                    "is_char_nonzero_low_high": 1,
                    "is_low_byte_not_zero": 1,
                    "is_masked_byte_shifted_24_nonzero": 1,
                    "is_nonzero_highest": 1,
                    "is_other_character_shifted_24": 1,
                    "is_set_3": 1,
                    "is_true_4": 1,
                    "is_xor_byte_4_nonzero": 1,
                    "is_xor_result_shifted_right_24_bits_zero": 1,
                    "is_zero_32_xor_result": 1,
                    "temp2_bit24": 1,
                    "temp_bool4": 1,
                    "temp_condition_4": 1,
                    "xor_4_not_zero": 1,
                    "xor_result_8_24": 1
                },
                "bVar17": {
                    "check_result": 1,
                    "is_outer_cond_true": 1
                },
                "bVar18": {
                    "check_result_8": 1,
                    "is_inner_cond_true": 1
                },
                "bVar19": {
                    "check_result_16": 1
                },
                "bVar20": {
                    "check_result_24": 1
                },
                "cVar2": {
                    "bit0": 2,
                    "bit_0": 1,
                    "bit_1": 1,
                    "byte0": 2,
                    "char_var_1": 1,
                    "check1": 1,
                    "check_1": 1,
                    "condition1": 1,
                    "condition_1": 1,
                    "current_byte_0": 1,
                    "is_byte_0": 1,
                    "is_byte_equal": 1,
                    "is_byte_zero": 4,
                    "is_char_zero": 1,
                    "is_character_zero": 1,
                    "is_current_byte_zero": 1,
                    "is_null": 1,
                    "is_zero": 2,
                    "mask_1": 2,
                    "mask_byte_1": 1,
                    "msb_1": 1,
                    "result_0": 1,
                    "temp_char1": 1
                },
                "cVar3": {
                    "bit8": 2,
                    "bit_2": 1,
                    "bit_8": 1,
                    "byte1": 2,
                    "char_var_2": 1,
                    "check2": 1,
                    "check_2": 1,
                    "condition2": 1,
                    "condition_2": 1,
                    "current_byte_1": 1,
                    "is_byte_1": 1,
                    "is_byte_equal": 1,
                    "is_byte_zero_8": 1,
                    "is_byte_zero_high": 1,
                    "is_byte_zero_shifted_8": 1,
                    "is_char_zero_high": 1,
                    "is_character_shifted_8": 1,
                    "is_current_byte_shifted_right_8_bits_zero": 1,
                    "is_high_byte_zero": 1,
                    "is_null_8": 1,
                    "is_zero_8": 1,
                    "is_zero_high": 1,
                    "mask_2": 2,
                    "mask_byte_2": 1,
                    "msb_2": 1,
                    "result_8": 1,
                    "temp_char2": 1
                },
                "cVar4": {
                    "bit16": 2,
                    "bit_16": 1,
                    "bit_3": 1,
                    "byte2": 2,
                    "char_var_3": 1,
                    "check3": 1,
                    "check_3": 1,
                    "condition3": 1,
                    "condition_3": 1,
                    "current_byte_2": 1,
                    "is_byte_2": 1,
                    "is_byte_equal": 1,
                    "is_byte_zero_16": 1,
                    "is_byte_zero_mid_high": 1,
                    "is_byte_zero_shifted_16": 1,
                    "is_char_zero_mid": 1,
                    "is_character_shifted_16": 1,
                    "is_current_byte_shifted_right_16_bits_zero": 1,
                    "is_mid_high_byte_zero": 1,
                    "is_null_16": 1,
                    "is_zero_16": 1,
                    "is_zero_higher": 1,
                    "mask_3": 2,
                    "mask_byte_3": 1,
                    "msb_3": 1,
                    "result_16": 1,
                    "temp_char3": 1
                },
                "cVar5": {
                    "bit24": 2,
                    "bit_24": 1,
                    "bit_4": 1,
                    "byte3": 2,
                    "char_var_4": 1,
                    "check4": 1,
                    "check_4": 1,
                    "condition4": 1,
                    "condition_4": 1,
                    "current_byte_3": 1,
                    "is_byte_3": 1,
                    "is_byte_equal": 1,
                    "is_byte_zero_24": 1,
                    "is_byte_zero_high": 1,
                    "is_byte_zero_shifted_24": 1,
                    "is_char_zero_low": 1,
                    "is_character_shifted_24": 1,
                    "is_current_byte_shifted_right_24_bits_zero": 1,
                    "is_mid_low_byte_zero": 1,
                    "is_null_24": 1,
                    "is_zero_24": 1,
                    "is_zero_highest": 1,
                    "mask_4": 2,
                    "mask_byte_4": 1,
                    "msb_4": 1,
                    "result_24": 1,
                    "temp_char4": 1
                },
                "param_1": {
                    "array": 2,
                    "buffer": 3,
                    "data": 17,
                    "data_ptr": 2,
                    "input_array": 2,
                    "input_data": 5
                },
                "param_2": {
                    "byte": 1,
                    "byte_sequence": 1,
                    "byte_to_find": 7,
                    "byte_value": 2,
                    "pattern": 1,
                    "pattern_byte": 1,
                    "search_byte": 2,
                    "search_value": 1,
                    "target": 4,
                    "target_byte": 8,
                    "target_character": 1,
                    "target_value": 2
                },
                "param_3": {
                    "array_length": 3,
                    "array_size": 1,
                    "buffer_size": 1,
                    "data_length": 4,
                    "data_size": 1,
                    "input_length": 4,
                    "len": 1,
                    "length": 13,
                    "size": 3
                },
                "pbVar6": {
                    "current_byte": 1,
                    "current_ptr": 1,
                    "next_byte": 12,
                    "next_byte_pointer": 1,
                    "next_byte_ptr": 2,
                    "next_character_ptr": 1,
                    "result": 10,
                    "result_pointer": 1,
                    "result_ptr": 2
                },
                "pbVar8": {
                    "byte_ptr": 1,
                    "final_ptr": 1,
                    "found_pattern": 1,
                    "next_byte": 1,
                    "next_ptr": 3,
                    "next_result": 1,
                    "offset": 1,
                    "result": 8,
                    "result_0": 1,
                    "result_byte": 2,
                    "result_byte_pointer": 1,
                    "result_end": 1,
                    "result_ptr": 5,
                    "result_ptr_temp": 1,
                    "return_ptr": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1
                },
                "puVar7": {
                    "array_ptr": 1,
                    "buffer_ptr": 2,
                    "current_data": 1,
                    "current_data_pointer": 1,
                    "current_pointer": 1,
                    "current_ptr": 8,
                    "current_uint": 2,
                    "current_uint_ptr": 2,
                    "current_word": 3,
                    "data_ptr": 1,
                    "input_ptr": 1,
                    "next_data": 1,
                    "next_int": 1,
                    "next_uint": 2,
                    "ptr": 4
                },
                "uVar10": {
                    "aligned_input_length": 1,
                    "aligned_len": 1,
                    "aligned_length": 8,
                    "aligned_size": 2,
                    "len_aligned": 1,
                    "length_aligned": 3,
                    "length_mod_8": 1,
                    "length_multiple_of_8": 1,
                    "length_remainder": 1,
                    "length_rounded_down": 1,
                    "length_without_alignment": 1,
                    "loop_count": 1,
                    "main_loop_length": 1,
                    "modified_length": 1,
                    "remaining_buffer_size": 1,
                    "remaining_length": 3,
                    "remaining_size": 1,
                    "size_aligned": 1,
                    "size_modulus": 1
                },
                "uVar11": {
                    "byte_diff": 1,
                    "byte_xor_result": 1,
                    "current_data": 1,
                    "data_xor": 1,
                    "masked_byte": 1,
                    "masked_data_1": 1,
                    "modified_data1": 1,
                    "result_temp": 1,
                    "result_val": 1,
                    "temp1": 1,
                    "temp_1": 2,
                    "word0": 1,
                    "xor_1_result": 1,
                    "xor_result": 7,
                    "xor_result1": 4,
                    "xor_result_0": 1,
                    "xor_result_1": 5
                },
                "uVar12": {
                    "below_threshold": 1,
                    "data_xor_2": 1,
                    "masked_byte_shifted": 1,
                    "masked_data_2": 1,
                    "modified_data2": 1,
                    "other_data": 1,
                    "result_val": 1,
                    "shifted_xor_result": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_2": 2,
                    "temp_result": 1,
                    "word1": 1,
                    "word_diff": 1,
                    "word_xor_result": 1,
                    "xor_2_result": 1,
                    "xor_result2": 5,
                    "xor_result_0": 1,
                    "xor_result_2": 5,
                    "xor_result_8": 1,
                    "xor_result_next_uint": 1,
                    "xor_result_with_input": 1
                },
                "uVar13": {
                    "byte_result": 1,
                    "is_byte_nonzero": 1,
                    "tmp1": 1
                },
                "uVar14": {
                    "is_byte_nonzero_8": 1,
                    "tmp2": 1,
                    "word_result": 1
                },
                "uVar15": {
                    "apply_shift": 1,
                    "is_byte_nonzero_16": 1,
                    "tmp3": 1
                },
                "uVar16": {
                    "is_byte_nonzero_24": 1,
                    "shifted_byte": 1,
                    "tmp4": 1
                },
                "uVar9": {
                    "aligned_byte_index": 1,
                    "alignment": 2,
                    "alignment_offset": 2,
                    "array_offset": 1,
                    "buffer_alignment": 1,
                    "buffer_offset": 1,
                    "buffer_remainder": 1,
                    "byte_alignment": 1,
                    "byte_offset": 1,
                    "bytes_remaining": 1,
                    "current_data_alignment": 1,
                    "data_offset": 1,
                    "mem_alignment": 1,
                    "num_bytes": 1,
                    "offset": 4,
                    "ptr_alignment": 2,
                    "ptr_modulo": 1,
                    "ptr_modulus": 1,
                    "ptr_offset": 2,
                    "remainder": 2,
                    "remaining_bytes": 1,
                    "remaining_offset": 1,
                    "unaligned_count": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000057f8",
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "code": "\nbyte * find_byte_sequence_00006010(uint *data,uint target_byte,uint length)\n\n{\n  byte current_byte;\n  char is_byte_zero;\n  char bit8;\n  char bit16;\n  char bit24;\n  byte *next_byte;\n  uint *current_ptr;\n  byte *result;\n  uint offset;\n  uint aligned_length;\n  uint xor_result;\n  uint xor_result2;\n  bool bool0;\n  bool xor_2_not_zero;\n  bool char_bool_3;\n  bool condition8;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      current_ptr = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      length = length - 1;\n      data = current_ptr;\n    } while (current_byte != target_byte);\n  }\n  else {\n    offset = (uint)data & 7;\n    while( true ) {\n      if (offset == 0) {\n        offset = target_byte | target_byte << 8;\n        offset = offset | offset << 0x10;\n        aligned_length = length & 0xfffffff8;\n        do {\n          current_ptr = data + 2;\n          aligned_length = aligned_length - 8;\n          xor_result = *data ^ offset;\n          xor_result2 = data[1] ^ offset;\n          is_byte_zero = -((char)xor_result == '\\0');\n          bit8 = -((char)(xor_result >> 8) == '\\0');\n          bit16 = -((char)(xor_result >> 0x10) == '\\0');\n          bit24 = -((char)(xor_result >> 0x18) == '\\0');\n          xor_result = CONCAT13(bit24,CONCAT12(bit16,CONCAT11(bit8,is_byte_zero)));\n          bool0 = (char)xor_result2 != '\\0';\n          xor_2_not_zero = (char)(xor_result2 >> 8) != '\\0';\n          char_bool_3 = (char)(xor_result2 >> 0x10) != '\\0';\n          condition8 = (char)(xor_result2 >> 0x18) != '\\0';\n          xor_result2 = CONCAT13(condition8 * bit24 - !condition8,\n                            CONCAT12(char_bool_3 * bit16 - !char_bool_3,\n                                     CONCAT11(xor_2_not_zero * bit8 - !xor_2_not_zero,bool0 * is_byte_zero - !bool0)));\n          if (xor_result2 != 0) {\n            if (xor_result == 0) {\n              result = (byte *)((int)data + 5);\n              xor_result = xor_result2;\n            }\n            else {\n              result = (byte *)((int)data + 1);\n            }\n            if ((xor_result & 1) == 0) {\n              bool0 = (xor_result & 0x100) == 0;\n              next_byte = result + 1;\n              if (bool0) {\n                bool0 = (xor_result & 0x18000) == 0;\n                next_byte = result + 2;\n              }\n              result = next_byte;\n              if (bool0) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          data = current_ptr;\n        } while (aligned_length != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      current_ptr = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == target_byte) break;\n      offset = (uint)current_ptr & 7;\n      data = current_ptr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_ptr + -1);\n}\n\n",
            "current_name": "find_byte_sequence_00006010",
            "entrypoint": "0x00006010",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "bVar1": "current_byte",
                "bVar13": "bool0",
                "bVar14": "xor_2_not_zero",
                "bVar15": "char_bool_3",
                "bVar16": "condition8",
                "cVar2": "is_byte_zero",
                "cVar3": "bit8",
                "cVar4": "bit16",
                "cVar5": "bit24",
                "param_1": "data",
                "param_2": "target_byte",
                "param_3": "length",
                "pbVar6": "next_byte",
                "pbVar8": "result",
                "puVar7": "current_ptr",
                "uVar10": "aligned_length",
                "uVar11": "xor_result",
                "uVar12": "xor_result2",
                "uVar9": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000060b0": {
            "additional_data": {
                "CODE": {
                    "i": 1
                },
                "FUN_000060b0": {
                    "copy_and_increment": 2,
                    "copy_and_shift": 3,
                    "copy_array": 14,
                    "copy_bytes": 2,
                    "copy_data": 6,
                    "copy_data_to_destination": 2,
                    "copy_memory": 1,
                    "copy_to_new_memory": 1
                },
                "param_1": {
                    "array_destination": 2,
                    "dest": 2,
                    "dest_addr": 1,
                    "dest_address": 2,
                    "dest_array": 2,
                    "dest_index": 4,
                    "dest_offset": 5,
                    "destination": 5,
                    "destination_address": 1,
                    "destination_array_size": 1,
                    "destination_index": 1,
                    "destination_start_index": 1,
                    "dst_index": 1,
                    "new_memory_address": 1,
                    "output_index": 1
                },
                "param_2": {
                    "array_source": 2,
                    "input_array": 1,
                    "source": 7,
                    "source_address": 2,
                    "source_array": 5,
                    "source_data": 1,
                    "source_memory": 1,
                    "source_start": 1,
                    "src": 3,
                    "src_addr": 1,
                    "src_address": 1,
                    "src_array": 3,
                    "src_bytes": 1,
                    "src_data": 1
                },
                "param_3": {
                    "array_length": 4,
                    "array_size": 2,
                    "count": 1,
                    "data_length": 1,
                    "data_size": 3,
                    "length": 10,
                    "num_bytes": 3,
                    "size": 5,
                    "source_array_size": 1,
                    "src_length": 1
                },
                "puVar1": {
                    "source_current": 1,
                    "source_index": 1,
                    "source_iterator": 1,
                    "source_offset": 1,
                    "source_pointer": 1,
                    "source_ptr": 9,
                    "src_index": 1,
                    "src_offset": 1,
                    "src_pointer": 1,
                    "src_ptr": 7
                },
                "puVar2": {
                    "end_index": 1,
                    "end_of_source_pointer": 1,
                    "end_ptr": 11,
                    "last_source_ptr": 1,
                    "source_end": 4,
                    "source_end_ptr": 1,
                    "src_end": 4,
                    "src_ptr_end": 1
                },
                "puVar3": {
                    "dest_end": 1,
                    "dest_pointer": 1,
                    "dest_ptr": 16,
                    "destination_array": 1,
                    "destination_current": 1,
                    "destination_iterator": 1,
                    "destination_pointer": 1,
                    "destination_ptr": 1,
                    "dst_ptr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000060cc",
                "FUN_000068f0"
            ],
            "code": "\nvoid copy_array_000060b0(int destination,undefined *source,int length)\n\n{\n  undefined *source_ptr;\n  undefined *end_ptr;\n  undefined *dest_ptr;\n  \n  end_ptr = source + length;\n  dest_ptr = (undefined *)(destination + -1);\n  if (source != end_ptr) {\n    do {\n      source_ptr = source + 1;\n      dest_ptr = dest_ptr + 1;\n      *dest_ptr = *source;\n      source = source_ptr;\n    } while (source_ptr != end_ptr);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "copy_array_000060b0",
            "entrypoint": "0x000060b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "source_ptr",
                "puVar2": "end_ptr",
                "puVar3": "dest_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000060cc": {
            "additional_data": {
                "FUN_000060cc": {
                    "allocate_and_copy_array": 10,
                    "allocate_and_initialize_memory": 16,
                    "allocate_and_initialize_memory_block": 2,
                    "allocate_mem_and_copy_array": 1,
                    "allocate_memory_and_initialize": 1,
                    "initialize_or_allocate_memory": 1
                },
                "allocate_and_initialize_memory_block_00004bd0": {
                    "allocate_and_initialize_block": 1,
                    "allocate_and_initialize_memory_block": 12
                },
                "calculate_sum_or_offset_00006964": {
                    "calculate_sum_or_offset": 13
                },
                "copy_array_000060b0": {
                    "copy_array": 13
                },
                "iVar1": {
                    "allocated_memory": 1,
                    "allocation_result": 1,
                    "result": 22,
                    "return_value": 1
                },
                "initialize_data_structure_00004b34": {
                    "initialize_data_structure": 13
                },
                "param_1": {
                    "arg1": 7,
                    "arg_1": 1,
                    "argument1": 1,
                    "argument_1": 1,
                    "context": 1,
                    "data_structure": 1,
                    "input1": 2,
                    "input_flag": 1,
                    "input_param": 2,
                    "input_value_1": 1,
                    "memory_block_pointer": 1,
                    "param": 3,
                    "param1": 6,
                    "source": 1,
                    "source_address": 1,
                    "type": 1
                },
                "param_2": {
                    "arg2": 3,
                    "array": 1,
                    "data_array": 1,
                    "input_value_2": 1,
                    "length": 1,
                    "num_elements": 1,
                    "size": 11,
                    "size_allocation": 1,
                    "size_initial_array": 1,
                    "size_of_array": 1,
                    "size_src_array": 1,
                    "source_array": 5,
                    "source_array_pointer": 1,
                    "source_size": 2
                },
                "param_3": {
                    "arg3": 3,
                    "array_length": 3,
                    "array_size": 3,
                    "count": 2,
                    "destination_size": 2,
                    "input_value_3": 1,
                    "length": 1,
                    "limit": 6,
                    "size": 3,
                    "size_dest_array": 1,
                    "target_size": 2,
                    "target_value": 1,
                    "threshold": 1,
                    "total_size": 2
                },
                "param_4": {
                    "additional_param": 2,
                    "arg4": 7,
                    "arg_4": 1,
                    "argument2": 1,
                    "argument_4": 1,
                    "input2": 1,
                    "input4": 1,
                    "input_value_4": 1,
                    "offset": 4,
                    "offset_param": 1,
                    "offset_value": 1,
                    "param4": 8,
                    "param_4": 1,
                    "unknown_parameter": 1
                },
                "uVar2": {
                    "calculated_value": 1,
                    "sum": 1,
                    "sum_offset": 8,
                    "sum_or_offset": 19
                }
            },
            "called": [
                "FUN_00006964",
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "calling": [
                "FUN_000068f0"
            ],
            "code": "\nint allocate_and_initialize_memory_block_000060cc(undefined4 arg1,int size,uint limit,undefined4 param4)\n\n{\n  int result;\n  uint sum_or_offset;\n  \n  if (size != 0) {\n    if (limit == 0) {\n      initialize_data_structure();\n      result = 0;\n    }\n    else {\n      sum_or_offset = calculate_sum_or_offset();\n      result = size;\n      if ((sum_or_offset < limit) && (result = allocate_and_initialize_memory_block_000060cc(arg1,limit), result != 0)) {\n        copy_array(result,size,limit);\n        initialize_data_structure(arg1,size);\n      }\n    }\n    return result;\n  }\n  result = allocate_and_initialize_memory_block_000060cc(arg1,limit,limit,param4);\n  return result;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_block_000060cc",
            "entrypoint": "0x000060cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000060cc": "allocate_and_initialize_memory_block_000060cc",
                "allocate_and_initialize_memory_block_00004bd0": "allocate_and_initialize_memory_block",
                "calculate_sum_or_offset_00006964": "calculate_sum_or_offset",
                "copy_array_000060b0": "copy_array",
                "iVar1": "result",
                "initialize_data_structure_00004b34": "initialize_data_structure",
                "param_1": "arg1",
                "param_2": "size",
                "param_3": "limit",
                "param_4": "param4",
                "uVar2": "sum_or_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006192": {
            "additional_data": {
                "FUN_00006192": {
                    "initialize_and_copy_data": 1,
                    "initialize_and_get_value": 1,
                    "initialize_and_return_value": 1,
                    "initialize_data": 1,
                    "initialize_data_structure": 23,
                    "initialize_structure": 1,
                    "update_data_structure": 3
                },
                "initialize_data_structure_00004b34": {
                    "initialize_data_structure": 3
                },
                "param_1": {
                    "arg": 1,
                    "arg1": 4,
                    "code_param": 1,
                    "function_parameter1": 1,
                    "handle": 1,
                    "input1": 1,
                    "input_flag": 1,
                    "input_param": 2,
                    "instance": 1,
                    "param": 3,
                    "param_1": 1,
                    "result": 1,
                    "status": 11,
                    "unused_param": 1,
                    "value": 1
                },
                "param_2": {
                    "arg2": 4,
                    "array": 1,
                    "data": 3,
                    "data_array": 8,
                    "data_struct": 1,
                    "data_structure": 3,
                    "function_data": 1,
                    "function_parameter2": 1,
                    "function_params": 1,
                    "input2": 1,
                    "input_array": 1,
                    "parameters": 3,
                    "params": 2,
                    "ptr_array": 1
                },
                "ptrCondition": {
                    "condition": 1
                },
                "ushort_ptr": {
                    "ushort_value": 1
                }
            },
            "called": [
                "FUN_00004b34"
            ],
            "calling": [
                "FUN_000061cc"
            ],
            "code": "\nundefined4 initialize_data_structure_00006192(undefined4 status,undefined4 *data_array)\n\n{\n  if ((undefined4 *)data_array[0xd] != (undefined4 *)0x0) {\n    if ((undefined4 *)data_array[0xd] != data_array + 0x11) {\n      initialize_data_structure_00006192();\n    }\n    data_array[1] = data_array[0x10];\n    data_array[0xd] = 0;\n    if (data_array[0x10] != 0) {\n      *data_array = data_array[0xf];\n      return 0;\n    }\n  }\n  *data_array = data_array[4];\n  data_array[1] = 0;\n  *(ushort *)(data_array + 3) = *(ushort *)(data_array + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "current_name": "initialize_data_structure_00006192",
            "entrypoint": "0x00006192",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00006192": "initialize_data_structure_00006192",
                "initialize_data_structure_00004b34": "initialize_data_structure",
                "param_1": "status",
                "param_2": "data_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000061cc": {
            "additional_data": {
                "DAT_00007a99": {
                    "data_array1": 1
                },
                "DAT_00007c02": {
                    "data_array2": 1
                },
                "FUN_000061cc": {
                    "decode_and_process_data": 1,
                    "parse_input": 1,
                    "process_binary_data": 14,
                    "process_binary_function": 1,
                    "process_byte_sequence": 1,
                    "process_data": 13
                },
                "LAB_00006118_1": {
                    "label1": 1,
                    "start_of_loop_label": 1
                },
                "auStack_2ac": {
                    "buffer": 2,
                    "byte_stack": 1,
                    "data": 1,
                    "data_stack": 2,
                    "local_array": 1,
                    "local_stack": 1,
                    "stack_array": 8,
                    "stack_buffer": 4,
                    "stack_data": 1,
                    "stack_variable": 1,
                    "temp_stack": 1,
                    "temporary_stack": 1,
                    "variable_buffer": 1
                },
                "extract_data_from_binary_0000687c": {
                    "extract_data_from_binary": 1,
                    "extract_data_from_binary_function": 1
                },
                "extract_data_from_binary_and_process_0000656c": {
                    "extract_data_and_process_function": 1,
                    "extract_data_from_binary_and_process": 1
                },
                "find_byte_sequence_00006010": {
                    "find_byte_sequence": 1,
                    "find_byte_sequence_function": 1
                },
                "iVar1": {
                    "result": 18,
                    "return_value": 5,
                    "temp_var1": 2
                },
                "initialize_data_structure_00006192": {
                    "initialize_data_structure": 1,
                    "initialize_data_structure_function": 1
                },
                "local_194": {
                    "action": 2,
                    "action_flag": 1,
                    "case_type": 1,
                    "condition3": 1,
                    "data_flag": 3,
                    "data_processing_flag": 1,
                    "data_processing_option": 1,
                    "data_processing_type": 1,
                    "data_size": 2,
                    "data_type": 9,
                    "local_var5": 1,
                    "operation_type": 2,
                    "parse_type": 1,
                    "size": 1,
                    "state": 1,
                    "temp_flag2": 1,
                    "temp_var7": 1,
                    "value": 1
                },
                "local_198": {
                    "local_array": 5,
                    "local_array_pointer": 1,
                    "local_buffer": 6,
                    "local_data": 1,
                    "local_ptr2": 1,
                    "local_var1": 1,
                    "local_var4": 1,
                    "ptr": 1,
                    "ptr_stack": 1,
                    "ptr_temp": 1,
                    "stack_buf": 1,
                    "stack_buffer": 4,
                    "stack_buffer_ptr": 1,
                    "stack_ptr": 1,
                    "temp_buffer": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_stack": 1,
                    "temp_var6": 1
                },
                "local_19c": {
                    "byte_counter": 1,
                    "count": 3,
                    "counter": 14,
                    "counter2": 1,
                    "index": 1,
                    "loop_count": 3,
                    "num_valid_bytes": 1,
                    "pattern_count": 1,
                    "processed_count": 1,
                    "temp_count": 3,
                    "temp_value": 1,
                    "temp_var5": 1
                },
                "local_1a0": {
                    "count": 6,
                    "counter": 1,
                    "local_processed_count": 1,
                    "num_processed": 1,
                    "result": 7,
                    "result_value": 1,
                    "return_value": 12,
                    "total_count": 2
                },
                "local_1a4": {
                    "bit_mask": 1,
                    "byte_mask": 1,
                    "condition2": 1,
                    "data_flag": 1,
                    "flag2": 6,
                    "flag3": 4,
                    "flag_check": 1,
                    "flag_value": 1,
                    "found_flag": 1,
                    "local_flag": 1,
                    "local_var3": 2,
                    "mask": 1,
                    "temp_byte_flag": 1,
                    "temp_flag": 4,
                    "temp_flag1": 1,
                    "temp_flags": 2,
                    "u_var1": 1,
                    "value_flag": 1
                },
                "local_1a8": {
                    "base_number": 1,
                    "byte_value": 1,
                    "conversion_base": 1,
                    "count": 2,
                    "data_type": 2,
                    "flag2": 8,
                    "length": 2,
                    "local_value": 1,
                    "local_var2": 2,
                    "size": 1,
                    "temp_value": 2,
                    "value": 2,
                    "value1": 1,
                    "value_prefix": 1
                },
                "local_1ac": {
                    "bit_flags": 1,
                    "byte_flag": 1,
                    "byte_flag2": 1,
                    "byte_flags": 1,
                    "combined_flag": 1,
                    "condition1": 1,
                    "data_flags": 1,
                    "data_type_flag": 1,
                    "flag": 2,
                    "flag1": 14,
                    "flag_value_copy": 1,
                    "flags": 4,
                    "local_var1": 2
                },
                "local_2b0": {
                    "local_param4": 6,
                    "local_ptr": 2,
                    "local_result": 1,
                    "output_data": 4,
                    "output_data_ptr": 2,
                    "output_list": 2,
                    "output_ptr": 2,
                    "param4_ptr": 1,
                    "pointer_array": 1,
                    "ptr_array": 1,
                    "ptrs": 1,
                    "result_array": 5,
                    "result_array_ptr": 1,
                    "result_list": 1,
                    "results": 1
                },
                "local_2c": {
                    "data_structure_init_func": 1,
                    "data_structure_initializer": 1,
                    "data_structure_pointer": 3,
                    "data_structure_ptr": 4,
                    "func2": 1,
                    "init_data_structure_ptr": 1,
                    "init_func_ptr": 2,
                    "initialize_data_func_ptr": 1,
                    "initialize_data_structure": 3,
                    "initialize_data_structure_function": 1,
                    "initialize_function_pointer": 2,
                    "initialize_structure": 1,
                    "local_data_structure_ptr": 1,
                    "local_func2": 2,
                    "local_func_ptr2": 1,
                    "local_function2": 1,
                    "local_function_2": 1,
                    "local_initialize_pointer": 1,
                    "local_var7": 1,
                    "temp_var9": 1,
                    "var2": 1
                },
                "local_30": {
                    "func1": 1,
                    "func_ptr": 2,
                    "function_pointer": 8,
                    "function_ptr": 4,
                    "function_to_execute": 1,
                    "local_func": 1,
                    "local_func1": 2,
                    "local_func_ptr": 3,
                    "local_function": 1,
                    "local_function1": 1,
                    "local_function_1": 1,
                    "local_function_pointer": 1,
                    "local_function_ptr": 1,
                    "local_jump_label": 1,
                    "local_var6": 1,
                    "temp_var8": 1,
                    "var1": 1
                },
                "local_58": {
                    "index_limit": 1
                },
                "local_5c": {
                    "index": 1
                },
                "param_1": {
                    "arg1": 4,
                    "param": 1,
                    "param1": 23,
                    "param_1": 2,
                    "var1": 1
                },
                "param_2": {
                    "arg2": 4,
                    "data": 1,
                    "data_ptr": 2,
                    "input_data": 1,
                    "param2": 22,
                    "var2": 1
                },
                "param_3": {
                    "arg3": 4,
                    "byte_ptr": 1,
                    "byte_sequence": 1,
                    "param3": 22,
                    "pattern_ptr": 1,
                    "ptr": 1,
                    "var3": 1
                },
                "param_4": {
                    "arg4": 4,
                    "output_data": 1,
                    "output_ptr": 1,
                    "param4": 22,
                    "result": 1,
                    "result_ptr": 1,
                    "var4": 1
                },
                "pbVar3": {
                    "byte_pointer": 2,
                    "next_byte": 14,
                    "next_byte_ptr": 2,
                    "next_char": 1,
                    "ptr": 3,
                    "ptr2": 1,
                    "temp_var2": 1,
                    "temp_var3": 2
                },
                "reverse_and_process_data_000064bc": {
                    "reverse_and_process_data": 1
                },
                "uVar2": {
                    "byte_value": 6,
                    "ch": 1,
                    "current_byte": 11,
                    "current_char": 1,
                    "flag": 1,
                    "temp": 1,
                    "temp_var1": 1,
                    "temp_var2": 2,
                    "value": 2
                },
                "uVar4": {
                    "byte_flag": 3,
                    "byte_flags": 1,
                    "byte_value": 1,
                    "byte_value2": 1,
                    "condition": 1,
                    "current_byte": 1,
                    "current_byte_check": 1,
                    "current_byte_flag": 2,
                    "current_char_flag": 1,
                    "data": 1,
                    "first_byte": 1,
                    "flag": 3,
                    "temp": 3,
                    "temp2": 1,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "temp_var4": 2
                }
            },
            "called": [
                "FUN_000064bc",
                "FUN_0000687c",
                "FUN_00006010",
                "FUN_0000656c",
                "FUN_00006192"
            ],
            "calling": [
                "FUN_00005e68"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint process_binary_data_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int result;\n  uint current_byte;\n  byte *next_byte;\n  uint flag;\n  int **local_param4;\n  undefined stack_array [256];\n  uint flag1;\n  undefined4 flag2;\n  uint flag2;\n  int return_value;\n  int counter;\n  undefined *local_buffer;\n  int data_type;\n  undefined *function_pointer;\n  code *data_structure_ptr;\n  \n  return_value = 0;\n  counter = 0;\n  function_pointer = &label1;\n  data_structure_ptr = initialize_data_structure + 1;\n  local_param4 = param4;\n  local_buffer = stack_array;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      flag = (uint)*param3;\n      if (flag == 0) {\n        return return_value;\n      }\n      current_byte = (byte)(&DAT_00007a99)[flag] & 8;\n      next_byte = param3 + 1;\n      if (((&DAT_00007a99)[flag] & 8) == 0) break;\n      while (((param3 = next_byte, 0 < (int)param2[1] ||\n              (result = (*data_structure_ptr)(param1,param2), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        counter = counter + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (flag == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (result = (*data_structure_ptr)(param1,param2), result != 0))\n    goto LAB_00006380;\n    if (**param2 != flag) {\n      return return_value;\n    }\n    *param2 = *param2 + 1;\n    counter = counter + 1;\n    param2[1] = param2[1] + -1;\n    param3 = next_byte;\n  }\n  flag2 = current_byte;\n  flag1 = current_byte;\n  if (param3[1] == 0x2a) {\n    next_byte = param3 + 2;\n    flag1 = 0x10;\n  }\n  while( true ) {\n    current_byte = (uint)*next_byte;\n    if (9 < current_byte - 0x30) break;\n    next_byte = next_byte + 1;\n    flag2 = (flag2 * 10 + current_byte) - 0x30;\n  }\n  result = find_byte_sequence_function(&DAT_00007c02,current_byte,3);\n  if (result != 0) {\n    flag1 = 1 << (result - 0x7c02U & 0xff) | flag1;\n    next_byte = next_byte + 1;\n  }\n  param3 = next_byte + 1;\n  current_byte = (uint)*next_byte;\n  if (current_byte < 0x79) {\n    if (0x57 < current_byte) {\n      switch(current_byte) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)extract_data_from_binary(stack_array,param3);\n        flag1 = flag1 | 0x40;\n        data_type = 1;\n        break;\n      case 99:\n        flag1 = flag1 | 0x40;\n        data_type = 0;\n        break;\n      case 100:\n      case 0x75:\n        flag2 = 10;\nLAB_000063a0:\n        if (current_byte < 0x6f) {\n          data_type = 3;\n        }\n        else {\n          data_type = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        data_type = 5;\n        break;\n      case 0x69:\n        flag2 = 0;\n        data_type = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flag1 << 0x1b)) {\n          if ((int)(flag1 << 0x1f) < 0) {\n            *(short *)*local_param4 = (short)counter;\n            local_param4 = local_param4 + 1;\n          }\n          else {\n            **local_param4 = counter;\n            local_param4 = local_param4 + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        flag2 = 8;\n        data_type = 4;\n        break;\n      case 0x70:\n        flag1 = flag1 | 0x20;\n      case 0x58:\n      case 0x78:\n        flag1 = flag1 | 0x200;\n        flag2 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        data_type = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (result = (*data_structure_ptr)(param1,param2), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flag1 << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          counter = counter + 1;\n          next_byte = param2[1];\n          param2[1] = next_byte + -1;\n          if ((int)(next_byte + -1) < 1) {\n            result = (*data_structure_ptr)(param1,param2);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (data_type < 3) {\n        result = reverse_and_process_data(param1,&flag1,param2,&local_param4);\n      }\n      else {\n        if (4 < data_type) goto LAB_000061f6;\n        result = extract_data_and_process_function(param1,&flag1,param2,&local_param4);\n      }\n      if (result == 1) {\n        return return_value;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (return_value == 0) {\nLAB_00006388:\n          return_value = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          return_value = -1;\n        }\n        return return_value;\n      }\n      goto LAB_000061f6;\n    }\n    next_byte = param3;\n    if (current_byte == 0x25) goto LAB_00006352;\n    if (current_byte < 0x26) {\n      if (current_byte != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (current_byte - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  data_type = 3;\n  flag2 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "current_name": "process_binary_data_000061cc",
            "entrypoint": "0x000061cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000061cc": "process_binary_data_000061cc",
                "LAB_00006118_1": "label1",
                "auStack_2ac": "stack_array",
                "extract_data_from_binary_0000687c": "extract_data_from_binary",
                "extract_data_from_binary_and_process_0000656c": "extract_data_and_process_function",
                "find_byte_sequence_00006010": "find_byte_sequence_function",
                "iVar1": "result",
                "initialize_data_structure_00006192": "initialize_data_structure",
                "local_194": "data_type",
                "local_198": "local_buffer",
                "local_19c": "counter",
                "local_1a0": "return_value",
                "local_1a4": "flag2",
                "local_1a8": "flag2",
                "local_1ac": "flag1",
                "local_2b0": "local_param4",
                "local_2c": "data_structure_ptr",
                "local_30": "function_pointer",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pbVar3": "next_byte",
                "reverse_and_process_data_000064bc": "reverse_and_process_data",
                "uVar2": "current_byte",
                "uVar4": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000064bc": {
            "additional_data": {
                "FUN_000064bc": {
                    "decode_and_modify_data": 1,
                    "decode_and_process_data": 1,
                    "process_data": 24,
                    "process_input": 1,
                    "process_input_data": 1,
                    "reverse_and_process_data": 1
                },
                "iVar1": {
                    "callback_result": 1,
                    "func_ret_val": 1,
                    "function_result": 2,
                    "result": 19,
                    "return_value": 3,
                    "retval": 1,
                    "status": 2
                },
                "iVar6": {
                    "count": 5,
                    "counter": 22,
                    "counter2": 1,
                    "iteration_count": 2,
                    "iterations": 1
                },
                "param_1": {
                    "arg1": 1,
                    "initial_value": 1,
                    "input": 8,
                    "input1": 1,
                    "input_data": 1,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_val": 1,
                    "input_value": 6,
                    "input_variable": 1,
                    "param1": 1,
                    "result": 1,
                    "status": 5,
                    "value": 1
                },
                "param_2": {
                    "args": 1,
                    "config": 2,
                    "data": 4,
                    "data_array": 4,
                    "data_info": 2,
                    "flags": 5,
                    "input2": 1,
                    "parameters": 2,
                    "params": 8,
                    "params_array": 1,
                    "values": 1
                },
                "param_3": {
                    "buffer": 5,
                    "byte_array": 3,
                    "byte_array_ptr": 2,
                    "byte_data": 1,
                    "data": 7,
                    "data_pointers": 2,
                    "data_ptr": 8,
                    "data_ptrs": 1,
                    "input3": 1,
                    "input_data": 1
                },
                "param_4": {
                    "counter": 1,
                    "func_ptr": 2,
                    "input4": 1,
                    "output": 1,
                    "output_array": 2,
                    "output_data": 1,
                    "output_param": 2,
                    "output_ptr": 2,
                    "output_vals": 1,
                    "output_value_ptr": 1,
                    "output_values": 1,
                    "ptr": 1,
                    "result": 7,
                    "result_ptr": 3,
                    "state": 1,
                    "status": 4
                },
                "pbVar4": {
                    "buffer_end": 1,
                    "buffer_pointer": 1,
                    "buffer_ptr": 2,
                    "byte_array_ptr_temp": 2,
                    "byte_pointer_1": 1,
                    "byte_ptr": 3,
                    "byte_ptr_1": 1,
                    "byte_ptr_2": 3,
                    "current_byte": 2,
                    "data_ptr": 1,
                    "data_ptr_2": 1,
                    "data_ptr_temp": 1,
                    "next_byte": 1,
                    "next_byte_ptr": 1,
                    "next_data_ptr": 1,
                    "p_data": 1,
                    "pointer_1": 1,
                    "ptr_data": 1,
                    "ptr_data2": 1,
                    "ptr_next_data": 1,
                    "temp_byte_ptr1": 1,
                    "temp_byte_ptr_2": 1,
                    "temp_data_ptr": 1,
                    "tmp_data_ptr": 1
                },
                "pbVar5": {
                    "byte_pointer_3": 1,
                    "byte_ptr_3": 1,
                    "byte_ptr_4": 3,
                    "byte_ptr_temp": 1,
                    "cur_byte": 1,
                    "current_byte": 4,
                    "current_byte_temp": 1,
                    "data_ptr_next": 1,
                    "next_byte": 6,
                    "next_byte_ptr": 2,
                    "p_byte": 1,
                    "pointer_3": 1,
                    "ptr_current": 1,
                    "ptr_data4": 1,
                    "ptr_next_byte": 1,
                    "temp_byte": 2,
                    "temp_byte_ptr": 1,
                    "temp_byte_ptr3": 1,
                    "unaff_r6_temp": 1
                },
                "ppVar3": {
                    "byte_ptr_array": 1
                },
                "ppbVar3": {
                    "buffer_ptr": 1,
                    "byte_array_ptr": 1,
                    "byte_array_ptr_ptr": 2,
                    "byte_ptr": 3,
                    "byte_ptr_ptr": 3,
                    "current_data_pointer": 1,
                    "current_data_ptr": 1,
                    "data_ptr": 1,
                    "data_ptr_ptr": 2,
                    "next_buffer": 1,
                    "next_data": 1,
                    "pointer": 1,
                    "pointer_pointer": 1,
                    "pp_buffer": 1,
                    "pp_data": 2,
                    "ptr_buffer": 1,
                    "ptr_data": 3,
                    "ptr_to_buffer": 1,
                    "ptr_to_data": 1,
                    "temp_byte_ptr": 1,
                    "temp_ptr": 1
                },
                "uVar2": {
                    "flag": 2,
                    "flag_value": 1,
                    "status": 3,
                    "temp": 7,
                    "temp_uint": 1,
                    "temp_value": 6,
                    "temp_var": 2,
                    "tmp": 1,
                    "value": 7,
                    "value_2": 1
                },
                "unaff_r6": {
                    "buffer_ptr": 1,
                    "buffer_ptr_2": 1,
                    "byte_pointer_2": 1,
                    "byte_ptr": 1,
                    "byte_ptr_2": 1,
                    "byte_ptr_3": 3,
                    "current_byte": 7,
                    "current_byte_ptr": 4,
                    "current_data": 1,
                    "current_data_ptr": 2,
                    "current_pointer": 1,
                    "data_ptr": 1,
                    "p_temp": 1,
                    "pointer_2": 1,
                    "ptr_current_data": 1,
                    "ptr_data3": 1,
                    "ptr_unaff": 1,
                    "temp_byte_ptr2": 1,
                    "temp_data_ptr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000061cc"
            ],
            "code": "\nundefined4 reverse_and_process_data_000064bc(undefined4 input,uint *params,byte **data_ptr,undefined4 *result)\n\n{\n  int result;\n  uint temp;\n  byte **byte_ptr;\n  byte *byte_ptr;\n  byte *current_byte;\n  byte *next_byte;\n  int counter;\n  \n  if (params[2] == 0) {\n    if (params[6] == 0) {\n      temp = 1;\n    }\n    else {\n      temp = 0xffffffff;\n    }\n    params[2] = temp;\n  }\n  if (-1 < (int)(*params << 0x1b)) {\n    byte_ptr = (byte **)*result;\n    *result = byte_ptr + 1;\n    current_byte = *byte_ptr;\n  }\n  counter = 0;\n  do {\n    temp = params[6];\n    if (temp != 0) {\n      if (temp == 1) {\n        if (*(char *)(params[5] + (uint)**data_ptr) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*params & 0x10) == 0) && (params[3] = params[3] + 1, params[6] != 0)) {\n            *current_byte = 0;\n          }\n          params[4] = counter + params[4];\n          return 0;\n        }\n      }\n      else if ((temp != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**data_ptr] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    next_byte = current_byte;\n    if (-1 < (int)(*params << 0x1b)) {\n      next_byte = current_byte + 1;\n      *current_byte = **data_ptr;\n    }\n    byte_ptr = data_ptr[1];\n    *data_ptr = *data_ptr + 1;\n    temp = params[2] - 1;\n    data_ptr[1] = byte_ptr + -1;\n    counter = counter + 1;\n    params[2] = temp;\n    current_byte = next_byte;\n    if ((temp == 0) ||\n       (((int)(byte_ptr + -1) < 1 &&\n        (result = (*(code *)params[0x60])(input,data_ptr,temp,(code *)params[0x60],result),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "current_name": "reverse_and_process_data_000064bc",
            "entrypoint": "0x000064bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000064bc": "reverse_and_process_data_000064bc",
                "iVar1": "result",
                "iVar6": "counter",
                "param_1": "input",
                "param_2": "params",
                "param_3": "data_ptr",
                "param_4": "result",
                "pbVar4": "byte_ptr",
                "pbVar5": "next_byte",
                "ppbVar3": "byte_ptr",
                "uVar2": "temp",
                "unaff_r6": "current_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000656c": {
            "additional_data": {
                "FUN_0000656c": {
                    "analyze_binary": 1,
                    "decode_binary_data": 1,
                    "extract_and_modify_data": 2,
                    "extract_and_parse_data": 1,
                    "extract_and_process_data": 3,
                    "extract_data": 1,
                    "extract_data_from_binary": 1,
                    "extract_data_from_binary_and_process": 1,
                    "improve_and_extract_data": 1,
                    "process_binary_data": 6,
                    "process_binary_function": 1,
                    "reverse_and_extract_data": 1
                },
                "extract_data_from_binary_0000687c": {
                    "extract_data_from_binary": 1
                },
                "find_byte_sequence_00006010": {
                    "find_byte_sequence": 1
                },
                "iVar1": {
                    "byte_sequence_index": 1,
                    "byte_sequence_match": 1,
                    "byte_sequence_result": 1,
                    "index": 4,
                    "int_var": 1,
                    "iteration": 1,
                    "result": 8,
                    "result_2": 1,
                    "result_variable": 1,
                    "search_result": 2,
                    "sequence_found": 7,
                    "sequence_index": 2,
                    "sequence_match": 1
                },
                "iVar11": {
                    "counter": 3,
                    "index": 7,
                    "index2": 1,
                    "loop_counter": 6,
                    "loop_counter_2": 1,
                    "loop_index": 8,
                    "loop_var": 1,
                    "loop_variable": 1,
                    "temp_counter": 1,
                    "temp_var5": 1,
                    "var2": 1
                },
                "local_34": {
                    "byte_sequence": 1,
                    "byte_sequence_array": 3,
                    "byte_sequences": 2,
                    "code_pattern_array": 1,
                    "const_str": 1,
                    "constant_array": 1,
                    "constant_data_array": 1,
                    "constants": 2,
                    "constants_array": 1,
                    "data_sequence": 1,
                    "known_sequences": 1,
                    "local_array": 1,
                    "local_strings": 1,
                    "pattern_array": 1,
                    "search_patterns": 1,
                    "search_sequence_arr": 1,
                    "sequence_array": 5,
                    "sequence_list": 1,
                    "sequence_ptr_array": 1,
                    "string_array": 3,
                    "string_constants": 1
                },
                "param_1": {
                    "arg1": 3,
                    "input": 9,
                    "input1": 1,
                    "input_data": 2,
                    "input_param": 8,
                    "input_parameter": 1,
                    "input_value": 4,
                    "param1": 2,
                    "result": 1
                },
                "param_2": {
                    "arg2": 2,
                    "array_param": 1,
                    "config": 4,
                    "config_array": 2,
                    "config_params": 1,
                    "config_values": 1,
                    "data": 2,
                    "data_array": 2,
                    "flags": 3,
                    "input2": 1,
                    "input_array": 3,
                    "output_params": 1,
                    "param2": 2,
                    "parameters": 3,
                    "params": 2,
                    "settings": 1
                },
                "param_3": {
                    "arg3": 2,
                    "buffer": 2,
                    "buffer_ptr": 1,
                    "byte_array": 3,
                    "byte_array_ptr": 1,
                    "byte_data": 1,
                    "byte_pointer_array": 1,
                    "byte_sequence": 1,
                    "data": 7,
                    "data_buffer": 1,
                    "data_pointer": 2,
                    "data_pointers": 1,
                    "data_ptr": 2,
                    "data_ptrs": 1,
                    "input3": 1,
                    "input_ptr_array": 1,
                    "param3": 2,
                    "pointer_array_param": 1
                },
                "param_4": {
                    "arg4": 2,
                    "input4": 1,
                    "output": 8,
                    "output_array_ptr": 1,
                    "output_data": 1,
                    "output_param": 4,
                    "output_pointer": 3,
                    "output_ptr": 4,
                    "output_value": 1,
                    "param4": 2,
                    "result": 3,
                    "result_ptr": 1
                },
                "pbVar5": {
                    "byte_data": 1,
                    "byte_pointer": 5,
                    "byte_ptr": 12,
                    "byte_value": 1,
                    "current_byte": 2,
                    "data_byte": 1,
                    "data_ptr": 1,
                    "temp2": 3,
                    "temp_byte": 2,
                    "temp_data_ptr": 1,
                    "temp_var2": 1,
                    "temp_variable_2": 1
                },
                "pcVar3": {
                    "byte_sequence_check": 1,
                    "byte_sequence_comparison": 1,
                    "byte_sequence_fn": 1,
                    "byte_sequence_match_func": 1,
                    "callback_func": 1,
                    "check_function": 1,
                    "code_function": 1,
                    "conversion_func": 1,
                    "conversion_function": 1,
                    "data_function": 1,
                    "data_processing_func": 1,
                    "data_processing_function": 1,
                    "find_function": 1,
                    "func_pointer": 1,
                    "function_pointer": 5,
                    "function_ptr": 4,
                    "match_function": 1,
                    "process_data_function": 1,
                    "select_function": 1,
                    "sequence_check": 1,
                    "sequence_check_func": 1,
                    "sequence_checker": 1,
                    "sequence_finder": 1,
                    "string_check": 1
                },
                "puVar10": {
                    "array_ptr": 1,
                    "byte_array_ptr_2": 1,
                    "config_params_ptr": 1,
                    "config_pointer": 1,
                    "config_ptr": 1,
                    "config_start_ptr": 1,
                    "config_values_temp": 1,
                    "data_ptr": 1,
                    "input_iter": 1,
                    "input_pointer": 1,
                    "offset_pointer": 1,
                    "output_var4": 1,
                    "pointer_array": 1,
                    "ptr_config": 1,
                    "ptr_flags": 1,
                    "ptr_var4": 1,
                    "settings_ptr": 1,
                    "start_pointer": 1,
                    "start_ptr": 2,
                    "temp6": 1,
                    "temp7": 2,
                    "temp_array_pointer_2": 1,
                    "temp_pointer_3": 1,
                    "temp_ptr3": 4,
                    "temp_variable_7": 1,
                    "var4": 1
                },
                "puVar7": {
                    "output_array_pointer": 1,
                    "output_pointer": 1,
                    "output_pointer_value": 1,
                    "output_position": 1,
                    "output_ptr": 8,
                    "output_ptr_2": 1,
                    "output_ptr_array": 1,
                    "output_ptr_index_ptr": 1,
                    "output_var1": 1,
                    "pointer_var": 1,
                    "ptr_output": 1,
                    "ptr_result": 1,
                    "ptr_var": 1,
                    "result_pointer": 1,
                    "result_ptr": 5,
                    "result_ptr_temp": 1,
                    "temp4": 2,
                    "temp_var_ptr": 1,
                    "temp_variable_4": 1
                },
                "puVar8": {
                    "buffer_ptr": 1,
                    "byte_array_ptr": 1,
                    "current_ptr": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_ptr2": 1,
                    "data_ptr_temp": 1,
                    "output_end": 1,
                    "output_pointer_temp": 1,
                    "output_var2": 1,
                    "ptr": 1,
                    "ptr_data": 1,
                    "ptr_var2": 1,
                    "temp4": 1,
                    "temp5": 2,
                    "temp_array_pointer": 1,
                    "temp_pointer": 2,
                    "temp_pointer_1": 1,
                    "temp_ptr": 7,
                    "temp_ptr1": 2,
                    "temp_variable_5": 1,
                    "var2": 1
                },
                "puVar9": {
                    "byte_array_end": 1,
                    "byte_ptr": 1,
                    "current_ptr": 1,
                    "data_ptr_temp2": 1,
                    "next_ptr": 1,
                    "output_end_ptr": 1,
                    "output_iter": 1,
                    "output_pointer_temp2": 1,
                    "output_var3": 1,
                    "ptr_buffer": 1,
                    "ptr_temp": 1,
                    "ptr_var3": 1,
                    "sequence_pointer": 1,
                    "temp5": 1,
                    "temp6": 2,
                    "temp_array_pointer_1": 1,
                    "temp_pointer": 1,
                    "temp_pointer2": 1,
                    "temp_pointer_2": 1,
                    "temp_ptr": 2,
                    "temp_ptr2": 5,
                    "temp_ptr_2": 2,
                    "temp_variable_6": 1,
                    "var3": 1
                },
                "uVar2": {
                    "converted_value": 1,
                    "extracted_data": 1,
                    "modified_config": 1,
                    "new_setting": 1,
                    "output": 1,
                    "processed_data": 1,
                    "processed_result": 1,
                    "result": 15,
                    "result_value": 1,
                    "return_value": 4,
                    "temp": 1,
                    "temp_variable": 1,
                    "var2": 1
                },
                "uVar4": {
                    "count": 4,
                    "loop_counter": 1,
                    "temp": 2,
                    "temp1": 4,
                    "temp_value": 5,
                    "temp_var": 9,
                    "temp_var1": 2,
                    "temp_variable_1": 2,
                    "u_var4": 1,
                    "var4": 1
                },
                "uVar6": {
                    "length": 1,
                    "limit": 2,
                    "size": 2,
                    "temp": 1,
                    "temp2": 1,
                    "temp3": 3,
                    "temp_count": 2,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_value_2": 1,
                    "temp_var": 2,
                    "temp_var2": 5,
                    "temp_var3": 1,
                    "temp_var_2": 2,
                    "temp_variable_2": 1,
                    "temp_variable_3": 1,
                    "u_var6": 1,
                    "var1": 2,
                    "var6": 1
                },
                "unaff_r9": {
                    "counter": 4,
                    "index": 1,
                    "input_offset": 1,
                    "loop_counter": 2,
                    "loop_counter_1": 1,
                    "remaining_bytes": 1,
                    "remaining_count": 1,
                    "remaining_size": 1,
                    "temp3": 1,
                    "temp8": 2,
                    "temp_unaff": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "temp_var_3": 1,
                    "temp_variable_3": 1,
                    "temporary_value": 1,
                    "unaff_r9": 4,
                    "unaff_value": 3,
                    "unaff_var": 1,
                    "uninitialized_variable": 1
                }
            },
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "calling": [
                "FUN_000061cc"
            ],
            "code": "\nundefined4 extract_data_from_binary_and_process_0000656c(undefined4 input,uint *config,byte **data,undefined4 *output)\n\n{\n  int result;\n  undefined4 result;\n  code *function_pointer;\n  uint temp_var;\n  byte *byte_ptr;\n  uint temp_var2;\n  undefined4 *output_ptr;\n  uint *temp_ptr;\n  uint *temp_ptr2;\n  uint *temp_ptr3;\n  int counter;\n  int loop_index;\n  undefined *sequence_array [4];\n  \n  sequence_array[0] = &DAT_00007c2f;\n  sequence_array[1] = &DAT_00007c32;\n  sequence_array[2] = &DAT_00007c35;\n  function_pointer = (code *)&UNK_00004f81;\n  if (config[6] != 3) {\n    function_pointer = (code *)&UNK_00005fd5;\n  }\n  temp_var2 = config[2];\n  temp_var = temp_var2 - 1;\n  if (0x15c < temp_var) {\n    counter = temp_var2 - 0x15d;\n    temp_var2 = 0x15d;\n  }\n  if (0x15c < temp_var) {\n    config[2] = temp_var2;\n  }\n  temp_ptr3 = config + 7;\n  if (temp_var < 0x15d) {\n    counter = 0;\n  }\n  *config = *config | 0xd00;\n  loop_index = 0;\n  temp_ptr2 = temp_ptr3;\n  do {\n    result = find_byte_sequence(sequence_array[loop_index],**data,2);\n    if (result != 0) {\n      if (loop_index == 1) {\n        if (config[1] == 0) {\n          config[1] = 8;\n          *config = *config | 0x200;\n        }\n        temp_var = *config & 0xfffffaff;\nLAB_000065f4:\n        *config = temp_var;\n      }\n      else if (loop_index == 2) {\n        if ((*config & 0x600) != 0x200) goto LAB_00006624;\n        config[1] = 0x10;\n        temp_var = *config | 0x100;\n        goto LAB_000065f4;\n      }\n      temp_var = config[2];\n      config[2] = temp_var - 1;\n      if (temp_var != 0) {\n        byte_ptr = *data;\n        *data = byte_ptr + 1;\n        temp_ptr = (uint *)((int)temp_ptr2 + 1);\n        *(byte *)temp_ptr2 = *byte_ptr;\n        byte_ptr = data[1];\n        data[1] = byte_ptr + -1;\n        temp_ptr2 = temp_ptr;\n        if (((int)(byte_ptr + -1) < 1) &&\n           (result = (*(code *)config[0x60])(input,data), result != 0)) {\n          loop_index = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    loop_index = loop_index + 1;\n  } while (loop_index != 3);\n  if (config[1] == 0) {\n    config[1] = 10;\n  }\n  extract_data_from_binary(config[5],\"01234567]\" + (8 - config[1]));\n  loop_index = 0;\n  while( true ) {\n    temp_ptr = temp_ptr2;\n    if (config[2] == 0) break;\n    byte_ptr = *data;\n    temp_var = (uint)*byte_ptr;\n    if (*(char *)(config[5] + temp_var) == '\\0') break;\n    if ((temp_var == 0x30) && ((int)(*config << 0x14) < 0)) {\n      loop_index = loop_index + 1;\n      if (counter != 0) {\n        counter = counter + -1;\n        config[2] = config[2] + 1;\n      }\n    }\n    else {\n      *config = *config & 0xfffff6ff;\n      temp_ptr = (uint *)((int)temp_ptr2 + 1);\n      *(byte *)temp_ptr2 = *byte_ptr;\n    }\n    byte_ptr = data[1];\n    data[1] = byte_ptr + -1;\n    if ((int)(byte_ptr + -1) < 1) {\n      result = (*(code *)config[0x60])(input,data);\n      if (result != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    config[2] = config[2] - 1;\n    temp_ptr2 = temp_ptr;\n  }\nLAB_000066ca:\n  if ((int)(*config << 0x17) < 0) {\n    if (temp_ptr3 < temp_ptr) {\n      (*(code *)config[0x5f])(input,*(byte *)((int)temp_ptr + -1),data);\n      temp_ptr = (uint *)((int)temp_ptr + -1);\n    }\n    if (temp_ptr == temp_ptr3) {\n      return 1;\n    }\n  }\n  if ((*config & 0x10) == 0) {\n    *(byte *)temp_ptr = 0;\n    result = (*function_pointer)(input,temp_ptr3,0,config[1]);\n    output_ptr = (undefined4 *)*output;\n    temp_var = *config;\n    *output = output_ptr + 1;\n    output_ptr = (undefined4 *)*output_ptr;\n    if ((temp_var & 0x20) == 0) {\n      if ((int)(temp_var << 0x1f) < 0) {\n        *(short *)output_ptr = (short)result;\n      }\n      else {\n        *output_ptr = result;\n      }\n    }\n    else {\n      *output_ptr = result;\n    }\n    config[3] = config[3] + 1;\n  }\n  config[4] = (uint)((int)temp_ptr + config[4] + (loop_index - (int)temp_ptr3));\n  return 0;\n}\n\n",
            "current_name": "extract_data_from_binary_and_process_0000656c",
            "entrypoint": "0x0000656c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000656c": "extract_data_from_binary_and_process_0000656c",
                "extract_data_from_binary_0000687c": "extract_data_from_binary",
                "find_byte_sequence_00006010": "find_byte_sequence",
                "iVar1": "result",
                "iVar11": "loop_index",
                "local_34": "sequence_array",
                "param_1": "input",
                "param_2": "config",
                "param_3": "data",
                "param_4": "output",
                "pbVar5": "byte_ptr",
                "pcVar3": "function_pointer",
                "puVar10": "temp_ptr3",
                "puVar7": "output_ptr",
                "puVar8": "temp_ptr",
                "puVar9": "temp_ptr2",
                "uVar2": "result",
                "uVar4": "temp_var",
                "uVar6": "temp_var2",
                "unaff_r9": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006768": {
            "additional_data": {
                "FUN_00006768": {
                    "initialize_and_process_elf_relocations": 1,
                    "process": 1,
                    "process_and_initialize_data": 1,
                    "process_binary": 7,
                    "process_binary_data": 3,
                    "process_data": 10,
                    "process_data_and_memory": 1,
                    "process_function": 1,
                    "process_initialization": 1,
                    "process_load_function": 1,
                    "process_memory": 1,
                    "process_memory_and_data": 1,
                    "process_memory_and_relocations": 1
                },
                "LAB_00006754_1": {
                    "label1": 1,
                    "label_00006754_1": 1
                },
                "allocate_and_initialize_memory_block_00005700": {
                    "allocate_and_initialize_memory_block": 4
                },
                "code": {
                    "function_code": 1
                },
                "iVar2": {
                    "index": 1,
                    "int_var": 2,
                    "result": 9,
                    "return_value": 1,
                    "temp2": 9,
                    "temp_value2": 1,
                    "temp_var2": 3,
                    "value2": 1,
                    "var2": 4
                },
                "initialize_data_structure_00004b34": {
                    "initialize_data_structure": 3
                },
                "initialize_memory_and_process_elf_relocations_000042a4": {
                    "initialize_memory_and_process_elf_relocations": 4
                },
                "param_1": {
                    "arg1": 2,
                    "binary_header": 1,
                    "config": 1,
                    "config_data": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "elf_header": 1,
                    "input1": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_params": 7,
                    "memory": 3,
                    "memory_block": 2,
                    "output_buffer": 1,
                    "output_data": 1,
                    "output_ptr": 1,
                    "param1": 3,
                    "param_list": 1
                },
                "param_2": {
                    "arg2": 2,
                    "config_ptr": 1,
                    "data": 4,
                    "data_block": 5,
                    "data_block_pointer": 1,
                    "data_buffer": 1,
                    "data_params": 1,
                    "data_ptr": 3,
                    "data_struct": 1,
                    "input2": 1,
                    "input_buffer": 1,
                    "input_data": 1,
                    "input_ptr": 1,
                    "output_data": 1,
                    "output_param": 1,
                    "param2": 3,
                    "section_header": 2,
                    "structure_pointer": 1
                },
                "param_3": {
                    "arg3": 2,
                    "flag_param": 1,
                    "param3": 14,
                    "param_3": 4,
                    "param_a": 2,
                    "parameter3": 1,
                    "size": 2,
                    "value1": 5
                },
                "param_4": {
                    "arg4": 2,
                    "other_size": 1,
                    "param4": 14,
                    "param_4": 5,
                    "param_b": 2,
                    "parameter4": 1,
                    "unused_param": 1,
                    "value2": 5
                },
                "processData_000043a0": {
                    "process_data": 1
                },
                "process_and_validate_data_00004158": {
                    "process_and_validate_data": 4
                },
                "process_data_0000404c": {
                    "process_data": 2,
                    "process_data2": 2
                },
                "process_data_000043a0": {
                    "process_data": 4
                },
                "uVar1": {
                    "error_code": 1,
                    "flag": 4,
                    "flag1": 1,
                    "result_value": 1,
                    "status": 1,
                    "temp1": 9,
                    "temp_value1": 1,
                    "temp_var1": 3,
                    "ushort_var": 2,
                    "value1": 3,
                    "value3": 1,
                    "var1": 4
                },
                "uVar3": {
                    "local_var_a": 1,
                    "result": 1,
                    "return_value": 1,
                    "temp": 3,
                    "temp3": 9,
                    "temp_val": 2,
                    "temp_value3": 1,
                    "temp_var": 2,
                    "temp_var3": 3,
                    "tmp1": 1,
                    "value2": 2,
                    "value3": 1,
                    "var3": 4
                },
                "uVar4": {
                    "data_value": 1,
                    "flag": 4,
                    "flag2": 2,
                    "flag_var": 1,
                    "flags": 11,
                    "temp4": 5,
                    "temp_var4": 1,
                    "value4": 1,
                    "var1": 1,
                    "var4": 4
                },
                "uVar5": {
                    "index": 1,
                    "shifted_size": 2,
                    "shifted_value": 8,
                    "shifted_var": 1,
                    "temp2": 1,
                    "temp4": 3,
                    "temp5": 5,
                    "temp_var": 2,
                    "temp_var5": 1,
                    "value": 1,
                    "value5": 1,
                    "var2": 1,
                    "var5": 4
                }
            },
            "called": [
                "FUN_000043a0",
                "FUN_0000404c",
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_00005700",
                "FUN_00004b34"
            ],
            "calling": [
                "FUN_00005e10"
            ],
            "code": "\nundefined4\nprocess_binary_data_00006768(undefined4 *input_params,undefined4 *data_block,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 temp1;\n  int result;\n  undefined4 temp3;\n  ushort flags;\n  uint shifted_value;\n  \n  if ((input_params != (undefined4 *)0x0) && (input_params[6] == 0)) {\n    initialize_memory_and_process_elf_relocations();\n  }\n  if (data_block == &DAT_000079b8) {\n    data_block = (undefined4 *)input_params[1];\n  }\n  else if (data_block == (undefined4 *)&DAT_000079d8) {\n    data_block = (undefined4 *)input_params[2];\n  }\n  else if (data_block == (undefined4 *)&DAT_00007998) {\n    data_block = (undefined4 *)input_params[3];\n  }\n  flags = *(ushort *)(data_block + 3);\n  data_block[1] = 0;\n  shifted_value = (uint)*(ushort *)(data_block + 3);\n  if ((int)(shifted_value << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(shifted_value << 0x1d) < 0) {\n    if ((undefined4 *)data_block[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)data_block[0xd] != data_block + 0x11) {\n        initialize_data_structure(input_params);\n      }\n      data_block[1] = data_block[0x10];\n      data_block[0xd] = 0;\n      if (data_block[0x10] != 0) {\n        *data_block = data_block[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(shifted_value << 0x1b)) {\n      *input_params = 9;\n      flags = flags | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(shifted_value << 0x1c) < 0) {\n      result = process_and_validate_data(input_params,data_block,shifted_value << 0x1c,shifted_value,param4);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      data_block[2] = 0;\n      *(ushort *)(data_block + 3) = *(ushort *)(data_block + 3) & 0xfff7;\n      data_block[6] = 0;\n    }\n    *(ushort *)(data_block + 3) = *(ushort *)(data_block + 3) | 4;\n  }\n  if (data_block[4] == 0) {\n    allocate_and_initialize_memory_block(input_params,data_block);\n  }\n  flags = *(ushort *)(data_block + 3);\n  temp1 = *(undefined2 *)(data_block + 3);\n  if ((flags & 3) != 0) {\n    *(undefined2 *)(data_block + 3) = 1;\n    process_data(0x1fff0284,&label1);\n    *(undefined2 *)(data_block + 3) = temp1;\n    if ((flags & 9) == 9) {\n      process_data(input_params,data_block);\n    }\n  }\n  temp3 = data_block[4];\n  *data_block = temp3;\n  result = (*(function_code *)data_block[9])(input_params,data_block[8],temp3,data_block[5]);\n  data_block[1] = result;\n  if (0 < result) {\n    return 0;\n  }\n  flags = *(ushort *)(data_block + 3);\n  if (result != 0) {\n    temp3 = 0;\n  }\n  else {\n    flags = flags | 0x20;\n  }\n  if (result != 0) {\n    data_block[1] = temp3;\n    flags = flags | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(data_block + 3) = flags;\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_binary_data_00006768",
            "entrypoint": "0x00006768",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00006768": "process_binary_data_00006768",
                "LAB_00006754_1": "label1",
                "allocate_and_initialize_memory_block_00005700": "allocate_and_initialize_memory_block",
                "code": "function_code",
                "iVar2": "result",
                "initialize_data_structure_00004b34": "initialize_data_structure",
                "initialize_memory_and_process_elf_relocations_000042a4": "initialize_memory_and_process_elf_relocations",
                "param_1": "input_params",
                "param_2": "data_block",
                "param_3": "param3",
                "param_4": "param4",
                "process_and_validate_data_00004158": "process_and_validate_data",
                "process_data_0000404c": "process_data",
                "process_data_000043a0": "process_data",
                "uVar1": "temp1",
                "uVar3": "temp3",
                "uVar4": "flags",
                "uVar5": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000687c": {
            "additional_data": {
                "FUN_0000687c": {
                    "decipher_text": 1,
                    "decode_and_update": 1,
                    "decode_byte_sequence": 1,
                    "decode_data": 2,
                    "decode_sequence": 1,
                    "extract_and_reverse": 1,
                    "extract_bytes": 1,
                    "extract_data": 5,
                    "extract_data_from_binary": 2,
                    "extract_indices": 1,
                    "extract_segment": 1,
                    "process_and_return_byte_array": 1,
                    "process_byte_array": 1,
                    "reverse_and_modify_array": 1,
                    "reverse_and_toggle_bytes": 1,
                    "reverse_bits": 1,
                    "reverse_byte_and_negate": 1,
                    "reverse_byte_sequence": 2,
                    "reverse_bytes": 1,
                    "reverse_extracted_data": 1,
                    "reverse_extraction": 1,
                    "reverse_process_data": 1,
                    "reverse_string": 1
                },
                "LAB_000068aa": {
                    "loop_label": 1
                },
                "bVar7": {
                    "flag": 1,
                    "is5_e_set": 1,
                    "is_5e": 1,
                    "is_carat": 1,
                    "is_caret": 1,
                    "is_carrot": 3,
                    "is_condition_met": 1,
                    "is_end_marker": 1,
                    "is_equal_to_0x5e": 2,
                    "is_first_byte": 1,
                    "is_first_element": 1,
                    "is_flag": 2,
                    "is_flag_set": 3,
                    "is_flagged": 1,
                    "is_hat_character": 1,
                    "is_in_range": 1,
                    "is_negated": 1,
                    "is_range_start": 1,
                    "is_reversed": 2,
                    "is_special_char": 1,
                    "is_u_var4_equal": 1,
                    "is_xor": 3
                },
                "iVar3": {
                    "counter": 2,
                    "current_index": 5,
                    "i": 3,
                    "index": 18,
                    "loop_index": 1,
                    "temp2": 1,
                    "temp_var_2": 1
                },
                "param_1": {
                    "array_length": 1,
                    "array_size": 1,
                    "data_length": 7,
                    "data_size": 2,
                    "length": 11,
                    "num_elements": 1,
                    "original_size": 1,
                    "segment_size": 1,
                    "sequence_length": 3,
                    "size": 2,
                    "string_length": 1
                },
                "param_2": {
                    "binary_data": 1,
                    "byte_array": 3,
                    "byte_sequence": 2,
                    "cipher_text": 1,
                    "data": 13,
                    "encoded_sequence": 1,
                    "input": 1,
                    "input_array": 2,
                    "input_byte_array": 1,
                    "input_data": 5,
                    "input_string": 1
                },
                "pbVar1": {
                    "deciphered_text": 1,
                    "decoded_sequence": 1,
                    "extracted_data": 1,
                    "output": 1,
                    "output_data": 3,
                    "output_pointer": 1,
                    "result": 18,
                    "result_byte_array": 1,
                    "result_pointer": 1,
                    "result_ptr": 2,
                    "result_string": 1
                },
                "uVar2": {
                    "comparison": 1,
                    "current_byte": 2,
                    "current_char": 1,
                    "current_value": 1,
                    "inner_loop_counter": 1,
                    "next_byte": 3,
                    "next_char": 1,
                    "next_encoded_element": 1,
                    "next_value": 1,
                    "start_index": 1,
                    "temp": 2,
                    "temp1": 2,
                    "temp_var": 11,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "u_var": 1
                },
                "uVar4": {
                    "char_1": 1,
                    "curr_byte": 1,
                    "current": 1,
                    "current_byte": 9,
                    "current_char": 3,
                    "current_encoded_element": 1,
                    "current_value": 2,
                    "first_byte": 2,
                    "first_char": 3,
                    "first_element": 1,
                    "flag": 1,
                    "next_byte": 2,
                    "next_char": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_var1": 1
                },
                "uVar5": {
                    "char_2": 1,
                    "char_count": 1,
                    "counter": 1,
                    "current_byte": 2,
                    "current_char": 2,
                    "current_element": 1,
                    "end": 1,
                    "end_byte": 1,
                    "end_index": 1,
                    "end_value": 1,
                    "first_byte": 1,
                    "loop_counter": 1,
                    "outer_loop_counter": 1,
                    "second_byte": 1,
                    "second_char": 1,
                    "start": 1,
                    "start_byte": 2,
                    "start_char": 1,
                    "start_index": 3,
                    "start_value": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_var2": 3,
                    "value": 1
                },
                "uVar6": {
                    "char_3": 1,
                    "end": 1,
                    "end_byte": 3,
                    "end_char": 2,
                    "end_index": 3,
                    "end_value": 1,
                    "increment": 1,
                    "loop_end": 1,
                    "next_byte": 1,
                    "next_char": 2,
                    "next_element": 1,
                    "next_value": 1,
                    "offset": 1,
                    "range_end": 3,
                    "second_byte": 1,
                    "start": 1,
                    "start_byte": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_var3": 3,
                    "third_byte": 1
                },
                "uVar8": {
                    "loop_counter": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "code": "\nbyte * extract_data_from_binary_0000687c(int length,byte *data)\n\n{\n  byte *result;\n  uint temp_var;\n  int index;\n  uint current_byte;\n  uint temp_var2;\n  uint range_end;\n  bool is_flag_set;\n  \n  current_byte = (uint)*data;\n  is_flag_set = current_byte == 0x5e;\n  if (is_flag_set) {\n    current_byte = (uint)data[1];\n    data = data + 2;\n  }\n  else {\n    data = data + 1;\n  }\n  index = length + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = is_flag_set;\n  } while (index != length + 0xff);\n  if (current_byte == 0) {\n    result = data + -1;\n  }\n  else {\nloop_label:\n    do {\n      temp_var2 = current_byte;\n      *(bool *)(length + temp_var2) = !is_flag_set;\n      data = data + 1;\n      while( true ) {\n        current_byte = (uint)data[-1];\n        if (current_byte != 0x2d) break;\n        range_end = (uint)*data;\n        if ((range_end == 0x5d) || (temp_var = temp_var2, (int)range_end < (int)temp_var2)) goto loop_label;\n        do {\n          temp_var = temp_var + 1;\n          *(bool *)(length + temp_var) = !is_flag_set;\n        } while ((int)temp_var < (int)range_end);\n        index = ~temp_var2 + range_end;\n        if ((int)range_end <= (int)temp_var2) {\n          index = 0;\n        }\n        temp_var2 = temp_var2 + 1 + index;\n        data = data + 2;\n      }\n      result = data;\n    } while ((current_byte != 0x5d) && (result = data + -1, current_byte != 0));\n  }\n  return result;\n}\n\n",
            "current_name": "extract_data_from_binary_0000687c",
            "entrypoint": "0x0000687c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000687c": "extract_data_from_binary_0000687c",
                "LAB_000068aa": "loop_label",
                "bVar7": "is_flag_set",
                "iVar3": "index",
                "param_1": "length",
                "param_2": "data",
                "pbVar1": "result",
                "uVar2": "temp_var",
                "uVar4": "current_byte",
                "uVar5": "temp_var2",
                "uVar6": "range_end"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000068f0": {
            "additional_data": {
                "0x400": {
                    "block_size_0x400": 1
                },
                "0xd": {
                    "ptr_d": 1
                },
                "0xe": {
                    "ptr_e": 1
                },
                "0xffffffff": {
                    "block_allocation_failed": 1,
                    "error": 1,
                    "error_code": 1
                },
                "FUN_000068f0": {
                    "allocate_and_copy_memory": 3,
                    "allocate_and_copy_memory_block": 3,
                    "allocate_and_initialize": 1,
                    "allocate_and_initialize_block": 1,
                    "allocate_and_initialize_memory": 9,
                    "allocate_and_initialize_memory_block": 1,
                    "allocate_memory_block": 1,
                    "allocate_or_expand_block": 1,
                    "improve_memory_handling": 1,
                    "initialize_array": 1,
                    "initialize_memory": 1,
                    "initialize_memory_block": 6,
                    "initialize_memory_blocks": 1,
                    "initialize_or_expand_memory_block": 1
                },
                "allocate_and_initialize_memory_block_00004bd0": {
                    "allocate_and_init_block": 1,
                    "allocate_and_initialize_block": 1,
                    "allocate_and_initialize_block1": 1,
                    "allocate_and_initialize_memory": 1,
                    "allocate_and_initialize_memory_block": 1,
                    "allocate_and_initialize_memory_block1": 1,
                    "allocate_initial_block": 1,
                    "allocate_initialize_block": 1,
                    "create_memory_block": 1
                },
                "allocate_and_initialize_memory_block_000060cc": {
                    "allocate_and_init_expanded_block": 1,
                    "allocate_and_initialize_block2": 2,
                    "allocate_and_initialize_memory_block2": 1,
                    "allocate_and_initialize_memory_block_2": 1,
                    "allocate_resized_block": 1,
                    "expand_memory_block": 1,
                    "extend_and_initialize_memory": 1,
                    "reallocate_block": 1
                },
                "copy_array_000060b0": {
                    "copy_array": 10
                },
                "iVar1": {
                    "allocated_address": 1,
                    "allocated_block": 6,
                    "allocated_memory": 1,
                    "memory_block": 1,
                    "new_block": 8,
                    "new_block_address": 1,
                    "new_block_pointer": 1,
                    "new_buffer_address": 1,
                    "new_memory_block": 11
                },
                "iVar2": {
                    "block_size": 3,
                    "buffer_length": 1,
                    "current_block_size": 1,
                    "current_memory_block": 1,
                    "current_memory_size": 4,
                    "current_size": 13,
                    "old_block_size": 1,
                    "old_memory_block_size": 1,
                    "old_memory_size": 1,
                    "old_size": 1,
                    "original_memory_block_size": 1,
                    "previous_memory_size": 2,
                    "previous_size": 1
                },
                "param_1": {
                    "arg1": 4,
                    "first_arg": 1,
                    "input": 3,
                    "input_data": 1,
                    "input_param": 2,
                    "input_value": 6,
                    "memory_allocation_location": 1,
                    "param": 5,
                    "param1": 7,
                    "param_address": 1
                },
                "param_2": {
                    "arg2": 2,
                    "arr": 1,
                    "array": 4,
                    "array_of_integers": 1,
                    "array_pointer": 1,
                    "buffer": 1,
                    "dynamic_array": 1,
                    "memory_array": 2,
                    "memory_block": 8,
                    "memory_data": 1,
                    "memory_info": 3,
                    "param2": 5,
                    "updated_memory_block": 1
                }
            },
            "called": [
                "FUN_000060cc",
                "FUN_000060b0",
                "FUN_00004bd0"
            ],
            "calling": [],
            "code": "\nundefined4 allocate_and_initialize_memory_block_000068f0(undefined4 param1,int *memory_block)\n\n{\n  int new_memory_block;\n  int current_size;\n  \n  if ((int *)memory_block[0xd] == memory_block + 0x11) {\n    new_memory_block = create_memory_block(param1,0x400);\n    if (new_memory_block != 0) {\n      memory_block[0xe] = 0x400;\n      memory_block[0xd] = new_memory_block;\n      *(undefined *)(new_memory_block + 0x3ff) = *(undefined *)((int)memory_block + 0x46);\n      *(undefined *)(new_memory_block + 0x3fe) = *(undefined *)((int)memory_block + 0x45);\n      *(undefined *)(new_memory_block + 0x3fd) = *(undefined *)(memory_block + 0x11);\n      *memory_block = new_memory_block + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    current_size = memory_block[0xe];\n    new_memory_block = allocate_and_initialize_block2(param1,(int *)memory_block[0xd],current_size << 1);\n    if (new_memory_block != 0) {\n      copy_array(new_memory_block + current_size,new_memory_block,current_size);\n      memory_block[0xd] = new_memory_block;\n      memory_block[0xe] = current_size << 1;\n      *memory_block = new_memory_block + current_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_block_000068f0",
            "entrypoint": "0x000068f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000068f0": "allocate_and_initialize_memory_block_000068f0",
                "allocate_and_initialize_memory_block_00004bd0": "create_memory_block",
                "allocate_and_initialize_memory_block_000060cc": "allocate_and_initialize_block2",
                "copy_array_000060b0": "copy_array",
                "iVar1": "new_memory_block",
                "iVar2": "current_size",
                "param_1": "param1",
                "param_2": "memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006964": {
            "additional_data": {
                "FUN_00006964": {
                    "add_and_check": 1,
                    "calculate_modified_value": 2,
                    "calculate_result": 10,
                    "calculate_sum": 13,
                    "calculate_sum_or_offset": 1,
                    "calculate_total": 1,
                    "calculate_updated_value": 1,
                    "calculate_value": 1,
                    "compute_sum": 1
                },
                "iVar1": {
                    "array_length": 1,
                    "current_index": 6,
                    "index": 1,
                    "modified_value": 1,
                    "result": 5,
                    "result_offset": 1,
                    "sum": 12,
                    "sum_index": 1,
                    "total": 1,
                    "updated_value": 2
                },
                "param_1": {
                    "first_param": 1,
                    "input": 1,
                    "input_1": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 4,
                    "num1": 1,
                    "param": 1,
                    "param1": 1,
                    "param_value": 1,
                    "result": 12,
                    "some_value": 1,
                    "undefined_var": 1,
                    "value": 3,
                    "value_modifier": 1
                },
                "param_2": {
                    "array": 7,
                    "array_address": 2,
                    "array_index": 3,
                    "array_offset": 1,
                    "array_ptr": 1,
                    "array_start": 1,
                    "base_address": 2,
                    "data": 1,
                    "data_pointer": 1,
                    "input": 7,
                    "input_2": 1,
                    "input_array": 1,
                    "input_value": 1,
                    "param2": 1,
                    "second_param": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000060cc"
            ],
            "code": "\nint calculate_sum_or_offset_00006964(undefined4 result,int input)\n\n{\n  int sum;\n  \n  sum = *(int *)(input + -4) + -4;\n  if (*(int *)(input + -4) < 0) {\n    sum = sum + *(int *)(input + sum);\n  }\n  return sum;\n}\n\n",
            "current_name": "calculate_sum_or_offset_00006964",
            "entrypoint": "0x00006964",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00006964": "calculate_sum_or_offset_00006964",
                "iVar1": "sum",
                "param_1": "result",
                "param_2": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006974": {
            "additional_data": {
                "CONCAT44": {
                    "combine_results": 1
                },
                "FUN_00006974": {
                    "calculate_and_convert_to_concatenated": 1,
                    "calculate_combined_quotient_and_remainder": 1,
                    "calculate_converted_result": 1,
                    "calculate_converted_value": 3,
                    "calculate_quotient_and_remainder": 15,
                    "calculate_range": 5,
                    "calculate_result": 2,
                    "get_quotient_and_remainder": 1,
                    "perform_division": 1
                },
                "iVar1": {
                    "abs_divisor": 3,
                    "abs_divisor_minus_dividend": 1,
                    "abs_divisor_minus_one": 1,
                    "absolute_max": 1,
                    "adjusted_denominator": 1,
                    "adjusted_dividend": 1,
                    "adjusted_divisor": 5,
                    "adjusted_end_value": 1,
                    "converted_input2": 1,
                    "converted_value": 1,
                    "neg_divisor_adjusted": 1,
                    "neg_divisor_minus_dividend": 1,
                    "negated_divisor": 1,
                    "negative_divisor": 3,
                    "negative_input": 1,
                    "negative_input_2": 1,
                    "negative_number1": 1,
                    "normalized_divisor": 1,
                    "temp": 1,
                    "temp_result": 1
                },
                "local_8": {
                    "local_array": 1,
                    "local_buffer": 1,
                    "local_storage": 1,
                    "local_variable": 1,
                    "quotient_remainder": 3,
                    "remainder": 3,
                    "result": 1,
                    "result_array": 1,
                    "temp": 5,
                    "temp_array": 6,
                    "temp_buffer": 3,
                    "temp_result": 1,
                    "temporary": 2
                },
                "param_1": {
                    "dividend": 20,
                    "dividend1": 1,
                    "dividend_param": 1,
                    "input1": 3,
                    "input_1": 1,
                    "min_value": 1,
                    "number1": 1,
                    "numerator": 2,
                    "start_value": 1
                },
                "param_2": {
                    "denominator": 2,
                    "dividend2": 1,
                    "divisor": 19,
                    "divisor_high": 1,
                    "divisor_param": 1,
                    "end_value": 1,
                    "input2": 3,
                    "input_2": 1,
                    "max_value": 1,
                    "number2": 1
                },
                "param_3": {
                    "dividend": 2,
                    "dividend_remainder": 1,
                    "dividend_sign": 1,
                    "divisor1": 1,
                    "divisor2": 1,
                    "divisor_low": 1,
                    "divisor_sign": 1,
                    "factor1": 1,
                    "input3": 3,
                    "input_3": 1,
                    "number3": 1,
                    "quotient": 14,
                    "quotient_param": 1,
                    "quotient_part1": 1,
                    "range_start": 1
                },
                "param_4": {
                    "divisor": 2,
                    "divisor2": 1,
                    "divisor_remainder": 1,
                    "divisor_sign": 1,
                    "factor2": 1,
                    "input4": 3,
                    "input_4": 1,
                    "is_divisor_negative": 1,
                    "number4": 1,
                    "quotient_part2": 1,
                    "range_end": 1,
                    "remainder": 14,
                    "remainder_flag": 1,
                    "remainder_param": 1,
                    "remainder_sign": 1
                },
                "uVar2": {
                    "calculated_result": 1,
                    "quotient": 1,
                    "result": 26
                }
            },
            "called": [
                "FUN_00006a14"
            ],
            "calling": [
                "FUN_0000443c"
            ],
            "code": "\nundefined8 calculate_combined_quotient_and_remainder_00006974(int dividend,int divisor,int quotient,int remainder)\n\n{\n  int adjusted_divisor;\n  undefined8 result;\n  undefined temp_array [8];\n  \n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return combine_results(divisor,dividend);\n  }\n  if (divisor < 0) {\n    adjusted_divisor = -divisor - (uint)(dividend != 0);\n    if (remainder < 0) {\n      result = calculate_quotient_and_remainder_00006a14(-dividend,adjusted_divisor,-quotient,-remainder - (uint)(quotient != 0),temp_array);\n      return result;\n    }\n    result = calculate_quotient_and_remainder_00006a14(-dividend,adjusted_divisor,quotient,remainder,temp_array);\n    return combine_results(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (remainder < 0) {\n    result = calculate_quotient_and_remainder_00006a14(dividend,divisor,-quotient,-remainder - (uint)(quotient != 0),temp_array);\n    return combine_results(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = calculate_quotient_and_remainder_00006a14();\n  return result;\n}\n\n",
            "current_name": "calculate_combined_quotient_and_remainder_00006974",
            "entrypoint": "0x00006974",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_results",
                "FUN_00006974": "calculate_combined_quotient_and_remainder_00006974",
                "iVar1": "adjusted_divisor",
                "local_8": "temp_array",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006a14": {
            "additional_data": {
                "CARRY4": {
                    "carry4": 1,
                    "check_carry4": 1
                },
                "FUN_00006a14": {
                    "calculate": 1,
                    "calculate_div_mod": 1,
                    "calculate_division": 2,
                    "calculate_division_and_remainder": 2,
                    "calculate_division_remainder": 2,
                    "calculate_divisor": 1,
                    "calculate_quotient_and_remainder": 5,
                    "calculate_quotient_remainder": 2,
                    "calculate_unsigned_division": 1,
                    "calculate_unsigned_division_remainder": 1,
                    "compute_quotient_and_remainder": 1,
                    "div_mod": 1,
                    "divide_and_remainder": 6,
                    "divide_and_store_remainder": 1,
                    "perform_division": 4
                },
                "LZCOUNT": {
                    "leading_zero_count": 1,
                    "leading_zeros_count": 1
                },
                "UNRECOVERED_JUMPTABLE": {
                    "jump_table": 1
                },
                "bVar10": {
                    "carry": 9,
                    "carry_flag": 14,
                    "carry_out": 1,
                    "did_borrow": 1,
                    "is_carry": 2
                },
                "bVar15": {
                    "carry": 1
                },
                "findQuotient": {
                    "find_quotient": 1
                },
                "iVar16": {
                    "num_leading_zeros": 1
                },
                "iVar2": {
                    "bit_shift_count": 1,
                    "shift": 2,
                    "shift_amount": 9,
                    "shift_bits": 1,
                    "shift_count": 12
                },
                "param_1": {
                    "dividend": 31
                },
                "param_2": {
                    "dividend_high": 13,
                    "dividend_high32": 1,
                    "dividend_high_word": 1,
                    "dividend_low": 3,
                    "dividend_lower": 1,
                    "dividend_rem1": 1,
                    "dividend_upper": 7,
                    "dividend_upper_bits": 1,
                    "divisor": 2,
                    "quotient": 1
                },
                "param_3": {
                    "divisor": 27,
                    "divisor_high": 1,
                    "divisor_low": 1,
                    "quotient": 2
                },
                "param_4": {
                    "comparison_value": 1,
                    "divisor": 1,
                    "divisor_high": 13,
                    "divisor_high32": 1,
                    "divisor_high_word": 1,
                    "divisor_low": 2,
                    "divisor_lower": 1,
                    "divisor_rem1": 1,
                    "divisor_upper": 7,
                    "divisor_upper_bits": 1,
                    "remainder": 2
                },
                "param_5": {
                    "quotient": 7,
                    "quotient_and_remainder": 4,
                    "quotient_and_remainder_array": 1,
                    "quotient_remainder": 1,
                    "remainder": 13,
                    "remainder_quotient_pointer": 1,
                    "result": 4
                },
                "software_udf": {
                    "undocumented_feature": 1
                },
                "uVar1": {
                    "dividend_lo": 1,
                    "dividend_low16": 1,
                    "dividend_quotient": 1,
                    "quotient": 8,
                    "quotient1": 1,
                    "quotient_high": 5,
                    "quotient_low": 6,
                    "quotient_lower": 1,
                    "quotient_upper": 3,
                    "temp1": 4
                },
                "uVar10": {
                    "b_var": 1,
                    "carry": 3,
                    "carry_check": 1,
                    "u_18": 1
                },
                "uVar11": {
                    "final_result": 2,
                    "output": 1,
                    "quotient": 1,
                    "result": 25,
                    "return_value": 2
                },
                "uVar12": {
                    "perform_division": 1
                },
                "uVar13": {
                    "quotient_candidate": 1
                },
                "uVar14": {
                    "find_quotient": 1
                },
                "uVar2": {
                    "quotient_upper": 1,
                    "temp2": 1
                },
                "uVar3": {
                    "adjusted_dividend": 1,
                    "dividend_low": 2,
                    "dividend_shifted": 1,
                    "dividend_temp": 1,
                    "dividend_upper": 1,
                    "divisor_low": 1,
                    "divisor_shifted": 1,
                    "local_var1": 1,
                    "qu_14": 1,
                    "quot_high": 1,
                    "quotient_high_word1": 1,
                    "quotient_temp": 1,
                    "remainder_high": 1,
                    "temp": 2,
                    "temp1": 9,
                    "temp2": 2,
                    "temp3": 2,
                    "temp_lo": 1,
                    "tmp": 1
                },
                "uVar4": {
                    "adjusted_divisor": 1,
                    "dividend_shifted_low16": 1,
                    "divider_size": 1,
                    "divisor_low": 1,
                    "local_var2": 1,
                    "qu_19": 1,
                    "quotient": 1,
                    "quotient1": 1,
                    "quotient2": 1,
                    "quotient_low_update": 1,
                    "quotient_lower": 1,
                    "quotient_temp": 1,
                    "remainder_high": 1,
                    "temp1_upper": 1,
                    "temp2": 9,
                    "temp3": 2,
                    "temp4": 2,
                    "temp_hi": 1,
                    "temp_quot": 1,
                    "temp_quotient_low": 1,
                    "tmp2": 1
                },
                "uVar5": {
                    "carry_flag": 1,
                    "dividend_low": 1,
                    "local_var3": 1,
                    "quotient_high": 1,
                    "quotient_high_final": 1,
                    "quotient_high_word2": 1,
                    "quotient_lo": 1,
                    "quotient_low": 3,
                    "quotient_low1": 1,
                    "quotient_low16": 1,
                    "quotient_low2": 1,
                    "quotient_low_final": 1,
                    "quotient_lower": 1,
                    "quotient_partial": 1,
                    "quotient_upper_half": 1,
                    "rem_high": 1,
                    "remainder_low": 1,
                    "remainder_quotient_lower": 1,
                    "shifted_dividend": 1,
                    "shifted_dividend_lower": 1,
                    "temp": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 2,
                    "temp5": 2,
                    "temp_quotient_high": 1
                },
                "uVar6": {
                    "dividend_part1": 1,
                    "local_var4": 1,
                    "quotient": 1,
                    "quotient1": 1,
                    "quotient_high": 2,
                    "quotient_shifted": 1,
                    "rem_low": 1,
                    "remainder": 4,
                    "remainder1": 1,
                    "remainder_lo": 1,
                    "remainder_partial": 1,
                    "remainder_upper_half": 1,
                    "shifted_dividend_upper": 1,
                    "temp": 1,
                    "temp2_upper": 1,
                    "temp3": 5,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 2,
                    "temp_quotient": 1,
                    "temp_result_low": 1,
                    "u_8": 1
                },
                "uVar7": {
                    "dividend_lower": 1,
                    "divider_low_word": 1,
                    "divisor_low": 3,
                    "divisor_lower": 1,
                    "divisor_part1": 1,
                    "divisor_shifted": 1,
                    "local_var5": 1,
                    "quotient2": 1,
                    "remainder_shifted": 1,
                    "shift_count": 1,
                    "shifted_divisor_low": 1,
                    "temp1": 1,
                    "temp1_lo": 1,
                    "temp3": 3,
                    "temp4": 5,
                    "temp5": 1,
                    "temp6": 1,
                    "temp7": 2,
                    "temp_divisor": 1,
                    "temp_divisor_high": 1,
                    "u_5": 1,
                    "u_var7": 1
                },
                "uVar8": {
                    "divisor_temp": 1,
                    "local_var6": 1,
                    "partial_product": 1,
                    "product_low": 1,
                    "quotient2": 1,
                    "quotient3": 1,
                    "quotient_guess": 1,
                    "quotient_high": 2,
                    "quotient_high_update": 1,
                    "quotient_low": 2,
                    "quotient_low2": 1,
                    "quotient_temp": 1,
                    "remainder1": 1,
                    "temp1_hi": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp3_upper": 1,
                    "temp4": 1,
                    "temp5": 2,
                    "temp6": 1,
                    "temp7": 1,
                    "temp8": 2,
                    "temp_dividend_divisor_low": 1,
                    "temp_dividend_high": 1,
                    "temp_quot2": 1,
                    "u_3": 1,
                    "u_var8": 1
                },
                "uVar9": {
                    "dividend_quotient_temp": 1,
                    "divider_size": 1,
                    "divisor": 1,
                    "divisor_low16": 1,
                    "divisor_lower": 2,
                    "divisor_upper": 1,
                    "local_var7": 1,
                    "quotient_hi": 1,
                    "quotient_high": 2,
                    "quotient_high2": 1,
                    "quotient_high_final": 1,
                    "quotient_low": 1,
                    "remainder2": 2,
                    "sub_quotient": 1,
                    "temp3": 2,
                    "temp4": 2,
                    "temp6": 1,
                    "temp7": 1,
                    "temp8": 1,
                    "temp9": 2,
                    "temp_divisor_low": 1,
                    "temp_quot3": 1,
                    "tmp3": 1,
                    "u_10": 1,
                    "u_var9": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00006974"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong calculate_quotient_and_remainder_00006a14(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *remainder)\n\n{\n  code *jump_table;\n  uint quotient;\n  int shift_count;\n  uint temp1;\n  uint temp2;\n  uint quotient_low;\n  uint temp3;\n  uint temp4;\n  uint quotient_low;\n  uint divisor_lower;\n  bool carry_flag;\n  ulonglong result;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_count = leading_zeros_count(divisor);\n      quotient_low = divisor;\n      if (shift_count != 0) {\n        quotient_low = divisor << shift_count;\n        dividend_high = dividend >> (0x20U - shift_count & 0xff) | dividend_high << shift_count;\n        dividend = dividend << shift_count;\n      }\n      temp3 = quotient_low >> 0x10;\n      quotient_low = dividend_high / temp3;\n      temp1 = dividend >> 0x10 | (dividend_high - temp3 * quotient_low) * 0x10000;\n      quotient = quotient_low * (quotient_low & 0xffff);\n      temp2 = quotient_low;\n      if (temp1 <= quotient && quotient - temp1 != 0) {\n        carry_flag = check_carry4(quotient_low,temp1);\n        temp1 = quotient_low + temp1;\n        temp2 = quotient_low - 1;\n        if ((carry_flag == false) && (temp1 <= quotient && quotient - temp1 != 0)) {\n          temp2 = quotient_low - 2;\n          temp1 = temp1 + quotient_low;\n        }\n      }\n      quotient_low = (temp1 - quotient) / temp3;\n      temp3 = dividend & 0xffff | ((temp1 - quotient) - temp3 * quotient_low) * 0x10000;\n      temp1 = quotient_low * (quotient_low & 0xffff);\n      quotient = quotient_low;\n      if (temp3 <= temp1 && temp1 - temp3 != 0) {\n        carry_flag = check_carry4(quotient_low,temp3);\n        temp3 = quotient_low + temp3;\n        quotient = quotient_low - 1;\n        if ((carry_flag == false) && (temp3 <= temp1 && temp1 - temp3 != 0)) {\n          quotient = quotient_low - 2;\n          temp3 = temp3 + quotient_low;\n        }\n      }\n      temp3 = temp3 - temp1;\n      quotient = quotient | temp2 << 0x10;\n      quotient_low = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)undocumented_feature(0xff,0x6abc);\n        result = (*jump_table)();\n        return result;\n      }\n      shift_count = leading_zeros_count(divisor);\n      if (shift_count == 0) {\n        dividend_high = dividend_high - divisor;\n        divisor_lower = divisor >> 0x10;\n        temp4 = divisor & 0xffff;\n        quotient_low = 1;\n        temp2 = divisor;\n      }\n      else {\n        temp2 = divisor << shift_count;\n        divisor_lower = temp2 >> 0x10;\n        quotient = dividend_high >> (0x20U - shift_count & 0xff);\n        quotient_low = dividend >> (0x20U - shift_count & 0xff) | dividend_high << shift_count;\n        temp1 = quotient / divisor_lower;\n        temp4 = temp2 & 0xffff;\n        quotient_low = quotient_low >> 0x10 | (quotient - divisor_lower * temp1) * 0x10000;\n        temp3 = temp1 * temp4;\n        dividend = dividend << shift_count;\n        quotient = temp1;\n        if (quotient_low <= temp3 && temp3 - quotient_low != 0) {\n          carry_flag = check_carry4(temp2,quotient_low);\n          quotient_low = temp2 + quotient_low;\n          quotient = temp1 - 1;\n          if ((carry_flag == false) && (quotient_low <= temp3 && temp3 - quotient_low != 0)) {\n            quotient = temp1 - 2;\n            quotient_low = quotient_low + temp2;\n          }\n        }\n        temp1 = (quotient_low - temp3) / divisor_lower;\n        dividend_high = quotient_low & 0xffff | ((quotient_low - temp3) - divisor_lower * temp1) * 0x10000;\n        temp3 = temp1 * temp4;\n        quotient_low = temp1;\n        if (dividend_high <= temp3 && temp3 - dividend_high != 0) {\n          carry_flag = check_carry4(temp2,dividend_high);\n          dividend_high = temp2 + dividend_high;\n          quotient_low = temp1 - 1;\n          if ((carry_flag == false) && (dividend_high <= temp3 && temp3 - dividend_high != 0)) {\n            quotient_low = temp1 - 2;\n            dividend_high = dividend_high + temp2;\n          }\n        }\n        dividend_high = dividend_high - temp3;\n        quotient_low = quotient_low | quotient << 0x10;\n      }\n      quotient_low = dividend_high / divisor_lower;\n      temp3 = dividend >> 0x10 | (dividend_high - divisor_lower * quotient_low) * 0x10000;\n      quotient = temp4 * quotient_low;\n      temp1 = quotient_low;\n      if (temp3 <= quotient && quotient - temp3 != 0) {\n        carry_flag = check_carry4(temp2,temp3);\n        temp3 = temp2 + temp3;\n        temp1 = quotient_low - 1;\n        if ((carry_flag == false) && (temp3 <= quotient && quotient - temp3 != 0)) {\n          temp1 = quotient_low - 2;\n          temp3 = temp3 + temp2;\n        }\n      }\n      quotient_low = (temp3 - quotient) / divisor_lower;\n      temp3 = dividend & 0xffff | ((temp3 - quotient) - divisor_lower * quotient_low) * 0x10000;\n      temp4 = temp4 * quotient_low;\n      quotient = quotient_low;\n      if (temp3 <= temp4 && temp4 - temp3 != 0) {\n        carry_flag = check_carry4(temp2,temp3);\n        temp3 = temp2 + temp3;\n        quotient = quotient_low - 1;\n        if ((carry_flag == false) && (temp3 <= temp4 && temp4 - temp3 != 0)) {\n          quotient = quotient_low - 2;\n          temp3 = temp3 + temp2;\n        }\n      }\n      temp3 = temp3 - temp4;\n      quotient = quotient | temp1 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp3 >> leading_zeros_count(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n      return 0;\n    }\n    quotient = 0;\n    quotient_low = 0;\n  }\n  else {\n    shift_count = leading_zeros_count(divisor_high);\n    if (shift_count != 0) {\n      temp4 = 0x20 - shift_count;\n      temp1 = divisor >> (temp4 & 0xff) | divisor_high << shift_count;\n      divisor_lower = temp1 >> 0x10;\n      quotient = dividend_high >> (temp4 & 0xff);\n      quotient_low = dividend >> (temp4 & 0xff) | dividend_high << shift_count;\n      temp3 = quotient / divisor_lower;\n      temp2 = quotient_low >> 0x10 | (quotient - divisor_lower * temp3) * 0x10000;\n      quotient_low = temp3 * (temp1 & 0xffff);\n      dividend = dividend << shift_count;\n      quotient = temp3;\n      if (temp2 <= quotient_low && quotient_low - temp2 != 0) {\n        carry_flag = check_carry4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient = temp3 - 1;\n        if ((carry_flag == false) && (temp2 <= quotient_low && quotient_low - temp2 != 0)) {\n          quotient = temp3 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp3 = (temp2 - quotient_low) / divisor_lower;\n      temp2 = quotient_low & 0xffff | ((temp2 - quotient_low) - divisor_lower * temp3) * 0x10000;\n      quotient_low = temp3 * (temp1 & 0xffff);\n      quotient_low = temp3;\n      if (temp2 <= quotient_low && quotient_low - temp2 != 0) {\n        carry_flag = check_carry4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient_low = temp3 - 1;\n        if ((carry_flag == false) && (temp2 <= quotient_low && quotient_low - temp2 != 0)) {\n          quotient_low = temp3 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      quotient_low = quotient_low | quotient << 0x10;\n      result = (ulonglong)quotient_low * (ulonglong)(divisor << shift_count);\n      if (CONCAT44(temp2 - quotient_low,dividend) < result) {\n        result = result - CONCAT44(temp1,divisor << shift_count);\n        quotient_low = quotient_low - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        quotient = ((temp2 - quotient_low) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = quotient << (temp4 & 0xff) | dividend - (uint)result >> shift_count;\n        remainder[1] = quotient >> shift_count;\n      }\n      return (ulonglong)quotient_low;\n    }\n    if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - divisor_high) - (uint)carry_flag;\n      quotient = 1;\n    }\n    else {\n      quotient = 0;\n    }\n    quotient_low = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n    }\n  }\n  return CONCAT44(quotient_low,quotient);\n}\n\n",
            "current_name": "calculate_quotient_and_remainder_00006a14",
            "entrypoint": "0x00006a14",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "check_carry4",
                "FUN_00006a14": "calculate_quotient_and_remainder_00006a14",
                "LZCOUNT": "leading_zeros_count",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "bVar10": "carry_flag",
                "iVar2": "shift_count",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "software_udf": "undocumented_feature",
                "uVar1": "quotient",
                "uVar11": "result",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "quotient_low",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "uVar8": "quotient_low",
                "uVar9": "divisor_lower"
            },
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_00000e64",
                "FUN_00000db0",
                "FUN_00000990",
                "FUN_0000459c",
                "FUN_00000f8c"
            ],
            "calling": [],
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  initialize_and_clear_memory_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  configure_and_initialize_system_00000e64();\n  execute_functions_twice_0000459c();\n  initialize_and_configure_interrupts_00000f8c();\n  return;\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x0000099c",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_0000093c",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000dcc",
            "FUN_000010a0",
            "FUN_00001318",
            "FUN_00001360",
            "FUN_000015d0",
            "FUN_00001696",
            "FUN_00001748",
            "FUN_00001ad4",
            "FUN_00001d08",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_000023c8",
            "FUN_0000240c",
            "FUN_00002538",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_000031fc",
            "FUN_00003658",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000043a0",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005584",
            "FUN_000056b0",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_00005a58",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000064bc",
            "FUN_0000687c",
            "FUN_00006964",
            "FUN_00006a14"
        ],
        [
            "FUN_00000428",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000930",
            "FUN_00000d76",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00001348",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001cf0",
            "FUN_00001d3a",
            "FUN_00001ec4",
            "FUN_00001ff6",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_000023d0",
            "FUN_0000258c",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_00002894",
            "FUN_00002a18",
            "FUN_0000328c",
            "FUN_00003688",
            "FUN_00003e58",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_000041f4",
            "FUN_00004634",
            "FUN_00004b34",
            "FUN_00004e26",
            "FUN_00004f98",
            "FUN_0000562c",
            "FUN_000056b8",
            "FUN_00005b34",
            "FUN_00005fd8",
            "FUN_0000656c",
            "FUN_00006974"
        ],
        [
            "FUN_00000794",
            "FUN_00000d9c",
            "FUN_00001628",
            "FUN_00001734",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_00001960",
            "FUN_00001a60",
            "FUN_00001bb8",
            "FUN_00001ddc",
            "FUN_00002028",
            "FUN_000024bc",
            "FUN_000025f4",
            "FUN_00002994",
            "FUN_00002e9c",
            "FUN_0000404c",
            "FUN_0000443c",
            "FUN_00004bd0",
            "FUN_00004dee",
            "FUN_000056a0",
            "FUN_00005780",
            "FUN_00006192"
        ],
        [
            "FUN_00000db0",
            "FUN_000012b4",
            "FUN_00001688",
            "FUN_0000191c",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001f80",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_00002396",
            "FUN_00002624",
            "FUN_00002690",
            "FUN_00004248",
            "FUN_00005700",
            "FUN_000060cc",
            "FUN_000061cc"
        ],
        [
            "FUN_00001448",
            "FUN_00001b10",
            "FUN_00001eea",
            "FUN_00005e68",
            "FUN_000068f0"
        ],
        [
            "FUN_00001c84",
            "FUN_00005100"
        ],
        [
            "FUN_00001274",
            "FUN_000047e4"
        ],
        [
            "FUN_00000e64",
            "FUN_00002600",
            "FUN_00002654"
        ],
        [
            "FUN_000031e0",
            "FUN_000033f4",
            "FUN_00003478",
            "FUN_000034c0"
        ],
        [
            "FUN_00000ed8",
            "FUN_0000211c",
            "FUN_00003378"
        ],
        [
            "FUN_00002eb4"
        ],
        [
            "FUN_00004158",
            "FUN_00004314",
            "FUN_000054a8"
        ],
        [
            "FUN_000041d0",
            "FUN_000042a4"
        ],
        [
            "FUN_00005404",
            "FUN_00006768"
        ],
        [
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_000057a8",
            "FUN_00005e10"
        ],
        [
            "FUN_00002a00",
            "FUN_000033c0",
            "FUN_00003444",
            "FUN_00004418",
            "FUN_000057d2"
        ],
        [
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_000057f8"
        ],
        [
            "FUN_00004c84"
        ],
        [
            "FUN_00002a88",
            "FUN_00002f74",
            "FUN_00003524"
        ],
        [
            "FUN_00002b10"
        ],
        [
            "FUN_00002e6c"
        ],
        [
            "FUN_000023a4"
        ],
        [
            "FUN_00000f04"
        ],
        [
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000013b8",
            "FUN_00003ec4"
        ],
        [
            "FUN_00000dc0",
            "FUN_00000df4",
            "FUN_000010d4",
            "FUN_00002434",
            "FUN_00003e9e"
        ],
        [
            "FUN_00000410",
            "FUN_00000f8c",
            "FUN_0000129c",
            "FUN_00003694"
        ],
        [
            "FUN_000012e2",
            "FUN_00002ecc",
            "FUN_0000305c",
            "FUN_0000459c"
        ],
        [
            "FUN_00000e14",
            "FUN_00002f30"
        ],
        [
            "FUN_00000490",
            "FUN_00002fe0"
        ],
        [
            "FUN_0000316c",
            "FUN_00004dc8"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 748964
}