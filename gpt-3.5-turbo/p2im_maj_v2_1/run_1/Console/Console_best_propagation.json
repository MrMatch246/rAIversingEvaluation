{
    "functions": {
        "FUN_00000410": {
            "additional_data": {
                "FUN_00000410": {
                    "initialize_uart": 4,
                    "initialize_uart_io": 1,
                    "initialize_uart_stdio": 26
                },
                "FUN_00000df4": {
                    "configure_uart": 3,
                    "do_something": 1,
                    "execute_subfunction": 1,
                    "initialize_stdio": 1,
                    "initialize_uart": 1,
                    "perform_additional_function": 1,
                    "perform_additional_setup": 2,
                    "perform_additional_task": 3,
                    "perform_additional_tasks": 1,
                    "perform_default_operation": 1,
                    "perform_operation": 2,
                    "perform_specific_operation": 1,
                    "perform_specific_task": 1,
                    "print_debug_info": 1,
                    "print_message_to_uart": 1,
                    "print_uart_message": 1,
                    "print_uart_status": 1,
                    "process_data": 1,
                    "reset_uart": 2,
                    "send_data_over_uart": 1,
                    "sub_function": 2,
                    "uart_config": 1,
                    "uart_init": 1
                },
                "uart_stdio_init": {
                    "initialize_uart_standard_io": 1,
                    "initialize_uart_stdio": 1
                }
            },
            "called": [
                "FUN_00000df4"
            ],
            "calling": [
                "FUN_0000459c"
            ],
            "code": "\nvoid initialize_uart_stdio_00000410(void)\n\n{\n  initialize_uart_standard_io();\n  return;\n}\n\n",
            "current_name": "initialize_uart_stdio_00000410",
            "entrypoint": "0x00000410",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000410": "initialize_uart_stdio_00000410",
                "uart_stdio_init": "initialize_uart_standard_io"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000428": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "array1fff0200": 1,
                    "rel_array": 2
                },
                "FUN_00000428": {
                    "extract_offset": 1,
                    "extract_rel_offset": 1,
                    "find_elf_relocation_offset": 1,
                    "find_relocated_address": 1,
                    "get_offset_in_range": 1,
                    "get_valid_offset": 1,
                    "parse_and_validate_offset": 1,
                    "process_elf_relocation": 1,
                    "reverse_and_update_offset": 1,
                    "update_address": 1,
                    "update_elf32_rel_offset": 1,
                    "update_offset": 5,
                    "update_relocation_offset": 2,
                    "validate_and_update_offset": 2,
                    "validate_offset": 5,
                    "validate_offset_within_range": 1,
                    "validate_param_and_update_offset": 1,
                    "verify_and_update_offset": 2
                },
                "local_c": {
                    "adjusted_offset": 1,
                    "current_offset": 4,
                    "initial_offset": 1,
                    "new_offset": 4,
                    "offset_value": 1,
                    "old_offset": 1,
                    "original_offset": 3,
                    "output_offset": 1,
                    "result": 2,
                    "result_address": 1,
                    "return_value": 2,
                    "updated_offset": 8,
                    "valid_offset": 1,
                    "validated_offset": 1
                },
                "param_1": {
                    "destination": 1,
                    "error_code_ptr": 2,
                    "output_address": 1,
                    "output_buffer": 2,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "ptr_status": 1,
                    "result": 12,
                    "result_address": 1,
                    "result_code": 1,
                    "result_out": 1,
                    "result_pointer": 3,
                    "result_ptr": 4
                },
                "param_2": {
                    "current_offset": 3,
                    "input_address": 1,
                    "input_offset": 11,
                    "input_value": 6,
                    "new_offset": 3,
                    "offset": 5,
                    "original_offset": 1,
                    "value": 1
                },
                "uVar1": {
                    "disabled_interrupts": 1,
                    "interrupt_state": 2,
                    "interrupt_status": 3,
                    "irq_disabled": 3,
                    "irq_flag": 3,
                    "irq_flags": 1,
                    "irq_mask": 1,
                    "irq_state": 5,
                    "irq_status": 2,
                    "old_interrupt_status": 1,
                    "previous_interrupt_state": 1,
                    "previous_irq_state": 1
                }
            },
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "calling": [
                "FUN_00004bd0"
            ],
            "code": "\ndword validate_param_and_update_offset_00000428(undefined4 *result,int input_offset)\n\n{\n  undefined4 irq_state;\n  dword updated_offset;\n  \n  irq_state = irq_disable();\n  updated_offset = rel_array[0].r_offset;\n  if ((input_offset + rel_array[0].r_offset < 0x20030001) &&\n     (0x1fff0def < input_offset + rel_array[0].r_offset)) {\n    rel_array[0].r_offset = input_offset + rel_array[0].r_offset;\n  }\n  else {\n    *result = 0xc;\n    updated_offset = 0xffffffff;\n  }\n  irq_restore(irq_state);\n  return updated_offset;\n}\n\n",
            "current_name": "validate_param_and_update_offset_00000428",
            "entrypoint": "0x00000428",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_00000428": "validate_param_and_update_offset_00000428",
                "local_c": "updated_offset",
                "param_1": "result",
                "param_2": "input_offset",
                "uVar1": "irq_state"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000490": {
            "additional_data": {
                "FUN_00000490": {
                    "read_from_stdio": 1,
                    "read_from_uart": 16,
                    "read_std_input": 1,
                    "read_stdin_data": 1,
                    "read_stdio_input": 1,
                    "read_uart_data": 5,
                    "read_uart_input": 5,
                    "read_uart_stdio": 1
                },
                "param_1": {
                    "arg1": 5,
                    "input_1": 1,
                    "input_param": 2,
                    "input_param_1": 2,
                    "none": 1,
                    "param1": 2,
                    "param_1": 1,
                    "prev_val": 1,
                    "uart_param_1": 2,
                    "unknown_argument_1": 1,
                    "unknown_param_1": 1,
                    "unused_arg1": 1,
                    "unused_param": 6,
                    "unused_param1": 1,
                    "unused_param_1": 3,
                    "unused_parameter": 1
                },
                "param_2": {
                    "arg2": 5,
                    "input_2": 1,
                    "input_param_2": 2,
                    "next_val": 1,
                    "none": 1,
                    "output_param": 2,
                    "param2": 2,
                    "param_2": 1,
                    "uart_param_2": 2,
                    "unknown_argument_2": 1,
                    "unknown_param_2": 1,
                    "unused_arg2": 1,
                    "unused_param": 6,
                    "unused_param2": 1,
                    "unused_param_2": 3,
                    "unused_parameter": 1
                },
                "param_3": {
                    "buffer": 13,
                    "buffer_address": 1,
                    "buffer_param": 3,
                    "buffer_pointer": 1,
                    "buffer_ptr": 3,
                    "buffer_size": 3,
                    "data_buffer": 1,
                    "read_buffer": 1,
                    "uart_buf": 1,
                    "uart_data_buf": 1,
                    "uart_data_buffer": 1,
                    "uart_input_buffer": 1
                },
                "param_4": {
                    "buffer_length": 1,
                    "buffer_size": 8,
                    "input_param_3": 1,
                    "length": 3,
                    "length_param": 2,
                    "size": 10,
                    "size_param": 1,
                    "timeout": 3,
                    "uart_buf_size": 1,
                    "uart_size": 1
                },
                "uVar1": {
                    "output_value": 1,
                    "read_result": 14,
                    "result": 6
                }
            },
            "called": [
                "FUN_00000e14"
            ],
            "calling": [
                "FUN_00004dc8"
            ],
            "code": "\nundefined4 read_from_uart_00000490(undefined4 unused_param,undefined4 unused_param,undefined4 buffer,undefined4 size)\n\n{\n  undefined4 read_result;\n  \n  read_result = uart_stdio_read(buffer,size);\n  return read_result;\n}\n\n",
            "current_name": "read_from_uart_00000490",
            "entrypoint": "0x00000490",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000490": "read_from_uart_00000490",
                "param_1": "unused_param",
                "param_2": "unused_param",
                "param_3": "buffer",
                "param_4": "size",
                "uVar1": "read_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000004f2": {
            "additional_data": {
                "FUN_000004f2": {
                    "initialize_and_return_negative": 1,
                    "initialize_data": 1,
                    "initialize_memory": 3,
                    "initialize_param": 1,
                    "initialize_parameter": 2,
                    "initialize_parameter_and_return": 1,
                    "initialize_pointer_and_return": 1,
                    "initialize_value_and_return": 5,
                    "initialize_value_and_return_error": 2,
                    "set_default_param_and_return_value": 1,
                    "set_default_value": 2,
                    "set_initial_value": 1,
                    "set_param_and_return": 5,
                    "set_param_to_0x13": 1,
                    "set_parameter_and_return": 1,
                    "set_value_and_return": 2,
                    "set_zero_with_error": 1
                },
                "param_1": {
                    "data_pointer": 1,
                    "input": 1,
                    "memory": 1,
                    "memory_pointer": 2,
                    "out_value": 1,
                    "output_param": 2,
                    "output_parameter": 1,
                    "output_pointer": 3,
                    "output_ptr": 2,
                    "output_value": 10,
                    "output_variable": 1,
                    "result_pointer": 1,
                    "result_ptr": 1,
                    "value_pointer": 2,
                    "value_ptr": 1,
                    "value_to_set": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "code": "\nundefined4 set_default_param_and_return_value_000004f2(undefined4 *output_value)\n\n{\n  *output_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "current_name": "set_default_param_and_return_value_000004f2",
            "entrypoint": "0x000004f2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000004f2": "set_default_param_and_return_value_000004f2",
                "param_1": "output_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000514": {
            "additional_data": {
                "0x13": {
                    "initial_value": 3,
                    "value_to_set": 1
                },
                "0xffffffff": {
                    "error_code": 1
                },
                "FUN_00000514": {
                    "initialize_memory": 2,
                    "initialize_parameter": 1,
                    "initialize_value_and_return": 3,
                    "initialize_variable": 2,
                    "set_default_value": 7,
                    "set_default_value_and_return": 2,
                    "set_initial_value_and_return_error": 1,
                    "set_integer_to19": 1,
                    "set_param1_to19": 1,
                    "set_to19_and_return_negative_one": 1,
                    "set_to_thirteen": 1,
                    "set_value_and_return": 1,
                    "set_value_and_return_error": 7,
                    "set_values": 1
                },
                "param_1": {
                    "memory_pointer": 2,
                    "output": 2,
                    "output_data": 1,
                    "output_parameter": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "output_value": 11,
                    "parameter": 1,
                    "pointer": 1,
                    "result": 4,
                    "result_pointer": 3,
                    "set_value": 1,
                    "value_ptr": 2
                },
                "param_1_value": {
                    "value": 1
                },
                "param_1ptr": {
                    "value_ptr": 1
                },
                "value": {
                    "new_value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_000056b8"
            ],
            "code": "\nundefined4 set_default_value_and_return_00000514(undefined4 *output_value)\n\n{\n  *output_value = 0x13;\n  return 0xffffffff;\n}\n\n",
            "current_name": "set_default_value_and_return_00000514",
            "entrypoint": "0x00000514",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000514": "set_default_value_and_return_00000514",
                "param_1": "output_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000534": {
            "additional_data": {
                "FUN_00000534": {
                    "check_input": 1,
                    "check_input_range": 2,
                    "check_input_validity": 3,
                    "check_param_2": 1,
                    "check_param_range": 1,
                    "check_param_validity": 2,
                    "check_valid_input": 13,
                    "check_valid_param": 5,
                    "check_valid_parameter": 2,
                    "check_validity": 1
                },
                "param_1": {
                    "output": 6,
                    "output_ptr": 1,
                    "output_value": 5,
                    "result": 19
                },
                "param_2": {
                    "input": 5,
                    "input_number": 1,
                    "input_param": 5,
                    "input_parameter": 1,
                    "input_value": 18,
                    "value": 1
                },
                "uVar1": {
                    "is_valid": 26
                }
            },
            "called": [],
            "calling": [
                "FUN_00005700"
            ],
            "code": "\nundefined4 check_valid_input_00000534(undefined4 *result,int input_value)\n\n{\n  undefined4 is_valid;\n  \n  *result = 0;\n  if (((input_value == 0) || (input_value == 1)) || (input_value == 2)) {\n    is_valid = 1;\n  }\n  else {\n    is_valid = 0;\n  }\n  return is_valid;\n}\n\n",
            "current_name": "check_valid_input_00000534",
            "entrypoint": "0x00000534",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000534": "check_valid_input_00000534",
                "param_1": "result",
                "param_2": "input_value",
                "uVar1": "is_valid"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000566": {
            "additional_data": {
                "FUN_00000566": {
                    "bit_to_integer_conversion": 1,
                    "byte_to_int": 2,
                    "convert_byte_to_int": 3,
                    "convert_byte_to_unsigned_integer": 1,
                    "convert_int_to_byte": 2,
                    "convert_int_to_bytes": 1,
                    "convert_to_int": 1,
                    "convert_to_little_endian": 4,
                    "count_leading_zeros": 1,
                    "decode": 2,
                    "decode_byte": 1,
                    "decode_byte_to_int": 1,
                    "decode_integer": 3,
                    "decode_lzcount": 1,
                    "extract_bitwise_data": 1,
                    "extracted_int_from_byte": 1,
                    "reverse_bits": 4,
                    "reverse_bits_to_int": 1
                },
                "bVar1": {
                    "bit0": 1,
                    "bit24": 1,
                    "byte1": 13,
                    "byte3": 2,
                    "byte4": 2,
                    "byte_1": 2,
                    "byte_3": 2,
                    "first_byte": 1,
                    "fourth_byte": 1,
                    "input_byte1": 1,
                    "input_byte3": 1,
                    "msb": 2,
                    "param_1_byte1": 1,
                    "upper_byte": 1
                },
                "bVar2": {
                    "bit0": 1,
                    "bit1": 1,
                    "byte0": 2,
                    "byte1": 2,
                    "byte2": 13,
                    "byte_0": 2,
                    "byte_2": 2,
                    "first_byte": 1,
                    "input_byte0": 1,
                    "input_byte2": 1,
                    "lower_byte": 1,
                    "lsb": 2,
                    "param_1_byte2": 1,
                    "second_byte": 1
                },
                "bVar3": {
                    "bit2": 1,
                    "bit8": 1,
                    "byte1": 2,
                    "byte2": 4,
                    "byte3": 13,
                    "byte_1": 2,
                    "byte_3": 2,
                    "input_byte1": 1,
                    "input_byte3": 1,
                    "param_1_byte3": 1,
                    "second_byte": 2,
                    "third_byte": 1
                },
                "bVar4": {
                    "bit16": 1,
                    "bit3": 1,
                    "byte2": 2,
                    "byte3": 4,
                    "byte4": 13,
                    "byte_2": 2,
                    "byte_4": 2,
                    "fourth_byte": 1,
                    "input_byte2": 1,
                    "input_byte4": 1,
                    "param_1_byte4": 1,
                    "third_byte": 2
                },
                "iVar5": {
                    "converted_int": 1,
                    "converted_value": 6,
                    "decoded_integer": 1,
                    "decoded_value": 3,
                    "final_value": 1,
                    "little_endian_value": 1,
                    "result": 15,
                    "reversed_value": 2
                },
                "param_1": {
                    "byte_value": 1,
                    "encoded_integer": 1,
                    "input": 18,
                    "input_byte": 1,
                    "input_int": 1,
                    "input_value": 7,
                    "value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00000610"
            ],
            "code": "\nint convert_int_to_byte_00000566(int input)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)input;\n  byte3 = (byte)((uint)input >> 8);\n  byte4 = (byte)((uint)input >> 0x10);\n  byte1 = (byte)((uint)input >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (input == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "current_name": "convert_int_to_byte_00000566",
            "entrypoint": "0x00000566",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000566": "convert_int_to_byte_00000566",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "result",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000058e": {
            "additional_data": {
                "FUN_0000058e": {
                    "extract_value_and_update": 1,
                    "reverse_parameter": 1,
                    "set_next_node": 1,
                    "set_pointer_value": 1,
                    "swap_pointers": 1,
                    "swap_values": 1,
                    "update_param": 1,
                    "update_param_and_store": 1,
                    "update_param_with_ptr": 1,
                    "update_parameter": 1,
                    "update_pointer": 16,
                    "update_pointer_and_value": 2,
                    "update_ptr_and_value": 2,
                    "update_ptr_with_condition": 1
                },
                "param_1": {
                    "current_node": 1,
                    "current_ptr": 1,
                    "input": 1,
                    "input_param": 1,
                    "input_pointer": 2,
                    "original_pointer": 1,
                    "pointer": 4,
                    "pointer1": 1,
                    "pointer_to_update": 1,
                    "pointer_to_value": 1,
                    "ptr1": 1,
                    "ptr_to_value": 1,
                    "ptr_value": 1,
                    "source": 3,
                    "source_pointer": 5,
                    "source_ptr": 2,
                    "value_ptr": 3
                },
                "param_2": {
                    "destination": 3,
                    "destination_pointer": 3,
                    "destination_ptr": 2,
                    "new_pointer": 4,
                    "new_ptr": 2,
                    "new_value": 3,
                    "new_value_ptr": 1,
                    "next_node": 1,
                    "output": 1,
                    "output_param": 1,
                    "output_pointer": 2,
                    "pointer2": 1,
                    "pointer_to_data": 1,
                    "ptr2": 1,
                    "ptr_to_updated_value": 1,
                    "target_pointer": 2,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00000698"
            ],
            "code": "\nvoid update_pointer_and_value_0000058e(int *source_pointer,undefined4 *new_pointer)\n\n{\n  if (*source_pointer == 0) {\n    *new_pointer = new_pointer;\n  }\n  else {\n    *new_pointer = *(undefined4 *)*source_pointer;\n    *(undefined4 **)*source_pointer = new_pointer;\n  }\n  *source_pointer = (int)new_pointer;\n  return;\n}\n\n",
            "current_name": "update_pointer_and_value_0000058e",
            "entrypoint": "0x0000058e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000058e": "update_pointer_and_value_0000058e",
                "param_1": "source_pointer",
                "param_2": "new_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000005ca": {
            "additional_data": {
                "FUN_000005ca": {
                    "extract_data": 1,
                    "extract_data_from_pointer": 3,
                    "extract_first_item": 1,
                    "extract_non_null_value_from_pointer": 1,
                    "extract_payload": 1,
                    "extract_pointer": 1,
                    "extract_pointer_from_memory": 1,
                    "extract_pointer_value": 1,
                    "extract_value": 4,
                    "extract_value_from_array": 1,
                    "extract_value_from_pointer": 5,
                    "extract_value_from_ptr": 1,
                    "extract_value_or_reset": 1,
                    "get_next_value": 1,
                    "reverse_and_clear_pointer": 1,
                    "reverse_and_reset_pointer": 1,
                    "reverse_array": 1,
                    "reverse_linked_list": 2,
                    "reverse_list": 1,
                    "swap_pointers": 1,
                    "update_pointer": 1
                },
                "param_1": {
                    "array": 2,
                    "array_ptr": 2,
                    "data_array": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "input_pointer": 6,
                    "input_ptr": 3,
                    "int_pointer": 1,
                    "linked_list": 1,
                    "list": 1,
                    "list_ptr": 1,
                    "memory_address": 1,
                    "payload": 1,
                    "pointer": 3,
                    "pointer_to_value": 1,
                    "ptr": 1,
                    "value_pointer": 2
                },
                "puVar1": {
                    "current_node": 1,
                    "extracted_data": 4,
                    "extracted_payload": 1,
                    "extracted_pointer": 2,
                    "extracted_value": 10,
                    "head": 1,
                    "next_value": 1,
                    "output_ptr": 1,
                    "result": 2,
                    "result_ptr": 2,
                    "return_value": 2,
                    "reversed_array": 1,
                    "reversed_head": 1,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00000698"
            ],
            "code": "\nundefined4 * extract_non_null_value_from_pointer_000005ca(int *input_pointer)\n\n{\n  undefined4 *extracted_value;\n  \n  if (*input_pointer == 0) {\n    extracted_value = (undefined4 *)0x0;\n  }\n  else {\n    extracted_value = *(undefined4 **)*input_pointer;\n    if (extracted_value == (undefined4 *)*input_pointer) {\n      *input_pointer = 0;\n    }\n    else {\n      *(undefined4 *)*input_pointer = *extracted_value;\n    }\n  }\n  return extracted_value;\n}\n\n",
            "current_name": "extract_non_null_value_from_pointer_000005ca",
            "entrypoint": "0x000005ca",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000005ca": "extract_non_null_value_from_pointer_000005ca",
                "param_1": "input_pointer",
                "puVar1": "extracted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000610": {
            "additional_data": {
                "D@_1fff03e0": {
                    "saved_value": 1
                },
                "DAT_1fff0354": {
                    "counter": 2,
                    "return_value": 1,
                    "var1": 1
                },
                "DAT_1fff03dc": {
                    "compare_value": 1,
                    "current_data": 1,
                    "saved_address": 1
                },
                "DAT_1fff03e0": {
                    "previous_value": 1,
                    "value": 1
                },
                "DAT_1fff03e4": {
                    "address_array": 1,
                    "lookup_table": 1
                },
                "DAT_1fff0424": {
                    "bit_mask": 1,
                    "pointer": 1,
                    "var2": 1
                },
                "DIV_1fff03dc": {
                    "constant": 1
                },
                "DIV_1fff0424": {
                    "array_pointer": 1
                },
                "FUN_00000566": {
                    "calculate_lsb": 1,
                    "find_lsb_bit": 1,
                    "get_lsb": 1
                },
                "FUN_00000610": {
                    "check_and_modify_data": 1,
                    "check_and_modify_value": 1,
                    "check_and_update_data": 1,
                    "check_and_update_value": 2,
                    "check_data_integrity": 1,
                    "decode_and_update": 1,
                    "extract_and_update_data": 1,
                    "extract_data": 1,
                    "extract_data_from_binary": 1,
                    "process_data": 3,
                    "reverse_and_update_data": 1,
                    "reverse_and_update_variable": 1,
                    "update_data": 2,
                    "update_flag": 1,
                    "validate_data": 1
                },
                "bitarithm_lsb": {
                    "find_lsb": 2,
                    "get_least_significant_bit": 2,
                    "get_lsb_index": 1
                },
                "iVar1": {
                    "current_address": 1,
                    "current_value": 1,
                    "data_offset": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "initial_value": 1,
                    "input_value": 3,
                    "input_var": 1,
                    "matching_var": 1,
                    "original_value": 10,
                    "original_var": 1,
                    "previous_data": 1,
                    "previous_value": 3,
                    "saved_value": 1,
                    "source_address": 1,
                    "start_address": 1,
                    "target_address": 1
                },
                "iVar2": {
                    "bit_index": 2,
                    "bits_index": 1,
                    "calculated_index": 1,
                    "calculated_var": 1,
                    "current_value": 2,
                    "destination_address": 1,
                    "end_address": 1,
                    "extracted_value": 1,
                    "found_address": 1,
                    "index": 7,
                    "lookup_value": 1,
                    "lsb_result": 1,
                    "lsb_value": 3,
                    "matching_address": 1,
                    "modified_value": 2,
                    "offset": 1,
                    "result_index": 1,
                    "temp_var": 1,
                    "updated_data": 1,
                    "updated_value": 1
                },
                "param_1": {
                    "input": 4,
                    "input_param": 1,
                    "input_value": 5,
                    "value": 1
                },
                "uVar3": {
                    "result": 17,
                    "return_status": 1,
                    "return_value": 12,
                    "success_flag": 1
                }
            },
            "called": [
                "FUN_00000566"
            ],
            "calling": [],
            "code": "\nundefined4 check_and_modify_data_00000610(void)\n\n{\n  int original_value;\n  int index;\n  undefined4 result;\n  \n  original_value = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  index = get_least_significant_bit(DAT_1fff0424);\n  index = **(int **)(&DAT_1fff03e4 + index * 4);\n  if (original_value == index + -8) {\n    result = 0;\n  }\n  else {\n    if ((original_value != 0) && (*(char *)(original_value + 4) == '\\t')) {\n      *(undefined *)(original_value + 4) = 10;\n    }\n    *(undefined *)(index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(index + -2);\n    result = 1;\n    DAT_1fff03dc = index + -8;\n  }\n  return result;\n}\n\n",
            "current_name": "check_and_modify_data_00000610",
            "entrypoint": "0x00000610",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000610": "check_and_modify_data_00000610",
                "bitarithm_lsb": "get_least_significant_bit",
                "iVar1": "original_value",
                "iVar2": "index",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000698": {
            "additional_data": {
                "DAT_1fff03e4": {
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_list": 4,
                    "list": 2,
                    "list_1": 1,
                    "list_array": 1,
                    "list_data": 1,
                    "list_head": 1
                },
                "DAT_1fff0424": {
                    "bit_mask": 1,
                    "bitmask": 4,
                    "flag": 2,
                    "flag_buffer": 1,
                    "flags": 3,
                    "list_status": 1,
                    "status": 1
                },
                "FUN_0000058e": {
                    "update_element": 2,
                    "update_value_at_index": 1
                },
                "FUN_000005ca": {
                    "get_c_list_pointer": 1,
                    "get_last_element": 1,
                    "get_updated_element": 1
                },
                "FUN_00000698": {
                    "update_data": 20,
                    "update_data_state": 1,
                    "update_linked_list": 1,
                    "update_list": 5,
                    "update_param": 1,
                    "update_parameter": 2,
                    "update_parameters": 1
                },
                "byte": {
                    "byte": 8,
                    "byte_data": 1,
                    "byte_val": 2,
                    "byte_value": 3
                },
                "byte_1": {
                    "byte_val_1": 1,
                    "byte_value": 1
                },
                "byte_2": {
                    "byte_val_2": 1
                },
                "char": {
                    "byte_value": 1
                },
                "clist_lpop": {
                    "left_pop": 2,
                    "list_left_pop": 3,
                    "lpop": 1,
                    "pop_from_list": 1,
                    "remove_and_update_c_list": 1,
                    "remove_element_from_list": 1,
                    "remove_node_from_list": 1
                },
                "clist_rpush": {
                    "add_and_update_c_list": 1,
                    "add_element_to_list": 1,
                    "insert_node_to_list": 1,
                    "list_right_push": 3,
                    "push_to_list": 1,
                    "right_push": 2,
                    "rpush": 1
                },
                "dataList": {
                    "list": 1
                },
                "dataPtr": {
                    "data": 1
                },
                "flag": {
                    "flag": 1
                },
                "int": {
                    "int": 2,
                    "int_value": 1
                },
                "newValue": {
                    "value": 1
                },
                "param_1": {
                    "data": 7,
                    "data_index": 2,
                    "data_pointer": 7,
                    "data_ptr": 3,
                    "data_structure_address": 1,
                    "id": 1,
                    "list_index": 4,
                    "list_pointer": 1,
                    "node": 1,
                    "param": 2,
                    "param1": 1,
                    "param_a": 1
                },
                "param_2": {
                    "new_data": 1,
                    "new_parameter": 1,
                    "new_parameter_value": 1,
                    "new_val": 1,
                    "new_value": 22,
                    "param2": 1,
                    "param_b": 1,
                    "value": 3
                },
                "sbyte": {
                    "bit_index": 1,
                    "s_byte": 1,
                    "sbyte": 1,
                    "signed_byte": 2,
                    "signed_byte_val": 2
                }
            },
            "called": [
                "FUN_0000058e",
                "FUN_000005ca"
            ],
            "calling": [
                "FUN_000010d4",
                "FUN_00002434",
                "FUN_000024bc",
                "FUN_00000794"
            ],
            "code": "\nvoid update_data_state_00000698(int data,uint new_value)\n\n{\n  if (new_value < 9) {\n    if ((8 < *(byte *)(data + 4)) &&\n       (list_left_pop(&DAT_1fff03e4 + (uint)*(byte *)(data + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(data + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(signed_byte_val *)(data + 5));\n    }\n  }\n  else if (*(byte *)(data + 4) < 9) {\n    list_right_push(&DAT_1fff03e4 + (uint)*(byte *)(data + 5) * 4,data + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(signed_byte_val *)(data + 5);\n  }\n  *(byte_value *)(data + 4) = (byte_value)new_value;\n  return;\n}\n\n",
            "current_name": "update_data_state_00000698",
            "entrypoint": "0x00000698",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000698": "update_data_state_00000698",
                "char": "byte_value",
                "clist_lpop": "list_left_pop",
                "clist_rpush": "list_right_push",
                "param_1": "data",
                "param_2": "new_value",
                "sbyte": "signed_byte_val"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000738": {
            "additional_data": {
                "DAT_1fff0354": {
                    "data2": 1,
                    "data_2": 1,
                    "data_flag": 1,
                    "data_pointer2": 1,
                    "flag": 7,
                    "flag_variable": 1,
                    "is_thread_yield_higher": 1,
                    "ptr_flag": 1,
                    "result": 2,
                    "status_flag": 2
                },
                "DAT_1fff03dc": {
                    "data": 1,
                    "data1": 3,
                    "data_1": 1,
                    "data_address": 2,
                    "data_buffer": 3,
                    "data_pointer": 1,
                    "data_pointer1": 1,
                    "data_ptr": 1,
                    "memory_location": 1,
                    "ptr_data": 1,
                    "resource_data": 1
                },
                "FUN_00000738": {
                    "check_and_execute": 1,
                    "check_and_handle_irq": 1,
                    "check_and_perform_action": 1,
                    "check_and_set_irq": 1,
                    "check_and_update_parameters": 1,
                    "check_and_yield": 9,
                    "check_and_yield_if_low_resources": 1,
                    "check_and_yield_if_necessary": 1,
                    "check_and_yield_or_set_flag": 2,
                    "check_availability": 1,
                    "check_conditions_and_handle": 1,
                    "check_if_param_valid": 1,
                    "check_input_validity": 1,
                    "check_irq": 1,
                    "check_irq_and_yield": 1,
                    "check_param": 2,
                    "check_param_and_interrupt": 1,
                    "check_param_range": 1,
                    "check_param_validity": 1,
                    "check_parameters": 1,
                    "check_validity_and_yield": 1
                },
                "FUN_0000093c": {
                    "thread_yield_higher": 1,
                    "yield_higher_priority": 1,
                    "yield_higher_priority_thread": 1,
                    "yield_thread": 1,
                    "yield_to_higher": 1,
                    "yield_to_higher_priority": 1,
                    "yield_to_higher_thread": 1
                },
                "FUN_00000d2a": {
                    "check_irq": 1,
                    "get_irq_flag": 1,
                    "get_irq_status": 4,
                    "irq_is_in": 1
                },
                "iVar1": {
                    "interrupt_status": 1,
                    "irq_flag": 1,
                    "irq_status": 11,
                    "is_in_interrupt": 1,
                    "is_in_irq": 10,
                    "is_irq_active": 1,
                    "is_irq_in": 5
                },
                "irq_is_in": {
                    "check_irq": 1,
                    "is_in_irq_function": 1
                },
                "param_1": {
                    "input": 5,
                    "input_param": 2,
                    "input_value": 17,
                    "param": 2,
                    "parameter": 1,
                    "value": 4
                },
                "thread_yield_higher": {
                    "yield_high_priority_thread": 1,
                    "yield_to_higher_priority_thread": 1
                }
            },
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "code": "\nvoid check_and_yield_or_set_flag_00000738(ushort input_value)\n\n{\n  int irq_status;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (input_value < *(byte *)(DAT_1fff03dc + 5))) {\n    irq_status = check_irq();\n    if (irq_status == 0) {\n      yield_to_higher_priority_thread();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "check_and_yield_or_set_flag_00000738",
            "entrypoint": "0x00000738",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000738": "check_and_yield_or_set_flag_00000738",
                "iVar1": "irq_status",
                "irq_is_in": "check_irq",
                "param_1": "input_value",
                "thread_yield_higher": "yield_to_higher_priority_thread"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000794": {
            "additional_data": {
                "DAT_1fff0350": {
                    "count": 1,
                    "counter": 1
                },
                "DAT_1fff0358": {
                    "address1": 1,
                    "memory_address1": 1
                },
                "DAT_1fff03dc": {
                    "cpu_status": 1,
                    "scheduler_status": 1
                },
                "DAT_1fff03e0": {
                    "address2": 1,
                    "memory_address2": 1
                },
                "FUN_00000698": {
                    "do_something": 1,
                    "handle_interrupt": 1,
                    "perform_action": 1,
                    "perform_operation": 1,
                    "set_interrupt_disable": 1
                },
                "FUN_00000794": {
                    "initialize": 1,
                    "initialize_context": 2,
                    "initialize_memory": 6,
                    "initialize_process": 2,
                    "initialize_stack": 16,
                    "initialize_stack_and_return_pointer": 1,
                    "initialize_system": 2,
                    "restore_registers": 1
                },
                "FUN_00000930": {
                    "disable_irq": 1,
                    "do_another_thing": 1,
                    "finalize_initialization": 1,
                    "perform_cleanup": 1,
                    "scheduler_set_status": 1
                },
                "FUN_00000cd0": {
                    "get_control_value": 1,
                    "get_interrupt_data": 1,
                    "get_random_value": 1,
                    "get_some_value": 1,
                    "get_switch_context": 1
                },
                "cpu_switch_context_exit": {
                    "cpu_switch_context_exit": 1,
                    "exit_context_switch": 1,
                    "switch_context_exit": 1
                },
                "extraout_r1": {
                    "error": 1,
                    "error_code": 1,
                    "error_flag": 1,
                    "exit_status": 1,
                    "extra_variable": 1,
                    "result": 3,
                    "return_value": 18,
                    "return_value_from_fun_00000cd0": 1,
                    "retval": 1,
                    "status": 1
                },
                "iStack_18": {
                    "count2": 1,
                    "counter2": 6,
                    "counter_2": 1,
                    "index": 1,
                    "index2": 1,
                    "inner_loop_counter": 4,
                    "inner_loop_index": 1,
                    "inner_loop_iterator": 1,
                    "inner_loop_var": 1,
                    "j": 1,
                    "loop_counter2": 7,
                    "loop_var2": 2,
                    "loop_variable1": 1,
                    "loop_variable2": 1
                },
                "iStack_1c": {
                    "count": 1,
                    "count1": 1,
                    "counter1": 6,
                    "counter_1": 1,
                    "i": 1,
                    "index1": 1,
                    "loop_counter": 1,
                    "loop_counter1": 6,
                    "loop_var1": 2,
                    "loop_variable1": 1,
                    "loop_variable2": 1,
                    "outer_loop_counter": 4,
                    "outer_loop_index": 1,
                    "outer_loop_iterator": 1,
                    "outer_loop_var": 1
                },
                "iVar1": {
                    "count": 1,
                    "counter": 6,
                    "index": 9,
                    "iterator": 2,
                    "iterator_var": 1,
                    "loop_counter": 4,
                    "loop_variable3": 1,
                    "stack_offset": 1,
                    "variable1": 1
                },
                "irq_disable": {
                    "disable_interrupts": 1
                },
                "param_1": {
                    "action_parameter1": 1,
                    "interrupt_number": 1,
                    "interrupt_status": 1,
                    "irq_status": 3,
                    "param1": 1,
                    "unused1": 1
                },
                "param_2": {
                    "action_parameter2": 1,
                    "context": 2,
                    "interrupt_data": 1,
                    "param2": 1,
                    "sched_status": 2,
                    "unused2": 1
                },
                "piStack_14": {
                    "data_pointer": 1,
                    "memory_pointer": 2,
                    "memory_ptr": 1,
                    "pointer": 1,
                    "ptr": 2,
                    "ptr_to_memory": 1,
                    "stack": 2,
                    "stack_base": 1,
                    "stack_pointer": 15,
                    "stack_pointer2": 1,
                    "stack_ptr": 2
                },
                "puVar2": {
                    "context": 2,
                    "context_pointer": 3,
                    "context_ptr": 1,
                    "pointer": 6,
                    "pointer_var": 5,
                    "process_status": 1,
                    "ptr": 3,
                    "sched_status_pointer": 1,
                    "stack_pointer": 1,
                    "status_pointer": 2,
                    "status_ptr": 2
                },
                "sched_set_status": {
                    "set_scheduler_status": 3,
                    "set_status": 1
                },
                "uVar3": {
                    "adjusted_pointer": 1,
                    "aligned_address": 2,
                    "aligned_pointer": 6,
                    "aligned_ptr": 3,
                    "aligned_stack_pointer": 2,
                    "aligned_status_ptr": 1,
                    "aligned_value": 1,
                    "calculated_value": 1,
                    "computed_value": 1,
                    "masked_pointer": 1,
                    "stack_pointer": 6,
                    "variable2": 1
                }
            },
            "called": [
                "FUN_00000698",
                "FUN_00000cd0",
                "FUN_00000930"
            ],
            "calling": [],
            "code": "\nint * initialize_stack_and_return_pointer_00000794(void)\n\n{\n  int return_value;\n  int index;\n  undefined4 *pointer;\n  uint stack_pointer;\n  int counter1;\n  int loop_counter2;\n  int *stack_pointer;\n  \n  disable_interrupts();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  set_scheduler_status(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  index = 0;\n  DAT_1fff03dc = 0;\n  switch_context_exit();\n  stack_pointer = (int)pointer + index & 0xfffffffc;\n  stack_pointer = (int *)(stack_pointer - 4);\n  *stack_pointer = 0x77777777;\n  if (((uint)stack_pointer & 7) != 0) {\n    stack_pointer = (int *)(stack_pointer - 8);\n    *stack_pointer = 0x88888888;\n  }\n  stack_pointer[-1] = 0x1000000;\n  stack_pointer[-2] = index << 0xd;\n  stack_pointer[-3] = 0x795;\n  stack_pointer = stack_pointer + -4;\n  *stack_pointer = 0;\n  for (loop_counter2 = 3; 0 < loop_counter2; loop_counter2 = loop_counter2 + -1) {\n    stack_pointer = stack_pointer + -1;\n    *stack_pointer = loop_counter2;\n  }\n  stack_pointer = stack_pointer + -1;\n  *stack_pointer = return_value;\n  for (counter1 = 0xb; 3 < counter1; counter1 = counter1 + -1) {\n    stack_pointer = stack_pointer + -1;\n    *stack_pointer = counter1;\n  }\n  stack_pointer[-1] = -3;\n  return stack_pointer + -1;\n}\n\n",
            "current_name": "initialize_stack_and_return_pointer_00000794",
            "entrypoint": "0x00000794",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000794": "initialize_stack_and_return_pointer_00000794",
                "cpu_switch_context_exit": "switch_context_exit",
                "extraout_r1": "return_value",
                "iStack_18": "loop_counter2",
                "iStack_1c": "counter1",
                "iVar1": "index",
                "irq_disable": "disable_interrupts",
                "piStack_14": "stack_pointer",
                "puVar2": "pointer",
                "sched_set_status": "set_scheduler_status",
                "uVar3": "stack_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000007dc": {
            "additional_data": {
                "FUN_000007dc": {
                    "allocate_and_initialize_memory": 1,
                    "initialize_array": 2,
                    "initialize_buffer": 1,
                    "initialize_data": 2,
                    "initialize_memory": 23,
                    "initialize_memory_block": 2
                },
                "local_10": {
                    "count": 3,
                    "counter2": 7,
                    "i": 3,
                    "inner_counter": 1,
                    "j": 7,
                    "loop_count": 1,
                    "loop_counter": 1,
                    "loop_counter2": 4,
                    "loop_index": 1,
                    "loop_var2": 1,
                    "loop_variable2": 2
                },
                "local_14": {
                    "count": 1,
                    "counter": 2,
                    "counter1": 7,
                    "i": 7,
                    "index": 3,
                    "j": 1,
                    "loop_count": 1,
                    "loop_counter1": 4,
                    "loop_counter_2": 1,
                    "loop_index": 1,
                    "loop_var1": 1,
                    "loop_variable1": 2
                },
                "local_c": {
                    "array": 1,
                    "array_ptr": 1,
                    "buffer": 1,
                    "data": 1,
                    "mem_ptr": 2,
                    "memory": 3,
                    "memory_block": 1,
                    "memory_pointer": 5,
                    "memory_ptr": 3,
                    "memory_start": 1,
                    "pointer": 1,
                    "ptr": 10,
                    "ptr_array": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 4,
                    "arg_1": 1,
                    "buffer_size": 1,
                    "data": 1,
                    "initial_value": 3,
                    "input": 1,
                    "input_parameter": 1,
                    "input_value": 5,
                    "memory_address": 1,
                    "param": 2,
                    "param1": 6,
                    "parameter1": 2,
                    "ptr": 1,
                    "uninitialized_value": 1
                },
                "param_2": {
                    "arg2": 4,
                    "arg_2": 1,
                    "count": 1,
                    "data_size": 1,
                    "initial_value": 1,
                    "input_value": 1,
                    "output_value": 2,
                    "param2": 6,
                    "parameter2": 2,
                    "size": 1,
                    "start_value": 1,
                    "value": 8,
                    "value_to_set": 1,
                    "value_to_store": 1
                },
                "param_3": {
                    "arg3": 4,
                    "arg_3": 1,
                    "length": 1,
                    "offset": 10,
                    "offset1": 1,
                    "param3": 4,
                    "parameter3": 2,
                    "size": 5,
                    "size_offset": 1,
                    "start_offset": 1,
                    "value1": 1
                },
                "param_4": {
                    "alignment": 7,
                    "arg4": 4,
                    "arg_4": 1,
                    "base_address": 2,
                    "end_offset": 1,
                    "offset": 1,
                    "offset2": 1,
                    "param4": 4,
                    "parameter4": 2,
                    "size": 7,
                    "value2": 1
                },
                "uVar1": {
                    "adjusted_address": 1,
                    "aligned_address": 1,
                    "aligned_end_offset": 1,
                    "aligned_size": 11
                }
            },
            "called": [],
            "calling": [
                "FUN_000010d4"
            ],
            "code": "\nint * initialize_memory_block_000007dc(undefined4 param1,int value,int offset,int size)\n\n{\n  uint aligned_size;\n  int i;\n  int j;\n  int *ptr;\n  \n  aligned_size = size + offset & 0xfffffffc;\n  ptr = (int *)(aligned_size - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(aligned_size - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = param1;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (j = 3; 0 < j; j = j + -1) {\n    ptr = ptr + -1;\n    *ptr = j;\n  }\n  ptr = ptr + -1;\n  *ptr = value;\n  for (i = 0xb; 3 < i; i = i + -1) {\n    ptr = ptr + -1;\n    *ptr = i;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "current_name": "initialize_memory_block_000007dc",
            "entrypoint": "0x000007dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000007dc": "initialize_memory_block_000007dc",
                "local_10": "j",
                "local_14": "i",
                "local_c": "ptr",
                "param_1": "param1",
                "param_2": "value",
                "param_3": "offset",
                "param_4": "size",
                "uVar1": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000008b8": {
            "additional_data": {
                "Elf32_Rel": {
                    "relocation_entry": 2
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "p_relocation_array": 1,
                    "rel_array": 1,
                    "rel_array_end": 2,
                    "reloc_array": 1,
                    "relocation_array": 4
                },
                "FUN_000008b8": {
                    "calculate_aligned_offset": 1,
                    "calculate_array_size": 2,
                    "calculate_difference_in_addresses": 1,
                    "calculate_distance": 1,
                    "calculate_offset": 1,
                    "calculate_offset_difference": 1,
                    "calculate_rel_offset": 1,
                    "calculate_relative_offset": 1,
                    "calculate_reloc_size": 1,
                    "calculate_relocation_offset": 4,
                    "calculate_relocation_size": 1,
                    "calculate_remaining_memory": 1,
                    "calculate_remaining_offset": 1,
                    "count_relocated_entries": 1,
                    "count_relocs_near_end": 1,
                    "find_last_non_zero_offset": 1,
                    "find_last_offset": 1,
                    "find_last_relocation_offset": 1,
                    "find_last_valid_offset": 1,
                    "find_next_valid_offset": 1,
                    "get_array_length": 2,
                    "get_elf32_rel_array_size": 1,
                    "get_last_index": 1,
                    "get_last_offset": 1,
                    "get_relocated_section_length": 1,
                    "get_relocation_offset": 1
                },
                "local_c": {
                    "current_element": 1,
                    "current_entry": 2,
                    "current_rel": 3,
                    "current_rel_entry": 5,
                    "current_relocation": 7,
                    "current_relocation_entry": 2,
                    "p_relocation": 1,
                    "rel_entry": 5,
                    "rel_table_entry": 1,
                    "reloc_ptr": 1,
                    "relocation_entry": 2,
                    "relocation_ptr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0000211c"
            ],
            "code": "\nint calculate_relocation_offset_000008b8(void)\n\n{\n  relocation_entry *current_relocation;\n  \n  for (current_relocation = (relocation_entry *)&DAT_1fff0000;\n      (current_relocation->r_offset == 0xe7fee7fe && (current_relocation < relocation_array));\n      current_relocation = (relocation_entry *)&current_relocation->r_info) {\n  }\n  return ((int)relocation_array - (int)current_relocation >> 2) << 2;\n}\n\n",
            "current_name": "calculate_relocation_offset_000008b8",
            "entrypoint": "0x000008b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel": "relocation_entry",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array",
                "FUN_000008b8": "calculate_relocation_offset_000008b8",
                "local_c": "current_relocation"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000900": {
            "additional_data": {
                "FUN_00000900": {
                    "get_main_stack_pointer": 23,
                    "get_main_stack_pointer_value": 1,
                    "get_stack_pointer": 6,
                    "get_stack_pointer_from_main": 1
                },
                "uVar1": {
                    "main_stack_pointer": 22,
                    "stack_pointer": 9
                }
            },
            "called": [],
            "calling": [
                "FUN_0000211c"
            ],
            "code": "\nundefined4 get_stack_pointer_from_main_00000900(void)\n\n{\n  undefined4 main_stack_pointer;\n  \n  main_stack_pointer = getMainStackPointer();\n  return main_stack_pointer;\n}\n\n",
            "current_name": "get_stack_pointer_from_main_00000900",
            "entrypoint": "0x00000900",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000900": "get_stack_pointer_from_main_00000900",
                "uVar1": "main_stack_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000091c": {
            "additional_data": {
                "0x1fff0000": {
                    "memory_address": 1,
                    "memory_region_size": 1
                },
                "DAT_0000001c": {
                    "constant": 1
                },
                "DAT_0000091c": {
                    "memory_flag": 1
                },
                "FUN_0000091c": {
                    "get_base_address": 2,
                    "get_flag_value": 1,
                    "get_magic_number": 3,
                    "get_magic_value": 1,
                    "get_mask_value": 1,
                    "get_memory_address": 18,
                    "get_memory_flag": 1,
                    "get_memory_region": 1,
                    "get_memory_region_base_address": 1,
                    "get_memory_value": 1,
                    "get_return_value": 1
                },
                "PTR_00000004": {
                    "result": 1
                },
                "return_value": {
                    "address": 1,
                    "base_address": 1
                },
                "uint1": {
                    "value": 1
                },
                "undefined4": {
                    "int": 1,
                    "uint32": 1,
                    "uint32_t": 14
                }
            },
            "called": [],
            "calling": [
                "FUN_0000211c"
            ],
            "code": "\nuint32_t get_memory_region_base_address_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "current_name": "get_memory_region_base_address_0000091c",
            "entrypoint": "0x0000091c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000091c": "get_memory_region_base_address_0000091c",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000930": {
            "additional_data": {
                "FUN_00000930": {
                    "enable_and_trigger_irq": 1,
                    "enable_interrupt": 1,
                    "enable_interrupt_and_call_software_interrupt": 1,
                    "enable_interrupt_and_invoke_software_interrupt": 2,
                    "enable_interrupt_and_raise_software_interrupt": 1,
                    "enable_interrupt_and_trigger_software_interrupt": 8,
                    "enable_interrupts_and_trigger_software_interrupt": 2,
                    "enable_interrupts_and_wait": 1,
                    "enable_irq_and_call_interrupt": 1,
                    "enable_irq_and_invoke_software_interrupt": 2,
                    "enable_irq_and_trigger_interrupt": 2,
                    "enable_irq_and_trigger_swi": 1,
                    "enable_software_interrupts": 1,
                    "execute_infinite_loop": 1,
                    "infinite_loop": 2,
                    "run_infinite_loop": 2,
                    "run_interrupt_handler": 1,
                    "start_infinite_loop": 1
                },
                "FUN_00000cf0": {
                    "generate_undefined_four": 1,
                    "get_interrupt_status": 3,
                    "get_status": 3,
                    "get_undefined4": 1,
                    "get_undefined4_value": 4,
                    "get_undefined_value": 3,
                    "get_undetermined_value": 1,
                    "get_unknown_value": 1,
                    "initialize_device": 2,
                    "initialize_interrupt": 3,
                    "initialize_irq": 1,
                    "initialize_some_value": 1,
                    "initialize_subsystem": 1,
                    "initialize_system": 1,
                    "initialize_undefined4": 3,
                    "retrieve_data": 1
                },
                "do": {
                    "infinite_loop": 1
                },
                "software_interrupt": {
                    "trigger_software_interrupt": 1
                }
            },
            "called": [
                "FUN_00000cf0"
            ],
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "code": "\nvoid enable_interrupts_and_trigger_software_interrupt_00000930(void)\n\n{\n  irq_enable();\n  trigger_software_interrupt(1);\n  infinite_loop {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "enable_interrupts_and_trigger_software_interrupt_00000930",
            "entrypoint": "0x00000930",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000930": "enable_interrupts_and_trigger_software_interrupt_00000930",
                "do": "infinite_loop",
                "software_interrupt": "trigger_software_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000093c": {
            "additional_data": {
                "": {
                    "original_parameter_name": 1,
                    "result": 1
                },
                "DAT_e000ed04": {
                    "flag": 1
                },
                "FUN_0000093c": {
                    "enable_interrupt": 2,
                    "enable_interrupts": 1,
                    "enable_memory_protection": 3,
                    "set_bit_in_memory": 1,
                    "set_bit_in_register": 3,
                    "set_e000ed04_bit": 1,
                    "set_enable_interrupt_flag": 1,
                    "set_flag": 6,
                    "set_flag_in_control_register": 1,
                    "set_flag_in_e000ed04": 1,
                    "set_flag_in_status_register": 1,
                    "set_flag_register": 1,
                    "set_global_flag": 1,
                    "set_hardware_flag": 1,
                    "set_high_priority_bit": 1,
                    "set_memory_bit": 1,
                    "set_memory_flag": 1,
                    "set_memory_permission": 1,
                    "set_memory_protection_flag": 1,
                    "set_register_bit": 1,
                    "set_top_bit_register": 1
                },
                "_DAT_e000ed04": {
                    "control_register": 1,
                    "flag": 3,
                    "flag_register": 1,
                    "flags": 1,
                    "hardware_flag": 1,
                    "interrupt_control_register": 3,
                    "interrupt_flags": 1,
                    "memory_address": 1,
                    "memory_flag": 1,
                    "memory_location": 1,
                    "memory_protection_flag": 1,
                    "memory_protection_register": 2,
                    "register": 3,
                    "register_value": 6,
                    "status_register": 2
                },
                "_e000ed04": {
                    "current_permissions": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00002434",
                "FUN_00000738",
                "FUN_00001348"
            ],
            "code": "\n\n\nvoid set_flag_in_status_register_0000093c(void)\n\n{\n  _DATcurrent_permissions = _DATcurrent_permissions | 0x10000000;\n  return;\n}\n\n",
            "current_name": "set_flag_in_status_register_0000093c",
            "entrypoint": "0x0000093c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000093c": "set_flag_in_status_register_0000093c",
                "_e000ed04": "current_permissions"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000990": {
            "called": [],
            "calling": [
                "FUN_0000099c"
            ],
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00000990",
            "entrypoint": "0x00000990",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0000099c": {
            "additional_data": {
                "0x1fff0df0": {
                    "final_address": 1
                },
                "DAT_00007c60": {
                    "initial_data_value": 1
                },
                "DAT_1fff0000": {
                    "initial_relocation_data": 1
                },
                "DAT_1fff0350": {
                    "final_relocation_data": 1
                },
                "Elf32_Rel": {
                    "elf32_relocation_record": 1,
                    "relocation_entry": 2
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "initial_relocation_data_array": 1
                },
                "FUNC_00000990": {
                    "board_init": 5,
                    "board_initialization": 1,
                    "function_990": 1,
                    "libc_init_array": 1
                },
                "FUN_0000099c": {
                    "initialize": 2,
                    "initialize_board": 2,
                    "initialize_startup_components": 1,
                    "initialize_system": 26
                },
                "FUN_00000db0": {
                    "function_db0": 1,
                    "initialize_library": 1,
                    "kernel_init": 1,
                    "libc_init": 1,
                    "libc_init_array": 3,
                    "libc_initialization": 1
                },
                "FUN_00000e64": {
                    "board_init": 1,
                    "function_e64": 1,
                    "perform_post_startup_tasks": 1,
                    "post_startup": 5
                },
                "FUN_00000f8c": {
                    "function_f8c": 1,
                    "perform_pre_startup_tasks": 1,
                    "pre_startup": 6
                },
                "FUN_0000459c": {
                    "function_459c": 1,
                    "kernel_init": 5,
                    "kernel_initialization": 1,
                    "post_startup": 1
                },
                "__libc_init_array": {
                    "initialize_libc_array": 3
                },
                "board_init": {
                    "initialize_board": 3
                },
                "kernel_init": {
                    "initialize_kernel": 3
                },
                "local_10": {
                    "data_pointer": 21,
                    "data_ptr": 4,
                    "dword_array": 1,
                    "dword_array_pointer": 1,
                    "pointer_to_dat_00007c60": 1,
                    "pointer_to_data": 1,
                    "pointer_to_memory_data": 1
                },
                "local_14": {
                    "pointer_to_stack_variable": 1,
                    "pointer_to_temporary_data": 1,
                    "pointer_to_u_stack_18": 1,
                    "stack_address": 1,
                    "stack_frame": 2,
                    "stack_frame_pointer": 1,
                    "stack_frame_ptr": 1,
                    "stack_pointer": 19,
                    "temp_pointer": 1,
                    "temp_ptr": 2
                },
                "local_c": {
                    "current_rel_entry": 1,
                    "elf_rel_pointer": 3,
                    "elf_relocation": 1,
                    "pointer_to_1fff0000": 1,
                    "pointer_to_elf_data": 1,
                    "pointer_to_structure": 1,
                    "rel_pointer": 9,
                    "rel_ptr": 3,
                    "rel_table_pointer": 1,
                    "relocation_entry": 1,
                    "relocation_pointer": 7,
                    "relocation_ptr": 1
                },
                "post_startup": {
                    "perform_post_startup_tasks": 2,
                    "post_initialization": 1
                },
                "pre_startup": {
                    "perform_pre_startup_tasks": 2,
                    "pre_initialization": 1
                },
                "r_offset": {
                    "offset_value": 1
                },
                "uStack_18": {
                    "ref_to_non_initialized_variable": 1,
                    "temp_value": 3,
                    "temporary_data": 1
                }
            },
            "called": [
                "FUN_00000f8c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000db0",
                "FUN_0000459c"
            ],
            "calling": [],
            "code": "\nvoid initialize_system_0000099c(void)\n\n{\n  undefined4 temp_value;\n  undefined4 *stack_pointer;\n  dword *data_pointer;\n  relocation_entry *rel_pointer;\n  \n  stack_pointer = &temp_value;\n  data_pointer = (dword *)&DAT_00007c60;\n  perform_pre_startup_tasks();\n  rel_pointer = (relocation_entry *)&DAT_1fff0000;\n  while (rel_pointer < &temp_value) {\n    rel_pointer->offset_value = 0xe7fee7fe;\n    rel_pointer = (relocation_entry *)((int)rel_pointer + 4);\n  }\n  rel_pointer = initial_relocation_data_array;\n  while (rel_pointer < (relocation_entry *)&DAT_1fff0350) {\n    rel_pointer->offset_value = *data_pointer;\n    data_pointer = data_pointer + 1;\n    rel_pointer = (relocation_entry *)&rel_pointer->r_info;\n  }\n  rel_pointer = (relocation_entry *)&DAT_1fff0350;\n  while (rel_pointer < (undefined4 *)0x1fff0df0) {\n    rel_pointer->offset_value = 0;\n    rel_pointer = (relocation_entry *)((int)rel_pointer + 4);\n  }\n  perform_post_startup_tasks();\n  initialize_board();\n  initialize_libc_array();\n  initialize_kernel();\n  return;\n}\n\n",
            "current_name": "initialize_system_0000099c",
            "entrypoint": "0x0000099c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel": "relocation_entry",
                "Elf32_Rel_ARRAY_1fff0200": "initial_relocation_data_array",
                "FUN_0000099c": "initialize_system_0000099c",
                "__libc_init_array": "initialize_libc_array",
                "board_init": "initialize_board",
                "kernel_init": "initialize_kernel",
                "local_10": "data_pointer",
                "local_14": "stack_pointer",
                "local_c": "rel_pointer",
                "post_startup": "perform_post_startup_tasks",
                "pre_startup": "perform_pre_startup_tasks",
                "r_offset": "offset_value",
                "uStack_18": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000a30": {
            "additional_data": {
                "FUN_00000a30": {
                    "handle_nmi": 24,
                    "handle_nmi_exception": 7
                },
                "FUN_00000f04": {
                    "log_error": 2,
                    "print_error": 1,
                    "print_message": 2,
                    "process_char": 7,
                    "process_character": 2,
                    "process_data": 10,
                    "process_error_message": 2,
                    "process_event": 1
                },
                "in_r3": {
                    "base_address": 1,
                    "context_ptr": 1,
                    "exception_context": 2,
                    "exception_data": 1,
                    "input_parameter": 1,
                    "input_register": 1,
                    "input_value": 1,
                    "interrupt_id": 1,
                    "offset": 7,
                    "param": 6,
                    "parameter": 1,
                    "register_r3": 1,
                    "register_value": 2,
                    "stack_offset": 2
                },
                "param_1": {
                    "character": 10,
                    "error_code": 2
                },
                "param_2": {
                    "data": 3,
                    "error_address": 1,
                    "message_info": 1,
                    "message_length": 1,
                    "param_2": 1,
                    "value": 5
                }
            },
            "called": [
                "FUN_00000f04"
            ],
            "calling": [],
            "code": "\nundefined * handle_nmi_exception_00000a30(void)\n\n{\n  int offset;\n  \n  core_panic(4,\"NMI HANDLER\");\n  return &stack0xe000ffe0 + -*(int *)(offset + 0x4c);\n}\n\n",
            "current_name": "handle_nmi_exception_00000a30",
            "entrypoint": "0x00000a30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000a30": "handle_nmi_exception_00000a30",
                "in_r3": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "additional_data": {
                "FUN_00000cc0": {
                    "disable_and_return_interrupt_status": 1,
                    "disable_interrupt_handler": 1,
                    "disable_interrupts": 2,
                    "disable_ir_qand_return_interrupt_status": 1,
                    "disable_ir_qinterrupts_and_get_ir_qinterrupts_state": 1,
                    "disable_ir_qinterrupts_and_get_irq_state": 1,
                    "disable_ir_qinterrupts_and_return_interrupts_state": 1,
                    "disable_ir_qinterrupts_and_return_ir_qinterrupts_status": 1,
                    "disable_ir_qinterrupts_and_return_irq_status": 1,
                    "disable_ir_qinterrupts_with_handler_check": 1,
                    "disable_irq_and_return_irq_status": 1,
                    "get_interrupt_status": 1,
                    "get_irq_interrupt_state": 1,
                    "get_irq_interrupts_state": 1,
                    "handle_dummy": 1,
                    "handle_dummy_interrupt": 9,
                    "handle_dummy_irq": 1,
                    "handle_dummy_isr": 1,
                    "handle_ir_qinterrupts": 2,
                    "handle_irq_interrupt": 1,
                    "improved_get_irq_interrupt_status": 1
                },
                "FUN_00000f04": {
                    "process_character_and_undefined": 1,
                    "process_data": 1,
                    "process_interrupt": 1,
                    "write_log_entry": 1
                },
                "bVar1": {
                    "is_current_mode_privileged": 5,
                    "is_privileged": 8,
                    "is_privileged_mode": 14,
                    "privileged_mode": 2
                },
                "core_panic": {
                    "trigger_core_panic": 1
                },
                "disableIRQinterrupts": {
                    "disable_interrupts": 3,
                    "disable_irq_interrupts": 1
                },
                "isCurrentModePrivileged": {
                    "check_current_mode_privilege": 1,
                    "check_if_current_mode_is_privileged": 1,
                    "check_privilege_mode": 1,
                    "check_privileged_mode": 5,
                    "get_current_mode_privilege": 1,
                    "is_privileged_mode": 2
                },
                "isIRQinterruptsEnabled": {
                    "are_interrupts_enabled": 1,
                    "are_ir_qinterrupts_enabled": 1,
                    "check_if_ir_qinterrupts_are_enabled": 1,
                    "check_interrupt_enabled": 1,
                    "check_interrupts_enabled": 3,
                    "check_ir_qinterrupts_enabled": 2,
                    "check_irq_interrupts_enabled": 1,
                    "get_ir_qinterrupts_enabled": 1
                },
                "param_1": {
                    "char1": 1,
                    "character": 7,
                    "code": 1,
                    "error_code": 2
                },
                "param_2": {
                    "data": 1,
                    "dummy_value": 1,
                    "handler": 1,
                    "interrupt_flag": 1,
                    "status": 2,
                    "undefined4_1": 1,
                    "undefined_param": 1,
                    "value": 3
                },
                "uVar2": {
                    "interrupt_state": 1,
                    "interrupt_status": 4,
                    "interrupts_enabled": 12,
                    "interrupts_state": 1,
                    "ir_qinterrupts_state": 1,
                    "ir_qinterrupts_status": 1,
                    "irq_interrupt_status": 1,
                    "irq_interrupts_enabled": 1,
                    "irq_status": 1,
                    "is_interrupt_enabled": 1,
                    "is_interrupts_enabled": 1,
                    "is_ir_qenabled": 1,
                    "is_ir_qinterrupts_enabled": 1,
                    "is_irq_enabled": 1,
                    "result": 1
                }
            },
            "called": [
                "FUN_00000f04"
            ],
            "calling": [
                "FUN_00000dc0"
            ],
            "code": "\nundefined4 handle_dummy_interrupt_00000cc0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  trigger_core_panic(10,\"DUMMY HANDLER\");\n  interrupts_enabled = 0;\n  is_privileged_mode = (bool)check_privileged_mode();\n  if (is_privileged_mode) {\n    interrupts_enabled = check_interrupts_enabled();\n  }\n  disable_interrupts();\n  return interrupts_enabled;\n}\n\n",
            "current_name": "handle_dummy_interrupt_00000cc0",
            "entrypoint": "0x00000cc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000cc0": "handle_dummy_interrupt_00000cc0",
                "bVar1": "is_privileged_mode",
                "core_panic": "trigger_core_panic",
                "disableIRQinterrupts": "disable_interrupts",
                "isCurrentModePrivileged": "check_privileged_mode",
                "isIRQinterruptsEnabled": "check_interrupts_enabled",
                "uVar2": "interrupts_enabled"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "additional_data": {
                "FUN_00000cd0": {
                    "check_and_return_interrupts_status": 1,
                    "check_interrupt_status": 4,
                    "check_interrupts": 1,
                    "check_ir_qinterrupt_status": 1,
                    "check_ir_qinterrupts": 1,
                    "check_ir_qinterrupts_enabled": 1,
                    "check_irq_interrupts_enabled": 2,
                    "disable_and_check_irq_interrupts": 1,
                    "disable_and_get_irq_interrupts": 1,
                    "disable_and_return_interrupt_status": 1,
                    "disable_irq_interrupts": 1,
                    "disable_irq_interrupts_and_get_interrupt_status": 1,
                    "disable_secure_interrupts": 1,
                    "get_enabled_ir_qinterrupts": 1,
                    "get_enabled_irq_interrupts": 1,
                    "get_interrupt_state": 1,
                    "get_interrupt_status": 2,
                    "get_interrupts_status": 2,
                    "get_ir_qinterrupts_status": 2,
                    "get_irq_interrupt_state": 1,
                    "get_irq_interrupt_status": 4
                },
                "bVar1": {
                    "is_current_mode_privileged": 5,
                    "is_mode_privileged": 1,
                    "is_privileged": 3,
                    "is_privileged_mode": 18,
                    "privileged_mode": 2
                },
                "disableIRQinterrupts": {
                    "disable_interrupts": 1,
                    "disable_ir_qinterrupts": 1,
                    "disable_irq_interrupts": 1
                },
                "isCurrentModePrivileged": {
                    "check_current_mode_is_privileged": 1,
                    "check_current_mode_privilege": 1,
                    "check_current_mode_privileged": 1,
                    "check_privileged_mode": 1,
                    "is_privileged_mode": 1
                },
                "isIRQinterruptsEnabled": {
                    "are_interrupts_enabled": 1,
                    "check_ir_qinterrupts_enabled": 2,
                    "check_irq_interrupts_enabled": 2
                },
                "uVar2": {
                    "are_irq_interrupts_enabled": 3,
                    "interrupt_state": 1,
                    "interrupt_status": 7,
                    "interrupts_enabled": 13,
                    "interrupts_enabled_status": 1,
                    "irq_interrupts_enabled": 1,
                    "irq_interrupts_enabled_status": 1,
                    "is_enabled": 1,
                    "is_ir_qinterrupts_enabled": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00000f8c",
                "FUN_00001c84",
                "FUN_00000f04",
                "FUN_00000e58",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_00002434",
                "FUN_000024bc",
                "FUN_00000794"
            ],
            "code": "\nundefined4 disable_irq_interrupts_and_get_interrupt_status_00000cd0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  interrupts_enabled = 0;\n  is_privileged_mode = (bool)is_privileged_mode();\n  if (is_privileged_mode) {\n    interrupts_enabled = check_irq_interrupts_enabled();\n  }\n  disable_irq_interrupts();\n  return interrupts_enabled;\n}\n\n",
            "current_name": "disable_irq_interrupts_and_get_interrupt_status_00000cd0",
            "entrypoint": "0x00000cd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000cd0": "disable_irq_interrupts_and_get_interrupt_status_00000cd0",
                "bVar1": "is_privileged_mode",
                "disableIRQinterrupts": "disable_irq_interrupts",
                "isCurrentModePrivileged": "is_privileged_mode",
                "isIRQinterruptsEnabled": "check_irq_interrupts_enabled",
                "uVar2": "interrupts_enabled"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "additional_data": {
                "FUN_00000cf0": {
                    "check_interrupt_status": 2,
                    "check_interrupts": 1,
                    "check_ir_qinterrupt_status": 2,
                    "check_ir_qinterrupts": 4,
                    "check_ir_qinterrupts_enabled": 1,
                    "check_ir_qinterrupts_status": 1,
                    "check_irq_interrupt_status": 2,
                    "check_irq_interrupts": 5,
                    "check_irq_interrupts_enabled": 7,
                    "get_enabled_ir_qinterrupts": 1,
                    "get_interrupt_status": 1,
                    "get_ir_qinterrupt_status": 1,
                    "get_ir_qinterrupts_state": 1,
                    "get_irq_interrupt_status": 1,
                    "is_ir_qinterrupts_enabled": 1
                },
                "bVar1": {
                    "is_current_mode_privileged": 6,
                    "is_privileged": 4,
                    "is_privileged_mode": 19
                },
                "isCurrentModePrivileged": {
                    "check_current_mode_privilege": 1,
                    "is_current_mode_privileged": 1
                },
                "isIRQinterruptsEnabled": {
                    "check_ir_qinterrupts_enabled": 1,
                    "is_ir_qinterrupts_enabled": 1
                },
                "uVar2": {
                    "are_irq_interrupts_enabled": 1,
                    "interrupt_status": 2,
                    "interrupts_enabled": 22,
                    "interrupts_enabled_status": 1,
                    "irq_interrupt_status": 1,
                    "is_ir_qinterrupts_enabled": 2,
                    "is_irq_interrupts_enabled": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00000930"
            ],
            "code": "\nundefined4 check_irq_interrupts_enabled_00000cf0(void)\n\n{\n  bool is_privileged_mode;\n  undefined4 interrupts_enabled;\n  \n  enableIRQinterrupts();\n  interrupts_enabled = 0;\n  is_privileged_mode = (bool)is_current_mode_privileged();\n  if (is_privileged_mode) {\n    interrupts_enabled = check_ir_qinterrupts_enabled();\n  }\n  return interrupts_enabled;\n}\n\n",
            "current_name": "check_irq_interrupts_enabled_00000cf0",
            "entrypoint": "0x00000cf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000cf0": "check_irq_interrupts_enabled_00000cf0",
                "bVar1": "is_privileged_mode",
                "isCurrentModePrivileged": "is_current_mode_privileged",
                "isIRQinterruptsEnabled": "check_ir_qinterrupts_enabled",
                "uVar2": "interrupts_enabled"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "additional_data": {
                "FUN_00000d0c": {
                    "configure_ir_qinterrupts": 1,
                    "enable_interrupts_if_current_mode_is_privileged": 1,
                    "enable_interrupts_if_privileged": 4,
                    "enable_ir_qinterrupt_if_privileged": 1,
                    "enable_ir_qinterrupts": 1,
                    "enable_ir_qinterrupts_for_privileged_mode": 1,
                    "enable_ir_qinterrupts_if_needed": 5,
                    "enable_ir_qinterrupts_if_privileged": 10,
                    "enable_ir_qinterrupts_if_priviliged": 1,
                    "enable_irq_interrupts_if_needed": 2,
                    "enable_irq_interrupts_if_privileged": 4
                },
                "bVar1": {
                    "is_current_mode_privileged": 2,
                    "is_privileged": 8,
                    "is_privileged_mode": 9
                },
                "enableIRQinterrupts": {
                    "": 1,
                    "enable_interrupts": 3,
                    "enable_ir_qinterrupts": 2,
                    "set_ir_qinterrupts": 1
                },
                "isCurrentModePrivileged": {
                    "": 1,
                    "check_current_mode_privilege": 1,
                    "check_if_current_mode_is_privileged": 1,
                    "check_privileged_mode": 1,
                    "is_privileged_mode": 1,
                    "is_privileged_mode_enabled": 1
                },
                "param_1": {
                    "flags": 2,
                    "input": 1,
                    "input_flag": 3,
                    "input_flags": 1,
                    "interrupt_control_flag": 1,
                    "interrupt_enable_flag": 1,
                    "interrupt_enabled": 1,
                    "interrupt_flag": 4,
                    "interrupt_flags": 10,
                    "interrupt_index": 1,
                    "interrupt_mask": 2,
                    "interrupt_number": 1,
                    "interrupt_parameter": 1,
                    "interrupt_setting": 1,
                    "irq_flags": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001c84",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_00002434",
                "FUN_000024bc"
            ],
            "code": "\nvoid enable_ir_qinterrupts_if_privileged_00000d0c(uint interrupt_flags)\n\n{\n  bool is_privileged_mode;\n  \n  is_privileged_mode = (bool)isCurrentModePrivileged();\n  if (is_privileged_mode) {\n    enable_interrupts((interrupt_flags & 1) == 1);\n  }\n  return;\n}\n\n",
            "current_name": "enable_ir_qinterrupts_if_privileged_00000d0c",
            "entrypoint": "0x00000d0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d0c": "enable_ir_qinterrupts_if_privileged_00000d0c",
                "bVar1": "is_privileged_mode",
                "enableIRQinterrupts": "enable_interrupts",
                "param_1": "interrupt_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "additional_data": {
                "FUN_00000d2a": {
                    "get_current_exception_number": 1,
                    "get_exception_number": 30
                },
                "bVar1": {
                    "is_current_mode_privileged": 1,
                    "is_privileged": 5,
                    "is_privileged_mode": 24
                },
                "getCurrentExceptionNumber": {
                    "fetch_exception_number": 1
                },
                "isCurrentModePrivileged": {
                    "check_privilege_mode": 1,
                    "check_privileged_mode": 1,
                    "is_current_mode_privileged": 1,
                    "is_privileged_mode": 2
                },
                "uVar2": {
                    "exception_number": 30
                }
            },
            "called": [],
            "calling": [
                "FUN_00000738"
            ],
            "code": "\nuint get_current_exception_number_00000d2a(void)\n\n{\n  bool is_privileged_mode;\n  uint exception_number;\n  \n  exception_number = 0;\n  is_privileged_mode = (bool)is_privileged_mode();\n  if (is_privileged_mode) {\n    exception_number = fetch_exception_number();\n    exception_number = exception_number & 0x1f;\n  }\n  return exception_number;\n}\n\n",
            "current_name": "get_current_exception_number_00000d2a",
            "entrypoint": "0x00000d2a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d2a": "get_current_exception_number_00000d2a",
                "bVar1": "is_privileged_mode",
                "getCurrentExceptionNumber": "fetch_exception_number",
                "isCurrentModePrivileged": "is_privileged_mode",
                "uVar2": "exception_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d44": {
            "additional_data": {
                "0x2000000": {
                    "constant_offset": 2,
                    "constant_value": 1
                },
                "0xf0000000": {
                    "high_bits_mask": 1
                },
                "0xfffff": {
                    "low_bits_mask": 1
                },
                "FUN_00000d44": {
                    "calculate_improved_value": 1,
                    "calculate_new_value": 3,
                    "calculate_offset": 22,
                    "calculate_result": 3,
                    "compute_offset": 1,
                    "multiply_and_add": 1
                },
                "PARAM_1": {
                    "input_value": 1
                },
                "PARAM_2": {
                    "multiplier": 1
                },
                "new_variable_name_1": {
                    "high_bits": 1
                },
                "new_variable_name_2": {
                    "low_bits": 1
                },
                "param_1": {
                    "address": 2,
                    "base_address": 5,
                    "base_value": 1,
                    "input": 1,
                    "input_1": 1,
                    "input_one": 1,
                    "input_value": 18,
                    "number": 1,
                    "value1": 1
                },
                "param_2": {
                    "index": 3,
                    "input_2": 1,
                    "input_two": 1,
                    "multiplier": 21,
                    "offset": 1,
                    "offset_multiplier": 2,
                    "value": 1,
                    "value2": 1
                },
                "param_3": {
                    "base_offset": 1,
                    "constant": 1,
                    "multiplier": 1,
                    "offset": 1,
                    "output": 1,
                    "shift": 1
                },
                "param_4": {
                    "result": 1,
                    "shift_bits": 1
                },
                "param_5": {
                    "constant_offset": 1,
                    "value": 1
                },
                "param_6": {
                    "constant": 1
                },
                "param_7": {
                    "mask": 1
                },
                "param_8": {
                    "shifted_value": 1
                },
                "result": {
                    "offset": 1
                },
                "temp_var_1": {
                    "masked_address": 1
                },
                "temp_var_2": {
                    "shifted_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00000d76"
            ],
            "code": "\nint calculate_offset_00000d44(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "current_name": "calculate_offset_00000d44",
            "entrypoint": "0x00000d44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d76": {
            "additional_data": {
                "FUN_00000d76": {
                    "clear_memory": 9,
                    "clear_offset": 4,
                    "clear_offset_value": 2,
                    "clear_value_at_offset": 1,
                    "initialize_memory": 1,
                    "initialize_offset": 6,
                    "initialize_offset_to_zero": 1,
                    "initialize_pointer_to_zero": 1,
                    "initialize_value_to_zero": 1,
                    "reset_memory": 1,
                    "set_offset_to_zero": 3,
                    "zero_out_value": 1
                },
                "param_1": {
                    "input": 5,
                    "input1": 1,
                    "input_offset": 1,
                    "input_value": 22,
                    "value": 1,
                    "value_pointer": 1
                },
                "param_2": {
                    "input2": 1,
                    "multiplier": 30
                },
                "puVar1": {
                    "memory_address": 2,
                    "memory_location": 1,
                    "offset_pointer": 8,
                    "offset_ptr": 9,
                    "result_address": 1,
                    "result_pointer": 3
                }
            },
            "called": [
                "FUN_00000d44"
            ],
            "calling": [
                "FUN_00000d9c"
            ],
            "code": "\nvoid clear_memory_00000d76(undefined4 input_value,undefined multiplier)\n\n{\n  undefined4 *offset_ptr;\n  \n  offset_ptr = (undefined4 *)calculate_offset_00000d44(input_value,multiplier);\n  *offset_ptr = 0;\n  return;\n}\n\n",
            "current_name": "clear_memory_00000d76",
            "entrypoint": "0x00000d76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d76": "clear_memory_00000d76",
                "param_1": "input_value",
                "param_2": "multiplier",
                "puVar1": "offset_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "additional_data": {
                "FUN_00000d76": {
                    "bit_clear_helper": 1,
                    "call_fun": 1,
                    "call_sub_function": 1,
                    "clear_bit": 1,
                    "clear_bit_helper": 2,
                    "clear_flag": 1,
                    "clear_interrupt": 1,
                    "disable_interrupt": 1,
                    "perform_action": 1,
                    "perform_subfunction": 1,
                    "set_bit": 6,
                    "set_register_value": 1
                },
                "FUN_00000d9c": {
                    "clear_bit": 13,
                    "clear_bit_0x40048040": 2,
                    "clear_bit_at_address": 3,
                    "clear_bit_in_register": 1,
                    "clear_bit_register": 1,
                    "clear_bits_at_address": 1,
                    "clear_flag": 1,
                    "clear_interrupt": 1,
                    "clear_interrupt_flag": 7,
                    "clear_peripheral_interrupt": 1
                },
                "bit_clear32": {
                    "clear_bit_function": 1
                },
                "param_1": {
                    "address": 7,
                    "arg1": 1,
                    "param_1": 1,
                    "param_address": 1,
                    "reg": 1,
                    "reg_address": 1,
                    "register": 1,
                    "register_address": 3,
                    "undefined4": 2,
                    "undefined4_param": 2,
                    "undefined_param_1": 2,
                    "unknown_param": 1,
                    "value": 1
                },
                "param_2": {
                    "arg2": 1,
                    "bit": 1,
                    "bit_position": 13,
                    "param_2": 1,
                    "param_value": 1,
                    "undefined": 2,
                    "undefined_param": 2,
                    "undefined_param_2": 2,
                    "unknown_flag": 1
                }
            },
            "called": [
                "FUN_00000d76"
            ],
            "calling": [
                "FUN_00000db0"
            ],
            "code": "\nvoid clear_bit_at_address_00000d9c(void)\n\n{\n  clear_bit_function(0x40048040,0);\n  return;\n}\n\n",
            "current_name": "clear_bit_at_address_00000d9c",
            "entrypoint": "0x00000d9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000d9c": "clear_bit_at_address_00000d9c",
                "bit_clear32": "clear_bit_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000db0": {
            "additional_data": {
                "FUN_00000d9c": {
                    "adjust_cpu_settings": 1,
                    "apply_cpu_errata_fixes": 1,
                    "disable_watchdog": 1,
                    "fix_cpu_errata": 6,
                    "function_d9_c": 1,
                    "function_d9c": 1,
                    "initialize_system": 1,
                    "perform_action_b": 1,
                    "perform_additional_tasks": 1,
                    "perform_another_task": 2,
                    "perform_cpu_errata_fixes": 2,
                    "perform_function_d9c": 1,
                    "perform_initial_fix": 1,
                    "perform_other_cleanup": 1,
                    "perform_other_fix": 1,
                    "perform_other_fixes": 1,
                    "perform_other_tasks": 1,
                    "perform_secondary_task": 1,
                    "perform_subfunction_1": 1,
                    "perform_task_2": 1,
                    "perform_task_d9c": 2,
                    "sub_function_2": 1
                },
                "FUN_00000db0": {
                    "disable_watchdog": 1,
                    "disable_watchdog_and_fix_cpu_errata": 12,
                    "disable_watchdog_and_fix_errata": 11,
                    "disable_watchdog_and_fix_errors": 2,
                    "disable_watchdog_cpu_errata_fixes": 2,
                    "disable_watchdog_reset": 1,
                    "initialize_system": 2
                },
                "FUN_00000dcc": {
                    "clear_watchdog": 1,
                    "disable_watchdog": 3,
                    "fix_cpu_errata": 1,
                    "function_dcc": 2,
                    "perform_action_a": 1,
                    "perform_additional_cleanup": 1,
                    "perform_additional_fix": 1,
                    "perform_additional_fixes": 2,
                    "perform_additional_task": 4,
                    "perform_additional_tasks": 1,
                    "perform_cpu_errata_fixes": 1,
                    "perform_errata_fix": 1,
                    "perform_function_dcc": 1,
                    "perform_subfunction_2": 1,
                    "perform_task_1": 1,
                    "perform_task_dcc": 2,
                    "perform_watchdog_disable": 3,
                    "perform_watchdog_disable_operation": 1,
                    "sub_function_1": 1,
                    "update_watchdog": 1
                }
            },
            "called": [
                "FUN_00000dcc",
                "FUN_00000d9c"
            ],
            "calling": [
                "FUN_0000099c"
            ],
            "code": "\nvoid disable_watchdog_and_fix_cpu_errata_00000db0(void)\n\n{\n  wdog_disable();\n  cpu_errata_fixes();\n  return;\n}\n\n",
            "current_name": "disable_watchdog_and_fix_cpu_errata_00000db0",
            "entrypoint": "0x00000db0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000db0": "disable_watchdog_and_fix_cpu_errata_00000db0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "additional_data": {
                "FUN_00000cc0": {
                    "fetch_data": 1,
                    "get_data_from_subfunction": 1,
                    "get_default_handler": 11,
                    "get_default_handler_status": 1,
                    "get_default_status": 1,
                    "get_default_value": 10,
                    "get_handler": 1,
                    "get_handler_result": 2,
                    "get_handler_status": 1,
                    "get_result": 1,
                    "get_status": 1
                },
                "FUN_00000dc0": {
                    "execute_default_dummy_handler": 2,
                    "execute_default_handler": 1,
                    "execute_dummy_handler": 2,
                    "execute_dummy_handler_default": 1,
                    "handle_default": 2,
                    "handle_dummy": 6,
                    "handle_dummy_call": 1,
                    "handle_dummy_calls": 1,
                    "initialize": 2,
                    "initialize_default_handler": 8,
                    "initialize_dummy_handler": 2,
                    "initialize_handler": 2,
                    "initialize_system": 1
                }
            },
            "called": [
                "FUN_00000cc0"
            ],
            "calling": [],
            "code": "\nvoid initialize_default_handler_00000dc0(void)\n\n{\n  dummy_handler_default();\n  return;\n}\n\n",
            "current_name": "initialize_default_handler_00000dc0",
            "entrypoint": "0x00000dc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000dc0": "initialize_default_handler_00000dc0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "additional_data": {
                "": {
                    "": 2
                },
                "FUN_00000dcc": {
                    "initialize_data": 13,
                    "initialize_global_variables": 1,
                    "initialize_memory": 8,
                    "initialize_registers": 6,
                    "initialize_system": 1,
                    "set_initial_values": 2
                },
                "_": {
                    "unused_variable": 1
                },
                "_40052000": {
                    "memory_value": 1
                },
                "_4005200e": {
                    "memory_address": 1
                },
                "_DAT_40052000": {
                    "control_byte": 1,
                    "control_register": 1,
                    "control_value": 2,
                    "data_flag": 2,
                    "data_register2": 1,
                    "data_register_2": 1,
                    "data_value": 3,
                    "data_value2": 3,
                    "flag": 1,
                    "flag_value": 1,
                    "global_variable2": 1,
                    "initial_value2": 1,
                    "input_register": 1,
                    "memory_address": 3,
                    "memory_address2": 1,
                    "memory_value": 1,
                    "register_code": 1,
                    "register_value2": 1,
                    "value": 1
                },
                "_DAT_4005200e": {
                    "address": 1,
                    "data": 1,
                    "data_address": 1,
                    "data_length": 1,
                    "data_register1": 1,
                    "data_register_1": 1,
                    "data_value": 4,
                    "data_value1": 3,
                    "global_variable1": 1,
                    "initial_value": 1,
                    "initial_value1": 1,
                    "memory_address": 1,
                    "memory_address1": 1,
                    "memory_location": 1,
                    "memory_value": 2,
                    "output_register": 1,
                    "register_value": 3,
                    "register_value1": 1,
                    "value_to_store": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00000db0"
            ],
            "code": "\n\n\nvoid initialize_data_00000dcc(void)\n\n{\n  unused_variableDATmemory_address = 0xd928;\n  unused_variableDATmemory_value = 0xd2;\n  return;\n}\n\n",
            "current_name": "initialize_data_00000dcc",
            "entrypoint": "0x00000dcc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000dcc": "initialize_data_00000dcc",
                "_": "unused_variable",
                "_40052000": "memory_value",
                "_4005200e": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000df4": {
            "additional_data": {
                "DAT_": {
                    "": 1
                },
                "FUN_00000df4": {
                    "initialize_uart": 31
                },
                "FUN_000013b8": {
                    "configure_uart": 2,
                    "do_something": 1,
                    "perform_operation": 1,
                    "process_argument": 1,
                    "process_data": 9,
                    "set_uart_config": 1,
                    "some_other_function": 1,
                    "uart_configuration": 1
                },
                "PTR_": {
                    "": 1
                },
                "param_1": {
                    "arg1": 5,
                    "argument_1": 1,
                    "data": 2,
                    "data_param": 1,
                    "data_pin": 1,
                    "device": 1,
                    "device_id": 2,
                    "device_number": 1,
                    "flag": 1,
                    "input": 1,
                    "input1": 1,
                    "input_data": 1,
                    "input_param": 3,
                    "port": 1,
                    "port_number": 2,
                    "some_param": 1,
                    "some_parameter": 1,
                    "uart0": 1,
                    "uart_id": 2,
                    "uart_num": 1,
                    "uart_number": 1
                },
                "param_2": {
                    "arg2": 5,
                    "argument_2": 1,
                    "baud_rate": 10,
                    "baudrate": 1,
                    "config_param": 2,
                    "data_in": 1,
                    "input2": 1,
                    "param2": 1,
                    "param_2": 3,
                    "unused_param": 2,
                    "unused_param_1": 1,
                    "unused_parameter": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "param_3": {
                    "arg3": 5,
                    "argument_3": 1,
                    "baudrate_param": 1,
                    "data_bits": 9,
                    "data_out": 1,
                    "input3": 1,
                    "offset_param": 1,
                    "param3": 1,
                    "param_3": 3,
                    "parameter_3": 1,
                    "stop_bits": 1,
                    "unused_param": 1,
                    "unused_param2": 1,
                    "unused_param_2": 1,
                    "unused_parameter": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "param_4": {
                    "address_param": 1,
                    "arg4": 5,
                    "argument_4": 1,
                    "config": 5,
                    "control": 1,
                    "input4": 1,
                    "param4": 1,
                    "param_4": 3,
                    "parameter_4": 1,
                    "settings_param": 1,
                    "stop_bits": 5,
                    "uart_config_param": 1,
                    "unused_param3": 1,
                    "unused_param_3": 1,
                    "unused_parameter": 1,
                    "value3": 1,
                    "value_3": 1
                },
                "ptr_1": {
                    "param_1": 1
                },
                "ptr_2": {
                    "param_2": 1
                },
                "ptr_3": {
                    "param_3": 1
                },
                "ptr_4": {
                    "param_4": 1
                },
                "uart_init": {
                    "initialize_uart": 1
                },
                "undefined4": {
                    "": 1,
                    "uint32": 1,
                    "void": 1
                }
            },
            "called": [
                "FUN_000013b8"
            ],
            "calling": [
                "FUN_00000410"
            ],
            "code": "\nvoid initialize_uart_00000df4(void)\n\n{\n  initialize_uart_00000df4(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "current_name": "initialize_uart_00000df4",
            "entrypoint": "0x00000df4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000df4": "initialize_uart_00000df4",
                "uart_init": "initialize_uart"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000e14": {
            "additional_data": {
                "FUN_00000e14": {
                    "read_data_from_pipe": 1,
                    "read_from_isr": 1,
                    "read_from_isr_pipe": 7,
                    "read_from_isrcpipe": 1,
                    "read_from_isrpipe": 9,
                    "read_from_pipe": 1,
                    "read_isr": 1,
                    "read_isr_pipe": 2,
                    "read_isrpipe": 7,
                    "read_pipe_data": 1
                },
                "PARAM_1": {
                    "param1": 1
                },
                "PARAM_2": {
                    "param2": 1
                },
                "param_1": {
                    "arg1": 1,
                    "buffer": 20,
                    "data_buffer": 2,
                    "destination": 1,
                    "destination_buffer": 1,
                    "dst_buffer": 1,
                    "pipe_address": 2,
                    "pipe_handle": 1,
                    "response_buffer": 1
                },
                "param_2": {
                    "arg2": 1,
                    "buffer": 3,
                    "buffer_size": 3,
                    "dst_size": 1,
                    "length": 1,
                    "size": 21
                },
                "uVar1": {
                    "read_result": 6,
                    "read_status": 1,
                    "result": 7,
                    "return_value": 1,
                    "status": 2
                }
            },
            "called": [
                "FUN_000012e2"
            ],
            "calling": [
                "FUN_00000490"
            ],
            "code": "\nundefined4 read_from_isrpipe_00000e14(undefined4 buffer,undefined4 size)\n\n{\n  undefined4 result;\n  \n  result = isrpipe_read(0x1fff0204,buffer,size);\n  return result;\n}\n\n",
            "current_name": "read_from_isrpipe_00000e14",
            "entrypoint": "0x00000e14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000e14": "read_from_isrpipe_00000e14",
                "param_1": "buffer",
                "param_2": "size",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000e38": {
            "additional_data": {
                "FUN_00000e38": {
                    "send_data": 1,
                    "uart_write_and_return": 3,
                    "uart_write_and_return_len": 1,
                    "uart_write_and_return_length": 1,
                    "uart_write_and_return_param": 1,
                    "write_data": 2,
                    "write_data_to_uart": 14,
                    "write_to_uart": 8
                },
                "FUN_000015d0": {
                    "handle_uart_write": 2,
                    "process_data": 5,
                    "write_data_to_uart": 1,
                    "write_to_uart": 1
                },
                "param_1": {
                    "buffer_address": 1,
                    "data": 17,
                    "data1": 1,
                    "data_address": 1,
                    "data_buffer": 7,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_start_address": 2
                },
                "param_2": {
                    "buffer_size": 1,
                    "data2": 1,
                    "data_len": 1,
                    "data_length": 9,
                    "data_size": 3,
                    "length": 11,
                    "size": 5
                },
                "param_3": {
                    "data3": 1
                }
            },
            "called": [
                "FUN_000015d0"
            ],
            "calling": [
                "FUN_00004dee"
            ],
            "code": "\nundefined4 write_data_to_uart_00000e38(undefined4 data,undefined4 length)\n\n{\n  uart_write(0,data,length);\n  return length;\n}\n\n",
            "current_name": "write_data_to_uart_00000e38",
            "entrypoint": "0x00000e38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000e38": "write_data_to_uart_00000e38",
                "param_1": "data",
                "param_2": "length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000e58": {
            "additional_data": {
                "FUN_00000cd0": {
                    "get_function_signature": 1,
                    "get_settings": 1,
                    "get_some_value": 1,
                    "get_status": 3,
                    "get_system_status": 1,
                    "get_undefined4": 2,
                    "get_undefined4_value": 1,
                    "get_undefined_value": 2,
                    "get_value": 1,
                    "initialize": 6,
                    "initialize_hardware": 1,
                    "initialize_subsystem": 1,
                    "initialize_system": 4,
                    "retrieve_undefined4": 1,
                    "sub_function": 1,
                    "undefined4_function": 1,
                    "undefined_function": 1,
                    "utility_function": 1
                },
                "FUN_00000e58": {
                    "disable_interrupt": 2,
                    "disable_interrupts": 24,
                    "disable_interrupts_and_loop": 2,
                    "disable_interrupts_with_infinite_loop": 1,
                    "disable_irq_and_loop_forever": 1,
                    "disable_irq_with_infinite_loop": 1
                },
                "undefined4": {
                    "void": 1
                }
            },
            "called": [
                "FUN_00000cd0"
            ],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nvoid disable_interrupts_and_loop_00000e58(void)\n\n{\n  irq_disable();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "disable_interrupts_and_loop_00000e58",
            "entrypoint": "0x00000e58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000e58": "disable_interrupts_and_loop_00000e58"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000e64": {
            "additional_data": {
                "DAT_40048038": {
                    "device_register_1": 1,
                    "peripheral_register": 1
                },
                "DAT_40049048": {
                    "device_register_2": 1,
                    "peripheral_settings": 1
                },
                "FUN_00000e64": {
                    "initialize_device": 2,
                    "initialize_devices": 1,
                    "initialize_gpio": 1,
                    "initialize_hardware": 2,
                    "initialize_peripheral_devices": 2,
                    "initialize_peripherals": 15,
                    "initialize_system": 8
                },
                "FUN_00001274": {
                    "clear_cache": 1,
                    "configure_registers": 1,
                    "cpu_init": 8,
                    "cpu_initialization": 1,
                    "cpu_power_init": 1,
                    "cpu_reset": 2,
                    "cpu_startup": 1,
                    "gpio_init": 1,
                    "initialize_binary_data": 1,
                    "initialize_cpu": 6,
                    "initialize_gpio": 3,
                    "reset_cpu": 1,
                    "set_gpio_high": 1,
                    "undefined4": 1,
                    "unused_function": 1
                },
                "FUN_00001eea": {
                    "configure_device": 1,
                    "configure_gpio": 7,
                    "configure_gpio_pin": 4,
                    "configure_gpio_pins": 2,
                    "configure_peripheral": 1,
                    "configure_timer": 1,
                    "handle_param_updates": 1,
                    "set_configuration": 1,
                    "set_gpio_pin_state": 1,
                    "set_gpio_pins": 1,
                    "set_gpio_state": 3,
                    "set_peripheral_configuration": 1,
                    "set_peripheral_mode": 1,
                    "set_pin": 1,
                    "set_pin_mode": 1,
                    "set_port": 1,
                    "set_value": 1,
                    "some_function": 1
                },
                "FUN_00001ff6": {
                    "another_function": 1,
                    "configure_cpu": 1,
                    "configure_gpio": 2,
                    "configure_pin": 1,
                    "enable_interrupts": 2,
                    "init_gpio": 2,
                    "initialize_cpu": 8,
                    "initialize_gpio": 3,
                    "initialize_peripherals": 1,
                    "perform_initialization": 1,
                    "reset_gpio_state": 1,
                    "reset_peripheral": 1,
                    "set_gpio": 2,
                    "set_gpio_state": 1,
                    "set_gpio_value": 2,
                    "toggle_gpio_pin": 1
                },
                "PTR_40048038": {
                    "register_1": 1
                },
                "PTR_40049048": {
                    "register_2": 1
                },
                "_DAT_40048038": {
                    "gpio_config_register": 1,
                    "peripheral_register_1": 1
                },
                "_DAT_40049048": {
                    "external_interrupt_config_register": 1,
                    "peripheral_register_2": 1
                },
                "configure_gpio": {
                    "configure_gpio": 1
                },
                "cpu_init": {
                    "cpu_init": 1
                },
                "gpio_init": {
                    "initialize_gpio": 2,
                    "initialize_gpio_pin": 1,
                    "initialize_pin": 1
                },
                "gpio_set": {
                    "set_gpio": 2,
                    "set_gpio_pin": 1,
                    "set_pin_state": 1
                },
                "initialize_peripherals": {
                    "initialize_peripherals": 1
                },
                "initialize_system": {
                    "initialize_system": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 2,
                    "gpio_address": 1,
                    "gpio_param": 2,
                    "param1": 5,
                    "param_1": 1,
                    "param_two_bytes": 1,
                    "peripheral_address": 1,
                    "pin": 1,
                    "pin_config": 1,
                    "pin_number": 1,
                    "undefined_param1": 1,
                    "unused_param": 1,
                    "value": 1
                },
                "param_2": {
                    "arg2": 1,
                    "bit": 1,
                    "byte_param": 2,
                    "gpio_state": 1,
                    "gpio_value": 1,
                    "param2": 5,
                    "param_2": 1,
                    "param_byte": 1,
                    "peripheral_mode": 1,
                    "pin_state": 1,
                    "status": 1,
                    "unused_byte": 3,
                    "value": 1
                }
            },
            "called": [
                "FUN_00001eea",
                "FUN_00001ff6",
                "FUN_00001274"
            ],
            "calling": [
                "FUN_0000099c"
            ],
            "code": "\n\n\nvoid initialize_peripherals_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  cpu_init();\n  initialize_gpio(0x2056,0x80);\n  initialize_gpio(0x511a,0x80);\n  initialize_gpio(0x2055,0x80);\n  set_gpio(0x2056);\n  set_gpio(0x511a);\n  set_gpio(0x2055);\n  return;\n}\n\n",
            "current_name": "initialize_peripherals_00000e64",
            "entrypoint": "0x00000e64",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000e64": "initialize_peripherals_00000e64",
                "gpio_init": "initialize_gpio",
                "gpio_set": "set_gpio"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "additional_data": {
                "FUN_00000ed8": {
                    "print_data": 10,
                    "print_device_info": 1,
                    "print_formatted_data": 1,
                    "print_formatted_message": 3,
                    "print_formatted_string": 2,
                    "print_function": 1,
                    "print_log_message": 1,
                    "print_message": 12
                },
                "FUN_00004c84": {
                    "execute_sub_function": 1,
                    "process_data": 4,
                    "sub_function": 2
                },
                "in_lr": {
                    "format_specifier": 1,
                    "input": 2,
                    "input_register": 2,
                    "link_register": 1,
                    "return_address": 5,
                    "stack_frame_pointer": 2,
                    "unused_parameter": 1
                },
                "param_1": {
                    "arg1": 9,
                    "argument1": 1,
                    "data1": 2,
                    "input1": 3,
                    "input_param1": 1,
                    "message": 2,
                    "param1": 3
                },
                "param_2": {
                    "arg2": 9,
                    "argument2": 1,
                    "data2": 2,
                    "input2": 3,
                    "input_param2": 1,
                    "param2": 3,
                    "param_2": 1,
                    "unused_param1": 1
                },
                "param_3": {
                    "arg3": 9,
                    "argument3": 1,
                    "data3": 2,
                    "input3": 3,
                    "input_param3": 1,
                    "param3": 3,
                    "param_3": 1,
                    "unused_param2": 1
                },
                "param_4": {
                    "arg4": 9,
                    "argument4": 1,
                    "data4": 2,
                    "input4": 3,
                    "input_param4": 1,
                    "param4": 3,
                    "param_4": 1,
                    "unused_param3": 1
                }
            },
            "called": [
                "FUN_00004c84"
            ],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nvoid print_formatted_message_00000ed8(void)\n\n{\n  undefined4 return_address;\n  \n  iprintf(&DAT_00006f58,return_address);\n  return;\n}\n\n",
            "current_name": "print_formatted_message_00000ed8",
            "entrypoint": "0x00000ed8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000ed8": "print_formatted_message_00000ed8",
                "in_lr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "called": [],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00000ef8",
            "entrypoint": "0x00000ef8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00000f04": {
            "additional_data": {
                "FUNC_00000ef8": {
                    "disable_interrupts": 3,
                    "panic_arch": 2,
                    "pm_off": 1,
                    "power_management_off": 1,
                    "power_off": 2,
                    "print_crash_status": 1,
                    "print_panic_header": 1,
                    "ps": 1
                },
                "FUNC_00002400": {
                    "main": 1,
                    "panic_arch": 1,
                    "perform_poweroff": 1,
                    "power_off": 1,
                    "print_halted_message": 2,
                    "print_riot_banner": 1,
                    "print_riot_kernel_version": 1,
                    "print_riot_version": 3,
                    "switch_to_pm": 1,
                    "turn_off_power_management": 1
                },
                "FUN_00000cd0": {
                    "auto_init": 1,
                    "init": 1,
                    "initialize_automatic_variables": 1,
                    "initialize_device": 1,
                    "initialize_system": 3,
                    "main": 3,
                    "pm_off": 1,
                    "start_main_function": 1,
                    "undefined4_fun": 1
                },
                "FUN_00000e58": {
                    "auto_init": 2,
                    "auto_initialize": 1,
                    "initialize": 1,
                    "panic_arch": 2,
                    "pm_off": 1,
                    "power_off_pm": 1,
                    "print_kernel_message": 1,
                    "print_panic_footer": 1,
                    "print_riot_kernel_panic": 1,
                    "print_system_info": 1,
                    "trigger_arch_panic": 1
                },
                "FUN_00000ed8": {
                    "cpu_print_last_instruction": 1,
                    "print_last_instruction": 12
                },
                "FUN_00000ef8": {
                    "print_system_state": 1
                },
                "FUN_00000f04": {
                    "handle_kernel_panic": 9,
                    "handle_panic": 3,
                    "kernel_panic": 11,
                    "kernel_panic_handler": 6,
                    "panic_and_halt": 1,
                    "panic_and_recover": 1
                },
                "FUN_0000211c": {
                    "auto_init": 2,
                    "cpu_print_last_instruction": 1,
                    "disable_interrupts": 1,
                    "power_management_off": 1,
                    "power_off_processor": 1,
                    "print_halted_message": 2,
                    "print_message": 1,
                    "print_sys_info": 1,
                    "print_system_info": 1,
                    "print_system_message": 1,
                    "print_system_state": 1
                },
                "FUN_000023a4": {
                    "auto_init": 1,
                    "auto_initialize": 1,
                    "disable_interrupts": 1,
                    "get_kernel_version": 2,
                    "get_riot_version": 1,
                    "get_stack_pointer": 1,
                    "get_version": 1,
                    "get_version_info": 1,
                    "initialize_auto": 1,
                    "irq_disable": 2,
                    "retrieve_kernel_version": 1
                },
                "FUN_00004c84": {
                    "execute_arch_specific_cleanup": 1,
                    "handle_panic": 1,
                    "irq_disable": 2,
                    "panic_arch": 4,
                    "print_kernel_panic": 1,
                    "print_kernel_panic_message": 1,
                    "print_message": 1,
                    "print_panic_info": 1,
                    "print_panic_message": 1
                },
                "UNRECOVERED_JUMPTABLE": {
                    "jmp_table": 1,
                    "jump_table": 6,
                    "jump_table_address": 1,
                    "jump_table_func": 1,
                    "jumptable": 2,
                    "jumptable_ptr": 1,
                    "recovery_jumptable": 1,
                    "unrecovered_jumptable": 2
                },
                "auto_init": {
                    "initialize_automatic_variables": 1
                },
                "local_10": {
                    "data_copy": 1,
                    "err_msg_ptr": 1,
                    "error_message_length": 1,
                    "error_message_ptr": 2,
                    "message": 3,
                    "message_address": 1,
                    "message_len": 1,
                    "message_length": 2,
                    "message_param2": 1,
                    "message_ptr": 2,
                    "panic_message_copy": 4,
                    "panic_message_length": 1,
                    "panic_message_param": 2,
                    "panic_msg_param": 2,
                    "param_2": 2,
                    "param_2_copy": 3,
                    "string_param": 1
                },
                "local_9": {
                    "char_param": 1,
                    "character_copy": 1,
                    "err_code": 1,
                    "err_code_param": 1,
                    "error_code_char": 1,
                    "error_code_copy": 1,
                    "error_type": 1,
                    "error_type_copy": 2,
                    "level": 1,
                    "message_param1": 1,
                    "panic_code_copy": 2,
                    "panic_reason_copy": 2,
                    "panic_reason_param": 2,
                    "panic_type": 1,
                    "panic_type_copy": 1,
                    "panic_type_param": 1,
                    "panic_type_value": 1,
                    "param_1": 2,
                    "param_1_copy": 1,
                    "reason": 2,
                    "trigger": 1,
                    "type": 3
                },
                "main": {
                    "initialize_main_function": 1,
                    "start_main": 1
                },
                "param_1": {
                    "character": 1,
                    "error_code": 6,
                    "error_type": 3,
                    "flag": 1,
                    "input_char": 1,
                    "panic_code": 2,
                    "panic_level": 1,
                    "panic_reason": 8,
                    "panic_trigger": 1,
                    "panic_type": 6
                },
                "param_2": {
                    "data": 1,
                    "error_message": 6,
                    "input_value": 1,
                    "message": 4,
                    "panic_message": 18
                },
                "uStack_18": {
                    "local_variable": 2,
                    "pointer": 1,
                    "stack_address": 2,
                    "stack_frame": 1,
                    "stack_pointer": 1,
                    "stack_var": 3,
                    "stack_var1": 1,
                    "stack_variable": 4
                }
            },
            "called": [
                "FUN_00000ed8",
                "FUN_00004c84",
                "FUN_00000ef8",
                "FUN_00000e58",
                "FUN_0000211c",
                "FUN_000023a4",
                "FUN_00002400",
                "FUN_00000cd0"
            ],
            "calling": [
                "FUN_00000cc0",
                "FUN_000013b8",
                "FUN_00000fec",
                "FUN_00000a30",
                "FUN_00003ec4",
                "FUN_00001034"
            ],
            "code": "\nvoid handle_kernel_panic_00000f04(char panic_reason,undefined4 panic_message)\n\n{\n  undefined4 stack_variable;\n  code *jump_table;\n  undefined4 panic_message_copy;\n  char type;\n  \n  panic_message_copy = panic_message;\n  type = panic_reason;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panic_reason == '\\x03') {\n      cpu_print_last_instruction();\n    }\n    iprintf(\"*** RIOT kernel panic:\\n%s\\n\\n\",panic_message_copy);\n    ps();\n    iprintf(&DAT_00006f78);\n    iprintf(\"*** halted.\\n\\n\");\n  }\n  irq_disable();\n  panic_arch();\n  jump_table = (code *)0xf4d;\n  pm_off();\n  stack_variable = (int)&stack_variable + 1;\n  initialize_automatic_variables();\n  iprintf(\"initialize_main_function(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  initialize_main_function();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "handle_kernel_panic_00000f04",
            "entrypoint": "0x00000f04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "auto_init": "initialize_automatic_variables",
                "local_10": "panic_message_copy",
                "local_9": "type",
                "main": "initialize_main_function",
                "param_1": "panic_reason",
                "param_2": "panic_message",
                "uStack_18": "stack_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "relocation_table": 1
                },
                "FUN_00000930": {
                    "cleanup": 2,
                    "cleanup_resources": 1,
                    "disable_interrupts": 2,
                    "disable_irq": 2,
                    "do_something": 1,
                    "error_handling_function": 1,
                    "panic": 1,
                    "perform_cleanup": 2,
                    "perform_core_panic": 1,
                    "reset_system": 2
                },
                "FUN_00000cd0": {
                    "get_configuration": 4,
                    "get_default_value": 1,
                    "get_function_pointer": 1,
                    "get_initialization_data": 1,
                    "get_local_data": 1,
                    "get_status": 1,
                    "get_system_data": 1,
                    "get_system_info": 1,
                    "get_system_information": 1,
                    "get_system_parameters": 1,
                    "get_thread_function": 1,
                    "retrieval_function": 1
                },
                "FUN_00000f8c": {
                    "initialize_and_create_threads": 1,
                    "initialize_system": 24,
                    "initialize_system_components": 1,
                    "initialize_system_tasks": 1,
                    "initialize_thread": 1,
                    "initialize_thread_and_core": 1,
                    "initialize_threads": 2
                },
                "FUN_000010d4": {
                    "execute_thread": 1,
                    "execute_thread_function": 1,
                    "perform_action": 1,
                    "perform_task": 1,
                    "process_data": 7,
                    "process_function": 1,
                    "process_thread": 1
                },
                "core_panic": {
                    "handle_panic": 1
                },
                "cpu_switch_context_exit": {
                    "switch_context": 1
                },
                "iStack_24": {
                    "context_flag": 1,
                    "exit_flag": 1,
                    "flag": 2,
                    "shifted_thread_count": 1,
                    "shifted_thread_id": 1,
                    "stack_counter": 1,
                    "stack_pointer": 1,
                    "stack_size": 2,
                    "stack_value": 1,
                    "stack_value1": 2,
                    "stack_var1": 7,
                    "stack_variable1": 2,
                    "temp": 1,
                    "thread_flag": 4,
                    "thread_stack_size": 1,
                    "variable7": 1
                },
                "local_10": {
                    "data_offset": 1,
                    "elf_rel_info": 1,
                    "elf_reloc_offset": 1,
                    "elf_relocation": 1,
                    "initialize_value3": 1,
                    "local_value": 1,
                    "local_var1": 1,
                    "local_var3": 2,
                    "local_variable": 1,
                    "offset": 2,
                    "r_info": 2,
                    "rel_info": 1,
                    "relocation_info": 1,
                    "thread1": 1,
                    "thread_id1": 1,
                    "thread_param1": 1,
                    "thread_parameter3": 1,
                    "variable1": 1,
                    "variable3": 1
                },
                "local_14": {
                    "constant_value2": 1,
                    "initialize_value2": 1,
                    "local_var2": 3,
                    "local_zero1": 1,
                    "parameter2": 1,
                    "r_offset": 2,
                    "thread2": 1,
                    "thread_param1": 2,
                    "thread_param2": 1,
                    "thread_parameter2": 1,
                    "thread_priority": 2,
                    "thread_priority1": 1,
                    "unused_var1": 1,
                    "value1": 1,
                    "variable2": 2,
                    "zero": 1
                },
                "local_18": {
                    "constant_value1": 1,
                    "initialize_value1": 1,
                    "local_var1": 2,
                    "local_var3": 1,
                    "local_zero2": 1,
                    "parameter1": 1,
                    "stack_size": 3,
                    "thread3": 1,
                    "thread_param2": 2,
                    "thread_param3": 1,
                    "thread_parameter1": 1,
                    "thread_priority": 2,
                    "thread_stack_size1": 1,
                    "thread_type": 1,
                    "value2": 1,
                    "variable1": 1,
                    "variable3": 1
                },
                "param_1": {
                    "data": 2,
                    "data1": 1,
                    "index": 1,
                    "input1": 2,
                    "input_param1": 2,
                    "param1": 3,
                    "system_data": 1,
                    "thread_base_address": 1
                },
                "param_2": {
                    "input2": 2,
                    "input_param2": 2,
                    "param2": 3,
                    "param_value": 1,
                    "size": 3,
                    "thread_size": 1,
                    "value": 1
                },
                "param_3": {
                    "byte_value": 1,
                    "flag": 3,
                    "input3": 2,
                    "input_param3": 2,
                    "param3": 3,
                    "priority": 1,
                    "thread_priority": 1
                },
                "param_4": {
                    "count": 1,
                    "data2": 1,
                    "input4": 2,
                    "input_param4": 2,
                    "param4": 3,
                    "size": 1,
                    "stack_size": 1,
                    "thread_id": 1,
                    "value": 1
                },
                "param_5": {
                    "input5": 2,
                    "input_param5": 2,
                    "mutex": 1,
                    "param5": 4,
                    "param_value": 1,
                    "return_value": 1,
                    "unknown_parameter": 1,
                    "value": 1
                },
                "piStack_20": {
                    "context_flag_ptr": 1,
                    "flag_pointer": 1,
                    "flag_ptr": 1,
                    "int_pointer_var": 1,
                    "pointer2": 2,
                    "pointer_to_shifted_thread_count": 1,
                    "pointer_to_shifted_thread_id": 1,
                    "pointer_to_stack_size": 1,
                    "pointer_to_stack_variable1": 1,
                    "pointer_to_thread_flag": 1,
                    "ptr_stack_var1": 1,
                    "stack_frame_pointer": 1,
                    "stack_pointer": 3,
                    "stack_pointer1": 1,
                    "stack_ptr": 2,
                    "stack_value2": 1,
                    "stack_var2": 3,
                    "stack_variable_pointer": 1,
                    "temp_ptr": 1,
                    "thread_flag_pointer": 1,
                    "thread_flag_ptr": 2,
                    "thread_stack_pointer": 1
                },
                "puVar2": {
                    "array_pointer": 1,
                    "buffer": 1,
                    "context_buffer": 1,
                    "context_entry": 1,
                    "context_pointer": 3,
                    "context_ptr": 2,
                    "cpu_context_pointer": 1,
                    "memory_location": 1,
                    "memory_pointer": 1,
                    "pointer": 4,
                    "pointer1": 2,
                    "pointer_var": 2,
                    "pointer_var2": 1,
                    "ptr": 2,
                    "ptr_to_update": 1,
                    "ptr_undef4": 1,
                    "thread_context_switch_pointer": 1,
                    "thread_data": 1,
                    "thread_data_pointer": 1,
                    "thread_value": 1
                },
                "uStack_1c": {
                    "context": 1,
                    "context_flag": 1,
                    "context_switch_flags": 1,
                    "context_switch_value": 1,
                    "cpu_context": 1,
                    "cpu_context_exit_value": 1,
                    "cpu_exit_value": 2,
                    "cpu_switch": 1,
                    "cpu_switch_context_value": 2,
                    "cpu_switch_exit_value": 1,
                    "cpu_switch_value": 1,
                    "exit_code": 1,
                    "stack_value3": 1,
                    "stack_var2": 3,
                    "stack_var3": 1,
                    "stack_variable2": 1,
                    "switch_value": 1,
                    "temp_stack_var1": 1,
                    "variable5": 1
                },
                "uVar1": {
                    "bitmask": 1,
                    "context_count": 1,
                    "context_exit_value": 1,
                    "context_switch_output": 1,
                    "context_switch_result": 3,
                    "context_value": 1,
                    "cpu_exit_value_shifted": 1,
                    "exit_flag": 1,
                    "mask": 1,
                    "result": 2,
                    "shifted_context": 1,
                    "shifted_cpu_switch_context_value": 1,
                    "shifted_value": 1,
                    "switch_context": 1,
                    "switch_context_exit_val": 1,
                    "switch_context_result": 2,
                    "switch_context_value": 1,
                    "switch_result": 1,
                    "temp1": 1,
                    "temp_var1": 2,
                    "thread_context_switch_value": 1,
                    "var1": 2,
                    "variable6": 1
                },
                "uVar3": {
                    "count": 1,
                    "counter": 2,
                    "index": 1,
                    "temp2": 1,
                    "temp_var3": 2,
                    "thread_count": 6,
                    "thread_id": 7,
                    "thread_index": 3,
                    "thread_param": 1,
                    "thread_parameter": 1,
                    "var3": 3,
                    "variable4": 1
                }
            },
            "called": [
                "FUN_000010d4",
                "FUN_00000cd0",
                "FUN_00000930"
            ],
            "calling": [
                "FUN_0000099c"
            ],
            "code": "\nvoid initialize_system_components_00000f8c(void)\n\n{\n  uint context_switch_result;\n  undefined4 *pointer;\n  uint thread_id;\n  int stack_var1;\n  int *stack_var2;\n  undefined4 stack_var2;\n  undefined4 stack_size;\n  undefined4 local_var2;\n  dword local_var3;\n  \n  irq_disable();\n  local_var3 = relocation_table[3].r_info;\n  local_var2 = 0;\n  stack_size = 0xf81;\n  thread_create(&DAT_1fff0a6c,0x100,0xf,0xc);\n  local_var3 = relocation_table[3].r_offset;\n  local_var2 = 0;\n  stack_size = 0xf5d;\n  thread_id = 0xc;\n  thread_create(&DAT_1fff046c,0x600,7);\n  stack_var2 = 0xfd3;\n  context_switch_result = switch_context();\n  context_switch_result = context_switch_result >> 0x1e;\n  pointer = (undefined4 *)(thread_id * 0x100);\n  stack_var1 = (thread_id >> 0x1d) << 0x11;\n  stack_var2 = &stack_var1;\n  if ((context_switch_result & context_switch_result - 1) != 0) {\n    handle_panic(3,\"FAILED ASSERTION.\");\n  }\n  *pointer = 0;\n  pointer[1] = 0;\n  pointer[2] = context_switch_result - 1;\n  return;\n}\n\n",
            "current_name": "initialize_system_components_00000f8c",
            "entrypoint": "0x00000f8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "relocation_table",
                "FUN_00000f8c": "initialize_system_components_00000f8c",
                "core_panic": "handle_panic",
                "cpu_switch_context_exit": "switch_context",
                "iStack_24": "stack_var1",
                "local_10": "local_var3",
                "local_14": "local_var2",
                "local_18": "stack_size",
                "piStack_20": "stack_var2",
                "puVar2": "pointer",
                "uStack_1c": "stack_var2",
                "uVar1": "context_switch_result",
                "uVar3": "thread_id"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00000fec": {
            "additional_data": {
                "FUN_00000f04": {
                    "do_something": 1,
                    "other_function": 1,
                    "perform_operation": 1,
                    "process_data": 2,
                    "set_default_value": 1
                },
                "FUN_00000fec": {
                    "initialize_and_set_bounds": 1,
                    "initialize_array": 6,
                    "initialize_bitmask": 3,
                    "initialize_buffer": 1,
                    "initialize_data_structure": 3,
                    "initialize_memory": 7,
                    "initialize_memory_block": 1,
                    "initialize_memory_region": 1,
                    "initialize_param": 1,
                    "initialize_param_array": 2,
                    "initialize_parameters": 1,
                    "initialize_params": 1,
                    "initialize_variable_array": 1,
                    "set_initial_values": 1,
                    "set_param_values": 1
                },
                "core_panic": {
                    "display_error_message": 1,
                    "error_handler": 1,
                    "handle_assertion_error": 2,
                    "handle_assertion_failure": 4,
                    "handle_error": 1,
                    "handle_panic": 3,
                    "panic": 1,
                    "report_error": 5,
                    "report_failure": 1
                },
                "param_1": {
                    "array": 9,
                    "buffer": 1,
                    "character": 1,
                    "data_structure": 2,
                    "data_structure_ptr": 1,
                    "mem_ptr": 1,
                    "memory_array": 1,
                    "memory_block": 1,
                    "memory_block_ptr": 1,
                    "memory_pointer": 2,
                    "memory_ptr": 1,
                    "memory_region": 1,
                    "output": 1,
                    "output_array": 5,
                    "output_pointer": 1,
                    "result": 1,
                    "result_buffer": 1
                },
                "param_2": {
                    "array_length": 1,
                    "array_size": 3,
                    "bit_count": 2,
                    "bit_length": 1,
                    "block_size": 2,
                    "buffer_size": 2,
                    "memory_size": 3,
                    "region_size": 1,
                    "size": 13,
                    "size_of_array": 1,
                    "value": 2
                }
            },
            "called": [
                "FUN_00000f04"
            ],
            "calling": [
                "FUN_000010d4"
            ],
            "code": "\nvoid initialize_param_array_00000fec(undefined4 *array,uint size)\n\n{\n  if ((size & size - 1) != 0) {\n    report_error(3,\"FAILED ASSERTION.\");\n  }\n  *array = 0;\n  array[1] = 0;\n  array[2] = size - 1;\n  return;\n}\n\n",
            "current_name": "initialize_param_array_00000fec",
            "entrypoint": "0x00000fec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00000fec": "initialize_param_array_00000fec",
                "core_panic": "report_error",
                "param_1": "array",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001034": {
            "additional_data": {
                "FUN_00001034": {
                    "copy_and_link": 1,
                    "find_and_assign_ptr": 1,
                    "find_and_replace": 1,
                    "find_and_replace_pointer": 2,
                    "find_and_update_pointer": 1,
                    "find_first_pointer": 1,
                    "find_insert_point": 1,
                    "find_insert_position": 1,
                    "find_next_node": 1,
                    "find_next_smallest": 1,
                    "rearrange_pointers": 1,
                    "reverse_and_update_list": 3,
                    "set_previous_pointer": 1,
                    "update_function_pointer": 1,
                    "update_linked_list": 1,
                    "update_list": 1,
                    "update_param": 1,
                    "update_param_and_linked_list": 1,
                    "update_param_list": 1,
                    "update_parameter_list": 1,
                    "update_pointer": 2,
                    "update_pointer_array": 1,
                    "update_pointer_in_list": 1,
                    "update_pointer_list": 3
                },
                "local_1c": {
                    "current_element": 2,
                    "current_entry": 1,
                    "current_node": 11,
                    "current_parameter": 1,
                    "current_pointer": 12,
                    "current_ptr": 3,
                    "next_node": 1
                },
                "param_1": {
                    "array": 1,
                    "array_ptr": 1,
                    "function_pointers": 1,
                    "linked_list": 3,
                    "list": 9,
                    "list_of_pointers": 2,
                    "node_list": 2,
                    "param_list": 1,
                    "parameter_list": 1,
                    "pointer_array": 1,
                    "pointer_list": 6,
                    "pointers_array": 1,
                    "ptr_list": 1,
                    "source_linked_list": 1
                },
                "param_2": {
                    "current_node": 1,
                    "data": 1,
                    "index": 17,
                    "input_index": 1,
                    "new_node": 2,
                    "new_param": 1,
                    "num_of_pointers": 1,
                    "param_value": 1,
                    "parameter": 1,
                    "search_value": 3,
                    "target": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_00000f04"
            ],
            "calling": [
                "FUN_00002434"
            ],
            "code": "\nvoid update_pointer_in_list_00001034(int **list,int index)\n\n{\n  int **current_pointer;\n  \n  if (8 < *(byte *)(index + 4)) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  for (current_pointer = list;\n      (*current_pointer != (int *)0x0 && (*(byte *)((int)*current_pointer + -3) <= *(byte *)(index + 5)));\n      current_pointer = (int **)*current_pointer) {\n  }\n  *(int **)(index + 8) = *current_pointer;\n  *current_pointer = (int *)(int **)(index + 8);\n  return;\n}\n\n",
            "current_name": "update_pointer_in_list_00001034",
            "entrypoint": "0x00001034",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001034": "update_pointer_in_list_00001034",
                "local_1c": "current_pointer",
                "param_1": "list",
                "param_2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000010a0": {
            "additional_data": {
                "FUN_000010a0": {
                    "calculate_array_offset": 3,
                    "calculate_distance": 3,
                    "calculate_offset": 12,
                    "count_elements": 1,
                    "count_items_with_self_reference": 1,
                    "find_array_end_index": 2,
                    "find_difference_between_pointers": 1,
                    "find_displacement": 2,
                    "find_num_elements": 1,
                    "find_offset": 2,
                    "get_distance_between_pointers": 1,
                    "get_distance_from_start": 1,
                    "get_offset": 1
                },
                "local_c": {
                    "current_element": 22,
                    "current_index": 1,
                    "current_pointer": 2,
                    "current_ptr": 6
                },
                "param_1": {
                    "arr": 1,
                    "array": 24,
                    "data_array": 2,
                    "input_array": 1,
                    "pointer_array": 1,
                    "pointers": 1,
                    "ptr_list": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0000211c"
            ],
            "code": "\nint calculate_array_offset_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "current_name": "calculate_array_offset_000010a0",
            "entrypoint": "0x000010a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000010a0": "calculate_array_offset_000010a0",
                "local_c": "current_element",
                "param_1": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000010d4": {
            "additional_data": {
                "DAT_1fff0350": {
                    "number_of_threads": 1,
                    "thread_count": 5,
                    "total_threads_count": 1
                },
                "DAT_1fff0358": {
                    "available_threads": 1,
                    "thread_array": 3,
                    "thread_table": 1,
                    "thread_table_array": 1
                },
                "FUN_000010d4": {
                    "init_thread": 1,
                    "initialize_thread": 29,
                    "initialize_thread_stack": 1
                },
                "iVar3": {
                    "result": 13,
                    "return_value": 18
                },
                "local_10": {
                    "end_address": 2,
                    "end_of_stack": 3,
                    "loop_counter": 16,
                    "loop_index": 1,
                    "loop_var": 4,
                    "loop_variable": 4,
                    "stack_end": 1
                },
                "local_2c": {
                    "adjusted_address": 2,
                    "adjusted_input_function": 1,
                    "adjusted_param_pointer": 1,
                    "adjusted_stack_addr": 1,
                    "adjusted_stack_base_tmp": 1,
                    "adjusted_stack_pointer": 2,
                    "adjusted_start_address": 2,
                    "adjusted_thread_id": 1,
                    "aligned_address": 4,
                    "aligned_data": 1,
                    "aligned_stack": 3,
                    "aligned_stack_address": 2,
                    "aligned_start_address": 5,
                    "aligned_thread_address": 1,
                    "aligned_thread_id": 1,
                    "stack_base_address": 1,
                    "stack_pointer": 1,
                    "thread_data_pointer_temp": 1
                },
                "local_30": {
                    "adjusted_input_param": 1,
                    "adjusted_size_temp": 1,
                    "adjusted_stack_base": 1,
                    "adjusted_stack_size": 14,
                    "adjusted_stack_size_temp": 1,
                    "adjusted_thread_stack_size": 1,
                    "adjustment": 1,
                    "aligned_size": 2,
                    "aligned_size_adjustment": 1,
                    "aligned_size_difference": 1,
                    "aligned_size_temp": 1,
                    "aligned_stack_size": 2,
                    "alignment": 1,
                    "pad_byte_count": 1,
                    "padding": 1,
                    "stack_align": 1
                },
                "local_a": {
                    "available_id": 1,
                    "available_index": 4,
                    "available_location": 1,
                    "available_slot": 2,
                    "available_thread": 1,
                    "available_thread_id": 2,
                    "available_thread_index": 1,
                    "first_available_index": 1,
                    "first_empty_slot": 1,
                    "found_thread": 1,
                    "found_thread_index": 2,
                    "found_thread_indx": 1,
                    "index": 1,
                    "index2": 2,
                    "index_a": 2,
                    "loop_index2": 1,
                    "loop_variable2": 1,
                    "temp2": 1,
                    "thread_id": 1,
                    "thread_index": 2,
                    "thread_slot": 1,
                    "unused": 1
                },
                "local_c": {
                    "available_id": 1,
                    "available_index": 1,
                    "available_slot": 1,
                    "available_thread": 2,
                    "available_thread_index": 1,
                    "available_thread_indx": 1,
                    "empty_location": 1,
                    "empty_slot": 1,
                    "first_available_thread": 1,
                    "first_free_thread_index": 1,
                    "free_thread_index": 1,
                    "index": 3,
                    "index1": 2,
                    "index_c": 2,
                    "loop_condition": 1,
                    "loop_index1": 1,
                    "loop_range": 1,
                    "loop_variable1": 1,
                    "temp1": 1,
                    "thread_id": 2,
                    "thread_id_counter": 1,
                    "thread_index": 4
                },
                "param_1": {
                    "address": 6,
                    "initial_stack_pointer": 1,
                    "input_function": 1,
                    "param_pointer": 1,
                    "stack_size": 3,
                    "start_address": 8,
                    "thread_id": 11
                },
                "param_2": {
                    "input_param": 1,
                    "priority": 1,
                    "size": 5,
                    "stack_base": 1,
                    "stack_size": 21,
                    "thread_id": 1,
                    "thread_priority": 1
                },
                "param_3": {
                    "flag": 1,
                    "flags": 3,
                    "input_byte": 1,
                    "name_length": 1,
                    "priority": 23,
                    "thread_priority": 1,
                    "thread_stack_size": 1
                },
                "param_4": {
                    "flags": 22,
                    "input_flags": 1,
                    "options": 5,
                    "status": 1,
                    "thread_flags": 1,
                    "thread_options": 1
                },
                "param_5": {
                    "arg0": 1,
                    "arg1": 12,
                    "callback": 1,
                    "create_func": 1,
                    "entry_func": 1,
                    "entry_point": 1,
                    "func": 1,
                    "function_pointer": 1,
                    "handler_function": 1,
                    "init_func": 1,
                    "param5": 3,
                    "param_5": 4,
                    "thread_entry": 1,
                    "thread_func": 1,
                    "thread_start_function": 1
                },
                "param_6": {
                    "arg": 1,
                    "arg1": 4,
                    "arg2": 12,
                    "argument1": 1,
                    "context": 1,
                    "create_arg": 1,
                    "init_arg": 1,
                    "param1": 1,
                    "param6": 3,
                    "param_6": 5,
                    "thread_argument": 1
                },
                "param_7": {
                    "arg": 1,
                    "arg2": 4,
                    "arg3": 12,
                    "argument": 1,
                    "argument2": 1,
                    "attr": 1,
                    "param2": 1,
                    "param7": 3,
                    "param_7": 5,
                    "retain": 1,
                    "thread_argument2": 1
                },
                "puVar5": {
                    "new_thread": 1,
                    "stack": 1,
                    "thread": 3,
                    "thread_context": 1,
                    "thread_control_block": 7,
                    "thread_data": 6,
                    "thread_data_pointer": 3,
                    "thread_pointer": 3,
                    "thread_ptr": 3,
                    "thread_struct": 3
                },
                "uVar1": {
                    "interrupt_flags": 2,
                    "interrupt_mask": 2,
                    "interrupt_state": 4,
                    "interrupt_status": 3,
                    "irq_disabled": 3,
                    "irq_flag": 3,
                    "irq_flags": 3,
                    "irq_lock": 1,
                    "irq_saved_state": 1,
                    "irq_state": 4,
                    "irq_status": 5
                },
                "uVar2": {
                    "init_stack_result": 1,
                    "stack": 2,
                    "stack_base": 1,
                    "stack_init_result": 1,
                    "stack_initialization_result": 1,
                    "stack_initializer": 1,
                    "thread": 1,
                    "thread_entry": 1,
                    "thread_id": 2,
                    "thread_id_copy": 1,
                    "thread_init": 1,
                    "thread_init_result": 3,
                    "thread_pointer": 1,
                    "thread_stack": 8,
                    "thread_stack_address": 1,
                    "thread_stack_init_result": 5
                },
                "uVar4": {
                    "adjusted_param": 1,
                    "adjusted_size": 1,
                    "adjusted_stack_size": 4,
                    "align_size": 1,
                    "aligned_size": 8,
                    "aligned_stack_size": 12,
                    "alignment_offset": 1,
                    "frame_size": 1,
                    "stack_mask": 1,
                    "temp1": 1
                }
            },
            "called": [
                "FUN_000007dc",
                "FUN_00000698",
                "FUN_00000fec",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000cd0"
            ],
            "calling": [
                "FUN_00000f8c"
            ],
            "code": "\nint initialize_thread_stack_000010d4(uint thread_id,int stack_size,byte priority,uint flags,undefined4 arg1,\n                undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 irq_status;\n  undefined4 thread_stack;\n  int return_value;\n  uint aligned_stack_size;\n  undefined4 *thread_control_block;\n  int adjusted_stack_size;\n  uint aligned_start_address;\n  uint loop_counter;\n  short thread_index;\n  short available_index;\n  \n  if (priority < 0x10) {\n    adjusted_stack_size = stack_size;\n    aligned_start_address = thread_id;\n    if ((thread_id & 3) != 0) {\n      adjusted_stack_size = 4 - (thread_id & 3);\n      aligned_start_address = adjusted_stack_size + thread_id;\n      adjusted_stack_size = stack_size - adjusted_stack_size;\n    }\n    aligned_stack_size = adjusted_stack_size - 0x30U & 0xfffffffc;\n    thread_control_block = (undefined4 *)(aligned_stack_size + aligned_start_address);\n    if ((flags & 8) == 0) {\n      *(uint *)aligned_start_address = aligned_start_address;\n    }\n    else {\n      for (loop_counter = aligned_start_address; loop_counter < aligned_stack_size + aligned_start_address; loop_counter = loop_counter + 4) {\n        *(uint *)loop_counter = loop_counter;\n      }\n    }\n    irq_status = irq_disable();\n    available_index = 0;\n    for (thread_index = 1; thread_index < 0x21; thread_index = thread_index + 1) {\n      if (*(int *)(&DAT_1fff0358 + thread_index * 4) == 0) {\n        available_index = thread_index;\n        break;\n      }\n    }\n    if (available_index == 0) {\n      irq_restore(irq_status);\n      return_value = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + available_index * 4) = thread_control_block;\n      *(short *)((int)thread_control_block + 6) = available_index;\n      thread_stack = thread_stack_init(arg1,arg2,aligned_start_address,aligned_stack_size);\n      *thread_control_block = thread_stack;\n      thread_control_block[9] = aligned_start_address;\n      thread_control_block[0xb] = stack_size;\n      thread_control_block[10] = arg3;\n      *(byte *)((int)thread_control_block + 5) = priority;\n      *(undefined *)(thread_control_block + 1) = 0;\n      thread_control_block[2] = 0;\n      thread_control_block[3] = 0;\n      thread_control_block[4] = 0;\n      cib_init(thread_control_block + 5,0);\n      thread_control_block[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        sched_set_status(thread_control_block,10);\n        if ((flags & 4) == 0) {\n          irq_restore(irq_status);\n          sched_switch(priority);\n          return (int)available_index;\n        }\n      }\n      else {\n        sched_set_status(thread_control_block,1);\n      }\n      irq_restore(irq_status);\n      return_value = (int)available_index;\n    }\n  }\n  else {\n    return_value = -0x16;\n  }\n  return return_value;\n}\n\n",
            "current_name": "initialize_thread_stack_000010d4",
            "entrypoint": "0x000010d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000010d4": "initialize_thread_stack_000010d4",
                "iVar3": "return_value",
                "local_10": "loop_counter",
                "local_2c": "aligned_start_address",
                "local_30": "adjusted_stack_size",
                "local_a": "available_index",
                "local_c": "thread_index",
                "param_1": "thread_id",
                "param_2": "stack_size",
                "param_3": "priority",
                "param_4": "flags",
                "param_5": "arg1",
                "param_6": "arg2",
                "param_7": "arg3",
                "puVar5": "thread_control_block",
                "uVar1": "irq_status",
                "uVar2": "thread_stack",
                "uVar4": "aligned_stack_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001274": {
            "additional_data": {
                "FUN_00001274": {
                    "initialize_microcontroller": 1,
                    "initialize_system": 29
                },
                "FUN_00001c84": {
                    "configure_cortex": 1,
                    "configure_cortexm": 7,
                    "function_a": 1,
                    "initialize_core": 1,
                    "initialize_cortex": 2,
                    "initialize_cortex_m": 1,
                    "initialize_cortexm": 14,
                    "initialize_mcg": 1,
                    "perform_task1": 1
                },
                "FUN_00002396": {
                    "function_c": 1,
                    "initialize_cortexm": 1,
                    "initialize_periph": 1,
                    "initialize_peripheral": 2,
                    "initialize_peripherals": 23,
                    "perform_task3": 1
                },
                "FUN_0000258c": {
                    "function_b": 1,
                    "initialize_clock": 2,
                    "initialize_kinetis": 3,
                    "initialize_kinetis_mcg": 13,
                    "initialize_mcg": 8,
                    "initialize_peripherals": 1,
                    "perform_task2": 1
                },
                "cortexm_init": {
                    "initialize_cortex_m": 1,
                    "initialize_cortexm": 1
                },
                "fun_00001c84": {
                    "initialize_cortexm": 1
                },
                "fun_00002396": {
                    "initialize_peripherals": 1
                },
                "fun_0000258c": {
                    "initialize_kinetis_mcg": 1
                },
                "kinetis_mcg_init": {
                    "initialize_kinetis_mcg": 2
                },
                "periph_init": {
                    "initialize_peripherals": 2
                }
            },
            "called": [
                "FUN_00001c84",
                "FUN_0000258c",
                "FUN_00002396"
            ],
            "calling": [
                "FUN_00000e64"
            ],
            "code": "\nvoid initialize_system_00001274(void)\n\n{\n  initialize_cortexm();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_kinetis_mcg();\n  initialize_peripherals();\n  return;\n}\n\n",
            "current_name": "initialize_system_00001274",
            "entrypoint": "0x00001274",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001274": "initialize_system_00001274",
                "cortexm_init": "initialize_cortexm",
                "kinetis_mcg_init": "initialize_kinetis_mcg",
                "periph_init": "initialize_peripherals"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000129c": {
            "additional_data": {
                "DAT_": {
                    "": 1,
                    "dat": 1
                },
                "FUN_0000129c": {
                    "acquire_mutex": 1,
                    "lock_function": 1,
                    "lock_mutex": 29
                },
                "FUN_00002434": {
                    "change_int": 1,
                    "do_something": 4,
                    "execute_function": 2,
                    "execute_task": 1,
                    "foo": 1,
                    "function_with_params": 2,
                    "perform_action": 1,
                    "perform_operation": 1,
                    "perform_task": 2,
                    "process_data": 11,
                    "process_values": 1,
                    "some_function": 3,
                    "unlock_mutex": 1
                },
                "PTR_": {
                    "": 1,
                    "ptr": 1
                },
                "param_1": {
                    "array": 6,
                    "array_parameter": 1,
                    "array_pointer": 2,
                    "buffer": 1,
                    "data": 2,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "mutex": 11,
                    "param_array": 1,
                    "ptr": 1,
                    "task_param1": 1,
                    "task_param_1": 1
                },
                "param_2": {
                    "arg": 1,
                    "array": 1,
                    "array_size": 2,
                    "data_length": 2,
                    "data_size": 4,
                    "int_param": 1,
                    "integer_parameter": 1,
                    "length": 3,
                    "operation_code": 1,
                    "param": 1,
                    "size": 8,
                    "some_parameter": 1,
                    "task_param2": 1,
                    "task_param_2": 1,
                    "value": 2,
                    "var_count": 1
                },
                "return": {
                    "": 1
                }
            },
            "called": [
                "FUN_00002434"
            ],
            "calling": [
                "FUN_000012e2"
            ],
            "code": "\nvoid lock_mutex_0000129c(undefined4 mutex)\n\n{\n  _mutex_lock(mutex,1);\n  return;\n}\n\n",
            "current_name": "lock_mutex_0000129c",
            "entrypoint": "0x0000129c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000129c": "lock_mutex_0000129c",
                "param_1": "mutex"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000012b4": {
            "additional_data": {
                "FUN_000012b4": {
                    "unlock_and_add": 5,
                    "unlock_and_add_data": 1,
                    "unlock_and_add_one": 22,
                    "unlock_and_increment": 1,
                    "unlock_mutex_and_add_one": 2
                },
                "FUN_00002364": {
                    "add_one": 1
                },
                "FUN_000024bc": {
                    "unlock_address": 1
                },
                "param_1": {
                    "data": 1,
                    "data_buffer": 1,
                    "data_ptr": 1,
                    "handle": 1,
                    "lock_address": 3,
                    "lock_ptr": 1,
                    "locked_mutex": 1,
                    "memory_address": 1,
                    "mutex": 4,
                    "mutex_addr": 1,
                    "mutex_address": 8,
                    "mutex_handle": 2,
                    "mutex_ptr": 3,
                    "ptr": 1,
                    "resource_id": 1,
                    "unlock_ptr": 1
                },
                "param_2": {
                    "additional_data": 2,
                    "arg": 1,
                    "data": 7,
                    "param": 2,
                    "undefined_arg": 1,
                    "undefined_param": 7,
                    "undefined_parameter": 1,
                    "unknown_flag": 1,
                    "unknown_param": 2,
                    "unspecified_data": 1,
                    "unused": 1,
                    "unused_param": 1,
                    "value": 4
                },
                "uVar1": {
                    "result": 28,
                    "return_value": 1
                }
            },
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "calling": [],
            "code": "\nundefined4 unlock_mutex_and_add_one_000012b4(int mutex_address,undefined data)\n\n{\n  undefined4 result;\n  \n  result = tsrb_add_one(mutex_address + 4,data);\n  mutex_unlock(mutex_address);\n  return result;\n}\n\n",
            "current_name": "unlock_mutex_and_add_one_000012b4",
            "entrypoint": "0x000012b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000012b4": "unlock_mutex_and_add_one_000012b4",
                "param_1": "mutex_address",
                "param_2": "data",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000012e2": {
            "additional_data": {
                "FUN_000012e2": {
                    "acquire_resource": 1,
                    "get_data_with_lock": 1,
                    "parse_data": 1,
                    "read_and_lock": 3,
                    "read_and_lock_until_success": 3,
                    "read_data_from_buffer": 1,
                    "read_data_from_stream": 1,
                    "read_data_until_success": 1,
                    "read_from_buffer": 2,
                    "retrieve_data": 5,
                    "retrieve_data_with_mutex": 1,
                    "reverse_and_lock": 1,
                    "tsrb_get_and_mutex_lock": 1,
                    "wait_for_data": 6,
                    "wait_for_tsrb_data": 2,
                    "wait_for_tsrb_event": 1
                },
                "iVar1": {
                    "error_code": 3,
                    "read_result": 2,
                    "read_status": 1,
                    "result": 18,
                    "status": 3,
                    "tsrb_error": 1,
                    "tsrb_result": 1
                },
                "param_1": {
                    "buffer": 6,
                    "buffer_address": 5,
                    "buffer_ptr": 2,
                    "data": 2,
                    "data_address": 2,
                    "data_buffer": 3,
                    "data_location": 1,
                    "data_offset": 1,
                    "data_ptr": 5,
                    "resource_id": 1,
                    "stream_handle": 1,
                    "tsrb_data_address": 1,
                    "tsrb_instance": 1
                },
                "param_2": {
                    "buffer": 2,
                    "buffer_address": 1,
                    "buffer_pointer": 1,
                    "buffer_size": 1,
                    "offset": 1,
                    "param_a": 2,
                    "param_address": 1,
                    "param_offset": 1,
                    "param_size": 2,
                    "size": 18,
                    "size_ptr": 1
                },
                "param_3": {
                    "buffer_size": 2,
                    "count": 9,
                    "count_ptr": 1,
                    "flag": 1,
                    "index": 1,
                    "offset": 4,
                    "param3": 1,
                    "param_b": 2,
                    "param_count": 1,
                    "param_size": 1,
                    "size": 4,
                    "timeout": 4
                }
            },
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "calling": [
                "FUN_00000e14"
            ],
            "code": "\nint wait_for_tsrb_data_000012e2(int buffer,undefined4 size,undefined4 count)\n\n{\n  int result;\n  \n  while( true ) {\n    result = tsrb_get(buffer + 4,size,count);\n    if (result != 0) break;\n    mutex_lock(buffer);\n  }\n  return result;\n}\n\n",
            "current_name": "wait_for_tsrb_data_000012e2",
            "entrypoint": "0x000012e2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000012e2": "wait_for_tsrb_data_000012e2",
                "iVar1": "result",
                "param_1": "buffer",
                "param_2": "size",
                "param_3": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001318": {
            "additional_data": {
                "0x1fff1f00": {
                    "memory_offset": 1
                },
                "DAT_": {
                    "dat_": 1
                },
                "FUN_00001318": {
                    "set_bit": 4,
                    "set_bit_at_offset": 1,
                    "set_bit_at_position": 1,
                    "set_bit_in_array": 4,
                    "set_bit_in_integer": 1,
                    "set_bit_in_memory": 18,
                    "store_bitwise_value": 1,
                    "write_bit": 1
                },
                "PTR_": {
                    "ptr_": 1
                },
                "PTR_dword_fffffffe": {
                    "base_address": 1
                },
                "char": {
                    "char_val": 1,
                    "char_value": 1,
                    "character": 1
                },
                "inputByte": {
                    "byte_to_set": 1
                },
                "int": {
                    "int_ptr": 1,
                    "int_value": 1
                },
                "param_1": {
                    "bit_position": 1,
                    "bit_to_use": 1,
                    "byte_to_set": 3,
                    "byte_val": 1,
                    "byte_value": 4,
                    "input_byte": 16,
                    "param_1": 3,
                    "set_bit": 1,
                    "value": 1
                },
                "ptr": {
                    "array": 1
                },
                "result": {
                    "new_int_value": 1
                },
                "uint": {
                    "uint_val": 1,
                    "unsigned_integer": 1
                },
                "var1": {
                    "shifted_value": 1
                },
                "var2": {
                    "index": 1
                },
                "var3": {
                    "bit_mask": 1
                },
                "var_1": {
                    "shifted_value": 1
                },
                "var_2": {
                    "bit_position": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000014c4"
            ],
            "code": "\nvoid set_bit_in_memory_00001318(byte input_byte)\n\n{\n  *(int_value *)(((uint_val)(int_value)(char_val)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_00001318",
            "entrypoint": "0x00001318",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "char": "char_val",
                "int": "int_value",
                "param_1": "input_byte",
                "uint": "uint_val"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001348": {
            "additional_data": {
                "DAT_1fff0354": {
                    "flag": 1
                },
                "FUN_0000093c": {
                    "do_some_task": 1,
                    "do_something": 8,
                    "execute_sub_function": 3,
                    "perform_additional_task": 1,
                    "perform_additional_tasks": 2,
                    "perform_cleanup": 5,
                    "perform_other_task": 1,
                    "perform_some_task": 1,
                    "perform_specific_task": 1,
                    "perform_subtask": 1,
                    "perform_task": 5,
                    "process_data": 1
                },
                "FUN_00001348": {
                    "check_and_yield": 18,
                    "check_and_yield_higher": 1,
                    "check_and_yield_if_not_zero": 1,
                    "check_and_yield_if_set": 1,
                    "check_and_yield_thread": 3,
                    "check_interrupt": 1,
                    "perform_thread_yield": 1,
                    "yield_if_data_available": 2,
                    "yield_if_data_not_zero": 1,
                    "yield_if_not_zero": 2
                },
                "thread_yield_higher": {
                    "yield": 1
                }
            },
            "called": [
                "FUN_0000093c"
            ],
            "calling": [
                "FUN_00001628"
            ],
            "code": "\nvoid check_and_yield_thread_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    yield();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_yield_thread_00001348",
            "entrypoint": "0x00001348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001348": "check_and_yield_thread_00001348",
                "thread_yield_higher": "yield"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001360": {
            "additional_data": {
                "0x2000000": {
                    "constant_offset": 1,
                    "offset": 1
                },
                "0xf0000000": {
                    "mask1": 1
                },
                "0xfffff": {
                    "mask2": 1
                },
                "FUN_00001360": {
                    "calculate_new_value": 1,
                    "calculate_offset": 23,
                    "calculate_result": 3,
                    "calculate_sum": 1,
                    "calculate_sum_and_offset": 1,
                    "calculate_updated_value": 1,
                    "multiply_and_combine": 1
                },
                "param_1": {
                    "address": 7,
                    "base_address": 5,
                    "base_value": 2,
                    "data": 1,
                    "input_1": 1,
                    "input_number": 3,
                    "input_value": 9,
                    "number1": 2,
                    "value1": 1
                },
                "param_2": {
                    "index": 3,
                    "input_2": 1,
                    "multiplier": 18,
                    "number2": 2,
                    "offset": 4,
                    "offset_multiplier": 1,
                    "value": 1,
                    "value2": 1
                },
                "param_3": {
                    "constant": 1,
                    "constant_value": 1,
                    "shift_amount": 1,
                    "shift_bits": 1,
                    "value": 1
                },
                "param_4": {
                    "mask": 1,
                    "shift": 1
                },
                "param_5": {
                    "offset": 1,
                    "shift_amount": 1
                },
                "param_6": {
                    "base": 1,
                    "constant": 1
                },
                "param_7": {
                    "result": 1
                },
                "result": {
                    "calculated_offset": 1
                },
                "updated_value": {
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001392"
            ],
            "code": "\nint calculate_sum_and_offset_00001360(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "current_name": "calculate_sum_and_offset_00001360",
            "entrypoint": "0x00001360",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001360": "calculate_sum_and_offset_00001360",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001392": {
            "additional_data": {
                "FUN_00001392": {
                    "initialize_array": 1,
                    "initialize_memory": 1,
                    "initialize_pointer": 2,
                    "initialize_pointer_value": 1,
                    "initialize_results": 1,
                    "initialize_value": 1,
                    "initialize_value_and_offset": 1,
                    "initialize_variable": 1,
                    "initialize_with_value": 1,
                    "set_first_element_to1": 1,
                    "set_flag_and_return_value": 1,
                    "set_flag_to_one": 1,
                    "set_offset_to_one": 2,
                    "set_offset_to_sum": 1,
                    "set_offset_to_value": 2,
                    "set_pointer_to_value": 1,
                    "set_return_value_to1": 2,
                    "set_sum_to_address": 1,
                    "set_sum_to_one": 5,
                    "set_sum_to_value": 1,
                    "set_to_one_and_return": 1,
                    "set_to_one_and_update_offset": 1,
                    "set_variable_and_offset": 1
                },
                "calculate_sum_and_offset_00001360": {
                    "calculate_sum_and_offset": 1
                },
                "param_1": {
                    "input": 1,
                    "input_array": 1,
                    "input_value": 29
                },
                "param_2": {
                    "multiplier": 31
                },
                "puVar1": {
                    "calculated_pointer": 1,
                    "first_element": 1,
                    "offset_ptr": 1,
                    "result_address": 2,
                    "result_array": 1,
                    "result_pointer": 7,
                    "result_ptr": 11,
                    "sum_and_offset_pointer": 1,
                    "sum_and_offset_ptr": 1,
                    "sum_offset_pointer": 1,
                    "sum_result_ptr": 1
                }
            },
            "called": [
                "FUN_00001360"
            ],
            "calling": [
                "FUN_000013b8"
            ],
            "code": "\nvoid set_sum_to_one_00001392(undefined4 input_value,undefined multiplier)\n\n{\n  undefined4 *result_ptr;\n  \n  result_ptr = (undefined4 *)calculate_sum_and_offset(input_value,multiplier);\n  *result_ptr = 1;\n  return;\n}\n\n",
            "current_name": "set_sum_to_one_00001392",
            "entrypoint": "0x00001392",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001392": "set_sum_to_one_00001392",
                "calculate_sum_and_offset_00001360": "calculate_sum_and_offset",
                "param_1": "input_value",
                "param_2": "multiplier",
                "puVar1": "result_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000013b8": {
            "additional_data": {
                "0x7000": {
                    "gpio_base_address": 1
                },
                "0xffffffff": {
                    "error_code": 1
                },
                "DAT_00006ffc": {
                    "base_address": 1,
                    "data_structure": 1,
                    "data_structure_1": 1,
                    "data_structure_3": 1,
                    "gpio_base_address": 1,
                    "gpio_pin_values": 1,
                    "input_array": 1,
                    "pin_data_array": 1,
                    "sum_input_values_address": 1,
                    "uart_config_offset": 1
                },
                "DAT_00007002": {
                    "condition_variable": 1,
                    "data_check_offset": 1,
                    "data_structure_4": 1,
                    "flag": 1,
                    "flag_array": 2,
                    "kernel_flag": 1,
                    "uart_initialized": 1,
                    "uart_module_init_flag": 1
                },
                "DAT_1fff0b6c": {
                    "data_structure_1": 3,
                    "gpio_pin_init_values": 1,
                    "gpio_pins_address": 1,
                    "pin_config_offset": 1,
                    "pins_array": 1,
                    "uart_config_table_1": 1,
                    "uart_pin_array": 1,
                    "uart_pins_1": 1,
                    "uart_pins_first": 1
                },
                "DAT_1fff0b70": {
                    "data_structure_2": 3,
                    "gpio_pin_config_values": 1,
                    "initial_value_offset": 1,
                    "uart_array": 1,
                    "uart_config_array": 1,
                    "uart_config_table_2": 1,
                    "uart_params_address": 1,
                    "uart_pins_2": 1,
                    "uart_pins_second": 1
                },
                "FUN_000013b8": {
                    "initialize_uart": 29,
                    "initialize_uart_and_pins": 2
                },
                "PTR_1fff0b6c": {
                    "data_structure_1": 1
                },
                "PTR_1fff0b70": {
                    "data_structure_2": 1
                },
                "PTR_DAT_00006ffc": {
                    "uart_config_base": 1
                },
                "PTR_DAT_00007000": {
                    "uart_base": 1
                },
                "PTR_DAT_1fff0b6c": {
                    "pin_config_base": 1
                },
                "PTR_DAT_1fff0b70": {
                    "initial_value_base": 1
                },
                "core_panic": {
                    "handle_core_panic": 1,
                    "handle_kernel_panic": 9,
                    "handle_kernel_panic_00000f04": 10
                },
                "handle_kernel_panic_00000f04": {
                    "handle_kernel_panic": 9,
                    "handle_panic": 1,
                    "panic": 1
                },
                "initialize_gpio_ports_00001448": {
                    "initialize_gpio": 1,
                    "initialize_gpio_ports": 13
                },
                "param_1": {
                    "index": 15,
                    "port_index": 16
                },
                "param_2": {
                    "data_value": 1,
                    "input_value": 2,
                    "multiplier": 3,
                    "uart_config": 15,
                    "uart_flags": 1,
                    "uart_index": 2,
                    "uart_mode": 2,
                    "uart_param": 1,
                    "uart_pin": 1,
                    "uart_port": 1,
                    "value": 2
                },
                "param_3": {
                    "input_value": 6,
                    "panic_reason": 1,
                    "param_3": 1,
                    "pin_config": 6,
                    "pin_config_1": 6,
                    "pin_init_value": 3,
                    "pin_param": 2,
                    "pin_value": 1,
                    "pins_config": 2,
                    "pins_param": 2,
                    "uart_pin": 1
                },
                "param_4": {
                    "initial_value": 1,
                    "multiplier": 4,
                    "panic_message": 2,
                    "panic_reason": 1,
                    "param_4": 1,
                    "pin_config_2": 6,
                    "pin_config_value": 1,
                    "pin_mux": 1,
                    "pin_param2": 1,
                    "uart_config": 2,
                    "uart_init_enable": 1,
                    "uart_init_value": 2,
                    "uart_mode": 3,
                    "uart_param": 2,
                    "uart_param_2": 1,
                    "uart_setting": 1,
                    "uart_value": 1
                },
                "set_sum_to_one_00001392": {
                    "adjust_sum": 1,
                    "apply_sum_calculation": 1,
                    "calculate_sum": 2,
                    "calculate_sum_to_one": 2,
                    "configure_pin_sum_to_one": 1,
                    "configure_uart_pins": 2,
                    "set_initial_00001392": 1,
                    "set_sum_to_one": 13,
                    "set_uart_baud_rate": 1,
                    "set_uart_parameters": 1,
                    "set_uart_sum_to_one": 1
                },
                "uVar1": {
                    "result": 22,
                    "return_value": 9
                },
                "uart_init_pins": {
                    "initialize_gpio_ports": 4,
                    "initialize_gpio_ports_00001448": 8,
                    "initialize_pins": 1,
                    "initialize_uart_pins": 7
                },
                "uart_init_uart": {
                    "initialize_uart": 2,
                    "initialize_uart_module": 9,
                    "initialize_uart_uart": 8,
                    "initialize_uart_with_uart": 1
                },
                "update_data_structure_000014c4": {
                    "update_data_structure": 9,
                    "update_value": 1
                }
            },
            "called": [
                "FUN_00001392",
                "FUN_00000f04",
                "FUN_000014c4",
                "FUN_00001448"
            ],
            "calling": [
                "FUN_00000df4"
            ],
            "code": "\nundefined4 initialize_uart_and_pins_000013b8(int port_index,undefined4 uart_config,undefined4 pin_config,undefined4 pin_config_2)\n\n{\n  undefined4 result;\n  \n  if (port_index != 0) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + port_index * 8) = pin_config;\n  *(undefined4 *)(&DAT_1fff0b70 + port_index * 8) = pin_config_2;\n  initialize_gpio_ports_00001448(port_index);\n  set_sum_to_one(*(undefined4 *)(&DAT_00006ffc + port_index * 0x20),\n               *(undefined *)(port_index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[port_index * 0x20] == '\\0') {\n    initialize_uart_module(port_index,uart_config);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_uart_and_pins_000013b8",
            "entrypoint": "0x000013b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000013b8": "initialize_uart_and_pins_000013b8",
                "core_panic": "handle_kernel_panic_00000f04",
                "param_1": "port_index",
                "param_2": "uart_config",
                "param_3": "pin_config",
                "param_4": "pin_config_2",
                "set_sum_to_one_00001392": "set_sum_to_one",
                "uVar1": "result",
                "uart_init_pins": "initialize_gpio_ports_00001448",
                "uart_init_uart": "initialize_uart_module"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001448": {
            "additional_data": {
                "D2": {
                    "port_address": 1
                },
                "D4": {
                    "register_value": 1
                },
                "DAT_00006fec": {
                    "port1_data": 2,
                    "port1_values": 1,
                    "port_data1": 1,
                    "port_data_1": 1,
                    "ports_array": 1,
                    "ptr_gpio_port_values": 1
                },
                "DAT_00006fee": {
                    "port2_data": 2,
                    "port2_values": 1,
                    "port_data2": 1,
                    "port_data_2": 1,
                    "ports_array_2": 1,
                    "ptr_gpio_init_values": 1
                },
                "DAT_00006ff0": {
                    "gpio_array": 1,
                    "port1_config": 1,
                    "port_config1": 1
                },
                "DAT_00006ff4": {
                    "gpio_array_2": 1,
                    "port2_config": 1,
                    "port_config2": 1
                },
                "FUN_00001448": {
                    "init_gpio_ports": 5,
                    "initialize_gpio": 3,
                    "initialize_gpio_port": 1,
                    "initialize_gpio_ports": 19,
                    "initialize_ports": 3
                },
                "FUN_00001f80": {
                    "gpio_init_port": 13,
                    "initialize_gpio_port": 1
                },
                "PTR": {
                    "pointer": 1
                },
                "PTR_00006ff0": {
                    "port1_config": 1
                },
                "PTR_00006ff4": {
                    "port2_config": 1
                },
                "gpio_init_port": {
                    "initialize_gpio": 1,
                    "initialize_gpio_port": 5,
                    "initialize_port": 5
                },
                "local_1": {
                    "port_address": 1
                },
                "local_2": {
                    "port_value": 1
                },
                "param_1": {
                    "index": 14,
                    "port": 2,
                    "port_index": 15
                },
                "param_2": {
                    "config": 2,
                    "param_2": 1,
                    "port_config": 4,
                    "port_init_value": 1,
                    "port_parameter": 1,
                    "port_settings": 1,
                    "port_value": 1,
                    "unused": 1
                },
                "undefined2": {
                    "port_address": 1,
                    "port_type": 1
                },
                "undefined4": {
                    "port_config": 2
                }
            },
            "called": [
                "FUN_00001f80"
            ],
            "calling": [
                "FUN_000013b8"
            ],
            "code": "\nvoid initialize_gpio_ports_00001448(int port_index)\n\n{\n  if (*(short *)(&DAT_00006fec + port_index * 0x20) != -1) {\n    initialize_gpio_port(*(port_address *)(&DAT_00006fec + port_index * 0x20),\n                   *(port_config *)(&DAT_00006ff0 + port_index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + port_index * 0x20) != -1) {\n    initialize_gpio_port(*(port_address *)(&DAT_00006fee + port_index * 0x20),\n                   *(port_config *)(&DAT_00006ff4 + port_index * 0x20));\n  }\n  return;\n}\n\n",
            "current_name": "initialize_gpio_ports_00001448",
            "entrypoint": "0x00001448",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001448": "initialize_gpio_ports_00001448",
                "gpio_init_port": "initialize_gpio_port",
                "param_1": "port_index",
                "undefined2": "port_address",
                "undefined4": "port_config"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000014c4": {
            "additional_data": {
                "FUN_000014c4": {
                    "initialize_data": 1,
                    "update_config": 3,
                    "update_configuration": 6,
                    "update_data": 8,
                    "update_data_structure": 1,
                    "update_memory": 2,
                    "update_memory_byte": 1,
                    "update_memory_entry": 1,
                    "update_memory_status": 1,
                    "update_memory_value": 1,
                    "update_memory_values": 1,
                    "update_parameters": 1,
                    "update_settings": 3
                },
                "param_1": {
                    "config_index": 1,
                    "idx": 1,
                    "index": 29
                },
                "param_2": {
                    "count": 2,
                    "divider": 1,
                    "divisor": 9,
                    "factor": 3,
                    "value": 16
                },
                "pbVar1": {
                    "byte_array": 2,
                    "byte_pointer": 2,
                    "config": 2,
                    "config_data": 1,
                    "config_pointer": 2,
                    "config_ptr": 4,
                    "data": 1,
                    "data_pointer": 3,
                    "data_ptr": 6,
                    "memory_byte": 1,
                    "memory_entry": 1,
                    "memory_ptr": 1,
                    "pointer": 2,
                    "ptr": 2,
                    "settings_ptr": 1
                },
                "uVar2": {
                    "byte_count": 1,
                    "config_data": 1,
                    "config_value": 1,
                    "config_value1": 1,
                    "data_ptr": 1,
                    "data_size": 1,
                    "data_value": 8,
                    "uint_var1": 2,
                    "value": 4,
                    "value1": 8,
                    "value2": 2,
                    "value_2": 1
                },
                "uVar3": {
                    "calculated_value": 2,
                    "calculation_result": 2,
                    "config_value2": 1,
                    "div_result": 3,
                    "divided_result": 1,
                    "division_result": 4,
                    "modified_value": 1,
                    "new_value": 2,
                    "quotient": 1,
                    "result": 3,
                    "shifted_value": 2,
                    "uint_var2": 1,
                    "value2": 7,
                    "value3": 1
                }
            },
            "called": [
                "FUN_00001318"
            ],
            "calling": [
                "FUN_000013b8"
            ],
            "code": "\nvoid update_data_structure_000014c4(int index,uint value)\n\n{\n  byte *data_ptr;\n  uint value1;\n  uint value2;\n  \n  data_ptr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  data_ptr[3] = data_ptr[3] & 0xf3;\n  data_ptr[2] = (&DAT_00007001)[index * 0x20];\n  value2 = value1 / (value << 4);\n  *data_ptr = (byte)(value2 >> 8) & 0x1f;\n  data_ptr[1] = (byte)value2;\n  data_ptr[10] = (byte)((value1 << 2) / value + 1 >> 1) & 0x1f;\n  data_ptr[0x10] = data_ptr[0x10] | 0x88;\n  if ((data_ptr[0x10] & 0x70) == 0) {\n    data_ptr[0x13] = 0;\n  }\n  else {\n    data_ptr[0x13] = (char)(2 << (data_ptr[0x10] >> 4 & 7)) - 1;\n  }\n  data_ptr[0x15] = 1;\n  data_ptr[0x11] = 0xc0;\n  data_ptr[3] = data_ptr[3] | 0x2c;\n  set_bit_in_memory_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "current_name": "update_data_structure_000014c4",
            "entrypoint": "0x000014c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000014c4": "update_data_structure_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "data_ptr",
                "uVar2": "value1",
                "uVar3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000015d0": {
            "additional_data": {
                "FUN_000015d0": {
                    "copy_bytes_to_destination": 1,
                    "copy_data": 16,
                    "copy_data_from_source_to_destination": 1,
                    "copy_data_to_buffer": 1,
                    "copy_data_to_memory": 8,
                    "copy_data_to_pointer": 2,
                    "copy_data_to_struct": 1,
                    "copy_to_destination": 1
                },
                "iVar1": {
                    "buffer_address": 1,
                    "data_ptr": 4,
                    "destination_addr": 1,
                    "destination_address": 11,
                    "destination_offset": 1,
                    "destination_pointer": 1,
                    "dst_addr": 1,
                    "memory_address": 2,
                    "ptr": 2,
                    "ptr_data": 1,
                    "source_address": 2,
                    "source_ptr": 1,
                    "struct_address": 1,
                    "target_addr": 1,
                    "target_address": 1
                },
                "local_c": {
                    "byte_index": 1,
                    "count": 3,
                    "counter": 12,
                    "current_position": 1,
                    "element_index": 3,
                    "i": 8,
                    "index": 1,
                    "iteration_index": 1,
                    "offset": 1
                },
                "param_1": {
                    "buffer_index": 1,
                    "data_index": 1,
                    "index": 23,
                    "offset": 2,
                    "source_index": 4
                },
                "param_2": {
                    "destination_base": 1,
                    "destination_index": 2,
                    "source": 7,
                    "source_addr": 3,
                    "source_address": 14,
                    "source_array": 1,
                    "source_data": 1,
                    "source_offset": 1,
                    "src_addr": 1
                },
                "param_3": {
                    "count": 3,
                    "data_length": 3,
                    "length": 13,
                    "num_bytes": 3,
                    "num_elements": 7,
                    "size": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00000e38"
            ],
            "code": "\nvoid copy_data_to_memory_000015d0(int index,int source_address,uint length)\n\n{\n  int destination_address;\n  uint counter;\n  \n  destination_address = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < length; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(destination_address + 4));\n    *(undefined *)(destination_address + 7) = *(undefined *)(counter + source_address);\n  }\n  return;\n}\n\n",
            "current_name": "copy_data_to_memory_000015d0",
            "entrypoint": "0x000015d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000015d0": "copy_data_to_memory_000015d0",
                "iVar1": "destination_address",
                "local_c": "counter",
                "param_1": "index",
                "param_2": "source_address",
                "param_3": "length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001628": {
            "additional_data": {
                "DAT_00006fe4": {
                    "command_data": 1,
                    "data_array": 3,
                    "function_pointers": 2,
                    "function_table": 2,
                    "thread_data_array": 1
                },
                "DAT_1fff0b6c": {
                    "function_address_table": 1,
                    "function_addresses": 1,
                    "function_args": 1,
                    "function_array": 2,
                    "function_pointer_array": 1,
                    "function_pointers_array": 1,
                    "function_table": 1,
                    "thread_data": 1
                },
                "DAT_1fff0b70": {
                    "argument_array": 3,
                    "data_argument": 1,
                    "function_arg": 1,
                    "function_arguments_array": 1,
                    "function_result": 1
                },
                "FUN_00001628": {
                    "execute_action": 1,
                    "execute_and_yield_thread": 1,
                    "execute_command": 1,
                    "execute_function": 3,
                    "execute_function_if_condition": 1,
                    "execute_function_if_condition_met": 5,
                    "execute_function_if_flag_set": 5,
                    "execute_if_condition_met": 1,
                    "execute_if_flag_set": 1,
                    "execute_special_function": 1,
                    "execute_thread_function": 2,
                    "execute_thread_operation": 2,
                    "handle_function": 1,
                    "perform_action_if_needed": 1,
                    "process_data": 1,
                    "process_parameter": 1
                },
                "byte": {
                    "data": 1,
                    "flag": 1,
                    "flags": 7
                },
                "check_and_yield_thread_00001348": {
                    "check_and_yield_thread": 21,
                    "yield_thread": 1
                },
                "code": {
                    "function_pointer": 3
                },
                "function_address_table": {
                    "function_address_table": 1
                },
                "function_table": {
                    "function_table": 1
                },
                "index": {
                    "index": 1
                },
                "indexTable": {
                    "table": 1
                },
                "int": {
                    "function_ptr": 2,
                    "pointer": 1,
                    "ptr": 1
                },
                "otherTable": {
                    "function_table": 1
                },
                "param_1": {
                    "action_index": 1,
                    "command_id": 1,
                    "index": 24,
                    "thread_id": 2,
                    "thread_index": 2,
                    "thread_number": 1
                },
                "undefined": {
                    "value": 1
                },
                "undefined4": {
                    "return_value": 1
                }
            },
            "called": [
                "FUN_00001348"
            ],
            "calling": [
                "FUN_00001688"
            ],
            "code": "\nvoid execute_function_if_flag_set_00001628(function_ptr index)\n\n{\n  if (((*(flags *)(*(function_ptr *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(function_ptr *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(function_pointer **)(&DAT_1fff0b6c + index * 8))\n              (*(return_value *)(&DAT_1fff0b70 + index * 8),\n               *(value *)(*(function_ptr *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  check_and_yield_thread();\n  return;\n}\n\n",
            "current_name": "execute_function_if_flag_set_00001628",
            "entrypoint": "0x00001628",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001628": "execute_function_if_flag_set_00001628",
                "byte": "flags",
                "check_and_yield_thread_00001348": "check_and_yield_thread",
                "code": "function_pointer",
                "int": "function_ptr",
                "param_1": "index",
                "undefined": "value",
                "undefined4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001688": {
            "additional_data": {
                "FUN_00001628": {
                    "configure_uart": 1,
                    "handle_interrupt": 1,
                    "handle_param_1": 1,
                    "handle_subfunction_1": 1,
                    "handle_uart_interrupt": 7,
                    "handle_uart_irq": 2,
                    "process_parameter": 1,
                    "set_uart_interrupt": 1,
                    "uart_irq_handler": 1
                },
                "FUN_00001688": {
                    "execute_uart_irq_handler": 1,
                    "handle_uart_interrupt": 2,
                    "initialize_uart": 3,
                    "initialize_uart_handler": 5,
                    "initialize_uart_interrupt": 7,
                    "initialize_uart_irq": 2,
                    "initialize_uart_irq_handler": 11
                },
                "irq_handler_uart": {
                    "handle_uart_interrupt": 1
                },
                "param_1": {
                    "data": 1,
                    "input_value": 1,
                    "interrupt_number": 5,
                    "irq_number": 9,
                    "uart_config": 1,
                    "uart_handler_id": 1,
                    "uart_interrupt_number": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_00001628"
            ],
            "calling": [],
            "code": "\nvoid initialize_uart_irq_handler_00001688(void)\n\n{\n  handle_uart_interrupt(0);\n  return;\n}\n\n",
            "current_name": "initialize_uart_irq_handler_00001688",
            "entrypoint": "0x00001688",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001688": "initialize_uart_irq_handler_00001688",
                "irq_handler_uart": "handle_uart_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001696": {
            "additional_data": {
                "0x2000000": {
                    "additional_offset": 1,
                    "constant": 1
                },
                "0xf0000000": {
                    "high_bits_mask": 1
                },
                "0xfffff": {
                    "low_bits_mask": 1
                },
                "FUN_00001696": {
                    "calculate_function_result": 1,
                    "calculate_modified_value": 1,
                    "calculate_offset": 22,
                    "calculate_result": 3,
                    "calculate_shifted_value": 1,
                    "calculate_updated_value": 2,
                    "multiply_and_shift": 1
                },
                "param_1": {
                    "address": 1,
                    "base_address": 5,
                    "base_value": 4,
                    "big_number": 1,
                    "index": 1,
                    "input1": 1,
                    "input_mask": 1,
                    "input_value": 13,
                    "input_value_1": 1,
                    "offset": 1,
                    "value": 1,
                    "value_1": 1
                },
                "param_2": {
                    "factor": 1,
                    "index": 2,
                    "input2": 1,
                    "input_value": 1,
                    "input_value_2": 1,
                    "multiplier": 20,
                    "multipllier": 1,
                    "offset": 2,
                    "small_number": 1,
                    "value_2": 1
                },
                "param_3": {
                    "bitwise_and_result": 1,
                    "multiplier": 1,
                    "offset": 1
                },
                "param_4": {
                    "constant": 1,
                    "shifted_value": 1
                },
                "param_5": {
                    "constant": 1,
                    "result": 1
                },
                "param_6": {
                    "offset": 1,
                    "shifted_value": 1
                },
                "param_n": {
                    "new_parameter_name_n": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000016c8",
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "code": "\nint calculate_offset_00001696(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "current_name": "calculate_offset_00001696",
            "entrypoint": "0x00001696",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000016c8": {
            "additional_data": {
                "FUN_000016c8": {
                    "initialize_offset": 1,
                    "mark_offset_as_one": 2,
                    "set_flag": 1,
                    "set_flag_to_true": 1,
                    "set_offset": 1,
                    "set_offset_to1": 3,
                    "set_offset_to_one": 12,
                    "set_offset_to_value": 6,
                    "set_offset_to_value_one": 3,
                    "set_offset_value": 1
                },
                "calculate_offset_00001696": {
                    "calculate_offset": 2
                },
                "param_1": {
                    "input": 2,
                    "input_value": 29
                },
                "param_2": {
                    "multiplier": 31
                },
                "puVar1": {
                    "offset_address": 1,
                    "offset_pointer": 14,
                    "offset_ptr": 9,
                    "offset_value": 1,
                    "result_address": 1,
                    "result_pointer": 2
                }
            },
            "called": [
                "FUN_00001696"
            ],
            "calling": [
                "FUN_000017dc"
            ],
            "code": "\nvoid set_offset_to_value_one_000016c8(undefined4 input_value,undefined multiplier)\n\n{\n  undefined4 *offset_pointer;\n  \n  offset_pointer = (undefined4 *)calculate_offset(input_value,multiplier);\n  *offset_pointer = 1;\n  return;\n}\n\n",
            "current_name": "set_offset_to_value_one_000016c8",
            "entrypoint": "0x000016c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000016c8": "set_offset_to_value_one_000016c8",
                "calculate_offset_00001696": "calculate_offset",
                "param_1": "input_value",
                "param_2": "multiplier",
                "puVar1": "offset_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000016ec": {
            "additional_data": {
                "FUN_000016ec": {
                    "mark_offset_as_calculated": 3,
                    "mark_offset_as_one": 1,
                    "set_flag": 2,
                    "set_flag_to1": 1,
                    "set_offset": 1,
                    "set_offset_to1": 5,
                    "set_offset_to_one": 6,
                    "set_offset_to_value": 7,
                    "set_offset_to_value_one": 1,
                    "set_offset_value": 2,
                    "set_to_one": 1,
                    "write_value_to_calculated_offset": 1
                },
                "param_1": {
                    "input": 2,
                    "input_val": 1,
                    "input_value": 27,
                    "value": 1
                },
                "param_2": {
                    "multiplier": 31
                },
                "puVar1": {
                    "calculated_offset_ptr": 1,
                    "flag_pointer": 1,
                    "offset_address": 1,
                    "offset_pointer": 15,
                    "offset_ptr": 6,
                    "result_ptr": 1,
                    "target_address": 1,
                    "target_pointer": 1
                }
            },
            "called": [
                "FUN_00001696"
            ],
            "calling": [
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a60",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "code": "\nvoid set_offset_to_value_one_000016ec(undefined4 input_value,undefined multiplier)\n\n{\n  undefined *offset_pointer;\n  \n  offset_pointer = (undefined *)calculate_offset_00001696(input_value,multiplier);\n  *offset_pointer = 1;\n  return;\n}\n\n",
            "current_name": "set_offset_to_value_one_000016ec",
            "entrypoint": "0x000016ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000016ec": "set_offset_to_value_one_000016ec",
                "param_1": "input_value",
                "param_2": "multiplier",
                "puVar1": "offset_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001710": {
            "additional_data": {
                "FUN_00001710": {
                    "clear_memory": 18,
                    "clear_offset": 3,
                    "clear_offset_to_zero": 1,
                    "initialize_memory": 5,
                    "initialize_offset_to_zero": 1,
                    "set_offset": 1,
                    "set_offset_to_zero": 1,
                    "write_zero_to_calculated_offset": 1
                },
                "calculate_offset_00001696": {
                    "calculate_offset": 1
                },
                "param_1": {
                    "input": 6,
                    "input_value": 24,
                    "value": 1
                },
                "param_2": {
                    "multiplier": 31
                },
                "puVar1": {
                    "address": 1,
                    "cleared_memory_address": 1,
                    "memory_address": 6,
                    "memory_location": 2,
                    "memory_ptr": 1,
                    "offset_address": 1,
                    "offset_pointer": 8,
                    "offset_ptr": 3,
                    "pointer_to_memory": 1,
                    "ptr_to_offset": 1,
                    "result_ptr": 1,
                    "write_ptr": 1
                }
            },
            "called": [
                "FUN_00001696"
            ],
            "calling": [
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_000019c0",
                "FUN_000018bc",
                "FUN_00001a60",
                "FUN_00001960",
                "FUN_00001734",
                "FUN_00001bb8"
            ],
            "code": "\nvoid clear_memory_00001710(undefined4 input_value,undefined multiplier)\n\n{\n  undefined *offset_pointer;\n  \n  offset_pointer = (undefined *)calculate_offset(input_value,multiplier);\n  *offset_pointer = 0;\n  return;\n}\n\n",
            "current_name": "clear_memory_00001710",
            "entrypoint": "0x00001710",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "calculate_offset_00001696": "calculate_offset",
                "param_1": "input_value",
                "param_2": "multiplier",
                "puVar1": "offset_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001734": {
            "additional_data": {
                "DAT_40064005": {
                    "address": 1
                },
                "FUN_00001710": {
                    "clear_bit": 5,
                    "clear_bit_at_index": 1,
                    "set_bit": 11,
                    "set_bit_at_position": 1,
                    "set_bit_in_memory": 1,
                    "set_bit_using_undefined4": 1,
                    "set_bit_value": 1,
                    "set_bit_value_at_offset": 1,
                    "update_bit": 1
                },
                "FUN_00001734": {
                    "clear_bit": 2,
                    "clear_bit6": 8,
                    "clear_bit_6": 6,
                    "clear_bit_at_6": 1,
                    "clear_bit_at_address": 2,
                    "clear_bit_at_index": 4,
                    "clear_bit_at_index_six": 1,
                    "clear_bit_at_position_6": 1,
                    "clear_bit_at_position_six": 1,
                    "clear_bit_in_data": 1,
                    "clear_bit_in_memory": 1,
                    "clear_bit_in_register": 2,
                    "clear_bit_six": 1
                },
                "bit_clear8": {
                    "clear_8th_bit": 1
                },
                "param_1": {
                    "address": 3,
                    "arg1": 3,
                    "data": 6,
                    "index": 1,
                    "input1": 1,
                    "offset": 1,
                    "param": 2,
                    "param1": 2,
                    "param_1": 1,
                    "parameter1": 1,
                    "register_address": 1,
                    "undefined4_param": 1,
                    "undefined4_param1": 1,
                    "unknown1": 1,
                    "unknown_param": 1,
                    "value": 2
                },
                "param_2": {
                    "arg2": 3,
                    "bit_array": 1,
                    "bit_index": 2,
                    "bit_position": 9,
                    "bit_value": 1,
                    "index": 2,
                    "input2": 1,
                    "param2": 2,
                    "param_2": 1,
                    "parameter2": 1,
                    "undefined_param": 2,
                    "undefined_param2": 1,
                    "unknown2": 1,
                    "unknown_param": 1
                }
            },
            "called": [
                "FUN_00001710"
            ],
            "calling": [
                "FUN_000019c0",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "code": "\nvoid clear_bit_at_position_6_00001734(void)\n\n{\n  clear_8th_bit(&DAT_40064005,6);\n  return;\n}\n\n",
            "current_name": "clear_bit_at_position_6_00001734",
            "entrypoint": "0x00001734",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001734": "clear_bit_at_position_6_00001734",
                "bit_clear8": "clear_8th_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001748": {
            "additional_data": {
                "0x1f": {
                    "mask": 1
                },
                "DAT_40064003": {
                    "current_data": 1,
                    "current_value": 1,
                    "data": 1,
                    "existing_bits": 1,
                    "existing_data": 1,
                    "existing_flags": 2,
                    "existing_value": 1,
                    "flag_data": 1,
                    "flag_register": 2,
                    "flag_value": 1,
                    "flags": 4,
                    "original_bitmask": 1,
                    "register_value": 1,
                    "variable_to_modify": 1
                },
                "FUN_00001748": {
                    "combine_and_update_flags": 1,
                    "combine_flags": 1,
                    "merge_bits": 1,
                    "set_bits_in_variable": 1,
                    "set_bits_with_mask": 1,
                    "set_flag": 1,
                    "set_flag_bits": 1,
                    "update_bitmask": 1,
                    "update_bits": 1,
                    "update_bits_in_data": 1,
                    "update_config": 1,
                    "update_data_and_mask": 1,
                    "update_data_with_mask": 2,
                    "update_flag": 2,
                    "update_flag_bits": 1,
                    "update_flag_with_mask": 1,
                    "update_flags": 10,
                    "update_flags_with_mask": 1,
                    "update_register_value": 1
                },
                "existingFlags": {
                    "updated_flags": 1
                },
                "param_1": {
                    "bitmask": 1,
                    "byte_to_set": 1,
                    "data": 1,
                    "flag": 3,
                    "flag_value": 1,
                    "input": 3,
                    "input_byte": 9,
                    "input_data": 1,
                    "input_flag": 3,
                    "new_bitmask": 1,
                    "new_bits": 1,
                    "new_config_byte": 1,
                    "new_flag": 1,
                    "new_value": 2,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000019c0",
                "FUN_000018bc",
                "FUN_00001960",
                "FUN_0000191c",
                "FUN_00001bb8"
            ],
            "code": "\nvoid update_flags_with_mask_00001748(byte input_byte)\n\n{\n  DAT_40064003 = input_byte | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "current_name": "update_flags_with_mask_00001748",
            "entrypoint": "0x00001748",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001748": "update_flags_with_mask_00001748",
                "param_1": "input_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001778": {
            "additional_data": {
                "DAT_40064001": {
                    "bit_pattern": 1,
                    "data": 1,
                    "data_flag": 1,
                    "flags": 1
                },
                "FUN_000016ec": {
                    "bit_clear_in_memory": 1,
                    "clear_bit": 2,
                    "initialize_memory": 1,
                    "modify_value_2": 1,
                    "reset_bits": 1,
                    "set_bit": 4,
                    "set_bit8": 1,
                    "set_bit_flag": 1,
                    "set_bit_in_register": 1,
                    "set_flag": 1
                },
                "FUN_00001710": {
                    "clear_bit": 6,
                    "clear_bit8": 1,
                    "clear_bit_at_position": 1,
                    "clear_bit_flag": 1,
                    "clear_bit_in_memory": 1,
                    "clear_bit_in_register": 1,
                    "modify_value_1": 1,
                    "reset_bit": 1,
                    "update_flags": 1
                },
                "FUN_00001778": {
                    "clear_bit": 1,
                    "clear_bit_and_set": 1,
                    "clear_bit_and_set_flag": 1,
                    "clear_bit_in_data": 1,
                    "clear_bits_in_register": 1,
                    "clear_flags": 2,
                    "configure_status_register": 1,
                    "set_appropriate_bit_values": 1,
                    "set_bit_clear": 1,
                    "set_bit_two_and_clear": 1,
                    "set_flags_and_clear_bit": 1,
                    "update_and_clear_bits": 1,
                    "update_bit_pattern": 1,
                    "update_bitmask_and_clear_bit": 1,
                    "update_bits": 1,
                    "update_control_register": 1,
                    "update_data": 1,
                    "update_data_and_clear_bit": 1,
                    "update_data_register": 1,
                    "update_device_status": 1,
                    "update_flag": 1,
                    "update_flag_and_clear_bits": 1,
                    "update_flags": 3,
                    "update_flags_and_clear_bit": 2,
                    "update_memory_status": 1,
                    "update_register_value": 2
                },
                "param_1": {
                    "arg1": 4,
                    "config": 2,
                    "data": 1,
                    "input1": 1,
                    "param1": 4,
                    "param_value": 1,
                    "ptr_to_data": 1,
                    "state": 1,
                    "undefined4_arg": 1,
                    "undefined4_param": 1,
                    "undefined_param_1": 1,
                    "unused1": 1,
                    "unused_param": 1
                },
                "param_2": {
                    "arg2": 4,
                    "data_size": 1,
                    "flag": 1,
                    "input2": 1,
                    "option": 2,
                    "param2": 4,
                    "param_flag": 1,
                    "undefined_arg": 1,
                    "undefined_param": 1,
                    "undefined_param_2": 1,
                    "unused": 1,
                    "unused2": 1,
                    "unused_param": 1
                }
            },
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid update_flags_and_clear_bit_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  bit_clear8(&DAT_40064001,2);\n  return;\n}\n\n",
            "current_name": "update_flags_and_clear_bit_00001778",
            "entrypoint": "0x00001778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001778": "update_flags_and_clear_bit_00001778"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000017dc": {
            "additional_data": {
                "0x100": {
                    "flag_mask": 1
                },
                "0x104": {
                    "flag_value": 1
                },
                "0x1d": {
                    "offset_value": 1,
                    "value": 1
                },
                "0x80000": {
                    "register_value": 1
                },
                "0xfff3ffff": {
                    "register_mask": 1
                },
                "DAT_4004803c": {
                    "hardware_register": 1
                },
                "FUN_000017dc": {
                    "apply_offset_value_and_check_flag": 1,
                    "initialize": 1,
                    "initialize_components": 1,
                    "initialize_hardware": 3,
                    "initialize_memory": 1,
                    "initialize_offset": 1,
                    "initialize_offset_value": 1,
                    "initialize_system": 1,
                    "set_offset_and_check": 1,
                    "set_offset_and_check_flag": 3,
                    "set_offset_and_check_status": 1,
                    "set_offset_and_check_value": 1,
                    "set_offset_and_enable_flag": 1,
                    "update_configuration": 1,
                    "update_data": 1,
                    "update_offset_and_check": 1,
                    "update_offset_and_flag": 3,
                    "update_offset_and_set_flag": 1,
                    "update_offset_and_set_mask": 1,
                    "update_offset_and_status": 2,
                    "update_offset_and_value": 1,
                    "update_offset_value": 1,
                    "update_registers": 1,
                    "update_settings": 1
                },
                "_DAT_4003d010": {
                    "control_register": 1,
                    "data_register": 1,
                    "flag": 4,
                    "status": 1,
                    "status_register": 3,
                    "system_config": 1,
                    "system_flags": 1
                },
                "_DAT_40047000": {
                    "control_register": 1,
                    "data_register": 2,
                    "hardware_config": 1,
                    "memory_register": 2,
                    "offset": 1,
                    "register": 2,
                    "register_value": 2,
                    "system_configuration": 1
                },
                "input_value": {
                    "address": 3,
                    "config_address": 1,
                    "data": 1,
                    "data_address": 1,
                    "data_ptr": 1,
                    "memory_address": 1,
                    "offset": 3,
                    "offset_address": 1,
                    "offset_value": 2,
                    "register_address": 1,
                    "value": 11,
                    "value_address": 1,
                    "value_to_set": 1
                },
                "multiplier": {
                    "factor": 5,
                    "multiplier": 5,
                    "offset": 2,
                    "offset_multiplier": 4,
                    "times": 1,
                    "value": 5,
                    "value_multiplier": 6
                },
                "set_offset_to_value_one_000016c8": {
                    "set_offset": 3,
                    "set_offset_to_one": 6,
                    "set_offset_to_value": 2,
                    "set_offset_to_value_one": 9,
                    "set_offset_with_multiplier": 1
                }
            },
            "called": [
                "FUN_000016c8"
            ],
            "calling": [
                "FUN_00001c84"
            ],
            "code": "\n\n\nvoid set_offset_and_enable_flag_000017dc(void)\n\n{\n  set_offset_to_value_one(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "current_name": "set_offset_and_enable_flag_000017dc",
            "entrypoint": "0x000017dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000017dc": "set_offset_and_enable_flag_000017dc",
                "set_offset_to_value_one_000016c8": "set_offset_to_value_one"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000182c": {
            "additional_data": {
                "DAT_40064000": {
                    "bit_clear_value": 1,
                    "bit_data0": 1,
                    "bit_flag2": 1,
                    "bit_flags2": 1,
                    "control_register": 1,
                    "data_reg": 1
                },
                "DAT_40064001": {
                    "bit_data1": 1,
                    "bit_flag1": 1,
                    "bit_flags1": 1,
                    "bit_mask_register": 1,
                    "bit_set_value": 1,
                    "control_reg": 1
                },
                "DAT_40064008": {
                    "data": 1,
                    "data_mask": 1,
                    "data_value": 1,
                    "flag_register": 1,
                    "settings": 1,
                    "updated_value": 1
                },
                "FUM_0000182c": {
                    "update_device_settings": 1
                },
                "FUN_000016ec": {
                    "": 1,
                    "bit_clear": 1,
                    "clear_bit": 8,
                    "clear_bit_8": 1,
                    "clear_bit_flag": 2,
                    "clear_bit_to_low": 1,
                    "clear_bit_value": 1
                },
                "FUN_00001710": {
                    "": 1,
                    "bit_set": 1,
                    "set_bit": 8,
                    "set_bit_8": 1,
                    "set_bit_flag": 2,
                    "set_bit_to_high": 1,
                    "set_bit_value": 1
                },
                "FUN_0000182c": {
                    "clear_bits_and_set_bit": 3,
                    "clear_bits_and_set_flag": 1,
                    "clear_data": 1,
                    "clear_data_bits": 1,
                    "clear_flags": 1,
                    "clear_flags_and_set_values": 1,
                    "initialize_data": 2,
                    "initialize_device": 1,
                    "initialize_hardware": 1,
                    "initialize_peripheral": 1,
                    "initialize_registers": 1,
                    "set_clear_bits": 1,
                    "update_configuration": 1,
                    "update_data": 7,
                    "update_data_and_flags": 1,
                    "update_device_configuration": 1,
                    "update_flags_and_registers": 1,
                    "update_register_settings": 1,
                    "update_registers": 2,
                    "update_settings": 1
                },
                "bit_clear8": {
                    "clear_bit8": 1
                },
                "bit_set8": {
                    "set_bit8": 1
                },
                "param_1": {
                    "": 1,
                    "arg1": 6,
                    "bit_mask": 1,
                    "data": 1,
                    "data_value": 1,
                    "input1": 1,
                    "param1": 4,
                    "param_1": 1,
                    "undefined4_param": 1,
                    "undefined_value1": 1,
                    "unused_param1": 1
                },
                "param_2": {
                    "": 1,
                    "arg2": 6,
                    "config": 1,
                    "input2": 1,
                    "param2": 4,
                    "param_2": 1,
                    "undefined_param": 1,
                    "undefined_value2": 1,
                    "unused": 1,
                    "unused_param": 1,
                    "unused_param2": 1
                }
            },
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "calling": [
                "FUN_00001c84"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid update_data_and_flags_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  set_bit8(&DAT_40064001,0);\n  clear_bit8(&DAT_40064000,1);\n  clear_bit8(&DAT_40064000,0);\n  return;\n}\n\n",
            "current_name": "update_data_and_flags_0000182c",
            "entrypoint": "0x0000182c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000182c": "update_data_and_flags_0000182c",
                "bit_clear8": "clear_bit8",
                "bit_set8": "set_bit8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000018bc": {
            "additional_data": {
                "0": {
                    "initial_value": 1
                },
                "0x10": {
                    "bitmask_1": 1
                },
                "0x3b": {
                    "bit_mask": 1,
                    "bitmask": 1
                },
                "0xa0": {
                    "fll_factor": 2
                },
                "0xc": {
                    "bitmask_2": 1
                },
                "1": {
                    "bit_position": 1
                },
                "4": {
                    "bit_mask_value": 1,
                    "bit_value": 1
                },
                "DAT_1fff0b74": {
                    "counter": 3,
                    "data": 1,
                    "data_value": 1,
                    "output_value": 1,
                    "register_1fff0b74": 1,
                    "result": 1,
                    "variable1": 1
                },
                "DAT_40064000": {
                    "control_register": 1,
                    "flag_register": 1,
                    "hardware_register1": 1,
                    "reg1": 1,
                    "register_40064000": 1,
                    "register_a": 1,
                    "register_value": 2,
                    "register_value_1": 1
                },
                "DAT_40064001": {
                    "bit_register": 1,
                    "control_register": 1,
                    "hardware_register2": 1,
                    "reg2": 1,
                    "register_40064001": 1,
                    "register_b": 1,
                    "register_value2": 1,
                    "register_value_2": 1,
                    "status_register": 1
                },
                "DAT_40064006": {
                    "flag_register": 1,
                    "hardware_register3": 1,
                    "reg3": 1,
                    "register_40064006": 1,
                    "register_c": 1,
                    "register_value3": 1,
                    "register_value_3": 1,
                    "status_register": 2
                },
                "FUN_00001710": {
                    "bit_clear": 2,
                    "bit_clear_8": 1,
                    "clear_bit": 6,
                    "clear_bit8": 1,
                    "configure_clock": 1,
                    "configure_fll": 1,
                    "configure_fll_factor": 1,
                    "set_configuration": 1,
                    "set_fll_factor": 11,
                    "set_parameters": 1,
                    "wait": 1
                },
                "FUN_00001748": {
                    "bit_clear": 1,
                    "bit_clear8": 1,
                    "clear_bit": 11,
                    "clear_bit8": 1,
                    "clear_bit_at_address": 1,
                    "configure_fll": 1,
                    "configure_fll_factor": 1,
                    "configure_mcg": 1,
                    "perform_action": 1,
                    "set_fll_factor": 7,
                    "update_fll_factor": 1
                },
                "FUN_000018bc": {
                    "configure_clock": 1,
                    "initialize_device": 1,
                    "initialize_hardware": 6,
                    "initialize_mcg": 1,
                    "initialize_mcu_system": 1,
                    "initialize_microcontroller": 1,
                    "initialize_system": 19,
                    "perform_initialization": 1
                },
                "VAR_1fff0b74": {
                    "counter": 1
                },
                "VAR_40064000": {
                    "register_value": 1
                },
                "VAR_40064001": {
                    "bit_mask": 1
                },
                "VAR_40064006": {
                    "status_register": 1
                },
                "bit_clear8": {
                    "clear_bit8": 2
                },
                "byteData": {
                    "status_byte": 1
                },
                "byteValue": {
                    "byte_value": 1
                },
                "byte_1": {
                    "initial_value": 1
                },
                "byte_2": {
                    "mask1": 1
                },
                "byte_3": {
                    "mask2": 1
                },
                "byte_4": {
                    "mask3": 1
                },
                "initializeHardware": {
                    "initialize_hardware": 1
                },
                "kinetis_mcg_set_fll_factor": {
                    "set_fll_factor": 2
                },
                "param_1": {
                    "byte_data": 1,
                    "byte_input": 1,
                    "byte_parameter": 1,
                    "byte_to_use": 1,
                    "byte_value": 5,
                    "data": 1,
                    "factor": 4,
                    "fll_factor": 1,
                    "input": 1,
                    "input_byte": 3,
                    "input_value": 1
                },
                "param_2": {
                    "bit_index": 1,
                    "bit_number": 1,
                    "bit_position": 1,
                    "flag": 2,
                    "flags": 1,
                    "input_bool": 1,
                    "param": 1,
                    "undefined_data": 1,
                    "undefined_input": 1,
                    "undefined_value": 4,
                    "unused": 1,
                    "unused_param": 1,
                    "unused_parameter": 1
                },
                "undefinedData": {
                    "other_data": 1
                },
                "undefinedValue": {
                    "undefined_value": 1
                }
            },
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_mcu_system_000018bc(void)\n\n{\n  set_fll_factor(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  clear_bit8(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_mcu_system_000018bc",
            "entrypoint": "0x000018bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000018bc": "initialize_mcu_system_000018bc",
                "bit_clear8": "clear_bit8",
                "kinetis_mcg_set_fll_factor": "set_fll_factor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000191c": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "flag": 2,
                    "flag_var": 1,
                    "register3": 1,
                    "status_register": 1,
                    "system_flag": 2,
                    "system_status": 1
                },
                "DAT_40064000": {
                    "data_register1": 1,
                    "data_var": 1,
                    "oscillator_config": 1,
                    "oscillator_settings": 1,
                    "register1": 2,
                    "register_value": 2,
                    "system_config": 1
                },
                "DAT_40064006": {
                    "condition_check": 1,
                    "control_var": 1,
                    "data_register2": 1,
                    "register2": 2,
                    "register_flag": 1,
                    "register_value_2": 1,
                    "status_register": 2
                },
                "FUN_00001748": {
                    "configure_clock": 3,
                    "configure_fll_factor": 1,
                    "perform_action": 2,
                    "perform_task": 1,
                    "process_byte": 1,
                    "process_byte_data": 2,
                    "process_byte_input": 1,
                    "process_byte_param": 1,
                    "set_byte": 1,
                    "set_factor": 1,
                    "set_fll_factor": 11,
                    "set_oscillator": 1,
                    "set_system_clock": 1,
                    "setup_clock": 1
                },
                "FUN_00001778": {
                    "finish_task": 1,
                    "initialize_device": 1,
                    "perform_additional_tasks": 1,
                    "perform_extra_processing": 1,
                    "wait_for_completion": 3,
                    "wait_for_condition": 14,
                    "wait_until_condition": 5,
                    "wait_until_condition_is_met": 1,
                    "wait_until_condition_met": 1
                },
                "FUN_0000191c": {
                    "enable_clock_and_initialize": 1,
                    "initialize_hardware": 2,
                    "initialize_mcu": 1,
                    "initialize_system": 26,
                    "initialize_system_clock": 1
                },
                "byteInput": {
                    "byte_input": 1
                },
                "byteParameter": {
                    "byte": 1
                },
                "byteValue": {
                    "new_value": 1
                },
                "conditionByte": {
                    "condition_check": 1
                },
                "initializeSystem": {
                    "initialize_system": 1,
                    "void": 1
                },
                "initializedByte": {
                    "input_byte": 1
                },
                "kinetis_mcg_enable_osc": {
                    "enable_oscillator": 1,
                    "enable_system_oscillator": 1
                },
                "kinetis_mcg_set_fll_factor": {
                    "set_fll_factor": 1
                },
                "param_1": {
                    "byte_arg": 1,
                    "byte_data": 2,
                    "byte_input": 4,
                    "byte_param": 2,
                    "byte_parameter": 3,
                    "byte_value": 8,
                    "config_byte": 1,
                    "data": 1,
                    "factor": 1,
                    "input_byte": 2,
                    "oscillator_setting": 1
                },
                "setFLLFactor": {
                    "set_fll_factor": 1,
                    "void": 1
                },
                "waitForCondition": {
                    "void": 1
                },
                "waitUntilCondition": {
                    "wait_until_condition": 1
                }
            },
            "called": [
                "FUN_00001748",
                "FUN_00001778"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_system_clock_0000191c(void)\n\n{\n  enable_system_oscillator();\n  set_fll_factor(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_system_clock_0000191c",
            "entrypoint": "0x0000191c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000191c": "initialize_system_clock_0000191c",
                "kinetis_mcg_enable_osc": "enable_system_oscillator",
                "kinetis_mcg_set_fll_factor": "set_fll_factor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001960": {
            "additional_data": {
                "0x3b": {
                    "data_register_mask1": 1
                },
                "0x44": {
                    "data_register_mask2": 1
                },
                "0xa0": {
                    "fll_factor_mask": 1
                },
                "DAT_1fff0b74": {
                    "counter": 1,
                    "data_register": 1,
                    "data_variable4": 1,
                    "flag": 1,
                    "register3": 1,
                    "register4": 6,
                    "register_d": 1,
                    "result": 2,
                    "status_register": 1,
                    "system_status": 1
                },
                "DAT_40064000": {
                    "data": 1,
                    "data_register": 1,
                    "data_register1": 1,
                    "data_variable2": 1,
                    "register0": 1,
                    "register2": 6,
                    "register_b": 1,
                    "register_value": 2,
                    "value": 2
                },
                "DAT_40064001": {
                    "bit_field_register": 1,
                    "bit_register": 1,
                    "data_register2": 1,
                    "data_variable1": 1,
                    "flag": 1,
                    "register": 2,
                    "register1": 7,
                    "register_a": 1,
                    "status_register": 1
                },
                "DAT_40064006": {
                    "data_register3": 1,
                    "data_variable3": 1,
                    "register2": 1,
                    "register3": 6,
                    "register_c": 1,
                    "status": 3,
                    "status_flags": 1,
                    "status_register": 2
                },
                "FUN_00001710": {
                    "configure_clock": 1,
                    "configure_fll": 1,
                    "configure_mcg": 3,
                    "set_fll_factor": 18,
                    "set_fll_parameter": 1,
                    "set_fll_parameters": 1,
                    "set_undefined_param": 1
                },
                "FUN_00001748": {
                    "byte_param_action": 1,
                    "clear_bit": 23,
                    "clear_bit8": 2
                },
                "FUN_00001960": {
                    "configure_clock": 1,
                    "configure_fll_and_wait": 1,
                    "initialize_device": 1,
                    "initialize_hardware": 3,
                    "initialize_system": 24,
                    "set_fll_factor_and_wait": 1
                },
                "bit_clear8": {
                    "clear_bit8": 2
                },
                "byte": {
                    "bit": 2,
                    "bit_number": 1,
                    "bit_to_clear": 1,
                    "bit_value": 2,
                    "flag": 1,
                    "input_byte": 1,
                    "param": 3,
                    "param_byte": 1,
                    "status": 1
                },
                "byte_param_1": {
                    "param_byte": 1
                },
                "clearBit": {
                    "clear_bit": 1
                },
                "clearBit8": {
                    "clear_bit8": 2
                },
                "config": {
                    "config_data": 1
                },
                "flag": {
                    "status_flag": 1
                },
                "initializeHardware": {
                    "initialize_hardware": 1
                },
                "initializeSystem": {
                    "initialize_system": 2
                },
                "kinetis_mcg_set_fll_factor": {
                    "set_fll_factor": 2
                },
                "param_1": {
                    "address": 1,
                    "bit_position": 1,
                    "bit_to_clear": 1,
                    "byte": 1,
                    "byte_param1": 1,
                    "config": 2,
                    "param": 1,
                    "param1": 10,
                    "param_1": 1,
                    "undefined1": 1,
                    "undefined4_param": 1,
                    "undefined4_parameter": 1,
                    "undefined_param1": 3,
                    "undefined_param_1": 1,
                    "unused_param1": 2
                },
                "param_2": {
                    "another_parameter": 1,
                    "flag": 2,
                    "param2": 12,
                    "param_2": 1,
                    "undefined2": 1,
                    "undefined_param": 1,
                    "undefined_param2": 3,
                    "undefined_param_2": 1,
                    "undefined_parameter": 2,
                    "unknown_param": 1,
                    "unused_param2": 2,
                    "value": 1
                },
                "setFLLFactor": {
                    "set_fll_factor": 3
                },
                "temp1": {
                    "temp1": 1
                },
                "temp2": {
                    "temp2": 1
                }
            },
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_system_00001960(void)\n\n{\n  set_fll_factor(0xa0);\n  clear_bit8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "current_name": "initialize_system_00001960",
            "entrypoint": "0x00001960",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001960": "initialize_system_00001960",
                "bit_clear8": "clear_bit8",
                "kinetis_mcg_set_fll_factor": "set_fll_factor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000019c0": {
            "additional_data": {
                "BIT_40064001": {
                    "register1": 1
                },
                "BIT_40064006": {
                    "register2": 1
                },
                "DAT_1fff0b74": {
                    "configured_value": 1,
                    "constant_value": 1,
                    "data2": 1,
                    "register3": 1,
                    "register4": 1,
                    "system_status": 1,
                    "variable_4": 2
                },
                "DAT_40064000": {
                    "config_value": 1,
                    "control_register": 1,
                    "data0": 1,
                    "register2": 2,
                    "register_value": 1,
                    "registers_value": 1,
                    "variable_2": 2
                },
                "DAT_40064001": {
                    "config_register": 1,
                    "data1": 1,
                    "flag_register": 1,
                    "register1": 2,
                    "register_flag": 1,
                    "variable_1": 2
                },
                "DAT_40064006": {
                    "register3": 1,
                    "registers_status": 1,
                    "status_register": 3,
                    "variable_3": 2
                },
                "FUN_00001710": {
                    "configure_clocks": 1,
                    "configure_oscillator": 7,
                    "configure_parameter": 1,
                    "enable_oscillator": 4,
                    "initialize": 1,
                    "initialize_oscillator": 3,
                    "initialize_subsystem": 1,
                    "initialize_variable": 1,
                    "set_fll_factor": 3,
                    "set_oscillator": 1
                },
                "FUN_00001734": {
                    "disable_pll": 20,
                    "wait_for_condition": 1,
                    "wait_until_condition_is_met": 1
                },
                "FUN_00001748": {
                    "bit_clear": 1,
                    "clear_bit": 14,
                    "clear_bit_1": 1,
                    "set_bit": 1,
                    "set_flag": 1,
                    "set_fll_factor": 4,
                    "set_param": 1
                },
                "FUN_00001778": {
                    "clear_bit": 4,
                    "wait": 1,
                    "wait_condition": 6,
                    "wait_for_condition": 11,
                    "wait_for_flag": 1
                },
                "FUN_000019c0": {
                    "configure_clock": 2,
                    "configure_clocks": 1,
                    "enable_mcg": 2,
                    "initialize_clock_and_disable_pll": 1,
                    "initialize_clock_and_power": 1,
                    "initialize_mcg": 3,
                    "initialize_pll_and_wait_for_lock": 1,
                    "initialize_system": 19,
                    "initialize_system_clock": 1
                },
                "bit_clear8": {
                    "clear_bit8": 3,
                    "clear_bit_8": 3
                },
                "byte": {
                    "input_byte": 1
                },
                "byte_param": {
                    "param": 1,
                    "param_byte": 1
                },
                "byte_param_1": {
                    "flag_value": 1
                },
                "kinetis_mcg_disable_pll": {
                    "disable_pll": 2
                },
                "kinetis_mcg_enable_osc": {
                    "enable_main_oscillator": 1,
                    "enable_oscillator": 4,
                    "enable_system_oscillator": 1
                },
                "kinetis_mcg_set_fll_factor": {
                    "set_fll_factor": 6
                },
                "param_1": {
                    "bit_index": 2,
                    "byte_param": 4,
                    "device": 1,
                    "param1": 2,
                    "parameter": 1,
                    "undefined4_param": 1,
                    "undefined_param": 1,
                    "undefined_param1": 1,
                    "undefined_param_1": 2
                },
                "param_2": {
                    "data": 1,
                    "param2": 2,
                    "parameter2": 1,
                    "setting": 1,
                    "undefined2": 1,
                    "undefined_arg2": 1,
                    "undefined_param": 4,
                    "undefined_param2": 1,
                    "undefined_param_2": 3
                },
                "param_3": {
                    "control_byte": 1
                }
            },
            "called": [
                "FUN_00001710",
                "FUN_00001748",
                "FUN_00001778",
                "FUN_00001734"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_system_clock_000019c0(void)\n\n{\n  enable_oscillator();\n  set_fll_factor(0x40);\n  clear_bit_8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  disable_pll();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "current_name": "initialize_system_clock_000019c0",
            "entrypoint": "0x000019c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000019c0": "initialize_system_clock_000019c0",
                "bit_clear8": "clear_bit_8",
                "kinetis_mcg_disable_pll": "disable_pll",
                "kinetis_mcg_enable_osc": "enable_oscillator",
                "kinetis_mcg_set_fll_factor": "set_fll_factor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001a18": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "num_iterations": 1,
                    "status_flag": 1,
                    "system_state": 1,
                    "updated_value": 1
                },
                "DAT_40064001": {
                    "bit_mask": 1
                },
                "FUN_000016ec": {
                    "bit_set8": 1,
                    "configure_bit": 2,
                    "configure_params": 1,
                    "configure_peripheral": 1,
                    "initialize_bit": 1,
                    "initialize_bit_set8": 1,
                    "initialize_param": 1,
                    "perform_action": 1,
                    "set_bit": 11,
                    "set_bit8": 1,
                    "set_bit_value": 2,
                    "set_bits_undefined": 1,
                    "set_flag": 1,
                    "set_param": 2
                },
                "FUN_00001734": {
                    "clear_registers": 1,
                    "disable_mc_connection": 1,
                    "disable_mcg": 3,
                    "disable_mcgpll": 1,
                    "disable_other_func": 1,
                    "disable_pll": 17,
                    "perform_additional_setup": 1,
                    "post_process": 1,
                    "reset_system": 1
                },
                "FUN_00001a18": {
                    "enable_pll": 4,
                    "initialize_system": 9,
                    "set_bit_and_disable_pll": 1,
                    "set_bit_enable_pll": 1,
                    "set_dat_flag_and_disable_pll": 1,
                    "set_default_configuration": 1,
                    "set_enable_mcg_pll": 1,
                    "set_enable_pll": 1,
                    "set_mcglite_divider": 1,
                    "set_pll": 1,
                    "set_pll_disable": 4,
                    "set_pll_disable_mcg": 1,
                    "set_pll_disabled": 4,
                    "set_pll_disabled_flag": 1
                },
                "param_1": {
                    "arg1": 1,
                    "config_param1": 1,
                    "input1": 1,
                    "param": 1,
                    "param1": 1,
                    "undefined4_param": 1,
                    "undefined4_param1": 1,
                    "undefined4_val": 1,
                    "unknown_param": 1,
                    "unused_param": 3,
                    "unused_param1": 1,
                    "value": 1
                },
                "param_2": {
                    "arg2": 1,
                    "config_param2": 1,
                    "flag": 2,
                    "input2": 1,
                    "param2": 1,
                    "undefined_param": 1,
                    "undefined_param2": 1,
                    "undefined_val": 1,
                    "unknown_param_2": 1,
                    "unused_param": 2,
                    "unused_param2": 2
                }
            },
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_system_00001a18(void)\n\n{\n  bit_set8(&DAT_40064001,1);\n  kinetis_mcg_disable_pll();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "current_name": "initialize_system_00001a18",
            "entrypoint": "0x00001a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001a18": "initialize_system_00001a18"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "constant_value": 1,
                    "counter": 1,
                    "data_variable_1": 1,
                    "desired_frequency": 1,
                    "new_variable": 1,
                    "variable_value": 1
                },
                "DAT_40064001": {
                    "bit_variable": 1,
                    "enable_flag": 1,
                    "pll_config_flag": 1,
                    "pll_control_register": 1,
                    "register_data": 1
                },
                "FUN_000016ec": {
                    "bit_set8_and_delay": 1,
                    "configure_interrupt": 1,
                    "configure_pll": 2,
                    "set_bit": 9,
                    "set_bit8": 3,
                    "set_bit_at": 1,
                    "set_bit_value": 3,
                    "set_bits": 1,
                    "set_flag": 1,
                    "set_parameter": 1,
                    "update_polarity": 1
                },
                "FUN_00001734": {
                    "disable_clock": 2,
                    "disable_kinetis_mcg_pll": 1,
                    "disable_mcg": 2,
                    "disable_mcg_loop": 1,
                    "disable_pll": 15,
                    "initialize_mcg": 1,
                    "reset_pll": 1,
                    "set_mcg_configuration": 1
                },
                "FUN_00001a3c": {
                    "configure_pll_and_clock": 1,
                    "configure_system": 1,
                    "enable_pll": 7,
                    "enable_pll_and_set_delay": 2,
                    "initialize_hardware": 2,
                    "initialize_system": 7,
                    "set_clock_and_mode": 2,
                    "set_enable_flag_and_disable_pll": 1,
                    "set_pll_and_update_frequency": 1,
                    "set_pll_disable": 5,
                    "set_pll_disable_mode": 1,
                    "set_pll_disabled": 1
                },
                "PARAM_2": {
                    "unused_param": 1
                },
                "kinetis_mcg_disable_pll": {
                    "disable_pll": 1
                },
                "param_1": {
                    "arg1": 3,
                    "arg_1": 1,
                    "config_param": 2,
                    "data_address": 1,
                    "flag": 1,
                    "mode": 1,
                    "param": 1,
                    "param1": 4,
                    "parameter1": 2,
                    "undefined4_param": 2,
                    "unused_param": 1
                },
                "param_2": {
                    "arg2": 3,
                    "arg_2": 1,
                    "bit_position": 1,
                    "config_flag": 1,
                    "option": 1,
                    "param2": 4,
                    "parameter2": 2,
                    "undefined_param": 2,
                    "unused": 1,
                    "unused_param": 1,
                    "unused_param2": 1
                },
                "undefined": {
                    "param_2": 1
                },
                "undefined4": {
                    "param_1": 1
                }
            },
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid enable_pll_and_set_delay_00001a3c(void)\n\n{\n  bit_set8(&DAT_40064001,1);\n  disable_pll();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "current_name": "enable_pll_and_set_delay_00001a3c",
            "entrypoint": "0x00001a3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001a3c": "enable_pll_and_set_delay_00001a3c",
                "kinetis_mcg_disable_pll": "disable_pll"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001a60": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "communication_value": 1,
                    "counter": 1,
                    "interrupt_priority": 1,
                    "loop_counter": 1,
                    "result": 1,
                    "some_variable": 1,
                    "status": 1,
                    "timeout_counter": 1
                },
                "DAT_40064000": {
                    "communication_control": 1,
                    "control_register": 2,
                    "data_register": 2,
                    "hardware_config_register": 1,
                    "register": 1,
                    "register0": 1,
                    "register_0": 1
                },
                "DAT_40064001": {
                    "bitwise_register": 1,
                    "communication_register": 1,
                    "control_register": 1,
                    "flag_register": 1,
                    "flags": 1,
                    "hardware_control_register": 1,
                    "register1": 1,
                    "register_1": 1,
                    "reset_register": 1
                },
                "DAT_40064005": {
                    "communication_flag": 1,
                    "configuration_register": 1,
                    "control_register": 2,
                    "interrupt_register": 1,
                    "register5": 1,
                    "register_3": 1,
                    "status_register": 1
                },
                "DAT_40064006": {
                    "communication_status": 1,
                    "hardware_status_register": 1,
                    "input_register": 1,
                    "register6": 1,
                    "register_2": 1,
                    "status_register": 4
                },
                "FUN_000016ec": {
                    "bit_set": 1,
                    "bit_set8": 1,
                    "perform_operation_2": 1,
                    "set_bit": 9,
                    "set_bit8": 6,
                    "set_bit_in_register": 1,
                    "set_bit_with_mask": 1,
                    "set_bits": 1,
                    "set_flag": 1,
                    "wait_for_bit": 2,
                    "wait_until_status_flag_set": 1
                },
                "FUN_00001710": {
                    "bit_clear": 1,
                    "bit_clear8": 1,
                    "clear_bit": 9,
                    "clear_bit8": 6,
                    "clear_bit_in_register": 1,
                    "clear_bit_with_mask": 1,
                    "clear_bits": 1,
                    "clear_flag": 1,
                    "perform_operation_1": 1,
                    "set_bit": 2,
                    "set_hardware_control_mode": 1
                },
                "FUN_00001a60": {
                    "clear_bit_and_wait": 2,
                    "clear_flag_and_set_mode": 1,
                    "clear_flags_and_set_register": 1,
                    "clear_flags_and_set_value": 1,
                    "clear_set_bits": 1,
                    "disable_interrupts": 1,
                    "initialize_and_wait": 1,
                    "initialize_communication": 2,
                    "initialize_data": 1,
                    "initialize_device": 8,
                    "initialize_hardware": 2,
                    "initialize_peripheral": 6,
                    "initialize_system": 1,
                    "reset_and_wait": 1,
                    "reset_and_wait_for_condition": 1,
                    "set_flag_and_wait": 1
                },
                "bit_clear8": {
                    "clear_bit_in_register": 1
                },
                "bit_set8": {
                    "set_bit_in_register": 1
                },
                "param_1": {
                    "": 1,
                    "address": 1,
                    "arg1": 4,
                    "data": 1,
                    "data_param": 1,
                    "not_used": 1,
                    "param": 1,
                    "param1": 4,
                    "parameter_1": 1,
                    "peripheral_address": 1,
                    "undefined4_param": 1,
                    "undefined_var_1": 1,
                    "unused": 1,
                    "unused_param_1": 2,
                    "unused_parameter1": 1,
                    "value": 1
                },
                "param_2": {
                    "": 1,
                    "arg2": 4,
                    "bit_number": 1,
                    "bit_position": 1,
                    "flag": 3,
                    "not_used": 1,
                    "param2": 4,
                    "parameter_2": 1,
                    "size_param": 1,
                    "undefined_param": 1,
                    "undefined_var_2": 1,
                    "unused": 1,
                    "unused_param_2": 2,
                    "unused_parameter2": 1
                }
            },
            "called": [
                "FUN_00001710",
                "FUN_000016ec"
            ],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_device_00001a60(void)\n\n{\n  clear_bit_in_register(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  set_bit_in_register(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "current_name": "initialize_device_00001a60",
            "entrypoint": "0x00001a60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001a60": "initialize_device_00001a60",
                "bit_clear8": "clear_bit_in_register",
                "bit_set8": "set_bit_in_register"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "count": 2,
                    "counter": 9,
                    "default_setting": 1,
                    "error_flag": 1,
                    "error_status": 1,
                    "initial_value": 4,
                    "max_iterations": 1,
                    "new_value": 1,
                    "num_iterations": 1,
                    "output_value": 2,
                    "result": 2,
                    "return_value": 1,
                    "updated_value": 1,
                    "value": 2,
                    "variable_to_set": 1
                },
                "DAT_40064000": {
                    "binary_flags": 1,
                    "bits_to_clear_and_set": 1,
                    "config_flags": 3,
                    "configuration_flags": 1,
                    "data": 3,
                    "data_flag": 6,
                    "data_flags": 1,
                    "data_mask": 3,
                    "data_register": 2,
                    "flags": 4,
                    "input_value": 1,
                    "mask_value": 1,
                    "masked_data": 2,
                    "settings": 1
                },
                "DAT_40064006": {
                    "bit_mask": 1,
                    "check_bits": 1,
                    "check_data": 2,
                    "check_flag": 2,
                    "check_value": 1,
                    "conditions": 1,
                    "control": 2,
                    "control_flag": 3,
                    "control_flags": 3,
                    "control_register": 2,
                    "data_condition": 1,
                    "flag": 1,
                    "flag_value": 1,
                    "mask": 1,
                    "status": 4,
                    "status_flag": 3,
                    "status_flags": 2
                },
                "FUN_00001ad4": {
                    "clean_up_binary_flags": 1,
                    "clear_bits_and_check_completion": 1,
                    "clear_bits_and_set_flag": 3,
                    "clear_bits_and_set_variable": 1,
                    "clear_flags_and_set_initial_value": 1,
                    "initialize_configuration": 1,
                    "initialize_data": 12,
                    "initialize_flags": 1,
                    "reset_flags": 1,
                    "update_configuration": 3,
                    "update_data": 2,
                    "update_data_and_return": 1,
                    "update_settings": 1,
                    "update_variable": 1,
                    "update_variable_and_check": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001b10"
            ],
            "code": "\nvoid initialize_data_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "current_name": "initialize_data_00001ad4",
            "entrypoint": "0x00001ad4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001b10": {
            "additional_data": {
                "DAT_00007004": {
                    "mcg_mode_table": 1
                },
                "DAT_1fff0b74": {
                    "max_mode": 1
                },
                "FUN_00001b10": {
                    "configure_clock_source": 1,
                    "configure_mcg": 2,
                    "configure_mcg_clock": 1,
                    "configure_mcg_mode": 5,
                    "initialize_mcg_modes": 1,
                    "mcg_switch_mode": 1,
                    "set_clock_configuration": 1,
                    "set_clock_mode": 9,
                    "set_mcg_mode": 10
                },
                "kinetis_mcg_set_blpe": {
                    "set_blpe_mode": 1
                },
                "kinetis_mcg_set_blpi": {
                    "set_blpi_mode": 1
                },
                "kinetis_mcg_set_fbe": {
                    "set_fbe_mode": 1
                },
                "kinetis_mcg_set_fbi": {
                    "set_fbi_mode": 1
                },
                "kinetis_mcg_set_fee": {
                    "set_fee_mode": 1
                },
                "kinetis_mcg_set_fei": {
                    "set_fei_mode": 1
                },
                "kinetis_mcg_set_pbe": {
                    "set_pbe_mode": 1
                },
                "kinetis_mcg_set_pee": {
                    "set_pee_mode": 1
                },
                "param_1": {
                    "clock_config_id": 1,
                    "clock_mode": 1,
                    "clock_source": 1,
                    "mode": 28
                },
                "uVar1": {
                    "result": 22,
                    "return_value": 8,
                    "status": 1
                }
            },
            "called": [
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_000018bc",
                "FUN_00001a60",
                "FUN_00001960",
                "FUN_00001a3c",
                "FUN_0000191c",
                "FUN_00001a18"
            ],
            "calling": [
                "FUN_00001c84"
            ],
            "code": "\nundefined4 set_mcg_mode_00001b10(byte mode)\n\n{\n  undefined4 result;\n  \n  if (mode < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)mode + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        set_fei_mode();\n        break;\n      case 1:\n        set_fee_mode();\n        break;\n      case 2:\n        set_fbi_mode();\n        break;\n      case 3:\n        set_fbe_mode();\n        break;\n      case 4:\n        set_blpi_mode();\n        break;\n      case 5:\n        set_blpe_mode();\n        break;\n      case 6:\n        set_pbe_mode();\n        break;\n      case 7:\n        set_pee_mode();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (mode != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "current_name": "set_mcg_mode_00001b10",
            "entrypoint": "0x00001b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001b10": "set_mcg_mode_00001b10",
                "kinetis_mcg_set_blpe": "set_blpe_mode",
                "kinetis_mcg_set_blpi": "set_blpi_mode",
                "kinetis_mcg_set_fbe": "set_fbe_mode",
                "kinetis_mcg_set_fbi": "set_fbi_mode",
                "kinetis_mcg_set_fee": "set_fee_mode",
                "kinetis_mcg_set_fei": "set_fei_mode",
                "kinetis_mcg_set_pbe": "set_pbe_mode",
                "kinetis_mcg_set_pee": "set_pee_mode",
                "param_1": "mode",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "additional_data": {
                "DAT_1fff0b74": {
                    "counter": 2,
                    "data_reg5": 1,
                    "data_register": 1,
                    "data_register5": 1,
                    "data_register_5": 1,
                    "flag5": 1,
                    "global_data": 1,
                    "global_var": 1,
                    "interrupt_status": 1,
                    "register5": 3,
                    "reset_variable": 2,
                    "result": 2,
                    "special_data": 1,
                    "unused_variable": 1
                },
                "DAT_40064000": {
                    "config_register_3": 1,
                    "configuration_register": 1,
                    "control_reg": 1,
                    "control_register": 3,
                    "data_reg3": 1,
                    "data_register": 2,
                    "data_register3": 1,
                    "data_register_3": 1,
                    "flag2": 1,
                    "hardware_settings": 1,
                    "register2": 1,
                    "register3": 3,
                    "register4": 1,
                    "system_config": 1,
                    "system_settings": 1,
                    "value": 1
                },
                "DAT_40064001": {
                    "config_flags": 1,
                    "config_register_1": 1,
                    "data_reg1": 1,
                    "data_register1": 1,
                    "data_register_1": 1,
                    "flag1": 2,
                    "flag_register": 1,
                    "flag_register1": 1,
                    "flag_register_1": 2,
                    "hardware_flags1": 1,
                    "register1": 5,
                    "status_flag1": 1,
                    "status_register": 1,
                    "system_flags": 1,
                    "system_status_register": 1
                },
                "DAT_40064005": {
                    "config_register_2": 1,
                    "control_register": 1,
                    "data_reg2": 1,
                    "data_register2": 1,
                    "data_register_2": 1,
                    "external_flags": 1,
                    "flag2": 1,
                    "flag3": 1,
                    "flag_register2": 1,
                    "flag_register_2": 2,
                    "hardware_flags2": 1,
                    "interrupt_flags": 1,
                    "register2": 4,
                    "register3": 1,
                    "status_flag2": 1,
                    "status_register": 2
                },
                "DAT_40064006": {
                    "condition_register": 1,
                    "data_reg4": 1,
                    "data_register4": 1,
                    "data_register_4": 1,
                    "flag4": 1,
                    "flag_register": 1,
                    "hardware_status": 2,
                    "register3": 1,
                    "register4": 4,
                    "status": 1,
                    "status_reg": 1,
                    "status_register": 4,
                    "system_status": 1,
                    "wait_register": 1
                },
                "FUN_00001710": {
                    "clear_bit": 1,
                    "configure_clock": 3,
                    "configure_interrupt": 1,
                    "configure_module": 1,
                    "configure_pin": 1,
                    "configure_pins": 1,
                    "configure_system": 3,
                    "configure_timer": 1,
                    "init_peripheral": 1,
                    "initialize_clock": 1,
                    "initialize_port": 1,
                    "initialize_timer": 1,
                    "perform_action": 1,
                    "set_clear_flag": 1,
                    "set_fll_factor": 6,
                    "set_mcg_factor": 1,
                    "set_system_parameter": 1,
                    "set_system_parameters": 1,
                    "set_system_params": 2
                },
                "FUN_00001748": {
                    "clear_bit": 13,
                    "clear_flag": 10,
                    "clear_flag_bit": 1,
                    "clear_flags": 1,
                    "clear_interrupt": 1,
                    "clear_interrupt_flag": 2,
                    "set_bit": 1
                },
                "FUN_00001bb8": {
                    "initialize_and_reset": 1,
                    "initialize_hardware": 2,
                    "initialize_system": 28
                },
                "PARAM_1": {
                    "undefined4_param": 1
                },
                "PARAM_2": {
                    "undefined_param": 1
                },
                "VAR_1": {
                    "temp_var1": 1
                },
                "VAR_2": {
                    "temp_var2": 1
                },
                "bit_clear8": {
                    "clear_bit": 1
                },
                "byte": {
                    "flag": 2,
                    "param_1": 1
                },
                "kinetis_mcg_set_fll_factor": {
                    "set_clock_fll_factor": 1
                },
                "param_1": {
                    "config_param": 2,
                    "config_param1": 2,
                    "factor": 1,
                    "param1": 7,
                    "param_1": 1,
                    "status": 1,
                    "undefined4_param": 1,
                    "undefined4_parameter": 1,
                    "undefined_param1": 1,
                    "undefined_param_1": 2,
                    "unknown_parameter1": 1,
                    "unused": 1
                },
                "param_2": {
                    "bit": 1,
                    "byte_param": 1,
                    "config_param2": 2,
                    "flag_param": 1,
                    "param2": 7,
                    "param_2": 1,
                    "undefined_param": 1,
                    "undefined_param2": 1,
                    "undefined_param_2": 2,
                    "undefined_parameter": 1,
                    "unknown_parameter2": 1,
                    "unused": 1,
                    "value": 1
                },
                "param_3": {
                    "param3": 1
                },
                "param_4": {
                    "param4": 1
                }
            },
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "calling": [
                "FUN_00001c84"
            ],
            "code": "\nvoid initialize_system_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    clear_bit(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    clear_bit(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  set_clock_fll_factor(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_system_00001bb8",
            "entrypoint": "0x00001bb8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001bb8": "initialize_system_00001bb8",
                "bit_clear8": "clear_bit",
                "kinetis_mcg_set_fll_factor": "set_clock_fll_factor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001c84": {
            "additional_data": {
                "DAT_40064000": {
                    "data_register0": 1,
                    "data_setting2": 1,
                    "data_variable": 1,
                    "register_3": 1,
                    "some_configuration_register": 1,
                    "some_other_variable": 1,
                    "system_control_register2": 1,
                    "variable0": 1,
                    "variable2": 2,
                    "variable_2": 1
                },
                "DAT_40064004": {
                    "another_variable": 1,
                    "control_variable": 1,
                    "data_register2": 1,
                    "data_setting3": 1,
                    "register_4": 1,
                    "some_control_register1": 1,
                    "system_control_register3": 1,
                    "variable1": 1,
                    "variable3": 2,
                    "variable_3": 1
                },
                "DAT_40064005": {
                    "data_register3": 1,
                    "data_setting4": 1,
                    "one_more_variable": 1,
                    "register_5": 1,
                    "some_control_register2": 1,
                    "status_variable": 1,
                    "variable2": 2,
                    "variable4": 2,
                    "variable_4": 1
                },
                "DAT_4006400c": {
                    "counter_variable": 1,
                    "data_register1": 1,
                    "data_setting1": 1,
                    "register_2": 1,
                    "some_data_register": 1,
                    "some_variable": 1,
                    "variable1": 3,
                    "variable_1": 1,
                    "variable_c": 1
                },
                "FUN_00000cd0": {
                    "enable_interrupts": 1,
                    "get_clock_configuration": 1,
                    "get_irq_status": 1,
                    "init_mcgirclk": 1,
                    "initialize_clock": 2,
                    "initialize_erclk32_k": 2,
                    "initialize_mcg": 2,
                    "initialize_mcgirclk": 7,
                    "initialize_mcglirclk": 1,
                    "reset_bits": 1,
                    "sub_function_3": 1
                },
                "FUN_00000d0c": {
                    "initialize_mcg": 2,
                    "initialize_mcgirclk": 2,
                    "initialize_safe_mode": 2,
                    "kinetis_mcg_set_safe_mode": 1,
                    "set_bits": 1,
                    "set_mcg_safe_mode": 1,
                    "set_mode": 2,
                    "set_safe_mode": 8,
                    "sub_function_2": 1
                },
                "FUN_000017dc": {
                    "disable_interrupts": 1,
                    "enable_interrupts": 1,
                    "initialize_clocks": 1,
                    "initialize_erclk32_k": 3,
                    "initialize_erclk32k": 2,
                    "irq_restore": 1,
                    "kinetis_mcg_set_safe_mode": 1,
                    "restore_interrupt": 2,
                    "restore_interrupts": 5,
                    "restore_irq": 1,
                    "set_safe_mode": 1,
                    "sub_function_6": 1
                },
                "FUN_0000182c": {
                    "configure_safe_mode": 1,
                    "disable_interrupt": 3,
                    "disable_interrupts": 11,
                    "disable_irq": 2,
                    "initialize_mcg": 1,
                    "initialize_safe_mode": 1,
                    "sub_function_1": 1
                },
                "FUN_00001b10": {
                    "configure_clock": 1,
                    "init_erclk32_k": 1,
                    "initialize_erclk32_k": 5,
                    "initialize_erclk32k": 3,
                    "set_clock_mode": 1,
                    "set_config": 1,
                    "set_control_code": 1,
                    "set_erclk32_k": 1,
                    "set_mcg_mode": 1,
                    "set_mode": 3,
                    "set_parameter": 1,
                    "sub_function_4": 1
                },
                "FUN_00001bb8": {
                    "enable_lpo": 1,
                    "initialize_mc_gir_clk": 1,
                    "initialize_mcgir_clock": 1,
                    "initialize_mcgirclk": 2,
                    "restore_interrupts": 4,
                    "restore_irq_status": 1,
                    "set_clock_mode": 1,
                    "set_mode": 7,
                    "set_power_mode": 1,
                    "sub_function_5": 1
                },
                "FUN_00001c84": {
                    "init_system": 1,
                    "initialize_clock_system": 1,
                    "initialize_device": 2,
                    "initialize_hardware": 1,
                    "initialize_mcu": 1,
                    "initialize_microcontroller": 1,
                    "initialize_system": 24
                },
                "_DAT_40048044": {
                    "clock_setting1": 1,
                    "control_register": 1,
                    "pin_config_register": 1,
                    "register1": 2,
                    "register_1": 1,
                    "system_config_register": 1,
                    "system_configuration_register": 1,
                    "system_control_reg1": 1,
                    "system_control_register": 2
                },
                "irq_disable": {
                    "disable_interrupts": 10
                },
                "irq_restore": {
                    "irq_restored": 1,
                    "restore_interrupts": 10
                },
                "kinetis_mcg_init_erclk32k": {
                    "init_external_clock": 1,
                    "initialize_erclk32_k": 8,
                    "initialize_erclk32k": 2
                },
                "kinetis_mcg_init_mcgirclk": {
                    "init_internal_clock": 1,
                    "initialize_mcgir_clock": 1,
                    "initialize_mcgirclk": 9
                },
                "kinetis_mcg_set_mode": {
                    "set_mcg_mode": 1,
                    "set_mode": 10
                },
                "kinetis_mcg_set_safe_mode": {
                    "set_mcg_run_mode_safe": 1,
                    "set_safe_mode": 10
                },
                "param_1": {
                    "erclk32k_param": 1,
                    "erclk32k_value": 1,
                    "input_byte": 1,
                    "parameter_2": 1,
                    "value": 1
                },
                "uVar1": {
                    "disabled_interrupts": 1,
                    "interrupt_flags": 2,
                    "interrupt_mask": 1,
                    "interrupt_state": 4,
                    "interrupt_status": 1,
                    "irq_disable_result": 1,
                    "irq_disabled": 1,
                    "irq_state": 1,
                    "irq_status": 1,
                    "old_interrupt_state": 1,
                    "previous_interrupt_state": 1,
                    "saved_state": 1
                }
            },
            "called": [
                "FUN_0000182c",
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001b10",
                "FUN_00001bb8",
                "FUN_000017dc"
            ],
            "calling": [
                "FUN_00001274"
            ],
            "code": "\n\n\nvoid initialize_clock_system_00001c84(void)\n\n{\n  undefined4 interrupt_state;\n  \n  interrupt_state = disable_interrupts();\n  set_safe_mode();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  initialize_mcgirclk();\n  initialize_erclk32_k();\n  set_mode(7);\n  restore_interrupts(interrupt_state);\n  return;\n}\n\n",
            "current_name": "initialize_clock_system_00001c84",
            "entrypoint": "0x00001c84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001c84": "initialize_clock_system_00001c84",
                "irq_disable": "disable_interrupts",
                "irq_restore": "restore_interrupts",
                "kinetis_mcg_init_erclk32k": "initialize_erclk32_k",
                "kinetis_mcg_init_mcgirclk": "initialize_mcgirclk",
                "kinetis_mcg_set_mode": "set_mode",
                "kinetis_mcg_set_safe_mode": "set_safe_mode",
                "uVar1": "interrupt_state"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "additional_data": {
                "FUN_0000093c": {
                    "do_something": 6,
                    "execute_function": 1,
                    "handle_thread_yield": 1,
                    "helper_function": 3,
                    "initialize": 1,
                    "perform_action": 3,
                    "perform_additional_action": 1,
                    "perform_additional_task": 1,
                    "perform_cleanup": 3,
                    "perform_function": 1,
                    "perform_some_action": 1,
                    "perform_task": 5,
                    "process_data": 1,
                    "reinitialize_data": 1,
                    "utility_function": 1
                },
                "FUN_00001cf0": {
                    "check_and_update_thread_state": 1,
                    "check_and_yield": 18,
                    "check_and_yield_if_not_empty": 1,
                    "check_data_and_yield": 1,
                    "check_for_yield": 1,
                    "check_thread_status": 1,
                    "execute_if_condition_true": 1,
                    "execute_if_flag_set": 1,
                    "execute_thread_yield": 1,
                    "thread_control": 1,
                    "thread_yield_if_not_zero": 1,
                    "yield_higher_if_not_zero": 1,
                    "yield_if_not_zero": 2
                },
                "thread_yield_higher": {
                    "yield_higher": 1
                }
            },
            "called": [
                "FUN_0000093c"
            ],
            "calling": [
                "FUN_00002028"
            ],
            "code": "\nvoid check_data_and_yield_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    yield_higher();\n  }\n  return;\n}\n\n",
            "current_name": "check_data_and_yield_00001cf0",
            "entrypoint": "0x00001cf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001cf0": "check_data_and_yield_00001cf0",
                "thread_yield_higher": "yield_higher"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001d08": {
            "additional_data": {
                "0x2000000": {
                    "constant_offset": 2
                },
                "FUN_00001d08": {
                    "calculate_new_value": 1,
                    "calculate_offset": 22,
                    "calculate_result": 5,
                    "calculate_result_offset": 1,
                    "calculate_updated_value": 1,
                    "multiply_and_add_offset": 1
                },
                "new_variable_name_1": {
                    "first_part": 1
                },
                "new_variable_name_2": {
                    "second_part": 1
                },
                "param_1": {
                    "address": 3,
                    "base_address": 2,
                    "base_value": 2,
                    "data": 1,
                    "input": 1,
                    "input1": 1,
                    "input_val": 1,
                    "input_value": 14,
                    "num": 1,
                    "number": 1,
                    "offset": 1,
                    "value": 1,
                    "value1": 2
                },
                "param_2": {
                    "count": 1,
                    "index": 1,
                    "index_offset": 1,
                    "input2": 1,
                    "multiplier": 22,
                    "offset": 2,
                    "offset_factor": 1,
                    "value2": 2
                },
                "param_3": {
                    "constant_offset": 1,
                    "offset": 1,
                    "result": 1,
                    "shifted_value": 1
                },
                "param_4": {
                    "additional_offset": 1,
                    "constant": 2,
                    "extra_offset": 1
                },
                "param_5": {
                    "additional_constant": 1,
                    "shifted_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001d3a"
            ],
            "code": "\nint calculate_result_offset_00001d08(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "current_name": "calculate_result_offset_00001d08",
            "entrypoint": "0x00001d08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001d08": "calculate_result_offset_00001d08",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "additional_data": {
                "FUN_00001d3a": {
                    "set_bit": 3,
                    "set_bit_at_address": 2,
                    "set_bit_to1": 6,
                    "set_bit_to_one": 12,
                    "set_bit_to_true": 2,
                    "set_bit_value": 3,
                    "set_bitband_value": 1,
                    "set_bitband_value_to1": 2
                },
                "param_1": {
                    "address": 13,
                    "base_address": 6,
                    "data_address": 1,
                    "data_pointer": 1,
                    "input": 3,
                    "input_addr": 1,
                    "input_address": 4,
                    "memory_address": 1,
                    "ptr": 1
                },
                "param_2": {
                    "bit_index": 3,
                    "bit_offset": 4,
                    "bit_position": 24
                },
                "puVar1": {
                    "bit_addr": 1,
                    "bit_address": 18,
                    "bit_pointer": 6
                }
            },
            "called": [
                "FUN_00001d08"
            ],
            "calling": [
                "FUN_00001ddc"
            ],
            "code": "\nvoid set_bit_to_one_00001d3a(undefined4 address,undefined bit_position)\n\n{\n  undefined4 *bit_address;\n  \n  bit_address = (undefined4 *)bitband_addr(address,bit_position);\n  *bit_address = 1;\n  return;\n}\n\n",
            "current_name": "set_bit_to_one_00001d3a",
            "entrypoint": "0x00001d3a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001d3a": "set_bit_to_one_00001d3a",
                "param_1": "address",
                "param_2": "bit_position",
                "puVar1": "bit_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "additional_data": {
                "0x40048000": {
                    "bits": 1,
                    "mask_b": 1
                },
                "0x7000": {
                    "mask": 1,
                    "mask_a": 1
                },
                "FUN_00001d5e": {
                    "apply_bit_mask": 2,
                    "apply_bitmask": 4,
                    "apply_mask": 4,
                    "apply_mask_and_bitwise_or": 2,
                    "apply_mask_and_offset": 2,
                    "apply_mask_and_set_bit": 1,
                    "apply_mask_and_set_bits": 1,
                    "apply_mask_and_shift": 3,
                    "apply_mask_and_value": 1,
                    "combine_and_shift": 1,
                    "combine_flags": 1,
                    "combine_parameters": 1,
                    "combine_values": 2,
                    "convert_to_memory_address": 1,
                    "extract_bits_from_param": 2,
                    "get_modified_value": 1,
                    "map_and_combine_bits": 1,
                    "map_parameter_value": 1
                },
                "param_1": {
                    "flags": 1,
                    "input": 3,
                    "input_value": 26,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "code": "\nuint apply_mask_and_shift_00001d5e(ushort input_value)\n\n{\n  return input_value & 0x7000 | 0x40048000;\n}\n\n",
            "current_name": "apply_mask_and_shift_00001d5e",
            "entrypoint": "0x00001d5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001d5e": "apply_mask_and_shift_00001d5e",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001d80": {
            "additional_data": {
                "0x1c0": {
                    "bit_mask": 1,
                    "mask": 2
                },
                "0x400ff000": {
                    "constant": 1,
                    "constant_value": 2
                },
                "DAT_": {
                    "": 1
                },
                "FUN_00001d80": {
                    "apply_mask": 3,
                    "apply_mask_and_set_bits": 2,
                    "apply_mask_and_shift": 1,
                    "calculate_masked_value": 1,
                    "calculate_modified_value": 1,
                    "clear_bits_and_set_mask": 1,
                    "combine_and_mask": 1,
                    "combine_and_mask_values": 1,
                    "combine_and_set_bits": 1,
                    "combine_bits": 5,
                    "combine_bits_and_mask": 2,
                    "combine_parameters": 1,
                    "convert_to_readable": 1,
                    "create_mask_with_bit_manipulation": 1,
                    "extract_bits": 3,
                    "generate_flag": 1,
                    "generate_mask": 1,
                    "get_masked_value": 1,
                    "get_modified_value": 1,
                    "map_param_to_value": 2
                },
                "PTR_": {
                    "": 1
                },
                "original_variable_name_1": {
                    "mask": 1
                },
                "original_variable_name_2": {
                    "constant": 1
                },
                "param_1": {
                    "bits_to_extract": 1,
                    "combined_output": 1,
                    "converted_input": 1,
                    "input": 2,
                    "input_value": 23,
                    "output_bits": 1,
                    "result": 1,
                    "value": 1
                },
                "param_2": {
                    "mask": 1
                },
                "param_3": {
                    "shifted_value": 1
                },
                "param_4": {
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "code": "\nuint combine_bits_and_mask_00001d80(ushort input_value)\n\n{\n  return input_value & 0x1c0 | 0x400ff000;\n}\n\n",
            "current_name": "combine_bits_and_mask_00001d80",
            "entrypoint": "0x00001d80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001d80": "combine_bits_and_mask_00001d80",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001da2": {
            "additional_data": {
                "FUN_00001da2": {
                    "extract_bit": 1,
                    "extract_bitmask": 1,
                    "extract_bits": 18,
                    "extract_bits_from_param": 1,
                    "extract_bits_from_ushort": 1,
                    "extract_bits_from_value": 1,
                    "get_bit_group": 1,
                    "get_bit_mask": 1,
                    "get_bits_from_value": 1,
                    "get_lower_bits": 1,
                    "get_lowest_three_bits": 1,
                    "get_three_least_significant_bits": 3
                },
                "param_1": {
                    "bits_to_extract": 1,
                    "extracted_bits": 2,
                    "input": 7,
                    "input_data": 1,
                    "input_number": 1,
                    "input_ushort": 1,
                    "input_value": 13,
                    "output": 2,
                    "result": 1,
                    "value": 2
                },
                "param_2": {
                    "bits_to_shift": 1
                },
                "result": {
                    "extracted_bits": 1
                },
                "return": {
                    "bit_group": 1,
                    "bits_extracted": 1,
                    "extracted_bits": 2,
                    "output": 1
                },
                "var_1": {
                    "shifted": 1
                },
                "var_2": {
                    "mask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "code": "\nushort extract_bits_from_value_00001da2(ushort input_value)\n\n{\n  extracted_bits input_value >> 6 & 7;\n}\n\n",
            "current_name": "extract_bits_from_value_00001da2",
            "entrypoint": "0x00001da2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001da2": "extract_bits_from_value_00001da2",
                "param_1": "input_value",
                "return": "extracted_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "additional_data": {
                "FUN_00001dc0": {
                    "clear_bits": 1,
                    "clear_bits_above_sixth": 1,
                    "extract_bits": 1,
                    "extract_bits_from_parameter": 1,
                    "extract_bitwise_and": 1,
                    "extract_last_six_bits": 2,
                    "extract_least_significant_bits": 3,
                    "extract_lower6_bits": 1,
                    "extract_lower_bits": 3,
                    "extract_lower_six_bits": 2,
                    "extract_lowest_bits": 2,
                    "extract_lowest_six_bits": 3,
                    "extract_six_bits": 1,
                    "get_lower6_bits": 1,
                    "mask_and_return_least_significant_bits": 1,
                    "mask_bits": 1,
                    "mask_low6_bits": 1,
                    "mask_lower_six_bits": 1,
                    "mask_lowest6_bits": 1,
                    "truncate_to6_bits": 1,
                    "truncate_to_six_bits": 1
                },
                "param_1": {
                    "input": 4,
                    "input_number": 1,
                    "input_value": 23,
                    "lower_bits": 1,
                    "output": 1
                },
                "param_2": {
                    "output": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80",
                "FUN_00001ff6"
            ],
            "code": "\nushort extract_lower_six_bits_00001dc0(ushort input_value)\n\n{\n  return input_value & 0x3f;\n}\n\n",
            "current_name": "extract_lower_six_bits_00001dc0",
            "entrypoint": "0x00001dc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001dc0": "extract_lower_six_bits_00001dc0",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "additional_data": {
                "FUN_00001d3a": {
                    "initialize_port": 2,
                    "initialize_port_number": 1,
                    "port_num": 1,
                    "set_port_value": 1
                },
                "FUN_00001da2": {
                    "convert_to_unsigned_short": 1,
                    "modify_parameter": 1,
                    "modify_port_number": 1,
                    "modify_port_value": 1,
                    "set_bit": 1
                },
                "FUN_00001ddc": {
                    "set_bit_for_port_num": 1,
                    "set_bit_in_port": 2,
                    "set_bit_in_port_num": 6,
                    "set_bit_in_port_number": 2,
                    "set_bit_in_register": 2,
                    "set_port_bit": 6,
                    "set_port_bits": 2,
                    "set_port_flag": 1,
                    "set_port_number": 1,
                    "update_bit_in_port": 1,
                    "update_bit_of_port": 1,
                    "update_port_bit": 1,
                    "update_port_num": 2,
                    "update_port_number": 3
                },
                "bit_set32": {
                    "set_bit32": 3,
                    "set_bit_value": 1
                },
                "cVar1": {
                    "bit_number": 1,
                    "bit_offset": 2,
                    "calculated_port": 1,
                    "char_from_port_num": 1,
                    "char_value": 3,
                    "character": 1,
                    "character_value": 3,
                    "port_char": 2,
                    "port_index": 3,
                    "port_num": 1,
                    "port_num_value": 1,
                    "port_number": 6,
                    "result": 5
                },
                "param_1": {
                    "input": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_value": 2,
                    "original_port_number": 1,
                    "param1": 1,
                    "port": 1,
                    "port_num": 2,
                    "port_number": 20
                },
                "param_2": {
                    "param2": 1,
                    "undefined_param": 1,
                    "unknown_param": 1
                },
                "port_num": {
                    "get_port_number": 3
                }
            },
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "calling": [
                "FUN_00001f80"
            ],
            "code": "\nvoid set_bit_in_port_num_00001ddc(undefined2 port_number)\n\n{\n  char port_number;\n  \n  port_number = get_port_number(port_number);\n  set_bit32(&DAT_40048038,port_number + '\\t');\n  return;\n}\n\n",
            "current_name": "set_bit_in_port_num_00001ddc",
            "entrypoint": "0x00001ddc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001ddc": "set_bit_in_port_num_00001ddc",
                "bit_set32": "set_bit32",
                "cVar1": "port_number",
                "param_1": "port_number",
                "port_num": "get_port_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "additional_data": {
                "0xf": {
                    "mask": 1
                },
                "4": {
                    "bits_per_group": 1
                },
                "DAT_1fff0bd8": {
                    "data_array": 2,
                    "data_block": 1,
                    "data_table": 1
                },
                "FUN_00001e0c": {
                    "bitwise_extraction": 1,
                    "extract_bit": 1,
                    "extract_bit_from_u_int": 1,
                    "extract_bits": 15,
                    "extract_bits_from_data": 3,
                    "extract_bits_from_word": 1,
                    "extract_bits_to_uint": 1,
                    "get_bit_from_memory": 1,
                    "get_bit_value": 2,
                    "get_bits": 1,
                    "get_bits_from_data": 1,
                    "get_nibble_from_address": 1,
                    "get_shifted_value": 1,
                    "retrieve_bit": 1
                },
                "new_variable_name_1": {
                    "shifted_index": 1
                },
                "new_variable_name_2": {
                    "shifted_value": 1
                },
                "param_1": {
                    "address_increment": 1,
                    "address_offset": 1,
                    "base_address": 1,
                    "base_offset": 1,
                    "byte_offset": 1,
                    "data_offset": 1,
                    "group_offset": 1,
                    "index": 6,
                    "index_offset": 1,
                    "input_offset": 3,
                    "offset": 11,
                    "position": 1,
                    "position_offset": 1,
                    "start_index": 1
                },
                "param_2": {
                    "bit_mask": 1,
                    "bit_offset": 5,
                    "bit_pattern": 1,
                    "bit_position": 5,
                    "byte": 1,
                    "byte_address": 1,
                    "data": 12,
                    "index": 1,
                    "input_value": 1,
                    "position": 1,
                    "value": 1,
                    "word": 1
                },
                "return": {
                    "extracted_bits": 2
                },
                "uint": {
                    "extracted_bits": 1,
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "code": "\nresult extract_bits_from_data_00001e0c(int offset,result data)\n\n{\n  extracted_bits *(result *)(&DAT_1fff0bd8 + (((int)data >> 3) + offset * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "current_name": "extract_bits_from_data_00001e0c",
            "entrypoint": "0x00001e0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001e0c": "extract_bits_from_data_00001e0c",
                "param_1": "offset",
                "param_2": "data",
                "return": "extracted_bits",
                "uint": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001e44": {
            "additional_data": {
                "DAT_1fff0bd8": {
                    "data": 1
                },
                "FUN_00001e44": {
                    "update_bit": 1,
                    "update_bit_pattern": 1,
                    "update_bit_value": 1,
                    "update_bits": 11,
                    "update_bits_in_uint": 1,
                    "update_data": 5,
                    "update_data_at_offset": 1,
                    "update_data_bits": 1,
                    "update_memory": 3,
                    "update_memory_value": 2,
                    "update_parameter_value": 1,
                    "update_value_at_position": 1,
                    "update_value_in_array": 1,
                    "update_values": 1
                },
                "iVar1": {
                    "array_index": 1,
                    "byte_index": 1,
                    "byte_offset": 5,
                    "num_chunks": 1,
                    "num_offsets": 1,
                    "num_shifts": 1,
                    "number_of_integers": 1,
                    "shift_amount": 3,
                    "shift_index": 1,
                    "shifted_index": 6,
                    "shifted_offset": 2,
                    "shifted_position": 2,
                    "word_index": 2,
                    "word_offset": 2
                },
                "param_1": {
                    "array_index": 1,
                    "base_address": 1,
                    "base_index": 3,
                    "base_offset": 1,
                    "data_block_index": 1,
                    "index": 15,
                    "input_index": 1,
                    "offset": 6,
                    "start_index": 1,
                    "start_offset": 1
                },
                "param_2": {
                    "bit_index": 1,
                    "bit_offset": 11,
                    "bit_pos": 1,
                    "bit_position": 15,
                    "flag_position": 1,
                    "position": 2
                },
                "param_3": {
                    "new_value": 22,
                    "value": 9
                }
            },
            "called": [],
            "calling": [
                "FUN_00001ec4"
            ],
            "code": "\nvoid update_data_bits_00001e44(int index,uint bit_position,int new_value)\n\n{\n  int shifted_index;\n  \n  shifted_index = (int)bit_position >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shifted_index + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shifted_index + index * 4) * 4) & ~(0xf << ((bit_position & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shifted_index + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shifted_index + index * 4) * 4) | new_value << ((bit_position & 7) << 2);\n  return;\n}\n\n",
            "current_name": "update_data_bits_00001e44",
            "entrypoint": "0x00001e44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001e44": "update_data_bits_00001e44",
                "iVar1": "shifted_index",
                "param_1": "index",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "additional_data": {
                "FUM_00001e44": {
                    "write_map_with_value": 1
                },
                "FUN_00001e0c": {
                    "calculate_checksum": 1,
                    "calculate_value": 1,
                    "get_ctx_value": 1,
                    "get_value_from_map": 1,
                    "process_data": 1,
                    "retrieve_value": 1
                },
                "FUN_00001e44": {
                    "store_value": 1,
                    "write_ctx_value": 1,
                    "write_data": 1,
                    "write_to_map": 1,
                    "write_value_to_map": 1
                },
                "FUN_00001ec4": {
                    "map_data_writer": 1,
                    "map_write": 1,
                    "write_and_map_context": 1,
                    "write_context_to_map": 12,
                    "write_ctx_to_map": 3,
                    "write_data_to_map": 1,
                    "write_map_and_get_ctx": 2,
                    "write_map_to_context": 2,
                    "write_map_to_ctx": 3,
                    "write_map_using_ctx": 1,
                    "write_map_wrapper": 1,
                    "write_mapped_context": 3
                },
                "param_1": {
                    "arg1": 6,
                    "arg_1": 1,
                    "context": 1,
                    "context_param": 2,
                    "ctx1": 1,
                    "ctx_param": 6,
                    "ctx_param1": 2,
                    "ctx_param_1": 5,
                    "device_id": 1,
                    "first_parameter": 1,
                    "input1": 1,
                    "input_1": 1,
                    "input_param": 1,
                    "input_param_1": 2
                },
                "param_2": {
                    "arg2": 6,
                    "arg_2": 1,
                    "ctx2": 1,
                    "ctx_param2": 2,
                    "ctx_param_2": 5,
                    "data": 1,
                    "input2": 1,
                    "input_2": 1,
                    "input_param_2": 2,
                    "map_param": 3,
                    "map_param_1": 1,
                    "output_param": 1,
                    "register": 1,
                    "second_parameter": 1,
                    "value_param": 2,
                    "write_param": 2
                },
                "param_3": {
                    "ctx_param_3": 1,
                    "value": 1,
                    "value_param": 1
                },
                "uVar1": {
                    "context": 6,
                    "context_value": 4,
                    "context_var": 1,
                    "ctx": 5,
                    "ctx_result": 1,
                    "ctx_value": 9,
                    "map_param_2": 1
                }
            },
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "calling": [
                "FUN_00001f80"
            ],
            "code": "\nvoid write_map_to_context_00001ec4(undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 ctx_value;\n  \n  ctx_value = get_ctx(arg1,arg2);\n  write_map(arg1,arg2,ctx_value);\n  return;\n}\n\n",
            "current_name": "write_map_to_context_00001ec4",
            "entrypoint": "0x00001ec4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001ec4": "write_map_to_context_00001ec4",
                "param_1": "arg1",
                "param_2": "arg2",
                "uVar1": "ctx_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001eea": {
            "additional_data": {
                "FUN_00001d5e": {
                    "get_pin_number": 1,
                    "pin_num": 2
                },
                "FUN_00001d80": {
                    "get_gpio_port": 1,
                    "gpio": 1,
                    "pin_num2": 1
                },
                "FUN_00001dc0": {
                    "modify_pin_number": 1,
                    "port": 1,
                    "transform_pin": 1
                },
                "FUN_00001eea": {
                    "configure_gpio": 1,
                    "configure_gpio_pin": 2,
                    "configure_gpio_port": 1,
                    "configure_pin": 3,
                    "initialize_gpio": 2,
                    "initialize_gpio_port": 2,
                    "initialize_pin": 2,
                    "initialize_port": 3,
                    "set_gpio_pin": 2,
                    "set_gpio_pin_mode": 1,
                    "set_gpio_pin_state": 1,
                    "set_gpio_state": 1,
                    "set_pin": 1,
                    "set_pin_mode": 1,
                    "set_pin_state": 5,
                    "set_pin_value": 1,
                    "set_port_pin_state": 1,
                    "update_pin_status": 1
                },
                "FUN_00001f80": {
                    "gpio": 1,
                    "gpio_init_port": 1,
                    "set_gpio_port": 1
                },
                "gpio": {
                    "get_gpio": 3
                },
                "gpio_init_port": {
                    "initialize_gpio": 1,
                    "initialize_gpio_port": 1,
                    "initialize_port": 1
                },
                "iVar2": {
                    "gpio_addr": 3,
                    "gpio_address": 6,
                    "gpio_base": 1,
                    "gpio_handle": 3,
                    "gpio_handler": 1,
                    "gpio_instance": 2,
                    "gpio_port": 4,
                    "gpio_ptr": 5,
                    "gpio_reg": 2,
                    "gpio_register": 2,
                    "gpio_value": 2
                },
                "iVar3": {
                    "pin_index": 5,
                    "pin_num": 4,
                    "pin_num2": 1,
                    "pin_num_addr": 1,
                    "pin_num_in_port": 1,
                    "pin_num_register": 1,
                    "pin_num_temp": 1,
                    "pin_number": 3,
                    "pin_number2": 1,
                    "pin_number_2": 2,
                    "pin_number_index": 1,
                    "pin_number_local": 1,
                    "pin_number_offset": 1,
                    "pin_number_to_offset": 1,
                    "pin_offset": 4,
                    "port_instance": 1,
                    "port_pin_num": 1,
                    "port_ptr": 1
                },
                "param_1": {
                    "port": 7,
                    "port_address": 2,
                    "port_handle": 1,
                    "port_id": 9,
                    "port_name": 1,
                    "port_num": 4,
                    "port_number": 6,
                    "port_pin": 1
                },
                "param_2": {
                    "byte_val": 1,
                    "pin_configuration": 1,
                    "pin_data": 2,
                    "pin_state": 14,
                    "pin_status": 1,
                    "pin_value": 6,
                    "state": 5,
                    "value": 1
                },
                "pin_num": {
                    "get_pin_number": 3
                },
                "port": {
                    "get_port": 3
                },
                "uVar1": {
                    "pin_index": 1,
                    "pin_num": 3,
                    "pin_number": 25
                }
            },
            "called": [
                "FUN_00001d5e",
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "calling": [
                "FUN_00000e64"
            ],
            "code": "\nundefined4 set_gpio_pin_state_00001eea(undefined2 port_id,byte pin_state)\n\n{\n  uint pin_number;\n  int gpio_address;\n  int pin_index;\n  \n  initialize_gpio_port(port_id,0);\n  if ((char)pin_state < '\\0') {\n    pin_number = get_pin_number(port_id);\n    gpio_address = get_gpio(port_id);\n    *(uint *)(gpio_address + 0x14) = *(uint *)(gpio_address + 0x14) | 1 << (pin_number & 0xff);\n  }\n  else {\n    pin_number = get_pin_number(port_id);\n    gpio_address = get_gpio(port_id);\n    *(uint *)(gpio_address + 0x14) = *(uint *)(gpio_address + 0x14) & ~(1 << (pin_number & 0xff));\n  }\n  gpio_address = get_port(port_id);\n  pin_index = get_pin_number(port_id);\n  *(uint *)(gpio_address + pin_index * 4) = pin_state & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "current_name": "set_gpio_pin_state_00001eea",
            "entrypoint": "0x00001eea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001eea": "set_gpio_pin_state_00001eea",
                "gpio": "get_gpio",
                "gpio_init_port": "initialize_gpio_port",
                "iVar2": "gpio_address",
                "iVar3": "pin_index",
                "param_1": "port_id",
                "param_2": "pin_state",
                "pin_num": "get_pin_number",
                "port": "get_port",
                "uVar1": "pin_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001f80": {
            "additional_data": {
                "FUN_00001d5e": {
                    "extract_value": 1,
                    "get_original_value": 1
                },
                "FUN_00001da2": {
                    "reverse_bits": 1,
                    "reverse_value": 1
                },
                "FUN_00001dc0": {
                    "shift_value": 1,
                    "toggle_bits": 1
                },
                "FUN_00001ddc": {
                    "configure_pin": 1,
                    "disable_interrupt": 1
                },
                "FUN_00001ec4": {
                    "set_context": 1,
                    "set_pin_value": 1
                },
                "FUN_00001f80": {
                    "update_gpio_pin_value": 1,
                    "update_pin": 5,
                    "update_pin_value": 25
                },
                "clk_en": {
                    "enable_clock": 5
                },
                "ctx_clear": {
                    "clear_context": 5
                },
                "iVar1": {
                    "port1": 1,
                    "port_addr": 3,
                    "port_address": 17,
                    "port_identifier": 1,
                    "port_index": 4
                },
                "iVar2": {
                    "pin_index": 6,
                    "pin_num": 3,
                    "pin_number": 15,
                    "pin_offset": 1,
                    "port2": 1
                },
                "param_1": {
                    "config": 2,
                    "device": 7,
                    "gpio_config": 1,
                    "new_value": 1,
                    "param": 3,
                    "pin": 1,
                    "pin_address": 1,
                    "pin_config": 10,
                    "pin_controller": 1,
                    "pin_identifier": 1,
                    "pin_info": 3
                },
                "param_2": {
                    "new_pin_value": 3,
                    "new_state": 1,
                    "new_value": 19,
                    "value": 7
                },
                "pin_num": {
                    "get_pin_num": 1,
                    "get_pin_number": 4
                },
                "port": {
                    "get_port": 5
                },
                "uVar3": {
                    "cleared_port_number": 1,
                    "port_num": 5,
                    "port_number": 25
                },
                "uVar4": {
                    "clear_pin": 1,
                    "clear_pin_number": 1,
                    "cleared_pin_number": 2,
                    "pin_num": 4,
                    "pin_num2": 2,
                    "pin_num_2": 1,
                    "pin_number": 11,
                    "pin_number2": 9
                },
                "uVar5": {
                    "current_pin_value": 2,
                    "current_value": 6,
                    "existing_value": 1,
                    "old_pin_value": 1,
                    "old_value": 7,
                    "original_value": 4,
                    "pin_value": 3,
                    "prev_value": 1,
                    "previous_pin_value": 1,
                    "previous_value": 5
                }
            },
            "called": [
                "FUN_00001d5e",
                "FUN_00001ddc",
                "FUN_00001da2",
                "FUN_00001ec4",
                "FUN_00001dc0"
            ],
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "code": "\nvoid update_gpio_pin_value_00001f80(undefined2 pin_config,undefined4 new_value)\n\n{\n  int port_address;\n  int pin_number;\n  undefined4 port_number;\n  undefined4 pin_number;\n  uint old_value;\n  \n  enable_clock(pin_config);\n  port_address = get_port(pin_config);\n  pin_number = get_pin_number(pin_config);\n  old_value = *(uint *)(port_address + pin_number * 4);\n  port_address = get_port(pin_config);\n  pin_number = get_pin_number(pin_config);\n  *(undefined4 *)(port_address + pin_number * 4) = new_value;\n  if ((old_value & 0xf0000) != 0) {\n    port_number = get_port_num(pin_config);\n    pin_number = get_pin_number(pin_config);\n    clear_context(port_number,pin_number);\n  }\n  return;\n}\n\n",
            "current_name": "update_gpio_pin_value_00001f80",
            "entrypoint": "0x00001f80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001f80": "update_gpio_pin_value_00001f80",
                "clk_en": "enable_clock",
                "ctx_clear": "clear_context",
                "iVar1": "port_address",
                "iVar2": "pin_number",
                "param_1": "pin_config",
                "param_2": "new_value",
                "pin_num": "get_pin_number",
                "port": "get_port",
                "uVar3": "port_number",
                "uVar4": "pin_number",
                "uVar5": "old_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "additional_data": {
                "FUN_00001ff6": {
                    "configure_pin": 2,
                    "initialize_gpio_pin": 1,
                    "set_gpio_bit": 1,
                    "set_gpio_pin": 6,
                    "set_gpio_pin_high": 2,
                    "set_gpio_pin_to_high": 1,
                    "set_pin": 4,
                    "set_pin_as_output": 1,
                    "set_pin_bit": 1,
                    "set_pin_high": 7,
                    "set_pin_state": 1,
                    "set_pin_to_high": 1,
                    "set_pin_value": 3
                },
                "gpio": {
                    "get_gpio_address": 1,
                    "get_gpio_port": 1
                },
                "iVar2": {
                    "gpio": 1,
                    "gpio_addr": 1,
                    "gpio_address": 17,
                    "gpio_base": 1,
                    "gpio_handle": 2,
                    "gpio_offset": 1,
                    "gpio_port_address": 1,
                    "gpio_ptr": 2,
                    "gpio_result": 4,
                    "gpio_var": 1
                },
                "param_1": {
                    "pin": 8,
                    "pin_num": 3,
                    "pin_number": 20
                },
                "pin_num": {
                    "convert_to_pin_num": 1,
                    "get_pin_number": 1
                },
                "uVar1": {
                    "converted_pin": 2,
                    "converted_pin_number": 1,
                    "mapped_pin": 1,
                    "pin": 3,
                    "pin_code": 1,
                    "pin_converted": 1,
                    "pin_mapped": 1,
                    "pin_mask": 11,
                    "pin_num": 2,
                    "pin_number": 6,
                    "pin_number_shifted": 1,
                    "pin_value": 1
                }
            },
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "calling": [
                "FUN_00000e64"
            ],
            "code": "\nvoid set_gpio_pin_to_high_00001ff6(undefined2 pin_number)\n\n{\n  uint pin_mask;\n  int gpio_address;\n  \n  pin_mask = get_pin_number(pin_number);\n  gpio_address = get_gpio_port(pin_number);\n  *(int *)(gpio_address + 4) = 1 << (pin_mask & 0xff);\n  return;\n}\n\n",
            "current_name": "set_gpio_pin_to_high_00001ff6",
            "entrypoint": "0x00001ff6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00001ff6": "set_gpio_pin_to_high_00001ff6",
                "gpio": "get_gpio_port",
                "iVar2": "gpio_address",
                "param_1": "pin_number",
                "pin_num": "get_pin_number",
                "uVar1": "pin_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002028": {
            "additional_data": {
                "FUN_00002028": {
                    "find_and_execute_valid_functions": 1,
                    "process_and_execute_functions": 1,
                    "process_bits": 1,
                    "process_bits_and_call_function": 1,
                    "process_bits_and_call_functions": 1,
                    "process_bits_and_execute_function": 1,
                    "process_bits_and_yield_results": 1,
                    "process_data": 16,
                    "process_data_and_yield": 1,
                    "process_data_and_yield_results": 1,
                    "process_flags_and_call": 1,
                    "process_flags_and_call_functions": 1,
                    "process_flags_and_execute": 1,
                    "process_flags_and_execute_actions": 1,
                    "process_flags_and_execute_function": 1
                },
                "F_UN_00002028": {
                    "extract_and_execute_operations": 1
                },
                "check_data_and_yield_00001cf0": {
                    "check_data_and_yield": 1
                },
                "extract_bits_from_data_00001e0c": {
                    "extract_bits_from_data": 1
                },
                "get_ctx": {
                    "get_context": 1
                },
                "iVar1": {
                    "context": 3,
                    "context_id": 1,
                    "context_index": 11,
                    "context_result": 1,
                    "context_value": 2,
                    "ctx": 1,
                    "ctx_idx": 1,
                    "ctx_index": 7,
                    "ctx_result": 3,
                    "index": 1
                },
                "local_c": {
                    "bit_idx": 1,
                    "bit_index": 23,
                    "bit_offset": 3,
                    "bit_position": 2,
                    "counter": 1,
                    "index": 1
                },
                "param_1": {
                    "address": 1,
                    "base_address": 2,
                    "context_address": 1,
                    "data": 1,
                    "data_address": 5,
                    "data_offset": 3,
                    "data_pointer": 3,
                    "data_ptr": 9,
                    "function_data": 1,
                    "input_address": 1,
                    "input_data": 4
                },
                "param_2": {
                    "additional_parameter": 2,
                    "context": 17,
                    "context_data": 1,
                    "context_param": 1,
                    "ctx": 2,
                    "ctx_param": 2,
                    "ctx_ptr": 3,
                    "param": 2,
                    "param_value": 1
                },
                "uVar2": {
                    "bit_mask": 8,
                    "bitfield": 1,
                    "bitmask": 5,
                    "bits": 1,
                    "bits_data": 1,
                    "bits_from_data": 1,
                    "data_flags": 1,
                    "data_value": 1,
                    "flag": 2,
                    "flag_bits": 1,
                    "flags": 5,
                    "mask": 4
                }
            },
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "calling": [
                "FUN_000020f4",
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020e0"
            ],
            "code": "\nvoid process_data_and_yield_results_00002028(int data_ptr,undefined4 context)\n\n{\n  int context_index;\n  uint bit_mask;\n  uint bit_index;\n  \n  bit_mask = *(uint *)(data_ptr + 0xa0);\n  for (bit_index = 0; (int)bit_index < 0x20; bit_index = bit_index + 1) {\n    if (((bit_mask & 1 << (bit_index & 0xff)) != 0) &&\n       ((*(uint *)(data_ptr + bit_index * 4) & 0xf0000) != 0)) {\n      *(int *)(data_ptr + 0xa0) = 1 << (bit_index & 0xff);\n      context_index = get_context(context,bit_index);\n      (**(code **)(&DAT_1fff0b78 + context_index * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + context_index * 0xc));\n    }\n  }\n  check_data_and_yield();\n  return;\n}\n\n",
            "current_name": "process_data_and_yield_results_00002028",
            "entrypoint": "0x00002028",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002028": "process_data_and_yield_results_00002028",
                "check_data_and_yield_00001cf0": "check_data_and_yield",
                "get_ctx": "get_context",
                "iVar1": "context_index",
                "local_c": "bit_index",
                "param_1": "data_ptr",
                "param_2": "context",
                "uVar2": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000020b8": {
            "additional_data": {
                "0x40049000": {
                    "device_address": 1,
                    "irq_address": 1,
                    "irq_device_address": 1
                },
                "FUN_00002028": {
                    "call_function": 1,
                    "call_sub_function1": 1,
                    "configure_irq_handler": 1,
                    "execute_action": 1,
                    "execute_function": 1,
                    "handle_interrupt": 1,
                    "handle_irq": 9,
                    "invoke_irq_handler": 1,
                    "invoke_sub_function": 1,
                    "irq_handler": 2,
                    "set_interrupt_handler": 2,
                    "set_irq_handler": 2
                },
                "FUN_000020b8": {
                    "configure_interrupts": 1,
                    "disable_interrupt": 2,
                    "disable_interrupts": 4,
                    "disable_irq": 1,
                    "disable_irq_handler": 14,
                    "initialize_interrupt": 2,
                    "initialize_interrupt_handler": 1,
                    "initialize_irq": 3,
                    "initialize_irq_handler": 3
                },
                "PTR_40049000": {
                    "irq_address": 1
                },
                "irq_handler": {
                    "handle_interrupt": 1,
                    "handle_interrupts": 1
                },
                "param_1": {
                    "action_param": 1,
                    "base_address": 1,
                    "device_address": 3,
                    "handler_address": 1,
                    "input_param": 1,
                    "interrupt_id": 1,
                    "irq": 1,
                    "irq_address": 4,
                    "irq_controller_address": 1,
                    "irq_handler_param": 1,
                    "irq_num": 3,
                    "irq_number": 6,
                    "irq_register": 1,
                    "param1": 1
                },
                "param_2": {
                    "data": 2,
                    "extra_data": 1,
                    "flags": 1,
                    "irq_data": 2,
                    "irq_flags": 1,
                    "irq_handler_param2": 1,
                    "irq_status": 1,
                    "irq_value": 1,
                    "mode": 1,
                    "param": 3,
                    "param2": 2,
                    "param_2": 3,
                    "parameter": 1,
                    "undefined_param": 1,
                    "unused": 2,
                    "unused_param": 2
                },
                "undefined4": {
                    "unused_parameter": 1
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid disable_irq_handler_000020b8(void)\n\n{\n  handle_interrupts(0x40049000,0);\n  return;\n}\n\n",
            "current_name": "disable_irq_handler_000020b8",
            "entrypoint": "0x000020b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000020b8": "disable_irq_handler_000020b8",
                "irq_handler": "handle_interrupts"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000020cc": {
            "additional_data": {
                "0x4004a000": {
                    "device_address": 1
                },
                "FUN_00002028": {
                    "call_interrupt_handler": 1,
                    "configure_irq_handler": 1,
                    "execute_sub_function": 1,
                    "handle_interrupt": 2,
                    "handle_interrupts": 1,
                    "handle_irq": 11,
                    "irq_handler": 4,
                    "perform_action": 1,
                    "perform_operation": 1,
                    "process_interrupt": 1,
                    "set_interrupt_handler": 1,
                    "set_interrupt_params": 2,
                    "set_irq_handler_parameter": 1,
                    "set_irq_handler_params": 1,
                    "set_irq_params": 1,
                    "set_up_irq_handler": 1
                },
                "FUN_000020cc": {
                    "configure_irq_handler": 1,
                    "initialize_hardware_interrupt": 1,
                    "initialize_interrupt": 2,
                    "initialize_interrupt_handler": 2,
                    "initialize_interrupts": 3,
                    "initialize_irq": 4,
                    "initialize_irq_handler": 18
                },
                "PTR_004a000": {
                    "irq_base_address": 1
                },
                "PTR_0x4004a000": {
                    "irq_base_address": 1
                },
                "irqHandler": {
                    "irq_handler": 1
                },
                "irqNumber": {
                    "irq_number": 1
                },
                "param_1": {
                    "arg1": 1,
                    "handler_address": 1,
                    "handler_argument": 1,
                    "input_param": 2,
                    "interrupt_address": 1,
                    "interrupt_channel": 1,
                    "interrupt_code": 1,
                    "interrupt_number": 1,
                    "interrupt_type": 2,
                    "irq_address": 1,
                    "irq_base_address": 1,
                    "irq_handler_param1": 1,
                    "irq_num": 2,
                    "irq_number": 9
                },
                "param_2": {
                    "arg2": 1,
                    "config_param": 1,
                    "data_param": 1,
                    "extra_argument": 1,
                    "flag": 1,
                    "handler_function": 1,
                    "handler_type": 1,
                    "interrupt_data": 1,
                    "interrupt_flag": 2,
                    "interrupt_type": 2,
                    "irq_config": 2,
                    "irq_data": 2,
                    "irq_enabled": 1,
                    "irq_flags": 1,
                    "irq_handler": 1,
                    "irq_handler_param2": 1,
                    "irq_mode": 1,
                    "irq_priority": 1,
                    "irq_status": 1,
                    "param": 2
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid initialize_irq_handler_000020cc(void)\n\n{\n  irq_handler(0x4004a000,1);\n  return;\n}\n\n",
            "current_name": "initialize_irq_handler_000020cc",
            "entrypoint": "0x000020cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000020cc": "initialize_irq_handler_000020cc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000020e0": {
            "additional_data": {
                "FUN_00002028": {
                    "call_irq_handler": 1,
                    "call_sub_function": 1,
                    "configure_device": 1,
                    "configure_irq_handler": 2,
                    "handle_irq": 8,
                    "irq_handler": 1,
                    "perform_action": 1,
                    "process_irq": 1,
                    "set_irq_handler": 1,
                    "update_irq_handler": 1
                },
                "FUN_000020e0": {
                    "initialize_device": 1,
                    "initialize_external_device": 1,
                    "initialize_interrupt": 3,
                    "initialize_irq": 5,
                    "initialize_irq_handler": 21
                },
                "irq_handler": {
                    "handle_irq": 1
                },
                "param_1": {
                    "base_address": 1,
                    "data": 1,
                    "device_address": 2,
                    "device_id": 1,
                    "handle": 1,
                    "handler_address": 1,
                    "input_value": 1,
                    "irq_address": 5,
                    "irq_handler_address": 1,
                    "irq_num": 1,
                    "irq_number": 6,
                    "irq_parameter1": 1,
                    "irq_type": 4,
                    "memory_address": 1
                },
                "param_2": {
                    "config_data": 1,
                    "control": 1,
                    "data_value": 1,
                    "device_mode": 1,
                    "flag": 1,
                    "flags": 1,
                    "handler": 1,
                    "handler_priority": 1,
                    "interrupt_level": 1,
                    "interrupt_type": 1,
                    "irq_data": 3,
                    "irq_handler": 1,
                    "irq_level": 2,
                    "irq_mode": 1,
                    "irq_number": 2,
                    "irq_parameter2": 1,
                    "irq_priority": 4,
                    "irq_type": 2,
                    "irq_value": 1
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid initialize_irq_handler_000020e0(void)\n\n{\n  handle_irq(0x4004b000,2);\n  return;\n}\n\n",
            "current_name": "initialize_irq_handler_000020e0",
            "entrypoint": "0x000020e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000020e0": "initialize_irq_handler_000020e0",
                "irq_handler": "handle_irq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000020f4": {
            "additional_data": {
                "FUN_00002028": {
                    "execute_sub_function": 1,
                    "handle_irq": 10,
                    "irq_handler": 1,
                    "process_irq_handler": 1,
                    "set_irq_configuration": 1,
                    "set_irq_handler": 1,
                    "setup_irq_handler": 1
                },
                "FUN_000020f4": {
                    "initialize_interrupt": 1,
                    "initialize_interrupt_handler": 1,
                    "initialize_irq": 2,
                    "initialize_irq_handler": 25,
                    "setup_irq_handler": 2
                },
                "PTR_4004c000": {
                    "irq_controller_base": 1
                },
                "int": {
                    "handler_specs": 1
                },
                "irq_handler": {
                    "handle_irq": 1,
                    "irq_handler": 1,
                    "perform_irq_handling": 1
                },
                "param_1": {
                    "arg1": 1,
                    "base_address": 1,
                    "device_addr": 1,
                    "device_address": 7,
                    "handler_address": 1,
                    "handler_specs": 1,
                    "input_param": 1,
                    "input_param1": 1,
                    "interrupt_number": 1,
                    "irq_address": 2,
                    "irq_base_address": 1,
                    "irq_num": 2,
                    "irq_number": 7,
                    "irq_value": 1,
                    "memory_address": 1,
                    "register_address": 1
                },
                "param_2": {
                    "arg2": 1,
                    "handler_address": 2,
                    "handler_data": 1,
                    "handler_function": 1,
                    "handler_id": 1,
                    "handler_priority": 1,
                    "input_param2": 1,
                    "interrupt_level": 1,
                    "interrupt_mode": 1,
                    "interrupt_number": 1,
                    "irq_data": 3,
                    "irq_handler": 1,
                    "irq_handler_type": 1,
                    "irq_line_number": 1,
                    "irq_number": 6,
                    "irq_type": 1,
                    "irq_value": 1,
                    "num_of_handlers": 1,
                    "param": 1,
                    "parameter": 1,
                    "unused": 1,
                    "unused_param": 1
                },
                "undefined4": {
                    "unused": 1
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid initialize_irq_handler_000020f4(void)\n\n{\n  perform_irq_handling(0x4004c000,3);\n  return;\n}\n\n",
            "current_name": "initialize_irq_handler_000020f4",
            "entrypoint": "0x000020f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000020f4": "initialize_irq_handler_000020f4",
                "irq_handler": "perform_irq_handling"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002108": {
            "additional_data": {
                "0x4004d000": {
                    "irq_controller_address": 1
                },
                "FUN_00002028": {
                    "configure_interrupt": 1,
                    "configure_irq": 1,
                    "configure_irq_handler": 1,
                    "handle_interrupt": 3,
                    "handle_irq": 9,
                    "irq_handler": 1,
                    "process_data": 1,
                    "set_interrupt_flags": 1,
                    "set_irq_handler": 1,
                    "set_irq_parameter": 1
                },
                "FUN_00002108": {
                    "configure_interrupt": 1,
                    "initialize_interrupt": 2,
                    "initialize_interrupts": 1,
                    "initialize_irq": 2,
                    "initialize_irq_handler": 25
                },
                "param_1": {
                    "address": 1,
                    "data_buffer": 1,
                    "device_address": 7,
                    "handler_address": 3,
                    "interrupt_number": 1,
                    "interrupt_source": 1,
                    "irq_address": 5,
                    "irq_number": 9
                },
                "param_2": {
                    "data": 1,
                    "data_length": 1,
                    "flag": 1,
                    "handler_mode": 1,
                    "handler_number": 1,
                    "handler_size": 1,
                    "interrupt_data": 1,
                    "interrupt_flags": 1,
                    "interrupt_type": 2,
                    "irq_data": 7,
                    "irq_handler": 1,
                    "irq_handler_data": 1,
                    "irq_handler_id": 1,
                    "irq_number": 3,
                    "irq_parameter": 1,
                    "irq_value": 2,
                    "number_of_handlers": 1,
                    "size": 1
                },
                "undefined4": {
                    "some_data": 1
                }
            },
            "called": [
                "FUN_00002028"
            ],
            "calling": [],
            "code": "\nvoid initialize_irq_handler_00002108(void)\n\n{\n  irq_handler(0x4004d000,4);\n  return;\n}\n\n",
            "current_name": "initialize_irq_handler_00002108",
            "entrypoint": "0x00002108",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002108": "initialize_irq_handler_00002108"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000211c": {
            "additional_data": {
                "0x200": {
                    "constant_value": 1
                },
                "DAT_000070b8": {
                    "header1": 3,
                    "header_str": 1,
                    "pid": 1,
                    "pid_format_string": 1,
                    "pid_header": 1,
                    "pid_label": 1,
                    "pid_string": 1,
                    "process_id": 2,
                    "thread_state": 1
                },
                "DAT_00007190": {
                    "dash": 1,
                    "header2": 3,
                    "prompt_symbol": 1,
                    "separator": 1,
                    "space": 1,
                    "stack_used_label": 1,
                    "state_string": 1,
                    "string1": 1
                },
                "DAT_00007194": {
                    "header3": 3,
                    "isr_stack": 1,
                    "stack_base_addr_label": 1,
                    "stack_string": 1,
                    "state_header": 1,
                    "string2": 1,
                    "thread_state": 1,
                    "thread_state_prompt": 1
                },
                "DAT_1fff0200": {
                    "elf_data_array": 1
                },
                "DAT_1fff0358": {
                    "elf_array": 1,
                    "elf_rel_array": 1,
                    "task_info_array": 1,
                    "thread_array": 1,
                    "thread_data_array": 3,
                    "thread_ptr_arr": 1
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "array_relocation_offsets": 1,
                    "elf_rel_array": 1,
                    "elf_rel_offset_array": 1,
                    "offset_arr": 1,
                    "offset_array": 1,
                    "rel_array": 3,
                    "relocation_table": 1,
                    "task_rel_array": 1
                },
                "FUN_000008b8": {
                    "function_c": 1,
                    "sub_function3": 2,
                    "thread_isr_stack_usage": 1,
                    "thread_measure_stack_free": 1
                },
                "FUN_00000900": {
                    "function_d": 1,
                    "sub_function4": 2,
                    "thread_isr_stack_start": 2
                },
                "FUN_0000091c": {
                    "function_b": 1,
                    "get_elf_rel_size": 1,
                    "sub_function2": 2,
                    "thread_isr_stack_usage": 1
                },
                "FUN_000010a0": {
                    "function_e": 1,
                    "sub_function5": 2,
                    "thread_isr_stack_pointer": 1,
                    "thread_measure_stack_free": 1
                },
                "FUN_0000211c": {
                    "display_thread_info": 1,
                    "print_thread_info": 8,
                    "print_thread_information": 6,
                    "print_thread_stack_info": 6,
                    "print_thread_stack_information": 1,
                    "print_thread_stack_statistics": 1,
                    "print_thread_stack_usage": 5,
                    "print_thread_status": 3
                },
                "FUN_00004c84": {
                    "function_a": 1,
                    "print_header": 1,
                    "print_line": 1,
                    "sub_function1": 2
                },
                "byte": {
                    "byte_value": 1
                },
                "iVar1": {
                    "stack_free": 4
                },
                "iprintf": {
                    "print": 1,
                    "print_formatted": 6,
                    "print_formatted_output": 8,
                    "print_formatted_string": 1
                },
                "local_14": {
                    "base_usage": 1,
                    "current_stack_usage": 2,
                    "max_stack_usage": 1,
                    "stack_frame_size": 1,
                    "temp_stack_used": 1,
                    "thread_stack_size": 1,
                    "thread_stack_usage": 1,
                    "total_stack": 1,
                    "total_stack_allocation": 1,
                    "total_stack_size": 2,
                    "total_stack_size_used": 1,
                    "total_stack_usage": 2,
                    "total_stack_usage_with_header": 1,
                    "total_stack_used": 1,
                    "total_thread_stack_size": 2,
                    "total_thread_usage": 1,
                    "total_usage": 2,
                    "total_used_stack": 1,
                    "used_stack_size": 2
                },
                "local_18": {
                    "total_diff": 1,
                    "total_free_stack": 1,
                    "total_isr_stack_usage": 1,
                    "total_stack_free": 2,
                    "total_stack_indicator": 1,
                    "total_stack_overflow": 1,
                    "total_stack_size": 6,
                    "total_stack_usage": 10,
                    "total_stack_used": 2,
                    "total_thread_stack_usage": 2,
                    "total_thread_usage": 1,
                    "total_usage": 2,
                    "total_used_stack_size": 1
                },
                "local_1a": {
                    "index": 1,
                    "task_index": 1,
                    "thread_index": 28,
                    "thread_number": 1
                },
                "local_20": {
                    "isr_stack_size": 2,
                    "isr_stack_usage": 4,
                    "stack_usage": 2,
                    "stack_used": 1,
                    "total_stack": 1,
                    "total_stack_size": 6,
                    "total_stack_usage": 12,
                    "total_thread_stack_size": 1,
                    "total_usage": 1,
                    "used_stack": 1
                },
                "local_24": {
                    "current": 1,
                    "isr_stack_start": 1,
                    "stack_pointer": 4,
                    "stack_ptr": 1,
                    "stack_start": 20,
                    "stack_start_addr": 1,
                    "stack_start_address": 1,
                    "thread_stack_size_start": 1,
                    "thread_stack_start": 1
                },
                "local_28": {
                    "base": 1,
                    "isr_stack_pointer": 1,
                    "stack_pointer": 18,
                    "stack_ptr": 4,
                    "stack_start": 4,
                    "start_address": 1,
                    "thread_stack_pointer": 2
                },
                "local_2c": {
                    "current_entry": 1,
                    "current_ptr": 1,
                    "current_stack": 1,
                    "current_thread": 4,
                    "elf_rel": 1,
                    "ptr": 2,
                    "task_info": 1,
                    "thread": 3,
                    "thread_control_block": 1,
                    "thread_data": 5,
                    "thread_data_ptr": 1,
                    "thread_info": 2,
                    "thread_pointer": 3,
                    "thread_ptr": 2,
                    "thread_struct_ptr": 1,
                    "thread_variable": 1
                },
                "local_30": {
                    "byte_value": 1,
                    "elf_section_index": 1,
                    "entry_num": 1,
                    "index": 12,
                    "priority_value": 1,
                    "queue": 1,
                    "queue_size": 1,
                    "queue_status": 1,
                    "rel_index": 4,
                    "stack_offset": 1,
                    "state_priority": 1,
                    "task_priority": 1,
                    "temp3": 1,
                    "thread_index": 1,
                    "thread_priority": 2,
                    "thread_state": 1
                },
                "local_34": {
                    "address": 1,
                    "base_addr": 3,
                    "base_address": 7,
                    "current_address": 1,
                    "current_stack_position": 1,
                    "elf_offset": 1,
                    "elf_rel_offset": 1,
                    "function_addr": 1,
                    "function_address": 1,
                    "offset": 2,
                    "priority": 1,
                    "q_value": 1,
                    "r_offset": 3,
                    "rel_offset": 4,
                    "stack_size": 1,
                    "temp2": 1,
                    "thread_state": 1
                },
                "local_38": {
                    "flag": 1,
                    "indent": 1,
                    "is_relocation": 1,
                    "name_length": 1,
                    "name_offset": 2,
                    "priority": 6,
                    "q_flag": 1,
                    "queue_type": 1,
                    "stack_flag": 3,
                    "stack_indicator": 1,
                    "stack_is_overflowed": 1,
                    "stack_offset": 2,
                    "stack_state": 1,
                    "stack_usage_string": 1,
                    "state": 1,
                    "state_char": 1,
                    "state_string": 1,
                    "temp1": 1,
                    "thread_priority": 1,
                    "thread_state": 2,
                    "thread_status": 1
                },
                "local_3c": {
                    "stack_diff": 2,
                    "stack_offset": 1,
                    "stack_size": 16,
                    "stack_usage": 9,
                    "thread_priority": 1,
                    "thread_stack_size": 1,
                    "thread_stack_usage": 1
                },
                "local_40": {
                    "current_state": 1,
                    "delimiter": 2,
                    "fmt_state": 1,
                    "header": 2,
                    "isr_stack_header": 1,
                    "local_string": 1,
                    "local_thread_id": 1,
                    "message": 1,
                    "pid": 2,
                    "space_padding": 1,
                    "state": 5,
                    "state_code": 1,
                    "state_name": 1,
                    "task_name": 1,
                    "thread_info_header": 1,
                    "thread_name": 7,
                    "thread_state": 1,
                    "title": 1
                },
                "param_1": {
                    "thread_count": 1,
                    "thread_info_array": 1
                },
                "printThreadStackUsage": {
                    "get_thread_stack_usage": 1
                },
                "thread_isr_stack_pointer": {
                    "get_isr_stack_pointer": 7,
                    "get_isr_stack_ptr": 1,
                    "get_stack_pointer": 1,
                    "get_thread_isr_stack_pointer": 3
                },
                "thread_isr_stack_start": {
                    "get_isr_stack_start": 7,
                    "get_isr_stack_start_addr": 1,
                    "get_stack_start": 1,
                    "get_thread_isr_stack_start": 3
                },
                "thread_isr_stack_usage": {
                    "get_isr_stack_usage": 7,
                    "get_thread_isr_stack_usage": 3,
                    "get_total_stack_usage": 1,
                    "measure_isr_stack_usage": 1
                },
                "thread_measure_stack_free": {
                    "get_stack_free_space": 1,
                    "measure_stack_free": 10
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_0000091c",
                "FUN_000008b8",
                "FUN_00000900",
                "FUN_000010a0"
            ],
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "code": "\nvoid print_thread_stack_info_0000211c(void)\n\n{\n  int stack_free;\n  undefined2 thread_name;\n  int stack_size;\n  int priority;\n  dword base_address;\n  uint index;\n  undefined4 *thread_data;\n  undefined4 stack_pointer;\n  undefined4 stack_start;\n  int total_stack_usage;\n  short thread_index;\n  int total_stack_usage;\n  int current_stack_usage;\n  \n  thread_name = 0x515f;\n  current_stack_usage = 0;\n  total_stack_usage = 0;\n  print_formatted_output(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",&DAT_000070b8,\n          \"state\");\n  total_stack_usage = get_isr_stack_usage();\n  stack_start = get_isr_stack_start();\n  stack_pointer = get_isr_stack_pointer();\n  print_formatted_output(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n          total_stack_usage,stack_start,stack_pointer);\n  current_stack_usage = current_stack_usage + 0x200;\n  if (0 < total_stack_usage) {\n    total_stack_usage = total_stack_usage + total_stack_usage;\n  }\n  for (thread_index = 1; thread_index < 0x21; thread_index = thread_index + 1) {\n    thread_data = *(undefined4 **)(&DAT_1fff0358 + thread_index * 4);\n    if (thread_data != (undefined4 *)0x0) {\n      index = (uint)*(byte_value *)(thread_data + 1);\n      base_address = (&rel_array[4].r_offset)[index];\n      priority = (int)&thread_name + (uint)(8 < index);\n      stack_size = thread_data[0xb];\n      current_stack_usage = stack_size + current_stack_usage;\n      stack_free = measure_stack_free(thread_data[9]);\n      stack_size = stack_size - stack_free;\n      total_stack_usage = stack_size + total_stack_usage;\n      print_formatted_output(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n              (int)*(short *)((int)thread_data + 6),thread_data[10],base_address,priority,\n              *(undefined *)((int)thread_data + 5),thread_data[0xb],stack_size,thread_data[9],*thread_data);\n    }\n  }\n  print_formatted_output(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,&DAT_00007190,\n          current_stack_usage,total_stack_usage);\n  return;\n}\n\n",
            "current_name": "print_thread_stack_info_0000211c",
            "entrypoint": "0x0000211c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_0000211c": "print_thread_stack_info_0000211c",
                "byte": "byte_value",
                "iVar1": "stack_free",
                "iprintf": "print_formatted_output",
                "local_14": "current_stack_usage",
                "local_18": "total_stack_usage",
                "local_1a": "thread_index",
                "local_20": "total_stack_usage",
                "local_24": "stack_start",
                "local_28": "stack_pointer",
                "local_2c": "thread_data",
                "local_30": "index",
                "local_34": "base_address",
                "local_38": "priority",
                "local_3c": "stack_size",
                "local_40": "thread_name",
                "thread_isr_stack_pointer": "get_isr_stack_pointer",
                "thread_isr_stack_start": "get_isr_stack_start",
                "thread_isr_stack_usage": "get_isr_stack_usage",
                "thread_measure_stack_free": "measure_stack_free"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002270": {
            "additional_data": {
                "FUN_00002270": {
                    "check_equal_values": 3,
                    "check_equality": 25,
                    "check_if_equal": 2,
                    "is_equal": 1
                },
                "bVar3": {
                    "are_values_equal": 2,
                    "is_equal": 23,
                    "is_equality": 1,
                    "is_match": 3,
                    "is_same": 1,
                    "is_same_value": 1
                },
                "iVar2": {
                    "comparand": 1,
                    "compare_value": 1,
                    "value": 13,
                    "value1": 8,
                    "value_1": 1,
                    "value_at_address": 2,
                    "value_at_c": 1,
                    "value_at_index": 1,
                    "value_at_offset": 2,
                    "value_at_offset_c": 1
                },
                "param_1": {
                    "address": 5,
                    "base_address": 1,
                    "data": 1,
                    "input": 16,
                    "input_value": 4,
                    "obj": 1,
                    "object": 1,
                    "object_address": 1,
                    "struct_ptr": 1
                },
                "uVar1": {
                    "result": 13
                }
            },
            "called": [],
            "calling": [
                "FUN_0000231c"
            ],
            "code": "\nundefined check_equality_00002270(int input)\n\n{\n  undefined result;\n  int value;\n  bool is_equal;\n  \n  value = *(int *)(input + 0xc);\n  is_equal = *(int *)(input + 8) == value;\n  if (is_equal) {\n    value = 1;\n  }\n  result = (undefined)value;\n  if (!is_equal) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "check_equality_00002270",
            "entrypoint": "0x00002270",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "bVar3": "is_equal",
                "iVar2": "value",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002294": {
            "additional_data": {
                "FUN_00002294": {
                    "check_difference": 4,
                    "check_difference_and_return_bool": 1,
                    "check_difference_with_index": 1,
                    "check_equal_difference": 1,
                    "check_equality": 8,
                    "check_equality_difference": 1,
                    "check_if_difference_is_equal_to_var2": 1,
                    "check_if_equal": 1,
                    "check_if_sum_matches": 1,
                    "check_range_and_return_result": 1,
                    "check_subtraction_result": 1,
                    "check_sum": 1,
                    "check_sum_difference": 1,
                    "check_sum_equality": 1,
                    "check_sum_equals": 2,
                    "check_sum_equals_length": 1,
                    "check_sum_is_valid": 3,
                    "check_sum_matches": 1
                },
                "bVar3": {
                    "is_checksum_equal": 1,
                    "is_difference_equal": 8,
                    "is_difference_equal_sum": 1,
                    "is_difference_equal_to_var2": 1,
                    "is_difference_valid": 1,
                    "is_different": 1,
                    "is_equal": 9,
                    "is_equal_length": 1,
                    "is_match": 1,
                    "is_range_valid": 1,
                    "is_subtraction_valid": 1,
                    "is_sum_equal": 2,
                    "is_valid": 3
                },
                "iVar2": {
                    "checksum": 2,
                    "checksum_diff": 1,
                    "difference": 12,
                    "expected_sum": 1,
                    "length_difference": 1,
                    "local_variable1": 1,
                    "offset": 3,
                    "range_difference": 1,
                    "result": 1,
                    "sum": 1,
                    "sum_difference": 3,
                    "value": 2,
                    "var2": 2
                },
                "param_1": {
                    "checksum": 2,
                    "data": 3,
                    "index": 1,
                    "input": 20,
                    "input_buffer": 1,
                    "input_parameter": 1,
                    "input_value": 2,
                    "var1": 1
                },
                "uVar1": {
                    "result": 17,
                    "return_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002364"
            ],
            "code": "\nundefined check_equality_difference_00002294(int input)\n\n{\n  undefined result;\n  int difference;\n  bool is_equal;\n  \n  difference = *(int *)(input + 4);\n  is_equal = *(int *)(input + 0xc) - *(int *)(input + 8) == difference;\n  if (is_equal) {\n    difference = 1;\n  }\n  result = (undefined)difference;\n  if (!is_equal) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "check_equality_difference_00002294",
            "entrypoint": "0x00002294",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002294": "check_equality_difference_00002294",
                "bVar3": "is_equal",
                "iVar2": "difference",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000022be": {
            "additional_data": {
                "FUN_000022be": {
                    "increment_and_store_at_offset": 1,
                    "increment_and_store_at_offset_address": 1,
                    "increment_and_store_value": 7,
                    "store_byte_at_offset": 1,
                    "store_byte_at_offset_and_increment_counter": 1,
                    "store_value_at_index": 2,
                    "store_value_in_array": 1,
                    "update_and_store": 1,
                    "update_array": 2,
                    "update_array_and_store_value": 1,
                    "update_array_element": 5,
                    "update_array_value": 2,
                    "update_array_with_param": 1,
                    "update_data_array": 1,
                    "write_byte_to_memory": 1,
                    "write_param_to_memory": 1,
                    "write_to_memory": 1,
                    "write_value_to_memory": 1
                },
                "param_1": {
                    "array": 22,
                    "array_pointer": 1,
                    "array_ptr": 3,
                    "data_array": 1,
                    "memory": 1,
                    "memory_array": 1,
                    "memory_location": 1,
                    "memory_pointer": 1
                },
                "param_2": {
                    "byte": 1,
                    "byte_to_store": 1,
                    "new_value": 5,
                    "value": 21,
                    "value_to_store": 2,
                    "value_to_write": 1
                },
                "uVar1": {
                    "current_element": 1,
                    "current_index": 8,
                    "current_offset": 1,
                    "current_offset_value": 1,
                    "current_value": 1,
                    "index": 6,
                    "old_value": 2,
                    "old_value_index": 1,
                    "original_value": 1,
                    "previous_value": 6
                }
            },
            "called": [],
            "calling": [
                "FUN_00002364"
            ],
            "code": "\nvoid store_value_in_array_000022be(int *array,undefined value)\n\n{\n  uint current_index;\n  \n  current_index = array[3];\n  array[3] = current_index + 1;\n  *(undefined *)((current_index & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "current_name": "store_value_in_array_000022be",
            "entrypoint": "0x000022be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000022be": "store_value_in_array_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "current_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000022f0": {
            "called": [],
            "calling": [
                "FUN_0000231c"
            ],
            "code": "\nundefined FUNC_000022f0(int *param_1)\n\n{\n  uint uVar1;\n  \n  uVar1 = param_1[2];\n  param_1[2] = uVar1 + 1;\n  return *(undefined *)((uVar1 & param_1[1] - 1U) + *param_1);\n}\n\n",
            "current_name": "FUNC_000022f0",
            "entrypoint": "0x000022f0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000022f0": "FUNC_000022f0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0000231c": {
            "additional_data": {
                "FUN_0000231c": {
                    "copy_and_count": 1,
                    "copy_and_decrement": 1,
                    "copy_buffer": 1,
                    "copy_bytes": 2,
                    "copy_data": 9,
                    "copy_data_from_buffer": 1,
                    "copy_data_from_stack": 2,
                    "copy_from_tsr_buffer": 1,
                    "copy_to_buffer": 1,
                    "extract_bytes": 1,
                    "extract_data": 6,
                    "extract_data_from_buffer": 1,
                    "extract_from_binary": 1,
                    "reverse_and_copy_data": 1,
                    "reverse_buffer": 1
                },
                "F_UNPACK_DATA": {
                    "unpack_data": 1
                },
                "_pop": {
                    "tsrb_pop": 1
                },
                "iVar2": {
                    "empty_flag": 1,
                    "is_buffer_empty": 11,
                    "is_empty": 14,
                    "is_enabled": 1,
                    "is_tsr_buffer_empty": 1
                },
                "local_14": {
                    "bytes_remaining": 4,
                    "remaining": 2,
                    "remaining_bytes": 1,
                    "remaining_count": 2,
                    "remaining_elements": 5,
                    "remaining_length": 5,
                    "remaining_size": 12
                },
                "local_20": {
                    "current_buffer_position": 1,
                    "current_byte": 1,
                    "current_dest": 2,
                    "current_destination": 1,
                    "current_position": 4,
                    "current_ptr": 1,
                    "dest_ptr": 14,
                    "dst_buffer_ptr": 1,
                    "dst_ptr": 1,
                    "output_ptr": 5
                },
                "param_1": {
                    "arg1": 3,
                    "buffer": 7,
                    "buffer_size": 1,
                    "input_buffer": 1,
                    "param": 7,
                    "param_1": 5,
                    "param_handle": 1,
                    "queue": 1,
                    "tsr_buffer": 1,
                    "tsrb": 1,
                    "tsrb_handle": 2,
                    "tsrb_instance": 1
                },
                "param_2": {
                    "buffer": 1,
                    "data_buffer": 2,
                    "dest": 3,
                    "dest_array": 1,
                    "dest_buffer": 3,
                    "dest_ptr": 1,
                    "destination": 11,
                    "destination_buffer": 2,
                    "dst_buffer": 1,
                    "output": 3,
                    "output_buffer": 3
                },
                "param_3": {
                    "buffer_size": 2,
                    "count": 2,
                    "data_size": 1,
                    "length": 6,
                    "num_bytes": 4,
                    "num_elements": 4,
                    "output_length": 1,
                    "output_size": 2,
                    "size": 8,
                    "source_buffer_size": 1
                },
                "tsrb_empty": {
                    "is_tsrb_empty": 1
                },
                "uVar1": {
                    "byte_val": 1,
                    "byte_value": 1,
                    "current_element": 1,
                    "data": 4,
                    "data_byte": 1,
                    "data_element": 1,
                    "element": 2,
                    "extracted_byte": 1,
                    "extracted_value": 2,
                    "input_data": 1,
                    "item": 1,
                    "popped_element": 1,
                    "popped_value": 5,
                    "temp": 1,
                    "temp_value": 1,
                    "value": 5
                }
            },
            "called": [
                "FUN_000022f0",
                "FUN_00002270"
            ],
            "calling": [
                "FUN_000012e2"
            ],
            "code": "\nint copy_data_from_stack_0000231c(undefined4 buffer,undefined *destination,int size)\n\n{\n  undefined popped_value;\n  int is_empty;\n  undefined *dest_ptr;\n  int remaining_size;\n  \n  dest_ptr = destination;\n  remaining_size = size;\n  while ((remaining_size != 0 && (is_empty = is_tsrb_empty(buffer), is_empty == 0))) {\n    popped_value = tsrb_pop(buffer);\n    *dest_ptr = popped_value;\n    remaining_size = remaining_size + -1;\n    dest_ptr = dest_ptr + 1;\n  }\n  return size - remaining_size;\n}\n\n",
            "current_name": "copy_data_from_stack_0000231c",
            "entrypoint": "0x0000231c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000231c": "copy_data_from_stack_0000231c",
                "_pop": "tsrb_pop",
                "iVar2": "is_empty",
                "local_14": "remaining_size",
                "local_20": "dest_ptr",
                "param_1": "buffer",
                "param_2": "destination",
                "param_3": "size",
                "tsrb_empty": "is_tsrb_empty",
                "uVar1": "popped_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002364": {
            "additional_data": {
                "FUN_00002294": {
                    "is_full": 1
                },
                "FUN_00002364": {
                    "check_and_push": 1,
                    "check_and_push_data": 3,
                    "check_and_push_to_buffer": 1,
                    "check_buffer_status": 1,
                    "handle_push": 1,
                    "push_data": 1,
                    "push_data_to_buffer": 1,
                    "push_element_if_space_available": 1,
                    "push_if_buffer_full": 1,
                    "push_if_not_full": 8,
                    "push_if_tsrb_full": 1,
                    "push_if_tsrb_not_full": 3,
                    "push_or_error": 1,
                    "push_or_error_check": 2,
                    "push_or_fail": 2,
                    "push_or_return": 1,
                    "push_to_buffer": 1,
                    "push_to_tsrb": 1
                },
                "FUn_000022be": {
                    "push_data": 1
                },
                "VAR_00000001": {
                    "buffer_status": 1
                },
                "VAR_00000002": {
                    "push_status": 1
                },
                "iVar1": {
                    "buffer_full": 1,
                    "is_buffer_full": 13,
                    "is_full": 9,
                    "is_queue_full": 1,
                    "tsrb_full_flag": 1,
                    "tsrb_full_result": 3,
                    "tsrb_status": 1
                },
                "param_1": {
                    "buffer": 16,
                    "buffer_pointer": 1,
                    "buffer_ptr": 2,
                    "buffer_size": 1,
                    "data": 1,
                    "data_buffer": 1,
                    "input_param": 1,
                    "queue": 2,
                    "stack_ptr": 1,
                    "tsrb_data": 1,
                    "tsrb_ptr": 3
                },
                "param_2": {
                    "data": 21,
                    "element": 1,
                    "input_value": 1,
                    "item": 2,
                    "value": 5
                },
                "uVar2": {
                    "result": 20,
                    "return_value": 9
                }
            },
            "called": [
                "FUN_000022be",
                "FUN_00002294"
            ],
            "calling": [
                "FUN_000012b4"
            ],
            "code": "\nundefined4 push_if_tsrb_not_full_00002364(undefined4 buffer,undefined data)\n\n{\n  int is_buffer_full;\n  undefined4 result;\n  \n  is_buffer_full = tsrb_full(buffer);\n  if (is_buffer_full == 0) {\n    _push(buffer,data);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "current_name": "push_if_tsrb_not_full_00002364",
            "entrypoint": "0x00002364",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002364": "push_if_tsrb_not_full_00002364",
                "iVar1": "is_buffer_full",
                "param_1": "buffer",
                "param_2": "data",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002396": {
            "additional_data": {
                "FUN_00002396": {
                    "initialize_real_time_clock": 16,
                    "initialize_rtc": 15
                },
                "FUN_000025f4": {
                    "check_rtc_status": 1,
                    "check_sensor_data": 1,
                    "do_something": 3,
                    "execute_specific_task": 1,
                    "initialize_subsystem": 1,
                    "perform_additional_initialization": 1,
                    "perform_additional_operations": 3,
                    "perform_additional_setup": 3,
                    "perform_additional_task": 1,
                    "perform_additional_tasks": 5,
                    "perform_calibration": 1,
                    "perform_operation": 1,
                    "reset_real_time_clock": 1,
                    "reset_rtc": 3,
                    "rtc_calibration": 1,
                    "update_time": 1
                },
                "rtc_init": {
                    "initialize_clock": 1,
                    "initialize_real_time_clock": 1,
                    "initialize_rtc": 3,
                    "real_time_clock_init": 1,
                    "rtc_initialize": 1
                }
            },
            "called": [
                "FUN_000025f4"
            ],
            "calling": [
                "FUN_00001274"
            ],
            "code": "\nvoid initialize_real_time_clock_00002396(void)\n\n{\n  initialize_rtc();\n  return;\n}\n\n",
            "current_name": "initialize_real_time_clock_00002396",
            "entrypoint": "0x00002396",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002396": "initialize_real_time_clock_00002396",
                "rtc_init": "initialize_rtc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000023a4": {
            "additional_data": {
                "FUN_000023a4": {
                    "execute_application": 1,
                    "execute_riot_program": 1,
                    "execute_shell_command": 3,
                    "init_riot": 1,
                    "initialize": 2,
                    "initialize_and_run": 1,
                    "initialize_program": 1,
                    "initialize_riot": 5,
                    "run_and_interrupt": 1,
                    "run_main_function": 1,
                    "run_program": 2,
                    "run_riot": 4,
                    "run_riot_program": 2,
                    "start_application": 1,
                    "start_riot": 4,
                    "welcome_message": 1
                },
                "FUN_000023d0": {
                    "execute_command": 5,
                    "execute_function": 1,
                    "handle_event": 1,
                    "initialize": 6,
                    "initialize_device": 1,
                    "initialize_riot": 1,
                    "initialize_shell": 1,
                    "perform_task": 1,
                    "print_welcome_message": 1,
                    "run_subfunction_1": 1
                },
                "FUN_00002e6c": {
                    "execute": 1,
                    "execute_command": 2,
                    "execute_riot": 1,
                    "execute_shell": 1,
                    "execute_with_params": 1,
                    "fork_and_execute": 1,
                    "fork_process": 1,
                    "handle_error": 1,
                    "handle_input": 1,
                    "handle_inputs": 1,
                    "initialize": 1,
                    "initialize_variables": 1,
                    "perform_action": 1,
                    "process_input": 1,
                    "run_shell_command": 2,
                    "run_subfunction_2": 1
                },
                "FUN_00004db8": {
                    "check_param": 1,
                    "check_parameter": 1,
                    "check_permission": 1,
                    "execute": 1,
                    "execute_command": 2,
                    "handle_exception": 1,
                    "handle_interrupt": 1,
                    "handle_response": 1,
                    "handle_result": 1,
                    "perform_computation": 1,
                    "process": 1,
                    "process_input": 2,
                    "run_process": 1,
                    "run_shell_command": 1,
                    "run_subfunction_3": 1,
                    "set_param": 1,
                    "software_interrupt": 1
                },
                "auStack_88": {
                    "argv": 1,
                    "buffer": 22,
                    "command_buffer": 2,
                    "program_buffer": 1,
                    "stack_buffer": 2,
                    "user_input_buffer": 1
                },
                "param_1": {
                    "arg1": 1,
                    "argc": 1,
                    "command": 1,
                    "command_argument": 1,
                    "input_param": 1,
                    "interrupt_type": 1,
                    "param": 1,
                    "process_id": 1,
                    "response_code": 1,
                    "result": 1,
                    "start_forkserver_return_value": 1,
                    "subfunc3_param": 1,
                    "unused_param": 1
                },
                "param_2": {
                    "arg2": 3,
                    "error_code": 1,
                    "param1": 1,
                    "param2": 1,
                    "parameter1": 1,
                    "subfunc1_param_1": 1,
                    "value1": 1
                },
                "param_3": {
                    "arg3": 3,
                    "param2": 1,
                    "param3": 1,
                    "param_3": 1,
                    "parameter2": 1,
                    "subfunc1_param_2": 1,
                    "value2": 1
                },
                "puts": {
                    "print_welcome_message": 1
                },
                "shell_run": {
                    "execute_shell_command": 1
                },
                "software_interrupt": {
                    "trigger_interrupt": 1
                },
                "startForkserver": {
                    "start_forkserver": 1
                },
                "uVar1": {
                    "output": 1,
                    "result": 5
                }
            },
            "called": [
                "FUN_000023d0",
                "FUN_00002e6c",
                "FUN_00004db8"
            ],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nundefined4 run_riot_program_000023a4(void)\n\n{\n  undefined4 result;\n  undefined buffer [128];\n  \n  start_forkserver(0);\n  print_welcome_message(\"Welcome to RIOT!\");\n  result = execute_shell_command(0,buffer,0x80);\n  trigger_interrupt(0x3f);\n  return result;\n}\n\n",
            "current_name": "run_riot_program_000023a4",
            "entrypoint": "0x000023a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000023a4": "run_riot_program_000023a4",
                "auStack_88": "buffer",
                "puts": "print_welcome_message",
                "shell_run": "execute_shell_command",
                "software_interrupt": "trigger_interrupt",
                "startForkserver": "start_forkserver",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000023c8": {
            "additional_data": {
                "0x3f": {
                    "interrupt_code": 1
                },
                "DAT_YYYYY": {
                    "unchanged": 1
                },
                "FUN_000023c8": {
                    "execute_software_interrupt": 7,
                    "execute_system_call": 1,
                    "execute_system_interrupt": 1,
                    "invoke_interrupt": 1,
                    "invoke_software_interrupt": 5,
                    "invoke_system_interrupt": 1,
                    "launch_software_interrupt": 1,
                    "make_software_interrupt": 1,
                    "request_software_interrupt": 1,
                    "send_software_interrupt": 5,
                    "trigger_software_interrupt": 6,
                    "trigger_system_interrupt": 1
                },
                "PTR_3f": {
                    "interrupt_code": 1
                },
                "PTR_XXXXX": {
                    "unchanged": 1
                },
                "original_function_name": {
                    "more_descriptive_function_name": 1
                },
                "original_parameter_name_1": {
                    "new_parameter_name_1": 1
                },
                "original_variable_name_1": {
                    "new_variable_name_1": 1
                },
                "software_interrupt": {
                    "execute_interrupt": 2,
                    "handle_software_interrupt": 1,
                    "interrupt": 1,
                    "interrupt_code": 1,
                    "invoke_interrupt": 2,
                    "invoke_software_interrupt": 1,
                    "perform_interrupt": 1,
                    "send_interrupt": 2,
                    "trigger_interrupt": 3,
                    "trigger_software_interrupt": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_000023d0"
            ],
            "code": "\nvoid execute_software_interrupt_000023c8(void)\n\n{\n  trigger_software_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "execute_software_interrupt_000023c8",
            "entrypoint": "0x000023c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000023c8": "execute_software_interrupt_000023c8",
                "software_interrupt": "trigger_software_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000023d0": {
            "additional_data": {
                "FUN_000023d0": {
                    "call_afl_function": 4,
                    "call_afl_or_return_zero": 1,
                    "call_afl_or_zero": 3,
                    "execute_afl_call": 12,
                    "execute_afl_function": 1,
                    "execute_function": 4,
                    "execute_initial_action": 1,
                    "execute_operation": 1,
                    "perform_afl_call": 1,
                    "process_data": 1,
                    "reverse_code": 1
                },
                "param_1": {
                    "arg1": 1,
                    "argument": 1,
                    "input": 14,
                    "input_data": 3,
                    "input_param": 5,
                    "input_parameter": 2,
                    "input_value": 4
                },
                "uVar1": {
                    "result": 19,
                    "return_value": 11
                }
            },
            "called": [
                "FUN_000023c8"
            ],
            "calling": [
                "FUN_000023a4"
            ],
            "code": "\nundefined4 execute_afl_call_000023d0(undefined4 input)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = aflCall(1,input,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "execute_afl_call_000023d0",
            "entrypoint": "0x000023d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000023d0": "execute_afl_call_000023d0",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002400": {
            "called": [],
            "calling": [
                "FUN_00000f04"
            ],
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00002400",
            "entrypoint": "0x00002400",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0000240c": {
            "additional_data": {
                "FUN_0000240c": {
                    "copy_and_return": 1,
                    "copy_and_return_next_pointer": 1,
                    "copy_and_return_ptr": 1,
                    "copy_next_node": 1,
                    "copy_next_pointer": 2,
                    "copy_next_value": 1,
                    "copy_pointer": 2,
                    "copy_value": 1,
                    "extract_and_return_next": 1,
                    "extract_data": 1,
                    "extract_linked_pointer": 1,
                    "extract_next_pointer": 3,
                    "extract_next_value": 2,
                    "extract_ptr_value": 1,
                    "extract_value": 3,
                    "extracted_function": 1,
                    "get_next_pointer": 1,
                    "reverse_linked_list": 1,
                    "update_pointer": 6
                },
                "param_1": {
                    "current_element": 1,
                    "current_node": 3,
                    "current_pointer": 6,
                    "input_array": 1,
                    "input_pointer": 1,
                    "input_ptr": 6,
                    "linked_list": 1,
                    "linked_pointer": 1,
                    "node": 1,
                    "old_pointer": 1,
                    "pointer": 3,
                    "pointer_to_update": 1,
                    "ptr_to_value": 1,
                    "source": 2,
                    "source_ptr": 2
                },
                "puVar1": {
                    "current_node": 1,
                    "dest_ptr": 1,
                    "destination": 2,
                    "destination_ptr": 1,
                    "extracted_value": 1,
                    "new_pointer": 2,
                    "next_element": 1,
                    "next_linked_pointer": 1,
                    "next_node": 4,
                    "next_pointer": 8,
                    "next_ptr": 3,
                    "next_value_ptr": 1,
                    "old_pointer": 1,
                    "source_pointer": 1,
                    "value_ptr": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_000024bc"
            ],
            "code": "\nundefined4 * extract_and_return_next_0000240c(undefined4 *current_pointer)\n\n{\n  undefined4 *next_pointer;\n  \n  next_pointer = (undefined4 *)*current_pointer;\n  if (next_pointer != (undefined4 *)0x0) {\n    *current_pointer = *next_pointer;\n  }\n  return next_pointer;\n}\n\n",
            "current_name": "extract_and_return_next_0000240c",
            "entrypoint": "0x0000240c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000240c": "extract_and_return_next_0000240c",
                "param_1": "current_pointer",
                "puVar1": "next_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002434": {
            "additional_data": {
                "DAT_1fff03dc": {
                    "default_status": 1,
                    "initial_thread_data_value": 1
                },
                "FUN_00000698": {
                    "function_b": 1,
                    "handle_interrupt": 1,
                    "perform_action2": 1,
                    "restore_interrupts": 1,
                    "set_thread_state": 1,
                    "update_parameter": 1
                },
                "FUN_0000093c": {
                    "decrement_thread_count": 1,
                    "disable_interrupts": 2,
                    "function_a": 1,
                    "perform_action": 1,
                    "perform_action1": 1
                },
                "FUN_00000cd0": {
                    "function_d": 1,
                    "get_idle_thread": 1,
                    "get_result": 1,
                    "get_thread_status": 2,
                    "perform_action4": 1
                },
                "FUN_00000d0c": {
                    "function_c": 1,
                    "perform_action3": 1,
                    "perform_operation": 1,
                    "perform_thread_cleanup": 1,
                    "restore_interrupts": 1,
                    "set_status": 1
                },
                "FUN_00001034": {
                    "add_thread_to_list": 4,
                    "function_e": 1,
                    "perform_action5": 1
                },
                "FUN_00002434": {
                    "handle_interrupt": 1,
                    "handle_thread_status": 1,
                    "initialize_thread": 10,
                    "initialize_thread_status": 1,
                    "modify_scheduler_status": 1,
                    "set_or_yield_thread": 1,
                    "set_thread_status": 1,
                    "set_thread_status_and_yield": 1,
                    "update_status_and_yield": 1,
                    "update_thread_priority": 1,
                    "update_thread_status": 12
                },
                "iVar1": {
                    "current_status": 1,
                    "data_value": 1,
                    "initial_status": 4,
                    "initial_thread_status": 1,
                    "initial_value": 6,
                    "original_priority": 1,
                    "previous_status": 1,
                    "saved_status": 4,
                    "saved_status_ptr": 1,
                    "saved_value": 4,
                    "status": 2,
                    "status_backup": 1,
                    "stored_thread_priority": 1,
                    "thread_address": 1,
                    "thread_data": 1,
                    "thread_list_ptr": 1
                },
                "irq_disable": {
                    "disable_interrupts": 2
                },
                "irq_restore": {
                    "restore_interrupts": 2
                },
                "param_1": {
                    "status": 3,
                    "status_pointer": 1,
                    "status_ptr": 4,
                    "thread_pointer": 2,
                    "thread_priority": 1,
                    "thread_status": 20
                },
                "param_2": {
                    "condition": 4,
                    "counter": 1,
                    "flag": 15,
                    "is_interrupted": 1,
                    "mode": 1,
                    "option": 1,
                    "priority": 5,
                    "status_code": 1,
                    "value": 1,
                    "yield_flag": 1
                },
                "sched_set_status": {
                    "set_status": 1,
                    "set_thread_status": 2
                },
                "thread_add_to_list": {
                    "add_thread_to_list": 3,
                    "add_to_thread_list": 1
                },
                "thread_yield_higher": {
                    "yield_higher_priority_thread": 1,
                    "yield_thread": 2,
                    "yield_thread_priority": 1,
                    "yield_to_higher_priority": 1,
                    "yield_to_higher_thread": 1
                },
                "uVar2": {
                    "interrupt_state": 1,
                    "interrupt_status": 4,
                    "irq_disable_result": 1,
                    "irq_flag": 1,
                    "irq_flags": 3,
                    "irq_state": 2,
                    "irq_status": 3,
                    "is_interrupt_disabled": 1,
                    "is_interrupt_enabled": 1,
                    "is_interrupts_disabled": 1,
                    "previous_irq_state": 1,
                    "previous_state": 1,
                    "result": 8,
                    "return_value": 2,
                    "saved_interrupt_state": 1
                }
            },
            "called": [
                "FUN_0000093c",
                "FUN_00000698",
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001034"
            ],
            "calling": [
                "FUN_0000129c"
            ],
            "code": "\nundefined4 update_thread_status_00002434(int *thread_status,int flag)\n\n{\n  int initial_value;\n  undefined4 result;\n  \n  result = disable_interrupts();\n  initial_value = DAT_1fff03dc;\n  if (*thread_status == 0) {\n    *thread_status = -1;\n    restore_interrupts(result);\n    result = 1;\n  }\n  else if (flag == 0) {\n    restore_interrupts(result);\n    result = 0;\n  }\n  else {\n    set_thread_status(DAT_1fff03dc,2);\n    if (*thread_status == -1) {\n      *thread_status = initial_value + 8;\n      *(undefined4 *)*thread_status = 0;\n    }\n    else {\n      add_thread_to_list(thread_status,initial_value);\n    }\n    restore_interrupts(result);\n    yield_thread();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "update_thread_status_00002434",
            "entrypoint": "0x00002434",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002434": "update_thread_status_00002434",
                "iVar1": "initial_value",
                "irq_disable": "disable_interrupts",
                "irq_restore": "restore_interrupts",
                "param_1": "thread_status",
                "param_2": "flag",
                "sched_set_status": "set_thread_status",
                "thread_add_to_list": "add_thread_to_list",
                "thread_yield_higher": "yield_thread",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000024bc": {
            "additional_data": {
                "FUN_00000698": {
                    "handle_list_item": 1,
                    "initialize_task": 1,
                    "process_param": 1,
                    "set_element_status": 1,
                    "set_list_item_status": 1,
                    "set_sched_status": 1,
                    "set_scheduler_status": 1,
                    "set_status": 1,
                    "set_timer": 1,
                    "update_list": 1,
                    "update_status": 2,
                    "update_status_details": 1
                },
                "FUN_00000738": {
                    "handle_error": 2,
                    "handle_interrupt": 1,
                    "handle_status_update": 1,
                    "process_data": 1,
                    "sched_switch": 1,
                    "set_element_priority": 1,
                    "set_new_status": 1,
                    "set_status": 2,
                    "switch_scheduler": 1,
                    "update_priority": 1,
                    "update_status": 1
                },
                "FUN_00000cd0": {
                    "get_default_value": 1,
                    "get_interrupt_status": 1,
                    "get_status": 1,
                    "get_task_status": 1,
                    "init_scheduler": 1,
                    "initialize": 3,
                    "initialize_data": 2,
                    "initialize_scheduler": 2,
                    "retrieve_value": 1
                },
                "FUN_00000d0c": {
                    "clear_interrupt": 1,
                    "clear_status": 1,
                    "handle_interrupt": 2,
                    "irq_restore": 1,
                    "remove_all_items": 1,
                    "reset_element": 1,
                    "reset_timer": 1,
                    "reset_value": 1,
                    "restore_interrupt_status": 1,
                    "restore_interrupts": 1,
                    "restore_irq": 1,
                    "set_task_status": 1
                },
                "FUN_0000240c": {
                    "find_entry": 1,
                    "get_list_head": 1,
                    "get_next_list_item": 1,
                    "get_updated_list": 1,
                    "initialize_param": 2,
                    "initialize_parameters": 1,
                    "process_data": 2,
                    "remove_from_list": 1,
                    "remove_head": 1,
                    "remove_head_and_get_status": 1,
                    "update_list": 1
                },
                "FUN_000024bc": {
                    "handle_list_operation": 1,
                    "process_list": 1,
                    "process_list_element": 1,
                    "process_list_entry": 2,
                    "process_list_head": 2,
                    "process_list_item": 1,
                    "process_param": 2,
                    "process_task": 1,
                    "remove_and_update_schedule": 1,
                    "update_list": 1,
                    "update_list_and_schedule": 1,
                    "update_list_item_status": 1,
                    "update_list_status": 2,
                    "update_param": 1,
                    "update_param_and_switch": 1,
                    "update_scheduler": 1,
                    "update_scheduler_status": 1,
                    "update_status": 5,
                    "update_status_and_switch": 4,
                    "update_status_and_switch_task": 1
                },
                "iVar3": {
                    "element": 1,
                    "element_value": 1,
                    "head": 6,
                    "head_element": 1,
                    "head_item": 4,
                    "head_removed": 1,
                    "head_value": 1,
                    "item": 2,
                    "item_index": 1,
                    "list_value": 1,
                    "removed_element": 1,
                    "removed_item": 7,
                    "removed_task": 1,
                    "task_id": 1,
                    "temp_var3": 1,
                    "var": 1
                },
                "irq_disable": {
                    "disable_interrupts": 1
                },
                "irq_restore": {
                    "restore_interrupts": 1
                },
                "list_remove_head": {
                    "remove_head_item_from_list": 1,
                    "remove_list_item": 1
                },
                "param_1": {
                    "entry": 1,
                    "list": 6,
                    "list_head": 2,
                    "list_pointer": 3,
                    "param": 4,
                    "result_ptr": 1,
                    "schedule_list": 1,
                    "scheduler_list": 2,
                    "status": 1,
                    "status_pointer": 2,
                    "status_ptr": 6
                },
                "param_2": {
                    "new_status": 1
                },
                "sched_set_status": {
                    "set_scheduler_status": 1,
                    "set_status": 1
                },
                "sched_switch": {
                    "switch_scheduler": 1
                },
                "uVar1": {
                    "element_value": 1,
                    "item_value": 1,
                    "list_item_status": 1,
                    "old_status": 2,
                    "result": 1,
                    "saved_char": 1,
                    "saved_state": 1,
                    "status": 17,
                    "status_type": 1,
                    "status_value": 1,
                    "task_state": 1,
                    "temp": 1,
                    "temp_var1": 1,
                    "temp_variable": 1
                },
                "uVar2": {
                    "disabled_interrupt": 1,
                    "interrupt_mask": 1,
                    "interrupt_state": 1,
                    "interrupt_status": 7,
                    "irq_disable_flag": 1,
                    "irq_flag": 1,
                    "irq_flags": 9,
                    "irq_mask": 1,
                    "irq_state": 3,
                    "irq_status": 4,
                    "saved_irq": 1,
                    "temp_var2": 1
                }
            },
            "called": [
                "FUN_00000698",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_0000240c"
            ],
            "calling": [
                "FUN_000012b4"
            ],
            "code": "\nvoid update_status_and_switch_task_000024bc(int *status_ptr)\n\n{\n  undefined status;\n  undefined4 irq_flags;\n  int removed_item;\n  \n  irq_flags = disable_interrupts();\n  if (*status_ptr == 0) {\n    restore_interrupts(irq_flags);\n  }\n  else if (*status_ptr == -1) {\n    *status_ptr = 0;\n    restore_interrupts(irq_flags);\n  }\n  else {\n    removed_item = remove_list_item(status_ptr);\n    set_scheduler_status(removed_item + -8,10);\n    if (*status_ptr == 0) {\n      *status_ptr = -1;\n    }\n    status = *(undefined *)(removed_item + -3);\n    restore_interrupts(irq_flags);\n    switch_scheduler(status);\n  }\n  return;\n}\n\n",
            "current_name": "update_status_and_switch_task_000024bc",
            "entrypoint": "0x000024bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000024bc": "update_status_and_switch_task_000024bc",
                "iVar3": "removed_item",
                "irq_disable": "disable_interrupts",
                "irq_restore": "restore_interrupts",
                "list_remove_head": "remove_list_item",
                "param_1": "status_ptr",
                "sched_set_status": "set_scheduler_status",
                "sched_switch": "switch_scheduler",
                "uVar1": "status",
                "uVar2": "irq_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002538": {
            "additional_data": {
                "DAT_": {
                    "": 2
                },
                "DAT_1fff1c00": {
                    "array2": 1,
                    "memory_base_address": 1
                },
                "DAT_e000ed14": {
                    "array1": 1,
                    "byte_array": 2,
                    "data_buffer": 1,
                    "memory_array": 1,
                    "memory_block": 1
                },
                "FUN_00002538": {
                    "set_byte_in_memory": 1,
                    "set_byte_value": 1,
                    "set_byte_value_in_memory": 1,
                    "set_memory_byte": 2,
                    "set_memory_location": 1,
                    "set_memory_value": 4,
                    "store_byte": 1,
                    "store_byte_in_memory": 2,
                    "store_byte_value": 2,
                    "store_char": 1,
                    "store_data": 2,
                    "store_data_to_memory": 1,
                    "store_param_as_byte": 1,
                    "update_data": 4,
                    "update_data_value": 1,
                    "update_memory": 5,
                    "write_byte": 1
                },
                "PTR_": {
                    "": 2
                },
                "PTR_001fff1c00": {
                    "destination": 1
                },
                "PTR_01fff1c00": {
                    "address_offset": 1
                },
                "byte": {
                    "unsigned_byte": 1
                },
                "char": {
                    "byte": 1,
                    "char": 1,
                    "character": 1,
                    "signed_byte": 1
                },
                "param_1": {
                    "address": 5,
                    "address_offset": 1,
                    "byte_code": 1,
                    "byte_index": 3,
                    "byte_value": 3,
                    "index": 8,
                    "input_byte": 5,
                    "input_index": 1,
                    "memory_address": 1,
                    "memory_offset": 1,
                    "offset": 1,
                    "value": 1
                },
                "param_2": {
                    "data": 8,
                    "data_to_store": 1,
                    "data_value": 1,
                    "input_value": 1,
                    "new_value": 1,
                    "updated_value": 2,
                    "value": 16,
                    "value_to_store": 1
                },
                "param_3": {
                    "index": 1
                },
                "temp_1": {
                    "lower_nibble": 1
                },
                "temp_2": {
                    "shifted_data": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0000258c"
            ],
            "code": "\nvoid set_byte_value_in_memory_00002538(unsigned_byte index,uint value)\n\n{\n  if ((char)index < '\\0') {\n    (&DAT_e000ed14)[index & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)index + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "set_byte_value_in_memory_00002538",
            "entrypoint": "0x00002538",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002538": "set_byte_value_in_memory_00002538",
                "byte": "unsigned_byte",
                "param_1": "index",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000258c": {
            "additional_data": {
                "FUN_0000258c": {
                    "initialize_memory": 29,
                    "initialize_memory_and_registers": 1,
                    "initialize_memory_values": 1
                },
                "_DAT_e000ed08": {
                    "memory_flag": 1
                },
                "_DAT_e000ed10": {
                    "memory_flag_10": 1
                },
                "_DAT_e000ed14": {
                    "memory_flag_200": 1
                },
                "index": {
                    "memory_index": 1
                },
                "local_c": {
                    "counter": 9,
                    "index": 21,
                    "loop_counter": 1
                },
                "set_byte_value_in_memory_00002538": {
                    "set_byte_value_in_memory": 3,
                    "set_memory_byte_value": 3,
                    "set_memory_value": 1,
                    "set_memory_value_byte": 1,
                    "set_value_in_memory": 1,
                    "write_byte_value": 1
                },
                "value": {
                    "byte_value": 1,
                    "new_value": 1
                }
            },
            "called": [
                "FUN_00002538"
            ],
            "calling": [
                "FUN_00001274"
            ],
            "code": "\n\n\nvoid initialize_memory_values_0000258c(void)\n\n{\n  uint index;\n  \n  _DAT_e000ed08 = 0;\n  set_byte_value_in_memory(0xfffffffe,1);\n  set_byte_value_in_memory(0xfffffffb,1);\n  for (index = 0; index < 0x66; index = index + 1) {\n    set_byte_value_in_memory((int)(char)index,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "current_name": "initialize_memory_values_0000258c",
            "entrypoint": "0x0000258c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000258c": "initialize_memory_values_0000258c",
                "local_c": "index",
                "set_byte_value_in_memory_00002538": "set_byte_value_in_memory",
                "value": "byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000025f4": {
            "additional_data": {
                "FUN_000025f4": {
                    "initialize_real_time_timer": 1,
                    "initialize_real_time_trace": 4,
                    "initialize_real_time_tracking": 1,
                    "initialize_real_time_transmission": 1,
                    "initialize_rtt": 23
                },
                "FUN_000027b0": {
                    "configure_rtt": 1,
                    "control_rtt": 1,
                    "do_something": 1,
                    "execute_subfunction": 1,
                    "handle_event": 1,
                    "initialize_subsystem": 1,
                    "perform_action": 1,
                    "perform_additional_operations": 3,
                    "perform_additional_task": 5,
                    "perform_additional_tasks": 2,
                    "perform_operation": 5,
                    "perform_something": 1,
                    "perform_sub_task": 1,
                    "perform_subfunction": 1,
                    "perform_subroutine": 1,
                    "perform_subtask": 2,
                    "perform_task": 2,
                    "run_additional_operations": 1
                },
                "rtt_init": {
                    "": 1
                }
            },
            "called": [
                "FUN_000027b0"
            ],
            "calling": [
                "FUN_00002396"
            ],
            "code": "\nvoid initialize_rtt_000025f4(void)\n\n{\n  rtt_init();\n  return;\n}\n\n",
            "current_name": "initialize_rtt_000025f4",
            "entrypoint": "0x000025f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000025f4": "initialize_rtt_000025f4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002600": {
            "additional_data": {
                "FUN_00002600": {
                    "initialize_counter": 8,
                    "initialize_rtt_counter": 1,
                    "set_counter": 6,
                    "set_counter_based_on_time": 1,
                    "set_counter_from_time": 4,
                    "set_counter_from_timestamp": 1,
                    "set_counter_time": 1,
                    "set_counter_timestamp": 1,
                    "set_counter_using_time": 1,
                    "set_counter_with_time": 2,
                    "set_rtt_counter": 4,
                    "update_time_counter": 1
                },
                "FUN_0000285c": {
                    "helper_function": 1,
                    "initialize_rtt": 1,
                    "log_event": 1,
                    "log_timestamp": 1,
                    "print_status": 1,
                    "set_counter": 2,
                    "set_rtt_counter": 1
                },
                "FUN_000047e4": {
                    "calculate_checksum": 2,
                    "calculate_rtt": 1,
                    "convert_to_unix_timestamp": 1,
                    "decode_integer": 1,
                    "extract_data": 1,
                    "get_timestamp_ptr": 1,
                    "process_int_array": 1
                },
                "param_1": {
                    "counter_value": 1,
                    "date_time": 5,
                    "input_time": 3,
                    "int_array": 1,
                    "time": 1,
                    "time_data": 1,
                    "time_in_seconds": 1,
                    "time_info": 1,
                    "time_stamp": 1,
                    "time_struct": 8,
                    "timestamp": 8
                },
                "uVar1": {
                    "converted_time": 6,
                    "converted_time_stamp": 1,
                    "converted_timestamp": 4,
                    "counter": 6,
                    "counter_value": 1,
                    "epoch_time": 3,
                    "result": 1,
                    "seconds": 1,
                    "time_stamp": 1,
                    "time_value": 2,
                    "timestamp": 4,
                    "unix_time": 1
                }
            },
            "called": [
                "FUN_0000285c",
                "FUN_000047e4"
            ],
            "calling": [
                "FUN_00003478"
            ],
            "code": "\nundefined4 set_rtt_counter_00002600(undefined4 time_struct)\n\n{\n  undefined4 counter;\n  \n  counter = mktime(time_struct);\n  rtt_set_counter(counter);\n  return 0;\n}\n\n",
            "current_name": "set_rtt_counter_00002600",
            "entrypoint": "0x00002600",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002600": "set_rtt_counter_00002600",
                "param_1": "time_struct",
                "uVar1": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002624": {
            "additional_data": {
                "FUN_00002624": {
                    "convert_counter_to_time": 9,
                    "convert_epoch_to_utc_time": 1,
                    "convert_time": 2,
                    "convert_time_to_struct": 1,
                    "convert_time_to_utc": 1,
                    "convert_timestamp_to_local_time": 2,
                    "convert_timestamp_to_struct": 2,
                    "convert_to_utc_time": 1,
                    "convert_unix_time_to_date_time": 1,
                    "convert_unix_time_to_struct": 1,
                    "decode_time": 1,
                    "extract_and_convert_time": 1,
                    "get_and_convert_current_time": 1,
                    "get_and_convert_time": 1,
                    "get_current_time": 1,
                    "get_local_time": 2,
                    "get_time": 1,
                    "get_time_information": 1
                },
                "FUN_0000281c": {
                    "get_current_time": 6,
                    "get_real_time": 1,
                    "get_system_time": 1
                },
                "FUN_0000443c": {
                    "calculate_elapsed_time": 1,
                    "extract_data": 1,
                    "get_counter_value": 1,
                    "process_data": 1,
                    "process_param": 1,
                    "process_pointer": 1,
                    "unpack_pointer_and_increment": 1,
                    "update_counter": 1
                },
                "local_10": {
                    "counter": 8,
                    "counter_value": 9,
                    "current_counter": 1,
                    "current_time": 4,
                    "current_timestamp": 3,
                    "current_unix_time": 1,
                    "epoch_time": 1,
                    "initial_timestamp": 1,
                    "timestamp": 2,
                    "unix_time": 1
                },
                "param_1": {
                    "converted_time": 2,
                    "current_time": 1,
                    "dtime_struct": 1,
                    "output_array": 1,
                    "output_date_time": 1,
                    "output_struct": 1,
                    "output_time": 14,
                    "pointer_param": 1,
                    "result": 1,
                    "time_pointer": 1,
                    "time_result": 1,
                    "time_struct": 5,
                    "time_structure": 1
                },
                "param_2": {
                    "counter_param": 1,
                    "data": 1,
                    "elapsed_time": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "pointer_and_increment": 1
                },
                "uStack_c": {
                    "counter": 1,
                    "reserved_value": 1,
                    "stack_c": 1,
                    "stack_variable": 1,
                    "unused": 5,
                    "unused_stack_variable": 1,
                    "unused_value": 1,
                    "unused_var": 6,
                    "unused_variable": 9,
                    "zero": 5
                }
            },
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "calling": [
                "FUN_00003444"
            ],
            "code": "\nundefined4 convert_counter_to_time_00002624(undefined4 output_time)\n\n{\n  undefined4 counter_value;\n  undefined4 unused_variable;\n  \n  counter_value = rtt_get_counter();\n  unused_variable = 0;\n  gmtime_r(&counter_value,output_time);\n  return 0;\n}\n\n",
            "current_name": "convert_counter_to_time_00002624",
            "entrypoint": "0x00002624",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002624": "convert_counter_to_time_00002624",
                "local_10": "counter_value",
                "param_1": "output_time",
                "uStack_c": "unused_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002654": {
            "additional_data": {
                "FUN_00002654": {
                    "initialize_alarm": 1,
                    "set_alarm": 8,
                    "set_alarm_and_return": 2,
                    "set_alarm_and_return_result": 1,
                    "set_alarm_and_return_zero": 1,
                    "set_alarm_at_time": 1,
                    "set_alarm_based_on_time": 1,
                    "set_alarm_from_time": 2,
                    "set_alarm_from_timestamp": 4,
                    "set_alarm_from_unix_time": 1,
                    "set_alarm_on_date": 1,
                    "set_alarm_time": 2,
                    "set_alarm_with_time": 6
                },
                "FUN_00002894": {
                    "update_alarm": 1
                },
                "FUN_000047e4": {
                    "get_alarm_status": 1
                },
                "param_1": {
                    "alarm_status": 1,
                    "date_struct_tm": 1,
                    "input_time": 1,
                    "time": 5,
                    "time_info": 2,
                    "time_input": 1,
                    "time_param": 1,
                    "time_struct": 7,
                    "time_tm": 1,
                    "time_value": 1,
                    "timestamp": 8,
                    "unix_time": 2
                },
                "param_2": {
                    "alarm": 1,
                    "alarm_code": 3,
                    "alarm_data": 2,
                    "alarm_param": 1,
                    "alarm_parameter": 2,
                    "alarm_type": 6,
                    "alarm_value": 6,
                    "data": 1,
                    "param2_value": 1,
                    "param_2": 1,
                    "parameter": 1,
                    "parameter_2": 1,
                    "value": 2,
                    "value1": 1,
                    "value_1": 1,
                    "value_2": 1
                },
                "param_3": {
                    "additional_parameter": 1,
                    "alarm_callback": 2,
                    "alarm_code": 1,
                    "alarm_data": 2,
                    "alarm_function": 1,
                    "alarm_mode": 1,
                    "alarm_option": 1,
                    "alarm_param": 1,
                    "alarm_parameter": 1,
                    "alarm_type": 1,
                    "alarm_value": 3,
                    "callback_function": 1,
                    "extra_param": 1,
                    "flag": 3,
                    "flag_param": 1,
                    "option": 1,
                    "options": 1,
                    "param": 1,
                    "param3_value": 1,
                    "param_3": 1,
                    "parameter_3": 1,
                    "value": 1,
                    "value2": 1,
                    "value_2": 1,
                    "value_3": 1
                },
                "uVar1": {
                    "alarm_time": 1,
                    "converted_time": 6,
                    "converted_timestamp": 4,
                    "epoch_time": 3,
                    "time_code": 1,
                    "time_conversion_result": 1,
                    "time_in_secs": 2,
                    "time_result": 2,
                    "time_stamp": 2,
                    "timestamp": 4,
                    "unix_timestamp": 1
                }
            },
            "called": [
                "FUN_000047e4",
                "FUN_00002894"
            ],
            "calling": [
                "FUN_000033f4"
            ],
            "code": "\nundefined4 set_alarm_with_time_00002654(undefined4 timestamp,undefined4 alarm_type,undefined4 alarm_value)\n\n{\n  undefined4 converted_time;\n  \n  converted_time = mktime(timestamp);\n  DAT_1fff0d9c = alarm_type;\n  rtt_set_alarm(converted_time,0x26f1,alarm_value);\n  return 0;\n}\n\n",
            "current_name": "set_alarm_with_time_00002654",
            "entrypoint": "0x00002654",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002654": "set_alarm_with_time_00002654",
                "param_1": "timestamp",
                "param_2": "alarm_type",
                "param_3": "alarm_value",
                "uVar1": "converted_time"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002690": {
            "additional_data": {
                "FUN_00002690": {
                    "convert_alarm_time_to_struct": 3,
                    "convert_alarm_time_to_utc": 1,
                    "convert_alarm_to_local_time": 3,
                    "convert_alarm_to_time": 8,
                    "convert_rtt_alarm_to_date_time": 1,
                    "convert_rtt_alarm_to_local_time": 1,
                    "convert_rtt_alarm_to_time": 2,
                    "convert_rtt_alarm_to_utc": 1,
                    "convert_time_to_alarm": 1,
                    "convert_time_to_local": 1,
                    "convert_time_to_struct": 2,
                    "convert_time_to_utc": 2,
                    "convert_timestamp_to_struct": 1,
                    "convert_timezone_to_utc": 1,
                    "convert_to_local_time": 1,
                    "get_alarm_time": 1,
                    "get_and_convert_alarm_time": 1
                },
                "FUN_000028f0": {
                    "get_rtt": 1,
                    "get_rtt_alarm": 1
                },
                "FUN_0000443c": {
                    "extract_date_time": 1,
                    "extract_time": 1
                },
                "local_10": {
                    "alarm_time": 23,
                    "current_alarm_time": 2,
                    "rtt_alarm": 5,
                    "timestamp": 1
                },
                "param_1": {
                    "alarm_time_struct": 1,
                    "converted_time": 2,
                    "local_time": 2,
                    "out_param": 1,
                    "output_date_time": 1,
                    "output_struct": 1,
                    "output_time": 10,
                    "output_time_struct": 1,
                    "result": 2,
                    "time_pointer": 1,
                    "time_ptr": 1,
                    "time_result": 1,
                    "time_struct": 4,
                    "time_structure": 1,
                    "timestamp": 1,
                    "utc_time": 1
                },
                "uStack_c": {
                    "return_value": 1,
                    "stack_value": 1,
                    "temp": 2,
                    "temp_value": 1,
                    "temp_var": 2,
                    "temporary_variable": 1,
                    "unused": 2,
                    "unused_stack": 1,
                    "unused_var": 11,
                    "unused_variable": 6,
                    "zero": 2,
                    "zero_value": 1
                }
            },
            "called": [
                "FUN_000028f0",
                "FUN_0000443c"
            ],
            "calling": [
                "FUN_000033c0"
            ],
            "code": "\nundefined4 convert_rtt_alarm_to_local_time_00002690(undefined4 output_time)\n\n{\n  undefined4 alarm_time;\n  undefined4 unused_var;\n  \n  alarm_time = rtt_get_alarm();\n  unused_var = 0;\n  gmtime_r(&alarm_time,output_time);\n  return 0;\n}\n\n",
            "current_name": "convert_rtt_alarm_to_local_time_00002690",
            "entrypoint": "0x00002690",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002690": "convert_rtt_alarm_to_local_time_00002690",
                "local_10": "alarm_time",
                "param_1": "output_time",
                "uStack_c": "unused_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000026c0": {
            "additional_data": {
                "FUN_000026c0": {
                    "clear_alarm": 9,
                    "clear_alarm_and_reset": 10,
                    "clear_alarm_and_reset_counter": 5,
                    "clear_alarm_and_reset_data": 2,
                    "clear_alarm_and_reset_flag": 1,
                    "clear_alarm_and_reset_value": 1,
                    "clear_alarm_and_reset_var": 1,
                    "clear_alarm_and_reset_variable": 2
                },
                "FUN_00002910": {
                    "additional_processing": 1,
                    "check_alarm_status": 1,
                    "clear_rtt_alarm": 1,
                    "disable_interrupts": 1,
                    "do_additional_tasks": 1,
                    "enable_logging": 1,
                    "initialize": 1,
                    "initialize_subsystem": 1,
                    "initialize_system": 1,
                    "perform_additional_action": 1,
                    "perform_additional_checks": 1,
                    "perform_additional_cleanup": 1,
                    "perform_additional_operation": 1,
                    "perform_additional_task": 7,
                    "perform_additional_tasks": 2,
                    "perform_initialization": 1,
                    "perform_reset": 1,
                    "reset_alarm": 1,
                    "reset_counter": 1,
                    "reset_data": 2,
                    "reset_flag": 1,
                    "reset_subsystem": 1,
                    "reset_timer": 1
                }
            },
            "called": [
                "FUN_00002910"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nvoid clear_alarm_and_reset_counter_000026c0(void)\n\n{\n  rtt_clear_alarm();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "current_name": "clear_alarm_and_reset_counter_000026c0",
            "entrypoint": "0x000026c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000026c0": "clear_alarm_and_reset_counter_000026c0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000026d8": {
            "additional_data": {
                "FUN_000026d8": {
                    "initialize_real_time_clock": 1,
                    "initialize_rtt": 3,
                    "initialize_rtt_power": 2,
                    "power_on": 1,
                    "power_on_func": 1,
                    "power_on_function": 2,
                    "power_on_routine": 1,
                    "power_on_rtt": 18
                },
                "FUN_0000294c": {
                    "additional_func": 1,
                    "additional_function": 2,
                    "enable_rtt": 1,
                    "execute_secondary_function": 1,
                    "helper_function": 1,
                    "init_sub_function": 1,
                    "initialize": 4,
                    "initialize_routine": 1,
                    "initialize_rtt": 5,
                    "initialize_subsystem": 1,
                    "perform_action": 2,
                    "perform_additional_operations": 1,
                    "perform_additional_setup": 1,
                    "perform_additional_tasks": 2,
                    "perform_cleanup": 1,
                    "perform_operation": 1,
                    "perform_required_action": 1,
                    "perform_startup_tasks": 1,
                    "perform_task": 1,
                    "reset_timer": 1,
                    "sub_function": 1
                }
            },
            "called": [
                "FUN_0000294c"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nvoid power_on_rtt_000026d8(void)\n\n{\n  rtt_poweron();\n  return;\n}\n\n",
            "current_name": "power_on_rtt_000026d8",
            "entrypoint": "0x000026d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000026d8": "power_on_rtt_000026d8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000026e4": {
            "called": [
                "FUN_00002970"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nvoid FUNC_000026e4(void)\n\n{\n  rtt_poweroff();\n  return;\n}\n\n",
            "current_name": "FUNC_000026e4",
            "entrypoint": "0x000026e4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000026e4": "FUNC_000026e4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000026f0": {
            "additional_data": {
                "DAT_1fff0d9c": {
                    "callback": 1,
                    "callback_func": 1,
                    "callback_function": 7,
                    "callback_function_pointer": 4,
                    "callback_pointer": 1,
                    "callback_ptr": 2,
                    "function_pointer": 2,
                    "optional_function_pointer": 1
                },
                "FUN_000026f0": {
                    "call_function_if_needed": 1,
                    "call_optional_function": 1,
                    "execute_callback": 15,
                    "execute_callback_function": 7,
                    "execute_callback_if_available": 1,
                    "execute_callback_if_needed": 1,
                    "execute_callback_if_not_null": 2,
                    "execute_code": 1,
                    "execute_function_if_not_null": 1,
                    "process_call_back": 1
                },
                "code": {
                    "callback_function": 1
                },
                "param_1": {
                    "argument": 3,
                    "callback": 1,
                    "callback_argument": 1,
                    "callback_data": 2,
                    "callback_function": 1,
                    "callback_param": 8,
                    "callback_parameter": 5,
                    "callback_value": 1,
                    "data": 4,
                    "input": 2,
                    "input_param": 1,
                    "input_parameter": 1,
                    "parameter": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_callback_function_000026f0(undefined4 callback_param)\n\n{\n  if (DAT_1fff0d9c != (callback_function *)0x0) {\n    (*DAT_1fff0d9c)(callback_param);\n  }\n  return;\n}\n\n",
            "current_name": "execute_callback_function_000026f0",
            "entrypoint": "0x000026f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000026f0": "execute_callback_function_000026f0",
                "code": "callback_function",
                "param_1": "callback_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002714": {
            "additional_data": {
                "DAT_": {
                    "": 1
                },
                "FUN_00002714": {
                    "set_bit": 9,
                    "set_bit_at_index": 3,
                    "set_bit_at_offset": 1,
                    "set_bit_in_address": 1,
                    "set_bit_in_array": 3,
                    "set_bit_in_memory": 13
                },
                "PTR_": {
                    "": 1
                },
                "PTR_0x1fff1f00": {
                    "memory_address": 1
                },
                "char": {
                    "char_value": 1
                },
                "int": {
                    "integer_pointer": 1
                },
                "param_1": {
                    "bit_index": 1,
                    "byte_index": 1,
                    "byte_to_set": 3,
                    "byte_value": 5,
                    "input": 1,
                    "input_byte": 17,
                    "new_value": 1,
                    "value_to_set": 1
                },
                "param_2": {
                    "new_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002894"
            ],
            "code": "\nvoid set_bit_in_memory_00002714(byte input_byte)\n\n{\n  *(integer_pointer *)(((uinteger_pointer)(integer_pointer)(char_value)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_00002714",
            "entrypoint": "0x00002714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002714": "set_bit_in_memory_00002714",
                "char": "char_value",
                "int": "integer_pointer",
                "param_1": "input_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002744": {
            "additional_data": {
                "0xf": {
                    "mask": 1
                },
                "0xff": {
                    "byte_mask": 1
                },
                "DAT_e000ed14": {
                    "array_data": 1,
                    "buffer": 1,
                    "data_buffer": 1,
                    "lookup_table": 2,
                    "memory_array": 1
                },
                "FUN_00002744": {
                    "modify_byte": 1,
                    "process_byte": 1,
                    "set_byte_in_memory": 2,
                    "set_byte_value": 8,
                    "set_data": 1,
                    "set_memory": 1,
                    "set_memory_value": 1,
                    "store_byte_data": 1,
                    "store_byte_value": 2,
                    "store_data": 1,
                    "update_data": 6,
                    "update_data_offset": 1,
                    "update_memory": 3,
                    "write_to_memory": 1,
                    "write_value_to_memory": 1
                },
                "PTR_DAT_1fff1c00": {
                    "buffer_base_address": 1
                },
                "PTR_ffffffffff": {
                    "array_pointer": 1
                },
                "char": {
                    "byte": 1,
                    "byte_value": 1,
                    "signed_char": 1
                },
                "char_1": {
                    "modified_value": 1
                },
                "param_1": {
                    "address": 5,
                    "byte_index": 3,
                    "byte_to_modify": 1,
                    "byte_value": 2,
                    "data_index": 4,
                    "index": 3,
                    "input_byte": 7,
                    "input_index": 1,
                    "input_value": 1,
                    "offset": 2,
                    "value": 1,
                    "value_index": 1
                },
                "param_2": {
                    "byte_offset": 1,
                    "byte_value": 1,
                    "data": 5,
                    "data_byte": 1,
                    "data_to_store": 1,
                    "input_number": 1,
                    "input_value": 3,
                    "new_value": 8,
                    "update_value": 2,
                    "value": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_00002894"
            ],
            "code": "\nvoid set_byte_value_00002744(byte input_byte,uint new_value)\n\n{\n  if ((signed_char)input_byte < '\\0') {\n    (&DAT_e000ed14)[input_byte & 0xf] = (signed_char)((new_value & 0xff) << 4);\n  }\n  else {\n    *(signed_char *)((signed_char)input_byte + -0x1fff1c00) = (signed_char)((new_value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "set_byte_value_00002744",
            "entrypoint": "0x00002744",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002744": "set_byte_value_00002744",
                "char": "signed_char",
                "param_1": "input_byte",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002798": {
            "additional_data": {
                "FUN_0000093C": {
                    "initialize": 1
                },
                "FUN_0000093c": {
                    "cleanup_resources": 1,
                    "do_something": 7,
                    "execute_additional_logic": 1,
                    "execute_sub_function": 1,
                    "execute_subfunction": 1,
                    "execute_task": 1,
                    "other_function": 1,
                    "perform_action": 2,
                    "perform_additional_task": 2,
                    "perform_cleanup": 2,
                    "perform_initialization": 1,
                    "perform_task": 5,
                    "print_status": 1,
                    "reload_data_buffers": 1,
                    "some_other_function": 1,
                    "some_sub_function": 1,
                    "thread_cleanup": 1
                },
                "FUN_00002798": {
                    "check_and_yield": 23,
                    "check_and_yield_if_not_zero": 1,
                    "check_and_yield_thread": 2,
                    "check_and_yield_thread_if_necessary": 1,
                    "yield_higher_if_data_not_zero": 1,
                    "yield_if_data_available": 1,
                    "yield_if_data_exists": 1,
                    "yield_if_data_not_zero": 1
                },
                "thread_yield_higher": {
                    "yield_higher": 1
                }
            },
            "called": [
                "FUN_0000093c"
            ],
            "calling": [
                "FUN_00002994"
            ],
            "code": "\nvoid check_and_yield_thread_if_necessary_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    yield_higher();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_yield_thread_if_necessary_00002798",
            "entrypoint": "0x00002798",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002798": "check_and_yield_thread_if_necessary_00002798",
                "thread_yield_higher": "yield_higher"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000027b0": {
            "additional_data": {
                "FUN_000027b0": {
                    "enable_rtc_module": 1,
                    "enable_rtt_and_reset": 1,
                    "initialize_device": 1,
                    "initialize_system": 25,
                    "power_on": 1,
                    "power_on_and_initialize": 1
                },
                "FUN_0000294c": {
                    "do_something": 1,
                    "initialize_rtt": 1,
                    "perform_action": 1,
                    "perform_additional_processing": 1,
                    "perform_operation": 1,
                    "perform_sub_task": 1,
                    "perform_system_check": 1,
                    "perform_task": 1
                },
                "_DAT_4003d000": {
                    "control_register": 3,
                    "data_register": 7,
                    "device_data": 1,
                    "flag_variable": 1,
                    "general_purpose_register": 1,
                    "global_var": 1,
                    "gpio_data_register": 1,
                    "interrupt_clear": 1,
                    "interrupt_enable_mask": 1,
                    "output_data": 1,
                    "reset_value": 1,
                    "rtc_clear_flag": 1,
                    "status_register_value": 1,
                    "system_control": 2,
                    "system_counter": 1,
                    "system_data": 1,
                    "system_error": 1,
                    "system_error_flag": 1,
                    "system_reset": 1,
                    "timeout_value": 1
                },
                "_DAT_4003d008": {
                    "config_register": 3,
                    "configuration_register": 2,
                    "control_register2": 2,
                    "data_register": 1,
                    "device_configuration_register": 1,
                    "error_code": 1,
                    "error_flag": 1,
                    "error_register": 1,
                    "interrupt_mask": 2,
                    "interrupt_mask_register": 1,
                    "interrupt_priority": 1,
                    "register_2": 1,
                    "rtc_compare_value": 1,
                    "status_register": 1,
                    "system_configuration": 1,
                    "system_data_register": 1,
                    "timer_compare_value": 1,
                    "timer_config": 2,
                    "timer_configuration": 1,
                    "timer_interval_register": 1,
                    "timer_prescaler": 2,
                    "timer_reload_value": 1,
                    "timer_value": 1
                },
                "_DAT_4003d010": {
                    "config_register": 2,
                    "control_register": 2,
                    "control_register1": 2,
                    "device_control_register": 1,
                    "interrupt_config": 1,
                    "interrupt_control": 3,
                    "interrupt_control_register": 2,
                    "interrupt_enable": 1,
                    "interrupt_register": 4,
                    "register_1": 1,
                    "rtc_prescaler": 1,
                    "system_control_register": 2,
                    "timer_config": 2,
                    "timer_control": 1,
                    "timer_control_register": 3,
                    "timer_ctrl_register": 1,
                    "timer_register": 1
                },
                "_DAT_4003d014": {
                    "control_register": 4,
                    "device_status_register": 1,
                    "global_flags": 1,
                    "gpio_register": 1,
                    "input_flags": 1,
                    "interrupt_config": 1,
                    "interrupt_status_register": 1,
                    "rtc_status_register": 1,
                    "status_register": 9,
                    "system_state": 1,
                    "system_status": 6,
                    "system_status_register": 2
                },
                "_DAT_4003d01c": {
                    "control_register3": 2,
                    "counter": 1,
                    "counter_config": 1,
                    "counter_register": 1,
                    "data_register": 3,
                    "device_interrupt_register": 1,
                    "flag_register": 1,
                    "interrupt_enable_register": 1,
                    "interrupt_flag": 1,
                    "interrupt_flags": 1,
                    "interrupt_mask": 1,
                    "interrupt_register": 2,
                    "interrupt_status_register": 1,
                    "register_3": 1,
                    "reset_register": 1,
                    "rtc_interrupt_enable": 1,
                    "system_clock": 1,
                    "system_interrupt_register": 1,
                    "system_power": 1,
                    "timer_count_register": 1,
                    "timer_data": 1,
                    "timer_event": 1,
                    "timer_interrupt_flag": 1,
                    "timer_interrupt_mask": 1,
                    "timer_status_register": 1
                },
                "_DAT_4004803c": {
                    "configuration_register": 1,
                    "control_register": 2,
                    "device_flags": 1,
                    "register_flags": 1,
                    "rtc_control_register": 1,
                    "status_register": 3,
                    "system_config": 2,
                    "system_config_register": 1,
                    "system_configuration": 3,
                    "system_configuration_register": 2,
                    "system_flag": 1,
                    "system_flags": 6,
                    "system_register": 2
                },
                "rtt_poweron": {
                    "power_on_rtc_module": 1,
                    "power_on_rtt": 3
                }
            },
            "called": [
                "FUN_0000294c"
            ],
            "calling": [
                "FUN_000025f4"
            ],
            "code": "\n\n\nvoid initialize_system_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  power_on_rtt();\n  return;\n}\n\n",
            "current_name": "initialize_system_000027b0",
            "entrypoint": "0x000027b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0",
                "rtt_poweron": "power_on_rtt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000281c": {
            "additional_data": {
                "FUN_0000281c": {
                    "get_base_address": 15,
                    "get_data_address": 3,
                    "get_data_pointer": 2,
                    "get_data_ptr": 1,
                    "get_global_data": 3,
                    "get_global_value": 2,
                    "get_global_variable": 1,
                    "get_memory_address": 3,
                    "get_memory_value": 1
                },
                "_DAT_4003d000": {
                    "base_address": 14,
                    "data_address": 3,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "global_data": 2,
                    "global_value": 2,
                    "global_variable": 1,
                    "memory_address": 3,
                    "memory_value": 1
                },
                "undefined4": {
                    "uint32_t": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002624"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nuint32_t get_base_address_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "current_name": "get_base_address_0000281c",
            "entrypoint": "0x0000281c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000281c": "get_base_address_0000281c",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000285c": {
            "additional_data": {
                "0x10": {
                    "flag_value": 1,
                    "set_bit_mask": 1
                },
                "0xffffffef": {
                    "bit_mask": 1,
                    "clear_bit_mask": 1
                },
                "DAT_4003d000": {
                    "global_variable": 1
                },
                "FUM_0000285c": {
                    "initialize_data": 1
                },
                "FUN_0000285c": {
                    "initialize_data": 3,
                    "initialize_data_registers": 1,
                    "initialize_device": 1,
                    "initialize_flag": 1,
                    "initialize_flags": 1,
                    "initialize_global_data": 1,
                    "set_configuration": 1,
                    "set_data_and_update_flag": 1,
                    "set_data_flags": 1,
                    "set_flag": 2,
                    "set_flag_and_value": 4,
                    "set_flags_and_value": 1,
                    "set_function_parameter": 1,
                    "set_global_value": 1,
                    "set_memory_access_permissions": 1,
                    "set_param_and_toggle_flag": 1,
                    "set_param_and_update_flag": 2,
                    "set_parameter_flag": 1,
                    "set_permission_bit": 1,
                    "set_register_value": 1,
                    "set_variable_flags": 1,
                    "store_parameter": 1,
                    "update_permissions": 1
                },
                "_DAT_4003d000": {
                    "data": 2,
                    "data_address": 1,
                    "data_ptr": 1,
                    "param": 1,
                    "param_value": 1,
                    "register": 1
                },
                "_DAT_4003d014": {
                    "data_flags": 1,
                    "data_register": 1,
                    "existing_value": 1,
                    "flag": 7,
                    "flag_register": 1,
                    "flag_value": 2,
                    "flags": 4,
                    "mask": 1,
                    "memory_access_config": 1,
                    "permission_flags": 1,
                    "register": 1,
                    "register_value": 2,
                    "some_flags": 1,
                    "status_register": 1,
                    "variable": 1
                },
                "param_1": {
                    "access_permissions": 1,
                    "config_param": 1,
                    "data": 4,
                    "data_value": 1,
                    "device_config": 1,
                    "flag": 1,
                    "flag_value": 3,
                    "new_data": 1,
                    "new_param": 1,
                    "new_value": 2,
                    "param": 1,
                    "parameter": 1,
                    "permission": 1,
                    "permissions": 1,
                    "value": 11
                }
            },
            "called": [],
            "calling": [
                "FUN_00002600"
            ],
            "code": "\n\n\nvoid set_flag_and_value_0000285c(undefined4 value)\n\n{\n  _DAT_4003d000 = value;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "current_name": "set_flag_and_value_0000285c",
            "entrypoint": "0x0000285c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000285c": "set_flag_and_value_0000285c",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002894": {
            "additional_data": {
                "DAT_1fff0da0": {
                    "config_value1": 1,
                    "config_value3": 1,
                    "data1": 1,
                    "data_register1": 1,
                    "irq_handler1": 1
                },
                "DAT_1fff0da4": {
                    "config_value2": 1,
                    "config_value4": 1,
                    "data2": 1,
                    "data_register2": 1,
                    "irq_handler2": 1
                },
                "FONG_00002894": {
                    "initialize_device": 1
                },
                "FUN_00002714": {
                    "handle_event": 1,
                    "process_data_byte": 1,
                    "process_input": 1
                },
                "FUN_00002744": {
                    "handle_event_with_param": 1,
                    "process_data_byte_and_value": 1,
                    "process_input_with_config": 1
                },
                "FUN_00002894": {
                    "configure_interrupts": 1,
                    "initialize_device": 1,
                    "initialize_function": 1,
                    "initialize_hardware": 2,
                    "initialize_interrupt": 6,
                    "initialize_interrupt_controller": 1,
                    "initialize_interrupts": 4,
                    "initialize_irq": 3,
                    "initialize_irq_handler": 1,
                    "initialize_peripheral": 9,
                    "initialize_periphipherals": 1
                },
                "NVIC_EnableIRQ": {
                    "enable_interrupt": 13,
                    "enable_irq": 1
                },
                "NVIC_SetPriority": {
                    "set_interrupt_priority": 11,
                    "set_priority": 3
                },
                "_DAT_4003d008": {
                    "adjusted_input_value": 2,
                    "adjusted_peripheral_id": 1,
                    "buffer_size": 1,
                    "counter": 1,
                    "device_count_updated": 1,
                    "device_counter": 1,
                    "interrupt_value": 1,
                    "modified_address": 1,
                    "modified_input_value": 2,
                    "modified_value": 1,
                    "operand_minus_one": 1,
                    "previous_param": 1,
                    "updated_input_value": 1,
                    "updated_value": 1,
                    "variable_x": 1
                },
                "_DAT_4003d01c": {
                    "control_reg": 1,
                    "control_register": 2,
                    "device_flags": 1,
                    "interrupt_config": 3,
                    "interrupt_enable_register": 1,
                    "interrupt_flag": 1,
                    "interrupt_flags": 2,
                    "irq_control_reg": 1,
                    "irq_setting": 1,
                    "modified_data_value1": 1,
                    "modified_register": 1,
                    "updated_config_value1": 1,
                    "updated_flag": 1,
                    "variable_y": 1
                },
                "param_1": {
                    "byte_value": 1,
                    "count": 1,
                    "data": 1,
                    "event": 1,
                    "initial_value": 3,
                    "input_num": 1,
                    "input_value": 13,
                    "interrupt_priority": 1,
                    "operand": 1,
                    "param": 1,
                    "parameter_1": 1,
                    "peripheral_address": 1,
                    "peripheral_id": 1,
                    "previous_priority": 1,
                    "value": 3
                },
                "param_2": {
                    "config": 2,
                    "config_param1": 1,
                    "config_parameter1": 1,
                    "config_value": 1,
                    "config_value1": 3,
                    "config_value_1": 1,
                    "data1": 4,
                    "data_value1": 1,
                    "data_value_1": 1,
                    "param": 1,
                    "param1": 1,
                    "param2": 1,
                    "param2_value": 1,
                    "param3": 1,
                    "param_a": 1,
                    "parameter1": 3,
                    "parameter2": 1,
                    "parameter_2": 1,
                    "priority": 1,
                    "value1": 4
                },
                "param_3": {
                    "config_param2": 1,
                    "config_parameter2": 1,
                    "config_value2": 5,
                    "config_value_2": 1,
                    "data2": 4,
                    "data_value2": 1,
                    "data_value_2": 1,
                    "initial_value2": 1,
                    "irq": 1,
                    "param2": 1,
                    "param3": 1,
                    "param3_value": 1,
                    "param4": 1,
                    "param_b": 1,
                    "parameter2": 3,
                    "parameter3": 1,
                    "parameter_3": 1,
                    "settings": 1,
                    "value2": 4
                }
            },
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "calling": [
                "FUN_00002654"
            ],
            "code": "\n\n\nvoid initialize_peripheral_00002894(int input_value,undefined4 value1,undefined4 config_value2)\n\n{\n  _DAT_4003d008 = input_value + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = value1;\n  DAT_1fff0da4 = config_value2;\n  set_interrupt_priority(0x2e,10);\n  enable_interrupt(0x2e);\n  return;\n}\n\n",
            "current_name": "initialize_peripheral_00002894",
            "entrypoint": "0x00002894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002894": "initialize_peripheral_00002894",
                "NVIC_EnableIRQ": "enable_interrupt",
                "NVIC_SetPriority": "set_interrupt_priority",
                "param_1": "input_value",
                "param_2": "value1",
                "param_3": "config_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000028f0": {
            "additional_data": {
                "1": {
                    "one": 1
                },
                "DAT_4003d008": {
                    "counter": 1
                },
                "FUN_000028f0": {
                    "get_incremented_value": 2,
                    "increment_and_get": 1,
                    "increment_and_return": 3,
                    "increment_counter": 1,
                    "increment_data": 1,
                    "increment_value": 21,
                    "increment_value_by_one": 1,
                    "incremented_value": 1
                },
                "_DAT_4003d008": {
                    "counter": 3,
                    "current_value": 8,
                    "data": 1,
                    "data_value": 2,
                    "incremented_value": 1,
                    "initial_value": 1,
                    "original_value": 7,
                    "value": 5,
                    "value_to_increment": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00002690"
            ],
            "code": "\n\n\nint increment_value_by_one_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "current_name": "increment_value_by_one_000028f0",
            "entrypoint": "0x000028f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000028f0": "increment_value_by_one_000028f0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002910": {
            "additional_data": {
                "": {
                    "": 2
                },
                "DAT_1fff0da0": {
                    "data1": 10,
                    "data_1": 1,
                    "data_value1": 1,
                    "data_variable1": 5,
                    "sensor_data1": 1,
                    "value1": 2,
                    "variable1": 2
                },
                "DAT_1fff0da4": {
                    "data2": 10,
                    "data_2": 1,
                    "data_value2": 1,
                    "data_variable2": 5,
                    "sensor_data2": 1,
                    "value2": 2,
                    "variable2": 2
                },
                "FUN_00002910": {
                    "clear_all_flags": 1,
                    "clear_bits_and_reset_values": 1,
                    "clear_data": 2,
                    "clear_data_registers": 1,
                    "clear_flags": 15,
                    "clear_register_flags": 1,
                    "clear_registers": 2,
                    "disable_interrupts": 2,
                    "initialize_data": 4,
                    "reset_data_variables": 1,
                    "reset_settings": 1
                },
                "_DAT_4003d008": {
                    "clear_flag": 1,
                    "control_register": 1,
                    "count_variable": 1,
                    "counter": 16,
                    "counter_variable": 3,
                    "data_register": 1,
                    "data_register2": 1,
                    "register_value": 2,
                    "register_value2": 1,
                    "reset_value": 1,
                    "status_register": 1,
                    "timer_control_register": 1
                },
                "_DAT_4003d01c": {
                    "config_flag": 1,
                    "config_register": 3,
                    "data_flag": 3,
                    "data_mask": 1,
                    "data_register1": 1,
                    "flag_register": 1,
                    "flag_variable": 2,
                    "flags": 11,
                    "flags_register": 1,
                    "interrupt_control_register": 1,
                    "interrupt_flags": 1,
                    "register_flags": 2,
                    "register_value": 1,
                    "status_flags": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000026c0"
            ],
            "code": "\n\n\nvoid clear_all_flags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "current_name": "clear_all_flags_00002910",
            "entrypoint": "0x00002910",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002910": "clear_all_flags_00002910"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000294c": {
            "additional_data": {
                "": {
                    "flag_value": 1
                },
                "0x4003d014": {
                    "status_flag": 1
                },
                "DAT_4003d014": {
                    "flag": 1
                },
                "FUN_0000294C": {
                    "set_flag": 1
                },
                "FUN_0000294c": {
                    "set_flag": 23,
                    "set_flag_bit": 1,
                    "set_flag_in_register": 2,
                    "set_flag_register": 1,
                    "set_flag_registers": 1,
                    "set_flag_value": 1,
                    "set_register_flag": 1
                },
                "_DAT_4003D014": {
                    "status_flag": 1
                },
                "_DAT_4003d014": {
                    "flag": 17,
                    "flag_register": 3,
                    "flag_value": 1,
                    "flag_variable": 1,
                    "register_value": 3,
                    "status_flag": 1,
                    "status_register": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "code": "\n\n\nvoid set_flag_in_register_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "current_name": "set_flag_in_register_0000294c",
            "entrypoint": "0x0000294c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000294c": "set_flag_in_register_0000294c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002970": {
            "additional_data": {
                "0xffffffef": {
                    "bit_mask": 1
                },
                "FUN_00002970": {
                    "clear_bit": 2,
                    "clear_bit_5": 1,
                    "clear_bit_in_memory": 1,
                    "clear_bit_in_register": 6,
                    "clear_bit_in_variable": 1,
                    "clear_flag": 2,
                    "clear_interrupt_bit": 1,
                    "clear_interrupt_flag": 16,
                    "clear_interrupt_flags": 1
                },
                "_DAT_4003d014": {
                    "config_register": 1,
                    "flag": 2,
                    "interrupt_control_register": 1,
                    "interrupt_flag": 15,
                    "interrupt_flag_register": 1,
                    "interrupt_register": 1,
                    "memory_value": 1,
                    "register_value": 7,
                    "status_register": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000026e4"
            ],
            "code": "\n\n\nvoid clear_interrupt_flag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "current_name": "clear_interrupt_flag_00002970",
            "entrypoint": "0x00002970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002994": {
            "additional_data": {
                "DAT_1fff0da0": {
                    "callback_func1": 2,
                    "callback_function1": 1,
                    "function_pointer1": 1,
                    "handler1": 2,
                    "handler_1": 1,
                    "handler_function_1": 1,
                    "interrupt_handler1": 1,
                    "isr_function_1": 1,
                    "pre_isr_callback": 1,
                    "task_1": 1
                },
                "DAT_1fff0da4": {
                    "arg1": 1,
                    "callback_arg1": 1,
                    "data1": 1,
                    "data_1": 2,
                    "handler_parameter_1": 1,
                    "interrupt_data1": 1,
                    "isr_arg_1": 1,
                    "param1": 1,
                    "param1_for_handler1": 1,
                    "parameter1": 1,
                    "pre_isr_data": 1
                },
                "DAT_1fff0da8": {
                    "callback_func2": 2,
                    "callback_function2": 1,
                    "function_pointer2": 1,
                    "handler2": 2,
                    "handler_2": 1,
                    "handler_function_2": 1,
                    "interrupt_handler2": 1,
                    "isr_function_2": 1,
                    "post_isr_callback": 1,
                    "task_2": 1
                },
                "DAT_1fff0dac": {
                    "arg2": 1,
                    "callback_arg2": 1,
                    "data2": 1,
                    "data_2": 2,
                    "handler_parameter_2": 1,
                    "interrupt_data2": 1,
                    "isr_arg_2": 1,
                    "param1_for_handler2": 1,
                    "param2": 1,
                    "parameter2": 1,
                    "post_isr_data": 1
                },
                "FUN_00002798": {
                    "clear_interrupt_flags": 1,
                    "cortexm_isr_end": 1,
                    "disable_interrupts": 1,
                    "execute_subfunction": 1,
                    "handle_dat1fff0da0": 1,
                    "initialize_interrupt": 1,
                    "initialize_isr_end": 1,
                    "initialize_system": 2,
                    "perform_additional_action": 2,
                    "perform_additional_operation": 1,
                    "perform_additional_processing": 1,
                    "perform_additional_task": 2,
                    "perform_cleanup": 3,
                    "perform_extra_task": 1,
                    "perform_task": 1,
                    "process_interrupt": 1,
                    "process_interrupt_end": 1,
                    "reset_interrupt": 1,
                    "reset_system": 1
                },
                "FUN_00002994": {
                    "execute_callbacks": 1,
                    "execute_function": 1,
                    "execute_interrupt": 1,
                    "execute_interrupt_handler": 2,
                    "execute_interrupt_handlers": 9,
                    "execute_interrupt_routine": 1,
                    "execute_interrupt_service_routine": 1,
                    "execute_interrupts": 1,
                    "execute_irq_handlers": 1,
                    "execute_isr": 5,
                    "execute_isr_callbacks": 1,
                    "execute_isr_functions": 2,
                    "execute_isr_handlers": 1,
                    "execute_isr_tasks": 1,
                    "process_interrupt": 1
                },
                "PTR_4003d014": {
                    "interrupt_flags": 1
                },
                "PTR_4003d01c": {
                    "interrupt_control": 1
                },
                "_DAT_4003d014": {
                    "interrupt_flags": 4,
                    "interrupt_status": 1,
                    "status_register": 2
                },
                "_DAT_4003d01c": {
                    "control_register": 1,
                    "interrupt_control": 3,
                    "interrupt_enable_flags": 1,
                    "register": 1,
                    "register_1": 1
                }
            },
            "called": [
                "FUN_00002798"
            ],
            "calling": [],
            "code": "\n\n\nvoid execute_interrupt_handlers_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  cortexm_isr_end();\n  return;\n}\n\n",
            "current_name": "execute_interrupt_handlers_00002994",
            "entrypoint": "0x00002994",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002994": "execute_interrupt_handlers_00002994"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002a00": {
            "additional_data": {
                "FUN_00002a00": {
                    "output_character": 2,
                    "print_char": 1,
                    "print_character": 28
                },
                "FUN_00004cb4": {
                    "calculate_checksum": 3,
                    "calculate_some_value": 1,
                    "calculate_something": 1,
                    "convert_character": 1,
                    "count_set_bits": 1,
                    "modify_value": 2,
                    "process_number": 1,
                    "process_u_int": 1,
                    "process_value": 1,
                    "reverse_bits": 7,
                    "transform_parameter": 1,
                    "transform_value": 1
                },
                "param_1": {
                    "character": 10,
                    "character_to_print": 1,
                    "data": 3,
                    "input": 4,
                    "input_character": 1,
                    "number": 3,
                    "number_to_reverse": 1,
                    "value": 7,
                    "value_to_modify": 1
                },
                "putchar": {
                    "output_character": 3,
                    "print": 6,
                    "print_char": 5,
                    "print_character": 3,
                    "print_character_to_console": 2
                }
            },
            "called": [
                "FUN_00004cb4"
            ],
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "code": "\nvoid print_character_00002a00(undefined4 character)\n\n{\n  print(character);\n  return;\n}\n\n",
            "current_name": "print_character_00002a00",
            "entrypoint": "0x00002a00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002a00": "print_character_00002a00",
                "param_1": "character",
                "putchar": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002a18": {
            "additional_data": {
                "FUN_00002a18": {
                    "find_command_index": 1,
                    "find_func_in_list": 1,
                    "find_match": 1,
                    "find_match_in_array": 1,
                    "find_parameter_index": 1,
                    "find_parameter_value": 3,
                    "find_reboot_code": 1,
                    "find_string_in_array": 1,
                    "find_string_index": 2,
                    "find_string_offset": 1,
                    "find_value": 3,
                    "find_value_by_key": 1,
                    "find_value_by_keyword": 1,
                    "find_value_by_name": 1,
                    "find_value_by_param": 1,
                    "find_value_by_string": 2,
                    "find_value_in_array": 6,
                    "find_value_index": 1,
                    "search_for_string": 1,
                    "search_string": 1
                },
                "FUN_00004e52": {
                    "compare_byte_arrays": 1,
                    "compare_byte_strings": 1,
                    "compare_bytes": 2,
                    "compare_strings": 1
                },
                "iVar1": {
                    "compare_result": 2,
                    "comparison_result": 9,
                    "result": 1
                },
                "local_10": {
                    "array_index": 3,
                    "array_length": 1,
                    "current_index": 2,
                    "index": 21,
                    "outer_index": 1,
                    "parameter_index": 1,
                    "reboot_string_index": 1,
                    "value_index": 1
                },
                "local_14": {
                    "message_pointer": 1,
                    "reboot_message": 8,
                    "reboot_msg": 2,
                    "reboot_pointer": 1,
                    "reboot_str": 1,
                    "reboot_string": 6,
                    "reboot_string_pointer": 4,
                    "reboot_string_ptr": 1,
                    "reboot_strings": 5,
                    "string_array": 1
                },
                "local_18": {
                    "array_pointer": 6,
                    "array_ptr": 1,
                    "current_array": 7,
                    "current_code": 1,
                    "current_command": 1,
                    "current_func": 1,
                    "current_list": 1,
                    "current_parameter": 3,
                    "current_string": 1,
                    "current_value": 3,
                    "input_array": 2,
                    "outer_array": 1,
                    "param_array": 2,
                    "value_ptr": 1
                },
                "local_c": {
                    "current_array": 1,
                    "current_array_element": 1,
                    "current_array_pointer": 2,
                    "current_element": 3,
                    "current_entry": 2,
                    "current_param": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "current_string": 10,
                    "current_string_pointer": 1,
                    "current_sub_array": 1,
                    "current_token": 1,
                    "current_value": 3,
                    "current_value_ptr": 1,
                    "inner_array": 1,
                    "sub_array_pointer": 1
                },
                "param_1": {
                    "array": 12,
                    "array_of_arrays": 1,
                    "code_list": 1,
                    "command_list": 1,
                    "function_list": 1,
                    "input_array": 1,
                    "parameter_array": 1,
                    "parameter_list": 2,
                    "parameters": 1,
                    "search_list": 1,
                    "string_array": 4,
                    "value_array": 1,
                    "value_list": 1,
                    "values": 2,
                    "values_array": 1
                },
                "param_2": {
                    "command_name": 1,
                    "function_name": 1,
                    "keyword": 1,
                    "name": 1,
                    "param": 1,
                    "search_key": 3,
                    "search_string": 6,
                    "search_value": 5,
                    "target": 1,
                    "target_reboot": 1,
                    "target_str": 1,
                    "target_string": 5,
                    "target_value": 1,
                    "value": 3
                },
                "strcmp": {
                    "compare_strings": 1
                }
            },
            "called": [
                "FUN_00004e52"
            ],
            "calling": [
                "FUN_00002b10"
            ],
            "code": "\nint find_value_in_array_00002a18(int *array,undefined4 search_string)\n\n{\n  int comparison_result;\n  int *current_array;\n  undefined **reboot_message;\n  uint index;\n  int *current_string;\n  \n  current_array = array;\n  reboot_message = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    current_string = (&current_array)[index];\n    if (current_string != (int *)0x0) {\n      for (; *current_string != 0; current_string = current_string + 3) {\n        comparison_result = compare_strings(*current_string,search_string);\n        if (comparison_result == 0) {\n          return current_string[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "current_name": "find_value_in_array_00002a18",
            "entrypoint": "0x00002a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002a18": "find_value_in_array_00002a18",
                "iVar1": "comparison_result",
                "local_10": "index",
                "local_14": "reboot_message",
                "local_18": "current_array",
                "local_c": "current_string",
                "param_1": "array",
                "param_2": "search_string",
                "strcmp": "compare_strings"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002a88": {
            "additional_data": {
                "FUN_00002a88": {
                    "display_command_descriptions": 6,
                    "display_commands": 1,
                    "print_command_description": 5,
                    "print_command_descriptions": 18,
                    "print_commands": 1
                },
                "FUN_00004c84": {
                    "print_with_params": 1,
                    "reboot": 1
                },
                "FUN_00004db8": {
                    "get_command_description": 1,
                    "retrieve_value": 1
                },
                "local_10": {
                    "command_index": 10,
                    "i": 4,
                    "index": 17
                },
                "local_14": {
                    "command_description": 14,
                    "command_descriptions": 3,
                    "command_names": 2,
                    "command_strings": 1,
                    "commands_descriptions": 1,
                    "description": 1,
                    "description_array": 1,
                    "description_list": 1,
                    "description_ptr": 1,
                    "descriptions": 2,
                    "reboot_description": 1,
                    "reboot_description_array": 1,
                    "reboot_string": 2
                },
                "local_18": {
                    "command": 1,
                    "current_command": 30
                },
                "local_c": {
                    "command": 2,
                    "current": 1,
                    "current_argument": 2,
                    "current_command": 1,
                    "current_command_info": 1,
                    "current_description": 7,
                    "current_item": 2,
                    "current_param": 5,
                    "current_parameter": 10
                },
                "param_1": {
                    "command_array": 2,
                    "command_list": 12,
                    "commands": 15,
                    "commands_array": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "calling": [
                "FUN_00002b10"
            ],
            "code": "\nvoid print_command_descriptions_00002a88(int *commands)\n\n{\n  int *current_command;\n  undefined **command_description;\n  uint index;\n  int *current_parameter;\n  \n  iprintf(\"%-20s %s\\n\",\"Command\",\"Description\");\n  puts(\"---------------------------------------\");\n  current_command = commands;\n  command_description = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    current_parameter = (&current_command)[index];\n    if (current_parameter != (int *)0x0) {\n      for (; *current_parameter != 0; current_parameter = current_parameter + 3) {\n        iprintf(\"%-20s %s\\n\",*current_parameter,current_parameter[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "print_command_descriptions_00002a88",
            "entrypoint": "0x00002a88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "local_10": "index",
                "local_14": "command_description",
                "local_18": "current_command",
                "local_c": "current_parameter",
                "param_1": "commands"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002b10": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "error_messages": 1
                },
                "FUN_00002a18": {
                    "print_help": 2,
                    "process_data": 1
                },
                "FUN_00002a88": {
                    "cleanup_data": 1,
                    "execute_command": 1,
                    "iprintf": 1
                },
                "FUN_00002b10": {
                    "parse_and_execute_command": 2,
                    "parse_command": 9,
                    "parse_input": 2,
                    "parse_input_and_execute": 1,
                    "process_command": 6,
                    "process_input": 9,
                    "process_string_input": 1
                },
                "FUN_00004c84": {
                    "decompress_data": 1,
                    "find_handler": 2
                },
                "FUN_00004db8": {
                    "retrieve_data": 1,
                    "strcmp": 2
                },
                "FUN_00004e52": {
                    "parse_command": 1,
                    "puts": 1,
                    "validate_data": 1
                },
                "find_handler": {
                    "find_command_handler": 1,
                    "find_matching_handler": 1
                },
                "iVar1": {
                    "cmp_result": 1,
                    "comparison_result": 7,
                    "result": 3,
                    "strcmp_result": 3
                },
                "iprintf": {
                    "custom_printf_function": 1,
                    "print_formatted_string": 1
                },
                "local_14": {
                    "cur_char_ptr": 1,
                    "curr_char": 2,
                    "curr_char_ptr": 1,
                    "current_byte": 3,
                    "current_char": 7,
                    "current_char_ptr": 4,
                    "current_character": 4,
                    "current_pos": 1,
                    "current_position": 1,
                    "current_token": 1,
                    "next_byte": 1,
                    "parse_pointer": 1,
                    "ptr_to_command": 1,
                    "string_pointer": 1,
                    "token_ptr": 1
                },
                "local_17": {
                    "end_of_string": 1
                },
                "local_18": {
                    "arg_count": 1,
                    "num_args": 1,
                    "num_arguments_processed": 1,
                    "num_commands": 1,
                    "num_quotes": 11,
                    "num_words": 1,
                    "quote_count": 12,
                    "quoted_param_count": 1,
                    "token_count": 1
                },
                "local_1c": {
                    "backslash_count": 2,
                    "backslash_flag": 1,
                    "backward_slash_count": 1,
                    "escape_char_count": 1,
                    "escape_count": 12,
                    "num_backslashes": 2,
                    "num_esc_chars": 1,
                    "num_escaped_chars": 1,
                    "num_escapes": 7,
                    "num_quotes": 1,
                    "slash_count": 1
                },
                "local_20": {
                    "arg_index": 9,
                    "argument_index": 1,
                    "command_index": 1,
                    "current_command_index": 1,
                    "current_index": 1,
                    "i": 4,
                    "idx": 1,
                    "index": 7,
                    "loop_counter": 1,
                    "param_index": 2,
                    "token_index": 2
                },
                "local_24": {
                    "all_args": 1,
                    "arg_array": 2,
                    "arg_list": 3,
                    "arg_ptr": 2,
                    "arg_ptrs": 1,
                    "args_ptr": 1,
                    "argument_array": 1,
                    "argument_list": 2,
                    "arguments_array": 1,
                    "command_list": 1,
                    "command_pointer_array": 1,
                    "command_ptr_array": 1,
                    "command_ptr_list": 1,
                    "cur_arg_list": 1,
                    "curr_arg_ptr": 1,
                    "current_arg": 1,
                    "current_arg_ptr": 1,
                    "current_argument_pointer": 1,
                    "current_command_array": 1,
                    "current_param": 1,
                    "token_list": 1,
                    "token_pointer": 2,
                    "token_ptr_list": 1
                },
                "local_28": {
                    "arg": 1,
                    "command_string": 1,
                    "cur_arg": 1,
                    "curr_arg": 1,
                    "current_arg": 11,
                    "current_argument": 6,
                    "current_command": 1,
                    "current_token": 2,
                    "outer_pointer": 1,
                    "param": 1,
                    "param_ptr": 1,
                    "str_ptr": 1,
                    "token": 1
                },
                "local_2c": {
                    "backslash_count": 1,
                    "char_ptr": 1,
                    "cur_char": 1,
                    "curr_char": 1,
                    "current_char": 13,
                    "current_character": 2,
                    "esc_char": 1,
                    "escape_char": 5,
                    "escape_character": 1,
                    "escaped_char": 1,
                    "inner_pointer": 1,
                    "temp_char": 1
                },
                "local_2d": {
                    "quote": 2,
                    "quote_char": 18,
                    "quote_character": 5,
                    "quote_type": 4
                },
                "local_34": {
                    "arg_count": 3,
                    "args_count": 1,
                    "argument_count": 1,
                    "array_length": 1,
                    "command_arg_count": 1,
                    "command_count": 1,
                    "num_args": 9,
                    "num_arguments": 5,
                    "num_commands": 2,
                    "num_params": 1,
                    "num_tokens": 3,
                    "param_array_size": 1,
                    "token_count": 1
                },
                "local_38": {
                    "arg_array": 2,
                    "arg_ptr_array": 1,
                    "args": 4,
                    "args_array": 1,
                    "argument_array": 1,
                    "arguments": 2,
                    "command_args": 7,
                    "command_arguments": 2,
                    "command_array": 2,
                    "command_list": 1,
                    "command_tokens": 1,
                    "input_arguments": 1,
                    "param_pointers": 1,
                    "param_ptr_array": 1,
                    "token_array": 1,
                    "token_list": 1,
                    "tokens": 1
                },
                "local_3c": {
                    "command_handler": 18,
                    "function_pointer": 1,
                    "handler": 4,
                    "handler_func": 1,
                    "handler_function": 5,
                    "handler_function_ptr": 1
                },
                "local_48": {
                    "args_array": 1,
                    "arguments": 1,
                    "command_args": 3,
                    "command_array": 2,
                    "command_list": 1,
                    "command_params": 2,
                    "command_ptrs": 1,
                    "command_string_array": 1,
                    "command_strings": 1,
                    "command_tokens": 1,
                    "commands": 1,
                    "handler_param_string": 1,
                    "input_args": 1,
                    "input_array": 2,
                    "input_buffer": 1,
                    "input_string_ptr": 1,
                    "output_strings": 1,
                    "param_and_command": 1,
                    "param_array": 1,
                    "processed_inputs": 1,
                    "start_pointer": 1,
                    "string_pointers": 1,
                    "token_array": 1
                },
                "param_1": {
                    "arg1": 1,
                    "argc": 1,
                    "context": 1,
                    "flags": 1,
                    "handler": 2,
                    "handler_param": 1,
                    "input_length": 2,
                    "param": 2,
                    "param1": 9,
                    "param_1": 7,
                    "param_count": 1,
                    "param_length": 1,
                    "param_num_args": 1,
                    "param_ptr": 1
                },
                "param_2": {
                    "argv": 1,
                    "command": 8,
                    "command_string": 5,
                    "input": 2,
                    "input_data": 2,
                    "input_str": 1,
                    "input_string": 9,
                    "param2": 2,
                    "param_input_string": 1
                },
                "pbVar2": {
                    "byte_ptr": 1,
                    "current_byte": 1,
                    "next_byte": 4,
                    "next_char": 4,
                    "next_character": 1,
                    "temp_pointer": 1
                },
                "print_help": {
                    "display_help": 1,
                    "print_help_message": 1
                },
                "puts": {
                    "print_string": 1
                },
                "strcmp": {
                    "compare_strings": 1,
                    "custom_string_comparison": 1
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00002a18",
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00002a88"
            ],
            "calling": [
                "FUN_00002e6c"
            ],
            "code": "\nvoid parse_and_execute_command_00002b10(undefined4 param1,byte *input_string)\n\n{\n  int comparison_result;\n  byte *next_char;\n  byte *command_args [3];\n  code *command_handler;\n  char **command_args;\n  uint num_args;\n  byte quote_char;\n  char *current_char;\n  char *current_arg;\n  char **arg_list;\n  uint arg_index;\n  int escape_count;\n  uint quote_count;\n  byte *current_char;\n  \n  quote_count = 0;\n  escape_count = 0;\n  current_char = input_string;\n  while( true ) {\n    command_args[0] = input_string;\n    command_args[1] = (byte *)param1;\n    if (0x20 < *current_char) {\n      if ((*current_char == 0x22) || (*current_char == 0x27)) {\n        quote_char = *current_char;\n        do {\n          next_char = current_char + 1;\n          if (*next_char == 0) {\n            current_char = next_char;\n            print_string(error_messages[9].r_info);\n            return;\n          }\n          if (*next_char == 0x5c) {\n            escape_count = escape_count + 1;\n            current_char = current_char + 2;\n            next_char = current_char;\n            if (*current_char == 0) {\n              print_string(error_messages[9].r_info);\n              return;\n            }\n          }\n          current_char = next_char;\n        } while (quote_char != *current_char);\n        if (0x20 < current_char[1]) {\n          print_string(error_messages[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*current_char == 0x5c) {\n            escape_count = escape_count + 1;\n            current_char = current_char + 1;\n            if (*current_char == 0) {\n              print_string(error_messages[9].r_info);\n              return;\n            }\n          }\n          current_char = current_char + 1;\n          if (*current_char == 0x22) {\n            print_string(error_messages[9].r_info);\n            return;\n          }\n        } while (0x20 < *current_char);\n      }\n      quote_count = quote_count + 1;\n    }\n    if (*current_char == 0) break;\n    *current_char = 0;\n    current_char = current_char + 1;\n  }\n  if (quote_count != 0) {\n    num_args = quote_count;\n    command_args = (char **)((int)command_args - ((quote_count + 1) * 4 + 7 & 0xfffffff8));\n    command_args[quote_count] = (char *)0x0;\n    current_char = input_string;\n    for (arg_index = 0; arg_list = command_args, arg_index < quote_count; arg_index = arg_index + 1) {\n      for (; *current_char == 0; current_char = current_char + 1) {\n      }\n      if ((*current_char == 0x22) || (*current_char == 0x27)) {\n        current_char = current_char + 1;\n      }\n      command_args[arg_index] = (char *)current_char;\n      for (; *current_char != 0; current_char = current_char + 1) {\n      }\n    }\n    for (; (escape_count != 0 && (*arg_list != (char *)0x0)); arg_list = arg_list + 1) {\n      for (current_arg = *arg_list; *current_arg != '\\0'; current_arg = current_arg + 1) {\n        if (*current_arg == '\\') {\n          for (current_char = current_arg; *current_char != '\\0'; current_char = current_char + 1) {\n            *current_char = current_char[1];\n          }\n          escape_count = escape_count + -1;\n          if (escape_count == 0) break;\n        }\n      }\n    }\n    command_handler = (code *)find_matching_handler(param1,*command_args);\n    if (command_handler == (code *)0x0) {\n      comparison_result = compare_strings(&DAT_00007214,*command_args);\n      if (comparison_result == 0) {\n        display_help(command_args[1]);\n      }\n      else {\n        print_formatted_string(\"shell: command not found: %s\\n\",*command_args);\n      }\n    }\n    else {\n      (*command_handler)(quote_count,command_args);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "parse_and_execute_command_00002b10",
            "entrypoint": "0x00002b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "error_messages",
                "FUN_00002b10": "parse_and_execute_command_00002b10",
                "find_handler": "find_matching_handler",
                "iVar1": "comparison_result",
                "iprintf": "print_formatted_string",
                "local_14": "current_char",
                "local_18": "quote_count",
                "local_1c": "escape_count",
                "local_20": "arg_index",
                "local_24": "arg_list",
                "local_28": "current_arg",
                "local_2c": "current_char",
                "local_2d": "quote_char",
                "local_34": "num_args",
                "local_38": "command_args",
                "local_3c": "command_handler",
                "local_48": "command_args",
                "param_1": "param1",
                "param_2": "input_string",
                "pbVar2": "next_char",
                "print_help": "display_help",
                "puts": "print_string",
                "strcmp": "compare_strings"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002d94": {
            "called": [
                "FUN_00002a00",
                "FUN_00004418"
            ],
            "calling": [
                "FUN_00002e6c"
            ],
            "code": "\nuint FUNC_00002d94(undefined *param_1,int param_2)\n\n{\n  int iVar1;\n  byte bVar2;\n  bool bVar3;\n  undefined *local_c;\n  \n  local_c = param_1;\n  while( true ) {\n    if (param_2 + -1 <= (int)local_c - (int)param_1) {\n      return 0xffffffff;\n    }\n    iVar1 = getchar();\n    if (iVar1 < 0) break;\n    if ((iVar1 == 0xd) || (iVar1 == 10)) {\n      *local_c = 0;\n      _putchar(0xd);\n      _putchar(10);\n      bVar3 = local_c == param_1;\n      if (bVar3) {\n        param_1 = (undefined *)0x1;\n      }\n      bVar2 = (byte)param_1;\n      if (!bVar3) {\n        bVar2 = 0;\n      }\n      return (uint)bVar2;\n    }\n    if ((iVar1 == 8) || (iVar1 == 0x7f)) {\n      if (local_c != param_1) {\n        local_c = local_c + -1;\n        *local_c = 0;\n        _putchar(8);\n        _putchar(0x20);\n        _putchar(8);\n      }\n    }\n    else {\n      *local_c = (char)iVar1;\n      _putchar(iVar1);\n      local_c = local_c + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "FUNC_00002d94",
            "entrypoint": "0x00002d94",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00002d94": "FUNC_00002d94"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00002e48": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "array": 1,
                    "elf_rel_array": 2,
                    "rel_array": 2,
                    "relocation_array": 2,
                    "symbol_table": 1
                },
                "FUN_00002a00": {
                    "display_message": 2,
                    "execute_action": 1,
                    "flush_buffer": 1,
                    "flush_output": 1,
                    "print_char": 5,
                    "print_character": 17,
                    "print_message": 1
                },
                "FUN_00002e48": {
                    "print_arrow": 7,
                    "print_arrow_and_space": 11,
                    "print_characters": 1,
                    "print_greater_and_space": 2,
                    "print_greater_than_or_equal": 1,
                    "print_greater_than_or_space": 1,
                    "print_greater_than_sign": 1,
                    "print_greater_than_space": 5,
                    "print_greater_than_space_and_flush": 1,
                    "print_symbols": 1
                },
                "FUN_000041d0": {
                    "calculate_checksum": 1,
                    "compute_value": 1,
                    "do_something": 1,
                    "perform_action": 1,
                    "perform_calculation": 1,
                    "perform_operation": 7,
                    "process": 1,
                    "process_data": 5,
                    "process_input": 3,
                    "process_inputs": 1,
                    "process_int": 1,
                    "reverse_and_print": 2,
                    "reverse_bits": 1,
                    "reverse_bytes": 1,
                    "reverse_characters": 1
                },
                "_putchar": {
                    "print_char": 1,
                    "print_character": 4
                },
                "fflush": {
                    "flush_buffer": 1,
                    "flush_output_buffer": 1,
                    "flush_stream": 1
                },
                "param_1": {
                    "action_param": 1,
                    "c": 1,
                    "char_param": 1,
                    "data": 1,
                    "input": 4,
                    "input_length": 1,
                    "input_param": 1,
                    "input_value": 1,
                    "stream": 1,
                    "value": 2
                },
                "param_2": {
                    "arg1": 3,
                    "param": 1,
                    "param1": 1,
                    "param2": 4,
                    "size": 1,
                    "unused_param": 2,
                    "unused_param1": 1,
                    "var2": 1
                },
                "param_3": {
                    "arg2": 3,
                    "index": 1,
                    "param2": 1,
                    "param3": 4,
                    "param_2": 1,
                    "unused_param": 2,
                    "unused_param2": 1,
                    "var3": 1
                },
                "r_offset": {
                    "offset": 6,
                    "rel_offset": 2
                }
            },
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "calling": [
                "FUN_00002e6c"
            ],
            "code": "\nvoid print_arrow_and_space_00002e48(void)\n\n{\n  print_character(0x3e);\n  print_character(0x20);\n  flush_output_buffer(*(undefined4 *)(rel_array[16].offset + 8));\n  return;\n}\n\n",
            "current_name": "print_arrow_and_space_00002e48",
            "entrypoint": "0x00002e48",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_00002e48": "print_arrow_and_space_00002e48",
                "_putchar": "print_character",
                "fflush": "flush_output_buffer",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "additional_data": {
                "FUN_00002b10": {
                    "format_input": 1,
                    "print_prompt": 2
                },
                "FUN_00002d94": {
                    "find_null_byte": 1,
                    "readline": 2
                },
                "FUN_00002e48": {
                    "handle_input_line": 2,
                    "print_prompt": 1
                },
                "FUN_00002e6c": {
                    "handle_input_loop": 2,
                    "handle_user_input": 3,
                    "input_loop": 6,
                    "interactive_input": 2,
                    "process_input": 2,
                    "process_input_loop": 1,
                    "read_and_handle_input": 7,
                    "read_input_and_handle": 1,
                    "read_input_lines": 1,
                    "read_input_loop": 2,
                    "read_input_until_exit": 1,
                    "readline_and_handle_input": 1,
                    "readline_loop": 2
                },
                "handle_input_line": {
                    "process_input": 1,
                    "process_input_line": 4
                },
                "iVar1": {
                    "read_result": 19,
                    "read_retval": 1,
                    "read_status": 2,
                    "readline_result": 4
                },
                "param_1": {
                    "arg1": 6,
                    "arg_1": 2,
                    "exit_flag": 1,
                    "output_stream": 1,
                    "param": 1,
                    "param1": 3,
                    "param_1": 4,
                    "param_prompt": 8,
                    "param_prompt_message": 1,
                    "param_value": 1,
                    "prompt": 1,
                    "prompt_handle": 1
                },
                "param_2": {
                    "arg2": 5,
                    "arg_2": 2,
                    "buffer": 3,
                    "input_buffer": 7,
                    "param2": 3,
                    "param_2": 1,
                    "param_buf": 2,
                    "param_buffer": 6,
                    "param_input_buffer": 1
                },
                "param_3": {
                    "arg3": 5,
                    "arg_3": 2,
                    "buffer_size": 7,
                    "input_buffer_size": 1,
                    "param3": 3,
                    "param_3": 1,
                    "param_buffer_size": 3,
                    "param_len": 1,
                    "param_length": 4,
                    "param_n": 1,
                    "size": 2
                },
                "print_prompt": {
                    "display_prompt": 5
                },
                "readline": {
                    "get_input_line": 1,
                    "read_input": 2,
                    "read_input_line": 1,
                    "read_line": 1
                }
            },
            "called": [
                "FUN_00002b10",
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "calling": [
                "FUN_000023a4"
            ],
            "code": "\nvoid readline_and_handle_input_00002e6c(undefined4 param_prompt,undefined4 input_buffer,undefined4 buffer_size)\n\n{\n  int read_result;\n  \n  display_prompt();\n  do {\n    read_result = read_input(input_buffer,buffer_size);\n    if (read_result == 0) {\n      process_input_line(param_prompt,input_buffer);\n    }\n    display_prompt();\n  } while( true );\n}\n\n",
            "current_name": "readline_and_handle_input_00002e6c",
            "entrypoint": "0x00002e6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002e6c": "readline_and_handle_input_00002e6c",
                "handle_input_line": "process_input_line",
                "iVar1": "read_result",
                "param_1": "param_prompt",
                "param_2": "input_buffer",
                "param_3": "buffer_size",
                "print_prompt": "display_prompt",
                "readline": "read_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "additional_data": {
                "FUN_00002e9c": {
                    "reboot_and_return_status": 1,
                    "reboot_and_return_zero": 2,
                    "reboot_device": 1,
                    "reboot_system": 27
                },
                "FUN_00003688": {
                    "clean_memory": 1,
                    "handle_reboot": 1,
                    "perform_additional_task": 1,
                    "perform_additional_tasks": 2,
                    "perform_cleanup": 21,
                    "perform_reset": 1,
                    "reboot_device": 1,
                    "shutdown_device": 2,
                    "shutdown_system": 1
                }
            },
            "called": [
                "FUN_00003688"
            ],
            "calling": [],
            "code": "\nundefined4 reboot_system_00002e9c(void)\n\n{\n  pm_reboot();\n  return 0;\n}\n\n",
            "current_name": "reboot_system_00002e9c",
            "entrypoint": "0x00002e9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002e9c": "reboot_system_00002e9c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "additional_data": {
                "FUN_0000211c": {
                    "display_message": 1,
                    "display_ps_info": 1,
                    "initialize_device": 1,
                    "initialize_resources": 1,
                    "perform_additional_task": 2,
                    "perform_additional_tasks": 1,
                    "perform_initialization": 2,
                    "perform_ps_operation": 2,
                    "perform_subtask_2": 1,
                    "print_information": 1,
                    "print_message": 1,
                    "print_ps": 1,
                    "print_ps_data": 1,
                    "print_ps_info": 3,
                    "print_ps_message": 3,
                    "print_ps_status": 1,
                    "print_status": 2,
                    "print_string": 1,
                    "verify_conditions": 1
                },
                "FUN_00002eb4": {
                    "execute_function": 1,
                    "execute_function_ps": 1,
                    "execute_initialization": 1,
                    "execute_main_function": 1,
                    "execute_main_program": 1,
                    "execute_main_task": 1,
                    "execute_parsing": 1,
                    "execute_presentation": 1,
                    "execute_program": 1,
                    "execute_ps_function": 19,
                    "initialize": 1,
                    "initialize_and_execute_task": 1,
                    "initialize_system": 1
                },
                "ps": {
                    "execute_system_command": 1,
                    "parse_data": 1,
                    "perform_initialization": 1,
                    "perform_subtask_1": 1,
                    "perform_system_initialization": 1,
                    "print_something": 1,
                    "print_status": 2
                }
            },
            "called": [
                "FUN_0000211c"
            ],
            "calling": [],
            "code": "\nundefined4 execute_function_ps_00002eb4(void)\n\n{\n  print_status();\n  return 0;\n}\n\n",
            "current_name": "execute_function_ps_00002eb4",
            "entrypoint": "0x00002eb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002eb4": "execute_function_ps_00002eb4",
                "ps": "print_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "additional_data": {
                "FUN_00002ecc": {
                    "read_and_dump_data": 4,
                    "read_and_dump_from_device": 1,
                    "read_and_dump_sensor_data": 2,
                    "read_and_print_device_data": 2,
                    "read_and_print_device_info": 2,
                    "read_data_from_device": 4,
                    "read_device_data": 4,
                    "read_from_device": 12
                },
                "auStack_1c": {
                    "data_buffer": 26,
                    "device_data": 1,
                    "sensor_data": 3
                },
                "local_14": {
                    "bytes_read": 2,
                    "data_length": 1,
                    "data_size": 18,
                    "num_bytes_read": 1,
                    "read_result": 8
                },
                "param_1": {
                    "device_id": 1,
                    "device_index": 1,
                    "device_num": 2,
                    "device_number": 27
                },
                "param_2": {
                    "device_addr": 1,
                    "device_address": 28,
                    "device_ptr": 1,
                    "saul_register": 1
                },
                "uVar1": {
                    "class_name": 2,
                    "class_str": 2,
                    "class_string": 7,
                    "class_to_string": 3,
                    "class_to_string_result": 1,
                    "device_class": 1,
                    "device_class_name": 1,
                    "device_class_str": 2,
                    "device_class_string": 2,
                    "device_info": 1,
                    "device_str": 2,
                    "device_type": 3,
                    "sensor_class_string": 1,
                    "sensor_name": 1,
                    "str_ptr": 1,
                    "string_value": 1
                },
                "uVar2": {
                    "class_value": 1,
                    "data": 1,
                    "data_ptr": 1,
                    "data_value": 1,
                    "device_data": 3,
                    "device_id": 1,
                    "device_info": 1,
                    "device_name": 8,
                    "device_str": 1,
                    "device_string": 2,
                    "device_type": 8,
                    "device_type_string": 1,
                    "sensor_type": 2
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003d64",
                "FUN_00003694"
            ],
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "code": "\nvoid read_data_from_device_00002ecc(undefined4 device_number,int device_address)\n\n{\n  undefined4 class_string;\n  undefined4 device_type;\n  undefined data_buffer [8];\n  uint data_size;\n  \n  data_size = saul_reg_read(device_address,data_buffer);\n  if ((int)data_size < 1) {\n    iprintf(\"error: failed to read from device #%i\\n\",device_number);\n  }\n  else {\n    device_type = *(undefined4 *)(device_address + 8);\n    class_string = saul_class_to_str(*(undefined *)(*(int *)(device_address + 0xc) + 8));\n    iprintf(\"Reading from #%i (%s|%s)\\n\",device_number,device_type,class_string);\n    phydat_dump(data_buffer,data_size & 0xff);\n  }\n  return;\n}\n\n",
            "current_name": "read_data_from_device_00002ecc",
            "entrypoint": "0x00002ecc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002ecc": "read_data_from_device_00002ecc",
                "auStack_1c": "data_buffer",
                "local_14": "data_size",
                "param_1": "device_number",
                "param_2": "device_address",
                "uVar1": "class_string",
                "uVar2": "device_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002f30": {
            "additional_data": {
                "FUN_00002ecc": {
                    "call_probe": 1,
                    "probe": 4
                },
                "FUN_00002f30": {
                    "enumerate_and_probe_items": 1,
                    "enumerate_probes": 1,
                    "iterate_and_probe": 16,
                    "iterate_over_list": 1,
                    "iterate_probe_functions": 1,
                    "iterate_probes": 4,
                    "print_data_and_increment_index": 1,
                    "print_probe_results": 1,
                    "print_probes": 2,
                    "probe_devices": 1,
                    "process_data": 1,
                    "traverse_and_print": 1
                },
                "FUN_00004db8": {
                    "calculate_something": 1,
                    "convert_to_unsigned": 1,
                    "dereference_probe": 1,
                    "process_data": 1,
                    "process_value": 1,
                    "reverse_data": 1
                },
                "local_10": {
                    "count": 2,
                    "counter": 5,
                    "index": 6,
                    "index_counter": 1,
                    "item_index": 1,
                    "iteration_count": 7,
                    "iteration_index": 1,
                    "iterator": 1,
                    "probe_count": 1,
                    "probe_counter": 1,
                    "probe_index": 5
                },
                "local_c": {
                    "current": 1,
                    "current_address": 2,
                    "current_device": 1,
                    "current_element": 1,
                    "current_item": 2,
                    "current_node": 5,
                    "current_pointer": 3,
                    "current_probe": 6,
                    "current_ptr": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "head_ptr": 1,
                    "linked_list_item": 1,
                    "probe_list": 2,
                    "probe_list_ptr": 1
                },
                "param_1": {
                    "data": 1,
                    "device_list": 1,
                    "index": 1,
                    "param1": 2,
                    "pointer": 1,
                    "probe_address": 1,
                    "probe_count": 1,
                    "probe_param": 1,
                    "probe_value": 1,
                    "undefined": 1,
                    "value": 1
                },
                "param_2": {
                    "count": 2,
                    "counter": 1,
                    "device_count": 1,
                    "index": 3,
                    "param2": 2,
                    "pointer": 1,
                    "probe_address": 1,
                    "probe_data": 1,
                    "probe_index": 1
                },
                "probe": {
                    "do_probe": 1,
                    "perform_probe": 1,
                    "process_current": 1
                },
                "puts": {
                    "print_message": 1
                }
            },
            "called": [
                "FUN_00002ecc",
                "FUN_00004db8"
            ],
            "calling": [
                "FUN_00002fe0"
            ],
            "code": "\nvoid iterate_and_probe_00002f30(void)\n\n{\n  int iteration_count;\n  undefined4 *current_probe;\n  \n  iteration_count = 0;\n  for (current_probe = DAT_1fff0db0; current_probe != (undefined4 *)0x0; current_probe = (undefined4 *)*current_probe) {\n    process_current(iteration_count,current_probe);\n    print_message(&DAT_00007380);\n    iteration_count = iteration_count + 1;\n  }\n  return;\n}\n\n",
            "current_name": "iterate_and_probe_00002f30",
            "entrypoint": "0x00002f30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002f30": "iterate_and_probe_00002f30",
                "local_10": "iteration_count",
                "local_c": "current_probe",
                "probe": "process_current",
                "puts": "print_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002f74": {
            "additional_data": {
                "DAT_1fff0db0": {
                    "device_ptr": 1
                },
                "FUN_00002f74": {
                    "print_device_info": 11,
                    "print_device_information": 7,
                    "print_device_list": 9,
                    "print_devices": 1,
                    "print_devices_info": 2,
                    "print_devices_information": 1
                },
                "FUN_000039e8": {
                    "char_to_ptr": 1,
                    "convert_char_to_string": 1,
                    "get_device_name": 1,
                    "get_saul_class_name": 1,
                    "print_device_name": 1,
                    "saul_class_to_str": 1
                },
                "FUN_000046ac": {
                    "print_no_devices_found_msg": 1
                },
                "FUN_00004c84": {
                    "initialize_saul_device": 1,
                    "print_class_info": 1,
                    "print_class_to_str": 1,
                    "print_class_to_string": 1,
                    "saul_class_to_str": 1
                },
                "FUN_00004db8": {
                    "get_class_from_device": 1,
                    "get_device_class": 1,
                    "get_saul_device_count": 1,
                    "int_to_str": 1,
                    "iprintf": 1,
                    "print_device_id": 1
                },
                "iprintf": {
                    "formatted_print": 1,
                    "print_device_details": 1,
                    "print_device_info": 1,
                    "print_formatted_device_info": 1
                },
                "local_14": {
                    "current_device": 2,
                    "device_list": 24,
                    "device_ptr": 5
                },
                "local_18": {
                    "device_count": 27,
                    "device_counter": 2,
                    "device_index": 1,
                    "index": 1
                },
                "param_1": {
                    "device_id": 1,
                    "param_1": 3,
                    "undefined_param1": 1,
                    "unused_param": 1
                },
                "param_2": {
                    "device_class": 1,
                    "param_2": 3,
                    "undefined_param2": 1,
                    "unused_param": 1
                },
                "param_3": {
                    "device_name": 1,
                    "param_3": 3,
                    "undefined_param3": 1,
                    "unused_param": 1
                },
                "param_4": {
                    "param_4": 3,
                    "undefined_param4": 1,
                    "unused_param": 1
                },
                "saul_class_to_str": {
                    "convert_class_to_str": 1,
                    "get_class_as_string": 1,
                    "get_class_name": 1,
                    "get_class_string": 1,
                    "get_device_class_name": 1,
                    "get_device_class_string": 3
                },
                "uVar1": {
                    "class_name": 1,
                    "class_str": 4,
                    "class_string": 2,
                    "device_class": 8,
                    "device_class_str": 2,
                    "device_type": 1,
                    "saul_class": 1
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00004db8"
            ],
            "calling": [
                "FUN_0000316c"
            ],
            "code": "\nvoid print_device_info_00002f74(void)\n\n{\n  undefined4 device_class;\n  int device_count;\n  undefined4 *device_list;\n  \n  device_list = DAT_1fff0db0;\n  device_count = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    puts(\"No devices found\");\n  }\n  else {\n    puts(\"ID\\tClass\\t\\tName\");\n  }\n  for (; device_list != (undefined4 *)0x0; device_list = (undefined4 *)*device_list) {\n    device_class = get_device_class_string(*(undefined *)(device_list[3] + 8));\n    print_device_info_00002f74(\"#%i\\t%s\\t%s\\n\",device_count,device_class,device_list[2]);\n    device_count = device_count + 1;\n  }\n  return;\n}\n\n",
            "current_name": "print_device_info_00002f74",
            "entrypoint": "0x00002f74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002f74": "print_device_info_00002f74",
                "iprintf": "print_device_info",
                "local_14": "device_list",
                "local_18": "device_count",
                "saul_class_to_str": "get_device_class_string",
                "uVar1": "device_class"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "additional_data": {
                "DAT_000073d4": {
                    "all": 1,
                    "all_device_id": 3,
                    "all_devices": 1,
                    "all_devices_id": 1,
                    "default_device_id": 1,
                    "undefined_device_id": 4
                },
                "FUN_00002ecc": {
                    "check_device": 1,
                    "find_device_id": 3,
                    "find_device_index": 1,
                    "initialize_device": 1,
                    "saul_reg_find_nth": 5,
                    "saul_reg_find_nth_wrapper": 1
                },
                "FUN_00002f30": {
                    "handle_exception": 1,
                    "iprintf_wrapper": 1,
                    "perform_operation": 1,
                    "print_help_message": 1,
                    "print_usage": 4,
                    "print_usage_info": 1,
                    "probe_all": 1,
                    "puts": 2
                },
                "FUN_00002fe0": {
                    "device_probe": 10,
                    "handle_device": 1,
                    "handle_device_command": 1,
                    "handle_device_probe": 4,
                    "handle_device_probing": 1,
                    "handle_device_request": 1,
                    "parse_arguments": 2,
                    "parse_command": 1,
                    "parse_device_command": 1,
                    "perform_device_operation": 1,
                    "print_device_details": 1,
                    "print_device_info": 1,
                    "process_device": 3,
                    "process_device_command": 1
                },
                "FUN_00003d24": {
                    "atoi": 2,
                    "atoi_wrapper": 1,
                    "get_arguments": 1,
                    "get_device": 2,
                    "get_device_info": 4,
                    "get_device_pointer": 1,
                    "saul_reg_get_entry": 1
                },
                "FUN_00004042": {
                    "initialize_system": 1,
                    "iprintf": 2,
                    "perform_action": 1,
                    "print_error": 2,
                    "print_error_message": 3,
                    "puts": 1,
                    "puts_wrapper": 2
                },
                "FUN_00004c84": {
                    "initialize_device": 3,
                    "perform_device_probe": 2,
                    "print_usage": 1,
                    "probe_all": 5,
                    "process_data": 1
                },
                "FUN_00004db8": {
                    "atoi": 1,
                    "atoi_wrapper": 3,
                    "convert_string_to_int": 1,
                    "convert_to_device_id": 1,
                    "convert_to_integer": 1,
                    "fetch_device_id": 1,
                    "get_device_id": 1,
                    "probe": 2,
                    "strcmp_wrapper": 1
                },
                "FUN_00004e52": {
                    "compare_byte_arrays": 1,
                    "compare_bytes": 2,
                    "compare_strings": 4,
                    "probe": 1,
                    "strcmp": 3,
                    "strcmp_wrapper": 1
                },
                "atoi": {
                    "convert_string_to_integer": 2,
                    "convert_to_int": 1,
                    "convert_to_integer": 4,
                    "parse_int": 1,
                    "string_to_int": 1
                },
                "find_device_by_index": {
                    "find_device_by_index": 1
                },
                "iVar1": {
                    "cmp_result": 1,
                    "compare_result": 1,
                    "comparison_result": 6,
                    "device_count": 1,
                    "device_id": 7,
                    "device_id_check": 1,
                    "device_id_cmp": 1,
                    "device_id_cmp_result": 2,
                    "device_id_compare": 1,
                    "device_id_comparison_result": 1,
                    "device_id_result": 1,
                    "device_index": 1,
                    "result": 1,
                    "strcmp_result": 6
                },
                "iprintf": {
                    "print_usage": 7,
                    "print_usage_message": 1
                },
                "param_1": {
                    "argc": 20,
                    "device_count": 4,
                    "device_id_count": 1,
                    "device_request_count": 1,
                    "num_args": 1,
                    "num_params": 3,
                    "operation_id": 1
                },
                "param_2": {
                    "args": 2,
                    "arguments": 4,
                    "argv": 20,
                    "command_args": 1,
                    "param_array": 1,
                    "params": 2,
                    "program_name_and_args": 1
                },
                "print_device_info": {
                    "print_device_info": 1
                },
                "print_error": {
                    "print_error": 1
                },
                "print_usage": {
                    "print_usage": 1
                },
                "probe": {
                    "detect_single_device": 1,
                    "device_probe_by_id": 1,
                    "probe_device": 7,
                    "scan_device": 1
                },
                "probe_all": {
                    "detect_all_devices": 1,
                    "perform_all_device_probing": 1,
                    "probe_all_devices": 7,
                    "scan_all_devices": 1
                },
                "probe_device": {
                    "probe_device": 1
                },
                "puts": {
                    "print_error": 8,
                    "print_error_message": 1
                },
                "saal_reg_find_nth": {
                    "find_device_index": 1
                },
                "saul_reg_find_nth": {
                    "find_device_by_id": 3,
                    "find_device_by_index": 1,
                    "find_device_id": 1,
                    "find_nth_device": 1,
                    "find_nth_saul_register": 1
                },
                "saule_reg_find_nth": {
                    "find_device_by_id": 1
                },
                "saull_reg_find_nth": {
                    "find_device_by_id": 1
                },
                "strcmp": {
                    "compare_strings": 4
                },
                "uVar2": {
                    "dev_id": 1,
                    "device_id": 23,
                    "device_index": 1,
                    "device_number": 1,
                    "parsed_id": 5
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00002ecc",
                "FUN_00003d24",
                "FUN_00002f30",
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00004042"
            ],
            "calling": [
                "FUN_0000316c"
            ],
            "code": "\nvoid handle_device_probe_00002fe0(int argc,undefined4 *argv)\n\n{\n  int device_id;\n  undefined4 device_id;\n  \n  if (argc < 3) {\n    print_usage(\"usage: %s %s <device id>|all\\n\",*argv,argv[1]);\n  }\n  else {\n    device_id = compare_strings(argv[2],&DAT_000073d4);\n    if (device_id == 0) {\n      probe_all_devices();\n    }\n    else {\n      device_id = convert_to_integer(argv[2]);\n      device_id = find_device_by_id(device_id);\n      if (device_id == 0) {\n        print_error(\"error: undefined device id given\");\n      }\n      else {\n        probe_device(device_id,device_id);\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "handle_device_probe_00002fe0",
            "entrypoint": "0x00002fe0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00002fe0": "handle_device_probe_00002fe0",
                "atoi": "convert_to_integer",
                "iVar1": "device_id",
                "iprintf": "print_usage",
                "param_1": "argc",
                "param_2": "argv",
                "probe": "probe_device",
                "probe_all": "probe_all_devices",
                "puts": "print_error",
                "saul_reg_find_nth": "find_device_by_id",
                "strcmp": "compare_strings",
                "uVar2": "device_id"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000305c": {
            "additional_data": {
                "FUN_0000305c": {
                    "write_to_device": 31
                },
                "FUN_00003694": {
                    "writeln": 1
                },
                "FUN_00003d24": {
                    "atoi": 1
                },
                "FUN_00003d94": {
                    "saul_reg_find_nth": 1
                },
                "FUN_00004042": {
                    "iprintf": 1
                },
                "FUN_00004622": {
                    "puts": 1
                },
                "FUN_00004c84": {
                    "print_usage": 1
                },
                "FUN_00004db8": {
                    "memset": 1
                },
                "atoi": {
                    "convert_to_int": 2,
                    "convert_to_integer": 1,
                    "string_to_int": 1
                },
                "auStack_20": {
                    "device_array": 1,
                    "device_values": 2,
                    "values": 27
                },
                "iprintf": {
                    "print_formatted_text": 1,
                    "print_message": 1,
                    "print_usage": 1,
                    "printf": 1
                },
                "local_10": {
                    "device_id": 12,
                    "device_id_as_string": 1,
                    "device_id_str": 3,
                    "device_id_string": 1,
                    "device_id_value": 1,
                    "device_index": 1,
                    "device_value": 3,
                    "value": 4,
                    "value0": 5
                },
                "local_14": {
                    "device": 2,
                    "device_id": 1,
                    "device_idx": 1,
                    "device_index": 27
                },
                "local_18": {
                    "device_array_size": 1,
                    "device_count": 1,
                    "num_values": 26,
                    "value_count": 2,
                    "write_result": 1
                },
                "local_c": {
                    "counter": 2,
                    "i": 14,
                    "index": 8,
                    "loop_index": 2,
                    "value_index": 5
                },
                "memset": {
                    "clear_stack": 1,
                    "initialize_memory": 1,
                    "initialize_values": 2
                },
                "param_1": {
                    "arg_count": 1,
                    "argc": 28,
                    "num_args": 2
                },
                "param_2": {
                    "arg_values": 1,
                    "args": 1,
                    "argv": 29
                },
                "param_3": {
                    "value0": 1
                },
                "param_4": {
                    "value1": 1
                },
                "phydat_dump": {
                    "dump_data": 2,
                    "dump_data_to_device": 1,
                    "dump_values": 1,
                    "phydat_dump": 1
                },
                "puts": {
                    "print_error": 1,
                    "print_error_message": 1,
                    "printf": 1
                },
                "saul_reg_find_nth": {
                    "find_device": 1,
                    "find_device_index": 2,
                    "find_nth_device": 1
                },
                "saul_reg_write": {
                    "saul_reg_write": 1,
                    "write_data": 1,
                    "write_data_to_device": 1,
                    "write_to_device_index": 1,
                    "write_to_register": 1
                },
                "uVar1": {
                    "current_value": 1,
                    "device_id": 16,
                    "device_value": 2,
                    "parsed_value": 1,
                    "value": 7
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_00003d94",
                "FUN_00004622",
                "FUN_00003d24",
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00004042"
            ],
            "calling": [
                "FUN_0000316c"
            ],
            "code": "\nvoid write_to_device_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 device_id;\n  undefined2 values [4];\n  uint num_values;\n  int device_index;\n  undefined4 device_id;\n  int i;\n  \n  if (argc < 4) {\n    print_usage(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    device_id = convert_to_int(argv[2]);\n    device_index = find_device_index(device_id);\n    if (device_index == 0) {\n      print_error(\"error: undefined device given\");\n    }\n    else {\n      initialize_values(values,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      num_values = argc - 3;\n      for (i = 0; i < (int)num_values; i = i + 1) {\n        device_id = convert_to_int(argv[i + 3]);\n        values[i] = device_id;\n      }\n      print_usage(\"Writing to device #%i - %s\\n\",device_id,*(undefined4 *)(device_index + 8));\n      dump_data(values,num_values & 0xff);\n      num_values = write_to_register(device_index,values);\n      if ((int)num_values < 1) {\n        if (num_values == -0x86) {\n          print_usage(\"error: device #%i is not writable\\n\",device_id);\n        }\n        else {\n          print_usage(\"error: failure to write to device #%i\\n\",device_id);\n        }\n      }\n      else {\n        print_usage(\"data successfully written to device #%i\\n\",device_id);\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "write_to_device_0000305c",
            "entrypoint": "0x0000305c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "atoi": "convert_to_int",
                "auStack_20": "values",
                "iprintf": "print_usage",
                "local_10": "device_id",
                "local_14": "device_index",
                "local_18": "num_values",
                "local_c": "i",
                "memset": "initialize_values",
                "param_1": "argc",
                "param_2": "argv",
                "phydat_dump": "dump_data",
                "puts": "print_error",
                "saul_reg_find_nth": "find_device_index",
                "saul_reg_write": "write_to_register",
                "uVar1": "device_id"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000316c": {
            "additional_data": {
                "FUN_00002f74": {
                    "list": 2
                },
                "FUN_00002fe0": {
                    "compare_strings": 1,
                    "strcmp_wrapper": 1
                },
                "FUN_0000305c": {
                    "print_usage": 1,
                    "write": 1
                },
                "FUN_0000316c": {
                    "check_operation_type": 1,
                    "command_handler": 1,
                    "execute_command": 6,
                    "execute_operation": 1,
                    "handle_command": 5,
                    "handle_input": 2,
                    "handle_io_operation": 2,
                    "handle_io_operations": 1,
                    "handle_operation": 1,
                    "handle_read_write": 1,
                    "handle_read_write_operation": 1,
                    "parse_arguments": 1,
                    "process_command": 6,
                    "process_operation": 1,
                    "process_read_write_command": 1
                },
                "FUN_00004c84": {
                    "read": 2
                },
                "FUN_00004e52": {
                    "compare_bytes": 1,
                    "strcmp_bytes": 1
                },
                "iVar1": {
                    "cmp_result": 3,
                    "command_comparison": 1,
                    "comp_result": 1,
                    "comparison_result": 20,
                    "result": 1,
                    "strcmp_result": 2
                },
                "iprintf": {
                    "print_usage_message": 1
                },
                "list": {
                    "show_available_commands": 1
                },
                "param_1": {
                    "argc": 16,
                    "byte_array_1": 1,
                    "command_count": 5,
                    "num_args": 3,
                    "num_commands": 1,
                    "num_params": 1,
                    "operation_count": 3,
                    "operation_type": 1
                },
                "param_2": {
                    "args": 3,
                    "arguments": 4,
                    "argv": 16,
                    "byte_array_2": 1,
                    "command_args": 2,
                    "commands": 1,
                    "operation_args": 1,
                    "operation_arguments": 2,
                    "params": 1
                },
                "read": {
                    "perform_read_operation": 1
                },
                "write": {
                    "perform_write_operation": 1
                }
            },
            "called": [
                "FUN_00002f74",
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_00004e52",
                "FUN_0000305c"
            ],
            "calling": [],
            "code": "\nundefined4 process_read_write_command_0000316c(int argc,undefined4 *argv)\n\n{\n  int comparison_result;\n  \n  if (argc < 2) {\n    show_available_commands();\n  }\n  else {\n    comparison_result = strcmp(argv[1],&DAT_000074ec);\n    if (comparison_result == 0) {\n      perform_read_operation(argc,argv);\n    }\n    else {\n      comparison_result = strcmp(argv[1],\"perform_write_operation\");\n      if (comparison_result == 0) {\n        perform_write_operation(argc,argv);\n      }\n      else {\n        print_usage_message(\"usage: %s perform_read_operation|perform_write_operation\\n\",*argv);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_read_write_command_0000316c",
            "entrypoint": "0x0000316c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000316c": "process_read_write_command_0000316c",
                "iVar1": "comparison_result",
                "iprintf": "print_usage_message",
                "list": "show_available_commands",
                "param_1": "argc",
                "param_2": "argv",
                "read": "perform_read_operation",
                "write": "perform_write_operation"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000031e0": {
            "additional_data": {
                "FUN_000031e0": {
                    "display_alarm_message": 1,
                    "print_alarm_message": 29,
                    "ringing_alarm": 1
                },
                "FUN_00004db8": {
                    "calculate_checksum": 1,
                    "calculate_hash": 1,
                    "calculate_parameter": 1,
                    "check_alarm_status": 1,
                    "check_condition": 2,
                    "check_parameter": 4,
                    "check_user_input": 1,
                    "convert_parameter": 1,
                    "get_alarm_status": 1,
                    "handle_input": 1,
                    "perform_task": 1,
                    "process_count": 1,
                    "process_data": 2,
                    "process_input": 3,
                    "process_param": 1,
                    "process_parameter": 7,
                    "reverse_number": 1
                },
                "param_1": {
                    "alarm_flag": 1,
                    "count": 1,
                    "input": 2,
                    "input_param": 1,
                    "input_value": 4,
                    "message_array": 1,
                    "number": 1,
                    "status": 2,
                    "task_id": 1,
                    "user_input": 1
                },
                "puts": {
                    "print_message": 1
                }
            },
            "called": [
                "FUN_00004db8"
            ],
            "calling": [],
            "code": "\nvoid print_alarm_message_000031e0(void)\n\n{\n  print_message(\"The alarm rang\");\n  return;\n}\n\n",
            "current_name": "print_alarm_message_000031e0",
            "entrypoint": "0x000031e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000031e0": "print_alarm_message_000031e0",
                "puts": "print_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000031fc": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "array": 1,
                    "day_offsets": 1,
                    "days_per_month": 1,
                    "months_array": 1,
                    "week_day_offset": 1,
                    "week_offset": 1,
                    "weekday_array": 1,
                    "weekday_offset": 2,
                    "weekday_offset_table": 1,
                    "weekday_offsets": 8
                },
                "FUN_000031fc": {
                    "calculate_day_of_week": 7,
                    "calculate_remainder": 1,
                    "calculate_weekday": 14,
                    "day_of_week": 1,
                    "get_day_of_week": 5,
                    "get_weekday": 1,
                    "get_weekday_index": 2
                },
                "bVar1": {
                    "adjusted_month": 1,
                    "adjustment": 2,
                    "days_before_month": 1,
                    "is_leap_year": 24,
                    "reset_value": 1,
                    "should_subtract": 1,
                    "value": 1
                },
                "iVar2": {
                    "adjusted_current_month": 1,
                    "adjusted_month": 10,
                    "adjusted_year": 18,
                    "normalized_month": 1,
                    "result": 1
                },
                "param_1": {
                    "current_year": 1,
                    "day": 1,
                    "input": 1,
                    "year": 28
                },
                "param_2": {
                    "condition": 1,
                    "current_month": 1,
                    "month": 29
                },
                "param_3": {
                    "additional_days": 1,
                    "day": 27,
                    "extra_days": 1,
                    "offset": 1,
                    "year": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0000328c"
            ],
            "code": "\nint calculate_weekday_000031fc(int year,int month,int day)\n\n{\n  byte is_leap_year;\n  int adjusted_year;\n  \n  adjusted_year = month;\n  if (month < 3) {\n    adjusted_year = 1;\n  }\n  is_leap_year = (byte)adjusted_year;\n  if (2 < month) {\n    is_leap_year = 0;\n  }\n  year = year - (uint)is_leap_year;\n  adjusted_year = year;\n  if (year < 0) {\n    adjusted_year = year + 3;\n  }\n  return ((((adjusted_year >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)weekday_offsets + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "current_name": "calculate_weekday_000031fc",
            "entrypoint": "0x000031fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "weekday_offsets",
                "FUN_000031fc": "calculate_weekday_000031fc",
                "bVar1": "is_leap_year",
                "iVar2": "adjusted_year",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000328c": {
            "additional_data": {
                "FUN_0000328c": {
                    "extract_and_transform_data": 1,
                    "extract_info_and_update_array": 1,
                    "extract_information": 1,
                    "initialize_params": 1,
                    "parse_and_calculate": 3,
                    "parse_and_calculate_params": 1,
                    "parse_and_calculate_values": 7,
                    "parse_and_compute": 1,
                    "parse_and_compute_values": 3,
                    "parse_input": 3,
                    "parse_input_and_calculate": 1,
                    "parse_input_and_compute": 1,
                    "parse_input_and_set_parameters": 1,
                    "parse_input_and_update_array": 2,
                    "parse_input_data": 2,
                    "parse_params": 1,
                    "process_input_values": 1
                },
                "dow": {
                    "calculate_day_of_week": 1,
                    "calculate_dow": 2
                },
                "iVar1": {
                    "day_of_week": 5,
                    "dow_result": 2,
                    "result": 16
                },
                "local_10": {
                    "conversion_end": 1,
                    "current_position": 1,
                    "end_pointer": 2,
                    "end_ptr": 4,
                    "next_char": 1,
                    "next_ptr": 1,
                    "next_token": 2,
                    "num_ptr": 1,
                    "parse_result": 1,
                    "remainder": 7,
                    "remaining_chars": 1,
                    "remaining_str": 3,
                    "remaining_string": 4,
                    "str_to_long_end_ptr": 1,
                    "strtol_endptr": 1
                },
                "local_a": {
                    "converted_value": 2,
                    "current_value": 1,
                    "parsed_number": 1,
                    "parsed_value": 27
                },
                "param_1": {
                    "array_of_input_strings": 1,
                    "input_array": 2,
                    "input_data": 2,
                    "input_numbers": 1,
                    "input_params": 2,
                    "input_string": 1,
                    "input_strings": 17,
                    "inputs": 2,
                    "strings": 1
                },
                "param_2": {
                    "array_to_update": 1,
                    "data_array": 1,
                    "output": 1,
                    "output_array": 14,
                    "output_params": 2,
                    "output_values": 6,
                    "parsed_data": 1,
                    "result_array": 2,
                    "results": 1
                }
            },
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "code": "\nundefined4 parse_and_calculate_values_0000328c(undefined4 *input_strings,int *output_array)\n\n{\n  int result;\n  int remainder;\n  short parsed_value;\n  \n  parsed_value = strtol(*input_strings,&remainder,10);\n  output_array[5] = parsed_value + -0x76c;\n  parsed_value = strtol(remainder + 1,&remainder,10);\n  output_array[4] = parsed_value + -1;\n  parsed_value = strtol(remainder + 1,&remainder,10);\n  output_array[3] = (int)parsed_value;\n  parsed_value = strtol(input_strings[1],&remainder,10);\n  output_array[2] = (int)parsed_value;\n  parsed_value = strtol(remainder + 1,&remainder,10);\n  output_array[1] = (int)parsed_value;\n  parsed_value = strtol(remainder + 1,&remainder,10);\n  *output_array = (int)parsed_value;\n  result = calculate_dow(output_array[5] + 0x76c,output_array[4] + 1,output_array[3]);\n  output_array[6] = result;\n  output_array[8] = -1;\n  return 0;\n}\n\n",
            "current_name": "parse_and_calculate_values_0000328c",
            "entrypoint": "0x0000328c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000328c": "parse_and_calculate_values_0000328c",
                "dow": "calculate_dow",
                "iVar1": "result",
                "local_10": "remainder",
                "local_a": "parsed_value",
                "param_1": "input_strings",
                "param_2": "output_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003378": {
            "called": [
                "FUN_00004c84"
            ],
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "code": "\nundefined4 FUNC_00003378(undefined4 *param_1)\n\n{\n  iprintf(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",param_1[5] + 0x76c,param_1[4] + 1,param_1[3],param_1[2],\n          param_1[1],*param_1);\n  return 0;\n}\n\n",
            "current_name": "FUNC_00003378",
            "entrypoint": "0x00003378",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00003378": "FUNC_00003378"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000033c0": {
            "additional_data": {
                "FUN_000033c0": {
                    "check_alarm_and_print_time": 1,
                    "get_alarm_and_print_time": 6,
                    "get_alarm_info": 1,
                    "get_alarm_information": 1,
                    "get_alarm_status": 1,
                    "get_alarm_time": 3,
                    "get_and_print_alarm": 5,
                    "get_and_print_alarm_status": 1,
                    "get_and_print_rtc_alarm": 4,
                    "print_alarm_time": 5,
                    "print_or_handle_alarm": 1,
                    "print_or_handle_rtc_alarm": 1,
                    "print_time_or_error": 1
                },
                "_print_time": {
                    "print_alarm_time": 2
                },
                "auStack_2c": {
                    "alarm_buffer": 3,
                    "alarm_data": 13,
                    "alarm_info": 5,
                    "alarm_status": 1,
                    "alarm_time": 4,
                    "alarm_time_buffer": 1,
                    "rtc_alarm": 2,
                    "rtc_alarm_buffer": 1,
                    "time_data": 1
                },
                "iVar1": {
                    "error_code": 6,
                    "result": 14,
                    "rtc_error_code": 1
                },
                "rtc_get_alarm": {
                    "get_alarm": 1
                }
            },
            "called": [
                "FUN_00002690",
                "FUN_00004db8",
                "FUN_00003378"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nbool get_alarm_and_print_time_000033c0(void)\n\n{\n  int result;\n  undefined alarm_data [36];\n  \n  result = get_alarm(alarm_data);\n  if (result != 0) {\n    puts(\"rtc: error getting alarm\");\n  }\n  else {\n    print_alarm_time(alarm_data);\n  }\n  return result != 0;\n}\n\n",
            "current_name": "get_alarm_and_print_time_000033c0",
            "entrypoint": "0x000033c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000033c0": "get_alarm_and_print_time_000033c0",
                "_print_time": "print_alarm_time",
                "auStack_2c": "alarm_data",
                "iVar1": "result",
                "rtc_get_alarm": "get_alarm"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000033f4": {
            "additional_data": {
                "FUN_00002654": {
                    "function3": 1
                },
                "FUN_0000328c": {
                    "function2": 1
                },
                "FUN_000033f4": {
                    "configure_alarm": 1,
                    "parse_and_set_alarm": 2,
                    "set_alarm": 9,
                    "set_alarm_and_return_status": 1,
                    "set_alarm_from_parsed_time": 1,
                    "set_alarm_from_time": 1,
                    "set_alarm_if_valid": 2,
                    "set_alarm_if_valid_time": 9,
                    "set_alarm_time": 1
                },
                "FUN_00004db8": {
                    "function1": 1
                },
                "_parse_time": {
                    "parse_time": 11
                },
                "auStack_2c": {
                    "alarm_time": 1,
                    "parameters": 1,
                    "parsed_time": 16,
                    "time_array": 3,
                    "time_buffer": 7,
                    "time_data": 2
                },
                "iVar1": {
                    "parse_result": 30
                },
                "param_1": {
                    "input": 3,
                    "input_time": 13,
                    "time": 1,
                    "time_data": 1,
                    "time_input": 2,
                    "time_str": 1,
                    "time_string": 8,
                    "timestamp": 1
                },
                "puts": {
                    "print_error": 4
                },
                "rtc_set_alarm": {
                    "set_alarm": 10,
                    "set_rtc_alarm": 1
                },
                "uVar2": {
                    "alarm_set_result": 1,
                    "result": 1,
                    "return_value": 21,
                    "status": 2,
                    "success": 3,
                    "success_flag": 2
                }
            },
            "called": [
                "FUN_00004db8",
                "FUN_0000328c",
                "FUN_00002654"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nundefined4 set_alarm_if_valid_time_000033f4(undefined4 input_time)\n\n{\n  int parse_result;\n  undefined4 return_value;\n  undefined parsed_time [36];\n  \n  parse_result = parse_time(input_time,parsed_time);\n  if (parse_result == 0) {\n    parse_result = set_alarm(parsed_time,0x31e1,0);\n    if (parse_result == -1) {\n      print_error(\"rtc: error setting alarm\");\n      return_value = 1;\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  else {\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "current_name": "set_alarm_if_valid_time_000033f4",
            "entrypoint": "0x000033f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000033f4": "set_alarm_if_valid_time_000033f4",
                "_parse_time": "parse_time",
                "auStack_2c": "parsed_time",
                "iVar1": "parse_result",
                "param_1": "input_time",
                "puts": "print_error",
                "rtc_set_alarm": "set_alarm",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003444": {
            "additional_data": {
                "FUN_00003444": {
                    "get_and_print_rt_ctime": 1,
                    "get_and_print_rtc_time": 12,
                    "get_and_print_time": 7,
                    "get_print_rtc_time": 1,
                    "get_rtc_data": 1,
                    "print_or_error": 1,
                    "print_or_report_time": 1,
                    "print_rtc_time": 4,
                    "print_rtc_time_status": 1,
                    "print_time_or_error": 1,
                    "retrieve_and_print_time": 1
                },
                "_print_time": {
                    "print_rtc_time": 1,
                    "print_time": 1
                },
                "auStack_2c": {
                    "rtc_time_buffer": 5,
                    "rtc_time_data": 1,
                    "time_array": 1,
                    "time_buffer": 13,
                    "time_data": 11
                },
                "iVar1": {
                    "error_code": 3,
                    "result": 10,
                    "return_value": 2
                },
                "rtc_get_time": {
                    "get_rtc_time": 1,
                    "get_time": 1
                }
            },
            "called": [
                "FUN_00002624",
                "FUN_00004db8",
                "FUN_00003378"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nbool get_and_print_rtc_time_00003444(void)\n\n{\n  int result;\n  undefined time_buffer [36];\n  \n  result = get_rtc_time(time_buffer);\n  if (result != 0) {\n    puts(\"rtc: error getting time\");\n  }\n  else {\n    print_time(time_buffer);\n  }\n  return result != 0;\n}\n\n",
            "current_name": "get_and_print_rtc_time_00003444",
            "entrypoint": "0x00003444",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003444": "get_and_print_rtc_time_00003444",
                "_print_time": "print_time",
                "auStack_2c": "time_buffer",
                "iVar1": "result",
                "rtc_get_time": "get_rtc_time"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003478": {
            "additional_data": {
                "FUN_00003478": {
                    "set_and_check_rtc_time": 1,
                    "set_and_check_time": 2,
                    "set_and_validate_time": 2,
                    "set_and_verify_time": 3,
                    "set_rtc": 3,
                    "set_rtc_and_validate_time": 1,
                    "set_rtc_from_input": 1,
                    "set_rtc_from_time": 1,
                    "set_rtc_from_time_string": 1,
                    "set_rtc_time": 4,
                    "set_system_time": 2,
                    "set_time_and_check_error": 2,
                    "set_time_from_input": 1,
                    "update_system_time": 1,
                    "update_time": 2,
                    "validate_and_set_time": 1
                },
                "_parse_time": {
                    "parse_time": 5
                },
                "auStack_2c": {
                    "parsed_time": 15,
                    "time_array": 2,
                    "time_buffer": 2,
                    "time_data": 5
                },
                "iVar1": {
                    "parse_error": 1,
                    "parse_result": 26,
                    "parse_status": 1,
                    "result": 1
                },
                "param_1": {
                    "input": 2,
                    "input_time": 12,
                    "time_data": 3,
                    "time_input": 4,
                    "time_param": 1,
                    "time_string": 7
                },
                "puts": {
                    "print_error": 1
                },
                "rtc_set_time": {
                    "set_rtc": 3,
                    "set_rtc_time": 2
                },
                "uVar2": {
                    "result": 1,
                    "return_code": 5,
                    "return_status": 1,
                    "return_val": 1,
                    "return_value": 20,
                    "update_success": 1
                }
            },
            "called": [
                "FUN_00002600",
                "FUN_00004db8",
                "FUN_0000328c"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nundefined4 set_rtc_from_time_string_00003478(undefined4 input_time)\n\n{\n  int parse_result;\n  undefined4 return_value;\n  undefined parsed_time [36];\n  \n  parse_result = parse_time(input_time,parsed_time);\n  if (parse_result == 0) {\n    parse_result = set_rtc(parsed_time);\n    if (parse_result == -1) {\n      print_error(\"rtc: error setting time\");\n      return_value = 1;\n    }\n    else {\n      return_value = 0;\n    }\n  }\n  else {\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "current_name": "set_rtc_from_time_string_00003478",
            "entrypoint": "0x00003478",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003478": "set_rtc_from_time_string_00003478",
                "_parse_time": "parse_time",
                "auStack_2c": "parsed_time",
                "iVar1": "parse_result",
                "param_1": "input_time",
                "puts": "print_error",
                "rtc_set_time": "set_rtc",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000034c0": {
            "additional_data": {
                "DAT_": {
                    "dat_": 1,
                    "ignore": 1
                },
                "DAT_00000010": {
                    "message1": 1
                },
                "DAT_00000014": {
                    "message2": 1
                },
                "DAT_00000018": {
                    "message3": 1
                },
                "DAT_0000001c": {
                    "message4": 1
                },
                "DAT_00000020": {
                    "message5": 1
                },
                "DAT_00000024": {
                    "message6": 1
                },
                "DAT_00000028": {
                    "message7": 1
                },
                "DAT_00001400": {
                    "usage_msg": 1
                },
                "DAT_0000352c": {
                    "command": 1
                },
                "DAT_00003530": {
                    "alarm_time": 1
                },
                "DAT_00003544": {
                    "current_time": 1
                },
                "FUN_000034c0": {
                    "display_usage": 1,
                    "print_command_usage": 1,
                    "print_rtc_usage": 1,
                    "print_usage": 28
                },
                "FUN_00004db8": {
                    "do_something": 1,
                    "handle_command": 7,
                    "helper_function": 1,
                    "process_action": 1,
                    "process_command": 9,
                    "some_function": 1,
                    "some_sub_function": 2,
                    "sub_function": 2,
                    "sub_function1": 1,
                    "sub_function_a": 1
                },
                "PTR_": {
                    "ignore": 1,
                    "ptr_": 1
                },
                "PTR_XXXXXX": {
                    "unchanged_variable": 1
                },
                "PTR_cmd": {
                    "cmd": 1
                },
                "new_variable_name_1": {
                    "new_variable1": 1
                },
                "new_variable_name_2": {
                    "new_variable2": 1
                },
                "original_function_name": {
                    "new_function_name": 1
                },
                "param_1": {
                    "action_code": 1,
                    "argc": 1,
                    "command": 9,
                    "command_index": 1,
                    "display_flag": 1,
                    "input": 1,
                    "input_flag": 1,
                    "param": 1,
                    "some_param": 1,
                    "some_parameter": 1,
                    "value": 1
                },
                "ptr_puVar1": {
                    "argv": 1
                },
                "puts": {
                    "print_string": 1
                }
            },
            "called": [
                "FUN_00004db8"
            ],
            "calling": [
                "FUN_00003524"
            ],
            "code": "\nundefined4 print_command_usage_000034c0(void)\n\n{\n  print_string(\"usage: rtc <command> [arguments]\");\n  print_string(\"commands:\");\n  print_string(\"\\tpoweron\\t\\tpower the interface on\");\n  print_string(\"\\tpoweroff\\tpower the interface off\");\n  print_string(\"\\tclearalarm\\tdeactivate the current alarm\");\n  print_string(\"\\tgetalarm\\tprint the currently alarm time\");\n  print_string(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  print_string(\"\\tgettime\\t\\tprint the current time\");\n  print_string(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "current_name": "print_command_usage_000034c0",
            "entrypoint": "0x000034c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000034c0": "print_command_usage_000034c0",
                "puts": "print_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003524": {
            "additional_data": {
                "FUN_00003524": {
                    "control_rtc_operations": 1,
                    "execute_command": 8,
                    "handle_command": 2,
                    "handle_rtc_command": 13,
                    "manage_rtc_command": 2,
                    "process_command": 5
                },
                "_rtc_clear_alarm": {
                    "clear_alarm": 1
                },
                "_rtc_getalarm": {
                    "get_alarm": 2,
                    "get_rtc_alarm": 2
                },
                "_rtc_gettime": {
                    "get_rtc_time": 2,
                    "get_time": 2
                },
                "_rtc_setalarm": {
                    "set_alarm": 2,
                    "set_rtc_alarm": 2
                },
                "_rtc_settime": {
                    "set_rtc_time": 2,
                    "set_time": 2
                },
                "_rtc_usage": {
                    "print_rtc_usage": 1,
                    "print_usage": 2
                },
                "iVar1": {
                    "cmp_result": 1,
                    "command_result": 2,
                    "compare_result": 3,
                    "comparison_result": 12,
                    "result": 11,
                    "strncmp_result": 1
                },
                "iprintf": {
                    "print_formatted_text": 1,
                    "print_message": 2,
                    "printf": 1
                },
                "param_1": {
                    "argc": 13,
                    "command_count": 3,
                    "num_args": 5,
                    "num_of_args": 1,
                    "num_parameters": 1,
                    "num_params": 8
                },
                "param_2": {
                    "arg_list": 1,
                    "arg_ptr": 1,
                    "argv": 14,
                    "command": 9,
                    "command_args": 2,
                    "command_arguments": 1,
                    "command_array": 1,
                    "command_ptr": 2
                },
                "rtc_clear_alarm": {
                    "clear_alarm": 1,
                    "clear_rtc_alarm": 2
                },
                "rtc_poweroff": {
                    "power_off_rtc": 1,
                    "turn_off_rtc": 2
                },
                "rtc_poweron": {
                    "power_on_rtc": 1,
                    "turn_on_rtc": 2
                },
                "strncmp": {
                    "compare_command": 1,
                    "compare_strings": 1
                },
                "uVar2": {
                    "error": 1,
                    "execution_result": 1,
                    "exit_code": 1,
                    "result": 6,
                    "return_code": 1,
                    "return_value": 14,
                    "status": 7
                }
            },
            "called": [
                "FUN_00004c84",
                "FUN_000033f4",
                "FUN_000026c0",
                "FUN_00004e66",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_000026d8",
                "FUN_000026e4",
                "FUN_00003478",
                "FUN_000034c0"
            ],
            "calling": [],
            "code": "\nundefined4 handle_rtc_command_00003524(int argc,int argv)\n\n{\n  int comparison_result;\n  undefined4 return_value;\n  \n  if (argc < 2) {\n    print_usage();\n    return_value = 1;\n  }\n  else {\n    comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"poweron\",7);\n    if (comparison_result == 0) {\n      turn_on_rtc();\n    }\n    else {\n      comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"poweroff\",8);\n      if (comparison_result == 0) {\n        turn_off_rtc();\n      }\n      else {\n        comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"clearalarm\",8);\n        if (comparison_result == 0) {\n          clear_rtc_alarm();\n        }\n        else {\n          comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"getalarm\",8);\n          if (comparison_result == 0) {\n            get_alarm();\n          }\n          else {\n            comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"setalarm\",8);\n            if ((comparison_result == 0) && (argc == 4)) {\n              set_rtc_alarm(argv + 8);\n            }\n            else {\n              comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"gettime\",7);\n              if (comparison_result == 0) {\n                get_rtc_time();\n              }\n              else {\n                comparison_result = compare_strings(*(undefined4 *)(argv + 4),\"settime\",7);\n                if ((comparison_result != 0) || (argc != 4)) {\n                  print_message(\"unknown command or missing parameters: %s\\n\\n\",\n                          *(undefined4 *)(argv + 4));\n                  print_usage();\n                  return 1;\n                }\n                set_time(argv + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "handle_rtc_command_00003524",
            "entrypoint": "0x00003524",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003524": "handle_rtc_command_00003524",
                "_rtc_getalarm": "get_alarm",
                "_rtc_gettime": "get_rtc_time",
                "_rtc_setalarm": "set_rtc_alarm",
                "_rtc_settime": "set_time",
                "_rtc_usage": "print_usage",
                "iVar1": "comparison_result",
                "iprintf": "print_message",
                "param_1": "argc",
                "param_2": "argv",
                "rtc_clear_alarm": "clear_rtc_alarm",
                "rtc_poweroff": "turn_off_rtc",
                "rtc_poweron": "turn_on_rtc",
                "strncmp": "compare_strings",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003658": {
            "additional_data": {
                "0xf": {
                    "barrier": 1,
                    "barrier_value": 1,
                    "sync_flag": 2,
                    "sync_value": 2
                },
                "DataSynchronizationBarrier": {
                    "barrier": 1,
                    "sync": 3,
                    "sync_barrier": 13,
                    "sync_data": 1,
                    "synchronize_data": 5,
                    "wait_for_data_sync": 1
                },
                "FUN_00003658": {
                    "continuous_loop": 5,
                    "data_sync_loop": 1,
                    "data_synchronization_loop": 2,
                    "endless_loop": 2,
                    "infinite_loop": 10,
                    "loop_forever": 1,
                    "perform_endless_loop": 1,
                    "run_infinite_loop": 3,
                    "synchronize_data": 2,
                    "wait_for_data_sync": 1,
                    "wait_forever": 2,
                    "wait_indefinitely": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00003688"
            ],
            "code": "\nvoid run_infinite_loop_00003658(void)\n\n{\n  sync_barrier(0xf);\n  sync_barrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "run_infinite_loop_00003658",
            "entrypoint": "0x00003658",
            "imported": false,
            "improved": true,
            "renaming": {
                "DataSynchronizationBarrier": "sync_barrier",
                "FUN_00003658": "run_infinite_loop_00003658"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003688": {
            "additional_data": {
                "FUN_00003658": {
                    "perform_actions": 1,
                    "perform_additional_reset_tasks": 1,
                    "perform_cleanup": 3,
                    "perform_initialization": 2,
                    "perform_pre_reset_operations": 1,
                    "perform_reset": 20,
                    "perform_system_reset": 1,
                    "perform_task": 1,
                    "sub_function": 1
                },
                "FUN_00003688": {
                    "reset": 1,
                    "reset_system": 26,
                    "system_reset": 4
                }
            },
            "called": [
                "FUN_00003658"
            ],
            "calling": [
                "FUN_00002e9c"
            ],
            "code": "\nvoid system_reset_00003688(void)\n\n{\n  NVIC_SystemReset();\n  return;\n}\n\n",
            "current_name": "system_reset_00003688",
            "entrypoint": "0x00003688",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003688": "system_reset_00003688"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003694": {
            "additional_data": {
                "FUN_00003694": {
                    "display_data_object": 31
                },
                "auStack_18": {
                    "buffer": 4,
                    "format_buffer": 15,
                    "formatted_data": 2,
                    "formatted_string": 1,
                    "formatted_string_buffer": 1,
                    "formatted_value": 1,
                    "formatting_array": 1,
                    "prefix_buffer": 1,
                    "result_buffer": 1,
                    "s16_buffer": 1,
                    "stack_buffer": 1,
                    "temp_buffer": 1
                },
                "bVar4": {
                    "bit_flag": 1,
                    "bit_set": 1,
                    "bool_var": 1,
                    "check": 1,
                    "is_bit_flag_set": 1,
                    "is_bit_mask_set": 1,
                    "is_bit_set": 9,
                    "is_bit_set_flag": 1,
                    "is_flag_set": 3,
                    "is_mask_set": 1,
                    "is_set": 8,
                    "is_shifted": 2,
                    "is_unit_bit_set": 1
                },
                "cVar2": {
                    "bit": 1,
                    "bit_flag": 3,
                    "bit_flag_char": 1,
                    "char_val": 2,
                    "condition_val": 1,
                    "condition_value": 1,
                    "condition_var": 1,
                    "flag": 8,
                    "flag_char": 3,
                    "is_bit_set": 1,
                    "is_prefix": 1,
                    "is_prefix_from_scale": 1,
                    "is_valid": 1,
                    "prefix": 1,
                    "prefix_char": 2,
                    "prefix_character": 1,
                    "temp_char": 1,
                    "unit_char": 1
                },
                "local_10": {
                    "buffer_len": 1,
                    "buffer_length": 4,
                    "buffer_size": 6,
                    "format_buffer_index": 1,
                    "format_buffer_length": 3,
                    "format_buffer_size": 1,
                    "format_length": 6,
                    "formatted_data_length": 2,
                    "formatted_length": 1,
                    "formatted_string_length": 1,
                    "formatted_string_size": 1,
                    "formatted_value_length": 1,
                    "formatting_var": 1,
                    "result_buffer_idx": 1,
                    "stack_index": 1
                },
                "local_9": {
                    "byte_idx": 1,
                    "byte_index": 1,
                    "counter": 1,
                    "current_index": 2,
                    "element_index": 5,
                    "i": 4,
                    "index": 14,
                    "index_value": 1,
                    "iterator": 1,
                    "object_index": 1
                },
                "local_a": {
                    "data_prefix": 1,
                    "prefix": 13,
                    "prefix_char": 16,
                    "prefix_var": 1
                },
                "param_1": {
                    "data_address": 3,
                    "data_object": 14,
                    "data_object_address": 7,
                    "data_object_pointer": 1,
                    "data_object_ptr": 3,
                    "data_ptr": 1,
                    "object_address": 2
                },
                "param_2": {
                    "data_length": 5,
                    "data_object_size": 7,
                    "data_size": 6,
                    "num_bytes": 1,
                    "num_elements": 5,
                    "num_objects": 1,
                    "num_of_bytes": 1,
                    "object_length": 1,
                    "object_size": 3,
                    "size": 1
                },
                "uVar1": {
                    "unit": 7,
                    "unit_str": 12,
                    "unit_string": 8,
                    "unit_value": 1,
                    "unit_var": 1
                },
                "uVar3": {
                    "bit": 1,
                    "bit_check": 1,
                    "bit_flag": 2,
                    "bit_mask": 15,
                    "bit_shift": 1,
                    "bit_shift_value": 1,
                    "bit_shifted_value": 1,
                    "bit_var": 1,
                    "bitmask": 2,
                    "mask": 1,
                    "shifted_bits": 1,
                    "shifted_value": 1,
                    "temp": 1,
                    "temp_uint": 1,
                    "unit_bit_mask": 1
                }
            },
            "called": [
                "FUN_00003918",
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003e9e",
                "FUN_00003810"
            ],
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "code": "\nvoid display_data_object_00003694(int data_object,byte data_object_size)\n\n{\n  undefined4 unit_str;\n  char flag;\n  uint bit_mask;\n  bool is_bit_set;\n  undefined format_buffer [8];\n  int format_length;\n  char prefix_char;\n  byte index;\n  \n  if ((data_object == 0) || (3 < data_object_size)) {\n    puts(\"Unable to display data object\");\n  }\n  else {\n    iprintf(\"Data:\");\n    for (index = 0; index < data_object_size; index = index + 1) {\n      if (*(byte *)(data_object + 6) < 0x14) {\n        bit_mask = 1 << (uint)*(byte *)(data_object + 6) & 0x8018f;\n        is_bit_set = bit_mask != 0;\n        if (is_bit_set) {\n          bit_mask = 1;\n        }\n        flag = (char)bit_mask;\n        if (!is_bit_set) {\n          flag = '\\0';\n        }\n        if (flag == '\\0') goto LAB_000036ee;\n        prefix_char = '\\0';\n      }\n      else {\nLAB_000036ee:\n        prefix_char = phydat_prefix_from_scale((int)*(char *)(data_object + 7));\n      }\n      iprintf(&DAT_000077bc);\n      if (data_object_size < 2) {\n        iprintf(\"     \");\n      }\n      else {\n        iprintf(\"[%u] \",index);\n      }\n      if (prefix_char == '\\0') {\n        if (*(char *)(data_object + 7) == '\\0') {\n          iprintf(&DAT_000077d8,(int)*(short *)(data_object + (uint)index * 2));\n        }\n        else if ((*(char *)(data_object + 7) + 4 < 0 == SCARRY4((int)*(char *)(data_object + 7),4)) &&\n                (*(char *)(data_object + 7) < '\\0')) {\n          format_length = fmt_s16_dfp(format_buffer,(int)*(short *)(data_object + (uint)index * 2),\n                                 (int)*(char *)(data_object + 7));\n          format_buffer[format_length] = 0;\n          iprintf(&DAT_000077dc,format_buffer);\n        }\n        else {\n          iprintf(\"%iE%i\",(int)*(short *)(data_object + (uint)index * 2),(int)*(char *)(data_object + 7));\n        }\n      }\n      else {\n        iprintf(\"%6d %c\",(int)*(short *)(data_object + (uint)index * 2),prefix_char);\n      }\n      unit_str = phydat_unit_to_str(*(undefined *)(data_object + 6));\n      iprintf(&DAT_000077e8,unit_str);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "display_data_object_00003694",
            "entrypoint": "0x00003694",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "auStack_18": "format_buffer",
                "bVar4": "is_bit_set",
                "cVar2": "flag",
                "local_10": "format_length",
                "local_9": "index",
                "local_a": "prefix_char",
                "param_1": "data_object",
                "param_2": "data_object_size",
                "uVar1": "unit_str",
                "uVar3": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003810": {
            "additional_data": {
                "FUN_00003810": {
                    "get_address_from_param": 1,
                    "get_data_address": 1,
                    "get_data_from_param": 1,
                    "get_data_pointer": 1,
                    "get_memory_address": 23,
                    "get_memory_location": 2,
                    "get_pointer_from_param": 1,
                    "get_target_address": 1
                },
                "param_1": {
                    "input": 10,
                    "input_value": 13,
                    "type": 1,
                    "value": 7
                },
                "puVar1": {
                    "address": 4,
                    "address_pointer": 1,
                    "data_address": 1,
                    "data_pointer": 1,
                    "memory_address": 13,
                    "memory_location": 2,
                    "result": 6,
                    "result_address": 2,
                    "target_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00003694"
            ],
            "code": "\nundefined * get_memory_address_00003810(undefined input_value)\n\n{\n  undefined *memory_address;\n  \n  switch(input_value) {\n  case 2:\n    memory_address = &DAT_000077ec;\n    break;\n  case 3:\n    memory_address = &DAT_000077f0;\n    break;\n  case 4:\n    memory_address = &DAT_000077f4;\n    break;\n  case 5:\n    memory_address = &DAT_000077f8;\n    break;\n  case 6:\n    memory_address = &DAT_000077fc;\n    break;\n  case 7:\n    memory_address = (undefined *)0x7800;\n    break;\n  case 8:\n    memory_address = &DAT_00007804;\n    break;\n  case 9:\n    memory_address = &DAT_00007808;\n    break;\n  case 10:\n    memory_address = &DAT_0000780c;\n    break;\n  case 0xb:\n    memory_address = &DAT_00007810;\n    break;\n  case 0xc:\n    memory_address = &DAT_00007814;\n    break;\n  case 0xd:\n    memory_address = &DAT_00007818;\n    break;\n  case 0xe:\n    memory_address = &DAT_0000781c;\n    break;\n  case 0xf:\n    memory_address = &DAT_00007820;\n    break;\n  case 0x10:\n    memory_address = &DAT_00007824;\n    break;\n  case 0x11:\n    memory_address = &DAT_0000782c;\n    break;\n  default:\n    memory_address = &DAT_00007834;\n    break;\n  case 0x13:\n    memory_address = &DAT_00007830;\n    break;\n  case 0x15:\n    memory_address = &DAT_00007828;\n  }\n  return memory_address;\n}\n\n",
            "current_name": "get_memory_address_00003810",
            "entrypoint": "0x00003810",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "input_value",
                "puVar1": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003918": {
            "additional_data": {
                "FUN_00003918": {
                    "convert_param_to_value": 4,
                    "decode_param": 1,
                    "decode_value": 2,
                    "get_character_code": 1,
                    "get_character_value": 1,
                    "get_code_letter": 1,
                    "get_mapped_value": 2,
                    "get_mapping_value": 1,
                    "map_input_to_value": 1,
                    "map_param_to_value": 7,
                    "map_parameter_to_value": 1,
                    "map_parameter_value": 6,
                    "map_value_to_character": 1,
                    "translate_param_to_value": 2
                },
                "param_1": {
                    "character": 1,
                    "code": 1,
                    "input": 6,
                    "input_param": 3,
                    "input_value": 7,
                    "param": 7,
                    "parameter": 4,
                    "value": 2
                },
                "uVar1": {
                    "character_code": 1,
                    "character_value": 1,
                    "converted_value": 1,
                    "decoded_value": 3,
                    "letter": 1,
                    "mapped_value": 12,
                    "output": 2,
                    "output_character": 1,
                    "output_value": 3,
                    "result": 3,
                    "return_value": 2,
                    "translated_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00003694"
            ],
            "code": "\nundefined4 map_value_to_character_00003918(undefined input_value)\n\n{\n  undefined4 mapped_value;\n  \n  switch(input_value) {\n  case 2:\n    mapped_value = 0x68;\n    break;\n  case 3:\n    mapped_value = 0x6b;\n    break;\n  case 6:\n    mapped_value = 0x4d;\n    break;\n  case 9:\n    mapped_value = 0x47;\n    break;\n  case 0xc:\n    mapped_value = 0x54;\n    break;\n  case 0xf:\n    mapped_value = 0x50;\n    break;\n  case 0xf1:\n    mapped_value = 0x66;\n    break;\n  default:\n    mapped_value = 0;\n    break;\n  case 0xf4:\n    mapped_value = 0x70;\n    break;\n  case 0xf7:\n    mapped_value = 0x6e;\n    break;\n  case 0xfa:\n    mapped_value = 0x75;\n    break;\n  case 0xfd:\n    mapped_value = 0x6d;\n  }\n  return mapped_value;\n}\n\n",
            "current_name": "map_value_to_character_00003918",
            "entrypoint": "0x00003918",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003918": "map_value_to_character_00003918",
                "param_1": "input_value",
                "uVar1": "mapped_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000039e8": {
            "additional_data": {
                "FUN_000039e8": {
                    "classify_item": 1,
                    "convert_param_to_class_name": 1,
                    "get_action_or_sense_label": 1,
                    "get_class_description": 2,
                    "get_class_name": 11,
                    "get_class_type": 1,
                    "get_component_name": 1,
                    "get_description": 3,
                    "get_descriptive_class_name": 1,
                    "get_device_class_name": 1,
                    "get_device_type": 2,
                    "get_sensor_class": 1,
                    "get_sensor_or_action_name": 1,
                    "get_symbol_description": 1,
                    "map_char_to_class_name": 1,
                    "map_character_to_class": 1
                },
                "param_1": {
                    "character": 3,
                    "class": 1,
                    "class_code": 9,
                    "class_id": 2,
                    "class_name": 1,
                    "class_type": 1,
                    "component_type": 1,
                    "device_code": 2,
                    "device_type": 1,
                    "input": 1,
                    "input_char": 1,
                    "input_char_code": 1,
                    "input_character": 2,
                    "item": 1,
                    "param": 1,
                    "sensor_type": 1,
                    "symbol": 2
                },
                "pcVar1": {
                    "class_description": 1,
                    "class_name": 16,
                    "classification": 1,
                    "component_name": 1,
                    "description": 4,
                    "descriptive_name": 1,
                    "device_type": 2,
                    "label": 1,
                    "result_string": 1,
                    "sensor_class": 1,
                    "sensor_or_action_name": 1,
                    "symbol_description": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002f74",
                "FUN_00002ecc"
            ],
            "code": "\nchar * get_device_class_name_000039e8(char class_code)\n\n{\n  char *class_name;\n  \n  switch(class_code) {\n  case '\\0':\n    class_name = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    class_name = \"ACT_ANY\";\n    break;\n  case 'B':\n    class_name = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    class_name = \"ACT_SERVO\";\n    break;\n  case 'D':\n    class_name = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    class_name = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    class_name = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    class_name = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    class_name = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    class_name = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    class_name = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    class_name = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    class_name = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    class_name = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    class_name = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    class_name = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    class_name = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    class_name = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    class_name = \"SENSE_UV\";\n    break;\n  case -0x74:\n    class_name = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    class_name = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    class_name = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    class_name = \"SENSE_CO2\";\n    break;\n  default:\n    if (class_code == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    class_name = \"CLASS_UNKNOWN\";\n  }\n  return class_name;\n}\n\n",
            "current_name": "get_device_class_name_000039e8",
            "entrypoint": "0x000039e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000039e8": "get_device_class_name_000039e8",
                "param_1": "class_code",
                "pcVar1": "class_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003d24": {
            "additional_data": {
                "FUN_00003d24": {
                    "find_element": 9,
                    "find_element_by_index": 1,
                    "find_element_in_list": 1,
                    "find_first_element_index": 1,
                    "find_nth_element": 15,
                    "find_nth_item": 2,
                    "find_nth_pointer": 1,
                    "find_ptr_by_index": 1
                },
                "local_10": {
                    "count": 16,
                    "counter": 11,
                    "current_index": 2,
                    "index": 2
                },
                "local_c": {
                    "current_element": 26,
                    "current_item": 2,
                    "current_pointer": 1,
                    "current_ptr": 2
                },
                "param_1": {
                    "element": 1,
                    "element_count": 3,
                    "index": 2,
                    "n": 17,
                    "num_elements": 7,
                    "num_items": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "code": "\nundefined4 * find_nth_element_00003d24(int n)\n\n{\n  int count;\n  undefined4 *current_element;\n  \n  count = 0;\n  for (current_element = DAT_1fff0db0; (count < n && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    count = count + 1;\n  }\n  return current_element;\n}\n\n",
            "current_name": "find_nth_element_00003d24",
            "entrypoint": "0x00003d24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "local_10": "count",
                "local_c": "current_element",
                "param_1": "n"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003d64": {
            "additional_data": {
                "FUN_00003d64": {
                    "call_function_or_return_error": 1,
                    "execute_callback": 2,
                    "execute_code": 2,
                    "execute_function": 23,
                    "execute_function_or_return_error": 2,
                    "handle_function": 1
                },
                "param_1": {
                    "callback": 1,
                    "callback_pointer": 1,
                    "code_pointer": 1,
                    "func_ptr": 1,
                    "function_address": 2,
                    "function_pointer": 19,
                    "function_ptr": 1,
                    "input": 3,
                    "input_param": 2
                },
                "param_2": {
                    "arg": 2,
                    "arg_2": 1,
                    "argument": 5,
                    "data": 1,
                    "input": 1,
                    "input_param": 3,
                    "input_parameter": 3,
                    "input_value": 3,
                    "param": 7,
                    "param_value": 2,
                    "parameter": 2,
                    "secondary_param": 1
                },
                "uVar1": {
                    "result": 8,
                    "return_value": 22
                },
                "uVar5": {
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00002ecc"
            ],
            "code": "\nundefined4 execute_function_or_return_error_00003d64(int function_pointer,undefined4 param)\n\n{\n  undefined4 return_value;\n  \n  if (function_pointer == 0) {\n    return_value = 0xffffffed;\n  }\n  else {\n    return_value = (***(code ***)(function_pointer + 0xc))(*(undefined4 *)(function_pointer + 4),param);\n  }\n  return return_value;\n}\n\n",
            "current_name": "execute_function_or_return_error_00003d64",
            "entrypoint": "0x00003d64",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003d64": "execute_function_or_return_error_00003d64",
                "param_1": "function_pointer",
                "param_2": "param",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003d94": {
            "additional_data": {
                "FUN_00003d94": {
                    "execute_callback": 1,
                    "execute_function": 23,
                    "execute_function_or_return_error": 2,
                    "execute_function_or_return_error_code": 1,
                    "execute_function_with_param": 1,
                    "execute_operation": 1,
                    "perform_operation": 1,
                    "process_function": 1
                },
                "param_1": {
                    "callback_pointer": 1,
                    "function_address": 2,
                    "function_handle": 1,
                    "function_object": 1,
                    "function_pointer": 10,
                    "function_ptr": 7,
                    "input": 3,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 3,
                    "ptr_obj": 1
                },
                "param_2": {
                    "additional_param": 1,
                    "arg": 3,
                    "argument": 4,
                    "data": 1,
                    "extra_param": 1,
                    "input_param": 2,
                    "input_parameter": 4,
                    "input_value": 1,
                    "output_param": 1,
                    "param": 5,
                    "param_value": 3,
                    "parameter": 3,
                    "second_parameter": 1
                },
                "uVar1": {
                    "result": 14,
                    "return_value": 17
                }
            },
            "called": [],
            "calling": [
                "FUN_0000305c"
            ],
            "code": "\nundefined4 execute_function_or_return_error_code_00003d94(int function_pointer,undefined4 param)\n\n{\n  undefined4 return_value;\n  \n  if (function_pointer == 0) {\n    return_value = 0xffffffed;\n  }\n  else {\n    return_value = (**(code **)(*(int *)(function_pointer + 0xc) + 4))(*(undefined4 *)(function_pointer + 4),param);\n  }\n  return return_value;\n}\n\n",
            "current_name": "execute_function_or_return_error_code_00003d94",
            "entrypoint": "0x00003d94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003d94": "execute_function_or_return_error_code_00003d94",
                "param_1": "function_pointer",
                "param_2": "param",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "additional_data": {
                "FUN_00003dc4": {
                    "calculate_digit_count": 1,
                    "calculate_digits": 3,
                    "calculate_num_digits": 2,
                    "convert_int_to_string": 1,
                    "convert_number_to_decimal_string": 1,
                    "count_digits": 19,
                    "count_digits_and_reverse": 1,
                    "get_digits_count": 1,
                    "get_num_digits": 2
                },
                "local_10": {
                    "base": 5,
                    "current_multiplier": 1,
                    "current_power": 1,
                    "divisor": 1,
                    "factor": 2,
                    "i": 1,
                    "multiplier": 6,
                    "power": 3,
                    "power_of10": 2,
                    "power_of_ten": 9
                },
                "local_14": {
                    "char_pointer": 1,
                    "char_ptr": 2,
                    "current_address": 4,
                    "current_char": 1,
                    "current_character": 1,
                    "current_digit": 5,
                    "current_digit_pointer": 1,
                    "current_digit_ptr": 1,
                    "current_pos": 1,
                    "current_position": 1,
                    "output": 2,
                    "output_buffer": 1,
                    "output_pointer": 2,
                    "output_string": 1,
                    "ptr": 3,
                    "result_address": 1,
                    "result_ptr": 1,
                    "str_ptr": 1,
                    "string_pointer": 1
                },
                "local_20": {
                    "remainder": 18,
                    "remaining": 1,
                    "remaining_num": 1,
                    "remaining_number": 5,
                    "temp": 3,
                    "temp_number": 3
                },
                "local_c": {
                    "count": 2,
                    "digit_count": 22,
                    "num_digits": 7
                },
                "param_1": {
                    "address": 2,
                    "array_pointer": 1,
                    "base_address": 8,
                    "char_array": 1,
                    "input_offset": 3,
                    "input_pointer": 1,
                    "input_start": 1,
                    "offset": 1,
                    "original_ptr": 1,
                    "output_buffer": 2,
                    "start_address": 3,
                    "start_pos": 1,
                    "start_position": 1,
                    "start_value": 1,
                    "starting_address": 1,
                    "starting_index": 1,
                    "starting_position": 1,
                    "str": 1
                },
                "param_2": {
                    "input_number": 2,
                    "input_value": 1,
                    "num": 1,
                    "number": 26,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00003e58"
            ],
            "code": "\nint count_digits_and_reverse_00003dc4(int base_address,uint number)\n\n{\n  uint remainder;\n  char *current_digit;\n  uint power_of_ten;\n  int digit_count;\n  \n  digit_count = 1;\n  if (number < 1000000000) {\n    for (power_of_ten = 10; power_of_ten <= number; power_of_ten = power_of_ten * 10) {\n      digit_count = digit_count + 1;\n    }\n  }\n  else {\n    digit_count = 10;\n  }\n  if (base_address != 0) {\n    current_digit = (char *)(digit_count + base_address);\n    remainder = number;\n    do {\n      current_digit = current_digit + -1;\n      *current_digit = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digit_count;\n}\n\n",
            "current_name": "count_digits_and_reverse_00003dc4",
            "entrypoint": "0x00003dc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003dc4": "count_digits_and_reverse_00003dc4",
                "local_10": "power_of_ten",
                "local_14": "current_digit",
                "local_20": "remainder",
                "local_c": "digit_count",
                "param_1": "base_address",
                "param_2": "number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003e58": {
            "additional_data": {
                "FUN_00003dc4": {
                    "convert_to_decimal": 1,
                    "fmt_u32_dec": 2,
                    "format_as_decimal": 1,
                    "format_number_to_decimal": 1,
                    "format_u32_dec": 1,
                    "format_unsigned_decimal": 1
                },
                "FUN_00003e58": {
                    "convert_and_print_decimal": 1,
                    "convert_and_print_negative": 1,
                    "convert_int_to_negative": 1,
                    "convert_int_to_string": 3,
                    "convert_integer_to_decimal": 1,
                    "convert_integer_to_positive": 1,
                    "convert_integer_to_string": 3,
                    "convert_number_to_decimal_string": 1,
                    "convert_signed_int_to_decimal": 1,
                    "convert_to_decimal": 2,
                    "convert_to_decimal_and_negate": 1,
                    "convert_to_negative_and_print": 1,
                    "convert_to_negative_decimal": 1,
                    "convert_to_positive": 1,
                    "convert_to_signed_decimal": 3,
                    "decode_and_format_integer": 1,
                    "format_and_count_digits": 1,
                    "format_and_print_integer": 2,
                    "format_integer": 1,
                    "format_number": 1,
                    "format_number_with_sign": 1,
                    "print_integer": 1,
                    "print_signed_decimal": 1
                },
                "fmt_u32_dec": {
                    "format_as_unsigned_decimal": 1,
                    "format_uint32_decimal": 1,
                    "format_unsigned_to_dec": 1
                },
                "iVar1": {
                    "conversion_result": 1,
                    "converted_length": 1,
                    "formatted_length": 1,
                    "formatting_length": 1,
                    "numeric_length": 1,
                    "result": 2,
                    "string_length": 1
                },
                "local_14": {
                    "adjusted_output_buffer": 1,
                    "buffer_val": 1,
                    "current_position": 1,
                    "formatted_buffer": 1,
                    "formatted_number": 1,
                    "formatted_string": 3,
                    "modified_input_string": 1,
                    "new_str": 1,
                    "next_byte": 1,
                    "next_character": 1,
                    "output_array": 1,
                    "output_buffer": 3,
                    "output_buffer_offset": 1,
                    "output_string": 3,
                    "pointer_to_input_buffer": 1,
                    "ptr_next": 1,
                    "start_ptr": 1,
                    "str_ptr": 3,
                    "string_pointer": 2,
                    "string_pointer_plus_one": 1,
                    "temp_pointer": 1
                },
                "local_18": {
                    "abs_num": 4,
                    "abs_number": 3,
                    "abs_value": 2,
                    "absolute_integer": 2,
                    "absolute_number": 4,
                    "absolute_value": 8,
                    "converted_integer": 1,
                    "converted_number": 5,
                    "positive_num": 1
                },
                "param_1": {
                    "buffer": 3,
                    "input_array": 1,
                    "input_buffer": 5,
                    "input_string": 7,
                    "number_buffer": 1,
                    "number_pointer": 1,
                    "output_buffer": 3,
                    "str": 3,
                    "str_buffer": 3,
                    "string": 1,
                    "string_buffer": 2,
                    "string_pointer": 1
                },
                "param_2": {
                    "input_integer": 3,
                    "input_number": 8,
                    "input_value": 2,
                    "integer_value": 1,
                    "num": 6,
                    "number": 9,
                    "value": 2
                }
            },
            "called": [
                "FUN_00003dc4"
            ],
            "calling": [
                "FUN_00003ec4"
            ],
            "code": "\nint convert_signed_int_to_decimal_00003e58(undefined *input_string,int number)\n\n{\n  int result;\n  int absolute_value;\n  undefined *formatted_string;\n  \n  absolute_value = number;\n  formatted_string = input_string;\n  if (-(number >> 0x1f) != 0) {\n    if (input_string != (undefined *)0x0) {\n      formatted_string = input_string + 1;\n      *input_string = 0x2d;\n    }\n    absolute_value = -number;\n  }\n  result = format_as_unsigned_decimal(formatted_string,absolute_value);\n  return -(number >> 0x1f) + result;\n}\n\n",
            "current_name": "convert_signed_int_to_decimal_00003e58",
            "entrypoint": "0x00003e58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003e58": "convert_signed_int_to_decimal_00003e58",
                "fmt_u32_dec": "format_as_unsigned_decimal",
                "iVar1": "result",
                "local_14": "formatted_string",
                "local_18": "absolute_value",
                "param_1": "input_string",
                "param_2": "number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "additional_data": {
                "FUN_00003e9e": {
                    "convert_integer_to_decimal": 1,
                    "convert_integer_to_string": 1,
                    "convert_to_decimal_string": 1,
                    "convert_to_fixed_point": 1,
                    "convert_to_int": 1,
                    "format_and_convert_int_to_decimal": 1,
                    "format_and_print_integer": 1,
                    "format_and_print_value": 1,
                    "format_and_return": 10,
                    "format_and_return_int": 1,
                    "format_and_return_integer": 6,
                    "format_and_return_result": 1,
                    "format_and_return_s32_dfp": 1,
                    "format_and_return_value": 1,
                    "format_integer_to_decimal_string": 1,
                    "format_s32_decimal": 2
                },
                "FUN_00003ec4": {
                    "process_data": 1
                },
                "param_1": {
                    "arg1": 2,
                    "data": 1,
                    "format_specifier": 1,
                    "input": 7,
                    "input_value": 8,
                    "integer": 1,
                    "integer_value": 1,
                    "param1": 4,
                    "param_1": 1,
                    "value": 4,
                    "value_to_format": 1
                },
                "param_2": {
                    "arg2": 2,
                    "decimal_number": 1,
                    "decimal_value": 1,
                    "input_number": 1,
                    "input_short": 1,
                    "input_size": 1,
                    "int_value": 1,
                    "integer_value": 1,
                    "number": 3,
                    "param2": 4,
                    "s32_value": 1,
                    "short_value": 7,
                    "value": 7
                },
                "param_3": {
                    "additional_input_value": 1,
                    "additional_param": 1,
                    "arg3": 2,
                    "config": 1,
                    "extra_argument": 1,
                    "extra_param": 1,
                    "flag": 1,
                    "flags": 2,
                    "format": 3,
                    "format_options": 2,
                    "format_value": 1,
                    "input_value2": 1,
                    "option": 1,
                    "options": 1,
                    "output_buffer": 1,
                    "output_value": 1,
                    "param": 2,
                    "param3": 4,
                    "param_3": 3,
                    "precision": 1
                },
                "uVar1": {
                    "converted_value": 1,
                    "formatted_integer": 1,
                    "formatted_number": 1,
                    "formatted_result": 1,
                    "formatted_value": 4,
                    "result": 16,
                    "return_value": 2
                }
            },
            "called": [
                "FUN_00003ec4"
            ],
            "calling": [
                "FUN_00003694"
            ],
            "code": "\nundefined4 format_and_return_integer_00003e9e(undefined4 input_value,short short_value,undefined4 param3)\n\n{\n  undefined4 result;\n  \n  result = fmt_s32_dfp(input_value,(int)short_value,param3);\n  return result;\n}\n\n",
            "current_name": "format_and_return_integer_00003e9e",
            "entrypoint": "0x00003e9e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003e9e": "format_and_return_integer_00003e9e",
                "param_1": "input_value",
                "param_2": "short_value",
                "param_3": "param3",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "additional_data": {
                "DAT_00007978": {
                    "multipliers_table": 1
                },
                "FUM_00000f04": {
                    "fill_character": 1
                },
                "FUM_00003e58": {
                    "decimal_length": 1
                },
                "FUM_00003ff4": {
                    "format_integer": 1
                },
                "FUM_00004622": {
                    "memset_with_char": 1
                },
                "FUN_00000f04": {
                    "add_negative_sign": 1
                },
                "FUN_00003e58": {
                    "calculate_decimal_places": 1,
                    "count_digits": 1
                },
                "FUN_00003ec4": {
                    "format_and_display_number": 1,
                    "format_and_print_number": 2,
                    "format_decimal": 1,
                    "format_decimal_number": 1,
                    "format_integer_as_string": 1,
                    "format_number": 12,
                    "format_number_as_string": 1,
                    "format_number_to_string": 1,
                    "format_number_with_padding": 9,
                    "format_numeric_value": 2
                },
                "FUN_00003ff4": {
                    "divide_by_power_of_ten": 1,
                    "format_number_as_hex": 1
                },
                "FUN_00004622": {
                    "add_padding": 1
                },
                "SCARRY4": {
                    "is_overflow": 1
                },
                "core_panic": {
                    "panic": 1
                },
                "fmt_s32_dec": {
                    "format_signed_number_as_decimal": 1
                },
                "fun_00000f04": {
                    "format_char_as_string": 1
                },
                "fun_00004622": {
                    "format_reserved_space_of_string": 1
                },
                "iVar1": {
                    "digits": 2,
                    "format_result": 3,
                    "formatted_digits": 1,
                    "formatted_length": 1,
                    "formatted_size": 1,
                    "integer_result": 4,
                    "integer_value": 1,
                    "num_digits": 4,
                    "output_length": 1,
                    "padding_count": 1,
                    "result": 7,
                    "temp": 1
                },
                "local_10": {
                    "remainder": 31
                },
                "local_c": {
                    "char_count": 2,
                    "character_count": 1,
                    "count": 3,
                    "current_index": 1,
                    "current_length": 1,
                    "digit_count": 1,
                    "length": 2,
                    "num_chars": 3,
                    "num_digits": 2,
                    "output_length": 3,
                    "total_chars": 2,
                    "total_digits": 4,
                    "total_length": 4,
                    "total_output_length": 1,
                    "total_size": 1
                },
                "memset": {
                    "fill_memory": 1
                },
                "param_1": {
                    "buffer": 1,
                    "output": 5,
                    "output_buffer": 21,
                    "output_string": 3,
                    "str": 1
                },
                "param_2": {
                    "input_integer": 1,
                    "input_number": 5,
                    "input_value": 1,
                    "num": 2,
                    "number": 17,
                    "value": 5
                },
                "param_3": {
                    "decimal_places": 5,
                    "digits": 3,
                    "num_decimals": 1,
                    "num_digits": 5,
                    "padding": 4,
                    "padding_count": 1,
                    "padding_length": 1,
                    "padding_size": 2,
                    "precision": 4,
                    "width": 5
                },
                "uVar1": {
                    "result": 1
                },
                "uVar2": {
                    "dec_result": 1,
                    "decimal_digits": 3,
                    "decimal_length": 2,
                    "decimal_result": 3,
                    "decimal_value": 2,
                    "digits": 2,
                    "digits_written": 1,
                    "format_result_length": 3,
                    "formatted_size_float": 1,
                    "formatted_unsigned_value": 1,
                    "integer_length": 1,
                    "num_digits": 2,
                    "num_digits2": 1,
                    "number_length": 1,
                    "precision_str_len": 1,
                    "temp_value": 1,
                    "unsigned_result": 1
                },
                "uVar3": {
                    "div_result": 1,
                    "division_result": 1,
                    "divisor": 6,
                    "integer_part": 1,
                    "quotient": 18
                },
                "undefined": {
                    "ptr": 1
                }
            },
            "called": [
                "FUN_00000f04",
                "FUN_00004622",
                "FUN_00003ff4",
                "FUN_00003e58"
            ],
            "calling": [
                "FUN_00003e9e"
            ],
            "code": "\nint format_number_with_padding_00003ec4(ptr *output_buffer,uint number,int width)\n\n{\n  int result;\n  ptr4 decimal_result;\n  uint quotient;\n  int remainder;\n  int total_length;\n  \n  if (width + 7 < 0 != is_overflow(width,7)) {\n    panic(3,\"FAILED ASSERTION.\");\n  }\n  total_length = 0;\n  if (width == 0) {\n    total_length = format_signed_number_as_decimal(output_buffer,number);\n  }\n  else if (width < 1) {\n    quotient = number / *(uint *)(&DAT_00007978 + width * -4);\n    remainder = number - *(uint *)(&DAT_00007978 + width * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)number < 0)) {\n      if (output_buffer != (ptr *)0x0) {\n        *output_buffer = 0x2d;\n      }\n      total_length = 1;\n    }\n    if (output_buffer == (ptr *)0x0) {\n      result = format_signed_number_as_decimal(0,quotient);\n      total_length = result + 1 + total_length;\n    }\n    else {\n      result = format_signed_number_as_decimal(output_buffer + total_length,quotient);\n      result = total_length + result;\n      total_length = result + 1;\n      output_buffer[result] = 0x2e;\n      decimal_result = format_signed_number_as_decimal(output_buffer + total_length,remainder);\n      fmt_lpad(output_buffer + total_length,decimal_result,-width,0x30);\n    }\n    total_length = -width + total_length;\n  }\n  else {\n    total_length = format_signed_number_as_decimal(output_buffer,number);\n    if (output_buffer != (ptr *)0x0) {\n      fill_memory(output_buffer + total_length,0x30,width);\n    }\n    total_length = width + total_length;\n  }\n  return total_length;\n}\n\n",
            "current_name": "format_number_with_padding_00003ec4",
            "entrypoint": "0x00003ec4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003ec4": "format_number_with_padding_00003ec4",
                "SCARRY4": "is_overflow",
                "core_panic": "panic",
                "fmt_s32_dec": "format_signed_number_as_decimal",
                "iVar1": "result",
                "local_10": "remainder",
                "local_c": "total_length",
                "memset": "fill_memory",
                "param_1": "output_buffer",
                "param_2": "number",
                "param_3": "width",
                "uVar2": "decimal_result",
                "uVar3": "quotient",
                "undefined": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "additional_data": {
                "FUN_00003ff4": {
                    "copy_and_fill": 9,
                    "copy_and_fill_buffer": 8,
                    "copy_and_fill_memory": 6,
                    "move_and_fill": 1,
                    "move_and_fill_buffer": 1,
                    "move_and_fill_memory": 2,
                    "rearrange_and_fill_memory": 1,
                    "relocate_and_fill": 1,
                    "reverse_and_fill": 1
                },
                "param_1": {
                    "dest": 5,
                    "dest_address": 1,
                    "dest_buffer": 5,
                    "dest_ptr": 1,
                    "destination": 14,
                    "destination_buffer": 2,
                    "destination_pointer": 1,
                    "dst": 1,
                    "dst_buffer": 1
                },
                "param_2": {
                    "source_buffer_length": 1,
                    "source_length": 7,
                    "source_size": 9,
                    "src_buffer": 1,
                    "src_buffer_len": 1,
                    "src_buffer_length": 2,
                    "src_len": 1,
                    "src_length": 4,
                    "src_size": 5
                },
                "param_3": {
                    "buffer_length": 1,
                    "dest_buffer_len": 1,
                    "dest_buffer_size": 1,
                    "dest_len": 1,
                    "dest_length": 6,
                    "dest_size": 3,
                    "destination_buffer_length": 1,
                    "destination_length": 5,
                    "destination_size": 9,
                    "dst_size": 1,
                    "length": 1,
                    "total_size": 1
                },
                "param_4": {
                    "fill_byte": 16,
                    "fill_char": 1,
                    "fill_value": 13,
                    "filler": 1
                },
                "uVar1": {
                    "copied_length": 3,
                    "copied_size": 1,
                    "copy_length": 1,
                    "final_size": 1,
                    "new_dest_len": 1,
                    "new_destination_size": 1,
                    "new_length": 1,
                    "new_source_size": 1,
                    "new_src_size": 2,
                    "result": 2,
                    "updated_destination_buffer_length": 1,
                    "updated_src_buffer_length": 1
                }
            },
            "called": [
                "FUN_00004622",
                "FUN_000045ee"
            ],
            "calling": [
                "FUN_00003ec4"
            ],
            "code": "\nuint copy_and_fill_buffer_00003ff4(int destination,uint source_size,uint destination_size,undefined fill_byte)\n\n{\n  uint copied_length;\n  \n  copied_length = source_size;\n  if ((source_size < destination_size) && (copied_length = destination_size, destination != 0)) {\n    memmove((destination_size - source_size) + destination,destination,source_size);\n    memset(destination,fill_byte,destination_size - source_size);\n  }\n  return copied_length;\n}\n\n",
            "current_name": "copy_and_fill_buffer_00003ff4",
            "entrypoint": "0x00003ff4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00003ff4": "copy_and_fill_buffer_00003ff4",
                "param_1": "destination",
                "param_2": "source_size",
                "param_3": "destination_size",
                "param_4": "fill_byte",
                "uVar1": "copied_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004042": {
            "additional_data": {
                "FUN_00004042": {
                    "convert_string_to_decimal": 1,
                    "convert_string_to_int": 7,
                    "convert_string_to_integer": 4,
                    "convert_string_to_long": 1,
                    "convert_string_to_number": 8,
                    "convert_to_integer": 1,
                    "parse_and_convert_string": 1,
                    "parse_integer": 2,
                    "parse_string_to_int": 4,
                    "parse_string_to_long": 2
                },
                "FUN_00004f84": {
                    "decode_byte_array": 1,
                    "extract_bytes": 1,
                    "find_byte_sequence": 1,
                    "find_next_byte_sequence": 2,
                    "find_occurrences": 1,
                    "get_bytes": 1,
                    "parse_byte_array": 1,
                    "parse_data": 1,
                    "process_byte_array": 3,
                    "process_bytes": 3,
                    "process_data": 2,
                    "reverse_bytes": 1,
                    "reverse_bytes_in_buffer": 1
                },
                "param_1": {
                    "byte_arr": 1,
                    "byte_array": 4,
                    "data": 2,
                    "data_buffer": 1,
                    "input": 1,
                    "input_array": 2,
                    "input_buffer": 2,
                    "input_bytes": 5,
                    "input_string": 10,
                    "str": 1,
                    "string_to_convert": 1,
                    "string_to_parse": 1
                },
                "param_2": {
                    "byte_arr_ptr": 1,
                    "byte_array_pointer": 1,
                    "current_position": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "occurrence_pointer": 1,
                    "output": 3,
                    "output_array_ptr": 1,
                    "output_buffer": 2,
                    "output_bytes": 3,
                    "output_pointer": 2,
                    "ptr_to_byte_array": 1
                },
                "param_3": {
                    "arr_size": 1,
                    "array_length": 3,
                    "array_size": 2,
                    "buffer_size": 2,
                    "byte_array_size": 1,
                    "data_length": 1,
                    "data_size": 2,
                    "length": 3,
                    "num_bytes": 3,
                    "size": 1
                }
            },
            "called": [
                "FUN_00004f84"
            ],
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "code": "\nvoid convert_string_to_number_00004042(undefined4 input_string)\n\n{\n  strtol(input_string,0,10);\n  return;\n}\n\n",
            "current_name": "convert_string_to_number_00004042",
            "entrypoint": "0x00004042",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004042": "convert_string_to_number_00004042",
                "param_1": "input_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000404c": {
            "additional_data": {
                "FUN_0000404c": {
                    "decode_and_process_data": 3,
                    "extract_and_process_data": 2,
                    "extract_data": 1,
                    "process_data": 15
                },
                "FUN_00004b34": {
                    "process_subfunction": 1
                },
                "_free_r": {
                    "free_memory": 3
                },
                "bVar10": {
                    "is_zero": 1
                },
                "bVar9": {
                    "bool_val": 1,
                    "bool_var": 1,
                    "check_flag": 1,
                    "check_value": 1,
                    "condition": 2,
                    "flag": 2,
                    "flag_boolean": 1,
                    "is_zero": 19,
                    "temp_bool": 1
                },
                "code": {
                    "callback_function_type": 1,
                    "function_pointer": 1
                },
                "iVar1": {
                    "control_buffer_size": 1,
                    "count": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "error_code": 1,
                    "i_var": 1,
                    "increment": 1,
                    "index": 1,
                    "length": 1,
                    "offset": 3,
                    "param4": 1,
                    "result": 1,
                    "return_value": 2,
                    "size": 1,
                    "temp1": 1,
                    "temp_int_1": 2,
                    "temp_var": 2,
                    "temp_var1": 7,
                    "val1": 1,
                    "value1": 1
                },
                "iVar10": {
                    "loop_count": 1,
                    "val5": 1
                },
                "iVar11": {
                    "increment": 1,
                    "temp_var6": 1
                },
                "iVar12": {
                    "result": 1,
                    "temp_var7": 1
                },
                "iVar13": {
                    "temp_var8": 1
                },
                "iVar14": {
                    "temp_var9": 1
                },
                "iVar2": {
                    "val2": 1
                },
                "iVar5": {
                    "count": 1,
                    "i_var": 1,
                    "i_var_temp": 1,
                    "increment": 1,
                    "iterator": 1,
                    "offset": 2,
                    "size": 1,
                    "step": 1,
                    "temp3": 1,
                    "temp_int_2": 2,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_var": 2,
                    "temp_var1": 1,
                    "temp_var2": 3,
                    "temp_var3": 6,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "val3": 1,
                    "value3": 1,
                    "var1": 1
                },
                "iVar7": {
                    "count": 2,
                    "i_var2": 1,
                    "i_var_loop": 1,
                    "length": 2,
                    "loop_counter": 3,
                    "remaining": 3,
                    "remaining_data": 1,
                    "temp4": 1,
                    "temp_int_3": 2,
                    "temp_value3": 1,
                    "temp_var2": 1,
                    "temp_var3": 2,
                    "temp_var4": 6,
                    "temp_var5": 1,
                    "temp_var7": 1,
                    "val4": 1,
                    "value4": 1,
                    "var2": 1
                },
                "param_1": {
                    "array": 1,
                    "array_data": 1,
                    "buffer": 1,
                    "data": 2,
                    "data_array": 1,
                    "data_buffer": 4,
                    "data_pointer": 1,
                    "data_ptr": 5,
                    "input": 1,
                    "input_array": 8,
                    "input_data": 4,
                    "uint_array": 2
                },
                "param_2": {
                    "config_array": 2,
                    "config_ptr": 1,
                    "control_buffer": 1,
                    "data_array": 1,
                    "data_params": 1,
                    "info": 1,
                    "info_array": 2,
                    "info_buffer": 1,
                    "info_ptr": 3,
                    "int_array": 2,
                    "metadata": 2,
                    "output": 1,
                    "output_array": 1,
                    "output_data": 1,
                    "param_array": 4,
                    "parameters": 3,
                    "params": 2,
                    "params_array": 2
                },
                "pcVar6": {
                    "callback": 1,
                    "callback_fn": 1,
                    "callback_func": 3,
                    "callback_function": 3,
                    "decode_function": 1,
                    "func_ptr": 1,
                    "function_pointer": 9,
                    "function_ptr": 11,
                    "process_data": 1
                },
                "piVar2": {
                    "buffer_ptr": 1,
                    "dynamic_data": 1,
                    "dynamic_memory": 1,
                    "info_ptr": 1,
                    "pi_var": 1,
                    "pointer": 3,
                    "ptr": 2,
                    "temp2": 1,
                    "temp_int_pointer": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 10,
                    "temp_var2": 6,
                    "value2": 1
                },
                "temp_int_4": {
                    "temp_int_4": 1
                },
                "uVar10": {
                    "is_data_decoded": 1
                },
                "uVar3": {
                    "config_value": 2,
                    "control_value": 1,
                    "converted_param_2_value": 1,
                    "data_length": 1,
                    "data_mask": 1,
                    "flag1": 2,
                    "flag_value": 1,
                    "length": 1,
                    "metadata_value": 1,
                    "temp": 1,
                    "temp_uint": 1,
                    "temp_value": 2,
                    "temp_var": 2,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "u_var": 1,
                    "ushort_val": 2,
                    "ushort_value": 3,
                    "ushort_var": 2,
                    "value": 3
                },
                "uVar4": {
                    "config_flags": 1,
                    "control_flag": 1,
                    "data_flags": 1,
                    "flag": 4,
                    "flag2": 2,
                    "flag_value": 1,
                    "flags": 9,
                    "mask_value": 1,
                    "metadata_flags": 1,
                    "temp_flag": 1,
                    "temp_ushort": 1,
                    "temp_ushort_1": 1,
                    "temp_value": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "ushort_val2": 1,
                    "ushort_value_changed": 1,
                    "ushort_var2": 1
                },
                "uVar8": {
                    "data_backup": 1,
                    "old_value": 1,
                    "original_data": 1,
                    "original_input": 1,
                    "temp": 4,
                    "temp2": 1,
                    "temp5": 1,
                    "temp_uint_1": 1,
                    "temp_uint_2": 1,
                    "temp_value": 1,
                    "temp_value2": 2,
                    "temp_value4": 1,
                    "temp_var": 2,
                    "temp_var3": 2,
                    "temp_var4": 2,
                    "temp_var5": 4,
                    "temp_var6": 1,
                    "temp_var8": 1,
                    "u_var": 1,
                    "uint_val": 1,
                    "uint_value": 1
                },
                "uVar9": {
                    "check_value": 1,
                    "is_data_valid": 1
                }
            },
            "called": [
                "FUN_00004b34"
            ],
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "code": "\nundefined4 decode_and_process_data_0000404c(uint *input_array,int *param_array)\n\n{\n  int temp_var1;\n  int *temp_ptr;\n  uint ushort_value;\n  ushort flags;\n  int temp_var3;\n  function_pointer *function_ptr;\n  int temp_var4;\n  uint temp_var5;\n  bool is_zero;\n  \n  flags = *(ushort *)(param_array + 3);\n  ushort_value = (uint)flags;\n  if ((int)(ushort_value << 0x1c) < 0) {\n    temp_var1 = param_array[4];\n    if (temp_var1 != 0) {\n      temp_var3 = ushort_value << 0x1e;\n      is_zero = temp_var3 == 0;\n      temp_var4 = *param_array;\n      if (is_zero) {\n        temp_var3 = param_array[5];\n      }\n      *param_array = temp_var1;\n      if (!is_zero) {\n        temp_var3 = 0;\n      }\n      param_array[2] = temp_var3;\n      for (temp_var4 = temp_var4 - temp_var1; 0 < temp_var4; temp_var4 = temp_var4 - temp_var3) {\n        temp_var3 = (*(function_pointer *)param_array[10])(input_array,param_array[8],temp_var1,temp_var4);\n        if (temp_var3 < 1) {\n          *(ushort *)(param_array + 3) = *(ushort *)(param_array + 3) | 0x40;\n          return 0xffffffff;\n        }\n        temp_var1 = temp_var1 + temp_var3;\n      }\n    }\n  }\n  else {\n    if ((param_array[1] < 1) && (param_array[0x10] < 1)) {\n      return 0;\n    }\n    function_ptr = (function_pointer *)param_array[0xb];\n    if (function_ptr == (function_pointer *)0x0) {\n      return 0;\n    }\n    temp_var5 = *input_array;\n    *input_array = 0;\n    if ((flags & 0x1000) == 0) {\n      temp_var1 = (*function_ptr)(input_array,param_array[8],ushort_value & 0x1000,1);\n      if ((temp_var1 == -1) && (ushort_value = *input_array, ushort_value != 0)) {\n        if ((ushort_value == 0x1d) || (ushort_value == 0x16)) {\n          *input_array = temp_var5;\n          return 0;\n        }\n        flags = *(ushort *)(param_array + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      temp_var1 = param_array[0x15];\n    }\n    if (((int)((uint)*(ushort *)(param_array + 3) << 0x1d) < 0) &&\n       (temp_var1 = temp_var1 - param_array[1], param_array[0xd] != 0)) {\n      temp_var1 = temp_var1 - param_array[0x10];\n    }\n    temp_var1 = (*(function_pointer *)param_array[0xb])(input_array,param_array[8],temp_var1,0);\n    flags = *(ushort *)(param_array + 3);\n    if ((temp_var1 == -1) &&\n       ((0x1d < *input_array || (-1 < (int)((0x20400001U >> (*input_array & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(param_array + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n    param_array[1] = 0;\n    *param_array = param_array[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((temp_var1 != -1 || (*input_array == 0)))) {\n      param_array[0x15] = temp_var1;\n    }\n    temp_ptr = (int *)param_array[0xd];\n    *input_array = temp_var5;\n    if (temp_ptr != (int *)0x0) {\n      if (temp_ptr != param_array + 0x11) {\n        free_memory(input_array);\n      }\n      param_array[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "decode_and_process_data_0000404c",
            "entrypoint": "0x0000404c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000404c": "decode_and_process_data_0000404c",
                "_free_r": "free_memory",
                "bVar9": "is_zero",
                "code": "function_pointer",
                "iVar1": "temp_var1",
                "iVar2": "val2",
                "iVar5": "temp_var3",
                "iVar7": "temp_var4",
                "param_1": "input_array",
                "param_2": "param_array",
                "pcVar6": "function_ptr",
                "piVar2": "temp_ptr",
                "uVar3": "ushort_value",
                "uVar4": "flags",
                "uVar8": "temp_var5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004158": {
            "additional_data": {
                "0x16": {
                    "offset_3": 1
                },
                "0x18": {
                    "offset_1": 1
                },
                "0x19": {
                    "offset_4": 1
                },
                "0xc": {
                    "offset_2": 1
                },
                "DAT_": {
                    "unchanged": 1
                },
                "FUNC_000045e8": {
                    "function_a": 1,
                    "initialize_environment": 1,
                    "sub_func_1": 1,
                    "sub_func_a": 1
                },
                "FUNC_000045ec": {
                    "function_b": 1,
                    "release_environment": 1,
                    "sub_func_2": 1,
                    "sub_func_b": 1
                },
                "FUN_0000404c": {
                    "flush_stream_recursive": 1,
                    "func3": 1,
                    "process_data": 1,
                    "sub_func_3": 1,
                    "sub_func_c": 1,
                    "write_to_file": 1
                },
                "FUN_00004158": {
                    "flush_and_release_lock": 5,
                    "flush_and_release_lock_if_needed": 2,
                    "flush_buffer": 8,
                    "flush_buffer_if_needed": 1,
                    "flush_data": 1,
                    "flush_data_stream": 1,
                    "flush_stream": 7,
                    "flush_stream_if_needed": 1,
                    "process_buffer": 1,
                    "process_data": 2
                },
                "FUN_000042a4": {
                    "close_file": 1,
                    "func4": 1,
                    "release_lock": 1,
                    "release_recursive_lock": 1,
                    "sub_func_4": 1,
                    "sub_func_d": 1
                },
                "FUN_000045e8": {
                    "func1": 1,
                    "initialize_static_variables": 1
                },
                "FUN_000045ec": {
                    "acquire_recursive_lock": 1,
                    "func2": 1
                },
                "PTR_": {
                    "unchanged": 1
                },
                "UVar1": {
                    "return_value": 1
                },
                "__retarget_lock_acquire_recursive": {
                    "acquire_lock": 8,
                    "acquire_lock_recursive": 2,
                    "acquire_recursive_lock": 6,
                    "lock_acquire_recursive": 1
                },
                "__retarget_lock_release_recursive": {
                    "lock_release_recursive": 1,
                    "release_lock": 8,
                    "release_lock_recursive": 2,
                    "release_recursive_lock": 5
                },
                "__sflush_r": {
                    "flush": 1,
                    "flush_and_release_lock": 1,
                    "flush_buffer": 2,
                    "flush_data": 2,
                    "flush_data_with_lock": 1,
                    "flush_function": 1,
                    "flush_stream": 8,
                    "flush_stream_buffered": 1,
                    "synchronized_flush": 1
                },
                "__sinit": {
                    "initialize": 5,
                    "initialize_stream": 13,
                    "initialize_streams": 1
                },
                "param_1": {
                    "buffer": 3,
                    "buffer_address": 2,
                    "buffer_length": 1,
                    "buffer_size": 2,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "file_descriptor": 1,
                    "handle": 1,
                    "input": 1,
                    "input_buffer": 1,
                    "input_data": 1,
                    "input_int": 1,
                    "input_pointer": 1,
                    "param": 1,
                    "param_buffer": 1,
                    "ptr1": 1,
                    "stream": 4,
                    "stream_handle": 1,
                    "stream_pointer": 2,
                    "stream_ptr": 2
                },
                "param_2": {
                    "buffer": 6,
                    "data": 2,
                    "data_array": 2,
                    "data_block": 1,
                    "file": 1,
                    "file_descriptor": 1,
                    "file_descriptor_info": 1,
                    "file_stream": 1,
                    "flags": 1,
                    "input_array": 1,
                    "output": 1,
                    "output_buffer": 2,
                    "param_array": 2,
                    "param_data": 1,
                    "ptr2": 1,
                    "stream": 1,
                    "stream_buf": 1,
                    "stream_buffer": 1,
                    "stream_info": 1,
                    "stream_ptr": 1,
                    "stream_state": 2
                },
                "uVar1": {
                    "result": 23,
                    "return_val": 1,
                    "return_value": 6
                }
            },
            "called": [
                "FUN_000045e8",
                "FUN_000045ec",
                "FUN_0000404c",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "code": "\nundefined4 flush_and_release_lock_if_needed_00004158(int stream,undefined4 *buffer)\n\n{\n  undefined4 result;\n  \n  if (buffer[4] != 0) {\n    if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n      initialize_stream();\n    }\n    if (buffer == &DAT_000079b8) {\n      buffer = *(undefined4 **)(stream + 4);\n    }\n    else if (buffer == (undefined4 *)&DAT_000079d8) {\n      buffer = *(undefined4 **)(stream + 8);\n    }\n    else if (buffer == (undefined4 *)&DAT_00007998) {\n      buffer = *(undefined4 **)(stream + 0xc);\n    }\n    if (*(short *)(buffer + 3) != 0) {\n      if ((-1 < (int)(buffer[0x19] << 0x1f)) && (-1 < (int)*(short *)(buffer + 3) << 0x16)) {\n        acquire_lock(buffer[0x16]);\n      }\n      result = flush_stream(stream,buffer);\n      if ((int)(buffer[0x19] << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(buffer + 3) << 0x16) < 0) {\n        return result;\n      }\n      release_lock(buffer[0x16]);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "flush_and_release_lock_if_needed_00004158",
            "entrypoint": "0x00004158",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004158": "flush_and_release_lock_if_needed_00004158",
                "__retarget_lock_acquire_recursive": "acquire_lock",
                "__retarget_lock_release_recursive": "release_lock",
                "__sflush_r": "flush_stream",
                "__sinit": "initialize_stream",
                "param_1": "stream",
                "param_2": "buffer",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000041d0": {
            "additional_data": {
                "FUN_00004158": {
                    "get_descriptor": 1
                },
                "FUN_000041d0": {
                    "flush_and_check_errors": 1,
                    "flush_and_relocate": 1,
                    "flush_buffer": 2,
                    "flush_buffered_data": 1,
                    "flush_buffers": 2,
                    "flush_cache": 1,
                    "flush_data": 9,
                    "flush_file": 1,
                    "flush_files": 7,
                    "flush_modified_files": 1,
                    "flush_relocations": 2,
                    "process_relocation_entries": 1
                },
                "_fflush_r": {
                    "flush_function": 1
                },
                "iVar2": {
                    "count": 9,
                    "counter": 2,
                    "counter_var": 1,
                    "entry_size": 1,
                    "increment": 1,
                    "iterations": 1,
                    "line_length_minus_one": 1,
                    "loop_count": 1,
                    "loop_index": 1,
                    "num_bytes_written": 1,
                    "num_elements": 3,
                    "num_errors": 1,
                    "num_flushed": 1,
                    "num_iterations": 1,
                    "record_count": 2,
                    "short_value": 2,
                    "string_len": 1,
                    "value1": 1
                },
                "iVar4": {
                    "current_entry": 3,
                    "current_index": 1,
                    "current_rel": 1,
                    "current_rel_info": 1,
                    "current_relocation_info": 1,
                    "entry_offset": 1,
                    "entry_pointer": 1,
                    "i_var": 1,
                    "offset": 7,
                    "record_address": 1,
                    "rel_entry": 5,
                    "rel_entry_offset": 1,
                    "rel_entry_ptr": 2,
                    "rel_offset": 3,
                    "struct_offset": 1,
                    "value2": 1
                },
                "iVar6": {
                    "counter": 3,
                    "index": 1,
                    "inner_counter": 1,
                    "inner_counter_var": 1,
                    "inner_loop_count": 1,
                    "inner_loop_index": 1,
                    "iteration_count": 1,
                    "loop_count": 1,
                    "loop_counter": 6,
                    "num_entries": 1,
                    "num_loops": 2,
                    "num_rel_entries": 1,
                    "rel_entry_count": 1,
                    "remaining_count": 4,
                    "remaining_elements": 1,
                    "remaining_entries": 1,
                    "remaining_iterations": 1,
                    "remaining_records": 1,
                    "remaining_relocations": 1,
                    "value3": 1
                },
                "param_1": {
                    "base_address": 1,
                    "buffer_size": 3,
                    "cache_size": 1,
                    "data_ptr": 2,
                    "data_size": 3,
                    "file_count": 1,
                    "file_descriptor": 12,
                    "file_ptr": 1,
                    "file_stream": 1,
                    "handle": 1,
                    "input_buffer": 2,
                    "relocation_offset": 1,
                    "stream_descriptor": 1
                },
                "param_2": {
                    "buffer1": 1,
                    "offset": 13,
                    "offset_1": 1,
                    "param1": 1,
                    "param2": 9,
                    "param_2": 3,
                    "relocation_info": 1,
                    "unknown_param_2": 1
                },
                "param_3": {
                    "additional_param": 1,
                    "attachment": 1,
                    "buffer2": 1,
                    "buffer_size": 1,
                    "count": 1,
                    "flags": 1,
                    "length": 1,
                    "mode": 1,
                    "offset_2": 1,
                    "param2": 1,
                    "param3": 10,
                    "param_3": 3,
                    "size": 5,
                    "unknown_param_3": 1,
                    "value": 1
                },
                "pdVar3": {
                    "current_relocation": 1,
                    "entry": 1,
                    "pd_list": 1,
                    "rel_array": 6,
                    "rel_array_pointer": 1,
                    "rel_array_ptr": 3,
                    "rel_entries": 1,
                    "rel_entry": 1,
                    "rel_pointer": 1,
                    "rel_ptr": 2,
                    "rel_struct": 1,
                    "rel_table": 5,
                    "rel_table_entry": 3,
                    "rel_table_ptr": 1,
                    "relocation": 1,
                    "relocation_entry": 2
                },
                "puVar7": {
                    "additional_data": 1,
                    "base": 1,
                    "base_address": 1,
                    "buffer": 7,
                    "buffer_pointer": 1,
                    "buffer_ptr": 2,
                    "current": 1,
                    "data_ptr": 1,
                    "error_msg": 1,
                    "file_buffer": 1,
                    "file_descriptor": 1,
                    "file_pointer": 2,
                    "file_stream": 1,
                    "output_buffer": 2,
                    "placeholder_ptr": 1,
                    "pu_var": 1,
                    "rel_entry": 1,
                    "rel_type": 1,
                    "relocation_table": 1,
                    "str_ptr": 1,
                    "stream": 1,
                    "string_var": 1
                },
                "uVar1": {
                    "error": 1,
                    "fflush_result": 1,
                    "flush_result": 2,
                    "result": 20,
                    "return_value": 5,
                    "status": 2
                },
                "uVar5": {
                    "combined_result": 4,
                    "combined_results": 1,
                    "error_code": 1,
                    "error_flags": 1,
                    "final_result": 1,
                    "result": 6,
                    "return_value": 2,
                    "total_errors": 1,
                    "total_result": 13,
                    "total_status": 1
                }
            },
            "called": [
                "FUN_00004158"
            ],
            "calling": [
                "FUN_00002e48"
            ],
            "code": "\nuint flush_buffered_data_000041d0(int file_descriptor,undefined4 offset,undefined4 param3)\n\n{\n  uint result;\n  int count;\n  dword *rel_array;\n  int offset;\n  uint total_result;\n  int loop_counter;\n  undefined4 *buffer;\n  \n  if (file_descriptor == 0) {\n    buffer = &DAT_000079f8;\n    rel_array = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    total_result = 0;\n    do {\n      loop_counter = rel_array[1];\n      offset = rel_array[2];\n      while (loop_counter = loop_counter + -1, -1 < loop_counter) {\n        if ((1 < *(ushort *)(offset + 0xc)) && (count = *(short *)(offset + 0xe) + 1, count != 0)) {\n          result = flush_function(0x1fff0284,offset,param3,count,buffer);\n          total_result = total_result | result;\n        }\n        offset = offset + 0x68;\n      }\n      rel_array = (dword *)*rel_array;\n    } while (rel_array != (dword *)0x0);\n    return total_result;\n  }\n  total_result = flush_function(Elf32_Rel_ARRAY_1fff0200[16].r_offset,file_descriptor);\n  return total_result;\n}\n\n",
            "current_name": "flush_buffered_data_000041d0",
            "entrypoint": "0x000041d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000041d0": "flush_buffered_data_000041d0",
                "_fflush_r": "flush_function",
                "iVar2": "count",
                "iVar4": "offset",
                "iVar6": "loop_counter",
                "param_1": "file_descriptor",
                "param_2": "offset",
                "param_3": "param3",
                "pdVar3": "rel_array",
                "puVar7": "buffer",
                "uVar1": "result",
                "uVar5": "total_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000041f4": {
            "additional_data": {
                "FUN_000041f4": {
                    "initialize_data": 7,
                    "initialize_data_struct": 6,
                    "initialize_data_structure": 8,
                    "initialize_device": 1,
                    "initialize_device_info": 1,
                    "initialize_param1": 1,
                    "initialize_parameters": 4,
                    "initialize_params": 2,
                    "initialize_struct": 1
                },
                "LAB_00004e4a_1": {
                    "default_pointer": 1,
                    "some_label": 1
                },
                "param_1": {
                    "data": 4,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "data_struct": 5,
                    "data_struct_ptr": 1,
                    "data_structure": 8,
                    "device": 1,
                    "device_info": 1,
                    "output": 2,
                    "output_array": 1,
                    "parameters": 3,
                    "params": 1,
                    "struct_pointer": 1
                },
                "param_2": {
                    "config_value": 1,
                    "initial_value1": 1,
                    "param1": 1,
                    "param1_value": 1,
                    "param2": 1,
                    "param2_value": 1,
                    "value1": 25
                },
                "param_3": {
                    "initial_value2": 1,
                    "param2": 1,
                    "param2_value": 1,
                    "param3": 1,
                    "param3_value": 1,
                    "status": 1,
                    "value2": 25
                }
            },
            "called": [
                "FUN_00004622"
            ],
            "calling": [
                "FUN_000042a4"
            ],
            "code": "\nvoid initialize_data_structure_000041f4(undefined4 *data_structure,undefined2 value1,undefined2 value2)\n\n{\n  *data_structure = 0;\n  data_structure[1] = 0;\n  data_structure[4] = 0;\n  data_structure[5] = 0;\n  data_structure[2] = 0;\n  *(undefined2 *)(data_structure + 3) = value1;\n  data_structure[0x19] = 0;\n  *(undefined2 *)((int)data_structure + 0xe) = value2;\n  data_structure[6] = 0;\n  memset(data_structure + 0x17,0,8);\n  data_structure[9] = 0x4dc9;\n  data_structure[10] = 0x4def;\n  data_structure[0xb] = 0x4e27;\n  data_structure[8] = data_structure;\n  data_structure[0xc] = &some_label;\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_000041f4",
            "entrypoint": "0x000041f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000041f4": "initialize_data_structure_000041f4",
                "LAB_00004e4a_1": "some_label",
                "param_1": "data_structure",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004248": {
            "additional_data": {
                "FUN_00004248": {
                    "allocate_and_initialize": 6,
                    "allocate_and_initialize_array": 2,
                    "allocate_and_initialize_buffer": 1,
                    "allocate_and_initialize_structure": 1,
                    "allocate_array": 1,
                    "allocate_data_structure": 1,
                    "allocate_dynamic_memory": 1,
                    "allocate_memory": 7,
                    "allocate_memory_and_initialize": 1,
                    "create_dynamic_array": 1,
                    "create_dynamic_buffer": 1,
                    "initialize_array": 3,
                    "initialize_data_structure": 3,
                    "initialize_memory": 2
                },
                "FUN_00004622": {
                    "clear_data_structure": 1,
                    "clear_memory": 1,
                    "initialize_array": 1,
                    "initialize_array_element": 1,
                    "initialize_buffer": 1,
                    "initialize_chunk": 1,
                    "initialize_element": 4,
                    "initialize_memory": 2,
                    "memset_with_data": 1
                },
                "FUN_00004bd0": {
                    "add_item_to_queue": 1,
                    "allocate_memory": 2,
                    "calculate_checksum": 1,
                    "copy_data": 1,
                    "copy_data_to_buffer": 1,
                    "copy_values_to_memory": 1,
                    "fill_array": 1,
                    "fill_data_structure": 1,
                    "initialize_array": 1,
                    "memcpy_with_offset": 1,
                    "memset_memory": 1,
                    "modify_data_structure": 1
                },
                "iVar2": {
                    "allocation_size": 2,
                    "array_size": 2,
                    "buffer_size_2": 1,
                    "buffer_size_minus_1": 1,
                    "data_structure_size": 1,
                    "offset": 3,
                    "size": 1,
                    "size_of_allocated_memory": 1,
                    "total_block_size": 1,
                    "total_size": 18
                },
                "param_1": {
                    "array_ptr": 3,
                    "buffer_size": 2,
                    "chunk": 1,
                    "data_structure_ptr": 2,
                    "dest": 1,
                    "destination": 1,
                    "element_size": 1,
                    "memory_block": 1,
                    "param_size": 1,
                    "ptr": 1,
                    "queue": 1,
                    "size": 12,
                    "size_of_allocation": 3,
                    "size_of_structure": 1
                },
                "param_2": {
                    "array_length": 1,
                    "array_size": 1,
                    "count": 7,
                    "element_size": 1,
                    "item": 1,
                    "length": 1,
                    "num_blocks": 1,
                    "num_elements": 11,
                    "num_of_elements": 2,
                    "number_of_elements": 1,
                    "param2": 1,
                    "param_2": 1,
                    "size": 2
                },
                "param_3": {
                    "arg1": 1,
                    "arg3": 1,
                    "element_size": 1,
                    "first_value": 1,
                    "initial_value": 1,
                    "param3": 1,
                    "param_3": 1,
                    "size_of_element": 1,
                    "source": 1,
                    "value1": 2
                },
                "param_4": {
                    "additional_data": 1,
                    "additional_value": 1,
                    "arg2": 1,
                    "arg4": 1,
                    "element_value": 1,
                    "offset": 1,
                    "param_4": 1,
                    "second_value": 1,
                    "value2": 2
                },
                "puVar1": {
                    "allocated_array": 1,
                    "allocated_memory": 9,
                    "allocated_structure": 1,
                    "array": 3,
                    "array_ptr": 3,
                    "buffer_ptr": 1,
                    "data_structure": 2,
                    "data_structure_ptr": 2,
                    "dynamic_array": 1,
                    "dynamic_buffer": 1,
                    "memory_block": 2,
                    "pointer": 1,
                    "ptr": 4
                }
            },
            "called": [
                "FUN_00004622",
                "FUN_00004bd0"
            ],
            "calling": [
                "FUN_00004314"
            ],
            "code": "\nundefined4 * allocate_memory_and_initialize_00004248(undefined4 size,int num_elements)\n\n{\n  undefined4 *allocated_memory;\n  int total_size;\n  \n  total_size = (num_elements + -1) * 0x68;\n  allocated_memory = (undefined4 *)_malloc_r(size,total_size + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = num_elements;\n    allocated_memory[2] = allocated_memory + 3;\n    memset(allocated_memory + 3,0,total_size + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "current_name": "allocate_memory_and_initialize_00004248",
            "entrypoint": "0x00004248",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004248": "allocate_memory_and_initialize_00004248",
                "iVar2": "total_size",
                "param_1": "size",
                "param_2": "num_elements",
                "puVar1": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004274": {
            "additional_data": {
                "FUNC_000045e8": {
                    "do_something": 7,
                    "execute_additional_function": 1,
                    "execute_function": 1,
                    "execute_operation": 1,
                    "execute_subfunction": 1,
                    "initialize": 1,
                    "initialize_function": 2,
                    "perform_additional_operation": 1,
                    "perform_additional_task": 6,
                    "perform_extra_task": 1,
                    "perform_task": 1,
                    "print_debug_info": 1,
                    "reinitialize_function": 1,
                    "reset_function": 1,
                    "some_function": 1,
                    "some_subfunction": 1,
                    "sub_function": 1
                },
                "FUN_00004274": {
                    "acquire_lock_recursive": 1,
                    "acquire_recursive_lock": 28,
                    "acquire_recursive_lock_for_retarg": 1,
                    "acquire_recursive_retlock": 1
                }
            },
            "called": [
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_00004314"
            ],
            "code": "\nvoid acquire_recursive_lock_for_retarg_00004274(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_1fff0dec);\n  return;\n}\n\n",
            "current_name": "acquire_recursive_lock_for_retarg_00004274",
            "entrypoint": "0x00004274",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004274": "acquire_recursive_lock_for_retarg_00004274"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004280": {
            "additional_data": {
                "FUNC_000045ec": {
                    "cleanup": 1,
                    "do_something": 4,
                    "execute_cleanup_tasks": 1,
                    "execute_post_release": 1,
                    "execute_sub_function": 2,
                    "extra_cleanup": 1,
                    "helper_function": 1,
                    "initialize_function": 1,
                    "nested_function": 1,
                    "perform_action": 1,
                    "perform_additional_task": 1,
                    "perform_cleanup": 3,
                    "process_data": 1,
                    "recursive_lock": 1,
                    "recursive_lock_release": 2,
                    "reset_function": 2,
                    "reset_recursive": 1,
                    "sub_function": 3
                },
                "FUN_00004280": {
                    "release_lock": 7,
                    "release_lock_recursive": 1,
                    "release_recursive_lock": 23
                },
                "_FUN_00004280_1": {
                    "lock": 1
                }
            },
            "called": [
                "FUN_000045ec"
            ],
            "calling": [
                "FUN_00004314"
            ],
            "code": "\nvoid release_lock_recursive_00004280(void)\n\n{\n  __retarget_lock_release_recursive(&DAT_1fff0dec);\n  return;\n}\n\n",
            "current_name": "release_lock_recursive_00004280",
            "entrypoint": "0x00004280",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004280": "release_lock_recursive_00004280"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000428c": {
            "additional_data": {
                "0x1fff0de7": {
                    "lock_parameter": 1
                },
                "FUNC_000045e8": {
                    "do_custom_task": 1,
                    "do_something": 5,
                    "execute_additional_function": 2,
                    "execute_function": 2,
                    "execute_secondary_function": 1,
                    "function_000045e8": 1,
                    "handle_subfunction": 1,
                    "initialize": 3,
                    "initialize_function": 2,
                    "initialize_lock": 1,
                    "perform_additional_task": 6,
                    "perform_cleanup": 3,
                    "perform_task": 1,
                    "post_acquisition_action": 1,
                    "unlock": 1
                },
                "FUN_0000428c": {
                    "acquire_recursive_lock": 28,
                    "acquire_recursive_retarget_lock": 2,
                    "lock_acquire": 1
                },
                "__retarget_lock_acquire_recursive": {
                    "acquire_recursive_lock": 13,
                    "acquire_recursive_retarget_lock": 1
                }
            },
            "called": [
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_000042a4"
            ],
            "code": "\nvoid acquire_recursive_retarget_lock_0000428c(void)\n\n{\n  acquire_recursive_lock(0x1fff0de7);\n  return;\n}\n\n",
            "current_name": "acquire_recursive_retarget_lock_0000428c",
            "entrypoint": "0x0000428c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000428c": "acquire_recursive_retarget_lock_0000428c",
                "__retarget_lock_acquire_recursive": "acquire_recursive_lock"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000042a4": {
            "additional_data": {
                "0x1fff0284": {
                    "constant_value": 1,
                    "default_value": 1
                },
                "0x1fff0de7": {
                    "lock_value": 2
                },
                "DAT_0000423d": {
                    "some_data": 1
                },
                "FUC_000045ec": {
                    "cleanup_resources": 1
                },
                "FUNC_000045ec": {
                    "another_function": 1,
                    "clean_up": 1,
                    "cleanup": 8,
                    "cleanup_data": 1,
                    "clear_data": 1,
                    "execute_function": 3,
                    "finalize_data": 2,
                    "finalize_function": 1,
                    "lock_release": 1,
                    "perform_action": 5,
                    "perform_additional_tasks": 1,
                    "perform_task": 1,
                    "release_lock": 1,
                    "reverse_action": 1,
                    "subfunction3": 1
                },
                "FUN_000041f4": {
                    "init_data": 1,
                    "initialize_array": 1,
                    "initialize_buffer": 1,
                    "initialize_data": 3,
                    "initialize_data_with_params": 1,
                    "initialize_flag": 1,
                    "initialize_memory": 1,
                    "initialize_param1": 1,
                    "initialize_parameters": 1,
                    "initialize_pointer": 4,
                    "initialize_record": 1,
                    "initialize_subfunction1": 1,
                    "initialize_undefined": 1,
                    "initialize_values": 3,
                    "initialize_variable": 2,
                    "initialize_variable1": 1,
                    "initialize_variables": 1,
                    "set_initial_data": 1,
                    "set_initial_values": 3
                },
                "FUN_0000428c": {
                    "acquire_lock": 1,
                    "additional_initialization": 1,
                    "cleanup": 1,
                    "do_something": 8,
                    "execute_operation": 1,
                    "initialize_helper": 1,
                    "initialize_lock": 1,
                    "initialize_variable2": 1,
                    "lock_acquire": 1,
                    "perform_action": 4,
                    "perform_task": 2,
                    "print_data": 1,
                    "release_lock": 1,
                    "remove_data": 1,
                    "reverse_something": 1,
                    "some_function": 1,
                    "subfunction1": 1
                },
                "FUN_000042a4": {
                    "initialize_data": 17,
                    "initialize_data_structure": 5,
                    "initialize_data_structures": 3,
                    "initialize_device": 3,
                    "initialize_function": 2,
                    "initialize_parameters": 1
                },
                "FUN_00004314": {
                    "copy_data": 1,
                    "initialize_pointer": 1,
                    "initialize_subfunction2": 1,
                    "manipulate_data": 1,
                    "modify_data": 3,
                    "modify_parameter": 1,
                    "modify_pointer": 1,
                    "process_data": 7,
                    "process_pointer": 1,
                    "set_final_values": 1,
                    "sfp": 1,
                    "subfunction2": 1,
                    "update_data": 3,
                    "update_data_pointer": 1,
                    "update_parameters": 1,
                    "update_pointer": 4
                },
                "F_000041f4": {
                    "set_default_value": 1
                },
                "__retarget_lock_release_recursive": {
                    "release_lock": 14,
                    "release_recursive_lock": 1,
                    "release_retarget_lock": 2
                },
                "__sfp": {
                    "get_config_value": 1,
                    "get_default_value": 1,
                    "get_float_parameter": 1,
                    "get_float_pointer": 1,
                    "get_floating_point_status": 1,
                    "get_new_value": 1,
                    "get_sfp_value": 1,
                    "get_string_format_param": 1,
                    "initialize_float_pointer": 1,
                    "initialize_subfunction": 1,
                    "initialize_value": 1,
                    "read_from_sfp": 1,
                    "set_floating_point": 1,
                    "standard_function_pointer": 1
                },
                "__sinit_lock_acquire": {
                    "acquire_init_lock": 3,
                    "acquire_initialization_lock": 4,
                    "acquire_lock": 10
                },
                "param_1": {
                    "data": 3,
                    "data_address": 3,
                    "data_pointer": 4,
                    "data_ptr": 4,
                    "data_struct": 3,
                    "data_structure": 2,
                    "data_structure_address": 4,
                    "data_structure_ptr": 1,
                    "device_address": 3,
                    "function_param": 1,
                    "function_parameter": 1,
                    "input_data": 1,
                    "param": 1
                },
                "param_2": {
                    "param1": 1,
                    "param2": 1,
                    "param2_value": 1,
                    "size_1": 1,
                    "value1": 3,
                    "variable2": 1
                },
                "param_3": {
                    "param2": 1,
                    "param3": 1,
                    "param3_value": 1,
                    "size_2": 1,
                    "value2": 3,
                    "variable3": 1
                },
                "std": {
                    "initialize_pointer": 1,
                    "set_data_type": 1,
                    "set_default_value": 7,
                    "set_defaults": 1,
                    "set_device_data": 1,
                    "set_standard": 1,
                    "set_standard_parameter": 1,
                    "set_values": 1
                },
                "uVar1": {
                    "default_address": 2,
                    "default_flag": 1,
                    "default_value": 2,
                    "error_code": 1,
                    "init_value": 2,
                    "initial_value": 2,
                    "new_data": 1,
                    "new_size": 1,
                    "new_value": 1,
                    "result": 1,
                    "result_value": 1,
                    "return_val": 1,
                    "return_value": 7,
                    "status": 4,
                    "temp_val": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_000041f4",
                "FUN_0000428c",
                "FUN_00004314",
                "FUN_000045ec"
            ],
            "calling": [
                "FUN_00004c84",
                "FUN_00004158",
                "FUN_00005404",
                "FUN_000057f8",
                "FUN_00006768",
                "FUN_00004314",
                "FUN_00004db8",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00004418",
                "FUN_00004cb4"
            ],
            "code": "\nvoid initialize_data_structure_000042a4(int data_pointer)\n\n{\n  undefined4 return_value;\n  \n  acquire_lock();\n  if (*(int *)(data_pointer + 0x18) == 0) {\n    *(undefined4 *)(data_pointer + 0x48) = 0;\n    *(undefined4 *)(data_pointer + 0x4c) = 0;\n    *(undefined4 *)(data_pointer + 0x50) = 0;\n    return_value = 0x1fff0284;\n    *(undefined **)(data_pointer + 0x28) = &DAT_0000423d;\n    if (data_pointer == 0x1fff0284) {\n      return_value = 1;\n    }\n    if (data_pointer == 0x1fff0284) {\n      *(undefined4 *)(data_pointer + 0x18) = return_value;\n    }\n    return_value = get_config_value(data_pointer);\n    *(undefined4 *)(data_pointer + 4) = return_value;\n    return_value = get_config_value(data_pointer);\n    *(undefined4 *)(data_pointer + 8) = return_value;\n    return_value = get_config_value(data_pointer);\n    *(undefined4 *)(data_pointer + 0xc) = return_value;\n    set_default_value(*(undefined4 *)(data_pointer + 4),4,0);\n    set_default_value(*(undefined4 *)(data_pointer + 8),9,1);\n    set_default_value(*(undefined4 *)(data_pointer + 0xc),0x12,2);\n    *(undefined4 *)(data_pointer + 0x18) = 1;\n  }\n  release_lock(0x1fff0de7);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_000042a4",
            "entrypoint": "0x000042a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000042a4": "initialize_data_structure_000042a4",
                "__retarget_lock_release_recursive": "release_lock",
                "__sfp": "get_config_value",
                "__sinit_lock_acquire": "acquire_lock",
                "param_1": "data_pointer",
                "std": "set_default_value",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004314": {
            "additional_data": {
                "0x0": {
                    "null_pointer": 1
                },
                "0x1a": {
                    "increment": 1
                },
                "0xc": {
                    "error_code": 1
                },
                "0xffff0001": {
                    "magic_number": 1
                },
                "DAT_1fff0284": {
                    "data": 1
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "array": 1,
                    "elf32_array": 1,
                    "elf_relocation_array": 1,
                    "rel_array": 2,
                    "rel_table": 1,
                    "symbol_table": 1
                },
                "FUNC_000045e4": {
                    "finalize_processing": 1,
                    "memset_data": 1,
                    "more_glue": 1,
                    "set_module_defaults": 1
                },
                "FUN_00004248": {
                    "allocate_data": 1,
                    "allocate_memory": 3
                },
                "FUN_00004274": {
                    "acquire_lock": 2,
                    "initialize_global": 1,
                    "initialize_lock": 1
                },
                "FUN_00004280": {
                    "cleanup_global": 1,
                    "release_lock": 3
                },
                "FUN_000042a4": {
                    "initialize_recursive_lock": 3,
                    "process_integer": 1
                },
                "FUN_00004314": {
                    "decompiled_function": 1,
                    "extract_binary_func": 1,
                    "extract_data_from_binary": 1,
                    "initialize_component": 1,
                    "initialize_data_structures": 1,
                    "initialize_foo": 1,
                    "initialize_function": 1,
                    "initialize_locks": 2,
                    "initialize_module": 5,
                    "initialize_mutex": 1,
                    "initialize_object": 6,
                    "initialize_pointer": 1,
                    "initialize_recursive_lock": 1,
                    "initialize_subsystem": 3
                },
                "FUN_00004622": {
                    "init_module": 1,
                    "initialize_data": 1,
                    "process_data": 1,
                    "zero_memory_and_initialize_lock": 1
                },
                "PARAM_1": {
                    "param1": 1
                },
                "__retarget_lock_init_recursive": {
                    "init_recursive_lock": 1,
                    "initialize_lock": 1,
                    "initialize_lock_recursive": 1,
                    "initialize_recursive_lock": 3,
                    "recursive_lock_init": 1
                },
                "__sfmoreglue": {
                    "allocate_memory": 5
                },
                "__sfp_lock_acquire": {
                    "acquire_lock": 6,
                    "acquire_sfp_lock": 1
                },
                "__sfp_lock_release": {
                    "release_lock": 6,
                    "release_sfp_lock": 1
                },
                "__sinit": {
                    "init": 1,
                    "initialize": 3,
                    "initialize_function": 1,
                    "initialize_rel": 1,
                    "initialize_symbol_table": 1
                },
                "dVar1": {
                    "alloc_size": 1,
                    "allocated_data": 1,
                    "allocated_memory": 5,
                    "allocation_result": 1,
                    "dynamic_var": 2,
                    "dynamic_var1": 3,
                    "memory_allocation": 1,
                    "new_d_var": 2,
                    "new_data_value": 1,
                    "new_memory_block_count": 1,
                    "new_module_ptr": 1,
                    "new_mutex": 1,
                    "new_object": 1,
                    "new_object_address": 1,
                    "new_object_ptr": 1,
                    "new_pointer": 1,
                    "new_sfmoreglue_result": 1,
                    "new_size": 3,
                    "new_table_entry": 1,
                    "return_value": 1,
                    "temp": 1
                },
                "dWord": {
                    "temporary_data": 1
                },
                "dWord1": {
                    "d_word1": 1
                },
                "iVar2": {
                    "count": 7,
                    "counter": 2,
                    "iterated_value": 1,
                    "iteration_count": 4,
                    "iteration_counter": 2,
                    "iteration_var": 1,
                    "iterator": 1,
                    "loop_counter": 8,
                    "num_iterations": 2,
                    "num_modules": 1,
                    "remaining_iterations": 1
                },
                "memset": {
                    "clear_memory": 4,
                    "fill_memory": 2,
                    "initialize_memory": 1
                },
                "param_1": {
                    "array_pointer": 1,
                    "component": 1,
                    "input_array": 1,
                    "module_array": 1,
                    "module_pointer": 1,
                    "mutex": 1,
                    "object": 1,
                    "object_pointer": 1,
                    "object_ptr": 3,
                    "output": 1,
                    "output_array": 2,
                    "param": 2,
                    "param_array": 1,
                    "pointer": 1,
                    "pointer_list": 1,
                    "result": 9,
                    "result_pointer": 1,
                    "return_address": 1
                },
                "pdVar4": {
                    "current_data_link": 1,
                    "current_data_pointer": 1,
                    "current_entry_pointer": 1,
                    "current_pointer": 1,
                    "current_pointer_to_next_object_ptr": 1,
                    "current_rel_info_ptr": 1,
                    "current_relocation": 2,
                    "link_ptr": 1,
                    "linked_list": 1,
                    "linked_list_pointer": 2,
                    "module_list_ptr": 1,
                    "next_object_ptr": 1,
                    "p_next": 1,
                    "pointer_array": 1,
                    "pointer_data": 1,
                    "pointer_data_var": 1,
                    "pointer_to_dword": 1,
                    "pointer_to_rel_array": 1,
                    "pointer_var4": 1,
                    "ptr_index": 1,
                    "rel_array": 1,
                    "rel_array_pointer": 1,
                    "rel_array_ptr": 3,
                    "rel_info_ptr": 1,
                    "rel_table_entry": 1,
                    "relocation_info_array": 1
                },
                "ptr1": {
                    "info_ptr": 1
                },
                "ptr2": {
                    "ptr": 1
                },
                "puVar3": {
                    "current_data_array": 1,
                    "current_element": 1,
                    "current_module": 1,
                    "current_obj_ptr": 1,
                    "current_object": 2,
                    "current_object_ptr": 1,
                    "current_pointer": 6,
                    "current_ptr": 2,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "module_pointer": 1,
                    "module_ptr": 1,
                    "object_pointer": 1,
                    "p_mutex": 1,
                    "pointer": 2,
                    "pointer_to_relocation": 1,
                    "pointer_var": 3,
                    "pointer_var3": 1,
                    "ptr": 1,
                    "result_array": 1
                }
            },
            "called": [
                "FUN_00004274",
                "FUN_00004622",
                "FUN_00004280",
                "FUN_00004248",
                "FUN_000042a4",
                "FUN_000045e4"
            ],
            "calling": [
                "FUN_000042a4"
            ],
            "code": "\nundefined4 * initialize_object_00004314(undefined4 *result)\n\n{\n  dword allocated_memory;\n  int loop_counter;\n  undefined4 *current_pointer;\n  dword *rel_array_ptr;\n  \n  acquire_lock();\n  if (rel_array[19].r_info == 0) {\n    initialize(0x1fff0284);\n  }\n  rel_array_ptr = &rel_array[0x19].r_info;\n  do {\n    loop_counter = rel_array_ptr[1];\n    current_pointer = (undefined4 *)rel_array_ptr[2];\n    while (loop_counter = loop_counter + -1, -1 < loop_counter) {\n      if (*(short *)(current_pointer + 3) == 0) {\n        current_pointer[3] = 0xffff0001;\n        current_pointer[0x19] = 0;\n        initialize_recursive_lock(current_pointer + 0x16);\n        release_lock();\n        current_pointer[1] = 0;\n        current_pointer[2] = 0;\n        current_pointer[4] = 0;\n        current_pointer[5] = 0;\n        *current_pointer = 0;\n        current_pointer[6] = 0;\n        clear_memory(current_pointer + 0x17,0,8);\n        current_pointer[0xd] = 0;\n        current_pointer[0xe] = 0;\n        current_pointer[0x12] = 0;\n        current_pointer[0x13] = 0;\n        return current_pointer;\n      }\n      current_pointer = current_pointer + 0x1a;\n    }\n    if (*rel_array_ptr == 0) {\n      allocated_memory = allocate_memory(result,4);\n      *rel_array_ptr = allocated_memory;\n      if (allocated_memory == 0) {\n        release_lock();\n        *result = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    rel_array_ptr = (dword *)*rel_array_ptr;\n  } while( true );\n}\n\n",
            "current_name": "initialize_object_00004314",
            "entrypoint": "0x00004314",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_00004314": "initialize_object_00004314",
                "__retarget_lock_init_recursive": "initialize_recursive_lock",
                "__sfmoreglue": "allocate_memory",
                "__sfp_lock_acquire": "acquire_lock",
                "__sfp_lock_release": "release_lock",
                "__sinit": "initialize",
                "dVar1": "allocated_memory",
                "iVar2": "loop_counter",
                "memset": "clear_memory",
                "param_1": "result",
                "pdVar4": "rel_array_ptr",
                "puVar3": "current_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000043a0": {
            "additional_data": {
                "FUN_000043a0": {
                    "bitwise_or_calculation": 1,
                    "calculate_checksum": 1,
                    "calculate_result": 1,
                    "check_and_execute_functions": 1,
                    "evaluate_conditions": 1,
                    "extract_and_evaluate": 1,
                    "extract_and_process_data": 1,
                    "extracted_function": 1,
                    "find_and_execute_codes": 1,
                    "find_duplicate_values": 1,
                    "find_relevant_values": 1,
                    "find_targets": 1,
                    "find_values": 1,
                    "process_data": 13,
                    "process_function": 1,
                    "read_and_process_data": 1,
                    "reverse_bits": 1
                },
                "iVar3": {
                    "array_offset": 1,
                    "code_pointer": 1,
                    "count": 2,
                    "counter": 2,
                    "current_data": 1,
                    "current_entry_ptr": 1,
                    "current_offset": 3,
                    "current_struct": 1,
                    "current_value": 2,
                    "data_address": 3,
                    "data_offset": 1,
                    "inner_data_var": 1,
                    "inner_loop_counter": 2,
                    "inner_offset": 1,
                    "length": 1,
                    "nested_address": 1,
                    "offset": 3,
                    "ptr_data": 1,
                    "struct_offset": 1,
                    "value2": 1,
                    "value_1": 1
                },
                "iVar5": {
                    "count": 10,
                    "counter": 3,
                    "data_address": 1,
                    "index": 1,
                    "inner_count": 1,
                    "inner_counter": 2,
                    "iteration_count": 1,
                    "iteration_counter": 1,
                    "loop_count": 1,
                    "loop_counter": 4,
                    "remaining_iterations": 4,
                    "value3": 1,
                    "value_2": 1
                },
                "iVar7": {
                    "header_address": 1
                },
                "param_1": {
                    "array": 1,
                    "base_address": 12,
                    "data_offset": 2,
                    "input": 1,
                    "input_address": 1,
                    "input_data_offset": 1,
                    "input_offset": 3,
                    "input_param": 2,
                    "input_value": 3,
                    "param_base_address": 1,
                    "start_address": 2,
                    "starting_address": 1,
                    "value1": 1
                },
                "param_2": {
                    "callback": 3,
                    "callback_func": 4,
                    "callback_function": 17,
                    "evaluate_function": 1,
                    "exec_func": 1,
                    "function_pointer": 2,
                    "function_ptr": 1,
                    "process_data_func": 1
                },
                "piVar2": {
                    "code_block_pointer": 1,
                    "current_address_pointer": 1,
                    "current_data": 1,
                    "current_entry": 1,
                    "current_index": 1,
                    "current_node": 2,
                    "current_pointer": 5,
                    "current_ptr": 2,
                    "data_array_ptr": 1,
                    "data_pointer": 3,
                    "iterator": 1,
                    "list_ptr": 1,
                    "p_pointer": 1,
                    "pointer": 3,
                    "pointer1": 1,
                    "ptr": 3,
                    "ptr_array": 1,
                    "ptr_current": 1
                },
                "uVar1": {
                    "callback_result": 5,
                    "function_result": 1,
                    "inner_result": 1,
                    "result": 19,
                    "return_val": 1,
                    "return_value": 3
                },
                "uVar4": {
                    "checksum": 1,
                    "combined_result": 9,
                    "combined_results": 3,
                    "combined_return_val": 1,
                    "combined_return_value": 1,
                    "duplicate_values": 1,
                    "final_result": 3,
                    "flags": 1,
                    "result": 9,
                    "result_flags": 1,
                    "target_flags": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00006768"
            ],
            "code": "\nuint extract_and_process_data_000043a0(int base_address,code *callback_function)\n\n{\n  uint result;\n  int *current_pointer;\n  int data_address;\n  uint combined_result;\n  int count;\n  \n  current_pointer = (int *)(base_address + 0x48);\n  combined_result = 0;\n  do {\n    count = current_pointer[1];\n    data_address = current_pointer[2];\n    while (count = count + -1, -1 < count) {\n      if ((1 < *(ushort *)(data_address + 0xc)) && (*(short *)(data_address + 0xe) != -1)) {\n        result = (*callback_function)(data_address);\n        combined_result = combined_result | result;\n      }\n      data_address = data_address + 0x68;\n    }\n    current_pointer = (int *)*current_pointer;\n  } while (current_pointer != (int *)0x0);\n  return combined_result;\n}\n\n",
            "current_name": "extract_and_process_data_000043a0",
            "entrypoint": "0x000043a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000043a0": "extract_and_process_data_000043a0",
                "iVar3": "data_address",
                "iVar5": "count",
                "param_1": "base_address",
                "param_2": "callback_function",
                "piVar2": "current_pointer",
                "uVar1": "result",
                "uVar4": "combined_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004418": {
            "additional_data": {
                "DAT_00007998": {
                    "data_3": 1
                },
                "DAT_000079b8": {
                    "data_1": 1
                },
                "DAT_000079d8": {
                    "data_2": 1
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "decoded_array": 1,
                    "elf_relocations": 1,
                    "input_array": 1,
                    "relocation_array": 1,
                    "relocation_table": 4,
                    "relocations": 1
                },
                "F1": {
                    "read_byte_from_memory": 1
                },
                "FUNC_000045e8": {
                    "function_1": 1,
                    "initialize": 1,
                    "initialize_lock": 1,
                    "initialize_pp_buffer": 1,
                    "initialize_recursive_acquire_lock": 1,
                    "initialize_recursive_lock": 1,
                    "initialize_sinit_1": 1,
                    "reverse": 1
                },
                "FUNC_000045ec": {
                    "finalize": 1,
                    "function_3": 1,
                    "initialize_recursive_release_lock": 1,
                    "initialize_sinit_2": 1,
                    "release_buffer": 1,
                    "release_lock": 1,
                    "release_recursive_lock": 1,
                    "reset": 1
                },
                "FUN_000042a4": {
                    "function_4": 1,
                    "initialize": 2,
                    "initialize_data": 1,
                    "initialize_offset": 1,
                    "initialize_something": 1,
                    "lock_acquire": 1,
                    "process": 1,
                    "release_lock": 1,
                    "retarget_lock_acquire_recursive": 1,
                    "srget_r": 1,
                    "unlock_resource": 1
                },
                "FUN_00004418": {
                    "decode_byte": 1,
                    "decrement_and_get_next_byte": 1,
                    "get_decoded_value": 1,
                    "parse_and_read_byte": 1,
                    "process_data": 1,
                    "read_byte": 1,
                    "read_byte_from_array": 1,
                    "read_byte_from_buffer": 2,
                    "read_byte_from_input": 1,
                    "read_byte_from_memory": 11,
                    "read_byte_from_pointer": 1,
                    "read_byte_from_ptr": 1,
                    "read_character": 1,
                    "read_from_buffer": 1,
                    "read_input_byte": 1,
                    "read_next_byte": 2,
                    "read_uint_from_memory": 1,
                    "retrieve_data": 1
                },
                "FUN_000045e8": {
                    "initialize": 1,
                    "initialize_lock": 1,
                    "initialize_sinit": 1,
                    "initialize_system": 1
                },
                "FUN_000045ec": {
                    "lock_release_recursive": 1,
                    "release": 1,
                    "release_lock": 1,
                    "release_resources": 1
                },
                "FUN_00005e10": {
                    "calculate": 1,
                    "function_2": 1,
                    "get_byte_from_input": 1,
                    "get_byte_from_stream": 1,
                    "get_byte_or_read_from_memory": 1,
                    "get_character": 1,
                    "get_next_byte": 1,
                    "lock_acquire_recursive": 1,
                    "read_data": 2,
                    "read_int_from_pointer": 1,
                    "srget_r": 1
                },
                "__retarget_lock_acquire_recursive": {
                    "acquire_lock_recursive": 1,
                    "acquire_recursive_lock": 2
                },
                "__retarget_lock_release_recursive": {
                    "release_lock_recursive": 1,
                    "release_recursive_lock": 2
                },
                "__sinit": {
                    "initialize": 2,
                    "initialize_array": 1,
                    "initialize_function_pointer": 1
                },
                "__srget_r": {
                    "function_r": 1,
                    "get_byte_from_stream": 1,
                    "read_byte_from_stream": 1
                },
                "dVar1": {
                    "buffer_offset": 1,
                    "current_offset": 1,
                    "data_offset": 1,
                    "decoded_offset": 1,
                    "memory_offset": 1,
                    "offset": 11,
                    "r_offset": 2,
                    "rel_offset": 3,
                    "relocation_offset": 6
                },
                "pbVar4": {
                    "buffer_pointer": 1,
                    "byte_pointer": 6,
                    "byte_ptr": 4,
                    "byte_value": 4,
                    "current_byte": 3,
                    "current_byte_ptr": 2,
                    "data_ptr": 1,
                    "element_ptr": 1,
                    "p_buffer": 1,
                    "pointer": 1,
                    "pointer_buffer": 1,
                    "previous_byte": 1,
                    "temp_byte": 1,
                    "temp_byte_ptr": 1,
                    "value": 1
                },
                "ppbVar3": {
                    "array_ptr": 1,
                    "buffer_ptr": 2,
                    "byte_array": 1,
                    "byte_pointer": 3,
                    "byte_pointer_pointer": 1,
                    "byte_ptr_ptr": 1,
                    "current_address": 1,
                    "current_buffer_ptr": 1,
                    "current_data_ptr": 1,
                    "current_memory_address": 1,
                    "data_pointer": 1,
                    "memory_location": 1,
                    "memory_ptr": 1,
                    "pointer_array": 5,
                    "pointer_to_byte_ptr": 1,
                    "pointer_to_pointer": 1,
                    "pp_buffer": 1,
                    "relocated_data": 1,
                    "relocated_pointer": 2,
                    "relocation_entry": 1,
                    "target_pointer": 1
                },
                "uVar2": {
                    "byte_value": 2,
                    "character": 1,
                    "decoded_value": 1,
                    "next_byte": 1,
                    "read_byte": 2,
                    "read_byte_result": 1,
                    "read_byte_value": 1,
                    "read_value": 2,
                    "result": 15,
                    "return_value": 2
                }
            },
            "called": [
                "FUN_000045e8",
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_00002d94"
            ],
            "code": "\nuint read_byte_from_memory_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **pointer_array;\n  byte *byte_pointer;\n  \n  offset = relocation_table[16].r_offset;\n  if ((relocation_table[16].r_offset != 0) &&\n     (*(int *)(relocation_table[16].r_offset + 0x18) == 0)) {\n    initialize(relocation_table[16].r_offset);\n  }\n  pointer_array = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize();\n  }\n  if (pointer_array == (byte **)&DAT_000079b8) {\n    pointer_array = *(byte ***)(offset + 4);\n  }\n  else if (pointer_array == (byte **)&DAT_000079d8) {\n    pointer_array = *(byte ***)(offset + 8);\n  }\n  else if (pointer_array == (byte **)&DAT_00007998) {\n    pointer_array = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)pointer_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(pointer_array + 3) << 0x16))) {\n    acquire_recursive_lock(pointer_array[0x16]);\n  }\n  byte_pointer = pointer_array[1];\n  pointer_array[1] = byte_pointer + -1;\n  if ((int)(byte_pointer + -1) < 0) {\n    result = function_r(offset,pointer_array);\n  }\n  else {\n    byte_pointer = *pointer_array;\n    *pointer_array = byte_pointer + 1;\n    result = (uint)*byte_pointer;\n  }\n  if ((-1 < (int)pointer_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(pointer_array + 3) << 0x16))) {\n    release_recursive_lock(pointer_array[0x16]);\n  }\n  return result;\n}\n\n",
            "current_name": "read_byte_from_memory_00004418",
            "entrypoint": "0x00004418",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "relocation_table",
                "FUN_00004418": "read_byte_from_memory_00004418",
                "__retarget_lock_acquire_recursive": "acquire_recursive_lock",
                "__retarget_lock_release_recursive": "release_recursive_lock",
                "__sinit": "initialize",
                "__srget_r": "function_r",
                "dVar1": "offset",
                "pbVar4": "byte_pointer",
                "ppbVar3": "pointer_array",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000443c": {
            "additional_data": {
                "FUN_0000443c": {
                    "calculate_date": 1,
                    "calculate_date_components": 1,
                    "calculate_date_time": 1,
                    "convert_milliseconds_to_date_time": 2,
                    "convert_time_to_components": 1,
                    "convert_timestamp_to_date_time": 2,
                    "decode_binary_timestamp": 1,
                    "decode_date": 1,
                    "decode_date_time": 3,
                    "decode_datetime": 1,
                    "decode_time": 2,
                    "extract_date_time": 2,
                    "extract_date_time_components": 9,
                    "extract_date_time_parts": 1,
                    "parse_date_time": 2
                },
                "__aeabi_ldivmod": {
                    "divide_and_modulo": 1
                },
                "bVar9": {
                    "is_negative": 29
                },
                "date_ptr": {
                    "date": 1
                },
                "days": {
                    "total_days": 1
                },
                "days_in_week": {
                    "days_per_week": 1
                },
                "days_in_year": {
                    "days_in_a_year": 1
                },
                "divmod_result": {
                    "divmod_result1": 1
                },
                "iVar1": {
                    "adjustment": 1,
                    "days": 2,
                    "days_to_add": 1,
                    "divmod_result": 2,
                    "extra_days": 2,
                    "leap_years": 1,
                    "quotient": 9,
                    "remainder": 2,
                    "smoothed_days": 1,
                    "temp": 3,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "tmp": 1,
                    "twenty_four_hour_val": 1
                },
                "leap_days": {
                    "leap_years": 1
                },
                "mod_result": {
                    "mod_result1": 1
                },
                "param_1": {
                    "current_time": 1,
                    "date_array": 2,
                    "date_input": 1,
                    "date_ptr": 1,
                    "date_time": 11,
                    "date_time_array": 1,
                    "datetime": 1,
                    "datetime_array": 1,
                    "input_params": 3,
                    "input_time": 1,
                    "input_timestamp": 1,
                    "milliseconds": 2,
                    "source_time": 1,
                    "time_in_seconds_ptr": 1,
                    "timestamp": 1,
                    "timestamp_input": 1
                },
                "param_2": {
                    "components": 3,
                    "converted_time": 1,
                    "date_output": 1,
                    "date_time": 2,
                    "date_time_array": 2,
                    "date_time_components_ptr": 1,
                    "date_time_output": 1,
                    "decoded_date_time": 1,
                    "decoded_datetime": 1,
                    "decoded_time": 1,
                    "decoded_timestamp": 1,
                    "output": 1,
                    "output_array": 1,
                    "output_params": 2,
                    "output_time": 1,
                    "parsed_date_time": 2,
                    "result": 1,
                    "result_array": 4,
                    "result_components": 1,
                    "result_ptr": 1,
                    "target_time": 1
                },
                "remaining_days": {
                    "days_without_years": 1
                },
                "result_ptr": {
                    "result": 1
                },
                "temp": {
                    "temp_result": 1
                },
                "temp1": {
                    "temp": 1
                },
                "temp2": {
                    "temp3": 1
                },
                "temp3": {
                    "second_mod_result": 1
                },
                "uVar1": {
                    "is_leap_year": 1
                },
                "uVar10": {
                    "days_remaining": 1,
                    "dividend": 1
                },
                "uVar11": {
                    "century": 1,
                    "quotient2": 1
                },
                "uVar12": {
                    "average_year": 1,
                    "leap_year_flag": 1
                },
                "uVar13": {
                    "temp_year": 1
                },
                "uVar14": {
                    "extra_days": 1
                },
                "uVar15": {
                    "leap_years": 1
                },
                "uVar16": {
                    "temp_month": 1
                },
                "uVar17": {
                    "days_in_month": 1
                },
                "uVar18": {
                    "temp_day": 1
                },
                "uVar2": {
                    "adjusted_days": 1,
                    "adjusted_days_since1900": 1,
                    "century_days": 1,
                    "day_of_week": 4,
                    "days": 6,
                    "days_since_epoch": 1,
                    "decoded_time": 1,
                    "mod_result": 1,
                    "month": 1,
                    "offset": 2,
                    "remainder": 1,
                    "remainder1": 1,
                    "seconds": 1,
                    "temp_value_1": 1,
                    "temp_var2": 1,
                    "total_days": 3,
                    "year": 1,
                    "year_divmod_result": 1,
                    "year_part": 1,
                    "year_value": 1
                },
                "uVar2_temp": {
                    "temp1": 1
                },
                "uVar2_temp2": {
                    "temp7": 1
                },
                "uVar2_temp3": {
                    "temp8": 1
                },
                "uVar2_temp4": {
                    "temp12": 1
                },
                "uVar2_temp5": {
                    "temp16": 1
                },
                "uVar3": {
                    "adjusted_total_hours": 1,
                    "day": 1,
                    "days": 4,
                    "days_since_epoch": 1,
                    "days_since_jan1": 1,
                    "days_value": 1,
                    "leap_days": 1,
                    "remainder": 7,
                    "remainder2": 1,
                    "remaining": 1,
                    "remaining_days": 1,
                    "remaining_milliseconds": 2,
                    "remaining_seconds": 1,
                    "seconds_remaining": 1,
                    "temp_var3": 1,
                    "total_days": 4,
                    "total_minutes": 1,
                    "total_seconds": 1
                },
                "uVar3_temp": {
                    "temp6": 1
                },
                "uVar3_temp2": {
                    "temp15": 1
                },
                "uVar4": {
                    "adjusted_days": 1,
                    "century": 1,
                    "century_quotient": 1,
                    "current_day_of_week": 1,
                    "days": 2,
                    "days_in_year": 1,
                    "days_since_jan1_copy": 1,
                    "div_result": 1,
                    "divmod_result": 1,
                    "extra_days": 1,
                    "hour": 1,
                    "leap_days": 2,
                    "leap_years": 1,
                    "months": 1,
                    "months_value": 1,
                    "quotient1": 1,
                    "remaining_days": 1,
                    "temp": 2,
                    "temp1": 2,
                    "temp_value_2": 1,
                    "temp_var4": 1,
                    "total_leap_years": 1,
                    "u_var4": 1,
                    "year": 3,
                    "year_days": 1
                },
                "uVar4_temp1": {
                    "temp2": 1
                },
                "uVar4_temp2": {
                    "temp3": 1
                },
                "uVar4_temp3": {
                    "temp9": 1
                },
                "uVar4_temp4": {
                    "temp13": 1
                },
                "uVar5": {
                    "adjusted_days": 1,
                    "century": 1,
                    "century_days": 1,
                    "century_remainder": 1,
                    "days_in_month": 1,
                    "days_in_year": 1,
                    "displayed_seconds": 1,
                    "extra_days": 1,
                    "leap_year_count": 2,
                    "leap_year_days": 1,
                    "leap_years": 7,
                    "leap_years_before_current_century": 1,
                    "minute": 1,
                    "quotient2": 1,
                    "temp2": 4,
                    "temp_value_3": 1,
                    "temp_var5": 1,
                    "u_var5": 1,
                    "year_code": 1,
                    "year_days": 1,
                    "year_div_result": 1
                },
                "uVar5_temp": {
                    "temp4": 1
                },
                "uVar5_temp2": {
                    "temp10": 1
                },
                "uVar5_temp3": {
                    "temp14": 1
                },
                "uVar6": {
                    "adjusted_total_days": 1,
                    "days_without_leap_year_days": 1,
                    "dividend": 7,
                    "divisor": 1,
                    "divmod_result1": 1,
                    "first_year": 1,
                    "numerator": 1,
                    "quotient": 6,
                    "temp1": 2,
                    "temp_var6": 1,
                    "total_milliseconds": 1,
                    "year": 7
                },
                "uVar7": {
                    "adjusted_remaining_milliseconds": 1,
                    "days": 1,
                    "days_without_leap_year_days_adjusted": 1,
                    "denominator": 1,
                    "dividend": 1,
                    "divisor": 7,
                    "divmod_result2": 1,
                    "milliseconds_per_day": 1,
                    "month": 6,
                    "remainder": 6,
                    "second_year": 1,
                    "temp2": 2,
                    "temp_var7": 1
                },
                "uVar8": {
                    "additional_days": 1,
                    "adjusted_current_day_of_week": 1,
                    "adjusted_days": 2,
                    "adjusted_year": 2,
                    "century": 1,
                    "century_adjusted_day_of_week": 1,
                    "day_of_week": 1,
                    "days": 1,
                    "days_adjusted": 1,
                    "days_in_week": 1,
                    "days_to_add": 1,
                    "displayed_days": 1,
                    "leap_year_quotient": 1,
                    "offset": 1,
                    "temp": 2,
                    "temp3": 3,
                    "temp_value_4": 1,
                    "temp_var8": 1,
                    "temporary": 1,
                    "u_var8": 1,
                    "week_day": 2,
                    "week_day_value": 1,
                    "weekday": 1,
                    "weekday_calculation": 1,
                    "year_day": 1
                },
                "uVar8_temp": {
                    "temp5": 1
                },
                "uVar8_temp2": {
                    "temp11": 1
                },
                "uVar8_temp3": {
                    "temp17": 1
                },
                "uVar9": {
                    "divisor": 1,
                    "is_leap_century": 1
                },
                "weeks": {
                    "total_weeks": 1
                }
            },
            "called": [
                "FUN_00006974"
            ],
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * extract_date_time_components_0000443c(undefined4 *date_time,uint *result_array)\n\n{\n  int quotient;\n  uint days;\n  uint remainder;\n  uint year;\n  uint leap_years;\n  undefined4 dividend;\n  undefined4 divisor;\n  uint temp3;\n  bool is_negative;\n  \n  dividend = *date_time;\n  divisor = date_time[1];\n  quotient = divide_and_modulo(dividend,divisor,0x15180,0);\n  remainder = 0x15180;\n  divide_and_modulo(dividend,divisor,0x15180,0);\n  is_negative = (int)remainder < 0;\n  if (is_negative) {\n    remainder = remainder + 0x15180;\n  }\n  if (is_negative) {\n    days = quotient + 0xafa6b;\n  }\n  else {\n    days = quotient + 0xafa6c;\n  }\n  result_array[2] = remainder / 0xe10;\n  result_array[1] = (remainder % 0xe10) / 0x3c;\n  *result_array = (remainder % 0xe10) % 0x3c;\n  result_array[6] = (days + 3) % 7;\n  remainder = days;\n  if ((int)days < 0) {\n    remainder = days - 0x23ab0;\n  }\n  days = (remainder / 0x23ab1) * -0x23ab1 + days;\n  year = ((days / 0x8eac + days) - days / 0x5b4) - days / 0x23ab0;\n  leap_years = year / 0x16d;\n  days = (leap_years / 100 - year / 0x5b4) + days + leap_years * -0x16d;\n  temp3 = days * 5 + 2;\n  year = temp3 / 0x99;\n  if (temp3 < 0x5fa) {\n    quotient = 2;\n  }\n  else {\n    quotient = -10;\n  }\n  temp3 = year + quotient;\n  quotient = (remainder / 0x23ab1) * 400 + leap_years;\n  if (temp3 < 2) {\n    quotient = quotient + 1;\n  }\n  if (days < 0x132) {\n    if (((leap_years & 3) == 0) && (leap_years != (leap_years / 100) * 100)) {\n      remainder = 1;\n    }\n    else {\n      remainder = (uint)(leap_years % 400 == 0);\n    }\n    remainder = days + 0x3b + remainder;\n  }\n  else {\n    remainder = days - 0x132;\n  }\n  result_array[7] = remainder;\n  result_array[3] = (days + 1) - (year * 0x99 + 2) / 5;\n  result_array[4] = temp3;\n  result_array[5] = quotient - 0x76c;\n  result_array[8] = 0;\n  return result_array;\n}\n\n",
            "current_name": "extract_date_time_components_0000443c",
            "entrypoint": "0x0000443c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000443c": "extract_date_time_components_0000443c",
                "__aeabi_ldivmod": "divide_and_modulo",
                "bVar9": "is_negative",
                "iVar1": "quotient",
                "param_1": "date_time",
                "param_2": "result_array",
                "uVar2": "days",
                "uVar3": "remainder",
                "uVar4": "year",
                "uVar5": "leap_years",
                "uVar6": "dividend",
                "uVar7": "divisor",
                "uVar8": "temp3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000459c": {
            "additional_data": {
                "FUN_00000410": {
                    "execute_sub_function": 1,
                    "init_function": 1,
                    "initialize_system": 1,
                    "sub_function": 2,
                    "subfunction": 1
                },
                "FUN_0000459c": {
                    "execute_all_functions": 1,
                    "execute_function_set": 1,
                    "execute_function_set_twice": 1,
                    "execute_functions": 7,
                    "execute_functions_twice": 1,
                    "execute_init_functions": 2,
                    "execute_initialization": 2,
                    "execute_initialization_tasks": 1,
                    "execute_startup_functions": 1,
                    "execute_sub_functions": 9,
                    "execute_subfunctions": 2,
                    "initialize_all_functions": 1,
                    "initialize_and_call_subfunctions": 1,
                    "invoke_subfunctions": 1
                },
                "_init": {
                    "initialize": 2
                },
                "iVar2": {
                    "index": 16,
                    "index_counter": 1,
                    "iteration_count": 5,
                    "iteration_counter": 3,
                    "iteration_index": 2,
                    "iterator": 1,
                    "loop_counter": 1
                },
                "ppcVar1": {
                    "function_array": 5,
                    "function_array_pointer": 1,
                    "function_list": 1,
                    "function_pointer": 4,
                    "function_pointer_array": 10,
                    "function_pointers": 7,
                    "sub_function_array": 1
                }
            },
            "called": [
                "FUN_00000410"
            ],
            "calling": [
                "FUN_0000099c"
            ],
            "code": "\nvoid execute_sub_functions_0000459c(void)\n\n{\n  code **function_pointer_array;\n  int index;\n  \n  function_pointer_array = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_pointer_array)();\n    function_pointer_array = function_pointer_array + 1;\n  }\n  initialize();\n  function_pointer_array = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_pointer_array)();\n    function_pointer_array = function_pointer_array + 1;\n  }\n  return;\n}\n\n",
            "current_name": "execute_sub_functions_0000459c",
            "entrypoint": "0x0000459c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000459c": "execute_sub_functions_0000459c",
                "_init": "initialize",
                "iVar2": "index",
                "ppcVar1": "function_pointer_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000045e4": {
            "called": [],
            "calling": [
                "FUN_00004314"
            ],
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000045e4",
            "entrypoint": "0x000045e4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000045e8": {
            "called": [],
            "calling": [
                "FUN_0000428c",
                "FUN_00004158",
                "FUN_00005fec",
                "FUN_00004274",
                "FUN_00005790",
                "FUN_000057f8",
                "FUN_00004db8",
                "FUN_00004418",
                "FUN_00004cb4"
            ],
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000045e8",
            "entrypoint": "0x000045e8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000045ec": {
            "called": [],
            "calling": [
                "FUN_00005ff8",
                "FUN_00004158",
                "FUN_0000579c",
                "FUN_000057f8",
                "FUN_00004db8",
                "FUN_00004280",
                "FUN_000042a4",
                "FUN_00004418",
                "FUN_00004cb4"
            ],
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000045ec",
            "entrypoint": "0x000045ec",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000045ee": {
            "additional_data": {
                "FUN_000045ee": {
                    "copy_and_reverse": 3,
                    "copy_array": 1,
                    "copy_array_elements": 1,
                    "copy_data": 2,
                    "copy_elements": 1,
                    "copy_in_reverse": 1,
                    "copy_memory": 3,
                    "copy_overlapping_data": 1,
                    "copy_range": 6,
                    "copy_reverse": 1,
                    "copy_with_shift": 1,
                    "copy_within": 1,
                    "copy_within_range": 1,
                    "reverse_copy": 7,
                    "reverse_copy_within": 1
                },
                "param_1": {
                    "dest": 9,
                    "dest_array": 1,
                    "dest_start": 1,
                    "destination": 11,
                    "source": 7,
                    "source_array": 1,
                    "target": 1
                },
                "param_2": {
                    "destination": 7,
                    "destination_array": 1,
                    "source": 11,
                    "source_start": 1,
                    "src": 9,
                    "src_array": 1,
                    "start": 1
                },
                "param_3": {
                    "array_length": 2,
                    "end": 1,
                    "length": 23,
                    "num_elements": 1,
                    "size": 4
                },
                "puVar1": {
                    "dest_end": 5,
                    "dest_ptr": 13,
                    "destination_end": 1,
                    "dst_ptr": 2,
                    "source_end": 3,
                    "source_pointer": 2,
                    "source_ptr": 3,
                    "target_iterator": 1
                },
                "puVar2": {
                    "dest_end": 2,
                    "dest_ptr": 2,
                    "destination_end": 1,
                    "destination_pointer": 2,
                    "destination_ptr": 1,
                    "source_end": 1,
                    "source_iterator": 1,
                    "source_ptr": 1,
                    "src_end": 5,
                    "src_ptr": 14
                }
            },
            "called": [],
            "calling": [
                "FUN_00003ff4"
            ],
            "code": "\nvoid copy_and_reverse_000045ee(undefined *destination,undefined *source,int length)\n\n{\n  undefined *dest_ptr;\n  undefined *src_ptr;\n  \n  src_ptr = source + length;\n  if ((source < destination) && (destination < src_ptr)) {\n    dest_ptr = destination + length;\n    while (dest_ptr != destination) {\n      src_ptr = src_ptr + -1;\n      dest_ptr = dest_ptr + -1;\n      *dest_ptr = *src_ptr;\n    }\n  }\n  else {\n    destination = destination + -1;\n    for (; source != src_ptr; source = source + 1) {\n      destination = destination + 1;\n      *destination = *source;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "copy_and_reverse_000045ee",
            "entrypoint": "0x000045ee",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_000045ee",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004622": {
            "additional_data": {
                "FUN_00004622": {
                    "clear_memory": 1,
                    "fill_array_with_value": 1,
                    "fill_memory": 11,
                    "fill_memory_with": 4,
                    "initialize_memory": 4,
                    "initialize_memory_with_byte": 1,
                    "memset": 8,
                    "set_memory": 1
                },
                "param_1": {
                    "array": 1,
                    "dest": 1,
                    "destination": 11,
                    "memory": 11,
                    "memory_block": 1,
                    "memory_buffer": 1,
                    "memory_pointer": 2,
                    "ptr_to_memory": 1
                },
                "param_2": {
                    "byte_to_fill": 1,
                    "byte_value": 1,
                    "value": 27,
                    "value_to_fill": 1
                },
                "param_3": {
                    "count": 2,
                    "length": 7,
                    "length_to_fill": 1,
                    "num": 1,
                    "num_bytes": 2,
                    "num_elements": 1,
                    "number_of_bytes": 1,
                    "size": 15
                },
                "puVar1": {
                    "end": 1,
                    "end_addr": 1,
                    "end_address": 12,
                    "end_memory": 2,
                    "end_of_memory": 2,
                    "end_pointer": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_000041f4",
                "FUN_00003ff4",
                "FUN_00004314",
                "FUN_00003ec4",
                "FUN_00004248",
                "FUN_0000305c"
            ],
            "code": "\nvoid fill_memory_with_00004622(undefined *destination,undefined value,int size)\n\n{\n  undefined *end_address;\n  \n  end_address = destination + size;\n  for (; destination != end_address; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_with_00004622",
            "entrypoint": "0x00004622",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004622": "fill_memory_with_00004622",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004634": {
            "additional_data": {
                "FUN_00004634": {
                    "adjust_date": 2,
                    "calculate_date": 1,
                    "modify_date_time": 1,
                    "update_date": 9,
                    "update_date_and_time": 2,
                    "update_date_time": 16
                },
                "FUN_00005584": {
                    "divide_and_add": 1,
                    "get_days_in_month": 1
                },
                "bVar5": {
                    "is_leap_year": 2,
                    "is_negative": 23,
                    "is_negative_flag": 1,
                    "is_negative_offset": 1,
                    "negative": 1,
                    "negative_date": 1,
                    "negative_days": 1,
                    "negative_flag": 1
                },
                "div": {
                    "divide": 1,
                    "divide_by": 1,
                    "get_quotient": 1
                },
                "iVar1": {
                    "day_index": 1,
                    "day_of_week": 1,
                    "days_in_month": 16,
                    "days_to_add": 1,
                    "month_days": 2,
                    "months": 1,
                    "months_in_year": 4,
                    "year_days": 1
                },
                "iVar4": {
                    "current_year": 1,
                    "days_in_month": 7,
                    "days_in_month_offset": 1,
                    "days_in_year": 11,
                    "days_to_increment": 1,
                    "month": 2,
                    "month_days": 1,
                    "month_index": 1,
                    "month_type": 1,
                    "months": 2,
                    "months_in_year": 1,
                    "months_to_add": 1,
                    "num_years": 1
                },
                "local_1c": {
                    "current_day": 1,
                    "original_days": 1,
                    "remainder": 23,
                    "remaining_days": 1,
                    "temp2": 1,
                    "temp_day": 1,
                    "temp_days": 1,
                    "temp_value": 1,
                    "total_hours": 1
                },
                "local_20": {
                    "div_result": 1,
                    "division_result": 1,
                    "quotient": 20,
                    "quotient_array": 1,
                    "temp": 2,
                    "temp1": 2,
                    "temp_array": 2,
                    "temp_div": 1,
                    "temp_div_result": 1
                },
                "param_1": {
                    "date": 5,
                    "date_array": 7,
                    "date_time": 16,
                    "date_time_array": 3
                },
                "param_2": {
                    "day": 3,
                    "day_of_month": 1,
                    "days": 13,
                    "days_to_add": 6,
                    "hour": 1,
                    "hours": 3,
                    "year": 4
                },
                "param_3": {
                    "date_time_format": 1,
                    "extra_days": 1,
                    "extra_hours": 1,
                    "extra_param": 1,
                    "flag": 1,
                    "is_leap_year": 1,
                    "is_negative": 2,
                    "leap_year": 2,
                    "minutes": 1,
                    "month": 4,
                    "month_offset": 1,
                    "months": 1,
                    "param_3": 4,
                    "some_value": 1,
                    "temp": 1,
                    "temp_var": 1,
                    "unknown": 3,
                    "unused": 2,
                    "weekday": 1
                },
                "uStack_18": {
                    "extra_days": 1,
                    "extra_days_stack": 1,
                    "is_leap_year_stack": 1,
                    "param_3": 1,
                    "param_3_copy": 2,
                    "param_3_new": 1,
                    "some_variable": 1,
                    "stack_param": 1,
                    "stack_var": 3,
                    "stack_variable": 1,
                    "temp": 3,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_month": 1,
                    "temp_param": 1,
                    "unknown_stack": 1,
                    "unknown_value": 1,
                    "unused": 7,
                    "unused2": 1
                },
                "uVar2": {
                    "current_day": 2,
                    "current_hours": 1,
                    "current_month": 1,
                    "day_of_month": 1,
                    "days": 3,
                    "days_in_month": 3,
                    "days_in_year": 1,
                    "days_remaining": 1,
                    "days_to_add": 1,
                    "hour_overflow": 1,
                    "leap_year": 1,
                    "months": 1,
                    "remainder": 1,
                    "temp": 1,
                    "temp_days": 1,
                    "temp_var": 2,
                    "updated_days": 1,
                    "year": 6,
                    "years": 2
                },
                "uVar3": {
                    "current_minutes": 1,
                    "current_month": 1,
                    "current_year": 1,
                    "day_of_year": 1,
                    "day_overflow": 1,
                    "days_in_leap_year": 1,
                    "days_in_month": 1,
                    "leap_days": 1,
                    "leap_remainder": 1,
                    "leap_year": 2,
                    "leap_year_days": 1,
                    "leap_year_days_in_month": 1,
                    "leap_years": 4,
                    "month": 2,
                    "temp": 1,
                    "temp2": 1,
                    "temp_months": 1,
                    "temp_var2": 2,
                    "temp_years": 1,
                    "updated_day": 1,
                    "updated_months": 1,
                    "year": 1,
                    "year_days": 1,
                    "years": 2
                }
            },
            "called": [
                "FUN_00005584"
            ],
            "calling": [
                "FUN_000047e4"
            ],
            "code": "\nvoid update_date_and_time_00004634(uint *date_time,uint days,undefined4 param_3)\n\n{\n  int days_in_month;\n  uint year;\n  uint leap_years;\n  int days_in_year;\n  bool is_negative;\n  uint *quotient;\n  uint remainder;\n  undefined4 unused;\n  \n  quotient = date_time;\n  remainder = days;\n  unused = param_3;\n  if (0x3b < *date_time) {\n    divide(&quotient,*date_time,0x3c);\n    year = date_time[1] + (int)quotient;\n    date_time[1] = year;\n    if ((int)remainder < 0) {\n      year = year - 1;\n      *date_time = remainder + 0x3c;\n    }\n    else {\n      *date_time = remainder;\n    }\n    if ((int)remainder < 0) {\n      date_time[1] = year;\n    }\n  }\n  if (0x3b < date_time[1]) {\n    divide(&quotient,date_time[1],0x3c);\n    is_negative = (int)remainder < 0;\n    leap_years = date_time[2] + (int)quotient;\n    date_time[2] = leap_years;\n    year = remainder;\n    if (is_negative) {\n      year = remainder + 0x3c;\n      leap_years = leap_years - 1;\n    }\n    if (!is_negative) {\n      date_time[1] = year;\n    }\n    if (is_negative) {\n      date_time[1] = year;\n    }\n    if (is_negative) {\n      date_time[2] = leap_years;\n    }\n  }\n  if (0x17 < date_time[2]) {\n    divide(&quotient,date_time[2],0x18);\n    is_negative = (int)remainder < 0;\n    leap_years = date_time[3] + (int)quotient;\n    date_time[3] = leap_years;\n    year = remainder;\n    if (is_negative) {\n      year = remainder + 0x18;\n      leap_years = leap_years - 1;\n    }\n    if (!is_negative) {\n      date_time[2] = year;\n    }\n    if (is_negative) {\n      date_time[2] = year;\n    }\n    if (is_negative) {\n      date_time[3] = leap_years;\n    }\n  }\n  if (0xb < date_time[4]) {\n    divide(&quotient,date_time[4],0xc);\n    is_negative = (int)remainder < 0;\n    year = date_time[5] + (int)quotient;\n    date_time[5] = year;\n    if (is_negative) {\n      remainder = remainder + 0xc;\n      year = year - 1;\n    }\n    if (!is_negative) {\n      date_time[4] = remainder;\n    }\n    if (is_negative) {\n      date_time[4] = remainder;\n    }\n    if (is_negative) {\n      date_time[5] = year;\n    }\n  }\n  year = date_time[5];\n  if ((year & 3) == 0) {\n    if (year == (year / 100) * 100) {\n      if ((year + 0x76c) % 400 == 0) {\n        days_in_year = 0x1d;\n      }\n      else {\n        days_in_year = 0x1c;\n      }\n    }\n    else {\n      days_in_year = 0x1d;\n    }\n  }\n  else {\n    days_in_year = 0x1c;\n  }\n  if ((int)date_time[3] < 1) {\n    while ((int)date_time[3] < 1) {\n      year = date_time[4];\n      date_time[4] = year - 1;\n      if (year - 1 == 0xffffffff) {\n        leap_years = date_time[5];\n        year = leap_years - 1;\n        date_time[4] = 0xb;\n        date_time[5] = year;\n        if ((year & 3) == 0) {\n          if (year == (year / 100) * 100) {\n            if ((leap_years + 0x76b) % 400 == 0) {\n              days_in_year = 0x1d;\n            }\n            else {\n              days_in_year = 0x1c;\n            }\n          }\n          else {\n            days_in_year = 0x1d;\n          }\n        }\n        else {\n          days_in_year = 0x1c;\n        }\n      }\n      days_in_month = days_in_year;\n      if (date_time[4] != 1) {\n        days_in_month = (&DAT_000079fc)[date_time[4]];\n      }\n      date_time[3] = days_in_month + date_time[3];\n    }\n  }\n  else {\n    while( true ) {\n      year = date_time[4];\n      days_in_month = days_in_year;\n      if (year != 1) {\n        days_in_month = (&DAT_000079fc)[year];\n      }\n      if ((int)date_time[3] <= days_in_month) break;\n      date_time[3] = date_time[3] - days_in_month;\n      date_time[4] = year + 1;\n      if (year + 1 == 0xc) {\n        leap_years = date_time[5];\n        year = leap_years + 1;\n        date_time[4] = 0;\n        date_time[5] = year;\n        if ((year & 3) == 0) {\n          if (year % 100 == 0) {\n            if ((leap_years + 0x76d) % 400 == 0) {\n              days_in_year = 0x1d;\n            }\n            else {\n              days_in_year = 0x1c;\n            }\n          }\n          else {\n            days_in_year = 0x1d;\n          }\n        }\n        else {\n          days_in_year = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_date_and_time_00004634",
            "entrypoint": "0x00004634",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004634": "update_date_and_time_00004634",
                "bVar5": "is_negative",
                "div": "divide",
                "iVar1": "days_in_month",
                "iVar4": "days_in_year",
                "local_1c": "remainder",
                "local_20": "quotient",
                "param_1": "date_time",
                "param_2": "days",
                "uStack_18": "unused",
                "uVar2": "year",
                "uVar3": "leap_years"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000047e4": {
            "additional_data": {
                "CARRY4": {
                    "add_with_carry": 1
                },
                "DAT_00002710": {
                    "const_val1": 1
                },
                "DAT_00007a2c": {
                    "month_days": 1
                },
                "DAT_1fff0dd8": {
                    "const_val2": 1,
                    "timezone_cache_initialized": 1,
                    "tz_calc_result": 1
                },
                "FUN_00004634": {
                    "__tz_lock": 1
                },
                "FUN_000047e4": {
                    "calculate_adjusted_date": 1,
                    "calculate_adjusted_timestamp": 1,
                    "calculate_date": 9,
                    "calculate_date_offset": 4,
                    "calculate_date_time": 2,
                    "calculate_date_time_offset": 1,
                    "calculate_day_of_year": 1,
                    "calculate_days_from_epoch": 1,
                    "calculate_days_passed": 1,
                    "calculate_days_since_epoch": 2,
                    "calculate_epoch_time": 2,
                    "calculate_remaining_days": 1,
                    "calculate_time_offset": 1,
                    "calculate_timestamp": 1,
                    "calculate_weekday": 3
                },
                "FUN_00004f98": {
                    "__tzcalc_limits": 1
                },
                "FUN_000050e8": {
                    "_tzset_unlocked": 1
                },
                "FUN_000050f4": {
                    "get_tzinfo": 1
                },
                "FUN_00005100": {
                    "validate_structure": 1
                },
                "FUN_000056b0": {
                    "carry4": 1
                },
                "SCARRY4": {
                    "subtract_with_carry": 1
                },
                "__gettzinfo": {
                    "get_timezone_info": 2
                },
                "__tz_lock": {
                    "lock_time_zone": 1,
                    "lock_timezone": 1
                },
                "__tzcalc_limits": {
                    "calculate_limits": 1
                },
                "_tzset_unlocked": {
                    "initialize_time_zone": 1,
                    "set_timezone_unlocked": 1,
                    "update_timezone_cache": 1
                },
                "bVar16": {
                    "flag1": 1,
                    "is_divisible_by4": 2,
                    "is_divisible_by400": 1,
                    "is_leap": 4,
                    "is_leap_year": 18,
                    "is_leap_year2": 1
                },
                "daysInYear": {
                    "year_days": 1
                },
                "daysOfWeek": {
                    "week_days": 1
                },
                "daysOffset": {
                    "offset1": 1
                },
                "daysOffset2": {
                    "offset2": 1
                },
                "iVar11": {
                    "adjusted_days": 1,
                    "day_offset": 1,
                    "days": 2,
                    "days_before_first_of_month": 1,
                    "days_in_month": 1,
                    "days_in_year": 2,
                    "days_since1970": 1,
                    "days_since2000": 1,
                    "days_to_add": 1,
                    "leap_days": 1,
                    "modified_year": 1,
                    "temp8": 1,
                    "temp_var11": 1,
                    "temp_var6": 1,
                    "temp_var8": 2,
                    "total_days_added_by_month": 1,
                    "total_days_without_leap_years": 1,
                    "total_years": 2,
                    "updated_year_days": 1,
                    "var11": 1,
                    "year": 2,
                    "year_days": 1,
                    "year_index": 1,
                    "year_offset": 2
                },
                "iVar17": {
                    "days_of_week": 1
                },
                "iVar5": {
                    "adjusted_days": 1,
                    "day_of_week": 1,
                    "day_of_week_offset": 1,
                    "day_of_year": 2,
                    "days": 1,
                    "days_in_month": 1,
                    "days_in_year": 1,
                    "days_offset": 1,
                    "extra_days": 1,
                    "leap_year_adjustment": 1,
                    "leap_year_correction": 1,
                    "leap_year_count": 3,
                    "leap_year_days": 2,
                    "leap_year_factor": 1,
                    "leap_year_periodic_adjustment": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_int1": 1,
                    "temp_var1": 1,
                    "temp_var2": 3,
                    "temp_var5": 1,
                    "upper_diff": 1,
                    "var5": 2
                },
                "iVar6": {
                    "day_of_week": 1,
                    "days": 1,
                    "days_in_month_leap_year": 1,
                    "days_offset2": 1,
                    "days_to_add": 1,
                    "leap_year_adjustment": 1,
                    "leap_year_days_after_epoch": 1,
                    "leap_years": 1,
                    "lower_diff": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_days": 1,
                    "temp_int2": 1,
                    "temp_offset": 1,
                    "temp_var": 4,
                    "temp_var1": 1,
                    "temp_var2": 2,
                    "temp_var3": 3,
                    "temp_var6": 1,
                    "tmp_var1": 1,
                    "tz_offset": 1,
                    "var6": 3
                },
                "iVar7": {
                    "adjusted_days": 1,
                    "adjusted_seconds": 1,
                    "current_day_of_year": 1,
                    "day_of_week": 1,
                    "days": 2,
                    "days_since_epoch": 1,
                    "days_to_add": 1,
                    "result1": 1,
                    "seconds": 1,
                    "temp4": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var4": 3,
                    "temp_var7": 1,
                    "total_days": 4,
                    "total_days_lower32": 1,
                    "total_seconds": 3,
                    "upper32bit_res": 1,
                    "upper_bits": 1,
                    "var7": 3
                },
                "inputParams": {
                    "parameters": 1
                },
                "isLeap": {
                    "is_leap_flag": 1
                },
                "isLeapYear": {
                    "leap_year_flag": 1
                },
                "lVar1": {
                    "adjusted_timestamp": 1,
                    "date_offset": 1,
                    "total_days": 15,
                    "total_minutes": 1,
                    "total_seconds": 12
                },
                "lVar2": {
                    "adjusted_days": 1,
                    "adjusted_seconds": 2,
                    "adjusted_total_days": 1,
                    "adjusted_total_seconds": 1,
                    "days_after_epoch": 1,
                    "modified_total_minutes": 1,
                    "new_adjusted_timestamp": 1,
                    "new_date_offset": 1,
                    "new_total_days": 4,
                    "new_total_seconds": 5,
                    "updated_total_days": 8,
                    "updated_total_seconds": 4
                },
                "param_1": {
                    "date": 5,
                    "date_array": 10,
                    "date_components": 1,
                    "date_info": 4,
                    "date_time": 1,
                    "date_time_arr": 1,
                    "date_time_array": 2,
                    "input": 1,
                    "input_params": 1,
                    "time_components": 1,
                    "time_data": 1,
                    "time_params": 1,
                    "timestamp_data": 1,
                    "timestamp_params": 1
                },
                "piVar3": {
                    "time_zone_info": 10,
                    "timezone_info": 7,
                    "tz_info": 8,
                    "tz_info_array": 1,
                    "tzinfo": 4
                },
                "seconds": {
                    "total_seconds": 1
                },
                "tempVar1": {
                    "temp1": 1
                },
                "tzInfo": {
                    "timezone_info": 1
                },
                "uVar10": {
                    "i": 2,
                    "leap_year": 1,
                    "leap_year_var": 1,
                    "leap_years_count": 1,
                    "month_index_leap_year": 1,
                    "start_year": 1,
                    "temp4": 1,
                    "temp7": 1,
                    "temp_month": 1,
                    "temp_u_int4": 1,
                    "temp_var10": 1,
                    "temp_var3": 2,
                    "temp_var4": 2,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_var7": 3,
                    "temp_year": 1,
                    "temp_year2": 1,
                    "upper_limit": 1,
                    "var10": 4,
                    "year": 1,
                    "year_copy": 1
                },
                "uVar12": {
                    "calendar_year": 1,
                    "current_year": 4,
                    "received_year": 1,
                    "start_year": 1,
                    "start_year_days": 1,
                    "temp9": 1,
                    "temp_var9": 1,
                    "timezone_offset": 1,
                    "var12": 1,
                    "year": 12,
                    "year_last_two_digits": 1,
                    "year_offset": 1,
                    "year_till_start_of_month": 1,
                    "year_value": 2,
                    "years": 1
                },
                "uVar13": {
                    "flag": 1,
                    "has_correction": 1,
                    "is_current_year": 1,
                    "is_dst_active": 1,
                    "is_dst_transition": 1,
                    "is_leap_year": 8,
                    "is_neg_offset": 1,
                    "is_negative": 7,
                    "is_negative_duration": 1,
                    "is_negative_offset": 1,
                    "is_positive": 1,
                    "negative_year_flag": 1,
                    "positive_year": 1,
                    "sign_flag": 1,
                    "temp10": 1,
                    "temp_var10": 1,
                    "var13": 1
                },
                "uVar14": {
                    "current_time": 1,
                    "current_year": 1,
                    "days_in_month": 1,
                    "days_passed": 1,
                    "days_since": 1,
                    "days_since1970": 1,
                    "days_since_epoch": 1,
                    "days_till_start_of_year": 1,
                    "days_to_month": 1,
                    "dst_end_year": 1,
                    "dst_offset": 1,
                    "holiday_limit": 1,
                    "leap_year_remainder": 1,
                    "limit": 1,
                    "loop_end": 1,
                    "month_adjustment": 1,
                    "months_before_february": 1,
                    "negative_year": 1,
                    "num_leap_years": 1,
                    "offset_limit": 1,
                    "param8": 1,
                    "start_offset": 1,
                    "start_year": 1,
                    "temp11": 1,
                    "temp_var11": 1,
                    "timezone_offset_flag": 1,
                    "total_leap_years": 1,
                    "var1": 1,
                    "var14": 1,
                    "year_adjustment": 1
                },
                "uVar15": {
                    "day_of_year": 1,
                    "days": 5,
                    "days32": 1,
                    "days_in_data": 1,
                    "days_of_day": 1,
                    "days_remainder": 1,
                    "is_current_year_leap_year": 1,
                    "lower32bit_res": 1,
                    "lower_bits": 1,
                    "new_total_seconds": 1,
                    "remaining_days": 1,
                    "result_lower32_bits": 1,
                    "seconds": 6,
                    "seconds_of_day": 1,
                    "seconds_result": 1,
                    "temp12": 1,
                    "temp_var9": 1,
                    "total_seconds": 1,
                    "var15": 2
                },
                "uVar16": {
                    "is_leap_year": 1
                },
                "uVar30": {
                    "tz_adjustment": 1
                },
                "uVar31": {
                    "tz_adjustment_overflow": 1
                },
                "uVar4": {
                    "day_counter": 1,
                    "diff": 1,
                    "leap_year_adjustment": 1,
                    "leap_year_counter": 1,
                    "rem": 1,
                    "remainder": 7,
                    "temp": 2,
                    "temp1": 2,
                    "temp_u_int1": 1,
                    "temp_var": 1,
                    "temp_var1": 5,
                    "temp_var4": 1,
                    "var4": 4,
                    "year_adjustment": 1,
                    "years": 1
                },
                "uVar8": {
                    "day_offset": 1,
                    "days_in_month": 2,
                    "days_in_year": 2,
                    "days_of_year": 1,
                    "days_per_month": 1,
                    "diff": 1,
                    "diff1": 1,
                    "dst_start_year": 1,
                    "leap_years": 2,
                    "lower_limit": 1,
                    "start_of_day": 1,
                    "temp5": 1,
                    "temp_u_int2": 1,
                    "temp_var2": 3,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var5": 3,
                    "temp_var8": 1,
                    "timezone_offset": 1,
                    "tz_offset_days": 1,
                    "var8": 3
                },
                "uVar9": {
                    "addend": 1,
                    "days_in_month": 1,
                    "days_till_start_of_month": 1,
                    "i": 1,
                    "is_negative": 1,
                    "loop_counter": 1,
                    "loop_var": 2,
                    "remainder_temp": 1,
                    "temp": 1,
                    "temp6": 1,
                    "temp_u_int3": 1,
                    "temp_var3": 2,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var6": 3,
                    "temp_var9": 1,
                    "temp_year": 3,
                    "var9": 2,
                    "year": 4,
                    "years": 1
                },
                "validate_structure": {
                    "validate_date_structure": 2,
                    "validate_date_time_structure": 1
                },
                "year": {
                    "input_year": 1
                }
            },
            "called": [
                "FUN_00005100",
                "FUN_000050f4",
                "FUN_000056b0",
                "FUN_000050e8",
                "FUN_00004f98",
                "FUN_00004634"
            ],
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculate_date_time_offset_000047e4(int *date_array)\n\n{\n  longlong total_days;\n  longlong updated_total_days;\n  int *time_zone_info;\n  uint remainder;\n  int temp_var2;\n  int temp_var;\n  int total_days;\n  uint temp_var2;\n  uint year;\n  uint var10;\n  int temp_var8;\n  uint year;\n  uint is_leap_year;\n  uint current_time;\n  uint seconds;\n  bool is_leap_year;\n  \n  time_zone_info = (int *)get_timezone_info();\n  validate_date_structure(date_array);\n  year = date_array[5];\n  temp_var8 = date_array[3] + -1 + *(int *)(&DAT_00007a2c + date_array[4] * 4);\n  if (((1 < date_array[4]) && ((year & 3) == 0)) &&\n     ((year != (year / 100) * 100 || (year + 0x76c == ((year + 0x76c) / 400) * 400)))) {\n    temp_var8 = temp_var8 + 1;\n  }\n  date_array[7] = temp_var8;\n  if (20000 < (int)&DAT_00002710 + year) {\n    total_days = -1;\n    temp_var2 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)year < 0x47) {\n    if (year != 0x46) {\n      for (year = 0x45; (int)year < (int)year; year = year - 1) {\n        if ((year & 3) == 0) {\n          if (year == (year / 100) * 100) {\n            if ((year + 0x76c) % 400 == 0) {\n              total_days = 0x16e;\n            }\n            else {\n              total_days = 0x16d;\n            }\n          }\n          else {\n            total_days = 0x16e;\n          }\n        }\n        else {\n          total_days = 0x16d;\n        }\n        temp_var8 = temp_var8 - total_days;\n      }\n      if ((year & 3) == 0) {\n        if (year == (year / 100) * 100) {\n          total_days = 0x16d;\n          if ((year + 0x76c) % 400 == 0) {\n            total_days = 0x16e;\n          }\n        }\n        else {\n          total_days = 0x16e;\n        }\n      }\n      else {\n        total_days = 0x16d;\n      }\n      temp_var8 = temp_var8 - total_days;\n    }\n  }\n  else {\n    year = 0x46;\n    do {\n      if ((year & 3) == 0) {\n        if (year % 100 == 0) {\n          if ((year + 0x76c) % 400 == 0) {\n            total_days = 0x16e;\n          }\n          else {\n            total_days = 0x16d;\n          }\n        }\n        else {\n          total_days = 0x16e;\n        }\n      }\n      else {\n        total_days = 0x16d;\n      }\n      year = year + 1;\n      temp_var8 = temp_var8 + total_days;\n    } while (year != year);\n  }\n  total_days = (longlong)temp_var8 * 0x15180 + (longlong)(date_array[2] * 0xe10 + date_array[1] * 0x3c + *date_array)\n  ;\n  seconds = (uint)total_days;\n  total_days = (int)((ulonglong)total_days >> 0x20);\n  lock_time_zone();\n  update_timezone_cache();\n  year = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    year = time_zone_info[10];\n    total_days = (uint)total_days + year;\n    temp_var2 = (int)((ulonglong)total_days >> 0x20) +\n            ((int)year >> 0x1f) + (uint)add_with_carry((uint)total_days,year);\n  }\n  else {\n    current_time = date_array[8];\n    is_leap_year = current_time;\n    if (0 < (int)current_time) {\n      is_leap_year = 1;\n    }\n    if ((time_zone_info[1] == date_array[5] + 0x76c) || (temp_var2 = calculate_limits(), temp_var2 != 0)) {\n      var10 = time_zone_info[0x14];\n      remainder = time_zone_info[0x12];\n      temp_var2 = time_zone_info[10];\n      year = remainder - temp_var2;\n      temp_var2 = (time_zone_info[0x13] - ((int)temp_var2 >> 0x1f)) - (uint)(remainder < temp_var2);\n      if (((int)((total_days - temp_var2) - (uint)(seconds < year)) < 0 ==\n           (SBORROW4(total_days,temp_var2) != SBORROW4(total_days - temp_var2,(uint)(seconds < year)))) &&\n         (temp_var = (time_zone_info[0x13] - ((int)var10 >> 0x1f)) - (uint)(remainder < var10),\n         is_leap_year = seconds < remainder - var10,\n         (int)((total_days - temp_var) - (uint)is_leap_year) < 0 !=\n         (SBORROW4(total_days,temp_var) != SBORROW4(total_days - temp_var,(uint)is_leap_year)))) goto LAB_00004a88;\n      remainder = time_zone_info[8] - var10;\n      temp_var = (time_zone_info[9] - ((int)var10 >> 0x1f)) - (uint)((uint)time_zone_info[8] < var10);\n      if (*time_zone_info != 0) {\n        if ((int)((total_days - temp_var) - (uint)(seconds < remainder)) < 0 ==\n            (SBORROW4(total_days,temp_var) != SBORROW4(total_days - temp_var,(uint)(seconds < remainder))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        year = 0;\n        if ((int)current_time < 0) goto LAB_00004934;\nLAB_00004a14:\n        seconds = is_leap_year ^ year;\n        is_leap_year = year;\n        if (seconds == 1) {\n          if (year == 0) {\n            total_days = var10 - temp_var2;\n          }\n          else {\n            total_days = temp_var2 - var10;\n          }\n          temp_var2 = date_array[3];\n          *date_array = *date_array + total_days;\n          updated_total_days = total_days + total_days;\n          validate_date_structure(date_array);\n          temp_var2 = date_array[3] - temp_var2;\n          total_days = total_days + total_days;\n          if (temp_var2 != 0) {\n            if (temp_var2 < 2) {\n              if (temp_var2 == -2 || temp_var2 + 2 < 0 != subtract_with_carry(temp_var2,2)) {\n                temp_var2 = 1;\n              }\n            }\n            else {\n              temp_var2 = -1;\n            }\n            total_days = temp_var2 + date_array[7];\n            temp_var8 = temp_var8 + temp_var2;\n            if (total_days < 0) {\n              year = year - 1;\n              if ((year & 3) == 0) {\n                if (year == (year / 100) * 100) {\n                  total_days = 0x16d;\n                  if ((year + 0x76b) % 400 != 0) {\n                    total_days = 0x16c;\n                  }\n                }\n                else {\n                  total_days = 0x16d;\n                }\n              }\n              else {\n                total_days = 0x16c;\n              }\n            }\n            else {\n              if ((year & 3) == 0) {\n                if (year == (year / 100) * 100) {\n                  temp_var2 = 0x16d;\n                  if ((year + 0x76c) % 400 == 0) {\n                    temp_var2 = 0x16e;\n                  }\n                }\n                else {\n                  temp_var2 = 0x16e;\n                }\n              }\n              else {\n                temp_var2 = 0x16d;\n              }\n              if (temp_var2 <= total_days) {\n                total_days = total_days - temp_var2;\n              }\n            }\n            date_array[7] = total_days;\n            total_days = updated_total_days;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((total_days - temp_var) - (uint)(seconds < remainder)) < 0 !=\n          (SBORROW4(total_days,temp_var) != SBORROW4(total_days - temp_var,(uint)(seconds < remainder)))) {\nLAB_0000491e:\n        if ((int)((total_days - temp_var2) - (uint)(seconds < year)) < 0 ==\n            (SBORROW4(total_days,temp_var2) != SBORROW4(total_days - temp_var2,(uint)(seconds < year))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)current_time) {\n        year = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      year = is_leap_year;\n      if (is_leap_year != 1) goto LAB_00004934;\n    }\n    year = time_zone_info[0x14];\n    total_days = (uint)total_days + year;\n    temp_var2 = (int)((ulonglong)total_days >> 0x20) +\n            ((int)year >> 0x1f) + (uint)add_with_carry((uint)total_days,year);\n    year = 1;\n  }\n  __tz_unlock();\n  date_array[8] = year;\n  date_array[6] = (temp_var8 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(temp_var2,total_days);\n}\n\n",
            "current_name": "calculate_date_time_offset_000047e4",
            "entrypoint": "0x000047e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "add_with_carry",
                "FUN_000047e4": "calculate_date_time_offset_000047e4",
                "SCARRY4": "subtract_with_carry",
                "__gettzinfo": "get_timezone_info",
                "__tz_lock": "lock_time_zone",
                "__tzcalc_limits": "calculate_limits",
                "_tzset_unlocked": "update_timezone_cache",
                "bVar16": "is_leap_year",
                "iVar11": "temp_var8",
                "iVar5": "temp_var2",
                "iVar6": "temp_var",
                "iVar7": "total_days",
                "lVar1": "total_days",
                "lVar2": "updated_total_days",
                "param_1": "date_array",
                "piVar3": "time_zone_info",
                "uVar10": "var10",
                "uVar12": "year",
                "uVar13": "is_leap_year",
                "uVar14": "current_time",
                "uVar15": "seconds",
                "uVar4": "remainder",
                "uVar8": "temp_var2",
                "uVar9": "year",
                "validate_structure": "validate_date_structure"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004b34": {
            "additional_data": {
                "DAT_1fff0db4": {
                    "data_ptr": 2,
                    "global_data": 1,
                    "head_block_ptr": 1,
                    "head_list": 1,
                    "head_node": 1,
                    "head_ptr": 1,
                    "list_head": 1,
                    "memory_list_head": 1,
                    "start_node": 1
                },
                "FUN_00004b34": {
                    "add_values_and_lock": 1,
                    "allocate_linked_list": 1,
                    "allocate_memory": 1,
                    "process_data": 1,
                    "reorganize_data": 1,
                    "reorganize_memory_blocks": 1,
                    "reverse_linked_list": 2,
                    "update_data": 1,
                    "update_linked_list": 2,
                    "update_linkedlist": 1
                },
                "__malloc_lock": {
                    "acquire_lock": 1,
                    "acquire_memory_lock": 2,
                    "lock_malloc": 3,
                    "lock_memory": 2,
                    "lock_memory_allocation": 6
                },
                "__malloc_unlock": {
                    "release_lock": 1,
                    "release_memory_lock": 2,
                    "unlock_malloc": 3,
                    "unlock_memory": 2,
                    "unlock_memory_allocation": 5
                },
                "bVar6": {
                    "bool_var": 1,
                    "boolean_var": 1,
                    "check_flag": 1,
                    "condition": 3,
                    "flag": 4,
                    "found_match": 1,
                    "is_at_end": 1,
                    "is_cond_true": 1,
                    "is_condition_met": 2,
                    "is_condition_satisfied": 1,
                    "is_condition_true": 2,
                    "is_current_smaller": 1,
                    "is_equal": 3,
                    "is_greater_than_zero": 1,
                    "is_head": 1,
                    "is_last": 1,
                    "is_last_node": 1,
                    "is_match": 2,
                    "is_matched": 1,
                    "is_new_node": 1,
                    "is_true": 1
                },
                "extraout_r1": {
                    "extra_out_ptr": 1,
                    "extra_out_result": 1,
                    "extra_output": 3,
                    "extra_output_pointer": 1,
                    "extra_output_var1": 1,
                    "extra_ptr": 1,
                    "extra_result1": 1,
                    "new_end": 1,
                    "new_node": 1,
                    "next_block_size_ptr": 1,
                    "next_node": 1,
                    "next_ptr_container": 1,
                    "ptr2": 1,
                    "return_value": 1,
                    "temp": 1,
                    "temp_pointer2": 2,
                    "temp_ptr": 1,
                    "temp_ptr2": 1,
                    "temp_var2": 3,
                    "tmp1": 1
                },
                "param_1": {
                    "array": 1,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "error_code_ptr": 1,
                    "function_pointer": 1,
                    "lock_param": 1,
                    "lock_status": 4,
                    "output": 2,
                    "output_array": 2,
                    "output_ptr": 1,
                    "param": 1,
                    "param1": 1,
                    "param_array": 2,
                    "param_pointer": 1,
                    "pointer": 1,
                    "ptr_array": 2,
                    "result": 8
                },
                "param_2": {
                    "array_length": 6,
                    "array_size": 1,
                    "head": 1,
                    "input_size": 1,
                    "length": 5,
                    "length_param": 1,
                    "linked_size": 2,
                    "list_size": 1,
                    "num_blocks": 1,
                    "num_elements": 1,
                    "size": 10,
                    "value_count": 1
                },
                "param_3": {
                    "arg1": 1,
                    "arg3": 1,
                    "argument_1": 1,
                    "param1": 2,
                    "param3": 10,
                    "param_3": 8,
                    "start_value": 1,
                    "unknown1": 1,
                    "unused": 1,
                    "unused1": 1,
                    "unused_param": 2,
                    "unused_param1": 2
                },
                "param_4": {
                    "arg2": 1,
                    "arg4": 1,
                    "argument_2": 1,
                    "end_value": 1,
                    "param2": 2,
                    "param4": 10,
                    "param_4": 8,
                    "unknown2": 1,
                    "unused": 1,
                    "unused2": 1,
                    "unused_param2": 3,
                    "unused_param_2": 1
                },
                "piVar1": {
                    "current": 1,
                    "current_block_size": 1,
                    "current_size": 1,
                    "current_value": 1,
                    "offset": 1,
                    "pointer1": 1,
                    "pointer_var1": 1,
                    "ptr1": 2,
                    "temp": 2,
                    "temp_node_value": 1,
                    "temp_pointer": 3,
                    "temp_pointer1": 1,
                    "temp_ptr": 7,
                    "temp_var1": 6,
                    "tmp": 1,
                    "value_ptr": 1
                },
                "ppiVar1": {
                    "current_node": 1
                },
                "ppiVar2": {
                    "current_block_ptr": 1,
                    "current_node": 4,
                    "current_pointer": 2,
                    "current_ptr": 1,
                    "current_ptr_ptr": 1,
                    "head": 1,
                    "iterator1": 1,
                    "itr_ptr1": 1,
                    "pointer2": 1,
                    "pointer_pointer_var2": 1,
                    "prev": 1,
                    "previous_array": 1,
                    "previous_node": 1,
                    "previous_pointer": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "root": 1,
                    "temp_pointer3": 1,
                    "temp_ptr1": 1,
                    "temp_ptr2": 2,
                    "temp_ptr_1": 1,
                    "temp_ptr_2": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_var3": 2
                },
                "ppiVar3": {
                    "curr": 1,
                    "current_array": 1,
                    "current_node": 1,
                    "current_pointer": 2,
                    "current_ptr": 2,
                    "head": 1,
                    "iterator2": 1,
                    "itr_ptr2": 1,
                    "pointer3": 1,
                    "pointer_pointer_var3": 1,
                    "prev": 1,
                    "prev_block_ptr": 1,
                    "prev_node": 2,
                    "previous_node": 3,
                    "previous_pointer": 2,
                    "previous_ptr": 1,
                    "previous_ptr_ptr": 1,
                    "ptr3": 1,
                    "ptr4": 1,
                    "temp_ptr3": 1,
                    "temp_ptr_2": 1,
                    "temp_ptr_3": 1,
                    "temp_var3": 1,
                    "temp_var4": 2
                },
                "ppiVar4": {
                    "curr_node": 1,
                    "iterator3": 1,
                    "itr_ptr3": 1,
                    "next": 2,
                    "next_array": 1,
                    "next_block_ptr": 1,
                    "next_node": 2,
                    "next_pointer": 4,
                    "next_ptr": 1,
                    "node": 1,
                    "pointer4": 1,
                    "pointer_pointer_var4": 1,
                    "prev_ptr": 1,
                    "previous_node": 1,
                    "previous_ptr": 1,
                    "ptr4": 1,
                    "ptr5": 1,
                    "temp_node": 2,
                    "temp_ptr4": 1,
                    "temp_ptr_3": 1,
                    "temp_ptr_4": 1,
                    "temp_ptr_ptr": 1,
                    "temp_var4": 1,
                    "temp_var5": 2
                },
                "ppiVar5": {
                    "new_block_ptr": 1,
                    "new_element": 1,
                    "new_node": 10,
                    "new_node_position": 1,
                    "new_pointer": 2,
                    "new_ptr": 3,
                    "new_ptr_ptr": 1,
                    "pointer5": 1,
                    "pointer_pointer_var5": 1,
                    "ptr5": 1,
                    "ptr6": 1,
                    "ptr_list": 1,
                    "temp_ptr5": 1,
                    "temp_ptr_4": 1,
                    "temp_var5": 1,
                    "temp_var6": 2,
                    "updated_array": 1,
                    "updated_pointer": 1
                }
            },
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "calling": [
                "FUN_00006192",
                "FUN_00006768",
                "FUN_00005780",
                "FUN_000054a8",
                "FUN_000060cc",
                "FUN_0000404c"
            ],
            "code": "\nvoid allocate_linked_list_00004b34(undefined4 *result,int size,undefined4 param3,undefined4 param4)\n\n{\n  int *temp_ptr;\n  int **temp_var2;\n  int **current_node;\n  int **previous_node;\n  int **next_pointer;\n  int **new_node;\n  bool flag;\n  \n  if (size == 0) {\n    return;\n  }\n  new_node = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_node = (int **)((int)new_node + *(int *)(size + -4));\n  }\n  lock_memory_allocation();\n  previous_node = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    new_node[1] = (int *)0x0;\n    current_node = temp_var2;\n    DAT_1fff0db4 = new_node;\n  }\n  else {\n    next_pointer = DAT_1fff0db4;\n    if (new_node < DAT_1fff0db4) {\n      current_node = (int **)*new_node;\n      previous_node = (int **)((int)new_node + (int)current_node);\n      flag = DAT_1fff0db4 == previous_node;\n      if (flag) {\n        previous_node = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      new_node[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = new_node;\n      if (flag) {\n        previous_node = (int **)((int)previous_node + (int)current_node);\n        *new_node = (int *)previous_node;\n      }\n    }\n    else {\n      do {\n        previous_node = next_pointer;\n        next_pointer = (int **)previous_node[1];\n        if (next_pointer == (int **)0x0) break;\n      } while (next_pointer <= new_node);\n      current_node = (int **)*previous_node;\n      if ((int **)((int)previous_node + (int)current_node) == new_node) {\n        current_node = (int **)((int)current_node + (int)*new_node);\n        *previous_node = (int *)current_node;\n        if (next_pointer == (int **)((int)previous_node + (int)current_node)) {\n          temp_ptr = *next_pointer;\n          previous_node[1] = next_pointer[1];\n          current_node = (int **)((int)current_node + (int)temp_ptr);\n          *previous_node = (int *)current_node;\n        }\n      }\n      else if (new_node < (int **)((int)previous_node + (int)current_node)) {\n        *result = 0xc;\n      }\n      else {\n        current_node = (int **)((int)new_node + (int)*new_node);\n        flag = next_pointer == current_node;\n        if (flag) {\n          current_node = (int **)*next_pointer;\n          next_pointer = (int **)next_pointer[1];\n        }\n        new_node[1] = (int *)next_pointer;\n        if (flag) {\n          current_node = (int **)((int)current_node + (int)*new_node);\n          *new_node = (int *)current_node;\n        }\n        previous_node[1] = (int *)new_node;\n      }\n    }\n  }\n  unlock_memory_allocation(result,current_node,previous_node,param4);\n  return;\n}\n\n",
            "current_name": "allocate_linked_list_00004b34",
            "entrypoint": "0x00004b34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004b34": "allocate_linked_list_00004b34",
                "__malloc_lock": "lock_memory_allocation",
                "__malloc_unlock": "unlock_memory_allocation",
                "bVar6": "flag",
                "extraout_r1": "temp_var2",
                "param_1": "result",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "temp_ptr",
                "ppiVar2": "current_node",
                "ppiVar3": "previous_node",
                "ppiVar4": "next_pointer",
                "ppiVar5": "new_node"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "additional_data": {
                "DAT_1fff0db4": {
                    "first_block": 3,
                    "first_block_ptr": 1,
                    "heap_start": 1,
                    "memory_list": 1,
                    "start_block": 1
                },
                "DAT_1fff0db8": {
                    "heap_end": 3,
                    "heap_start": 1,
                    "last_allocated_addr": 1,
                    "previous_sbrk": 1,
                    "sbrk_result": 1
                },
                "FUN_00000428": {
                    "adjust_last_allocated_addr": 1,
                    "another_function": 1,
                    "sbrk_helper": 1
                },
                "FUN_00004bd0": {
                    "allocate_memory": 26,
                    "allocate_memory_block": 5
                },
                "FUN_00005790": {
                    "clean_up_memory": 1,
                    "do_another_thing": 1,
                    "initialize_heap": 1
                },
                "FUN_0000579c": {
                    "do_something": 1,
                    "free_memory": 1,
                    "initialize_memory": 1
                },
                "LAB_00004c34": {
                    "block_found": 1,
                    "block_split": 1
                },
                "LAB_00004c42": {
                    "block_remove": 1
                },
                "__malloc_lock": {
                    "acquire_lock": 2,
                    "lock": 1,
                    "lock_heap": 1,
                    "lock_memory": 1
                },
                "__malloc_unlock": {
                    "release_lock": 2,
                    "unlock": 1,
                    "unlock_heap": 1,
                    "unlock_memory": 1
                },
                "_sbrk": {
                    "sbrk": 1
                },
                "_sbrk_r": {
                    "allocate_heap_memory": 1,
                    "allocate_memory_chunk": 1,
                    "grow_heap": 1,
                    "sbrk": 2,
                    "sbrk_r": 1
                },
                "iVar2": {
                    "block_diff": 2,
                    "block_size": 2,
                    "block_size_diff": 1,
                    "chunk_size": 1,
                    "diff": 3,
                    "diff_size": 1,
                    "difference": 12,
                    "offset": 3,
                    "remaining": 1,
                    "remaining_size": 1,
                    "remaining_space": 1,
                    "size_diff": 1,
                    "temp": 1,
                    "temp_var_1": 1
                },
                "param_1": {
                    "buffer": 2,
                    "error_code": 1,
                    "mem_block_ptr": 1,
                    "memory_block": 1,
                    "num_bytes_ptr": 1,
                    "out_pointer": 1,
                    "out_ptr": 2,
                    "output_address": 2,
                    "pointer": 1,
                    "ptr_size": 2,
                    "result": 6,
                    "result_pointer": 1,
                    "return_ptr": 1,
                    "size": 7,
                    "size_ptr": 2
                },
                "param_2": {
                    "alignment": 5,
                    "block_size": 2,
                    "bytes_requested": 1,
                    "input_size": 1,
                    "min_size": 1,
                    "num_bytes": 2,
                    "requested_bytes": 1,
                    "requested_size": 4,
                    "size": 14
                },
                "param_3": {
                    "arg1": 1,
                    "arg_3": 1,
                    "param3": 3,
                    "param_3": 14,
                    "temp1": 1,
                    "temp_param_1": 1,
                    "unused": 1,
                    "unused1": 3,
                    "unused_param": 1,
                    "unused_param_1": 1,
                    "unused_param_3": 1,
                    "var1": 1,
                    "var3": 2
                },
                "param_4": {
                    "arg2": 1,
                    "arg_4": 1,
                    "param4": 3,
                    "param_4": 14,
                    "temp2": 1,
                    "temp_param_2": 1,
                    "unused": 1,
                    "unused2": 3,
                    "unused_param": 1,
                    "unused_param_2": 1,
                    "unused_param_4": 1,
                    "var2": 1,
                    "var4": 2
                },
                "puVar1": {
                    "current": 3,
                    "current_block": 6,
                    "current_chunk": 1,
                    "iterator": 1,
                    "prev": 2,
                    "prev_block": 8,
                    "prev_block_ptr": 2,
                    "previous_block": 7,
                    "ptr_current": 1
                },
                "puVar4": {
                    "curr": 1,
                    "curr_block": 1,
                    "current": 1,
                    "current_block": 15,
                    "current_block_ptr": 2,
                    "next": 3,
                    "next_block": 3,
                    "prev_block": 1,
                    "previous_block": 2,
                    "previous_chunk": 1,
                    "ptr_next": 1
                },
                "uVar3": {
                    "block_diff": 1,
                    "block_difference": 2,
                    "block_size": 1,
                    "block_size_diff": 3,
                    "block_size_difference": 1,
                    "chunk_difference": 1,
                    "diff": 1,
                    "difference": 7,
                    "difference_unsigned": 1,
                    "difference_with_block_size": 1,
                    "free_size": 1,
                    "memory_diff": 1,
                    "offset": 1,
                    "remainder": 1,
                    "remaining_bytes": 1,
                    "remaining_size": 1,
                    "size_diff": 1,
                    "size_difference": 1,
                    "temp": 2,
                    "temp3": 1,
                    "var_difference": 1
                },
                "uVar5": {
                    "adjusted_size": 2,
                    "aligned_size": 5,
                    "allocated_size": 6,
                    "allocation_size": 1,
                    "block_size": 6,
                    "new_block_size": 2,
                    "new_size": 1,
                    "requested_size": 4,
                    "required_size": 1,
                    "rounded_size": 1,
                    "total_size": 2
                }
            },
            "called": [
                "FUN_0000579c",
                "FUN_00000428",
                "FUN_00005790"
            ],
            "calling": [
                "FUN_00005100",
                "FUN_00005700",
                "FUN_000068f0",
                "FUN_000060cc",
                "FUN_00004248"
            ],
            "code": "\nuint allocate_memory_block_00004bd0(undefined4 *size,uint size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *prev_block;\n  int difference;\n  uint difference;\n  uint *current_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *size = 0xc;\n  }\n  else {\n    acquire_lock();\n    prev_block = DAT_1fff0db4;\n    for (current_block = DAT_1fff0db4; current_block != (uint *)0x0; current_block = (uint *)current_block[1]) {\n      difference = *current_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (0xb < difference) {\n          *current_block = difference;\n          current_block = (uint *)((int)current_block + difference);\n          goto block_split;\n        }\n        if (prev_block == current_block) {\n          DAT_1fff0db4 = (uint *)current_block[1];\n        }\n        if (prev_block != current_block) {\n          prev_block[1] = (uint)(uint *)current_block[1];\n        }\n        goto block_remove;\n      }\n      prev_block = current_block;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = sbrk(size,0,prev_block,0,param_4);\n    }\n    prev_block = (uint *)sbrk(size,allocated_size);\n    if ((prev_block != (uint *)0xffffffff) &&\n       ((current_block = (uint *)((int)prev_block + 3U & 0xfffffffc), prev_block == current_block ||\n        (difference = sbrk(size,(int)current_block - (int)prev_block), difference != -1)))) {\nblock_split:\n      *current_block = allocated_size;\nblock_remove:\n      release_lock(size);\n      allocated_size = (int)current_block + 0xbU & 0xfffffff8;\n      difference = allocated_size - (int)(current_block + 1);\n      if (difference == 0) {\n        return allocated_size;\n      }\n      *(uint *)((int)current_block + difference) = (int)(current_block + 1) - allocated_size;\n      return allocated_size;\n    }\n    *size = 0xc;\n    release_lock(size);\n  }\n  return 0;\n}\n\n",
            "current_name": "allocate_memory_block_00004bd0",
            "entrypoint": "0x00004bd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004bd0": "allocate_memory_block_00004bd0",
                "LAB_00004c34": "block_split",
                "LAB_00004c42": "block_remove",
                "__malloc_lock": "acquire_lock",
                "__malloc_unlock": "release_lock",
                "_sbrk": "sbrk",
                "_sbrk_r": "sbrk",
                "iVar2": "difference",
                "param_1": "size",
                "param_2": "size",
                "puVar1": "prev_block",
                "puVar4": "current_block",
                "uVar3": "difference",
                "uVar5": "allocated_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004c84": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "rel_array": 1
                },
                "FUN_00004c84": {
                    "print_formatted_message": 1,
                    "print_formatted_output": 20,
                    "print_formatted_string": 6,
                    "print_formatted_text": 2,
                    "print_message": 1,
                    "printf_function": 1
                },
                "dVar1": {
                    "offset": 17,
                    "rel_offset": 13
                },
                "param_1": {
                    "format_specifier": 1,
                    "format_specifiers": 1,
                    "format_str": 1,
                    "format_string": 24,
                    "output_stream": 3,
                    "param1": 1
                },
                "param_2": {
                    "arg1": 25,
                    "arg2": 2,
                    "format": 2,
                    "format_string": 1,
                    "param2": 1
                },
                "param_3": {
                    "arg1": 2,
                    "arg2": 25,
                    "arg3": 2,
                    "arg_1": 1,
                    "param3": 1
                },
                "param_4": {
                    "arg2": 2,
                    "arg3": 25,
                    "arg4": 2,
                    "arg_2": 1,
                    "param4": 1
                },
                "uStack_4": {
                    "arg2_tmp": 1,
                    "arg3_backup": 1,
                    "arg3_copy": 6,
                    "arg_copy3": 1,
                    "param4": 1,
                    "param_4_copy": 1,
                    "stack_var3": 1,
                    "temp3": 1,
                    "temp_arg3": 1,
                    "temp_stack_var3": 1,
                    "temp_var4": 1,
                    "u_stack_4": 2
                },
                "uStack_8": {
                    "arg1_tmp": 1,
                    "arg2_backup": 1,
                    "arg2_copy": 6,
                    "arg_copy2": 1,
                    "param3": 1,
                    "param_3_copy": 1,
                    "stack_var2": 1,
                    "temp2": 1,
                    "temp_arg2": 1,
                    "temp_stack_var2": 1,
                    "temp_var3": 1,
                    "u_stack_8": 2
                },
                "uStack_c": {
                    "arg1_backup": 1,
                    "arg1_copy": 6,
                    "arg_copy1": 1,
                    "param2": 1,
                    "param_2_copy": 1,
                    "stack_var1": 1,
                    "stream": 1,
                    "temp1": 1,
                    "temp_arg1": 1,
                    "temp_stack_var1": 1,
                    "temp_var2": 1,
                    "u_stack_c": 2
                },
                "uVar2": {
                    "copy_of_format_string": 1,
                    "format_arg": 1,
                    "format_string_copy": 1,
                    "formatted_output": 1,
                    "param": 1,
                    "param1": 1,
                    "param1_copy": 8,
                    "param_1_copy": 2,
                    "param_5": 1,
                    "param_copy": 4,
                    "saved_param1": 1,
                    "temp_var": 2,
                    "u_var": 2,
                    "u_var2": 2,
                    "updated_param1": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_000057f8",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_00000ed8",
                "FUN_00002b10",
                "FUN_0000211c",
                "FUN_00003378",
                "FUN_00003694",
                "FUN_0000305c",
                "FUN_00002f74",
                "FUN_00002ecc",
                "FUN_00000f04",
                "FUN_0000316c",
                "FUN_00002fe0",
                "FUN_00003524",
                "FUN_00002a88"
            ],
            "code": "\nvoid print_formatted_output_00004c84(undefined4 format_string,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  dword offset;\n  undefined4 param1_copy;\n  undefined4 arg1_copy;\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  offset = rel_array[16].r_offset;\n  param1_copy = format_string;\n  arg1_copy = arg1;\n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  if ((rel_array[16].r_offset != 0) &&\n     (*(int *)(rel_array[16].r_offset + 0x18) == 0)) {\n    __sinit(rel_array[16].r_offset);\n  }\n  _vfprintf_r(offset,*(undefined4 *)(offset + 8),format_string,&arg1_copy,param1_copy,&arg1_copy);\n  return;\n}\n\n",
            "current_name": "print_formatted_output_00004c84",
            "entrypoint": "0x00004c84",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_00004c84": "print_formatted_output_00004c84",
                "dVar1": "offset",
                "param_1": "format_string",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_4": "arg3_copy",
                "uStack_8": "arg2_copy",
                "uStack_c": "arg1_copy",
                "uVar2": "param1_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "rel_array": 1
                },
                "FUN_00004cb4": {
                    "process_character": 3,
                    "write_byte": 1,
                    "write_byte_to_buffer": 4,
                    "write_char_to_buffer": 4,
                    "write_char_to_output_buffer": 1,
                    "write_char_to_stdout": 1,
                    "write_char_to_stream": 2,
                    "write_character": 5,
                    "write_character_to_stdout": 1,
                    "write_character_to_stream": 1,
                    "write_to_buffer": 4,
                    "write_to_stdout": 1,
                    "write_to_stream": 1
                },
                "dVar1": {
                    "buffer_offset": 2,
                    "elf_offset": 1,
                    "elf_rel_offset": 1,
                    "offset": 5,
                    "rel_array_offset": 1,
                    "rel_offset": 15,
                    "rel_table_entry": 1,
                    "relocation_offset": 5
                },
                "param_1": {
                    "byte_to_write": 2,
                    "ch": 1,
                    "character": 22,
                    "data": 3,
                    "input_byte": 1,
                    "input_value": 2
                },
                "puVar2": {
                    "buffer": 9,
                    "buffer_pointer": 3,
                    "buffer_ptr": 6,
                    "current_buffer": 1,
                    "current_stream": 1,
                    "file_ptr": 1,
                    "pointer": 3,
                    "ptr1": 1,
                    "rel_array": 1,
                    "stdout_info": 1,
                    "stream": 1,
                    "stream_ptr": 2,
                    "stream_struct": 1
                },
                "puVar4": {
                    "buffer": 5,
                    "buffer_pointer": 2,
                    "buffer_ptr": 3,
                    "char_ptr": 2,
                    "current": 1,
                    "current_position": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "new_buffer": 1,
                    "new_buffer_ptr": 1,
                    "next_byte": 1,
                    "next_char": 1,
                    "output_buffer": 1,
                    "pointer2": 1,
                    "ptr": 4,
                    "ptr2": 1,
                    "stream": 1,
                    "temp_pointer": 2
                },
                "uVar3": {
                    "buffer_length": 1,
                    "buffer_size": 2,
                    "count": 13,
                    "counter": 3,
                    "decremented_value": 1,
                    "index": 1,
                    "num_remaining": 1,
                    "remaining_bytes": 1,
                    "remaining_characters": 1,
                    "remaining_chars": 4,
                    "remaining_count": 1,
                    "stream_count": 1,
                    "temp_value": 1
                },
                "unaff_r4": {
                    "arg1": 3,
                    "arg4": 4,
                    "argument1": 1,
                    "argument_4": 1,
                    "param4": 3,
                    "param_4": 5,
                    "param_4_1": 1,
                    "unaff_r4": 1,
                    "unaff_register_4": 1,
                    "unused": 1,
                    "unused_register_1": 1,
                    "unused_var": 1,
                    "value_r4": 1,
                    "variable1": 1
                },
                "unaff_r5": {
                    "arg2": 3,
                    "arg5": 4,
                    "argument2": 1,
                    "argument_5": 1,
                    "param5": 3,
                    "param_4_2": 1,
                    "param_5": 5,
                    "unaff_r5": 1,
                    "unaff_register_5": 1,
                    "unused": 1,
                    "unused_register_2": 1,
                    "unused_var": 1,
                    "value_r5": 1,
                    "variable2": 1
                }
            },
            "called": [
                "FUN_000045e8",
                "FUN_00005404",
                "FUN_000045ec",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_00002a00"
            ],
            "code": "\nuint write_byte_to_buffer_00004cb4(uint character)\n\n{\n  dword rel_offset;\n  undefined4 *buffer;\n  uint count;\n  undefined *buffer;\n  undefined4 param_4;\n  undefined4 param_5;\n  \n  rel_offset = rel_array[16].r_offset;\n  if ((rel_array[16].r_offset != 0) &&\n     (*(int *)(rel_array[16].r_offset + 0x18) == 0)) {\n    __sinit(rel_array[16].r_offset);\n  }\n  buffer = *(undefined4 **)(rel_offset + 8);\n  if ((rel_offset != 0) && (*(int *)(rel_offset + 0x18) == 0)) {\n    __sinit();\n  }\n  if (buffer == &DAT_000079b8) {\n    buffer = *(undefined4 **)(rel_offset + 4);\n  }\n  else if (buffer == (undefined4 *)&DAT_000079d8) {\n    buffer = *(undefined4 **)(rel_offset + 8);\n  }\n  else if (buffer == (undefined4 *)&DAT_00007998) {\n    buffer = *(undefined4 **)(rel_offset + 0xc);\n  }\n  if ((-1 < (int)(buffer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(buffer[0x16]);\n  }\n  count = buffer[2] - 1;\n  buffer[2] = count;\n  if (((int)count < 0) && (((int)count < (int)buffer[6] || (count = character & 0xff, count == 10))))\n  {\n    character = __swbuf_r(rel_offset,character,buffer,count,param_4,param_5);\n  }\n  else {\n    buffer = (undefined *)*buffer;\n    *buffer = buffer + 1;\n    *buffer = (char)character;\n    character = character & 0xff;\n  }\n  if ((-1 < (int)(buffer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x16))) {\n    __retarget_lock_release_recursive(buffer[0x16]);\n  }\n  return character;\n}\n\n",
            "current_name": "write_byte_to_buffer_00004cb4",
            "entrypoint": "0x00004cb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_00004cb4": "write_byte_to_buffer_00004cb4",
                "dVar1": "rel_offset",
                "param_1": "character",
                "puVar2": "buffer",
                "puVar4": "buffer",
                "uVar3": "count",
                "unaff_r4": "param_4",
                "unaff_r5": "param_5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004db8": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "elf_rel_array": 1
                },
                "FUC_000045e8": {
                    "initialize_something": 1
                },
                "FUNC_000045ec": {
                    "finalize_something": 1
                },
                "FUN_000042a4": {
                    "perform_operation": 1
                },
                "FUN_00004db8": {
                    "convert_param_to_buffer": 1,
                    "print_character": 1,
                    "print_formatted_text": 1,
                    "print_int": 1,
                    "print_reversed_string": 1,
                    "print_string": 6,
                    "process_data": 5,
                    "process_input": 5,
                    "read_and_print_characters": 1,
                    "read_and_print_line": 1,
                    "read_and_write_data": 1,
                    "read_line_from_input": 1
                },
                "FUN_00005404": {
                    "perform_calculation": 1
                },
                "FUN_000054a8": {
                    "process_qword": 1
                },
                "__retarget_lock_acquire_recursive": {
                    "acquire_recursive_lock": 1
                },
                "__retarget_lock_release_recursive": {
                    "release_recursive_lock": 1
                },
                "__sinit": {
                    "initialize_streams": 1
                },
                "__swbuf_r": {
                    "write_buffer": 1
                },
                "__swsetup_r": {
                    "setup": 1
                },
                "cVar1": {
                    "character": 6,
                    "current_char": 20,
                    "current_char_value": 1,
                    "current_character": 4
                },
                "dVar2": {
                    "data_offset": 2,
                    "elf_base": 1,
                    "elf_header_offset": 1,
                    "elf_offset": 1,
                    "elf_rel_offset": 1,
                    "elfheader_offset": 1,
                    "offset": 17,
                    "rel_offset": 5,
                    "relocation_offset": 1
                },
                "iVar3": {
                    "error_code": 1,
                    "result": 20,
                    "return_code": 1,
                    "return_value": 3,
                    "setup_result": 1,
                    "status": 2,
                    "swsetup_r_result": 1,
                    "swsetup_result": 2
                },
                "param_1": {
                    "character": 1,
                    "data": 1,
                    "format_string": 1,
                    "input": 8,
                    "input_data": 2,
                    "input_file_descriptor": 1,
                    "input_param": 2,
                    "input_parameter": 2,
                    "input_size": 1,
                    "input_value": 3,
                    "line_length": 1,
                    "num": 1,
                    "str_length": 2,
                    "string_length": 3,
                    "value": 1
                },
                "pcVar4": {
                    "buf_pointer": 1,
                    "buffer_ptr": 1,
                    "current_buffer": 1,
                    "current_char": 1,
                    "current_ptr": 1,
                    "end_of_string": 1,
                    "pointer": 1,
                    "ptr_char": 2,
                    "remaining_characters": 1,
                    "remaining_chars": 2,
                    "remaining_chars_ptr": 1,
                    "str_ptr": 5,
                    "string_pointer": 6,
                    "string_pos": 1,
                    "string_ptr": 5,
                    "swbuf_ptr": 1
                },
                "pcVar7": {
                    "char_index": 1,
                    "char_pointer": 1,
                    "char_ptr": 2,
                    "current_char": 4,
                    "current_char_pointer": 1,
                    "current_char_ptr": 3,
                    "current_character": 1,
                    "current_pointer": 3,
                    "current_position": 2,
                    "current_ptr": 2,
                    "current_string": 3,
                    "input_ptr": 1,
                    "ptr": 1,
                    "ptr_char2": 1,
                    "ptr_input": 1,
                    "str_ptr2": 1,
                    "string_ptr": 3
                },
                "ppcVar5": {
                    "buffer_ptr_ptr": 1,
                    "current_pointer": 1,
                    "data_pointer": 2,
                    "elf_header_ptr": 1,
                    "elfdata_ptr": 1,
                    "pointer_array": 2,
                    "pointers_array": 1,
                    "ppc_data": 1,
                    "ppc_ptr": 1,
                    "ptr_array": 2,
                    "ptr_ptr_char": 1,
                    "rel_ptr": 1,
                    "string_args": 1,
                    "string_arr": 1,
                    "string_array": 5,
                    "string_array_pointer": 3,
                    "string_data": 2,
                    "string_list": 1,
                    "string_parameters": 1,
                    "string_pointers": 1,
                    "string_ptr": 1
                },
                "uVar6": {
                    "result": 2,
                    "ret_val": 1,
                    "return_val": 2,
                    "return_value": 25,
                    "updated_value": 1
                }
            },
            "called": [
                "FUN_000045e8",
                "FUN_00005404",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_00002b10",
                "FUN_000023a4",
                "FUN_00003694",
                "FUN_00003478",
                "FUN_000034c0",
                "FUN_0000305c",
                "FUN_00002f74",
                "FUN_000033f4",
                "FUN_00002fe0",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_00002f30",
                "FUN_000031e0",
                "FUN_00002a88"
            ],
            "code": "\nundefined4 print_reversed_string_00004db8(int input)\n\n{\n  char current_char;\n  dword offset;\n  int result;\n  char *string_pointer;\n  char **string_array;\n  undefined4 return_value;\n  char *current_char;\n  \n  offset = elf_rel_array[16].r_offset;\n  if ((elf_rel_array[16].r_offset != 0) &&\n     (*(int *)(elf_rel_array[16].r_offset + 0x18) == 0)) {\n    initialize_streams();\n  }\n  string_array = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    initialize_streams(offset);\n  }\n  if (string_array == (char **)&DAT_000079b8) {\n    string_array = *(char ***)(offset + 4);\n  }\n  else if (string_array == (char **)&DAT_000079d8) {\n    string_array = *(char ***)(offset + 8);\n  }\n  else if (string_array == (char **)&DAT_00007998) {\n    string_array = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)string_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(string_array + 3) << 0x16))) {\n    acquire_recursive_lock(string_array[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(string_array + 3) << 0x1c) < 0) && (string_array[4] != (char *)0x0)) ||\n     (result = setup(offset,string_array), result == 0)) {\n    current_char = (char *)(input + -1);\n    do {\n      while( true ) {\n        current_char = current_char + 1;\n        current_char = *current_char;\n        string_pointer = string_array[2] + -1;\n        string_array[2] = string_pointer;\n        if (current_char == '\\0') {\n          if (-1 < (int)string_pointer) {\n            current_char = *string_array;\n            return_value = 10;\n            *string_array = current_char + 1;\n            *current_char = '\\n';\n            goto LAB_00004d64;\n          }\n          result = write_buffer(offset,10,string_array);\n          if (result != -1) {\n            return_value = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)string_pointer < 0) && (((int)string_pointer < (int)string_array[6] || (current_char == '\\n')))) break;\n        string_pointer = *string_array;\n        *string_array = string_pointer + 1;\n        *string_pointer = current_char;\n      }\n      result = write_buffer(offset,current_char,string_array);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  return_value = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)string_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(string_array + 3) << 0x16))) {\n    release_recursive_lock(string_array[0x16]);\n  }\n  return return_value;\n}\n\n",
            "current_name": "print_reversed_string_00004db8",
            "entrypoint": "0x00004db8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "elf_rel_array",
                "FUN_00004db8": "print_reversed_string_00004db8",
                "__retarget_lock_acquire_recursive": "acquire_recursive_lock",
                "__retarget_lock_release_recursive": "release_recursive_lock",
                "__sinit": "initialize_streams",
                "__swbuf_r": "write_buffer",
                "__swsetup_r": "setup",
                "cVar1": "current_char",
                "dVar2": "offset",
                "iVar3": "result",
                "param_1": "input",
                "pcVar4": "string_pointer",
                "pcVar7": "current_char",
                "ppcVar5": "string_array",
                "uVar6": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "additional_data": {
                "FUN_00004dc8": {
                    "process_data": 1,
                    "update_data": 14,
                    "update_value": 10,
                    "update_value_based_on_input": 2,
                    "update_values": 2,
                    "update_var_based_on_read_result": 1,
                    "update_variable": 1
                },
                "bVar3": {
                    "is_positive": 6,
                    "is_positive_read": 1,
                    "is_read_success": 1,
                    "is_read_successful": 12,
                    "is_success": 5,
                    "is_successful": 2,
                    "is_valid": 2,
                    "read_success": 2
                },
                "iVar1": {
                    "bytes_read": 1,
                    "read_result": 23,
                    "read_status": 3,
                    "result": 1,
                    "return_value": 3
                },
                "param_1": {
                    "address": 1,
                    "arg1": 1,
                    "buffer": 12,
                    "data": 1,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "file_descriptor": 2,
                    "file_pointer": 1,
                    "input": 1,
                    "input_buffer": 2,
                    "input_pointer": 1,
                    "param1": 2,
                    "param_r": 1,
                    "ptr": 1,
                    "source_buffer": 1
                },
                "param_2": {
                    "address": 1,
                    "arg2": 1,
                    "buffer": 1,
                    "context": 1,
                    "data": 10,
                    "data_address": 1,
                    "data_buffer": 1,
                    "data_offset": 2,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "data_struct_address": 1,
                    "data_structure_address": 1,
                    "info_ptr": 1,
                    "offset": 2,
                    "param2": 2,
                    "param_2_offset": 1,
                    "struct_offset": 1
                },
                "uVar2": {
                    "new_data": 2,
                    "new_value": 8,
                    "updated_value": 21
                }
            },
            "called": [
                "FUN_00000490"
            ],
            "calling": [],
            "code": "\nvoid update_data_00004dc8(undefined4 buffer,int data)\n\n{\n  int read_result;\n  uint updated_value;\n  bool is_read_successful;\n  \n  read_result = _read_r(buffer,(int)*(short *)(data + 0xe));\n  is_read_successful = -1 < read_result;\n  if (is_read_successful) {\n    updated_value = *(int *)(data + 0x54) + read_result;\n  }\n  else {\n    updated_value = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (is_read_successful) {\n    *(uint *)(data + 0x54) = updated_value;\n  }\n  if (!is_read_successful) {\n    *(short *)(data + 0xc) = (short)updated_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_00004dc8",
            "entrypoint": "0x00004dc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004dc8": "update_data_00004dc8",
                "bVar3": "is_read_successful",
                "iVar1": "read_result",
                "param_1": "buffer",
                "param_2": "data",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004dee": {
            "additional_data": {
                "FUN_00004dee": {
                    "perform_uart_io_operation": 1,
                    "process_data": 1,
                    "read_and_write_data": 2,
                    "read_and_write_uart": 1,
                    "rewritten_function": 2,
                    "uart_write_seek": 1,
                    "write_data": 3,
                    "write_data_to_uart": 3,
                    "write_to_uart": 10,
                    "write_uart_data": 1,
                    "write_with_seek": 1
                },
                "_lseek_r": {
                    "reposition_file_pointer": 1,
                    "set_file_pointer": 1
                },
                "param_1": {
                    "file_descriptor": 29,
                    "output_file": 1,
                    "param_a": 1
                },
                "param_2": {
                    "buffer": 8,
                    "buffer_address": 12,
                    "data_buffer": 3,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "data_struct_offset": 1,
                    "input_data": 1,
                    "io_params_address": 1,
                    "param_b": 1
                },
                "param_3": {
                    "buffer": 3,
                    "buffer_address": 1,
                    "data": 10,
                    "data_address": 9,
                    "data_buffer": 1,
                    "data_start": 2,
                    "data_start_address": 1,
                    "param_c": 1,
                    "write_buffer": 2,
                    "write_length": 1
                },
                "param_4": {
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "data_end": 2,
                    "data_length": 9,
                    "data_size": 3,
                    "length": 7,
                    "param_d": 1,
                    "size": 5,
                    "write_offset": 1,
                    "write_size": 1
                },
                "uVar1": {
                    "result": 18,
                    "return_value": 1,
                    "status": 1,
                    "write_result": 10,
                    "write_status": 1
                },
                "uart_stdio_write": {
                    "write_to_uart": 2
                }
            },
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "calling": [],
            "code": "\nundefined4 write_data_to_uart_00004dee(undefined4 file_descriptor,int buffer_address,undefined4 data,undefined4 data_length)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(buffer_address + 0xc) << 0x17) < 0) {\n    set_file_pointer(file_descriptor,(int)*(short *)(buffer_address + 0xe),0,2);\n  }\n  *(ushort *)(buffer_address + 0xc) = *(ushort *)(buffer_address + 0xc) & 0xefff;\n  result = write_to_uart(data,data_length);\n  return result;\n}\n\n",
            "current_name": "write_data_to_uart_00004dee",
            "entrypoint": "0x00004dee",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004dee": "write_data_to_uart_00004dee",
                "_lseek_r": "set_file_pointer",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "param_3": "data",
                "param_4": "data_length",
                "uVar1": "result",
                "uart_stdio_write": "write_to_uart"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004e26": {
            "additional_data": {
                "FUN_00004e26": {
                    "check_and_set_file_position": 1,
                    "check_and_set_file_seek_position": 1,
                    "close_file_and_update_status": 1,
                    "file_seek": 1,
                    "file_seek_and_set_flag": 1,
                    "lseek_and_set_flags": 1,
                    "perform_file_seek": 1,
                    "seek_and_set_flag": 9,
                    "seek_and_set_flags": 1,
                    "seek_and_set_status": 1,
                    "seek_and_update": 1,
                    "seek_and_update_flags": 1,
                    "seek_function": 1,
                    "update_file_access_status": 1,
                    "update_file_info": 1,
                    "update_file_offset": 1,
                    "update_file_pointer": 1,
                    "update_file_position": 1,
                    "update_file_seek": 1,
                    "update_file_seek_position": 1,
                    "update_file_status": 1,
                    "update_seek_position": 1
                },
                "bVar3": {
                    "has_error": 2,
                    "is_error": 5,
                    "is_seek_error": 11,
                    "is_seek_fail": 1,
                    "is_seek_failed": 7,
                    "is_seek_failure": 1,
                    "seek_failed": 4
                },
                "iVar1": {
                    "file_offset": 1,
                    "file_position": 1,
                    "file_seek_result": 2,
                    "result": 1,
                    "seek_result": 25,
                    "status": 1
                },
                "param_1": {
                    "fd": 1,
                    "file_descriptor": 29,
                    "file_handle": 1
                },
                "param_2": {
                    "buffer": 3,
                    "buffer_address": 4,
                    "context": 6,
                    "data": 1,
                    "data_address": 1,
                    "data_buffer": 2,
                    "data_pointer": 2,
                    "data_ptr": 3,
                    "data_struct_ptr": 1,
                    "file_info_ptr": 1,
                    "memory_buffer": 1,
                    "struct_address": 2,
                    "struct_pointer": 2,
                    "struct_ptr": 1,
                    "structure_address": 1
                },
                "uVar2": {
                    "file_flags": 1,
                    "file_seek_flags": 1,
                    "flag": 6,
                    "flag_value": 3,
                    "flags": 3,
                    "modified_flag": 4,
                    "modified_flags": 3,
                    "new_access_status": 1,
                    "new_flag": 1,
                    "status_flag": 2,
                    "updated_flag": 2,
                    "updated_flags": 4
                }
            },
            "called": [
                "FUN_000004f2"
            ],
            "calling": [],
            "code": "\nvoid file_seek_and_set_flag_00004e26(undefined4 file_descriptor,int context)\n\n{\n  int seek_result;\n  ushort flag;\n  bool is_seek_error;\n  \n  seek_result = _lseek_r(file_descriptor,(int)*(short *)(context + 0xe));\n  is_seek_error = seek_result == -1;\n  if (is_seek_error) {\n    flag = *(ushort *)(context + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(context + 0x54) = seek_result;\n    flag = *(ushort *)(context + 0xc) | 0x1000;\n  }\n  if (is_seek_error) {\n    *(ushort *)(context + 0xc) = flag;\n  }\n  if (!is_seek_error) {\n    *(ushort *)(context + 0xc) = flag;\n  }\n  return;\n}\n\n",
            "current_name": "file_seek_and_set_flag_00004e26",
            "entrypoint": "0x00004e26",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004e26": "file_seek_and_set_flag_00004e26",
                "bVar3": "is_seek_error",
                "iVar1": "seek_result",
                "param_1": "file_descriptor",
                "param_2": "context",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004e52": {
            "additional_data": {
                "FUN_00004e52": {
                    "calculate_difference": 1,
                    "compare_and_subtract": 1,
                    "compare_arrays": 1,
                    "compare_byte_arrays": 21,
                    "compare_bytes": 7
                },
                "bVar1": {
                    "array2_element": 2,
                    "array2_value": 1,
                    "array_2_element": 1,
                    "byte1": 1,
                    "byte2": 8,
                    "byte_from_array2": 1,
                    "byte_value2": 1,
                    "curr_byte": 1,
                    "current_byte": 2,
                    "current_byte1": 3,
                    "current_byte2": 1,
                    "current_byte_2": 1,
                    "current_byte_a": 1,
                    "data2_value": 1,
                    "element2": 1,
                    "second_byte": 1,
                    "second_element": 1,
                    "value2": 3
                },
                "bVar3": {
                    "bytes_match": 1,
                    "comparison_result": 1,
                    "equal": 1,
                    "equal_or_zero": 1,
                    "is_equal": 19,
                    "is_match": 7,
                    "match": 1
                },
                "param_1": {
                    "array1": 16,
                    "array_1": 2,
                    "array_a": 1,
                    "buffer1": 1,
                    "byte_array1": 5,
                    "bytes1": 1,
                    "data1": 1,
                    "first_array": 1,
                    "input_bytes1": 2,
                    "input_data1": 1
                },
                "param_2": {
                    "array2": 16,
                    "array_2": 2,
                    "array_b": 1,
                    "buffer2": 1,
                    "byte_array2": 5,
                    "bytes2": 1,
                    "data2": 1,
                    "input_bytes2": 2,
                    "input_data2": 1,
                    "second_array": 1
                },
                "uVar2": {
                    "array1_byte": 2,
                    "array1_element": 2,
                    "array1_value": 1,
                    "array_1_element": 1,
                    "byte1": 9,
                    "byte2": 1,
                    "byte_from_array1": 1,
                    "byte_value1": 1,
                    "current_byte1": 1,
                    "current_byte2": 2,
                    "current_byte_1": 1,
                    "current_byte_b": 1,
                    "data1_value": 1,
                    "element1": 1,
                    "first_byte": 1,
                    "first_byte1": 1,
                    "first_element": 1,
                    "value1": 3
                }
            },
            "called": [
                "FUN_00004e52"
            ],
            "calling": [
                "FUN_00002b10",
                "FUN_0000316c",
                "FUN_00005100",
                "FUN_00002fe0",
                "FUN_00002a18",
                "FUN_00004e52"
            ],
            "code": "\nint compare_byte_arrays_00004e52(byte *array1,byte *array2)\n\n{\n  byte byte2;\n  uint byte1;\n  bool is_equal;\n  \n  do {\n    byte1 = (uint)*array1;\n    byte2 = *array2;\n    is_equal = byte1 == 1;\n    if (byte1 != 0) {\n      is_equal = byte1 == byte2;\n    }\n    array1 = array1 + 1;\n    array2 = array2 + 1;\n  } while (is_equal);\n  return byte1 - byte2;\n}\n\n",
            "current_name": "compare_byte_arrays_00004e52",
            "entrypoint": "0x00004e52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004e52": "compare_byte_arrays_00004e52",
                "bVar1": "byte2",
                "bVar3": "is_equal",
                "param_1": "array1",
                "param_2": "array2",
                "uVar2": "byte1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004e66": {
            "additional_data": {
                "FUN_00004e66": {
                    "calculate_offset": 1,
                    "compare_and_calculate_difference": 6,
                    "compare_and_get_difference": 3,
                    "compare_and_update_bytes": 1,
                    "compare_arrays": 1,
                    "compare_byte_arrays": 3,
                    "compare_bytes": 13,
                    "find_difference": 2,
                    "find_offset": 1
                },
                "iVar2": {
                    "difference": 23,
                    "offset": 1,
                    "offset_difference": 1,
                    "result": 4
                },
                "param_1": {
                    "array1": 4,
                    "buffer": 2,
                    "byte_array": 1,
                    "bytes": 1,
                    "bytes1": 1,
                    "data": 7,
                    "data1": 1,
                    "data_array": 1,
                    "data_buffer": 2,
                    "input_array": 1,
                    "input_buffer": 1,
                    "input_bytes": 4,
                    "input_data": 1,
                    "source": 2,
                    "source_array": 1,
                    "source_bytes": 1
                },
                "param_2": {
                    "array1_length": 1,
                    "array2_length": 1,
                    "index": 5,
                    "length": 1,
                    "length1": 1,
                    "offset": 10,
                    "source_offset": 1,
                    "start_idx": 1,
                    "start_index": 7,
                    "start_offset": 1,
                    "start_pos": 1,
                    "starting_index": 1
                },
                "param_3": {
                    "array1_length": 1,
                    "array2_length": 1,
                    "array_length": 1,
                    "comparison_length": 1,
                    "length": 24,
                    "length2": 1,
                    "size": 2
                },
                "pbVar1": {
                    "curr_byte": 1,
                    "curr_byte1": 1,
                    "current_byte": 19,
                    "current_byte1": 2,
                    "current_element1": 1,
                    "ptr1": 1,
                    "source": 1,
                    "source_ptr": 3
                },
                "pbVar3": {
                    "compare_ptr": 1,
                    "compared_byte": 2,
                    "compared_ptr": 1,
                    "comparison_byte": 1,
                    "comparison_ptr": 1,
                    "curr_byte2": 1,
                    "current_byte2": 2,
                    "current_element2": 1,
                    "destination": 1,
                    "next_byte": 15,
                    "pb_var3": 1,
                    "previous_byte": 1,
                    "ptr2": 1
                },
                "uVar4": {
                    "byte_value": 2,
                    "curr_byte_value": 1,
                    "current_byte": 2,
                    "current_byte_value": 15,
                    "next_byte": 1,
                    "source_byte": 1,
                    "temp": 4,
                    "temp_var": 1,
                    "value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0000562c",
                "FUN_00003524"
            ],
            "code": "\nint compare_and_update_bytes_00004e66(byte *data,int offset,int length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *next_byte;\n  uint current_byte_value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    next_byte = (byte *)(offset + -1);\n    current_byte = data;\n    do {\n      current_byte_value = (uint)*current_byte;\n      next_byte = next_byte + 1;\n      if ((current_byte_value != *next_byte) || (current_byte + 1 == data + length)) break;\n      current_byte = current_byte + 1;\n    } while (current_byte_value != 0);\n    difference = current_byte_value - *next_byte;\n  }\n  return difference;\n}\n\n",
            "current_name": "compare_and_update_bytes_00004e66",
            "entrypoint": "0x00004e66",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004e66": "compare_and_update_bytes_00004e66",
                "iVar2": "difference",
                "param_1": "data",
                "param_2": "offset",
                "param_3": "length",
                "pbVar1": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "current_byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004f84": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "some_array": 1
                },
                "FUN_00004f84": {
                    "convert_string_to_integer": 1,
                    "convert_string_to_number": 2,
                    "convert_to_decimal": 1,
                    "convert_to_integer": 1,
                    "convert_to_number": 1,
                    "parse_integer": 14,
                    "parse_integer_from_byte_array": 1,
                    "parse_number": 10
                },
                "iVar5": {
                    "comp_result": 1,
                    "compare": 1,
                    "compare_result": 7,
                    "compare_value": 1,
                    "comparison": 7,
                    "comparison_flag": 1,
                    "comparison_result": 4,
                    "direction": 1,
                    "error_flag": 1,
                    "is_first_iteration": 1,
                    "last_digit_sign": 1,
                    "state": 3,
                    "status": 2
                },
                "param_1": {
                    "byte_array": 2,
                    "input": 10,
                    "input_buffer": 1,
                    "input_bytes": 1,
                    "input_data": 1,
                    "input_str": 2,
                    "input_string": 14
                },
                "param_2": {
                    "end_pointer": 1,
                    "end_ptr": 1,
                    "output": 7,
                    "output_buffer": 1,
                    "output_byte_array": 1,
                    "output_data": 1,
                    "output_pointer": 3,
                    "output_string": 6,
                    "remainder_ptr": 1,
                    "remaining": 1,
                    "remaining_input": 1,
                    "remaining_string": 4,
                    "rest_of_string": 1,
                    "rest_str": 1,
                    "result": 1
                },
                "param_3": {
                    "base": 30,
                    "radix": 1
                },
                "pbVar8": {
                    "current_byte": 17,
                    "current_char": 6,
                    "current_pointer": 3,
                    "current_pos": 1,
                    "current_position": 1,
                    "current_ptr": 1,
                    "next_char": 1,
                    "pointer": 1
                },
                "pbVar9": {
                    "current_char": 1,
                    "current_ptr": 1,
                    "next_byte": 17,
                    "next_char": 6,
                    "next_pointer": 3,
                    "next_pos": 1,
                    "next_position": 1,
                    "next_ptr": 1
                },
                "uVar1": {
                    "converted_number": 1,
                    "decimal_value": 1,
                    "parsed_integer": 1,
                    "parsed_number": 1,
                    "result": 27
                },
                "uVar2": {
                    "ch": 4,
                    "current_byte": 2,
                    "current_char": 21,
                    "current_character": 1,
                    "current_digit": 1,
                    "current_value": 1,
                    "digit": 1
                },
                "uVar3": {
                    "flag": 1,
                    "found_sign": 1,
                    "is_negative": 29
                },
                "uVar4": {
                    "char_value": 1,
                    "character_value": 1,
                    "converted_digit": 2,
                    "digit": 5,
                    "digit_value": 19,
                    "numeric_value": 1,
                    "parsed_digit": 1,
                    "value": 1
                },
                "uVar6": {
                    "integer_max_value": 1,
                    "max_decimal": 1,
                    "max_dividend": 1,
                    "max_int": 3,
                    "max_integer": 2,
                    "max_result": 4,
                    "max_result_value": 1,
                    "max_u_int": 1,
                    "max_uint": 1,
                    "max_unsigned_result": 1,
                    "max_value": 14,
                    "upper_limit": 1
                },
                "uVar7": {
                    "digit_max_count": 1,
                    "divided": 1,
                    "division_result": 1,
                    "divisor": 3,
                    "integer_divisor": 1,
                    "max_div": 1,
                    "max_division": 1,
                    "max_divisor": 1,
                    "max_quotient": 3,
                    "max_signed_result": 1,
                    "quotient": 17
                }
            },
            "called": [],
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "code": "\nuint parse_integer_from_byte_array_00004f84(byte *input_string,byte **output,uint base)\n\n{\n  uint result;\n  uint current_char;\n  uint is_negative;\n  uint digit_value;\n  int comparison;\n  uint max_value;\n  uint quotient;\n  byte *current_byte;\n  byte *next_byte;\n  \n  next_byte = input_string;\n  do {\n    current_byte = next_byte;\n    next_byte = current_byte + 1;\n    current_char = (uint)*current_byte;\n    is_negative = (byte)(&DAT_00007a99)[current_char] & 8;\n  } while (((&DAT_00007a99)[current_char] & 8) != 0);\n  if (current_char == 0x2d) {\n    current_char = (uint)*next_byte;\n    is_negative = 1;\n    next_byte = current_byte + 2;\n  }\n  else if (current_char == 0x2b) {\n    current_char = (uint)*next_byte;\n    next_byte = current_byte + 2;\n  }\n  if (base == 0) {\n    if (current_char != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (current_char != 0x30)) goto LAB_00004ed6;\n  if ((*next_byte & 0xdf) == 0x58) {\n    current_char = (uint)next_byte[1];\n    base = 0x10;\n    next_byte = next_byte + 2;\n  }\n  else {\n    current_char = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  max_value = is_negative + 0x7fffffff;\n  comparison = 0;\n  quotient = max_value / base;\n  result = 0;\n  do {\n    digit_value = current_char - 0x30;\n    if (9 < digit_value) {\n      if (current_char - 0x41 < 0x1a) {\n        digit_value = current_char - 0x37;\n      }\n      else {\n        if (0x19 < current_char - 0x61) break;\n        digit_value = current_char - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit_value) break;\n    if (comparison != -1) {\n      if ((quotient < result) || ((quotient == result && ((int)(max_value - base * quotient) < (int)digit_value)))) {\n        comparison = -1;\n      }\n      else {\n        result = result * base + digit_value;\n        comparison = 1;\n      }\n    }\n    current_char = (uint)*next_byte;\n    next_byte = next_byte + 1;\n  } while( true );\n  if (comparison == -1) {\n    *(undefined4 *)some_array[16].r_offset = 0x22;\n    result = max_value;\n    if (output == (byte **)0x0) {\n      return max_value;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      result = -result;\n    }\n    if (output == (byte **)0x0) {\n      return result;\n    }\n    if (comparison == 0) goto LAB_00004f64;\n  }\n  input_string = next_byte + -1;\nLAB_00004f64:\n  *output = input_string;\n  return result;\n}\n\n",
            "current_name": "parse_integer_from_byte_array_00004f84",
            "entrypoint": "0x00004f84",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "some_array",
                "FUN_00004f84": "parse_integer_from_byte_array_00004f84",
                "iVar5": "comparison",
                "param_1": "input_string",
                "param_2": "output",
                "param_3": "base",
                "pbVar8": "current_byte",
                "pbVar9": "next_byte",
                "uVar1": "result",
                "uVar2": "current_char",
                "uVar3": "is_negative",
                "uVar4": "digit_value",
                "uVar6": "max_value",
                "uVar7": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00004f98": {
            "additional_data": {
                "FUN_00004f98": {
                    "calculate_date": 1,
                    "calculate_date_offset": 2,
                    "calculate_day_of_week": 18,
                    "calculate_day_of_week_for_date": 1,
                    "calculate_day_of_year": 3,
                    "calculate_leap_year": 1,
                    "calculate_week_day": 1,
                    "calculate_week_of_year": 1,
                    "calculate_weekday_from_date": 2
                },
                "FUN_000056b0": {
                    "get_current_time_zone": 1,
                    "get_day_of_week_constant": 1,
                    "get_leap_year_status": 1,
                    "get_tz_info": 1,
                    "get_tzinfo": 1
                },
                "UNK_000056b0": {
                    "get_leap_year_info": 1
                },
                "UNK_00007b98": {
                    "constant_arr": 1,
                    "days_in_month": 1,
                    "lookup_table": 1,
                    "month_data": 1,
                    "month_lengths": 1
                },
                "__gettzinfo": {
                    "get_timezone_info": 1
                },
                "fun_000056b0": {
                    "get_tz_info": 1
                },
                "iVar4": {
                    "additional_days": 1,
                    "day_correction": 1,
                    "day_of_week": 2,
                    "day_of_week_offset": 1,
                    "day_of_year": 1,
                    "day_offset": 2,
                    "days": 2,
                    "days_from_previous_years": 1,
                    "days_in_month": 2,
                    "days_since_start": 1,
                    "days_to_add": 6,
                    "extra_days": 1,
                    "offset": 1,
                    "result": 1,
                    "temp2": 1,
                    "total_days": 2,
                    "total_days_offset": 1,
                    "total_offset": 1,
                    "weekday": 1,
                    "year_days": 1
                },
                "iVar6": {
                    "adjusted_year": 2,
                    "days_after2000": 1,
                    "days_difference": 1,
                    "days_of_year": 1,
                    "days_since1900": 1,
                    "days_since1901": 1,
                    "days_since_first_year": 1,
                    "days_since_jan1": 1,
                    "days_since_reference": 1,
                    "days_since_start_of_year": 1,
                    "extra_days": 1,
                    "temp3": 1,
                    "total_days": 11,
                    "total_months": 1,
                    "total_offset": 1,
                    "total_weeks": 1,
                    "total_years_offset": 1,
                    "var6": 1,
                    "years_since1990": 1
                },
                "iVar8": {
                    "i": 13,
                    "index": 2,
                    "iter": 1,
                    "leap_year_offset": 1,
                    "loop_index": 1,
                    "month": 2,
                    "month_counter": 1,
                    "month_index": 7,
                    "temp4": 1,
                    "var8": 1
                },
                "iVar9": {
                    "adjusted_days": 1,
                    "adjustment": 1,
                    "day": 1,
                    "day_index": 2,
                    "day_of_week": 1,
                    "day_of_week_offset": 3,
                    "day_offset": 2,
                    "days_difference": 1,
                    "days_from_start": 1,
                    "days_in_month": 2,
                    "days_of_week_offset": 1,
                    "days_offset": 1,
                    "days_since_previous_month": 1,
                    "days_to_add": 1,
                    "days_to_subtract": 1,
                    "first_day": 1,
                    "last_day_offset": 1,
                    "offset": 2,
                    "offset_weeks": 1,
                    "temp5": 1,
                    "temp_var": 1,
                    "valid_year_offset": 1,
                    "var9": 1,
                    "week_offset": 1
                },
                "param_1": {
                    "date": 1,
                    "year": 29
                },
                "puVar1": {
                    "date_time_info": 1,
                    "time_zone_info": 4,
                    "timezone_data": 1,
                    "timezone_info": 12,
                    "tz_info": 5,
                    "tzinfo": 7
                },
                "puVar5": {
                    "array_ptr": 1,
                    "calendar": 2,
                    "calendar_data": 1,
                    "current_month": 4,
                    "current_month_data": 1,
                    "current_month_info": 1,
                    "current_sub_function": 1,
                    "current_week": 1,
                    "current_year_data": 2,
                    "date_info": 2,
                    "date_time_info_ptr": 1,
                    "day_offsets": 1,
                    "leap_year_month_table": 1,
                    "month_data": 1,
                    "month_info": 3,
                    "ptr": 4,
                    "ptr_array": 2,
                    "temp_ptr1": 1
                },
                "uVar10": {
                    "is_between_epochs": 1,
                    "is_century": 1,
                    "is_divisible": 1,
                    "is_divisible_by400": 6,
                    "is_leap": 4,
                    "is_leap400": 1,
                    "is_leap_prev": 1,
                    "is_leap_year": 6,
                    "is_leap_year100": 1,
                    "is_leap_year400": 1,
                    "is_leap_year_400": 1,
                    "is_leap_year_int": 1,
                    "is_multiple_of400": 1,
                    "leap_year": 1,
                    "leap_year_divisor": 1,
                    "leap_year_offset": 2
                },
                "uVar11": {
                    "day_of_week": 1,
                    "day_of_year": 1,
                    "days_in_year": 1,
                    "days_of_month": 1,
                    "days_since1900": 1,
                    "is_day_before_sunday": 1,
                    "is_divisible_by100": 1,
                    "is_leap": 1,
                    "leap_year_remainder": 1,
                    "total_days": 1
                },
                "uVar12": {
                    "day_of_week_offset": 1,
                    "days_from1900": 1,
                    "days_in_month": 2,
                    "days_in_month_offset": 1,
                    "is_divisible_by4": 1,
                    "is_last_day_of_month": 1,
                    "num_of_days": 1
                },
                "uVar13": {
                    "day_of_week": 1,
                    "days_in_year": 1,
                    "days_since1900": 1,
                    "is_before_feb28": 1,
                    "is_leap_year_flag": 1,
                    "last_day_of_week": 1,
                    "start_day_of_week": 1
                },
                "uVar14": {
                    "is_before_march1": 1,
                    "is_day_after_sunday": 1,
                    "is_leap": 1,
                    "previous_leap_years": 1,
                    "previous_month_last_day": 1,
                    "temp1": 1
                },
                "uVar15": {
                    "accumulated_days": 1,
                    "days_offset": 1,
                    "first_day_offset": 1,
                    "is_leap": 1,
                    "is_leap_year_offset": 1,
                    "temp2": 1
                },
                "uVar16": {
                    "days_from_first_monday": 1,
                    "is_day_after_saturday": 1,
                    "previous_divisible_years": 1,
                    "temp3": 1
                },
                "uVar17": {
                    "day_of_month": 1,
                    "offset": 1,
                    "temp4": 1
                },
                "uVar18": {
                    "is_negative_offset": 1,
                    "previous_month_end": 1,
                    "temp5": 1
                },
                "uVar19": {
                    "previous_month_start": 1,
                    "temp6": 1
                },
                "uVar2": {
                    "is_leap": 1,
                    "is_leap_year": 17,
                    "is_valid": 1,
                    "result": 11
                },
                "uVar20": {
                    "day": 1,
                    "temp7": 1
                },
                "uVar21": {
                    "days_in_month": 1,
                    "temp8": 1
                },
                "uVar22": {
                    "previous_year_end": 1
                },
                "uVar23": {
                    "previous_year_start": 1
                },
                "uVar24": {
                    "previous_year_leap_offset": 1
                },
                "uVar25": {
                    "previous_year_end_offset": 1
                },
                "uVar26": {
                    "previous_year_start_offset": 1
                },
                "uVar3": {
                    "day": 3,
                    "day_of_week": 13,
                    "day_of_week_offset": 1,
                    "day_of_year": 2,
                    "days": 3,
                    "month_day": 1,
                    "month_index": 1,
                    "month_offset": 2,
                    "temp1": 1,
                    "total_leap_days": 1,
                    "week_number": 1,
                    "weekday": 1
                },
                "uVar7": {
                    "is_leap": 6,
                    "is_leap_temp": 1,
                    "is_leap_year": 12,
                    "is_leap_year400": 1,
                    "is_leap_year_check": 1,
                    "is_leap_year_temp": 1,
                    "is_leap_year_test": 1,
                    "is_leap_year_tmp": 1,
                    "leap_year": 5,
                    "leap_year_offset": 1
                }
            },
            "called": [
                "FUN_000056b0"
            ],
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "code": "\nundefined4 calculate_day_of_week_for_date_00004f98(uint year)\n\n{\n  uint *timezone_info;\n  undefined4 is_leap_year;\n  uint day_of_week;\n  int days_to_add;\n  uint *ptr;\n  int total_days;\n  uint is_leap_year;\n  int i;\n  int day_of_week_offset;\n  uint is_leap_year;\n  \n  timezone_info = (uint *)get_timezone_info();\n  if ((int)year < 0x7b2) {\n    is_leap_year = 0;\n  }\n  else {\n    total_days = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    timezone_info[1] = year;\n    is_leap_year = (uint)(year % 400 == 0);\n    ptr = timezone_info;\n    do {\n      day_of_week = ptr[5];\n      if (*(char *)(ptr + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)day_of_week < 0x3c) {\n            days_to_add = 0;\n          }\n          else {\n            days_to_add = 1;\n          }\n        }\n        else {\n          days_to_add = 0;\n        }\n        days_to_add = days_to_add + total_days + day_of_week + -1;\n      }\n      else if (*(char *)(ptr + 2) == 'D') {\n        days_to_add = total_days + day_of_week;\n      }\n      else {\n        is_leap_year = is_leap_year;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          is_leap_year = 1;\n        }\n        i = 0;\n        days_to_add = total_days;\n        while( true ) {\n          i = i + 1;\n          if ((int)ptr[3] <= i) break;\n          days_to_add = days_to_add + *(int *)(&month_lengths + i * 4 + is_leap_year * 0x30);\n        }\n        day_of_week_offset = day_of_week - (days_to_add + 4U) % 7;\n        if (day_of_week_offset < 0) {\n          day_of_week_offset = day_of_week_offset + 7;\n        }\n        for (day_of_week_offset = (ptr[4] - 1) * 7 + day_of_week_offset;\n            *(int *)(&month_lengths + i * 4 + is_leap_year * 0x30) <= day_of_week_offset; day_of_week_offset = day_of_week_offset + -7) {\n        }\n        days_to_add = days_to_add + day_of_week_offset;\n      }\n      day_of_week = ptr[10] + days_to_add * 0x15180 + ptr[6];\n      ptr[8] = day_of_week;\n      ptr[9] = (int)day_of_week >> 0x1f;\n      ptr = ptr + 10;\n    } while (timezone_info + 0x14 != ptr);\n    day_of_week = timezone_info[9];\n    is_leap_year = timezone_info[0x13];\n    *timezone_info = (uint)((int)((day_of_week - is_leap_year) - (uint)(timezone_info[8] < timezone_info[0x12])) < 0 !=\n                    (SBORROW4(day_of_week,is_leap_year) !=\n                    SBORROW4(day_of_week - is_leap_year,(uint)(timezone_info[8] < timezone_info[0x12]))));\n    is_leap_year = 1;\n  }\n  return is_leap_year;\n}\n\n",
            "current_name": "calculate_day_of_week_for_date_00004f98",
            "entrypoint": "0x00004f98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_for_date_00004f98",
                "UNK_00007b98": "month_lengths",
                "__gettzinfo": "get_timezone_info",
                "iVar4": "days_to_add",
                "iVar6": "total_days",
                "iVar8": "i",
                "iVar9": "day_of_week_offset",
                "param_1": "year",
                "puVar1": "timezone_info",
                "puVar5": "ptr",
                "uVar10": "is_leap_year",
                "uVar2": "is_leap_year",
                "uVar3": "day_of_week",
                "uVar7": "is_leap_year"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000050e8": {
            "additional_data": {
                "DAT_1fff0deb": {
                    "data_address": 1,
                    "data_memory_address": 1,
                    "memory_address": 12,
                    "memory_location": 1,
                    "start_address": 2
                },
                "FUN_000050e8": {
                    "get_data_address": 9,
                    "get_data_pointer": 1,
                    "get_data_ptr": 2,
                    "get_default_data_pointer": 1,
                    "get_memory_address": 15,
                    "get_memory_location": 1,
                    "get_start_address": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_000047e4"
            ],
            "code": "\nundefined * get_memory_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "current_name": "get_memory_address_000050e8",
            "entrypoint": "0x000050e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000050f4": {
            "additional_data": {
                "DAT_1fff0deb": {
                    "address": 1,
                    "data_pointer": 2,
                    "end_of_data": 1,
                    "memory_address": 10,
                    "memory_location": 1,
                    "starting_address": 2
                },
                "FUN_000050f4": {
                    "get_address": 1,
                    "get_data_address": 2,
                    "get_data_pointer": 8,
                    "get_data_ptr": 1,
                    "get_data_reference": 1,
                    "get_end_of_data": 1,
                    "get_memory_address": 13,
                    "get_memory_location": 1,
                    "get_starting_address": 3
                },
                "ptr_DAT_1fff0deb": {
                    "data_address": 1
                },
                "undefined": {
                    "pointer_to_starting_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000047e4"
            ],
            "code": "\npointer_to_starting_address * get_memory_address_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "current_name": "get_memory_address_000050f4",
            "entrypoint": "0x000050f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000050f4": "get_memory_address_000050f4",
                "undefined": "pointer_to_starting_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005100": {
            "additional_data": {
                "DAT_00007a5c": {
                    "default_string": 1,
                    "default_time_zone": 1,
                    "environment_string": 1
                },
                "DAT_00007a5f": {
                    "new_string": 1
                },
                "DAT_00007a85": {
                    "scan_pattern": 1
                },
                "DAT_1fff0dbc": {
                    "offset_str2": 1,
                    "parsed_value2": 1,
                    "placeholder5": 1
                },
                "DAT_1fff0dc7": {
                    "parsed_value": 1,
                    "placeholder4": 1,
                    "time_limit": 1
                },
                "DAT_1fff0dcc": {
                    "tzname": 1
                },
                "DAT_1fff0dd4": {
                    "env_str_ptr": 1,
                    "parsed_timezone": 1,
                    "stored_path": 1,
                    "temp_buffer": 1,
                    "temp_string2": 1,
                    "tz": 1
                },
                "DAT_1fff0dd8": {
                    "parsed_string1": 1,
                    "parsed_tz": 1,
                    "relative_path": 1,
                    "result": 1,
                    "time_zone": 1,
                    "tzdst": 1
                },
                "DAT_1fff0ddc": {
                    "offset_str": 1,
                    "parsed_string2": 1,
                    "parsed_time": 1,
                    "relative_path_end": 1,
                    "result2": 1,
                    "tzutc": 1
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "elf_relocations": 1,
                    "relocation_table": 1,
                    "relocations": 1,
                    "timezone_vars": 1
                },
                "FUNK_00005100": {
                    "initialize_timezone_info": 1
                },
                "FUN_00004bd0": {
                    "allocate_memory": 1,
                    "find_substring": 1,
                    "malloc_memory": 1,
                    "parse_unsigned_integer": 1,
                    "siscanf": 1
                },
                "FUN_00004e52": {
                    "compare_bytes": 3,
                    "compare_strings": 1,
                    "string_compare": 1
                },
                "FUN_00004f98": {
                    "convert_to_seconds": 1,
                    "convert_to_uint": 2,
                    "string_to_integer": 1,
                    "strtoul_wrapper": 1
                },
                "FUN_00005100": {
                    "initialize_time_zone": 3,
                    "initialize_timezone": 1,
                    "load_time_zone_info": 1,
                    "parse_date_time": 3,
                    "parse_date_time_input": 1,
                    "parse_date_time_string": 1,
                    "parse_time": 1,
                    "parse_time_info": 1,
                    "parse_time_zone": 4,
                    "parse_time_zone_info": 4,
                    "parse_time_zone_offset": 1,
                    "parse_timezone": 1,
                    "parse_timezone_info": 3,
                    "parse_timezone_offset": 1,
                    "parse_timezone_string": 2,
                    "process_time_zone": 1,
                    "process_time_zone_info": 1
                },
                "FUN_000056a0": {
                    "calculate_limits": 1,
                    "calculate_time_zone_limits": 1,
                    "initialize_timezone_limits": 1,
                    "set_limits": 1,
                    "tzcalc_limits": 1
                },
                "FUN_000056b0": {
                    "get_current_timezone_offset": 1,
                    "get_time_zone_info": 1,
                    "get_tzinfo": 3
                },
                "FUN_00005780": {
                    "calc_timezone_index": 1,
                    "calculate_timezone_limits": 1,
                    "free_memory": 3
                },
                "FUN_00005e68": {
                    "allocate_memory": 1,
                    "convert_string_to_int": 1,
                    "parse_input": 1,
                    "parse_time_format_specifier": 1,
                    "parse_time_zone_offset": 1
                },
                "FUN_00005ebc": {
                    "compare_strings": 3,
                    "copy_string": 1,
                    "parse_environment_variable": 1
                },
                "FUN_00005ecc": {
                    "get_environment_value": 1,
                    "get_environment_variable": 3,
                    "get_with_environment_variable": 1
                },
                "FUN_00005fd8": {
                    "extract_version_numbers": 1,
                    "parse_input_string": 1,
                    "parse_time": 2,
                    "parse_time_offset": 1
                },
                "__gettzinfo": {
                    "get_time_zone_info": 1,
                    "get_timezone_info": 1,
                    "get_tz_info": 1
                },
                "__tzcalc_limits": {
                    "calculate_limits": 2,
                    "calculate_time_zone_limits": 1,
                    "calculate_timezone_limits": 1
                },
                "_free_r": {
                    "free_memory": 1
                },
                "_getenv_r": {
                    "get_env": 1,
                    "get_environment_variable": 3
                },
                "_malloc_r": {
                    "allocate_memory": 4
                },
                "bVar8": {
                    "flag": 2,
                    "found_separator": 1,
                    "has_prefix": 1,
                    "has_separator": 1,
                    "has_slash": 1,
                    "is_first": 4,
                    "is_first_element": 1,
                    "is_first_iteration": 2,
                    "is_first_loop": 1,
                    "is_first_time": 1,
                    "is_m_flag": 1,
                    "is_mandatory": 1,
                    "is_month": 1,
                    "is_multiple_data": 1,
                    "is_second": 1,
                    "is_second_part": 1,
                    "is_set": 2,
                    "is_time_specified": 1
                },
                "dVar1": {
                    "offset": 12,
                    "offset_index": 1,
                    "offset_value": 1,
                    "r_offset": 2,
                    "rel_offset": 4,
                    "timezone_offset": 1
                },
                "free": {
                    "free_memory": 3
                },
                "iVar10": {
                    "scan_result1": 1
                },
                "iVar12": {
                    "scan_result2": 1
                },
                "iVar2": {
                    "time_zone_info": 1,
                    "timezone_info": 3,
                    "timezone_offset": 1,
                    "tz_info": 5,
                    "tzinfo": 14
                },
                "iVar4": {
                    "cmp_result": 1,
                    "comparison_result": 4,
                    "env_comparison_result": 1,
                    "result": 9,
                    "str_cmp_result": 2,
                    "strcmp_result": 8
                },
                "iVar5": {
                    "num_scanned": 1,
                    "result2": 4,
                    "scan_result": 14,
                    "scanf_result": 2,
                    "scanned_values": 1,
                    "siscanf_result": 1
                },
                "local_2c": {
                    "buffer": 3,
                    "char_array": 1,
                    "local_str": 1,
                    "local_temp": 1,
                    "parsed_buf": 1,
                    "ptr_array": 1,
                    "result_arr": 1,
                    "scan_buffer": 2,
                    "scan_input": 1,
                    "scan_result": 1,
                    "scan_result_ptr": 1,
                    "scan_result_str": 1,
                    "string_array": 1,
                    "substring": 1,
                    "temp": 1,
                    "temp_array": 1,
                    "temp_value": 1,
                    "timezone_str": 1,
                    "tmp_array": 1,
                    "tmp_buffer": 1
                },
                "local_30": {
                    "bytes_read": 1,
                    "char_index": 1,
                    "day": 1,
                    "index": 2,
                    "input_string_offset": 1,
                    "int_var3": 1,
                    "length": 1,
                    "offset": 2,
                    "offset_len": 1,
                    "scan_count": 2,
                    "scan_count3": 1,
                    "scan_counter": 1,
                    "scan_offset": 7,
                    "scan_pos": 1,
                    "scan_result": 1,
                    "temp": 1
                },
                "local_32": {
                    "atv_version": 1,
                    "day": 2,
                    "marker": 1,
                    "month": 1,
                    "nanosecond": 1,
                    "nanosecond_val": 1,
                    "param3": 1,
                    "placeholder3": 1,
                    "second": 2,
                    "second_2": 1,
                    "seconds_value2": 1,
                    "start3": 1,
                    "temp_value3": 1,
                    "timezone_second": 2,
                    "tmp": 1,
                    "type_seconds": 1,
                    "ushort_var8": 1,
                    "value6": 1,
                    "year": 4
                },
                "local_34": {
                    "analog_tv_mode": 1,
                    "day": 1,
                    "marker": 1,
                    "microsecond": 1,
                    "microsecond_val": 1,
                    "minute": 1,
                    "minute2": 1,
                    "minute_2": 1,
                    "minutes_value2": 1,
                    "month": 5,
                    "param2": 1,
                    "placeholder2": 1,
                    "start2": 1,
                    "temp_value2": 1,
                    "timezone_minute": 2,
                    "tmp": 1,
                    "type_minutes": 1,
                    "ushort_var7": 1,
                    "value5": 1,
                    "year": 1
                },
                "local_36": {
                    "day": 2,
                    "hour": 1,
                    "hour2": 1,
                    "hour_2": 1,
                    "hours_value2": 1,
                    "millisecond": 2,
                    "millisecond_val": 1,
                    "month": 1,
                    "ms": 1,
                    "param1": 1,
                    "placeholder1": 1,
                    "sign": 1,
                    "start1": 1,
                    "temp_value1": 1,
                    "timezone_hour": 2,
                    "timezone_offset": 1,
                    "tmp": 1,
                    "type_hours": 1,
                    "ushort_var6": 1,
                    "utc_offset": 1,
                    "value4": 1,
                    "year": 1
                },
                "local_38": {
                    "day": 2,
                    "sec": 2,
                    "second": 11,
                    "second_1": 1,
                    "second_input": 1,
                    "second_val": 1,
                    "seconds": 3,
                    "seconds_value1": 1,
                    "secs": 1,
                    "ushort_var5": 1,
                    "value3": 1
                },
                "local_3a": {
                    "min": 2,
                    "mins": 1,
                    "minute": 11,
                    "minute_1": 1,
                    "minute_input": 1,
                    "minute_val": 1,
                    "minutes": 3,
                    "minutes_value1": 1,
                    "month": 2,
                    "ushort_var4": 1,
                    "value2": 1
                },
                "local_3c": {
                    "hour": 13,
                    "hour_1": 1,
                    "hour_input": 1,
                    "hour_val": 1,
                    "hours": 4,
                    "hours_value1": 1,
                    "ushort_var3": 1,
                    "value1": 1,
                    "year": 2
                },
                "param_1": {
                    "param_1": 1,
                    "tzinfo": 1
                },
                "param_2": {
                    "env_var": 1,
                    "param_2": 1
                },
                "param_3": {
                    "param_3": 1
                },
                "param_4": {
                    "param_4": 1
                },
                "pcVar3": {
                    "date_time_string": 1,
                    "env": 2,
                    "env_string": 1,
                    "env_value": 3,
                    "env_var": 11,
                    "env_variable": 1,
                    "environment_var": 1,
                    "timezone_env": 2,
                    "timezone_string": 1,
                    "tz_env": 2
                },
                "pcVar7": {
                    "current_pointer": 1,
                    "date_time_str": 1,
                    "input_string": 1,
                    "pc_var": 1,
                    "ptr": 1,
                    "remaining_string": 2,
                    "scan_ptr": 4,
                    "scan_str": 1,
                    "scan_string": 2,
                    "scanf_ptr": 1,
                    "scanned_string": 1,
                    "scanner": 1,
                    "str_ptr": 2,
                    "temp_string": 2,
                    "temp_var": 1,
                    "time_str": 1
                },
                "piVar10": {
                    "char_index_ptr": 1,
                    "hour_scan_result": 1,
                    "input_string_offset": 1,
                    "int_var1": 1,
                    "minute_ptr": 1,
                    "offset_n": 1,
                    "offset_ptr": 3,
                    "part1_pointer": 1,
                    "pointer2": 1,
                    "ptr2": 3,
                    "scan_count": 1,
                    "scan_count_ptr": 1,
                    "scan_offset": 1,
                    "scan_offset_ptr": 1,
                    "scan_value": 1,
                    "str_len_ptr": 2,
                    "temp_index": 1,
                    "tmp_ptr1": 1,
                    "value_length": 1
                },
                "piVar12": {
                    "char_index_ptr2": 1,
                    "input_string_offset": 1,
                    "int_var2": 1,
                    "is_offset_ptr": 1,
                    "minute_scan_result": 1,
                    "ms_ptr": 1,
                    "offset_m": 1,
                    "offset_ptr2": 1,
                    "part2_pointer": 1,
                    "pointer4": 1,
                    "ptr4": 3,
                    "scan_count2": 1,
                    "scan_count_ptr2": 1,
                    "scan_offset": 1,
                    "scan_offset_ptr2": 1,
                    "scan_value2": 1,
                    "sec_ptr": 1,
                    "str_len_ptr2": 2,
                    "temp_index2": 1,
                    "tmp_ptr2": 1,
                    "value_length2": 1
                },
                "puVar11": {
                    "min_ptr": 1,
                    "mins": 1,
                    "minute": 5,
                    "minute_ptr": 6,
                    "minute_value": 1,
                    "minutes": 3,
                    "part2": 1,
                    "pointer3": 1,
                    "ptr3": 3,
                    "second_ptr": 1,
                    "ushort_var2": 1
                },
                "puVar9": {
                    "hour": 5,
                    "hour_ptr": 8,
                    "hour_value": 1,
                    "hours": 4,
                    "part1": 1,
                    "pointer1": 1,
                    "ptr1": 3,
                    "ushort_var1": 1
                },
                "siscanf": {
                    "safe_scanf": 1,
                    "scan_format": 2,
                    "scan_formatted": 1,
                    "scan_formatted_input": 1
                },
                "strcmp": {
                    "compare_strings": 3
                },
                "strcpy": {
                    "copy_string": 2,
                    "copy_strings": 1
                },
                "strlen": {
                    "get_string_length": 2,
                    "string_length": 1
                },
                "strtoul": {
                    "convert_string_to_unsigned_long": 1,
                    "parse_unsigned_long": 1,
                    "string_to_unsigned_long": 1
                },
                "uVar6": {
                    "char_value": 2,
                    "character": 2,
                    "data_type": 1,
                    "flag": 2,
                    "format_char": 1,
                    "format_flag": 1,
                    "format_type": 1,
                    "marker": 1,
                    "placeholder": 1,
                    "time_sign": 1,
                    "timezone_multiplier": 1,
                    "type": 2,
                    "type_char": 1,
                    "type_flag": 2,
                    "type_specifier": 1,
                    "unit_prefix": 1,
                    "variable_flag": 1
                }
            },
            "called": [
                "FUN_000056a0",
                "FUN_00005ecc",
                "FUN_00005ebc",
                "FUN_00005e68",
                "FUN_000056b0",
                "FUN_00005780",
                "FUN_00004bd0",
                "FUN_00005fd8",
                "FUN_00004e52",
                "FUN_00004f98"
            ],
            "calling": [
                "FUN_000047e4"
            ],
            "code": "\nvoid parse_time_zone_info_00005100(void)\n\n{\n  dword offset;\n  int tzinfo;\n  char *env_var;\n  int result;\n  int scan_result;\n  undefined type_flag;\n  char *scan_ptr;\n  bool is_first;\n  ushort *hour_ptr;\n  int *offset_ptr;\n  ushort *minute_ptr;\n  int *ptr4;\n  ushort hour;\n  ushort minute;\n  ushort second;\n  ushort timezone_hour;\n  ushort month;\n  ushort year;\n  int scan_offset;\n  char *buffer [2];\n  \n  offset = relocations[16].r_offset;\n  tzinfo = get_time_zone_info();\n  env_var = (char *)get_environment_variable(offset,&DAT_00007a5c);\n  if (env_var == (char *)0x0) {\n    relocations[28].r_info = (dword)&DAT_00007a5f;\n    relocations[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = env_var;\n    DAT_1fff0ddc = env_var;\n    free_memory(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (result = compare_strings(), result != 0)) {\n    free_memory(DAT_1fff0dd4);\n    result = get_string_length(env_var);\n    DAT_1fff0dd4 = allocate_memory(offset,result + 1);\n    if (DAT_1fff0dd4 != 0) {\n      copy_string(DAT_1fff0dd4,env_var);\n    }\n    if (*env_var == ':') {\n      env_var = env_var + 1;\n    }\n    result = scan_format(env_var,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&scan_offset);\n    if (0 < result) {\n      scan_ptr = env_var + scan_offset;\n      if (env_var[scan_offset] == '-') {\n        scan_ptr = scan_ptr + 1;\n        result = -1;\n      }\n      else {\n        if (env_var[scan_offset] == '+') {\n          scan_ptr = scan_ptr + 1;\n        }\n        result = 1;\n      }\n      minute = 0;\n      second = 0;\n      hour_ptr = &minute;\n      offset_ptr = &scan_offset;\n      minute_ptr = &second;\n      ptr4 = &scan_offset;\n      scan_result = scan_format(scan_ptr,\"%hu%n:%hu%n:%hu%n\",&hour,&scan_offset,&minute,&scan_offset,&second,\n                      &scan_offset);\n      if (0 < scan_result) {\n        *(uint *)(tzinfo + 0x28) =\n             ((uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second) * result;\n        relocations[28].r_info = (dword)&DAT_1fff0dc7;\n        scan_ptr = scan_ptr + scan_offset;\n        result = scan_format(scan_ptr,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&scan_offset,hour_ptr,offset_ptr,minute_ptr,\n                        ptr4);\n        if (result < 1) {\n          relocations[29].r_offset = relocations[28].r_info;\n          DAT_1fff0ddc = *(char **)(tzinfo + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          relocations[29].r_offset = (dword)&DAT_1fff0dbc;\n          env_var = scan_ptr + scan_offset;\n          if (scan_ptr[scan_offset] == '-') {\n            env_var = env_var + 1;\n            result = -1;\n          }\n          else {\n            if (scan_ptr[scan_offset] == '+') {\n              env_var = env_var + 1;\n            }\n            result = 1;\n          }\n          hour = 0;\n          minute = 0;\n          second = 0;\n          scan_offset = 0;\n          scan_result = scan_format(env_var,\"%hu%n:%hu%n:%hu%n\",&hour,&scan_offset,&minute,&scan_offset,\n                          &second,&scan_offset);\n          if (scan_result < 1) {\n            result = *(int *)(tzinfo + 0x28) + -0xe10;\n          }\n          else {\n            result = ((uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second) * result;\n          }\n          *(int *)(tzinfo + 0x50) = result;\n          env_var = env_var + scan_offset;\n          is_first = false;\n          result = tzinfo;\n          while( true ) {\n            if (*env_var == ',') {\n              env_var = env_var + 1;\n            }\n            if (*env_var == 'M') {\n              scan_result = scan_format(env_var,\"M%hu%n.%hu%n.%hu%n\",&timezone_hour,&scan_offset,&month,&scan_offset,\n                              &year,&scan_offset);\n              if (scan_result != 3) {\n                return;\n              }\n              if (0xb < timezone_hour - 1) {\n                return;\n              }\n              if (4 < month - 1) {\n                return;\n              }\n              if (6 < year) {\n                return;\n              }\n              *(uint *)(result + 0xc) = (uint)timezone_hour;\n              *(uint *)(result + 0x10) = (uint)month;\n              *(undefined *)(result + 8) = 0x4d;\n              *(uint *)(result + 0x14) = (uint)year;\n              scan_ptr = env_var + scan_offset;\n            }\n            else {\n              if (*env_var == 'J') {\n                env_var = env_var + 1;\n                type_flag = 0x4a;\n              }\n              else {\n                type_flag = 0x44;\n              }\n              year = convert_string_to_unsigned_long(env_var,buffer,10);\n              scan_ptr = buffer[0];\n              if (buffer[0] == env_var) {\n                if (is_first) {\n                  *(undefined *)(tzinfo + 0x30) = 0x4d;\n                  *(undefined4 *)(tzinfo + 0x34) = 0xb;\n                  *(undefined4 *)(tzinfo + 0x38) = 1;\n                  *(undefined4 *)(tzinfo + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(tzinfo + 8) = 0x4d;\n                  *(undefined4 *)(tzinfo + 0xc) = 3;\n                  *(undefined4 *)(tzinfo + 0x10) = 2;\n                  *(undefined4 *)(tzinfo + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(result + 8) = type_flag;\n                *(uint *)(result + 0x14) = (uint)year;\n              }\n            }\n            hour = 2;\n            minute = 0;\n            second = 0;\n            scan_offset = 0;\n            if (*scan_ptr == '/') {\n              scan_format(scan_ptr,&DAT_00007a85,&hour,&scan_offset,&minute,&scan_offset,&second,\n                      &scan_offset);\n            }\n            *(uint *)(result + 0x18) =\n                 (uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second;\n            result = result + 0x28;\n            env_var = scan_ptr + scan_offset;\n            if (is_first) break;\n            is_first = true;\n          }\n          calculate_limits(*(undefined4 *)(tzinfo + 4));\n          DAT_1fff0ddc = *(char **)(tzinfo + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(tzinfo + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "parse_time_zone_info_00005100",
            "entrypoint": "0x00005100",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "relocations",
                "FUN_00005100": "parse_time_zone_info_00005100",
                "__gettzinfo": "get_time_zone_info",
                "__tzcalc_limits": "calculate_limits",
                "_getenv_r": "get_environment_variable",
                "_malloc_r": "allocate_memory",
                "bVar8": "is_first",
                "dVar1": "offset",
                "free": "free_memory",
                "iVar10": "scan_result1",
                "iVar12": "scan_result2",
                "iVar2": "tzinfo",
                "iVar4": "result",
                "iVar5": "scan_result",
                "local_2c": "buffer",
                "local_30": "scan_offset",
                "local_32": "year",
                "local_34": "month",
                "local_36": "timezone_hour",
                "local_38": "second",
                "local_3a": "minute",
                "local_3c": "hour",
                "pcVar3": "env_var",
                "pcVar7": "scan_ptr",
                "piVar10": "offset_ptr",
                "piVar12": "ptr4",
                "puVar11": "minute_ptr",
                "puVar9": "hour_ptr",
                "siscanf": "scan_format",
                "strcmp": "compare_strings",
                "strcpy": "copy_string",
                "strlen": "get_string_length",
                "strtoul": "convert_string_to_unsigned_long",
                "uVar6": "type_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005404": {
            "additional_data": {
                "FUN_00004158": {
                    "function_a": 1
                },
                "FUN_000042a4": {
                    "function_c": 1
                },
                "FUN_00005404": {
                    "decode_and_write": 1,
                    "decode_and_write_data": 1,
                    "improved_write_character_to_file": 1,
                    "parse_input": 1,
                    "perform_write": 1,
                    "process_data": 2,
                    "read_and_write": 1,
                    "read_write_data": 1,
                    "text_write": 1,
                    "write_byte_to_stream": 1,
                    "write_char_to_buffer": 1,
                    "write_char_to_stream": 1,
                    "write_character": 1,
                    "write_character_to_file": 2,
                    "write_data": 1,
                    "write_to_buffer": 2,
                    "write_to_file": 8,
                    "write_to_stream": 4
                },
                "FUN_000054a8": {
                    "function_b": 1
                },
                "__sinit": {
                    "initialize_something": 1
                },
                "__swsetup_r": {
                    "check_something": 1
                },
                "_fflush_r": {
                    "flush_data": 1
                },
                "iVar1": {
                    "bytes_written": 1,
                    "difference": 15,
                    "length": 1,
                    "offset": 4,
                    "remainder": 1,
                    "result": 5,
                    "status": 2,
                    "temp_var1": 2
                },
                "param_1": {
                    "buffer": 1,
                    "buffer_address": 2,
                    "data_offset": 1,
                    "data_ptr": 1,
                    "file": 1,
                    "file_descriptor": 2,
                    "file_handle": 4,
                    "file_handler": 1,
                    "file_pointer": 1,
                    "file_ptr": 4,
                    "input_data": 3,
                    "input_ptr": 2,
                    "object": 1,
                    "ptr": 1,
                    "stream": 4,
                    "stream_handle": 1,
                    "stream_ptr": 1
                },
                "param_2": {
                    "byte": 2,
                    "character": 16,
                    "data": 6,
                    "data_value": 1,
                    "length": 1,
                    "output_data": 1,
                    "output_value": 1,
                    "value": 3
                },
                "param_3": {
                    "buffer": 15,
                    "buffer_ptr": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "file_buf": 1,
                    "file_buffer": 3,
                    "file_stream": 1,
                    "info_array": 1,
                    "input_data": 1,
                    "stream": 3,
                    "stream_buffer": 2,
                    "stream_state": 1
                },
                "param_4": {
                    "additional_param": 1,
                    "buffer_size": 11,
                    "config": 1,
                    "file_mode": 1,
                    "length": 2,
                    "mode": 1,
                    "param": 7,
                    "param4": 2,
                    "param_4": 1,
                    "size": 1,
                    "some_parameter": 1,
                    "stream_context": 1,
                    "stream_lock": 1
                },
                "puVar3": {
                    "buffer_end": 1,
                    "buffer_pointer": 2,
                    "buffer_ptr": 2,
                    "byte_ptr": 5,
                    "char_pointer": 1,
                    "char_ptr": 4,
                    "character_ptr": 1,
                    "current_byte": 2,
                    "current_position": 1,
                    "current_position_in_buffer": 1,
                    "data_ptr_2": 1,
                    "element_ptr": 1,
                    "next_char": 2,
                    "pointer": 3,
                    "temp_ptr": 2,
                    "temp_var3": 1,
                    "write_ptr": 1
                },
                "uVar2": {
                    "buffer_length": 4,
                    "byte_count": 2,
                    "char_count": 1,
                    "data_size": 1,
                    "data_value": 1,
                    "length": 2,
                    "shifted_value": 3,
                    "short_val": 1,
                    "short_value": 3,
                    "temp_var2": 2,
                    "us_data": 1,
                    "ushort_data": 2,
                    "ushort_value": 6,
                    "value": 2
                }
            },
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000057a8"
            ],
            "code": "\nuint improved_write_character_to_file_00005404(int file_handle,uint character,int *buffer,undefined4 buffer_size)\n\n{\n  int difference;\n  uint ushort_value;\n  undefined *byte_ptr;\n  \n  if ((file_handle != 0) && (*(int *)(file_handle + 0x18) == 0)) {\n    initialize_something();\n  }\n  if (buffer == &DAT_000079b8) {\n    buffer = *(int **)(file_handle + 4);\n  }\n  else if (buffer == (int *)&DAT_000079d8) {\n    buffer = *(int **)(file_handle + 8);\n  }\n  else if (buffer == (int *)&DAT_00007998) {\n    buffer = *(int **)(file_handle + 0xc);\n  }\n  buffer[2] = buffer[6];\n  ushort_value = (uint)*(ushort *)(buffer + 3);\n  difference = ushort_value << 0x1c;\n  if (((difference < 0) && (ushort_value = buffer[4], ushort_value != 0)) ||\n     (difference = check_something(file_handle,buffer,difference,ushort_value,buffer_size), difference == 0)) {\n    difference = *buffer - buffer[4];\n    character = character & 0xff;\n    if ((difference < buffer[5]) || (difference = flush_data(file_handle,buffer), difference == 0)) {\n      buffer[2] = buffer[2] + -1;\n      byte_ptr = (undefined *)*buffer;\n      *buffer = (int)(byte_ptr + 1);\n      *byte_ptr = (char)character;\n      if (buffer[5] != difference + 1) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return character;\n        }\n        if (character != 10) {\n          return character;\n        }\n      }\n      difference = flush_data(file_handle,buffer);\n      if (difference == 0) {\n        return character;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "improved_write_character_to_file_00005404",
            "entrypoint": "0x00005404",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005404": "improved_write_character_to_file_00005404",
                "__sinit": "initialize_something",
                "__swsetup_r": "check_something",
                "_fflush_r": "flush_data",
                "iVar1": "difference",
                "param_1": "file_handle",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "buffer_size",
                "puVar3": "byte_ptr",
                "uVar2": "ushort_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000054a8": {
            "additional_data": {
                "FUN_000042a4": {
                    "sub_function3": 1
                },
                "FUN_00004b34": {
                    "sub_function2": 1
                },
                "FUN_000054a8": {
                    "decode_and_check_data": 1,
                    "decode_and_update_flags": 1,
                    "parse_data": 3,
                    "process_binary_function": 1,
                    "process_data": 19,
                    "process_function": 1,
                    "process_relocations": 1
                },
                "FUN_00005700": {
                    "sub_function1": 1
                },
                "__sinit": {
                    "initialize": 1,
                    "initialize_data": 3,
                    "perform_initialization": 1
                },
                "__smakebuf_r": {
                    "allocate_buffer": 1,
                    "create_buffer": 1,
                    "make_buffer": 2,
                    "setup_buffer": 1
                },
                "_free_r": {
                    "free_memory": 4,
                    "free_resources": 1
                },
                "dVar2": {
                    "data_offset": 1,
                    "dword_var2": 1,
                    "offset": 21,
                    "rel_offset": 1,
                    "temp2": 4,
                    "temp_dword1": 1,
                    "temp_var2": 1,
                    "var2": 1
                },
                "param_1": {
                    "flags": 1,
                    "out_data_length": 1,
                    "output": 6,
                    "output1": 1,
                    "output_1": 1,
                    "output_buffer": 5,
                    "output_data": 4,
                    "output_param": 8,
                    "output_ptr": 1,
                    "output_value": 1,
                    "result": 2
                },
                "param_2": {
                    "data": 3,
                    "input": 7,
                    "input1": 1,
                    "input_1": 1,
                    "input_buffer": 5,
                    "input_data": 4,
                    "input_param": 8,
                    "input_ptr": 1,
                    "input_value": 1
                },
                "uVar1": {
                    "first_half": 1,
                    "flag": 8,
                    "flags": 2,
                    "original_value": 1,
                    "temp1": 7,
                    "temp_short1": 1,
                    "temp_var1": 2,
                    "u_value1": 1,
                    "upper_var": 1,
                    "ushort_var1": 1,
                    "value": 1,
                    "value1": 3,
                    "value_1": 1,
                    "var1": 1
                },
                "uVar3": {
                    "flags_copy": 1,
                    "lower_var": 1,
                    "original_flag": 1,
                    "second_half": 1,
                    "temp": 4,
                    "temp2": 3,
                    "temp3": 4,
                    "temp_flag": 1,
                    "temp_short2": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "u_value2": 1,
                    "updated_value": 1,
                    "ushort_var3": 1,
                    "value": 1,
                    "value2": 3,
                    "value_2": 1,
                    "var3": 1
                },
                "uVar4": {
                    "flags_value": 1,
                    "new_value": 1,
                    "param3": 1,
                    "shifted_flag": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp3": 3,
                    "temp4": 4,
                    "temp_uint1": 1,
                    "temp_value": 2,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "u_value3": 1,
                    "uint_var4": 1,
                    "value": 3,
                    "value3": 3,
                    "value_3": 1,
                    "var1": 2,
                    "var4": 1
                },
                "uVar5": {
                    "param4": 1,
                    "result": 1,
                    "temp": 4,
                    "temp2": 2,
                    "temp4": 3,
                    "temp5": 4,
                    "temp_uint2": 1,
                    "temp_value": 1,
                    "temp_value2": 2,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temporary_var": 1,
                    "u_value4": 1,
                    "uint_var5": 1,
                    "value4": 3,
                    "value_4": 1,
                    "var2": 2,
                    "var5": 1
                }
            },
            "called": [
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_00005404",
                "FUN_000057f8",
                "FUN_00004db8"
            ],
            "code": "\nuint process_data_000054a8(undefined4 *output_param,undefined4 *input_param)\n\n{\n  ushort flag;\n  dword offset;\n  ushort temp3;\n  uint temp4;\n  uint temp5;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_data(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (input_param == &DAT_000079b8) {\n    input_param = *(undefined4 **)(offset + 4);\n  }\n  else if (input_param == (undefined4 *)&DAT_000079d8) {\n    input_param = *(undefined4 **)(offset + 8);\n  }\n  else if (input_param == (undefined4 *)&DAT_00007998) {\n    input_param = *(undefined4 **)(offset + 0xc);\n  }\n  temp4 = (uint)*(ushort *)(input_param + 3);\n  temp3 = *(ushort *)(input_param + 3);\n  if (-1 < (int)(temp4 << 0x1c)) {\n    if (-1 < (int)(temp4 << 0x1b)) {\n      *output_param = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp4 << 0x1d) < 0) {\n      if ((undefined4 *)input_param[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_param[0xd] != input_param + 0x11) {\n          free_memory(output_param);\n        }\n        input_param[0xd] = 0;\n      }\n      *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) & 0xffdb;\n      input_param[1] = 0;\n      *input_param = input_param[4];\n    }\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 8;\n  }\n  if ((input_param[4] == 0) && ((*(ushort *)(input_param + 3) & 0x280) != 0x200)) {\n    make_buffer(output_param,input_param);\n  }\n  flag = *(ushort *)(input_param + 3);\n  temp4 = (uint)flag;\n  temp3 = *(ushort *)(input_param + 3);\n  temp5 = temp4 & 1;\n  if ((flag & 1) == 0) {\n    if (-1 < (int)(temp4 << 0x1e)) {\n      temp5 = input_param[5];\n    }\n    input_param[2] = temp5;\n  }\n  else {\n    input_param[2] = 0;\n    input_param[6] = -input_param[5];\n  }\n  if (input_param[4] != 0) {\n    return 0;\n  }\n  if ((flag & 0x80) == 0) {\n    return temp4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input_param + 3) = temp3 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_data_000054a8",
            "entrypoint": "0x000054a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000054a8": "process_data_000054a8",
                "__sinit": "initialize_data",
                "__smakebuf_r": "make_buffer",
                "_free_r": "free_memory",
                "dVar2": "offset",
                "param_1": "output_param",
                "param_2": "input_param",
                "uVar1": "flag",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005584": {
            "additional_data": {
                "FUN_00005584": {
                    "calculate_quotient_and_remainder": 2,
                    "calculate_quotient_remainder": 1,
                    "divide_and_remainder": 20,
                    "divide_and_store_remainder": 2,
                    "divide_and_update_remainder": 1,
                    "divmod": 2,
                    "integer_division_and_modulus": 1,
                    "perform_division": 2
                },
                "param_1": {
                    "dividend_and_remainder": 2,
                    "quotient": 2,
                    "quotient_and_remainder": 16,
                    "quotient_remainder": 6,
                    "result": 3,
                    "result_array": 2
                },
                "param_2": {
                    "dividend": 31
                },
                "param_3": {
                    "divisor": 31
                },
                "uVar1": {
                    "quotient": 2,
                    "remainder": 28
                },
                "uVar2": {
                    "quotient": 26,
                    "quotient_without_remainder": 1,
                    "remainder": 2,
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00004634"
            ],
            "code": "\nvoid divide_and_store_remainder_00005584(uint *quotient_and_remainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotient_and_remainder = quotient;\n  quotient_and_remainder[1] = remainder;\n  return;\n}\n\n",
            "current_name": "divide_and_store_remainder_00005584",
            "entrypoint": "0x00005584",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005584": "divide_and_store_remainder_00005584",
                "param_1": "quotient_and_remainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000562c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "array_of_values": 1,
                    "array_of_variables": 1,
                    "environment_variable_array": 1,
                    "environment_variables_array": 1,
                    "parameters_array": 1,
                    "rel_array": 2,
                    "relocation_array": 1
                },
                "FUN_0000562c": {
                    "find_and_return_offset": 1,
                    "find_config_value": 1,
                    "find_env_variable": 2,
                    "find_environment_variable": 3,
                    "find_equal_assignment": 1,
                    "find_key_in_array": 1,
                    "find_key_value_pair": 2,
                    "find_offset": 1,
                    "find_offset_and_return_data": 1,
                    "find_offset_and_value": 1,
                    "find_param_offset": 1,
                    "find_parameter_index": 1,
                    "find_parameter_offset": 6,
                    "find_parameter_value": 2,
                    "find_string_after_equal": 1,
                    "find_value_in_string": 1,
                    "find_variable_offset": 2,
                    "find_variable_value": 2,
                    "get_env_var_index": 1
                },
                "__env_lock": {
                    "__env_lock": 1,
                    "acquire_env_lock": 1,
                    "acquire_environment_lock": 1,
                    "acquire_lock": 1,
                    "lock_environment": 5
                },
                "__env_unlock": {
                    "__env_unlock": 1,
                    "release_env_lock": 1,
                    "release_environment_lock": 1,
                    "release_lock": 1,
                    "unlock_environment": 4
                },
                "cVar1": {
                    "character": 1,
                    "current_char": 29
                },
                "iVar3": {
                    "comparison_result": 21,
                    "strcmp_result": 2,
                    "string_comparison_result": 2,
                    "strncmp_result": 5
                },
                "iVar6": {
                    "current_data_index": 1,
                    "difference": 1,
                    "input_offset": 1,
                    "input_string_length": 2,
                    "input_string_offset": 1,
                    "offset": 2,
                    "param_offset": 1,
                    "pointer_difference": 1,
                    "position_difference": 1,
                    "ptr_offset": 1,
                    "search_string_length": 1,
                    "str_length": 2,
                    "str_offset": 1,
                    "string_index": 1,
                    "string_length": 5,
                    "string_offset": 6,
                    "string_size": 1,
                    "var_offset": 1
                },
                "param_1": {
                    "env_lock": 7,
                    "env_lock_flag": 1,
                    "env_lock_parameter": 1,
                    "lock": 11,
                    "lock_flag": 3,
                    "lock_state": 1,
                    "lock_status": 3,
                    "lock_value": 1,
                    "param_1": 2
                },
                "param_2": {
                    "config_string": 1,
                    "data": 1,
                    "env_str": 1,
                    "env_string": 1,
                    "input_string": 8,
                    "param": 1,
                    "parameter_string": 2,
                    "search_string": 1,
                    "string": 10,
                    "string_to_find": 1,
                    "string_to_search": 1,
                    "var_string": 1,
                    "variable_name": 1
                },
                "param_3": {
                    "found_index": 1,
                    "index": 5,
                    "key_indices": 1,
                    "offset": 3,
                    "offset_reference": 1,
                    "offset_value": 1,
                    "output_index": 1,
                    "output_value": 1,
                    "parameter_index": 1,
                    "result": 6,
                    "result_index": 5,
                    "result_key_index": 1,
                    "result_offset": 3
                },
                "pcVar4": {
                    "char_ptr": 1,
                    "current_char_pointer": 1,
                    "current_char_ptr": 9,
                    "current_data": 1,
                    "current_pos": 1,
                    "current_position": 5,
                    "current_ptr": 4,
                    "current_string": 1,
                    "current_string_char": 2,
                    "current_string_ptr": 1,
                    "pointer_to_current_char": 1,
                    "ptr": 1,
                    "str_ptr": 1,
                    "string_ptr": 1
                },
                "piVar2": {
                    "array_ptr": 1,
                    "current_entry": 1,
                    "current_key": 2,
                    "current_key_index": 1,
                    "current_offset": 1,
                    "current_param": 1,
                    "current_pointer": 2,
                    "current_ptr": 2,
                    "current_value": 2,
                    "env_var_array": 1,
                    "offset_array": 1,
                    "offset_pointer": 2,
                    "pointer_to_parameters": 1,
                    "ptr_rel_array": 1,
                    "rel_array": 2,
                    "rel_array_offset": 1,
                    "rel_array_pointer": 1,
                    "rel_array_ptr": 4,
                    "rel_offset": 1,
                    "rel_offset_array": 1,
                    "rel_offset_array_ptr": 1
                },
                "piVar5": {
                    "current_array_ptr": 1,
                    "current_element": 1,
                    "current_entry_ptr": 1,
                    "current_offset": 4,
                    "current_offset_pointer": 1,
                    "current_offset_ptr": 2,
                    "current_parameter": 1,
                    "current_rel_entry": 1,
                    "current_rel_offset_ptr": 1,
                    "current_rel_ptr": 2,
                    "current_value_ptr": 1,
                    "current_var_ptr": 1,
                    "iter_pointer": 1,
                    "iter_ptr": 1,
                    "next_key": 2,
                    "next_key_index": 1,
                    "next_param": 1,
                    "next_pointer": 1,
                    "next_ptr": 1,
                    "next_value": 1,
                    "offset_ptr": 1,
                    "ptr_array_ptr": 1,
                    "str_array_ptr": 1,
                    "var_pointer": 1
                },
                "strncmp": {
                    "compare_strings": 2
                }
            },
            "called": [
                "FUN_00005ff8",
                "FUN_00005fec",
                "FUN_00004e66"
            ],
            "calling": [
                "FUN_000056a0"
            ],
            "code": "\nint find_parameter_offset_0000562c(undefined4 lock,char *string,int *result)\n\n{\n  char current_char;\n  int *rel_array_ptr;\n  int comparison_result;\n  char *current_char_ptr;\n  int *current_offset;\n  int string_offset;\n  \n  lock_environment();\n  current_char_ptr = string;\n  if (rel_array[41].r_offset != 0) {\n    do {\n      current_char = *current_char_ptr;\n      if (current_char == '\\0') {\n        string_offset = (int)current_char_ptr - (int)string;\n        rel_array_ptr = (int *)rel_array[41].r_offset;\n        while( true ) {\n          current_offset = rel_array_ptr;\n          if (*current_offset == 0) break;\n          comparison_result = compare_strings(*current_offset,string,string_offset);\n          rel_array_ptr = current_offset + 1;\n          if ((comparison_result == 0) && (comparison_result = *current_offset, *(char *)(comparison_result + string_offset) == '=')) {\n            *result = (int)((int)current_offset - rel_array[41].r_offset) >> 2;\n            unlock_environment(lock);\n            return comparison_result + string_offset + 1;\n          }\n        }\n        break;\n      }\n      current_char_ptr = current_char_ptr + 1;\n    } while (current_char != '=');\n  }\n  unlock_environment(lock);\n  return 0;\n}\n\n",
            "current_name": "find_parameter_offset_0000562c",
            "entrypoint": "0x0000562c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_0000562c": "find_parameter_offset_0000562c",
                "__env_lock": "lock_environment",
                "__env_unlock": "unlock_environment",
                "cVar1": "current_char",
                "iVar3": "comparison_result",
                "iVar6": "string_offset",
                "param_1": "lock",
                "param_2": "string",
                "param_3": "result",
                "pcVar4": "current_char_ptr",
                "piVar2": "rel_array_ptr",
                "piVar5": "current_offset",
                "strncmp": "compare_strings"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000056a0": {
            "additional_data": {
                "FUN_0000562c": {
                    "search_environment": 1
                },
                "FUN_000056a0": {
                    "find_and_initialize_environment": 1,
                    "find_and_locate_environment": 1,
                    "find_and_return_environment_variable": 2,
                    "find_and_set_environment": 1,
                    "find_and_update_environment": 1,
                    "find_environment": 7,
                    "find_environment_variable": 4,
                    "find_environment_variables": 11,
                    "reverse_and_find_environment": 1,
                    "reverse_environment_detection": 1,
                    "reverse_find_environment": 1
                },
                "_findenv_r": {
                    "find_env_r": 1,
                    "find_environment_r": 1,
                    "search_environment": 1
                },
                "param_1": {
                    "arg1": 15,
                    "arg_1": 3,
                    "env_buffer_1": 1,
                    "env_name": 2,
                    "env_param": 1,
                    "env_param1": 1,
                    "env_parameter1": 1,
                    "env_ptr": 1,
                    "environment_variable": 1,
                    "input_param1": 2,
                    "param_a": 1,
                    "unk_param_1": 1,
                    "var1": 1
                },
                "param_2": {
                    "arg2": 11,
                    "arg_2": 3,
                    "buf": 1,
                    "env": 1,
                    "env_buffer_2": 1,
                    "env_param2": 1,
                    "env_parameter2": 1,
                    "env_query": 1,
                    "env_tmp": 1,
                    "env_var1": 1,
                    "envp": 2,
                    "input_param2": 2,
                    "param2": 1,
                    "param_b": 1,
                    "search_key": 1,
                    "start_envp": 1,
                    "unk_param_2": 1
                },
                "param_3": {
                    "arg3": 11,
                    "arg_3": 3,
                    "buf_size": 1,
                    "env_buffer_3": 1,
                    "env_new": 1,
                    "env_param3": 1,
                    "env_parameter3": 1,
                    "env_result": 1,
                    "env_var2": 1,
                    "envidx": 1,
                    "envp_count": 1,
                    "input_param3": 2,
                    "p1": 1,
                    "param3": 1,
                    "param_c": 1,
                    "result_index": 1,
                    "search_value": 1,
                    "unk_param_3": 1
                },
                "param_4": {
                    "arg4": 15,
                    "arg_4": 3,
                    "end_envp": 1,
                    "env_buffer_4": 1,
                    "env_len": 1,
                    "env_param4": 1,
                    "env_parameter4": 1,
                    "env_search": 1,
                    "env_value": 1,
                    "input_param4": 2,
                    "param4": 1,
                    "param_d": 1,
                    "unk_param_4": 1,
                    "var2": 1
                },
                "uStack_8": {
                    "buffer_ptr": 1,
                    "env_query_copy": 1,
                    "env_var2_copy": 1,
                    "envidx_cpy": 1,
                    "length": 1,
                    "new_param_b": 1,
                    "p1_ptr": 1,
                    "param3_copy": 2,
                    "stack_8": 1,
                    "stack_arg2": 1,
                    "stack_arg3": 1,
                    "stack_arg_2": 2,
                    "stack_param3": 1,
                    "stack_value_2": 1,
                    "stack_var2": 2,
                    "stack_var_8": 1,
                    "temp2": 3,
                    "temp_buf_size": 1,
                    "temp_var2": 3,
                    "temp_var_2": 1,
                    "unk_var_8": 1,
                    "updated_arg3": 1,
                    "updated_envp_count": 1,
                    "updated_search_value": 1
                },
                "uStack_c": {
                    "env_param_copy": 1,
                    "env_ptr": 1,
                    "env_ptr_copy": 1,
                    "env_var1_copy": 1,
                    "environment_variable_ptr": 1,
                    "envp_cpy": 1,
                    "found_index": 1,
                    "new_param_a": 1,
                    "param2_copy": 1,
                    "stack_arg1": 1,
                    "stack_arg2": 1,
                    "stack_arg_1": 2,
                    "stack_c": 1,
                    "stack_param2": 1,
                    "stack_value_1": 1,
                    "stack_var1": 2,
                    "stack_var_c": 1,
                    "temp": 1,
                    "temp1": 2,
                    "temp_buf": 1,
                    "temp_var1": 3,
                    "temp_var_1": 1,
                    "unk_var_c": 1,
                    "updated_arg2": 1,
                    "updated_envp": 1,
                    "updated_start_envp": 1
                }
            },
            "called": [
                "FUN_0000562c"
            ],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid find_environment_variables_000056a0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  \n  temp_var1 = arg2;\n  temp_var2 = arg3;\n  find_env_r(arg1,arg2,&temp_var1,arg4,arg1);\n  return;\n}\n\n",
            "current_name": "find_environment_variables_000056a0",
            "entrypoint": "0x000056a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000056a0": "find_environment_variables_000056a0",
                "_findenv_r": "find_env_r",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uStack_8": "temp_var2",
                "uStack_c": "temp_var1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000056b0": {
            "additional_data": {
                "0x1fff02f0": {
                    "base_address": 1,
                    "memory_address": 1
                },
                "DAT_cf000600": {
                    "constant_value1": 1
                },
                "DAT_cf00063c": {
                    "constant_value2": 1
                },
                "FUN_000056b0": {
                    "get_base_address": 1,
                    "get_constant_value": 1,
                    "get_default_value": 4,
                    "get_initial_value": 1,
                    "get_magic_number": 2,
                    "get_magic_value": 1,
                    "get_memory_address": 20,
                    "get_special_value": 1
                },
                "PTR_00001234": {
                    "unused_pointer": 1
                },
                "PTR_FUN_000056b0": {
                    "new_memory_address": 1
                },
                "PTR_fun_00005b88": {
                    "constant_value": 1
                },
                "undefined4": {
                    "uint32_t": 18,
                    "unsigned_int": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00005100",
                "FUN_000047e4",
                "FUN_00004f98"
            ],
            "code": "\nuint32_t get_memory_address_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "current_name": "get_memory_address_000056b0",
            "entrypoint": "0x000056b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000056b8": {
            "additional_data": {
                "FUN_000056b8": {
                    "check_file_access": 1,
                    "check_file_attributes": 2,
                    "check_file_permission": 1,
                    "check_file_permissions": 17,
                    "check_file_status": 1,
                    "check_file_type": 2,
                    "file_status_check": 1,
                    "get_file_permissions": 5,
                    "get_file_type": 1
                },
                "auStack_68": {
                    "buffer": 4,
                    "file_buffer": 1,
                    "file_stat": 1,
                    "file_stat_buffer": 4,
                    "file_status": 1,
                    "fstat_buffer": 1,
                    "stat": 1,
                    "stat_buf": 1,
                    "stat_buffer": 15,
                    "stat_info": 1,
                    "temp_buffer": 1
                },
                "iVar1": {
                    "file_stat_result": 3,
                    "file_status": 2,
                    "fstat_result": 3,
                    "result": 11,
                    "result_code": 1,
                    "stat_result": 2,
                    "status": 9
                },
                "local_64": {
                    "file_attributes": 2,
                    "file_mode": 19,
                    "file_permission_flags": 1,
                    "file_permissions": 2,
                    "file_protection": 1,
                    "file_stat_mode": 1,
                    "file_type": 2,
                    "mode": 1,
                    "permission_mask": 1,
                    "stat_result": 1
                },
                "param_1": {
                    "fd": 2,
                    "file_descriptor": 28,
                    "stream": 1
                },
                "param_2": {
                    "buf": 1,
                    "buffer": 3,
                    "file_header": 1,
                    "file_info": 15,
                    "file_info_pointer": 1,
                    "file_information": 1,
                    "file_metadata": 4,
                    "file_stat": 3,
                    "file_stat_address": 1,
                    "header": 1
                },
                "param_3": {
                    "access_permission": 1,
                    "file_flag": 1,
                    "file_type": 3,
                    "output": 2,
                    "output_flag": 1,
                    "output_status": 2,
                    "permission": 4,
                    "permission_code": 1,
                    "permission_flag": 4,
                    "permission_flags": 2,
                    "permission_pointer": 1,
                    "permissions": 3,
                    "permissions_result": 1,
                    "result": 4,
                    "status": 1
                },
                "param_4": {
                    "file_flags": 2,
                    "file_permission": 1,
                    "file_type": 4,
                    "is_executable": 16,
                    "is_executable_pointer": 1,
                    "output_permission": 1,
                    "output_result": 1,
                    "permission_flag": 1,
                    "permissions": 1,
                    "result": 2,
                    "status": 1
                },
                "uVar2": {
                    "access_mode": 1,
                    "access_type": 1,
                    "default_permission": 1,
                    "file_permissions": 1,
                    "file_status": 1,
                    "file_type": 1,
                    "flag": 1,
                    "flags": 1,
                    "permission": 2,
                    "permission_flag": 4,
                    "permission_result": 1,
                    "permission_type": 1,
                    "permission_value": 6,
                    "permissions": 1,
                    "permissions_flag": 1,
                    "permissions_value": 1,
                    "result": 5,
                    "status_flag": 1
                }
            },
            "called": [
                "FUN_00000514"
            ],
            "calling": [
                "FUN_00005700"
            ],
            "code": "\nundefined4 check_file_permissions_000056b8(undefined4 file_descriptor,int file_info,undefined4 *permission,uint *is_executable)\n\n{\n  int result;\n  undefined4 permission_value;\n  undefined stat_buffer [4];\n  uint file_mode;\n  \n  if ((*(short *)(file_info + 0xe) < 0) ||\n     (result = _fstat_r(file_descriptor,(int)*(short *)(file_info + 0xe),stat_buffer), result < 0)) {\n    *is_executable = 0;\n    if ((int)((uint)*(ushort *)(file_info + 0xc) << 0x18) < 0) {\n      permission_value = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *is_executable = (uint)((file_mode & 0xf000) == 0x2000);\n  }\n  permission_value = 0x400;\nLAB_000056f8:\n  *permission = permission_value;\n  return 0;\n}\n\n",
            "current_name": "check_file_permissions_000056b8",
            "entrypoint": "0x000056b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000056b8": "check_file_permissions_000056b8",
                "auStack_68": "stat_buffer",
                "iVar1": "result",
                "local_64": "file_mode",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "param_3": "permission",
                "param_4": "is_executable",
                "uVar2": "permission_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005700": {
            "additional_data": {
                "FUN_00000534": {
                    "get_terminal_status": 1
                },
                "FUN_00004bd0": {
                    "reverse_bits": 1
                },
                "FUN_000056b8": {
                    "allocate_memory": 1
                },
                "FUN_00005700": {
                    "decode_and_allocate_memory": 1,
                    "decode_and_initialize": 1,
                    "initialize_buffer": 1,
                    "initialize_connection": 1,
                    "initialize_data": 1,
                    "initialize_device": 1,
                    "initialize_resource": 1,
                    "parse_and_allocate_memory": 1,
                    "parse_and_allocate_resource": 1,
                    "parse_data": 2,
                    "parse_input": 2,
                    "parse_input_data": 2,
                    "parse_param_and_allocate_memory": 1,
                    "process_data": 14,
                    "process_data_stream": 1
                },
                "__swhatbuf_r": {
                    "process_buffer": 1
                },
                "_isatty_r": {
                    "check_terminal": 1
                },
                "_malloc_r": {
                    "allocate_memory": 1
                },
                "iVar2": {
                    "alloc_result": 1,
                    "allocated_buffer": 1,
                    "allocated_mem": 2,
                    "allocated_memory": 12,
                    "allocated_memory_size": 1,
                    "allocated_resource_size": 1,
                    "allocation": 1,
                    "buffer": 1,
                    "malloc_result": 4,
                    "memory": 1,
                    "memory_allocation_result": 1,
                    "memory_block": 1,
                    "memory_size": 1,
                    "ptr": 2,
                    "temp_var": 1
                },
                "local_14": {
                    "buffer": 1,
                    "buffer_ptr": 1,
                    "context": 1,
                    "data_copy": 1,
                    "error_pointer": 1,
                    "is_tty": 1,
                    "isatty_result": 1,
                    "local_b": 1,
                    "local_buffer": 4,
                    "local_context": 1,
                    "local_data": 2,
                    "local_data_ptr": 1,
                    "output_buffer": 1,
                    "param_3": 1,
                    "pointer_to_temp": 1,
                    "ptr": 1,
                    "temp2": 1,
                    "temp_args": 1,
                    "temp_array": 1,
                    "temp_buffer": 4,
                    "temp_data": 3,
                    "temp_pointer": 1
                },
                "local_18": {
                    "buffer_size": 3,
                    "config_size": 1,
                    "context_copy": 1,
                    "context_size": 1,
                    "data_length": 1,
                    "input_size": 1,
                    "length": 2,
                    "local_a": 1,
                    "local_buffer_length": 1,
                    "local_buffer_size": 3,
                    "local_data_size": 2,
                    "local_size": 1,
                    "resource_size": 2,
                    "size": 7,
                    "stream_size": 1,
                    "temp1": 1,
                    "temp_size": 2
                },
                "param_1": {
                    "buffer": 1,
                    "buffer_size": 3,
                    "config": 1,
                    "connection_handle": 1,
                    "context": 7,
                    "data_ptr": 1,
                    "data_size": 2,
                    "device_context": 1,
                    "input": 1,
                    "input_data": 1,
                    "input_length": 1,
                    "input_size": 3,
                    "memory_address": 1,
                    "memory_pool": 1,
                    "param1": 1,
                    "param_a": 1,
                    "pointer_to_memory_pool": 1,
                    "resource_file": 1,
                    "resource_manager": 1,
                    "state": 1
                },
                "param_2": {
                    "args": 1,
                    "buffer": 4,
                    "connection_data": 1,
                    "data": 7,
                    "data_buffer": 4,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "device": 1,
                    "input_array": 1,
                    "input_buffer": 1,
                    "input_data": 1,
                    "output_buffer": 1,
                    "output_data": 1,
                    "param2": 1,
                    "param_b": 1,
                    "pointer_to_params": 1,
                    "resource": 1,
                    "resource_ptr": 1,
                    "stream": 1
                },
                "uVar1": {
                    "buffer_size": 2,
                    "flags": 2,
                    "parsed_value": 1,
                    "result": 17,
                    "result_code": 1,
                    "status": 6,
                    "temp_val": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_00004bd0",
                "FUN_00000534",
                "FUN_000056b8"
            ],
            "calling": [
                "FUN_00006768",
                "FUN_000054a8"
            ],
            "code": "\nvoid process_data_stream_00005700(int context,int *data)\n\n{\n  ushort result;\n  int allocated_memory;\n  int size;\n  int *local_buffer;\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1e)) {\n    size = context;\n    local_buffer = data;\n    result = process_buffer(context,data,&size,&local_buffer);\n    allocated_memory = allocate_memory(context,size);\n    if (allocated_memory != 0) {\n      *(undefined **)(context + 0x28) = &DAT_0000423d;\n      *data = allocated_memory;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x80;\n      data[5] = size;\n      data[4] = allocated_memory;\n      if ((local_buffer != (int *)0x0) &&\n         (allocated_memory = check_terminal(context,(int)*(short *)((int)data + 0xe)), allocated_memory != 0)) {\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data + 3) = result | *(ushort *)(data + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 2;\n  }\n  *data = (int)data + 0x47;\n  data[4] = (int)data + 0x47;\n  data[5] = 1;\n  return;\n}\n\n",
            "current_name": "process_data_stream_00005700",
            "entrypoint": "0x00005700",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005700": "process_data_stream_00005700",
                "__swhatbuf_r": "process_buffer",
                "_isatty_r": "check_terminal",
                "_malloc_r": "allocate_memory",
                "iVar2": "allocated_memory",
                "local_14": "local_buffer",
                "local_18": "size",
                "param_1": "context",
                "param_2": "data",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005780": {
            "additional_data": {
                "16": {
                    "index": 1
                },
                "Elf32_Rel_ARRAY_1fff0200": {
                    "array": 1,
                    "elf_rel_array": 1,
                    "elf_rel_array_ptr": 1,
                    "elf_relocation_array": 1,
                    "rel_array": 6,
                    "rel_table": 1,
                    "relocation_array": 2,
                    "relocation_table": 1
                },
                "FUN_00004b34": {
                    "apply_relocation": 1,
                    "function_with_params": 1,
                    "modify_data": 1,
                    "perform_action": 1,
                    "perform_function": 1,
                    "perform_operation": 1,
                    "process_array": 1,
                    "process_data": 3,
                    "process_elf_relocation": 1,
                    "process_memory": 1,
                    "process_params": 2,
                    "process_relocation_entry": 1,
                    "set_value": 1,
                    "sub_func": 1,
                    "update_pointer_values": 1
                },
                "FUN_00005780": {
                    "deallocate_memory": 1,
                    "free_elf32_rel": 6,
                    "free_elf32_rel_array": 2,
                    "free_elf32_rel_array_element": 1,
                    "free_elf32_rel_array_entry": 1,
                    "free_elf32_rel_entry": 1,
                    "free_elf32_rel_offset": 6,
                    "free_elf_rel_dyn": 1,
                    "free_elf_relocation": 1,
                    "free_elf_relocation_table_entry": 1,
                    "free_memory": 4,
                    "free_memory_at_offset": 1,
                    "free_memory_block": 1,
                    "free_r_with_offset": 1,
                    "free_rel_entry": 1,
                    "free_rel_offset": 1,
                    "release_memory": 1
                },
                "param_1": {
                    "argument": 1,
                    "buffer": 1,
                    "data": 2,
                    "data_pointer": 1,
                    "elf_rel_array": 1,
                    "entry": 1,
                    "memory_address": 1,
                    "memory_buffer": 1,
                    "memory_pointer": 1,
                    "memory_ptr": 2,
                    "offset": 9,
                    "param": 4,
                    "param_array": 1,
                    "param_ptr": 1,
                    "ptr": 1,
                    "r_offset": 1,
                    "rel_dyn_array": 1,
                    "rel_offset": 1
                },
                "param_2": {
                    "array": 1,
                    "data_array": 2,
                    "element_count": 1,
                    "length": 1,
                    "param2": 3,
                    "param_array": 1,
                    "param_count": 2,
                    "param_ptr": 1,
                    "pointer_count": 1,
                    "ptr": 2,
                    "relocation_count": 1,
                    "size": 4
                },
                "param_3": {
                    "arg1": 1,
                    "constant_value": 1,
                    "index": 1,
                    "param1": 1,
                    "param3": 4,
                    "param_3": 1,
                    "param_one": 1,
                    "relocation_offset": 1,
                    "size": 2,
                    "value1": 6,
                    "value_1": 1
                },
                "param_4": {
                    "arg2": 1,
                    "length": 1,
                    "param2": 1,
                    "param4": 4,
                    "param_4": 2,
                    "param_two": 1,
                    "size_of_pointer": 1,
                    "value": 2,
                    "value2": 6,
                    "value_2": 1
                },
                "r_offset": {
                    "offset": 2,
                    "offset_value": 1,
                    "relocation_offset": 1
                }
            },
            "called": [
                "FUN_00004b34"
            ],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid free_elf32_rel_offset_00005780(undefined4 offset)\n\n{\n  _free_r(rel_array[16].offset,offset);\n  return;\n}\n\n",
            "current_name": "free_elf32_rel_offset_00005780",
            "entrypoint": "0x00005780",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "rel_array",
                "FUN_00005780": "free_elf32_rel_offset_00005780",
                "param_1": "offset",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005790": {
            "additional_data": {
                "FUNC_000045e8": {
                    "do_something": 1,
                    "execute_function": 1,
                    "execute_specific_function": 1,
                    "execute_subfunction": 2,
                    "function_1": 1,
                    "function_example": 1,
                    "initialization_routine": 1,
                    "initialize": 2,
                    "initialize_function": 2,
                    "lock_recursive": 1,
                    "nested_function": 1,
                    "perform_action": 1,
                    "perform_additional_task": 1,
                    "perform_cleanup": 3,
                    "perform_operation": 1,
                    "perform_sub_task": 1,
                    "perform_subtask": 1,
                    "perform_task": 1,
                    "release_lock": 1,
                    "release_recursive_lock": 1,
                    "reset_function": 1,
                    "reset_pointer": 1,
                    "sub_function": 1,
                    "subfunction": 1
                },
                "FUN_00005790": {
                    "acquire_recursive_lock": 29,
                    "acquire_recursive_retarget_lock": 1,
                    "lock_acquire_recursive": 1
                }
            },
            "called": [
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "code": "\nvoid acquire_recursive_retarget_lock_00005790(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_1fff0de8);\n  return;\n}\n\n",
            "current_name": "acquire_recursive_retarget_lock_00005790",
            "entrypoint": "0x00005790",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005790": "acquire_recursive_retarget_lock_00005790"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000579c": {
            "called": [
                "FUN_000045ec"
            ],
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "code": "\nvoid FUNC_0000579c(void)\n\n{\n  __retarget_lock_release_recursive(&DAT_1fff0de8);\n  return;\n}\n\n",
            "current_name": "FUNC_0000579c",
            "entrypoint": "0x0000579c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0000579c": "FUNC_0000579c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000057a8": {
            "additional_data": {
                "FUN_000057a8": {
                    "decode_and_store_char": 1,
                    "process_character": 1,
                    "write_byte_to_buffer": 1,
                    "write_char": 1,
                    "write_char_to_buffer": 3,
                    "write_char_to_file": 4,
                    "write_character": 7,
                    "write_character_to_buffer": 2,
                    "write_character_to_file": 2,
                    "write_to_buffer": 7,
                    "write_to_stream": 2
                },
                "__swbuf_r": {
                    "get_buffered_character": 1,
                    "write_char_to_output_buffer": 1,
                    "write_to_buffer": 1
                },
                "iVar1": {
                    "buffer_index": 4,
                    "buffer_length": 1,
                    "buffer_size": 3,
                    "count": 4,
                    "current_buffer_index": 1,
                    "current_index": 1,
                    "index": 7,
                    "last_index": 1,
                    "remaining_bytes": 1,
                    "remaining_characters": 3,
                    "remaining_chars": 1,
                    "remaining_count": 1,
                    "remaining_space": 1
                },
                "param_1": {
                    "arg1": 2,
                    "buffer": 1,
                    "default_value": 1,
                    "file_descriptor": 7,
                    "param1": 4,
                    "param_1": 2,
                    "status": 2,
                    "stdio_stream": 1,
                    "stream": 11
                },
                "param_2": {
                    "byte": 1,
                    "ch": 2,
                    "character": 27,
                    "input_char": 1
                },
                "param_3": {
                    "buffer": 20,
                    "buffer_ptr": 1,
                    "file_buffer": 4,
                    "file_info": 1,
                    "stream": 2,
                    "stream_buffer": 1,
                    "stream_state": 2
                },
                "puVar2": {
                    "buffer": 1,
                    "buffer_pointer": 1,
                    "buffer_ptr": 3,
                    "byte_ptr": 1,
                    "current_char": 2,
                    "current_character_pointer": 1,
                    "current_pointer": 2,
                    "current_position": 7,
                    "current_ptr": 1,
                    "new_char": 1,
                    "next_address": 1,
                    "next_byte": 1,
                    "next_location_in_buffer": 1,
                    "ptr": 4,
                    "stream_ptr": 1,
                    "write_ptr": 1
                }
            },
            "called": [
                "FUN_00005404"
            ],
            "calling": [
                "FUN_000057d2"
            ],
            "code": "\nint write_char_to_buffer_000057a8(undefined4 stream,int character,undefined4 *buffer)\n\n{\n  int index;\n  undefined *current_position;\n  \n  index = buffer[2] + -1;\n  buffer[2] = index;\n  if ((index < 0) && ((index < (int)buffer[6] || (character == 10)))) {\n    index = write_to_buffer();\n    return index;\n  }\n  current_position = (undefined *)*buffer;\n  *buffer = current_position + 1;\n  *current_position = (char)character;\n  return character;\n}\n\n",
            "current_name": "write_char_to_buffer_000057a8",
            "entrypoint": "0x000057a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000057a8": "write_char_to_buffer_000057a8",
                "__swbuf_r": "write_to_buffer",
                "iVar1": "index",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "buffer",
                "puVar2": "current_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000057d2": {
            "additional_data": {
                "FUN_000057d2": {
                    "copy_and_increment": 1,
                    "print_string": 1,
                    "write_buffer": 1,
                    "write_data": 6,
                    "write_data_to_stream": 1,
                    "write_data_to_string": 2,
                    "write_stream": 1,
                    "write_string_to_buffer": 1,
                    "write_to_file": 2,
                    "write_to_stream": 15
                },
                "iVar1": {
                    "bytes_written": 3,
                    "chars_written": 1,
                    "num_written": 1,
                    "result": 22,
                    "status": 1,
                    "write_result": 3
                },
                "iVar3": {
                    "counter": 1,
                    "current_index": 1,
                    "current_length": 1,
                    "data_size_counter": 1,
                    "iteration_count": 1,
                    "remaining": 1,
                    "remaining_count": 1,
                    "remaining_data": 1,
                    "remaining_data_length": 2,
                    "remaining_data_size": 1,
                    "remaining_length": 15,
                    "remaining_size": 5
                },
                "param_1": {
                    "file": 1,
                    "file_descriptor": 6,
                    "file_pointer": 1,
                    "file_stream": 2,
                    "output_stream": 1,
                    "stream": 20
                },
                "param_2": {
                    "buffer": 5,
                    "buffer_capacity": 1,
                    "buffer_mode": 1,
                    "buffer_size": 10,
                    "character": 3,
                    "file_descriptor": 1,
                    "mode": 5,
                    "output": 1,
                    "param": 1,
                    "position": 1,
                    "status": 1,
                    "value": 1
                },
                "param_3": {
                    "buffer": 7,
                    "data": 19,
                    "data_buffer": 1,
                    "data_pointer": 2,
                    "string": 2
                },
                "param_4": {
                    "buffer_length": 1,
                    "buffer_size": 2,
                    "count": 1,
                    "data_length": 9,
                    "data_size": 3,
                    "length": 10,
                    "num_elements": 1,
                    "size": 3,
                    "string_length": 1
                },
                "puVar2": {
                    "data_end_pointer": 1,
                    "end": 1,
                    "end_of_buffer": 7,
                    "end_of_data": 11,
                    "end_of_string": 1,
                    "end_pointer": 5,
                    "end_ptr": 3
                }
            },
            "called": [
                "FUN_000057a8"
            ],
            "calling": [
                "FUN_000057f8"
            ],
            "code": "\nint write_data_to_stream_000057d2(undefined4 stream,undefined4 buffer_size,undefined *data,int length)\n\n{\n  int result;\n  undefined *end_of_data;\n  int remaining_length;\n  \n  end_of_data = data + length;\n  remaining_length = length;\n  do {\n    if (data == end_of_data) {\n      return 0;\n    }\n    result = __sfputc_r(stream,*data,buffer_size,length,remaining_length);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "current_name": "write_data_to_stream_000057d2",
            "entrypoint": "0x000057d2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000057d2": "write_data_to_stream_000057d2",
                "iVar1": "result",
                "iVar3": "remaining_length",
                "param_1": "stream",
                "param_2": "buffer_size",
                "param_3": "data",
                "param_4": "length",
                "puVar2": "end_of_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000057f8": {
            "additional_data": {
                "DAT_00007998": {
                    "dat_00007998": 1
                },
                "DAT_000079b8": {
                    "dat_000079b8": 1
                },
                "DAT_000079d8": {
                    "dat_000079d8": 1
                },
                "FUNC_000045e8": {
                    "function1": 1
                },
                "FUNC_000045ec": {
                    "function2": 1
                },
                "FUN_000042a4": {
                    "function5": 1
                },
                "FUN_000054a8": {
                    "function3": 1
                },
                "FUN_000057d2": {
                    "initialize_standard_streams": 1
                },
                "FUN_000057f8": {
                    "format_and_print": 2,
                    "format_string": 1,
                    "formatted_output": 1,
                    "print_formatted_message": 1,
                    "print_formatted_output": 1,
                    "print_formatted_string": 12,
                    "print_formatted_text": 1,
                    "printf_format_string": 1,
                    "printf_formatted_output": 1,
                    "process_format_string": 2,
                    "process_print_format": 1
                },
                "FUN_00005b34": {
                    "function6": 1
                },
                "FUN_00006010": {
                    "function4": 1
                },
                "__retarget_lock_acquire_recursive": {
                    "__retarget_lock_acquire_recursive": 1,
                    "acquire_recursive_lock": 1,
                    "acquire_recursive_lock_func": 1
                },
                "__retarget_lock_release_recursive": {
                    "__retarget_lock_release_recursive": 1,
                    "release_recursive_lock": 1,
                    "release_recursive_lock_func": 1
                },
                "__sfputs_r": {
                    "__sfputs_r": 1,
                    "sfputs_func": 1
                },
                "__sinit": {
                    "__sinit": 1,
                    "initialize_func": 1,
                    "initialize_standard_streams": 1
                },
                "__swsetup_r": {
                    "__swsetup_r": 1,
                    "setup_stream_for_writing": 1,
                    "swsetup_func": 1
                },
                "_printf_i": {
                    "_printf_i": 1,
                    "print_integer": 1,
                    "printf_i_func": 1
                },
                "bVar4": {
                    "condition": 1,
                    "digit_found": 1,
                    "flag": 4,
                    "found": 3,
                    "found_digit": 1,
                    "found_number": 2,
                    "is_digit": 4,
                    "is_digits": 1,
                    "is_number": 10,
                    "is_numeric": 1,
                    "is_parsing_number": 1,
                    "is_true": 2
                },
                "currentChar": {
                    "current_char": 1
                },
                "ecx": {
                    "ecx": 1
                },
                "fieldWidth": {
                    "field_width": 1
                },
                "flags": {
                    "flags": 1
                },
                "formatOptions": {
                    "format_options": 1
                },
                "foundNumber": {
                    "found_number": 1
                },
                "iVar1": {
                    "current_index": 1,
                    "format_index": 1,
                    "index": 7,
                    "index1": 2,
                    "length": 1,
                    "offset": 1,
                    "result": 15,
                    "return_value": 2,
                    "temp_int1": 1
                },
                "iVar2": {
                    "count": 1,
                    "index2": 3,
                    "length": 1,
                    "result": 6,
                    "result2": 1,
                    "return_value": 2,
                    "return_value2": 1,
                    "size": 1,
                    "status": 1,
                    "swsetup_result": 2,
                    "temp": 3,
                    "temp_int2": 1,
                    "temp_result": 3,
                    "temp_var": 2,
                    "temp_variable": 1,
                    "tmp_result": 1,
                    "value": 1
                },
                "intArguments": {
                    "int_arguments": 1
                },
                "intArgumentsPtr": {
                    "int_arguments_ptr": 1
                },
                "intArgumentsPtr2": {
                    "int_arguments_ptr2": 1
                },
                "local_30": {
                    "arg_list_copy": 1,
                    "arg_printf_count": 1,
                    "arg_size": 1,
                    "hash_flag": 1,
                    "length": 2,
                    "length_modifier": 2,
                    "local_var9": 1,
                    "none": 1,
                    "null": 1,
                    "padding_char": 1,
                    "pd_flag": 1,
                    "size": 1,
                    "temp4": 1,
                    "temp_var2": 1,
                    "unused_local": 1,
                    "width_index": 1
                },
                "local_45": {
                    "alternate_form_flag": 1,
                    "flag_zero": 1,
                    "format_flag": 1,
                    "left_alignment": 1,
                    "local_byte3": 1,
                    "local_var8": 1,
                    "option_var": 1,
                    "pad": 1,
                    "pad_character": 1,
                    "prefix": 1,
                    "prefix_char": 1,
                    "prefix_flag": 1,
                    "space_char": 1,
                    "zero": 1,
                    "zero_flag": 4
                },
                "local_6e": {
                    "constant2": 1,
                    "flag_plus": 1,
                    "flag_var2": 1,
                    "local_byte2": 1,
                    "local_var7": 1,
                    "plus": 2,
                    "plus_flag": 8,
                    "plus_flags": 1,
                    "positive_sign": 1,
                    "width_pad": 1
                },
                "local_6f": {
                    "arg_pad": 1,
                    "constant1": 1,
                    "flag_space": 1,
                    "flag_var1": 1,
                    "local_byte1": 1,
                    "local_var6": 1,
                    "space": 3,
                    "space_flag": 8,
                    "space_flags": 1
                },
                "local_70": {
                    "ch": 1,
                    "character": 1,
                    "conversion": 2,
                    "conversion_char": 2,
                    "conversion_spec": 1,
                    "conversion_specifier": 11,
                    "conversion_type": 1,
                    "converter": 1,
                    "format_char": 1,
                    "format_character": 1,
                    "local_byte": 1,
                    "local_var5": 1,
                    "specifier": 7
                },
                "local_74": {
                    "count": 1,
                    "local_var4": 1,
                    "num_chars_written": 1,
                    "output_len": 1,
                    "printed_chars": 1,
                    "result": 1,
                    "total": 1,
                    "total_characters": 1,
                    "total_chars": 2,
                    "total_chars_printed": 2,
                    "total_chars_written": 1,
                    "total_count": 1,
                    "total_length": 9,
                    "total_output": 2,
                    "total_output_length": 1,
                    "total_printed": 2,
                    "total_size": 2,
                    "total_written": 1
                },
                "local_7c": {
                    "arg": 1,
                    "arg_count": 1,
                    "arg_index": 2,
                    "arg_width": 3,
                    "count": 1,
                    "current_width": 1,
                    "field_width": 2,
                    "int_arg": 3,
                    "local_var": 1,
                    "local_var3": 1,
                    "temp3": 1,
                    "temp_var": 1,
                    "value": 1,
                    "width": 12
                },
                "local_84": {
                    "format_specifier": 1,
                    "local_var2": 1,
                    "precision": 23,
                    "value": 1,
                    "width": 5
                },
                "local_88": {
                    "flag": 2,
                    "flag_bits": 1,
                    "flags": 26,
                    "local_var1": 1,
                    "option_flags": 1
                },
                "local_8c": {
                    "arg_index": 1,
                    "arg_list": 4,
                    "arg_list_ptr": 1,
                    "arg_pointer": 1,
                    "arg_ptr": 4,
                    "arg_ptr_list": 1,
                    "arg_sizes": 1,
                    "args": 1,
                    "args_list_ptr_local": 1,
                    "counter": 1,
                    "int_arguments_ptr2": 1,
                    "int_ptr_temp2": 1,
                    "integer_ptr": 1,
                    "local_pointer": 2,
                    "local_ptr": 1,
                    "next_arg": 1,
                    "next_arg_pointer": 1,
                    "number_array": 1,
                    "output_count_ptr": 1,
                    "param4": 2,
                    "param_list": 1,
                    "pointer_array": 1,
                    "var_list": 1
                },
                "memchr": {
                    "find_char_func": 1,
                    "find_character_in_string": 1,
                    "memchr": 1
                },
                "nextChar": {
                    "next_char": 1
                },
                "padding": {
                    "padding": 1
                },
                "param_1": {
                    "arg1": 3,
                    "argument": 1,
                    "buffer": 1,
                    "file_descriptor": 1,
                    "format_handler": 1,
                    "format_string": 3,
                    "handle": 1,
                    "input1": 1,
                    "input_data": 1,
                    "input_param": 2,
                    "input_pointer": 1,
                    "param": 3,
                    "param1": 1,
                    "param_ptr": 1,
                    "stream": 10
                },
                "param_2": {
                    "arg2": 3,
                    "args": 3,
                    "config": 1,
                    "config_pointer": 1,
                    "data_array": 1,
                    "data_pointer": 1,
                    "format": 7,
                    "format_options": 1,
                    "format_specifier": 4,
                    "format_specifiers": 2,
                    "format_string": 2,
                    "input2": 1,
                    "output_buffer": 1,
                    "output_data_ptr": 1,
                    "param2": 1,
                    "param_list": 1
                },
                "param_3": {
                    "arg3": 2,
                    "args": 1,
                    "arguments_pointer": 1,
                    "buffer": 3,
                    "format_specifier": 2,
                    "format_string": 7,
                    "input3": 1,
                    "message": 1,
                    "output": 1,
                    "output_buffer": 4,
                    "str": 4,
                    "string": 3,
                    "string_to_print": 1
                },
                "param_4": {
                    "arg4": 3,
                    "arg_list": 4,
                    "arg_ptr": 1,
                    "args": 4,
                    "args_count": 1,
                    "args_list": 1,
                    "buffer_size": 2,
                    "count": 2,
                    "format_args": 1,
                    "input4": 1,
                    "int_arguments": 1,
                    "int_ptr": 1,
                    "integers": 1,
                    "output_buffer_length": 1,
                    "output_count": 1,
                    "output_length": 1,
                    "output_result": 1,
                    "output_size": 1,
                    "result": 1,
                    "size": 1,
                    "value": 1
                },
                "pbVar5": {
                    "byte_pointer": 1,
                    "byte_ptr": 2,
                    "ch": 1,
                    "char_ptr": 1,
                    "curr_char": 1,
                    "current_char": 13,
                    "format_ptr": 2,
                    "pointer2": 1,
                    "ptr": 3,
                    "ptr2": 3,
                    "ptr_byte": 1,
                    "str_ptr": 1,
                    "temp_buffer": 1
                },
                "pbVar6": {
                    "buffer_ptr": 2,
                    "byte_pointer2": 1,
                    "byte_ptr2": 2,
                    "current_arg": 1,
                    "current_char": 2,
                    "current_char_ptr": 2,
                    "current_format_specifier": 1,
                    "current_pos": 1,
                    "current_position": 1,
                    "next_char": 7,
                    "param3_ptr": 1,
                    "pointer3": 1,
                    "ptr": 2,
                    "ptr2": 1,
                    "ptr3": 3,
                    "ptr_byte2": 1,
                    "str_ptr": 1,
                    "temp_str": 1
                },
                "piVar3": {
                    "arg": 5,
                    "arg_index": 1,
                    "arg_list_ptr": 1,
                    "arg_pointer": 1,
                    "arg_ptr": 2,
                    "args_list_ptr": 1,
                    "int_arguments_ptr": 1,
                    "int_ptr_temp": 1,
                    "num_args": 2,
                    "output_ptr": 1,
                    "param": 1,
                    "param4": 1,
                    "param4_ptr": 1,
                    "param_pointer": 1,
                    "pointer": 1,
                    "pointer1": 1,
                    "pointer_var": 1,
                    "ptr": 5,
                    "ptr_integers": 1,
                    "ptr_var": 1,
                    "temp_int_ptr": 1
                },
                "precision": {
                    "precision": 1
                },
                "result": {
                    "result": 1
                },
                "specifier": {
                    "specifier": 1
                },
                "stream": {
                    "stream": 1
                },
                "stringToPrint": {
                    "string_to_print": 1
                },
                "tmpResult": {
                    "tmp_result": 1
                },
                "totalCharsPrinted": {
                    "total_chars_printed": 1
                },
                "uStack_80": {
                    "arg_fld_size": 1,
                    "arg_width": 1,
                    "current_arg": 1,
                    "field_width": 2,
                    "padding": 2,
                    "param3": 1,
                    "prec": 1,
                    "precision": 4,
                    "stack_var": 2,
                    "temp2": 1,
                    "temp_buffer_index": 1,
                    "temp_variable2": 1,
                    "u_stack_0x80": 1,
                    "u_stack_80": 2,
                    "undefined4_stack": 1,
                    "unused": 1,
                    "unused_stack": 1,
                    "unused_var": 1,
                    "width": 6
                },
                "unaff_r7": {
                    "ecx": 1,
                    "file_lock": 1,
                    "lock": 3,
                    "lock_id": 1,
                    "lock_index": 1,
                    "recursive_lock": 4,
                    "register_var": 1,
                    "stream_index": 1,
                    "stream_ptr": 1,
                    "temp": 2,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_var": 1,
                    "unaff_r7": 1,
                    "unaff_var": 1,
                    "unaffected_r7": 1,
                    "unused": 2,
                    "unused_register": 1,
                    "unused_variable": 1
                }
            },
            "called": [
                "FUN_000057d2",
                "FUN_000045e8",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_00006010",
                "FUN_000042a4",
                "FUN_00005b34"
            ],
            "calling": [
                "FUN_00004c84"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint print_formatted_string_000057f8(int stream,undefined4 *format,byte *format_string,int *arg_list)\n\n{\n  int result;\n  int result;\n  int *ptr;\n  bool is_number;\n  byte *current_char;\n  int recursive_lock;\n  byte *next_char;\n  int *arg_ptr;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int width;\n  int total_length;\n  byte conversion_specifier;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined zero_flag;\n  undefined4 length;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    initialize_standard_streams();\n  }\n  if (format == &DAT_000079b8) {\n    format = *(undefined4 **)(stream + 4);\n  }\n  else if (format == (undefined4 *)&DAT_000079d8) {\n    format = *(undefined4 **)(stream + 8);\n  }\n  else if (format == (undefined4 *)&DAT_00007998) {\n    format = *(undefined4 **)(stream + 0xc);\n  }\n  if ((-1 < (int)(format[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16))) {\n    acquire_recursive_lock_func(format[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format + 3) << 0x1c)) || (format[4] == 0)) &&\n     (result = __swsetup_r(stream,format), result != 0)) {\n    if ((-1 < (int)(format[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16)))\n    {\n      release_recursive_lock_func(format[0x16]);\n    }\n    return -1;\n  }\n  total_length = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  next_char = format_string;\n  arg_ptr = arg_list;\nLAB_0000588e:\n  current_char = next_char;\n  if (*current_char != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  next_char = current_char + 1;\n  if (*current_char == 0x25) {\nLAB_0000589a:\n    result = (int)current_char - (int)format_string;\n    if (result != 0) {\n      result = __sfputs_r(stream,format,format_string,result);\n      if (result == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(format[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16))) {\n          release_recursive_lock_func(format[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(format + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return total_length;\n      }\n      total_length = total_length + result;\n    }\n    if (*current_char == 0) goto LAB_00005a06;\n    precision = -1;\n    width = 0;\n    flags = 0;\n    width = 0;\n    zero_flag = 0;\n    length = 0;\n    next_char = current_char + 1;\n    while( true ) {\n      current_char = next_char + 1;\n      result = memchr(\"#-0+ \",*next_char,5);\n      if (result == 0) break;\n      flags = 1 << (result - 0x7bfcU & 0xff) | flags;\n      next_char = current_char;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      zero_flag = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      zero_flag = 0x2b;\n    }\n    if (*next_char == 0x2a) {\n      ptr = arg_ptr + 1;\n      width = *arg_ptr;\n      arg_ptr = ptr;\n      if (width < 0) {\n        width = -width;\n        flags = flags | 2;\n      }\n    }\n    else {\n      is_number = false;\n      result = width;\n      current_char = next_char;\n      while( true ) {\n        if (9 < *current_char - 0x30) break;\n        result = result * 10 + (*current_char - 0x30);\n        is_number = true;\n        current_char = current_char + 1;\n      }\n      if (is_number) {\n        width = result;\n      }\n    }\n    if (*current_char == 0x2e) {\n      if (current_char[1] == 0x2a) {\n        precision = *arg_ptr;\n        if (precision < 0) {\n          precision = -1;\n        }\n        current_char = current_char + 2;\n        arg_ptr = arg_ptr + 1;\n      }\n      else {\n        is_number = false;\n        precision = 0;\n        result = 0;\n        while( true ) {\n          current_char = current_char + 1;\n          if (9 < *current_char - 0x30) break;\n          result = result * 10 + (*current_char - 0x30);\n          is_number = true;\n        }\n        if (is_number) {\n          precision = result;\n        }\n      }\n    }\n    result = memchr(&DAT_00007c02,*current_char,3);\n    if (result != 0) {\n      flags = flags | 0x40 << (result - 0x7c02U & 0xff);\n      current_char = current_char + 1;\n    }\n    format_string = current_char + 1;\n    conversion_specifier = *current_char;\n    result = memchr(\"efgEFG\",conversion_specifier,6);\n    if (result == 0) {\n      recursive_lock = print_integer(stream,&flags,format,0x57d3,&arg_ptr);\n      if (recursive_lock == -1) goto LAB_00005a06;\n    }\n    else {\n      arg_ptr = (int *)(((int)arg_ptr + 7U & 0xfffffff8) + 8);\n    }\n    total_length = total_length + recursive_lock;\n    next_char = format_string;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "current_name": "print_formatted_string_000057f8",
            "entrypoint": "0x000057f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000057f8": "print_formatted_string_000057f8",
                "__retarget_lock_acquire_recursive": "acquire_recursive_lock_func",
                "__retarget_lock_release_recursive": "release_recursive_lock_func",
                "__sinit": "initialize_standard_streams",
                "_printf_i": "print_integer",
                "bVar4": "is_number",
                "iVar1": "result",
                "iVar2": "result",
                "local_30": "length",
                "local_45": "zero_flag",
                "local_6e": "plus_flag",
                "local_6f": "space_flag",
                "local_70": "conversion_specifier",
                "local_74": "total_length",
                "local_7c": "width",
                "local_84": "precision",
                "local_88": "flags",
                "local_8c": "arg_ptr",
                "param_1": "stream",
                "param_2": "format",
                "param_3": "format_string",
                "param_4": "arg_list",
                "pbVar5": "current_char",
                "pbVar6": "next_char",
                "piVar3": "ptr",
                "uStack_80": "width",
                "unaff_r7": "recursive_lock"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005a58": {
            "additional_data": {
                "FUN_00005a58": {
                    "calculate_buffer_length": 1,
                    "calculate_data_length": 1,
                    "calculate_length": 2,
                    "calculate_output_size": 1,
                    "calculate_required_size": 1,
                    "calculate_result": 1,
                    "calculate_size": 1,
                    "calculate_size_and_copy": 1,
                    "calculate_string_length": 2,
                    "calculate_total_size": 1,
                    "extract_data_from_binary": 1,
                    "parse_data": 3,
                    "process_data": 7,
                    "process_function": 1,
                    "update_param": 2,
                    "validate_and_process_data": 1
                },
                "LAB_00005afc": {
                    "error_handler": 1,
                    "error_handling": 1,
                    "error_label": 2
                },
                "bVar6": {
                    "check_condition": 1,
                    "check_flag": 1,
                    "condition": 2,
                    "condition_check": 1,
                    "flag": 6,
                    "is_case_one": 1,
                    "is_condition_met": 7,
                    "is_condition_true": 5,
                    "is_conditional": 1,
                    "is_flag_set": 4,
                    "is_not_zero": 1,
                    "is_zero": 1
                },
                "iVar1": {
                    "i": 4,
                    "index": 9,
                    "iteration": 5,
                    "loop_counter": 6,
                    "loop_index": 5,
                    "loop_index1": 1,
                    "result": 1
                },
                "iVar3": {
                    "callback_result": 10,
                    "callback_return": 1,
                    "callback_return_value": 2,
                    "function_result": 1,
                    "inner_result": 1,
                    "inner_var": 2,
                    "iterator": 1,
                    "loop_result1": 1,
                    "result": 3,
                    "return_value": 1,
                    "status": 2,
                    "temp": 2,
                    "temp_index": 1,
                    "temp_var": 2,
                    "temp_variable1": 1
                },
                "param_1": {
                    "arg1": 2,
                    "data": 2,
                    "input": 7,
                    "input1": 3,
                    "input_data": 2,
                    "input_param": 1,
                    "input_parameter_1": 1,
                    "input_value": 10,
                    "param1": 2,
                    "status": 1
                },
                "param_2": {
                    "array": 4,
                    "array_ptr": 1,
                    "buffer": 1,
                    "data": 7,
                    "data_array": 8,
                    "input": 1,
                    "input2": 1,
                    "input_array": 1,
                    "input_data": 2,
                    "input_parameter_2": 1,
                    "param_array": 1,
                    "params_array": 1,
                    "size_array": 1,
                    "string_params": 1
                },
                "param_3": {
                    "length": 3,
                    "output": 5,
                    "output_array": 1,
                    "output_array_size": 1,
                    "output_data": 2,
                    "output_length": 3,
                    "output_parameter": 1,
                    "output_size": 10,
                    "output_value": 1,
                    "result": 1,
                    "result_length": 1,
                    "total_size": 1
                },
                "param_4": {
                    "additional_data": 1,
                    "additional_value": 1,
                    "arg2": 1,
                    "arg4": 1,
                    "extra_value": 1,
                    "input2": 2,
                    "input3": 1,
                    "input_parameter_3": 1,
                    "param": 6,
                    "param3": 1,
                    "param4": 8,
                    "param4_value": 1,
                    "param_4": 2,
                    "some_param": 1,
                    "some_value": 3
                },
                "param_5": {
                    "callback": 16,
                    "callback_func": 2,
                    "callback_function": 11,
                    "function_ptr": 1,
                    "process_function": 1
                },
                "uVar2": {
                    "result": 18,
                    "return_value": 13
                },
                "uVar4": {
                    "max_data_length": 1,
                    "max_len": 1,
                    "max_length": 4,
                    "max_size": 12,
                    "max_string_length": 1,
                    "max_value": 11,
                    "temp_variable2": 1
                },
                "uVar5": {
                    "count": 7,
                    "counter": 10,
                    "i": 1,
                    "inner_loop_index": 1,
                    "loop_counter": 3,
                    "loop_counter2": 1,
                    "loop_counter_2": 1,
                    "loop_index": 2,
                    "loop_index2": 1,
                    "loop_limit": 1,
                    "temp_variable3": 1,
                    "u_var5": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00005b34"
            ],
            "code": "\nundefined4\nvalidate_and_process_data_00005a58(undefined4 input_value,uint *data_array,uint *output_size,undefined4 param4,code *callback)\n\n{\n  int index;\n  undefined4 result;\n  int callback_result;\n  uint max_size;\n  uint counter;\n  bool is_condition_met;\n  \n  max_size = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    max_size = data_array[2];\n  }\n  *output_size = max_size;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *output_size = max_size + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *output_size = *output_size + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (index = 0; index < (int)(data_array[3] - *output_size); index = index + 1) {\n      callback_result = (*callback)(input_value,param4,(int)data_array + 0x19,1);\n      if (callback_result == -1) goto error_label;\n    }\n  }\n  max_size = (uint)*(byte *)((int)data_array + 0x43);\n  if (max_size != 0) {\n    max_size = 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + max_size + 0x43) = 0x30;\n    *(undefined *)((int)data_array + max_size + 0x44) = *(undefined *)((int)data_array + 0x45);\n    max_size = max_size + 2;\n  }\n  index = (*callback)(input_value,param4,(int)data_array + 0x43,max_size);\n  if (index == -1) {\nerror_label:\n    result = 0xffffffff;\n  }\n  else {\n    max_size = data_array[3];\n    is_condition_met = (*data_array & 6) == 4;\n    if (is_condition_met) {\n      max_size = max_size - *output_size;\n    }\n    if (is_condition_met) {\n      max_size = max_size & ~((int)max_size >> 0x1f);\n    }\n    else {\n      max_size = 0;\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      max_size = max_size + (data_array[2] - data_array[4]);\n    }\n    for (counter = 0; max_size != counter; counter = counter + 1) {\n      index = (*callback)(input_value,param4,(int)data_array + 0x1a,1);\n      if (index == -1) goto error_label;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "validate_and_process_data_00005a58",
            "entrypoint": "0x00005a58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005a58": "validate_and_process_data_00005a58",
                "LAB_00005afc": "error_label",
                "bVar6": "is_condition_met",
                "iVar1": "index",
                "iVar3": "callback_result",
                "param_1": "input_value",
                "param_2": "data_array",
                "param_3": "output_size",
                "param_4": "param4",
                "param_5": "callback",
                "uVar2": "result",
                "uVar4": "max_size",
                "uVar5": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005b34": {
            "additional_data": {
                "FMT_print": {
                    "print_formatted": 1
                },
                "FUN_00005a58": {
                    "convert_unsigned_integer_to_string": 1,
                    "parse_format_specifier": 1,
                    "signature_function": 1
                },
                "FUN_00005b34": {
                    "format_and_print": 3,
                    "format_and_print_number": 1,
                    "print_formatted_data": 3,
                    "print_formatted_output": 5,
                    "print_formatted_string": 2,
                    "print_formatted_text": 1,
                    "print_formatted_value": 13
                },
                "FUN_00006010": {
                    "convert_decimal_to_string": 1,
                    "convert_unsigned_integer_to_hexadecimal": 1,
                    "more_readable_function": 1
                },
                "LAB_00005bdc": {
                    "label1": 1
                },
                "LAB_00005d06": {
                    "label2": 1
                },
                "LAB_00005d28": {
                    "label3": 1
                },
                "bVar1": {
                    "flag": 1,
                    "is_divisible": 3,
                    "is_greater": 6,
                    "is_greater_than": 2,
                    "is_less_than": 2,
                    "is_less_than_dividend": 1,
                    "is_negative": 7,
                    "is_positive": 8
                },
                "bVar2": {
                    "byte_val": 5,
                    "byte_value": 8,
                    "flag": 1,
                    "format_char": 6,
                    "format_code": 1,
                    "format_control_char": 1,
                    "format_specifier": 4,
                    "format_specifier_type": 1,
                    "format_type": 2,
                    "specifier": 1
                },
                "iVar10": {
                    "base": 1
                },
                "iVar3": {
                    "byte_count": 1,
                    "count": 1,
                    "func_result": 1,
                    "func_ret_val": 1,
                    "index": 1,
                    "int_value": 1,
                    "iterator": 1,
                    "position": 1,
                    "printf_result": 1,
                    "printf_ret_val": 1,
                    "result": 15,
                    "return_value": 4,
                    "status": 1
                },
                "iVar4": {
                    "arg_count": 1
                },
                "iVar6": {
                    "callback_result": 1,
                    "char_output": 1,
                    "helper_var": 1,
                    "inner_result": 1,
                    "inner_status": 1,
                    "loop_result": 1,
                    "output_result": 1,
                    "output_status": 1,
                    "pc": 1,
                    "print_result": 2,
                    "print_ret_val": 1,
                    "printf_result": 1,
                    "printf_ret_val": 1,
                    "printf_return_value": 2,
                    "result": 2,
                    "ret": 1,
                    "return_value": 4,
                    "return_value_from_format_func": 1,
                    "return_value_inner": 1,
                    "temp": 1,
                    "temp_result": 1,
                    "write_result": 3
                },
                "iVar8": {
                    "current_value": 1,
                    "remainder": 1,
                    "temp_var": 1
                },
                "iVar9": {
                    "temp_value": 1
                },
                "local_24": {
                    "backup_print_func": 1,
                    "callback": 1,
                    "callback_function": 1,
                    "default_write_char_callback": 1,
                    "format_string_pointer": 1,
                    "formatted_output": 1,
                    "formatted_string": 1,
                    "formatter": 1,
                    "local_buffer": 1,
                    "local_format_func": 1,
                    "local_output_function": 2,
                    "local_print_func": 2,
                    "local_printing_function": 1,
                    "local_stream": 1,
                    "local_var": 1,
                    "local_write_function": 2,
                    "original_pointer": 1,
                    "output_func": 1,
                    "output_func_ptr": 1,
                    "print_buffer": 1,
                    "print_formatter": 1,
                    "print_func_copy": 1,
                    "print_ptr": 1,
                    "printf_args": 1,
                    "printf_function_ptr": 1,
                    "saved_print_function": 1
                },
                "param_1": {
                    "arg1": 3,
                    "data": 1,
                    "format": 1,
                    "format_specifier": 10,
                    "format_string": 11,
                    "output_stream": 1,
                    "param1": 1,
                    "value": 1
                },
                "param_2": {
                    "arg2": 1,
                    "arg_list": 7,
                    "arg_pointer": 2,
                    "arg_ptr": 1,
                    "argptr": 1,
                    "args": 4,
                    "arguments": 4,
                    "format": 1,
                    "format_args": 3,
                    "format_specifier": 1,
                    "format_string": 1,
                    "input": 1,
                    "value": 2
                },
                "param_3": {
                    "access_mode": 1,
                    "arg2": 2,
                    "arg3": 1,
                    "arg_count": 1,
                    "args_end": 1,
                    "args_size": 1,
                    "buffer": 1,
                    "buffer_size": 1,
                    "format_length": 1,
                    "format_specifier_value": 1,
                    "length": 2,
                    "locale": 1,
                    "num_args": 1,
                    "num_arguments": 1,
                    "num_of_args": 1,
                    "output_stream": 1,
                    "param_3": 2,
                    "print_function": 2,
                    "size": 1,
                    "stream": 2,
                    "string_size": 1,
                    "strlen": 1,
                    "width": 2
                },
                "param_4": {
                    "arg3": 1,
                    "arg4": 1,
                    "arg_list_size": 1,
                    "callback": 1,
                    "format_func": 1,
                    "output_func": 3,
                    "output_function": 3,
                    "param4": 1,
                    "print_func": 2,
                    "print_function": 6,
                    "printer_function": 1,
                    "printing_function": 1,
                    "putchar_func": 1,
                    "stream": 1,
                    "user_data": 1,
                    "write_char": 1,
                    "write_char_callback": 1,
                    "write_function": 2
                },
                "param_5": {
                    "arg3": 1,
                    "arg4": 1,
                    "arg5": 1,
                    "arg_list": 1,
                    "arg_list_pointer": 1,
                    "arg_list_ptr": 3,
                    "arg_pointer": 1,
                    "arg_pos": 1,
                    "arg_ptr": 2,
                    "arg_ptr_ptr": 2,
                    "arglist": 1,
                    "argptr": 1,
                    "argument_ptr": 1,
                    "format_func_arg_list": 1,
                    "formatted_data": 1,
                    "input_stream_ptr": 1,
                    "next_arg": 1,
                    "out_func": 1,
                    "param_5": 2,
                    "position": 1,
                    "pparg": 1,
                    "print_arg_fetched": 1,
                    "print_function": 1,
                    "read_data": 1
                },
                "pcVar14": {
                    "curr_char": 1,
                    "current_digit": 1,
                    "current_position": 1,
                    "current_ptr": 1,
                    "formatted_data": 2,
                    "formatted_data_ptr": 1,
                    "formatted_output_ptr": 1,
                    "formatted_string": 3,
                    "formatted_string_ptr": 1,
                    "formatted_value": 1,
                    "formatted_value_pointer": 1,
                    "output": 1,
                    "output_buffer": 1,
                    "output_pointer": 1,
                    "output_ptr": 4,
                    "output_string": 1,
                    "pc1": 1,
                    "ptr3": 1,
                    "result_pointer": 1,
                    "str_ptr3": 1,
                    "write_ptr": 1
                },
                "pcVar4": {
                    "current_char": 1,
                    "final_output": 2,
                    "final_result": 1,
                    "formatted_data": 1,
                    "formatted_output": 1,
                    "func": 1,
                    "output": 4,
                    "output_string": 1,
                    "pc": 1,
                    "print_func": 1,
                    "print_result": 1,
                    "printf_result": 3,
                    "printf_return_value": 1,
                    "result": 2,
                    "return_address": 1,
                    "return_code": 2,
                    "return_val": 2,
                    "return_value": 3,
                    "selected_print_function": 1
                },
                "pcVar5": {
                    "char_set": 1,
                    "digit_array": 1,
                    "digit_chars": 1,
                    "digit_string": 2,
                    "digits": 7,
                    "hex_chars": 7,
                    "hex_digit": 1,
                    "hex_digits": 4,
                    "hex_string": 2,
                    "hex_table": 1,
                    "hexadecimal_chars": 1,
                    "hexadecimal_digits": 2
                },
                "pcVar7": {
                    "char_ptr": 1,
                    "current_char": 6,
                    "current_pointer": 1,
                    "current_string": 1,
                    "digit_ptr": 1,
                    "format_ptr": 1,
                    "format_str_ptr": 1,
                    "format_string": 1,
                    "formatted_value": 1,
                    "output_string": 1,
                    "output_string_end": 1,
                    "pc2": 1,
                    "pointer": 1,
                    "ptr": 3,
                    "ptr1": 1,
                    "str_ptr": 1,
                    "string_ptr": 1,
                    "string_value": 1,
                    "temp": 1,
                    "temp_string": 1
                },
                "ppcVar12": {
                    "arg_list_string_pointer": 1,
                    "format_ptr_ptr": 1,
                    "pointer_pointer": 1,
                    "pointer_to_pointer_to_string": 1,
                    "ppc": 1,
                    "ppc_string": 1,
                    "ppc_var12": 1,
                    "ppc_var2": 1,
                    "ppchar": 1,
                    "ptr_to_string": 1,
                    "read_string_ptr": 1,
                    "str_ptr": 3,
                    "str_ptr2": 1,
                    "str_ptr_ptr": 2,
                    "str_reference": 1,
                    "string_pointer": 2,
                    "string_ptr": 2,
                    "string_ptr_ptr": 1
                },
                "ppuVar11": {
                    "arg_data_pointer": 1,
                    "arg_list_pointer_pointer": 1,
                    "arg_list_ptr_ptr": 2,
                    "arg_list_ptr_ptr_ptr": 1,
                    "arg_ptr": 1,
                    "arg_ptr_ptr": 3,
                    "arg_reference": 1,
                    "pointer_to_arg_list": 1,
                    "position_pointer": 1,
                    "pp_arg_pos": 1,
                    "ppc_var": 1,
                    "pptr": 3,
                    "ppu_var11": 1,
                    "ptr_ptr": 1,
                    "ptr_ptr_ptr": 1,
                    "ptr_to_args": 1,
                    "read_data_ptr": 1,
                    "string_array_ptr": 1,
                    "string_pointer": 1
                },
                "puVar9": {
                    "arg_data": 2,
                    "arg_list_ptr_ptr": 1,
                    "arg_pointer": 1,
                    "arg_ptr": 5,
                    "arg_ptr_to_modify": 1,
                    "argument_pointer": 1,
                    "argument_ptr": 1,
                    "current_arg": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "data_pointer": 2,
                    "input_stream": 1,
                    "int_ptr": 1,
                    "ppu_var": 1,
                    "ppu_var9": 1,
                    "ptr": 3,
                    "ptr2": 2,
                    "ptr_ptr": 1,
                    "read_result": 1,
                    "temp_ptr": 2
                },
                "switchD_00005b70_caseD_65": {
                    "switch_case1": 1
                },
                "uVar10": {
                    "base": 26,
                    "base_value": 1,
                    "divisor": 1,
                    "num2": 1
                },
                "uVar13": {
                    "arg_size": 1,
                    "arglen": 1,
                    "buffer_size": 1,
                    "format_length": 2,
                    "formatted_data_length": 1,
                    "formatted_width": 1,
                    "length": 7,
                    "num_digits": 1,
                    "original_string_len": 1,
                    "output_length": 1,
                    "size": 1,
                    "str_len": 1,
                    "string_len": 1,
                    "string_length": 4,
                    "temp": 1,
                    "u_var13": 1,
                    "value_copy": 1,
                    "width": 2,
                    "width_remaining": 1
                },
                "uVar8": {
                    "current_value": 2,
                    "div_result": 1,
                    "num": 2,
                    "num_val": 1,
                    "num_var": 1,
                    "quotient": 1,
                    "remainder": 3,
                    "temp_value": 2,
                    "unsigned_var1": 1,
                    "val": 2,
                    "value": 12,
                    "var8": 1
                },
                "undefined": {
                    "undefined": 1
                },
                "undefined4": {
                    "data_type": 1
                }
            },
            "called": [
                "FUN_00005a58",
                "FUN_00006010"
            ],
            "calling": [
                "FUN_000057f8"
            ],
            "code": "\ncode * print_formatted_value_00005b34(data_type format_string,uint *arg_list,data_type width,code *print_function,uint **arg_list_ptr\n                   )\n\n{\n  bool is_positive;\n  byte byte_value;\n  int result;\n  code *output;\n  char *hex_chars;\n  int return_value;\n  char *current_char;\n  uint value;\n  uint *arg_ptr;\n  uint base;\n  uint **arg_ptr_ptr;\n  char **str_ptr;\n  uint length;\n  char *output_ptr;\n  code *local_print_func;\n  \n  byte_value = *(byte *)(arg_list + 6);\n  current_char = (char *)((int)arg_list + 0x43);\n  local_print_func = print_function;\n  if (0x78 < byte_value) {\nswitch_case1:\n    *(byte *)((int)arg_list + 0x42) = byte_value;\nlabel1:\n    current_char = (char *)((int)arg_list + 0x42);\n    value = 1;\nlabel3:\n    arg_list[4] = value;\n    *(undefined *)((int)arg_list + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byte_value < 99) {\n    if (byte_value == 0) goto label2;\n    if (byte_value == 0x58) {\n      hex_chars = \"0123456789ABCDEF\";\n      *(undefined *)((int)arg_list + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switch_case1;\n  }\n  switch(byte_value) {\n  case 99:\n    value = **arg_list_ptr;\n    *arg_list_ptr = *arg_list_ptr + 1;\n    *(char *)((int)arg_list + 0x42) = (char)value;\n    goto label1;\n  case 100:\n  case 0x69:\n    base = *arg_list;\n    arg_ptr = *arg_list_ptr;\n    if ((int)(base << 0x18) < 0) {\n      value = *arg_ptr;\n      *arg_list_ptr = arg_ptr + 1;\n    }\n    else {\n      value = *arg_ptr;\n      *arg_list_ptr = arg_ptr + 1;\n      if ((base & 0x40) != 0) {\n        value = (uint)(short)value;\n      }\n    }\n    if ((int)value < 0) {\n      value = -value;\n      *(undefined *)((int)arg_list + 0x43) = 0x2d;\n    }\n    hex_chars = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switch_case1;\n  case 0x6e:\n    arg_ptr_ptr = (uint **)*arg_list_ptr;\n    base = *arg_list;\n    value = arg_list[5];\n    *arg_list_ptr = (uint *)(arg_ptr_ptr + 1);\n    arg_ptr = *arg_ptr_ptr;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *arg_ptr = value;\n    }\n    else {\n      *(short *)arg_ptr = (short)value;\n    }\nlabel2:\n    arg_list[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    arg_ptr = *arg_list_ptr;\n    value = *arg_list;\n    *arg_list_ptr = arg_ptr + 1;\n    if (((int)(value << 0x18) < 0) || (-1 < (int)(value << 0x19))) {\n      value = *arg_ptr;\n    }\n    else {\n      value = (uint)*(ushort *)arg_ptr;\n    }\n    hex_chars = \"0123456789ABCDEF\";\n    if (byte_value == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *arg_list = *arg_list | 0x20;\n  case 0x78:\n    hex_chars = \"0123456789abcdef\";\n    *(undefined *)((int)arg_list + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *arg_list;\n    value = **arg_list_ptr;\n    *arg_list_ptr = *arg_list_ptr + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      value = value & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *arg_list = base | 0x20;\n    }\n    if (value == 0) {\n      *arg_list = *arg_list & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    str_ptr = (char **)*arg_list_ptr;\n    *arg_list_ptr = (uint *)(str_ptr + 1);\n    current_char = *str_ptr;\n    result = memchr(current_char,0,arg_list[1],str_ptr,format_string,arg_list,width);\n    if (result != 0) {\n      arg_list[1] = result - (int)current_char;\n    }\n    value = arg_list[1];\n    goto label3;\n  }\n  *(undefined *)((int)arg_list + 0x43) = 0;\nLAB_00005c36:\n  length = arg_list[1];\n  arg_list[2] = length;\n  if (-1 < (int)length) {\n    *arg_list = *arg_list & 0xfffffffb;\n  }\n  output_ptr = current_char;\n  if ((value != 0) || (length != 0)) {\n    do {\n      output_ptr = output_ptr + -1;\n      *output_ptr = hex_chars[value - base * (value / base)];\n      is_positive = base <= value;\n      value = value / base;\n    } while (is_positive);\n  }\n  if (((base == 8) && ((int)(*arg_list << 0x1f) < 0)) && ((int)arg_list[1] <= (int)arg_list[4])) {\n    output_ptr[-1] = '0';\n    output_ptr = output_ptr + -1;\n  }\n  arg_list[4] = (int)current_char - (int)output_ptr;\n  current_char = output_ptr;\nLAB_00005c84:\n  result = _printf_common(format_string,arg_list,&local_print_func,width,print_function);\n  if ((result == -1) || (result = (*print_function)(format_string,width,current_char,arg_list[4]), result == -1)) {\nLAB_00005c98:\n    output = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*arg_list << 0x1e) < 0) {\n      for (result = 0; result < (int)(arg_list[3] - (int)local_print_func); result = result + 1) {\n        return_value = (*print_function)(format_string,width,(int)arg_list + 0x19,1);\n        if (return_value == -1) goto LAB_00005c98;\n      }\n    }\n    output = (code *)arg_list[3];\n    if ((int)(code *)arg_list[3] < (int)local_print_func) {\n      output = local_print_func;\n    }\n  }\n  return output;\n}\n\n",
            "current_name": "print_formatted_value_00005b34",
            "entrypoint": "0x00005b34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005b34": "print_formatted_value_00005b34",
                "LAB_00005bdc": "label1",
                "LAB_00005d06": "label2",
                "LAB_00005d28": "label3",
                "bVar1": "is_positive",
                "bVar2": "byte_value",
                "iVar3": "result",
                "iVar6": "return_value",
                "local_24": "local_print_func",
                "param_1": "format_string",
                "param_2": "arg_list",
                "param_3": "width",
                "param_4": "print_function",
                "param_5": "arg_list_ptr",
                "pcVar14": "output_ptr",
                "pcVar4": "output",
                "pcVar5": "hex_chars",
                "pcVar7": "current_char",
                "ppcVar12": "str_ptr",
                "ppuVar11": "arg_ptr_ptr",
                "puVar9": "arg_ptr",
                "switchD_00005b70_caseD_65": "switch_case1",
                "uVar10": "base",
                "uVar13": "length",
                "uVar8": "value",
                "undefined4": "data_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005e10": {
            "additional_data": {
                "FUN_000042a4": {
                    "reset_stream": 1
                },
                "FUN_00005e10": {
                    "read_byte": 10,
                    "read_byte_from_buffer": 2,
                    "read_byte_from_file": 1,
                    "read_byte_from_stream": 11,
                    "read_from_file": 1,
                    "read_next_byte": 6
                },
                "FUN_00006768": {
                    "initialize": 1
                },
                "__sinit": {
                    "initialize_stream": 1
                },
                "__srefill_r": {
                    "refill_stream": 1
                },
                "iVar1": {
                    "error": 2,
                    "error_code": 1,
                    "error_status": 1,
                    "read_result": 2,
                    "read_status": 1,
                    "refill_result": 2,
                    "result": 13,
                    "return_code": 1,
                    "return_value": 2,
                    "status": 6
                },
                "param_1": {
                    "buffer": 2,
                    "file_handle": 4,
                    "file_pointer": 2,
                    "file_ptr": 1,
                    "file_stream": 1,
                    "input_stream": 1,
                    "ptr": 1,
                    "stream": 15,
                    "stream_handle": 1,
                    "stream_pointer": 3
                },
                "param_2": {
                    "buffer": 20,
                    "buffer_array": 1,
                    "buffer_pointer": 1,
                    "byte_stream": 1,
                    "data": 1,
                    "read_pointer": 1,
                    "stream_buffer": 5,
                    "stream_data_pointer": 1
                },
                "pbVar3": {
                    "byte_pointer": 1,
                    "byte_ptr": 2,
                    "byte_value": 1,
                    "current_byte": 25,
                    "next_byte": 1,
                    "read_byte": 1
                },
                "uVar2": {
                    "byte_read": 10,
                    "byte_value": 9,
                    "next_byte": 4,
                    "read_byte": 4,
                    "result": 4
                }
            },
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_00004418"
            ],
            "code": "\nuint read_byte_from_stream_00005e10(int stream,byte **buffer)\n\n{\n  int result;\n  uint byte_read;\n  byte *current_byte;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    initialize_stream();\n  }\n  if (buffer == (byte **)&DAT_000079b8) {\n    buffer = *(byte ***)(stream + 4);\n  }\n  else if (buffer == (byte **)&DAT_000079d8) {\n    buffer = *(byte ***)(stream + 8);\n  }\n  else if (buffer == (byte **)&DAT_00007998) {\n    buffer = *(byte ***)(stream + 0xc);\n  }\n  result = refill_stream(stream,buffer);\n  if (result == 0) {\n    buffer[1] = buffer[1] + -1;\n    current_byte = *buffer;\n    *buffer = current_byte + 1;\n    byte_read = (uint)*current_byte;\n  }\n  else {\n    byte_read = 0xffffffff;\n  }\n  return byte_read;\n}\n\n",
            "current_name": "read_byte_from_stream_00005e10",
            "entrypoint": "0x00005e10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005e10": "read_byte_from_stream_00005e10",
                "__sinit": "initialize_stream",
                "__srefill_r": "refill_stream",
                "iVar1": "result",
                "param_1": "stream",
                "param_2": "buffer",
                "pbVar3": "current_byte",
                "uVar2": "byte_read"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005e68": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "symbol_table": 1
                },
                "FUN_00005e68": {
                    "extract_data": 1,
                    "extract_data_from_binary": 2,
                    "parse_and_scan_input": 2,
                    "parse_input": 4,
                    "parse_input_and_save": 1,
                    "process_data": 2,
                    "process_input": 1,
                    "process_input_data": 1,
                    "read_and_scan_input": 1,
                    "scan_and_assign_values": 1,
                    "scan_and_initialize": 1,
                    "scan_and_parse_input": 1,
                    "scan_and_process_data": 1,
                    "scan_and_process_input": 2,
                    "scan_and_read": 1,
                    "scan_and_return": 1,
                    "scan_and_store_data": 2,
                    "scan_input": 2,
                    "some_function": 1
                },
                "__ssvfiscanf_r": {
                    "custom_scanf": 1
                },
                "local_38": {
                    "constant_4": 1,
                    "constant_value4": 1,
                    "constant_value_4": 1,
                    "constant_zero": 1,
                    "counter2": 2,
                    "initialized_var2": 1,
                    "local_var2": 3,
                    "local_variable2": 1,
                    "local_variable8": 1,
                    "temp_value": 1,
                    "temp_var9": 1,
                    "temp_variable": 1,
                    "unknown_var2": 1,
                    "unused_var": 1,
                    "unused_variable": 1,
                    "var2": 1,
                    "variable2": 1,
                    "variable_value2": 1,
                    "zero": 2,
                    "zero2": 4,
                    "zero_2": 2,
                    "zero_value_copy": 1
                },
                "local_4c": {
                    "constant_3": 1,
                    "constant_value3": 1,
                    "constant_value_3": 1,
                    "constant_zero": 1,
                    "count_value": 1,
                    "counter": 2,
                    "initialized_var": 1,
                    "local_var1": 3,
                    "local_variable1": 1,
                    "local_variable7": 1,
                    "temp_ptr": 1,
                    "temp_var8": 1,
                    "unknown_var1": 1,
                    "var1": 1,
                    "variable1": 1,
                    "variable_value1": 1,
                    "zero": 7,
                    "zero1": 1,
                    "zero_value": 1
                },
                "local_5c": {
                    "buffer": 1,
                    "local_pointer": 1,
                    "local_variable6": 1,
                    "pointer_value": 1,
                    "string": 1,
                    "string_address": 1,
                    "string_constant": 4,
                    "string_pointer": 13,
                    "string_ptr": 7,
                    "temp_var7": 1
                },
                "local_6c": {
                    "input_length": 1,
                    "input_length_copy": 2,
                    "length": 1,
                    "length_copy": 4,
                    "local_string_length": 1,
                    "local_var4": 1,
                    "local_variable9": 1,
                    "output_length_copy": 1,
                    "parsed_param_4": 1,
                    "processed_length": 1,
                    "scan_result_copy": 1,
                    "str_len_copy": 1,
                    "str_len_result": 1,
                    "str_length_copy": 2,
                    "string_length_copy": 8,
                    "string_length_duplicate": 1,
                    "temp_var6": 1
                },
                "local_70": {
                    "data_copy_copy": 1,
                    "data_ptr_copy": 2,
                    "input1_copy2": 1,
                    "input_1_copy_2": 1,
                    "input_buffer_2": 1,
                    "input_buffer_copy": 1,
                    "input_buffer_duplicate": 1,
                    "input_copy": 2,
                    "input_copy2": 1,
                    "input_copy_2": 1,
                    "input_copy_again": 1,
                    "input_data_copy": 1,
                    "input_param_copy2": 1,
                    "input_ptr2": 1,
                    "input_value_copy": 1,
                    "input_value_copy2": 1,
                    "local_input_param2": 1,
                    "local_variable2": 1,
                    "param1_copy": 1,
                    "parsed_input_1_duplicate": 1,
                    "parsed_param_3": 1,
                    "processed_input2": 1,
                    "ptr_input1_copy": 1,
                    "source_address_copy": 1,
                    "temp_var5": 1
                },
                "local_72": {
                    "char_offset": 1,
                    "constant2": 5,
                    "constant_2": 2,
                    "constant_flag": 1,
                    "constant_minus_one": 1,
                    "constant_value": 3,
                    "constant_value2": 5,
                    "constant_value_2": 2,
                    "default_flag": 1,
                    "default_value": 1,
                    "error_code": 1,
                    "error_value": 1,
                    "flag": 1,
                    "local_var3": 1,
                    "max_value": 1,
                    "temp_var4": 1,
                    "unknown_var3": 1,
                    "unused_var2": 1
                },
                "local_74": {
                    "buffer_size": 1,
                    "constant": 5,
                    "constant1": 1,
                    "constant_1": 2,
                    "constant_204": 1,
                    "constant_value": 8,
                    "constant_value1": 1,
                    "default_value": 1,
                    "format_length": 1,
                    "len_value": 1,
                    "temp_var3": 1
                },
                "local_7c": {
                    "copy_length": 1,
                    "input_length": 4,
                    "length": 4,
                    "local_variable5": 1,
                    "parsed_param_2": 1,
                    "scan_result": 1,
                    "str_len": 1,
                    "str_len_result": 1,
                    "str_length": 2,
                    "string_length": 14,
                    "temp_var2": 1
                },
                "local_80": {
                    "data_copy": 1,
                    "data_ptr": 2,
                    "input1_copy": 1,
                    "input_1_copy": 1,
                    "input_buffer_1": 1,
                    "input_buffer_copy": 2,
                    "input_copy": 5,
                    "input_data_ptr": 1,
                    "input_param_copy": 2,
                    "input_ptr1": 1,
                    "input_value": 1,
                    "input_value_copy": 1,
                    "local_input_param1": 1,
                    "local_variable1": 1,
                    "param1_copy": 1,
                    "parsed_input_1": 1,
                    "parsed_param_1": 1,
                    "processed_input1": 1,
                    "ptr_input1": 1,
                    "source_address_copy": 1,
                    "temp_var1": 1
                },
                "param_1": {
                    "data": 1,
                    "input": 4,
                    "input1": 4,
                    "input_1": 4,
                    "input_buffer": 2,
                    "input_data": 3,
                    "input_param": 3,
                    "input_param1": 4,
                    "input_param_1": 2,
                    "input_ptr": 1,
                    "input_value": 2,
                    "source_address": 1
                },
                "param_2": {
                    "buffer": 1,
                    "byte_array": 1,
                    "destination_address": 1,
                    "format_ptr": 1,
                    "format_specifier": 3,
                    "format_string": 5,
                    "input2": 4,
                    "input_2": 4,
                    "input_format": 1,
                    "input_param2": 4,
                    "input_param_2": 2,
                    "output_param": 1,
                    "scan_format": 1,
                    "scan_param": 1,
                    "string_value": 1
                },
                "param_3": {
                    "arg1": 2,
                    "input3": 4,
                    "input_3": 4,
                    "input_length": 1,
                    "input_param3": 4,
                    "input_param_3": 2,
                    "length": 1,
                    "length_param": 1,
                    "offset_value": 1,
                    "output_data": 1,
                    "param1_ptr": 1,
                    "param3": 3,
                    "param_3": 2,
                    "param_a": 1,
                    "scan_param1": 1,
                    "string_data": 1,
                    "string_length": 1
                },
                "param_4": {
                    "arg2": 2,
                    "input4": 4,
                    "input_4": 4,
                    "input_param4": 4,
                    "input_param_4": 2,
                    "int_array": 1,
                    "length_value": 1,
                    "offset_param": 1,
                    "output_format": 1,
                    "output_length": 1,
                    "param2_ptr": 1,
                    "param4": 3,
                    "param_4": 2,
                    "param_b": 1,
                    "pointer": 2,
                    "scan_param2": 1
                },
                "uStack_4": {
                    "input_4_copy": 2,
                    "length_copy_again": 1,
                    "local_variable4": 1,
                    "param2_value": 1,
                    "param4_copy": 2,
                    "param_4": 1,
                    "param_4_copy": 3,
                    "param_b": 1,
                    "pointer_2": 1,
                    "scan_res2": 1,
                    "stack_var2": 1,
                    "stack_var_2": 1,
                    "temp_var11": 1
                },
                "uStack_8": {
                    "input_3_copy": 2,
                    "local_variable3": 1,
                    "offset_copy": 1,
                    "param1_value": 1,
                    "param3_copy": 2,
                    "param_3": 1,
                    "param_3_copy": 3,
                    "param_a": 1,
                    "pointer_1": 1,
                    "scan_res1": 1,
                    "stack_var1": 1,
                    "stack_var_1": 1,
                    "temp_var10": 1
                }
            },
            "called": [
                "FUN_000061cc",
                "FUN_00005ecc"
            ],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid scan_and_parse_input_00005e68(undefined4 input_1,undefined4 format_string,undefined4 input3,undefined4 input_4)\n\n{\n  undefined4 input_copy;\n  undefined4 string_length;\n  undefined2 constant_value;\n  undefined2 constant2;\n  undefined4 input_copy;\n  undefined4 string_length_copy;\n  undefined *string_pointer;\n  undefined4 zero;\n  undefined4 zero2;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  constant_value = 0x204;\n  input_copy = input_1;\n  input_copy = input_1;\n  param_3_copy = input3;\n  param_4_copy = input_4;\n  string_length = strlen();\n  string_pointer = &LAB_00004dea_1;\n  zero = 0;\n  zero2 = 0;\n  constant2 = 0xffff;\n  string_length_copy = string_length;\n  custom_scanf(symbol_table[16].r_offset,&input_copy,format_string,&param_3_copy);\n  return;\n}\n\n",
            "current_name": "scan_and_parse_input_00005e68",
            "entrypoint": "0x00005e68",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "symbol_table",
                "FUN_00005e68": "scan_and_parse_input_00005e68",
                "__ssvfiscanf_r": "custom_scanf",
                "local_38": "zero2",
                "local_4c": "zero",
                "local_5c": "string_pointer",
                "local_6c": "string_length_copy",
                "local_70": "input_copy",
                "local_72": "constant2",
                "local_74": "constant_value",
                "local_7c": "string_length",
                "local_80": "input_copy",
                "param_1": "input_1",
                "param_2": "format_string",
                "param_3": "input3",
                "param_4": "input_4",
                "uStack_4": "param_4_copy",
                "uStack_8": "param_3_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "additional_data": {
                "FUN_00005ebc": {
                    "copy_string": 31
                },
                "cVar1": {
                    "character": 1,
                    "current_char": 22,
                    "current_character": 8
                },
                "param_1": {
                    "dest": 4,
                    "destination": 27
                },
                "param_2": {
                    "source": 27,
                    "src": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid copy_string_00005ebc(char *destination,char *source)\n\n{\n  char current_char;\n  \n  do {\n    current_char = *source;\n    *destination = current_char;\n    source = source + 1;\n    destination = destination + 1;\n  } while (current_char != '\\0');\n  return;\n}\n\n",
            "current_name": "copy_string_00005ebc",
            "entrypoint": "0x00005ebc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "cVar1": "current_char",
                "param_1": "destination",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "additional_data": {
                "FUN_00005ecc": {
                    "find_end_of_string": 13,
                    "find_last_character": 1,
                    "find_last_character_index": 1,
                    "find_null_terminated_string": 1,
                    "find_string_length": 3,
                    "find_terminating_zero": 1,
                    "get_last_character_index": 1,
                    "get_string_length": 6,
                    "reverse_string": 3,
                    "string_length": 1
                },
                "cVar1": {
                    "char": 2,
                    "character": 2,
                    "current_char": 13,
                    "current_char_value": 3,
                    "current_character": 10,
                    "current_character_value": 1
                },
                "param_1": {
                    "input_string": 15,
                    "str": 6,
                    "string": 10
                },
                "pcVar2": {
                    "current_char": 3,
                    "next_char": 13,
                    "next_char_ptr": 2,
                    "next_character": 11,
                    "next_ptr": 1,
                    "p_next_char": 1
                },
                "pcVar3": {
                    "current_address": 1,
                    "current_char": 9,
                    "current_char_ptr": 2,
                    "current_character": 3,
                    "current_index": 1,
                    "current_pointer": 1,
                    "current_position": 4,
                    "current_ptr": 3,
                    "next_char": 1,
                    "p_current_char": 1,
                    "str_ptr": 1,
                    "string_pointer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "code": "\nchar * find_end_of_string_00005ecc(char *input_string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_char;\n  \n  current_char = input_string;\n  do {\n    next_char = current_char + 1;\n    current_char = *current_char;\n    current_char = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "current_name": "find_end_of_string_00005ecc",
            "entrypoint": "0x00005ecc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "cVar1": "current_char",
                "param_1": "input_string",
                "pcVar2": "next_char",
                "pcVar3": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005edc": {
            "additional_data": {
                "FUN_00005edc": {
                    "convert_string_to_int": 2,
                    "convert_string_to_integer": 4,
                    "convert_string_to_number": 1,
                    "convert_to_number": 1,
                    "parse_int": 2,
                    "parse_integer": 6,
                    "parse_integer_from_string": 2,
                    "parse_number": 10,
                    "parse_number_from_string": 1,
                    "parse_unsigned_int": 1,
                    "parse_unsigned_number": 1
                },
                "bVar3": {
                    "is_negative": 19,
                    "negate_flag": 1,
                    "negative": 8,
                    "negative_flag": 2,
                    "negative_number": 1
                },
                "iVar4": {
                    "comparison": 1,
                    "conversion_status": 5,
                    "is_valid": 2,
                    "iteration": 1,
                    "parse_result": 6,
                    "parse_status": 3,
                    "result": 3,
                    "return_value": 2,
                    "status": 7,
                    "valid": 1
                },
                "param_1": {
                    "error_code": 3,
                    "error_message": 1,
                    "output": 6,
                    "parsed_int": 1,
                    "result": 20
                },
                "param_2": {
                    "input": 12,
                    "input_str": 4,
                    "input_string": 12,
                    "string": 3
                },
                "param_3": {
                    "next": 1,
                    "next_byte": 2,
                    "next_char_ptr": 1,
                    "next_input": 3,
                    "next_position": 1,
                    "remainder": 1,
                    "remaining": 4,
                    "remaining_chars": 1,
                    "remaining_input": 2,
                    "remaining_str": 3,
                    "remaining_string": 12
                },
                "param_4": {
                    "base": 31
                },
                "pbVar7": {
                    "curr_char": 1,
                    "current": 1,
                    "current_byte": 9,
                    "current_char": 5,
                    "current_char_pointer": 1,
                    "current_input": 2,
                    "current_pointer": 1,
                    "current_position": 1,
                    "current_ptr": 4,
                    "current_string_ptr": 1,
                    "input_ptr": 1,
                    "ptr": 2,
                    "ptr_input": 1
                },
                "pbVar8": {
                    "char_ptr": 1,
                    "next": 1,
                    "next_byte": 8,
                    "next_byte_ptr": 1,
                    "next_char": 6,
                    "next_char_pointer": 1,
                    "next_input": 1,
                    "next_input_char": 1,
                    "next_pointer": 1,
                    "next_position": 1,
                    "next_ptr": 6,
                    "next_ptr_input": 1,
                    "next_string_ptr": 1
                },
                "uVar1": {
                    "converted_integer": 1,
                    "converted_num": 1,
                    "converted_value": 3,
                    "num": 1,
                    "parsed_integer": 4,
                    "parsed_number": 5,
                    "parsed_value": 8,
                    "result": 7,
                    "value": 1
                },
                "uVar2": {
                    "ch": 5,
                    "char_value": 1,
                    "character": 1,
                    "current_byte": 1,
                    "current_char": 22,
                    "current_character": 1
                },
                "uVar5": {
                    "char_value": 1,
                    "converted_digit": 1,
                    "digit": 6,
                    "digit_value": 20,
                    "numeric_value": 3
                },
                "uVar6": {
                    "digit_limit": 1,
                    "max_allowed_digit": 1,
                    "max_digit": 1,
                    "max_digit_value": 2,
                    "max_div": 1,
                    "max_divisible": 1,
                    "max_divisible_value": 1,
                    "max_divisor": 4,
                    "max_integer": 1,
                    "max_value": 14,
                    "maximum_value": 1,
                    "numeric_range": 1,
                    "overflow_threshold": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00005fd8"
            ],
            "code": "\nuint parse_number_from_string_00005edc(undefined4 *result,byte *input,byte **remaining_string,uint base)\n\n{\n  uint parsed_value;\n  uint current_char;\n  byte is_negative;\n  int status;\n  uint digit_value;\n  uint max_value;\n  byte *current_byte;\n  byte *next_byte;\n  \n  next_byte = input;\n  do {\n    current_byte = next_byte;\n    next_byte = current_byte + 1;\n    current_char = (uint)*current_byte;\n    is_negative = (&DAT_00007a99)[current_char] & 8;\n  } while (((&DAT_00007a99)[current_char] & 8) != 0);\n  if (current_char == 0x2d) {\n    current_char = (uint)*next_byte;\n    is_negative = 1;\n    next_byte = current_byte + 2;\n  }\n  else if (current_char == 0x2b) {\n    current_char = (uint)*next_byte;\n    next_byte = current_byte + 2;\n  }\n  if (base == 0) {\n    if (current_char != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (current_char != 0x30)) goto LAB_00005f26;\n  if ((*next_byte & 0xdf) == 0x58) {\n    current_char = (uint)next_byte[1];\n    base = 0x10;\n    next_byte = next_byte + 2;\n  }\n  else {\n    current_char = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  max_value = 0xffffffff / base;\n  parsed_value = 0;\n  do {\n    digit_value = current_char - 0x30;\n    if (9 < digit_value) {\n      if (current_char - 0x41 < 0x1a) {\n        digit_value = current_char - 0x37;\n      }\n      else {\n        if (0x19 < current_char - 0x61) break;\n        digit_value = current_char - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit_value) break;\n    if (((status < 0) || (max_value < parsed_value)) ||\n       ((max_value == parsed_value && ((int)~(base * max_value) < (int)digit_value)))) {\n      status = -1;\n    }\n    else {\n      parsed_value = parsed_value * base + digit_value;\n      status = 1;\n    }\n    current_char = (uint)*next_byte;\n    next_byte = next_byte + 1;\n  } while( true );\n  if (status < 0) {\n    *result = 0x22;\n    parsed_value = 0xffffffff;\n    if (remaining_string == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      parsed_value = -parsed_value;\n    }\n    if (remaining_string == (byte **)0x0) {\n      return parsed_value;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input = next_byte + -1;\nLAB_00005fb8:\n  *remaining_string = input;\n  return parsed_value;\n}\n\n",
            "current_name": "parse_number_from_string_00005edc",
            "entrypoint": "0x00005edc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005edc": "parse_number_from_string_00005edc",
                "bVar3": "is_negative",
                "iVar4": "status",
                "param_1": "result",
                "param_2": "input",
                "param_3": "remaining_string",
                "param_4": "base",
                "pbVar7": "current_byte",
                "pbVar8": "next_byte",
                "uVar1": "parsed_value",
                "uVar2": "current_char",
                "uVar5": "digit_value",
                "uVar6": "max_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "additional_data": {
                "Elf32_Rel_ARRAY_1fff0200": {
                    "elf_rel_array": 1,
                    "rel_array": 1,
                    "relocation_table": 1
                },
                "FUN_00005edc": {
                    "convert_byte_array_to_string": 1,
                    "convert_byte_array_to_unsigned_int": 1,
                    "convert_string_to_unsigned_int_helper": 1,
                    "convert_unsigned_long": 1,
                    "parse_relocation_data": 1,
                    "parse_string": 1,
                    "parse_unsigned": 1,
                    "parse_unsigned_int": 3,
                    "parse_unsigned_integer": 5,
                    "parse_unsigned_integers": 1,
                    "parse_value_from_str": 1,
                    "process_relocation_entry": 1
                },
                "FUN_00005fd8": {
                    "convert_and_return_unsigned_long": 1,
                    "convert_offset_to_string": 1,
                    "convert_offset_to_unsigned_int": 1,
                    "convert_string_to_unsigned_int": 3,
                    "convert_string_to_unsigned_long": 3,
                    "parse_and_convert_string_to_unsigned": 1,
                    "parse_and_convert_string_to_unsigned_int": 2,
                    "parse_and_convert_unsigned": 1,
                    "parse_and_convert_value": 1,
                    "parse_elf32_rel_array": 1,
                    "parse_relocation_entry": 5,
                    "parse_relocation_table_entry": 2,
                    "parse_unsigned_integer": 1,
                    "parse_unsigned_long": 5,
                    "parse_unsigned_number": 2,
                    "parse_unsigned_value": 1
                },
                "param_1": {
                    "converted_string": 1,
                    "input_array": 1,
                    "input_pointer": 2,
                    "output": 1,
                    "output_address": 1,
                    "output_array": 1,
                    "output_ptr": 2,
                    "output_unsigned_int": 1,
                    "output_value": 1,
                    "param1": 2,
                    "param_ptr": 1,
                    "pointer": 1,
                    "pointer_param": 1,
                    "relocation_address": 1,
                    "result": 10,
                    "source": 1,
                    "src": 1,
                    "str_pointer": 1,
                    "value": 1
                },
                "param_2": {
                    "buffer": 2,
                    "byte_array": 1,
                    "byte_array_param": 1,
                    "byte_pointer": 1,
                    "byte_ptr": 1,
                    "data": 1,
                    "data_section": 1,
                    "dst": 1,
                    "input": 1,
                    "input_array": 1,
                    "input_buffer": 1,
                    "input_bytes": 2,
                    "input_data": 1,
                    "input_string": 5,
                    "param2": 2,
                    "source": 1,
                    "source_string": 1,
                    "str": 4,
                    "str_end": 1,
                    "string": 1,
                    "string_buffer": 1
                },
                "param_3": {
                    "base": 1,
                    "byte_array_ptr": 1,
                    "byte_pointer_param": 1,
                    "current_byte": 1,
                    "current_element": 1,
                    "end_pointer": 3,
                    "end_ptr": 3,
                    "endptr": 7,
                    "new_current_byte": 1,
                    "next": 1,
                    "next_input_data_ptr": 1,
                    "output": 1,
                    "output_buffer": 1,
                    "output_bytes": 1,
                    "output_pointer": 1,
                    "p_pointer": 1,
                    "param3": 2,
                    "pointer_pointer": 1,
                    "ptr_to_byte_pointer": 1,
                    "source_ptr": 1
                },
                "param_4": {
                    "array_length": 1,
                    "array_size": 2,
                    "base": 3,
                    "buffer_size": 1,
                    "byte_count": 1,
                    "count": 1,
                    "data_offset": 1,
                    "max_digits": 1,
                    "max_length": 1,
                    "max_size": 1,
                    "max_string_length": 1,
                    "radix": 1,
                    "size": 2,
                    "size_param": 1
                },
                "r_offset": {
                    "entry_offset": 1,
                    "offset": 1,
                    "rel_offset": 1
                },
                "undefined4": {
                    "result": 1
                }
            },
            "called": [
                "FUN_00005edc"
            ],
            "calling": [
                "FUN_00005100"
            ],
            "code": "\nvoid convert_offset_to_unsigned_int_00005fd8(result result,result input_string,result endptr)\n\n{\n  _strtoul_l_isra_0(elf_rel_array[16].offset,result,input_string,endptr);\n  return;\n}\n\n",
            "current_name": "convert_offset_to_unsigned_int_00005fd8",
            "entrypoint": "0x00005fd8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_1fff0200": "elf_rel_array",
                "FUN_00005fd8": "convert_offset_to_unsigned_int_00005fd8",
                "param_1": "result",
                "param_2": "input_string",
                "param_3": "endptr",
                "r_offset": "offset",
                "undefined4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005fec": {
            "additional_data": {
                "FUNC_000045e8": {
                    "": 1,
                    "do_something": 6,
                    "execute_additional_function": 1,
                    "execute_function": 1,
                    "execute_some_operation": 1,
                    "function_000045e8": 1,
                    "function_one": 1,
                    "helper_function": 1,
                    "initialize": 6,
                    "initialize_function": 1,
                    "initialize_system": 1,
                    "perform_action": 1,
                    "perform_additional_operation": 1,
                    "perform_additional_task": 1,
                    "perform_cleanup_operation": 1,
                    "perform_initialization": 1,
                    "perform_task": 1,
                    "reset_function": 1,
                    "some_function": 1,
                    "sub_function": 2
                },
                "FUN_00005fec": {
                    "acquire_lock_recursive": 1,
                    "acquire_recursive_lock": 29,
                    "lock_acquire_recursive": 1
                },
                "__retarget_lock_acquire_recursive": {
                    "acquire_recursive_lock": 5,
                    "lock_acquire_recursive": 1
                }
            },
            "called": [
                "FUN_000045e8"
            ],
            "calling": [
                "FUN_0000562c"
            ],
            "code": "\nvoid acquire_lock_recursive_00005fec(void)\n\n{\n  acquire_recursive_lock(0x1fff0de6);\n  return;\n}\n\n",
            "current_name": "acquire_lock_recursive_00005fec",
            "entrypoint": "0x00005fec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005fec": "acquire_lock_recursive_00005fec",
                "__retarget_lock_acquire_recursive": "acquire_recursive_lock"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "additional_data": {
                "0x1fff0de6": {
                    "lock_id": 1,
                    "lock_parameter": 1
                },
                "FUNC_000045ec": {
                    "": 1,
                    "disable_interrupts": 1,
                    "do_something": 4,
                    "execute_action": 1,
                    "execute_callback": 1,
                    "execute_cleanup": 1,
                    "execute_code": 1,
                    "execute_func": 1,
                    "execute_function": 2,
                    "execute_lock_release": 1,
                    "execute_sub_function": 1,
                    "function": 1,
                    "function_a": 2,
                    "helper_function": 1,
                    "nested_function": 1,
                    "perform_action": 2,
                    "perform_cleanup": 1,
                    "perform_function": 1,
                    "perform_initialization": 1,
                    "perform_operation": 2,
                    "perform_sub_function": 1,
                    "reinitialize_function": 1
                },
                "FUN_00005ff8": {
                    "release_lock": 7,
                    "release_lock_recursive": 2,
                    "release_recursive_lock": 21
                },
                "__retarget_lock_release_recursive": {
                    "": 1,
                    "release_lock_recursive": 1,
                    "release_recursive_lock": 5
                }
            },
            "called": [
                "FUN_000045ec"
            ],
            "calling": [
                "FUN_0000562c"
            ],
            "code": "\nvoid release_lock_recursive_00005ff8(void)\n\n{\n  release_recursive_lock(0x1fff0de6);\n  return;\n}\n\n",
            "current_name": "release_lock_recursive_00005ff8",
            "entrypoint": "0x00005ff8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00005ff8": "release_lock_recursive_00005ff8",
                "__retarget_lock_release_recursive": "release_recursive_lock"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006010": {
            "additional_data": {
                "FUN_00006010": {
                    "find_byte_in_buffer": 1,
                    "find_byte_sequence": 20,
                    "find_last_byte_index": 1,
                    "find_last_occurrence": 1,
                    "find_next_byte": 1,
                    "find_occurrence": 1,
                    "find_subsequence": 1,
                    "reverse_byte_sequence": 1,
                    "reverse_find_byte": 1,
                    "reverse_search_byte": 1,
                    "reverse_search_byte_sequence": 1,
                    "search_byte_sequence": 1
                },
                "bVar1": {
                    "byte_value": 4,
                    "current_byte": 26,
                    "found_byte": 1
                },
                "bVar13": {
                    "b_var13": 1,
                    "bit0_check": 1,
                    "bit0_set": 1,
                    "bool_1": 1,
                    "byte1_condition": 1,
                    "byte_condition_result_1": 1,
                    "byte_flag_1": 1,
                    "check_1": 1,
                    "is_byte_equal": 1,
                    "is_empty1": 1,
                    "is_first_byte_nonzero": 1,
                    "is_nonzero": 1,
                    "is_second_byte_not_zero": 1,
                    "is_xor_result2_byte_zero": 1,
                    "negate_1": 1,
                    "non_zero_check_1": 1,
                    "nonzero_first_byte": 1,
                    "result_flag_1": 1,
                    "second_byte_match_bool": 1,
                    "temp1_bool": 1,
                    "temp_2_bit_0": 1,
                    "tmp1_flag": 1,
                    "tmp_bool_1": 1,
                    "xor_flag1": 1,
                    "xor_result_2_nonzero_0": 1
                },
                "bVar14": {
                    "b_var14": 1,
                    "bit1_set": 1,
                    "bit8_check": 1,
                    "bool_2": 1,
                    "byte2_condition": 1,
                    "byte_condition_result_2": 1,
                    "byte_flag_2": 1,
                    "check_2": 1,
                    "is_byte_equal": 1,
                    "is_empty2": 1,
                    "is_nonzero": 1,
                    "is_nonzero_2": 1,
                    "is_second_byte_nonzero": 1,
                    "is_second_byte_not_zero_temp": 1,
                    "is_xor_result2_shift_8_zero": 1,
                    "negate_2": 1,
                    "non_zero_check_2": 1,
                    "nonzero_second_byte": 1,
                    "result_flag_2": 1,
                    "temp2_bool": 1,
                    "temp_2_bit_8": 1,
                    "third_byte_match_bool": 1,
                    "tmp2_flag": 1,
                    "tmp_bool_2": 1,
                    "xor_flag2": 1,
                    "xor_result_2_nonzero_1": 1
                },
                "bVar15": {
                    "b_var15": 1,
                    "bit16_check": 1,
                    "bit2_set": 1,
                    "bool_3": 1,
                    "byte3_condition": 1,
                    "byte_condition_result_3": 1,
                    "byte_flag_3": 1,
                    "check_3": 1,
                    "fourth_byte_match_bool": 1,
                    "is_byte_equal": 1,
                    "is_empty3": 1,
                    "is_nonzero": 1,
                    "is_nonzero_3": 1,
                    "is_third_byte_nonzero": 1,
                    "is_third_byte_not_zero_temp": 1,
                    "is_xor_result2_shift_16_zero": 1,
                    "negate_3": 1,
                    "non_zero_check_3": 1,
                    "nonzero_third_byte": 1,
                    "result_flag_3": 1,
                    "temp3_bool": 1,
                    "temp_2_bit_16": 1,
                    "tmp3_flag": 1,
                    "tmp_bool_3": 1,
                    "xor_flag3": 1,
                    "xor_result_2_nonzero_2": 1
                },
                "bVar16": {
                    "b_var16": 1,
                    "bit24_check": 1,
                    "bit3_set": 1,
                    "bool_4": 1,
                    "byte4_condition": 1,
                    "byte_condition_result_4": 1,
                    "byte_flag_4": 1,
                    "check_4": 1,
                    "fifth_byte_match_bool": 1,
                    "is_byte_equal": 1,
                    "is_empty4": 1,
                    "is_fourth_byte_nonzero": 1,
                    "is_fourth_byte_not_zero_temp": 1,
                    "is_nonzero": 1,
                    "is_nonzero_4": 1,
                    "is_xor_result2_shift_24_zero": 1,
                    "negate_4": 1,
                    "non_zero_check_4": 1,
                    "nonzero_fourth_byte": 1,
                    "result_flag_4": 1,
                    "temp4_bool": 1,
                    "temp_2_bit_24": 1,
                    "tmp4_flag": 1,
                    "tmp_bool_4": 1,
                    "xor_flag4": 1,
                    "xor_result_2_nonzero_3": 1
                },
                "bVar17": {
                    "temp": 1
                },
                "cVar2": {
                    "bit0": 2,
                    "bit_0": 2,
                    "byte0_condition": 1,
                    "byte_check_1": 1,
                    "byte_condition_1": 1,
                    "byte_zero_flag": 1,
                    "c_var2": 1,
                    "char_2": 1,
                    "char_check_1": 1,
                    "check_byte_1": 1,
                    "first_bit": 1,
                    "first_byte_match": 1,
                    "flag1": 1,
                    "flag_1": 1,
                    "high_order_1": 1,
                    "is_byte_equal": 1,
                    "is_byte_zero": 1,
                    "is_current_byte_zero": 1,
                    "is_zero": 2,
                    "is_zero_check_1": 1,
                    "is_zero_lower8": 1,
                    "mask1": 1,
                    "mask_0x01": 1,
                    "mask_1": 1,
                    "temp1": 1
                },
                "cVar3": {
                    "bit1": 1,
                    "bit8": 1,
                    "bit_8": 2,
                    "byte1_condition": 1,
                    "byte_check_2": 1,
                    "byte_condition_2": 1,
                    "byte_zero_flag_8": 1,
                    "c_var3": 1,
                    "char_3": 1,
                    "char_check_2": 1,
                    "check_byte_2": 1,
                    "flag2": 1,
                    "flag_2": 1,
                    "high_order_2": 1,
                    "is_byte_equal": 1,
                    "is_byte_zero_8": 1,
                    "is_current_byte_shift_8_zero": 1,
                    "is_zero": 1,
                    "is_zero_2": 1,
                    "is_zero_check_2": 1,
                    "is_zero_upper8": 1,
                    "mask2": 1,
                    "mask_0x02": 1,
                    "mask_2": 1,
                    "second_bit": 1,
                    "second_byte_match": 1,
                    "temp2": 1
                },
                "cVar4": {
                    "bit16": 1,
                    "bit2": 1,
                    "bit_16": 2,
                    "byte2_condition": 1,
                    "byte_check_3": 1,
                    "byte_condition_3": 1,
                    "byte_zero_flag_16": 1,
                    "c_var4": 1,
                    "char_4": 1,
                    "char_check_3": 1,
                    "check_byte_3": 1,
                    "flag3": 1,
                    "flag_3": 1,
                    "high_order_3": 1,
                    "is_byte_equal": 1,
                    "is_byte_zero_16": 1,
                    "is_current_byte_shift_16_zero": 1,
                    "is_zero": 1,
                    "is_zero_3": 1,
                    "is_zero_check_3": 1,
                    "is_zero_upper16": 1,
                    "mask3": 1,
                    "mask_0x04": 1,
                    "mask_3": 1,
                    "temp3": 1,
                    "third_bit": 1,
                    "third_byte_match": 1
                },
                "cVar5": {
                    "bit24": 1,
                    "bit3": 1,
                    "bit_24": 2,
                    "byte3_condition": 1,
                    "byte_check_4": 1,
                    "byte_condition_4": 1,
                    "byte_zero_flag_24": 1,
                    "c_var5": 1,
                    "char_5": 1,
                    "char_check_4": 1,
                    "check_byte_4": 1,
                    "flag4": 1,
                    "flag_4": 1,
                    "fourth_bit": 1,
                    "fourth_byte_match": 1,
                    "high_order_4": 1,
                    "is_byte_equal": 1,
                    "is_byte_zero_24": 1,
                    "is_current_byte_shift_24_zero": 1,
                    "is_zero": 1,
                    "is_zero_4": 1,
                    "is_zero_check_4": 1,
                    "is_zero_upper24": 1,
                    "mask4": 1,
                    "mask_0x08": 1,
                    "mask_4": 1,
                    "temp4": 1
                },
                "param_1": {
                    "array": 2,
                    "buffer": 5,
                    "byte_sequence": 1,
                    "data": 14,
                    "data_ptr": 2,
                    "input": 1,
                    "input_array": 3,
                    "input_ptr": 1,
                    "sequence": 2
                },
                "param_2": {
                    "byte_to_find": 13,
                    "byte_value": 2,
                    "search_byte": 4,
                    "target": 2,
                    "target_byte": 10
                },
                "param_3": {
                    "array_length": 3,
                    "array_size": 1,
                    "buffer_length": 4,
                    "data_length": 2,
                    "data_size": 3,
                    "length": 16,
                    "size": 2
                },
                "pbVar6": {
                    "current_byte": 1,
                    "current_location": 1,
                    "current_pointer": 1,
                    "next_byte": 10,
                    "next_byte_pointer": 1,
                    "next_byte_ptr": 1,
                    "next_data_pointer": 1,
                    "result": 8,
                    "result_pointer": 1,
                    "result_ptr": 6
                },
                "pbVar8": {
                    "current_byte": 1,
                    "end_ptr": 1,
                    "found_byte": 1,
                    "next": 1,
                    "next_byte": 1,
                    "next_pointer": 1,
                    "next_ptr": 2,
                    "next_result": 1,
                    "previous_byte_pointer": 1,
                    "ptr": 1,
                    "result": 8,
                    "result_location": 1,
                    "result_offset": 1,
                    "result_pointer": 1,
                    "result_ptr": 5,
                    "result_ptr_temp": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 1,
                    "temp_result_ptr": 1
                },
                "puVar7": {
                    "buffer_ptr": 1,
                    "byte_ptr": 1,
                    "current": 1,
                    "current_data": 3,
                    "current_int": 1,
                    "current_parameter": 1,
                    "current_pointer": 1,
                    "current_ptr": 9,
                    "current_uint": 2,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "new_input": 1,
                    "next_pointer": 1,
                    "next_sequence": 1,
                    "next_uint": 2,
                    "next_word": 1,
                    "ptr": 2,
                    "temp_ptr": 1
                },
                "uVar10": {
                    "adjusted_length": 1,
                    "aligned_length": 12,
                    "aligned_size": 2,
                    "array_length_aligned": 1,
                    "buffer_length_aligned": 3,
                    "count": 1,
                    "data_length_aligned": 1,
                    "data_size_aligned": 1,
                    "length_aligned": 1,
                    "length_divisible_by_8": 1,
                    "length_mod_8": 1,
                    "loop_count": 2,
                    "mod8_loop": 1,
                    "remaining_data_length": 1,
                    "remaining_length": 2
                },
                "uVar11": {
                    "byte_xor": 1,
                    "current_data_xor": 1,
                    "current_xor_data": 1,
                    "first_xor": 1,
                    "first_xor_result": 1,
                    "mask_result": 1,
                    "result_1": 1,
                    "result_32bit_chunk_0": 1,
                    "result_bitmask": 1,
                    "temp1": 1,
                    "temp_1": 2,
                    "temp_result": 1,
                    "temp_var_1": 1,
                    "tmp1": 1,
                    "tmp_flag_1": 1,
                    "word": 1,
                    "xor_1": 1,
                    "xor_lower8": 1,
                    "xor_result": 4,
                    "xor_result1": 5,
                    "xor_result_1": 3
                },
                "uVar12": {
                    "bit_operation_result": 1,
                    "current_data1_xor": 1,
                    "data_bitmask": 1,
                    "masked_value": 1,
                    "next_xor_data": 1,
                    "result_2": 1,
                    "result_32bit_chunk_1": 1,
                    "second_byte_xor": 1,
                    "second_xor": 1,
                    "second_xor_result": 1,
                    "temp2": 1,
                    "temp_2": 2,
                    "temp_result2": 1,
                    "temp_var_2": 1,
                    "tmp2": 1,
                    "tmp_flag_2": 1,
                    "xor_2": 1,
                    "xor_result2": 6,
                    "xor_result_2": 4,
                    "xor_result_next": 1,
                    "xor_result_temp": 1,
                    "xor_upper8": 1
                },
                "uVar13": {
                    "bitmask13": 1,
                    "combined_result": 1,
                    "flag0": 1,
                    "is_32bit_result": 1,
                    "is_non_zero_lower8": 1,
                    "temp_bool1": 1
                },
                "uVar14": {
                    "bitmask12": 1,
                    "flag1": 1,
                    "is_18bit_result": 1,
                    "is_non_zero_upper8": 1,
                    "temp_bool2": 1
                },
                "uVar15": {
                    "bitmask11": 1,
                    "flag2": 1,
                    "is_26bit_result": 1,
                    "is_non_zero_upper16": 1,
                    "temp_bool3": 1
                },
                "uVar16": {
                    "bitmask10": 1,
                    "flag3": 1,
                    "is_34bit_result": 1,
                    "is_non_zero_upper24": 1,
                    "temp_bool4": 1
                },
                "uVar9": {
                    "alignment": 2,
                    "alignment_check": 1,
                    "alignment_offset": 2,
                    "buffer_alignment": 3,
                    "buffer_offset": 1,
                    "byte_alignment": 4,
                    "bytes_left": 1,
                    "data_alignment": 2,
                    "data_ptr_mod_7": 1,
                    "mod8": 1,
                    "offset": 5,
                    "param1_alignment": 1,
                    "pointer_alignment": 1,
                    "ptr_alignment": 2,
                    "remainder": 3,
                    "unaligned_bytes": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000061cc",
                "FUN_000057f8",
                "FUN_00005b34",
                "FUN_0000656c"
            ],
            "code": "\nbyte * find_byte_sequence_00006010(uint *data,uint byte_to_find,uint length)\n\n{\n  byte current_byte;\n  char is_zero;\n  char bit_8;\n  char bit_16;\n  char bit_24;\n  byte *next_byte;\n  uint *current_ptr;\n  byte *result;\n  uint offset;\n  uint aligned_length;\n  uint xor_result1;\n  uint xor_result2;\n  bool temp_2_bit_0;\n  bool third_byte_match_bool;\n  bool check_3;\n  bool b_var16;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      current_ptr = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      length = length - 1;\n      data = current_ptr;\n    } while (current_byte != byte_to_find);\n  }\n  else {\n    offset = (uint)data & 7;\n    while( true ) {\n      if (offset == 0) {\n        offset = byte_to_find | byte_to_find << 8;\n        offset = offset | offset << 0x10;\n        aligned_length = length & 0xfffffff8;\n        do {\n          current_ptr = data + 2;\n          aligned_length = aligned_length - 8;\n          xor_result1 = *data ^ offset;\n          xor_result2 = data[1] ^ offset;\n          is_zero = -((char)xor_result1 == '\\0');\n          bit_8 = -((char)(xor_result1 >> 8) == '\\0');\n          bit_16 = -((char)(xor_result1 >> 0x10) == '\\0');\n          bit_24 = -((char)(xor_result1 >> 0x18) == '\\0');\n          xor_result1 = CONCAT13(bit_24,CONCAT12(bit_16,CONCAT11(bit_8,is_zero)));\n          temp_2_bit_0 = (char)xor_result2 != '\\0';\n          third_byte_match_bool = (char)(xor_result2 >> 8) != '\\0';\n          check_3 = (char)(xor_result2 >> 0x10) != '\\0';\n          b_var16 = (char)(xor_result2 >> 0x18) != '\\0';\n          xor_result2 = CONCAT13(b_var16 * bit_24 - !b_var16,\n                            CONCAT12(check_3 * bit_16 - !check_3,\n                                     CONCAT11(third_byte_match_bool * bit_8 - !third_byte_match_bool,temp_2_bit_0 * is_zero - !temp_2_bit_0)));\n          if (xor_result2 != 0) {\n            if (xor_result1 == 0) {\n              result = (byte *)((int)data + 5);\n              xor_result1 = xor_result2;\n            }\n            else {\n              result = (byte *)((int)data + 1);\n            }\n            if ((xor_result1 & 1) == 0) {\n              temp_2_bit_0 = (xor_result1 & 0x100) == 0;\n              next_byte = result + 1;\n              if (temp_2_bit_0) {\n                temp_2_bit_0 = (xor_result1 & 0x18000) == 0;\n                next_byte = result + 2;\n              }\n              result = next_byte;\n              if (temp_2_bit_0) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          data = current_ptr;\n        } while (aligned_length != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      current_ptr = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == byte_to_find) break;\n      offset = (uint)current_ptr & 7;\n      data = current_ptr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_ptr + -1);\n}\n\n",
            "current_name": "find_byte_sequence_00006010",
            "entrypoint": "0x00006010",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "bVar1": "current_byte",
                "bVar13": "temp_2_bit_0",
                "bVar14": "third_byte_match_bool",
                "bVar15": "check_3",
                "bVar16": "b_var16",
                "cVar2": "is_zero",
                "cVar3": "bit_8",
                "cVar4": "bit_16",
                "cVar5": "bit_24",
                "param_1": "data",
                "param_2": "byte_to_find",
                "param_3": "length",
                "pbVar6": "next_byte",
                "pbVar8": "result",
                "puVar7": "current_ptr",
                "uVar10": "aligned_length",
                "uVar11": "xor_result1",
                "uVar12": "xor_result2",
                "uVar9": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000060b0": {
            "additional_data": {
                "FUN_000060B0": {
                    "copy_array": 1
                },
                "FUN_000060b0": {
                    "copy_and_shift": 2,
                    "copy_array": 16,
                    "copy_array_elements": 1,
                    "copy_array_to_other_array": 1,
                    "copy_bytes": 2,
                    "copy_data": 7
                },
                "param_1": {
                    "array_destination": 2,
                    "dest": 5,
                    "dest_array": 1,
                    "dest_array_size": 1,
                    "dest_index": 8,
                    "dest_offset": 1,
                    "dest_size": 1,
                    "destination": 6,
                    "destination_index": 4,
                    "src_index": 1
                },
                "param_2": {
                    "array_source": 2,
                    "source": 7,
                    "source_array": 8,
                    "source_bytes": 1,
                    "source_data": 3,
                    "src": 6,
                    "src_array": 2,
                    "src_data": 1
                },
                "param_3": {
                    "array_length": 5,
                    "array_size": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "length": 12,
                    "num_bytes": 2,
                    "size": 6,
                    "source_array_size": 1,
                    "source_size": 1
                },
                "puVar1": {
                    "current_source": 1,
                    "source_array_iter": 1,
                    "source_index": 4,
                    "source_pointer": 3,
                    "source_ptr": 7,
                    "src_index": 1,
                    "src_pointer": 2,
                    "src_ptr": 10
                },
                "puVar2": {
                    "dest_ptr": 1,
                    "end_bytes": 1,
                    "end_index": 1,
                    "end_of_source_array": 1,
                    "end_pointer": 5,
                    "end_ptr": 11,
                    "end_source": 2,
                    "end_source_data": 1,
                    "source_array_end": 1,
                    "source_end_ptr": 2,
                    "src_end": 2,
                    "src_end_ptr": 1
                },
                "puVar3": {
                    "current_destination": 1,
                    "dest_array_iter": 1,
                    "dest_data": 1,
                    "dest_index": 1,
                    "dest_pointer": 2,
                    "dest_ptr": 15,
                    "destination_pointer": 3,
                    "destination_ptr": 1,
                    "end_dest_data": 1,
                    "end_destination": 2,
                    "end_of_destination_array": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "code": "\nvoid copy_array_to_other_array_000060b0(int dest_index,undefined *source_array,int length)\n\n{\n  undefined *src_ptr;\n  undefined *end_ptr;\n  undefined *dest_ptr;\n  \n  end_ptr = source_array + length;\n  dest_ptr = (undefined *)(dest_index + -1);\n  if (source_array != end_ptr) {\n    do {\n      src_ptr = source_array + 1;\n      dest_ptr = dest_ptr + 1;\n      *dest_ptr = *source_array;\n      source_array = src_ptr;\n    } while (src_ptr != end_ptr);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "copy_array_to_other_array_000060b0",
            "entrypoint": "0x000060b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000060b0": "copy_array_to_other_array_000060b0",
                "param_1": "dest_index",
                "param_2": "source_array",
                "param_3": "length",
                "puVar1": "src_ptr",
                "puVar2": "end_ptr",
                "puVar3": "dest_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000060cc": {
            "additional_data": {
                "FUN_00004b34": {
                    "free_data": 1,
                    "free_memory": 4
                },
                "FUN_00004bd0": {
                    "calculate_usable_size": 1,
                    "copy_data": 1,
                    "copy_memory": 1,
                    "get_usable_size": 2
                },
                "FUN_000060b0": {
                    "copy_memory": 3,
                    "extract_data": 1,
                    "memcpy_to_data": 1
                },
                "FUN_000060cc": {
                    "allocate_and_copy_memory": 2,
                    "allocate_memory": 3,
                    "allocate_or_copy_memory": 8,
                    "copy_and_free_memory": 2,
                    "copy_and_resize_memory": 1,
                    "copy_if_not_null": 1,
                    "memory_allocation_copy": 1,
                    "memory_manager": 1,
                    "realloc_or_malloc": 1,
                    "reallocate_memory": 7,
                    "resize_and_copy_memory": 1,
                    "reverse_and_copy_memory": 2
                },
                "FUN_00006964": {
                    "allocate_memory": 2,
                    "check_allocation_status": 1,
                    "malloc_data": 1,
                    "malloc_memory": 1
                },
                "_free_r": {
                    "free_memory": 4
                },
                "_malloc_r": {
                    "allocate_memory": 3,
                    "allocate_memory_internal": 1
                },
                "_malloc_usable_size_r": {
                    "get_usable_memory_size": 1,
                    "get_usable_size": 3
                },
                "iVar1": {
                    "allocated_memory": 5,
                    "dest_address": 1,
                    "dest_ptr": 1,
                    "destination": 4,
                    "destination_buffer": 1,
                    "dst": 2,
                    "new_data": 1,
                    "new_memory": 1,
                    "new_ptr": 5,
                    "result": 9
                },
                "memcpy": {
                    "copy_memory": 4
                },
                "param_1": {
                    "allocator": 2,
                    "arg1": 2,
                    "context": 12,
                    "ctx": 1,
                    "param1": 2,
                    "param_a": 1,
                    "pool": 1,
                    "ptr": 5,
                    "ptr1": 1,
                    "ptr_to_data": 1,
                    "size": 1,
                    "source_context": 1,
                    "user_context": 1
                },
                "param_2": {
                    "current_memory": 1,
                    "old_data": 1,
                    "old_memory": 2,
                    "old_ptr": 3,
                    "param_b": 1,
                    "ptr": 1,
                    "source": 11,
                    "source_address": 1,
                    "source_buffer": 1,
                    "source_data": 1,
                    "source_memory": 1,
                    "src": 5,
                    "src_ptr": 1,
                    "status": 1
                },
                "param_3": {
                    "new_memory_size": 1,
                    "new_size": 5,
                    "param_c": 1,
                    "size": 20,
                    "source_size": 2,
                    "src_size": 2
                },
                "param_4": {
                    "additional_param": 2,
                    "alignment": 2,
                    "arg4": 2,
                    "destination_context": 1,
                    "dst_size": 1,
                    "extra": 1,
                    "extra_data": 1,
                    "extra_param": 6,
                    "flag": 2,
                    "param": 1,
                    "param4": 3,
                    "param_4": 5,
                    "param_d": 1,
                    "ptr2": 1,
                    "unk_param": 1,
                    "unused_parameter": 1
                },
                "uVar2": {
                    "old_size": 1,
                    "source_size": 1,
                    "usable_memory_size": 1,
                    "usable_size": 27
                }
            },
            "called": [
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_000060b0",
                "FUN_00006964"
            ],
            "calling": [
                "FUN_000068f0"
            ],
            "code": "\nint allocate_or_copy_memory_000060cc(undefined4 context,int source,uint size,undefined4 extra_param)\n\n{\n  int result;\n  uint usable_size;\n  \n  if (source != 0) {\n    if (size == 0) {\n      free_memory();\n      result = 0;\n    }\n    else {\n      usable_size = get_usable_size();\n      result = source;\n      if ((usable_size < size) && (result = allocate_memory(context,size), result != 0)) {\n        copy_memory(result,source,size);\n        free_memory(context,source);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory(context,size,size,extra_param);\n  return result;\n}\n\n",
            "current_name": "allocate_or_copy_memory_000060cc",
            "entrypoint": "0x000060cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000060cc": "allocate_or_copy_memory_000060cc",
                "_free_r": "free_memory",
                "_malloc_r": "allocate_memory",
                "_malloc_usable_size_r": "get_usable_size",
                "iVar1": "result",
                "memcpy": "copy_memory",
                "param_1": "context",
                "param_2": "source",
                "param_3": "size",
                "param_4": "extra_param",
                "uVar2": "usable_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006192": {
            "additional_data": {
                "0x20": {
                    "flag_mask": 1
                },
                "FUN_00004b34": {
                    "copy_memory": 1,
                    "helper_function": 3,
                    "process_data_helper": 1,
                    "process_sub_function": 2,
                    "update_param_info_helper": 1,
                    "update_parameters": 1
                },
                "FUN_00006192": {
                    "deallocate_memory": 1,
                    "initialize_data": 2,
                    "initialize_memory": 1,
                    "initialize_memory_block": 1,
                    "initialize_params": 1,
                    "process_binary_data": 2,
                    "process_data": 8,
                    "process_param": 1,
                    "process_params": 1,
                    "rearrange_data": 1,
                    "reinitialize_memory_block": 1,
                    "update_buffer": 1,
                    "update_data": 3,
                    "update_data_structure": 1,
                    "update_flags_and_values": 1,
                    "update_param": 1,
                    "update_param_info": 1
                },
                "param_1": {
                    "arg1": 3,
                    "error_code": 1,
                    "input": 5,
                    "input_data": 1,
                    "input_param": 1,
                    "input_value": 1,
                    "param": 2,
                    "param1": 6,
                    "param_1": 1,
                    "param_a": 1,
                    "result": 2,
                    "status": 5,
                    "unused": 1,
                    "value1": 1
                },
                "param_2": {
                    "buffer": 1,
                    "data": 11,
                    "data_array": 1,
                    "data_ptr": 1,
                    "dest": 1,
                    "memory_block": 2,
                    "output_array": 1,
                    "output_data": 1,
                    "param2": 3,
                    "param_2": 1,
                    "param_array": 2,
                    "param_b": 1,
                    "param_list": 1,
                    "params": 4
                },
                "param_3": {
                    "helper_param1": 1,
                    "param1": 2,
                    "param3": 1,
                    "param_3": 1,
                    "source": 1,
                    "sub_param1": 1,
                    "value1": 1
                },
                "param_4": {
                    "helper_param2": 1,
                    "param2": 2,
                    "param4": 1,
                    "param_4": 1,
                    "size": 1,
                    "sub_param2": 1,
                    "value2": 1
                }
            },
            "called": [
                "FUN_00004b34"
            ],
            "calling": [
                "FUN_000061cc"
            ],
            "code": "\nundefined4 process_binary_data_00006192(undefined4 param1,undefined4 *data)\n\n{\n  if ((undefined4 *)data[0xd] != (undefined4 *)0x0) {\n    if ((undefined4 *)data[0xd] != data + 0x11) {\n      _free_r();\n    }\n    data[1] = data[0x10];\n    data[0xd] = 0;\n    if (data[0x10] != 0) {\n      *data = data[0xf];\n      return 0;\n    }\n  }\n  *data = data[4];\n  data[1] = 0;\n  *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_binary_data_00006192",
            "entrypoint": "0x00006192",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00006192": "process_binary_data_00006192",
                "param_1": "param1",
                "param_2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000061cc": {
            "additional_data": {
                "DAT_00007a99": {
                    "char_properties_table": 1
                },
                "DAT_00007c02": {
                    "modifier_chars_table": 1
                },
                "F0": {
                    "parse_format_specifier": 1
                },
                "FUN_000061cc": {
                    "decode_function": 1,
                    "parse_format_string": 15,
                    "parse_input": 7,
                    "parse_string": 1,
                    "process_input": 1
                },
                "LAB_00006118_1": {
                    "error_label": 1
                },
                "PTR_FUN_00006010": {
                    "memchr": 1
                },
                "PTR_FUN_00006192": {
                    "parse_unsigned_integer": 1
                },
                "PTR_FUN_000064bc": {
                    "parse_chars": 1
                },
                "PTR_FUN_0000656c": {
                    "parse_integers": 1
                },
                "PTR_FUN_0000687c": {
                    "skip_matching_chars": 1
                },
                "__sccl": {
                    "scan_character_class": 1
                },
                "__ssrefill_r": {
                    "refill_buffer": 1
                },
                "_scanf_chars": {
                    "scanf_chars": 1
                },
                "_scanf_i": {
                    "scanf_i": 1
                },
                "auStack_2ac": {
                    "auxiliary_stack": 1,
                    "buffer": 1,
                    "char_flag_stack": 1,
                    "character_classes": 1,
                    "format_specifier_stack": 1,
                    "format_stack": 1,
                    "local_buffer": 1,
                    "local_stack": 1,
                    "stack_array": 3,
                    "stack_buffer": 6,
                    "string_stack": 1,
                    "temp_stack": 2
                },
                "iVar1": {
                    "current_index": 1,
                    "iterator": 1,
                    "loop_variable_1": 1,
                    "parsed_result": 1,
                    "result": 20,
                    "return_value": 4,
                    "status": 1
                },
                "local_194": {
                    "arg_type_code": 1,
                    "conversion_type": 1,
                    "data_size": 1,
                    "data_type": 2,
                    "field_type": 1,
                    "flag4": 1,
                    "format_type": 1,
                    "item_type": 1,
                    "length": 2,
                    "local_var6": 1,
                    "mode": 2,
                    "parse_type": 1,
                    "scan_type": 2,
                    "scan_width": 1,
                    "scanf_params": 1,
                    "specifier": 1,
                    "specifier_type": 1,
                    "stack_variable_2": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "type": 3,
                    "type_index": 1,
                    "width_type": 1
                },
                "local_198": {
                    "array_ptr": 1,
                    "buffer": 1,
                    "buffer_ptr": 1,
                    "byte_ptr_var": 1,
                    "char_flag_ptr": 1,
                    "format_specifier_stack_ptr": 1,
                    "format_stack_ptr": 1,
                    "local_array": 1,
                    "local_au_stack_2ac": 1,
                    "local_buffer_ptr": 1,
                    "ptr_buffer": 1,
                    "stack_array": 3,
                    "stack_buffer": 6,
                    "stack_buffer_ptr": 1,
                    "stack_pointer": 1,
                    "stack_var": 1,
                    "stack_variable": 1,
                    "stack_variable_1": 1,
                    "temp_array": 1,
                    "temp_pointer": 1,
                    "temp_ptr2": 1,
                    "temp_stack": 1
                },
                "local_19c": {
                    "chars_read": 1,
                    "count": 4,
                    "count2": 1,
                    "counter": 3,
                    "counter_variable_1": 1,
                    "current_parsed": 1,
                    "field_length": 1,
                    "flag": 1,
                    "int_count": 1,
                    "item_index": 1,
                    "len": 1,
                    "local_var5": 1,
                    "match_count": 1,
                    "num_assignments": 1,
                    "num_char_read": 1,
                    "num_chars_consumed": 1,
                    "num_chars_scanned": 1,
                    "num_of_skipped_chars": 1,
                    "num_scanned": 1,
                    "num_total_conversions": 1,
                    "parsed_value": 1,
                    "success_count": 1,
                    "temp_value": 1,
                    "temp_var4": 1
                },
                "local_1a0": {
                    "count": 1,
                    "count1": 1,
                    "flag_count": 1,
                    "local_var3": 1,
                    "num_arguments_parsed": 1,
                    "num_converted": 1,
                    "num_items": 1,
                    "num_of_parsed_items": 1,
                    "num_reads": 1,
                    "num_successful_conversions": 1,
                    "num_successful_matches": 1,
                    "output": 1,
                    "output_value": 1,
                    "output_var": 1,
                    "parsed_count": 2,
                    "parsed_items": 1,
                    "result": 5,
                    "return_value": 5,
                    "total_count": 1,
                    "total_parsed": 1
                },
                "local_1a4": {
                    "counter_variable_3": 1,
                    "flag2": 1,
                    "flag3": 4,
                    "flag_copy": 1,
                    "flags_copy": 1,
                    "format2": 1,
                    "format_precision": 1,
                    "length_mod": 1,
                    "length_modifier": 2,
                    "length_or_flag": 1,
                    "length_specifier": 1,
                    "local_var4": 1,
                    "mask": 1,
                    "num_flag": 1,
                    "old_conversion_flags": 1,
                    "original_flags": 1,
                    "precision": 1,
                    "precision_width": 1,
                    "stored_flags": 1,
                    "temp_flag": 1,
                    "temp_flags": 2,
                    "temp_switch_flags": 1,
                    "temp_var3": 1,
                    "temp_var4": 1
                },
                "local_1a8": {
                    "base": 10,
                    "base_value": 1,
                    "field_width": 3,
                    "flag2": 4,
                    "format": 1,
                    "format_width": 1,
                    "local_var1": 1,
                    "number_type": 1,
                    "radix": 1,
                    "temp_var2": 1,
                    "temp_var5": 1,
                    "width": 1,
                    "width_specifier": 1
                },
                "local_1ac": {
                    "bit_flags": 1,
                    "conversion_flags": 1,
                    "counter_variable_2": 1,
                    "flag": 5,
                    "flag1": 4,
                    "flags": 10,
                    "format_flags": 2,
                    "local_var2": 1,
                    "modifier_flags": 1,
                    "switch_flags": 1,
                    "temp_var1": 1,
                    "width_modifier": 1
                },
                "local_2b0": {
                    "arg3": 1,
                    "arg_list_ptr": 1,
                    "arg_ptr_ptr_array": 1,
                    "args": 1,
                    "int_ptr_array": 1,
                    "local_param4": 2,
                    "output": 3,
                    "output_array": 1,
                    "output_array_ptr": 2,
                    "output_data_array": 1,
                    "output_list": 2,
                    "output_params": 2,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "output_ptr_list": 1,
                    "param_outputs": 1,
                    "param_values_ptr": 1,
                    "parsed_arguments": 1,
                    "ptr_arg3": 1,
                    "result_array": 1,
                    "result_pointer": 1
                },
                "local_2c": {
                    "code_ptr2": 1,
                    "current_handler": 1,
                    "current_jump_label": 1,
                    "current_scanner": 1,
                    "function2": 1,
                    "local_2c": 2,
                    "local_function": 1,
                    "local_function2": 1,
                    "next_func_ptr": 1,
                    "printf_function": 1,
                    "ptr_refill_function": 1,
                    "read": 1,
                    "read_func_ptr": 1,
                    "read_function": 1,
                    "refill_func": 2,
                    "refill_function": 4,
                    "scan_refill_function": 1,
                    "scanf_function": 1,
                    "ss_refill": 1,
                    "ss_refill_func_ptr": 1,
                    "ssrefill_func": 1,
                    "ssrefill_function_ptr": 1,
                    "temp_code_func": 1
                },
                "local_30": {
                    "code_ptr": 1,
                    "current_function": 1,
                    "error_func": 1,
                    "error_handler": 1,
                    "func_ptr": 1,
                    "function1": 1,
                    "function_pointer": 1,
                    "function_ptr": 2,
                    "loc_00006118": 1,
                    "local_30": 2,
                    "local_function": 2,
                    "local_jump_label": 1,
                    "local_string": 1,
                    "local_var7": 1,
                    "locale": 1,
                    "printf_function": 1,
                    "ptr_function": 1,
                    "refill_func": 1,
                    "scan_error_label": 1,
                    "scan_func": 1,
                    "scanning_condition": 1,
                    "string_pointer": 1,
                    "temp_func": 1,
                    "temp_func_ptr": 2
                },
                "memchr": {
                    "memchr": 1
                },
                "param_1": {
                    "arg1": 9,
                    "context": 1,
                    "format_specifier": 1,
                    "input_1": 1,
                    "input_param": 2,
                    "input_parameter1": 1,
                    "param": 3,
                    "param1": 8,
                    "param_code": 1,
                    "parameter_1": 1,
                    "some_param": 1,
                    "unused": 1
                },
                "param_2": {
                    "arg2": 3,
                    "byte_array_param": 1,
                    "format": 2,
                    "format_ptr": 1,
                    "format_specifier": 1,
                    "format_str_ptr": 1,
                    "format_string": 2,
                    "input": 3,
                    "input_2": 1,
                    "input_array": 2,
                    "input_data": 1,
                    "input_parameter2": 1,
                    "input_ptr": 1,
                    "param2": 8,
                    "param_input": 1,
                    "parameter_2": 1
                },
                "param_3": {
                    "arg_buffer": 1,
                    "byte_ptr_param": 1,
                    "current_byte": 1,
                    "current_char": 2,
                    "current_ptr": 1,
                    "delimiter": 1,
                    "format_str": 1,
                    "format_string": 7,
                    "input": 3,
                    "input_3": 1,
                    "input_byte_array": 1,
                    "input_parameter3": 1,
                    "input_string": 2,
                    "param3": 5,
                    "param_format": 1,
                    "parameter_3": 1
                },
                "param_4": {
                    "arg2": 1,
                    "arg3": 2,
                    "arg4": 1,
                    "arg_list": 1,
                    "arg_ptr_ptr": 1,
                    "argument_list": 1,
                    "input_4": 1,
                    "input_parameter4": 1,
                    "int_ptr_array_param": 1,
                    "output": 4,
                    "output_array": 2,
                    "output_data": 1,
                    "output_ptr": 1,
                    "param4": 8,
                    "param_array": 1,
                    "param_values": 1,
                    "parameter_4": 1,
                    "parsed_values": 1
                },
                "pbVar3": {
                    "byte_ptr": 1,
                    "curr_byte": 1,
                    "current_byte": 1,
                    "current_char": 2,
                    "current_ptr": 1,
                    "next_byte": 5,
                    "next_char": 9,
                    "next_ptr": 1,
                    "pointer_variable": 1,
                    "ptr_byte": 1,
                    "str_pointer": 1,
                    "temp_ptr": 1,
                    "temp_var2": 1,
                    "tmp_ptr": 1,
                    "var3": 1
                },
                "uVar2": {
                    "c": 1,
                    "ch": 5,
                    "char_value": 1,
                    "character": 2,
                    "current_byte": 2,
                    "current_char": 6,
                    "current_char_value": 1,
                    "current_value": 1,
                    "first_char": 1,
                    "flag": 2,
                    "loop_variable_2": 1,
                    "temp": 1,
                    "temp_var": 1,
                    "temp_var1": 2,
                    "tmp_var": 1,
                    "var2": 1
                },
                "uVar4": {
                    "byte_temp": 1,
                    "byte_value": 2,
                    "ch_unsigned": 1,
                    "char_code": 1,
                    "char_flag": 1,
                    "char_flags": 1,
                    "char_index": 2,
                    "char_info": 1,
                    "char_value": 1,
                    "character": 1,
                    "character_value": 1,
                    "current_byte_value": 1,
                    "current_char_value": 1,
                    "first_byte": 1,
                    "loop_variable_3": 1,
                    "temp": 5,
                    "temp_byte": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "tmp_flag": 1,
                    "var4": 1
                }
            },
            "called": [
                "FUN_00006192",
                "FUN_0000687c",
                "FUN_00006010",
                "FUN_000064bc",
                "FUN_0000656c"
            ],
            "calling": [
                "FUN_00005e68"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parse_format_string_000061cc(undefined4 arg1,byte **param2,byte *format_string,int **param4)\n\n{\n  int result;\n  uint current_char;\n  byte *next_char;\n  uint temp;\n  int **output;\n  undefined stack_buffer [256];\n  uint flags;\n  undefined4 base;\n  uint flag3;\n  int return_value;\n  int count;\n  undefined *stack_buffer;\n  int type;\n  undefined *local_function;\n  code *refill_function;\n  \n  return_value = 0;\n  count = 0;\n  local_function = &error_label;\n  refill_function = refill_buffer + 1;\n  output = param4;\n  stack_buffer = stack_buffer;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      temp = (uint)*format_string;\n      if (temp == 0) {\n        return return_value;\n      }\n      current_char = (byte)(&DAT_00007a99)[temp] & 8;\n      next_char = format_string + 1;\n      if (((&DAT_00007a99)[temp] & 8) == 0) break;\n      while (((format_string = next_char, 0 < (int)param2[1] ||\n              (result = (*refill_function)(arg1,param2), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        count = count + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (temp == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (result = (*refill_function)(arg1,param2), result != 0))\n    goto LAB_00006380;\n    if (**param2 != temp) {\n      return return_value;\n    }\n    *param2 = *param2 + 1;\n    count = count + 1;\n    param2[1] = param2[1] + -1;\n    format_string = next_char;\n  }\n  flag3 = current_char;\n  flags = current_char;\n  if (format_string[1] == 0x2a) {\n    next_char = format_string + 2;\n    flags = 0x10;\n  }\n  while( true ) {\n    current_char = (uint)*next_char;\n    if (9 < current_char - 0x30) break;\n    next_char = next_char + 1;\n    flag3 = (flag3 * 10 + current_char) - 0x30;\n  }\n  result = memchr(&DAT_00007c02,current_char,3);\n  if (result != 0) {\n    flags = 1 << (result - 0x7c02U & 0xff) | flags;\n    next_char = next_char + 1;\n  }\n  format_string = next_char + 1;\n  current_char = (uint)*next_char;\n  if (current_char < 0x79) {\n    if (0x57 < current_char) {\n      switch(current_char) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        format_string = (byte *)scan_character_class(stack_buffer,format_string);\n        flags = flags | 0x40;\n        type = 1;\n        break;\n      case 99:\n        flags = flags | 0x40;\n        type = 0;\n        break;\n      case 100:\n      case 0x75:\n        base = 10;\nLAB_000063a0:\n        if (current_char < 0x6f) {\n          type = 3;\n        }\n        else {\n          type = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        type = 5;\n        break;\n      case 0x69:\n        base = 0;\n        type = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flags << 0x1b)) {\n          if ((int)(flags << 0x1f) < 0) {\n            *(short *)*output = (short)count;\n            output = output + 1;\n          }\n          else {\n            **output = count;\n            output = output + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        base = 8;\n        type = 4;\n        break;\n      case 0x70:\n        flags = flags | 0x20;\n      case 0x58:\n      case 0x78:\n        flags = flags | 0x200;\n        base = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        type = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (result = (*refill_function)(arg1,param2), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flags << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          count = count + 1;\n          next_char = param2[1];\n          param2[1] = next_char + -1;\n          if ((int)(next_char + -1) < 1) {\n            result = (*refill_function)(arg1,param2);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (type < 3) {\n        result = scanf_chars(arg1,&flags,param2,&output);\n      }\n      else {\n        if (4 < type) goto LAB_000061f6;\n        result = scanf_i(arg1,&flags,param2,&output);\n      }\n      if (result == 1) {\n        return return_value;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (return_value == 0) {\nLAB_00006388:\n          return_value = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          return_value = -1;\n        }\n        return return_value;\n      }\n      goto LAB_000061f6;\n    }\n    next_char = format_string;\n    if (current_char == 0x25) goto LAB_00006352;\n    if (current_char < 0x26) {\n      if (current_char != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (current_char - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  type = 3;\n  base = 10;\n  goto LAB_000063ac;\n}\n\n",
            "current_name": "parse_format_string_000061cc",
            "entrypoint": "0x000061cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000061cc": "parse_format_string_000061cc",
                "LAB_00006118_1": "error_label",
                "__sccl": "scan_character_class",
                "__ssrefill_r": "refill_buffer",
                "_scanf_chars": "scanf_chars",
                "_scanf_i": "scanf_i",
                "auStack_2ac": "stack_buffer",
                "iVar1": "result",
                "local_194": "type",
                "local_198": "stack_buffer",
                "local_19c": "count",
                "local_1a0": "return_value",
                "local_1a4": "flag3",
                "local_1a8": "base",
                "local_1ac": "flags",
                "local_2b0": "output",
                "local_2c": "refill_function",
                "local_30": "local_function",
                "param_1": "arg1",
                "param_2": "param2",
                "param_3": "format_string",
                "param_4": "param4",
                "pbVar3": "next_char",
                "uVar2": "current_char",
                "uVar4": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000064bc": {
            "additional_data": {
                "FUN_000064bc": {
                    "decode_and_process": 1,
                    "decode_and_process_data": 1,
                    "decode_data": 2,
                    "extract_and_update": 1,
                    "process_data": 21
                },
                "iVar1": {
                    "callback_result": 2,
                    "func_result": 1,
                    "function_result": 2,
                    "result": 18,
                    "result_code": 1,
                    "return_value": 4,
                    "status": 1
                },
                "iVar6": {
                    "byte_count": 1,
                    "count": 6,
                    "counter": 19,
                    "iteration_count": 3,
                    "loop_counter": 2
                },
                "param_1": {
                    "arg1": 1,
                    "data": 3,
                    "input": 7,
                    "input_param": 4,
                    "input_value": 12,
                    "status": 4
                },
                "param_2": {
                    "arg2": 1,
                    "config": 2,
                    "data": 4,
                    "data_array": 4,
                    "flags": 7,
                    "param_array": 1,
                    "parameters": 4,
                    "params": 7,
                    "settings": 1
                },
                "param_3": {
                    "arg3": 1,
                    "buffer": 8,
                    "buffer_array": 1,
                    "byte_array": 3,
                    "byte_array_ptr": 1,
                    "byte_pointers": 1,
                    "data": 5,
                    "data_pointers": 1,
                    "data_ptr": 7,
                    "data_ptrs": 2,
                    "input_array": 1
                },
                "param_4": {
                    "arg4": 1,
                    "extra_data": 1,
                    "output": 2,
                    "output_param": 3,
                    "output_ptr": 3,
                    "output_value": 7,
                    "output_value_ptr": 1,
                    "ptr": 1,
                    "result": 4,
                    "result_ptr": 2,
                    "settings": 1,
                    "status": 5
                },
                "pbVar4": {
                    "byte_array_ptr_2": 1,
                    "byte_pointer_1": 1,
                    "byte_ptr": 3,
                    "byte_ptr1": 2,
                    "byte_value": 1,
                    "cur_byte_ptr": 1,
                    "current_byte": 1,
                    "current_byte_pos": 1,
                    "data_ptr": 2,
                    "data_ptr2": 2,
                    "next_buffer": 1,
                    "next_byte": 1,
                    "next_data": 1,
                    "next_data_byte": 1,
                    "ptr_data2": 1,
                    "ptr_to_current_byte": 1,
                    "ptr_to_data": 1,
                    "temp_buff": 1,
                    "temp_buffer": 2,
                    "temp_byte_ptr": 3,
                    "temp_data_ptr": 1,
                    "temp_ptr": 2
                },
                "pbVar5": {
                    "byte_pointer_2": 1,
                    "byte_ptr": 1,
                    "byte_ptr2": 1,
                    "byte_ptr3": 1,
                    "current_byte": 5,
                    "current_byte_plus_one": 1,
                    "current_char": 1,
                    "current_data": 1,
                    "next_byte": 5,
                    "next_byte_ptr": 5,
                    "next_ptr": 1,
                    "next_value": 1,
                    "prev_char": 1,
                    "ptr_data3": 1,
                    "temp_buffer": 1,
                    "temp_byte": 2,
                    "temp_byte_pointer": 1,
                    "temp_ptr2": 1
                },
                "ppbVar3": {
                    "byte_address": 1,
                    "byte_array_ptr_ptr": 1,
                    "byte_pointer_pointer": 1,
                    "byte_ptr_ptr": 3,
                    "current_buffer": 1,
                    "current_byte": 1,
                    "current_data": 1,
                    "current_data_ptr": 1,
                    "data_ptr": 2,
                    "data_ptr_array": 1,
                    "data_ptr_ptr": 1,
                    "next_byte_ptr": 1,
                    "pointer_buffer": 1,
                    "pointer_to_buffer": 1,
                    "ptr_buffer": 1,
                    "ptr_data": 3,
                    "ptr_to_buffer": 2,
                    "ptr_to_ptr": 2,
                    "temp_data_ptr": 1,
                    "temp_ptr": 4,
                    "temp_ptr_ptr": 1
                },
                "return": {
                    "return_value": 1
                },
                "uVar2": {
                    "flag": 2,
                    "flag_value": 2,
                    "result": 1,
                    "status": 5,
                    "temp": 3,
                    "temp_value": 4,
                    "temp_var": 8,
                    "tmp": 1,
                    "value": 4,
                    "var1": 1
                },
                "unaff_r6": {
                    "byte_pointer": 2,
                    "byte_ptr2": 1,
                    "current_buffer": 2,
                    "current_byte": 7,
                    "current_byte_ptr": 7,
                    "current_char": 1,
                    "current_data_ptr": 2,
                    "current_pointer": 1,
                    "current_ptr": 2,
                    "data_ptr": 1,
                    "prev_byte_ptr": 1,
                    "read_byte": 1,
                    "temp_byte_ptr2": 1,
                    "temp_ptr": 1,
                    "unaffected_register_r6": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000061cc"
            ],
            "code": "\nundefined4 decode_and_process_data_000064bc(undefined4 input_value,uint *flags,byte **buffer,undefined4 *output_value)\n\n{\n  int result;\n  uint temp_var;\n  byte **temp_ptr;\n  byte *byte_ptr;\n  byte *current_byte_ptr;\n  byte *next_byte_ptr;\n  int counter;\n  \n  if (flags[2] == 0) {\n    if (flags[6] == 0) {\n      temp_var = 1;\n    }\n    else {\n      temp_var = 0xffffffff;\n    }\n    flags[2] = temp_var;\n  }\n  if (-1 < (int)(*flags << 0x1b)) {\n    temp_ptr = (byte **)*output_value;\n    *output_value = temp_ptr + 1;\n    current_byte_ptr = *temp_ptr;\n  }\n  counter = 0;\n  do {\n    temp_var = flags[6];\n    if (temp_var != 0) {\n      if (temp_var == 1) {\n        if (*(char *)(flags[5] + (uint)**buffer) == '\\0') {\n          if (counter == 0) {\n            return_value 1;\n          }\nLAB_0000654a:\n          if (((*flags & 0x10) == 0) && (flags[3] = flags[3] + 1, flags[6] != 0)) {\n            *current_byte_ptr = 0;\n          }\n          flags[4] = counter + flags[4];\n          return_value 0;\n        }\n      }\n      else if ((temp_var != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**buffer] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    next_byte_ptr = current_byte_ptr;\n    if (-1 < (int)(*flags << 0x1b)) {\n      next_byte_ptr = current_byte_ptr + 1;\n      *current_byte_ptr = **buffer;\n    }\n    byte_ptr = buffer[1];\n    *buffer = *buffer + 1;\n    temp_var = flags[2] - 1;\n    buffer[1] = byte_ptr + -1;\n    counter = counter + 1;\n    flags[2] = temp_var;\n    current_byte_ptr = next_byte_ptr;\n    if ((temp_var == 0) ||\n       (((int)(byte_ptr + -1) < 1 &&\n        (result = (*(code *)flags[0x60])(input_value,buffer,temp_var,(code *)flags[0x60],output_value),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "current_name": "decode_and_process_data_000064bc",
            "entrypoint": "0x000064bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000064bc": "decode_and_process_data_000064bc",
                "iVar1": "result",
                "iVar6": "counter",
                "param_1": "input_value",
                "param_2": "flags",
                "param_3": "buffer",
                "param_4": "output_value",
                "pbVar4": "byte_ptr",
                "pbVar5": "next_byte_ptr",
                "ppbVar3": "temp_ptr",
                "return": "return_value",
                "uVar2": "temp_var",
                "unaff_r6": "current_byte_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000656c": {
            "additional_data": {
                "FUN_0000656c": {
                    "decode_and_process_data": 5,
                    "decode_data": 1,
                    "parse_and_modify_data": 1,
                    "parse_data_packet": 1,
                    "parse_input": 1,
                    "process_data": 8
                },
                "iVar1": {
                    "found_index": 1,
                    "index": 17,
                    "iteration_variable": 1,
                    "result": 9,
                    "return_value": 1,
                    "search_result": 2
                },
                "iVar11": {
                    "count": 1,
                    "counter": 11,
                    "i": 1,
                    "index": 1,
                    "iteration_variable2": 1,
                    "loop_counter": 4,
                    "loop_counter2": 1,
                    "loop_index": 7,
                    "loop_var": 2,
                    "secondary_index": 1,
                    "temp_var9": 1
                },
                "local_34": {
                    "array_of_strings": 1,
                    "byte_array": 1,
                    "char_array": 1,
                    "char_vals_array": 1,
                    "character_set": 1,
                    "comparison_array": 1,
                    "constant_array": 2,
                    "constants": 2,
                    "constants_array": 1,
                    "data_array": 3,
                    "data_array_local": 1,
                    "data_mapping": 1,
                    "local_array": 4,
                    "local_data": 1,
                    "local_data_array": 1,
                    "local_values": 2,
                    "lookup_table": 1,
                    "search_patterns": 1,
                    "string_array": 2
                },
                "param_1": {
                    "arg1": 3,
                    "input": 5,
                    "input_1": 1,
                    "input_data": 6,
                    "input_param": 4,
                    "input_parameter": 1,
                    "input_parameter_1": 1,
                    "input_value": 9,
                    "param_1": 1
                },
                "param_2": {
                    "arg2": 3,
                    "args": 1,
                    "array": 1,
                    "array_param": 1,
                    "config": 1,
                    "data": 5,
                    "data_array": 4,
                    "flags": 5,
                    "input": 1,
                    "input_array": 1,
                    "input_parameter_2": 1,
                    "output_data": 1,
                    "packet": 1,
                    "parameters": 4,
                    "settings": 1
                },
                "param_3": {
                    "arg3": 3,
                    "buffer": 4,
                    "byte_array": 3,
                    "byte_array_param": 1,
                    "byte_array_ptr": 2,
                    "byte_sequence": 1,
                    "data": 7,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_ptr": 2,
                    "input_bytes": 1,
                    "input_parameter_3": 1,
                    "input_string": 1,
                    "pointer_array": 1,
                    "pointer_to_bytes": 1,
                    "ptr_array": 1
                },
                "param_4": {
                    "arg4": 3,
                    "input_parameter_4": 1,
                    "output": 7,
                    "output_array": 2,
                    "output_buffer": 1,
                    "output_data": 2,
                    "output_param": 3,
                    "output_parameter": 1,
                    "output_ptr": 1,
                    "output_value": 3,
                    "output_value_ptr": 1,
                    "pointer_to_result": 1,
                    "result": 4,
                    "status": 1
                },
                "pbVar5": {
                    "byte_pointer": 7,
                    "byte_ptr": 13,
                    "byte_value": 2,
                    "current_byte": 1,
                    "temp3": 1,
                    "temp_byte": 3,
                    "temp_byte_pointer": 1,
                    "temp_data": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1
                },
                "pcVar3": {
                    "callback_func": 1,
                    "char_func": 1,
                    "check_flag": 1,
                    "code_func": 1,
                    "comparison_func": 1,
                    "comparison_function": 3,
                    "decoder": 1,
                    "function_pointer": 11,
                    "function_ptr": 9,
                    "process_char": 1,
                    "unknown_function": 1
                },
                "puVar10": {
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "byte_ptr3": 1,
                    "config_ptr": 1,
                    "counter_ptr": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_start_ptr": 2,
                    "flags_ptr": 1,
                    "parameter_pointer": 1,
                    "params_ptr": 1,
                    "pointer3": 1,
                    "pointer_to_data3": 1,
                    "pointer_variable3": 1,
                    "ptr3": 1,
                    "ptr4": 1,
                    "ptr_data": 1,
                    "temp6": 1,
                    "temp_pointer2": 1,
                    "temp_pointer3": 1,
                    "temp_pointer_2": 1,
                    "temp_ptr2": 1,
                    "temp_ptr3": 5,
                    "temp_ptr4": 1,
                    "temp_ptr_4": 1,
                    "temp_var7": 1
                },
                "puVar7": {
                    "output_data": 2,
                    "output_data_ptr": 1,
                    "output_param2": 1,
                    "output_pointer": 2,
                    "output_pointer1": 1,
                    "output_ptr": 8,
                    "pointer_output": 1,
                    "pointer_to_result2": 1,
                    "pointer_variable": 1,
                    "ptr1": 1,
                    "ptr_output": 1,
                    "result_pointer": 1,
                    "result_ptr": 5,
                    "status_ptr": 1,
                    "temp_array_ptr": 1,
                    "temp_ptr": 1,
                    "temp_ptr_1": 1,
                    "temp_var4": 1
                },
                "puVar8": {
                    "buffer_pointer": 1,
                    "buffer_ptr": 1,
                    "byte_ptr": 1,
                    "current_data_ptr": 1,
                    "data_ptr": 2,
                    "output_pointer2": 1,
                    "output_ptr2": 1,
                    "pointer1": 1,
                    "pointer_iter": 1,
                    "pointer_to_data": 1,
                    "ptr1": 1,
                    "ptr2": 1,
                    "ptr_buffer": 1,
                    "temp5": 1,
                    "temp_pointer": 4,
                    "temp_ptr": 8,
                    "temp_ptr2": 1,
                    "temp_ptr_2": 1,
                    "temp_var5": 1,
                    "tmp_ptr": 1
                },
                "puVar9": {
                    "byte_ptr": 1,
                    "byte_ptr2": 1,
                    "data_ptr": 1,
                    "data_ptr2": 1,
                    "loop_ptr": 1,
                    "next_data_ptr": 1,
                    "pointer2": 1,
                    "pointer_to_data2": 1,
                    "pointer_variable2": 1,
                    "ptr": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr_temp": 1,
                    "temp_array_ptr2": 1,
                    "temp_output_pointer": 1,
                    "temp_pointer": 1,
                    "temp_pointer1": 1,
                    "temp_pointer2": 2,
                    "temp_pointer_1": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 1,
                    "temp_ptr2": 5,
                    "temp_ptr3": 1,
                    "temp_ptr_3": 1,
                    "temp_uint_ptr": 1,
                    "temp_var6": 1
                },
                "uVar2": {
                    "code_result": 1,
                    "modified_flag": 1,
                    "modified_flags": 2,
                    "modified_result": 1,
                    "modified_value": 2,
                    "new_value": 1,
                    "result": 9,
                    "result_variable": 1,
                    "return_value": 1,
                    "temp": 3,
                    "temporary_value": 1,
                    "updated_value": 6,
                    "value": 1,
                    "var": 1
                },
                "uVar4": {
                    "count": 1,
                    "counter": 1,
                    "data_size": 1,
                    "temp": 2,
                    "temp2": 1,
                    "temp_uint": 1,
                    "temp_value": 8,
                    "temp_value1": 1,
                    "temp_var": 4,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "temp_variable": 2,
                    "tmp_var": 1,
                    "u_var4": 1,
                    "value": 4,
                    "var1": 1
                },
                "uVar6": {
                    "count": 1,
                    "initial_data_size": 1,
                    "length": 2,
                    "mask_value": 1,
                    "max_value": 1,
                    "modified_var": 1,
                    "num": 1,
                    "param2_value": 1,
                    "size": 2,
                    "temp": 1,
                    "temp4": 1,
                    "temp_counter": 1,
                    "temp_uint": 1,
                    "temp_uint2": 1,
                    "temp_val": 1,
                    "temp_value2": 4,
                    "temp_value_2": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var_2": 1,
                    "temp_var_3": 1,
                    "temp_variable": 1,
                    "temp_variable2": 1,
                    "u_var6": 1,
                    "updated_variable": 1,
                    "var2": 1
                },
                "unaff_r9": {
                    "additional_counter": 1,
                    "count": 2,
                    "counter": 1,
                    "extra_byte_count": 1,
                    "iteration_count": 1,
                    "loop_counter": 4,
                    "offset": 2,
                    "temp_int": 1,
                    "temp_register": 1,
                    "temp_value": 1,
                    "temp_var2": 1,
                    "temp_var8": 1,
                    "unaff_index": 1,
                    "unaff_r9": 6,
                    "unaffected": 1,
                    "unaffected_value": 1,
                    "unaffected_variable": 2,
                    "unused_register": 1,
                    "var1": 1,
                    "var_unaff_r9": 1
                }
            },
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "calling": [
                "FUN_000061cc"
            ],
            "code": "\nundefined4 decode_and_process_data_0000656c(undefined4 input_value,uint *data,byte **data,undefined4 *output)\n\n{\n  int index;\n  undefined4 result;\n  code *function_pointer;\n  uint temp_value;\n  byte *byte_ptr;\n  uint temp_value2;\n  undefined4 *output_ptr;\n  uint *temp_ptr;\n  uint *temp_ptr2;\n  uint *temp_ptr3;\n  int unaff_r9;\n  int counter;\n  undefined *local_array [4];\n  \n  local_array[0] = &DAT_00007c2f;\n  local_array[1] = &DAT_00007c32;\n  local_array[2] = &DAT_00007c35;\n  function_pointer = (code *)&UNK_00004f81;\n  if (data[6] != 3) {\n    function_pointer = (code *)&UNK_00005fd5;\n  }\n  temp_value2 = data[2];\n  temp_value = temp_value2 - 1;\n  if (0x15c < temp_value) {\n    unaff_r9 = temp_value2 - 0x15d;\n    temp_value2 = 0x15d;\n  }\n  if (0x15c < temp_value) {\n    data[2] = temp_value2;\n  }\n  temp_ptr3 = data + 7;\n  if (temp_value < 0x15d) {\n    unaff_r9 = 0;\n  }\n  *data = *data | 0xd00;\n  counter = 0;\n  temp_ptr2 = temp_ptr3;\n  do {\n    index = memchr(local_array[counter],**data,2);\n    if (index != 0) {\n      if (counter == 1) {\n        if (data[1] == 0) {\n          data[1] = 8;\n          *data = *data | 0x200;\n        }\n        temp_value = *data & 0xfffffaff;\nLAB_000065f4:\n        *data = temp_value;\n      }\n      else if (counter == 2) {\n        if ((*data & 0x600) != 0x200) goto LAB_00006624;\n        data[1] = 0x10;\n        temp_value = *data | 0x100;\n        goto LAB_000065f4;\n      }\n      temp_value = data[2];\n      data[2] = temp_value - 1;\n      if (temp_value != 0) {\n        byte_ptr = *data;\n        *data = byte_ptr + 1;\n        temp_ptr = (uint *)((int)temp_ptr2 + 1);\n        *(byte *)temp_ptr2 = *byte_ptr;\n        byte_ptr = data[1];\n        data[1] = byte_ptr + -1;\n        temp_ptr2 = temp_ptr;\n        if (((int)(byte_ptr + -1) < 1) &&\n           (index = (*(code *)data[0x60])(input_value,data), index != 0)) {\n          counter = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    counter = counter + 1;\n  } while (counter != 3);\n  if (data[1] == 0) {\n    data[1] = 10;\n  }\n  __sccl(data[5],\"01234567]\" + (8 - data[1]));\n  counter = 0;\n  while( true ) {\n    temp_ptr = temp_ptr2;\n    if (data[2] == 0) break;\n    byte_ptr = *data;\n    temp_value = (uint)*byte_ptr;\n    if (*(char *)(data[5] + temp_value) == '\\0') break;\n    if ((temp_value == 0x30) && ((int)(*data << 0x14) < 0)) {\n      counter = counter + 1;\n      if (unaff_r9 != 0) {\n        unaff_r9 = unaff_r9 + -1;\n        data[2] = data[2] + 1;\n      }\n    }\n    else {\n      *data = *data & 0xfffff6ff;\n      temp_ptr = (uint *)((int)temp_ptr2 + 1);\n      *(byte *)temp_ptr2 = *byte_ptr;\n    }\n    byte_ptr = data[1];\n    data[1] = byte_ptr + -1;\n    if ((int)(byte_ptr + -1) < 1) {\n      index = (*(code *)data[0x60])(input_value,data);\n      if (index != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    data[2] = data[2] - 1;\n    temp_ptr2 = temp_ptr;\n  }\nLAB_000066ca:\n  if ((int)(*data << 0x17) < 0) {\n    if (temp_ptr3 < temp_ptr) {\n      (*(code *)data[0x5f])(input_value,*(byte *)((int)temp_ptr + -1),data);\n      temp_ptr = (uint *)((int)temp_ptr + -1);\n    }\n    if (temp_ptr == temp_ptr3) {\n      return 1;\n    }\n  }\n  if ((*data & 0x10) == 0) {\n    *(byte *)temp_ptr = 0;\n    result = (*function_pointer)(input_value,temp_ptr3,0,data[1]);\n    output_ptr = (undefined4 *)*output;\n    temp_value = *data;\n    *output = output_ptr + 1;\n    output_ptr = (undefined4 *)*output_ptr;\n    if ((temp_value & 0x20) == 0) {\n      if ((int)(temp_value << 0x1f) < 0) {\n        *(short *)output_ptr = (short)result;\n      }\n      else {\n        *output_ptr = result;\n      }\n    }\n    else {\n      *output_ptr = result;\n    }\n    data[3] = data[3] + 1;\n  }\n  data[4] = (uint)((int)temp_ptr + data[4] + (counter - (int)temp_ptr3));\n  return 0;\n}\n\n",
            "current_name": "decode_and_process_data_0000656c",
            "entrypoint": "0x0000656c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000656c": "decode_and_process_data_0000656c",
                "iVar1": "index",
                "iVar11": "counter",
                "local_34": "local_array",
                "param_1": "input_value",
                "param_2": "data",
                "param_3": "data",
                "param_4": "output",
                "pbVar5": "byte_ptr",
                "pcVar3": "function_pointer",
                "puVar10": "temp_ptr3",
                "puVar7": "output_ptr",
                "puVar8": "temp_ptr",
                "puVar9": "temp_ptr2",
                "uVar2": "result",
                "uVar4": "temp_value",
                "uVar6": "temp_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006768": {
            "additional_data": {
                "0x1fff0284": {
                    "constant_0x1fff0284": 1,
                    "constant_address5": 1
                },
                "FUN_0000404c": {
                    "flush_buffer": 1,
                    "function_with_another_long_name": 1
                },
                "FUN_00004158": {
                    "initialize": 1,
                    "more_descriptive_function": 1
                },
                "FUN_000042a4": {
                    "another_function_with_long_name": 1,
                    "make_buffer": 1
                },
                "FUN_000043a0": {
                    "another_descriptive_function": 1,
                    "process_data_internal": 1
                },
                "FUN_00004b34": {
                    "free_resources": 1,
                    "function_with_long_name": 1
                },
                "FUN_00005700": {
                    "handle_negative_case": 1,
                    "yet_another_descriptive_function": 1
                },
                "FUN_00006768": {
                    "parse_data": 1,
                    "process_data": 7,
                    "process_function": 2,
                    "reengineer_function": 1,
                    "stream_flush": 1,
                    "stream_io_function": 1,
                    "stream_read": 1,
                    "stream_read_write": 1
                },
                "LAB_00006754_1": {
                    "label1": 1,
                    "label_00006754_1": 2
                },
                "__sflush_r": {
                    "flush2": 1,
                    "flush_buffer": 2,
                    "flush_function": 1,
                    "flush_function2": 1,
                    "flush_stream": 1
                },
                "__sinit": {
                    "initialize": 2,
                    "initialize_buffer": 1,
                    "initialize_output_buffer": 1,
                    "initialize_something": 1,
                    "initialize_stream": 1
                },
                "__smakebuf_r": {
                    "make_buffer": 4,
                    "make_buffer_function": 1
                },
                "_fflush_r": {
                    "flush": 1,
                    "flush_file_buffer": 1,
                    "flush_function": 1,
                    "flush_memory": 1
                },
                "_free_r": {
                    "free_function": 1,
                    "free_memory": 4
                },
                "_fwalk": {
                    "fwalk_function": 1,
                    "walk": 1,
                    "walk_files": 1,
                    "walk_function": 2
                },
                "_smakebuf_r": {
                    "make_buffer": 1
                },
                "code": {
                    "function_pointer": 1,
                    "function_ptr": 1
                },
                "iVar2": {
                    "index_var": 1,
                    "int_var": 1,
                    "int_var2": 2,
                    "result": 3,
                    "return_value": 1,
                    "temp2": 9,
                    "temp_var2": 4,
                    "temp_var_2": 1,
                    "var2": 6,
                    "var_2": 2,
                    "var_i1": 1
                },
                "param_1": {
                    "arg1": 1,
                    "array1": 1,
                    "buffer": 6,
                    "data1": 1,
                    "data_buffer": 1,
                    "data_ptr": 1,
                    "input_1": 1,
                    "input_array": 3,
                    "input_buffer": 2,
                    "output_buffer": 2,
                    "output_ptr": 1,
                    "p1": 1,
                    "param1": 1,
                    "param_array": 1,
                    "param_array1": 1,
                    "param_buffer": 1,
                    "pointer1": 1,
                    "pointer_to_data": 1,
                    "ptr_array": 1,
                    "stream": 2,
                    "stream_state": 1
                },
                "param_2": {
                    "arg2": 1,
                    "array2": 1,
                    "buffer": 1,
                    "data": 2,
                    "data2": 1,
                    "data_array": 1,
                    "data_buffer": 1,
                    "file_data": 1,
                    "file_pointer": 1,
                    "file_struct": 1,
                    "info_ptr": 1,
                    "input_2": 1,
                    "input_buffer": 1,
                    "input_data": 1,
                    "input_pointer": 2,
                    "input_ptr": 1,
                    "lookup_table": 1,
                    "p2": 1,
                    "param": 1,
                    "param2": 1,
                    "param_array2": 1,
                    "param_ptr": 1,
                    "param_value": 1,
                    "pointer2": 1,
                    "pointer_to_param": 1,
                    "ptr_data": 1,
                    "stream": 2,
                    "stream_buffer": 1
                },
                "param_3": {
                    "arg1": 2,
                    "arg_3": 1,
                    "buffer_size": 1,
                    "flag_1": 1,
                    "input_param_1": 1,
                    "offset": 1,
                    "p3": 1,
                    "param3": 4,
                    "param_3": 3,
                    "param_size": 1,
                    "param_value1": 1,
                    "size": 4,
                    "value": 1,
                    "value1": 7,
                    "value_1": 1,
                    "var3": 1
                },
                "param_4": {
                    "arg2": 2,
                    "arg_4": 1,
                    "flag_2": 1,
                    "input_param_2": 1,
                    "p4": 1,
                    "param": 2,
                    "param4": 4,
                    "param_4": 4,
                    "param_flag": 1,
                    "param_value": 1,
                    "param_value2": 1,
                    "size": 1,
                    "unused": 1,
                    "user_data": 1,
                    "value2": 7,
                    "value_2": 1,
                    "var4": 1
                },
                "uVar1": {
                    "flag": 1,
                    "flags": 1,
                    "short_var": 1,
                    "state": 1,
                    "temp1": 9,
                    "temp_value1": 1,
                    "temp_var1": 4,
                    "temp_var_1": 1,
                    "u_short_var1": 1,
                    "ushort_var": 1,
                    "ushort_var1": 1,
                    "var1": 6,
                    "var_1": 2,
                    "var_u1": 1
                },
                "uVar3": {
                    "result": 1,
                    "return_val": 1,
                    "temp": 1,
                    "temp3": 8,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "temp_var3": 3,
                    "temp_var_3": 1,
                    "temp_variable": 1,
                    "tmp": 1,
                    "u_var3": 1,
                    "undefined4_var": 1,
                    "undefined4_var3": 1,
                    "var3": 6,
                    "var_3": 2,
                    "var_u2": 1
                },
                "uVar4": {
                    "buffer_flags": 1,
                    "flag": 2,
                    "flag1": 2,
                    "flag3": 1,
                    "flags": 3,
                    "flags_var": 1,
                    "temp4": 6,
                    "temp_var4": 3,
                    "temp_var_4": 1,
                    "u_short_var2": 1,
                    "ushort_var2": 1,
                    "ushort_var4": 1,
                    "var4": 5,
                    "var_4": 2,
                    "var_u3": 1
                },
                "uVar5": {
                    "buffer_size": 1,
                    "flag2": 2,
                    "shifted_size": 1,
                    "shifted_var": 1,
                    "temp4": 1,
                    "temp5": 6,
                    "temp_value3": 1,
                    "temp_var3": 1,
                    "temp_var5": 3,
                    "temp_var_5": 1,
                    "temp_variable2": 1,
                    "u_var4": 1,
                    "uint_var": 1,
                    "uint_var5": 1,
                    "value": 1,
                    "var5": 5,
                    "var_5": 2,
                    "var_u4": 1
                }
            },
            "called": [
                "FUN_00004158",
                "FUN_000043a0",
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_0000404c",
                "FUN_000042a4"
            ],
            "calling": [
                "FUN_00005e10"
            ],
            "code": "\nundefined4\nprocess_data_00006768(undefined4 *buffer,undefined4 *data,undefined4 value1,undefined4 value2)\n\n{\n  undefined2 temp1;\n  int temp2;\n  undefined4 temp3;\n  ushort temp4;\n  uint temp5;\n  \n  if ((buffer != (undefined4 *)0x0) && (buffer[6] == 0)) {\n    initialize();\n  }\n  if (data == &DAT_000079b8) {\n    data = (undefined4 *)buffer[1];\n  }\n  else if (data == (undefined4 *)&DAT_000079d8) {\n    data = (undefined4 *)buffer[2];\n  }\n  else if (data == (undefined4 *)&DAT_00007998) {\n    data = (undefined4 *)buffer[3];\n  }\n  temp4 = *(ushort *)(data + 3);\n  data[1] = 0;\n  temp5 = (uint)*(ushort *)(data + 3);\n  if ((int)(temp5 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(temp5 << 0x1d) < 0) {\n    if ((undefined4 *)data[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)data[0xd] != data + 0x11) {\n        free_memory(buffer);\n      }\n      data[1] = data[0x10];\n      data[0xd] = 0;\n      if (data[0x10] != 0) {\n        *data = data[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(temp5 << 0x1b)) {\n      *buffer = 9;\n      temp4 = temp4 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(temp5 << 0x1c) < 0) {\n      temp2 = flush_memory(buffer,data,temp5 << 0x1c,temp5,value2);\n      if (temp2 != 0) {\n        return 0xffffffff;\n      }\n      data[2] = 0;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfff7;\n      data[6] = 0;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 4;\n  }\n  if (data[4] == 0) {\n    make_buffer(buffer,data);\n  }\n  temp4 = *(ushort *)(data + 3);\n  temp1 = *(undefined2 *)(data + 3);\n  if ((temp4 & 3) != 0) {\n    *(undefined2 *)(data + 3) = 1;\n    walk_function(0x1fff0284,&label_00006754_1);\n    *(undefined2 *)(data + 3) = temp1;\n    if ((temp4 & 9) == 9) {\n      flush_buffer(buffer,data);\n    }\n  }\n  temp3 = data[4];\n  *data = temp3;\n  temp2 = (*(function_pointer *)data[9])(buffer,data[8],temp3,data[5]);\n  data[1] = temp2;\n  if (0 < temp2) {\n    return 0;\n  }\n  temp4 = *(ushort *)(data + 3);\n  if (temp2 != 0) {\n    temp3 = 0;\n  }\n  else {\n    temp4 = temp4 | 0x20;\n  }\n  if (temp2 != 0) {\n    data[1] = temp3;\n    temp4 = temp4 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(data + 3) = temp4;\n  return 0xffffffff;\n}\n\n",
            "current_name": "process_data_00006768",
            "entrypoint": "0x00006768",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "LAB_00006754_1": "label_00006754_1",
                "__sflush_r": "flush_buffer",
                "__sinit": "initialize",
                "__smakebuf_r": "make_buffer",
                "_fflush_r": "flush_memory",
                "_free_r": "free_memory",
                "_fwalk": "walk_function",
                "_smakebuf_r": "make_buffer",
                "code": "function_pointer",
                "iVar2": "temp2",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "temp1",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0000687c": {
            "additional_data": {
                "FUN_0000687c": {
                    "convert_brackets_to_bools": 1,
                    "decode_data": 4,
                    "decompile_and_improve": 1,
                    "expand_array": 1,
                    "extract_and_count": 1,
                    "extract_byte_sequence": 2,
                    "extract_bytes": 1,
                    "extract_data": 4,
                    "process_data": 1,
                    "reverse_and_copy_bytes": 1,
                    "reverse_and_parse_data": 1,
                    "reverse_array": 2,
                    "reverse_buffer": 1,
                    "reverse_byte_array": 1,
                    "reverse_byte_sequence": 2,
                    "reverse_bytes": 2,
                    "reverse_bytes_and_repeat": 1,
                    "reverse_predicates": 1,
                    "validate_sequence": 1
                },
                "bVar7": {
                    "flag": 1,
                    "is_5e": 1,
                    "is_carat": 1,
                    "is_caret": 5,
                    "is_carrot": 2,
                    "is_condition_met": 2,
                    "is_first_char_special": 1,
                    "is_flag": 1,
                    "is_flag1_true": 1,
                    "is_flag_set": 2,
                    "is_flag_true": 1,
                    "is_in_range": 1,
                    "is_inverted": 1,
                    "is_match": 1,
                    "is_not_caret": 1,
                    "is_range": 2,
                    "is_reversed": 2,
                    "is_special_char": 2,
                    "is_symbolic": 1,
                    "is_u_var4_equal_to5_e": 1,
                    "is_value_5e": 1
                },
                "iVar3": {
                    "count": 1,
                    "counter": 2,
                    "current_index": 4,
                    "i": 3,
                    "index": 15,
                    "temp2": 2,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var_2": 1,
                    "tmp_var2": 1
                },
                "param_1": {
                    "array_length": 5,
                    "array_size": 1,
                    "buffer_size": 1,
                    "data_len": 1,
                    "data_length": 2,
                    "data_size": 2,
                    "input_length": 1,
                    "length": 5,
                    "num_elements": 1,
                    "output_size": 2,
                    "sequence_length": 3,
                    "size": 6
                },
                "param_2": {
                    "array": 1,
                    "byte_array": 5,
                    "byte_sequence": 4,
                    "data": 11,
                    "encoded_data": 1,
                    "input": 2,
                    "input_array": 2,
                    "input_buffer": 1,
                    "input_data": 2,
                    "sequence": 1
                },
                "pbVar1": {
                    "decoded_data": 1,
                    "end_of_data": 1,
                    "end_of_sequence": 1,
                    "final_data": 1,
                    "output": 2,
                    "output_array": 1,
                    "output_buffer": 1,
                    "output_data": 1,
                    "result": 19,
                    "result_data": 1,
                    "result_ptr": 2
                },
                "uVar2": {
                    "char_count": 1,
                    "compare_byte": 1,
                    "compare_value": 1,
                    "data_value": 1,
                    "inner_index": 1,
                    "input_byte": 1,
                    "next_byte": 4,
                    "next_char": 2,
                    "next_value": 1,
                    "temp": 1,
                    "temp1": 3,
                    "temp_var": 6,
                    "temp_var1": 2,
                    "temp_var2": 1,
                    "temp_var_1": 1,
                    "tmp_var": 1,
                    "tmp_var1": 2,
                    "value": 1
                },
                "uVar4": {
                    "byte1": 1,
                    "byte_value": 2,
                    "byte_var1": 1,
                    "ch": 1,
                    "current_byte": 10,
                    "current_char": 3,
                    "current_value": 4,
                    "first_byte": 4,
                    "first_char": 1,
                    "flag": 1,
                    "flag1": 1,
                    "next_value": 1,
                    "temp2": 1
                },
                "uVar5": {
                    "byte2": 1,
                    "byte_count": 1,
                    "byte_distance": 1,
                    "byte_var2": 1,
                    "count": 1,
                    "current_byte": 2,
                    "current_value": 1,
                    "end_byte": 2,
                    "end_index": 1,
                    "end_value": 1,
                    "flag2": 1,
                    "loop_counter": 1,
                    "next_byte": 1,
                    "range_end": 1,
                    "second_char": 1,
                    "start": 2,
                    "start_byte": 3,
                    "start_idx": 1,
                    "start_index": 1,
                    "start_range": 2,
                    "temp3": 1,
                    "temp_flag": 1,
                    "temp_value": 1,
                    "tmp_var2": 1,
                    "upper_bound": 1
                },
                "uVar6": {
                    "byte3": 1,
                    "byte_var3": 1,
                    "end": 2,
                    "end_byte": 4,
                    "end_idx": 1,
                    "end_index": 1,
                    "end_range": 2,
                    "end_value": 3,
                    "jump_size": 1,
                    "next_byte": 4,
                    "next_index": 1,
                    "next_value": 2,
                    "range_start": 1,
                    "start_byte": 1,
                    "start_value": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_value": 1,
                    "temp_var_3": 1,
                    "third_char": 1
                },
                "uVar8": {
                    "compare_char": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c"
            ],
            "code": "\nbyte * reverse_and_parse_data_0000687c(int size,byte *data)\n\n{\n  byte *result;\n  uint temp_var;\n  int index;\n  uint current_byte;\n  uint start_byte;\n  uint next_byte;\n  bool is_caret;\n  \n  current_byte = (uint)*data;\n  is_caret = current_byte == 0x5e;\n  if (is_caret) {\n    current_byte = (uint)data[1];\n    data = data + 2;\n  }\n  else {\n    data = data + 1;\n  }\n  index = size + -1;\n  do {\n    index = index + 1;\n    *(bool *)index = is_caret;\n  } while (index != size + 0xff);\n  if (current_byte == 0) {\n    result = data + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      start_byte = current_byte;\n      *(bool *)(size + start_byte) = !is_caret;\n      data = data + 1;\n      while( true ) {\n        current_byte = (uint)data[-1];\n        if (current_byte != 0x2d) break;\n        next_byte = (uint)*data;\n        if ((next_byte == 0x5d) || (temp_var = start_byte, (int)next_byte < (int)start_byte)) goto LAB_000068aa;\n        do {\n          temp_var = temp_var + 1;\n          *(bool *)(size + temp_var) = !is_caret;\n        } while ((int)temp_var < (int)next_byte);\n        index = ~start_byte + next_byte;\n        if ((int)next_byte <= (int)start_byte) {\n          index = 0;\n        }\n        start_byte = start_byte + 1 + index;\n        data = data + 2;\n      }\n      result = data;\n    } while ((current_byte != 0x5d) && (result = data + -1, current_byte != 0));\n  }\n  return result;\n}\n\n",
            "current_name": "reverse_and_parse_data_0000687c",
            "entrypoint": "0x0000687c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0000687c": "reverse_and_parse_data_0000687c",
                "bVar7": "is_caret",
                "iVar3": "index",
                "param_1": "size",
                "param_2": "data",
                "pbVar1": "result",
                "uVar2": "temp_var",
                "uVar4": "current_byte",
                "uVar5": "start_byte",
                "uVar6": "next_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000068f0": {
            "additional_data": {
                "0x400": {
                    "new_size": 1
                },
                "0xffffffff": {
                    "allocation_failed": 1,
                    "error": 1,
                    "failure_indicator": 1
                },
                "FUN_00004bd0": {
                    "copy_data": 2,
                    "memcpy_with_offset": 1
                },
                "FUN_000060b0": {
                    "copy_data": 1,
                    "copy_memory": 2
                },
                "FUN_000060cc": {
                    "copy_data_and_resize": 1,
                    "initialize_buffer": 1,
                    "reallocate_buffer": 1
                },
                "FUN_000068f0": {
                    "allocate_memory": 3,
                    "allocate_or_expand_buffer": 2,
                    "allocate_or_expand_memory": 1,
                    "allocate_or_grow_buffer": 1,
                    "allocate_or_resize_buffer": 1,
                    "allocate_or_resize_memory": 2,
                    "allocate_or_update_memory": 1,
                    "create_resizable_buffer": 1,
                    "expand_or_allocate": 1,
                    "expand_or_allocate_buffer": 1,
                    "initialize_buffer": 3,
                    "reallocate_memory": 2,
                    "resizable_array_allocation": 1,
                    "resize_array": 3,
                    "resize_buffer": 4,
                    "resize_memory_block": 1
                },
                "_malloc_r": {
                    "allocate_memory": 7,
                    "allocate_memory_block": 1
                },
                "_realloc_r": {
                    "expand_memory": 2,
                    "reallocate_memory": 5,
                    "reallocate_memory_block": 1,
                    "resize_memory": 1
                },
                "iVar1": {
                    "allocated_memory": 1,
                    "malloc_result": 1,
                    "new_allocation": 1,
                    "new_array": 3,
                    "new_array_pointer": 1,
                    "new_buffer": 14,
                    "new_buffer_address": 1,
                    "new_buffer_ptr": 1,
                    "new_memory": 5,
                    "new_memory_block": 2,
                    "new_pointer": 1
                },
                "iVar2": {
                    "buffer_size": 2,
                    "current_array_size": 1,
                    "current_buffer_size": 3,
                    "current_memory_size": 2,
                    "current_size": 12,
                    "old_buffer": 1,
                    "old_buffer_size": 4,
                    "old_memory": 1,
                    "old_size": 2,
                    "original_buffer_size": 1,
                    "realloc_size": 1,
                    "size": 1
                },
                "malloc_r": {
                    "allocate_memory": 1
                },
                "memcpy": {
                    "copy_array": 1,
                    "copy_memory": 6
                },
                "param_1": {
                    "buffer_size": 1,
                    "context": 1,
                    "mem_context": 2,
                    "mem_manager": 1,
                    "mem_size": 1,
                    "memory_manager": 4,
                    "memory_pool": 1,
                    "num_bytes": 1,
                    "param": 4,
                    "param1": 5,
                    "param_1": 2,
                    "param_a": 1,
                    "param_ptr": 2,
                    "size": 4,
                    "size_param": 1
                },
                "param_2": {
                    "array": 6,
                    "array_param": 1,
                    "buffer": 14,
                    "buffer_info": 2,
                    "buffer_ptr": 1,
                    "memory_block": 2,
                    "memory_data": 1,
                    "param2": 2,
                    "source": 1,
                    "updated_memory": 1
                },
                "param_3": {
                    "old_size": 1
                },
                "param_4": {
                    "new_size": 1
                }
            },
            "called": [
                "FUN_00004bd0",
                "FUN_000060b0",
                "FUN_000060cc"
            ],
            "calling": [],
            "code": "\nundefined4 allocate_or_grow_buffer_000068f0(undefined4 param1,int *buffer)\n\n{\n  int new_buffer;\n  int current_size;\n  \n  if ((int *)buffer[0xd] == buffer + 0x11) {\n    new_buffer = allocate_memory(param1,0x400);\n    if (new_buffer != 0) {\n      buffer[0xe] = 0x400;\n      buffer[0xd] = new_buffer;\n      *(undefined *)(new_buffer + 0x3ff) = *(undefined *)((int)buffer + 0x46);\n      *(undefined *)(new_buffer + 0x3fe) = *(undefined *)((int)buffer + 0x45);\n      *(undefined *)(new_buffer + 0x3fd) = *(undefined *)(buffer + 0x11);\n      *buffer = new_buffer + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    current_size = buffer[0xe];\n    new_buffer = reallocate_memory(param1,(int *)buffer[0xd],current_size << 1);\n    if (new_buffer != 0) {\n      copy_memory(new_buffer + current_size,new_buffer,current_size);\n      buffer[0xd] = new_buffer;\n      buffer[0xe] = current_size << 1;\n      *buffer = new_buffer + current_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "allocate_or_grow_buffer_000068f0",
            "entrypoint": "0x000068f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000068f0": "allocate_or_grow_buffer_000068f0",
                "_malloc_r": "allocate_memory",
                "_realloc_r": "reallocate_memory",
                "iVar1": "new_buffer",
                "iVar2": "current_size",
                "malloc_r": "allocate_memory",
                "memcpy": "copy_memory",
                "param_1": "param1",
                "param_2": "buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006964": {
            "additional_data": {
                "FUN_00006964": {
                    "calculate_modified_sum": 1,
                    "calculate_modified_value": 6,
                    "calculate_result": 5,
                    "calculate_sum": 18,
                    "get_adjusted_value": 1
                },
                "iVar1": {
                    "adjusted_value": 2,
                    "current_index": 4,
                    "current_value": 1,
                    "index": 3,
                    "modified_value": 3,
                    "new_index": 1,
                    "new_value": 1,
                    "result": 2,
                    "sum": 11,
                    "sum_index": 1,
                    "updated_index": 1,
                    "updated_value": 1
                },
                "param_1": {
                    "arg1": 1,
                    "error_code": 1,
                    "flags": 1,
                    "input": 3,
                    "input_value": 1,
                    "param": 3,
                    "param1": 2,
                    "previous_value": 1,
                    "result": 9,
                    "result_base": 1,
                    "undefined4": 1,
                    "undefined4_param": 1,
                    "undefined_val": 1,
                    "unknown_value": 1,
                    "value": 4
                },
                "param_2": {
                    "arg2": 1,
                    "array": 13,
                    "array_index": 3,
                    "array_pointer": 1,
                    "array_start": 1,
                    "array_start_index": 1,
                    "data_address": 1,
                    "data_pointer": 1,
                    "input_array": 1,
                    "input_val": 1,
                    "input_value": 5,
                    "param2": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_000060cc"
            ],
            "code": "\nint calculate_modified_sum_00006964(undefined4 result,int array)\n\n{\n  int sum;\n  \n  sum = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    sum = sum + *(int *)(array + sum);\n  }\n  return sum;\n}\n\n",
            "current_name": "calculate_modified_sum_00006964",
            "entrypoint": "0x00006964",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00006964": "calculate_modified_sum_00006964",
                "iVar1": "sum",
                "param_1": "result",
                "param_2": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006974": {
            "additional_data": {
                "CONCAT44": {
                    "concatenate_64": 1
                },
                "FUN_00006974": {
                    "calculate_dividend": 4,
                    "calculate_dividend_quotient_remainder": 1,
                    "calculate_division_limits": 1,
                    "calculate_result": 1,
                    "compute_division": 1,
                    "compute_division_remainder": 1,
                    "compute_divmod": 1,
                    "div_mod": 1,
                    "div_mod_operation": 1,
                    "divide_and_calculate_quotient_remainder": 1,
                    "divide_and_conquer": 1,
                    "divide_and_mod": 1,
                    "divide_and_remainder": 1,
                    "divide_integers": 1,
                    "divide_modulo_function": 1,
                    "divide_numbers": 4,
                    "divide_signed_integers": 1,
                    "divide_signed_numbers": 1,
                    "divides": 1,
                    "dividing_function": 1,
                    "division_with_limits": 1,
                    "divmod_operation": 1,
                    "find_maximum_value": 1,
                    "get_max_value": 1
                },
                "__udivmoddi4": {
                    "divide_and_modulo": 1,
                    "divide_and_remainder_helper": 1
                },
                "iVar1": {
                    "abs_denominator": 2,
                    "abs_dividend_lower": 1,
                    "abs_divisor": 2,
                    "absolute_denominator": 1,
                    "absolute_dividend": 2,
                    "absolute_dividend_2": 1,
                    "adjusted_denominator": 1,
                    "adjusted_dividend": 2,
                    "adjusted_divisor": 2,
                    "adjusted_divisor_1": 1,
                    "adjusted_divisor_high": 1,
                    "adjusted_numerator_low": 1,
                    "dividend_without_remainder": 1,
                    "neg_b_minus_a": 1,
                    "neg_dividend2_minus_dividend2": 1,
                    "negative_dividend": 2,
                    "negative_input2": 1,
                    "normalized_dividend": 1,
                    "positive_denominator": 1,
                    "reduced_dividend": 1,
                    "sign_adjusted_divisor": 1,
                    "temp": 2,
                    "udivmod_result": 1
                },
                "local_8": {
                    "divmod_params": 1,
                    "local_var": 1,
                    "quotient": 1,
                    "quotient_hi": 1,
                    "remainder": 17,
                    "remainder_array": 1,
                    "result": 1,
                    "temp_arr": 1,
                    "temp_array": 1,
                    "temp_buffer": 2,
                    "temp_register": 1,
                    "temp_storage": 1,
                    "temp_variable": 1,
                    "temporary_storage": 1
                },
                "param_1": {
                    "a": 1,
                    "dividend": 9,
                    "dividend1": 5,
                    "dividend_1": 1,
                    "dividend_high": 2,
                    "dividend_low": 1,
                    "dividend_part_1": 1,
                    "dividend_significant": 1,
                    "dividend_upper": 2,
                    "input1": 1,
                    "input_1": 1,
                    "numerator": 5,
                    "numerator_high": 1
                },
                "param_2": {
                    "b": 1,
                    "denominator": 5,
                    "dividend2": 5,
                    "dividend_2": 1,
                    "dividend_high": 1,
                    "dividend_low": 2,
                    "dividend_lower": 2,
                    "dividend_part_2": 1,
                    "dividend_trivial": 1,
                    "divider": 1,
                    "divisor": 5,
                    "divisor_1": 1,
                    "divisor_h": 1,
                    "divisor_high": 1,
                    "input2": 1,
                    "input_2": 1,
                    "numerator_low": 1
                },
                "param_3": {
                    "c": 1,
                    "denominator_high": 1,
                    "dividend": 1,
                    "dividend_hi": 1,
                    "dividend_positive": 1,
                    "divisor1": 5,
                    "divisor_1": 1,
                    "divisor_2": 1,
                    "divisor_high": 2,
                    "divisor_l": 1,
                    "divisor_low": 2,
                    "divisor_part_1": 1,
                    "divisor_significant": 1,
                    "divisor_upper": 2,
                    "input3": 1,
                    "input_3": 1,
                    "modulo_dividend": 1,
                    "modulus": 1,
                    "num1": 1,
                    "num_3": 1,
                    "param_3": 1,
                    "remainder": 2,
                    "x1": 1
                },
                "param_4": {
                    "d": 1,
                    "denominator": 1,
                    "denominator_low": 1,
                    "divider_positive": 1,
                    "divisor": 1,
                    "divisor2": 5,
                    "divisor_2": 1,
                    "divisor_hi": 1,
                    "divisor_high": 1,
                    "divisor_low": 2,
                    "divisor_lower": 2,
                    "divisor_part_2": 1,
                    "divisor_trivial": 1,
                    "has_remainder": 1,
                    "input4": 1,
                    "input_4": 1,
                    "modulo_divisor": 1,
                    "modulus_flag": 1,
                    "negative_divisor": 1,
                    "num2": 1,
                    "num_4": 1,
                    "param_4": 1,
                    "rem_high": 1,
                    "sign_flag": 1,
                    "x2": 1
                },
                "uVar2": {
                    "quotient": 9,
                    "quotient_remainder": 6,
                    "result": 16
                }
            },
            "called": [
                "FUN_00006a14"
            ],
            "calling": [
                "FUN_0000443c"
            ],
            "code": "\nundefined8 divide_and_calculate_quotient_remainder_00006974(int dividend,int dividend2,int divisor1,int divisor2)\n\n{\n  int negative_dividend;\n  undefined8 result;\n  undefined remainder [8];\n  \n  if ((divisor2 == 0) && (divisor1 == 0)) {\n    if (dividend2 < 0) {\n      dividend = 0;\n      dividend2 = -0x80000000;\n    }\n    else if (dividend2 != 0 || dividend != 0) {\n      dividend2 = 0x7fffffff;\n      dividend = -1;\n    }\n    return concatenate_64(dividend2,dividend);\n  }\n  if (dividend2 < 0) {\n    negative_dividend = -dividend2 - (uint)(dividend != 0);\n    if (divisor2 < 0) {\n      result = divide_and_remainder_helper(-dividend,negative_dividend,-divisor1,-divisor2 - (uint)(divisor1 != 0),remainder);\n      return result;\n    }\n    result = divide_and_remainder_helper(-dividend,negative_dividend,divisor1,divisor2,remainder);\n    return concatenate_64(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (divisor2 < 0) {\n    result = divide_and_remainder_helper(dividend,dividend2,-divisor1,-divisor2 - (uint)(divisor1 != 0),remainder);\n    return concatenate_64(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = divide_and_remainder_helper();\n  return result;\n}\n\n",
            "current_name": "divide_and_calculate_quotient_remainder_00006974",
            "entrypoint": "0x00006974",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_64",
                "FUN_00006974": "divide_and_calculate_quotient_remainder_00006974",
                "__udivmoddi4": "divide_and_remainder_helper",
                "iVar1": "negative_dividend",
                "local_8": "remainder",
                "param_1": "dividend",
                "param_2": "dividend2",
                "param_3": "divisor1",
                "param_4": "divisor2",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00006a14": {
            "additional_data": {
                "CARRY4": {
                    "carry4": 1,
                    "check_and_carry": 1
                },
                "FUN_00006a14": {
                    "calculate_division": 1,
                    "calculate_division_and_remainder": 2,
                    "calculate_division_remainder": 2,
                    "calculate_division_with_remainder": 1,
                    "calculate_divisor": 1,
                    "calculate_quotient_and_remainder": 5,
                    "compute_division": 1,
                    "div_and_mod": 1,
                    "div_mod": 1,
                    "divide_and_modulo": 1,
                    "divide_and_remainder": 5,
                    "divide_and_store_remainder": 2,
                    "divide_with_remainder": 1,
                    "division": 1,
                    "division_and_modulus": 1,
                    "division_with_remainder": 2,
                    "perform_division": 2,
                    "perform_unsigned_division": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 1,
                    "leading_zeros": 1
                },
                "UNRECOVERED_JUMPTABLE": {
                    "jump_table": 4
                },
                "bVar10": {
                    "carry": 7,
                    "carry_check": 1,
                    "carry_flag": 19,
                    "is_carry": 3
                },
                "bVar12": {
                    "is_divisor_zero": 1
                },
                "iVar2": {
                    "bit_count": 1,
                    "bit_index": 1,
                    "count": 1,
                    "num_leading_zeros": 1,
                    "shift": 4,
                    "shift_amount": 14,
                    "shift_bits": 1,
                    "shift_count": 7
                },
                "param_1": {
                    "dividend": 29,
                    "dividend1": 1,
                    "numerator": 1
                },
                "param_2": {
                    "denominator": 1,
                    "dividend2": 1,
                    "dividend_bit_index": 1,
                    "dividend_ext": 1,
                    "dividend_extension": 1,
                    "dividend_high": 8,
                    "dividend_low": 1,
                    "dividend_lower": 2,
                    "dividend_upper": 6,
                    "dividend_upper_bits": 1,
                    "divisor": 7,
                    "remainder": 1
                },
                "param_3": {
                    "divisor": 22,
                    "divisor1": 1,
                    "divisor_lower": 1,
                    "inverse_divisor": 1,
                    "num_bits": 1,
                    "numer": 1,
                    "quotient": 2,
                    "quotient1": 1,
                    "quotient_high": 1
                },
                "param_4": {
                    "denom": 1,
                    "divisor2": 1,
                    "divisor_ext": 1,
                    "divisor_extension": 1,
                    "divisor_high": 8,
                    "divisor_lower": 2,
                    "divisor_upper": 4,
                    "divisor_upper_bits": 1,
                    "quotient2": 1,
                    "quotient_bit_index": 1,
                    "quotient_low": 1,
                    "remainder": 3,
                    "remainder_bit_width": 1,
                    "remainder_upper": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "sub_divisor": 1,
                    "subtrahend": 1
                },
                "param_5": {
                    "divisor_ptr": 1,
                    "quotient": 5,
                    "quotient_and_remainder": 7,
                    "remainder": 11,
                    "remainder_ptr": 1,
                    "remainder_quotient": 1,
                    "result": 3,
                    "result_array": 2
                },
                "uVar1": {
                    "bit_shift": 1,
                    "dividend_quotient": 1,
                    "divisor_lower": 1,
                    "numerator_shifted": 1,
                    "partial_quotient": 1,
                    "q_low": 1,
                    "quotient": 11,
                    "quotient1": 5,
                    "quotient_high": 2,
                    "quotient_higher": 1,
                    "quotient_lower": 1,
                    "quotient_lower_bits": 1,
                    "quotient_upper1": 1,
                    "temp1": 2,
                    "temp_quotient1": 1
                },
                "uVar10": {
                    "carry_flag": 1,
                    "is_dividend_less_than_shifted_divisor": 1
                },
                "uVar11": {
                    "final_quotient": 1,
                    "quotient": 1,
                    "result": 22,
                    "result_value": 1,
                    "return_val": 1,
                    "return_value": 5
                },
                "uVar3": {
                    "dividend1_temp": 1,
                    "dividend_high": 1,
                    "dividend_shifted": 6,
                    "divisor_higher": 1,
                    "quotient2": 1,
                    "quotient_high": 1,
                    "quotient_upper2": 1,
                    "remainder_lower": 1,
                    "temp": 1,
                    "temp1": 8,
                    "temp2": 2,
                    "temp_1": 1,
                    "temp_dividend": 1,
                    "temp_quotient2": 1,
                    "temp_upper": 1,
                    "temp_var1": 1,
                    "tmp_dividend_high": 1,
                    "upper_divisor": 1
                },
                "uVar4": {
                    "dividend2_temp": 1,
                    "divisor_higher_minus_shifted_higher": 1,
                    "divisor_multiple": 1,
                    "divisor_shifted": 2,
                    "quotient": 1,
                    "quotient1": 3,
                    "quotient1_overflow": 1,
                    "quotient2": 1,
                    "quotient_low": 1,
                    "quotient_upper": 1,
                    "quotient_upper3": 1,
                    "remainder": 1,
                    "temp2": 8,
                    "temp3": 1,
                    "temp_2": 1,
                    "temp_divisor": 1,
                    "temp_lower": 1,
                    "temp_quotient": 1,
                    "temp_quotient3": 1,
                    "temp_var2": 1,
                    "tmp_dividend_low": 1
                },
                "uVar5": {
                    "divisor_upper": 1,
                    "quotient1": 1,
                    "quotient2": 4,
                    "quotient3": 1,
                    "quotient_and_remainder_lower": 1,
                    "quotient_combined": 1,
                    "quotient_higher_minus_shifted_higher": 1,
                    "quotient_low": 2,
                    "quotient_low_result": 1,
                    "quotient_lower": 1,
                    "quotient_normalized": 1,
                    "quotient_part1": 1,
                    "remainder": 1,
                    "remainder1": 1,
                    "temp3": 6,
                    "temp_1": 1,
                    "temp_remainder": 1,
                    "temp_result": 1,
                    "temp_var3": 1,
                    "tmp1": 1,
                    "tmp_remainder_low": 1,
                    "upper_remainder1": 1
                },
                "uVar6": {
                    "dividend1_remainder": 1,
                    "dividend_remainder": 1,
                    "mul_one": 1,
                    "partial_quotient": 1,
                    "quotient1_high": 1,
                    "quotient2": 1,
                    "quotient_high": 1,
                    "quotient_high_result": 1,
                    "quotient_part2": 1,
                    "quotient_temp": 1,
                    "remain_after_subtraction": 1,
                    "remainder1": 1,
                    "remainder_higher": 1,
                    "remainder_low": 1,
                    "remainder_lower": 1,
                    "remainder_normalized": 1,
                    "remainder_upper": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp4": 5,
                    "temp_2": 1,
                    "temp_divisor1": 1,
                    "temp_var4": 1,
                    "tmp2": 1,
                    "tmp_quotient": 1,
                    "upper_remainder2": 1
                },
                "uVar7": {
                    "dividend_remainder": 1,
                    "divisor1": 1,
                    "divisor_low": 2,
                    "divisor_lower": 2,
                    "divisor_upper": 1,
                    "low_mask": 1,
                    "mul_two": 1,
                    "partial_remainder": 1,
                    "quotient2": 1,
                    "quotient2_overflow": 1,
                    "quotient3": 1,
                    "remainder2": 1,
                    "residual": 1,
                    "shifted_divisor": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 5,
                    "temp_3": 1,
                    "temp_divisor2": 1,
                    "temp_lower": 1,
                    "temp_var5": 1,
                    "tmp3": 1,
                    "upper_remainder3": 1
                },
                "uVar8": {
                    "dividend2_remainder": 1,
                    "divisor_dividend_diff": 1,
                    "mul_result": 1,
                    "quotient": 1,
                    "quotient1": 1,
                    "quotient2_temp": 1,
                    "quotient3": 2,
                    "quotient_high": 1,
                    "quotient_lower": 1,
                    "quotient_upper": 1,
                    "remainder1": 1,
                    "remainder2": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 5,
                    "temp_3": 1,
                    "temp_4": 1,
                    "temp_divisor3": 1,
                    "temp_upper": 1,
                    "temp_var6": 1,
                    "tmp4": 1,
                    "tmp_remainder_high": 1
                },
                "uVar9": {
                    "dividend_upper": 1,
                    "divisor_combined": 1,
                    "divisor_high": 1,
                    "divisor_higher_quotient": 1,
                    "divisor_low": 1,
                    "divisor_shift": 1,
                    "divisor_shifted": 2,
                    "divisor_upper": 2,
                    "divisor_upper_dividend_diff": 1,
                    "quotient1_temp": 1,
                    "quotient2": 1,
                    "quotient2_high": 1,
                    "quotient4": 2,
                    "quotient_factor": 1,
                    "quotient_shifted": 1,
                    "shifted_num": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp7": 4,
                    "temp_4": 1,
                    "temp_quotient": 1,
                    "temp_shifted": 1,
                    "temp_var7": 1,
                    "tmp5": 1,
                    "tmp_quotient_high": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00006974"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong divide_and_store_remainder_00006a14(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *remainder)\n\n{\n  code *jump_table;\n  uint quotient;\n  int shift_amount;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool carry_flag;\n  ulonglong result;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = leading_zeros(divisor);\n      temp3 = divisor;\n      if (shift_amount != 0) {\n        temp3 = divisor << shift_amount;\n        dividend_high = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      temp4 = temp3 >> 0x10;\n      temp6 = dividend_high / temp4;\n      temp1 = dividend >> 0x10 | (dividend_high - temp4 * temp6) * 0x10000;\n      quotient = temp6 * (temp3 & 0xffff);\n      temp2 = temp6;\n      if (temp1 <= quotient && quotient - temp1 != 0) {\n        carry_flag = carry4(temp3,temp1);\n        temp1 = temp3 + temp1;\n        temp2 = temp6 - 1;\n        if ((carry_flag == false) && (temp1 <= quotient && quotient - temp1 != 0)) {\n          temp2 = temp6 - 2;\n          temp1 = temp1 + temp3;\n        }\n      }\n      temp6 = (temp1 - quotient) / temp4;\n      temp4 = dividend & 0xffff | ((temp1 - quotient) - temp4 * temp6) * 0x10000;\n      temp1 = temp6 * (temp3 & 0xffff);\n      quotient = temp6;\n      if (temp4 <= temp1 && temp1 - temp4 != 0) {\n        carry_flag = carry4(temp3,temp4);\n        temp4 = temp3 + temp4;\n        quotient = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= temp1 && temp1 - temp4 != 0)) {\n          quotient = temp6 - 2;\n          temp4 = temp4 + temp3;\n        }\n      }\n      temp4 = temp4 - temp1;\n      quotient = quotient | temp2 << 0x10;\n      temp3 = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)software_udf(0xff,0x6abc);\n        result = (*jump_table)();\n        return result;\n      }\n      shift_amount = leading_zeros(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        temp7 = divisor >> 0x10;\n        temp5 = divisor & 0xffff;\n        temp3 = 1;\n        temp2 = divisor;\n      }\n      else {\n        temp2 = divisor << shift_amount;\n        temp7 = temp2 >> 0x10;\n        quotient = dividend_high >> (0x20U - shift_amount & 0xff);\n        temp3 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        temp1 = quotient / temp7;\n        temp5 = temp2 & 0xffff;\n        temp6 = temp3 >> 0x10 | (quotient - temp7 * temp1) * 0x10000;\n        temp4 = temp1 * temp5;\n        dividend = dividend << shift_amount;\n        quotient = temp1;\n        if (temp6 <= temp4 && temp4 - temp6 != 0) {\n          carry_flag = carry4(temp2,temp6);\n          temp6 = temp2 + temp6;\n          quotient = temp1 - 1;\n          if ((carry_flag == false) && (temp6 <= temp4 && temp4 - temp6 != 0)) {\n            quotient = temp1 - 2;\n            temp6 = temp6 + temp2;\n          }\n        }\n        temp1 = (temp6 - temp4) / temp7;\n        dividend_high = temp3 & 0xffff | ((temp6 - temp4) - temp7 * temp1) * 0x10000;\n        temp4 = temp1 * temp5;\n        temp3 = temp1;\n        if (dividend_high <= temp4 && temp4 - dividend_high != 0) {\n          carry_flag = carry4(temp2,dividend_high);\n          dividend_high = temp2 + dividend_high;\n          temp3 = temp1 - 1;\n          if ((carry_flag == false) && (dividend_high <= temp4 && temp4 - dividend_high != 0)) {\n            temp3 = temp1 - 2;\n            dividend_high = dividend_high + temp2;\n          }\n        }\n        dividend_high = dividend_high - temp4;\n        temp3 = temp3 | quotient << 0x10;\n      }\n      temp6 = dividend_high / temp7;\n      temp4 = dividend >> 0x10 | (dividend_high - temp7 * temp6) * 0x10000;\n      quotient = temp5 * temp6;\n      temp1 = temp6;\n      if (temp4 <= quotient && quotient - temp4 != 0) {\n        carry_flag = carry4(temp2,temp4);\n        temp4 = temp2 + temp4;\n        temp1 = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= quotient && quotient - temp4 != 0)) {\n          temp1 = temp6 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp6 = (temp4 - quotient) / temp7;\n      temp4 = dividend & 0xffff | ((temp4 - quotient) - temp7 * temp6) * 0x10000;\n      temp5 = temp5 * temp6;\n      quotient = temp6;\n      if (temp4 <= temp5 && temp5 - temp4 != 0) {\n        carry_flag = carry4(temp2,temp4);\n        temp4 = temp2 + temp4;\n        quotient = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= temp5 && temp5 - temp4 != 0)) {\n          quotient = temp6 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp4 = temp4 - temp5;\n      quotient = quotient | temp1 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp4 >> leading_zeros(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n      return 0;\n    }\n    quotient = 0;\n    temp3 = 0;\n  }\n  else {\n    shift_amount = leading_zeros(divisor_high);\n    if (shift_amount != 0) {\n      temp5 = 0x20 - shift_amount;\n      temp1 = divisor >> (temp5 & 0xff) | divisor_high << shift_amount;\n      temp7 = temp1 >> 0x10;\n      quotient = dividend_high >> (temp5 & 0xff);\n      temp3 = dividend >> (temp5 & 0xff) | dividend_high << shift_amount;\n      temp4 = quotient / temp7;\n      temp2 = temp3 >> 0x10 | (quotient - temp7 * temp4) * 0x10000;\n      temp6 = temp4 * (temp1 & 0xffff);\n      dividend = dividend << shift_amount;\n      quotient = temp4;\n      if (temp2 <= temp6 && temp6 - temp2 != 0) {\n        carry_flag = carry4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= temp6 && temp6 - temp2 != 0)) {\n          quotient = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp4 = (temp2 - temp6) / temp7;\n      temp2 = temp3 & 0xffff | ((temp2 - temp6) - temp7 * temp4) * 0x10000;\n      temp6 = temp4 * (temp1 & 0xffff);\n      temp3 = temp4;\n      if (temp2 <= temp6 && temp6 - temp2 != 0) {\n        carry_flag = carry4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        temp3 = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= temp6 && temp6 - temp2 != 0)) {\n          temp3 = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp3 = temp3 | quotient << 0x10;\n      result = (ulonglong)temp3 * (ulonglong)(divisor << shift_amount);\n      if (CONCAT44(temp2 - temp6,dividend) < result) {\n        result = result - CONCAT44(temp1,divisor << shift_amount);\n        temp3 = temp3 - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        quotient = ((temp2 - temp6) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = quotient << (temp5 & 0xff) | dividend - (uint)result >> shift_amount;\n        remainder[1] = quotient >> shift_amount;\n      }\n      return (ulonglong)temp3;\n    }\n    if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - divisor_high) - (uint)carry_flag;\n      quotient = 1;\n    }\n    else {\n      quotient = 0;\n    }\n    temp3 = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n    }\n  }\n  return CONCAT44(temp3,quotient);\n}\n\n",
            "current_name": "divide_and_store_remainder_00006a14",
            "entrypoint": "0x00006a14",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "carry4",
                "FUN_00006a14": "divide_and_store_remainder_00006a14",
                "LZCOUNT": "leading_zeros",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "bVar10": "carry_flag",
                "iVar2": "shift_amount",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "uVar1": "quotient",
                "uVar11": "result",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "uVar9": "temp7"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_0000099c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001448",
            "FUN_000015d0",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ],
        [
            "FUN_00000d76",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_00001628",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00002028",
            "FUN_0000258c"
        ],
        [
            "FUN_000013b8",
            "FUN_000017dc"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 773719
}