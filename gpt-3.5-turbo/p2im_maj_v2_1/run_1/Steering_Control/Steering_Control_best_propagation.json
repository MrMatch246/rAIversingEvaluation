{
    "functions": {
        "FUN_000800f4": {
            "additional_data": {
                "DAT_200708a0": {
                    "data_status": 1,
                    "flag": 14,
                    "flag_variable": 2
                },
                "FUN_000800f4": {
                    "initialize_flag": 16,
                    "initialize_flag_if_false": 1,
                    "initialize_flag_if_not_set": 1,
                    "initialize_flag_if_zero": 1,
                    "initialize_if_flag_not_set": 1,
                    "set_flag_if_not_set": 3,
                    "set_flag_if_unset": 3,
                    "update_and_return": 1,
                    "update_data_status": 1,
                    "update_flag": 3
                },
                "param_1": {
                    "input": 14,
                    "input_param": 1,
                    "input_parameter": 2,
                    "input_value": 10,
                    "new_value": 1,
                    "status": 1,
                    "value": 2
                }
            },
            "called": [],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initialize_flag_if_not_set_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "current_name": "initialize_flag_if_not_set_000800f4",
            "entrypoint": "0x000800f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000800f4": "initialize_flag_if_not_set_000800f4",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080118": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080118",
            "entrypoint": "0x00080118",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080164": {
            "additional_data": {
                "FUN_00080164": {
                    "initialize_data": 1,
                    "initialize_data_processing": 2,
                    "initiate_data_processing": 1,
                    "process_and_handle_data": 1,
                    "process_and_initialize_data": 1,
                    "process_and_print_data": 3,
                    "process_and_return_data": 1,
                    "process_and_send_data": 2,
                    "process_and_store_data": 1,
                    "process_and_update_data": 2,
                    "process_data": 8,
                    "process_data_and_return": 1,
                    "process_data_and_send": 1,
                    "process_data_and_update_data_ptrs": 1,
                    "process_data_batch": 1,
                    "process_data_from_binary": 1,
                    "process_data_with_fixed_size": 1,
                    "process_data_with_params": 1,
                    "process_multiple_data": 1
                },
                "data": {
                    "byte_array": 1,
                    "data": 1,
                    "data_array": 1,
                    "data_buffer": 4,
                    "data_ptr": 1
                },
                "param_1": {
                    "address_1": 1,
                    "arg1": 4,
                    "byte_array": 1,
                    "data1": 1,
                    "data_a": 1,
                    "data_pointer": 1,
                    "input1": 1,
                    "unused": 4,
                    "unused_param": 10,
                    "unused_param1": 1,
                    "unused_param_1": 2,
                    "unused_parameter_1": 1
                },
                "param_2": {
                    "address_2": 1,
                    "arg2": 4,
                    "data2": 1,
                    "data_b": 1,
                    "input2": 1,
                    "size": 1,
                    "unused": 4,
                    "unused_param": 10,
                    "unused_param2": 1,
                    "unused_param_2": 2,
                    "unused_parameter": 1,
                    "unused_parameter_2": 1
                },
                "param_3": {
                    "additional_data_param": 1,
                    "arg3": 4,
                    "data_1": 2,
                    "data_c": 1,
                    "data_param": 1,
                    "data_ptr": 1,
                    "data_size": 3,
                    "data_size1": 1,
                    "data_size_1": 1,
                    "input3": 1,
                    "input_data_ptr": 1,
                    "input_size": 1,
                    "optional_param_1": 1,
                    "param_3": 1,
                    "size": 2,
                    "size1": 1,
                    "size_1": 1,
                    "size_param": 4,
                    "size_param_1": 1,
                    "unused_param": 1,
                    "unused_param3": 1
                },
                "param_4": {
                    "arg4": 4,
                    "customization_param": 1,
                    "data_2": 2,
                    "data_d": 1,
                    "data_param": 1,
                    "data_size2": 1,
                    "data_size_2": 1,
                    "data_value": 1,
                    "input4": 1,
                    "input_data_size": 1,
                    "optional_param_2": 1,
                    "param_4": 1,
                    "size": 1,
                    "size2": 1,
                    "size_2": 1,
                    "size_param": 1,
                    "size_param_2": 1,
                    "unknown_param": 1,
                    "unused": 3,
                    "unused_param": 5,
                    "unused_param4": 1
                },
                "process_data_000806f8": {
                    "process_data": 6
                },
                "size": {
                    "array_size": 1,
                    "buffer_size": 2,
                    "data_size": 4
                }
            },
            "called": [
                "FUN_000806f8"
            ],
            "calling": [
                "FUN_000801e0",
                "FUN_00080250"
            ],
            "code": "\nvoid process_and_print_data_00080164(undefined4 unused_param,undefined4 unused_param,undefined4 arg3,undefined4 unused_param)\n\n{\n  process_data(&DAT_200708e8,0x5a);\n  process_data(&DAT_200708d4,0x5a,arg3,unused_param);\n  return;\n}\n\n",
            "current_name": "process_and_print_data_00080164",
            "entrypoint": "0x00080164",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080164": "process_and_print_data_00080164",
                "data": "data_buffer",
                "param_1": "unused_param",
                "param_2": "unused_param",
                "param_3": "arg3",
                "param_4": "unused_param",
                "process_data_000806f8": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000801e0": {
            "additional_data": {
                "DAT_200708bc": {
                    "dat_interrupt_flag": 1,
                    "error_check_variable": 1,
                    "interrupt_check": 1,
                    "interrupt_flag": 4,
                    "interrupt_status": 2
                },
                "DAT_200708d4": {
                    "data1": 1,
                    "data_1": 1,
                    "interrupt_data_1": 2
                },
                "DAT_200708e8": {
                    "data2": 1,
                    "data_2": 1,
                    "interrupt_data_2": 2
                },
                "DAT_20070be8": {
                    "peripheral_data": 4
                },
                "FUNC_00080f08": {
                    "finalize_configuration": 1,
                    "function80f08": 1,
                    "function_without_description_2": 1,
                    "perform_action": 2,
                    "reset_peripheral": 2,
                    "some_function": 1,
                    "stop_peripheral": 2,
                    "straight_and_stop": 6,
                    "unknown_function": 1,
                    "unknown_function2": 1,
                    "unused_function": 1,
                    "unused_function2": 1,
                    "wait_for_interrupt": 1
                },
                "FUN_00080164": {
                    "configure_interrupt_pins": 1,
                    "configure_interrupts": 1,
                    "do_something": 1,
                    "function80164": 1,
                    "function_without_description": 1,
                    "initialize_and_configure": 2,
                    "initialize_digital_pins": 1,
                    "initialize_parameters": 1,
                    "initialize_peripheral_registers": 1,
                    "initialize_pins": 1,
                    "perform_initial_configuration": 1,
                    "perform_interrupt": 1,
                    "perform_task": 1,
                    "setup_interrupts": 1,
                    "unknown_function": 1,
                    "unknown_function1": 1,
                    "unsupported_function": 1,
                    "unused_function": 2,
                    "unused_function1": 1
                },
                "FUN_000801e0": {
                    "initialize_and_check_peripheral": 1,
                    "initialize_and_check_peripherals": 1,
                    "initialize_and_configure_peripheral": 9,
                    "initialize_and_configure_peripherals": 2,
                    "initialize_and_control_peripheral": 3,
                    "initialize_and_control_peripherals": 2,
                    "initialize_and_run": 1,
                    "initialize_and_run_peripheral": 1,
                    "initialize_and_test_peripheral": 2,
                    "initialize_peripheral_and_attach_interrupts": 1,
                    "initialize_peripheral_and_check_status": 1,
                    "initialize_peripheral_and_configure_pins": 3,
                    "initialize_peripherals": 1,
                    "initialize_peripherals_and_check_errors": 1,
                    "initialize_system": 2
                },
                "attach": {
                    "attach_interrupt": 7,
                    "initialize_interrupt": 2,
                    "initialize_interrupts": 1,
                    "pin_mode_and_initialize_interrupt": 1
                },
                "channel": {
                    "channel_param": 1,
                    "pin_channel": 2
                },
                "configure_digital_pin_00080f0c": {
                    "configure_digital_pin": 20,
                    "configure_digital_pin_mode": 1
                },
                "data": {
                    "pin_data": 3
                },
                "delay": {
                    "delay": 1,
                    "delay_execution": 1,
                    "delay_milliseconds": 5,
                    "pause_execution": 2,
                    "wait": 2,
                    "wait_for_delay": 1
                },
                "divisor": {
                    "baud_rate": 2,
                    "divisor": 6,
                    "divisor_param": 1
                },
                "initialize_peripheral_000813dc": {
                    "initialize_peripheral": 28,
                    "initialize_peripheral_func": 1,
                    "initialize_peripherals": 2
                },
                "mode": {
                    "mode_param": 1,
                    "pin_mode": 2
                },
                "param_1": {
                    "address": 1,
                    "arg1": 2,
                    "config1": 1,
                    "input_param_1": 1,
                    "p1": 1,
                    "param1": 11,
                    "param_1": 6,
                    "unknown_param1": 1,
                    "unused": 1,
                    "unused_param": 3,
                    "unused_param1": 1,
                    "unused_parameter1": 1,
                    "var1": 1
                },
                "param_2": {
                    "arg2": 2,
                    "config2": 1,
                    "data": 1,
                    "input_param_2": 1,
                    "p2": 1,
                    "param2": 11,
                    "param_2": 6,
                    "unknown_param2": 1,
                    "unused": 1,
                    "unused_param": 3,
                    "unused_param2": 1,
                    "unused_parameter2": 1,
                    "var2": 1
                },
                "param_3": {
                    "arg3": 2,
                    "desired_mode": 1,
                    "initial_mode": 1,
                    "input_param_3": 1,
                    "p3": 1,
                    "param3": 11,
                    "param_3": 4,
                    "peripheral_address": 2,
                    "pin": 1,
                    "pin1": 1,
                    "pin_config1": 1,
                    "pin_mode_param1": 1,
                    "pin_number1": 1,
                    "pin_number_1": 1,
                    "unknown_param3": 1,
                    "var3": 1
                },
                "param_4": {
                    "arg4": 2,
                    "divisor": 3,
                    "input_param_4": 1,
                    "interrupt_number": 1,
                    "mode": 1,
                    "p4": 1,
                    "param4": 11,
                    "param_4": 4,
                    "pin2": 1,
                    "pin_config2": 1,
                    "pin_mode_param2": 1,
                    "pin_number2": 1,
                    "pin_number_2": 1,
                    "unknown_param4": 1,
                    "var4": 1
                },
                "peripheral_address": {
                    "address": 1,
                    "peripheral_address": 5
                },
                "pinMode": {
                    "configure_digital_pin": 1,
                    "configure_pin_mode": 3,
                    "set_pin_mode": 8
                },
                "pin_mode_and_initialize_interrupt_000806a0": {
                    "initialize_interrupt_and_set_pin_mode": 1,
                    "initialize_pin_mode_and_interrupt": 5,
                    "pin_mode_and_initialize_interrupt": 9,
                    "set_pin_mode_and_initialize_interrupt": 5,
                    "set_pin_mode_and_interrupt": 1
                },
                "pin_number": {
                    "pin_number": 2,
                    "pin_number_param": 1
                },
                "software_interrupt": {
                    "perform_interrupt": 1,
                    "trigger_interrupt": 2,
                    "trigger_software_interrupt": 8
                },
                "straightAndStop": {
                    "enable_straight_stop": 1,
                    "execute_straight_and_stop": 1,
                    "move_straight_and_stop": 4,
                    "perform_straight_and_stop": 1,
                    "stop_motor": 1,
                    "stop_movement": 1,
                    "stop_moving": 1,
                    "stop_moving_straight": 1,
                    "straight_and_stop": 1
                }
            },
            "called": [
                "FUN_00080f0c",
                "FUN_000806a0",
                "FUN_00080164",
                "FUN_00080f08",
                "FUN_000813dc"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nundefined8 initialize_peripheral_and_configure_pins_000801e0(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_peripheral(&DAT_20070be8,0xe100,param3,param4,param4);\n  set_pin_mode(0xd,1);\n  set_pin_mode(6,1);\n  set_pin_mode(0x39,0);\n  set_pin_mode(4,0);\n  set_pin_mode(3,0);\n  set_pin_mode(2,0);\n  attach_interrupt(&DAT_200708d4,5);\n  attach_interrupt(&DAT_200708e8,6);\n  move_straight_and_stop();\n  delay_milliseconds(1000);\n  if (DAT_200708bc == 0) {\n    trigger_software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_peripheral_and_configure_pins_000801e0",
            "entrypoint": "0x000801e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000801e0": "initialize_peripheral_and_configure_pins_000801e0",
                "attach": "attach_interrupt",
                "delay": "delay_milliseconds",
                "initialize_peripheral_000813dc": "initialize_peripheral",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pinMode": "set_pin_mode",
                "software_interrupt": "trigger_software_interrupt",
                "straightAndStop": "move_straight_and_stop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080250": {
            "additional_data": {
                "DAT_200708c0": {
                    "pulse1": 1
                },
                "DAT_200708c4": {
                    "flag": 1
                },
                "DAT_200708c8": {
                    "input_string2": 1
                },
                "DAT_200708d4": {
                    "processed_data2": 1
                },
                "DAT_200708d8": {
                    "mapped_value1": 1
                },
                "DAT_200708dc": {
                    "input_string1": 1
                },
                "DAT_200708e8": {
                    "processed_data1": 1
                },
                "DAT_200708eb": {
                    "manual_control_flag": 1
                },
                "DAT_200708ec": {
                    "mapped_value2": 1
                },
                "DAT_20070be8": {
                    "data_buffer": 1
                },
                "FUNC_00080f08": {
                    "additional_function": 1,
                    "do_something": 1,
                    "execute_function": 1,
                    "function808": 2,
                    "function_f0808": 1,
                    "helper_function": 1,
                    "initialize": 4,
                    "some_function": 2,
                    "special_function": 1
                },
                "FUN_00080250": {
                    "control_function": 2,
                    "control_logic": 1,
                    "control_mechanism": 1,
                    "control_mode": 8,
                    "control_mode_switch": 2,
                    "control_mode_switching": 1,
                    "control_module": 3,
                    "control_motor": 2,
                    "control_robot": 2,
                    "control_system": 9
                },
                "LAB_00080346": {
                    "loop_and_read": 1
                },
                "Lab_00080346": {
                    "check_data_availability_loop": 1
                },
                "arg3": {
                    "argument3": 1
                },
                "array_pointer": {
                    "array_ptr": 1
                },
                "auStack_1c": {
                    "buffer": 6,
                    "data_buffer": 1,
                    "delimiter": 1,
                    "input_buffer": 14,
                    "temp_buffer": 1
                },
                "available": {
                    "buffer_available": 1,
                    "check_availability": 1,
                    "check_available": 2,
                    "check_data_availability": 2,
                    "data_available": 1,
                    "stream_available": 1
                },
                "byte_array2": {
                    "byte_array2": 1
                },
                "calculate_difference_and_mask_00081248": {
                    "calculate_difference": 1,
                    "calculate_difference_and_mask": 15
                },
                "calculate_linear_interpolation_0008145c": {
                    "calculate_interpolation": 2,
                    "calculate_linear_interpolation": 12,
                    "interpolate_linearly": 1,
                    "linear_interpolation": 2
                },
                "calculate_pulse_duration_00081624": {
                    "calculate_pulse_duration": 15
                },
                "calculate_sum_of_processed_data_000810e8": {
                    "calculate_data_sum": 1,
                    "calculate_processed_data_sum": 2,
                    "calculate_sum": 3,
                    "calculate_sum_of_data": 1,
                    "calculate_sum_of_processed_data": 10
                },
                "calculate_total_sum_0008117a": {
                    "calculate_total_sum": 17
                },
                "call_delay": {
                    "delay_execution": 1
                },
                "call_pulseIn": {
                    "read_pulse": 1
                },
                "check_and_move_if_different_00081560": {
                    "check_and_move": 6,
                    "check_and_move_if_different": 6,
                    "move_if_different": 2
                },
                "compare_bytes_000815b8": {
                    "compare_byte_arrays": 1,
                    "compare_bytes": 13
                },
                "data": {
                    "data_array": 1
                },
                "delay": {
                    "delay_execution": 2,
                    "pause": 2,
                    "short_delay": 1,
                    "wait": 1,
                    "wait_for_delay": 2
                },
                "digitalWrite": {
                    "set_digital_output": 2,
                    "set_digital_pin_state": 1,
                    "set_output": 1,
                    "set_output_pin": 1,
                    "set_output_state": 1,
                    "set_pin_state": 1,
                    "write_digital": 1
                },
                "end_marker": {
                    "end_marker": 1
                },
                "end_output": {
                    "end_output": 1
                },
                "end_range": {
                    "end_range": 1
                },
                "equals": {
                    "check_equality": 2,
                    "compare_strings": 5,
                    "is_equal": 1,
                    "is_string_equal": 1
                },
                "extract_byte_from_buffer_00081276": {
                    "extract_byte": 5,
                    "extract_byte_from_buffer": 10
                },
                "flag": {
                    "flag": 1
                },
                "freeMemoryBlock_00081472": {
                    "free_memory_block": 1
                },
                "free_memory_block_00081472": {
                    "free_memory_block": 12
                },
                "gatherDataToProcess": {
                    "gather_data_to_process": 1
                },
                "iVar2": {
                    "available_bytes": 1,
                    "available_data": 7,
                    "available_data_count": 1,
                    "comparison_result": 1,
                    "count": 4,
                    "data_length": 1,
                    "data_size": 2,
                    "index": 1,
                    "num_available": 5,
                    "size": 1
                },
                "index": {
                    "index": 1
                },
                "input": {
                    "input_buffer": 1
                },
                "input_stream": {
                    "input_stream": 1
                },
                "map": {
                    "map_value": 4,
                    "map_values": 2,
                    "scale_value": 2
                },
                "memory_block": {
                    "mem_block": 1
                },
                "multiplier": {
                    "multiplier": 1
                },
                "output_buffer": {
                    "output_buffer": 1
                },
                "output_value": {
                    "output_value": 1
                },
                "param": {
                    "parameter": 1
                },
                "parse_integer_from_byte_000815de": {
                    "parse_int_from_byte": 3,
                    "parse_integer": 1,
                    "parse_integer_from_byte": 11
                },
                "pin_number": {
                    "pin_number": 1
                },
                "print": {
                    "print_data": 7,
                    "print_to_stream": 1,
                    "print_value": 1
                },
                "println": {
                    "print_data_and_new_line": 1,
                    "print_data_line": 2,
                    "print_line": 4,
                    "print_to_stream_with_newline": 1,
                    "print_value_line": 1
                },
                "process_and_print_data_00080164": {
                    "process_and_print_data": 14
                },
                "process_data_000806f8": {
                    "process_data": 16,
                    "process_data_and_update": 1
                },
                "process_data_and_extract_000810c4": {
                    "process_and_extract_data": 15,
                    "process_data_and_extract": 2
                },
                "puVar3": {
                    "data": 1,
                    "data_pointer": 7,
                    "data_ptr": 4,
                    "memory_block": 1,
                    "memory_block_pointer": 1,
                    "output_buffer": 2,
                    "output_data": 2,
                    "output_ptr": 1,
                    "pointer": 2,
                    "processed_data": 1,
                    "ptr": 1,
                    "target_array": 1
                },
                "pulseIn": {
                    "get_pulse_duration": 1,
                    "get_pulse_input": 1,
                    "measure_pulse": 1,
                    "measure_pulse_duration": 2,
                    "measure_pulse_width": 1,
                    "measured_pulse_duration": 1
                },
                "read": {
                    "read_data": 6,
                    "read_from_buffer": 1,
                    "read_from_stream": 1,
                    "read_input": 1
                },
                "readStringUntil": {
                    "read_stream_until": 1,
                    "read_string": 2,
                    "read_string_until_delimiter": 3,
                    "read_string_until_marker": 1,
                    "read_until": 1,
                    "read_until_string": 1
                },
                "read_and_concatenate_string_00081214": {
                    "read_and_concatenate_string": 17
                },
                "set_pin_mode_and_update_output_00081014": {
                    "set_pin_and_output": 1,
                    "set_pin_mode": 1,
                    "set_pin_mode_and_update_output": 6,
                    "update_output": 1,
                    "update_pin_mode_and_output": 2
                },
                "size": {
                    "data_size": 1
                },
                "start_output": {
                    "start_output": 1
                },
                "start_range": {
                    "start_range": 1
                },
                "start_value": {
                    "start_value": 1
                },
                "straightAndStop": {
                    "move_straight_and_stop": 2,
                    "stop": 1,
                    "stop_and_hold": 1,
                    "stop_movement": 1,
                    "stop_moving": 1,
                    "stop_moving_straight": 1,
                    "stop_vehicle": 2
                },
                "strightAndStop": {
                    "stop_moving": 1
                },
                "string_array": {
                    "string_array1": 1
                },
                "to": {
                    "calculate_duration": 1
                },
                "toInt": {
                    "convert_string_to_int": 2,
                    "convert_to_int": 3,
                    "convert_to_integer": 1,
                    "parse_integer": 2,
                    "string_to_integer": 1
                },
                "uVar1": {
                    "converted_value": 1,
                    "input_value": 1,
                    "mapped_value": 3,
                    "pulse_duration": 13,
                    "pulse_value": 1,
                    "result": 1,
                    "value": 3
                },
                "unused_param": {
                    "unused_param": 1
                }
            },
            "called": [
                "FUN_00081014",
                "FUN_000806f8",
                "FUN_00081472",
                "FUN_00080f08",
                "FUN_000810c4",
                "FUN_00081560",
                "FUN_00081624",
                "FUN_00081276",
                "FUN_000815de",
                "FUN_0008145c",
                "FUN_00081176",
                "FUN_00081214",
                "FUN_00080164",
                "FUN_00081248",
                "FUN_000810e8",
                "FUN_000815b8",
                "FUN_0008117a"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid control_mode_switch_00080250(void)\n\n{\n  undefined4 pulse_duration;\n  int available_data;\n  undefined *data_pointer;\n  undefined input_buffer [12];\n  \n  DAT_200708c0 = measure_pulse_duration(4,1,20000);\n  delay_execution(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  set_digital_output(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        stop_vehicle();\n        calculate_sum_of_processed_data(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      delay_execution(10);\n      pulse_duration = measure_pulse_duration(3,1,20000);\n      DAT_200708d8 = map_value(0,1000,2000,0x28,0x96);\n      DAT_200708ec = map_value(pulse_duration,1000,2000,0x28,0x96);\n      while (available_data = check_available(&DAT_20070be8), 0 < available_data) {\n        read_data(&DAT_20070be8);\n        print_data(&DAT_20070be8,DAT_200708d8,10);\n        process_and_extract_data(&DAT_20070be8,&DAT_00084b13);\n        print_line(&DAT_20070be8,DAT_200708ec,10);\n      }\n      process_data(&DAT_200708e8,DAT_200708ec);\n      process_data(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        stop_vehicle();\n        calculate_sum_of_processed_data(&DAT_20070be8,\"Entered aucalculate_durationnomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nloop_and_read:\n      available_data = check_available(&DAT_20070be8);\n      if (0 < available_data) {\n        read_string_until_delimiter(input_buffer,&DAT_20070be8,0x2c);\n        operacalculate_durationr=(&DAT_200708dc,input_buffer);\n        ~String(input_buffer);\n        read_string_until_delimiter(input_buffer,&DAT_20070be8,10);\n        operacalculate_durationr=(&DAT_200708c8,input_buffer);\n        ~String(input_buffer);\n        read_data(&DAT_20070be8);\n        available_data = compare_strings(&DAT_200708dc,\"steer\");\n        if (available_data == 0) gocalculate_duration LAB_0008039c;\n        pulse_duration = convert_to_int(&DAT_200708c8);\n        data_pointer = &DAT_200708d4;\n        gocalculate_duration LAB_000803b2;\n      }\n    }\n  }\n  else {\n    stop_vehicle();\n    calculate_sum_of_processed_data(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  available_data = compare_strings(&DAT_200708dc,\"mocalculate_durationr\");\n  if (available_data != 0) {\n    pulse_duration = convert_to_int(&DAT_200708c8);\n    data_pointer = &DAT_200708e8;\nLAB_000803b2:\n    process_data(data_pointer,pulse_duration);\n  }\n  gocalculate_duration loop_and_read;\n}\n\n",
            "current_name": "control_mode_switch_00080250",
            "entrypoint": "0x00080250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080250": "control_mode_switch_00080250",
                "LAB_00080346": "loop_and_read",
                "auStack_1c": "input_buffer",
                "available": "check_available",
                "calculate_sum_of_processed_data_000810e8": "calculate_sum_of_processed_data",
                "data": "data_array",
                "delay": "delay_execution",
                "digitalWrite": "set_digital_output",
                "equals": "compare_strings",
                "iVar2": "available_data",
                "map": "map_value",
                "print": "print_data",
                "println": "print_line",
                "process_data_000806f8": "process_data",
                "process_data_and_extract_000810c4": "process_and_extract_data",
                "puVar3": "data_pointer",
                "pulseIn": "measure_pulse_duration",
                "read": "read_data",
                "readStringUntil": "read_string_until_delimiter",
                "straightAndStop": "stop_vehicle",
                "to": "calculate_duration",
                "toInt": "convert_to_int",
                "uVar1": "pulse_duration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000803fc": {
            "additional_data": {
                "0x24": {
                    "register_offset": 1
                },
                "0x5c": {
                    "line_number": 1
                },
                "FUN_000803fc": {
                    "configure_and_start_timer": 3,
                    "configure_tc": 1,
                    "configure_timer": 14,
                    "configure_timer_controller": 1,
                    "initialize_tc": 3,
                    "initialize_timer": 9
                },
                "FUN_00080aa8": {
                    "assert_function": 1,
                    "function_a": 3,
                    "get_channel_size": 3,
                    "get_timer_channel_limit": 1,
                    "get_timer_channel_size": 1
                },
                "FUN_00080b2c": {
                    "check_channel_range": 1,
                    "format_error_message": 2,
                    "function_c": 3,
                    "log_channel_error": 1,
                    "log_message": 1,
                    "print_error_message": 1
                },
                "FUN_00080b90": {
                    "function_d": 3,
                    "set_channel_value": 2,
                    "set_timer_channel_mode": 1,
                    "set_timer_value": 2,
                    "write_to_memory": 1
                },
                "FUN_000816f8": {
                    "function_b": 3,
                    "log_assert": 1,
                    "log_error": 1,
                    "print_assertion_error": 1,
                    "print_assertion_message": 1,
                    "print_error_message": 1,
                    "set_channel_properties": 1
                },
                "TC_Configure": {
                    "configure_tc": 3,
                    "configure_timer": 6,
                    "configure_timer_channel": 3
                },
                "TC_SetRA": {
                    "set_ra": 2,
                    "set_timer_ra": 8,
                    "set_timer_register_a": 2
                },
                "TC_Start": {
                    "start_timer": 1
                },
                "__assert_func": {
                    "assert_function": 12
                },
                "in_lr": {
                    "": 1,
                    "assert_func": 1,
                    "assert_func2": 1,
                    "assert_line": 1,
                    "assert_param": 1,
                    "assert_param2": 1,
                    "assert_var2": 1,
                    "assert_variable2": 1,
                    "assertion_func_info": 1,
                    "assertion_value_lr": 1,
                    "in_call": 1,
                    "in_lr": 1,
                    "interrupt_handler": 1,
                    "lr": 1,
                    "return_address": 1,
                    "temp_var2": 1,
                    "unused_variable": 1,
                    "unused_variable2": 1
                },
                "param_1": {
                    "channel": 9,
                    "channel_number": 1,
                    "peripheral": 1,
                    "port": 1,
                    "port_number": 1,
                    "timer": 2,
                    "timer1": 1,
                    "timer_address": 1,
                    "timer_base": 3,
                    "timer_channel": 1,
                    "timer_controller_id": 1,
                    "timer_id": 1,
                    "timer_idx": 1,
                    "timer_index": 3,
                    "timer_instance": 1,
                    "timer_module": 2,
                    "timer_number": 1
                },
                "param_2": {
                    "channel": 8,
                    "channel_idx": 1,
                    "channel_index": 1,
                    "channel_num": 1,
                    "channel_number": 3,
                    "config": 1,
                    "module": 1,
                    "parameter": 1,
                    "periph_id": 1,
                    "peripheral": 5,
                    "timer_channel": 3,
                    "timer_config": 1,
                    "timer_device": 1,
                    "timer_value": 2,
                    "value": 1
                },
                "param_3": {
                    "clk": 1,
                    "clk_peripheral": 1,
                    "clock": 8,
                    "clock_enable": 1,
                    "clock_id": 4,
                    "periph_clk": 3,
                    "periph_clock": 4,
                    "peripheral_clock": 7,
                    "timer_peripheral": 2
                },
                "param_4": {
                    "bit": 3,
                    "bit_mask": 7,
                    "bit_number": 2,
                    "bit_offset": 2,
                    "bit_position": 12,
                    "channel": 1,
                    "channel_mask": 1,
                    "data": 1,
                    "dw_channel": 1,
                    "pin_number": 1
                },
                "pmc_enable_periph_clk": {
                    "enable_periph_clock": 1,
                    "enable_peripheral_clock": 10,
                    "enable_timer_peripheral_clock": 1
                },
                "uVar1": {
                    "assert_result": 1,
                    "combined_param": 2,
                    "combined_parameters": 1,
                    "combined_params": 16,
                    "combined_value": 1,
                    "combined_values": 1,
                    "concatenated_params": 3,
                    "concatenated_value": 3,
                    "config_value": 1,
                    "timer_concatenated_value": 1,
                    "timer_config": 1
                },
                "unaff_r4": {
                    "": 1,
                    "assert_file": 1,
                    "assert_func": 1,
                    "assert_param": 3,
                    "assert_value": 1,
                    "assert_var": 1,
                    "assert_variable1": 1,
                    "assertion_file_info": 1,
                    "assertion_value": 1,
                    "channel_index": 1,
                    "p_tc": 1,
                    "pmc": 1,
                    "temp_var1": 1,
                    "unaff_r4": 1,
                    "unused_variable": 1,
                    "unused_variable1": 1
                }
            },
            "called": [
                "FUN_00080aa8",
                "FUN_000816f8",
                "FUN_00080b2c",
                "FUN_00080b90"
            ],
            "calling": [
                "FUN_000806a0"
            ],
            "code": "\nvoid configure_and_start_timer_000803fc(int channel,uint channel,undefined4 clock,uint bit_position)\n\n{\n  undefined4 assert_param;\n  undefined4 in_lr;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(channel,channel);\n  enable_peripheral_clock(clock);\n  configure_timer(channel,channel,0xc002);\n  set_timer_ra(channel,channel,0xa41);\n  *(int *)((bit_position >> 5) * 4 + -0x1fff1f00) = 1 << (bit_position & 0x1f);\n  *(undefined4 *)(channel + channel * 0x40 + 0x24) = 4;\n  if (2 < channel) {\n    combined_params = assert_function(\"../source/tc.c\",0x5c,\"start_timer\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                          assert_param,in_lr);\n  }\n  *(undefined4 *)((int)combined_params + (int)((ulonglong)combined_params >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "current_name": "configure_and_start_timer_000803fc",
            "entrypoint": "0x000803fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000803fc": "configure_and_start_timer_000803fc",
                "TC_Configure": "configure_timer",
                "TC_SetRA": "set_timer_ra",
                "TC_Start": "start_timer",
                "__assert_func": "assert_function",
                "param_1": "channel",
                "param_2": "channel",
                "param_3": "clock",
                "param_4": "bit_position",
                "pmc_enable_periph_clk": "enable_peripheral_clock",
                "uVar1": "combined_params",
                "unaff_r4": "assert_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008044c": {
            "additional_data": {
                "DAT_200708f0": {
                    "constant_1": 1,
                    "limit": 2
                },
                "DAT_200708f1": {
                    "data_1": 1,
                    "parameter1": 1
                },
                "DAT_200708f8": {
                    "array": 1,
                    "data_2": 1
                },
                "DAT_200708fc": {
                    "data_3": 1
                },
                "DIGITAL_PIN": {
                    "pin": 1
                },
                "DIGITAL_WRITE": {
                    "digital_write_func": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "rel_array": 1,
                    "relocation_array": 1,
                    "relocation_table": 1
                },
                "FUN_0008044c": {
                    "process_data": 2,
                    "update_data": 18,
                    "update_data_and_control": 1,
                    "update_param": 1,
                    "update_parameter": 2,
                    "update_parameter_value": 1,
                    "update_state": 1,
                    "update_status": 4,
                    "update_value": 1
                },
                "FUN_00081014": {
                    "process_data": 1,
                    "secondary_function": 1,
                    "update_value": 1
                },
                "digitalWrite": {
                    "change_output": 1,
                    "set_pin_state": 1
                },
                "iVar2": {
                    "array_index": 1,
                    "array_offset": 2,
                    "index_offset": 1,
                    "offset": 6,
                    "offset1": 1,
                    "offset2": 4,
                    "offset_index": 3,
                    "offset_multiplier": 2,
                    "offset_ptr": 1,
                    "temp": 4,
                    "temp_index": 1,
                    "temp_var": 4
                },
                "param_1": {
                    "data_index": 1,
                    "device_id": 1,
                    "device_index": 1,
                    "index": 27,
                    "param_index": 1
                },
                "param_2": {
                    "base_address": 3,
                    "buffer": 2,
                    "data": 17,
                    "data_address": 1,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_ptr": 4,
                    "device_data": 1,
                    "memory": 1
                },
                "param_3": {
                    "control_value": 1,
                    "count": 1,
                    "index": 1,
                    "multiplier": 5,
                    "offset": 22,
                    "size": 1
                },
                "return": {
                    "void": 2
                },
                "uVar1": {
                    "constant_value": 1,
                    "data_limit": 2,
                    "data_size": 1,
                    "limit": 13,
                    "max_value": 7,
                    "new_value": 1,
                    "threshold": 2,
                    "upper_limit": 2,
                    "value": 1
                }
            },
            "called": [
                "FUN_00081014"
            ],
            "calling": [],
            "code": "\nvoid update_data_and_control_0008044c(int index,int data,int offset)\n\n{\n  uint limit;\n  int offset;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    offset = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + offset < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + offset) * 8] << 0x19) < 0\n       )) {\n      set_pin_state((&DAT_200708f8)[(offset + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  limit = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  offset = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + offset < (int)limit) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + offset) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + offset) * 8] << 0x19\n                  )) {\n      void;\n    }\n    set_pin_state((&DAT_200708f8)[(offset + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    void;\n  }\n  data = data + offset;\n  limit = (relocation_array[6].r_offset / 1000000) * 20000 >> 5;\n  if (limit <= *(int *)(data + 0x10) + 4U) {\n    limit = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = limit;\n  (&DAT_200708f1)[index] = 0xff;\n  void;\n}\n\n",
            "current_name": "update_data_and_control_0008044c",
            "entrypoint": "0x0008044c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_0008044c": "update_data_and_control_0008044c",
                "digitalWrite": "set_pin_state",
                "iVar2": "offset",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "return": "void",
                "uVar1": "limit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000805a8": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 2,
                    "array_data": 1,
                    "elf_relocation_array": 2,
                    "offset_array": 1,
                    "rel_array": 6,
                    "relocation_array": 4,
                    "relocation_table": 1
                },
                "FUN_000805a8": {
                    "decode_value": 1,
                    "extract_and_calculate_offset": 1,
                    "extract_elf_relocation_offset": 1,
                    "extract_rel_offset": 1,
                    "extract_relocation_entry": 1,
                    "extract_value": 1,
                    "initialize_relocation": 1,
                    "initialize_relocation_entry": 1,
                    "process_data": 5,
                    "process_relocation": 1,
                    "update_array_element": 1,
                    "update_counter": 2,
                    "update_param1_value": 1,
                    "update_param_and_calculate_offset": 1,
                    "update_param_and_offset": 4,
                    "update_param_with_offset": 1,
                    "update_parameter": 2,
                    "update_relocation_entry": 1,
                    "update_relocation_offset": 1,
                    "update_value": 2,
                    "update_value_in_range": 1
                },
                "cVar1": {
                    "counter_plus_one": 1,
                    "current_byte": 1,
                    "current_value": 3,
                    "increment": 1,
                    "incremented_byte": 1,
                    "new_byte": 1,
                    "new_byte_value": 1,
                    "new_char": 3,
                    "new_count": 1,
                    "new_counter": 1,
                    "new_counter_value": 1,
                    "new_value": 2,
                    "next_byte": 1,
                    "next_element": 1,
                    "next_value": 5,
                    "temp_char": 2,
                    "updated_counter": 1,
                    "updated_value": 2
                },
                "param_1": {
                    "array_pointer": 1,
                    "buffer": 2,
                    "byte_array": 1,
                    "destination": 1,
                    "input_param": 1,
                    "output": 6,
                    "output_array": 1,
                    "output_buffer": 8,
                    "output_byte": 6,
                    "parameter": 1,
                    "result": 2,
                    "updated_data": 1
                },
                "r_offset": {
                    "offset": 2
                },
                "uVar2": {
                    "array_size": 1,
                    "count": 5,
                    "counter": 9,
                    "current_count": 1,
                    "current_offset": 1,
                    "current_value": 3,
                    "data_length": 2,
                    "entry_index": 1,
                    "index": 1,
                    "original_value": 1,
                    "rel_index": 1,
                    "relocation_index": 1,
                    "unsigned_var": 1,
                    "value": 1,
                    "value_count": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid extract_elf_relocation_offset_000805a8(byte *output_buffer)\n\n{\n  char next_value;\n  uint counter;\n  \n  counter = (uint)DAT_200708f0;\n  if (counter < 0x3c) {\n    next_value = DAT_200708f0 + 1;\n    *output_buffer = DAT_200708f0;\n    DAT_200708f0 = next_value;\n    *(uint *)(&DAT_200708fc + counter * 8) =\n         (rel_array[6].offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *output_buffer = 0xff;\n  return;\n}\n\n",
            "current_name": "extract_elf_relocation_offset_000805a8",
            "entrypoint": "0x000805a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_000805a8": "extract_elf_relocation_offset_000805a8",
                "cVar1": "next_value",
                "param_1": "output_buffer",
                "r_offset": "offset",
                "uVar2": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000806a0": {
            "additional_data": {
                "FUN_000806a0": {
                    "configure_pin": 3,
                    "configure_pin_mode": 2,
                    "initialize_gpio": 2,
                    "initialize_peripheral": 5,
                    "initialize_pin": 5,
                    "initialize_pin_mode": 2,
                    "pin_mode_and_configure_gpio": 1,
                    "pin_mode_and_init_isr": 5,
                    "pin_mode_and_initialize": 1,
                    "pin_mode_and_initialize_interrupt": 1,
                    "process_data": 1,
                    "set_pin_mode_and_init_isr": 2,
                    "update_pin_mode": 1
                },
                "_initISR": {
                    "initialize_interrupt_service_routine": 2
                },
                "bVar1": {
                    "bit_mask": 1,
                    "bit_value": 1,
                    "byte_val": 1,
                    "byte_value": 1,
                    "current_pin_config": 1,
                    "current_value": 1,
                    "existing_pin_mode": 1,
                    "initial_value": 1,
                    "mapped_value": 1,
                    "mask": 2,
                    "old_pin_value": 1,
                    "original_pin_mode_value": 1,
                    "original_value": 3,
                    "pin_mode_result": 1,
                    "previous_config": 2,
                    "saved_mode": 1,
                    "stored_value": 1,
                    "temp_byte": 6,
                    "temp_var": 1,
                    "value": 2
                },
                "iVar5": {
                    "counter": 12,
                    "i": 1,
                    "index": 1,
                    "iteration": 5,
                    "iteration_count": 1,
                    "loop_counter": 6,
                    "loop_index": 4
                },
                "param_1": {
                    "byte_array": 1,
                    "data": 10,
                    "data_buffer": 1,
                    "input_array": 2,
                    "input_buffer": 1,
                    "input_data": 2,
                    "pin": 1,
                    "pin_config": 2,
                    "pin_data": 2,
                    "pin_number": 1,
                    "pin_status": 1,
                    "pin_value": 4
                },
                "param_2": {
                    "mode": 1,
                    "pin": 10,
                    "pin_mode": 3,
                    "pin_mode_mask": 1,
                    "pin_mode_value": 4,
                    "pin_number": 12
                },
                "uVar2": {
                    "address": 3,
                    "base_address": 16,
                    "gpio_addr": 1,
                    "gpio_base": 1,
                    "gpio_base_address": 2,
                    "init_addr": 1,
                    "isr_1": 1,
                    "peripheral_address": 1,
                    "peripheral_config_address": 1,
                    "register_address": 2,
                    "register_base": 1
                },
                "uVar3": {
                    "buffer_index": 1,
                    "data_div": 1,
                    "data_index": 1,
                    "delay": 1,
                    "division_result": 3,
                    "divisor": 1,
                    "gpio_offset": 1,
                    "group_index": 1,
                    "group_offset": 1,
                    "index": 7,
                    "offset": 4,
                    "pin_group": 2,
                    "pin_group_index": 2,
                    "pin_index": 1,
                    "register_offset": 1,
                    "temp_var": 1,
                    "temp_variable": 1
                },
                "uVar4": {
                    "function_param": 1,
                    "init_value": 1,
                    "interrupt_config": 1,
                    "interrupt_flag": 1,
                    "interrupt_group": 1,
                    "interrupt_id": 1,
                    "interrupt_level": 1,
                    "interrupt_mask": 1,
                    "interrupt_num": 1,
                    "interrupt_number": 5,
                    "interrupt_pin": 1,
                    "interrupt_type": 2,
                    "interrupt_value": 2,
                    "isr_2": 1,
                    "mode": 2,
                    "param": 1,
                    "parameter1": 1,
                    "pin_mode_value": 1,
                    "pin_offset": 1,
                    "temp_var2": 1,
                    "value": 2,
                    "value2": 1
                },
                "uVar6": {
                    "buffer_value": 1,
                    "byte_value": 2,
                    "byte_value2": 1,
                    "converted_byte": 1,
                    "converted_value": 1,
                    "data_val": 1,
                    "data_value": 5,
                    "index2": 1,
                    "input_value": 1,
                    "pin": 1,
                    "pin_count": 1,
                    "pin_index": 1,
                    "pin_value": 6,
                    "temp": 1,
                    "temp_pin_value": 1,
                    "temp_uint": 1,
                    "temp_value": 1,
                    "temp_var3": 1,
                    "value": 2
                }
            },
            "called": [
                "FUN_00080f0c",
                "FUN_000803fc"
            ],
            "calling": [
                "FUN_000801e0"
            ],
            "code": "\nbyte pin_mode_and_initialize_interrupt_000806a0(byte *data,undefined4 pin_number)\n\n{\n  byte temp_byte;\n  undefined4 base_address;\n  uint index;\n  undefined4 interrupt_number;\n  int counter;\n  uint pin_value;\n  \n  if (0x3b < *data) goto LAB_00080660;\n  pinMode(pin_number,1,0x220,*data,0x960);\n  pin_value = (uint)*data;\n  temp_byte = (&DAT_200708f8)[pin_value * 8];\n  data[2] = 0;\n  index = pin_value / 0xc;\n  (&DAT_200708f8)[pin_value * 8] = temp_byte & 0xc0 | (byte)pin_number & 0x3f;\n  data[1] = 0;\n  counter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(counter + index * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    counter = counter + 1;\n  } while (counter != 0xc);\n  if (index == 0) {\n    base_address = 0x40084000;\n    interrupt_number = 0x1e;\nLAB_0008064c:\n    initialize_interrupt_service_routine(base_address,index,interrupt_number,interrupt_number);\n  }\n  else {\n    if (index == 1) {\n      base_address = 0x40084000;\n      interrupt_number = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (index == 2) {\n      base_address = 0x40084000;\n      interrupt_number = 0x20;\n      goto LAB_0008064c;\n    }\n    if (index == 3) {\n      base_address = 0x40080000;\n      index = 2;\n      interrupt_number = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (index == 4) {\n      base_address = 0x40080000;\n      index = 0;\n      interrupt_number = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*data * 8] = (&DAT_200708f8)[(uint)*data * 8] | 0x40;\nLAB_00080660:\n  return *data;\n}\n\n",
            "current_name": "pin_mode_and_initialize_interrupt_000806a0",
            "entrypoint": "0x000806a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000806a0": "pin_mode_and_initialize_interrupt_000806a0",
                "_initISR": "initialize_interrupt_service_routine",
                "bVar1": "temp_byte",
                "iVar5": "counter",
                "param_1": "data",
                "param_2": "pin_number",
                "uVar2": "base_address",
                "uVar3": "index",
                "uVar4": "interrupt_number",
                "uVar6": "pin_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000806f8": {
            "additional_data": {
                "DAT_200708fc": {
                    "result_array": 1,
                    "result_buffer": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array_of_values": 1,
                    "elf_rel_array": 1,
                    "rel_array": 2,
                    "relocation_array": 1,
                    "relocation_data": 1
                },
                "FUN_000806f8": {
                    "analyze_data": 1,
                    "map_and_assign_values": 1,
                    "map_and_set_values": 1,
                    "map_and_store_values": 4,
                    "map_and_update_values": 1,
                    "map_coordinates": 1,
                    "map_parameters": 1,
                    "map_values": 1,
                    "process_data": 17,
                    "process_input": 1,
                    "update_values": 2
                },
                "FUN_0008145c": {
                    "calculate": 1,
                    "calculate_result": 1,
                    "calculate_value": 3,
                    "compute_value": 1,
                    "map_values": 1,
                    "sub_function": 1
                },
                "SBORROW4": {
                    "is_subtract_borrow": 1,
                    "is_subtraction_borrow": 1,
                    "is_subtraction_overflow": 1,
                    "subtraction_borrow": 1
                },
                "map": {
                    "apply_mapping": 2,
                    "calculate_mapping": 2,
                    "calculate_offset": 1,
                    "compute_value": 1,
                    "interpolate_value": 1,
                    "map_values": 1,
                    "transform_data": 1
                },
                "param_1": {
                    "buffer": 2,
                    "byte_array": 2,
                    "data": 12,
                    "data_array": 1,
                    "data_buffer": 2,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "input_array": 2,
                    "input_data": 2,
                    "int_param_1": 1,
                    "param1": 1,
                    "param_1": 3
                },
                "param_2": {
                    "array_length": 3,
                    "buffer_size": 1,
                    "data_length": 4,
                    "data_size": 1,
                    "input_size": 1,
                    "input_uint": 1,
                    "int_param_2": 1,
                    "length": 7,
                    "num_elements": 1,
                    "param2": 1,
                    "param_2": 3,
                    "size": 7
                },
                "param_3": {
                    "int_param_3": 1,
                    "param3": 1,
                    "param_3": 3
                },
                "param_4": {
                    "int_param_4": 1,
                    "multiplier": 1,
                    "param4": 1,
                    "param_4": 3
                },
                "param_5": {
                    "int_param_5": 1,
                    "param5": 1,
                    "param_5": 3,
                    "shift_amount": 1
                },
                "sborrow4": {
                    "is_borrow": 1
                },
                "uVar1": {
                    "adjusted_length": 4,
                    "adjusted_size": 3,
                    "adjusted_uint": 1,
                    "clamped_length": 4,
                    "clamped_size": 5,
                    "limit": 1,
                    "max_size": 1,
                    "min_length": 1,
                    "min_value": 1,
                    "modified_length": 1,
                    "new_length": 1,
                    "temp_var": 1,
                    "updated_length": 2,
                    "updated_size": 1,
                    "updated_value": 1
                }
            },
            "called": [
                "FUN_0008145c"
            ],
            "calling": [
                "FUN_00080164",
                "FUN_00080250"
            ],
            "code": "\nvoid process_data_000806f8(byte *data,uint size)\n\n{\n  uint clamped_size;\n  \n  if ((int)size < 0x220) {\n    clamped_size = size;\n    if (0xb3 < (int)size) {\n      clamped_size = 0xb4;\n    }\n    size = calculate_mapping(clamped_size & ~((int)clamped_size >> 0x1f),0,0xb4,(0x88 - (char)data[1]) * 4,\n                  (600 - (char)data[2]) * 4,size);\n  }\n  if (*data < 0x3c) {\n    clamped_size = (0x88 - (char)data[1]) * 4;\n    if (((int)(size + (0x88 - (char)data[1]) * -4) < 0 == is_subtraction_overflow(size,clamped_size)) &&\n       (clamped_size = (600 - (char)data[2]) * 4, (int)size <= (int)clamped_size)) {\n      clamped_size = size;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*data * 8) =\n         (rel_array[6].r_offset / 1000000) * (clamped_size - 2) >> 5;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_000806f8",
            "entrypoint": "0x000806f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_000806f8": "process_data_000806f8",
                "SBORROW4": "is_subtraction_overflow",
                "map": "calculate_mapping",
                "param_1": "data",
                "param_2": "size",
                "uVar1": "clamped_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008073a": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008073a",
            "entrypoint": "0x0008073a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080748": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080748",
            "entrypoint": "0x00080748",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008074a": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008074a",
            "entrypoint": "0x0008074a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008074c": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008074c",
            "entrypoint": "0x0008074c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080774": {
            "additional_data": {
                "DAT_e000ed23": {
                    "constant_value": 1,
                    "data": 1,
                    "initialize_dat_e000ed23": 1,
                    "value": 2
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "elf_relocation_array": 1,
                    "offset_array": 1
                },
                "FUN_00080774": {
                    "init_system": 1,
                    "initialize_board": 1,
                    "initialize_gpio": 1,
                    "initialize_system": 27
                },
                "FUN_00080a30": {
                    "configure_adc_timing": 2,
                    "configure_adc_trigger": 1,
                    "configure_pio": 1,
                    "configure_trigger": 2,
                    "function6": 1,
                    "initialize_adc": 1,
                    "perform_analog_action": 1,
                    "perform_first_operation": 1,
                    "read_adc": 1,
                    "set_analog_input": 1,
                    "sub_function6": 1
                },
                "FUN_00080aa8": {
                    "configure_adc_timing": 2,
                    "configure_analog_output": 1,
                    "configure_timing": 1,
                    "disable_interrupt": 1,
                    "function5": 1,
                    "get_analog_pin_value": 1,
                    "get_configuration": 1,
                    "initialize_adc": 2,
                    "initialize_pio": 1,
                    "perform_second_operation": 1,
                    "sub_function5": 1
                },
                "FUN_00080b98": {
                    "configure_adc_channels": 1,
                    "disable_adc_interrupt": 1,
                    "disable_all_adc_channel": 1,
                    "disable_all_adc_channels": 1,
                    "disable_all_channel": 1,
                    "disable_analog_pin": 1,
                    "disable_interrupts": 1,
                    "enable_peripheral_clock": 2,
                    "function10": 1,
                    "initialize_periph_clk": 1,
                    "return": 1,
                    "sub_function10": 1
                },
                "FUN_00080c98": {
                    "configure_adc": 3,
                    "configure_digital_output": 1,
                    "configure_digital_pin": 1,
                    "configure_pio": 2,
                    "function3": 1,
                    "initialize_adc": 2,
                    "initialize_arrays": 1,
                    "initialize_lib_c": 1,
                    "sub_function3": 1
                },
                "FUN_00080d30": {
                    "configure_adc_channels": 1,
                    "configure_adc_delay": 1,
                    "configure_adc_timing": 1,
                    "configure_adc_trigger": 1,
                    "configure_timing": 1,
                    "configure_trigger": 1,
                    "disable_adc_channel": 1,
                    "disable_all_channel": 1,
                    "enable_analog_pin": 1,
                    "enable_pmc": 1,
                    "function9": 1,
                    "read_analog_input": 1,
                    "sub_function9": 1
                },
                "FUN_00080d3e": {
                    "configure_adc": 2,
                    "configure_adc_trigger": 2,
                    "configure_analog_input": 1,
                    "configure_analog_pin": 1,
                    "configure_channel": 1,
                    "configure_timing": 1,
                    "disable_adc_interrupt": 2,
                    "disable_all_channels": 1,
                    "function7": 1,
                    "sub_function7": 1
                },
                "FUN_00080d62": {
                    "configure_pins": 1,
                    "digital_write": 5,
                    "disable_digital_output": 1,
                    "disable_digital_pin": 1,
                    "disable_interrupt": 1,
                    "disable_interrupts": 1,
                    "function2": 1,
                    "loop_through_digital_write": 1,
                    "sub_function2": 1
                },
                "FUN_00080d6a": {
                    "configure_adc": 3,
                    "configure_adc_trigger": 1,
                    "configure_digital_write_high": 1,
                    "enable_adc": 1,
                    "function4": 1,
                    "set_analog_output": 1,
                    "set_digital_pin_mode": 1,
                    "set_digital_write": 1,
                    "set_gpio_state": 1,
                    "set_pio_output": 1,
                    "sub_function4": 1
                },
                "FUN_00081014": {
                    "configure_digital_pin": 1,
                    "configure_digital_write": 5,
                    "digital_write_all_low": 1,
                    "function1": 1,
                    "initialize_pins": 1,
                    "perform_action": 1,
                    "set_digital_output": 1,
                    "set_digital_state": 1,
                    "sub_function1": 1
                },
                "FUN_00081778": {
                    "disable_adc_channels": 1,
                    "disable_adc_interrupt": 3,
                    "disable_all_adc_channels": 1,
                    "disable_all_interrupts": 1,
                    "disable_analog_input": 1,
                    "enable_peripheral_clock": 2,
                    "finalize_setup": 1,
                    "function8": 1,
                    "perform_last_operation": 1,
                    "sub_function8": 1
                },
                "F_UN_00080774": {
                    "initialize_system": 1
                },
                "F_UN_00080a30": {
                    "configure_adc": 1
                },
                "F_UN_00080aa8": {
                    "configure_pmc": 1
                },
                "F_UN_00080b98": {
                    "enable_peri_clk": 1
                },
                "F_UN_00080c98": {
                    "configure_pio": 1
                },
                "F_UN_00080d30": {
                    "disable_adc_channel": 1
                },
                "F_UN_00080d3e": {
                    "configure_adc_timing": 1
                },
                "F_UN_00080d62": {
                    "disable_digital_write": 1
                },
                "F_UN_00080d6a": {
                    "set_pio": 1
                },
                "F_UN_00081014": {
                    "configure_digital_write": 1
                },
                "F_UN_00081778": {
                    "disable_adc_interrupt": 1
                },
                "PIO_Configure": {
                    "configure_pio": 6
                },
                "SystemInit": {
                    "": 1,
                    "initialize_system": 1,
                    "initialize_system_configuration": 1,
                    "initialize_system_dependencies": 1,
                    "initialize_system_init": 1,
                    "initialize_system_registers": 1
                },
                "_DAT_400e0ea0": {
                    "constant1": 1,
                    "data_value3": 1,
                    "data_value_3": 1,
                    "initialize_dat_400e0ea0": 1,
                    "pin_data1": 1,
                    "value2": 1,
                    "value4": 1
                },
                "_DAT_400e10a0": {
                    "constant2": 1,
                    "data_value4": 1,
                    "data_value_4": 1,
                    "initialize_dat_400e10a0": 1,
                    "pin_data2": 1,
                    "value3": 1,
                    "value5": 1
                },
                "_DAT_400e12a0": {
                    "constant3": 1,
                    "data_value5": 1,
                    "data_value_5": 1,
                    "initialize_dat_400e12a0": 1,
                    "pin_data3": 1,
                    "value4": 1,
                    "value6": 1
                },
                "_DAT_400e14a0": {
                    "constant4": 1,
                    "data_value6": 1,
                    "data_value_6": 1,
                    "initialize_dat_400e14a0": 1,
                    "pin_data4": 1,
                    "value5": 1,
                    "value7": 1
                },
                "_DAT_e000e010": {
                    "data_value2": 1,
                    "data_value_2": 1,
                    "data_variable2": 1,
                    "initialize_dat_e000e010": 1,
                    "value1": 1,
                    "value3": 2
                },
                "_DAT_e000e014": {
                    "data_offset": 1,
                    "elf32_rel_array_offset": 1,
                    "offset": 1,
                    "offset_value": 1,
                    "r_offset_divided": 1,
                    "system_offset": 1,
                    "timer_offset": 1
                },
                "_DAT_e000e018": {
                    "data_value1": 1,
                    "data_value_1": 1,
                    "data_variable1": 1,
                    "initialize_dat_e000e018": 1,
                    "value2": 2
                },
                "__libc_init_array": {
                    "": 1,
                    "initialize_libc_array": 1,
                    "initialize_library_array": 1,
                    "initialize_standard_library": 1
                },
                "adc_configure_timing": {
                    "configure_adc_timing": 6
                },
                "adc_configure_trigger": {
                    "configure_adc_trigger": 6
                },
                "adc_disable_all_channel": {
                    "disable_all_adc_channel": 2,
                    "disable_all_adc_channels": 4
                },
                "adc_disable_interrupt": {
                    "disable_adc_interrupt": 6
                },
                "adc_init": {
                    "initialize_adc": 6
                },
                "digitWrite": {
                    "digit_write": 1
                },
                "digitalWrite": {
                    "set_digital_output": 1,
                    "set_digital_value": 1,
                    "set_pin_value": 1,
                    "write_digital_value": 1
                },
                "iVar1": {
                    "counter": 2,
                    "counter1": 1,
                    "i": 4,
                    "index": 8,
                    "iteration": 1,
                    "loop_counter": 2
                },
                "iVar2": {
                    "counter2": 1,
                    "j": 4,
                    "new_iteration": 1,
                    "next_counter": 1,
                    "next_counter_value": 1,
                    "next_index": 8,
                    "next_loop_counter": 2
                },
                "pmc_enable_periph_clk": {
                    "enable_perif_clk": 1,
                    "enable_peripheral_clock": 4,
                    "enable_peripherals_clock": 1
                }
            },
            "called": [
                "FUN_00081014",
                "FUN_00080d62",
                "FUN_00080c98",
                "FUN_00080d6a",
                "FUN_00080aa8",
                "FUN_00080a30",
                "FUN_00080d3e",
                "FUN_00081778",
                "FUN_00080d30",
                "FUN_00080b98"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\n\n\nvoid initialize_system_00080774(void)\n\n{\n  int index;\n  int next_index;\n  \n  SystemInit();\n  _DAT_e000e014 = offset_array[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  __libc_init_array();\n  index = 0;\n  do {\n    next_index = index + 1;\n    write_digital_value(index,0);\n    index = next_index;\n  } while (next_index != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  configure_pio(0x400e0e00,1,0x300,0);\n  write_digital_value(0,1);\n  configure_pio(0x400e0e00,1,0xc00,0);\n  configure_pio(0x400e0e00,1,0x3000,0);\n  configure_pio(0x400e1400,2,0x30,0);\n  configure_pio(0x400e1000,1,0xc00,0);\n  configure_pio(0x400e0e00,1,3,0);\n  configure_pio(0x400e1000,1,0xc000,0);\n  enable_peripheral_clock(0x25);\n  initialize_adc(0x400c0000,offset_array[6].r_offset,20000000,0xc);\n  configure_adc_timing(0x400c0000,0,0x300000,1);\n  configure_adc_trigger(0x400c0000,0,0);\n  disable_adc_interrupt(0x400c0000,0xffffffff);\n  disable_all_adc_channels(0x400c0000);\n  return;\n}\n\n",
            "current_name": "initialize_system_00080774",
            "entrypoint": "0x00080774",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "offset_array",
                "FUN_00080774": "initialize_system_00080774",
                "PIO_Configure": "configure_pio",
                "adc_configure_timing": "configure_adc_timing",
                "adc_configure_trigger": "configure_adc_trigger",
                "adc_disable_all_channel": "disable_all_adc_channels",
                "adc_disable_interrupt": "disable_adc_interrupt",
                "adc_init": "initialize_adc",
                "digitalWrite": "write_digital_value",
                "iVar1": "index",
                "iVar2": "next_index",
                "pmc_enable_periph_clk": "enable_peripheral_clock"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008089c": {
            "additional_data": {
                "0x11": {
                    "baud_rate1": 1,
                    "usart1_config_value1": 1,
                    "usart_baud_rate1": 1,
                    "usart_data_bits1": 1
                },
                "0x12": {
                    "baud_rate2": 1,
                    "usart2_config_value1": 1,
                    "usart_baud_rate2": 1,
                    "usart_data_bits2": 1
                },
                "0x14": {
                    "baud_rate3": 1,
                    "usart3_config_value1": 1,
                    "usart_baud_rate3": 1,
                    "usart_data_bits3": 1
                },
                "0x40098000": {
                    "usart1_base_address": 2,
                    "usart_base_address1": 1,
                    "usart_port1": 1
                },
                "0x4009c000": {
                    "usart2_base_address": 2,
                    "usart_base_address2": 1,
                    "usart_port2": 1
                },
                "0x400a4000": {
                    "usart3_base_address": 2,
                    "usart_base_address3": 1,
                    "usart_port3": 1
                },
                "0x400e0800": {
                    "uart1_base_address": 1,
                    "uart_base_address": 1,
                    "uart_base_address1": 1,
                    "uart_port1": 1
                },
                "8": {
                    "data_bits": 1,
                    "uart_config_value1": 1,
                    "uart_data_bits1": 1
                },
                "DAT_20070ad8": {
                    "ring_buffer6": 1
                },
                "DAT_20070b60": {
                    "ring_buffer2": 1
                },
                "DAT_20070be8": {
                    "uart_config1": 1
                },
                "DAT_20070c0c": {
                    "ring_buffer1": 1
                },
                "DAT_20070c94": {
                    "usart_config1": 1
                },
                "DAT_20070cbc": {
                    "usart_config2": 1
                },
                "DAT_20070ce4": {
                    "usart_config3": 1
                },
                "DAT_20070d0c": {
                    "ring_buffer7": 1
                },
                "DAT_20070d94": {
                    "ring_buffer8": 1
                },
                "DAT_20070e6c": {
                    "ring_buffer3": 1
                },
                "DAT_20070ef4": {
                    "ring_buffer4": 1
                },
                "DAT_20070f7c": {
                    "ring_buffer5": 1
                },
                "FUN_0008089c": {
                    "initialize_communication": 17,
                    "initialize_communication_devices": 1,
                    "initialize_device": 4,
                    "initialize_devices": 1,
                    "initialize_hardware": 1,
                    "initialize_peripherals": 5,
                    "initialize_uar_tand_usart": 2
                },
                "FUN_000811b0": {
                    "calculate_baud_rate": 1,
                    "calculate_checksum": 1,
                    "calculate_result": 1,
                    "calculate_something": 3,
                    "calculate_value": 1,
                    "configure_usart": 1,
                    "decompile_function3": 1,
                    "initialize_usart": 1,
                    "perform_action": 1,
                    "process_data": 3,
                    "process_parameter": 1,
                    "process_some_data": 1,
                    "process_value": 2,
                    "reverse_bit_order": 1,
                    "reverse_bits": 1,
                    "reverse_data": 1,
                    "reverse_integer": 1,
                    "reverse_numbers": 1
                },
                "FUN_00081348": {
                    "configure_uart": 4,
                    "configure_uart_class": 1,
                    "configure_usart": 2,
                    "decompile_function2": 1,
                    "initialize_function": 1,
                    "initialize_uart": 1,
                    "modify_param2": 1,
                    "perform_operation": 1,
                    "process_data": 3,
                    "process_ring_buffer_data": 1,
                    "process_uart_data": 2,
                    "send_data": 3,
                    "set_uart_configuration": 1,
                    "update_usart_class": 1
                },
                "FUN_00081438": {
                    "allocate_memory": 1,
                    "assign_value": 1,
                    "configure_ring_buffer": 2,
                    "create_ring_buffer": 2,
                    "decompile_function1": 1,
                    "get_ring_buffer": 1,
                    "get_ring_buffer_data": 1,
                    "get_updated_parameter": 1,
                    "initialize_ring_buffer": 4,
                    "map_pointers": 1,
                    "modify_param1": 1,
                    "process_ring_buffer_data": 1,
                    "reconfigure_ring_buffer": 1,
                    "resize_buffer": 1,
                    "set_ring_buffer_pointer": 1,
                    "update_ring_buffer": 3
                },
                "RingBuffer": {
                    "create_ring_buffer": 3,
                    "initialize_ring_buffer": 22
                },
                "UARTClass": {
                    "configure_uart": 1,
                    "initialize_uart": 19,
                    "initialize_uart_class": 3,
                    "setup_uart": 2
                },
                "USARTClass": {
                    "configure_usart": 1,
                    "initialize_usart": 19,
                    "initialize_usart_class": 3,
                    "setup_usart": 2
                },
                "param_1": {
                    "arg1": 2,
                    "config_array": 1,
                    "param1": 14,
                    "param_1": 2,
                    "param_array": 1,
                    "ptr_argument1": 1,
                    "uart_config": 1,
                    "uart_param": 1,
                    "undefined_param1": 1,
                    "unknown1": 1,
                    "unknown_param1": 1,
                    "unused_param1": 1,
                    "unused_param_1": 1,
                    "usart": 1,
                    "usart_config": 1,
                    "usart_ptr": 1
                },
                "param_2": {
                    "arg2": 2,
                    "argument2": 1,
                    "base_address": 3,
                    "config_size": 1,
                    "param2": 14,
                    "param_2": 1,
                    "param_value": 1,
                    "uart_baudrate": 1,
                    "undefined4_offset": 1,
                    "undefined_param2": 1,
                    "unknown2": 1,
                    "unknown_param2": 1,
                    "unused_param2": 1,
                    "unused_param_2": 1,
                    "usart_param": 1
                },
                "param_3": {
                    "arg3": 2,
                    "argument3": 1,
                    "data_bits": 2,
                    "param3": 15,
                    "param_3": 1,
                    "param_flag": 1,
                    "ring_buffer_param": 1,
                    "uart_data_bits": 1,
                    "undefined_param3": 1,
                    "undefined_ptr": 1,
                    "unknown3": 1,
                    "unknown_param5": 1,
                    "unused_param3": 1,
                    "unused_param_3": 1,
                    "word_length": 1
                },
                "param_4": {
                    "arg4": 1,
                    "argument4": 1,
                    "config_param": 1,
                    "param4": 9,
                    "param_size": 1,
                    "parity_bits": 1,
                    "process_data_param": 1,
                    "stop_bits": 2,
                    "uart_stop_bits": 1,
                    "undefined4_parameter": 1,
                    "unknown4": 1,
                    "unknown_param4": 1
                }
            },
            "called": [
                "FUN_00081438",
                "FUN_00081348",
                "FUN_000811b0"
            ],
            "calling": [],
            "code": "\nvoid initialize_communication_devices_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initialize_ring_buffer(&DAT_20070c0c);\n  initialize_ring_buffer(&DAT_20070b60);\n  initialize_uart(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  initialize_ring_buffer(&DAT_20070e6c);\n  initialize_ring_buffer(&DAT_20070ef4);\n  initialize_ring_buffer(&DAT_20070f7c);\n  initialize_ring_buffer(&DAT_20070ad8);\n  initialize_ring_buffer(&DAT_20070d0c);\n  initialize_ring_buffer(&DAT_20070d94);\n  initialize_usart(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initialize_usart(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initialize_usart(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "current_name": "initialize_communication_devices_0008089c",
            "entrypoint": "0x0008089c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008089c": "initialize_communication_devices_0008089c",
                "RingBuffer": "initialize_ring_buffer",
                "UARTClass": "initialize_uart",
                "USARTClass": "initialize_usart",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080970": {
            "additional_data": {
                "FUNC_0008073a": {
                    "handle_serial_event": 1,
                    "handle_serial_event3": 1,
                    "helper_function5": 1,
                    "serial_event3": 8,
                    "serial_event4": 1
                },
                "FUNC_00080748": {
                    "handle_serial_event1": 1,
                    "handle_serial_event2": 1,
                    "helper_function4": 1,
                    "serial_event2": 8,
                    "serial_event3": 1
                },
                "FUNC_0008074a": {
                    "handle_serial_event1": 1,
                    "handle_serial_event2": 1,
                    "helper_function3": 1,
                    "serial_event1": 8,
                    "serial_event2": 1
                },
                "FUNC_0008074c": {
                    "handle_available_data": 1,
                    "handle_serial_event": 1,
                    "helper_function1": 1,
                    "serial_event": 10
                },
                "FUN_0008074c": {
                    "serial_event": 1
                },
                "FUN_00080970": {
                    "check_and_invoke_serial_events": 1,
                    "check_serial_events": 9,
                    "handle_serial_events": 2,
                    "process_serial_events": 19
                },
                "FUN_00081248": {
                    "available_buffer_size": 1,
                    "available_data_count": 1,
                    "available_items": 1,
                    "available_serial_event": 1,
                    "get_available_data": 1,
                    "helper_function2": 1,
                    "is_available": 4,
                    "process_available_data": 1,
                    "process_data": 1,
                    "process_serial_event1": 1,
                    "serial_event1": 1
                },
                "available": {
                    "check_availability": 1,
                    "check_if_available": 1,
                    "check_if_data_available": 1,
                    "is_available": 1,
                    "is_data_available": 1
                },
                "iVar": {
                    "is_available": 1
                },
                "iVar1": {
                    "availability": 1,
                    "available_count": 1,
                    "available_data": 2,
                    "event_available": 1,
                    "is_available": 5,
                    "num_available": 1,
                    "result": 8
                },
                "serialEvent": {
                    "check_serial_event0": 1,
                    "handle_serial_event": 4,
                    "handle_serial_event1": 1,
                    "invoke_serial_event_func": 1,
                    "process_serial_event": 8
                },
                "serialEvent1": {
                    "check_serial_event1": 1,
                    "handle_serial_event1": 4,
                    "handle_serial_event2": 1,
                    "invoke_serial_event_func1": 1,
                    "process_serial_event1": 9,
                    "serial_event1": 1
                },
                "serialEvent2": {
                    "check_serial_event2": 1,
                    "handle_serial_event2": 4,
                    "handle_serial_event3": 1,
                    "invoke_serial_event_func2": 1,
                    "process_serial_event2": 9,
                    "serial_event2": 1
                },
                "serialEvent3": {
                    "check_serial_event3": 1,
                    "handle_serial_event3": 4,
                    "handle_serial_event4": 1,
                    "invoke_serial_event_func3": 1,
                    "process_serial_event3": 9,
                    "serial_event3": 1
                }
            },
            "called": [
                "FUN_0008074c",
                "FUN_00081248",
                "FUN_0008074a",
                "FUN_00080748",
                "FUN_0008073a"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid process_serial_events_00080970(void)\n\n{\n  int result;\n  \n  result = is_available(&DAT_20070be8);\n  if (result != 0) {\n    process_serial_event();\n  }\n  result = is_available(&DAT_20070c94);\n  if (result != 0) {\n    process_serial_event1();\n  }\n  result = is_available(&DAT_20070cbc);\n  if (result != 0) {\n    process_serial_event2();\n  }\n  result = is_available(&DAT_20070ce4);\n  if (result != 0) {\n    process_serial_event3();\n  }\n  return;\n}\n\n",
            "current_name": "process_serial_events_00080970",
            "entrypoint": "0x00080970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080970": "process_serial_events_00080970",
                "available": "is_available",
                "iVar": "is_available",
                "iVar1": "result",
                "serialEvent": "process_serial_event",
                "serialEvent1": "process_serial_event1",
                "serialEvent2": "process_serial_event2",
                "serialEvent3": "process_serial_event3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000809be": {
            "additional_data": {
                "DAT_": {
                    "unchanged": 1
                },
                "FUN_000809be": {
                    "set_param_value": 1,
                    "set_parameter_value": 1,
                    "update_data": 5,
                    "update_memory_block": 1,
                    "update_param": 5,
                    "update_param_and_set_variable": 1,
                    "update_param_value": 2,
                    "update_param_values": 1,
                    "update_parameter": 6,
                    "update_parameter_value": 4,
                    "update_parameters": 1,
                    "update_register_value": 1,
                    "update_value": 2
                },
                "PTR_": {
                    "unchanged": 1
                },
                "param_1": {
                    "base_address": 15,
                    "data": 1,
                    "data_address": 2,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "memory_block_address": 1,
                    "obj": 1,
                    "object": 2,
                    "object_address": 4,
                    "register_address": 1,
                    "struct_ptr": 1
                },
                "param_2": {
                    "action_code": 1,
                    "action_type": 7,
                    "case_identifier": 1,
                    "case_number": 1,
                    "case_type": 1,
                    "code": 1,
                    "condition": 1,
                    "mode": 1,
                    "operation": 1,
                    "operation_type": 6,
                    "option": 4,
                    "param_type": 2,
                    "switch_case": 1,
                    "type": 2,
                    "update_type": 1
                },
                "param_3": {
                    "new_param_value": 3,
                    "new_value": 19,
                    "param_value": 1,
                    "value": 8
                },
                "switchD_000809c4_caseD_6": {
                    "case_option_6": 1,
                    "default_case": 3
                },
                "uVar1": {
                    "new_parameter_value": 1,
                    "result": 3,
                    "result_value": 1,
                    "temp_value": 1,
                    "updated_data": 1,
                    "updated_param": 1,
                    "updated_value": 23
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a30"
            ],
            "code": "\nvoid update_parameter_value_000809be(int base_address,undefined4 action_type,uint new_value)\n\n{\n  uint updated_value;\n  \n  *(uint *)(base_address + 0x44) = new_value;\n  switch(action_type) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updated_value = *(uint *)(base_address + 0x70) & *(uint *)(base_address + 0x70) & ~new_value;\n    break;\n  case 2:\n    updated_value = *(uint *)(base_address + 0x70) | new_value;\n    break;\n  default:\n    goto default_case;\n  }\n  *(uint *)(base_address + 0x70) = updated_value;\ndefault_case:\n  *(uint *)(base_address + 4) = new_value;\n  return;\n}\n\n",
            "current_name": "update_parameter_value_000809be",
            "entrypoint": "0x000809be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000809be": "update_parameter_value_000809be",
                "param_1": "base_address",
                "param_2": "action_type",
                "param_3": "new_value",
                "switchD_000809c4_caseD_6": "default_case",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000809e4": {
            "additional_data": {
                "0x11": {
                    "array_index_1": 1,
                    "index1": 5,
                    "param_index1": 1
                },
                "0x18": {
                    "array_index_3": 1,
                    "index3": 5,
                    "param_index2": 1
                },
                "0x19": {
                    "array_index_2": 1,
                    "index2": 5,
                    "param_index3": 1
                },
                "0x20": {
                    "array_index_6": 1,
                    "index6": 5,
                    "param_index4": 1
                },
                "5": {
                    "array_index_7": 1,
                    "index7": 4,
                    "param_index5": 1
                },
                "8": {
                    "array_index_4": 1,
                    "index1": 1,
                    "index4": 5
                },
                "9": {
                    "array_index_5": 1,
                    "index2": 1,
                    "index5": 5
                },
                "FUN_000809e4": {
                    "assign_param_values": 1,
                    "assign_values_to_indices": 1,
                    "initialize_data": 1,
                    "set_parameters": 2,
                    "set_params": 1,
                    "set_values": 3,
                    "set_values_based_on_conditions": 1,
                    "set_values_based_on_flags": 1,
                    "update_flags_and_values": 1,
                    "update_param": 2,
                    "update_param_array": 2,
                    "update_param_values": 2,
                    "update_parameters": 10,
                    "update_params": 2,
                    "update_values_and_store": 1
                },
                "bVar1": {
                    "is_flag_negative": 1,
                    "is_flag_set": 3,
                    "is_negative": 20,
                    "is_negative_flag": 5,
                    "is_negative_flag_set": 1,
                    "negative_flag": 1
                },
                "param_1": {
                    "array": 7,
                    "data": 1,
                    "output": 1,
                    "output_array": 3,
                    "param_array": 6,
                    "parameter_array": 2,
                    "parameters": 7,
                    "params": 2,
                    "params_array": 2
                },
                "param_2": {
                    "input": 1,
                    "input_value": 1,
                    "new_param": 1,
                    "new_value": 13,
                    "param_value": 2,
                    "value": 13
                },
                "param_3": {
                    "bit_mask": 1,
                    "bitmask": 3,
                    "control_flag": 1,
                    "flag": 4,
                    "flags": 21,
                    "param_flags": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a30"
            ],
            "code": "\nvoid update_parameters_000809e4(undefined4 *array,undefined4 new_value,uint flags)\n\n{\n  bool is_negative;\n  \n  is_negative = (int)(flags << 0x1f) < 0;\n  array[0x11] = new_value;\n  if (is_negative) {\n    array[0x19] = new_value;\n  }\n  if (!is_negative) {\n    array[0x18] = new_value;\n  }\n  is_negative = (flags & 10) != 0;\n  if (is_negative) {\n    array[8] = new_value;\n  }\n  if (!is_negative) {\n    array[9] = new_value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    array[0x20] = new_value;\n  }\n  array[5] = new_value;\n  *array = new_value;\n  return;\n}\n\n",
            "current_name": "update_parameters_000809e4",
            "entrypoint": "0x000809e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000809e4": "update_parameters_000809e4",
                "bVar1": "is_negative",
                "param_1": "array",
                "param_2": "new_value",
                "param_3": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "additional_data": {
                "0x11": {
                    "index1": 2
                },
                "0x14": {
                    "index5": 2
                },
                "0x15": {
                    "index4": 2
                },
                "0x18": {
                    "index2": 2
                },
                "0x19": {
                    "index3": 2
                },
                "0xc": {
                    "index7": 2
                },
                "0xd": {
                    "index6": 2
                },
                "4": {
                    "index8": 1
                },
                "FUN_00080a0a": {
                    "assign_values_to_parameters": 1,
                    "initialize_data": 1,
                    "set_param": 1,
                    "set_param_values": 7,
                    "set_parameters": 3,
                    "set_params": 4,
                    "set_value_conditions": 1,
                    "set_values": 2,
                    "set_values_in_array": 1,
                    "update_data_params": 1,
                    "update_param_values": 2,
                    "update_parameters": 3,
                    "update_params": 4
                },
                "param_1": {
                    "array": 3,
                    "data_array": 1,
                    "data_params": 1,
                    "output": 1,
                    "output_array": 4,
                    "output_params": 1,
                    "param_array": 7,
                    "parameters": 7,
                    "params": 3,
                    "params_array": 2
                },
                "param_2": {
                    "new_param": 1,
                    "new_param_value": 1,
                    "new_parameter": 2,
                    "new_value": 9,
                    "param_value": 3,
                    "value": 15
                },
                "param_3": {
                    "check1": 1,
                    "condition1": 6,
                    "condition_1": 4,
                    "condition_a": 1,
                    "flag1": 6,
                    "is_param3_zero": 8,
                    "is_parameter3_zero": 1,
                    "is_required": 1,
                    "is_zero": 1,
                    "value1": 2
                },
                "param_4": {
                    "check2": 1,
                    "condition2": 6,
                    "condition_2": 4,
                    "condition_b": 1,
                    "flag2": 6,
                    "is_optional": 1,
                    "is_param4_zero": 8,
                    "is_parameter4_zero": 1,
                    "is_zero2": 1,
                    "value2": 2
                },
                "param_5": {
                    "check3": 1,
                    "condition3": 6,
                    "condition_3": 4,
                    "condition_c": 1,
                    "flag3": 6,
                    "is_default": 1,
                    "is_param5_zero": 8,
                    "is_parameter5_zero": 1,
                    "is_zero3": 1,
                    "value3": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00081014",
                "FUN_00080a30"
            ],
            "code": "\nvoid set_param_values_00080a0a(undefined4 *parameters,undefined4 value,int is_param3_zero,int is_param4_zero,int is_param5_zero)\n\n{\n  parameters[0x11] = value;\n  if (is_param5_zero == 0) {\n    parameters[0x18] = value;\n  }\n  else {\n    parameters[0x19] = value;\n  }\n  if (is_param4_zero == 0) {\n    parameters[0x15] = value;\n  }\n  else {\n    parameters[0x14] = value;\n  }\n  if (is_param3_zero == 0) {\n    parameters[0xd] = value;\n  }\n  else {\n    parameters[0xc] = value;\n  }\n  parameters[4] = value;\n  *parameters = value;\n  return;\n}\n\n",
            "current_name": "set_param_values_00080a0a",
            "entrypoint": "0x00080a0a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a0a": "set_param_values_00080a0a",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "is_param3_zero",
                "param_4": "is_param4_zero",
                "param_5": "is_param5_zero"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a30": {
            "additional_data": {
                "FUN_000809be": {
                    "configure_output_pin": 1,
                    "perform_action3": 1,
                    "set_output": 5,
                    "set_output_change": 1,
                    "set_output_helper": 1,
                    "set_output_options": 1
                },
                "FUN_000809e4": {
                    "configure_input_pin": 1,
                    "perform_action2": 1,
                    "set_input": 5,
                    "set_input_change": 1,
                    "set_input_helper": 1,
                    "set_input_options": 1
                },
                "FUN_00080a0a": {
                    "configure_input": 1,
                    "configure_peripheral_pin": 1,
                    "modify_register": 1,
                    "perform_action1": 1,
                    "set_periph_config": 1,
                    "set_peripheral": 2,
                    "set_peripheral_flags": 1,
                    "set_peripheral_helper": 1,
                    "set_peripheral_options": 1
                },
                "FUN_00080a30": {
                    "configure_gpio": 1,
                    "configure_peripheral": 8,
                    "configure_pio": 3,
                    "set_peripheral": 14,
                    "set_peripheral_config": 1,
                    "set_peripheral_configuration": 1,
                    "set_peripheral_settings": 1,
                    "set_pio": 1,
                    "set_pio_config": 1
                },
                "PIO_SetInput": {
                    "set_input": 7,
                    "set_input_register": 1
                },
                "PIO_SetOutput": {
                    "set_output": 7,
                    "set_output_register": 1
                },
                "PIO_SetPeripheral": {
                    "configure_peripheral": 1,
                    "set_peripheral": 5,
                    "set_peripheral_mode": 1,
                    "set_peripheral_register": 1
                },
                "PTR_00000044": {
                    "saved_peripheral": 1
                },
                "PTR_00000060": {
                    "secondary_peripheral": 1
                },
                "PTR_00000064": {
                    "third_peripheral": 1
                },
                "PTR_fun_000809be": {
                    "set_output": 1
                },
                "PTR_fun_000809e4": {
                    "set_input": 1
                },
                "PTR_fun_00080a0a": {
                    "set_peripheral": 1
                },
                "bVar1": {
                    "is_bit_set": 1,
                    "is_flag_negative": 2,
                    "is_neg_value": 1,
                    "is_negative": 20,
                    "is_negative_flag": 4,
                    "is_negative_flags": 1,
                    "is_negative_shift": 1
                },
                "param_1": {
                    "base_address": 2,
                    "device": 18,
                    "device_address": 3,
                    "gpio_base_address": 1,
                    "peripheral": 1,
                    "peripheral_address": 1,
                    "peripheral_id": 1,
                    "pio_base_address": 2,
                    "pio_controller": 1,
                    "port": 1
                },
                "param_2": {
                    "action": 1,
                    "configuration_type": 1,
                    "mode": 17,
                    "output_pin_config": 1,
                    "peripheral": 1,
                    "peripheral_type": 6,
                    "pin_number": 1,
                    "pio_pin": 1,
                    "type": 1,
                    "value": 1
                },
                "param_3": {
                    "config": 8,
                    "config_value": 1,
                    "configuration_data": 1,
                    "flags": 1,
                    "peripheral": 11,
                    "peripheral_config": 2,
                    "peripheral_configuration": 1,
                    "peripheral_type": 2,
                    "pin": 1,
                    "setting": 2,
                    "value": 1
                },
                "param_4": {
                    "bit_mask": 1,
                    "config": 1,
                    "config_value": 1,
                    "configuration": 1,
                    "flag": 5,
                    "flags": 12,
                    "param2": 1,
                    "param_4": 1,
                    "peripheral_flags": 1,
                    "settings": 1,
                    "shift_amount": 1,
                    "value": 5
                },
                "param_5": {
                    "param3": 1,
                    "param_5": 1,
                    "pin_number": 1,
                    "unused": 1
                }
            },
            "called": [
                "FUN_00080a0a",
                "FUN_000809e4",
                "FUN_000809be"
            ],
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "code": "\nundefined4 set_peripheral_settings_00080a30(int device,int mode,undefined4 peripheral,uint flags)\n\n{\n  bool is_negative;\n  \n  switch(mode) {\n  case 1:\n  case 2:\n    set_peripheral(device,mode,peripheral);\n    is_negative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = peripheral;\n    if (is_negative) {\n      *(undefined4 *)(device + 100) = peripheral;\n    }\n    if (!is_negative) {\n      *(undefined4 *)(device + 0x60) = peripheral;\n    }\n    break;\n  case 3:\n    set_input(device,peripheral,flags,0x809e5,device);\n    break;\n  case 4:\n  case 5:\n    set_output(device,peripheral,mode == 5,(flags << 0x1d) >> 0x1f,flags & 1,mode,peripheral\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "set_peripheral_settings_00080a30",
            "entrypoint": "0x00080a30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a30": "set_peripheral_settings_00080a30",
                "PIO_SetInput": "set_input",
                "PIO_SetOutput": "set_output",
                "PIO_SetPeripheral": "set_peripheral",
                "bVar1": "is_negative",
                "param_1": "device",
                "param_2": "mode",
                "param_3": "peripheral",
                "param_4": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a94": {
            "additional_data": {
                "FUN_00080a94": {
                    "apply_mask_and_check": 1,
                    "bitwise_and_check": 1,
                    "check_and_return_bitwise_result": 1,
                    "check_bits": 1,
                    "check_bitwise": 3,
                    "check_bitwise_and": 2,
                    "check_bitwise_comparison": 1,
                    "check_bitwise_compatibility": 2,
                    "check_bitwise_flags": 1,
                    "check_bitwise_intersection": 5,
                    "check_bitwise_operation": 1,
                    "check_bitwise_operations": 1,
                    "check_flag": 1,
                    "check_flags": 1,
                    "check_if_bits_set": 1,
                    "check_intersection": 4,
                    "check_matching_bits": 1,
                    "check_parameter_validity": 1,
                    "check_permissions": 2
                },
                "param_1": {
                    "address": 2,
                    "array_pointer": 1,
                    "base_address": 2,
                    "data_address": 2,
                    "data_offset": 2,
                    "data_pointer": 2,
                    "input": 2,
                    "input_address": 4,
                    "input_param": 1,
                    "input_ptr": 1,
                    "input_val": 1,
                    "input_value": 5,
                    "num1": 1,
                    "object_address": 1,
                    "offset": 1,
                    "parameter": 1,
                    "ptr": 1,
                    "ptr_data": 1
                },
                "param_2": {
                    "bit_mask": 2,
                    "bitmask": 1,
                    "bitmask_value": 1,
                    "filter": 1,
                    "flag": 1,
                    "flags": 2,
                    "input_value": 1,
                    "mask": 16,
                    "mask_value": 2,
                    "num2": 1,
                    "permission": 1,
                    "permissions": 1,
                    "value": 1
                },
                "uVar1": {
                    "bitwise_result": 1,
                    "intersected": 1,
                    "intersection_result": 1,
                    "result": 25,
                    "validity_flag": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00081014"
            ],
            "code": "\nuint check_bitwise_intersection_00080a94(int input_value,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "check_bitwise_intersection_00080a94",
            "entrypoint": "0x00080a94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a94": "check_bitwise_intersection_00080a94",
                "param_1": "input_value",
                "param_2": "mask",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "additional_data": {
                "FUN_00080aa8": {
                    "check_and_set_bit": 17,
                    "check_and_set_flag": 1,
                    "check_and_update_bit": 5,
                    "check_and_update_bits": 1,
                    "check_bit_and_set": 5,
                    "set_bit": 1,
                    "update_bitmask": 1
                },
                "_DAT_400e0610": {
                    "updated_bitmask1": 1
                },
                "_DAT_400e0618": {
                    "bitmask1": 1
                },
                "_DAT_400e0700": {
                    "updated_bitmask2": 1
                },
                "_DAT_400e0708": {
                    "bitmask2": 1
                },
                "param_1": {
                    "bit_index": 3,
                    "bit_position": 7,
                    "input": 3,
                    "input_value": 9,
                    "number": 1,
                    "value": 8
                },
                "uVar1": {
                    "bit": 1,
                    "bit_mask": 29,
                    "bitmask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "code": "\n\n\nundefined4 check_bit_and_set_00080aa8(uint input_value)\n\n{\n  uint bit_mask;\n  \n  if (input_value < 0x2d) {\n    if (input_value < 0x20) {\n      bit_mask = 1 << (input_value & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (input_value - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_bit_and_set_00080aa8",
            "entrypoint": "0x00080aa8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080aa8": "check_bit_and_set_00080aa8",
                "param_1": "input_value",
                "uVar1": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "additional_data": {
                "FUN_00080b2c": {
                    "configure_channel": 5,
                    "configure_tc": 3,
                    "configure_tc_channel": 17,
                    "configure_timer_channel": 1,
                    "initialize_tc_channel": 4,
                    "set_channel_configuration": 1
                },
                "FUN_000816f8": {
                    "set_channel_configuration": 1,
                    "set_configuration": 1
                },
                "iVar1": {
                    "byte_offset": 2,
                    "channel_index": 2,
                    "channel_offset": 3,
                    "idx_offset": 1,
                    "index_offset": 3,
                    "num_channels": 1,
                    "offset": 16,
                    "shifted_param1": 1,
                    "shifted_params": 1
                },
                "iVar2": {
                    "address": 4,
                    "base_address": 1,
                    "calculated_address": 1,
                    "channel_address": 11,
                    "channel_index": 5,
                    "channel_offset": 4,
                    "channel_ptr": 1,
                    "current_address": 1,
                    "dw_channel_offset": 1,
                    "mem_addr": 1
                },
                "param_1": {
                    "address": 1,
                    "channel_id": 1,
                    "channel_index": 1,
                    "config": 1,
                    "config_param": 1,
                    "dw_param1": 1,
                    "param1": 25
                },
                "param_2": {
                    "channel_id": 2,
                    "channel_index": 1,
                    "channel_size": 2,
                    "dw_channel": 3,
                    "dw_param2": 1,
                    "num_channels": 4,
                    "param2": 18
                },
                "param_3": {
                    "channel_name": 21,
                    "config_name": 1,
                    "message": 1,
                    "param3": 7,
                    "psz_param": 1
                },
                "uVar3": {
                    "channel_id": 1,
                    "channel_index": 1,
                    "combined_params": 21,
                    "con_param": 1,
                    "concatenated_params": 2,
                    "dw_combined_param": 1,
                    "parameter": 1
                }
            },
            "called": [
                "FUN_000816f8"
            ],
            "calling": [
                "FUN_000803fc"
            ],
            "code": "\nvoid configure_tc_channel_00080b2c(undefined4 param1,uint param2,char *channel_name)\n\n{\n  int offset;\n  int channel_address;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(param2,param1);\n  if (2 < param2) {\n    channel_name = \"TC_Configure\";\n    combined_params = __assert_func(\"../source/tc.c\",0x40,\"TC_Configure\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combined_params >> 0x20) * 0x40;\n  channel_address = (int)combined_params + offset;\n  *(undefined4 *)((int)combined_params + offset) = 2;\n  *(undefined4 *)(channel_address + 0x28) = 0xffffffff;\n  *(char **)(channel_address + 4) = channel_name;\n  return;\n}\n\n",
            "current_name": "configure_tc_channel_00080b2c",
            "entrypoint": "0x00080b2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "iVar1": "offset",
                "iVar2": "channel_address",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "channel_name",
                "uVar3": "combined_params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b90": {
            "additional_data": {
                "FUN_00080b90": {
                    "save_param_value": 1,
                    "set_element_at_offset": 1,
                    "set_param_at_offset": 1,
                    "set_param_value": 7,
                    "set_parameter_value": 5,
                    "set_value_at_index": 1,
                    "set_value_at_offset": 1,
                    "store_data_at_offset": 1,
                    "store_value_at_index": 2,
                    "store_value_at_offset": 1,
                    "update_data_at_index": 1,
                    "update_memory_value_at_offset": 1,
                    "update_parameter": 1,
                    "update_parameter_value": 2,
                    "update_value": 1,
                    "update_value_at_index": 1,
                    "update_value_in_array": 1,
                    "write_to_memory": 1,
                    "write_value_to_offset": 1
                },
                "param_1": {
                    "array": 1,
                    "array_base": 2,
                    "array_base_address": 1,
                    "array_pointer": 1,
                    "base_address": 22,
                    "data_pointer": 1,
                    "object_address": 1,
                    "object_pointer": 1,
                    "param_base": 1
                },
                "param_2": {
                    "index": 22,
                    "object_index": 1,
                    "offset": 6,
                    "param_index": 1,
                    "parameter_index": 1
                },
                "param_3": {
                    "new_value": 12,
                    "value": 17,
                    "value_to_store": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_000803fc"
            ],
            "code": "\nvoid set_param_value_00080b90(int base_address,int index,undefined4 value)\n\n{\n  *(undefined4 *)(base_address + index * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_00080b90",
            "entrypoint": "0x00080b90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080b90": "set_param_value_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b98": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "elf_array": 2,
                    "elf_rel_array": 2,
                    "elf_relocation_array": 3,
                    "rel_array": 3,
                    "relocation_array": 6,
                    "relocation_data": 1,
                    "relocation_table": 5
                },
                "FUN_00080b98": {
                    "generate_data": 1,
                    "initialize_data": 4,
                    "initialize_memory": 24,
                    "initialize_system": 1
                },
                "_DAT_400e0620": {
                    "address_shift": 1,
                    "buffer": 1,
                    "counter": 3,
                    "counter1": 2,
                    "data_value": 3,
                    "delay_counter": 1,
                    "flag": 1,
                    "initial_value": 1,
                    "loop_counter": 1,
                    "memory_address": 2,
                    "memory_location": 1,
                    "memory_value": 3,
                    "shift_value": 4,
                    "shifted_value": 2,
                    "temp_value": 2,
                    "value": 1,
                    "value1": 2
                },
                "_DAT_400e0628": {
                    "address": 1,
                    "config_value1": 1,
                    "configuration_value": 1,
                    "constant_value1": 2,
                    "control_register1": 1,
                    "data1": 2,
                    "data_field": 1,
                    "data_value": 1,
                    "data_value1": 1,
                    "fixed_value": 1,
                    "magic_value": 1,
                    "new_value1": 1,
                    "offset": 1,
                    "offset_value": 1,
                    "other_data": 1,
                    "register1": 1,
                    "register_value": 1,
                    "some_value": 1,
                    "value": 1,
                    "value1": 1,
                    "value3": 2
                },
                "_DAT_400e0630": {
                    "another_value": 1,
                    "config_value2": 1,
                    "constant": 1,
                    "constant_value": 3,
                    "constant_value2": 2,
                    "control_register2": 1,
                    "count": 1,
                    "data2": 2,
                    "data_value": 1,
                    "data_value2": 1,
                    "index": 1,
                    "loop_count": 1,
                    "loop_counter": 1,
                    "new_value2": 1,
                    "register2": 1,
                    "value": 2,
                    "value2": 1,
                    "value4": 2
                },
                "_DAT_400e0668": {
                    "address_comparison": 1,
                    "another_value": 1,
                    "conditional_variable": 1,
                    "control_value": 1,
                    "count": 1,
                    "counter": 1,
                    "counter2": 2,
                    "flag": 1,
                    "index": 1,
                    "loop_condition": 1,
                    "loop_counter": 3,
                    "loop_variable": 1,
                    "mask": 3,
                    "shifted_value": 1,
                    "temp": 1,
                    "temp_value": 4,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "temp_variable": 2,
                    "value2": 2
                },
                "_DAT_400e0a00": {
                    "data_pointer1": 1,
                    "data_size1": 1,
                    "mem_block1": 1,
                    "memory_address1": 2,
                    "memory_address_a": 1,
                    "memory_block_a": 1,
                    "memory_block_size": 1,
                    "memory_location1": 1,
                    "memory_location_a": 1,
                    "memory_region1": 1,
                    "memory_size": 1,
                    "memory_size1": 3,
                    "memory_start": 2,
                    "memory_start_address": 2,
                    "start_address": 1,
                    "width": 1
                },
                "_DAT_400e0c00": {
                    "data_pointer2": 1,
                    "data_size2": 1,
                    "end_address": 1,
                    "height": 1,
                    "mem_block2": 1,
                    "memory_address2": 2,
                    "memory_address_b": 1,
                    "memory_block_b": 1,
                    "memory_block_size2": 1,
                    "memory_capacity": 1,
                    "memory_end": 2,
                    "memory_end_address": 2,
                    "memory_location2": 1,
                    "memory_location_b": 1,
                    "memory_region2": 1,
                    "memory_size2": 3
                },
                "_FUN_00080b98": {
                    "initialize_memory": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\n\n\nvoid initialize_memory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocation_array[6].r_offset = 84000000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_00080b98",
            "entrypoint": "0x00080b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00080b98": "initialize_memory_00080b98"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080c20": {
            "additional_data": {
                "DAT_00085878": {
                    "data_array": 1,
                    "data_start": 1,
                    "source_address": 1,
                    "source_data": 4,
                    "source_pointer": 1,
                    "start_rel_array": 1
                },
                "DAT_200708a0": {
                    "array": 1,
                    "array_end": 1,
                    "destination_array": 2,
                    "destination_data": 1,
                    "end_address": 1,
                    "end_of_table": 1,
                    "end_pointer": 2,
                    "end_ptr": 2,
                    "end_rel_array": 1,
                    "final_array": 1,
                    "memory_start": 1,
                    "target_data": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "binary_relocation_array": 1,
                    "data_struct": 1,
                    "elf_rel_array": 2,
                    "rel_array": 6,
                    "relocation_array": 3,
                    "relocation_table": 5,
                    "source_array": 1
                },
                "FUN_00080c20": {
                    "copy_and_clear_memory": 1,
                    "copy_data_and_zero": 1,
                    "copy_data_to_memory": 1,
                    "copy_elf_relocation_table": 1,
                    "copy_relocation_table": 1,
                    "initialize_and_execute": 2,
                    "initialize_binary": 4,
                    "initialize_data": 7,
                    "initialize_elf_data": 1,
                    "initialize_elf_memory": 1,
                    "initialize_elf_relocation_table": 1,
                    "initialize_memory": 5,
                    "initialize_memory_and_call_main": 1,
                    "initialize_memory_and_start_main": 1,
                    "initialize_program": 1,
                    "initialize_relocations": 1,
                    "initiate_memory_copy": 1
                },
                "FUN_000815ec": {
                    "clear_memory": 1,
                    "initialize_zero": 1,
                    "perform_action": 1,
                    "process_data": 2,
                    "reverse_operation": 1
                },
                "_DAT_e000ed08": {
                    "constant": 1,
                    "constant_value": 6,
                    "data_field": 1,
                    "data_register": 2,
                    "data_value": 2,
                    "global_variable": 2,
                    "initial_value": 2,
                    "memory_size": 1,
                    "relocation_size": 1,
                    "size": 1,
                    "some_constant": 1,
                    "target_address": 1,
                    "value": 1
                },
                "iVar1": {
                    "index": 10,
                    "iteration": 1,
                    "offset": 17
                },
                "main": {
                    "call_main_function": 1
                },
                "puVar2": {
                    "current_address": 4,
                    "current_pointer": 2,
                    "data": 1,
                    "data_pointer": 1,
                    "destination": 1,
                    "elf_pointer": 1,
                    "p_data": 1,
                    "pointer": 8,
                    "ptr": 7,
                    "ptr_element": 1
                },
                "r_offset": {
                    "offset": 5,
                    "relocation_offset": 1
                }
            },
            "called": [
                "FUN_000815ec"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid initialize_elf_data_00080c20(void)\n\n{\n  int offset;\n  undefined4 *pointer;\n  \n  for (offset = 0; (undefined4 *)((int)&rel_array[0].offset + offset) < &DAT_200708a0\n      ; offset = offset + 4) {\n    *(undefined4 *)((int)&rel_array[0].offset + offset) =\n         *(undefined4 *)(&DAT_00085878 + offset);\n  }\n  for (pointer = &DAT_200708a0; pointer < (undefined4 *)0x20071248; pointer = pointer + 1) {\n    *pointer = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  call_main_function();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "initialize_elf_data_00080c20",
            "entrypoint": "0x00080c20",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00080c20": "initialize_elf_data_00080c20",
                "iVar1": "offset",
                "main": "call_main_function",
                "puVar2": "pointer",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080c98": {
            "additional_data": {
                "FUN_00080c98": {
                    "calculate_offset": 1,
                    "calculate_parameters": 1,
                    "calculate_threshold": 22,
                    "calculate_threshold_value": 1,
                    "calculate_value": 1,
                    "find_optimal_index": 1,
                    "find_threshold": 1,
                    "set_mode_and_index": 1,
                    "set_parameters": 1
                },
                "local_58": {
                    "offset_list": 1,
                    "size_array": 1,
                    "threshold_array": 3,
                    "threshold_options": 1,
                    "threshold_table": 2,
                    "threshold_values": 7,
                    "thresholds": 15,
                    "thresholds_array": 1
                },
                "param_1": {
                    "output": 5,
                    "output_array": 7,
                    "output_buffer": 2,
                    "output_params": 1,
                    "output_value": 1,
                    "output_values": 1,
                    "result": 6,
                    "threshold": 6,
                    "threshold_array": 1,
                    "threshold_ptr": 1
                },
                "param_2": {
                    "data_size": 3,
                    "input_size": 10,
                    "input_value": 4,
                    "size": 4,
                    "total_bytes": 2,
                    "total_size": 3,
                    "total_ticks": 1,
                    "total_time": 3,
                    "total_value": 1
                },
                "param_3": {
                    "base_size": 1,
                    "block_size": 3,
                    "divisor": 3,
                    "factor": 5,
                    "factor1": 2,
                    "interval": 1,
                    "multiplier": 5,
                    "num_iterations": 1,
                    "num_threads": 1,
                    "packet_size": 1,
                    "scale_factor": 1,
                    "threshold_factor": 1,
                    "threshold_multiplier": 2,
                    "ticks_per_cycle": 1,
                    "unit_size": 1,
                    "unit_time": 1,
                    "value_1": 1
                },
                "param_4": {
                    "cycles_per_threshold": 1,
                    "divisor": 6,
                    "factor": 1,
                    "factor2": 2,
                    "microseconds": 1,
                    "multiplier": 8,
                    "scaling_factor": 2,
                    "threshold": 3,
                    "time": 1,
                    "time_constant": 1,
                    "time_elapsed": 1,
                    "time_factor": 1,
                    "time_interval": 1,
                    "time_limit": 1,
                    "value_2": 1
                },
                "uVar1": {
                    "adjusted_cycles": 1,
                    "adjusted_multiplier": 1,
                    "div_factor": 1,
                    "divided_size": 2,
                    "dividend": 2,
                    "division_result": 1,
                    "divisions": 1,
                    "divisor": 3,
                    "num_blocks": 3,
                    "num_intervals": 1,
                    "num_iterations": 1,
                    "num_packets": 1,
                    "num_segments": 1,
                    "num_units": 1,
                    "quotient": 10,
                    "threshold_per_iteration": 1
                },
                "uVar2": {
                    "counter": 2,
                    "current_index": 2,
                    "i": 3,
                    "index": 22,
                    "segment_index": 1,
                    "unit_index": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nundefined4 calculate_threshold_value_00080c98(undefined4 *output_array,uint input_size,int factor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output_array = 1;\n  output_array[1] = 0;\n  output_array[0x48] = 0x202;\n  output_array[0x41] = 0;\n  output_array[0x45] = 0;\n  quotient = input_size / (uint)(factor * 2);\n  if (input_size == factor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_size / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      output_array[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output_array[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_threshold_value_00080c98",
            "entrypoint": "0x00080c98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080c98": "calculate_threshold_value_00080c98",
                "local_58": "thresholds",
                "param_1": "output_array",
                "param_2": "input_size",
                "param_3": "factor",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d30": {
            "additional_data": {
                "DAT_": {
                    "": 2
                },
                "FUN_00080d30": {
                    "set_bit_in_register": 2,
                    "set_bits_in_memory": 1,
                    "set_bits_in_param": 1,
                    "set_flag": 2,
                    "set_flag_bit": 1,
                    "update_flag": 3,
                    "update_flag_bits": 1,
                    "update_flag_with_parameter": 1,
                    "update_flags": 6,
                    "update_memory": 1,
                    "update_param": 2,
                    "update_param_with_flag": 2,
                    "update_parameter": 2,
                    "update_parameter_value": 2,
                    "update_register": 1,
                    "update_value": 2,
                    "update_value_with_mask": 1
                },
                "PTR_": {
                    "": 2
                },
                "param_1": {
                    "address": 3,
                    "arg1": 1,
                    "array_address": 1,
                    "base_address": 14,
                    "data_address": 2,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "flag_address": 1,
                    "input": 1,
                    "input_address": 1,
                    "memory_address": 1,
                    "register": 1,
                    "register_address": 2
                },
                "param_2": {
                    "arg2": 1,
                    "bit_value": 1,
                    "bits_to_set": 1,
                    "data": 1,
                    "data_to_set": 1,
                    "flag": 1,
                    "flag1": 1,
                    "flag_value": 3,
                    "new_bit": 1,
                    "new_bits": 3,
                    "new_value": 3,
                    "value": 11,
                    "value1": 1,
                    "value_to_or": 1,
                    "value_to_set": 1
                },
                "param_3": {
                    "arg3": 1,
                    "bit": 3,
                    "bit_mask": 2,
                    "bit_position": 1,
                    "bit_position_to_set": 1,
                    "bit_to_set": 4,
                    "bit_value": 3,
                    "bitmask": 1,
                    "flag": 10,
                    "flag2": 1,
                    "flag_value": 1,
                    "mask": 1,
                    "mask_value": 1,
                    "value2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid update_param_with_flag_00080d30(int base_address,uint value,uint flag)\n\n{\n  *(uint *)(base_address + 4) = value | *(uint *)(base_address + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "current_name": "update_param_with_flag_00080d30",
            "entrypoint": "0x00080d30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d30": "update_param_with_flag_00080d30",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "additional_data": {
                "4": {
                    "current_value": 1
                },
                "FUN_00080d3e": {
                    "combine_bits": 1,
                    "combine_flags": 1,
                    "combine_parameters": 1,
                    "combine_uint_with_bit_shift": 1,
                    "set_combined_bits": 1,
                    "set_flags": 2,
                    "update_configuration": 2,
                    "update_data": 1,
                    "update_flags": 1,
                    "update_memory": 1,
                    "update_memory_values": 1,
                    "update_memory_with_parameters": 1,
                    "update_parameter": 1,
                    "update_parameter_values": 1,
                    "update_parameters": 3,
                    "update_params": 1,
                    "update_register": 4,
                    "update_register_value": 1,
                    "update_register_values": 3,
                    "update_user_data": 1,
                    "update_value": 1,
                    "write_to_memory": 1
                },
                "configValue": {
                    "updated_config_value": 1
                },
                "param_1": {
                    "address": 2,
                    "base_address": 11,
                    "config_address": 2,
                    "data_address": 1,
                    "input_address": 1,
                    "input_array": 1,
                    "memory_address": 3,
                    "object_address": 1,
                    "register": 1,
                    "register_address": 7,
                    "user_data_address": 1
                },
                "param_2": {
                    "bit_mask": 2,
                    "bit_value1": 1,
                    "bit_values": 1,
                    "data1": 1,
                    "data_value": 1,
                    "first_value": 2,
                    "flag1": 1,
                    "flags_to_apply": 1,
                    "input_param1": 1,
                    "input_value": 2,
                    "mask": 2,
                    "mask_value": 1,
                    "new_bits": 1,
                    "param_value1": 1,
                    "parameter2": 1,
                    "value": 4,
                    "value1": 7,
                    "value_to_be_set": 1
                },
                "param_3": {
                    "bit_value2": 1,
                    "current_bits": 1,
                    "current_flags": 1,
                    "current_register_value": 1,
                    "current_value": 1,
                    "data1": 1,
                    "data2": 1,
                    "existing_value": 2,
                    "flag2": 1,
                    "input_param2": 1,
                    "input_value": 1,
                    "mask": 3,
                    "mask1": 2,
                    "or_value": 1,
                    "param_value2": 1,
                    "parameter3": 1,
                    "second_value": 2,
                    "value": 2,
                    "value2": 7
                },
                "param_4": {
                    "additional_bits": 1,
                    "bit_offset": 1,
                    "bit_value3": 1,
                    "bit_values": 1,
                    "bitmask": 1,
                    "control_bits": 1,
                    "data2": 1,
                    "data3": 1,
                    "flag": 2,
                    "flag3": 1,
                    "input_param3": 1,
                    "mask2": 2,
                    "modifier": 1,
                    "new_bits_to_set": 1,
                    "option_value": 1,
                    "param_value3": 1,
                    "parameter4": 1,
                    "shift_value": 2,
                    "sub_mask": 1,
                    "third_value": 2,
                    "value3": 7
                },
                "param_5": {
                    "result": 1
                },
                "param_6": {
                    "shifted_mask": 1
                },
                "param_7": {
                    "shifted_flag": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid update_register_values_00080d3e(int base_address,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(base_address + 4) =\n       value2 | *(uint *)(base_address + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "current_name": "update_register_values_00080d3e",
            "entrypoint": "0x00080d3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d3e": "update_register_values_00080d3e",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d58": {
            "additional_data": {
                "FUN_00080d58": {
                    "set_bit": 14,
                    "set_bit_at": 1,
                    "set_bit_at_index": 1,
                    "set_bit_at_offset": 1,
                    "set_bit_at_position": 4,
                    "set_bit_in_integer": 3,
                    "set_bit_in_memory": 1,
                    "set_bit_in_value": 2,
                    "set_bit_value": 4
                },
                "newVariable": {
                    "new_value": 1
                },
                "param_1": {
                    "array": 1,
                    "array_address": 1,
                    "base_address": 27,
                    "integer_address": 1,
                    "memory_address": 1
                },
                "param_2": {
                    "bit_index": 4,
                    "bit_position": 26,
                    "position": 1
                },
                "param_3": {
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080f0c"
            ],
            "code": "\nvoid set_bit_in_value_00080d58(int base_address,uint bit_position)\n\n{\n  *(int *)(base_address + 0x14) = 1 << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "set_bit_in_value_00080d58",
            "entrypoint": "0x00080d58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d58": "set_bit_in_value_00080d58",
                "param_1": "base_address",
                "param_2": "bit_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d62": {
            "additional_data": {
                "0x14": {
                    "offset": 1,
                    "value": 1
                },
                "0xffff": {
                    "default_value": 1
                },
                "FUN_00080d62": {
                    "initialize_data": 1,
                    "initialize_memory": 2,
                    "initialize_parameter_value": 1,
                    "initialize_value": 4,
                    "initialize_value_to_ffff": 1,
                    "initialize_value_to_max": 1,
                    "set_default_value": 12,
                    "set_error_code": 1,
                    "set_error_code_to_max": 1,
                    "set_initial_value": 2,
                    "set_memory_value": 2,
                    "set_param_to_max_value": 1,
                    "set_param_value": 1,
                    "set_param_value_to_max": 1
                },
                "param_1": {
                    "address": 1,
                    "array_ptr": 1,
                    "base_address": 9,
                    "data_address": 1,
                    "input": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_pointer": 3,
                    "memory_address": 6,
                    "obj_ptr": 1,
                    "object_address": 2,
                    "object_pointer": 1,
                    "param": 1,
                    "parameter": 1,
                    "structure_pointer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid set_default_value_00080d62(int base_address)\n\n{\n  *(undefined4 *)(base_address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "current_name": "set_default_value_00080d62",
            "entrypoint": "0x00080d62",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d62": "set_default_value_00080d62",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "additional_data": {
                "FUN_00080d6a": {
                    "set_param": 1,
                    "set_param_value": 12,
                    "set_parameter": 1,
                    "set_parameter_value": 10,
                    "store_param_value": 1,
                    "store_parameter": 1,
                    "store_parameter_at_offset": 1,
                    "store_parameter_value": 2,
                    "update_parameter_value": 1,
                    "write_to_memory": 1
                },
                "param_1": {
                    "base_address": 6,
                    "device_address": 1,
                    "function_pointer": 1,
                    "memory_address": 1,
                    "object_address": 21,
                    "object_pointer": 1
                },
                "param_2": {
                    "data": 1,
                    "new_value": 9,
                    "param_value": 4,
                    "parameter_value": 7,
                    "value": 7,
                    "value_to_store": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid set_param_value_00080d6a(int object_address,undefined4 new_value)\n\n{\n  *(undefined4 *)(object_address + 0x28) = new_value;\n  return;\n}\n\n",
            "current_name": "set_param_value_00080d6a",
            "entrypoint": "0x00080d6a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "object_address",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e80": {
            "additional_data": {
                "": {
                    "": 1
                },
                "FUN_00080e80": {
                    "calculate_return_value": 1,
                    "get_default_value": 3,
                    "get_description": 1,
                    "get_error_code": 1,
                    "get_result": 2,
                    "get_return_value": 3,
                    "get_zero_value": 1,
                    "initialize": 14,
                    "initialize_data": 1,
                    "initialize_function": 1,
                    "initialize_process": 1,
                    "initialize_program": 1,
                    "reset_value": 1
                },
                "original_parameter_name_1": {
                    "parameter1": 1
                },
                "original_variable_name_1": {
                    "counter": 1
                },
                "retVal": {
                    "result": 1
                },
                "undefined4": {
                    "description": 1,
                    "result": 2,
                    "void": 3
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid initialize_process_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "current_name": "initialize_process_00080e80",
            "entrypoint": "0x00080e80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e80": "initialize_process_00080e80",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e88": {
            "additional_data": {
                "DAT_20071208": {
                    "global_value": 3,
                    "global_variable": 1,
                    "previous_result": 1,
                    "previous_value": 1,
                    "stored_value": 1
                },
                "FUN_00080e88": {
                    "add_and_return_result": 1,
                    "add_param_to_global": 2,
                    "add_param_to_global_and_return_previous": 1,
                    "add_value_to_previous": 1,
                    "add_with_previous_value": 1,
                    "addition": 1,
                    "addition_function": 1,
                    "calculate_and_store_result": 1,
                    "calculate_new_value": 10,
                    "calculate_sum": 11,
                    "sum_and_update": 1
                },
                "iVar1": {
                    "initial_value": 2,
                    "old_value": 3,
                    "original_sum": 1,
                    "original_value": 2,
                    "previous_sum": 3,
                    "previous_value": 17,
                    "result": 1,
                    "return_value": 1
                },
                "param_1": {
                    "input": 7,
                    "input_number": 1,
                    "input_param": 1,
                    "input_value": 15,
                    "new_value": 1,
                    "num": 2,
                    "param": 1,
                    "value": 2,
                    "value_to_add": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008236c"
            ],
            "code": "\nint calculate_sum_00080e88(int input_value)\n\n{\n  int previous_value;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previous_value = DAT_20071208;\n  DAT_20071208 = input_value + DAT_20071208;\n  return previous_value;\n}\n\n",
            "current_name": "calculate_sum_00080e88",
            "entrypoint": "0x00080e88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e88": "calculate_sum_00080e88",
                "iVar1": "previous_value",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "additional_data": {
                "0xffffffff": {
                    "error_code": 1,
                    "error_value": 1,
                    "maximum_value": 2
                },
                "DAT_": {
                    "": 1
                },
                "DAT_00000000": {
                    "error_code": 1
                },
                "FUN_00080eaa": {
                    "get_default_value": 2,
                    "get_error_code": 13,
                    "get_max_value": 1,
                    "get_negative_one": 2,
                    "get_negative_value": 1,
                    "get_return_value": 5,
                    "get_value": 1,
                    "initialize_error_code": 2,
                    "initialize_system_status": 1,
                    "initialize_value": 1,
                    "set_return_value_to_max": 1
                },
                "PTR_": {
                    "": 1
                },
                "return": {
                    "error_code": 1,
                    "result": 1
                },
                "returnValue": {
                    "uint32": 1
                },
                "undefined4": {
                    "error_code": 1,
                    "int": 4,
                    "uint32": 3,
                    "uint32_t": 6,
                    "unsigned_int": 2,
                    "unsigned_integer": 1,
                    "void": 1
                },
                "var1": {
                    "error_code": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nuint32_t get_error_code_00080eaa(void)\n\n{\n  error_code 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_00080eaa",
            "entrypoint": "0x00080eaa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eaa": "get_error_code_00080eaa",
                "return": "error_code",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "additional_data": {
                "0x2000": {
                    "new_value": 1
                },
                "FUN_00080eb0": {
                    "initialize_memory": 16,
                    "set_memory_flag": 4,
                    "set_memory_flags": 1,
                    "set_memory_page_size": 3,
                    "set_memory_segment_size": 1,
                    "set_memory_size": 4,
                    "set_memory_to2000": 1,
                    "set_page_size": 1
                },
                "buffer": {
                    "updated_buffer": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 1,
                    "base_address": 1,
                    "flag_value": 1,
                    "handle": 1,
                    "initial_value": 3,
                    "param": 4,
                    "param1": 11,
                    "param_1": 3,
                    "param_address": 1,
                    "result": 3,
                    "unused": 1
                },
                "param_2": {
                    "address": 2,
                    "buffer": 3,
                    "buffer_address": 1,
                    "destination_ptr": 1,
                    "mem_address": 1,
                    "memory_address": 16,
                    "memory_pointer": 1,
                    "memory_segment_address": 1,
                    "param2": 3,
                    "ptr": 1,
                    "target_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00084494"
            ],
            "code": "\nundefined4 initialize_memory_00080eb0(undefined4 param1,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_00080eb0",
            "entrypoint": "0x00080eb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eb0": "initialize_memory_00080eb0",
                "param_1": "param1",
                "param_2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eba": {
            "additional_data": {
                "DAT_": {
                    "dat_": 1
                },
                "FUN_00080eba": {
                    "check_success": 1,
                    "get_constant_one_value": 1,
                    "get_default_value": 1,
                    "get_one": 6,
                    "get_return_code": 1,
                    "get_return_value": 9,
                    "get_status": 1,
                    "get_version_number": 1,
                    "initialize": 2,
                    "initialize_application": 1,
                    "initialize_flag": 4,
                    "initialize_program": 1,
                    "is_one": 1
                },
                "PTR_": {
                    "ptr_": 1
                },
                "VAR_1": {
                    "return_value": 1
                },
                "result": {
                    "return_value": 1
                },
                "return": {
                    "result": 3,
                    "status": 1,
                    "version_number": 1
                },
                "return_value": {
                    "result": 1,
                    "status": 1
                },
                "undefined4": {
                    "bool": 2,
                    "int": 6,
                    "uint32_t": 1,
                    "void": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000844bc"
            ],
            "code": "\nint get_return_value_00080eba(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_return_value_00080eba",
            "entrypoint": "0x00080eba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eba": "get_return_value_00080eba",
                "return": "result",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "additional_data": {
                "DAT_12345678": {
                    "result": 1
                },
                "FUN_00080ebe": {
                    "get_default_value": 3,
                    "get_return_value": 3,
                    "get_zero": 2,
                    "initialize": 14,
                    "initialize_application": 3,
                    "initialize_data": 1,
                    "initialize_device": 1,
                    "initialize_process": 1,
                    "initialize_program": 1,
                    "initialize_var": 1,
                    "return_zero": 1
                },
                "PTR_abcdefgh": {
                    "data": 1
                },
                "result": {
                    "return_value": 1
                },
                "return": {
                    "result": 1,
                    "status": 2
                },
                "undefined4": {
                    "int": 1,
                    "void": 10
                }
            },
            "called": [],
            "calling": [
                "FUN_000844e0"
            ],
            "code": "\nvoid initialize_application_00080ebe(void)\n\n{\n  status 0;\n}\n\n",
            "current_name": "initialize_application_00080ebe",
            "entrypoint": "0x00080ebe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ebe": "initialize_application_00080ebe",
                "return": "status",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "additional_data": {
                "FUN_00080ec2": {
                    "clear_error_flag": 1,
                    "get_default_value": 4,
                    "get_error_code": 1,
                    "get_return_value": 2,
                    "get_zero": 2,
                    "initialize": 14,
                    "initialize_data": 3,
                    "initialize_function": 1,
                    "initialize_system": 1,
                    "return_zero": 2
                },
                "return": {
                    "error_code": 1,
                    "result": 1,
                    "status": 1
                },
                "undefined4": {
                    "int": 2,
                    "status": 1,
                    "void": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_00084508"
            ],
            "code": "\nvoid initialize_data_00080ec2(void)\n\n{\n  error_code 0;\n}\n\n",
            "current_name": "initialize_data_00080ec2",
            "entrypoint": "0x00080ec2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ec2": "initialize_data_00080ec2",
                "return": "error_code",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "additional_data": {
                "FUN_00080ec8": {
                    "convert_byte_array_to_u_int": 1,
                    "convert_bytes_to_int": 1,
                    "convert_bytes_to_integer": 1,
                    "convert_bytes_to_u_int": 1,
                    "copy_bytes": 9,
                    "copy_bytes_to_array": 1,
                    "copy_bytes_to_destination": 1,
                    "copy_bytes_to_memory": 2,
                    "copy_bytes_to_target": 1,
                    "extract_data": 1,
                    "parse_and_set_bytes": 1,
                    "process_bytes": 1,
                    "process_data": 8,
                    "read_array": 1,
                    "update_bytes": 1
                },
                "iVar1": {
                    "i": 11,
                    "index": 20
                },
                "param_1": {
                    "arg1": 1,
                    "base_address": 1,
                    "buffer": 1,
                    "dest": 1,
                    "dest_buffer": 1,
                    "dst": 1,
                    "input_buffer": 1,
                    "input_param": 2,
                    "lst": 1,
                    "param": 1,
                    "param1": 11,
                    "param_1": 4,
                    "param_address": 1,
                    "source_address": 1,
                    "undefined": 1,
                    "undefined_param": 1,
                    "unused": 1
                },
                "param_2": {
                    "arg2": 1,
                    "array_offset": 1,
                    "byte_array": 3,
                    "byte_array_address": 1,
                    "data_address": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "input_data": 1,
                    "input_pointer": 1,
                    "param2": 3,
                    "source": 3,
                    "source_address": 5,
                    "source_array": 1,
                    "source_pointer": 1,
                    "src": 3,
                    "src_address": 1,
                    "src_buffer": 1,
                    "src_ptr": 1
                },
                "param_3": {
                    "arg3": 1,
                    "array_length": 3,
                    "byte_array_length": 2,
                    "byte_count": 1,
                    "count": 1,
                    "data_length": 3,
                    "data_size": 1,
                    "input_length": 1,
                    "length": 2,
                    "num_bytes": 8,
                    "number_of_bytes": 1,
                    "param3": 3,
                    "size": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_00084244"
            ],
            "code": "\n\n\nuint copy_bytes_to_memory_00080ec8(undefined4 param1,int source_address,uint num_bytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)num_bytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source_address + index);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "current_name": "copy_bytes_to_memory_00080ec8",
            "entrypoint": "0x00080ec8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ec8": "copy_bytes_to_memory_00080ec8",
                "iVar1": "index",
                "param_1": "param1",
                "param_2": "source_address",
                "param_3": "num_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eec": {
            "additional_data": {
                "FUN_00080eec": {
                    "exit_with_status": 28,
                    "exit_with_status_message": 1,
                    "print_exit_status": 1,
                    "print_status_and_loop": 1
                },
                "FUN_000817c8": {
                    "": 1,
                    "print_status": 2,
                    "print_status_message": 2,
                    "sub_function": 1
                },
                "block": {
                    "": 1
                },
                "do": {
                    "": 1
                },
                "iprintf": {
                    "": 1
                },
                "param_1": {
                    "status": 31
                },
                "param_2": {
                    "": 2,
                    "ignored": 1,
                    "not_used1": 1,
                    "param2": 2,
                    "unused": 4,
                    "unused1": 1,
                    "unused_param": 2,
                    "unused_param1": 1,
                    "unused_param2": 1
                },
                "param_3": {
                    "": 2,
                    "not_used2": 1,
                    "param3": 2,
                    "param_3": 1,
                    "unused": 7,
                    "unused1": 3,
                    "unused2": 1,
                    "unused_1": 2,
                    "unused_param": 1,
                    "unused_param1": 5,
                    "unused_param2": 3,
                    "unused_param3": 2,
                    "unused_param_3": 1
                },
                "param_4": {
                    "": 2,
                    "not_used3": 1,
                    "param4": 2,
                    "param_4": 1,
                    "unused": 7,
                    "unused2": 3,
                    "unused3": 1,
                    "unused_2": 2,
                    "unused_param": 1,
                    "unused_param2": 5,
                    "unused_param3": 3,
                    "unused_param4": 2,
                    "unused_param_4": 1
                },
                "while": {
                    "": 1
                }
            },
            "called": [
                "FUN_000817c8"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nvoid exit_with_status_message_00080eec(undefined4 status,undefined4 unused,undefined4 unused,undefined4 unused)\n\n{\n  iprintf(\"Exiting with status %d.\\n\",status,unused,unused,unused);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "exit_with_status_message_00080eec",
            "entrypoint": "0x00080eec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eec": "exit_with_status_message_00080eec",
                "param_1": "status",
                "param_2": "unused",
                "param_3": "unused",
                "param_4": "unused"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080efc": {
            "called": [],
            "calling": [
                "FUN_000841e4"
            ],
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080efc",
            "entrypoint": "0x00080efc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080efe": {
            "additional_data": {
                "0xffffffff": {
                    "default_value": 1
                },
                "DAT_": {
                    "dat_": 1
                },
                "FUN_00080efe": {
                    "clear_unsigned_int_value": 1,
                    "get_application_status": 1,
                    "get_default_value": 9,
                    "get_error_code": 10,
                    "get_error_value": 1,
                    "get_negative_one": 1,
                    "get_return_value": 3,
                    "initialize_default_return_value": 1,
                    "initialize_error_code": 1,
                    "initialize_return_value": 1,
                    "set_return_value": 1
                },
                "PTR_": {
                    "ptr_": 1
                },
                "ret_val": {
                    "default_value": 1
                },
                "return": {
                    "result": 1
                },
                "undefined4": {
                    "application_status": 1,
                    "error_code": 2,
                    "int": 1,
                    "uint32_t": 7,
                    "unsigned_int": 1,
                    "void": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008421c"
            ],
            "code": "\nuint32_t get_error_code_00080efe(void)\n\n{\n  result 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_00080efe",
            "entrypoint": "0x00080efe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe",
                "return": "result",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080f04": {
            "called": [
                "FUN_000816d8"
            ],
            "calling": [
                "FUN_000811e8"
            ],
            "code": "\nundefined4 GetTickCount(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "current_name": "FUN_00080f04",
            "entrypoint": "0x00080f04",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00080f08": {
            "called": [],
            "calling": [
                "FUN_000801e0",
                "FUN_00080250",
                "FUN_000815ec"
            ],
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080f08",
            "entrypoint": "0x00080f08",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080f0c": {
            "additional_data": {
                "Bvar5": {
                    "pin_mask": 1
                },
                "Bvar6": {
                    "pin_mode_register": 1
                },
                "FUN_00080a30": {
                    "configure_pin": 1,
                    "configure_pio_with_options": 1,
                    "pio_configure": 1
                },
                "FUN_00080aa8": {
                    "adc_disable_channel": 1,
                    "configure_adc": 1,
                    "disable_adc_channel": 1
                },
                "FUN_00080d58": {
                    "check_pin_state": 1,
                    "disable_adc_channel": 1,
                    "pmc_enable_periph_clk": 1
                },
                "FUN_00080f0c": {
                    "configure_adc": 5,
                    "configure_channel": 1,
                    "configure_digital_pin": 1,
                    "configure_gpio": 2,
                    "configure_io": 3,
                    "configure_io_pin": 1,
                    "configure_peripheral": 5,
                    "configure_pin": 9,
                    "configure_pin_mode": 1,
                    "configure_pio": 2,
                    "initialize_adc_channel": 1
                },
                "PIO_Configure": {
                    "configure_pin": 1,
                    "configure_pio": 10
                },
                "_DAT_400e0604": {
                    "mask_register_2": 1
                },
                "_DAT_400e0614": {
                    "pio_interrupt_disable_a": 1,
                    "pio_output_mask": 1,
                    "pio_periph_a_enable": 1,
                    "pio_reset2": 1,
                    "pioa_codr": 1,
                    "port_a_data_out": 1,
                    "register2": 1
                },
                "_DAT_400e0618": {
                    "mask_register_1": 1,
                    "pio_interrupt_enable_a": 1,
                    "pio_output_enabled": 1,
                    "pio_periph_a_status": 1,
                    "pio_reset1": 1,
                    "pioa_pdsr": 1,
                    "port_a_data": 1,
                    "register1": 1
                },
                "_DAT_400e0704": {
                    "mask_register_4": 1,
                    "pio_interrupt_disable_b": 1,
                    "pio_output_mask2": 1,
                    "pio_periph_b_enable": 1,
                    "pio_reset4": 1,
                    "piob_codr": 1,
                    "port_c_data_out": 1,
                    "register4": 1
                },
                "_DAT_400e0708": {
                    "mask_register_3": 1,
                    "pio_interrupt_enable_b": 1,
                    "pio_output_enabled2": 1,
                    "pio_periph_b_status": 1,
                    "pio_reset3": 1,
                    "piob_pdsr": 1,
                    "port_c_data": 1,
                    "register3": 1
                },
                "adc_disable_channel": {
                    "disable_adc_channel": 4
                },
                "bVar5": {
                    "adc_mode_low": 1,
                    "channel_mask": 1,
                    "channel_mode": 3,
                    "channel_type": 3,
                    "channel_value": 1,
                    "function": 1,
                    "lower_bits": 1,
                    "lower_nibble": 3,
                    "mode": 1,
                    "mode_flag": 1,
                    "mode_low": 1,
                    "mode_mask": 1,
                    "mode_type": 1,
                    "peripheral_type": 1,
                    "pin_function": 1,
                    "pin_mode": 7,
                    "pin_mode_bits": 1,
                    "pin_type": 1
                },
                "bVar6": {
                    "adc_mode_high": 1,
                    "channel_config": 1,
                    "channel_info2": 1,
                    "channel_mode": 1,
                    "channel_status": 1,
                    "combine_bits": 1,
                    "config": 1,
                    "config_flag": 1,
                    "current_pin_mode": 1,
                    "device_config": 1,
                    "mode_bits": 1,
                    "mode_high": 1,
                    "mode_value": 1,
                    "old_channel_mode": 1,
                    "old_channel_type": 1,
                    "peripheral_mode": 1,
                    "pin_and_mode": 1,
                    "pin_config": 5,
                    "pin_configuration": 1,
                    "pin_flags": 1,
                    "pin_info": 1,
                    "pin_mode_and_config": 1,
                    "pin_options": 1,
                    "pin_state": 1,
                    "reg_value": 1,
                    "temp_mode": 1
                },
                "iVar1": {
                    "result": 31
                },
                "iVar7": {
                    "config_index": 7,
                    "config_offset": 1,
                    "index": 3,
                    "offset": 6,
                    "pin_config_index": 2,
                    "pin_config_offset": 1,
                    "pin_configuration_index": 1,
                    "pin_index": 1,
                    "pin_index_offset": 1,
                    "pin_offset": 1,
                    "pio_config": 1,
                    "pio_index": 1,
                    "pmc_config_index": 1,
                    "temp_var1": 1,
                    "volatile_var1": 1
                },
                "iVar8": {
                    "address": 2,
                    "config": 3,
                    "config_address": 1,
                    "config_pointer": 1,
                    "config_value": 2,
                    "pin": 1,
                    "pin_config": 4,
                    "pin_config_address": 2,
                    "pin_config_data": 1,
                    "pin_config_value": 1,
                    "pin_configuration": 1,
                    "pin_group": 1,
                    "pin_offset": 2,
                    "pin_register": 1,
                    "pio": 1,
                    "pio_address": 1,
                    "pio_config": 2,
                    "pio_configure_register1_content": 1,
                    "pio_settings": 1,
                    "temp_var2": 1
                },
                "param_1": {
                    "channel": 13,
                    "channel_index": 2,
                    "channel_number": 1,
                    "device_id": 1,
                    "pin": 2,
                    "pin_index": 7,
                    "pin_number": 5
                },
                "param_2": {
                    "channel_id": 1,
                    "config_param": 1,
                    "configuration": 1,
                    "mode": 26,
                    "option": 1,
                    "pin_mode": 1
                },
                "pmc_enable_periph_clk": {
                    "enable_clock": 2,
                    "enable_peripheral_clock": 9
                },
                "uDAT_20070e1c": {
                    "peripheral_config": 1
                },
                "uVar2": {
                    "adc_value": 1,
                    "channel_index": 1,
                    "channel_offset": 1,
                    "config": 2,
                    "int_flag": 1,
                    "mask": 1,
                    "num_pins": 1,
                    "periph_val": 1,
                    "pin": 1,
                    "pin_config_bit": 1,
                    "pin_flags": 1,
                    "pin_mask": 4,
                    "pin_number": 5,
                    "pin_status": 1,
                    "pin_value": 1,
                    "pmc_enable_mask": 1,
                    "temp": 2,
                    "temp_var3": 1,
                    "value": 1
                },
                "uVar3": {
                    "adc_mode": 1,
                    "config": 2,
                    "config_flag": 1,
                    "config_option": 1,
                    "config_type": 1,
                    "config_val": 1,
                    "config_value": 3,
                    "configure_mode": 2,
                    "configure_param": 1,
                    "configure_result": 1,
                    "configure_value": 1,
                    "io_function": 1,
                    "num_configs": 2,
                    "pin_config": 4,
                    "pin_config_value": 1,
                    "pin_function": 2,
                    "pin_type": 1,
                    "pio_fifo_threshold": 1,
                    "pio_function": 1,
                    "type": 1
                },
                "uVar4": {
                    "bit": 1,
                    "bit_mask": 4,
                    "check": 1,
                    "current_pin_mask": 1,
                    "existing_config": 1,
                    "existing_mask": 1,
                    "flag": 1,
                    "mask": 7,
                    "mask_val": 1,
                    "original_pin_state": 1,
                    "pin_bit_mask": 1,
                    "pin_config_mask": 1,
                    "pin_config_value": 1,
                    "pin_mask": 3,
                    "pio_disable_mask": 1,
                    "temp_var": 1,
                    "temp_var4": 1
                }
            },
            "called": [
                "FUN_00080aa8",
                "FUN_00080a30",
                "FUN_00080d58"
            ],
            "calling": [
                "FUN_000806a0",
                "FUN_00081014",
                "FUN_000801e0"
            ],
            "code": "\n\n\nint configure_digital_pin_00080f0c(int channel,int mode)\n\n{\n  int result;\n  uint pin_number;\n  undefined4 pin_config;\n  uint mask;\n  byte pin_mode;\n  byte pin_config;\n  int config_index;\n  int pin_config;\n  \n  result = channel;\n  if ((&DAT_00084b50)[channel * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[channel] & 0xf) == 4) {\n      result = disable_adc_channel(0x400c0000,(&DAT_00084b5d)[channel * 0x1c]);\n    }\n    pin_config = (&DAT_20070e1c)[channel];\n    pin_mode = pin_config & 0xf;\n    if ((pin_mode < 3) && (pin_config != 0)) {\n      if (pin_mode == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (pin_mode == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (pin_mode == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (mode != 1) {\nLAB_00080f68:\n      if (mode == 0) {\n        result = channel * 0x1c;\n        enable_peripheral_clock(*(undefined4 *)(&DAT_00084b4c + result));\n        result = configure_pio(*(undefined4 *)(&DAT_00084b44 + result),3,\n                              *(undefined4 *)(&DAT_00084b48 + result),0);\n        pin_config = (&DAT_20070e1c)[channel] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = channel * 0x1c;\n        enable_peripheral_clock(*(undefined4 *)(&DAT_00084b4c + result));\n        result = configure_pio(*(undefined4 *)(&DAT_00084b44 + result),3,\n                              *(undefined4 *)(&DAT_00084b48 + result),1);\n        pin_config = (&DAT_20070e1c)[channel] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[channel] = pin_config;\n      return result;\n    }\n    config_index = channel * 0x1c;\n    pin_config = *(int *)(&DAT_00084b44 + config_index);\n    if (pin_config >> 4 == 0) {\n      pin_config = 4;\n    }\n    else {\n      pin_config = 5;\n    }\n    result = configure_pio(pin_config,pin_config,*(undefined4 *)(&DAT_00084b48 + config_index),\n                          *(undefined4 *)(&DAT_00084b54 + config_index));\n    (&DAT_20070e1c)[channel] = (&DAT_20070e1c)[channel] & 0xf0 | 3;\n    if (*(int *)(pin_config + 0x18) == -1) {\n      pin_number = *(uint *)(&DAT_00084b4c + config_index);\n      if (0x2c < pin_number) {\n        return 1;\n      }\n      if (pin_number < 0x20) {\n        pin_number = 1 << (pin_number & 0xff);\n        mask = _DAT_400e0618 & pin_number;\n        if (mask == pin_number) {\n          _DAT_400e0614 = mask;\n        }\n      }\n      else {\n        pin_number = 1 << (pin_number - 0x20 & 0xff);\n        mask = _DAT_400e0708 & pin_number;\n        if (mask == pin_number) {\n          _DAT_400e0704 = mask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "configure_digital_pin_00080f0c",
            "entrypoint": "0x00080f0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080f0c": "configure_digital_pin_00080f0c",
                "PIO_Configure": "configure_pio",
                "adc_disable_channel": "disable_adc_channel",
                "bVar5": "pin_mode",
                "bVar6": "pin_config",
                "iVar1": "result",
                "iVar7": "config_index",
                "iVar8": "pin_config",
                "param_1": "channel",
                "param_2": "mode",
                "pmc_enable_periph_clk": "enable_peripheral_clock",
                "uVar2": "pin_number",
                "uVar3": "pin_config",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081014": {
            "additional_data": {
                "FIN_00080a0a": {
                    "set_gpio_pin_mode": 1
                },
                "FIN_00080a94": {
                    "set_gpio_output": 1
                },
                "FIN_00080f0c": {
                    "get_gpio_output_data_status": 1
                },
                "FUN_00080a0a": {
                    "configure_gpio_pin": 1,
                    "configure_output": 1,
                    "configure_pin": 1,
                    "configure_pin_mode": 2,
                    "set_function_and_mode": 1,
                    "set_pin_mode": 12,
                    "set_pin_mode_helper": 4,
                    "update_output_data_status": 1,
                    "update_pin_mode_helper": 1
                },
                "FUN_00080a94": {
                    "pio_get_output_data_status": 1,
                    "pio_set_output": 21,
                    "set_gpio_output": 1,
                    "set_output": 1
                },
                "FUN_00080f0c": {
                    "get_output_data_status": 2,
                    "pio_get_output_data_status": 21,
                    "pio_set_output": 1
                },
                "FUN_00081014": {
                    "configure_gpio": 1,
                    "configure_pin": 4,
                    "configure_pin_and_set_output": 1,
                    "configure_pin_mode": 1,
                    "initialize_pin_mode": 1,
                    "set_pin_mode": 5,
                    "set_pin_mode_and_output": 3,
                    "set_pin_mode_and_update_output": 2,
                    "set_pin_mode_if_flag_set": 1,
                    "set_pin_mode_if_supported": 1,
                    "update_gpio_output": 1,
                    "update_pin_mode": 9,
                    "update_pin_state": 1
                },
                "PIO_GetOutputDataStatus": {
                    "get_output_data_status": 2
                },
                "PIO_SetOutput": {
                    "set_output": 2
                },
                "iVar1": {
                    "data_status": 1,
                    "output_data_status": 15,
                    "output_status": 14,
                    "status": 1
                },
                "iVar3": {
                    "gpio_pin": 1,
                    "gpio_port": 1,
                    "io_port": 1,
                    "output_pin": 3,
                    "output_port": 1,
                    "pi_optr": 1,
                    "pin_config_addr": 1,
                    "pin_control": 1,
                    "pin_controller_address": 1,
                    "pin_data": 4,
                    "pin_descriptor": 1,
                    "pin_mode_address": 1,
                    "pin_mode_ptr": 1,
                    "pin_mode_status": 2,
                    "pin_pointer": 1,
                    "pin_ptr": 1,
                    "pio": 3,
                    "pio_base": 1,
                    "pio_handle": 1,
                    "pio_instance": 1,
                    "pio_reg": 1,
                    "port": 1,
                    "port_number": 1
                },
                "param_1": {
                    "pin": 3,
                    "pin_index": 8,
                    "pin_number": 19,
                    "pio": 1
                },
                "param_2": {
                    "input_value": 1,
                    "mode": 4,
                    "new_state": 1,
                    "output_level": 2,
                    "output_mask": 1,
                    "output_state": 1,
                    "output_value": 6,
                    "param": 1,
                    "param2_value": 1,
                    "param_2": 1,
                    "param_value": 1,
                    "pin_mode": 1,
                    "pin_state": 1,
                    "pin_value": 3,
                    "state": 3,
                    "value": 3
                },
                "param_3": {
                    "config": 1,
                    "extra_param": 1,
                    "mode": 2,
                    "param": 12,
                    "param3": 3,
                    "param3_value": 1,
                    "param_3": 2,
                    "param_value": 4,
                    "pin_mode": 1,
                    "pin_mode_value": 1,
                    "undefined_param": 1,
                    "unknown": 1,
                    "unknown_param": 1
                },
                "param_4": {
                    "unused_param4": 1
                },
                "param_5": {
                    "unused_param5": 1
                },
                "pinMode": {
                    "set_pin_mode": 2
                },
                "uVar2": {
                    "gpio_value": 1,
                    "output_data": 21,
                    "output_value": 2,
                    "output_value_status": 1,
                    "pin_config": 3,
                    "pin_configuration": 1,
                    "pin_mode_variable": 1,
                    "pio_value": 1
                }
            },
            "called": [
                "FUN_00080a0a",
                "FUN_00080f0c",
                "FUN_00080a94"
            ],
            "calling": [
                "FUN_0008044c",
                "FUN_00080250",
                "FUN_00080774"
            ],
            "code": "\nvoid set_pin_mode_and_update_output_00081014(int pin_number,int output_value,undefined4 param)\n\n{\n  int output_data_status;\n  undefined4 output_data;\n  int pin_data;\n  \n  if ((&DAT_00084b50)[pin_number * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[pin_number] & 0xf) == 5) {\n      set_pin_mode(pin_number,1,param,5,pin_number,output_value,param);\n    }\n    (&DAT_20070e1c)[pin_number] = (&DAT_20070e1c)[pin_number] & 0xf | (byte)(output_value << 4);\n    pin_data = *(int *)(&DAT_00084b44 + pin_number * 0x1c);\n    output_data = *(undefined4 *)(&DAT_00084b48 + pin_number * 0x1c);\n    output_data_status = get_output_data_status(pin_data,output_data);\n    if (output_data_status == 0) {\n      if (output_value != 0) {\n        *(undefined4 *)(pin_data + 100) = output_data;\n        return;\n      }\n      *(undefined4 *)(pin_data + 0x60) = output_data;\n      return;\n    }\n    set_output(pin_data,output_data,output_value,0,1);\n  }\n  return;\n}\n\n",
            "current_name": "set_pin_mode_and_update_output_00081014",
            "entrypoint": "0x00081014",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081014": "set_pin_mode_and_update_output_00081014",
                "PIO_GetOutputDataStatus": "get_output_data_status",
                "PIO_SetOutput": "set_output",
                "iVar1": "output_data_status",
                "iVar3": "pin_data",
                "param_1": "pin_number",
                "param_2": "output_value",
                "param_3": "param",
                "pinMode": "set_pin_mode",
                "uVar2": "output_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810a6": {
            "additional_data": {
                "FUN_000810a6": {
                    "execute_function": 2,
                    "execute_function_with_parameter": 1,
                    "extract_and_call_sub_function": 1,
                    "extract_and_process_data": 1,
                    "extract_and_process_string": 1,
                    "process_and_call_subfunction": 1,
                    "process_data": 5,
                    "process_function": 1,
                    "process_param": 1,
                    "reverse_and_call": 1,
                    "reverse_string": 4
                },
                "FUN_00082688": {
                    "calculate_hash": 1,
                    "calculate_length": 1,
                    "calculate_something": 1,
                    "calculate_value": 1,
                    "count_characters": 1,
                    "reverse_bits": 1
                },
                "param_1": {
                    "array": 5,
                    "array_pointer": 6,
                    "array_ptr": 1,
                    "data_array": 1,
                    "data_pointer": 4,
                    "data_ptr": 1,
                    "function_list": 1,
                    "function_pointer": 2,
                    "input_array": 4,
                    "list_pointer": 1,
                    "param_array": 1,
                    "ptr_to_sub_function": 1,
                    "str_ptr": 1,
                    "string_pointer": 1,
                    "string_ptr": 1
                },
                "param_2": {
                    "data": 2,
                    "data_string": 1,
                    "data_to_process": 1,
                    "input": 2,
                    "input_length": 2,
                    "input_size": 1,
                    "input_string": 1,
                    "length": 4,
                    "param_length": 1,
                    "param_size": 1,
                    "size": 1,
                    "string": 8,
                    "string_length": 2,
                    "string_param": 1,
                    "string_pointer": 2,
                    "text": 1
                },
                "param_3": {
                    "arg1": 2,
                    "arg3": 2,
                    "arg_3": 1,
                    "len": 1,
                    "len1": 1,
                    "length": 5,
                    "length1": 1,
                    "length_param": 3,
                    "param1": 1,
                    "param3": 6,
                    "param_3": 2,
                    "param_value1": 1,
                    "size_of_param": 1,
                    "unknown_param1": 1,
                    "unused_param": 1,
                    "unused_param1": 1,
                    "var3": 1
                },
                "param_4": {
                    "additional_info": 1,
                    "additional_param": 1,
                    "arg2": 2,
                    "arg4": 2,
                    "arg_4": 1,
                    "callback": 2,
                    "callback_function": 1,
                    "callback_param": 1,
                    "code_ptr": 1,
                    "extra_info": 1,
                    "extra_param": 2,
                    "length2": 1,
                    "param2": 1,
                    "param4": 7,
                    "param_4": 2,
                    "param_value2": 1,
                    "unknown_param2": 1,
                    "unused_param": 1,
                    "unused_param2": 1,
                    "var4": 1
                },
                "uVar1": {
                    "data_length": 1,
                    "input_length": 1,
                    "length": 3,
                    "str_len": 1,
                    "str_len_result": 1,
                    "str_length": 1,
                    "string_length": 16,
                    "text_len": 1
                }
            },
            "called": [
                "FUN_00082688"
            ],
            "calling": [
                "FUN_000810d8",
                "FUN_000810fc",
                "FUN_000810c4",
                "FUN_000810e8"
            ],
            "code": "\nvoid extract_and_process_data_000810a6(int *array_pointer,int string,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 string_length;\n  \n  if (string != 0) {\n    string_length = strlen(string);\n    (**(code **)(*array_pointer + 4))(array_pointer,string,string_length,*(code **)(*array_pointer + 4),param4);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "extract_and_process_data_000810a6",
            "entrypoint": "0x000810a6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810a6": "extract_and_process_data_000810a6",
                "param_1": "array_pointer",
                "param_2": "string",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810c4": {
            "additional_data": {
                "FUN_000810c4": {
                    "extract_and_process_data": 4,
                    "process_and_extract_data": 5,
                    "process_data": 14,
                    "process_data_and_extract": 1,
                    "process_data_extraction": 3,
                    "process_extracted_data": 4
                },
                "array_pointer": {
                    "array": 3,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "data_array": 7,
                    "data_pointer": 1
                },
                "extract_and_process_data_000810a6": {
                    "extract_and_process_data": 18,
                    "parse_data": 1,
                    "process_data": 4
                },
                "param1": {
                    "array_pointer": 1
                },
                "param2": {
                    "string": 1
                },
                "param3": {
                    "param3": 4,
                    "parameter3": 8,
                    "parameter_3": 4
                },
                "param4": {
                    "param4": 4,
                    "parameter4": 8,
                    "parameter_4": 4
                },
                "string": {
                    "data": 2,
                    "data_array": 1,
                    "data_string": 4,
                    "input_string": 3,
                    "str": 1,
                    "string_data": 2,
                    "text": 1,
                    "text_string": 1
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nvoid process_data_and_extract_000810c4(void)\n\n{\n  extract_and_process_data();\n  return;\n}\n\n",
            "current_name": "process_data_and_extract_000810c4",
            "entrypoint": "0x000810c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810c4": "process_data_and_extract_000810c4",
                "extract_and_process_data_000810a6": "extract_and_process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810cc": {
            "additional_data": {
                "FUN_000810cc": {
                    "execute_callback": 2,
                    "execute_code": 8,
                    "execute_function": 21
                },
                "param_1": {
                    "callback": 2,
                    "function_pointer": 26,
                    "function_ptr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008113a"
            ],
            "code": "\nvoid execute_function_000810cc(undefined4 *function_pointer)\n\n{\n  (**(code **)*function_pointer)();\n  return;\n}\n\n",
            "current_name": "execute_function_000810cc",
            "entrypoint": "0x000810cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "param_1": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810d8": {
            "additional_data": {
                "FUN_000810d8": {
                    "process_and_extract_data": 2,
                    "process_data": 23,
                    "process_data_and_return": 1,
                    "process_data_extraction": 2,
                    "process_extracted_data": 3
                },
                "extract_and_process_data_000810a6": {
                    "extract_and_process_data": 5
                },
                "param_1": {
                    "array": 2,
                    "array_pointer": 26,
                    "array_ptr": 1,
                    "input_array": 1
                },
                "param_2": {
                    "param2": 2,
                    "param_2": 1,
                    "string": 8
                },
                "param_3": {
                    "param3": 27,
                    "param_3": 3
                },
                "param_4": {
                    "param4": 27,
                    "param_4": 3
                },
                "string": {
                    "string": 1
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "code": "\nvoid process_extracted_data_000810d8(undefined4 array_pointer,undefined4 string,undefined4 param3,undefined4 param4)\n\n{\n  extract_and_process_data(array_pointer,&DAT_00085635,param3,param4,param4);\n  return;\n}\n\n",
            "current_name": "process_extracted_data_000810d8",
            "entrypoint": "0x000810d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810d8": "process_extracted_data_000810d8",
                "extract_and_process_data_000810a6": "extract_and_process_data",
                "param_1": "array_pointer",
                "param_2": "string",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810e8": {
            "additional_data": {
                "FUN_000810e8": {
                    "calculate_and_sum_data": 1,
                    "calculate_combined_result": 1,
                    "calculate_data_sum": 3,
                    "calculate_processed_data": 1,
                    "calculate_sum": 5,
                    "calculate_sum_of_extracted_data": 1,
                    "calculate_sum_of_processed_data": 2,
                    "calculate_total": 11,
                    "combine_data_and_process": 1,
                    "process_data_and_extract": 1,
                    "sum_data_and_process": 2,
                    "sum_of_processed_data": 1,
                    "summarize_data": 1
                },
                "extract_and_process_data_000810a6": {
                    "extract_and_process_data": 3
                },
                "iVar1": {
                    "data_result": 1,
                    "extracted_data": 24,
                    "extracted_data_result": 3,
                    "extracted_data_sum": 2,
                    "processed_data_1": 1
                },
                "iVar2": {
                    "processed_data": 23,
                    "processed_data_2": 1,
                    "processed_data_result": 4,
                    "processed_data_sum": 3
                },
                "param_1": {
                    "array_pointer": 15,
                    "input": 3,
                    "input_data": 5,
                    "input_param": 3,
                    "input_parameter": 2,
                    "input_value": 2,
                    "input_variable": 1
                },
                "process_extracted_data_000810d8": {
                    "process_extracted_data": 3
                }
            },
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_sum_of_processed_data_000810e8(undefined4 array_pointer)\n\n{\n  int extracted_data;\n  int processed_data;\n  \n  extracted_data = extract_and_process_data();\n  processed_data = process_extracted_data(array_pointer);\n  return processed_data + extracted_data;\n}\n\n",
            "current_name": "calculate_sum_of_processed_data_000810e8",
            "entrypoint": "0x000810e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810e8": "calculate_sum_of_processed_data_000810e8",
                "extract_and_process_data_000810a6": "extract_and_process_data",
                "iVar1": "extracted_data",
                "iVar2": "processed_data",
                "param_1": "array_pointer",
                "process_extracted_data_000810d8": "process_extracted_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810fc": {
            "additional_data": {
                "FUN_000810fc": {
                    "convert_and_extract_data": 1,
                    "convert_and_process_data": 1,
                    "convert_and_process_number": 1,
                    "convert_base": 2,
                    "convert_decimal_to_base": 5,
                    "convert_decimal_to_base_n": 2,
                    "convert_decimal_to_string": 1,
                    "convert_number_base": 1,
                    "convert_number_to_base": 4,
                    "convert_number_to_string": 4,
                    "convert_to_base": 4,
                    "convert_to_base_n": 1,
                    "extract_and_convert_to_base": 1,
                    "extract_and_process_string": 1,
                    "reverse_and_process": 1,
                    "reverse_and_process_data": 1
                },
                "cVar4": {
                    "char_value": 1,
                    "character": 1,
                    "converted_char": 2,
                    "converted_character": 1,
                    "converted_digit": 1,
                    "current_digit": 1,
                    "digit": 4
                },
                "local_15": {
                    "converted_digits_array": 1,
                    "converted_number": 16,
                    "converted_string": 3,
                    "converted_value": 2,
                    "digits": 1,
                    "digits_buffer": 1,
                    "output_buffer": 1,
                    "output_string": 1,
                    "result": 2,
                    "string_buffer": 1
                },
                "param_1": {
                    "array": 1,
                    "array_pointer": 19,
                    "input": 1,
                    "input_array": 4,
                    "input_buffer": 1,
                    "output_array": 3,
                    "output_value": 1,
                    "source_data": 1
                },
                "param_2": {
                    "decimal_number": 9,
                    "decimal_value": 2,
                    "input_length": 1,
                    "input_number": 3,
                    "input_value": 1,
                    "number": 13,
                    "number_to_convert": 1,
                    "value": 1
                },
                "param_3": {
                    "base": 30,
                    "base_number": 1
                },
                "pcVar1": {
                    "current_char": 4,
                    "current_character": 1,
                    "current_position": 1,
                    "output": 1,
                    "output_ptr": 1,
                    "result": 1,
                    "result_ptr": 1,
                    "resulting_string": 1
                },
                "pcVar3": {
                    "current_char": 1,
                    "current_digit_ptr": 1,
                    "current_position": 2,
                    "current_ptr": 1,
                    "previous_char": 4,
                    "previous_character": 1,
                    "previous_position": 1
                },
                "uVar2": {
                    "quotient": 11
                },
                "uVar5": {
                    "remainder": 11
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_0008113a"
            ],
            "code": "\nvoid convert_decimal_to_base_n_000810fc(undefined4 array_pointer,uint number,uint base)\n\n{\n  char *current_char;\n  uint quotient;\n  char *previous_char;\n  char digit;\n  uint remainder;\n  char converted_number [5];\n  \n  converted_number[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  current_char = converted_number;\n  do {\n    previous_char = current_char;\n    quotient = number / base;\n    remainder = number - base * quotient & 0xff;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *previous_char = digit;\n    number = quotient;\n    current_char = previous_char + -1;\n  } while (quotient != 0);\n  extract_and_process_data_000810a6(array_pointer,previous_char);\n  return;\n}\n\n",
            "current_name": "convert_decimal_to_base_n_000810fc",
            "entrypoint": "0x000810fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810fc": "convert_decimal_to_base_n_000810fc",
                "cVar4": "digit",
                "local_15": "converted_number",
                "param_1": "array_pointer",
                "param_2": "number",
                "param_3": "base",
                "pcVar1": "current_char",
                "pcVar3": "previous_char",
                "uVar2": "quotient",
                "uVar5": "remainder"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008113a": {
            "additional_data": {
                "FUN_0008113a": {
                    "convert_number": 1,
                    "format_number": 1,
                    "print_formatted_number": 23,
                    "print_number_or_execute_function": 1,
                    "print_number_with_base": 4,
                    "print_number_with_options": 1
                },
                "execute_function_000810cc": {
                    "execute_function": 2
                },
                "iVar1": {
                    "function_result": 1,
                    "result": 21,
                    "result_code": 1,
                    "return_value": 6
                },
                "iVar2": {
                    "additional_result": 1,
                    "additional_return_value": 1,
                    "execute_ret_val": 1,
                    "minus_sign_printed": 1,
                    "neg_offset": 1,
                    "negative_indicator": 1,
                    "negative_result": 3,
                    "num_digits": 1,
                    "offset": 1,
                    "print_result": 15,
                    "print_return_value": 1,
                    "print_value": 1,
                    "temp_result": 1
                },
                "param_1": {
                    "function": 1,
                    "function_array": 1,
                    "function_pointer": 5,
                    "function_ptr": 1,
                    "output": 1,
                    "output_buffer": 15,
                    "output_ptr": 1,
                    "output_stream": 2,
                    "print_function_pointer": 2,
                    "print_function_ptr": 1
                },
                "param_2": {
                    "input_number": 1,
                    "num_to_print": 1,
                    "number": 28,
                    "value": 1
                },
                "param_3": {
                    "base": 30,
                    "number_base": 1
                },
                "param_4": {
                    "extra_arg": 1,
                    "extra_param": 2,
                    "flag": 1,
                    "flags": 3,
                    "format": 2,
                    "format_flag": 3,
                    "format_flags": 2,
                    "format_option": 3,
                    "format_specifier": 1,
                    "option": 1,
                    "options": 1,
                    "param4": 1,
                    "param_4": 7,
                    "undefined": 1,
                    "undefined_arg": 1,
                    "unknown_param": 1
                },
                "printNumber": {
                    "convert_number_to_string": 1
                }
            },
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "calling": [
                "FUN_00081176",
                "FUN_0008117a"
            ],
            "code": "\nint print_formatted_number_0008113a(undefined4 *output_buffer,uint number,uint base,undefined4 param_4)\n\n{\n  int result;\n  int print_result;\n  \n  if (base == 0) {\n    result = (**(code **)*output_buffer)(output_buffer,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = execute_function(output_buffer,0x2d);\n      print_result = convert_number_to_string(output_buffer,-number,10);\n      return print_result + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_number_to_string(output_buffer,number,base,param_4);\n  return result;\n}\n\n",
            "current_name": "print_formatted_number_0008113a",
            "entrypoint": "0x0008113a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008113a": "print_formatted_number_0008113a",
                "execute_function_000810cc": "execute_function",
                "iVar1": "result",
                "iVar2": "print_result",
                "param_1": "output_buffer",
                "param_2": "number",
                "param_3": "base",
                "printNumber": "convert_number_to_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081176": {
            "called": [
                "FUN_0008113a"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint thunk_print_formatted_number_0008113a(undefined4 *param_1,uint param_2,uint param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  if (param_3 == 0) {\n    iVar1 = (**(code **)*param_1)(param_1,param_2 & 0xff);\n    return iVar1;\n  }\n  if (param_3 == 10) {\n    param_3 = 10;\n    if ((int)param_2 < 0) {\n      iVar1 = execute_function_000810cc(param_1,0x2d);\n      iVar2 = printNumber(param_1,-param_2,10);\n      return iVar2 + iVar1;\n    }\n  }\n  else {\n    param_3 = param_3 & 0xff;\n  }\n  iVar1 = printNumber(param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n",
            "current_name": "FUN_00081176",
            "entrypoint": "0x00081176",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_0008117a": {
            "additional_data": {
                "FUN_0008117a": {
                    "add_formatted_number_and_data": 1,
                    "add_processed_data_and_formatted_number": 1,
                    "add_processed_data_with_formatted_number": 1,
                    "calculate_sum": 2,
                    "calculate_sum_and_print_formatted_number": 1,
                    "calculate_sum_of_formatted_number_and_extracted_data": 3,
                    "calculate_sum_of_numbers": 3,
                    "calculate_sum_of_printed_number_and_extracted_data": 2,
                    "calculate_sum_of_printed_numbers": 1,
                    "calculate_sum_of_processed_data": 3,
                    "calculate_total": 9,
                    "calculate_total_sum": 4
                },
                "iVar1": {
                    "formatted_number": 30,
                    "formatted_number_result": 1
                },
                "iVar2": {
                    "extracted_data": 2,
                    "extracted_data_result": 4,
                    "processed_data": 24,
                    "result": 1
                },
                "param_1": {
                    "array_pointer": 21,
                    "array_size": 1,
                    "data_array": 1,
                    "input": 2,
                    "input_data": 4,
                    "input_value": 2
                },
                "print_formatted_number_0008113a": {
                    "format_number": 6,
                    "generate_formatted_number": 1,
                    "get_formatted_number": 2,
                    "print_formatted_number": 9,
                    "print_number": 2
                },
                "process_extracted_data_000810d8": {
                    "process_data": 12,
                    "process_extracted_data": 8
                }
            },
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_total_sum_0008117a(undefined4 array_pointer)\n\n{\n  int formatted_number;\n  int processed_data;\n  \n  formatted_number = print_formatted_number();\n  processed_data = process_data(array_pointer);\n  return processed_data + formatted_number;\n}\n\n",
            "current_name": "calculate_total_sum_0008117a",
            "entrypoint": "0x0008117a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008117a": "calculate_total_sum_0008117a",
                "iVar1": "formatted_number",
                "iVar2": "processed_data",
                "param_1": "array_pointer",
                "print_formatted_number_0008113a": "print_formatted_number",
                "process_extracted_data_000810d8": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081190": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "elf32_rel_array": 1,
                    "rel_array": 8,
                    "relocation_array": 6,
                    "relocation_data_array": 1,
                    "relocation_entries": 6,
                    "relocation_info_array": 1,
                    "relocation_table": 4,
                    "relocations": 1
                },
                "FUN_00081190": {
                    "call_function_if_index_is_zero": 1,
                    "check_and_call_function": 1,
                    "decrement_and_execute_if_zero": 1,
                    "execute_callback_if_info_not_max": 1,
                    "execute_callback_if_r_info_is_zero": 1,
                    "execute_function_if_condition_met": 3,
                    "execute_function_if_info_is_zero": 1,
                    "execute_function_if_r_info_is_zero": 1,
                    "execute_if_condition_met": 4,
                    "execute_if_index_decreases_to_zero": 1,
                    "execute_if_index_is_zero": 1,
                    "execute_if_last_relocation": 1,
                    "execute_if_r_info_decreased_to_zero": 1,
                    "execute_if_r_info_equal_zero": 1,
                    "execute_if_r_info_is_zero": 4,
                    "execute_if_r_info_not_minus_one": 1,
                    "execute_if_r_info_zero": 1,
                    "execute_if_rel_offset_zero": 1,
                    "execute_if_relocation_complete": 1,
                    "execute_if_zeroth_rel_has_value_minus_one": 1,
                    "execute_relocated_function": 1,
                    "perform_action": 1,
                    "run_if_relocation_exists": 1
                },
                "code": {
                    "function_to_execute": 2
                },
                "r_info": {
                    "info": 11,
                    "info_value": 1,
                    "rel_info": 1,
                    "relocation_info": 10
                },
                "r_offset": {
                    "offset": 11,
                    "offset_value": 1,
                    "rel_offset": 1,
                    "relative_offset": 1,
                    "relocation_offset": 9
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_function_if_condition_met_00081190(void)\n\n{\n  if ((rel_array[6].info != 0xffffffff) &&\n     (rel_array[6].info = rel_array[6].info - 1,\n     rel_array[6].info == 0)) {\n    (*(function_to_execute *)((int)&rel_array[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_if_condition_met_00081190",
            "entrypoint": "0x00081190",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081190": "execute_function_if_condition_met_00081190",
                "code": "function_to_execute",
                "r_info": "info",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811b0": {
            "additional_data": {
                "DAT_": {
                    "": 1,
                    "data": 1,
                    "data_": 1
                },
                "DAT_XXX": {
                    "new_data": 1
                },
                "FUN_000811b0": {
                    "clear_buffer": 1,
                    "clear_memory": 3,
                    "initialize_buffer": 7,
                    "initialize_memory": 19
                },
                "PTR_": {
                    "": 1,
                    "pointer_": 1,
                    "ptr": 1
                },
                "PTR_FUN_00081f00": {
                    "set_memory_values": 1
                },
                "PTR_XXX": {
                    "new_pointer": 1
                },
                "memset": {
                    "clear_buffer": 1,
                    "clear_memory": 2,
                    "initialize": 1,
                    "set_buffer_to_zero": 1
                },
                "originalVariableName1": {
                    "offset": 1
                },
                "originalVariableName2": {
                    "four_bytes": 1
                },
                "originalVariableName3": {
                    "eight_bytes": 1
                },
                "param_1": {
                    "buffer": 17,
                    "memory": 1,
                    "memory_block": 5,
                    "memory_buffer": 3,
                    "memory_pointer": 2,
                    "memory_ptr": 2
                },
                "param_2": {
                    "byte_value": 3,
                    "clear_value": 1,
                    "default_value": 2,
                    "flag": 1,
                    "initial_value": 1,
                    "padding_byte": 1,
                    "param": 2,
                    "param2": 2,
                    "unknown": 1,
                    "unknown_param": 1,
                    "unused": 2,
                    "unused_flag": 1,
                    "val": 1,
                    "value": 6
                },
                "param_3": {
                    "block_size": 3,
                    "buffer_size": 3,
                    "byte_count": 1,
                    "length": 4,
                    "param3": 2,
                    "size": 12
                },
                "ptr_FUN_00081f00": {
                    "process_buffer": 1
                },
                "undefined4": {
                    "buffer_element": 1,
                    "data": 1,
                    "data_type": 1,
                    "uint": 1,
                    "uint32": 1
                }
            },
            "called": [
                "FUN_00081f00"
            ],
            "calling": [
                "FUN_0008089c"
            ],
            "code": "\nint initialize_memory_000811b0(int buffer)\n\n{\n  clear_memory(buffer,0,0x80);\n  *(buffer_element *)(buffer + 0x80) = 0;\n  *(buffer_element *)(buffer + 0x84) = 0;\n  return buffer;\n}\n\n",
            "current_name": "initialize_memory_000811b0",
            "entrypoint": "0x000811b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "memset": "clear_memory",
                "param_1": "buffer",
                "undefined4": "buffer_element"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811ca": {
            "additional_data": {
                "FUN_000811ca": {
                    "increment_and_store_byte": 1,
                    "store_byte": 1,
                    "update_and_rotate_buffer": 1,
                    "update_and_store_value": 2,
                    "update_array_and_index": 1,
                    "update_buffer": 12,
                    "update_buffer_and_index": 1,
                    "update_buffer_data": 1,
                    "update_circular_buffer": 1,
                    "update_data": 1,
                    "update_param_and_index": 3,
                    "update_param_value": 1,
                    "update_pointer": 1,
                    "update_pointer_and_value": 1,
                    "update_value": 1,
                    "update_value_in_buffer": 2
                },
                "param_1": {
                    "array_base": 1,
                    "base_address": 5,
                    "buffer": 12,
                    "buffer_addr": 1,
                    "buffer_address": 6,
                    "data": 1,
                    "data_block_offset": 1,
                    "data_ptr": 1,
                    "input_struct": 1,
                    "param_array": 2
                },
                "param_2": {
                    "data": 3,
                    "new_byte": 1,
                    "new_data": 1,
                    "new_element": 1,
                    "new_value": 18,
                    "value": 7
                },
                "uVar1": {
                    "current_index": 5,
                    "current_offset": 1,
                    "new_index": 12,
                    "new_pointer_index": 1,
                    "next_index": 2,
                    "updated_index": 9,
                    "updated_value": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_value_in_buffer_000811ca(int buffer,undefined new_value)\n\n{\n  uint new_index;\n  \n  new_index = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (new_index != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = new_value;\n    *(uint *)(buffer + 0x80) = new_index;\n  }\n  return;\n}\n\n",
            "current_name": "update_value_in_buffer_000811ca",
            "entrypoint": "0x000811ca",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811ca": "update_value_in_buffer_000811ca",
                "param_1": "buffer",
                "param_2": "new_value",
                "uVar1": "new_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811e8": {
            "additional_data": {
                "FUN_000811e8": {
                    "execute_with_timeout": 1,
                    "measure_and_repeat": 1,
                    "measure_and_wait": 2,
                    "measure_elapsed_time": 1,
                    "measure_execution_time": 3,
                    "measure_time_and_execute": 1,
                    "measure_time_until_result": 1,
                    "perform_operation_with_timeout": 3,
                    "perform_timed_operation": 1,
                    "poll_with_timeout": 1,
                    "wait_for_activity": 1,
                    "wait_for_completion": 3,
                    "wait_for_condition": 8,
                    "wait_for_millis": 1,
                    "wait_for_time": 1,
                    "wait_for_time_or_event": 1,
                    "wait_until_timeout": 1
                },
                "code": {
                    "function_pointer": 1
                },
                "iVar1": {
                    "current_millis": 8,
                    "current_time": 22,
                    "execution_result": 1
                },
                "millis": {
                    "get_current_time": 3,
                    "get_milliseconds": 1
                },
                "param_1": {
                    "activity_params": 1,
                    "arguments": 1,
                    "callback_params": 1,
                    "condition": 2,
                    "condition_params": 2,
                    "data": 3,
                    "function_parameters": 1,
                    "function_params": 1,
                    "input_array": 3,
                    "input_params": 4,
                    "measurement_result": 1,
                    "operation_args": 1,
                    "operation_data": 1,
                    "operation_params": 1,
                    "param": 1,
                    "parameters": 4,
                    "params": 2,
                    "polling_data": 1
                }
            },
            "called": [
                "FUN_00080f04"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nint wait_for_condition_000811e8(int *parameters)\n\n{\n  int current_time;\n  \n  current_time = get_current_time();\n  parameters[3] = current_time;\n  do {\n    current_time = (**(function_pointer **)(*parameters + 0xc))(parameters);\n    if (-1 < current_time) {\n      return current_time;\n    }\n    current_time = get_current_time();\n  } while ((uint)(current_time - parameters[3]) < (uint)parameters[2]);\n  return -1;\n}\n\n",
            "current_name": "wait_for_condition_000811e8",
            "entrypoint": "0x000811e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811e8": "wait_for_condition_000811e8",
                "code": "function_pointer",
                "iVar1": "current_time",
                "millis": "get_current_time",
                "param_1": "parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081214": {
            "additional_data": {
                "FUN_000811e8": {
                    "check_array": 1,
                    "get_timed_read_result": 1,
                    "get_timed_read_value": 1,
                    "is_byte_available": 1,
                    "is_end_of_file": 1,
                    "is_null_terminator": 1,
                    "perform_operation": 1,
                    "timed_read": 3
                },
                "FUN_00081214": {
                    "read_and_concat": 6,
                    "read_and_concat_bytes": 2,
                    "read_and_concat_input": 1,
                    "read_and_concat_strings": 1,
                    "read_and_concat_until": 1,
                    "read_and_concatenate": 12,
                    "read_and_concatenate_string": 2,
                    "read_bytes_until": 1,
                    "read_data": 1,
                    "read_data_and_concatenate": 1,
                    "read_loop": 1,
                    "read_until_character": 1,
                    "read_until_match": 1
                },
                "FUN_000814f6": {
                    "concatenate_strings": 1,
                    "find_end_marker": 1,
                    "find_end_of_string": 1,
                    "find_next_null": 1,
                    "find_null_terminator": 3,
                    "find_sub_array": 1,
                    "get_string_length": 1,
                    "get_string_pointer": 1
                },
                "FUN_0008159e": {
                    "concatenate_bytes": 3,
                    "concatenate_strings": 1,
                    "display_message": 1,
                    "print_concatenated_string": 1,
                    "print_error": 2,
                    "print_string": 2
                },
                "concat": {
                    "append_character": 1
                },
                "param_1": {
                    "arg1": 1,
                    "buffer": 9,
                    "first_part": 1,
                    "output_buffer": 12,
                    "output_str": 1,
                    "output_string": 6,
                    "string1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "file": 1,
                    "input": 3,
                    "input_address": 1,
                    "input_buffer": 5,
                    "input_data_stream": 1,
                    "input_device": 1,
                    "input_port": 1,
                    "input_source": 3,
                    "input_str": 1,
                    "input_stream": 8,
                    "second_part": 1,
                    "stream": 2,
                    "string2": 1,
                    "timeout": 1
                },
                "param_3": {
                    "arg3": 1,
                    "character": 1,
                    "delimiter": 2,
                    "end_char": 1,
                    "end_delimiter": 1,
                    "end_marker": 17,
                    "end_of_input_marker": 1,
                    "end_of_stream_marker": 1,
                    "end_value": 1,
                    "match_byte": 1,
                    "stop_char": 1,
                    "string3": 1,
                    "termination_value": 1,
                    "third_part": 1
                },
                "uVar1": {
                    "byte_read": 3,
                    "input_byte": 6,
                    "input_char": 2,
                    "read_byte": 7,
                    "read_result": 5,
                    "read_value": 8
                }
            },
            "called": [
                "FUN_000814f6",
                "FUN_000811e8",
                "FUN_0008159e"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nvoid read_and_concatenate_string_00081214(undefined4 output_buffer,undefined4 input_stream,uint end_marker)\n\n{\n  uint read_value;\n  \n  String(output_buffer,&DAT_00085637);\n  while ((read_value = timedRead(input_stream), -1 < (int)read_value && (read_value != end_marker))) {\n    append_character(output_buffer,read_value & 0xff);\n  }\n  return;\n}\n\n",
            "current_name": "read_and_concatenate_string_00081214",
            "entrypoint": "0x00081214",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081214": "read_and_concatenate_string_00081214",
                "concat": "append_character",
                "param_1": "output_buffer",
                "param_2": "input_stream",
                "param_3": "end_marker",
                "uVar1": "read_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081248": {
            "additional_data": {
                "0x10": {
                    "offset": 2,
                    "offset1": 1
                },
                "0x7f": {
                    "bit_mask": 2,
                    "mask": 1
                },
                "0x80": {
                    "first_offset": 1,
                    "first_value_offset": 1,
                    "offset1": 2,
                    "offset2": 1,
                    "offset_1": 2,
                    "value_offset_1": 1
                },
                "0x84": {
                    "offset2": 1,
                    "offset3": 1,
                    "offset_2": 2,
                    "second_offset": 1,
                    "second_value_offset": 1,
                    "value_offset_2": 1
                },
                "FUN_00081248": {
                    "calculate_difference": 28,
                    "calculate_difference_and_mask": 1,
                    "calculate_result": 1,
                    "subtract_and_mask": 1
                },
                "PTR_1": {
                    "ptr1": 1
                },
                "PTR_2": {
                    "ptr2": 1
                },
                "PTR_PARAM_1_10": {
                    "struct_pointer": 1
                },
                "PTR_PTR_PARAM_1_10": {
                    "data_pointer": 1
                },
                "PTR_PTR_PARAM_1_10_PLUS_0x10": {
                    "data_offset_pointer": 1
                },
                "PTR_PTR_PARAM_1_10_PLUS_0x84": {
                    "second_offset_pointer": 1
                },
                "param_1": {
                    "input": 3,
                    "input_data": 2,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_value": 20,
                    "value": 3
                },
                "result": {
                    "difference": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080970",
                "FUN_00080250"
            ],
            "code": "\nuint calculate_difference_and_mask_00081248(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "current_name": "calculate_difference_and_mask_00081248",
            "entrypoint": "0x00081248",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081248": "calculate_difference_and_mask_00081248",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081276": {
            "additional_data": {
                "FUN_00081276": {
                    "byte_from_buffer": 1,
                    "check_buffer_overflow": 1,
                    "extract_byte_from_array": 1,
                    "extract_byte_from_buffer": 15,
                    "extract_byte_from_memory": 1,
                    "extract_byte_from_struct": 1,
                    "get_byte_from_buffer": 1,
                    "get_next_byte": 7,
                    "get_value_from_buffer": 2,
                    "read_byte_from_memory": 1
                },
                "bVar1": {
                    "byte_value": 6,
                    "extracted_byte": 16,
                    "next_byte": 6,
                    "value": 2
                },
                "iVar2": {
                    "buffer": 4,
                    "buffer_address": 3,
                    "buffer_header": 1,
                    "buffer_info": 1,
                    "buffer_offset": 3,
                    "buffer_pointer": 4,
                    "buffer_ptr": 3,
                    "buffer_size": 1,
                    "element_address": 1,
                    "inner_memory_address": 1,
                    "ptr": 1,
                    "ptr_array": 1,
                    "ptr_data": 1,
                    "struct_address": 2,
                    "struct_ptr": 3
                },
                "param_1": {
                    "array_address": 1,
                    "buffer": 10,
                    "buffer_address": 6,
                    "buffer_index": 2,
                    "buffer_ptr": 3,
                    "data": 1,
                    "data_ptr": 1,
                    "input_address": 1,
                    "input_param": 1,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "memory_address": 2,
                    "struct_addr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nuint extract_byte_from_buffer_00081276(int buffer)\n\n{\n  byte extracted_byte;\n  int buffer_pointer;\n  \n  buffer_pointer = *(int *)(buffer + 0x10);\n  if (*(int *)(buffer_pointer + 0x80) != *(int *)(buffer_pointer + 0x84)) {\n    extracted_byte = *(byte *)(buffer_pointer + *(int *)(buffer_pointer + 0x84));\n    *(uint *)(buffer_pointer + 0x84) = *(int *)(buffer_pointer + 0x84) + 1U & 0x7f;\n    return (uint)extracted_byte;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "extract_byte_from_buffer_00081276",
            "entrypoint": "0x00081276",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081276": "extract_byte_from_buffer_00081276",
                "bVar1": "extracted_byte",
                "iVar2": "buffer_pointer",
                "param_1": "buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000812b8": {
            "additional_data": {
                "FUN_000812b8": {
                    "update_data": 23,
                    "update_memory": 1,
                    "update_parameter": 1,
                    "update_value": 5,
                    "update_value_if_condition_met": 1
                },
                "iVar1": {
                    "data": 3,
                    "data_offset": 6,
                    "data_pointer": 2,
                    "data_ptr": 6,
                    "memory_value": 1,
                    "pointer1": 1,
                    "ptr1": 5,
                    "ptr_data": 1,
                    "struct_pointer": 2,
                    "struct_var": 1,
                    "temp1": 1,
                    "value1": 1,
                    "var1": 1
                },
                "param_1": {
                    "data": 3,
                    "data_address": 2,
                    "data_index": 2,
                    "data_offset": 3,
                    "data_pointer": 7,
                    "data_ptr": 6,
                    "data_structure": 1,
                    "input": 3,
                    "input1": 3,
                    "memory_address": 1
                },
                "param_2": {
                    "input2": 2,
                    "new_data": 2,
                    "new_param": 1,
                    "new_value": 22,
                    "value": 4
                },
                "uVar2": {
                    "incremented_value": 2,
                    "new_index": 7,
                    "new_offset": 2,
                    "new_value_index": 1,
                    "normalized_value": 1,
                    "temp2": 1,
                    "updated_index": 2,
                    "updated_value": 13,
                    "value2": 1,
                    "var2": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nundefined4 update_data_000812b8(int data_pointer,undefined4 new_value)\n\n{\n  int data_ptr;\n  uint updated_value;\n  \n  data_ptr = *(int *)(data_pointer + 0x14);\n  if ((*(int *)(*(int *)(data_pointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(data_ptr + 0x84) == *(int *)(data_ptr + 0x80))) {\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 0x1c) = new_value;\n  }\n  else {\n    updated_value = *(int *)(data_ptr + 0x80) + 1U & 0x8000007f;\n    if ((int)updated_value < 0) {\n      updated_value = (updated_value - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(data_ptr + 0x84) == updated_value);\n    *(char *)(data_ptr + *(int *)(data_ptr + 0x80)) = (char)new_value;\n    *(uint *)(*(int *)(data_pointer + 0x14) + 0x80) = updated_value;\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_data_000812b8",
            "entrypoint": "0x000812b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "iVar1": "data_ptr",
                "param_1": "data_pointer",
                "param_2": "new_value",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081348": {
            "additional_data": {
                "FUN_00081348": {
                    "initialize_data": 1,
                    "initialize_function": 3,
                    "initialize_param": 2,
                    "initialize_param1": 1,
                    "initialize_param_array": 1,
                    "initialize_parameter_array": 1,
                    "initialize_parameters": 12,
                    "initialize_params": 8,
                    "initialize_settings": 1,
                    "set_param_values": 1
                },
                "PTR_write_1_00085650": {
                    "write_function": 1,
                    "write_function_pointer": 1
                },
                "param_1": {
                    "data_array": 1,
                    "function_params": 1,
                    "output": 1,
                    "output_array": 4,
                    "param_array": 3,
                    "parameter_array": 1,
                    "parameters": 11,
                    "params": 7,
                    "params_array": 1,
                    "settings": 1
                },
                "param_2": {
                    "input_value": 2,
                    "param2": 3,
                    "param2_value": 2,
                    "param_value1": 2,
                    "value": 6,
                    "value1": 7,
                    "value2": 8,
                    "value_2": 1
                },
                "param_3": {
                    "flag": 8,
                    "param3": 3,
                    "param3_value": 2,
                    "param_value2": 2,
                    "value2": 7,
                    "value3": 8,
                    "value_3": 1
                },
                "param_4": {
                    "data": 3,
                    "data_a": 1,
                    "extra_value1": 1,
                    "param4": 3,
                    "param4_value": 2,
                    "param_a": 1,
                    "param_value3": 2,
                    "setting": 1,
                    "value1": 1,
                    "value3": 7,
                    "value4": 8,
                    "value_4": 1
                },
                "param_5": {
                    "data_b": 1,
                    "extra_value2": 1,
                    "option": 1,
                    "option1": 1,
                    "param5": 3,
                    "param5_value": 2,
                    "param_b": 1,
                    "param_value4": 2,
                    "result": 1,
                    "size": 1,
                    "value2": 1,
                    "value4": 7,
                    "value5": 8,
                    "value_5": 1
                },
                "param_6": {
                    "config": 1,
                    "data_c": 1,
                    "extra_value3": 1,
                    "identifier": 1,
                    "option2": 1,
                    "param6": 3,
                    "param6_value": 2,
                    "param_c": 1,
                    "param_value5": 2,
                    "status": 1,
                    "value3": 1,
                    "value5": 7,
                    "value6": 8,
                    "value_6": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "code": "\nvoid initialize_parameters_00081348(undefined4 *parameters,undefined4 value2,undefined flag,undefined4 value4,\n                 undefined4 value5,undefined4 value6)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[6] = value2;\n  *parameters = &PTR_write_1_00085650;\n  *(undefined *)(parameters + 7) = flag;\n  parameters[4] = value5;\n  parameters[8] = value4;\n  parameters[5] = value6;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_00081348",
            "entrypoint": "0x00081348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081348": "initialize_parameters_00081348",
                "param_1": "parameters",
                "param_2": "value2",
                "param_3": "flag",
                "param_4": "value4",
                "param_5": "value5",
                "param_6": "value6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813dc": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array_name": 1,
                    "elf_rel_array": 3,
                    "rel_array": 1,
                    "relocation_array": 3,
                    "relocation_table": 1
                },
                "FUND_000813dc": {
                    "initialize_peripheral": 1
                },
                "FUN_00080aa8": {
                    "function_with_signature": 1
                },
                "FUN_000813dc": {
                    "enable_peripheral_clock": 1,
                    "enable_pmc_and_configure": 1,
                    "initialize_device": 3,
                    "initialize_peripheral": 25
                },
                "iVar1": {
                    "base_address": 1,
                    "control_reg_address": 1,
                    "data1": 1,
                    "device1_address": 1,
                    "device_address": 1,
                    "device_offset": 1,
                    "local_var1": 3,
                    "memory_address": 1,
                    "offset": 4,
                    "temp": 1,
                    "temp_var": 4,
                    "temp_var1": 4,
                    "temp_variable": 3,
                    "temp_variable1": 1,
                    "temporary_var1": 1,
                    "tmp_var1": 1,
                    "variable1": 2
                },
                "param_1": {
                    "address": 1,
                    "base_address": 7,
                    "device": 1,
                    "device_address": 2,
                    "device_pointer": 1,
                    "instance": 1,
                    "param": 3,
                    "param1": 5,
                    "param_addr": 1,
                    "param_address": 1,
                    "peripheral_address": 7,
                    "peripheral_base_address": 1
                },
                "param_2": {
                    "divider": 2,
                    "division_factor": 1,
                    "divisor": 8,
                    "factor": 2,
                    "offset": 1,
                    "param2": 5,
                    "param_delta": 1,
                    "param_divisor": 4,
                    "param_value": 5,
                    "parameter2": 2
                },
                "pmc_enable_periph_clk": {
                    "enable_peripheral_clock": 1
                },
                "puVar2": {
                    "config_ptr": 1,
                    "device1_pointer": 1,
                    "device_config_ptr": 1,
                    "device_registers": 1,
                    "local_var2": 1,
                    "peripheral_config": 1,
                    "peripheral_pointer": 1,
                    "peripheral_registers": 1,
                    "pointer1": 1,
                    "pointer_to_peripheral": 1,
                    "pointer_var": 5,
                    "pointer_var2": 4,
                    "pointer_variable": 1,
                    "ptr_to_data": 1,
                    "ptr_var": 1,
                    "register_array": 2,
                    "register_pointer": 2,
                    "registers": 5
                }
            },
            "called": [
                "FUN_00080aa8"
            ],
            "calling": [
                "FUN_000801e0"
            ],
            "code": "\nvoid initialize_peripheral_000813dc(int peripheral_address,uint divisor)\n\n{\n  int offset;\n  undefined4 *registers;\n  \n  enable_peripheral_clock(*(undefined4 *)(peripheral_address + 0x20));\n  registers = *(undefined4 **)(peripheral_address + 0x18);\n  registers[0x48] = 0x202;\n  *registers = 0xac;\n  registers[1] = 0x800;\n  registers[8] = elf_rel_array[6].r_offset / divisor >> 4;\n  registers[3] = 0xffffffff;\n  registers[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(peripheral_address + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(peripheral_address + 0x1c) & 0x1f);\n  offset = *(int *)(peripheral_address + 0x10);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  offset = *(int *)(peripheral_address + 0x14);\n  *(undefined4 *)(offset + 0x84) = 0;\n  *(undefined4 *)(offset + 0x80) = 0;\n  *registers = 0x50;\n  return;\n}\n\n",
            "current_name": "initialize_peripheral_000813dc",
            "entrypoint": "0x000813dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf_rel_array",
                "FUN_000813dc": "initialize_peripheral_000813dc",
                "iVar1": "offset",
                "param_1": "peripheral_address",
                "param_2": "divisor",
                "pmc_enable_periph_clk": "enable_peripheral_clock",
                "puVar2": "registers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081438": {
            "additional_data": {
                "FUN_00081438": {
                    "configure_uart": 1,
                    "init_uart": 1,
                    "initialize_uart": 27,
                    "initialize_uart_class": 1,
                    "setup_uart": 1
                },
                "PTR_write_1_00085680": {
                    "write_function": 7,
                    "write_function_pointer": 1,
                    "write_ptr": 1
                },
                "param_1": {
                    "output_buffer": 6,
                    "result": 1,
                    "uart": 1,
                    "uart_class": 1,
                    "uart_config": 2,
                    "uart_instance": 17,
                    "uart_object": 2,
                    "uart_settings": 1
                },
                "param_2": {
                    "baud_rate": 4,
                    "config_data": 1,
                    "config_value": 2,
                    "data": 1,
                    "input": 1,
                    "input_param": 2,
                    "input_value": 4,
                    "param": 8,
                    "param_value": 5,
                    "uart_setting": 1,
                    "value": 2
                },
                "param_3": {
                    "flag": 1,
                    "param_3": 1,
                    "unknown": 2,
                    "unknown_param": 1,
                    "unknown_parameter": 1,
                    "unused": 1,
                    "unused_param": 2
                },
                "param_4": {
                    "additional_param": 1,
                    "another_param": 1,
                    "param4": 2,
                    "param_4": 1,
                    "param_value2": 1,
                    "status": 1,
                    "unknown2": 1,
                    "unknown_variable": 1,
                    "unused": 1
                },
                "parameter_3": {
                    "unused_param": 1
                }
            },
            "called": [
                "FUN_00081348"
            ],
            "calling": [
                "FUN_0008089c"
            ],
            "code": "\nundefined4 * initialize_uart_class_00081438(undefined4 *uart_instance,undefined4 param)\n\n{\n  UARTClass();\n  *uart_instance = &PTR_write_1_00085680;\n  uart_instance[9] = param;\n  return uart_instance;\n}\n\n",
            "current_name": "initialize_uart_class_00081438",
            "entrypoint": "0x00081438",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081438": "initialize_uart_class_00081438",
                "param_1": "uart_instance",
                "param_2": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008145c": {
            "additional_data": {
                "FUN_0008145c": {
                    "calculate_interpolated_value": 3,
                    "calculate_interpolation": 9,
                    "calculate_interpolation_value": 2,
                    "calculate_linear_interpolation": 5,
                    "calculate_new_value": 3,
                    "calculate_offset": 2,
                    "calculate_result": 2,
                    "calculate_updated_value": 2,
                    "calculate_weighted_average": 3
                },
                "param_1": {
                    "first_value": 2,
                    "initial_value": 1,
                    "input_1": 2,
                    "input_value1": 1,
                    "numerator": 1,
                    "old_value1": 1,
                    "previous_value": 2,
                    "start_point_value": 1,
                    "start_value": 16,
                    "start_value_1": 1,
                    "starting_value": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "param_10": {
                    "interpolated_value": 1
                },
                "param_2": {
                    "base_value": 1,
                    "current_value": 1,
                    "denominator1": 1,
                    "end_value1": 1,
                    "initial_offset": 1,
                    "initial_value": 1,
                    "input_2": 2,
                    "old_value": 1,
                    "old_value2": 1,
                    "previous_value": 1,
                    "second_value": 2,
                    "start_index": 1,
                    "start_input": 1,
                    "start_param": 1,
                    "start_parameter": 1,
                    "start_point": 1,
                    "start_point_position": 1,
                    "start_position": 2,
                    "start_range": 5,
                    "start_range1": 1,
                    "start_range_min": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "param_3": {
                    "end_index": 1,
                    "end_input": 1,
                    "end_param": 1,
                    "end_parameter": 1,
                    "end_point": 1,
                    "end_point_position": 1,
                    "end_position": 2,
                    "end_range": 5,
                    "end_range1": 1,
                    "end_range_min": 1,
                    "end_value2": 1,
                    "end_value_1": 1,
                    "ending_value": 1,
                    "final_offset": 1,
                    "input_3": 2,
                    "last_value": 1,
                    "new_value": 1,
                    "next_value": 1,
                    "old_value3": 1,
                    "reference_value": 1,
                    "remainder": 1,
                    "target_value": 1,
                    "third_value": 1,
                    "value3": 1,
                    "value_3": 1
                },
                "param_4": {
                    "fourth_value": 1,
                    "initial_offset": 1,
                    "initial_weighted_value": 1,
                    "input_4": 2,
                    "lower_bound": 2,
                    "min_value": 1,
                    "offset": 1,
                    "old_value4": 1,
                    "start_offset": 1,
                    "start_output": 8,
                    "start_point_boundary": 1,
                    "start_range": 1,
                    "start_range2": 1,
                    "start_range_max": 1,
                    "start_result": 2,
                    "start_time": 1,
                    "start_value_2": 1,
                    "start_value_other": 1,
                    "starting_input": 1,
                    "starting_weight": 1,
                    "value4": 1
                },
                "param_5": {
                    "constant": 1,
                    "end_output": 8,
                    "end_point_boundary": 1,
                    "end_range": 1,
                    "end_range2": 1,
                    "end_result": 2,
                    "end_time": 1,
                    "end_value": 2,
                    "end_value_2": 1,
                    "end_value_other": 1,
                    "ending_input": 1,
                    "ending_weight": 1,
                    "fifth_value": 1,
                    "final_offset": 1,
                    "final_weighted_value": 1,
                    "input_5": 2,
                    "max_value": 1,
                    "old_value5": 1,
                    "upper_bound": 2,
                    "value5": 1
                },
                "param_6": {
                    "scale_factor": 1
                },
                "param_7": {
                    "output_offset": 1
                },
                "param_8": {
                    "output_value": 1
                },
                "param_9": {
                    "result": 1
                },
                "param_n": {
                    "new_parameter_name_n": 1
                },
                "result": {
                    "calculated_result": 1,
                    "interpolated_value": 2,
                    "new_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000806f8",
                "FUN_00080250"
            ],
            "code": "\nint calculate_linear_interpolation_0008145c(int start_value,int start_range,int end_range,int start_output,int end_output)\n\n{\n  return (uint)((start_value - start_range) * (end_output - start_output)) / (uint)(end_range - start_range) + start_output;\n}\n\n",
            "current_name": "calculate_linear_interpolation_0008145c",
            "entrypoint": "0x0008145c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008145c": "calculate_linear_interpolation_0008145c",
                "param_1": "start_value",
                "param_2": "start_range",
                "param_3": "end_range",
                "param_4": "start_output",
                "param_5": "end_output"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081472": {
            "additional_data": {
                "FUN_00081472": {
                    "cleanup_memory": 1,
                    "deallocate_memory": 2,
                    "free_and_return_pointer": 1,
                    "free_memory": 24,
                    "free_memory_and_return": 1,
                    "free_memory_block": 2
                },
                "FUN_00081800": {
                    "do_something": 3,
                    "free_memory": 1,
                    "helper_function": 1,
                    "process_data": 3,
                    "process_parameter": 1,
                    "release_resource": 4,
                    "some_other_function": 1
                },
                "param_1": {
                    "input_pointer": 1,
                    "memory": 4,
                    "memory_address": 1,
                    "memory_block": 14,
                    "memory_pointer": 4,
                    "memory_ptr": 2,
                    "memory_to_deallocate": 1,
                    "memory_to_free": 2,
                    "pointer": 1,
                    "ptr_to_free": 1
                }
            },
            "called": [
                "FUN_00081800"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nundefined4 * free_memory_block_00081472(undefined4 *memory_block)\n\n{\n  free(*memory_block);\n  return memory_block;\n}\n\n",
            "current_name": "free_memory_block_00081472",
            "entrypoint": "0x00081472",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081472": "free_memory_block_00081472",
                "param_1": "memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081480": {
            "additional_data": {
                "FUN_00081480": {
                    "clear_memory": 1,
                    "initialize_param": 1,
                    "reset_and_free": 1,
                    "reset_int_pointer": 1,
                    "reset_memory": 2,
                    "reset_param": 7,
                    "reset_param_1": 1,
                    "reset_parameter": 1,
                    "reset_parameters": 7,
                    "reset_params": 5,
                    "reset_pointer_values": 1,
                    "reset_values": 1,
                    "reset_variables": 2
                },
                "FUN_00081800": {
                    "cleanup": 1,
                    "free_memory": 1,
                    "initialize_variable": 1,
                    "sub_function": 1
                },
                "free": {
                    "free_memory": 1,
                    "release_memory": 1
                },
                "param_1": {
                    "arr": 1,
                    "array": 1,
                    "data": 1,
                    "data_pointer": 1,
                    "int_pointer": 1,
                    "memory_block": 1,
                    "memory_pointer": 2,
                    "p_values": 1,
                    "param": 6,
                    "param_ptr": 1,
                    "parameter": 1,
                    "parameters": 5,
                    "params": 4,
                    "pointer": 1,
                    "variable": 1
                }
            },
            "called": [
                "FUN_00081800"
            ],
            "calling": [
                "FUN_000814d0"
            ],
            "code": "\nvoid reset_param_1_00081480(int *param)\n\n{\n  if (*param != 0) {\n    release_memory();\n  }\n  *param = 0;\n  param[2] = 0;\n  param[1] = 0;\n  return;\n}\n\n",
            "current_name": "reset_param_1_00081480",
            "entrypoint": "0x00081480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081480": "reset_param_1_00081480",
                "free": "release_memory",
                "param_1": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081496": {
            "additional_data": {
                "FUN_00081496": {
                    "expand_and_set_param": 1,
                    "expand_array": 1,
                    "realloc_and_store": 1,
                    "realloc_and_update": 2,
                    "realloc_and_update_array": 1,
                    "resize_and_assign_array": 2,
                    "resize_and_copy_array": 1,
                    "resize_array": 22
                },
                "FUN_00081f9c": {
                    "initialize_array": 2,
                    "process_data": 1,
                    "set_memory": 1,
                    "set_parameters": 1,
                    "sub_function": 1
                },
                "iVar1": {
                    "expanded_array": 1,
                    "new_array": 10,
                    "new_array_pointer": 1,
                    "new_array_ptr": 6,
                    "new_memory": 1,
                    "new_ptr": 1,
                    "realloc_result": 3,
                    "resized_array": 2,
                    "result": 3
                },
                "param_1": {
                    "array": 15,
                    "array_pointer": 2,
                    "array_ptr": 10,
                    "data": 1,
                    "memory": 1
                },
                "param_2": {
                    "new_array_size": 1,
                    "new_size": 23,
                    "size": 7
                },
                "param_3": {
                    "alloc_size_1": 1,
                    "arg1": 1,
                    "arg3": 3,
                    "block_size": 1,
                    "byte_size": 1,
                    "elem_size": 1,
                    "element_size": 7,
                    "new_elem_size": 1,
                    "new_size": 1,
                    "num1": 1,
                    "old_element_size": 1,
                    "old_size": 1,
                    "padding_arg1": 1,
                    "param3": 5,
                    "param_3": 2,
                    "size1": 1,
                    "size_of_type": 2
                },
                "param_4": {
                    "alignment": 9,
                    "alloc_size_2": 1,
                    "arg2": 1,
                    "arg4": 3,
                    "block_size": 1,
                    "element_count": 1,
                    "element_size": 1,
                    "extra_size": 1,
                    "extra_space": 1,
                    "last_param": 1,
                    "new_element_size": 1,
                    "num2": 1,
                    "padding_arg2": 1,
                    "param4": 5,
                    "param_4": 2,
                    "size2": 1
                }
            },
            "called": [
                "FUN_00081f9c"
            ],
            "calling": [
                "FUN_000814ae"
            ],
            "code": "\nint resize_and_assign_array_00081496(int *array,int new_size,undefined4 element_size,undefined4 alignment)\n\n{\n  int new_array;\n  \n  new_array = realloc(*array,new_size + 1,element_size,alignment,alignment);\n  if (new_array != 0) {\n    *array = new_array;\n    array[1] = new_size;\n    new_array = 1;\n  }\n  return new_array;\n}\n\n",
            "current_name": "resize_and_assign_array_00081496",
            "entrypoint": "0x00081496",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081496": "resize_and_assign_array_00081496",
                "iVar1": "new_array",
                "param_1": "array",
                "param_2": "new_size",
                "param_3": "element_size",
                "param_4": "alignment"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814ae": {
            "additional_data": {
                "FUN_000814ae": {
                    "check_and_change_buffer": 5,
                    "check_and_modify_buffer": 3,
                    "check_and_reset_buffer": 1,
                    "check_and_set_buffer": 1,
                    "check_and_update_buffer": 10,
                    "check_buffer_and_change_if_needed": 1,
                    "check_buffer_and_update": 2,
                    "check_buffer_size": 3,
                    "check_buffer_validity": 1,
                    "update_buffer_and_check_validity": 1,
                    "validate_and_change_buffer": 1,
                    "validate_and_reset_buffer": 1
                },
                "changeBuffer": {
                    "modify_buffer": 1,
                    "reallocate_buffer": 1
                },
                "iVar1": {
                    "change_result": 4,
                    "error_code": 1,
                    "result": 19
                },
                "param_1": {
                    "buffer": 31
                },
                "param_2": {
                    "buffer_size": 3,
                    "desired_size": 2,
                    "input_size": 1,
                    "length": 1,
                    "min_size": 1,
                    "required_size": 5,
                    "size": 17,
                    "threshold": 1
                },
                "param_3": {
                    "param_3": 1
                },
                "param_4": {
                    "param_4": 1
                }
            },
            "called": [
                "FUN_00081496"
            ],
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "code": "\nundefined4 update_buffer_and_check_validity_000814ae(int *buffer,uint size)\n\n{\n  int result;\n  \n  if ((*buffer == 0) || ((uint)buffer[1] < size)) {\n    result = modify_buffer(buffer);\n    if (result == 0) {\n      return 0;\n    }\n    if (buffer[2] == 0) {\n      *(undefined *)*buffer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "update_buffer_and_check_validity_000814ae",
            "entrypoint": "0x000814ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814ae": "update_buffer_and_check_validity_000814ae",
                "changeBuffer": "modify_buffer",
                "iVar1": "result",
                "param_1": "buffer",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814d0": {
            "additional_data": {
                "FUN_00081480": {
                    "invalidate": 3
                },
                "FUN_000814ae": {
                    "reserve": 4
                },
                "FUN_000814d0": {
                    "improve_code": 1,
                    "improve_reserve_and_copy": 1,
                    "initialize_and_copy_string": 1,
                    "initialize_data": 1,
                    "initialize_memory_block": 1,
                    "process_data": 3,
                    "process_reserved_memory": 1,
                    "reserve_and_copy_string": 1,
                    "update_buffer": 3,
                    "update_data": 6,
                    "update_data_and_copy_string": 1,
                    "update_parameter": 1,
                    "update_record": 1,
                    "validate_and_copy_string": 2
                },
                "FUN_000825cc": {
                    "copy_memory": 1,
                    "copy_uint_arrays": 1,
                    "copy_uint_values": 1
                },
                "iVar1": {
                    "availability_check_result": 1,
                    "reservation_result": 5,
                    "reservation_status": 10,
                    "reserve_status": 1,
                    "reserved": 3,
                    "reserved_status": 1,
                    "result": 8,
                    "status": 1
                },
                "invalidate": {
                    "clear_data": 1,
                    "mark_as_invalid": 1,
                    "release_memory": 1
                },
                "param_1": {
                    "array": 2,
                    "array_ptr": 1,
                    "buffer": 3,
                    "data": 6,
                    "data_array": 3,
                    "data_buffer": 1,
                    "data_ptr": 1,
                    "input_array": 2,
                    "input_buffer": 1,
                    "memory_block": 2,
                    "output": 1,
                    "output_array": 2,
                    "parameter": 1,
                    "record": 1,
                    "result_array": 4
                },
                "param_2": {
                    "input_string": 4,
                    "new_data": 1,
                    "source": 4,
                    "source_data": 1,
                    "source_string": 20,
                    "string": 1
                },
                "param_3": {
                    "block_size": 1,
                    "data_size": 1,
                    "input_length": 1,
                    "input_number": 1,
                    "length": 9,
                    "new_size": 3,
                    "size": 10,
                    "source_length": 1,
                    "string_length": 3,
                    "string_size": 1
                },
                "reserve": {
                    "allocate_memory": 1,
                    "check_availability": 1
                },
                "strcpy": {
                    "copy_string": 1
                }
            },
            "called": [
                "FUN_000814ae",
                "FUN_00081480",
                "FUN_000825cc"
            ],
            "calling": [
                "FUN_000814f6"
            ],
            "code": "\nundefined4 * update_data_and_copy_string_000814d0(undefined4 *data,undefined4 source_string,undefined4 size)\n\n{\n  int reservation_status;\n  \n  reservation_status = check_availability(data,size);\n  if (reservation_status == 0) {\n    release_memory(data);\n  }\n  else {\n    data[2] = size;\n    copy_string(*data,source_string);\n  }\n  return data;\n}\n\n",
            "current_name": "update_data_and_copy_string_000814d0",
            "entrypoint": "0x000814d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814d0": "update_data_and_copy_string_000814d0",
                "iVar1": "reservation_status",
                "invalidate": "release_memory",
                "param_1": "data",
                "param_2": "source_string",
                "param_3": "size",
                "reserve": "check_availability",
                "strcpy": "copy_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814f6": {
            "additional_data": {
                "FUN_000814d0": {
                    "copy_array": 1
                },
                "FUN_000814f6": {
                    "copy_and_assign_zeroes": 1,
                    "copy_and_initialize": 5,
                    "copy_string_to_array": 1,
                    "extract_and_copy_string": 1,
                    "initialize_and_copy": 1,
                    "initialize_and_copy_string": 2,
                    "initialize_array": 4,
                    "initialize_buffer": 2,
                    "initialize_data": 1,
                    "initialize_param": 5,
                    "initialize_param1": 1,
                    "initialize_param_array": 3,
                    "initialize_param_list": 1,
                    "initialize_param_with_copy": 1,
                    "initialize_parameter": 1,
                    "initialize_params": 1
                },
                "FUN_00082688": {
                    "get_length": 1
                },
                "copy": {
                    "copy": 1
                },
                "param_1": {
                    "array": 4,
                    "array_pointer": 1,
                    "buffer": 2,
                    "data": 1,
                    "destination": 5,
                    "output_array": 4,
                    "output_buffer": 1,
                    "param_array": 7,
                    "param_list": 1,
                    "result": 2,
                    "result_array": 1,
                    "string_array": 1,
                    "target_array": 1
                },
                "param_2": {
                    "input": 1,
                    "input_string": 16,
                    "length": 2,
                    "size": 1,
                    "source": 2,
                    "source_length": 1,
                    "source_string": 4,
                    "str": 3,
                    "str_length": 1
                },
                "param_3": {
                    "length": 2
                },
                "uVar1": {
                    "input_length": 1,
                    "length": 1,
                    "source_length": 5,
                    "source_string_length": 1,
                    "str_len": 1,
                    "str_length": 2,
                    "string_length": 19
                }
            },
            "called": [
                "FUN_00082688",
                "FUN_000814d0"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nundefined4 * initialize_param_array_000814f6(undefined4 *param_array,int input_string)\n\n{\n  undefined4 string_length;\n  \n  *param_array = 0;\n  param_array[1] = 0;\n  param_array[2] = 0;\n  if (input_string != 0) {\n    string_length = strlen(input_string);\n    copy(param_array,input_string,string_length);\n  }\n  return param_array;\n}\n\n",
            "current_name": "initialize_param_array_000814f6",
            "entrypoint": "0x000814f6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814f6": "initialize_param_array_000814f6",
                "param_1": "param_array",
                "param_2": "input_string",
                "uVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008151c": {
            "additional_data": {
                "DAT_abc": {
                    "abc_data": 1
                },
                "FUN_0008151c": {
                    "copy_and_free": 1,
                    "copy_and_replace": 1,
                    "copy_and_reset": 2,
                    "copy_and_reset_data": 1,
                    "copy_and_reset_parameters": 1,
                    "copy_and_reset_params": 1,
                    "copy_and_reset_values": 1,
                    "copy_and_swap_arrays": 1,
                    "copy_data": 3,
                    "copy_data_and_update_pointers": 1,
                    "copy_parameters": 1,
                    "copy_params": 4,
                    "copy_params_and_update": 1,
                    "merge_arrays_and_cleanup": 1,
                    "swap_int_array_values": 1,
                    "update_param": 2,
                    "update_parameter": 1,
                    "update_parameters": 4,
                    "update_params": 3
                },
                "FUN_00081800": {
                    "do_something": 1,
                    "initialize_data": 1,
                    "reset_array": 1,
                    "some_function": 1
                },
                "FUN_000825cc": {
                    "compare_and_copy": 1,
                    "compare_data": 2,
                    "perform_comparison": 1
                },
                "LAB_00081558": {
                    "cleanup": 1,
                    "end_copy": 1,
                    "end_copy_and_replace": 1,
                    "end_label": 2,
                    "end_of_copy": 1,
                    "end_swap": 1,
                    "end_update": 1
                },
                "PTR_xyz": {
                    "xyz_pointer": 1
                },
                "free": {
                    "free_memory": 1,
                    "fun_000825cc": 1,
                    "release": 1,
                    "release_memory": 6
                },
                "param_1": {
                    "array1": 1,
                    "dest": 1,
                    "dest_params": 2,
                    "destination": 3,
                    "destination_array": 2,
                    "original_param": 1,
                    "source": 2,
                    "source_array": 1,
                    "source_data": 3,
                    "source_param": 1,
                    "source_parameter": 1,
                    "source_params": 6,
                    "src": 1,
                    "target": 1,
                    "target_array": 1,
                    "target_param": 1,
                    "target_params": 1
                },
                "param_2": {
                    "array2": 1,
                    "dest": 1,
                    "dest_param": 1,
                    "dest_params": 1,
                    "destination": 2,
                    "destination_array": 1,
                    "destination_data": 3,
                    "destination_parameter": 1,
                    "destination_params": 3,
                    "new_param": 1,
                    "new_params": 1,
                    "source": 4,
                    "source_array": 3,
                    "source_param": 1,
                    "source_params": 1,
                    "src": 1,
                    "src_params": 2,
                    "target_params": 1
                },
                "strcpy": {
                    "copy": 1,
                    "copy_string": 6,
                    "fun_00081800": 1,
                    "safe_copy": 1
                },
                "uint": {
                    "unsigned_int": 1
                }
            },
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "calling": [
                "FUN_00081560"
            ],
            "code": "\nvoid copy_and_reset_params_0008151c(int *source_params,int *source)\n\n{\n  if (*source_params != 0) {\n    if ((*source != 0) && ((unsigned_int)source[2] <= (unsigned_int)source_params[1])) {\n      copy_string();\n      source_params[2] = source[2];\n      goto end_label;\n    }\n    release_memory();\n  }\n  *source_params = *source;\n  source_params[1] = source[1];\n  source_params[2] = source[2];\n  *source = 0;\n  source[1] = 0;\nend_label:\n  source[2] = 0;\n  return;\n}\n\n",
            "current_name": "copy_and_reset_params_0008151c",
            "entrypoint": "0x0008151c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008151c": "copy_and_reset_params_0008151c",
                "LAB_00081558": "end_label",
                "free": "release_memory",
                "param_1": "source_params",
                "param_2": "source",
                "strcpy": "copy_string",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081560": {
            "additional_data": {
                "FUN_0008151c": {
                    "assign_values": 3,
                    "assign_values_to_pointers": 1,
                    "check_inputs": 1,
                    "compare_values": 1,
                    "modify_inputs": 1,
                    "update_pointers": 2,
                    "update_values": 5
                },
                "FUN_00081560": {
                    "check_and_move": 9,
                    "check_and_move_if_different": 7,
                    "check_and_move_if_not_equal": 3,
                    "check_parameters_and_move": 1,
                    "compare_and_move": 6,
                    "compare_and_move_if_needed": 1,
                    "compare_params_and_move": 1,
                    "conditional_move": 1,
                    "param_check_and_move": 1,
                    "validate_parameters": 1
                },
                "param_1": {
                    "comparison_value": 1,
                    "input1": 1,
                    "input_1": 3,
                    "input_parameter": 1,
                    "input_value": 2,
                    "input_value_1": 1,
                    "pointer_1": 1,
                    "value1": 13,
                    "value_1": 8
                },
                "param_2": {
                    "comparison_parameter": 1,
                    "expected_value": 2,
                    "input2": 1,
                    "input_2": 3,
                    "input_value_2": 1,
                    "pointer_2": 1,
                    "reference_value": 1,
                    "value2": 13,
                    "value_2": 8
                }
            },
            "called": [
                "FUN_0008151c"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint check_and_move_if_different_00081560(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    move();\n  }\n  return value1;\n}\n\n",
            "current_name": "check_and_move_if_different_00081560",
            "entrypoint": "0x00081560",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081560": "check_and_move_if_different_00081560",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081570": {
            "additional_data": {
                "FUN_000814ae": {
                    "reserve": 2
                },
                "FUN_00081570": {
                    "copy_and_extend_array": 1,
                    "copy_and_extend_string": 6,
                    "copy_and_reserve_memory": 1,
                    "modify_array_and_string": 1,
                    "process_data": 1,
                    "resize_and_copy": 1,
                    "resize_and_copy_string": 4,
                    "update_and_resize_buffer": 2,
                    "update_array": 3,
                    "update_array_with_text": 1,
                    "update_buffer": 2,
                    "update_data": 2,
                    "update_string": 2,
                    "update_string_and_length": 1,
                    "update_string_array": 1,
                    "update_string_buffer": 1,
                    "update_string_value": 1
                },
                "FUN_000825cc": {
                    "copy_array": 2
                },
                "iVar1": {
                    "allocation_result": 2,
                    "allocation_status": 1,
                    "res": 2,
                    "reservation_result": 4,
                    "reserve_result": 4,
                    "reserve_status": 2,
                    "reserved": 4,
                    "reserved_memory": 1,
                    "reserved_result": 1,
                    "result": 9,
                    "success": 1
                },
                "iVar2": {
                    "array_element": 1,
                    "array_length": 3,
                    "buffer_length": 2,
                    "current_array_size": 1,
                    "current_length": 10,
                    "current_size": 10,
                    "current_string_length": 1,
                    "existing_size": 1,
                    "previous_length": 1,
                    "previous_size": 1
                },
                "param_1": {
                    "array": 14,
                    "array_pointer": 2,
                    "buffer": 4,
                    "data": 3,
                    "string_array": 4,
                    "string_buffer": 2,
                    "string_data": 2
                },
                "param_2": {
                    "new_string": 4,
                    "size": 1,
                    "source": 6,
                    "source_data": 1,
                    "source_string": 14,
                    "string": 2,
                    "text": 1,
                    "value": 2
                },
                "param_3": {
                    "additional_data": 1,
                    "additional_length": 4,
                    "additional_size": 4,
                    "extension": 1,
                    "extension_length": 4,
                    "extra_length": 1,
                    "length": 8,
                    "length_to_add": 2,
                    "size": 2,
                    "string_length": 4
                },
                "reserve": {
                    "allocate_memory": 1
                },
                "strcpy": {
                    "copy_string": 1
                }
            },
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "calling": [
                "FUN_0008159e"
            ],
            "code": "\nundefined4 update_string_and_length_00081570(int *array,int source_string,int length)\n\n{\n  int result;\n  int current_length;\n  \n  current_length = array[2];\n  if (source_string == 0) {\n    return 0;\n  }\n  if (length != 0) {\n    result = allocate_memory(array,current_length + length);\n    if (result == 0) {\n      return 0;\n    }\n    copy_string(*array + array[2],source_string);\n    array[2] = current_length + length;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_string_and_length_00081570",
            "entrypoint": "0x00081570",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081570": "update_string_and_length_00081570",
                "iVar1": "result",
                "iVar2": "current_length",
                "param_1": "array",
                "param_2": "source_string",
                "param_3": "length",
                "reserve": "allocate_memory",
                "strcpy": "copy_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008159e": {
            "additional_data": {
                "FUN_0008159e": {
                    "initialize_string": 1,
                    "process_and_update_string": 1,
                    "update_and_copy_string": 2,
                    "update_and_length": 3,
                    "update_and_store_string_length": 1,
                    "update_param_and_length": 1,
                    "update_source_string": 1,
                    "update_source_string_and_length": 2,
                    "update_source_string_length": 1,
                    "update_source_string_with_length": 1,
                    "update_string": 7,
                    "update_string_and_length": 2,
                    "update_string_in_array": 1,
                    "update_string_length": 6
                },
                "F_UN0008159e": {
                    "update_string_length": 1
                },
                "local_c": {
                    "array_length": 1,
                    "dest_array": 1,
                    "destination_array": 1,
                    "destination_string": 2,
                    "length": 14,
                    "new_length": 1,
                    "output_array": 1,
                    "source_string": 1,
                    "string_length": 1,
                    "update_length": 1,
                    "updated_array": 2,
                    "updated_length": 2,
                    "updated_param": 1,
                    "updated_string": 1
                },
                "param_1": {
                    "array": 31
                },
                "param_2": {
                    "source_string": 16
                },
                "param_3": {
                    "length": 17,
                    "source_string": 14
                },
                "uStack_8": {
                    "destination_length": 1,
                    "source_length": 1,
                    "updated_length": 2,
                    "updated_param3": 1
                }
            },
            "called": [
                "FUN_00081570"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nvoid update_source_string_and_length_0008159e(undefined4 array,undefined4 source_string,undefined4 length)\n\n{\n  undefined4 length;\n  undefined4 updated_length;\n  \n  updated_length = length;\n  update_string_and_length_00081570(array,&length,1,0,array);\n  return;\n}\n\n",
            "current_name": "update_source_string_and_length_0008159e",
            "entrypoint": "0x0008159e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008159e": "update_source_string_and_length_0008159e",
                "local_c": "length",
                "param_1": "array",
                "param_2": "source_string",
                "param_3": "length",
                "uStack_8": "updated_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815b8": {
            "additional_data": {
                "FUN_000815b8": {
                    "check_comparison": 2,
                    "compare_and_return": 3,
                    "compare_and_return_result": 1,
                    "compare_byte_arrays": 1,
                    "compare_bytes": 14,
                    "compare_param_and_value": 1,
                    "compare_strings": 5,
                    "compare_values": 3
                },
                "iVar2": {
                    "comparison": 1,
                    "comparison_result": 3,
                    "final_result": 1,
                    "improved_result": 2,
                    "is_equal": 1,
                    "is_greater": 1,
                    "output_value": 1,
                    "result": 3,
                    "return_value": 13
                },
                "param_1": {
                    "array": 1,
                    "array1": 1,
                    "array_pointer": 1,
                    "array_ptrs": 1,
                    "byte_array": 4,
                    "byte_array1": 4,
                    "byte_array_ptr": 2,
                    "data_pointer": 1,
                    "input_array": 1,
                    "input_strings": 5,
                    "param_array": 1,
                    "parameter_list": 1,
                    "string_array": 6,
                    "strings": 2
                },
                "param_2": {
                    "array2": 1,
                    "byte_array": 2,
                    "byte_array2": 4,
                    "byte_pointer": 3,
                    "byte_ptr": 2,
                    "compare_array": 1,
                    "compare_string": 2,
                    "comparison_array": 1,
                    "comparison_data": 1,
                    "comparison_string": 4,
                    "input_byte": 1,
                    "input_string": 4,
                    "param_value": 1,
                    "string": 1,
                    "target_byte": 1,
                    "value": 1,
                    "value_to_compare": 1
                },
                "strcmp": {
                    "compare_strings": 2
                },
                "uVar1": {
                    "comparison_result": 22,
                    "result": 1,
                    "string_comparison_result": 3
                }
            },
            "called": [
                "FUN_00082390"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint compare_bytes_000815b8(byte **string_array,byte *byte_array2)\n\n{\n  uint comparison_result;\n  int return_value;\n  \n  if (string_array[2] == (byte *)0x0) {\n    if (byte_array2 == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (byte_array2 != (byte *)0x0) {\n      comparison_result = compare_strings(*string_array);\n      goto LAB_000815d4;\n    }\n    byte_array2 = *string_array;\n  }\n  comparison_result = (uint)*byte_array2;\nLAB_000815d4:\n  return_value = 1 - comparison_result;\n  if (1 < comparison_result) {\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "compare_bytes_000815b8",
            "entrypoint": "0x000815b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815b8": "compare_bytes_000815b8",
                "iVar2": "return_value",
                "param_1": "string_array",
                "param_2": "byte_array2",
                "strcmp": "compare_strings",
                "uVar1": "comparison_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815de": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "dynamic_array": 1,
                    "elf32_rel_array": 1,
                    "elf_rel_array": 1
                },
                "FUN_000815de": {
                    "convert_string_to_integer": 1,
                    "parse_integer": 13,
                    "parse_integer_from_byte": 1,
                    "parse_integer_from_string": 1,
                    "parse_number": 9,
                    "parse_number_from_string": 1,
                    "parse_numeric_string": 1,
                    "parse_numeric_value": 1,
                    "parse_signed_integer": 1,
                    "parse_unsigned_int": 1,
                    "reverse_and_convert_to_integer": 1
                },
                "bVar1": {
                    "byte1": 2,
                    "byte_1": 1,
                    "byte_flag": 1,
                    "byte_info": 1,
                    "byte_value": 5,
                    "byte_var1": 1,
                    "char_info": 1,
                    "current_byte": 9,
                    "flags": 7,
                    "info_byte": 1,
                    "next_byte": 1,
                    "temp_byte": 1
                },
                "bVar2": {
                    "byte2": 1,
                    "byte_2": 1,
                    "byte_var2": 1,
                    "is_negative": 24,
                    "is_negative_flag": 1,
                    "negative_flag": 3
                },
                "iVar7": {
                    "adjusted_byte_value": 1,
                    "adjusted_value": 2,
                    "char_value": 2,
                    "converted_char_offset": 1,
                    "diff": 1,
                    "difference": 2,
                    "digit": 2,
                    "digit_offset": 3,
                    "digit_value": 1,
                    "int_value": 1,
                    "modifier": 1,
                    "num_comp_value": 1,
                    "num_value": 1,
                    "numeric_value": 2,
                    "offset": 8,
                    "shifted_index": 1,
                    "temp_value": 1
                },
                "iVar8": {
                    "flag": 1,
                    "found_sign": 1,
                    "has_digit": 1,
                    "has_digits": 1,
                    "has_value": 1,
                    "is_first_digit": 2,
                    "is_negative": 2,
                    "is_num_valid": 1,
                    "is_updated": 1,
                    "is_valid": 7,
                    "is_value_set": 1,
                    "parse_state": 1,
                    "previous_result": 1,
                    "sign": 1,
                    "sign_change": 1,
                    "valid_digits": 1,
                    "valid_flag": 3,
                    "valid_input": 1,
                    "valid_integer_flag": 1,
                    "valid_number": 1,
                    "valid_sign": 1
                },
                "param_1": {
                    "buffer": 1,
                    "byte_array": 3,
                    "data": 4,
                    "input": 12,
                    "input_buffer": 1,
                    "input_bytes": 2,
                    "input_str": 1,
                    "input_string": 2,
                    "string_pointer": 2,
                    "string_ptr": 1
                },
                "pbVar4": {
                    "byte_ptr": 1,
                    "current_byte": 10,
                    "current_char": 4,
                    "current_character": 1,
                    "current_pointer": 1,
                    "current_ptr": 8,
                    "pointer": 1,
                    "ptr": 5
                },
                "pbVar6": {
                    "current": 1,
                    "current_byte": 1,
                    "current_ptr": 1,
                    "next_byte": 8,
                    "next_byte_ptr": 1,
                    "next_char": 4,
                    "next_ptr": 7,
                    "prev_ptr": 1,
                    "previous_byte": 1,
                    "ptr2": 1,
                    "ptr_temp": 1,
                    "start_byte": 1,
                    "start_character": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1
                },
                "uVar10": {
                    "boundary_value": 1,
                    "limit": 2,
                    "max_integer": 1,
                    "max_result": 1,
                    "max_value": 8,
                    "min_bound": 1,
                    "min_divisor": 3,
                    "min_max_value": 1,
                    "min_result": 1,
                    "min_value": 9,
                    "overflow_flag": 2,
                    "range_limit": 1
                },
                "uVar3": {
                    "converted_integer": 1,
                    "parsed_integer": 6,
                    "parsed_number": 1,
                    "parsed_result": 1,
                    "parsed_value": 2,
                    "result": 20
                },
                "uVar5": {
                    "ascii_value": 1,
                    "byte_value": 10,
                    "char": 1,
                    "char_code": 1,
                    "char_value": 3,
                    "current_byte": 1,
                    "current_char": 1,
                    "current_value": 9,
                    "next_byte_value": 1,
                    "value": 3
                },
                "uVar9": {
                    "divisor": 4,
                    "max_bound": 1,
                    "max_digits": 2,
                    "max_div_10": 2,
                    "max_div_by_ten": 1,
                    "max_divisor": 7,
                    "max_integer_div": 1,
                    "max_result": 1,
                    "max_value": 7,
                    "max_value_div10": 1,
                    "min_value": 1,
                    "overflow_check": 1,
                    "overflow_limit": 1,
                    "threshold": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parse_integer_from_byte_000815de(byte **input)\n\n{\n  byte current_byte;\n  byte is_negative;\n  uint result;\n  byte *current_byte;\n  uint byte_value;\n  byte *next_byte;\n  int offset;\n  int is_valid;\n  uint max_value;\n  uint min_value;\n  \n  current_byte = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    next_byte = current_byte;\n    current_byte = next_byte + 1;\n    byte_value = (uint)*next_byte;\n    current_byte = *(byte *)(elf32_rel_array[270].r_info + byte_value + 1);\n    is_negative = current_byte & 8;\n  } while ((current_byte & 8) != 0);\n  if (byte_value == 0x2d) {\n    current_byte = next_byte + 2;\n    byte_value = (uint)next_byte[1];\n    is_negative = 1;\n  }\n  else if (byte_value == 0x2b) {\n    byte_value = (uint)next_byte[1];\n    current_byte = next_byte + 2;\n  }\n  if (is_negative == 0) {\n    min_value = 0x7fffffff;\n  }\n  else {\n    min_value = 0x80000000;\n  }\n  max_value = min_value / 10;\n  is_valid = 0;\n  result = 0;\n  do {\n    current_byte = *(byte *)(elf32_rel_array[270].r_info + byte_value + 1);\n    if ((current_byte & 4) == 0) {\n      if ((current_byte & 3) == 0) {\nLAB_0008277e:\n        if (is_valid == -1) {\n          if (is_negative == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)elf32_rel_array[140].r_offset = 0x22;\n        }\n        else if (is_negative != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((current_byte & 3) == 1) {\n        offset = 0x37;\n      }\n      else {\n        offset = 0x57;\n      }\n      offset = byte_value - offset;\n    }\n    else {\n      offset = byte_value - 0x30;\n    }\n    if (9 < offset) goto LAB_0008277e;\n    if (is_valid != -1) {\n      if ((max_value <= result && result != max_value) || ((result == max_value && ((int)(min_value % 10) < offset))))\n      {\n        is_valid = -1;\n      }\n      else {\n        result = result * 10 + offset;\n        is_valid = 1;\n      }\n    }\n    byte_value = (uint)*current_byte;\n    current_byte = current_byte + 1;\n  } while( true );\n}\n\n",
            "current_name": "parse_integer_from_byte_000815de",
            "entrypoint": "0x000815de",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf32_rel_array",
                "FUN_000815de": "parse_integer_from_byte_000815de",
                "bVar1": "current_byte",
                "bVar2": "is_negative",
                "iVar7": "offset",
                "iVar8": "is_valid",
                "param_1": "input",
                "pbVar4": "current_byte",
                "pbVar6": "next_byte",
                "uVar10": "min_value",
                "uVar3": "result",
                "uVar5": "byte_value",
                "uVar9": "max_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815e8": {
            "called": [],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000815e8",
            "entrypoint": "0x000815e8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000815ec": {
            "additional_data": {
                "FUNC_00080f08": {
                    "another_function": 1,
                    "cleanup": 2,
                    "do_something": 3,
                    "execute": 4,
                    "execute_loop": 1,
                    "execute_task": 2,
                    "execute_tasks": 1,
                    "perform_action": 1,
                    "perform_additional_tasks": 1,
                    "perform_loop": 1,
                    "perform_operation": 2,
                    "perform_processing": 1,
                    "perform_task": 1,
                    "process_loop": 1,
                    "reboot_system": 1,
                    "reset_system": 1,
                    "reverse_data": 2,
                    "reverse_something": 2,
                    "run_event_loop": 1,
                    "run_serial_event": 1,
                    "watchdog_loop": 1
                },
                "FUNC_000815e8": {
                    "cleanup": 3,
                    "deep_sleep": 1,
                    "do_something": 1,
                    "execute_loop": 1,
                    "execute_system": 1,
                    "finalize": 1,
                    "finalize_execution": 1,
                    "loop_with_serial": 1,
                    "post_processing": 1,
                    "reverse_something": 2,
                    "reverse_task": 1,
                    "revert_changes": 1,
                    "serial_event": 1,
                    "serial_event_loop": 1,
                    "unknown_function": 1,
                    "watch_dog_setup": 1,
                    "watchdog_default_setup": 3,
                    "watchdog_setup": 5
                },
                "FUN_000801e0": {
                    "do_something": 1,
                    "execute_function": 2,
                    "execute_program": 1,
                    "handle_data": 1,
                    "initialize": 10,
                    "initialize_devices": 1,
                    "initialize_function": 1,
                    "initialize_serial_communication": 1,
                    "initialize_system": 1,
                    "initialize_variant": 2,
                    "perform_setup": 3,
                    "process_data": 1,
                    "process_event": 2,
                    "process_params": 1,
                    "setup_device": 1,
                    "setup_wi_fi": 1,
                    "some_function": 1
                },
                "FUN_00080250": {
                    "delay": 1,
                    "delay_one_second": 1,
                    "do_another_thing": 1,
                    "do_something": 1,
                    "execute_loop": 1,
                    "initialize": 3,
                    "initialize_components": 2,
                    "initialize_io": 1,
                    "initialize_setup": 1,
                    "initialize_variant": 8,
                    "perform_actions": 1,
                    "perform_loop": 1,
                    "perform_task": 3,
                    "run_serial_event": 2,
                    "setup_loop": 2,
                    "setup_serial_event": 1,
                    "setup_system": 1
                },
                "FUN_000815ec": {
                    "main_loop": 6,
                    "run_application": 1,
                    "run_main_loop": 12,
                    "run_program": 4,
                    "run_system": 7,
                    "start_loop": 1
                },
                "delay": {
                    "delay_in_seconds": 1
                },
                "initialize_memory_address_00081618": {
                    "initialize_memory_address": 31
                },
                "initialize_system_00080774": {
                    "initialize_system": 28,
                    "setup_system": 2,
                    "setup_system_default": 1
                },
                "loop": {
                    "execute_loop": 2,
                    "run_loop": 3
                },
                "process_serial_events_00080970": {
                    "process_serial_events": 31
                },
                "serialEventRun": {
                    "execute_serial_events": 1,
                    "run_serial_event": 3
                },
                "setup": {
                    "set_up": 1,
                    "setup": 1,
                    "setup_components": 1,
                    "setup_function": 1,
                    "setup_system": 1
                }
            },
            "called": [
                "FUN_00081618",
                "FUN_00080970",
                "FUN_000801e0",
                "FUN_00080f08",
                "FUN_00080250",
                "FUN_000815e8",
                "FUN_00080774"
            ],
            "calling": [
                "FUN_00080c20"
            ],
            "code": "\nvoid run_main_loop_000815ec(void)\n\n{\n  _watchdogDefaultSetup();\n  initialize_system();\n  initVariant();\n  delay_in_seconds(1);\n  setup_function();\n  do {\n    run_loop();\n    run_serial_event();\n  } while( true );\n}\n\n",
            "current_name": "run_main_loop_000815ec",
            "entrypoint": "0x000815ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815ec": "run_main_loop_000815ec",
                "delay": "delay_in_seconds",
                "initialize_system_00080774": "initialize_system",
                "loop": "run_loop",
                "serialEventRun": "run_serial_event",
                "setup": "setup_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081618": {
            "additional_data": {
                "": {
                    "": 1
                },
                "FUN_00081618": {
                    "initialize_data": 11,
                    "initialize_memory": 10,
                    "initialize_memory_address": 6,
                    "initialize_pointer": 1,
                    "set_data_pointer_to_0x8000": 1,
                    "set_initial_value": 1,
                    "set_initial_value_to_max": 1
                },
                "_DAT_400e1a54": {
                    "base_address": 2,
                    "data_address": 2,
                    "data_flag": 2,
                    "data_pointer": 1,
                    "data_value": 2,
                    "initial_value": 2,
                    "max_value": 1,
                    "memory_address": 13,
                    "memory_flag": 1,
                    "memory_start_address": 1,
                    "pointer_address": 1,
                    "start_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\n\n\nvoid initialize_memory_address_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_address_00081618",
            "entrypoint": "0x00081618",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081618": "initialize_memory_address_00081618"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081624": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 2
                },
                "FUN_00081624": {
                    "calculate_elapsed_time": 1,
                    "calculate_pulse": 4,
                    "calculate_pulse_count": 9,
                    "calculate_pulse_delay": 1,
                    "calculate_pulse_duration": 11,
                    "calculate_pulse_length": 1,
                    "calculate_pulse_rate": 1,
                    "calculate_pulse_time": 2
                },
                "FUN_00081684": {
                    "count_pulse_asm": 1,
                    "count_pulse_time": 1
                },
                "F_ReverseFunction": {
                    "calculate_pulse_duration": 1
                },
                "countPulseASM": {
                    "calculate_pulse_asm": 4,
                    "calculate_pulse_count": 1,
                    "compute_pulse": 1,
                    "count_pulse": 2,
                    "count_pulse_length": 1
                },
                "iVar1": {
                    "pulse_count": 20,
                    "pulse_duration": 5,
                    "result": 6
                },
                "param_1": {
                    "array": 1,
                    "index": 27,
                    "offset_index": 1,
                    "pulse_index": 1,
                    "source_array": 1
                },
                "param_2": {
                    "check_zero": 1,
                    "condition": 3,
                    "flag": 22,
                    "is_zero": 3,
                    "size": 1,
                    "start_index": 1
                },
                "param_3": {
                    "end_index": 1,
                    "multiplier": 29,
                    "offset": 1
                },
                "param_4": {
                    "offset": 6,
                    "param": 18,
                    "param_4": 3,
                    "parameter": 1,
                    "unknown_arg": 1,
                    "unknown_param": 1,
                    "value": 1
                },
                "uVar2": {
                    "data": 1,
                    "initial_value": 2,
                    "pulse_count": 1,
                    "pulse_data": 1,
                    "pulse_delay": 2,
                    "pulse_duration": 3,
                    "pulse_length": 1,
                    "pulse_offset": 4,
                    "pulse_param": 1,
                    "pulse_time": 2,
                    "pulse_value": 11,
                    "value": 2
                }
            },
            "called": [
                "FUN_00081684"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_pulse_duration_00081624(int index,int flag,int multiplier,undefined4 param)\n\n{\n  int pulse_count;\n  undefined4 pulse_value;\n  \n  pulse_value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    pulse_value = 0;\n  }\n  pulse_count = calculate_pulse_asm(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                        *(undefined4 *)(&DAT_00084b48 + index * 0x1c),pulse_value,\n                        ((rel_array[6].r_offset / 1000000) * multiplier) / 0x12,param)\n  ;\n  if (pulse_count != 0) {\n    pulse_count = (int)((ulonglong)(pulse_count * 18000 + 16000) /\n                 ((ulonglong)rel_array[6].r_offset / 1000));\n  }\n  return pulse_count;\n}\n\n",
            "current_name": "calculate_pulse_duration_00081624",
            "entrypoint": "0x00081624",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081624": "calculate_pulse_duration_00081624",
                "countPulseASM": "calculate_pulse_asm",
                "iVar1": "pulse_count",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "param",
                "uVar2": "pulse_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081684": {
            "additional_data": {
                "FUN_00081684": {
                    "check_and_count_bits": 2,
                    "check_and_return_index": 2,
                    "check_bit_pattern": 4,
                    "check_condition_and_count": 1,
                    "check_consecutive_bits": 1,
                    "check_for_match": 1,
                    "check_param": 5,
                    "check_param_equality": 1,
                    "check_param_occurrence": 1,
                    "check_pattern": 3,
                    "check_sequence": 1,
                    "check_sequence_match": 1,
                    "extract_subsequence": 1,
                    "find_first_index_of_value": 1,
                    "find_first_occurrence": 2,
                    "find_match_count": 1,
                    "find_matching_bits": 1,
                    "find_param_in_array": 1,
                    "find_pattern_match": 1
                },
                "iVar1": {
                    "bit_matches": 1,
                    "consecutive_count": 1,
                    "count": 4,
                    "found_index": 1,
                    "index": 3,
                    "iteration": 1,
                    "iteration_count": 2,
                    "iteration_counter": 1,
                    "match_count": 4,
                    "matching_count": 1,
                    "matching_iterations": 1,
                    "num_matches": 2,
                    "occurrence_count": 2,
                    "occurrence_index": 1,
                    "result": 1,
                    "result_count": 1,
                    "success_count": 1
                },
                "iVar2": {
                    "i": 1,
                    "iteration_count": 1
                },
                "param_1": {
                    "array": 7,
                    "array_ptr": 1,
                    "bit_array": 3,
                    "bits": 1,
                    "data": 6,
                    "data_array": 5,
                    "data_ptr": 1,
                    "input_arr": 1,
                    "input_array": 2,
                    "param_array": 1,
                    "sequence": 2,
                    "value_array": 1
                },
                "param_2": {
                    "bit_mask": 8,
                    "bitmask": 2,
                    "mask": 19,
                    "pattern": 2
                },
                "param_3": {
                    "check_value": 1,
                    "comparison": 1,
                    "desired_value": 4,
                    "expected_bit": 1,
                    "expected_bit_value": 1,
                    "expected_pattern": 1,
                    "expected_result": 1,
                    "expected_value": 5,
                    "match": 1,
                    "pattern": 4,
                    "target": 6,
                    "target_value": 2,
                    "test_value": 1,
                    "value": 2
                },
                "param_4": {
                    "array_length": 6,
                    "array_size": 1,
                    "iteration_count": 1,
                    "iterations": 2,
                    "length": 5,
                    "limit": 1,
                    "max_attempts": 1,
                    "max_count": 1,
                    "max_iterations": 6,
                    "num_bits_to_check": 1,
                    "num_iterations": 4,
                    "sequence_length": 1,
                    "size": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00081624"
            ],
            "code": "\nint check_bit_pattern_00081684(uint *array,uint mask,uint target,int array_length)\n\n{\n  int count;\n  \n  do {\n    if ((*array & mask) != target) {\n      do {\n        if ((*array & mask) == target) {\n          count = 0;\n          do {\n            if ((*array & mask) != target) {\n              return count;\n            }\n            count = count + 1;\n          } while (array_length != count);\n          return 0;\n        }\n        array_length = array_length + -1;\n      } while (array_length != 0);\n      return 0;\n    }\n    array_length = array_length + -1;\n  } while (array_length != 0);\n  return 0;\n}\n\n",
            "current_name": "check_bit_pattern_00081684",
            "entrypoint": "0x00081684",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081684": "check_bit_pattern_00081684",
                "iVar1": "count",
                "param_1": "array",
                "param_2": "mask",
                "param_3": "target",
                "param_4": "array_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816d8": {
            "additional_data": {
                "DAT_2007120c": {
                    "data": 5,
                    "data_item": 1,
                    "global_value": 1,
                    "global_variable": 3,
                    "return_value": 3
                },
                "FUN_000816d8": {
                    "get_data": 5,
                    "get_data_item": 1,
                    "get_data_value": 10,
                    "get_global_data": 1,
                    "get_global_value": 7,
                    "get_global_variable": 3,
                    "get_global_variable_value": 1,
                    "get_return_value": 3
                },
                "return_type": {
                    "undefined4": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080f04"
            ],
            "code": "\nundefined4 get_data_value_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "current_name": "get_data_value_000816d8",
            "entrypoint": "0x000816d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816d8": "get_data_value_000816d8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816ec": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 3,
                    "relocation_array": 3,
                    "relocation_entries": 1
                },
                "FUN_000816ec": {
                    "process_params": 1,
                    "set_relocation_entry": 1,
                    "update_data": 6,
                    "update_param_values": 1,
                    "update_parameters": 3,
                    "update_params": 2,
                    "update_permission": 1,
                    "update_rel_array": 1,
                    "update_rel_offset": 1,
                    "update_relocation_entry": 9,
                    "update_relocation_table": 4,
                    "update_values": 1
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "call_function": 1,
                    "error_handler": 1,
                    "function_pointer": 1,
                    "handle_error": 2,
                    "jump_table": 3,
                    "jump_table_00": 1,
                    "jump_table_fn": 1,
                    "jump_table_func": 3,
                    "jump_table_function": 2,
                    "unrecovered_jump_table": 4
                },
                "malloc": {
                    "allocate_memory": 1
                },
                "param_1": {
                    "address": 8,
                    "data1": 2,
                    "input_param1": 1,
                    "new_address": 1,
                    "new_data": 1,
                    "new_data1": 1,
                    "new_offset": 1,
                    "new_param1": 2,
                    "new_parameter1": 1,
                    "new_value": 3,
                    "new_value1": 7,
                    "old_param": 1,
                    "value1": 2
                },
                "param_2": {
                    "data": 1,
                    "data2": 2,
                    "input_param2": 1,
                    "new_data2": 1,
                    "new_offset": 1,
                    "new_param": 1,
                    "new_param2": 2,
                    "new_parameter2": 1,
                    "new_value": 3,
                    "new_value2": 7,
                    "param2": 1,
                    "temp_value": 1,
                    "value": 7,
                    "value2": 2
                },
                "param_3": {
                    "additional_param": 1,
                    "data3": 2,
                    "flag": 3,
                    "input_param3": 1,
                    "mask": 1,
                    "new_address": 1,
                    "new_data3": 1,
                    "new_mask": 1,
                    "new_param3": 2,
                    "new_parameter3": 1,
                    "new_value2": 1,
                    "new_value3": 7,
                    "offset": 3,
                    "old_address": 1,
                    "param3": 1,
                    "permission": 1,
                    "updated_data": 1,
                    "value3": 2
                },
                "pdVar1": {
                    "array_ptr": 1,
                    "curr_entry": 1,
                    "data_array": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "dynamic_array": 2,
                    "new_pointer": 1,
                    "new_relocation_entry": 1,
                    "pointer_array": 1,
                    "pointer_to_data": 1,
                    "ptr_to_rel_array": 1,
                    "realloc_ptr": 1,
                    "rel_array": 1,
                    "rel_array_ptr": 1,
                    "rel_offset_pointer": 1,
                    "reloc_entry": 1,
                    "reloc_entry_ptr": 1,
                    "relocated_array": 1,
                    "relocation_entry": 8,
                    "relocation_table": 3
                },
                "r_offset": {
                    "offset": 3
                },
                "uVar2": {
                    "entry_index": 1,
                    "index": 28,
                    "rel_idx": 1,
                    "relocation_index": 1
                },
                "uVar3": {
                    "bit_mask": 23,
                    "bit_shifted_value": 3,
                    "bitmask": 1,
                    "bitwise_mask": 1,
                    "flag": 2,
                    "flag_mask": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_relocation_entry_000816ec(dword address,dword new_value2,dword new_value3)\n\n{\n  dword *relocation_entry;\n  uint index;\n  uint bit_mask;\n  code *unrecovered_jump_table;\n  \n  if (relocation_array[48].offset == 0) {\n    relocation_array[48].offset = 0x20070184;\n  }\n  index = *(uint *)(relocation_array[48].offset + 4);\n  relocation_entry = (dword *)relocation_array[48].offset;\n  if (0x1f < (int)index) {\n    relocation_entry = (dword *)allocate_memory(400);\n    if (relocation_entry == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecovered_jump_table)(0xffffffff);\n      return;\n    }\n    *relocation_entry = relocation_array[48].offset;\n    relocation_entry[1] = 0;\n    index = 0;\n    relocation_array[48].offset = (dword)relocation_entry;\n    relocation_entry[0x62] = 0;\n    relocation_entry[99] = 0;\n  }\n  bit_mask = 1 << (index & 0xff);\n  relocation_entry[index + 0x22] = address;\n  relocation_entry[0x62] = relocation_entry[0x62] | bit_mask;\n  relocation_entry[index + 0x42] = new_value3;\n  relocation_entry[99] = bit_mask | relocation_entry[99];\n  relocation_entry[1] = index + 1;\n  relocation_entry[index + 2] = new_value2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecovered_jump_table)(0);\n  return;\n}\n\n",
            "current_name": "update_relocation_entry_000816ec",
            "entrypoint": "0x000816ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_000816ec": "update_relocation_entry_000816ec",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jump_table",
                "malloc": "allocate_memory",
                "param_1": "address",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "pdVar1": "relocation_entry",
                "r_offset": "offset",
                "uVar2": "index",
                "uVar3": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816f8": {
            "additional_data": {
                "FIPRINTF_PARAM1": {
                    "file": 1
                },
                "FIPRINTF_PARAM2": {
                    "line": 1
                },
                "FIPRINTF_PARAM3": {
                    "function": 1
                },
                "FIPRINTF_PARAM4": {
                    "msg": 1
                },
                "FUN_000816f8": {
                    "assertion_failed": 4,
                    "assertion_failed_error": 1,
                    "assertion_failed_print": 1,
                    "log_assertion_failure": 3,
                    "print_assert_failed_message": 1,
                    "print_assertion_error": 3,
                    "print_assertion_failed_message": 7,
                    "print_assertion_failure": 8,
                    "print_assertion_failure_message": 1,
                    "print_assertion_message": 1,
                    "print_failed_assertion": 1
                },
                "param_1": {
                    "assertion": 3,
                    "assertion_message": 1,
                    "error_message": 1,
                    "file": 13,
                    "file_name": 11,
                    "filename": 1,
                    "message": 1
                },
                "param_2": {
                    "file": 3,
                    "file_name": 2,
                    "line": 10,
                    "line_number": 16
                },
                "param_3": {
                    "assertion": 13,
                    "assertion_description": 1,
                    "assertion_message": 3,
                    "assertion_string": 2,
                    "condition": 3,
                    "error_message": 1,
                    "file_name": 1,
                    "function": 1,
                    "line": 1,
                    "line_number": 2,
                    "message": 3
                },
                "param_4": {
                    "function": 11,
                    "function_name": 17,
                    "line": 1,
                    "line_number": 1,
                    "msg": 1
                },
                "pcVar3": {
                    "additional_info": 7,
                    "additional_info_text": 1,
                    "additional_message": 2,
                    "additional_text": 1,
                    "delimiter": 1,
                    "extra_info": 5,
                    "extra_message": 2,
                    "function": 1,
                    "function_name": 1,
                    "message": 2,
                    "message_suffix": 3,
                    "msg_prefix": 1,
                    "pc_prefix": 1,
                    "prefix": 1,
                    "suffix": 2
                },
                "uVar1": {
                    "assertion_format": 1,
                    "file": 1,
                    "file_descriptor": 3,
                    "file_handle": 6,
                    "file_handler": 1,
                    "file_pointer": 2,
                    "file_ptr": 7,
                    "file_stream": 1,
                    "format_string_ptr": 1,
                    "output_file": 2,
                    "output_stream": 3,
                    "print_function": 1,
                    "printf_offset": 1,
                    "stream": 1
                },
                "uVar2": {
                    "assertion": 2,
                    "assertion_function": 1,
                    "assertion_message": 1,
                    "assertion_message_copy": 1,
                    "current_function": 1,
                    "current_function_name": 1,
                    "func_ptr": 1,
                    "function_argument": 2,
                    "function_arguments": 1,
                    "function_name": 4,
                    "function_name_backup": 1,
                    "function_name_copy": 2,
                    "function_name_param": 1,
                    "function_name_ptr": 2,
                    "function_param": 1,
                    "function_ptr": 5,
                    "line_number": 1,
                    "message": 1,
                    "temp_function_name": 2
                },
                "uVar4": {
                    "abort_address": 1,
                    "abort_result": 15,
                    "abort_ret_val": 1,
                    "abort_return_value": 3,
                    "result": 9,
                    "return_value": 1,
                    "termination_status": 1
                }
            },
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "code": "\nvoid print_assertion_failed_message_000816f8(undefined4 file,undefined4 line_number,char *assertion,undefined4 function_name)\n\n{\n  undefined4 file_ptr;\n  undefined4 function_ptr;\n  char *additional_info;\n  undefined8 abort_result;\n  \n  file_ptr = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (assertion == (char *)0x0) goto LAB_0008171c;\n  function_ptr = function_name;\n  additional_info = \", function: \";\n  do {\n    function_name = file;\n    fiprintf(file_ptr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function_ptr,file,line_number,\n             additional_info,assertion);\n    abort_result = abort();\n    line_number = (undefined4)((ulonglong)abort_result >> 0x20);\n    file_ptr = (undefined4)abort_result;\nLAB_0008171c:\n    assertion = \"\";\n    function_ptr = function_name;\n    additional_info = assertion;\n  } while( true );\n}\n\n",
            "current_name": "print_assertion_failed_message_000816f8",
            "entrypoint": "0x000816f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816f8": "print_assertion_failed_message_000816f8",
                "param_1": "file",
                "param_2": "line_number",
                "param_3": "assertion",
                "param_4": "function_name",
                "pcVar3": "additional_info",
                "uVar1": "file_ptr",
                "uVar2": "function_ptr",
                "uVar4": "abort_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081750": {
            "additional_data": {
                "FUN_00081750": {
                    "call_vfiprintf": 1,
                    "print_elf32_rel": 1,
                    "print_format_string": 1,
                    "print_formatted_data": 2,
                    "print_formatted_message": 9,
                    "print_formatted_output": 3,
                    "print_formatted_text": 1,
                    "print_function": 1,
                    "print_message": 1,
                    "print_rel_offset": 1,
                    "print_stack_values": 1,
                    "print_values": 1,
                    "print_with_format": 2,
                    "print_with_offset": 5,
                    "printf_wrapper": 1
                },
                "param_1": {
                    "format": 2,
                    "format_string": 27,
                    "message": 1,
                    "offset": 1
                },
                "param_2": {
                    "arg1": 24,
                    "arg_1": 3,
                    "argument_1": 2,
                    "format_string": 1,
                    "param_2": 1
                },
                "param_3": {
                    "arg2": 22,
                    "arg_2": 3,
                    "argument_2": 2,
                    "data_to_print": 1,
                    "message": 1,
                    "offset": 1,
                    "stack_var1": 1
                },
                "param_4": {
                    "arg2": 1,
                    "arg3": 22,
                    "arg_3": 3,
                    "arg_ptr": 1,
                    "argument_3": 2,
                    "param_4": 1,
                    "stack_var2": 1
                },
                "uStack_4": {
                    "arg2_value": 1,
                    "arg3_copy": 2,
                    "arg3_temp": 1,
                    "arg_3_copy": 1,
                    "arg_ptr_ptr": 1,
                    "argument_3_copy": 1,
                    "formatted_arg_3": 1,
                    "formatted_data2": 1,
                    "local_arg3": 1,
                    "param": 1,
                    "stack_arg2": 1,
                    "stack_param2": 1,
                    "temp2": 1,
                    "value2": 1
                },
                "uStack_8": {
                    "arg2_copy": 2,
                    "arg2_temp": 1,
                    "arg_2_copy": 1,
                    "argument_2_copy": 1,
                    "data": 1,
                    "formatted_arg_2": 1,
                    "formatted_data1": 1,
                    "local_arg2": 1,
                    "message_ptr": 1,
                    "offset_value": 1,
                    "stack_arg1": 1,
                    "stack_param1": 1,
                    "temp1": 1,
                    "value1": 1
                }
            },
            "called": [
                "FUN_0008289c"
            ],
            "calling": [
                "FUN_000816f8"
            ],
            "code": "\nvoid print_formatted_message_00081750(undefined4 format_string,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  _vfiprintf_r(Elf32_Rel_ARRAY_20070000[140].r_offset,format_string,arg1,&arg2_copy);\n  return;\n}\n\n",
            "current_name": "print_formatted_message_00081750",
            "entrypoint": "0x00081750",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081750": "print_formatted_message_00081750",
                "param_1": "format_string",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_4": "arg3_copy",
                "uStack_8": "arg2_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081778": {
            "additional_data": {
                "FUNC_00080118": {
                    "function_2": 1,
                    "perform_operation2": 1,
                    "sub_function2": 2,
                    "sub_function_2": 2,
                    "subfunction_2": 1
                },
                "FUNC_000836d8": {
                    "function_1": 1,
                    "perform_operation1": 1,
                    "sub_function1": 2,
                    "sub_function_1": 2,
                    "subfunction_1": 1
                },
                "FUNC_00085844": {
                    "function_3": 1,
                    "perform_operation3": 1,
                    "sub_function3": 2,
                    "sub_function_3": 2,
                    "subfunction_3": 1
                },
                "FUN_00081778": {
                    "execute_four_functions": 1,
                    "execute_function_set": 1,
                    "execute_functions": 2,
                    "execute_multiple_functions": 1,
                    "execute_sub_functions": 13,
                    "execute_sub_functions_with_retries": 1,
                    "execute_subfunctions": 1,
                    "init_and_call_subfunctions": 1,
                    "initialize_and_call_functions": 2,
                    "initialize_and_execute_functions": 4,
                    "initialize_and_execute_sub_functions": 1,
                    "initialize_and_invoke_functions": 1,
                    "run_startup_functions": 1
                },
                "_init": {
                    "initialize": 1
                },
                "iVar1": {
                    "count": 1,
                    "counter": 8,
                    "iteration": 1,
                    "iteration_count": 16,
                    "iterator": 1,
                    "loop_counter": 2,
                    "retry_count": 1
                },
                "ppcVar2": {
                    "function_array": 5,
                    "function_pointer": 1,
                    "function_pointer_array": 6,
                    "function_pointer_list": 1,
                    "function_pointers": 12,
                    "function_ptr_array": 1,
                    "function_ptrs": 1,
                    "function_table": 2,
                    "subfunc_address": 1
                }
            },
            "called": [
                "FUN_000836d8",
                "FUN_00080118",
                "FUN_00085844"
            ],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid execute_sub_functions_with_retries_00081778(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  initialize();\n  function_pointers = (code **)0x8584c;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "current_name": "execute_sub_functions_with_retries_00081778",
            "entrypoint": "0x00081778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081778": "execute_sub_functions_with_retries_00081778",
                "_init": "initialize",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000817c8": {
            "additional_data": {
                "FUN_000817c8": {
                    "print_and_update_param": 1,
                    "print_data_to_stream": 1,
                    "print_formatted_message": 1,
                    "print_formatted_output": 3,
                    "print_message": 3,
                    "print_param_1_with_stack_vars": 1,
                    "print_param_and_stack": 1,
                    "print_param_in_relocated_offset": 1,
                    "print_param_using_relocation_entry": 1,
                    "print_param_values": 1,
                    "print_param_with_offset": 1,
                    "print_param_with_stack": 2,
                    "print_parameter": 1,
                    "print_parameter_and_stack_values": 1,
                    "print_parameter_value": 1,
                    "print_parameter_with_stack": 1,
                    "print_stack_trace": 1,
                    "print_stack_value": 1,
                    "print_stack_values": 1,
                    "print_using_stack": 1,
                    "print_with_param": 2,
                    "print_with_stack_args": 1,
                    "print_with_stack_values": 2,
                    "printf_param_and_stack_values": 1
                },
                "_vfiprintf_r": {
                    "formatted_print": 1
                },
                "param_1": {
                    "data": 4,
                    "format_string": 8,
                    "message": 7,
                    "message_ptr": 1,
                    "offset_param": 1,
                    "param": 3,
                    "param_address": 2,
                    "relocated_offset": 1,
                    "stream": 1,
                    "value": 2,
                    "value_1": 1
                },
                "param_2": {
                    "address": 1,
                    "arg1": 1,
                    "arg2": 2,
                    "arg_1": 2,
                    "data_1": 1,
                    "param2": 2,
                    "param_1": 1,
                    "param_2": 6,
                    "param_value1": 1,
                    "stack_c": 1,
                    "stack_param1": 1,
                    "stack_param2": 1,
                    "stack_value1": 1,
                    "stack_value_1": 4,
                    "stack_value_2": 1,
                    "stack_var_1": 2,
                    "value_1": 2,
                    "value_2": 1
                },
                "param_3": {
                    "arg2": 1,
                    "arg3": 2,
                    "arg_2": 2,
                    "data_2": 1,
                    "offset": 1,
                    "param3": 2,
                    "param_2": 1,
                    "param_3": 6,
                    "param_value2": 1,
                    "stack_8": 1,
                    "stack_param2": 1,
                    "stack_param3": 1,
                    "stack_value2": 1,
                    "stack_value_2": 4,
                    "stack_value_3": 1,
                    "stack_var_2": 2,
                    "value_2": 2,
                    "value_3": 1
                },
                "param_4": {
                    "arg3": 1,
                    "arg4": 2,
                    "arg_3": 2,
                    "data": 1,
                    "data_3": 1,
                    "param4": 2,
                    "param_3": 1,
                    "param_4": 6,
                    "param_value3": 1,
                    "stack_4": 1,
                    "stack_param3": 1,
                    "stack_param4": 1,
                    "stack_value3": 1,
                    "stack_value_3": 4,
                    "stack_value_4": 1,
                    "stack_var_3": 2,
                    "value_3": 2,
                    "value_4": 1
                },
                "uStack_4": {
                    "arg3_stack": 1,
                    "arg4_copy": 1,
                    "arg_3_ref": 1,
                    "data_copy": 1,
                    "formatted_arg4": 1,
                    "param4_copy": 1,
                    "param_4_copy": 3,
                    "relocated_param_4": 1,
                    "stack_param_3": 1,
                    "stack_param_4": 1,
                    "stack_value3": 1,
                    "stack_value_3": 1,
                    "stack_var3": 1,
                    "stack_var_4": 3,
                    "stack_variable_e": 1,
                    "updated_param_value3": 1,
                    "value_4_copy": 1
                },
                "uStack_8": {
                    "arg2_stack": 1,
                    "arg3_copy": 1,
                    "arg_2_ref": 1,
                    "formatted_arg3": 1,
                    "offset_copy": 1,
                    "param3_copy": 1,
                    "param_3_copy": 3,
                    "relocated_param_3": 1,
                    "stack_param_2": 1,
                    "stack_param_3": 1,
                    "stack_value2": 1,
                    "stack_value_2": 1,
                    "stack_var2": 1,
                    "stack_var_8": 3,
                    "stack_variable_d": 1,
                    "updated_param_value2": 1,
                    "value_3_copy": 1
                },
                "uStack_c": {
                    "address_copy": 1,
                    "arg1_stack": 1,
                    "arg2_copy": 1,
                    "arg_1_ref": 1,
                    "formatted_arg2": 1,
                    "param2_copy": 1,
                    "param_2_copy": 3,
                    "relocated_param_2": 1,
                    "stack_param_1": 1,
                    "stack_param_2": 1,
                    "stack_value1": 1,
                    "stack_value_1": 1,
                    "stack_var1": 1,
                    "stack_var_c": 3,
                    "stack_variable_c": 1,
                    "updated_param_value1": 1,
                    "value_2_copy": 1
                }
            },
            "called": [
                "FUN_0008289c"
            ],
            "calling": [
                "FUN_00080eec"
            ],
            "code": "\nvoid print_param_1_with_stack_vars_000817c8(undefined4 format_string,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  param_2_copy = param_2;\n  param_3_copy = param_3;\n  param_4_copy = param_4;\n  formatted_print(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),format_string,&param_2_copy);\n  return;\n}\n\n",
            "current_name": "print_param_1_with_stack_vars_000817c8",
            "entrypoint": "0x000817c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000817c8": "print_param_1_with_stack_vars_000817c8",
                "_vfiprintf_r": "formatted_print",
                "param_1": "format_string",
                "uStack_4": "param_4_copy",
                "uStack_8": "param_3_copy",
                "uStack_c": "param_2_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000817f0": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "relocation_array": 3,
                    "relocation_entries": 1,
                    "relocation_table": 9
                },
                "FUN_000817f0": {
                    "allocate_memory": 30,
                    "allocate_rel_array": 1
                },
                "FUN_00081810": {
                    "apply_relocation": 1,
                    "apply_relocations": 3,
                    "process_data": 15,
                    "process_relocation": 7,
                    "process_relocation_table": 1,
                    "update_memory_contents": 1
                },
                "_malloc_r": {
                    "allocate": 1
                },
                "param_1": {
                    "data": 9,
                    "memory_size": 2,
                    "parameter": 1,
                    "pointer": 1,
                    "relocation_array": 1,
                    "relocation_table": 1,
                    "size": 15,
                    "size_in_bytes": 1
                },
                "param_2": {
                    "content_size": 1,
                    "count": 8,
                    "data_size": 1,
                    "length": 9,
                    "num_relocations": 3,
                    "relocation_count": 2,
                    "size": 2,
                    "table_size": 1
                },
                "r_offset": {
                    "offset": 1
                }
            },
            "called": [
                "FUN_00081810"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nvoid allocate_memory_000817f0(undefined4 size)\n\n{\n  allocate(relocation_table[140].offset,size);\n  return;\n}\n\n",
            "current_name": "allocate_memory_000817f0",
            "entrypoint": "0x000817f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "FUN_000817f0": "allocate_memory_000817f0",
                "_malloc_r": "allocate",
                "param_1": "size",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081800": {
            "additional_data": {
                "140": {
                    "index": 3
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_rel_array": 3,
                    "rel_array": 5,
                    "rel_entries": 1,
                    "relocation_array": 1,
                    "relocation_table": 1
                },
                "FUN_00081800": {
                    "deallocate_memory": 3,
                    "deallocate_r_offset": 1,
                    "free_elf32_rel": 3,
                    "free_elf32_rel_array": 3,
                    "free_elf32_rel_entry": 5,
                    "free_elf32_rel_item": 1,
                    "free_elf32_rel_offset": 3,
                    "free_elf32_rel_roffset": 2,
                    "free_elf32_relocation": 1,
                    "free_elf_rel_entry": 2,
                    "free_elf_relocation": 2,
                    "free_memory": 1,
                    "free_memory_from_rel_table_entry": 1,
                    "free_relocated_section": 1,
                    "free_relocation": 1,
                    "release_dynamic_relocation": 1
                },
                "FUN_00083b10": {
                    "apply_relocation": 4,
                    "do_something": 3,
                    "execute_complex_operation": 1,
                    "handle_relocation_entry": 1,
                    "perform_action": 1,
                    "perform_operation": 1,
                    "process_data": 7,
                    "process_entry": 2,
                    "process_function": 1,
                    "process_parameters": 1,
                    "process_params": 1,
                    "relocate_entries": 1,
                    "set_param": 1,
                    "update_param": 1,
                    "update_rel_table_entry": 1
                },
                "_free_r": {
                    "release_memory": 1
                },
                "param_1": {
                    "arg": 1,
                    "arg1": 1,
                    "data": 3,
                    "entry": 2,
                    "item": 1,
                    "mem_addr": 1,
                    "mem_ptr": 1,
                    "memory_address": 3,
                    "memory_block": 2,
                    "memory_pointer": 1,
                    "offset": 3,
                    "param": 5,
                    "param_elf32_rel_entry": 1,
                    "pointer": 1,
                    "pointer_to_memory": 1,
                    "ptr": 1,
                    "relocated_section_address": 1,
                    "src": 1
                },
                "param_2": {
                    "action_parameter": 1,
                    "arg2": 1,
                    "count": 4,
                    "data": 1,
                    "data_size": 2,
                    "entry_index": 1,
                    "num_entries": 1,
                    "offset": 1,
                    "param": 3,
                    "param2": 2,
                    "param_value": 1,
                    "parameter2": 1,
                    "size": 1,
                    "table_entry_index": 1,
                    "value": 4
                },
                "r_offset": {
                    "offset": 1
                },
                "undefined4": {
                    "type": 1
                }
            },
            "called": [
                "FUN_00083b10"
            ],
            "calling": [
                "FUN_00081480",
                "FUN_00081472",
                "FUN_0008151c"
            ],
            "code": "\nvoid free_elf32_rel_entry_00081800(type param)\n\n{\n  release_memory(rel_array[140].offset,param);\n  return;\n}\n\n",
            "current_name": "free_elf32_rel_entry_00081800",
            "entrypoint": "0x00081800",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081800": "free_elf32_rel_entry_00081800",
                "_free_r": "release_memory",
                "param_1": "param",
                "r_offset": "offset",
                "undefined4": "type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081810": {
            "additional_data": {
                "DAT_20071210": {
                    "some_data4": 1
                },
                "DAT_20071214": {
                    "some_data3": 1
                },
                "DAT_20071218": {
                    "some_data1": 1
                },
                "DAT_2007121c": {
                    "some_data2": 1
                },
                "DIC_PEM": {
                    "elf32_rel_array_20070000": 1
                },
                "FUNC_00081f94": {
                    "malloc_unlock": 1
                },
                "FUNC_00081f98": {
                    "sub_function2": 1
                },
                "FUN_00081810": {
                    "allocate_memory": 26,
                    "allocate_memory_block": 2,
                    "malloc_aligned_array": 1,
                    "malloc_and_initialize": 1
                },
                "FUN_0008236c": {
                    "sub_function1": 1
                },
                "FUN_00083b10": {
                    "sub_function3": 1
                },
                "LAB_00081876": {
                    "memory_allocation_error": 1
                },
                "LAB_00081b1a": {
                    "create_new_block": 1
                },
                "__malloc_lock": {
                    "lock_memory": 1
                },
                "__malloc_unlock": {
                    "unlock_memory": 1
                },
                "dVar1": {
                    "allocated_block_ptr": 1,
                    "current_offset": 1,
                    "info": 1,
                    "info1": 1,
                    "info9": 1,
                    "link_index": 1,
                    "offset": 1,
                    "prev_block": 1,
                    "r_info": 2,
                    "rel_array_info": 1,
                    "rel_info": 7,
                    "rel_info1": 1,
                    "rel_info_142": 1,
                    "rel_info_offset": 1,
                    "rel_offset": 1,
                    "rel_offset1": 1,
                    "result": 1,
                    "result_offset": 1,
                    "symbol_info": 1,
                    "temp": 1,
                    "temp1": 4
                },
                "dVar11": {
                    "block_ptr": 1,
                    "existing_link": 1,
                    "info3": 1,
                    "info8": 1,
                    "new_offset": 1,
                    "next_block_address": 1,
                    "next_offset": 1,
                    "next_rel": 1,
                    "next_rel_offset": 1,
                    "node": 1,
                    "offset5": 1,
                    "prev_block": 1,
                    "prev_block_size": 1,
                    "prev_rel": 1,
                    "prev_rel_offset": 2,
                    "previous_entry": 1,
                    "r_offset_3": 1,
                    "rel1": 1,
                    "rel_offset_8e": 1,
                    "temp10": 2,
                    "temp11": 2,
                    "temp_9": 1,
                    "temp_offset": 2,
                    "temp_var10": 2,
                    "temp_var8": 1,
                    "tmp18": 1
                },
                "dVar12": {
                    "block": 1,
                    "curr_rel_offset": 2,
                    "info4": 1,
                    "info6": 1,
                    "next_entry": 1,
                    "next_rel": 1,
                    "offset6": 1,
                    "prev_block_address": 1,
                    "prev_node": 1,
                    "prev_offset": 1,
                    "prev_offset2": 1,
                    "prev_offset_2": 1,
                    "prev_rel": 1,
                    "previous_block": 1,
                    "previous_link": 1,
                    "previous_rel_offset": 1,
                    "r_offset_4": 1,
                    "rel2": 1,
                    "rel_offset": 1,
                    "temp11": 2,
                    "temp12": 2,
                    "temp_10": 1,
                    "temp_block": 1,
                    "temp_ptr": 1,
                    "temp_var11": 2,
                    "temp_var9": 1,
                    "tmp19": 1
                },
                "dVar17": {
                    "rel_offset_2": 1
                },
                "dVar18": {
                    "shift": 1
                },
                "dVar1_1": {
                    "new_rel_info": 1
                },
                "dVar21": {
                    "temp_offset": 1
                },
                "dVar7": {
                    "block": 1,
                    "current_block": 1,
                    "current_block_address": 1,
                    "current_entry": 1,
                    "current_link": 1,
                    "current_offset": 2,
                    "current_rel": 1,
                    "info2": 1,
                    "info7": 1,
                    "iteration_offset": 1,
                    "loop_offset": 1,
                    "next_block": 1,
                    "next_rel_offset": 1,
                    "num_elements_difference": 1,
                    "offset3": 1,
                    "r_offset_2": 1,
                    "rel_offset": 3,
                    "rel_offset1": 1,
                    "temp6": 1,
                    "temp7": 3,
                    "temp_6": 1,
                    "temp_var5": 1,
                    "temp_var6": 2,
                    "tmp12": 1,
                    "var": 1
                },
                "dVar7_1": {
                    "new_rel_offset": 1
                },
                "iVar13": {
                    "block_index": 2,
                    "bucket_index": 1,
                    "count": 1,
                    "counter": 1,
                    "i": 1,
                    "index": 3,
                    "index1": 1,
                    "index_1": 1,
                    "loop_var": 1,
                    "prev_index": 1,
                    "prev_node_index": 1,
                    "rel_index": 1,
                    "size_class": 1,
                    "temp12": 2,
                    "temp13": 2,
                    "temp14": 1,
                    "temp8": 1,
                    "temp_11": 1,
                    "temp_count": 1,
                    "temp_var10": 1,
                    "temp_var12": 2,
                    "temp_variable": 1,
                    "tmp11": 1,
                    "tmp_var1": 1,
                    "value1": 1
                },
                "iVar13_1": {
                    "new_bucket_index": 1
                },
                "iVar13_2": {
                    "brk_offset": 1
                },
                "iVar19": {
                    "shift_count": 1
                },
                "iVar2": {
                    "block_size": 1,
                    "curr_offset": 1,
                    "current_block": 1,
                    "current_index": 2,
                    "current_offset": 2,
                    "first_block_address": 1,
                    "index": 2,
                    "index2": 2,
                    "next_block": 2,
                    "offset1": 1,
                    "previous_offset": 1,
                    "rel_offset": 1,
                    "rel_offset2": 1,
                    "temp": 1,
                    "temp1": 3,
                    "temp10": 1,
                    "temp2": 3,
                    "temp_1": 1,
                    "temp_var": 2,
                    "temp_var1": 2
                },
                "iVar20": {
                    "new_rel_offset": 1,
                    "temp_var": 1
                },
                "iVar21": {
                    "header_offset": 1
                },
                "iVar22": {
                    "align_shift": 1,
                    "last_offset": 1
                },
                "iVar23": {
                    "alloc_diff": 1,
                    "bucket_index": 1
                },
                "iVar24": {
                    "new_offset": 1
                },
                "iVar25": {
                    "alignment": 1
                },
                "iVar27": {
                    "sbrk_value": 1
                },
                "iVar28": {
                    "diff_size": 1
                },
                "iVar29": {
                    "diff_alignment": 1
                },
                "iVar30": {
                    "brk_value": 1
                },
                "iVar5": {
                    "current_offset": 1,
                    "i_var5": 2,
                    "next_block": 1,
                    "next_index": 3,
                    "next_offset": 2,
                    "next_rel_info": 1,
                    "offset": 1,
                    "offset2": 1,
                    "prev_block": 2,
                    "size_diff_block": 1,
                    "temp2": 1,
                    "temp4": 4,
                    "temp5": 4,
                    "temp_4": 1,
                    "temp_var3": 1,
                    "temp_var4": 3,
                    "temp_variable4": 1,
                    "tmp15": 1
                },
                "iVar9": {
                    "current_malloc_size": 1,
                    "next_block": 1,
                    "next_offset": 1,
                    "next_size": 1,
                    "offset4": 1,
                    "prev_index": 2,
                    "prev_offset": 3,
                    "previous_block": 1,
                    "rel_entry_offset": 1,
                    "rel_ptr": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp7": 3,
                    "temp8": 1,
                    "temp9": 4,
                    "temp_8": 1,
                    "temp_offset": 1,
                    "temp_var7": 2,
                    "temp_var8": 2,
                    "temp_variable7": 1,
                    "tmp6": 1
                },
                "param_1": {
                    "allocated_memory": 1,
                    "allocation_result": 1,
                    "block_address": 1,
                    "lock": 4,
                    "lock_ptr": 4,
                    "mem_lock": 3,
                    "out_ptr": 1,
                    "output_address": 2,
                    "output_pointer": 2,
                    "output_ptr": 1,
                    "param": 2,
                    "param_address": 1,
                    "param_array": 1,
                    "param_pointer": 1,
                    "ptr": 2,
                    "result": 1,
                    "result_buffer": 1,
                    "result_ptr": 1,
                    "size": 1
                },
                "param_2": {
                    "alloc_size": 1,
                    "input_size": 1,
                    "num_elements": 1,
                    "param_size": 1,
                    "result_length": 1,
                    "size": 26
                },
                "pdVar14": {
                    "bucket_entry": 1,
                    "current_class": 1,
                    "links": 1,
                    "loop_pointer": 1,
                    "pd_var": 1,
                    "pd_var1": 1,
                    "pointer1": 1,
                    "pointer2": 1,
                    "prev_ptr": 1,
                    "ptr2": 1,
                    "ptr_array": 1,
                    "ptr_node": 1,
                    "rel_array": 2,
                    "rel_array1": 1,
                    "rel_array_ptr": 2,
                    "rel_entry_ptr": 1,
                    "rel_info_1": 1,
                    "rel_info_ptr": 2,
                    "rel_ptr1": 1,
                    "temp13": 1,
                    "temp14": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 2,
                    "temp_var13": 2,
                    "tmp10": 1
                },
                "pdVar14_1": {
                    "new_bucket_entry": 1
                },
                "pdVar17": {
                    "chain_links": 1,
                    "current_index": 1,
                    "info_array": 1,
                    "loop_pointer2": 1,
                    "next_ptr": 1,
                    "pd_var2": 1,
                    "pointer3": 1,
                    "pointer6": 1,
                    "prev_rel_info_ptr": 1,
                    "ptr4": 1,
                    "ptr_node_info": 1,
                    "r_info_ptr": 1,
                    "rel_array2": 1,
                    "rel_info_2": 1,
                    "rel_info_ptr2": 1,
                    "rel_ptr2": 1,
                    "relocation": 1,
                    "temp15": 1,
                    "temp17": 1,
                    "temp_pointer_2": 1,
                    "temp_ptr": 1,
                    "temp_ptr4": 2,
                    "temp_var15": 1,
                    "temp_var16": 1,
                    "tmp_ptr3": 1
                },
                "puVar10": {
                    "curr_rel": 1,
                    "current_block": 2,
                    "current_ptr": 1,
                    "current_rel_offset": 1,
                    "current_rel_ptr": 1,
                    "entry_pointer": 1,
                    "pointer": 4,
                    "ptr": 5,
                    "ptr1": 1,
                    "pu_var10": 1,
                    "rel_data": 1,
                    "temp10": 1,
                    "temp9": 1,
                    "temp_pointer": 1,
                    "temp_pointer_1": 1,
                    "temp_ptr": 3,
                    "temp_ptr1": 2,
                    "temp_var9": 2,
                    "tmp_ptr": 1
                },
                "puVar16": {
                    "adjusted_entry": 1,
                    "aligned_ptr": 2,
                    "alloc_addr": 1,
                    "alloc_ptr": 1,
                    "allocated_block": 1,
                    "allocated_buffer": 1,
                    "block_addr": 1,
                    "new_alloc_data": 1,
                    "new_block": 2,
                    "new_block_address": 1,
                    "new_block_pointer": 1,
                    "new_ptr": 1,
                    "new_rel": 1,
                    "pointer2": 1,
                    "pointer5": 1,
                    "ptr3": 1,
                    "ptr_offset": 1,
                    "split_block": 1,
                    "temp14": 1,
                    "temp16": 2,
                    "temp_pointer_2": 1,
                    "temp_ptr2": 1,
                    "temp_ptr3": 2,
                    "temp_var14": 1,
                    "temp_var15": 1,
                    "tmp_ptr2": 1
                },
                "tmp1": {
                    "tmp21": 1
                },
                "tmp10": {
                    "tmp30": 1
                },
                "tmp11": {
                    "tmp31": 1
                },
                "tmp12": {
                    "tmp32": 1
                },
                "tmp13": {
                    "tmp33": 1
                },
                "tmp14": {
                    "tmp34": 1
                },
                "tmp15": {
                    "tmp35": 1
                },
                "tmp16": {
                    "tmp36": 1
                },
                "tmp17": {
                    "tmp37": 1
                },
                "tmp18": {
                    "tmp38": 1
                },
                "tmp19": {
                    "tmp39": 1
                },
                "tmp2": {
                    "tmp22": 1
                },
                "tmp20": {
                    "tmp40": 1
                },
                "tmp3": {
                    "tmp23": 1
                },
                "tmp4": {
                    "tmp24": 1
                },
                "tmp5": {
                    "tmp25": 1
                },
                "tmp6": {
                    "tmp26": 1
                },
                "tmp7": {
                    "tmp27": 1
                },
                "tmp8": {
                    "tmp28": 1
                },
                "tmp9": {
                    "tmp29": 1
                },
                "uVar15": {
                    "adjusted_size": 2,
                    "aligned_size": 10,
                    "alignment": 2,
                    "alloc_size": 2,
                    "block_size": 1,
                    "bucket_offset": 1,
                    "class_index": 1,
                    "max_size": 1,
                    "r_offset_1": 1,
                    "rounded_alloc_size": 1,
                    "size6": 1,
                    "size_aligned": 2,
                    "temp13": 1,
                    "temp15": 2,
                    "temp8": 1,
                    "temp_12": 1,
                    "temp_var14": 1
                },
                "uVar18": {
                    "adjusted_index": 1,
                    "adjusted_size": 1,
                    "block_index": 3,
                    "bucket": 1,
                    "class": 1,
                    "counter2": 1,
                    "i": 1,
                    "index": 3,
                    "index2": 1,
                    "index_2": 1,
                    "level": 1,
                    "loop_variable": 1,
                    "num_elements_difference": 1,
                    "rel_group_index": 1,
                    "size7": 1,
                    "temp14": 1,
                    "temp18": 1,
                    "temp9": 1,
                    "temp_13": 1,
                    "temp_var16": 1,
                    "temp_var17": 1,
                    "temp_variable_2": 1,
                    "tmp20": 1,
                    "type_index": 1,
                    "updated_size": 1
                },
                "uVar26": {
                    "new_size": 1
                },
                "uVar3": {
                    "aligned_size": 1,
                    "alignment": 1,
                    "block_size": 2,
                    "curr_size": 1,
                    "flag": 1,
                    "flags": 1,
                    "mask": 4,
                    "num_elements_aligned": 1,
                    "rel_info": 2,
                    "rel_info1": 1,
                    "size2": 1,
                    "temp10": 1,
                    "temp11": 1,
                    "temp2": 2,
                    "temp3": 3,
                    "temp_2": 1,
                    "temp_var1": 1,
                    "temp_var2": 3,
                    "temp_variable2": 1,
                    "tmp17": 1,
                    "u_var3": 1
                },
                "uVar4": {
                    "adjust_size": 1,
                    "adjusted_size": 5,
                    "adjusted_size2": 1,
                    "align_size": 1,
                    "aligned_size": 1,
                    "diff": 1,
                    "r_info_1_masked": 1,
                    "rel_data_size": 1,
                    "remaining_size": 1,
                    "size3": 1,
                    "size_diff": 1,
                    "temp11": 1,
                    "temp12": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 3,
                    "temp_3": 1,
                    "temp_var2": 1,
                    "temp_var3": 3,
                    "temp_variable3": 1,
                    "tmp16": 1,
                    "u_var4": 1
                },
                "uVar6": {
                    "adjusted_alloc_size": 1,
                    "block_size": 1,
                    "diff": 2,
                    "diff_size": 4,
                    "difference": 1,
                    "new_block_size": 1,
                    "new_size": 1,
                    "offset": 1,
                    "remaining_size": 1,
                    "size4": 1,
                    "size_aligned": 1,
                    "temp12": 1,
                    "temp5": 2,
                    "temp6": 3,
                    "temp9": 1,
                    "temp_5": 1,
                    "temp_size": 1,
                    "temp_var4": 1,
                    "temp_var5": 3,
                    "temp_variable5": 1,
                    "tmp13": 1,
                    "total_size": 1
                },
                "uVar8": {
                    "adjusted_block_size": 1,
                    "block_size": 1,
                    "current_size": 1,
                    "diff_size": 1,
                    "flags": 1,
                    "new_block_size": 1,
                    "new_data_size": 1,
                    "orig_size": 1,
                    "prev_offset": 1,
                    "prev_rel_info_masked": 1,
                    "prev_size": 1,
                    "rel_type": 1,
                    "size5": 1,
                    "temp13": 1,
                    "temp6": 2,
                    "temp7": 1,
                    "temp8": 4,
                    "temp_7": 1,
                    "temp_flags": 1,
                    "temp_var6": 2,
                    "temp_var7": 2,
                    "temp_variable6": 1,
                    "tmp14": 1,
                    "u_var8": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_0008236c",
                "FUN_00081f98",
                "FUN_00083b10",
                "FUN_00081f94"
            ],
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac",
                "FUN_00084018",
                "FUN_000817f0"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_block_00081810(undefined4 *lock_ptr,uint size)\n\n{\n  dword rel_info;\n  int temp1;\n  uint mask;\n  uint adjusted_size;\n  int temp4;\n  uint diff_size;\n  dword rel_offset;\n  uint temp8;\n  int temp9;\n  undefined *ptr;\n  dword temp10;\n  dword temp_var11;\n  int index;\n  dword *temp_var13;\n  uint aligned_size;\n  undefined *temp_ptr3;\n  dword *temp_ptr4;\n  uint index;\n  \n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < size) goto memory_allocation_error;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nmemory_allocation_error:\n      *lock_ptr = 0xc;\n      return (int *)0x0;\n    }\n  }\n  lock_memory(lock_ptr);\n  rel_info = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (aligned_size < 0x1f8) {\n    index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + aligned_size);\n    if ((index != aligned_size + 0x20070464) ||\n       (temp1 = index + 8, index = *(int *)(index + 0x14), temp1 != index)) {\n      temp4 = *(int *)(index + 0xc);\n      temp9 = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      aligned_size = *(uint *)(temp9 + 4);\n      temp1 = *(int *)(index + 8);\n      *(int *)(temp1 + 0xc) = temp4;\n      *(int *)(temp4 + 8) = temp1;\n      *(uint *)(temp9 + 4) = aligned_size | 1;\n      unlock_memory(lock_ptr);\n      return (int *)(index + 8);\n    }\n    index = (aligned_size >> 3) + 2;\n  }\n  else {\n    index = aligned_size >> 9;\n    if (index == 0) {\n      temp1 = 0x7e;\n      index = 0x3f;\n    }\n    else if (index < 5) {\n      index = (aligned_size >> 6) + 0x38;\n      temp1 = index * 2;\n    }\n    else if (index < 0x15) {\n      index = index + 0x5b;\n      temp1 = index * 2;\n    }\n    else if (index < 0x55) {\n      index = (aligned_size >> 0xc) + 0x6e;\n      temp1 = index * 2;\n    }\n    else if (index < 0x155) {\n      index = (aligned_size >> 0xf) + 0x77;\n      temp1 = index * 2;\n    }\n    else if (index < 0x555) {\n      index = (aligned_size >> 0x12) + 0x7c;\n      temp1 = index * 2;\n    }\n    else {\n      temp1 = 0xfc;\n      index = 0x7e;\n    }\n    for (rel_offset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[temp1]; temp1 * 4 + 0x20070464U != rel_offset\n        ; rel_offset = *(dword *)(rel_offset + 0xc)) {\n      index = *(uint *)(rel_offset + 4) & 0xfffffffc;\n      temp4 = index - aligned_size;\n      if (0xf < temp4) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < temp4) {\n        temp1 = index + rel_offset;\n        aligned_size = *(uint *)(temp1 + 4);\n        temp4 = *(int *)(rel_offset + 0xc);\n        index = *(int *)(rel_offset + 8);\n        *(int *)(index + 0xc) = temp4;\n        *(int *)(temp4 + 8) = index;\n        *(uint *)(temp1 + 4) = aligned_size | 1;\n        unlock_memory(lock_ptr);\n        return (int *)(rel_offset + 8);\n      }\n    }\n    index = index + 1;\n  }\n  rel_offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    mask = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    adjusted_size = mask & 0xfffffffc;\n    diff_size = adjusted_size - aligned_size;\n    if (0xf < (int)diff_size) {\n      rel_offset = aligned_size + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = aligned_size | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = rel_offset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = rel_offset;\n      *(undefined4 *)(rel_offset + 0xc) = 0x2007046c;\n      *(undefined4 *)(rel_offset + 8) = 0x2007046c;\n      *(uint *)(rel_offset + 4) = diff_size | 1;\n      *(uint *)(rel_offset + diff_size) = diff_size;\n      unlock_memory(lock_ptr);\n      return (int *)(rel_info + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)diff_size) {\n      *(uint *)(adjusted_size + rel_info + 4) = *(uint *)(adjusted_size + rel_info + 4) | 1;\n      unlock_memory(lock_ptr);\n      return (int *)(rel_info + 8);\n    }\n    if (adjusted_size < 0x200) {\n      adjusted_size = mask & 0xfffffff8;\n      index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + adjusted_size);\n      rel_offset = 1 << ((int)(mask >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(rel_info + 8) = index;\n      *(uint *)(rel_info + 0xc) = adjusted_size + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = rel_offset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + adjusted_size) = rel_info;\n      *(dword *)(index + 0xc) = rel_info;\n    }\n    else {\n      diff_size = mask >> 9;\n      if (diff_size < 5) {\n        temp1 = (mask >> 6) + 0x38;\n        index = temp1 * 2;\n      }\n      else if (diff_size < 0x15) {\n        temp1 = diff_size + 0x5b;\n        index = temp1 * 2;\n      }\n      else if (diff_size < 0x55) {\n        temp1 = (mask >> 0xc) + 0x6e;\n        index = temp1 * 2;\n      }\n      else if (diff_size < 0x155) {\n        temp1 = (mask >> 0xf) + 0x77;\n        index = temp1 * 2;\n      }\n      else if (diff_size < 0x555) {\n        temp1 = (mask >> 0x12) + 0x7c;\n        index = temp1 * 2;\n      }\n      else {\n        index = 0xfc;\n        temp1 = 0x7e;\n      }\n      rel_offset = index * 4 + 0x20070464;\n      temp10 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index];\n      if (temp10 == rel_offset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp1 >> 2 & 0xffU);\n        temp_var11 = temp10;\n      }\n      else {\n        do {\n          temp_var11 = temp10;\n          if ((*(uint *)(temp10 + 4) & 0xfffffffc) <= adjusted_size) break;\n          temp10 = *(dword *)(temp10 + 8);\n          temp_var11 = temp10;\n        } while (rel_offset != temp10);\n        temp10 = *(dword *)(temp_var11 + 0xc);\n      }\n      rel_offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(rel_info + 0xc) = temp10;\n      *(dword *)(rel_info + 8) = temp_var11;\n      *(dword *)(temp10 + 8) = rel_info;\n      *(dword *)(temp_var11 + 0xc) = rel_info;\n    }\n  }\n  rel_info = Elf32_Rel_ARRAY_20070000[141].r_info;\n  mask = 1 << ((int)index >> 2 & 0xffU);\n  if (mask <= rel_offset) {\n    if ((rel_offset & mask) == 0) {\n      index = index & 0xfffffffc;\n      do {\n        mask = mask << 1;\n        index = index + 4;\n      } while ((rel_offset & mask) == 0);\n    }\n    do {\n      temp_ptr4 = &Elf32_Rel_ARRAY_20070000[index + 0x8c].r_info;\n      temp_var13 = temp_ptr4;\n      adjusted_size = index;\n      do {\n        for (ptr = (undefined *)temp_var13[3]; temp_var13 != (dword *)ptr;\n            ptr = *(undefined **)(ptr + 0xc)) {\n          diff_size = *(uint *)(ptr + 4) & 0xfffffffc;\n          temp8 = diff_size - aligned_size;\n          if (0xf < (int)temp8) {\n            temp1 = *(int *)(ptr + 8);\n            index = *(int *)(ptr + 0xc);\n            temp_ptr3 = ptr + aligned_size;\n            *(uint *)(ptr + 4) = aligned_size | 1;\n            *(int *)(temp1 + 0xc) = index;\n            *(int *)(index + 8) = temp1;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)temp_ptr3;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)temp_ptr3;\n            *(undefined4 *)(temp_ptr3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(temp_ptr3 + 8) = 0x2007046c;\n            *(uint *)(temp_ptr3 + 4) = temp8 | 1;\n            *(uint *)(temp_ptr3 + temp8) = temp8;\n            unlock_memory(lock_ptr);\n            return (int *)(ptr + 8);\n          }\n          if (-1 < (int)temp8) {\n            index = *(int *)(ptr + 8);\n            temp1 = *(int *)(ptr + 0xc);\n            *(uint *)(ptr + diff_size + 4) = *(uint *)(ptr + diff_size + 4) | 1;\n            *(int *)(index + 0xc) = temp1;\n            *(int *)(temp1 + 8) = index;\n            unlock_memory(lock_ptr);\n            return (int *)(ptr + 8);\n          }\n        }\n        adjusted_size = adjusted_size + 1;\n        temp_var13 = temp_var13 + 2;\n      } while ((adjusted_size & 3) != 0);\n      do {\n        diff_size = index & 3;\n        ptr = (undefined *)(temp_ptr4 + -2);\n        index = index - 1;\n        if (diff_size == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~mask;\n          break;\n        }\n        temp_ptr4 = (dword *)*temp_ptr4;\n      } while (temp_ptr4 == (dword *)ptr);\n      mask = mask * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= mask &&\n           mask - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (index = adjusted_size, mask == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & mask) == 0; mask = mask << 1) {\n        index = index + 4;\n      }\n    } while( true );\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size <= index) &&\n     (mask = index - aligned_size, rel_offset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)mask))\n  goto create_new_block;\n  mask = Elf32_Rel_ARRAY_20070000[141].r_info + index;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    adjusted_size = aligned_size + DAT_20071218 + 0x10;\n  }\n  else {\n    adjusted_size = aligned_size + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  rel_offset = _sbrk_r(lock_ptr,adjusted_size);\n  if ((rel_offset == 0xffffffff) || ((rel_offset < mask && (rel_info != 0x20070464)))) {\n    index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    rel_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    diff_size = DAT_2007121c + adjusted_size;\n    DAT_2007121c = diff_size;\n    if ((mask == rel_offset) && ((mask & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = adjusted_size + index | 1;\n    }\n    else {\n      temp10 = rel_offset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        temp10 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = diff_size + (rel_offset - mask);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = temp10;\n      mask = rel_offset & 7;\n      if (mask == 0) {\n        index = 0x1000;\n      }\n      else {\n        rel_offset = rel_offset + (8 - mask);\n        index = 0x1008 - mask;\n      }\n      index = index - (adjusted_size + rel_offset & 0xfff);\n      temp1 = _sbrk_r(lock_ptr,index);\n      if (temp1 == -1) {\n        mask = 1;\n        index = 0;\n      }\n      else {\n        mask = (temp1 - rel_offset) + index | 1;\n      }\n      diff_size = DAT_2007121c + index;\n      Elf32_Rel_ARRAY_20070000[141].r_info = rel_offset;\n      DAT_2007121c = diff_size;\n      *(uint *)(rel_offset + 4) = mask;\n      if (rel_info != 0x20070464) {\n        if (index < 0x10) {\n          *(undefined4 *)(rel_offset + 4) = 1;\n          index = 0;\n          goto LAB_00081b04;\n        }\n        index = index - 0xc & 0xfffffff8;\n        *(uint *)(rel_info + 4) = index | *(uint *)(rel_info + 4) & 1;\n        *(undefined4 *)(rel_info + index + 4) = 5;\n        *(undefined4 *)(rel_info + index + 8) = 5;\n        if (0xf < index) {\n          _free_r(lock_ptr,rel_info + 8);\n          diff_size = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < diff_size) {\n      DAT_20071214 = diff_size;\n    }\n    if (DAT_20071210 < diff_size) {\n      DAT_20071210 = diff_size;\n    }\n    index = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    rel_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  mask = index - aligned_size;\n  if ((index < aligned_size) || ((int)mask < 0x10)) {\n    unlock_memory(lock_ptr);\n    return (int *)0x0;\n  }\ncreate_new_block:\n  Elf32_Rel_ARRAY_20070000[141].r_info = aligned_size + rel_offset;\n  *(uint *)(rel_offset + 4) = aligned_size | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = mask | 1;\n  unlock_memory(lock_ptr);\n  return (int *)(rel_offset + 8);\n}\n\n",
            "current_name": "allocate_memory_block_00081810",
            "entrypoint": "0x00081810",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081810": "allocate_memory_block_00081810",
                "LAB_00081876": "memory_allocation_error",
                "LAB_00081b1a": "create_new_block",
                "__malloc_lock": "lock_memory",
                "__malloc_unlock": "unlock_memory",
                "dVar1": "rel_info",
                "dVar11": "temp10",
                "dVar12": "temp_var11",
                "dVar17": "rel_offset_2",
                "dVar7": "rel_offset",
                "iVar13": "index",
                "iVar2": "temp1",
                "iVar5": "temp4",
                "iVar9": "temp9",
                "param_1": "lock_ptr",
                "param_2": "size",
                "pdVar14": "temp_var13",
                "pdVar17": "temp_ptr4",
                "puVar10": "ptr",
                "puVar16": "temp_ptr3",
                "uVar15": "aligned_size",
                "uVar18": "index",
                "uVar3": "mask",
                "uVar4": "adjusted_size",
                "uVar6": "diff_size",
                "uVar8": "temp8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d48": {
            "additional_data": {
                "FUN_00081d48": {
                    "copy_data": 5,
                    "copy_memory": 26
                },
                "LAB_00081dcc": {
                    "copy_remaining": 2,
                    "copy_remaining_data": 1
                },
                "bVar6": {
                    "can_copy": 1,
                    "copy_check": 1,
                    "copy_left": 1,
                    "flag": 2,
                    "has_remaining": 1,
                    "has_remaining_bytes": 1,
                    "is_inner_loop_enabled": 1,
                    "is_looping": 3,
                    "is_remaining": 6,
                    "is_remaining_chunk": 1,
                    "is_remaining_size_greater_than_zero": 1,
                    "is_remaining_size_gt_f": 1,
                    "is_remaining_size_non_zero": 1,
                    "is_remaining_size_not_zero": 1,
                    "loop_cond": 1,
                    "loop_condition": 6,
                    "loop_flag": 2
                },
                "param_1": {
                    "dest": 10,
                    "dest_ptr": 1,
                    "destination": 18,
                    "dst": 1,
                    "dst_buffer": 1
                },
                "param_2": {
                    "source": 18,
                    "src": 11,
                    "src_buffer": 1,
                    "src_ptr": 1
                },
                "param_3": {
                    "length": 1,
                    "size": 30
                },
                "puVar1": {
                    "dest_pointer": 2,
                    "dest_ptr": 21,
                    "dest_ptr_iterator": 1,
                    "dst_ptr": 5,
                    "src_ptr": 1
                },
                "puVar2": {
                    "dest": 2,
                    "dest_byte_ptr": 1,
                    "dest_cur": 1,
                    "dest_end": 4,
                    "dest_end_ptr": 4,
                    "dest_iter": 1,
                    "dest_ptr": 2,
                    "dest_ptr_end": 1,
                    "dest_ptr_iter": 1,
                    "dest_ptr_local": 1,
                    "dest_start": 1,
                    "dst": 4,
                    "dst_end": 1,
                    "dst_end_ptr": 1,
                    "src_ptr": 5
                },
                "puVar3": {
                    "dest_ptr_next": 1,
                    "dest_start": 1,
                    "dst_end_ptr": 1,
                    "dst_last_ptr": 1,
                    "src": 5,
                    "src_byte_ptr": 1,
                    "src_cur": 1,
                    "src_iter": 1,
                    "src_ptr": 14,
                    "src_ptr_iterator": 1,
                    "src_start": 1,
                    "temp_ptr": 2
                },
                "uVar4": {
                    "loop_count": 1,
                    "remainder": 1,
                    "remaining": 3,
                    "remaining_bytes": 1,
                    "remaining_length": 1,
                    "remaining_size": 22,
                    "size_copy": 1,
                    "size_iter": 1
                },
                "uVar5": {
                    "copy_size": 6,
                    "inner_remaining_size": 1,
                    "inner_size": 1,
                    "iteration_size": 1,
                    "loop_count": 3,
                    "loop_counter": 1,
                    "loop_size": 1,
                    "modified_size": 1,
                    "remaining_chunk": 1,
                    "remaining_loop": 1,
                    "remaining_size": 2,
                    "remaining_size2": 1,
                    "remaining_size_mod16": 1,
                    "remaining_size_temp": 1,
                    "size_minus4": 1,
                    "size_minus_offset": 1,
                    "temp_size": 2,
                    "unroll_size": 1,
                    "unrolled_length": 1,
                    "unrolled_size": 2,
                    "unrolling_size": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00083ca8"
            ],
            "code": "\nundefined4 * copy_memory_00081d48(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint copy_size;\n  bool is_remaining;\n  \n  src_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      copy_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = src_ptr;\n          is_remaining = copy_size != 0;\n          copy_size = copy_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          src_ptr = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (is_remaining);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto copy_remaining;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copy_size = 4 - ((uint)destination & 3);\n      size = size - copy_size;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      src_ptr = dest_ptr;\n      source = src_ptr;\n      if ((copy_size & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        src_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *src_ptr = *source;\n    src_ptr[1] = source[1];\n    src_ptr[2] = source[2];\n    src_ptr[3] = source[3];\n    src_ptr[4] = source[4];\n    src_ptr[5] = source[5];\n    src_ptr[6] = source[6];\n    src_ptr[7] = source[7];\n    src_ptr[8] = source[8];\n    src_ptr[9] = source[9];\n    src_ptr[10] = source[10];\n    src_ptr[0xb] = source[0xb];\n    src_ptr[0xc] = source[0xc];\n    src_ptr[0xd] = source[0xd];\n    src_ptr[0xe] = source[0xe];\n    src_ptr[0xf] = source[0xf];\n    src_ptr = src_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *src_ptr = *source;\n      src_ptr[1] = source[1];\n      src_ptr[2] = source[2];\n      src_ptr[3] = source[3];\n      src_ptr = src_ptr + 4;\n      source = source + 4;\n      is_remaining = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (is_remaining);\n  }\n  copy_size = remaining_size + 0xc;\n  src_ptr = src_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      is_remaining = 3 < copy_size;\n      copy_size = copy_size - 4;\n      src_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (is_remaining);\n  }\ncopy_remaining:\n  if (copy_size + 4 != 0) {\n    dest_ptr = src_ptr;\n    src_ptr = source;\n    if ((copy_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)src_ptr + 1);\n      *(undefined *)src_ptr = *(undefined *)source;\n    }\n    if ((copy_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "current_name": "copy_memory_00081d48",
            "entrypoint": "0x00081d48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "LAB_00081dcc": "copy_remaining",
                "bVar6": "is_remaining",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "copy_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081e34": {
            "additional_data": {
                "FUN_00081e34": {
                    "copy_and_reverse_data": 1,
                    "copy_memory": 13,
                    "copy_memory_block": 1,
                    "memcpy_reverse": 1,
                    "reverse_copy": 9,
                    "reverse_copy_memory": 1,
                    "reverse_memcpy": 2,
                    "reverse_memory": 3
                },
                "iVar1": {
                    "count": 3,
                    "counter": 1,
                    "i": 1,
                    "index": 17,
                    "iteration": 2,
                    "iterations": 1,
                    "iterator": 2,
                    "temp_counter": 1
                },
                "param_1": {
                    "dest": 15,
                    "dest_ptr": 1,
                    "destination": 14,
                    "source": 1
                },
                "param_2": {
                    "destination": 1,
                    "source": 14,
                    "src": 15,
                    "src_ptr": 1
                },
                "param_3": {
                    "length": 11,
                    "size": 20
                },
                "puVar2": {
                    "current_dest": 1,
                    "dest_ptr": 22,
                    "dest_ptr_iter": 1,
                    "dest_uint32_iterator": 1,
                    "dst_pointer": 2,
                    "dst_ptr": 1,
                    "source_ptr": 1
                },
                "puVar3": {
                    "current_src": 1,
                    "destination_ptr": 1,
                    "src_pointer": 2,
                    "src_ptr": 23,
                    "src_ptr_iter": 1,
                    "src_uint32_iterator": 1
                },
                "puVar4": {
                    "copy_ptr": 1,
                    "current_dest_ptr": 1,
                    "dest_end": 3,
                    "dest_end_ptr": 3,
                    "dest_ptr_end": 1,
                    "dst_end": 1,
                    "end_ptr": 3,
                    "iterator1": 1,
                    "ptr": 1,
                    "temp_dest": 1,
                    "temp_dest_ptr": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 10,
                    "tmp_ptr": 1
                },
                "puVar5": {
                    "copy_end": 1
                },
                "puVar6": {
                    "byte_ptr": 2,
                    "current_dest_byte": 1,
                    "dest_byte": 2,
                    "dest_byte_ptr": 2,
                    "dest_end": 1,
                    "dest_uint8": 1,
                    "dst": 1,
                    "end_dest_ptr": 2,
                    "end_ptr": 1,
                    "iterator3": 1,
                    "temp": 4,
                    "temp_byte": 1,
                    "temp_char": 4,
                    "temp_data": 1,
                    "temp_dest": 2,
                    "temp_ptr": 3
                },
                "uVar5": {
                    "copy_length": 1,
                    "copy_size": 1,
                    "count": 3,
                    "iterator2": 1,
                    "offset": 1,
                    "remaining": 2,
                    "remaining_bytes": 1,
                    "remaining_length": 3,
                    "remaining_size": 2,
                    "size_count": 1,
                    "src_uint32_length": 1,
                    "temp": 2,
                    "temp_index": 1,
                    "temp_length": 2,
                    "temp_size": 6,
                    "tmp_size": 1
                },
                "uVar7": {
                    "last_block_length": 1,
                    "num_bytes": 1,
                    "remainder": 6,
                    "remaining": 1,
                    "remaining_bytes": 6,
                    "remaining_length": 2,
                    "remaining_size": 6,
                    "src_uint32_reminder": 1,
                    "tail_bytes": 1,
                    "temp_idx": 1,
                    "temp_remainder": 1
                },
                "uVar8": {
                    "remainder_size": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "code": "\nvoid reverse_copy_memory_00081e34(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint temp_size;\n  undefined *temp;\n  uint remaining_bytes;\n  \n  if ((src < dest) && (temp_ptr = (undefined4 *)((int)src + size), dest < temp_ptr)) {\n    temp = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        temp = temp + -1;\n        *temp = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    temp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remaining_bytes = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    temp_size = remaining_bytes;\n    temp_ptr = dest;\n    src_ptr = src;\n    if (3 < remaining_bytes) {\n      do {\n        temp_size = temp_size - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < temp_size);\n      index = (remaining_bytes - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remaining_bytes = size & 3;\n    }\n    size = remaining_bytes;\n    if (size == 0) {\n      return;\n    }\n  }\n  temp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "current_name": "reverse_copy_memory_00081e34",
            "entrypoint": "0x00081e34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081e34": "reverse_copy_memory_00081e34",
                "iVar1": "index",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "puVar6": "temp",
                "uVar5": "temp_size",
                "uVar7": "remaining_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081f00": {
            "additional_data": {
                "FUN_00081f00": {
                    "byte_fill": 1,
                    "copy_and_fill": 1,
                    "copy_and_fill_memory": 1,
                    "copy_value": 1,
                    "fill_buffer": 1,
                    "fill_buffer_with_byte": 4,
                    "fill_buffer_with_data": 1,
                    "fill_memory": 6,
                    "fill_memory_with_byte": 5,
                    "fill_memory_with_value": 1,
                    "fill_with_byte": 1,
                    "initialize_memory": 1,
                    "memset": 5,
                    "write_bytes": 1,
                    "write_pattern_to_memory": 1
                },
                "LAB_00081f7c": {
                    "end_of_function": 1
                },
                "bVar5": {
                    "is_count_zero": 4,
                    "is_empty": 1,
                    "is_last_loop": 1,
                    "is_length_zero": 3,
                    "is_size_zero": 5,
                    "is_zero": 8,
                    "is_zero_length": 1,
                    "is_zero_size": 5,
                    "zero_length_case": 1
                },
                "param_1": {
                    "array": 2,
                    "buffer": 8,
                    "dest": 11,
                    "dest_pointer": 1,
                    "destination": 6,
                    "dst": 1,
                    "mem_ptr": 1,
                    "memory_pointer": 1
                },
                "param_2": {
                    "byte": 7,
                    "byte_to_fill": 3,
                    "byte_value": 1,
                    "fill_value": 2,
                    "pattern": 1,
                    "value": 17
                },
                "param_3": {
                    "count": 6,
                    "length": 8,
                    "num_bytes": 4,
                    "size": 13
                },
                "puVar1": {
                    "buffer_iter": 1,
                    "buffer_ptr": 1,
                    "curr_ptr": 1,
                    "current": 2,
                    "current_buffer": 2,
                    "current_pointer": 2,
                    "current_ptr": 2,
                    "dest": 1,
                    "dest_ptr": 11,
                    "dst_pointer": 1,
                    "dst_ptr": 1,
                    "p": 1,
                    "ptr": 3
                },
                "puVar2": {
                    "next": 2,
                    "next_buffer": 2,
                    "next_buffer_iter": 1,
                    "next_dest": 2,
                    "next_dest_ptr": 6,
                    "next_dst_pointer": 1,
                    "next_pointer": 2,
                    "next_ptr": 8,
                    "p2": 1,
                    "ptr2": 1,
                    "temp_ptr": 3
                },
                "uVar3": {
                    "byte_pattern": 5,
                    "combined_value": 1,
                    "fill_pattern": 2,
                    "fill_value": 4,
                    "merged_value": 1,
                    "new_value": 1,
                    "pattern": 6,
                    "pattern32": 1,
                    "quadword_value": 1,
                    "repeated_byte": 1,
                    "value32": 3,
                    "value_32": 2,
                    "value_4byte": 1
                },
                "uVar4": {
                    "count": 1,
                    "count_tmp": 1,
                    "num_loops": 1,
                    "remain_size": 1,
                    "remaining": 1,
                    "remaining_bytes": 1,
                    "remaining_count": 4,
                    "remaining_length": 8,
                    "remaining_size": 10,
                    "temp_count": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "code": "\nvoid fill_memory_with_byte_00081f00(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_ptr;\n  undefined4 pattern;\n  uint remaining_size;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    is_zero = size == 0;\n    dest_ptr = dest;\n    size = size - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = size == 0;\n      dest_ptr = dest;\n      size = size - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = pattern;\n        dest_ptr[1] = pattern;\n        dest_ptr[2] = pattern;\n        dest_ptr[3] = pattern;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto end_of_function;\n    }\n    do {\n      size = size - 4;\n      *dest = pattern;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nend_of_function:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_ptr;\n    } while (next_ptr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_with_byte_00081f00",
            "entrypoint": "0x00081f00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081f00": "fill_memory_with_byte_00081f00",
                "LAB_00081f7c": "end_of_function",
                "bVar5": "is_zero",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_ptr",
                "uVar3": "pattern",
                "uVar4": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081f94": {
            "called": [],
            "calling": [
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00081f94",
            "entrypoint": "0x00081f94",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00081f98": {
            "called": [],
            "calling": [
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00081f98",
            "entrypoint": "0x00081f98",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00081f9c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 1,
                    "relocation_array": 1
                },
                "FUN_00081f9c": {
                    "realloc_elf32_rel": 1,
                    "realloc_elf32_rel_array": 1,
                    "realloc_elf32_rel_offset": 1,
                    "realloc_elf_rel_offset": 1,
                    "reallocate_elf32_rel": 1,
                    "reallocate_elf32_rel_array": 2,
                    "reallocate_elf32_rel_offset": 2,
                    "reallocate_memory": 16,
                    "resize_array": 2,
                    "resize_buffer": 1,
                    "resize_memory": 1,
                    "resize_memory_block": 1,
                    "resize_relocation_array": 1
                },
                "FUN_00081fac": {
                    "adjust_relocation_array": 1,
                    "perform_operation": 1,
                    "process_data": 1,
                    "process_rel_array": 1,
                    "update_array": 1,
                    "update_buffer": 1,
                    "update_elf32_rel_entries": 1,
                    "update_memory": 3,
                    "update_pointer": 3
                },
                "param_1": {
                    "array_pointer": 1,
                    "current_memory_size": 1,
                    "data_pointer": 2,
                    "entry_ptr": 1,
                    "input_pointer": 1,
                    "memory_address": 1,
                    "memory_block": 1,
                    "memory_block_address": 1,
                    "offset": 7,
                    "old_address": 1,
                    "old_buffer": 1,
                    "old_offset": 1,
                    "old_pointer": 3,
                    "old_size": 1,
                    "param_ptr": 1,
                    "pointer_array": 1,
                    "ptr_array": 1,
                    "reallocated_memory": 1,
                    "relocation_array": 1,
                    "source_pointer": 1,
                    "start_address": 1,
                    "target_pointer": 1
                },
                "param_2": {
                    "count": 1,
                    "current_index": 1,
                    "current_memory": 1,
                    "entry_count": 1,
                    "int_array": 1,
                    "new_array_ptr": 1,
                    "new_size": 12,
                    "old_size": 2,
                    "output_pointer": 1,
                    "param_size": 1,
                    "previous_size": 1,
                    "result_ptr": 1,
                    "size": 5,
                    "size_pointer": 1,
                    "target_size": 1
                },
                "param_3": {
                    "buffer_size": 1,
                    "count": 1,
                    "data_size": 1,
                    "element_count": 1,
                    "entry_size": 1,
                    "length": 2,
                    "new_element_count": 1,
                    "new_size": 1,
                    "num_elements": 1,
                    "param_3": 1,
                    "size": 1
                }
            },
            "called": [
                "FUN_00081fac"
            ],
            "calling": [
                "FUN_00081496"
            ],
            "code": "\nvoid reallocate_memory_00081f9c(undefined4 offset,undefined4 new_size)\n\n{\n  _realloc_r(relocation_array[140].r_offset,offset,new_size);\n  return;\n}\n\n",
            "current_name": "reallocate_memory_00081f9c",
            "entrypoint": "0x00081f9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00081f9c": "reallocate_memory_00081f9c",
                "param_1": "offset",
                "param_2": "new_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081fac": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "array_constants": 1,
                    "array_ptr": 1,
                    "dynamic_array": 1,
                    "elf_relocation_array": 1,
                    "rel_array": 2,
                    "some_array": 1,
                    "symbol_array": 1
                },
                "FUN_00081fac": {
                    "allocate_memory": 20,
                    "allocate_or_resize_memory": 3,
                    "improved_allocate_memory": 1,
                    "improved_memory_allocation": 1,
                    "resize_memory_block": 1
                },
                "__malloc_lock": {
                    "acquire_lock": 1,
                    "lock": 1,
                    "lock_memory": 3
                },
                "__malloc_unlock": {
                    "release_lock": 1,
                    "unlock": 1,
                    "unlock_memory": 3
                },
                "_free_r": {
                    "custom_free": 1,
                    "free_memory_r": 1,
                    "free_r": 2
                },
                "_malloc_r": {
                    "allocate_memory_r": 1,
                    "allocate_r": 2,
                    "custom_malloc": 1
                },
                "dVar1": {
                    "array_element": 1,
                    "data_var1": 1,
                    "dynamic_var1": 1,
                    "offset": 7,
                    "pointer": 1,
                    "temp": 2,
                    "temp1": 5,
                    "temp_d_var": 1,
                    "temp_dword": 1,
                    "temp_value": 1,
                    "temp_var1": 3,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "tmp": 1,
                    "tmp3": 1,
                    "tmp_variable_1": 1,
                    "var1": 1
                },
                "dword": {
                    "data": 1
                },
                "iVar4": {
                    "i_var1": 1,
                    "index": 1,
                    "index_1": 1,
                    "int_var4": 1,
                    "temp": 1,
                    "temp1": 4,
                    "temp2": 2,
                    "temp3": 4,
                    "temp_i_var": 1,
                    "temp_int1": 1,
                    "temp_var": 2,
                    "temp_var1": 3,
                    "temp_var2": 1,
                    "temp_var3": 3,
                    "temp_var4": 1,
                    "tmp1": 1,
                    "tmp3": 1,
                    "tmp_variable_3": 1,
                    "var4": 1
                },
                "iVar6": {
                    "i_var2": 1,
                    "index2": 1,
                    "index_2": 1,
                    "int_var6": 1,
                    "temp2": 4,
                    "temp3": 2,
                    "temp4": 1,
                    "temp5": 3,
                    "temp_2": 1,
                    "temp_i_var2": 1,
                    "temp_int2": 1,
                    "temp_var2": 4,
                    "temp_var3": 2,
                    "temp_var4": 1,
                    "temp_var5": 2,
                    "temp_var6": 1,
                    "tmp2": 1,
                    "tmp4": 1,
                    "tmp_variable_5": 1,
                    "var6": 1
                },
                "memmove": {
                    "custom_memmove": 1,
                    "move_memory": 1
                },
                "param_1": {
                    "allocator": 2,
                    "allocator_ptr": 1,
                    "context": 1,
                    "mem_pool": 1,
                    "memory_manager": 2,
                    "memory_manager_param": 1,
                    "param": 2,
                    "param1": 1,
                    "param_1": 1,
                    "param_array": 3,
                    "param_array1": 1,
                    "param_out": 1,
                    "param_pointer": 1,
                    "param_ptr": 7,
                    "param_size": 3,
                    "pointer": 1,
                    "ptr_to_mem": 1,
                    "str_ptr": 1
                },
                "param_2": {
                    "buffer": 1,
                    "buffer_ptr": 4,
                    "current_memory_block": 1,
                    "data_array": 1,
                    "existing_memory": 8,
                    "input_ptr": 1,
                    "mem_ptr": 1,
                    "memory_block": 1,
                    "memory_ptr": 1,
                    "old_memory": 1,
                    "old_memory_block": 1,
                    "old_pointer": 1,
                    "old_ptr": 1,
                    "original_buffer": 1,
                    "param2": 1,
                    "param_2": 1,
                    "param_array2": 1,
                    "param_ptr": 1,
                    "pointer": 1,
                    "ptr": 1,
                    "ptr_to_data": 1
                },
                "param_3": {
                    "array_length": 1,
                    "buffer_size": 4,
                    "mem_size": 1,
                    "memory_size": 1,
                    "new_block_size": 1,
                    "new_memory_size": 1,
                    "new_size": 2,
                    "param3": 1,
                    "param_3": 1,
                    "param_count": 1,
                    "requested_size": 1,
                    "required_size": 3,
                    "size": 13
                },
                "piVar10": {
                    "alloc_ptr": 1,
                    "allocated_pointer": 1,
                    "new_array_pointer": 1,
                    "new_buffer": 1,
                    "new_memory_block": 2,
                    "new_memory_ptr": 1,
                    "new_memory_ptr3": 1,
                    "new_pointer": 1,
                    "prev_ptr": 1,
                    "ptr_temp2": 1,
                    "ptr_var10": 1,
                    "result_buffer_ptr": 1,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_array_ptr2": 1,
                    "temp_buffer_ptr": 1,
                    "temp_buffer_ptr2": 2,
                    "temp_pointer2": 3,
                    "temp_ptr2": 6,
                    "temp_var9": 1,
                    "tmp_ptr": 1,
                    "tmp_variable_7": 1
                },
                "piVar2": {
                    "allocated_buffer": 1,
                    "allocated_buffer_ptr": 1,
                    "allocated_memory": 1,
                    "memory_pointer": 1,
                    "new_buffer": 1,
                    "new_buffer_ptr": 2,
                    "new_data_array": 1,
                    "new_memory": 8,
                    "new_memory_block": 2,
                    "new_memory_ptr": 2,
                    "new_pointer": 2,
                    "new_ptr": 4,
                    "ptr_result": 1,
                    "ptr_var2": 1,
                    "result_array": 1,
                    "result_ptr": 2
                },
                "piVar7": {
                    "new_memory_ptr2": 1,
                    "pi_var7": 1,
                    "ptr_temp": 1,
                    "ptr_var7": 1,
                    "temp6": 3,
                    "temp_array": 1,
                    "temp_array_ptr": 1,
                    "temp_buffer": 1,
                    "temp_buffer_ptr": 3,
                    "temp_pointer": 6,
                    "temp_ptr": 7,
                    "temp_ptr1": 2,
                    "temp_var6": 1,
                    "tmp_pointer1": 1,
                    "tmp_variable_6": 1
                },
                "uVar3": {
                    "adjusted_size": 1,
                    "align_size": 1,
                    "block_size": 1,
                    "chunk_size": 1,
                    "length": 2,
                    "new_size": 1,
                    "num_bytes_to_allocate": 1,
                    "offset": 1,
                    "offset2": 1,
                    "size1": 1,
                    "size_aligned": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 4,
                    "temp_size": 1,
                    "temp_u_var": 1,
                    "temp_uint1": 1,
                    "temp_value2": 1,
                    "temp_var1": 1,
                    "temp_var2": 3,
                    "temp_var3": 1,
                    "tmp2": 1,
                    "tmp_variable_2": 1,
                    "var3": 2
                },
                "uVar5": {
                    "block_size": 2,
                    "buffer_size": 1,
                    "buffer_size_alignment": 1,
                    "existing_size": 2,
                    "flags": 1,
                    "old_block_size": 1,
                    "old_size": 4,
                    "size1": 1,
                    "size_aligned": 1,
                    "size_prev": 1,
                    "size_ptr": 1,
                    "size_tag": 1,
                    "size_var": 1,
                    "temp": 1,
                    "temp4": 3,
                    "temp_u_var2": 1,
                    "temp_uint2": 1,
                    "temp_var2": 1,
                    "temp_var4": 2,
                    "tmp_variable_4": 1,
                    "u_var5": 1,
                    "var5": 2
                },
                "uVar8": {
                    "adjusted_size": 2,
                    "aligned_old_size": 1,
                    "alloc_size": 1,
                    "allocated_size": 1,
                    "existing_size": 2,
                    "new_block_size_aligned": 1,
                    "new_size": 4,
                    "new_size_aligned": 1,
                    "new_size_var": 1,
                    "original_size": 1,
                    "remaining_size": 3,
                    "size": 1,
                    "size2": 2,
                    "size_diff": 1,
                    "size_remaining": 1,
                    "temp7": 2,
                    "temp_u_var3": 1,
                    "temp_uint3": 1,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "var8": 2
                },
                "uVar9": {
                    "adjusted_size": 2,
                    "aligned_buffer_size": 2,
                    "aligned_size": 14,
                    "aligned_size_var": 1,
                    "calculated_size": 1,
                    "new_align": 1,
                    "size_aligned2": 1,
                    "size_rounded": 1,
                    "size_to_allocate": 1,
                    "temp8": 1,
                    "temp_u_var4": 1,
                    "temp_uint4": 1,
                    "temp_var5": 1,
                    "temp_var7": 1,
                    "temp_var8": 1,
                    "var9": 1
                }
            },
            "called": [
                "FUN_00081f98",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00081e34",
                "FUN_00081f94"
            ],
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "code": "\nint * allocate_or_resize_memory_00081fac(undefined4 *param_ptr,int *existing_memory,uint size)\n\n{\n  data offset;\n  int *new_memory;\n  uint temp2;\n  int temp1;\n  uint old_size;\n  int temp2;\n  int *temp_ptr;\n  uint new_size;\n  uint aligned_size;\n  int *temp_ptr2;\n  \n  if (existing_memory == (int *)0x0) {\n    new_memory = (int *)allocate_r(param_ptr,size);\n    return new_memory;\n  }\n  lock_memory();\n  old_size = existing_memory[-1];\n  new_size = old_size & 0xfffffffc;\n  new_memory = existing_memory + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_00082078;\n  }\n  if (aligned_size < size) {\nLAB_00082078:\n    *param_ptr = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)new_size < (int)aligned_size) {\n    offset = (int)new_memory + new_size;\n    if (rel_array[141].r_info == offset) {\n      temp2 = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n      offset = rel_array[141].r_info;\n      if ((int)(aligned_size + 0x10) <= (int)(temp2 + new_size)) {\n        rel_array[141].r_info = (int)new_memory + aligned_size;\n        *(uint *)(rel_array[141].r_info + 4) = (temp2 + new_size) - aligned_size | 1;\n        existing_memory[-1] = aligned_size | existing_memory[-1] & 1U;\n        unlock_memory(param_ptr);\n        return existing_memory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(offset + 4) & 0xfffffffe) + offset + 4) & 1) == 0) {\n      temp2 = *(uint *)(offset + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp2 + new_size)) {\n        temp2 = *(int *)(offset + 0xc);\n        temp1 = *(int *)(offset + 8);\n        *(int *)(temp1 + 0xc) = temp2;\n        *(int *)(temp2 + 8) = temp1;\n        new_size = temp2 + new_size;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      temp2 = 0;\n      offset = 0;\n    }\n    if (-1 < (int)(old_size << 0x1f)) {\n      temp_ptr2 = (int *)((int)new_memory - existing_memory[-2]);\n      old_size = (temp_ptr2[1] & 0xfffffffcU) + new_size;\n      if (offset != 0) {\n        if (offset == rel_array[141].r_info) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp2 + old_size)) {\n            new_memory = temp_ptr2 + 2;\n            temp1 = *new_memory;\n            temp2 = temp_ptr2[3];\n            new_size = new_size - 4;\n            *(int *)(temp1 + 0xc) = temp2;\n            *(int *)(temp2 + 8) = temp1;\n            if (new_size < 0x25) {\n              temp_ptr = new_memory;\n              if (0x13 < new_size) {\n                temp_ptr2[2] = *existing_memory;\n                temp_ptr2[3] = existing_memory[1];\n                if (new_size < 0x1c) {\n                  existing_memory = existing_memory + 2;\n                  temp_ptr = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = existing_memory[2];\n                  temp_ptr2[5] = existing_memory[3];\n                  if (new_size == 0x24) {\n                    temp_ptr2[6] = existing_memory[4];\n                    temp_ptr = existing_memory + 5;\n                    existing_memory = existing_memory + 6;\n                    temp_ptr2[7] = *temp_ptr;\n                    temp_ptr = temp_ptr2 + 8;\n                  }\n                  else {\n                    existing_memory = existing_memory + 4;\n                    temp_ptr = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *temp_ptr = *existing_memory;\n              temp_ptr[1] = existing_memory[1];\n              temp_ptr[2] = existing_memory[2];\n            }\n            else {\n              move_memory(new_memory,existing_memory);\n            }\n            rel_array[141].r_info = (int)temp_ptr2 + aligned_size;\n            *(uint *)(rel_array[141].r_info + 4) = (temp2 + old_size) - aligned_size | 1;\n            temp_ptr2[1] = aligned_size | temp_ptr2[1] & 1U;\n            unlock_memory(param_ptr);\n            return new_memory;\n          }\n        }\n        else {\n          temp2 = temp2 + old_size;\n          if ((int)aligned_size <= (int)temp2) {\n            temp2 = *(int *)(offset + 0xc);\n            temp1 = *(int *)(offset + 8);\n            *(int *)(temp1 + 0xc) = temp2;\n            *(int *)(temp2 + 8) = temp1;\n            temp_ptr = temp_ptr2 + 2;\n            temp1 = *temp_ptr;\n            temp2 = temp_ptr2[3];\n            old_size = new_size - 4;\n            *(int *)(temp1 + 0xc) = temp2;\n            *(int *)(temp2 + 8) = temp1;\n            new_size = temp2;\n            if (old_size < 0x25) {\n              new_memory = temp_ptr;\n              if (0x13 < old_size) {\n                temp_ptr2[2] = *existing_memory;\n                temp_ptr2[3] = existing_memory[1];\n                if (old_size < 0x1c) {\n                  existing_memory = existing_memory + 2;\n                  new_memory = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = existing_memory[2];\n                  temp_ptr2[5] = existing_memory[3];\n                  if (old_size == 0x24) {\n                    temp_ptr2[6] = existing_memory[4];\n                    new_memory = existing_memory + 5;\n                    existing_memory = existing_memory + 6;\n                    temp_ptr2[7] = *new_memory;\n                    new_memory = temp_ptr2 + 8;\n                  }\n                  else {\n                    existing_memory = existing_memory + 4;\n                    new_memory = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *new_memory = *existing_memory;\n              new_memory[1] = existing_memory[1];\n              new_memory[2] = existing_memory[2];\n              old_size = temp_ptr2[1];\n              new_memory = temp_ptr2;\n              existing_memory = temp_ptr;\n            }\n            else {\n              move_memory(temp_ptr,existing_memory);\n              old_size = temp_ptr2[1];\n              new_memory = temp_ptr2;\n              existing_memory = temp_ptr;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)old_size) {\n        temp_ptr = temp_ptr2 + 2;\n        temp1 = *temp_ptr;\n        temp2 = temp_ptr2[3];\n        temp2 = new_size - 4;\n        *(int *)(temp1 + 0xc) = temp2;\n        *(int *)(temp2 + 8) = temp1;\n        new_size = old_size;\n        if (temp2 < 0x25) {\n          new_memory = temp_ptr;\n          if (0x13 < temp2) {\n            temp_ptr2[2] = *existing_memory;\n            temp_ptr2[3] = existing_memory[1];\n            if (temp2 < 0x1c) {\n              existing_memory = existing_memory + 2;\n              new_memory = temp_ptr2 + 4;\n            }\n            else {\n              temp_ptr2[4] = existing_memory[2];\n              temp_ptr2[5] = existing_memory[3];\n              if (temp2 == 0x24) {\n                temp_ptr2[6] = existing_memory[4];\n                new_memory = existing_memory + 5;\n                existing_memory = existing_memory + 6;\n                temp_ptr2[7] = *new_memory;\n                new_memory = temp_ptr2 + 8;\n              }\n              else {\n                existing_memory = existing_memory + 4;\n                new_memory = temp_ptr2 + 6;\n              }\n            }\n          }\n          *new_memory = *existing_memory;\n          new_memory[1] = existing_memory[1];\n          new_memory[2] = existing_memory[2];\n          old_size = temp_ptr2[1];\n          new_memory = temp_ptr2;\n          existing_memory = temp_ptr;\n        }\n        else {\n          move_memory(temp_ptr,existing_memory);\n          old_size = temp_ptr2[1];\n          new_memory = temp_ptr2;\n          existing_memory = temp_ptr;\n        }\n        goto LAB_00082088;\n      }\n    }\n    temp_ptr2 = (int *)allocate_r(param_ptr,size);\n    if (temp_ptr2 == (int *)0x0) goto LAB_000820a0;\n    old_size = existing_memory[-1];\n    if (temp_ptr2 + -2 != (int *)((old_size & 0xfffffffe) + (int)new_memory)) {\n      new_size = new_size - 4;\n      if (new_size < 0x25) {\n        new_memory = existing_memory;\n        temp_ptr = temp_ptr2;\n        if (0x13 < new_size) {\n          *temp_ptr2 = *existing_memory;\n          temp_ptr2[1] = existing_memory[1];\n          if (new_size < 0x1c) {\n            new_memory = existing_memory + 2;\n            temp_ptr = temp_ptr2 + 2;\n          }\n          else {\n            temp_ptr2[2] = existing_memory[2];\n            temp_ptr2[3] = existing_memory[3];\n            if (new_size == 0x24) {\n              temp_ptr2[4] = existing_memory[4];\n              temp_ptr2[5] = existing_memory[5];\n              new_memory = existing_memory + 6;\n              temp_ptr = temp_ptr2 + 6;\n            }\n            else {\n              new_memory = existing_memory + 4;\n              temp_ptr = temp_ptr2 + 4;\n            }\n          }\n        }\n        *temp_ptr = *new_memory;\n        temp_ptr[1] = new_memory[1];\n        temp_ptr[2] = new_memory[2];\n      }\n      else {\n        move_memory(temp_ptr2,existing_memory);\n      }\n      free_r(param_ptr,existing_memory);\n      goto LAB_000820a0;\n    }\n    new_size = new_size + (temp_ptr2[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  temp2 = new_size - aligned_size;\n  temp_ptr2 = existing_memory;\n  if (temp2 < 0x10) {\n    new_memory[1] = old_size & 1 | new_size;\n    *(uint *)((int)new_memory + new_size + 4) = *(uint *)((int)new_memory + new_size + 4) | 1;\n  }\n  else {\n    new_memory[1] = old_size & 1 | aligned_size;\n    *(uint *)((int)new_memory + aligned_size + 4) = temp2 | 1;\n    *(uint *)((int)new_memory + temp2 + aligned_size + 4) = *(uint *)((int)new_memory + temp2 + aligned_size + 4) | 1;\n    free_r(param_ptr,(int)new_memory + aligned_size + 8);\n  }\nLAB_000820a0:\n  unlock_memory(param_ptr);\n  return temp_ptr2;\n}\n\n",
            "current_name": "allocate_or_resize_memory_00081fac",
            "entrypoint": "0x00081fac",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081fac": "allocate_or_resize_memory_00081fac",
                "__malloc_lock": "lock_memory",
                "__malloc_unlock": "unlock_memory",
                "_free_r": "free_r",
                "_malloc_r": "allocate_r",
                "dVar1": "offset",
                "dword": "data",
                "iVar4": "temp1",
                "iVar6": "temp2",
                "memmove": "move_memory",
                "param_1": "param_ptr",
                "param_2": "existing_memory",
                "param_3": "size",
                "piVar10": "temp_ptr2",
                "piVar2": "new_memory",
                "piVar7": "temp_ptr",
                "uVar3": "temp2",
                "uVar5": "old_size",
                "uVar8": "new_size",
                "uVar9": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008236c": {
            "additional_data": {
                "DAT_20071244": {
                    "allocated_memory": 1
                },
                "FUN_00080e88": {
                    "check_allocation_status": 1
                },
                "FUN_0008236c": {
                    "allocate_memory": 30,
                    "allocate_memory_block": 1
                },
                "_sbrk": {
                    "increment_heap": 1
                },
                "iVar1": {
                    "allocated_address": 2,
                    "allocated_block": 1,
                    "allocated_memory": 4,
                    "allocated_size": 1,
                    "allocation_result": 11,
                    "allocation_status": 1,
                    "memory_address": 3,
                    "memory_allocation_result": 1,
                    "new_memory_ptr": 1,
                    "result": 3
                },
                "param_1": {
                    "allocated_memory": 1,
                    "memory_address": 3,
                    "output": 1,
                    "output_address": 2,
                    "output_buffer": 1,
                    "output_pointer": 4,
                    "output_ptr": 3,
                    "pointer_to_returned_memory": 1,
                    "result": 4,
                    "result_pointer": 3,
                    "result_ptr": 8
                },
                "param_2": {
                    "allocation_size": 2,
                    "bytes_to_allocate": 1,
                    "mem_size": 1,
                    "memory_size": 4,
                    "size": 22,
                    "size_of_memory_to_allocate": 1
                }
            },
            "called": [
                "FUN_00080e88"
            ],
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "code": "\nvoid allocate_memory_block_0008236c(int *result_ptr,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_20071244 = 0;\n  allocation_result = increment_heap(size);\n  if ((allocation_result == -1) && (DAT_20071244 != 0)) {\n    *result_ptr = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "allocate_memory_block_0008236c",
            "entrypoint": "0x0008236c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008236c": "allocate_memory_block_0008236c",
                "_sbrk": "increment_heap",
                "iVar1": "allocation_result",
                "param_1": "result_ptr",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082390": {
            "additional_data": {
                "FUN_00082390": {
                    "compare_and_rank": 2,
                    "compare_arrays": 8,
                    "compare_buffers": 3,
                    "compare_byte_arrays": 1,
                    "compare_u_int_arrays": 2,
                    "compare_uint_arrays": 9,
                    "compare_unsigned_integers": 6
                },
                "LAB_00082410": {
                    "compare_bytes": 1
                },
                "LAB_0008258e": {
                    "compare_buffers_end": 1
                },
                "LAB_0008259a": {
                    "compare_buffers_end2": 1
                },
                "LAB_0008259e": {
                    "compare_buffers_end3": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 1
                },
                "iVar2": {
                    "comparison_result": 2,
                    "length": 1,
                    "result": 26
                },
                "param_1": {
                    "array1": 23,
                    "buffer1": 3,
                    "data1": 1,
                    "first_array": 1,
                    "input1": 2,
                    "input_data_1": 1
                },
                "param_2": {
                    "array2": 23,
                    "buffer2": 3,
                    "data2": 1,
                    "input2": 2,
                    "input_data_2": 1,
                    "second_array": 1
                },
                "puVar1": {
                    "p1": 1,
                    "ptr1": 26,
                    "ptr_array1": 1,
                    "ptr_data1": 1
                },
                "puVar3": {
                    "p2": 1,
                    "ptr2": 26,
                    "ptr_array2": 1,
                    "ptr_data2": 1
                },
                "puVar4": {
                    "p3": 1,
                    "ptr3": 25,
                    "ptr_byte": 1,
                    "temp": 1,
                    "temp_ptr": 1
                },
                "uVar10": {
                    "temp_var": 1
                },
                "uVar11": {
                    "shift": 1
                },
                "uVar12": {
                    "shifted_val1": 1
                },
                "uVar13": {
                    "shifted_val2": 1
                },
                "uVar5": {
                    "array1_align": 1,
                    "array1_size": 1,
                    "byte1": 1,
                    "first_array_alignment": 1,
                    "len1": 3,
                    "length1": 1,
                    "mask": 1,
                    "remaining_bytes1": 1,
                    "temp1": 5,
                    "temp_uint1": 1,
                    "temp_val1": 1,
                    "tmp1": 1,
                    "uval1": 1,
                    "val1": 7,
                    "value1": 3
                },
                "uVar6": {
                    "byte1": 3,
                    "byte2": 1,
                    "first_array_value": 1,
                    "remaining_bytes2": 1,
                    "temp1": 2,
                    "temp2": 5,
                    "temp_uint2": 1,
                    "temp_val2": 1,
                    "tmp2": 1,
                    "uval2": 1,
                    "val1": 3,
                    "val2": 7,
                    "value2": 2
                },
                "uVar7": {
                    "byte1": 1,
                    "byte2": 3,
                    "byte3": 1,
                    "hash1": 1,
                    "second_array_value": 1,
                    "temp2": 2,
                    "temp3": 5,
                    "temp_uint3": 1,
                    "tmp3": 1,
                    "uval3": 1,
                    "val1": 1,
                    "val2": 3,
                    "val3": 6,
                    "value3": 2
                },
                "uVar8": {
                    "byte2": 1,
                    "byte3": 2,
                    "byte4": 1,
                    "hash2": 1,
                    "temp1": 1,
                    "temp3": 2,
                    "temp4": 5,
                    "temp_uint4": 1,
                    "temp_value1": 1,
                    "tmp4": 1,
                    "uval4": 1,
                    "val2": 1,
                    "val3": 2,
                    "val4": 6,
                    "value2": 1,
                    "value4": 2
                },
                "uVar9": {
                    "byte4": 1,
                    "byte5": 1,
                    "comparison": 1,
                    "hash3": 1,
                    "mask": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp4": 2,
                    "temp5": 5,
                    "temp_uint5": 1,
                    "temp_val3": 1,
                    "temp_value2": 1,
                    "tmp5": 1,
                    "uval5": 1,
                    "val4": 1,
                    "val5": 6,
                    "value5": 2,
                    "var1": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000815b8"
            ],
            "code": "\nint compare_uint_arrays_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint val1;\n  uint val2;\n  uint val3;\n  uint val4;\n  uint val5;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      val1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\ncompare_bytes:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        val2 = val1 >> 0x10 & 0xff;\n        result = val2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (val2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          val2 = val1 >> 8 & 0xff;\n          result = val2 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (val2 == 0) {\n            return 0;\n          }\n          goto compare_bytes;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (val1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (val1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    val1 = (uint)array2 & 3;\n    if (val1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (val1 == 2) {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x10;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffff;\n          if ((val4 & 0x8080) != 0 || val2 != val1) goto compare_buffers_end;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else if (val1 < 2) {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 8;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xffffff;\n          if ((val4 & 0x808080) != 0 || val2 != val1) goto compare_buffers_end;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      else {\n        val1 = *array2;\n        do {\n          array2 = array2 + 1;\n          val3 = *ptr1;\n          val1 = val1 >> 0x18;\n          val4 = val3 + 0xfefefeff & ~val3;\n          val5 = val4 & 0x80808080;\n          val2 = val3 & 0xff;\n          if ((val4 & 0x80) != 0 || val2 != val1) goto compare_buffers_end;\n          val1 = *array2;\n          val2 = val2 ^ val3;\n          val3 = val1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (val5 == 0 && val2 == val3);\n      }\n      val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 |\n              val2 >> 0x18;\n      val1 = (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 | val3 >> 0x18;\n      goto compare_buffers_end3;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      val1 = *ptr1;\n      ptr2 = array2 + 1;\n      val3 = *array2;\n      val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n      if (val1 != val3 || val5 != 0) {\ncompare_buffers_end2:\n        val2 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 |\n                val1 >> 0x18;\n        val1 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n                val3 >> 0x18;\n        goto compare_buffers_end3;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      val1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        val2 = *array1;\n        val3 = array1[1];\n        val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n        if (val2 != val1 || val5 != 0) goto compare_buffers_end;\n        val4 = *ptr1;\n        val1 = ptr1[1];\n        val5 = val3 + 0xfefefeff & ~val3 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (val3 == val4 && val5 == 0);\n      val2 = val3 << 0x18 | (val3 >> 8 & 0xff) << 0x10 | (val3 >> 0x10 & 0xff) << 8 |\n              val3 >> 0x18;\n      val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 |\n              val4 >> 0x18;\n      goto compare_buffers_end3;\n    }\n  }\n  do {\n    val1 = *array1;\n    val2 = array1[1];\n    val3 = *array2;\n    val4 = array2[1];\n    val5 = val1 + 0xfefefeff & ~val1 & 0x80808080;\n    if (val1 != val3 || val5 != 0) goto compare_buffers_end2;\n    val5 = val2 + 0xfefefeff & ~val2 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (val2 == val4 && val5 == 0);\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val4 << 0x18 | (val4 >> 8 & 0xff) << 0x10 | (val4 >> 0x10 & 0xff) << 8 | val4 >> 0x18;\ncompare_buffers_end3:\n  val3 = val5 << 0x18 | (val5 >> 8 & 0xff) << 0x10 | (val5 >> 0x10 & 0xff) << 8 | val5 >> 0x18;\n  if (val3 != 0) {\n    val3 = 0x18 - leading_zero_count(val3);\n    val2 = val2 >> (val3 & 0xff);\n    val1 = val1 >> (val3 & 0xff);\n  }\n  result = 1;\n  if (val2 <= val1) {\n    result = -(uint)(val2 < val1);\n  }\n  return result;\ncompare_buffers_end:\n  val2 = val2 << 0x18 | (val2 >> 8 & 0xff) << 0x10 | (val2 >> 0x10 & 0xff) << 8 | val2 >> 0x18;\n  val1 = val1 << 0x18 | (val1 >> 8 & 0xff) << 0x10 | (val1 >> 0x10 & 0xff) << 8 | val1 >> 0x18;\n  goto compare_buffers_end3;\n}\n\n",
            "current_name": "compare_uint_arrays_00082390",
            "entrypoint": "0x00082390",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082390": "compare_uint_arrays_00082390",
                "LAB_00082410": "compare_bytes",
                "LAB_0008258e": "compare_buffers_end",
                "LAB_0008259a": "compare_buffers_end2",
                "LAB_0008259e": "compare_buffers_end3",
                "LZCOUNT": "leading_zero_count",
                "iVar2": "result",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "val1",
                "uVar6": "val2",
                "uVar7": "val3",
                "uVar8": "val4",
                "uVar9": "val5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000825cc": {
            "additional_data": {
                "FUN_000825cc": {
                    "copy_and_reverse_string": 1,
                    "copy_and_terminate_string": 1,
                    "copy_string": 22,
                    "copy_string_with_alignment_check": 2,
                    "copy_string_with_length_bytes": 1,
                    "copy_strings": 1,
                    "copy_strings_with_null_terminator": 1,
                    "string_copy": 1
                },
                "LAB_00082630": {
                    "check_alignment": 2,
                    "end_loop": 1
                },
                "bVar8": {
                    "is_aligned": 1,
                    "is_byte_zero": 2,
                    "is_char_zero": 2,
                    "is_end_of_string": 1,
                    "is_first_byte_null": 1,
                    "is_short_zero": 1,
                    "is_small_string": 1,
                    "is_word_zero": 1,
                    "is_zero": 9,
                    "is_zero_byte": 11,
                    "is_zero_char": 1
                },
                "cVar1": {
                    "char_value": 1,
                    "curr_char": 1,
                    "current_char": 28,
                    "current_character": 1
                },
                "param_1": {
                    "dest": 17,
                    "dest_string": 1,
                    "destination": 11,
                    "destination_buffer": 2
                },
                "param_2": {
                    "source": 11,
                    "source_buffer": 2,
                    "src": 17,
                    "src_string": 1
                },
                "puVar3": {
                    "current_pointer": 1,
                    "next_element": 1,
                    "next_int": 1,
                    "next_pointer": 3,
                    "next_ptr": 2,
                    "next_short_ptr": 1,
                    "next_source": 2,
                    "next_source_pointer": 1,
                    "next_src": 3,
                    "next_src_ptr1": 1,
                    "next_uint_ptr": 1,
                    "next_word": 1,
                    "next_word_ptr": 1,
                    "ptr": 1,
                    "source_ptr": 3,
                    "src_ptr": 3,
                    "temp_pointer": 1,
                    "temp_ptr": 3,
                    "temp_ptr1": 1
                },
                "puVar4": {
                    "current_pointer": 2,
                    "current_pointer2": 1,
                    "current_ptr": 2,
                    "next_aligned_uint_ptr": 1,
                    "next_byte": 1,
                    "next_byte_ptr": 1,
                    "next_char_ptr": 1,
                    "next_dest": 3,
                    "next_destination": 1,
                    "next_element2": 1,
                    "next_ptr": 1,
                    "next_ptr_2": 1,
                    "next_short_pointer": 1,
                    "next_source_aligned": 1,
                    "next_source_pointer_aligned": 1,
                    "next_src_ptr2": 1,
                    "ptr": 1,
                    "ptr2": 1,
                    "short_ptr": 1,
                    "source_ptr2": 3,
                    "src_ptr_aligned": 1,
                    "src_ptr_inc": 1,
                    "src_ptr_incremented": 1,
                    "temp_pointer2": 1,
                    "temp_ptr2": 1
                },
                "puVar7": {
                    "current_dest": 2,
                    "current_element_ptr": 1,
                    "current_pointer3": 1,
                    "dest_pointer": 1,
                    "dest_ptr": 13,
                    "destination_pointer": 3,
                    "destination_ptr": 3,
                    "next_dest_ptr": 2,
                    "next_destination": 1,
                    "next_destination_pointer": 1,
                    "next_int_ptr": 1,
                    "next_uint": 1,
                    "updated_destination_pointer": 1
                },
                "uVar2": {
                    "curr_short": 1,
                    "current_short": 28,
                    "current_u_short": 1,
                    "short_value": 1
                },
                "uVar5": {
                    "curr_uint": 1,
                    "current": 1,
                    "current_byte": 1,
                    "current_dword": 1,
                    "current_element": 1,
                    "current_int": 3,
                    "current_u_int": 6,
                    "current_uint": 5,
                    "current_value": 3,
                    "current_word": 8,
                    "src_value": 1
                },
                "uVar6": {
                    "current_byte": 6,
                    "current_temp": 1,
                    "current_u_int_shifted": 2,
                    "current_uint2": 1,
                    "current_value": 1,
                    "last_byte": 1,
                    "shifted_current": 1,
                    "shifted_int": 2,
                    "shifted_u_int": 1,
                    "shifted_value": 2,
                    "temp": 3,
                    "temp_byte": 1,
                    "temp_element": 1,
                    "temp_u_int": 2,
                    "temp_uint": 4,
                    "temp_value": 1,
                    "temp_word": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008151c",
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "code": "\nvoid copy_string_with_alignment_check_000825cc(uint *dest,uint *src)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *src_ptr;\n  uint *next_dest;\n  uint current_word;\n  uint current_byte;\n  uint *dest_ptr;\n  bool is_zero_byte;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    next_dest = src;\n    if (((uint)src & 1) != 0) {\n      next_dest = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = next_dest;\n    if (((uint)next_dest & 2) != 0) {\n      src = (uint *)((int)next_dest + 2);\n      current_short = *(ushort *)next_dest;\n      is_zero_byte = (current_short & 0xff) == 0;\n      if (is_zero_byte) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        is_zero_byte = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_zero_byte) {\n        return;\n      }\n    }\n  }\n  current_word = *src;\n  next_dest = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto check_alignment;\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    next_dest = src + 2;\n    current_word = src[1];\n  }\n  while( true ) {\n    src_ptr = next_dest + 1;\n    current_byte = *next_dest;\n    dest = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_word;\n    current_word = current_byte;\n    if ((current_byte + 0xfefefeff & ~current_byte & 0x80808080) != 0) break;\n    next_dest = next_dest + 2;\n    current_word = *src_ptr;\n    dest_ptr = dest_ptr + 2;\n    *dest = current_byte;\n  }\ncheck_alignment:\n  do {\n    *(char *)dest = (char)current_word;\n    current_byte = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (current_byte != 0);\n  return;\n}\n\n",
            "current_name": "copy_string_with_alignment_check_000825cc",
            "entrypoint": "0x000825cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000825cc": "copy_string_with_alignment_check_000825cc",
                "LAB_00082630": "check_alignment",
                "bVar8": "is_zero_byte",
                "cVar1": "current_char",
                "param_1": "dest",
                "param_2": "src",
                "puVar3": "src_ptr",
                "puVar4": "next_dest",
                "puVar7": "dest_ptr",
                "uVar2": "current_short",
                "uVar5": "current_word",
                "uVar6": "current_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082688": {
            "additional_data": {
                "FUN_00082688": {
                    "calculate_number_of_leading_zeros": 1,
                    "count_bytes_starting_from_address": 1,
                    "count_leading_zero_bytes": 1,
                    "count_leading_zeroes": 1,
                    "count_leading_zeros": 9,
                    "count_non_zero_bytes": 3,
                    "count_trailing_zeroes": 3,
                    "count_trailing_zeros": 6,
                    "count_zero_bytes": 1,
                    "find_first_non_zero_byte_index": 1,
                    "find_last_nonzero_byte_index": 1,
                    "get_emptiness_count": 1,
                    "get_num_leading_zeros": 1,
                    "reverse_count_leading_zeros": 1
                },
                "bVar4": {
                    "is_byte_zero": 1,
                    "is_value_zero": 1,
                    "is_zero": 27,
                    "is_zero_byte": 2
                },
                "iVar1": {
                    "byte_count": 1,
                    "count": 5,
                    "empty_count": 1,
                    "index": 1,
                    "leading_zero_count": 3,
                    "leading_zeros": 12,
                    "start_index": 1,
                    "trailing_zero_count": 1,
                    "trailing_zeros": 3,
                    "trailing_zeros_count": 3
                },
                "param_1": {
                    "input": 19,
                    "input_data": 1,
                    "input_number": 2,
                    "input_value": 2,
                    "num": 1,
                    "start_address": 1,
                    "unsigned_value": 1,
                    "value": 4
                },
                "puVar2": {
                    "aligned_pointer": 1,
                    "current_address": 1,
                    "data_pointer": 2,
                    "num_ptr": 1,
                    "p": 1,
                    "p_uint": 1,
                    "p_value": 2,
                    "ptr": 19,
                    "ptr_input": 1,
                    "ptr_to_number": 1,
                    "words": 1
                },
                "uVar3": {
                    "current_number": 1,
                    "current_value": 2,
                    "current_word": 1,
                    "data": 3,
                    "mask": 1,
                    "masked_value": 1,
                    "temp_value": 1,
                    "value": 20,
                    "word": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000814f6",
                "FUN_000810a6",
                "FUN_0008289c"
            ],
            "code": "\nint reverse_count_leading_zeros_00082688(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  bool is_zero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leading_zeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leading_zeros = leading_zeros + 4;\n    value = *ptr;\n  }\n  is_zero = (value & 0xff) == 0;\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff00) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff0000) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "reverse_count_leading_zeros_00082688",
            "entrypoint": "0x00082688",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082688": "reverse_count_leading_zeros_00082688",
                "bVar4": "is_zero",
                "iVar1": "leading_zeros",
                "param_1": "input",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082824": {
            "additional_data": {
                "FUN_00082824": {
                    "write_data_to_file": 11,
                    "write_to_file": 18,
                    "write_to_stream": 2
                },
                "_fputwc_r": {
                    "write_character_to_stream": 1
                },
                "iVar2": {
                    "result": 24,
                    "return_value": 2,
                    "status": 1,
                    "write_result": 4
                },
                "param_1": {
                    "file": 9,
                    "file_descriptor": 2,
                    "file_pointer": 2,
                    "file_ptr": 1,
                    "file_stream": 2,
                    "param_to_write": 1,
                    "stream": 14
                },
                "param_2": {
                    "buffer": 1,
                    "buffer_size": 11,
                    "count": 2,
                    "file_descriptor": 11,
                    "file_handler": 1,
                    "length": 1,
                    "max_size": 1,
                    "num_elements": 1,
                    "num_records": 1,
                    "stream_size": 1
                },
                "param_3": {
                    "buffer": 10,
                    "data": 10,
                    "data_array": 3,
                    "data_buffer": 5,
                    "data_pointer": 1,
                    "data_pointers": 1,
                    "stream_buffer": 1
                },
                "piVar1": {
                    "buffer_pointer": 2,
                    "buffer_ptr": 3,
                    "curr_data": 1,
                    "current_buffer": 7,
                    "current_buffer_ptr": 2,
                    "current_data": 5,
                    "current_data_array": 1,
                    "data_array": 1,
                    "data_array_ptr1": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "index": 1,
                    "p_data": 1,
                    "ptr1": 1,
                    "record": 1
                },
                "piVar3": {
                    "buffer_end": 2,
                    "buffer_ptr": 1,
                    "curr_block_size": 1,
                    "current_buffer_pointer": 1,
                    "current_data_pointer": 1,
                    "current_data_ptr": 1,
                    "current_data_size": 1,
                    "current_position": 1,
                    "current_record": 1,
                    "current_size_ptr": 1,
                    "data_array_ptr2": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "p_remaining_data": 1,
                    "ptr2": 1,
                    "remaining_buffer": 3,
                    "remaining_buffer_ptr": 1,
                    "remaining_buffers": 1,
                    "remaining_data": 5,
                    "remaining_data_array": 1,
                    "remaining_data_ptr": 2,
                    "temp_data_pointer": 1
                },
                "puVar5": {
                    "char_ptr": 1,
                    "current_byte": 1,
                    "current_char": 1,
                    "current_char_ptr": 1,
                    "current_data": 3,
                    "current_data_buffer": 1,
                    "current_data_ptr": 1,
                    "current_element": 3,
                    "current_item": 2,
                    "current_ptr": 1,
                    "current_value": 1,
                    "current_value_pointer": 1,
                    "current_word": 1,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "element_pointer": 2,
                    "p_element": 1,
                    "param_array": 1,
                    "ptr3": 1,
                    "temp_ptr": 1,
                    "word_pointer": 1,
                    "word_ptr": 2
                },
                "uVar4": {
                    "buffer_index": 1,
                    "count": 5,
                    "counter": 7,
                    "index": 6,
                    "item_index": 1,
                    "iteration": 1,
                    "iteration_count": 2,
                    "loop_counter": 3,
                    "write_count": 1,
                    "write_result": 2,
                    "write_status": 2
                },
                "uVar6": {
                    "buffer_size": 7,
                    "bytes_to_write": 1,
                    "curr_data_size": 1,
                    "current_buffer_size": 1,
                    "current_data_length": 1,
                    "current_data_size": 3,
                    "data_length": 1,
                    "data_size": 5,
                    "element_size": 5,
                    "element_value": 1,
                    "num_words": 1,
                    "param_count": 1,
                    "value1": 1,
                    "word": 2
                },
                "uVar7": {
                    "block_count": 1,
                    "buffer_count": 2,
                    "buffer_size": 1,
                    "current_data_size_divided_by4": 1,
                    "data_size_shifted": 1,
                    "data_word_size": 1,
                    "element_count": 3,
                    "loop_count": 2,
                    "loop_counter": 1,
                    "num_buffers": 2,
                    "num_elements": 4,
                    "num_entries": 1,
                    "num_iterations": 1,
                    "num_loops": 1,
                    "shifted_param_count": 1,
                    "shifted_size": 1,
                    "value2": 1,
                    "word_count": 4,
                    "word_size": 1,
                    "words_to_write": 1
                }
            },
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint write_data_to_file_00082824(undefined4 stream,int buffer_size,int **data)\n\n{\n  int *current_buffer;\n  int result;\n  int *remaining_data;\n  uint counter;\n  undefined4 *current_data;\n  uint buffer_size;\n  uint num_elements;\n  \n  if (-1 < *(int *)(buffer_size + 100) << 0x12) {\n    result = __sfvwrite_r();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return result;\n  }\n  remaining_data = data[2];\n  current_buffer = *data;\n  while (remaining_data != (int *)0x0) {\n    buffer_size = current_buffer[1];\n    num_elements = buffer_size >> 2;\n    if (num_elements != 0) {\n      current_data = (undefined4 *)(*current_buffer + -4);\n      counter = 0;\n      do {\n        current_data = current_data + 1;\n        result = write_character_to_stream(stream,*current_data,buffer_size);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (num_elements != counter);\n      remaining_data = data[2];\n    }\n    remaining_data = (int *)((int)remaining_data - (buffer_size & 0xfffffffc));\n    data[2] = remaining_data;\n    current_buffer = current_buffer + 2;\n  }\n  result = 0;\nLAB_00082864:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return result;\n}\n\n",
            "current_name": "write_data_to_file_00082824",
            "entrypoint": "0x00082824",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082824": "write_data_to_file_00082824",
                "_fputwc_r": "write_character_to_stream",
                "iVar2": "result",
                "param_1": "stream",
                "param_2": "buffer_size",
                "param_3": "data",
                "piVar1": "current_buffer",
                "piVar3": "remaining_data",
                "puVar5": "current_data",
                "uVar4": "counter",
                "uVar6": "buffer_size",
                "uVar7": "num_elements"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008289c": {
            "additional_data": {
                "FUN_00082688": {
                    "get_digit_value": 1,
                    "is_digit": 1
                },
                "FUN_00082824": {
                    "write_string": 1,
                    "write_to_buffer": 1
                },
                "FUN_0008289c": {
                    "advanced_print": 1,
                    "format_message": 1,
                    "format_string": 14,
                    "formatted_output": 1,
                    "formatted_string": 2,
                    "generate_formatted_string": 1,
                    "print_formatted_string": 7,
                    "print_formatted_text": 1
                },
                "FUN_000834f0": {
                    "append_char": 1,
                    "convert_int_to_string": 1
                },
                "FUN_0008356c": {
                    "append_string": 1,
                    "vsnprintf_helper": 1
                },
                "FUN_00083888": {
                    "reverse_string": 1
                },
                "FUN_000840f8": {
                    "convert_to_hex": 1
                },
                "FUN_00084530": {
                    "convert_to_int": 1
                },
                "F_0008289c": {
                    "parse_format_string": 1
                },
                "FriendlyFormattedFunctionName": {
                    "format_print": 1
                },
                "args": {
                    "arguments": 1
                },
                "argsSize": {
                    "arguments_size": 1
                },
                "bVar1": {
                    "flag1": 1,
                    "has_field_width": 1,
                    "has_flag": 2,
                    "has_flag_minus": 1,
                    "has_padding": 1,
                    "has_plus": 1,
                    "has_plus_flag": 1,
                    "has_precision": 1,
                    "has_precision_flag": 1,
                    "has_width": 2,
                    "is_arg": 1,
                    "is_int": 1,
                    "is_left_justified": 3,
                    "is_long": 1,
                    "is_minus": 1,
                    "is_settling": 1,
                    "is_type_print": 1,
                    "is_width": 1,
                    "is_width_dynamic": 1,
                    "is_zero_padded": 1,
                    "negative_flag": 1
                },
                "bVar2": {
                    "flag2": 1,
                    "has_flag": 2,
                    "has_flag_plus": 1,
                    "has_minus_flag": 1,
                    "has_sign": 2,
                    "has_space": 1,
                    "has_width": 2,
                    "has_width_flag": 1,
                    "is_always_signed": 1,
                    "is_left_justified": 1,
                    "is_long": 3,
                    "is_long_long": 1,
                    "is_neg_width": 1,
                    "is_negative_flag": 1,
                    "is_plus": 1,
                    "is_positive": 1,
                    "is_precision_dynamic": 1,
                    "is_right_justified": 1,
                    "is_sign_printed": 1,
                    "space_flag": 1
                },
                "bVar26": {
                    "arg_int_is_positive": 1,
                    "flag5": 1,
                    "has_flag_hash": 1,
                    "has_width_flag": 1,
                    "is_long": 1,
                    "is_neg_arg": 1,
                    "is_negative": 5,
                    "is_short_flag": 1,
                    "is_signed": 1,
                    "is_unsigned": 1,
                    "negative": 1,
                    "non_zero_flag": 1,
                    "nonzero_flag": 1,
                    "nonzero_value": 1
                },
                "bVar3": {
                    "alternate_flag": 1,
                    "alternate_form_flag": 1,
                    "flag3": 1,
                    "has_alternate_form": 2,
                    "has_condition": 1,
                    "has_flag": 2,
                    "has_flag_zero": 1,
                    "has_hash": 2,
                    "has_hash_flag": 1,
                    "has_precision": 3,
                    "has_space_flag": 1,
                    "is_alternate_form": 1,
                    "is_numeric_specifier": 1,
                    "is_octal_or_hex": 1,
                    "is_print_sign": 1,
                    "is_space": 1,
                    "is_unsigned": 3,
                    "is_zero_padded": 1
                },
                "bVar5": {
                    "add_leading_zeros": 1,
                    "flag4": 1,
                    "has_flag_space": 1,
                    "has_hash": 1,
                    "has_leading_zeros": 1,
                    "has_pad": 1,
                    "has_precision": 1,
                    "has_sign": 1,
                    "has_width": 1,
                    "has_zero": 1,
                    "has_zero_flag": 2,
                    "is_left_justified": 1,
                    "is_space_flag": 1,
                    "is_true": 1,
                    "is_zero_pad": 2,
                    "is_zero_padded": 5,
                    "is_zero_padding": 1,
                    "zero_pad_flag": 1,
                    "zero_padding": 1
                },
                "cStack_6a": {
                    "buffer": 2,
                    "buffer_overflow_guard": 1,
                    "char_buffer": 1,
                    "char_stack": 2,
                    "char_stack_1": 1,
                    "character2": 1,
                    "end_of_string_pointer": 1,
                    "format_char_buffer": 1,
                    "hex_prefix_char": 1,
                    "overflow_char": 1,
                    "placeholder": 1,
                    "temp": 1,
                    "temp_buffer_char": 1,
                    "temp_char": 4,
                    "temp_char1": 1,
                    "temp_zero_flag": 1,
                    "temporary_char": 1,
                    "tmp_char_arr": 1,
                    "variable_buffer": 1
                },
                "cVar16": {
                    "end_char": 1
                },
                "cVar4": {
                    "char_value": 1,
                    "char_var": 1,
                    "character": 1,
                    "flag": 2,
                    "flag_char": 1,
                    "format_specifier": 1,
                    "numeric_base": 1,
                    "padding_char": 2,
                    "padding_character": 2,
                    "sign_char": 7,
                    "sign_char2": 1,
                    "sign_character": 1,
                    "sign_symbol": 1,
                    "specifier": 1
                },
                "cVar9": {
                    "ch": 1,
                    "char9": 1,
                    "char_literal": 1,
                    "char_value": 2,
                    "char_var2": 1,
                    "character_flag": 1,
                    "conversion_specifier": 1,
                    "current_char": 1,
                    "digit": 3,
                    "digit_char": 2,
                    "format_char": 2,
                    "format_specifier": 1,
                    "precision_char": 2,
                    "specifier": 1,
                    "specifier_char": 1,
                    "temp_char": 2
                },
                "currentSpecifier": {
                    "current_specifier": 1
                },
                "formatSpecifier": {
                    "specifier": 1
                },
                "iVar15": {
                    "argument_idx": 1,
                    "count": 3,
                    "counter": 1,
                    "current_index": 1,
                    "digits": 1,
                    "i": 2,
                    "i_var2": 1,
                    "iterator": 1,
                    "length": 1,
                    "loop_index": 2,
                    "num_args_copy": 1,
                    "num_chars_written": 1,
                    "specifier_index": 1,
                    "temp_counter": 1,
                    "temp_index": 1,
                    "temp_int": 2,
                    "temp_result": 1,
                    "tmp_int": 1,
                    "width": 1
                },
                "iVar17": {
                    "arg_buffer_index": 1,
                    "arg_count": 2,
                    "arg_index": 1,
                    "count2": 1,
                    "counter": 1,
                    "counter2": 1,
                    "format_specifier_index": 1,
                    "i_var3": 1,
                    "num_args": 1,
                    "num_args_copy": 1,
                    "num_chars_written": 1,
                    "param_count": 1,
                    "part_count": 1,
                    "previous_index": 1,
                    "ref_index": 1,
                    "result": 1,
                    "stack_index": 1,
                    "temp_int2": 1,
                    "temp_integer": 1,
                    "temp_length": 1,
                    "temp_var1": 1
                },
                "iVar19": {
                    "arg_width": 1
                },
                "iVar8": {
                    "arg_count": 1,
                    "counter": 1,
                    "current_index": 1,
                    "format_specifier_index": 1,
                    "i": 1,
                    "i_var1": 1,
                    "index": 1,
                    "num_args": 2,
                    "result": 13,
                    "retval": 1
                },
                "lVar27": {
                    "arg": 1,
                    "arg_pointer": 1,
                    "arg_value": 1,
                    "combined_arg": 2,
                    "combined_value": 2,
                    "combined_variable": 1,
                    "combined_vars": 1,
                    "concatenated_value": 1,
                    "current_value": 1,
                    "divisor": 1,
                    "long_long_variable": 1,
                    "long_temp": 1,
                    "long_value": 1,
                    "long_var": 1,
                    "numeric_value": 1,
                    "remainder": 1,
                    "temp": 1,
                    "temp_long": 1,
                    "temp_long_long": 1,
                    "tmp_long_long_var": 1,
                    "value": 1
                },
                "local_64": {
                    "args_buffers": 1,
                    "buffer_array": 2,
                    "field_info_array": 1,
                    "format_char_buffers": 1,
                    "format_storage_array": 1,
                    "int_arr_stack": 1,
                    "integer_pointer4": 1,
                    "length_array": 1,
                    "local_buf": 1,
                    "output_buffer_list": 1,
                    "part_buffers": 1,
                    "ptr_stack": 1,
                    "reusable_specifier_list": 1,
                    "temp_arg_list_array": 1,
                    "temp_array": 2,
                    "temp_buffer_array": 1,
                    "temp_pointer_array": 1,
                    "tmp_format_specifier_arr": 1
                },
                "local_68": {
                    "arg_buffers_array": 1,
                    "arg_ptr_buffer": 1,
                    "buffer_ptr": 1,
                    "buffer_ptrs": 1,
                    "char_buffer": 1,
                    "format_args_stack": 1,
                    "integer_star_pointer3": 1,
                    "local_buffer": 1,
                    "part_buffer": 1,
                    "prefix": 1,
                    "stack_variable": 1,
                    "temp_buffer": 1,
                    "temp_char_buffer": 1,
                    "temp_ptr": 1,
                    "temp_var2": 1,
                    "temp_variable": 1,
                    "tmp_arr": 1,
                    "variable_index_array_buffer": 1
                },
                "local_69": {
                    "char_counted": 1,
                    "char_stack_2": 1,
                    "char_var_stack": 1,
                    "digit": 1,
                    "inner_padding_char": 1,
                    "leading_zero_flag": 1,
                    "numeric_padding_char": 1,
                    "padding_char": 2,
                    "temp_bool": 1,
                    "temp_char": 2,
                    "temp_char_array": 1,
                    "temp_padding_flag": 1,
                    "temporary_char2": 1,
                    "undefined": 1,
                    "unsigned_hash": 1,
                    "zero_char": 1,
                    "zero_pad_char": 1,
                    "zero_padding": 1
                },
                "local_90": {
                    "alignment_char": 1,
                    "arg_buffer_padding": 1,
                    "character_threshold": 1,
                    "decimal_char": 1,
                    "field_width": 1,
                    "fill_char": 1,
                    "fill_character": 1,
                    "format_char": 1,
                    "format_specifier": 1,
                    "hexadecimal_conversion": 1,
                    "length_pointer": 1,
                    "null_character": 1,
                    "padding_char": 2,
                    "precision": 1,
                    "precision_char": 1,
                    "sign_char": 1,
                    "specifier_char": 1,
                    "temp_char": 1,
                    "undefined4": 1
                },
                "local_94": {
                    "arg_data_ptr": 1,
                    "arg_pointer_array2": 1,
                    "arg_ptr_arr": 1,
                    "args_ptr_total": 1,
                    "format_arg_buffers": 1,
                    "format_arg_ptrs": 1,
                    "format_buffer": 1,
                    "format_info": 1,
                    "format_part_pointer": 1,
                    "format_pointer": 1,
                    "format_ptr": 1,
                    "integer_star_pointer2": 1,
                    "length_array": 1,
                    "part_list": 1,
                    "prec_length_array": 1,
                    "prefix_buffer_ptr": 1,
                    "prefix_length": 1,
                    "ref_ptr_list": 1,
                    "remaining_arg_buffer": 1,
                    "remaining_format_copy": 1,
                    "remaining_specifier_size": 1,
                    "temp_formatted_length": 1,
                    "total_args": 1,
                    "total_args_size": 1,
                    "total_format_length": 1,
                    "total_variable_index": 1,
                    "total_width": 1,
                    "width_variations_copy": 1
                },
                "local_98": {
                    "arg_array_index": 1,
                    "arg_count": 4,
                    "arg_count_copy": 1,
                    "arg_index": 3,
                    "counter2": 1,
                    "current_arg_index": 1,
                    "current_format_arg_count": 1,
                    "current_format_count": 1,
                    "format_count": 1,
                    "length_counter": 1,
                    "num_args": 5,
                    "num_args_copy": 1,
                    "num_args_processed": 1,
                    "num_specifiers": 1,
                    "part_count": 1,
                    "part_index": 1,
                    "specifier_list_index": 1,
                    "var_count": 1,
                    "variable_index_count": 1
                },
                "local_9c": {
                    "arg_list_ptr": 1,
                    "arg_pointer": 1,
                    "arg_pointers_copy": 1,
                    "arg_pos_ptr": 1,
                    "arg_ptr_list_arr_ptr2": 1,
                    "args_pointer": 1,
                    "conversion_ptr": 1,
                    "current_arg": 1,
                    "current_args": 1,
                    "current_variable_index_array": 1,
                    "field_info": 1,
                    "format_args": 1,
                    "format_args_array": 1,
                    "format_args_copy": 1,
                    "format_args_ptr": 1,
                    "format_args_temp": 1,
                    "format_array": 1,
                    "format_array_pointer": 1,
                    "format_buffer": 1,
                    "integer_star_pointer": 1,
                    "pointer_array": 1,
                    "temp_arg_list": 1,
                    "temp_args_pointer2": 1,
                    "temp_formatter": 1,
                    "temp_pointer2": 1,
                    "temp_pointer_buffer": 1,
                    "temp_specifier_list_ptr": 1
                },
                "local_9f": {
                    "base_specifier": 1,
                    "field_width_trim_char": 1,
                    "flag_character": 1,
                    "hex_char": 1,
                    "is_arg": 1,
                    "is_digit_padding": 1,
                    "is_hexadecimal": 1,
                    "is_zero_padded_char": 1,
                    "leading_zero_char": 1,
                    "num_flags": 1,
                    "padding_char": 4,
                    "precision": 1,
                    "precision_modifier": 1,
                    "prefix_char": 1,
                    "space_char": 1,
                    "undefined": 1,
                    "width_flag": 2
                },
                "local_a0": {
                    "base_prefix": 1,
                    "current_digit": 1,
                    "digit_char": 1,
                    "digit_padding_char": 1,
                    "field_width_modifier": 1,
                    "fill_character": 1,
                    "format_pad_char": 1,
                    "leading_zero_char": 1,
                    "numeric_padding_char": 1,
                    "pad_char": 1,
                    "padding": 1,
                    "padding_char": 5,
                    "undefined": 1,
                    "zero_char": 2,
                    "zero_character": 1,
                    "zero_flag": 2,
                    "zero_padded_char": 1,
                    "zero_padding_char": 2
                },
                "local_a1": {
                    "alignment_char": 2,
                    "character1": 1,
                    "current_char": 2,
                    "current_format": 1,
                    "current_format_char": 1,
                    "current_modifier": 1,
                    "current_padding_char": 2,
                    "current_sign": 1,
                    "flag_char": 1,
                    "flag_char1": 1,
                    "last_format_char": 1,
                    "modifier": 1,
                    "padding_char": 1,
                    "prefix": 1,
                    "sign": 2,
                    "sign_char": 5,
                    "sign_character": 1,
                    "sign_flag": 2,
                    "sign_specifier": 1
                },
                "local_c0": {
                    "char_buffer": 1,
                    "char_ptr": 2,
                    "char_start": 1,
                    "character_pointer1": 1,
                    "conversion": 1,
                    "conversion_buffer": 1,
                    "current_modifier_pointer": 1,
                    "digit_chars": 1,
                    "digits": 6,
                    "digits_arr": 1,
                    "format_string": 1,
                    "hex_char_set": 1,
                    "hex_digits": 1,
                    "hexadecimal_characters": 1,
                    "hexadecimal_digits": 1,
                    "num_buffer": 3,
                    "numeric_chars": 1,
                    "str": 1,
                    "temp_buffer": 1,
                    "zero_array": 1
                },
                "local_c4": {
                    "arg_count": 1,
                    "count": 2,
                    "formatted_length": 1,
                    "formatted_size": 1,
                    "formatted_string_size": 2,
                    "num_chars_written": 2,
                    "num_written": 2,
                    "position": 1,
                    "print_size": 1,
                    "printed_chars": 1,
                    "result": 5,
                    "result_length": 1,
                    "result_size": 1,
                    "temp_counter2": 1,
                    "total_char_count": 1,
                    "total_length": 4,
                    "total_size": 1
                },
                "local_c8": {
                    "arg_list_ptr": 4,
                    "arg_pointer_array": 2,
                    "arg_pointer_list": 1,
                    "arg_pointers": 1,
                    "arg_ptr": 1,
                    "arg_ptr_list": 2,
                    "arg_ptrs": 1,
                    "args": 1,
                    "args_pointer": 1,
                    "args_pointer_buffer": 1,
                    "args_ptr": 3,
                    "args_ptr_ptr": 1,
                    "current_arg_ptr": 2,
                    "current_pointer_arg": 1,
                    "current_pointer_array": 1,
                    "double_pointer_array": 1,
                    "format_args": 1,
                    "format_string_index_pointer": 1,
                    "int_pointer_pointer": 1,
                    "param_4": 1
                },
                "local_d4": {
                    "adjusted_width": 1,
                    "arg_lengths": 1,
                    "args_buffer": 1,
                    "asterisk_pointer_array": 1,
                    "current_format": 1,
                    "last_format_specifier": 1,
                    "max_digits": 1,
                    "maximum_arg_count": 1,
                    "output_ptr": 1,
                    "prec_arg_array": 1,
                    "remaining_arg_buffer": 2,
                    "remaining_format_or_precision": 1,
                    "remaining_size": 2,
                    "remaining_specifier_length_var": 1,
                    "remaining_width": 1,
                    "str_length": 1,
                    "temp_array2": 1,
                    "temporary_state": 1,
                    "total_arg_ptr_list_size": 1,
                    "total_format_length": 1,
                    "total_formatted_count": 1,
                    "total_length": 1,
                    "total_param_size": 1,
                    "total_width": 1,
                    "var_arg_length": 1,
                    "width_variations": 1
                },
                "local_dc": {
                    "adjusted_precision": 1,
                    "arg_count": 1,
                    "buffer_lengths": 1,
                    "combined_value_temp": 1,
                    "current_arg_buffer": 2,
                    "current_arg_count": 1,
                    "current_arg_ptr_list_size": 1,
                    "current_param_size": 1,
                    "digit_count": 1,
                    "formatted_count": 1,
                    "formatted_string": 1,
                    "length_total": 1,
                    "max_args": 1,
                    "max_count": 1,
                    "max_field_width_or_precision": 1,
                    "max_width": 4,
                    "num_digits": 2,
                    "num_zero_padding": 1,
                    "remaining_format": 1,
                    "temp_array1": 1,
                    "temp_length_array": 1,
                    "temp_max_length": 1,
                    "total_length": 1
                },
                "param_1": {
                    "arg1": 2,
                    "buffer": 17,
                    "buffer_size": 1,
                    "destination": 1,
                    "format_string": 2,
                    "formatter": 1,
                    "input": 1,
                    "message": 1,
                    "output_buffer": 1,
                    "output_buffer_size": 1,
                    "param1": 1,
                    "str_buffer": 1
                },
                "param_1Out": {
                    "buffer_length": 1
                },
                "param_2": {
                    "another_parameter": 1,
                    "arg2": 2,
                    "arg_index_pointer": 1,
                    "args_offset": 1,
                    "buffer_size": 3,
                    "format": 8,
                    "format_length": 1,
                    "format_specifier": 2,
                    "format_str": 1,
                    "format_string": 5,
                    "format_string_len": 1,
                    "format_string_size": 1,
                    "param": 1,
                    "param2": 1,
                    "size": 1
                },
                "param_2Out": {
                    "num_char_written": 1
                },
                "param_3": {
                    "arg3": 1,
                    "arg_list": 3,
                    "args": 11,
                    "args_list": 1,
                    "arguments": 1,
                    "dynamic_width": 1,
                    "format": 6,
                    "format_arguments": 1,
                    "input_array": 1,
                    "pointer_to_pointer": 1,
                    "prefix_buffer": 1,
                    "string_modifiers": 1,
                    "var_args": 1
                },
                "param_3Out": {
                    "max_buffer_length": 1
                },
                "param_4": {
                    "arg4": 1,
                    "arg_list": 2,
                    "arg_list_size": 1,
                    "arg_pointer": 1,
                    "arg_ptr": 2,
                    "argptr": 1,
                    "args": 7,
                    "args_count": 1,
                    "args_end": 1,
                    "args_list_ptr": 1,
                    "args_pointer": 1,
                    "args_ptr": 2,
                    "args_size": 1,
                    "double_pointer": 1,
                    "dynamic_precision": 1,
                    "extra_args": 1,
                    "locale_info": 1,
                    "param_4": 1,
                    "param_array": 1,
                    "va_args": 1,
                    "va_list": 1
                },
                "param_4Out": {
                    "is_dynamic": 1
                },
                "param_5": {
                    "buffer_pointer": 1
                },
                "param_6": {
                    "format_string_pointer": 1
                },
                "piVar12": {
                    "int_array": 1
                },
                "piVar19": {
                    "arg_int": 1,
                    "arg_pointer2": 1,
                    "arg_ptr": 5,
                    "arg_value": 2,
                    "int_arg": 1,
                    "int_pointer": 1,
                    "int_ptr": 1,
                    "int_val_ptr": 1,
                    "int_var_ptr1": 1,
                    "integer_pointer2": 1,
                    "numeric_value_ptr": 1,
                    "part_arg": 1,
                    "pointer_arg": 1,
                    "ptr": 1,
                    "var8": 1
                },
                "piVar22": {
                    "arg_int2": 1,
                    "arg_pointer4": 1,
                    "arg_ptr": 1,
                    "arg_ptr2": 1,
                    "has_sign_char": 1,
                    "int_arg": 1,
                    "int_pointer": 1,
                    "int_var_ptr2": 1,
                    "integer_pointer3": 1,
                    "is_negative": 1,
                    "padding_amount_ptr": 1,
                    "pi_var23": 1,
                    "ptr": 1,
                    "second_int_arg": 1,
                    "temp_ptr": 1,
                    "width_ptr": 1
                },
                "piVar7": {
                    "arg": 4,
                    "arg_pointer": 2,
                    "arg_ptr": 6,
                    "arg_ptr_list_arr_ptr1": 1,
                    "current_arg": 2,
                    "int_arg": 1,
                    "int_arg_ptr": 1,
                    "int_pointer": 1,
                    "int_ptr1": 1,
                    "int_val": 1,
                    "integer_variable": 1,
                    "ptr": 1,
                    "var7": 1,
                    "width_arg": 1
                },
                "ppVar12": {
                    "width_arg_ptr": 1
                },
                "ppiVar12": {
                    "ap": 1,
                    "arg_list": 1,
                    "arg_list_ptr": 1,
                    "arg_list_ptr_copy": 1,
                    "arg_pointer": 1,
                    "arg_ptr": 2,
                    "arg_ptr_ptr": 1,
                    "args_pointer": 1,
                    "current_pointer": 1,
                    "double_pointer": 1,
                    "int_pointer_pointer": 1,
                    "next_arg": 1,
                    "pointer_pointer": 1,
                    "pointer_ptr1": 1,
                    "ppi_format_arg": 1,
                    "ppi_var": 1,
                    "pptr": 1,
                    "ptr_pointer_arg": 1,
                    "ptr_ptr": 1,
                    "tmp_ptr_arr": 1
                },
                "ppiVar16": {
                    "temp_param": 1
                },
                "ppiVar18": {
                    "param_size_pointer": 1
                },
                "ppppppiVar10": {
                    "current_specifier": 1
                },
                "ppppppivar20": {
                    "arg_ptr_width": 1
                },
                "pppppppiVar10": {
                    "curr_char_pointer": 1,
                    "current_char": 1,
                    "current_format": 2,
                    "current_format_specifier": 1,
                    "current_param": 1,
                    "current_param_pointer": 1,
                    "current_position": 1,
                    "current_specifier": 1,
                    "format_char": 1,
                    "format_ptr": 2,
                    "format_specifier": 2,
                    "format_specifier_pointer": 1,
                    "format_string_ptr": 2,
                    "format_string_temp": 1,
                    "integer_star_pointer1": 1,
                    "pointer_arr10": 1,
                    "remaining_format_str": 1
                },
                "pppppppiVar16": {
                    "arg_pointer_stack": 1,
                    "field_width_ptr": 1,
                    "integer_star_pointer2": 1,
                    "prefix": 1,
                    "specifier_list_ptr": 1,
                    "temp": 1,
                    "temp_state": 1,
                    "var_arg_pointer": 1
                },
                "pppppppiVar18": {
                    "arg7": 1,
                    "format_ptr_copy": 1,
                    "integer_star_pointer3": 1,
                    "length_diff": 1,
                    "pointer_arr18": 1,
                    "precision_ptr": 1,
                    "remaining_chars": 1,
                    "remaining_format": 5,
                    "remaining_part": 1,
                    "str_len": 1,
                    "str_length_pointer": 1,
                    "temp2": 1,
                    "temp_char_pointer2": 1,
                    "temp_format_ptr": 1
                },
                "pppppppiVar19": {
                    "value_arg": 1
                },
                "pppppppiVar20": {
                    "arg_pointer3": 1,
                    "arg_ptr": 1,
                    "arg_ptr_ptr": 1,
                    "asterisk_pointer": 1,
                    "integer_star_pointer4": 1,
                    "next_part": 1,
                    "pointer_arr20": 1,
                    "ref_ptr": 1,
                    "star_arg": 3,
                    "star_arg_ptr": 2,
                    "width_or_zero_flag": 1,
                    "width_ptr": 1
                },
                "pppppppiVar23": {
                    "format_ptr_copy": 1,
                    "integer_star_pointer5": 1,
                    "part_pointer": 1,
                    "pointer_arr23": 1,
                    "prev_arg_ptr": 1,
                    "remaining_format": 1,
                    "remaining_format2": 1,
                    "remaining_format_copy": 1,
                    "remaining_format_pointer": 1,
                    "remaining_format_str": 1,
                    "ret_arg": 1,
                    "temp3": 1,
                    "temp_arg_ptr": 1,
                    "temp_char_pointer3": 1,
                    "temp_part": 1,
                    "var10": 1
                },
                "pppppppiVar25": {
                    "end_flag_arg": 1,
                    "number_pointer": 1,
                    "temp_arg_pointer": 1,
                    "temp_state": 1
                },
                "pppppppiVar6": {
                    "temp4": 1
                },
                "pppppppivar10": {
                    "format_pos": 1
                },
                "pppppppivar23": {
                    "ptr_diff": 1
                },
                "pppppppivar6": {
                    "arg_pos": 1
                },
                "ppppppppiVar10": {
                    "current_arg": 1
                },
                "ppppppppiVar16": {
                    "arg6": 1,
                    "arg_buffers": 1,
                    "current_arg_buffer": 1,
                    "format_args_ptr": 1,
                    "format_buffer": 1,
                    "format_ptr_copy": 1,
                    "formatted_part": 1,
                    "part_pointer": 1,
                    "pointer_arr16": 1,
                    "temp_arg_list_ptr": 1,
                    "temp_pointer1": 1,
                    "width_prec_array": 1
                },
                "ppppppppiVar18": {
                    "remaining_arg_buffer": 1,
                    "remaining_format": 1,
                    "remaining_specifier_count": 1
                },
                "ppppppppiVar20": {
                    "var9": 1
                },
                "ppppppppiVar23": {
                    "remaining_arg_buffer": 1,
                    "remaining_format_pointer": 1,
                    "remaining_specifier_list": 1
                },
                "ppppppppiVar25": {
                    "arg_list_ptr_copy": 1,
                    "buffer_ptr": 1,
                    "flags": 1,
                    "format_modifier_pointer": 1,
                    "integer_star_pointer6": 1,
                    "pointer_arr25": 1,
                    "precision_ptr": 1,
                    "ptr_ptr": 1,
                    "temp_args_pointer": 1,
                    "temp_buffer": 1,
                    "temp_format_specifier_ptr": 1,
                    "temp_pointer": 1,
                    "var11": 1
                },
                "ppppppppiVar6": {
                    "arg5": 1,
                    "arg_list_ptr": 2,
                    "arg_pointer": 2,
                    "arg_pointers": 1,
                    "arg_ptr_list_arr": 1,
                    "args_pointer": 1,
                    "buffer_pointer": 1,
                    "dynamic_args": 1,
                    "field_info": 1,
                    "format_args": 4,
                    "format_buffer": 1,
                    "format_specifier_list": 1,
                    "format_specifiers": 1,
                    "formatter_state": 1,
                    "integer_pointer": 1,
                    "param_array": 1,
                    "parameters": 1,
                    "part_formatter": 1,
                    "pointer_arr6": 1,
                    "pointer_array": 1,
                    "str_arg_pointer": 1,
                    "variable_index_array": 1
                },
                "ppppvVar18": {
                    "width_prec": 1
                },
                "ppppvVar6": {
                    "arg_pointer_array": 1
                },
                "pppvVar23": {
                    "specifier": 1
                },
                "pppvVar25": {
                    "str_pointer_array": 1
                },
                "ppvVar20": {
                    "specifier_array": 1
                },
                "uParam3": {
                    "arg_flags": 1
                },
                "uParam4": {
                    "arg_width": 1
                },
                "uParam5": {
                    "arg_prec": 1
                },
                "uParam6": {
                    "arg_size": 1
                },
                "uVar11": {
                    "char_count": 1,
                    "digit": 9,
                    "digit_char": 1,
                    "digit_val": 1,
                    "digit_value": 5,
                    "numeric_char_value": 1,
                    "temp": 1,
                    "temp_char_value": 1,
                    "u_var11": 1,
                    "uint_var1": 1,
                    "ushort_variable1": 1
                },
                "uVar13": {
                    "bits": 1,
                    "flag": 1,
                    "flags": 10,
                    "format_flag": 2,
                    "format_flag_bits": 1,
                    "format_flags": 2,
                    "temp": 1,
                    "temp_flag_value": 1,
                    "uint_var2": 1,
                    "ushort_variable2": 1,
                    "width": 1,
                    "width_flags": 2
                },
                "uVar14": {
                    "byte_value": 1,
                    "byte_variable": 1,
                    "ch": 5,
                    "char_code": 2,
                    "char_temp": 1,
                    "character": 1,
                    "current_char": 3,
                    "current_char_code": 1,
                    "flag_char": 1,
                    "format_char": 1,
                    "next_char": 5,
                    "next_format_char": 1,
                    "uint_var3": 1
                },
                "uVar21": {
                    "count": 1,
                    "num": 1,
                    "remaining_specifier_length": 1,
                    "star_arg_value": 1,
                    "star_value": 1,
                    "temp": 1,
                    "temp_flags": 1,
                    "temp_u_int": 1,
                    "temp_uint": 1,
                    "temp_value": 2,
                    "temp_var": 1,
                    "tmp_u_int1": 1,
                    "u_var21": 1,
                    "uint_var4": 1,
                    "uint_variable": 1,
                    "value": 1,
                    "width": 2
                },
                "uVar24": {
                    "digit": 1,
                    "format_ptr_copy": 1,
                    "high_digit": 1,
                    "lower_ret_arg": 1,
                    "numeric_value": 1,
                    "quotient": 2,
                    "temp": 1,
                    "temp_flag_value2": 1,
                    "temp_uint": 1,
                    "temp_uint32": 1,
                    "temp_ushort": 1,
                    "temp_value": 1,
                    "temp_var2": 1,
                    "temp_width": 1,
                    "tmp_undef_var": 1,
                    "u_var24": 1,
                    "u_var_x": 1,
                    "uint_var5": 1
                }
            },
            "called": [
                "FUN_00084530",
                "FUN_000834f0",
                "FUN_00082688",
                "FUN_0008356c",
                "FUN_00083888",
                "FUN_00082824",
                "FUN_000840f8"
            ],
            "calling": [
                "FUN_000834f0",
                "FUN_000817c8",
                "FUN_00081750"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint format_string_0008289c(int buffer,int format,int *******args,int **args)\n\n{\n  bool is_left_justified;\n  bool is_long;\n  bool is_unsigned;\n  char sign_char;\n  bool is_zero_padded;\n  int ********format_args;\n  int *arg_ptr;\n  int result;\n  char digit;\n  int *******format_string_0008289c_ptr;\n  uint digit;\n  int **arg_ptr;\n  uint flags;\n  uint ch;\n  int count;\n  int ********formatted_part;\n  int arg_count;\n  int *******remaining_format;\n  int *arg_ptr;\n  int *******star_arg;\n  uint width;\n  int *width_ptr;\n  int *******temp_char_pointer3;\n  undefined4 quotient;\n  int ********temp_buffer;\n  bool is_negative;\n  longlong combined_value;\n  int *******max_width;\n  int *******remaining_arg_buffer;\n  int **arg_list_ptr;\n  int result;\n  char *digits;\n  char sign_char;\n  undefined padding_char;\n  undefined padding_char;\n  int ********format_args;\n  int num_args;\n  int *******prefix_buffer_ptr;\n  undefined padding_char;\n  char temp_char;\n  undefined temp_char;\n  undefined temp_buffer [4];\n  int *******buffer_array [16];\n  \n  if ((buffer != 0) && (*(int *)(buffer + 0x38) == 0)) {\n    __sinit();\n  }\n  flags = (uint)*(ushort *)(format + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(format + 0xc) = (short)flags;\n    *(uint *)(format + 100) = *(uint *)(format + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(format + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = __swsetup_r(buffer,format);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(format + 0xe)) {\n    result = __sbprintf(buffer,format,args,args);\n    return result;\n  }\nLAB_000828ee:\n  digits = (char *)0x0;\n  prefix_buffer_ptr = (int *******)0x0;\n  num_args = 0;\n  result = 0;\n  format_args = (int ********)temp_buffer;\n  arg_list_ptr = args;\n  format_args = (int ********)temp_buffer;\nLAB_00082902:\n  format_string_0008289c_ptr = args;\n  if ((*(char *)args != '\\0') && (*(char *)args != '%')) {\n    do {\n      format_string_0008289c_ptr = (int *******)((int)format_string_0008289c_ptr + 1);\n      if (*(char *)format_string_0008289c_ptr == '\\0') break;\n    } while (*(char *)format_string_0008289c_ptr != '%');\n    star_arg = (int *******)((int)format_string_0008289c_ptr - (int)args);\n    if (star_arg != (int *******)0x0) {\n      num_args = num_args + 1;\n      prefix_buffer_ptr = (int *******)((int)prefix_buffer_ptr + (int)star_arg);\n      *format_args = args;\n      format_args[1] = star_arg;\n      if (num_args < 8) {\n        format_args = format_args + 2;\n      }\n      else {\n        if (prefix_buffer_ptr == (int *******)0x0) {\n          result = result + (int)star_arg;\n          num_args = 0;\n          format_args = (int ********)temp_buffer;\n          goto LAB_00082952;\n        }\n        result = __sprint_r_part_0(buffer,format,&format_args);\n        format_args = (int ********)temp_buffer;\n        if (result != 0) goto LAB_00083142;\n      }\n      result = result + (int)star_arg;\n    }\n  }\nLAB_00082952:\n  if (*(char *)format_string_0008289c_ptr != '\\0') {\n    sign_char = '\\0';\n    ch = (uint)*(byte *)((int)format_string_0008289c_ptr + 1);\n    flags = 0;\n    is_zero_padded = false;\n    is_long = false;\n    is_left_justified = false;\n    is_unsigned = false;\n    is_negative = false;\n    star_arg = (int *******)0x0;\n    remaining_arg_buffer = (int *******)0xffffffff;\n    args = (int *******)((int)format_string_0008289c_ptr + 1);\nLAB_00082976:\n    args = (int *******)((int)args + 1);\nLAB_0008297a:\n    switch(ch) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (ch != 0) {\n        max_width = (int *******)0x1;\n        remaining_arg_buffer = (int *******)0x1;\n        temp_buffer = (int ********)&padding_char;\n        padding_char = (char)ch;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      is_unsigned = true;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x2a:\n      star_arg = (int *******)*arg_list_ptr;\n      arg_list_ptr = arg_list_ptr + 1;\n      if ((int)star_arg < 0) {\n        star_arg = (int *******)-(int)star_arg;\n        goto switchD_00082984_caseD_2d;\n      }\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x2b:\n      ch = (uint)*(byte *)args;\n      sign_char = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flags = flags | 4;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x2e:\n      ch = (uint)*(byte *)args;\n      format_string_0008289c_ptr = (int *******)((int)args + 1);\n      if (ch == 0x2a) {\n        ch = (uint)*(byte *)((int)args + 1);\n        remaining_arg_buffer = (int *******)*arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        args = format_string_0008289c_ptr;\n        if ((int)remaining_arg_buffer < 0) {\n          remaining_arg_buffer = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digit = ch - 0x30;\n      if (digit < 10) {\n        width = 0;\n        do {\n          args = (int *******)((int)format_string_0008289c_ptr + 1);\n          ch = (uint)*(byte *)format_string_0008289c_ptr;\n          width = digit + width * 10;\n          digit = ch - 0x30;\n          format_string_0008289c_ptr = args;\n        } while (digit < 10);\n        remaining_arg_buffer = (int *******)(width | (int)width >> 0x1f);\n      }\n      else {\n        remaining_arg_buffer = (int *******)0x0;\n        args = format_string_0008289c_ptr;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flags = flags | 0x80;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      is_long = true;\n      if (is_left_justified == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      arg_list_ptr = (int **)((int)arg_list_ptr + 7U & 0xfffffff8);\n      arg_ptr = *arg_list_ptr;\n      width_ptr = arg_list_ptr[1];\n      arg_list_ptr = arg_list_ptr + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      is_long = true;\n      if (is_left_justified != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)is_long << 4;\n      count = (uint)is_left_justified << 5;\n      if ((is_long == 0) && (count = (uint)is_negative << 6, is_negative != 0)) {\n        arg_ptr = (int *)(uint)*(ushort *)arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        width_ptr = (int *)0x0;\n      }\n      else {\n        result = count;\n        arg_ptr = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        width_ptr = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      is_long = true;\n      if (is_left_justified != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((is_long) || (is_negative == false)) {\n        result = 1;\n        arg_ptr = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        width_ptr = (int *)0x0;\n      }\n      else {\n        width_ptr = (int *)0x0;\n        arg_ptr = (int *)(uint)*(ushort *)arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      digits = \"0123456789ABCDEF\";\n      if (is_left_justified == false) goto LAB_00082efa;\nLAB_00082d1a:\n      arg_ptr = (int **)((int)arg_list_ptr + 7U & 0xfffffff8);\n      arg_list_ptr = arg_ptr + 2;\n      arg_ptr = *arg_ptr;\n      width_ptr = arg_ptr[1];\n      goto LAB_00082d2e;\n    case 99:\n      arg_ptr = *arg_list_ptr;\n      arg_list_ptr = arg_list_ptr + 1;\n      max_width = (int *******)0x1;\n      padding_char = SUB41(arg_ptr,0);\n      remaining_arg_buffer = (int *******)0x1;\n      temp_buffer = (int ********)&padding_char;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (is_left_justified != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((is_long == false) && (is_negative != false)) {\n        arg_ptr = (int *)(int)*(short *)arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        width_ptr = (int *)((int)arg_ptr >> 0x1f);\n      }\n      else {\n        arg_ptr = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        width_ptr = (int *)((int)arg_ptr >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)width_ptr < 0) {\n        is_negative = arg_ptr != (int *)0x0;\n        arg_ptr = (int *)-(int)arg_ptr;\n        width_ptr = (int *)(-(int)width_ptr - (uint)is_negative);\n        sign_char = '-';\n        sign_char = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)remaining_arg_buffer) {\n        flags = flags & 0xffffff7f;\n      }\n      is_zero_padded = false;\n      ch = (uint)arg_ptr | (uint)width_ptr;\n      result = 1;\n      sign_char = sign_char;\n      goto joined_r0x00082adc;\n    case 0x68:\n      is_negative = true;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x6c:\n      ch = (uint)*(byte *)args;\n      if (ch == 0x6c) {\n        is_left_justified = true;\n        ch = (uint)*(byte *)((int)args + 1);\n        args = (int *******)((int)args + 1);\n      }\n      else {\n        is_long = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (is_left_justified == false) {\n        if (is_long == false) {\n          if (is_negative) {\n            arg_ptr = *arg_list_ptr;\n            arg_list_ptr = arg_list_ptr + 1;\n            *(short *)arg_ptr = (short)result;\n          }\n          else {\n            arg_ptr = *arg_list_ptr;\n            arg_list_ptr = arg_list_ptr + 1;\n            *arg_ptr = result;\n          }\n        }\n        else {\n          arg_ptr = *arg_list_ptr;\n          arg_list_ptr = arg_list_ptr + 1;\n          *arg_ptr = result;\n        }\n      }\n      else {\n        arg_ptr = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        *arg_ptr = result;\n        arg_ptr[1] = result >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (is_left_justified == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      arg_ptr = (int **)((int)arg_list_ptr + 7U & 0xfffffff8);\n      arg_list_ptr = arg_ptr + 2;\n      arg_ptr = *arg_ptr;\n      width_ptr = arg_ptr[1];\n      result = 0;\n      break;\n    case 0x70:\n      arg_ptr = *arg_list_ptr;\n      arg_list_ptr = arg_list_ptr + 1;\n      padding_char = 0x78;\n      is_zero_padded = true;\n      width_ptr = (int *)0x0;\n      padding_char = 0x30;\n      digits = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      is_left_justified = true;\n      ch = (uint)*(byte *)args;\n      goto LAB_00082976;\n    case 0x73:\n      temp_buffer = (int ********)*arg_list_ptr;\n      sign_char = '\\0';\n      arg_list_ptr = arg_list_ptr + 1;\n      if (temp_buffer != (int ********)0x0) {\n        if ((int)remaining_arg_buffer < 0) {\n          remaining_arg_buffer = (int *******)strlen(temp_buffer);\n          format_string_0008289c_ptr = (int *******)0x0;\n          sign_char = sign_char;\n        }\n        else {\n          result = memchr(temp_buffer,0,remaining_arg_buffer);\n          sign_char = sign_char;\n          if (result == 0) {\n            format_string_0008289c_ptr = (int *******)0x0;\n          }\n          else {\n            remaining_format = (int *******)(result - (int)temp_buffer);\n            if ((int)remaining_arg_buffer <= (int)(int *******)(result - (int)temp_buffer)) {\n              remaining_format = remaining_arg_buffer;\n            }\n            format_string_0008289c_ptr = (int *******)0x0;\n            remaining_arg_buffer = remaining_format;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < remaining_arg_buffer) {\n        remaining_arg_buffer = (int *******)0x6;\n      }\n      max_width = (int *******)((uint)remaining_arg_buffer & ~((int)remaining_arg_buffer >> 0x1f));\n      temp_buffer = (int ********)&UNK_00085728;\nLAB_00082d76:\n      sign_char = '\\0';\n      format_string_0008289c_ptr = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!is_left_justified) goto LAB_00082ce0;\nLAB_00082bc6:\n      arg_ptr = (int **)((int)arg_list_ptr + 7U & 0xfffffff8);\n      arg_list_ptr = arg_ptr + 2;\n      arg_ptr = *arg_ptr;\n      width_ptr = arg_ptr[1];\n      result = 1;\n      break;\n    case 0x78:\n      digits = \"0123456789abcdef\";\n      if (is_left_justified != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((is_long == false) && (is_negative != false)) {\n        width_ptr = (int *)0x0;\n        arg_ptr = (int *)(uint)*(ushort *)arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n      }\n      else {\n        arg_ptr = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        width_ptr = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((is_unsigned) && (((uint)arg_ptr | (uint)width_ptr) != 0)) {\n        is_zero_padded = true;\n        padding_char = 0x30;\n        result = 2;\n        padding_char = (char)ch;\n      }\n      else {\n        result = 2;\n      }\n    }\n    sign_char = '\\0';\n    sign_char = '\\0';\nLAB_00082ace:\n    if (-1 < (int)remaining_arg_buffer) {\n      flags = flags & 0xffffff7f;\n    }\n    ch = (uint)arg_ptr | (uint)width_ptr;\njoined_r0x00082adc:\n    combined_value = CONCAT44(width_ptr,arg_ptr);\n    format_string_0008289c_ptr = remaining_arg_buffer;\n    if ((ch == 0) && (remaining_arg_buffer == (int *******)0x0)) {\n      temp_buffer = (int ********)temp_buffer;\n      if ((result != 0) || (!is_unsigned)) goto LAB_00082b04;\n      temp_buffer = (int ********)(&temp_char + 1);\n      temp_char = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (width_ptr != (int *)0x0 || (int *)0x9 < arg_ptr) {\n        formatted_part = (int ********)(&temp_char + 1);\n        do {\n          temp_buffer = formatted_part;\n          quotient = (undefined4)((ulonglong)combined_value >> 0x20);\n          digit = '\\n';\n          __aeabi_uldivmod((int)combined_value,quotient,10,0);\n          *(char *)temp_buffer = digit + '0';\n          combined_value = __aeabi_uldivmod((int)combined_value,quotient,10,0);\n          formatted_part = (int ********)((int)temp_buffer + -1);\n        } while (combined_value != 0);\n        remaining_arg_buffer = (int *******)((int)temp_buffer - (int)temp_buffer);\n        goto LAB_00082b04;\n      }\n      temp_char = (char)arg_ptr + '0';\n      temp_buffer = (int ********)(&temp_char + 1);\n      goto LAB_00083282;\n    }\n    formatted_part = (int ********)(&temp_char + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      temp_buffer = formatted_part;\n      ch = (uint)arg_ptr & 0xf;\n      arg_ptr = (int *)((uint)arg_ptr >> 4 | (int)width_ptr << 0x1c);\n      width_ptr = (int *)((uint)width_ptr >> 4);\n      *(char *)temp_buffer = digits[ch];\n      formatted_part = (int ********)((int)temp_buffer + -1);\n    } while (((uint)arg_ptr | (uint)width_ptr) != 0);\n    remaining_arg_buffer = (int *******)((int)temp_buffer - (int)temp_buffer);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (prefix_buffer_ptr != (int *******)0x0) {\n    __sprint_r_part_0(buffer,format,&format_args);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(format + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return result;\nLAB_000830e2:\n  do {\n    temp_buffer = formatted_part;\n    arg_ptr = (int *)((uint)arg_ptr >> 3 | (int)width_ptr << 0x1d);\n    width_ptr = (int *)((uint)width_ptr >> 3);\n    result = ((uint)arg_ptr & 7) + 0x30;\n    *(char *)temp_buffer = (char)result;\n    formatted_part = (int ********)((int)temp_buffer + -1);\n    arg_ptr = arg_ptr;\n  } while (((uint)arg_ptr | (uint)width_ptr) != 0);\n  if (is_unsigned) {\n    if (result == 0x30) {\nLAB_00082afe:\n      remaining_arg_buffer = (int *******)((int)temp_buffer - (int)temp_buffer);\n    }\n    else {\n      *(undefined *)((int)temp_buffer + -1) = 0x30;\n      temp_buffer = formatted_part;\n      remaining_arg_buffer = (int *******)((int)temp_buffer - (int)formatted_part);\n    }\n  }\n  else {\nLAB_00083282:\n    remaining_arg_buffer = (int *******)((int)temp_buffer - (int)temp_buffer);\n  }\nLAB_00082b04:\n  max_width = remaining_arg_buffer;\n  if ((int)remaining_arg_buffer < (int)format_string_0008289c_ptr) {\n    max_width = format_string_0008289c_ptr;\n  }\n  if (sign_char != '\\0') {\n    max_width = (int *******)((int)max_width + 1);\n  }\nLAB_00082b1e:\n  if (is_zero_padded) {\n    max_width = (int *******)((int)max_width + 2);\n  }\n  if ((flags == 0) &&\n     (remaining_format = (int *******)((int)star_arg - (int)max_width), 0 < (int)remaining_format)) {\n    if ((int)remaining_format < 0x11) {\n      num_args = num_args + 1;\n    }\n    else {\n      do {\n        temp_char_pointer3 = remaining_format;\n        result = num_args + 1;\n        prefix_buffer_ptr = prefix_buffer_ptr + 4;\n        *format_args = (int *******)0x856f0;\n        format_args[1] = (int *******)0x10;\n        if (result < 8) {\n          count = num_args + 2;\n          format_args = format_args + 2;\n          num_args = result;\n        }\n        else if (prefix_buffer_ptr == (int *******)0x0) {\n          count = 1;\n          format_args = (int ********)temp_buffer;\n          num_args = 0;\n        }\n        else {\n          num_args = result;\n          result = __sprint_r_part_0(buffer,format,&format_args);\n          if (result != 0) goto LAB_00083142;\n          count = num_args + 1;\n          format_args = (int ********)temp_buffer;\n        }\n        remaining_format = temp_char_pointer3 + -4;\n      } while (0x10 < (int)remaining_format);\n      remaining_format = temp_char_pointer3 + -4;\n      num_args = count;\n    }\n    prefix_buffer_ptr = (int *******)((int)prefix_buffer_ptr + (int)remaining_format);\n    *format_args = (int *******)0x856f0;\n    format_args[1] = remaining_format;\n    if (num_args < 8) {\n      result = num_args + 1;\n      format_args = format_args + 2;\n    }\n    else if (prefix_buffer_ptr == (int *******)0x0) {\n      result = 1;\n      num_args = 0;\n      format_args = (int ********)temp_buffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&format_args);\n      if (result != 0) goto LAB_00083142;\n      result = num_args + 1;\n      format_args = (int ********)temp_buffer;\n    }\n  }\n  else {\n    result = num_args + 1;\n  }\n  count = result;\n  if (sign_char != '\\0') {\n    prefix_buffer_ptr = (int *******)((int)prefix_buffer_ptr + 1);\n    count = 1;\n    *format_args = (int *******)&sign_char;\n    format_args[1] = (int *******)0x1;\n    num_args = result;\n    if (result < 8) {\n      count = result + 1;\n      format_args = format_args + 2;\n    }\n    else if (prefix_buffer_ptr == (int *******)0x0) {\n      num_args = 0;\n      format_args = (int ********)temp_buffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&format_args);\n      if (result != 0) goto LAB_00083142;\n      count = num_args + 1;\n      format_args = (int ********)temp_buffer;\n    }\n  }\n  result = count;\n  arg_count = num_args;\n  if (is_zero_padded) {\n    prefix_buffer_ptr = (int *******)((int)prefix_buffer_ptr + 2);\n    *format_args = (int *******)&padding_char;\n    format_args[1] = (int *******)0x2;\n    if (count < 8) {\n      result = count + 1;\n      arg_count = count;\n      format_args = format_args + 2;\n    }\n    else if (prefix_buffer_ptr == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      format_args = (int ********)temp_buffer;\n    }\n    else {\n      num_args = count;\n      result = __sprint_r_part_0(buffer,format,&format_args);\n      if (result != 0) goto LAB_00083142;\n      result = num_args + 1;\n      arg_count = num_args;\n      format_args = (int ********)temp_buffer;\n    }\n  }\n  num_args = arg_count;\n  if ((flags == 0x80) &&\n     (remaining_format = (int *******)((int)star_arg - (int)max_width), 0 < (int)remaining_format)) {\n    if (0x10 < (int)remaining_format) {\n      do {\n        while( true ) {\n          temp_char_pointer3 = remaining_format;\n          num_args = arg_count + 1;\n          prefix_buffer_ptr = prefix_buffer_ptr + 4;\n          *format_args = (int *******)\"0000000000000000\";\n          format_args[1] = (int *******)0x10;\n          if (7 < num_args) break;\n          result = arg_count + 2;\n          format_args = format_args + 2;\nLAB_000831f2:\n          arg_count = num_args;\n          remaining_format = temp_char_pointer3 + -4;\n          if ((int)(temp_char_pointer3 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (prefix_buffer_ptr != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&format_args);\n          if (result == 0) {\n            result = num_args + 1;\n            format_args = (int ********)temp_buffer;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        arg_count = 0;\n        remaining_format = temp_char_pointer3 + -4;\n        format_args = (int ********)temp_buffer;\n      } while (0x10 < (int)(temp_char_pointer3 + -4));\nLAB_00083218:\n      remaining_format = temp_char_pointer3 + -4;\n    }\n    prefix_buffer_ptr = (int *******)((int)prefix_buffer_ptr + (int)remaining_format);\n    *format_args = (int *******)\"0000000000000000\";\n    format_args[1] = remaining_format;\n    num_args = result;\n    if (result < 8) {\n      result = result + 1;\n      format_args = format_args + 2;\n    }\n    else if (prefix_buffer_ptr == (int *******)0x0) {\n      result = 1;\n      num_args = 0;\n      format_args = (int ********)temp_buffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&format_args);\n      if (result != 0) goto LAB_00083142;\n      result = num_args + 1;\n      format_args = (int ********)temp_buffer;\n    }\n  }\n  format_string_0008289c_ptr = (int *******)((int)format_string_0008289c_ptr - (int)remaining_arg_buffer);\n  formatted_part = (int ********)temp_buffer;\n  if ((int)format_string_0008289c_ptr < 1) {\nLAB_0008302a:\n    prefix_buffer_ptr = (int *******)((int)prefix_buffer_ptr + (int)remaining_arg_buffer);\n    *format_args = (int *******)temp_buffer;\n    format_args[1] = remaining_arg_buffer;\n    remaining_arg_buffer = prefix_buffer_ptr;\n    num_args = result;\n    if (result < 8) goto LAB_000831be;\n    if (prefix_buffer_ptr == (int *******)0x0) {\n      num_args = 0;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&format_args);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    count = num_args;\n    if (0x10 < (int)format_string_0008289c_ptr) {\n      do {\n        while( true ) {\n          remaining_format = format_string_0008289c_ptr;\n          num_args = count + 1;\n          prefix_buffer_ptr = prefix_buffer_ptr + 4;\n          *format_args = (int *******)\"0000000000000000\";\n          format_args[1] = (int *******)0x10;\n          if (7 < num_args) break;\n          result = count + 2;\n          format_args = format_args + 2;\nLAB_00082fe6:\n          count = num_args;\n          format_string_0008289c_ptr = remaining_format + -4;\n          if ((int)(remaining_format + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (prefix_buffer_ptr != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&format_args);\n          if (result == 0) {\n            result = num_args + 1;\n            format_args = (int ********)temp_buffer;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        format_args = (int ********)temp_buffer;\n        count = 0;\n        format_string_0008289c_ptr = remaining_format + -4;\n      } while (0x10 < (int)(remaining_format + -4));\nLAB_0008300e:\n      format_string_0008289c_ptr = remaining_format + -4;\n    }\n    prefix_buffer_ptr = (int *******)((int)prefix_buffer_ptr + (int)format_string_0008289c_ptr);\n    *format_args = (int *******)\"0000000000000000\";\n    format_args[1] = format_string_0008289c_ptr;\n    if (result < 8) {\n      result = result + 1;\n      format_args = format_args + 2;\n      goto LAB_0008302a;\n    }\n    if (prefix_buffer_ptr != (int *******)0x0) {\n      num_args = result;\n      result = __sprint_r_part_0(buffer,format,&format_args);\n      if (result != 0) goto LAB_00083142;\n      result = num_args + 1;\n      format_args = (int ********)temp_buffer;\n      goto LAB_0008302a;\n    }\n    buffer_array[0] = remaining_arg_buffer;\n    num_args = 1;\n    format_args = (int ********)temp_buffer;\n    temp_buffer = (undefined  [4])temp_buffer;\nLAB_000831be:\n    formatted_part = format_args + 2;\n    prefix_buffer_ptr = remaining_arg_buffer;\n  }\n  if (((flags & 4) != 0) &&\n     (format_string_0008289c_ptr = (int *******)((int)star_arg - (int)max_width), 0 < (int)format_string_0008289c_ptr)) {\n    result = num_args;\n    if ((int)format_string_0008289c_ptr < 0x11) {\n      count = num_args + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          num_args = result + 1;\n          prefix_buffer_ptr = prefix_buffer_ptr + 4;\n          *formatted_part = (int *******)0x856f0;\n          formatted_part[1] = (int *******)0x10;\n          if (7 < num_args) break;\n          count = result + 2;\n          formatted_part = formatted_part + 2;\nLAB_0008307a:\n          format_string_0008289c_ptr = format_string_0008289c_ptr + -4;\n          result = num_args;\n          if ((int)format_string_0008289c_ptr < 0x11) goto LAB_000830a2;\n        }\n        if (prefix_buffer_ptr != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&format_args);\n          if (result == 0) {\n            count = num_args + 1;\n            formatted_part = (int ********)temp_buffer;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        format_string_0008289c_ptr = format_string_0008289c_ptr + -4;\n        count = 1;\n        result = 0;\n        formatted_part = (int ********)temp_buffer;\n      } while (0x10 < (int)format_string_0008289c_ptr);\n    }\nLAB_000830a2:\n    prefix_buffer_ptr = (int *******)((int)prefix_buffer_ptr + (int)format_string_0008289c_ptr);\n    *formatted_part = (int *******)0x856f0;\n    formatted_part[1] = format_string_0008289c_ptr;\n    num_args = count;\n    if (7 < count) {\n      if (prefix_buffer_ptr == (int *******)0x0) {\n        if ((int)max_width < (int)star_arg) {\n          max_width = star_arg;\n        }\n        result = result + (int)max_width;\n        goto LAB_00083186;\n      }\n      result = __sprint_r_part_0(buffer,format,&format_args);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)max_width < (int)star_arg) {\n    max_width = star_arg;\n  }\n  result = result + (int)max_width;\n  if ((prefix_buffer_ptr != (int *******)0x0) &&\n     (result = __sprint_r_part_0(buffer,format,&format_args), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  num_args = 0;\n  format_args = (int ********)temp_buffer;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digit = ch - 0x30;\n  star_arg = (int *******)0x0;\n  format_string_0008289c_ptr = args;\n  do {\n    args = (int *******)((int)format_string_0008289c_ptr + 1);\n    ch = (uint)*(byte *)format_string_0008289c_ptr;\n    star_arg = (int *******)(digit + (int)star_arg * 10);\n    digit = ch - 0x30;\n    format_string_0008289c_ptr = args;\n  } while (digit < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  ch = (uint)*(byte *)args;\n  if (sign_char == '\\0') {\n    sign_char = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "current_name": "format_string_0008289c",
            "entrypoint": "0x0008289c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008289c": "format_string_0008289c",
                "bVar1": "is_left_justified",
                "bVar2": "is_long",
                "bVar26": "is_negative",
                "bVar3": "is_unsigned",
                "bVar5": "is_zero_padded",
                "cStack_6a": "temp_char",
                "cVar4": "sign_char",
                "cVar9": "digit",
                "iVar15": "count",
                "iVar17": "arg_count",
                "iVar19": "arg_width",
                "iVar8": "result",
                "lVar27": "combined_value",
                "local_64": "buffer_array",
                "local_68": "temp_buffer",
                "local_69": "temp_char",
                "local_90": "padding_char",
                "local_94": "prefix_buffer_ptr",
                "local_98": "num_args",
                "local_9c": "format_args",
                "local_9f": "padding_char",
                "local_a0": "padding_char",
                "local_a1": "sign_char",
                "local_c0": "digits",
                "local_c4": "result",
                "local_c8": "arg_list_ptr",
                "local_d4": "remaining_arg_buffer",
                "local_dc": "max_width",
                "param_1": "buffer",
                "param_2": "format",
                "param_3": "args",
                "param_4": "args",
                "piVar12": "int_array",
                "piVar19": "arg_ptr",
                "piVar22": "width_ptr",
                "piVar7": "arg_ptr",
                "ppiVar12": "arg_ptr",
                "ppiVar16": "temp_param",
                "ppiVar18": "param_size_pointer",
                "ppppppiVar10": "current_specifier",
                "pppppppiVar10": "format_string_ptr",
                "pppppppiVar16": "temp",
                "pppppppiVar18": "remaining_format",
                "pppppppiVar20": "star_arg",
                "pppppppiVar23": "temp_char_pointer3",
                "pppppppiVar25": "end_flag_arg",
                "pppppppiVar6": "temp4",
                "ppppppppiVar16": "formatted_part",
                "ppppppppiVar25": "temp_buffer",
                "ppppppppiVar6": "format_args",
                "uVar11": "digit",
                "uVar13": "flags",
                "uVar14": "ch",
                "uVar21": "width",
                "uVar24": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000834f0": {
            "additional_data": {
                "FUN_000834f0": {
                    "format_and_flush_output": 1,
                    "print_and_flush": 13,
                    "print_and_flush_buffer": 1,
                    "print_and_flush_data": 2,
                    "print_and_flush_output": 2,
                    "print_and_update_flags": 3,
                    "print_data": 1,
                    "print_formatted_data": 2,
                    "print_formatted_output": 2,
                    "print_formatted_string": 1,
                    "print_function": 1,
                    "print_information": 1,
                    "print_message": 1
                },
                "_fflush_r": {
                    "custom_flush": 1,
                    "flush": 1
                },
                "_vfiprintf_r": {
                    "custom_printf": 1,
                    "formatted_print": 1
                },
                "auStack_420": {
                    "array_stack": 1,
                    "data": 1,
                    "stack_array": 3,
                    "stack_buffer": 14,
                    "stack_data": 1,
                    "stack_memory": 1,
                    "temp_buffer": 5
                },
                "iVar1": {
                    "format_result": 1,
                    "print_result": 5,
                    "printf_result": 8,
                    "result": 7,
                    "return_code": 1,
                    "return_value": 3
                },
                "iVar2": {
                    "fflush_result": 6,
                    "flush_result": 17,
                    "flush_result_condition": 1,
                    "flush_status": 1
                },
                "local_424": {
                    "address_3": 1,
                    "au_stack": 1,
                    "auxiliary_stack": 1,
                    "constant": 2,
                    "constant_buffer": 1,
                    "context": 1,
                    "data_four_bytes": 1,
                    "data_offset": 1,
                    "local_buffer": 1,
                    "local_data": 1,
                    "local_variable": 1,
                    "param_2_100": 1,
                    "param_2_copy": 1,
                    "param_3": 1,
                    "param_value": 1,
                    "saved_buffer": 1,
                    "saved_value": 1,
                    "some_data": 1,
                    "temp": 1,
                    "temp_value": 1,
                    "temporary_variable": 1,
                    "unknown_data": 1,
                    "unknown_value": 1,
                    "value4": 2,
                    "value_3": 1,
                    "value_4": 1,
                    "value_5": 1
                },
                "local_464": {
                    "address_2": 1,
                    "another_value": 1,
                    "another_variable": 1,
                    "buffer_size3": 1,
                    "buffer_size_3": 1,
                    "data_ptr": 1,
                    "data_size": 2,
                    "fflush_param_3": 1,
                    "flush_buffer4": 1,
                    "func_result": 1,
                    "length": 1,
                    "more_data": 1,
                    "offset": 1,
                    "other_data_2": 1,
                    "param_4": 2,
                    "param_6": 1,
                    "size4": 1,
                    "unknown_buffer": 1,
                    "unused": 1,
                    "value": 1,
                    "value3": 3,
                    "value_2": 2,
                    "value_3": 1,
                    "value_4": 1
                },
                "local_46c": {
                    "address_1": 1,
                    "data_int": 1,
                    "data_pointer": 1,
                    "data_value": 1,
                    "flush_buffer3": 1,
                    "mem_value": 1,
                    "offset": 1,
                    "other_data": 2,
                    "param_3": 2,
                    "param_4": 1,
                    "ptr_size": 1,
                    "size3": 1,
                    "some_value": 1,
                    "some_variable": 1,
                    "value2": 3,
                    "value_1": 2,
                    "value_2": 1,
                    "value_3": 1
                },
                "local_470": {
                    "fflush_mode": 1,
                    "fflush_param_2": 1,
                    "fflush_result": 1,
                    "fflush_status": 1,
                    "flag": 1,
                    "flush_buffer2": 1,
                    "flush_mode": 1,
                    "size2": 2,
                    "some_other_value": 1,
                    "status": 1,
                    "temp": 1,
                    "unused": 8,
                    "unused_variable": 1,
                    "value_2": 1,
                    "zero": 8,
                    "zero_value": 1
                },
                "local_474": {
                    "buffer_ptr_size": 1,
                    "buffer_size": 1,
                    "buffer_size2": 3,
                    "buffer_size_2": 7,
                    "buffer_size_copy": 4,
                    "fflush_buffer_size": 1,
                    "fflush_param_1": 1,
                    "fflush_result": 1,
                    "flush_buffer1": 1,
                    "flush_result": 1,
                    "flush_size": 1,
                    "output_buffer_size": 1,
                    "output_flush_size": 1,
                    "printf_buffer_size": 1,
                    "printf_result": 2,
                    "second_buffer_size": 1,
                    "size1": 2,
                    "vfprintf_status": 1
                },
                "local_478": {
                    "buffer": 12,
                    "buffer_pointer": 4,
                    "buffer_ptr": 6,
                    "current_buffer": 1,
                    "current_output": 1,
                    "output_buffer": 1,
                    "output_pointer": 1,
                    "output_string": 1,
                    "param_buffer": 1,
                    "pointer": 1,
                    "print_buffer_ptr": 1,
                    "string_ptr": 1
                },
                "local_47a": {
                    "byte_data": 1,
                    "byte_value": 1,
                    "control_value": 1,
                    "data_field": 1,
                    "data_offset": 1,
                    "data_short": 2,
                    "data_size": 1,
                    "field_value": 1,
                    "flag": 1,
                    "flag_value": 1,
                    "flags_mask": 1,
                    "input_value_2": 1,
                    "param_a": 1,
                    "param_value": 1,
                    "short_value": 4,
                    "some_value": 1,
                    "ushort_value": 1,
                    "value": 8,
                    "value1": 1,
                    "value_1": 1
                },
                "local_47c": {
                    "control_flag": 1,
                    "data": 1,
                    "data_value": 6,
                    "flag": 3,
                    "flags": 5,
                    "flags1": 1,
                    "input_value": 1,
                    "masked_flag": 1,
                    "masked_short": 1,
                    "masked_value": 4,
                    "modified_flag": 3,
                    "modified_value": 2,
                    "param_c": 1,
                    "param_flag": 1
                },
                "local_480": {
                    "buffer_size": 24,
                    "buffer_size1": 1,
                    "buffer_size_1": 3,
                    "output_buffer_size": 1,
                    "printf_buffer_size": 1,
                    "vfiprintf_length": 1
                },
                "local_488": {
                    "buffer": 12,
                    "buffer_array": 9,
                    "buffers": 1,
                    "output_buffer": 4,
                    "print_buffer": 1,
                    "string_array": 1,
                    "string_buffer": 2,
                    "temp_buffer": 1
                },
                "param_1": {
                    "file": 1,
                    "file_descriptor": 1,
                    "file_ptr": 1,
                    "file_stream": 1,
                    "output_stream": 20,
                    "stream": 7
                },
                "param_2": {
                    "binary_data": 3,
                    "buffer_address": 1,
                    "data": 12,
                    "data_address": 2,
                    "data_pointer": 1,
                    "data_ptr": 4,
                    "input_buffer": 1,
                    "input_data": 5,
                    "param_struct": 1,
                    "struct_address": 1
                }
            },
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint print_and_flush_data_000834f0(undefined4 output_stream,int data)\n\n{\n  int printf_result;\n  int flush_result;\n  undefined *buffer [2];\n  undefined4 buffer_size;\n  ushort data_value;\n  undefined2 value;\n  undefined *buffer;\n  undefined4 buffer_size_2;\n  undefined4 zero;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined stack_buffer [1024];\n  \n  value4 = *(undefined4 *)(data + 100);\n  value2 = *(undefined4 *)(data + 0x1c);\n  value = *(undefined2 *)(data + 0xe);\n  value3 = *(undefined4 *)(data + 0x24);\n  buffer[0] = stack_buffer;\n  data_value = *(ushort *)(data + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size_2 = 0x400;\n  zero = 0;\n  buffer = buffer[0];\n  printf_result = formatted_print(output_stream,buffer);\n  if ((-1 < printf_result) && (flush_result = custom_flush(output_stream,buffer), flush_result != 0)) {\n    printf_result = -1;\n  }\n  if ((int)((uint)data_value << 0x19) < 0) {\n    *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) | 0x40;\n  }\n  return printf_result;\n}\n\n",
            "current_name": "print_and_flush_data_000834f0",
            "entrypoint": "0x000834f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000834f0": "print_and_flush_data_000834f0",
                "_fflush_r": "custom_flush",
                "_vfiprintf_r": "formatted_print",
                "auStack_420": "stack_buffer",
                "iVar1": "printf_result",
                "iVar2": "flush_result",
                "local_424": "value4",
                "local_464": "value3",
                "local_46c": "value2",
                "local_470": "zero",
                "local_474": "buffer_size_2",
                "local_478": "buffer",
                "local_47a": "value",
                "local_47c": "data_value",
                "local_480": "buffer_size",
                "local_488": "buffer",
                "param_1": "output_stream",
                "param_2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008356c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "elf_relocation_array": 1,
                    "rel_array": 2,
                    "relocation_array": 1
                },
                "FUN_0008356c": {
                    "handle_relocation": 1,
                    "initialize_buffer": 3,
                    "initialize_connection": 1,
                    "initialize_function": 1,
                    "parse_and_process_data": 1,
                    "parse_parameter": 1,
                    "process_data": 7,
                    "process_function": 1,
                    "process_parameter": 1,
                    "process_parameters": 2
                },
                "FUN_00083888": {
                    "do_something": 1
                },
                "FUN_00083b10": {
                    "reverse_something": 1
                },
                "FUN_00084018": {
                    "process_params": 1
                },
                "__sinit": {
                    "initialize_default_params": 1
                },
                "__smakebuf_r": {
                    "make_buffer": 1
                },
                "_free_r": {
                    "free_memory": 1,
                    "free_resources": 1
                },
                "_sinit": {
                    "init_function": 1
                },
                "_smakebuf_r": {
                    "make_buffer": 1
                },
                "iVar1": {
                    "buffer_length": 1,
                    "condition1": 2,
                    "condition_result": 1,
                    "index": 1,
                    "index_value": 1,
                    "result": 1,
                    "return_value": 1,
                    "some_variable": 1,
                    "temp1": 1,
                    "temp_1": 1,
                    "temp_var1": 13,
                    "temp_var_1": 2,
                    "temp_variable1": 1,
                    "tmp_1": 1,
                    "var1": 1,
                    "variable1": 2
                },
                "iVar2": {
                    "another_variable": 1,
                    "buffer_offset": 1,
                    "condition2": 2,
                    "temp2": 1,
                    "temp_2": 1,
                    "temp_var": 2,
                    "temp_var2": 13,
                    "temp_var_2": 2,
                    "temp_variable": 1,
                    "temp_variable2": 1,
                    "tmp_2": 1,
                    "value": 2,
                    "var2": 1,
                    "variable2": 2
                },
                "param_1": {
                    "buffer": 2,
                    "out_param": 2,
                    "out_value": 1,
                    "output": 5,
                    "output_param": 2,
                    "output_pointer": 1,
                    "output_ptr": 2,
                    "output_result": 1,
                    "output_status": 2,
                    "output_value": 1,
                    "parameter_array": 1,
                    "result": 11
                },
                "param_2": {
                    "buffer": 1,
                    "connection_params": 1,
                    "data": 4,
                    "in_param": 1,
                    "input": 6,
                    "input_array": 7,
                    "input_data": 2,
                    "input_param": 2,
                    "input_parameters": 1,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "input_value": 1,
                    "parameter_array": 1,
                    "parameters": 2
                },
                "uVar3": {
                    "shifted_value": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp_3": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var2": 2,
                    "temp_var3": 13,
                    "temp_var_3": 2,
                    "temp_variable3": 1,
                    "tmp_3": 1,
                    "u_var3": 1,
                    "value": 1,
                    "value1": 2,
                    "var3": 1,
                    "variable3": 1
                },
                "uVar4": {
                    "flag": 2,
                    "flags": 1,
                    "original_value": 1,
                    "temp4": 1,
                    "temp_4": 1,
                    "temp_value2": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var4": 13,
                    "temp_var_4": 2,
                    "temp_variable4": 1,
                    "tmp_4": 1,
                    "u_var4": 1,
                    "value2": 2,
                    "var4": 1,
                    "variable4": 1
                }
            },
            "called": [
                "FUN_00083b10",
                "FUN_00084018",
                "FUN_00083888"
            ],
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "code": "\nundefined4 parse_and_process_data_0008356c(undefined4 *result,int *input_array)\n\n{\n  int temp_var1;\n  int temp_var2;\n  uint temp_var3;\n  ushort temp_var4;\n  \n  if ((rel_array[140].r_offset != 0) &&\n     (*(int *)(rel_array[140].r_offset + 0x38) == 0)) {\n    initialize_default_params();\n  }\n  temp_var4 = *(ushort *)(input_array + 3);\n  temp_var3 = (uint)temp_var4;\n  if ((int)(temp_var3 << 0x1c) < 0) {\n    temp_var2 = input_array[4];\n  }\n  else {\n    if (-1 < (int)(temp_var3 << 0x1b)) {\n      *result = 9;\n      *(ushort *)(input_array + 3) = temp_var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var3 << 0x1d) < 0) {\n      if ((int *)input_array[0xc] != (int *)0x0) {\n        if ((int *)input_array[0xc] != input_array + 0x10) {\n          free_resources(result);\n          temp_var4 = *(ushort *)(input_array + 3);\n        }\n        input_array[0xc] = 0;\n      }\n      temp_var2 = input_array[4];\n      temp_var4 = temp_var4 & 0xffdb;\n      *input_array = temp_var2;\n      input_array[1] = 0;\n    }\n    else {\n      temp_var2 = input_array[4];\n    }\n    *(ushort *)(input_array + 3) = temp_var4 | 8;\n    temp_var3 = (uint)(temp_var4 | 8);\n  }\n  if ((temp_var2 == 0) && ((temp_var3 & 0x280) != 0x200)) {\n    make_buffer(result,input_array);\n    temp_var3 = (uint)*(ushort *)(input_array + 3);\n    temp_var2 = input_array[4];\n  }\n  if ((temp_var3 & 1) == 0) {\n    temp_var1 = 0;\n    if (-1 < (int)(temp_var3 << 0x1e)) {\n      temp_var1 = input_array[5];\n    }\n    input_array[2] = temp_var1;\n  }\n  else {\n    input_array[6] = -input_array[5];\n    input_array[2] = 0;\n  }\n  if ((temp_var2 == 0) && ((int)((uint)*(ushort *)(input_array + 3) << 0x18) < 0)) {\n    *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "current_name": "parse_and_process_data_0008356c",
            "entrypoint": "0x0008356c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_0008356c": "parse_and_process_data_0008356c",
                "__sinit": "initialize_default_params",
                "__smakebuf_r": "make_buffer",
                "_free_r": "free_resources",
                "_sinit": "init_function",
                "_smakebuf_r": "make_buffer",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "param_1": "result",
                "param_2": "input_array",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000836d8": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000836d8",
            "entrypoint": "0x000836d8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000836ec": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_array": 2,
                    "elf_rel_array": 3,
                    "elf_rel_table": 1,
                    "rel_array": 2,
                    "relocation_array": 6,
                    "relocation_entries": 1,
                    "relocation_table": 2
                },
                "FUN_00080eec": {
                    "execute_subfunction_1": 1,
                    "handle_error": 1,
                    "handle_exception": 1,
                    "initialize_error_handling": 1,
                    "initialize_function": 1,
                    "initialize_parameters": 1,
                    "initialize_variables": 1,
                    "log_exception": 1,
                    "process_exception": 1
                },
                "FUN_000817f0": {
                    "execute_subfunction_3": 1,
                    "initialize_memory": 2,
                    "log_error": 1,
                    "log_message": 2,
                    "print_error_message": 1,
                    "print_message": 1,
                    "print_warning": 1
                },
                "FUN_000836ec": {
                    "execute_raise_and_exit": 1,
                    "handle_error": 2,
                    "handle_error_and_continue": 1,
                    "handle_error_and_exit": 2,
                    "handle_error_termination": 1,
                    "handle_exception": 7,
                    "handle_exception_and_exit": 1,
                    "initialize_and_raise_error": 1,
                    "initialize_exception_handler": 1,
                    "initialize_memory": 1,
                    "initialize_program": 2,
                    "initiate_exception_handling": 1,
                    "raise_and_exit": 5,
                    "raise_error_and_exit": 1,
                    "raise_low_memory_exception": 1,
                    "raise_signal_and_handle_error": 1,
                    "trigger_signal_and_handle": 1
                },
                "FUN_000841e4": {
                    "calculate_checksum": 1,
                    "calculate_error_count": 1,
                    "calculate_index": 1,
                    "calculate_value": 1,
                    "check_relocation_array": 1,
                    "execute_subfunction_2": 1,
                    "get_next_offset": 1,
                    "get_offset": 1,
                    "perform_operation": 1
                },
                "F_UNRECOVERED_JUMPTABLE_00": {
                    "handle_error": 1
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "error_jump_table": 1,
                    "exception_handler": 1,
                    "exit_call": 1,
                    "func_ptr": 1,
                    "handle_jump_table": 1,
                    "jump_handler": 1,
                    "jump_table": 9,
                    "jump_table_func": 2,
                    "jump_table_function": 1,
                    "jumptable": 1,
                    "jumptable_function": 2,
                    "unrecovered_jump_table": 2,
                    "unrecovered_jumptable": 1,
                    "unrecovered_jumptable_fn": 1
                },
                "dVar2": {
                    "error_code": 1,
                    "exit_code": 6,
                    "exit_status": 16,
                    "result": 1,
                    "return_value": 1,
                    "status": 1
                },
                "iVar3": {
                    "count": 3,
                    "counter": 5,
                    "index": 18
                },
                "param_1": {
                    "param1": 1
                },
                "param_2": {
                    "param2": 1
                },
                "param_3": {
                    "param3": 1
                },
                "param_4": {
                    "param4": 1
                },
                "pdVar1": {
                    "allocated_memory": 1,
                    "array_ptr": 2,
                    "dword_ptr": 1,
                    "dynamic_array": 4,
                    "exception_rel_offset": 1,
                    "memory_pointer": 1,
                    "pointer": 2,
                    "pointer_array": 5,
                    "ptr_array": 2,
                    "relocated_address": 1,
                    "relocated_data": 1,
                    "relocated_pointer": 2,
                    "relocated_ptr": 1,
                    "relocated_value": 1,
                    "relocation_entry": 1
                }
            },
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "calling": [
                "FUN_000816f8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid handle_exception_and_exit_000836ec(void)\n\n{\n  dword *pointer_array;\n  dword exit_status;\n  int index;\n  code *jump_table;\n  \n  raise(6);\n  jump_table = (code *)0x836fb;\n  exit_status = _exit(1);\n  if (relocation_array[48].r_offset == 0) {\n    relocation_array[48].r_offset = 0x20070184;\n  }\n  index = *(int *)(relocation_array[48].r_offset + 4);\n  pointer_array = (dword *)relocation_array[48].r_offset;\n  if (0x1f < index) {\n    pointer_array = (dword *)malloc(400);\n    if (pointer_array == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *pointer_array = relocation_array[48].r_offset;\n    pointer_array[1] = 0;\n    index = 0;\n    relocation_array[48].r_offset = (dword)pointer_array;\n    pointer_array[0x62] = 0;\n    pointer_array[99] = 0;\n  }\n  pointer_array[1] = index + 1;\n  pointer_array[index + 2] = exit_status;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "handle_exception_and_exit_000836ec",
            "entrypoint": "0x000836ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_000836ec": "handle_exception_and_exit_000836ec",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "dVar2": "exit_status",
                "iVar3": "index",
                "pdVar1": "pointer_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083850": {
            "additional_data": {
                "FUN_00083850": {
                    "data_processing": 1,
                    "decode_and_process_data": 3,
                    "decompile_and_improve": 3,
                    "decompile_binary": 1,
                    "decompile_to_binary": 1,
                    "decompress_data": 1,
                    "perform_operation": 1,
                    "process_binary": 1,
                    "process_data": 6
                },
                "iVar2": {
                    "count": 1,
                    "diff": 1,
                    "difference": 1,
                    "header_length": 1,
                    "index": 2,
                    "index1": 1,
                    "integer_var2": 2,
                    "loop_counter": 1,
                    "offset": 2,
                    "remaining_data_length": 1,
                    "size": 1,
                    "temp1": 1,
                    "temp_int_1": 1,
                    "temp_var": 1,
                    "temp_var1": 2,
                    "temp_var2": 3,
                    "temp_var_1": 1,
                    "temp_variable1": 1,
                    "tmp2": 1,
                    "value_1": 1,
                    "var1": 4,
                    "variable1": 1
                },
                "iVar5": {
                    "index2": 1,
                    "integer_var5": 2,
                    "offset": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp_counter": 1,
                    "temp_int_2": 1,
                    "temp_offset": 1,
                    "temp_var": 3,
                    "temp_var2": 3,
                    "temp_var3": 2,
                    "temp_var4": 1,
                    "temp_var5": 2,
                    "temp_var_2": 1,
                    "temp_var_4": 1,
                    "temp_variable4": 1,
                    "tmp5": 1,
                    "value_2": 1,
                    "var2": 3,
                    "var4": 1,
                    "variable4": 1
                },
                "iVar7": {
                    "i_var1": 1,
                    "index3": 1,
                    "integer_var7": 2,
                    "temp2": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp_int_3": 1,
                    "temp_value": 2,
                    "temp_var2": 3,
                    "temp_var3": 3,
                    "temp_var4": 2,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "temp_var_3": 1,
                    "temp_var_5": 1,
                    "temp_variable5": 1,
                    "tmp7": 1,
                    "var3": 3,
                    "var5": 1,
                    "var_1": 1,
                    "variable5": 1
                },
                "param_1": {
                    "array1": 1,
                    "buffer": 1,
                    "data_array": 2,
                    "data_buffer": 7,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input_array": 14,
                    "input_buffer": 2,
                    "input_data": 2
                },
                "param_2": {
                    "array2": 1,
                    "control_array": 1,
                    "control_buffer": 1,
                    "data": 1,
                    "function_array": 1,
                    "header": 1,
                    "header_buffer": 1,
                    "info_buffer": 2,
                    "info_pointer": 1,
                    "info_ptr": 1,
                    "metadata": 1,
                    "metadata_array": 1,
                    "metadata_buffer": 1,
                    "output_array": 12,
                    "output_buffer": 2,
                    "output_data": 2,
                    "parameter_array": 1
                },
                "pcVar6": {
                    "callback": 2,
                    "callback_func": 2,
                    "callback_function": 2,
                    "code_var6": 1,
                    "decompress_function": 1,
                    "func_ptr": 3,
                    "function_pointer": 8,
                    "function_ptr": 11,
                    "temp_ptr2": 1
                },
                "piVar1": {
                    "allocation_ptr": 1,
                    "dynamic_data": 1,
                    "iterator": 1,
                    "param_ptr": 1,
                    "pointer1": 1,
                    "pointer_var1": 2,
                    "ptr": 2,
                    "ptr1": 4,
                    "ptr_value": 1,
                    "ptr_var": 1,
                    "temp_pointer": 3,
                    "temp_pointer1": 2,
                    "temp_ptr": 7,
                    "temp_var1": 3,
                    "tmp1": 1
                },
                "uVar3": {
                    "flag": 5,
                    "flags": 8,
                    "header_flags": 1,
                    "metadata_flag": 1,
                    "status_flag": 1,
                    "temp2": 1,
                    "temp_short": 1,
                    "temp_short_1": 1,
                    "temp_var2": 1,
                    "temp_var3": 2,
                    "temp_var_2": 1,
                    "temp_variable2": 1,
                    "tmp3": 1,
                    "ushort_var": 1,
                    "ushort_var3": 1,
                    "value": 1,
                    "value1": 1,
                    "var2": 1,
                    "variable2": 1
                },
                "uVar4": {
                    "combined_flag": 1,
                    "flag2": 2,
                    "flags": 1,
                    "flags_copy": 1,
                    "flags_temp": 1,
                    "mask": 1,
                    "new_flags": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp_flag": 1,
                    "temp_flags": 1,
                    "temp_uint": 2,
                    "temp_uint_1": 1,
                    "temp_var": 3,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var4": 2,
                    "temp_var_3": 1,
                    "temp_variable3": 1,
                    "tmp4": 1,
                    "uint_var": 1,
                    "uint_var4": 1,
                    "value2": 2,
                    "var3": 1,
                    "variable3": 1
                },
                "unaff_r4": {
                    "i_var6": 1,
                    "register_var4": 1,
                    "register_variable": 1,
                    "result": 10,
                    "return_value": 10,
                    "status": 1,
                    "status_code": 1,
                    "temp_undefined4": 1,
                    "unaff_r4": 3,
                    "unaffected_var4": 1,
                    "unaffected_variable": 1
                }
            },
            "called": [
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "calling": [
                "FUN_00083ca8",
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_000842a4"
            ],
            "code": "\nundefined4 decode_and_process_data_00083850(int *input_array,int *output_array)\n\n{\n  int *temp_ptr;\n  int var1;\n  ushort flags;\n  uint temp_var;\n  int var2;\n  code *function_ptr;\n  undefined4 return_value;\n  int temp_var3;\n  \n  if ((input_array != (int *)0x0) && (input_array[0xe] == 0)) {\n    __sinit();\n  }\n  if (*(short *)(output_array + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(output_array + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp_var3 = output_array[4];\n    if (temp_var3 == 0) {\n      return 0;\n    }\n    var1 = *output_array;\n    if ((flags & 3) == 0) {\n      var2 = output_array[5];\n    }\n    else {\n      var2 = 0;\n    }\n    *output_array = temp_var3;\n    var1 = var1 - temp_var3;\n    output_array[2] = var2;\n    do {\n      if (var1 < 1) {\n        return 0;\n      }\n      var2 = (*(code *)output_array[9])(input_array,output_array[7],temp_var3,var1,return_value);\n      var1 = var1 - var2;\n      temp_var3 = temp_var3 + var2;\n    } while (0 < var2);\nLAB_000837c8:\n    *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_array + 3) = flags | 0x800;\n  if ((output_array[1] < 1) && (output_array[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (code *)output_array[10];\n  if (function_ptr == (code *)0x0) {\n    return 0;\n  }\n  temp_var = (uint)(flags | 0x800);\n  temp_var3 = *input_array;\n  *input_array = 0;\n  if ((flags & 0x1000) == 0) {\n    var1 = (*function_ptr)(input_array,output_array[7],temp_var & 0x1000,1);\n    if ((var1 == -1) && (var2 = *input_array, var2 != 0)) {\n      if ((var2 == 0x1d) || (var2 == 0x16)) {\n        *input_array = temp_var3;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    temp_var = (uint)*(ushort *)(output_array + 3);\n    function_ptr = (code *)output_array[10];\n  }\n  else {\n    var1 = output_array[0x14];\n  }\n  if (((int)(temp_var << 0x1d) < 0) && (var1 = var1 - output_array[1], output_array[0xc] != 0)) {\n    var1 = var1 - output_array[0xf];\n  }\n  var1 = (*function_ptr)(input_array,output_array[7],var1,0);\n  if (var1 == -1) {\n    var2 = *input_array;\n    if (var2 != 0) {\n      if ((var2 != 0x1d) && (var2 != 0x16)) {\n        *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) & 0xf7ff;\n      *output_array = output_array[4];\n      output_array[1] = 0;\n      goto LAB_00083774;\n    }\n    flags = *(ushort *)(output_array + 3) & 0xf7ff;\n    output_array[1] = 0;\n    *(ushort *)(output_array + 3) = flags;\n    *output_array = output_array[4];\n  }\n  else {\n    flags = *(ushort *)(output_array + 3) & 0xf7ff;\n    *output_array = output_array[4];\n    *(ushort *)(output_array + 3) = flags;\n    output_array[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    output_array[0x14] = var1;\n  }\nLAB_00083774:\n  temp_ptr = (int *)output_array[0xc];\n  *input_array = temp_var3;\n  if (temp_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (temp_ptr != output_array + 0x10) {\n    _free_r(input_array);\n  }\n  output_array[0xc] = 0;\n  return 0;\n}\n\n",
            "current_name": "decode_and_process_data_00083850",
            "entrypoint": "0x00083850",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083850": "decode_and_process_data_00083850",
                "iVar2": "var1",
                "iVar5": "var2",
                "iVar7": "temp_var3",
                "param_1": "input_array",
                "param_2": "output_array",
                "pcVar6": "function_ptr",
                "piVar1": "temp_ptr",
                "uVar3": "flags",
                "uVar4": "temp_var",
                "unaff_r4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083888": {
            "additional_data": {
                "FUN_00083888": {
                    "initialize_data": 3,
                    "initialize_data_structure": 1,
                    "initialize_data_structures": 22,
                    "initialize_function": 1,
                    "initialize_objects": 1,
                    "initialize_parameters": 3
                },
                "param_1": {
                    "base_address": 4,
                    "data": 2,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "data_struct": 5,
                    "data_struct_ptr": 1,
                    "data_structure": 2,
                    "data_structure_address": 3,
                    "data_structure_base_address": 1,
                    "data_structures": 5,
                    "data_structures_address": 1,
                    "data_structures_ptr": 1,
                    "function_data": 1,
                    "object_address": 1,
                    "param": 1
                },
                "puVar1": {
                    "array1": 1,
                    "data_structure1": 5,
                    "first_array_ptr": 1,
                    "first_data_pointer": 1,
                    "object1": 1,
                    "param_set1": 1,
                    "parameter1": 1,
                    "pointer1": 2,
                    "ptr1": 11,
                    "ptr_1": 1,
                    "ptr_data1": 1,
                    "struct1": 1,
                    "struct_pointer1": 1,
                    "struct_ptr1": 1,
                    "structure1": 1,
                    "var1": 1
                },
                "puVar2": {
                    "array2": 1,
                    "data_structure2": 5,
                    "object2": 1,
                    "param_set2": 1,
                    "parameter2": 1,
                    "pointer2": 2,
                    "ptr2": 11,
                    "ptr_2": 1,
                    "ptr_data2": 1,
                    "second_array_ptr": 1,
                    "second_data_pointer": 1,
                    "struct2": 1,
                    "struct_pointer2": 1,
                    "struct_ptr2": 1,
                    "structure2": 1,
                    "var2": 1
                }
            },
            "called": [
                "FUN_00081f00"
            ],
            "calling": [
                "FUN_00084484",
                "FUN_0008356c",
                "FUN_000842a4",
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "code": "\nvoid initialize_data_structures_00083888(int data_structures)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(data_structures + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(data_structures + 4);\n    *(undefined **)(data_structures + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(data_structures + 0x2e4) = 3;\n    *(int *)(data_structures + 0x2e8) = data_structures + 0x2ec;\n    *(undefined4 *)(data_structures + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    memset(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(data_structures + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    memset(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(data_structures + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84221;\n    ptr2[9] = 0x84245;\n    ptr2[10] = 0x8427d;\n    ptr2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    memset(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(data_structures + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00083888",
            "entrypoint": "0x00083888",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "data_structures",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008397c": {
            "called": [],
            "calling": [
                "FUN_00084484"
            ],
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008397c",
            "entrypoint": "0x0008397c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00083980": {
            "called": [],
            "calling": [
                "FUN_00084484"
            ],
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00083980",
            "entrypoint": "0x00083980",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000839b4": {
            "additional_data": {
                "FUN_000839b4": {
                    "convert_and_print_buffer": 1,
                    "convert_and_print_character": 1,
                    "convert_and_print_string": 6,
                    "convert_and_print_to_console": 1,
                    "convert_and_write_char": 1,
                    "convert_and_write_character": 1,
                    "convert_and_write_characters": 1,
                    "convert_and_write_data": 3,
                    "convert_and_write_to_buffer": 1,
                    "convert_and_write_to_output": 1,
                    "convert_and_write_to_stream": 1,
                    "convert_byte_to_unicode": 1,
                    "convert_character": 2,
                    "convert_character_to_byte": 1,
                    "convert_to_character": 1,
                    "decode_and_write_to_buffer": 1,
                    "encode_and_print": 1,
                    "print_string": 1,
                    "write_string": 1,
                    "write_to_buffer": 1,
                    "write_to_output": 2
                },
                "abStack_1b": {
                    "additional_bytes": 3,
                    "additional_characters": 1,
                    "buffer": 1,
                    "buffer_stack": 1,
                    "byte_array": 3,
                    "byte_stack": 1,
                    "conversion_array": 1,
                    "conversion_buffer": 4,
                    "conversion_stack": 2,
                    "input_bytes": 1,
                    "multi_byte": 1,
                    "multi_byte_arr": 1,
                    "multi_byte_array": 1,
                    "multi_byte_character_buffer": 1,
                    "output_stack": 1,
                    "previous_chars": 1,
                    "stack_array": 2,
                    "stack_buffer": 2,
                    "stack_char_array": 1,
                    "stack_chars": 1,
                    "temp_byte_stack": 1
                },
                "iVar1": {
                    "locale_mb_cur_max": 1,
                    "locale_mb_max": 1,
                    "max_byte_size": 1,
                    "max_bytes": 23,
                    "max_char_byte_size": 1,
                    "max_character_bytes": 1,
                    "max_charset_length": 1,
                    "mb_cur_max": 1,
                    "mb_cur_max_value": 1
                },
                "local_1c": {
                    "byte_to_convert": 2,
                    "byte_value": 2,
                    "byte_variable": 1,
                    "char_to_convert": 3,
                    "char_value": 1,
                    "character": 2,
                    "converted_byte": 4,
                    "converted_char_temp": 1,
                    "current_char": 1,
                    "current_character": 1,
                    "output_byte": 1,
                    "single_byte": 5,
                    "single_byte_character": 1,
                    "single_char": 1,
                    "single_character": 1,
                    "temp_byte": 2,
                    "temp_char": 1,
                    "temp_character": 1
                },
                "param_1": {
                    "context": 2,
                    "conversion_context": 1,
                    "data": 1,
                    "encoding": 1,
                    "locale": 15,
                    "locale_mb_cur_max": 1,
                    "locale_object": 1,
                    "mbstate": 1,
                    "output_stream": 1,
                    "param1": 5,
                    "stream": 2
                },
                "param_2": {
                    "buffer_size": 1,
                    "byte_count": 2,
                    "character": 3,
                    "data_size": 2,
                    "input": 2,
                    "input_char": 2,
                    "input_character": 1,
                    "input_size": 1,
                    "input_value": 4,
                    "length": 4,
                    "output_length": 1,
                    "param2": 2,
                    "size": 2,
                    "string_length": 2,
                    "value": 2
                },
                "param_3": {
                    "buffer": 9,
                    "byte_array": 1,
                    "input_data": 1,
                    "output": 3,
                    "output_buffer": 11,
                    "param3": 2,
                    "stream": 1,
                    "string": 1,
                    "string_array": 1,
                    "string_buffer": 1
                },
                "pbVar4": {
                    "buffer": 1,
                    "buffer_pointer": 4,
                    "buffer_ptr": 5,
                    "buffer_size": 1,
                    "byte_pointer": 1,
                    "byte_ptr": 1,
                    "current_buffer": 2,
                    "current_byte": 2,
                    "current_char": 1,
                    "end_of_string": 1,
                    "last_char": 1,
                    "output": 1,
                    "output_buffer": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "pointer": 1,
                    "ptr": 2,
                    "ptr_char": 1,
                    "ptr_to_output_buffer": 1,
                    "remaining_buffer_space": 1,
                    "stream_ptr": 1
                },
                "uVar2": {
                    "bytes_converted": 1,
                    "bytes_written": 7,
                    "conversion_result": 8,
                    "converted_bytes": 1,
                    "num_bytes": 1,
                    "result": 12,
                    "result_code": 1
                },
                "uVar3": {
                    "byte_value": 2,
                    "char_code": 1,
                    "character": 1,
                    "converted_byte": 5,
                    "converted_char": 8,
                    "converted_character": 5,
                    "converted_data": 1,
                    "converted_value": 3,
                    "current_byte": 1,
                    "current_char": 1,
                    "decoded_byte": 1,
                    "encoded_char": 1,
                    "output_value": 1
                },
                "uVar5": {
                    "count": 1,
                    "counter": 3,
                    "current_index": 1,
                    "index": 14,
                    "iteration": 9,
                    "loop_counter": 3
                }
            },
            "called": [
                "FUN_0008400c",
                "FUN_0008434c",
                "FUN_000842a4"
            ],
            "calling": [
                "FUN_00082824"
            ],
            "code": "\nuint convert_and_print_string_000839b4(undefined4 locale,uint length,byte **output_buffer)\n\n{\n  int max_bytes;\n  uint result;\n  uint converted_char;\n  byte *buffer_ptr;\n  uint index;\n  byte single_byte;\n  byte conversion_buffer [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(output_buffer + 3) << 0x12)) {\n    *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x2000;\n    output_buffer[0x19] = (byte *)((uint)output_buffer[0x19] | 0x2000);\n  }\n  max_bytes = __locale_mb_cur_max();\n  if ((max_bytes == 1) && (length - 1 < 0xff)) {\n    converted_char = length & 0xff;\n    single_byte = (byte)converted_char;\n    result = 1;\n  }\n  else {\n    result = _wcrtomb_r(locale,&single_byte,length,output_buffer + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(output_buffer + 3) = *(ushort *)(output_buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return length;\n    }\n    converted_char = (uint)single_byte;\n  }\n  index = 0;\n  do {\n    buffer_ptr = output_buffer[2] + -1;\n    output_buffer[2] = buffer_ptr;\n    if ((int)buffer_ptr < 0) {\n      if ((int)output_buffer[6] <= (int)buffer_ptr) {\n        **output_buffer = (byte)converted_char;\n        buffer_ptr = *output_buffer;\n        converted_char = (uint)*buffer_ptr;\n        if (converted_char != 10) goto LAB_00083a04;\n      }\n      max_bytes = __swbuf_r(locale,converted_char,output_buffer);\n      if (max_bytes == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **output_buffer = (byte)converted_char;\n      buffer_ptr = *output_buffer;\nLAB_00083a04:\n      *output_buffer = buffer_ptr + 1;\n    }\n    if (result <= index + 1) {\n      return length;\n    }\n    converted_char = (uint)conversion_buffer[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "current_name": "convert_and_print_string_000839b4",
            "entrypoint": "0x000839b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000839b4": "convert_and_print_string_000839b4",
                "abStack_1b": "conversion_buffer",
                "iVar1": "max_bytes",
                "local_1c": "single_byte",
                "param_1": "locale",
                "param_2": "length",
                "param_3": "output_buffer",
                "pbVar4": "buffer_ptr",
                "uVar2": "result",
                "uVar3": "converted_char",
                "uVar5": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083a74": {
            "additional_data": {
                "DAT_2007121c": {
                    "allocated_memory": 3,
                    "allocated_memory_offset": 1,
                    "global_offset": 3,
                    "heap_offset": 1,
                    "heap_size": 1,
                    "lock_offset": 1,
                    "memory_adjustment": 1,
                    "memory_base": 1,
                    "offset": 1,
                    "total_memory": 3,
                    "total_memory_allocated": 1,
                    "total_offset": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "elf32_rel_array": 1,
                    "memory_array": 1,
                    "memory_info_array": 1,
                    "rel_array": 3,
                    "relocation_array": 1,
                    "symbol_table": 1
                },
                "FUNC_00081f94": {
                    "function_2": 1,
                    "lock_memory": 1
                },
                "FUNC_00081f98": {
                    "function_1": 1,
                    "unlock_memory": 1
                },
                "FUN_0008236c": {
                    "initialize_memory": 1
                },
                "FUN_00083a74": {
                    "adjust_memory_allocation": 1,
                    "allocate_and_lock_memory": 1,
                    "allocate_and_update_memory": 1,
                    "allocate_memory": 12,
                    "allocate_memory_block": 1,
                    "improve_allocation": 2,
                    "improve_malloc": 1,
                    "improve_memory_allocation": 5,
                    "improved_allocate_memory": 1,
                    "improved_malloc": 1,
                    "memory_allocation": 2,
                    "reallocate_memory": 2,
                    "relocate_memory": 1
                },
                "__malloc_lock": {
                    "acquire_lock": 2,
                    "lock_malloc": 1,
                    "lock_memory": 3
                },
                "__malloc_unlock": {
                    "release_lock": 2,
                    "unlock_malloc": 1,
                    "unlock_memory": 3
                },
                "_sbrk_r": {
                    "allocate_memory": 3,
                    "change_memory_allocation": 1,
                    "change_program_break": 1,
                    "increase_heap_size": 1,
                    "increment_brk": 1,
                    "request_memory": 1,
                    "sbrk_r": 2,
                    "sbrk_with_retval": 1,
                    "sbrk_wrapper": 3,
                    "update_heap_pointer": 1
                },
                "dword": {
                    "dword_type": 1,
                    "uint": 1,
                    "unsigned_int": 1
                },
                "iVar1": {
                    "allocated_address": 1,
                    "allocation_result": 4,
                    "brk_result": 2,
                    "current_end": 1,
                    "initial_address": 1,
                    "new_address": 1,
                    "result": 7,
                    "return_value": 1,
                    "return_value1": 1,
                    "sbrk_r_result": 1,
                    "sbrk_result": 7,
                    "sbrk_result1": 1,
                    "sbrk_return": 1,
                    "sbrk_return_val": 1,
                    "status": 1
                },
                "iVar3": {
                    "adjusted_allocation": 1,
                    "adjusted_length": 1,
                    "adjusted_offset": 6,
                    "adjusted_size": 6,
                    "allocated_size": 1,
                    "allocation_offset": 1,
                    "allocation_size": 1,
                    "brk_delta": 1,
                    "mem_offset": 1,
                    "new_address": 1,
                    "new_brk": 1,
                    "new_end": 1,
                    "new_offset": 4,
                    "new_size": 2,
                    "offset": 1,
                    "required_memory": 1,
                    "sbrk_result2": 1
                },
                "param_1": {
                    "allocator": 1,
                    "heap_size": 1,
                    "lock": 6,
                    "lock_flag": 2,
                    "lock_param": 2,
                    "lock_pointer": 1,
                    "lock_ptr": 2,
                    "lock_var": 1,
                    "mem_lock": 2,
                    "memory_size": 1,
                    "param": 5,
                    "param1": 1,
                    "param1_locked": 1,
                    "param_lock": 1,
                    "param_size": 2,
                    "ptr": 1,
                    "size": 1
                },
                "param_2": {
                    "alignment": 1,
                    "allocated_size": 1,
                    "block_size": 1,
                    "current_allocation": 1,
                    "current_size": 2,
                    "length": 1,
                    "mem_offset": 1,
                    "offset": 4,
                    "param2": 2,
                    "required_size": 1,
                    "size": 13,
                    "size_param": 1,
                    "size_to_allocate": 2
                },
                "strlen": {
                    "calculate_length": 1
                },
                "uVar2": {
                    "adjusted_size": 1,
                    "aligned_size": 1,
                    "allocation_flags": 1,
                    "entry_point": 1,
                    "info_ptr": 1,
                    "mask": 3,
                    "memory_info": 2,
                    "offset": 2,
                    "offset_value": 1,
                    "page_offset": 1,
                    "r_info": 1,
                    "r_info_value": 1,
                    "rel_array_offset": 1,
                    "rel_array_value": 1,
                    "rel_data": 1,
                    "rel_info": 5,
                    "rel_info_value": 1,
                    "rel_offset": 2,
                    "rel_value": 1,
                    "shifted_value": 1,
                    "u_var": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_0008236c",
                "FUN_00081f98",
                "FUN_00081f94"
            ],
            "calling": [
                "FUN_00083b10"
            ],
            "code": "\nundefined4 allocate_memory_block_00083a74(undefined4 lock,int size)\n\n{\n  int sbrk_result;\n  uint rel_info;\n  int adjusted_offset;\n  \n  lock_memory();\n  rel_info = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n  adjusted_offset = ((rel_info - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_offset) {\n    sbrk_result = sbrk_wrapper(lock,0);\n    if (sbrk_result == rel_array[141].r_info + rel_info) {\n      sbrk_result = sbrk_wrapper(lock,-adjusted_offset);\n      if (sbrk_result != -1) {\n        DAT_2007121c = DAT_2007121c - adjusted_offset;\n        *(uint *)(rel_array[141].r_info + 4) = rel_info - adjusted_offset | 1;\n        unlock_memory(lock);\n        return 1;\n      }\n      adjusted_offset = sbrk_wrapper(lock,0);\n      if (0xf < (int)(adjusted_offset - rel_array[141].r_info)) {\n        DAT_2007121c = adjusted_offset - rel_array[270].r_offset;\n        *(dword_type *)(rel_array[141].r_info + 4) =\n             adjusted_offset - rel_array[141].r_info | 1;\n      }\n    }\n  }\n  unlock_memory(lock);\n  return 0;\n}\n\n",
            "current_name": "allocate_memory_block_00083a74",
            "entrypoint": "0x00083a74",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00083a74": "allocate_memory_block_00083a74",
                "__malloc_lock": "lock_memory",
                "__malloc_unlock": "unlock_memory",
                "_sbrk_r": "sbrk_wrapper",
                "dword": "dword_type",
                "iVar1": "sbrk_result",
                "iVar3": "adjusted_offset",
                "param_1": "lock",
                "param_2": "size",
                "uVar2": "rel_info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083b10": {
            "additional_data": {
                "DAT_20071218": {
                    "memory_threshold": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_array": 1,
                    "rel_array": 2,
                    "relocation_array": 1
                },
                "FUNC_00081f94": {
                    "malloc_unlock": 1
                },
                "FUNC_00081f98": {
                    "malloc_lock": 1
                },
                "FUN_00083a74": {
                    "malloc_trim": 1
                },
                "FUN_00083b10": {
                    "adjust_memory_allocation": 1,
                    "process_binary_function": 1,
                    "rearrange_memory_blocks": 2,
                    "reorder_relocation_table": 1,
                    "reorder_relocations": 1,
                    "reorganize_function": 1,
                    "reorganize_memory": 1,
                    "reorganize_memory_blocks": 2,
                    "reverse_relocation": 1,
                    "unlock_and_reorganize_memory": 1,
                    "update_relocation_table": 1
                },
                "__malloc_lock": {
                    "lock_memory": 1
                },
                "_malloc_lock": {
                    "acquire_lock": 1
                },
                "_malloc_trim_r": {
                    "trim_memory_blocks": 1,
                    "trim_memory_region": 1
                },
                "_malloc_unlock": {
                    "release_lock": 1
                },
                "bVar2": {
                    "bool_var": 1,
                    "bool_variable": 1,
                    "boolean_variable": 1,
                    "condition_true": 1,
                    "condition_variable": 1,
                    "flag": 4,
                    "has_condition": 1,
                    "is_condition_met": 1,
                    "is_condition_true": 4,
                    "is_first_block": 1,
                    "is_flag": 1,
                    "is_flag_set": 1,
                    "is_head_block": 1,
                    "is_head_entry": 1,
                    "is_last": 1,
                    "is_match": 1,
                    "is_offset1_match": 1,
                    "is_offset_equal_to": 1,
                    "is_special": 1,
                    "is_special_case": 2,
                    "is_true": 1,
                    "temp_var_2": 2
                },
                "dVar4": {
                    "address1": 1,
                    "current": 1,
                    "current_block": 5,
                    "current_entry": 1,
                    "current_entry_offset": 1,
                    "current_offset": 1,
                    "d_var4": 1,
                    "dword_variable1": 1,
                    "offset": 2,
                    "offset_var": 1,
                    "ptr1": 1,
                    "rel_entry": 1,
                    "some_data": 1,
                    "target": 1,
                    "target_offset": 1,
                    "temp_var2": 1,
                    "temp_var3": 2,
                    "temp_var_4": 1,
                    "temp_variable3": 1,
                    "value2": 2,
                    "var2": 1,
                    "variable1": 1,
                    "variable4": 1
                },
                "dVar7": {
                    "address1": 1,
                    "address2": 1,
                    "address_var": 1,
                    "current_offset": 2,
                    "current_value": 1,
                    "d_var7": 1,
                    "dword_variable2": 1,
                    "entry_offset": 1,
                    "more_data": 1,
                    "new": 1,
                    "new_block": 2,
                    "new_entry": 1,
                    "prev_block": 1,
                    "previous_block": 2,
                    "ptr2": 1,
                    "rel_info": 1,
                    "target2": 1,
                    "temp_var4": 1,
                    "temp_var6": 2,
                    "temp_var_7": 1,
                    "temp_variable6": 1,
                    "value4": 2,
                    "var4": 1,
                    "variable2": 1,
                    "variable7": 1
                },
                "dVar9": {
                    "address2": 1,
                    "address3": 1,
                    "current_block_temp": 1,
                    "d_var9": 1,
                    "dst_entry": 1,
                    "dword_variable3": 1,
                    "final_data": 1,
                    "last_offset": 1,
                    "new_address": 1,
                    "new_offset": 1,
                    "new_previous_block": 1,
                    "new_value": 1,
                    "next_block": 1,
                    "next_entry_offset": 1,
                    "prev_prev_block": 1,
                    "ptr3": 1,
                    "search_block": 1,
                    "temp_var2": 1,
                    "temp_var5": 1,
                    "temp_var8": 2,
                    "temp_var_9": 1,
                    "temp_variable8": 1,
                    "value2": 1,
                    "value6": 2,
                    "var6": 1,
                    "variable3": 1,
                    "variable9": 1
                },
                "iVar1": {
                    "current_offset": 1,
                    "index": 1,
                    "index1": 6,
                    "index_var1": 2,
                    "next": 1,
                    "next_offset": 1,
                    "offset1": 1,
                    "previous_block": 1,
                    "some_value": 1,
                    "src_entry": 1,
                    "temp1": 1,
                    "temp_var1": 6,
                    "temp_var_1": 2,
                    "temp_variable1": 1,
                    "temp_variable_1": 1,
                    "tmp1": 1,
                    "variable1": 2
                },
                "iVar5": {
                    "index2": 6,
                    "index_var5": 2,
                    "next_block": 1,
                    "next_entry": 1,
                    "next_index": 1,
                    "next_value": 1,
                    "offset2": 1,
                    "other_value": 1,
                    "prev": 1,
                    "temp2": 1,
                    "temp_var": 1,
                    "temp_var2": 3,
                    "temp_var3": 1,
                    "temp_var4": 2,
                    "temp_var_3": 1,
                    "temp_var_5": 1,
                    "temp_variable4": 1,
                    "temp_variable_2": 1,
                    "tmp2": 1,
                    "variable2": 1,
                    "variable5": 1
                },
                "param_1": {
                    "arg1": 2,
                    "data_structure": 1,
                    "lock": 8,
                    "lock_param": 4,
                    "lock_parameter": 1,
                    "mem_lock": 1,
                    "param": 6,
                    "param1": 6,
                    "param_1": 1,
                    "param_lock": 1
                },
                "param_2": {
                    "address": 1,
                    "arg2": 2,
                    "array_size": 1,
                    "binary": 1,
                    "block_address": 1,
                    "data": 1,
                    "data_param": 2,
                    "input": 1,
                    "memory_block": 2,
                    "memory_block_param": 1,
                    "memory_pointer": 1,
                    "offset": 1,
                    "param": 1,
                    "param2": 6,
                    "param_2": 1,
                    "param_number": 1,
                    "pointer": 2,
                    "rel_info": 1,
                    "rel_table": 1,
                    "relocation_offset": 1,
                    "relocation_table": 1,
                    "size": 1
                },
                "uVar3": {
                    "alignment": 1,
                    "block_size": 2,
                    "entry_size": 1,
                    "first_value": 1,
                    "flag": 2,
                    "flags": 2,
                    "header": 1,
                    "info": 1,
                    "info_flag": 1,
                    "last_entry_offset": 1,
                    "mask": 2,
                    "mask_var": 1,
                    "masked_array_size": 1,
                    "previous_offset": 1,
                    "temp_var2": 2,
                    "temp_var_3": 1,
                    "temp_variable2": 1,
                    "u_var3": 1,
                    "unsigned_variable": 1,
                    "value1": 4,
                    "var1": 1,
                    "variable3": 1
                },
                "uVar6": {
                    "adjusted_block_size": 1,
                    "adjustment": 1,
                    "block_size": 3,
                    "current_size": 1,
                    "entry_offset_diff": 1,
                    "mask2": 1,
                    "masked_u_var3": 1,
                    "new_block_size": 1,
                    "offset": 1,
                    "rel_offset": 1,
                    "relocation_size": 1,
                    "second_value": 1,
                    "size": 3,
                    "size_var": 1,
                    "temp_var5": 2,
                    "temp_var_6": 1,
                    "temp_variable5": 1,
                    "u_var6": 1,
                    "unsigned_variable2": 1,
                    "value2": 2,
                    "value3": 2,
                    "var3": 1,
                    "variable6": 1
                },
                "uVar8": {
                    "additional_size": 1,
                    "count": 1,
                    "masked_d_var7": 1,
                    "new_block_size": 3,
                    "new_entry_size": 1,
                    "new_size": 2,
                    "next_offset": 1,
                    "offset": 1,
                    "size": 1,
                    "temp_var1": 1,
                    "temp_var7": 2,
                    "temp_var_8": 1,
                    "temp_variable7": 1,
                    "third_value": 1,
                    "total_block": 1,
                    "trimmed_size": 1,
                    "u_var8": 1,
                    "unsigned_variable3": 1,
                    "updated_block_size": 1,
                    "value": 1,
                    "value3": 2,
                    "value5": 2,
                    "var5": 1,
                    "variable8": 1
                }
            },
            "called": [
                "FUN_00081f98",
                "FUN_00083a74",
                "FUN_00081f94"
            ],
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac",
                "FUN_00084484",
                "FUN_0008356c",
                "FUN_00081810",
                "FUN_00081800",
                "FUN_00083850"
            ],
            "code": "\nvoid reorganize_memory_blocks_00083b10(undefined4 lock,int param2)\n\n{\n  int temp_var1;\n  bool flag;\n  uint value1;\n  dword current_block;\n  int index2;\n  uint block_size;\n  dword temp_var6;\n  uint new_block_size;\n  dword temp_var8;\n  \n  if (param2 == 0) {\n    return;\n  }\n  lock_memory();\n  value1 = *(uint *)(param2 + -4);\n  temp_var6 = param2 - 8;\n  block_size = value1 & 0xfffffffe;\n  current_block = temp_var6 + block_size;\n  new_block_size = *(uint *)(current_block + 4) & 0xfffffffc;\n  if (rel_array[141].r_info == current_block) {\n    new_block_size = new_block_size + block_size;\n    if (-1 < (int)(value1 << 0x1f)) {\n      temp_var6 = temp_var6 - *(int *)(param2 + -8);\n      index2 = *(int *)(temp_var6 + 0xc);\n      temp_var1 = *(int *)(temp_var6 + 8);\n      new_block_size = new_block_size + *(int *)(param2 + -8);\n      *(int *)(temp_var1 + 0xc) = index2;\n      *(int *)(index2 + 8) = temp_var1;\n    }\n    current_block = rel_array[269].r_info;\n    *(uint *)(temp_var6 + 4) = new_block_size | 1;\n    rel_array[141].r_info = temp_var6;\n    if (current_block <= new_block_size) {\n      trim_memory_blocks(lock,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(current_block + 4) = new_block_size;\n    if ((value1 & 1) == 0) {\n      temp_var6 = temp_var6 - *(int *)(param2 + -8);\n      temp_var1 = *(int *)(temp_var6 + 8);\n      block_size = block_size + *(int *)(param2 + -8);\n      if (temp_var1 == 0x2007046c) {\n        flag = true;\n      }\n      else {\n        index2 = *(int *)(temp_var6 + 0xc);\n        *(int *)(temp_var1 + 0xc) = index2;\n        *(int *)(index2 + 8) = temp_var1;\n        flag = false;\n      }\n    }\n    else {\n      flag = false;\n    }\n    if (-1 < *(int *)(current_block + new_block_size + 4) << 0x1f) {\n      block_size = block_size + new_block_size;\n      temp_var1 = *(int *)(current_block + 8);\n      if ((!flag) && (temp_var1 == 0x2007046c)) {\n        rel_array[142].r_info = temp_var6;\n        rel_array[143].r_offset = temp_var6;\n        *(undefined4 *)(temp_var6 + 0xc) = 0x2007046c;\n        *(undefined4 *)(temp_var6 + 8) = 0x2007046c;\n        *(uint *)(temp_var6 + 4) = block_size | 1;\n        *(uint *)(temp_var6 + block_size) = block_size;\n        goto LAB_00083ba4;\n      }\n      index2 = *(int *)(current_block + 0xc);\n      *(int *)(temp_var1 + 0xc) = index2;\n      *(int *)(index2 + 8) = temp_var1;\n    }\n    *(uint *)(temp_var6 + 4) = block_size | 1;\n    *(uint *)(temp_var6 + block_size) = block_size;\n    if (!flag) {\n      if (block_size < 0x200) {\n        value1 = block_size & 0xfffffff8;\n        temp_var1 = *(int *)((int)&rel_array[0x8d].r_info + value1);\n        rel_array[141].r_offset =\n             rel_array[141].r_offset | 1 << ((int)(block_size >> 3) >> 2 & 0xffU);\n        *(int *)(temp_var6 + 8) = temp_var1;\n        *(uint *)(temp_var6 + 0xc) = value1 + 0x20070464;\n        *(dword *)((int)&rel_array[0x8d].r_info + value1) = temp_var6;\n        *(dword *)(temp_var1 + 0xc) = temp_var6;\n        _release_lock(lock);\n        return;\n      }\n      value1 = block_size >> 9;\n      if (value1 < 5) {\n        temp_var1 = (block_size >> 6) + 0x38;\n        index2 = temp_var1 * 2;\n      }\n      else if (value1 < 0x15) {\n        temp_var1 = value1 + 0x5b;\n        index2 = temp_var1 * 2;\n      }\n      else if (value1 < 0x55) {\n        temp_var1 = (block_size >> 0xc) + 0x6e;\n        index2 = temp_var1 * 2;\n      }\n      else if (value1 < 0x155) {\n        temp_var1 = (block_size >> 0xf) + 0x77;\n        index2 = temp_var1 * 2;\n      }\n      else if (value1 < 0x555) {\n        temp_var1 = (block_size >> 0x12) + 0x7c;\n        index2 = temp_var1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        temp_var1 = 0x7e;\n      }\n      temp_var8 = index2 * 4 + 0x20070464;\n      current_block = (&rel_array[0x8d].r_info)[index2];\n      if (current_block == temp_var8) {\n        rel_array[141].r_offset =\n             rel_array[141].r_offset | 1 << (temp_var1 >> 2 & 0xffU);\n        temp_var8 = current_block;\n      }\n      else {\n        do {\n          if ((*(uint *)(current_block + 4) & 0xfffffffc) <= block_size) break;\n          current_block = *(dword *)(current_block + 8);\n        } while (temp_var8 != current_block);\n        temp_var8 = *(dword *)(current_block + 0xc);\n      }\n      *(dword *)(temp_var6 + 0xc) = temp_var8;\n      *(dword *)(temp_var6 + 8) = current_block;\n      *(dword *)(temp_var8 + 8) = temp_var6;\n      *(dword *)(current_block + 0xc) = temp_var6;\n    }\n  }\nLAB_00083ba4:\n  _release_lock(lock);\n  return;\n}\n\n",
            "current_name": "reorganize_memory_blocks_00083b10",
            "entrypoint": "0x00083b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00083b10": "reorganize_memory_blocks_00083b10",
                "__malloc_lock": "lock_memory",
                "_malloc_lock": "acquire_lock",
                "_malloc_trim_r": "trim_memory_blocks",
                "_malloc_unlock": "release_lock",
                "bVar2": "flag",
                "dVar4": "current_block",
                "dVar7": "temp_var6",
                "dVar9": "temp_var8",
                "iVar1": "temp_var1",
                "iVar5": "index2",
                "param_1": "lock",
                "param_2": "param2",
                "uVar3": "value1",
                "uVar6": "block_size",
                "uVar8": "new_block_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "additional_data": {
                "FUN_00081810": {
                    "allocate_buffer": 1,
                    "reserve_memory": 1
                },
                "FUN_00081d48": {
                    "setup_buffers": 1,
                    "setup_function": 1
                },
                "FUN_00081e34": {
                    "copy_buffer": 1,
                    "move_data_and_check": 1
                },
                "FUN_00081fac": {
                    "check_setup": 1,
                    "write_data": 1
                },
                "FUN_0008356c": {
                    "copy_data_function": 1,
                    "initialize_buffer": 1
                },
                "FUN_00083850": {
                    "realloc_memory": 1,
                    "reallocate_buffer": 1
                },
                "FUN_00083b10": {
                    "handle_error": 1,
                    "set_flag": 1
                },
                "FUN_00083ca8": {
                    "decompress_buffer": 1,
                    "extract_data": 1,
                    "process_data": 8
                },
                "FUN_000840f8": {
                    "read_and_process_data": 1,
                    "resize_buffer": 1
                },
                "LAB_00083da2": {
                    "error_label1": 1
                },
                "LAB_00083da4": {
                    "error_label2": 1
                },
                "_118": {
                    "operation_function": 1
                },
                "__swsetup_r": {
                    "initialize_buffer_function": 1,
                    "prepare_buffer": 1,
                    "prepare_setup": 1,
                    "setup_function": 2,
                    "setup_r": 1,
                    "setup_read_write_function": 1,
                    "setup_reverse": 1,
                    "switch_setup_function": 1
                },
                "_fflush_r": {
                    "flush_buffer": 4,
                    "flush_buffer_function": 1,
                    "flush_function": 2,
                    "flush_memory": 2,
                    "flush_r": 1,
                    "flush_read_write_function": 1,
                    "helper_function7": 1
                },
                "_free_r": {
                    "free_function": 1,
                    "free_memory": 7,
                    "free_memory_function": 2,
                    "free_r": 1,
                    "helper_function5": 1
                },
                "_malloc_r": {
                    "allocate_memory": 7,
                    "allocate_memory_function": 2,
                    "helper_function2": 1,
                    "malloc_function": 1,
                    "malloc_r": 1
                },
                "_memchr_r": {
                    "memchr_function": 1
                },
                "_memcpy_r": {
                    "memcpy_function": 1
                },
                "_memmove_r": {
                    "memmove_function": 1
                },
                "_memset_r": {
                    "memset_function": 1
                },
                "_realloc_r": {
                    "helper_function4": 1,
                    "realloc_function": 1,
                    "realloc_r": 1,
                    "reallocate_memory": 6,
                    "reallocate_memory_function": 2,
                    "resize_memory": 1
                },
                "_strcpy_r": {
                    "strcpy_function": 1
                },
                "_strncpy_r": {
                    "strncpy_function": 1
                },
                "_swsetup_r": {
                    "helper_function1": 1,
                    "perform_setup": 1
                },
                "code": {
                    "function_ptr": 1
                },
                "iVar1": {
                    "result": 23,
                    "return_code": 1,
                    "return_value": 3,
                    "status": 3,
                    "swsetup_result": 1
                },
                "local_2c": {
                    "flag2": 1,
                    "local_data": 1,
                    "local_flag": 1,
                    "local_value": 2,
                    "local_var": 8,
                    "local_var1": 2,
                    "local_var2c": 1,
                    "local_variable": 3,
                    "size_left": 1,
                    "temp3": 1,
                    "temp7": 1,
                    "temp_data": 1,
                    "temp_size": 1,
                    "temp_value6": 1,
                    "temp_var": 1,
                    "temp_var6": 2,
                    "temp_var9": 1,
                    "var9": 1
                },
                "memchr": {
                    "character_memory": 1,
                    "find_character": 4,
                    "helper_function8": 1,
                    "search_character": 1,
                    "search_memory": 3,
                    "search_memory_function": 1
                },
                "memcpy": {
                    "copy_memory": 9,
                    "copy_memory_function": 1,
                    "helper_function3": 1
                },
                "memmove": {
                    "helper_function6": 1,
                    "move_memory": 9,
                    "move_memory_function": 1
                },
                "memset": {
                    "set_memory": 3
                },
                "param_1": {
                    "array": 1,
                    "array_ptr": 1,
                    "buffer": 1,
                    "error_code": 10,
                    "error_flag": 1,
                    "error_status": 2,
                    "function_status": 1,
                    "input_array": 1,
                    "input_buffer": 1,
                    "output": 2,
                    "output_buffer": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "param1": 2,
                    "param_array": 2,
                    "read_buffer": 1,
                    "status": 2
                },
                "param_2": {
                    "buffer": 6,
                    "data": 5,
                    "data_buffer": 1,
                    "data_ptr": 1,
                    "input": 1,
                    "input_array": 2,
                    "input_buffer": 2,
                    "input_data": 4,
                    "input_pointer": 1,
                    "input_value": 1,
                    "int_array": 1,
                    "output_buffer": 2,
                    "param2": 2,
                    "param_pointer": 1,
                    "src_buffer": 1
                },
                "param_3": {
                    "array_of_arrays": 1,
                    "buffer": 3,
                    "buffer_info": 1,
                    "buffer_ptr": 2,
                    "data_info": 1,
                    "dst_buffer": 1,
                    "dynamic_data": 1,
                    "dynamic_memory": 1,
                    "extra_data_pointer": 1,
                    "length": 1,
                    "offsets": 1,
                    "output": 1,
                    "output_buffer": 1,
                    "output_data": 4,
                    "output_ptr": 1,
                    "param3": 2,
                    "param_array": 1,
                    "param_pointer_array": 1,
                    "parameters": 1,
                    "params": 1,
                    "pointer_to_data": 1,
                    "ptr_array": 1,
                    "ptr_list": 1,
                    "uint_ptr_ptr": 1
                },
                "processData": {
                    "process_data": 1
                },
                "puVar6": {
                    "pointer1": 4,
                    "pointer_to_buffer_1": 1,
                    "pointer_var": 1,
                    "pointer_var1": 3,
                    "ptr": 1,
                    "ptr1": 14,
                    "ptr_buffer": 1,
                    "ptr_var1": 1,
                    "src_ptr": 1,
                    "temp_ptr": 2,
                    "uint_ptr1": 1,
                    "var_pointer6": 1
                },
                "puVar7": {
                    "data_ptr": 1,
                    "dst_ptr": 1,
                    "pointer2": 4,
                    "pointer_to_buffer_2": 1,
                    "pointer_var2": 4,
                    "ptr": 1,
                    "ptr2": 15,
                    "ptr_buffer_ptr": 1,
                    "ptr_var2": 1,
                    "uint_ptr2": 1,
                    "var_pointer7": 1
                },
                "tempVar1": {
                    "temp_var1": 1
                },
                "tempVar2": {
                    "temp_var2": 1
                },
                "tempVar3": {
                    "temp_var3": 1
                },
                "tempVar4": {
                    "temp_var4": 1
                },
                "tempVar5": {
                    "temp_var5": 1
                },
                "tempVar6": {
                    "temp_var6": 1
                },
                "uVar10": {
                    "chunk_size": 1,
                    "count": 1,
                    "num3": 1,
                    "offset": 1,
                    "size3": 1,
                    "temp": 1,
                    "temp3": 2,
                    "temp5": 2,
                    "temp_data": 1,
                    "temp_value": 1,
                    "temp_value4": 1,
                    "temp_var3": 1,
                    "temp_var4": 2,
                    "temp_var5": 1,
                    "temp_var6": 2,
                    "temp_var7": 3,
                    "temp_var_7": 1,
                    "value3": 1,
                    "value4": 1,
                    "var1": 1,
                    "var10": 1,
                    "var7": 3
                },
                "uVar11": {
                    "bytes_written": 1,
                    "num4": 1,
                    "result": 1,
                    "return_value": 3,
                    "size4": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp6": 2,
                    "temp_size": 1,
                    "temp_value5": 1,
                    "temp_var4": 1,
                    "temp_var5": 2,
                    "temp_var6": 1,
                    "temp_var7": 2,
                    "temp_var8": 3,
                    "temp_var_8": 1,
                    "value4": 1,
                    "value5": 1,
                    "var11": 1,
                    "var2": 1,
                    "var8": 3
                },
                "uVar2": {
                    "chunk_size": 1,
                    "data1": 1,
                    "data_length": 1,
                    "flag1": 1,
                    "length": 2,
                    "offset": 1,
                    "read_length": 1,
                    "src_size": 1,
                    "temp1": 5,
                    "temp_var": 1,
                    "temp_var1": 8,
                    "temp_var_1": 1,
                    "value1": 3,
                    "var1": 3,
                    "var2": 1
                },
                "uVar3": {
                    "data2": 1,
                    "flag": 1,
                    "flag2": 1,
                    "size": 1,
                    "temp": 5,
                    "temp2": 5,
                    "temp_var2": 9,
                    "temp_var_2": 1,
                    "value2": 3,
                    "var2": 3,
                    "var3": 1
                },
                "uVar4": {
                    "flag": 12,
                    "flag3": 1,
                    "flags": 6,
                    "mask": 1,
                    "temp3": 1,
                    "temp_flag": 1,
                    "temp_var3": 3,
                    "temp_var_3": 1,
                    "ushort_value": 1,
                    "var3": 3,
                    "var4": 1
                },
                "uVar5": {
                    "buffer_size": 1,
                    "data_size": 1,
                    "len": 2,
                    "length": 3,
                    "remaining_size": 1,
                    "size": 1,
                    "temp": 2,
                    "temp2": 3,
                    "temp4": 1,
                    "temp_data_length": 1,
                    "temp_value1": 1,
                    "temp_var3": 3,
                    "temp_var4": 3,
                    "temp_var_4": 1,
                    "uint_value": 1,
                    "value1": 2,
                    "var4": 3,
                    "var5": 1
                },
                "uVar8": {
                    "count": 1,
                    "length": 3,
                    "min_length": 1,
                    "num1": 1,
                    "num_bytes": 1,
                    "size": 4,
                    "size1": 1,
                    "size_var1": 1,
                    "temp1": 1,
                    "temp3": 2,
                    "temp_value2": 1,
                    "temp_var4": 2,
                    "temp_var5": 3,
                    "temp_var_5": 1,
                    "value1": 1,
                    "value2": 2,
                    "var5": 3,
                    "var8": 1
                },
                "uVar9": {
                    "malloc_size": 1,
                    "new_size": 5,
                    "num2": 1,
                    "size": 1,
                    "size2": 1,
                    "size_var2": 1,
                    "temp2": 1,
                    "temp4": 2,
                    "temp_length": 1,
                    "temp_value3": 1,
                    "temp_var3": 2,
                    "temp_var4": 1,
                    "temp_var5": 2,
                    "temp_var6": 3,
                    "temp_var_6": 1,
                    "value2": 1,
                    "value3": 1,
                    "var6": 3,
                    "var9": 1
                }
            },
            "called": [
                "FUN_00081d48",
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_0008356c",
                "FUN_00081810",
                "FUN_00083850",
                "FUN_000840f8",
                "FUN_00081e34"
            ],
            "calling": [
                "FUN_00082824"
            ],
            "code": "\nundefined4 process_data_00083ca8(undefined4 *error_code,uint *buffer,uint **output_data)\n\n{\n  int result;\n  uint temp_var1;\n  uint temp_var2;\n  ushort flag;\n  uint temp_var4;\n  uint *ptr1;\n  uint *ptr2;\n  uint size;\n  uint new_size;\n  uint temp_var7;\n  uint var8;\n  uint local_var;\n  \n  if (output_data[2] != (uint *)0x0) {\n    flag = *(ushort *)(buffer + 3);\n    temp_var4 = (uint)flag;\n    if (((int)(temp_var4 << 0x1c) < 0) && (buffer[4] != 0)) {\n      ptr2 = *output_data;\n    }\n    else {\n      result = setup_function(error_code,buffer);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(buffer + 3);\n      temp_var4 = (uint)flag;\n      ptr2 = *output_data;\n    }\n    if ((flag & 2) == 0) {\n      temp_var1 = temp_var4 & 2;\n      temp_var7 = temp_var1;\n      size = temp_var1;\n      local_var = temp_var1;\n      if ((temp_var4 & 1) == 0) {\n        temp_var1 = 0;\n        temp_var7 = 0;\n        while( true ) {\n          while (temp_var1 == 0) {\n            temp_var7 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp_var1 = *ptr1;\n          }\n          size = buffer[2];\n          if ((int)(temp_var4 << 0x16) < 0) {\n            if (temp_var1 < size) {\n              temp_var4 = *buffer;\n              size = temp_var1;\n            }\n            else if ((temp_var4 & 0x480) == 0) {\n              temp_var4 = *buffer;\n            }\n            else {\n              result = *buffer - buffer[4];\n              size = result + 1 + temp_var1;\n              new_size = (int)(buffer[5] * 3) / 2;\n              if (size <= new_size) {\n                size = new_size;\n              }\n              if ((int)(temp_var4 << 0x15) < 0) {\n                new_size = allocate_memory(error_code,size);\n                if (new_size == 0) {\n                  *error_code = 0xc;\n                  flag = *(ushort *)(buffer + 3);\n                  goto error_label2;\n                }\n                copy_memory(new_size,buffer[4],result);\n                *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                new_size = reallocate_memory(error_code);\n                if (new_size == 0) {\n                  free_memory(error_code,buffer[4]);\n                  flag = *(ushort *)(buffer + 3) & 0xff7f;\n                  *error_code = 0xc;\n                  goto error_label2;\n                }\n              }\n              temp_var4 = new_size + result;\n              buffer[4] = new_size;\n              buffer[5] = size;\n              *buffer = temp_var4;\n              buffer[2] = size - result;\n              size = temp_var1;\n            }\n            move_memory(temp_var4,temp_var7,size);\n            buffer[2] = buffer[2] - size;\n            *buffer = *buffer + size;\n            size = temp_var1;\n          }\n          else if ((buffer[4] < *buffer) || (temp_var4 = buffer[5], temp_var1 < temp_var4)) {\n            if (temp_var1 < size) {\n              size = temp_var1;\n            }\n            move_memory(*buffer,temp_var7,size);\n            temp_var4 = buffer[2];\n            buffer[2] = temp_var4 - size;\n            *buffer = *buffer + size;\n            if ((temp_var4 - size == 0) && (result = flush_buffer(error_code,buffer), result != 0))\n            goto error_label1;\n          }\n          else {\n            size = 0x7fffffff;\n            if (temp_var1 < 0x7fffffff) {\n              size = temp_var1;\n            }\n            size = (*(function_ptr *)buffer[9])(error_code,buffer[7],temp_var7,(size / temp_var4) * temp_var4);\n            if ((int)size < 1) goto error_label1;\n          }\n          ptr1 = output_data[2];\n          temp_var7 = temp_var7 + size;\n          temp_var1 = temp_var1 - size;\n          output_data[2] = (uint *)((int)ptr1 - size);\n          if ((uint *)((int)ptr1 - size) == (uint *)0x0) break;\n          temp_var4 = (uint)*(ushort *)(buffer + 3);\n        }\n      }\n      else {\n        do {\n          while (temp_var1 == 0) {\n            size = *ptr2;\n            temp_var1 = ptr2[1];\n            local_var = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_var == 0) {\n            result = find_character(size,10,temp_var1);\n            if (result == 0) {\n              temp_var7 = temp_var1 + 1;\n              local_var = 1;\n            }\n            else {\n              temp_var7 = (result + 1) - size;\n              local_var = 1;\n            }\n          }\n          new_size = *buffer;\n          temp_var4 = temp_var7;\n          if (temp_var1 <= temp_var7) {\n            temp_var4 = temp_var1;\n          }\n          temp_var2 = buffer[5];\n          if ((buffer[4] < new_size) && (var8 = buffer[2] + temp_var2, (int)var8 < (int)temp_var4)) {\n            move_memory(new_size,size,var8);\n            *buffer = *buffer + var8;\n            result = flush_buffer(error_code,buffer);\n            if (result != 0) goto error_label1;\n          }\n          else if ((int)temp_var4 < (int)temp_var2) {\n            move_memory(new_size,size,temp_var4);\n            buffer[2] = buffer[2] - temp_var4;\n            *buffer = temp_var4 + *buffer;\n            var8 = temp_var4;\n          }\n          else {\n            var8 = (*(function_ptr *)buffer[9])(error_code,buffer[7],size,temp_var2);\n            if ((int)var8 < 1) goto error_label1;\n          }\n          temp_var7 = temp_var7 - var8;\n          if (temp_var7 == 0) {\n            result = flush_buffer(error_code,buffer);\n            if (result != 0) goto error_label1;\n            local_var = 0;\n          }\n          ptr1 = output_data[2];\n          size = size + var8;\n          temp_var1 = temp_var1 - var8;\n          output_data[2] = (uint *)((int)ptr1 - var8);\n        } while ((uint *)((int)ptr1 - var8) != (uint *)0x0);\n      }\n    }\n    else {\n      temp_var1 = 0;\n      temp_var4 = 0;\n      do {\n        while( true ) {\n          temp_var7 = temp_var4;\n          if (0x7ffffbff < temp_var4) {\n            temp_var7 = 0x7ffffc00;\n          }\n          if (temp_var4 != 0) break;\n          temp_var1 = *ptr2;\n          temp_var4 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(function_ptr *)buffer[9])(error_code,buffer[7],temp_var1,temp_var7);\n        if (result < 1) {\nerror_label1:\n          flag = *(ushort *)(buffer + 3);\nerror_label2:\n          *(ushort *)(buffer + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = output_data[2];\n        temp_var1 = temp_var1 + result;\n        temp_var4 = temp_var4 - result;\n        output_data[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00083ca8",
            "entrypoint": "0x00083ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "LAB_00083da2": "error_label1",
                "LAB_00083da4": "error_label2",
                "__swsetup_r": "setup_function",
                "_fflush_r": "flush_buffer",
                "_free_r": "free_memory",
                "_malloc_r": "allocate_memory",
                "_realloc_r": "reallocate_memory",
                "_swsetup_r": "perform_setup",
                "code": "function_ptr",
                "iVar1": "result",
                "local_2c": "local_var",
                "memchr": "find_character",
                "memcpy": "copy_memory",
                "memmove": "move_memory",
                "param_1": "error_code",
                "param_2": "buffer",
                "param_3": "output_data",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar10": "temp_var7",
                "uVar11": "var8",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "flag",
                "uVar5": "temp_var4",
                "uVar8": "size",
                "uVar9": "new_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084004": {
            "additional_data": {
                "0x20070878": {
                    "magic_number": 2,
                    "memory_address": 5,
                    "return_value": 1
                },
                "FUN_00084004": {
                    "get_base_address": 1,
                    "get_constant_value": 1,
                    "get_initial_value": 2,
                    "get_magic_number": 4,
                    "get_memory_address": 22,
                    "get_return_value": 1
                },
                "PTR_00000008": {
                    "result": 1
                },
                "PTR_20070878": {
                    "magic_number": 1,
                    "memory_address": 1
                },
                "return": {
                    "address": 1,
                    "memory_address": 1
                },
                "undefined4": {
                    "int": 1,
                    "uint32": 4,
                    "uint32_t": 9
                }
            },
            "called": [],
            "calling": [
                "FUN_0008434c"
            ],
            "code": "\nuint32_t get_memory_address_00084004(void)\n\n{\n  address 0x20070878;\n}\n\n",
            "current_name": "get_memory_address_00084004",
            "entrypoint": "0x00084004",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004",
                "return": "address",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008400c": {
            "additional_data": {
                "275": {
                    "index": 2
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "elf32_rel_array": 3,
                    "elf_rel_array": 4,
                    "elf_relocation_array": 9,
                    "elf_relocations": 1,
                    "rel_array": 4,
                    "relocation_array": 3,
                    "relocation_entries": 2,
                    "relocation_table": 5
                },
                "FUN_0008400c": {
                    "get_elf32_rel_offset": 3,
                    "get_elf_rel_offset": 4,
                    "get_elf_relocation_offset": 10,
                    "get_offset_from_array": 1,
                    "get_offset_from_relocation_array": 1,
                    "get_rel_array_offset": 1,
                    "get_rel_offset": 1,
                    "get_relocation_offset": 10
                },
                "r_offset": {
                    "offset": 3,
                    "rel_offset": 1,
                    "relative_offset": 1,
                    "relocation_offset": 5
                }
            },
            "called": [],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\ndword get_elf_relocation_offset_0008400c(void)\n\n{\n  return elf_relocation_array[275].relocation_offset;\n}\n\n",
            "current_name": "get_elf_relocation_offset_0008400c",
            "entrypoint": "0x0008400c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf_relocation_array",
                "FUN_0008400c": "get_elf_relocation_offset_0008400c",
                "r_offset": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084018": {
            "additional_data": {
                "FUN_00081810": {
                    "open_file": 1,
                    "sub_function_3": 1
                },
                "FUN_00084018": {
                    "analyze_file": 1,
                    "check_file_permissions": 1,
                    "decode_file": 1,
                    "extract_file_attributes": 1,
                    "extract_file_info": 1,
                    "extract_info_and_allocate_memory": 1,
                    "file_status_update": 1,
                    "initialize_data": 1,
                    "initialize_file": 3,
                    "initialize_file_access": 1,
                    "initialize_parameter": 1,
                    "process_file": 4,
                    "update_file_information": 1
                },
                "FUN_00084494": {
                    "initialize_file_info": 1,
                    "sub_function_2": 1
                },
                "FUN_000844bc": {
                    "set_file_info": 1,
                    "sub_function_1": 1
                },
                "_fstat_r": {
                    "get_file_stat": 2,
                    "get_file_status": 5
                },
                "_isatty_r": {
                    "check_if_tty": 1,
                    "check_terminal_status": 1,
                    "is_terminal_device": 4,
                    "is_terminal_function": 1
                },
                "_malloc_r": {
                    "allocate_memory": 7
                },
                "auStack_54": {
                    "buffer": 3,
                    "file_stat": 3,
                    "file_stat_buffer": 5,
                    "file_status_buffer": 1,
                    "fstat_struct": 1,
                    "stack_arr": 1,
                    "stack_var": 1,
                    "stat_buf": 1,
                    "stat_buffer": 12,
                    "temp_array": 1,
                    "temp_buffer": 1,
                    "temporary_stack": 1
                },
                "bVar5": {
                    "flag": 2,
                    "is_executable": 6,
                    "is_file_valid": 1,
                    "is_flag_set": 1,
                    "is_regular_file": 13,
                    "is_symbolic_link": 1,
                    "is_terminal": 2,
                    "is_tty": 4,
                    "var5": 1
                },
                "iVar2": {
                    "buffer_size": 1,
                    "file_descriptor_mod": 1,
                    "file_size": 2,
                    "file_stat_result": 8,
                    "file_status": 8,
                    "memory_allocation_size": 1,
                    "result": 3,
                    "stat_result": 2,
                    "status": 4,
                    "var2": 1
                },
                "iVar3": {
                    "allocated_buffer": 1,
                    "allocated_memory": 6,
                    "allocation_result": 1,
                    "allocation_status": 1,
                    "file_allocation_result": 1,
                    "file_status": 1,
                    "malloc_result": 9,
                    "malloc_size": 1,
                    "malloc_status": 1,
                    "memory_allocation": 2,
                    "memory_allocation_result": 3,
                    "result": 2,
                    "status": 1,
                    "var3": 1
                },
                "local_50": {
                    "file_attributes": 1,
                    "file_info": 1,
                    "file_mode": 8,
                    "file_permission": 1,
                    "file_permissions": 1,
                    "file_type": 5,
                    "file_type_mask": 1,
                    "local_50": 1,
                    "local_value": 2,
                    "local_var": 4,
                    "local_variable": 2,
                    "mode": 1,
                    "permissions": 1,
                    "stat_buffer_mode": 1,
                    "stat_result": 1
                },
                "param_1": {
                    "arg1": 1,
                    "file_descriptor": 23,
                    "input": 1,
                    "input_file": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "param": 1,
                    "param_1": 1,
                    "param_array": 1
                },
                "param_2": {
                    "arg2": 1,
                    "data": 1,
                    "file_info": 17,
                    "file_information": 1,
                    "file_status": 1,
                    "info_array": 1,
                    "output": 1,
                    "output_array": 1,
                    "output_buffer": 1,
                    "output_param": 1,
                    "output_parameter": 1,
                    "param_2": 1,
                    "param_array": 1,
                    "param_pointer": 1,
                    "status_info": 1
                },
                "uVar1": {
                    "file_attribute": 1,
                    "file_attributes": 4,
                    "file_flags": 4,
                    "file_info_flag": 1,
                    "file_info_flags": 2,
                    "file_mode": 4,
                    "file_permission": 1,
                    "file_permissions": 4,
                    "flags": 1,
                    "old_status": 1,
                    "param_array_value": 1,
                    "param_value": 1,
                    "prev_value": 1,
                    "short_val": 1,
                    "value": 1,
                    "value1": 1,
                    "value_1": 1,
                    "var1": 1
                },
                "uVar4": {
                    "attribute_value": 1,
                    "converted_file_mode": 1,
                    "file_flags_unsigned": 1,
                    "file_info_as_int": 1,
                    "file_info_flag_u_int": 1,
                    "file_info_flags_as_u_int": 2,
                    "file_mode_mask": 1,
                    "file_size": 1,
                    "new_status": 1,
                    "param_array_value_uint": 1,
                    "param_value_uint": 1,
                    "status_flag": 1,
                    "temp": 2,
                    "temp_var": 8,
                    "tmp_file_permissions": 1,
                    "u_var": 1,
                    "u_var4": 1,
                    "uint_val": 1,
                    "value": 1,
                    "value2": 1,
                    "value_2": 1,
                    "var4": 1
                }
            },
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "calling": [
                "FUN_0008356c"
            ],
            "code": "\nvoid initialize_file_access_00084018(int file_descriptor,int *file_info)\n\n{\n  ushort file_attributes;\n  int file_status;\n  int malloc_result;\n  uint temp_var;\n  bool is_regular_file;\n  undefined stat_buffer [4];\n  uint file_mode;\n  \n  file_attributes = *(ushort *)(file_info + 3);\n  temp_var = (uint)file_attributes;\n  if ((int)(temp_var << 0x1e) < 0) {\n    *file_info = (int)file_info + 0x43;\n    file_info[4] = (int)file_info + 0x43;\n    file_info[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)file_info + 0xe)) {\n    file_status = get_file_status(file_descriptor,(int)*(short *)((int)file_info + 0xe),stat_buffer);\n    if (-1 < file_status) {\n      is_regular_file = (file_mode & 0xf000) == 0x2000;\n      if (((file_mode & 0xf000) == 0x8000) && (file_info[10] == 0x8427d)) {\n        file_status = 0x400;\n        *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) | 0x400;\n        file_info[0x13] = 0x400;\n      }\n      else {\n        file_status = 0x400;\n        *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    file_attributes = *(ushort *)(file_info + 3);\n    temp_var = (uint)file_attributes;\n  }\n  *(ushort *)(file_info + 3) = file_attributes | 0x800;\n  if ((temp_var & 0x80) == 0) {\n    file_status = 0x400;\n  }\n  else {\n    file_status = 0x40;\n  }\n  is_regular_file = false;\nLAB_00084074:\n  malloc_result = allocate_memory(file_descriptor,file_status);\n  file_attributes = *(ushort *)(file_info + 3);\n  if (malloc_result == 0) {\n    if (-1 < (int)((uint)file_attributes << 0x16)) {\n      *(ushort *)(file_info + 3) = file_attributes | 2;\n      *file_info = (int)file_info + 0x43;\n      file_info[4] = (int)file_info + 0x43;\n      file_info[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(file_descriptor + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(file_info + 3) = file_attributes | 0x80;\n    *file_info = malloc_result;\n    file_info[4] = malloc_result;\n    file_info[5] = file_status;\n    if ((is_regular_file) && (file_status = is_terminal_device(file_descriptor,(int)*(short *)((int)file_info + 0xe)), file_status != 0)) {\n      *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_file_access_00084018",
            "entrypoint": "0x00084018",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084018": "initialize_file_access_00084018",
                "_fstat_r": "get_file_status",
                "_isatty_r": "is_terminal_device",
                "_malloc_r": "allocate_memory",
                "auStack_54": "stat_buffer",
                "bVar5": "is_regular_file",
                "iVar2": "file_status",
                "iVar3": "malloc_result",
                "local_50": "file_mode",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "uVar1": "file_attributes",
                "uVar4": "temp_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000840f8": {
            "additional_data": {
                "FUN_000840f8": {
                    "find_char_in_array": 1,
                    "find_char_in_buffer": 1,
                    "find_char_sequence": 2,
                    "find_character": 7,
                    "find_character_in_array": 1,
                    "find_character_in_buffer": 1,
                    "find_character_position": 1,
                    "find_character_sequence": 1,
                    "find_first_character": 1,
                    "find_first_match": 1,
                    "find_first_occurrence": 9,
                    "find_next_char_occurrence": 1,
                    "find_next_instance": 1,
                    "find_next_occurrence": 1,
                    "find_occurrence": 1,
                    "find_pattern": 1
                },
                "bVar4": {
                    "comparison_result": 1,
                    "end_check": 1,
                    "flag": 2,
                    "found": 3,
                    "found_flag": 1,
                    "is_last": 3,
                    "is_last_char": 2,
                    "is_last_character": 1,
                    "is_last_element": 2,
                    "is_last_index": 4,
                    "is_last_iteration": 7,
                    "is_match": 1,
                    "reached_end": 2
                },
                "iVar2": {
                    "index": 28,
                    "iteration_count": 1,
                    "temp_var2": 1
                },
                "param_1": {
                    "array": 8,
                    "buffer": 5,
                    "data": 8,
                    "input_array": 6,
                    "sequence": 2,
                    "str": 1,
                    "string": 1
                },
                "param_2": {
                    "character": 9,
                    "pattern": 1,
                    "search_char": 1,
                    "target": 9,
                    "target_char": 5,
                    "target_character": 2,
                    "target_value": 4
                },
                "param_3": {
                    "array_length": 8,
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "data_length": 1,
                    "length": 14,
                    "sequence_length": 1,
                    "size": 5
                },
                "puVar3": {
                    "array_ptr": 1,
                    "curr_ptr": 1,
                    "current": 4,
                    "current_element": 3,
                    "current_pointer": 2,
                    "current_position": 1,
                    "current_ptr": 5,
                    "current_sequence": 1,
                    "next_char": 1,
                    "next_element": 1,
                    "pointer": 2,
                    "ptr": 8
                },
                "uVar1": {
                    "current_char": 1,
                    "result": 5,
                    "temp": 2,
                    "temp1": 1,
                    "temp_var1": 1,
                    "xor_result": 18,
                    "xored_value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "code": "\nuint * find_first_occurrence_000840f8(uint *array,char target,uint length)\n\n{\n  uint xor_result;\n  int index;\n  uint *ptr;\n  bool is_last_iteration;\n  \n  if (((uint)array & 3) == 0) {\nLAB_00084128:\n    if (3 < length) {\n      ptr = array;\n      do {\n        xor_result = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        length = length - 4;\n        array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_iteration = index == length - 1;\n        index = index + 1;\n        if (is_last_iteration) goto LAB_00084150;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (length == 0) {\nLAB_00084150:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = ptr;\n      if (((uint)array & 3) == 0) goto LAB_00084128;\n      if (length == 0) goto LAB_00084150;\n      ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "current_name": "find_first_occurrence_000840f8",
            "entrypoint": "0x000840f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000840f8": "find_first_occurrence_000840f8",
                "bVar4": "is_last_iteration",
                "iVar2": "index",
                "param_1": "array",
                "param_2": "target",
                "param_3": "length",
                "puVar3": "ptr",
                "uVar1": "xor_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000841e4": {
            "additional_data": {
                "DAT_20071244": {
                    "data_20071244": 1,
                    "error": 1,
                    "flag": 1
                },
                "FUNC_00080efc": {
                    "cleanup_function": 1,
                    "execute_operation": 1,
                    "initialize": 1
                },
                "FUN_000841e4": {
                    "check_and_execute_code": 1,
                    "check_and_execute_function": 1,
                    "check_and_execute_task": 1,
                    "check_param_and_execute": 1,
                    "handle_function": 3,
                    "handle_param": 2,
                    "handle_parameter": 1,
                    "handle_process": 1,
                    "process": 1,
                    "process_param": 1,
                    "process_parameter": 1,
                    "process_signal": 11,
                    "process_signal_handler": 2
                },
                "_getpid_r": {
                    "get_pid": 1,
                    "get_process_id": 1
                },
                "_kill": {
                    "kill_process": 3
                },
                "dVar1": {
                    "array_offset": 1,
                    "elf_rel_offset": 1,
                    "global_offset": 1,
                    "offset": 11,
                    "r_offset": 2,
                    "r_offset_value": 2,
                    "rel_entry_offset": 1,
                    "rel_offset": 6,
                    "relocation_offset": 6
                },
                "getpid_r": {
                    "get_process_id": 1
                },
                "iVar3": {
                    "addr": 1,
                    "code_offset": 1,
                    "code_ptr": 1,
                    "func_ptr": 1,
                    "function_index": 1,
                    "function_pointer": 1,
                    "function_ptr": 5,
                    "handler": 2,
                    "handler_offset": 1,
                    "handler_ptr": 1,
                    "pointer_value": 2,
                    "ptr": 3,
                    "ptr_to_task": 1,
                    "result": 3,
                    "return_value": 1,
                    "signal_handler": 1,
                    "temp_var": 2,
                    "value": 2,
                    "var3": 1
                },
                "in_lr": {
                    "in_lr": 1,
                    "link_register": 2,
                    "unknown": 1,
                    "unused_3": 1,
                    "unused_lr": 2,
                    "unused_var3": 1
                },
                "param_1": {
                    "code_index": 1,
                    "index": 1,
                    "input": 2,
                    "input_param": 2,
                    "input_value": 1,
                    "param": 3,
                    "parameter": 4,
                    "process_id": 2,
                    "signal": 7,
                    "signal_number": 6,
                    "task_id": 1,
                    "value": 1
                },
                "pcVar4": {
                    "callback": 1,
                    "callback_func": 1,
                    "code_function": 2,
                    "code_pointer": 2,
                    "code_ptr": 1,
                    "current_function": 1,
                    "func_pointer": 1,
                    "func_ptr": 3,
                    "function": 2,
                    "function_pointer": 6,
                    "function_ptr": 3,
                    "handler_func": 2,
                    "signal_handler": 5,
                    "task_function": 1
                },
                "uVar2": {
                    "pid": 17,
                    "process_id": 14
                },
                "uVar5": {
                    "array_address": 1,
                    "array_offset": 1,
                    "constant": 7,
                    "constant_value": 9,
                    "constant_var": 1,
                    "constant_variable": 1,
                    "data": 1,
                    "data_ptr": 1,
                    "global_data": 1,
                    "mem_address": 1,
                    "some_value": 1,
                    "temp_value": 1,
                    "unknown": 1,
                    "unknown_value": 1,
                    "unused_var": 1,
                    "var": 1,
                    "var5": 1
                },
                "unaff_r4": {
                    "unaff_r4": 1,
                    "unknown": 1,
                    "unused_1": 1,
                    "unused_r4": 2,
                    "unused_var1": 1
                },
                "unaff_r5": {
                    "unaff_r5": 1,
                    "unknown": 1,
                    "unused_2": 1,
                    "unused_r5": 2,
                    "unused_var2": 1
                }
            },
            "called": [
                "FUN_0008421c",
                "FUN_00080efc"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nint process_signal_handler_000841e4(uint signal)\n\n{\n  dword offset;\n  undefined4 pid;\n  int function_ptr;\n  code *function_pointer;\n  undefined4 unused_r4;\n  undefined4 unused_r5;\n  undefined4 unused_lr;\n  undefined4 constant_value;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  constant_value = 0x20070460;\n  if (0x1f < signal) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  function_ptr = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((function_ptr == 0) || (function_pointer = *(code **)(function_ptr + signal * 4), function_pointer == (code *)0x0)) {\n    pid = get_pid(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    function_ptr = kill_process(pid,signal,signal,0,constant_value,unused_r4,unused_r5,unused_lr);\n    if ((function_ptr == -1) && (DAT_20071244 != 0)) {\n      *(int *)offset = DAT_20071244;\n      return -1;\n    }\n    return function_ptr;\n  }\n  if (function_pointer == (code *)0x1) {\n    return 0;\n  }\n  if (function_pointer != (code *)0xffffffff) {\n    *(undefined4 *)(function_ptr + signal * 4) = 0;\n    (*function_pointer)(signal);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "current_name": "process_signal_handler_000841e4",
            "entrypoint": "0x000841e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000841e4": "process_signal_handler_000841e4",
                "_getpid_r": "get_pid",
                "_kill": "kill_process",
                "dVar1": "offset",
                "getpid_r": "get_process_id",
                "iVar3": "function_ptr",
                "in_lr": "unused_lr",
                "param_1": "signal",
                "pcVar4": "function_pointer",
                "uVar2": "pid",
                "uVar5": "constant_value",
                "unaff_r4": "unused_r4",
                "unaff_r5": "unused_r5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008421c": {
            "called": [
                "FUN_00080efe"
            ],
            "calling": [
                "FUN_000841e4"
            ],
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "current_name": "FUN_0008421c",
            "entrypoint": "0x0008421c",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_00084220": {
            "additional_data": {
                "FUN_00084220": {
                    "update_buffer": 1,
                    "update_counter": 1,
                    "update_data": 19,
                    "update_data_and_check_error": 1,
                    "update_file_data": 1,
                    "update_file_offset": 1,
                    "update_file_position": 1,
                    "update_file_size": 1,
                    "update_read_count": 1,
                    "update_read_data": 1,
                    "update_resource_counts": 1,
                    "update_total_and_error_check": 1,
                    "update_total_count": 1
                },
                "iVar1": {
                    "bytes_read": 9,
                    "read_result": 22
                },
                "param_1": {
                    "buffer": 3,
                    "buffer_address": 1,
                    "buffer_pointer": 1,
                    "data": 1,
                    "data_address": 1,
                    "data_buffer": 4,
                    "data_ptr": 1,
                    "file_descriptor": 9,
                    "file_handle": 1,
                    "file_pointer": 3,
                    "file_ptr": 1,
                    "input_buffer": 1,
                    "param": 1,
                    "param_pointer": 1,
                    "stream": 1,
                    "stream_pointer": 1
                },
                "param_2": {
                    "address": 1,
                    "buffer_offset": 1,
                    "buffer_ptr": 1,
                    "data": 2,
                    "data_address": 5,
                    "data_buffer": 2,
                    "data_offset": 8,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "data_struct": 1,
                    "data_structure": 1,
                    "file_data": 1,
                    "file_struct": 1,
                    "info_ptr": 1,
                    "memory_address": 2,
                    "resource_info": 1
                }
            },
            "called": [
                "FUN_00084508"
            ],
            "calling": [],
            "code": "\nvoid update_read_data_00084220(undefined4 file_descriptor,int data_offset)\n\n{\n  int read_result;\n  \n  read_result = _read_r(file_descriptor,(int)*(short *)(data_offset + 0xe));\n  if (-1 < read_result) {\n    *(int *)(data_offset + 0x50) = *(int *)(data_offset + 0x50) + read_result;\n    return;\n  }\n  *(ushort *)(data_offset + 0xc) = *(ushort *)(data_offset + 0xc) & 0xefff;\n  return;\n}\n\n",
            "current_name": "update_read_data_00084220",
            "entrypoint": "0x00084220",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084220": "update_read_data_00084220",
                "iVar1": "read_result",
                "param_1": "file_descriptor",
                "param_2": "data_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084244": {
            "additional_data": {
                "DAT_20071244": {
                    "error_code": 1
                },
                "FUN_00084244": {
                    "process_data": 1,
                    "update_file": 1,
                    "write_and_seek_file": 1,
                    "write_data": 7,
                    "write_data_to_binary_file": 1,
                    "write_data_to_file": 2,
                    "write_to_disk": 1,
                    "write_to_file": 15
                },
                "_lseek_r": {
                    "set_file_position": 1
                },
                "_write": {
                    "write_data": 1
                },
                "iVar1": {
                    "bytes_written": 1,
                    "num_bytes_written": 1,
                    "result": 4,
                    "write_result": 21
                },
                "in_lr": {
                    "": 1,
                    "arg7": 1,
                    "arg_7": 1,
                    "in_lr": 3,
                    "return_address": 3,
                    "temp4": 1,
                    "unused4": 5,
                    "unused_4": 1,
                    "unused_param": 1,
                    "unused_param_4": 2,
                    "unused_register_lr": 1,
                    "unused_var4": 1
                },
                "param_1": {
                    "file_descriptor": 27,
                    "file_descriptor_ptr": 1,
                    "output_buffer": 1,
                    "output_file": 1
                },
                "param_2": {
                    "buffer": 2,
                    "buffer_address": 7,
                    "buffer_offset": 1,
                    "buffer_ptr": 1,
                    "data_address": 1,
                    "data_offset": 3,
                    "data_ptr": 1,
                    "data_struct": 2,
                    "file_control_block": 1,
                    "file_info": 3,
                    "file_info_ptr": 1,
                    "header_offset": 1,
                    "input_buffer_address": 1,
                    "input_file": 1,
                    "metadata_ptr": 1,
                    "struct_address": 1,
                    "struct_pointer": 1,
                    "write_context": 1
                },
                "param_3": {
                    "buffer": 15,
                    "data": 6,
                    "data_address": 3,
                    "data_buffer": 4,
                    "data_pointer": 1,
                    "data_ptr": 1
                },
                "param_4": {
                    "buffer_size": 4,
                    "count": 3,
                    "data_size": 8,
                    "length": 2,
                    "num_bytes": 3,
                    "size": 10
                },
                "uVar2": {
                    "buffer_offset": 1,
                    "buffer_size": 1,
                    "buffer_value": 2,
                    "data_check": 1,
                    "data_flag": 1,
                    "data_length": 2,
                    "data_value": 2,
                    "file_offset": 1,
                    "file_size": 1,
                    "flag": 4,
                    "flag_value": 1,
                    "flags": 4,
                    "header_value": 1,
                    "metadata_value": 1,
                    "short_value": 2,
                    "ushort_value": 1,
                    "value": 2
                },
                "unaff_r4": {
                    "": 1,
                    "arg4": 1,
                    "arg_4": 1,
                    "param_4_alt": 1,
                    "temp1": 1,
                    "unaff_r4": 3,
                    "unused1": 5,
                    "unused_1": 2,
                    "unused_param": 1,
                    "unused_param_1": 2,
                    "unused_register_4": 2,
                    "unused_var1": 1
                },
                "unaff_r5": {
                    "": 1,
                    "arg5": 1,
                    "arg_5": 1,
                    "param_5_alt": 1,
                    "temp2": 1,
                    "unaff_r5": 3,
                    "unused2": 5,
                    "unused_2": 2,
                    "unused_param": 1,
                    "unused_param_2": 2,
                    "unused_register_5": 2,
                    "unused_var2": 1
                },
                "unaff_r6": {
                    "": 1,
                    "arg6": 1,
                    "arg_6": 1,
                    "param_6_alt": 1,
                    "temp3": 1,
                    "unaff_r6": 3,
                    "unused3": 5,
                    "unused_3": 2,
                    "unused_param": 1,
                    "unused_param_3": 2,
                    "unused_register_6": 2,
                    "unused_var3": 1
                }
            },
            "called": [
                "FUN_000844e0",
                "FUN_00080ec8"
            ],
            "calling": [],
            "code": "\nvoid write_data_to_binary_file_00084244(int *file_descriptor,int buffer_address,undefined4 buffer,undefined4 size)\n\n{\n  int write_result;\n  ushort flag;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  flag = *(ushort *)(buffer_address + 0xc);\n  if ((int)((uint)flag << 0x17) < 0) {\n    set_file_position(file_descriptor,(int)*(short *)(buffer_address + 0xe),0,2);\n    flag = *(ushort *)(buffer_address + 0xc);\n  }\n  *(ushort *)(buffer_address + 0xc) = flag & 0xefff;\n  DAT_20071244 = 0;\n  write_result = write_data((int)*(short *)(buffer_address + 0xe),buffer,size,size,unused1,unused2,unused3,\n                 unused4);\n  if ((write_result == -1) && (DAT_20071244 != 0)) {\n    *file_descriptor = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "write_data_to_binary_file_00084244",
            "entrypoint": "0x00084244",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084244": "write_data_to_binary_file_00084244",
                "_lseek_r": "set_file_position",
                "_write": "write_data",
                "iVar1": "write_result",
                "in_lr": "unused4",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "param_3": "buffer",
                "param_4": "size",
                "uVar2": "flag",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008427c": {
            "additional_data": {
                "FUM_0008427c": {
                    "update_file_seek": 1
                },
                "FUN_0008427c": {
                    "compute_file_offset": 1,
                    "lseek_and_update": 1,
                    "perform_seek_operation": 1,
                    "seek_and_modify": 1,
                    "seek_and_modify_data": 1,
                    "seek_and_set_flag": 3,
                    "seek_and_update_flag": 3,
                    "seek_and_update_permissions": 1,
                    "update_file_access_status": 1,
                    "update_file_flags": 2,
                    "update_file_offset": 3,
                    "update_file_pointer": 1,
                    "update_file_pointer_status": 1,
                    "update_file_position": 3,
                    "update_file_seek": 1,
                    "update_file_seek_status": 1,
                    "update_file_status": 3,
                    "update_pointer": 1,
                    "update_read_status": 1
                },
                "FUN_000844e0": {
                    "set_flag": 1,
                    "update_file_info": 1,
                    "update_file_offset": 1
                },
                "iVar1": {
                    "file_position": 2,
                    "file_seek_result": 2,
                    "result": 2,
                    "seek_result": 25
                },
                "param_1": {
                    "fd": 1,
                    "file_descriptor": 28,
                    "file_pointer": 1,
                    "stream": 1
                },
                "param_2": {
                    "buffer": 3,
                    "buffer_address": 5,
                    "data": 1,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "data_struct_address": 1,
                    "memory_address": 1,
                    "metadata_address": 1,
                    "struct": 1,
                    "struct_address": 10,
                    "struct_offset": 1,
                    "struct_pointer": 3,
                    "struct_ptr": 2
                },
                "uVar2": {
                    "control_bits": 1,
                    "file_flags": 1,
                    "flag": 7,
                    "flags": 2,
                    "modified_flag": 2,
                    "modified_status": 1,
                    "modified_value": 1,
                    "new_flag": 1,
                    "updated_flag": 5,
                    "updated_flags": 7,
                    "updated_permissions": 1,
                    "updated_status": 2
                }
            },
            "called": [
                "FUN_000844e0"
            ],
            "calling": [],
            "code": "\nvoid update_file_pointer_status_0008427c(undefined4 file_descriptor,int struct_address)\n\n{\n  int seek_result;\n  ushort flag;\n  \n  seek_result = _lseek_r(file_descriptor,(int)*(short *)(struct_address + 0xe));\n  if (seek_result == -1) {\n    flag = *(ushort *)(struct_address + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(struct_address + 0xc) | 0x1000;\n  }\n  if (seek_result != -1) {\n    *(int *)(struct_address + 0x50) = seek_result;\n  }\n  *(ushort *)(struct_address + 0xc) = flag;\n  return;\n}\n\n",
            "current_name": "update_file_pointer_status_0008427c",
            "entrypoint": "0x0008427c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008427c": "update_file_pointer_status_0008427c",
                "iVar1": "seek_result",
                "param_1": "file_descriptor",
                "param_2": "struct_address",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000842a4": {
            "additional_data": {
                "FUN_0008356c": {
                    "init_function": 1,
                    "initialize": 1,
                    "initialize_data": 1,
                    "initialize_stream": 1
                },
                "FUN_00083850": {
                    "check_function": 1,
                    "setup": 1,
                    "setup_data": 1,
                    "setup_stream": 1
                },
                "FUN_00083888": {
                    "cleanup": 1,
                    "cleanup_data": 1,
                    "cleanup_function": 1,
                    "flush_stream": 1
                },
                "FUN_000842a4": {
                    "decode_and_write": 1,
                    "decode_and_write_data": 1,
                    "handle_input": 1,
                    "handle_io_operation": 1,
                    "parse_and_write_data": 1,
                    "process_data": 14,
                    "process_input": 3,
                    "process_stream": 1,
                    "stream_write_byte": 1,
                    "write_character": 1
                },
                "__sinit": {
                    "initialize": 3,
                    "initialize_s": 1,
                    "initialize_stream": 3
                },
                "__swsetup_r": {
                    "set_up_stream": 1,
                    "setup_function": 1,
                    "setup_io": 1,
                    "setup_r": 1,
                    "setup_read": 1,
                    "setup_stream": 2
                },
                "_fflush_r": {
                    "flush_and_reset": 1,
                    "flush_buffer": 2,
                    "flush_data": 2,
                    "flush_function": 1,
                    "flush_r": 1,
                    "flush_stream": 2
                },
                "iVar4": {
                    "count": 1,
                    "counter": 1,
                    "current_index": 1,
                    "index": 11,
                    "int_value": 2,
                    "int_var": 1,
                    "num_bytes_written": 1,
                    "offset": 4,
                    "result": 4,
                    "status": 2,
                    "temp": 1,
                    "temp_var1": 1,
                    "temp_variable": 1
                },
                "param_1": {
                    "arg1": 1,
                    "data": 1,
                    "data_address": 1,
                    "data_pointer": 2,
                    "data_ptr": 3,
                    "data_size": 1,
                    "data_structure": 1,
                    "device": 1,
                    "file_descriptor": 1,
                    "input": 2,
                    "input_buffer": 3,
                    "input_data": 2,
                    "input_handle": 1,
                    "input_int": 1,
                    "input_param": 4,
                    "input_ptr": 1,
                    "input_value": 3,
                    "stream": 1,
                    "stream_handle": 1
                },
                "param_2": {
                    "arg2": 1,
                    "byte": 1,
                    "byte_data": 1,
                    "byte_to_write": 1,
                    "byte_value": 2,
                    "character": 6,
                    "data": 3,
                    "flag": 5,
                    "flag_value": 1,
                    "flags": 2,
                    "index": 1,
                    "input_uint": 1,
                    "input_value": 3,
                    "option_param": 1,
                    "output_value": 1,
                    "value": 1
                },
                "param_3": {
                    "array": 1,
                    "buffer": 12,
                    "data": 1,
                    "data_array": 5,
                    "input_array": 1,
                    "input_data": 1,
                    "io_buffer": 1,
                    "output_buffer": 1,
                    "output_param": 1,
                    "param_array": 1,
                    "state": 1,
                    "stream": 2,
                    "stream_buffer": 2,
                    "stream_pointer": 1
                },
                "param_4": {
                    "argument": 1,
                    "buffer": 1,
                    "buffer_size": 1,
                    "byte_count": 1,
                    "config_param": 1,
                    "config_value": 1,
                    "constant": 2,
                    "extra_info": 1,
                    "flag": 4,
                    "input_undefined4": 1,
                    "io_mode": 1,
                    "length": 1,
                    "param": 1,
                    "param_4": 1,
                    "param_value": 1,
                    "parameter": 1,
                    "size": 8,
                    "size_param": 1,
                    "value": 2
                },
                "puVar3": {
                    "buffer_pointer": 1,
                    "buffer_ptr": 1,
                    "byte_pointer": 1,
                    "byte_ptr": 1,
                    "char_pointer": 2,
                    "current_byte": 1,
                    "current_char": 1,
                    "current_position": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "next_stream_byte": 1,
                    "output_pointer": 1,
                    "pointer": 3,
                    "pointer_value": 1,
                    "ptr": 8,
                    "ptr_value": 2,
                    "stream_buffer": 1,
                    "stream_pointer": 2,
                    "undefined_ptr": 1
                },
                "uVar1": {
                    "buffer_length": 2,
                    "buffer_size": 2,
                    "character_value": 1,
                    "current_char": 1,
                    "current_character": 1,
                    "current_value": 1,
                    "data_size": 1,
                    "data_value1": 1,
                    "flag": 1,
                    "io_flag": 1,
                    "length": 2,
                    "num_bytes": 1,
                    "short_value": 1,
                    "stream_buffer_size": 1,
                    "stream_flag": 1,
                    "temp": 1,
                    "ushort_value": 9,
                    "ushort_var": 1,
                    "value": 1,
                    "value1": 1
                },
                "uVar2": {
                    "buffer_length_as_uint": 1,
                    "buffer_size_uint": 1,
                    "character_integer": 1,
                    "converted_flag": 1,
                    "converted_length": 2,
                    "current_char_value": 1,
                    "current_character_uint": 1,
                    "data_value": 1,
                    "data_value2": 1,
                    "flag_val": 1,
                    "int_value": 3,
                    "length": 1,
                    "num_bytes_shifted": 1,
                    "size": 1,
                    "stream_buffer_size_uint": 1,
                    "stream_size": 1,
                    "temp_uint": 1,
                    "uint_value": 8,
                    "uint_var": 1,
                    "value2": 1,
                    "value_as_int": 1
                }
            },
            "called": [
                "FUN_0008356c",
                "FUN_00083888",
                "FUN_00083850"
            ],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\nuint process_data_000842a4(int input_param,uint character,undefined4 *buffer,undefined4 size)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *ptr;\n  int index;\n  \n  if ((input_param != 0) && (*(int *)(input_param + 0x38) == 0)) {\n    initialize();\n  }\n  ushort_value = *(ushort *)(buffer + 3);\n  uint_value = (uint)ushort_value;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = buffer[4], index == 0)) {\n    index = setup_stream(input_param,buffer,ushort_value,uint_value,size);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(buffer + 3);\n    index = buffer[4];\n    uint_value = (uint)ushort_value;\n  }\n  character = character & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    ptr = (undefined *)*buffer;\n    index = (int)ptr - index;\n    if (index < (int)buffer[5]) {\nLAB_000842d6:\n      index = index + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    ptr = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = ushort_value | 0x2000;\n    index = (int)ptr - index;\n    if (index < (int)buffer[5]) goto LAB_000842d6;\n  }\n  index = flush_stream(input_param,buffer);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*buffer;\n  index = 1;\nLAB_000842d8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = ptr + 1;\n  *ptr = (char)character;\n  if (((buffer[5] == index) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (index = flush_stream(input_param,buffer), index != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n\n",
            "current_name": "process_data_000842a4",
            "entrypoint": "0x000842a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "__sinit": "initialize",
                "__swsetup_r": "setup_stream",
                "_fflush_r": "flush_stream",
                "iVar4": "index",
                "param_1": "input_param",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "size",
                "puVar3": "ptr",
                "uVar1": "ushort_value",
                "uVar2": "uint_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008434c": {
            "additional_data": {
                "FUN_0008434c": {
                    "copy_data": 1,
                    "decode_and_convert": 1,
                    "decode_and_handle_result": 1,
                    "decode_and_process_data": 1,
                    "decode_and_set_param": 1,
                    "decode_and_set_value": 1,
                    "decode_function": 2,
                    "execute_function": 11,
                    "execute_function_with_param": 1,
                    "execute_function_with_params": 1,
                    "execute_operation": 2,
                    "perform_action": 1,
                    "perform_operation": 2,
                    "process_data": 2,
                    "process_function": 3
                },
                "auStack_24": {
                    "auxiliary_stack": 1,
                    "buffer": 8,
                    "data_buffer": 1,
                    "input_buffer": 1,
                    "local_array": 1,
                    "stack_array": 1,
                    "stack_buffer": 1,
                    "temp_array": 2,
                    "temp_buffer": 8,
                    "temporary_buffer": 3,
                    "temporary_data": 1
                },
                "dVar1": {
                    "dword_value": 1,
                    "elf32_rel_index": 1,
                    "elf_relocation_info": 1,
                    "function_address": 2,
                    "function_info": 1,
                    "function_offset": 1,
                    "function_ptr": 1,
                    "info": 1,
                    "info_value": 1,
                    "r_info": 5,
                    "r_info_value": 5,
                    "rel_info": 5,
                    "relocation_info": 6
                },
                "iVar3": {
                    "result": 20,
                    "return_value": 11
                },
                "param_1": {
                    "buffer": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "decoded_array": 1,
                    "destination_pointer": 1,
                    "function_pointer": 2,
                    "input_array": 2,
                    "input_data": 1,
                    "output": 2,
                    "output_array": 2,
                    "output_buffer": 5,
                    "output_data_ptr": 1,
                    "output_pointer": 5,
                    "output_ptr": 3,
                    "param_array": 1,
                    "result": 2
                },
                "param_2": {
                    "array_length": 1,
                    "array_size": 1,
                    "condition": 2,
                    "data_size": 1,
                    "flag": 3,
                    "input_flag": 1,
                    "input_length": 3,
                    "input_size": 8,
                    "length": 4,
                    "size": 7
                },
                "param_3": {
                    "additional_input": 1,
                    "additional_param": 2,
                    "arg": 1,
                    "argument": 1,
                    "data": 2,
                    "extra_param": 1,
                    "input": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_value": 4,
                    "param": 4,
                    "param3": 2,
                    "param3_value": 1,
                    "param_3": 4,
                    "param_value": 1,
                    "unused_parameter": 1,
                    "value": 2
                },
                "param_4": {
                    "error_code": 3,
                    "error_ptr": 1,
                    "output": 1,
                    "output_array": 1,
                    "output_data": 1,
                    "result": 6,
                    "result_array": 2,
                    "result_pointer": 1,
                    "result_ptr": 2,
                    "status": 7,
                    "status_pointer": 4,
                    "status_ptr": 2
                },
                "uVar2": {
                    "char_encoding": 1,
                    "charset": 27,
                    "charset_value": 2,
                    "encoding_value": 1
                }
            },
            "called": [
                "FUN_00084004",
                "FUN_0008439c"
            ],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\nvoid execute_function_with_param_0008434c(undefined4 *output_pointer,int input_size,undefined4 param_3,undefined4 *status)\n\n{\n  dword relocation_info;\n  undefined4 charset;\n  int result;\n  undefined temp_buffer [12];\n  \n  relocation_info = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (input_size == 0) {\n    charset = __locale_charset();\n    result = (*(code *)relocation_info)(output_pointer,temp_buffer,0,charset,status);\n  }\n  else {\n    charset = __locale_charset();\n    result = (*(code *)relocation_info)(output_pointer,input_size,param_3,charset,status);\n  }\n  if (result == -1) {\n    *status = 0;\n    *output_pointer = 0x8a;\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_with_param_0008434c",
            "entrypoint": "0x0008434c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008434c": "execute_function_with_param_0008434c",
                "auStack_24": "temp_buffer",
                "dVar1": "relocation_info",
                "iVar3": "result",
                "param_1": "output_pointer",
                "param_2": "input_size",
                "param_4": "status",
                "uVar2": "charset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008439c": {
            "additional_data": {
                "0x0": {
                    "null": 1
                },
                "0x100": {
                    "256": 1,
                    "max_value": 1
                },
                "0x8a": {
                    "138": 1,
                    "failure": 1
                },
                "0xffffffff": {
                    "error_code": 1
                },
                "DAT_000843c0": {
                    "constant_value": 1
                },
                "FUN_0008439c": {
                    "convert_and_store": 1,
                    "convert_and_store_byte": 1,
                    "convert_byte_to_char": 1,
                    "convert_byte_to_int": 1,
                    "convert_byte_to_pointer": 1,
                    "convert_char_to_int": 1,
                    "convert_integer_to_byte": 1,
                    "convert_number_to_byte": 1,
                    "convert_number_to_char": 2,
                    "convert_param_to_char": 1,
                    "convert_param_to_unsigned_char": 1,
                    "convert_to_byte": 1,
                    "convert_to_char": 1,
                    "convert_value_to_char": 2,
                    "convert_value_to_character": 1,
                    "copy_byte_to_memory": 1,
                    "copy_to_buffer": 1,
                    "copy_value_to_memory": 1,
                    "decode_and_store": 1,
                    "decode_character": 1,
                    "set_value": 1,
                    "store_byte_or_failure": 1,
                    "store_or_fail": 1,
                    "store_value": 3,
                    "write_byte": 1,
                    "write_byte_to_memory": 1,
                    "write_value_to_memory": 1
                },
                "PTR_000843dc": {
                    "error_indicator": 1
                },
                "param_1": {
                    "dest": 1,
                    "destination": 3,
                    "output": 10,
                    "output_address": 1,
                    "output_buffer": 1,
                    "output_byte": 1,
                    "output_pointer": 1,
                    "output_ptr": 4,
                    "output_value": 5,
                    "result": 2,
                    "result_pointer": 1,
                    "result_ptr": 1
                },
                "param_2": {
                    "buffer": 7,
                    "byte_array": 1,
                    "char_ptr": 1,
                    "character_buffer": 1,
                    "input": 4,
                    "input_buffer": 1,
                    "input_data": 1,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "memory": 1,
                    "memory_address": 1,
                    "output": 2,
                    "output_buffer": 4,
                    "result": 1,
                    "result_ptr": 1,
                    "source": 2,
                    "value_ptr": 1
                },
                "param_3": {
                    "byte_value": 1,
                    "character_code": 1,
                    "data_length": 1,
                    "input": 4,
                    "input_integer": 1,
                    "input_value": 6,
                    "number": 2,
                    "value": 14,
                    "value_to_write": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008434c"
            ],
            "code": "\nundefined4 convert_char_to_int_0008439c(undefined4 *output,undefined *buffer,uint value)\n\n{\n  if (buffer == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *buffer = (char)value;\n    return 1;\n  }\n  *output = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "current_name": "convert_char_to_int_0008439c",
            "entrypoint": "0x0008439c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008439c": "convert_char_to_int_0008439c",
                "param_1": "output",
                "param_2": "buffer",
                "param_3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084484": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "relocation_table": 1
                },
                "FUNC_0008397C": {
                    "free_resources": 1,
                    "perform_action4": 1,
                    "release_lock": 1
                },
                "FUNC_0008397c": {
                    "acquire_sfp_lock": 1
                },
                "FUNC_00083980": {
                    "acquire_lock": 2,
                    "perform_action3": 1,
                    "release_sfp_lock": 1
                },
                "FUN_00083850": {
                    "call_function_and_get_status": 1,
                    "flush_resource": 1,
                    "perform_action5": 1,
                    "process_data": 1
                },
                "FUN_00083888": {
                    "free_resource": 1,
                    "perform_action2": 1,
                    "release_buffer": 1,
                    "release_lock": 1
                },
                "FUN_00083b10": {
                    "initialize": 1,
                    "initialize_buffers": 1,
                    "initialize_lock": 1,
                    "perform_action1": 1
                },
                "FUN_00084484": {
                    "clean_up_and_flush": 1,
                    "cleanup_and_flush": 2,
                    "cleanup_and_flush_buffer": 1,
                    "cleanup_and_release_resources": 1,
                    "cleanup_file": 1,
                    "flush_and_cleanup": 2,
                    "flush_and_free_resources": 7,
                    "flush_and_release_resources": 5,
                    "flush_buffer": 1,
                    "flush_file": 1,
                    "flush_stream": 1,
                    "perform_cleanup": 1,
                    "process_data": 3
                },
                "__sfp_lock_acquire": {
                    "acquire_lock": 4
                },
                "__sfp_lock_release": {
                    "release_lock": 4
                },
                "__sinit": {
                    "initialize": 3,
                    "initialize_library": 1
                },
                "_fflush_r": {
                    "flush": 1,
                    "flush_buffer": 3
                },
                "_free_r": {
                    "free_memory": 1,
                    "free_resource": 1,
                    "free_resources": 1
                },
                "dVar1": {
                    "base_offset": 1,
                    "offset": 16,
                    "offset_value": 1,
                    "r_offset": 9,
                    "r_offset_value": 1,
                    "rel_offset": 3
                },
                "iVar3": {
                    "callback_result": 1,
                    "check_result": 2,
                    "compare_result": 1,
                    "comparison_result": 1,
                    "result": 3,
                    "return_value": 11,
                    "status": 11,
                    "temp_var": 1
                },
                "param_1": {
                    "buffer": 2,
                    "data": 3,
                    "data_ptr": 4,
                    "file_descriptor": 1,
                    "file_handle": 1,
                    "file_ptr": 1,
                    "handle": 1,
                    "input": 7,
                    "input_param": 7,
                    "input_parameter": 1,
                    "input_val": 1,
                    "resource_handle": 1,
                    "stream": 1
                },
                "param_2": {
                    "buffer_ptr": 1,
                    "param2": 1
                },
                "uVar2": {
                    "result": 24,
                    "return_code": 1,
                    "return_value": 6
                }
            },
            "called": [
                "FUN_00083b10",
                "FUN_00083888",
                "FUN_00083980",
                "FUN_0008397c",
                "FUN_00083850"
            ],
            "calling": [],
            "code": "\nundefined4 flush_and_free_resources_00084484(int input)\n\n{\n  dword offset;\n  undefined4 result;\n  int return_value;\n  \n  offset = relocation_table[140].r_offset;\n  if (input != 0) {\n    if ((relocation_table[140].r_offset != 0) &&\n       (*(int *)(relocation_table[140].r_offset + 0x38) == 0)) {\n      initialize();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      result = flush_buffer(offset,input);\n      if ((*(code **)(input + 0x2c) != (code *)0x0) &&\n         (return_value = (**(code **)(input + 0x2c))(offset,*(undefined4 *)(input + 0x1c)), return_value < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        free_resources(offset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          free_resources(offset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        free_resources(offset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      acquire_lock();\n      *(undefined2 *)(input + 0xc) = 0;\n      release_lock();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "flush_and_free_resources_00084484",
            "entrypoint": "0x00084484",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "FUN_00084484": "flush_and_free_resources_00084484",
                "__sfp_lock_acquire": "acquire_lock",
                "__sfp_lock_release": "release_lock",
                "__sinit": "initialize",
                "_fflush_r": "flush_buffer",
                "_free_r": "free_resources",
                "dVar1": "offset",
                "iVar3": "return_value",
                "param_1": "input",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084494": {
            "additional_data": {
                "DAT_20071244": {
                    "file_size": 1,
                    "saved_error_code": 1
                },
                "FUN_00084494": {
                    "calculate_file_size": 2,
                    "calculate_file_stat": 1,
                    "check_and_assign_file_stat": 1,
                    "check_and_save_file_size": 1,
                    "check_file": 1,
                    "check_file_access": 1,
                    "check_file_stat": 1,
                    "check_file_status": 2,
                    "check_fstat_error": 1,
                    "file_status_check": 1,
                    "find_and_set_file_stat": 1,
                    "get_file_info": 2,
                    "get_file_permission": 1,
                    "get_file_size": 5,
                    "get_file_stat": 2,
                    "get_file_status": 7,
                    "perform_fstat_check": 1
                },
                "_fstat": {
                    "get_file_status": 1
                },
                "iVar1": {
                    "file_stat_result": 4,
                    "file_status": 4,
                    "fstat_result": 1,
                    "result": 1,
                    "stat_result": 8,
                    "status": 9,
                    "status_check_result": 1
                },
                "param_1": {
                    "buffer": 1,
                    "error_code": 2,
                    "file_permission": 1,
                    "file_size": 3,
                    "file_size_ptr": 1,
                    "file_status": 2,
                    "file_status_ptr": 1,
                    "output": 4,
                    "result": 13,
                    "result_ptr": 1,
                    "size_ptr": 1,
                    "status": 1
                },
                "param_2": {
                    "fd": 1,
                    "file_desc": 1,
                    "file_descriptor": 28,
                    "pathname": 1
                },
                "param_3": {
                    "buf": 1,
                    "buffer": 3,
                    "file_stat": 1,
                    "stat_buf": 3,
                    "stat_buffer": 17,
                    "stat_struct": 3,
                    "stat_structure": 2,
                    "status": 1
                },
                "param_4": {
                    "additional_flags": 1,
                    "block_size": 1,
                    "buffer": 1,
                    "buffer_size": 9,
                    "file_mode": 2,
                    "file_path": 1,
                    "flags": 3,
                    "length": 2,
                    "mode": 1,
                    "param_4": 1,
                    "path": 1,
                    "stat_buffer_size": 6,
                    "stat_size": 2
                }
            },
            "called": [
                "FUN_00080eb0"
            ],
            "calling": [
                "FUN_00084018"
            ],
            "code": "\nvoid get_file_status_00084494(int *result,undefined4 file_descriptor,undefined4 stat_buffer,undefined4 buffer_size)\n\n{\n  int status;\n  \n  DAT_20071244 = 0;\n  status = get_file_status_00084494(file_descriptor,stat_buffer,stat_buffer,0,buffer_size);\n  if ((status == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "get_file_status_00084494",
            "entrypoint": "0x00084494",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084494": "get_file_status_00084494",
                "_fstat": "get_file_status",
                "iVar1": "status",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "stat_buffer",
                "param_4": "buffer_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000844bc": {
            "additional_data": {
                "DAT_20071244": {
                    "assigned_value": 1,
                    "saved_output_value": 1,
                    "saved_result": 1,
                    "saved_terminal_value": 2,
                    "saved_tty_value": 1,
                    "terminal_value": 1
                },
                "FUN_000844bc": {
                    "check_and_assign_terminal_output": 1,
                    "check_and_assign_terminal_width": 1,
                    "check_and_assign_tty_value": 1,
                    "check_and_assign_value": 6,
                    "check_and_save_terminal_value": 1,
                    "check_and_set_param": 1,
                    "check_and_set_terminal": 2,
                    "check_and_set_terminal_id": 1,
                    "check_and_set_value": 1,
                    "check_if_terminal": 1,
                    "check_if_tty_and_assign_value": 1,
                    "check_is_interactive": 1,
                    "check_is_terminal": 6,
                    "check_terminal_status": 1,
                    "check_tty_and_assign_value": 1,
                    "clear_terminal_if_not_interactive": 1,
                    "extract_terminal_value": 1,
                    "initialize_and_check_terminal": 1,
                    "process_and_return_if_no_error": 1,
                    "set_return_value_if_not_tty": 1
                },
                "_isatty": {
                    "check_if_terminal": 1,
                    "check_terminal_status": 1,
                    "check_terminal_type": 1,
                    "is_terminal": 1
                },
                "elseBlockLabel": {
                    "end": 1
                },
                "iVar1": {
                    "is_att": 1,
                    "is_input_tty": 1,
                    "is_input_valid": 1,
                    "is_interactive": 1,
                    "is_terminal": 13,
                    "is_tty": 2,
                    "isatty_result": 1,
                    "isatty_return_value": 1,
                    "tty_status": 1
                },
                "param_1": {
                    "out_value": 1,
                    "output": 2,
                    "output_pointer": 2,
                    "output_ptr": 2,
                    "output_value": 12,
                    "result": 6,
                    "result_param": 1,
                    "result_pointer": 1,
                    "result_ptr": 1,
                    "return_value": 1,
                    "terminal_id": 1,
                    "terminal_width_ptr": 1
                },
                "param_2": {
                    "file_descriptor": 21,
                    "input": 1,
                    "input_param": 1,
                    "input_value": 3,
                    "terminal_descriptor": 2,
                    "terminal_file_descriptor": 1,
                    "terminal_id": 1,
                    "terminal_identifier": 1
                }
            },
            "called": [
                "FUN_00080eba"
            ],
            "calling": [
                "FUN_00084018"
            ],
            "code": "\nvoid check_if_tty_and_assign_value_000844bc(int *output_value,undefined4 file_descriptor)\n\n{\n  int is_terminal;\n  \n  DAT_20071244 = 0;\n  is_terminal = check_terminal_status(file_descriptor);\n  if ((is_terminal == -1) && (DAT_20071244 != 0)) {\n    *output_value = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "check_if_tty_and_assign_value_000844bc",
            "entrypoint": "0x000844bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000844bc": "check_if_tty_and_assign_value_000844bc",
                "_isatty": "check_terminal_status",
                "iVar1": "is_terminal",
                "param_1": "output_value",
                "param_2": "file_descriptor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000844e0": {
            "additional_data": {
                "DAT_20071244": {
                    "seek_error": 1
                },
                "FUN_00080ebe": {
                    "get_file_status": 1
                },
                "FUN_000844e0": {
                    "read_and_set_value": 1,
                    "seek_and_assign": 2,
                    "seek_and_assign_if_error": 1,
                    "seek_and_assign_offset": 1,
                    "seek_and_assign_value": 4,
                    "seek_and_check_error": 1,
                    "seek_and_copy": 2,
                    "seek_and_copy_data": 3,
                    "seek_and_return_error": 1,
                    "seek_and_return_offset": 1,
                    "seek_and_return_value": 1,
                    "seek_and_save_error": 1,
                    "seek_and_set": 2,
                    "seek_and_set_data": 1,
                    "seek_and_set_error": 1,
                    "seek_and_set_param": 1,
                    "seek_and_set_result": 1,
                    "seek_and_set_value": 1,
                    "seek_and_store_error": 1,
                    "seek_and_store_value": 2,
                    "seek_file_position": 1,
                    "set_file_pointer": 1
                },
                "_lseek": {
                    "seek_file": 1
                },
                "iVar1": {
                    "file_seek_result": 1,
                    "result": 1,
                    "return_code": 1,
                    "seek_result": 23,
                    "status": 1
                },
                "param_1": {
                    "destination": 1,
                    "error_code": 1,
                    "error_pointer": 1,
                    "file_handle": 1,
                    "output": 3,
                    "output_offset": 1,
                    "result": 20,
                    "result_pointer": 2,
                    "result_ptr": 1
                },
                "param_2": {
                    "file_descriptor": 31
                },
                "param_3": {
                    "offset": 30,
                    "position": 1
                },
                "param_4": {
                    "origin": 7,
                    "seek_mode": 1,
                    "whence": 23
                }
            },
            "called": [
                "FUN_00080ebe"
            ],
            "calling": [
                "FUN_00084244",
                "FUN_0008427c"
            ],
            "code": "\nvoid seek_and_assign_value_000844e0(int *result,undefined4 file_descriptor,undefined4 offset,undefined4 whence)\n\n{\n  int seek_result;\n  \n  DAT_20071244 = 0;\n  seek_result = seek_file(file_descriptor,offset,whence);\n  if ((seek_result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "seek_and_assign_value_000844e0",
            "entrypoint": "0x000844e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000844e0": "seek_and_assign_value_000844e0",
                "_lseek": "seek_file",
                "iVar1": "seek_result",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084508": {
            "additional_data": {
                "FUN_00084508": {
                    "read_and_assign": 1,
                    "read_and_assign_data": 1,
                    "read_and_assign_error": 3,
                    "read_and_assign_error_code": 3,
                    "read_and_assign_if_error": 1,
                    "read_and_assign_return_value": 1,
                    "read_and_assign_value": 4,
                    "read_and_check": 1,
                    "read_and_check_error": 2,
                    "read_and_handle_error": 2,
                    "read_and_handle_errors": 1,
                    "read_and_save_data": 1,
                    "read_and_set_param": 1,
                    "read_and_store_value": 1,
                    "read_and_update_param": 2,
                    "read_and_update_value": 1,
                    "read_data": 3,
                    "read_data_and_store": 1,
                    "read_from_file": 1
                },
                "iVar1": {
                    "read_result": 26,
                    "read_status": 2,
                    "result": 1
                },
                "param_1": {
                    "error_code": 1,
                    "error_pointer": 1,
                    "error_value": 1,
                    "output": 11,
                    "output_data": 2,
                    "output_value": 1,
                    "result": 8,
                    "result_code": 1,
                    "result_param": 1,
                    "result_ptr": 1,
                    "return_value": 1,
                    "value": 1
                },
                "param_2": {
                    "buffer": 1,
                    "buffer_address": 1,
                    "file_descriptor": 27,
                    "source": 2
                },
                "param_3": {
                    "buffer": 27,
                    "destination": 1,
                    "size": 3
                },
                "param_4": {
                    "buffer_size": 1,
                    "count": 23,
                    "size": 7
                }
            },
            "called": [
                "FUN_00080ec2"
            ],
            "calling": [
                "FUN_00084220"
            ],
            "code": "\nvoid read_and_assign_error_code_00084508(int *output,undefined4 file_descriptor,undefined4 buffer,undefined4 count)\n\n{\n  int read_result;\n  \n  DAT_20071244 = 0;\n  read_result = _read(file_descriptor,buffer,count);\n  if ((read_result == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "read_and_assign_error_code_00084508",
            "entrypoint": "0x00084508",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084508": "read_and_assign_error_code_00084508",
                "iVar1": "read_result",
                "param_1": "output",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084530": {
            "additional_data": {
                "FUN_00084530": {
                    "calculate": 1,
                    "calculate_result": 19,
                    "div_mod": 1,
                    "divide_and_check": 2,
                    "divmod_helper": 2,
                    "divmod_operation": 1,
                    "improve_code": 1,
                    "process_parameters": 2,
                    "process_params": 1
                },
                "FUN_0008458c": {
                    "helper_function": 1,
                    "process_inputs": 1,
                    "sub_function": 1
                },
                "iVar1": {
                    "quotient": 1,
                    "result": 27
                },
                "param_1": {
                    "a": 1,
                    "dividend": 2,
                    "input1": 4,
                    "input_1": 17,
                    "input_param1": 1,
                    "input_param_1": 3,
                    "numerator": 2,
                    "value1": 1
                },
                "param_2": {
                    "b": 1,
                    "denominator": 2,
                    "divisor": 2,
                    "input2": 4,
                    "input_2": 17,
                    "input_param2": 1,
                    "input_param_2": 3,
                    "value2": 1
                },
                "param_3": {
                    "bitshift": 1,
                    "c": 1,
                    "input3": 4,
                    "input_3": 16,
                    "input_param3": 1,
                    "input_param_3": 3,
                    "param_3": 1,
                    "remainder": 2,
                    "value3": 1,
                    "variable_1": 1
                },
                "param_4": {
                    "d": 1,
                    "input4": 4,
                    "input_4": 16,
                    "input_param4": 1,
                    "input_param_4": 3,
                    "param_4": 1,
                    "quotient": 2,
                    "remainder_check": 1,
                    "value4": 1,
                    "variable_2": 1
                },
                "param_5": {
                    "output_array": 1
                }
            },
            "called": [
                "FUN_0008458c"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint calculate_result_00084530(int input_1,int input_2,int input_3,int input_4)\n\n{\n  int result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  result = __gnu_uldivmod_helper();\n  return result;\n}\n\n",
            "current_name": "calculate_result_00084530",
            "entrypoint": "0x00084530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084530": "calculate_result_00084530",
                "iVar1": "result",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008455c": {
            "additional_data": {
                "CONCAT44": {
                    "concatenate": 1
                },
                "FUN_0008455c": {
                    "calculate_difference": 7,
                    "subtract_and_adjust": 7,
                    "subtract_and_adjust_values": 1,
                    "subtract_and_assign": 1,
                    "subtract_and_store": 2,
                    "subtract_and_store_difference": 1,
                    "subtract_and_store_remainder": 1,
                    "subtract_and_store_result": 2,
                    "subtract_and_transform": 1,
                    "subtract_and_update": 3,
                    "subtract_and_update_parameters": 1,
                    "subtract_and_update_result": 1,
                    "subtract_and_update_values": 1,
                    "subtract_divide_multiply": 1
                },
                "__divdi3": {
                    "divide": 1
                },
                "lVar2": {
                    "combined_result": 2,
                    "mul_result": 1,
                    "multiplication_result": 2,
                    "multiplied_value": 2,
                    "product": 9,
                    "product64": 1,
                    "quotient": 1,
                    "result_2": 1,
                    "result_long_long": 1,
                    "temp_2": 1,
                    "temp_result": 2,
                    "temp_value": 2,
                    "temp_value2": 1,
                    "temporary_result": 1
                },
                "param_1": {
                    "base_value": 1,
                    "dividend": 2,
                    "initial_value": 1,
                    "input1": 1,
                    "input_1": 1,
                    "input_a": 1,
                    "input_num": 1,
                    "input_param": 1,
                    "input_val": 1,
                    "input_value": 15,
                    "input_value1": 1,
                    "source_value": 1,
                    "value1": 2,
                    "value_1": 1
                },
                "param_2": {
                    "adjustment_value": 1,
                    "amount_to_subtract": 1,
                    "count": 1,
                    "divider": 1,
                    "divisor": 1,
                    "input2": 1,
                    "input_2": 1,
                    "input_b": 1,
                    "input_value2": 1,
                    "length": 1,
                    "limit": 1,
                    "offset": 1,
                    "offset_value": 2,
                    "param2": 1,
                    "param_2": 1,
                    "param_count": 1,
                    "param_length": 1,
                    "param_val": 1,
                    "param_value": 1,
                    "second_input_value": 1,
                    "size_of_input": 1,
                    "subtract_num": 1,
                    "subtract_value": 2,
                    "subtrahend": 1,
                    "value2": 2,
                    "value_2": 1,
                    "value_to_subtract": 1
                },
                "param_3": {
                    "concatenated_param_3": 1,
                    "lower_32_bits": 2,
                    "lower_32bits": 1,
                    "multiplier1": 1,
                    "multiplier_lower": 1,
                    "param_3": 1,
                    "param_a": 1,
                    "value1": 1
                },
                "param_4": {
                    "concatenated_param_4": 1,
                    "higher_32_bits": 1,
                    "multiplier2": 1,
                    "multiplier_upper": 1,
                    "param_4": 1,
                    "param_b": 1,
                    "upper_32_bits": 1,
                    "upper_32bits": 1,
                    "value2": 1
                },
                "param_5": {
                    "output": 2,
                    "output_array": 4,
                    "output_values": 1,
                    "result_array": 23
                },
                "uVar1": {
                    "calculated_value": 2,
                    "calculation_result": 4,
                    "converted_value": 1,
                    "div_result": 2,
                    "lvar2_result": 1,
                    "multiplied_value": 3,
                    "new_value": 1,
                    "result": 5,
                    "result_1": 1,
                    "result_uint": 1,
                    "temp_1": 1,
                    "temp_result": 2,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "transformed_value": 1
                }
            },
            "called": [
                "FUN_000845c0"
            ],
            "calling": [],
            "code": "\nvoid subtract_and_adjust_values_0008455c(uint input_value,int value2,undefined4 lower_32_bits,undefined4 upper_32bits,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = divide();\n  product = product * concatenate(upper_32bits,lower_32_bits);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (value2 - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "current_name": "subtract_and_adjust_values_0008455c",
            "entrypoint": "0x0008455c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate",
                "FUN_0008455c": "subtract_and_adjust_values_0008455c",
                "__divdi3": "divide",
                "lVar2": "product",
                "param_1": "input_value",
                "param_2": "value2",
                "param_3": "lower_32_bits",
                "param_4": "upper_32bits",
                "param_5": "result_array",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008458c": {
            "additional_data": {
                "CONCAT44": {
                    "combine": 1,
                    "concatenate": 1,
                    "concatenate_uint64": 1
                },
                "FUN_0008458c": {
                    "calculate_difference": 3,
                    "subtract_and_adjust": 11,
                    "subtract_and_adjust_values": 1,
                    "subtract_and_assign": 1,
                    "subtract_and_set_param": 1,
                    "subtract_and_store": 1,
                    "subtract_and_store_difference": 1,
                    "subtract_and_store_result": 1,
                    "subtract_and_update": 2,
                    "subtract_and_update_array": 2,
                    "subtract_and_update_indexes": 1,
                    "subtract_and_update_values": 2,
                    "subtract_multiply": 1,
                    "subtract_param_and_multiply": 1,
                    "subtract_values": 1
                },
                "FUN_00084860": {
                    "multiply_and_combine": 1,
                    "multiply_inputs": 1
                },
                "__udivdi3": {
                    "divide": 3,
                    "divide64_bit": 1,
                    "divide_64_bit_values": 1,
                    "divide_uint64": 1
                },
                "lVar2": {
                    "divided_product": 1,
                    "multiplication_result": 4,
                    "multiplied_result": 2,
                    "multiplied_value": 2,
                    "product": 12,
                    "quotient": 4,
                    "result": 2,
                    "temp_multiplied": 1,
                    "temp_result": 1,
                    "temp_variable": 1
                },
                "param_1": {
                    "array_value": 1,
                    "dividend": 1,
                    "input": 2,
                    "input1": 2,
                    "input_1": 1,
                    "input_param": 1,
                    "input_value": 19,
                    "input_value1": 1,
                    "original_param": 1,
                    "value1": 1
                },
                "param_2": {
                    "array_index": 1,
                    "difference_value": 1,
                    "divisor": 1,
                    "increment_value": 1,
                    "index_value": 1,
                    "input2": 2,
                    "input_2": 1,
                    "input_count": 1,
                    "input_param": 1,
                    "input_value2": 1,
                    "int_param": 2,
                    "int_value": 1,
                    "length": 2,
                    "param2": 2,
                    "param_2": 1,
                    "param_value": 1,
                    "second_input_value": 1,
                    "second_param": 1,
                    "secondary_input": 1,
                    "subtract_value": 3,
                    "subtraction_value": 2,
                    "value": 1,
                    "value2": 1
                },
                "param_3": {
                    "factor_1_lower": 1,
                    "lower32_bits_multiplier": 1,
                    "lower_half": 1,
                    "lower_half_value": 1,
                    "lower_word": 1,
                    "multiplier1": 1,
                    "multiplier_lower": 1,
                    "operand1": 1,
                    "operand1_lower32": 1,
                    "param3": 1,
                    "part_1": 1,
                    "third_param": 1,
                    "undefined4_param1": 1
                },
                "param_4": {
                    "factor_1_upper": 1,
                    "fourth_param": 1,
                    "multiplier2": 1,
                    "multiplier_upper": 1,
                    "operand1_higher32": 1,
                    "operand2": 1,
                    "param4": 1,
                    "part_2": 1,
                    "undefined4_param2": 1,
                    "upper32_bits_multiplier": 1,
                    "upper_half": 1,
                    "upper_half_value": 1,
                    "upper_word": 1
                },
                "param_5": {
                    "array": 1,
                    "output_arr": 1,
                    "output_array": 10,
                    "output_buffer": 1,
                    "output_indexes": 1,
                    "output_values": 3,
                    "result_array": 12,
                    "result_values": 1
                },
                "uVar1": {
                    "calculated_value": 1,
                    "calculation_result": 2,
                    "converted_product": 1,
                    "converted_result": 2,
                    "product": 2,
                    "product_lower32": 1,
                    "product_lower32_bits": 1,
                    "result": 15,
                    "result_low": 1,
                    "result_lower": 1,
                    "result_value": 1,
                    "temp_result": 1,
                    "temp_value": 1
                }
            },
            "called": [
                "FUN_00084860"
            ],
            "calling": [
                "FUN_00084530"
            ],
            "code": "\nvoid subtract_and_adjust_values_0008458c(uint input_value,int subtract_value,undefined4 third_param,undefined4 fourth_param,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = divide();\n  product = product * combine(fourth_param,third_param);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (subtract_value - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "current_name": "subtract_and_adjust_values_0008458c",
            "entrypoint": "0x0008458c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine",
                "FUN_0008458c": "subtract_and_adjust_values_0008458c",
                "__udivdi3": "divide",
                "lVar2": "product",
                "param_1": "input_value",
                "param_2": "subtract_value",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "param_5": "result_array",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000845c0": {
            "additional_data": {
                "CARRY4": {
                    "carry_check": 1
                },
                "FUN_000845c0": {
                    "calculate_division": 1,
                    "calculate_quotient_remainder": 1,
                    "div_unsigned_integers": 1,
                    "divide_and_remainder": 2,
                    "divide_uintegers": 1,
                    "divide_unsigned": 2,
                    "divide_unsigned_integers": 3,
                    "divide_with_overflow_check": 3,
                    "divide_with_remainder": 11,
                    "division_with_remainder": 3,
                    "improved_division": 1,
                    "perform_division": 1,
                    "perform_unsigned_division": 1
                },
                "bVar11": {
                    "b_var11": 1
                },
                "bVar13": {
                    "b_var13": 1,
                    "carry": 2,
                    "carry_flag": 12,
                    "has_carry": 3,
                    "has_overflow": 1,
                    "has_remainder": 1,
                    "is_carry": 2,
                    "is_carry_set": 1,
                    "is_negative": 2,
                    "is_non_zero": 1,
                    "is_overflow": 1,
                    "is_temp_true": 2
                },
                "bVar17": {
                    "carry1": 1
                },
                "bVar18": {
                    "carry2": 1
                },
                "bVar19": {
                    "carry3": 1
                },
                "bVar20": {
                    "carry4": 1
                },
                "iVar6": {
                    "bit_count": 1,
                    "bit_index": 1,
                    "bit_shift_amount": 1,
                    "bits_to_shift": 1,
                    "leading_zeroes": 1,
                    "leading_zeros": 1,
                    "shift": 2,
                    "shift_amount": 15,
                    "shift_count": 3
                },
                "lVar1": {
                    "combined_product": 1,
                    "long_result": 1,
                    "multiplication_result": 1,
                    "product": 7,
                    "quotient": 3,
                    "quotient_and_remainder": 1,
                    "result": 2,
                    "temp8": 1,
                    "temp_result": 1,
                    "temporary_result": 1
                },
                "param_1": {
                    "dividend": 31
                },
                "param_2": {
                    "dividend_high": 11,
                    "dividend_lo": 1,
                    "dividend_lower_part": 1,
                    "dividend_negative": 1,
                    "dividend_remainder": 2,
                    "dividend_shifted": 1,
                    "dividend_sign": 1,
                    "dividend_temp1": 1,
                    "dividend_upper": 7,
                    "dividend_upper32_bits": 1,
                    "divisor": 3,
                    "numerator": 1
                },
                "param_3": {
                    "divider": 1,
                    "divisor": 25,
                    "divisor_lower": 1,
                    "divisor_temp1": 1,
                    "quotient": 3
                },
                "param_4": {
                    "denominator": 1,
                    "divider_upper": 1,
                    "divisor_high": 11,
                    "divisor_lo": 1,
                    "divisor_lower_part": 1,
                    "divisor_negative": 1,
                    "divisor_remainder": 2,
                    "divisor_shifted": 1,
                    "divisor_sign": 1,
                    "divisor_temp2": 1,
                    "divisor_upper": 6,
                    "divisor_upper32_bits": 1,
                    "remainder": 3
                },
                "uVar1": {
                    "quotient_lower": 1
                },
                "uVar10": {
                    "dividend_lower": 1,
                    "intermediate_divisor": 1,
                    "is_divisor_negative": 5,
                    "is_negative2": 1,
                    "is_negative_divisor": 2,
                    "is_quotient_negative": 1,
                    "negate_divisor": 1,
                    "quotient": 1,
                    "quotient_guess": 1,
                    "quotient_negative": 1,
                    "quotient_part1": 1,
                    "quotient_temp1": 1,
                    "sign2": 1,
                    "temp10": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp5": 4,
                    "temp_3": 1,
                    "temp_remainder": 1,
                    "temp_shifted": 1,
                    "u_var10": 1
                },
                "uVar11": {
                    "divider": 1,
                    "divisor_correction": 1,
                    "intermediate_remainder": 1,
                    "is_quotient_negative": 1,
                    "lzcount_result": 1,
                    "negate_quotient": 1,
                    "partial_product_overflow": 1,
                    "quotient_lower": 1,
                    "quotient_lower_part_aux": 1,
                    "quotient_part2": 1,
                    "quotient_temp2": 1,
                    "remainder1": 1,
                    "result1": 1,
                    "shift_count": 1,
                    "temp11": 1,
                    "temp3": 2,
                    "temp4": 2,
                    "temp5": 2,
                    "temp6": 4,
                    "temp_4": 1,
                    "temp_quotient_remainder": 1,
                    "temp_shifted_low": 1,
                    "u_var11": 1
                },
                "uVar12": {
                    "combined_divisor_high": 1,
                    "combined_shifted_divisor": 1,
                    "divider_lower": 1,
                    "divisor64": 1,
                    "divisor_concat": 1,
                    "divisor_extended": 1,
                    "divisor_high": 1,
                    "divisor_temp": 1,
                    "divisor_temp3": 1,
                    "divisor_upper_shifted": 1,
                    "extended_divisor": 1,
                    "product_low": 1,
                    "quotient_upper_part_aux": 1,
                    "remainder2": 1,
                    "result2": 1,
                    "temp12": 1,
                    "temp3": 3,
                    "temp4": 2,
                    "temp5": 1,
                    "temp6": 1,
                    "temp7": 4,
                    "temp_shifted_high": 1,
                    "u_var12": 1
                },
                "uVar13": {
                    "product_high": 1,
                    "temp13": 1,
                    "temp6": 1
                },
                "uVar14": {
                    "temp14": 1,
                    "temp7": 1
                },
                "uVar15": {
                    "temp15": 1,
                    "temp8": 1
                },
                "uVar16": {
                    "temp16": 1,
                    "temp9": 1
                },
                "uVar17": {
                    "temp17": 1
                },
                "uVar18": {
                    "temp18": 1
                },
                "uVar2": {
                    "quot_result": 1,
                    "quotient": 11,
                    "quotient1": 4,
                    "quotient2": 1,
                    "quotient_hi": 1,
                    "quotient_low": 7,
                    "quotient_lower": 3,
                    "quotient_lower32_bits": 1,
                    "quotient_upper": 1,
                    "quotient_upper_part": 1
                },
                "uVar3": {
                    "quotient1": 1,
                    "quotient2": 4,
                    "quotient_high": 9,
                    "quotient_lo": 1,
                    "quotient_lower_part": 1,
                    "quotient_remainder": 2,
                    "quotient_upper": 5,
                    "quotient_upper32_bits": 1,
                    "rem_result": 1,
                    "remainder": 5,
                    "remainder_lower": 1
                },
                "uVar4": {
                    "div_result1": 1,
                    "dividend_remainder": 1,
                    "dividend_temp": 1,
                    "divisor1": 1,
                    "divisor_high": 1,
                    "divisor_low": 1,
                    "divisor_lower": 1,
                    "divisor_quotient": 1,
                    "partial_quotient": 1,
                    "quotient3": 3,
                    "remainder": 1,
                    "remainder_hi": 1,
                    "remainder_lower": 1,
                    "shift_amount": 1,
                    "temp": 1,
                    "temp1": 10,
                    "temp_dividend": 1,
                    "u_var4": 2
                },
                "uVar5": {
                    "div_result2": 1,
                    "divisor2": 1,
                    "divisor_low": 1,
                    "divisor_product": 1,
                    "intermediate_quotient": 1,
                    "partial_product": 1,
                    "quotient4": 2,
                    "quotient_correction": 1,
                    "quotient_temp": 1,
                    "remainder1": 1,
                    "remainder_lo": 1,
                    "remainder_upper": 1,
                    "shift_count": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 11,
                    "temp_divisor": 1,
                    "u_var5": 2
                },
                "uVar6": {
                    "temp3": 1,
                    "u_var6": 1
                },
                "uVar7": {
                    "dividend_high": 1,
                    "intermediate_product_lower": 1,
                    "mul1": 1,
                    "new_dividend": 1,
                    "num_bits": 1,
                    "partial_product_low": 1,
                    "partial_quotient_high": 1,
                    "product1": 2,
                    "remainder": 1,
                    "remainder_low": 1,
                    "remainder_lower": 1,
                    "temp": 2,
                    "temp1": 5,
                    "temp2": 1,
                    "temp3": 7,
                    "temp_1": 1,
                    "u_var7": 2
                },
                "uVar8": {
                    "dividend_low": 1,
                    "mul2": 1,
                    "new_quotient": 1,
                    "partial_product_high": 1,
                    "partial_quotient_low": 1,
                    "product2": 2,
                    "remainder": 1,
                    "remainder_high": 1,
                    "remainder_upper": 1,
                    "temp": 1,
                    "temp2": 5,
                    "temp3": 1,
                    "temp4": 7,
                    "temp8": 1,
                    "temp_2": 1,
                    "temp_dividend": 1,
                    "temp_low": 1,
                    "u_var8": 2
                },
                "uVar9": {
                    "dividend_negative": 1,
                    "is_dividend_negative": 12,
                    "is_negative": 2,
                    "is_negative1": 1,
                    "is_negative_dividend": 7,
                    "negate_dividend": 1,
                    "negate_dividend_high": 1,
                    "negate_quotient": 1,
                    "sign": 1,
                    "sign1": 1,
                    "temp9": 1,
                    "temp_quotient": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008455c"
            ],
            "code": "\nundefined8 divide_with_remainder_000845c0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong product;\n  uint quotient;\n  uint quotient_high;\n  uint temp1;\n  uint temp2;\n  int shift_amount;\n  uint temp3;\n  uint temp4;\n  uint is_dividend_negative;\n  uint is_divisor_negative;\n  uint temp6;\n  uint temp7;\n  bool carry_flag;\n  \n  if ((int)dividend_high < 0) {\n    carry_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)carry_flag;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    carry_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)carry_flag;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount != 0) {\n        quotient_high = dividend >> (0x20U - shift_amount & 0xff);\n        divisor = divisor << shift_amount;\n        dividend = dividend << shift_amount;\n        dividend_high = dividend_high << shift_amount | quotient_high;\n      }\n      quotient = divisor >> 0x10;\n      temp1 = dividend_high / quotient;\n      temp3 = (divisor & 0xffff) * temp1;\n      is_divisor_negative = dividend >> 0x10 | (dividend_high - quotient * temp1) * 0x10000;\n      quotient_high = temp1;\n      if (is_divisor_negative <= temp3 && temp3 - is_divisor_negative != 0) {\n        carry_flag = carry_check(is_divisor_negative,divisor);\n        is_divisor_negative = is_divisor_negative + divisor;\n        quotient_high = temp1 - 1;\n        if ((carry_flag == false) && (is_divisor_negative <= temp3 && temp3 - is_divisor_negative != 0)) {\n          quotient_high = temp1 - 2;\n          is_divisor_negative = is_divisor_negative + divisor;\n        }\n      }\n      temp4 = (is_divisor_negative - temp3) / quotient;\n      temp1 = (divisor & 0xffff) * temp4;\n      temp3 = dividend & 0xffff | ((is_divisor_negative - temp3) - quotient * temp4) * 0x10000;\n      quotient = temp4;\n      if (temp3 <= temp1 && temp1 - temp3 != 0) {\n        quotient = temp4 - 1;\n        if ((carry_check(temp3,divisor) == false) &&\n           (temp3 + divisor <= temp1 && temp1 - (temp3 + divisor) != 0)) {\n          quotient = temp4 - 2;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        temp1 = divisor >> 0x10;\n        temp7 = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        quotient_high = dividend_high >> (0x20U - shift_amount & 0xff);\n        temp1 = divisor >> 0x10;\n        is_divisor_negative = quotient_high / temp1;\n        temp7 = divisor & 0xffff;\n        temp3 = temp7 * is_divisor_negative;\n        temp4 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        quotient_high = temp4 >> 0x10 | (quotient_high - temp1 * is_divisor_negative) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient = is_divisor_negative;\n        if (quotient_high <= temp3 && temp3 - quotient_high != 0) {\n          carry_flag = carry_check(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient = is_divisor_negative - 1;\n          if ((carry_flag == false) && (quotient_high <= temp3 && temp3 - quotient_high != 0)) {\n            quotient = is_divisor_negative - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        temp2 = (quotient_high - temp3) / temp1;\n        is_divisor_negative = temp7 * temp2;\n        dividend_high = temp4 & 0xffff | ((quotient_high - temp3) - temp1 * temp2) * 0x10000;\n        quotient_high = temp2;\n        if (dividend_high <= is_divisor_negative && is_divisor_negative - dividend_high != 0) {\n          carry_flag = carry_check(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = temp2 - 1;\n          if ((carry_flag == false) && (dividend_high <= is_divisor_negative && is_divisor_negative - dividend_high != 0)) {\n            quotient_high = temp2 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - is_divisor_negative;\n        quotient_high = quotient_high | quotient << 0x10;\n      }\n      quotient = dividend_high / temp1;\n      is_divisor_negative = temp7 * quotient;\n      temp4 = dividend >> 0x10 | (dividend_high - temp1 * quotient) * 0x10000;\n      temp3 = quotient;\n      if (temp4 <= is_divisor_negative && is_divisor_negative - temp4 != 0) {\n        carry_flag = carry_check(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = quotient - 1;\n        if ((carry_flag == false) && (temp4 <= is_divisor_negative && is_divisor_negative - temp4 != 0)) {\n          temp3 = quotient - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp2 = (temp4 - is_divisor_negative) / temp1;\n      temp7 = temp7 * temp2;\n      temp1 = dividend & 0xffff | ((temp4 - is_divisor_negative) - temp1 * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp7 && temp7 - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((carry_check(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp7 && temp7 - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | temp3 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(divisor_high);\n    if (shift_amount == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - shift_amount;\n      temp1 = dividend_high >> (quotient_high & 0xff);\n      temp7 = divisor >> (quotient_high & 0xff) | divisor_high << shift_amount;\n      is_divisor_negative = temp7 >> 0x10;\n      quotient = temp1 / is_divisor_negative;\n      temp4 = (temp7 & 0xffff) * quotient;\n      temp3 = dividend_high << shift_amount | dividend >> (quotient_high & 0xff);\n      temp1 = temp3 >> 0x10 | (temp1 - is_divisor_negative * quotient) * 0x10000;\n      quotient_high = quotient;\n      if (temp1 <= temp4 && temp4 - temp1 != 0) {\n        carry_flag = carry_check(temp1,temp7);\n        temp1 = temp1 + temp7;\n        quotient_high = quotient - 1;\n        if ((carry_flag == false) && (temp1 <= temp4 && temp4 - temp1 != 0)) {\n          quotient_high = quotient - 2;\n          temp1 = temp1 + temp7;\n        }\n      }\n      temp2 = (temp1 - temp4) / is_divisor_negative;\n      temp6 = (temp7 & 0xffff) * temp2;\n      temp1 = temp3 & 0xffff | ((temp1 - temp4) - is_divisor_negative * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp6 && temp6 - temp1 != 0) {\n        carry_flag = carry_check(temp1,temp7);\n        temp1 = temp1 + temp7;\n        quotient = temp2 - 1;\n        if ((carry_flag == false) && (temp1 <= temp6 && temp6 - temp1 != 0)) {\n          quotient = temp2 - 2;\n          temp1 = temp1 + temp7;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      product = (ulonglong)quotient * (ulonglong)(divisor << shift_amount);\n      temp3 = (uint)((ulonglong)product >> 0x20);\n      quotient_high = 0;\n      if ((temp1 - temp6 < temp3) ||\n         ((temp1 - temp6 == temp3 && (dividend << shift_amount < (uint)product)))) {\n        quotient = quotient - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    carry_flag = quotient != 0;\n    quotient = -quotient;\n    quotient_high = -quotient_high - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_high,quotient);\n}\n\n",
            "current_name": "divide_with_remainder_000845c0",
            "entrypoint": "0x000845c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "carry_check",
                "FUN_000845c0": "divide_with_remainder_000845c0",
                "bVar13": "carry_flag",
                "iVar6": "shift_amount",
                "lVar1": "product",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "uVar1": "quotient_lower",
                "uVar10": "is_divisor_negative",
                "uVar11": "temp6",
                "uVar12": "temp7",
                "uVar2": "quotient",
                "uVar3": "quotient_high",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "is_dividend_negative"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084860": {
            "additional_data": {
                "FUNDefined_00084860": {
                    "unsigned_division": 1
                },
                "FUN_00084860": {
                    "calculate_div_mod": 1,
                    "calculate_division": 2,
                    "calculate_quotient": 8,
                    "calculate_quotient_and_remainder": 2,
                    "calculate_unsigned_quotient": 1,
                    "div_mod": 1,
                    "divide_and_modulo": 1,
                    "divide_and_modulus": 1,
                    "divide_and_remainder": 3,
                    "divide_and_round": 2,
                    "divide_and_shift": 1,
                    "divide_with_carry": 1,
                    "division": 1,
                    "division_with_remainder": 1,
                    "perform_division": 1,
                    "perform_unsigned_division": 1,
                    "reverse_division": 1,
                    "reverse_unsigned_integer_division": 1
                },
                "bVar11": {
                    "carry": 6,
                    "carry_flag": 19,
                    "has_carry": 1,
                    "is_carry": 1
                },
                "bVar13": {
                    "is_greater": 1
                },
                "iVar10": {
                    "bit_count": 1,
                    "bit_shift": 2,
                    "leading_zeros": 1,
                    "no_of_leading_zeros": 1,
                    "num_zeros": 1,
                    "shift": 4,
                    "shift_amount": 9,
                    "shift_count": 10
                },
                "iVar14": {
                    "num_shifts": 1
                },
                "lVar1": {
                    "carry": 1,
                    "multiplication_result": 1,
                    "partial_quotient": 1,
                    "product": 3,
                    "result": 6,
                    "temp": 1,
                    "temp_long": 1,
                    "temp_result": 2,
                    "tmp": 1
                },
                "param_1": {
                    "dividend": 31
                },
                "param_2": {
                    "dividend1": 1,
                    "dividend_high_bits": 1,
                    "dividend_upper": 2,
                    "dividend_upper_half": 1,
                    "divisor": 23,
                    "quotient": 3
                },
                "param_3": {
                    "divisor": 8,
                    "quotient": 16,
                    "quotient1": 1,
                    "quotient_high": 1,
                    "temp1": 2,
                    "temp_1": 1,
                    "tmp1": 1
                },
                "param_4": {
                    "divisor1": 1,
                    "divisor_high_bits": 1,
                    "divisor_upper": 2,
                    "divisor_upper_half": 1,
                    "quotient2": 1,
                    "quotient_low": 1,
                    "remainder": 19,
                    "temp2": 2,
                    "temp_2": 1,
                    "tmp2": 1
                },
                "uVar10": {
                    "divisor_mid": 1,
                    "quotient3_remainder": 1,
                    "shift_count": 1,
                    "temp_divisor1": 1
                },
                "uVar11": {
                    "carry": 1,
                    "carry_flag": 1,
                    "divisor_low": 1,
                    "temp": 1,
                    "temp_divisor2": 1,
                    "tmp7": 1
                },
                "uVar12": {
                    "carry": 1,
                    "temp_result": 1
                },
                "uVar13": {
                    "temp_quotient1": 1
                },
                "uVar14": {
                    "temp_quotient2": 1
                },
                "uVar2": {
                    "bit_shift": 2,
                    "divisor_shifted": 1,
                    "high_result": 1,
                    "lower_portion_of_quotient": 1,
                    "new_quotient": 1,
                    "partial_quotient": 1,
                    "q1": 1,
                    "quotient": 3,
                    "quotient1": 8,
                    "quotient_low_bits": 1,
                    "quotient_lower_half": 1,
                    "result": 3,
                    "result1": 2,
                    "shift_amount": 1,
                    "temp1": 3
                },
                "uVar3": {
                    "dividend_lower_half": 1,
                    "divisor_high": 1,
                    "divisor_lower_half": 1,
                    "divisor_short": 1,
                    "divisor_temp": 1,
                    "q2": 1,
                    "quotient": 1,
                    "quotient1": 1,
                    "quotient1_shifted": 1,
                    "quotient2": 7,
                    "quotient_divisor": 2,
                    "quotient_divisor_part": 1,
                    "quotient_high_bits": 1,
                    "quotient_multiplier": 1,
                    "quotient_part1": 1,
                    "quotient_upper": 1,
                    "shift_amount": 1,
                    "shifted_divisor": 1,
                    "temp2": 3,
                    "temp_quotient": 2
                },
                "uVar4": {
                    "iter": 1,
                    "multiplier1": 1,
                    "partial_quotient": 2,
                    "quotient2": 1,
                    "quotient3": 5,
                    "quotient_high": 1,
                    "quotient_lower_half": 1,
                    "quotient_multiplier": 1,
                    "quotient_part2": 1,
                    "quotient_rem": 1,
                    "quotient_remainder": 1,
                    "quotient_temp": 1,
                    "quotient_upper_half": 1,
                    "remainder": 1,
                    "remainder1": 2,
                    "temp1": 2,
                    "temp3": 3,
                    "temp_quotient2": 2,
                    "temp_var1": 1,
                    "tmp1": 1
                },
                "uVar5": {
                    "lower_portion_of_partial_quotient": 1,
                    "multiplication1": 1,
                    "partial_product": 2,
                    "partial_product1": 1,
                    "partial_product_low": 1,
                    "partial_quotient": 1,
                    "product": 2,
                    "product1": 2,
                    "product_lower_half": 2,
                    "quotient4": 1,
                    "quotient_product": 1,
                    "quotient_remainder": 1,
                    "remainder1": 1,
                    "remainder2": 1,
                    "remainder_low_bits": 1,
                    "remainder_temp": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp4": 3,
                    "temp_multiplication": 1,
                    "temp_product": 1,
                    "temp_var2": 1,
                    "tmp2": 1
                },
                "uVar6": {
                    "dividend_high": 2,
                    "dividend_lower_half": 1,
                    "dividend_shifted": 3,
                    "dividend_temp": 2,
                    "multiplication2": 1,
                    "partial_product2": 1,
                    "product": 1,
                    "product2": 1,
                    "quotient5": 1,
                    "remainder_high_bits": 1,
                    "result2": 1,
                    "shifted_dividend": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp5": 3,
                    "temp_dividend": 2,
                    "temp_result": 1,
                    "temp_var3": 1,
                    "tmp1": 1,
                    "tmp3": 2
                },
                "uVar7": {
                    "dividend_mid": 1,
                    "multiplication3": 1,
                    "partial_product_high": 1,
                    "partial_quotient_dividend_part": 1,
                    "partial_remainder": 1,
                    "product3": 1,
                    "quotient2": 1,
                    "quotient2_shifted": 1,
                    "quotient6": 1,
                    "quotient_final": 1,
                    "quotient_part3": 1,
                    "quotient_upper_half_new": 1,
                    "remainder1": 1,
                    "remainder_lower_half": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp6": 3,
                    "temp_partial": 1,
                    "temp_quotient": 3,
                    "temp_subtraction1": 1,
                    "temp_var4": 1,
                    "tmp2": 1,
                    "tmp4": 2
                },
                "uVar8": {
                    "dividend_low": 1,
                    "divider": 1,
                    "division1": 1,
                    "high_part": 1,
                    "multiplier2": 1,
                    "numerator": 1,
                    "partial_quotient": 1,
                    "quotient1_remainder": 1,
                    "quotient3": 1,
                    "quotient7": 1,
                    "quotient_part4": 1,
                    "quotient_partial": 1,
                    "quotient_temp2": 1,
                    "quotient_upper_half": 1,
                    "remainder1": 1,
                    "remainder2": 1,
                    "remainder_upper": 1,
                    "shifted_quotient_divisor_part": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp7": 3,
                    "temp_dividend_bits_high": 1,
                    "temp_divisor": 1,
                    "temp_multiplier": 1,
                    "temp_subtraction2": 1,
                    "temp_var5": 1,
                    "tmp3": 1,
                    "tmp5": 1
                },
                "uVar9": {
                    "carry": 1,
                    "denominator": 1,
                    "division2": 1,
                    "divisor_high": 1,
                    "final_quotient": 1,
                    "mux": 1,
                    "partial_product": 2,
                    "partial_product3": 1,
                    "product2": 1,
                    "product_upper_half": 1,
                    "quotient2_remainder": 1,
                    "quotient8": 1,
                    "quotient_temp3": 1,
                    "remainder": 1,
                    "remainder2": 3,
                    "remainder_upper_half": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp8": 3,
                    "temp_quotient_rem": 1,
                    "temp_remainder": 1,
                    "temp_rest": 1,
                    "temp_var6": 1,
                    "tmp4": 1,
                    "tmp6": 1,
                    "upper_portion_of_partial_quotient": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008458c"
            ],
            "code": "\nulonglong calculate_quotient_and_remainder_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong result;\n  uint quotient1;\n  uint quotient2;\n  uint quotient3;\n  uint temp4;\n  uint dividend_shifted;\n  uint temp6;\n  uint temp7;\n  uint remainder2;\n  int shift_count;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_count = LZCOUNT(quotient);\n      if (shift_count == 0) {\n        divisor = divisor - quotient;\n        quotient2 = quotient >> 0x10;\n        temp4 = quotient & 0xffff;\n        quotient1 = 1;\n      }\n      else {\n        quotient = quotient << shift_count;\n        temp7 = divisor >> (0x20U - shift_count & 0xff);\n        quotient2 = quotient >> 0x10;\n        remainder2 = temp7 / quotient2;\n        temp4 = quotient & 0xffff;\n        quotient1 = temp4 * remainder2;\n        dividend_shifted = dividend >> (0x20U - shift_count & 0xff) | divisor << shift_count;\n        quotient3 = dividend_shifted >> 0x10 | (temp7 - quotient2 * remainder2) * 0x10000;\n        dividend = dividend << shift_count;\n        temp7 = remainder2;\n        if (quotient3 <= quotient1 && quotient1 - quotient3 != 0) {\n          carry_flag = CARRY4(quotient3,quotient);\n          quotient3 = quotient3 + quotient;\n          temp7 = remainder2 - 1;\n          if ((carry_flag == false) && (quotient3 <= quotient1 && quotient1 - quotient3 != 0)) {\n            temp7 = remainder2 - 2;\n            quotient3 = quotient3 + quotient;\n          }\n        }\n        temp6 = (quotient3 - quotient1) / quotient2;\n        remainder2 = temp4 * temp6;\n        divisor = dividend_shifted & 0xffff | ((quotient3 - quotient1) - quotient2 * temp6) * 0x10000;\n        quotient1 = temp6;\n        if (divisor <= remainder2 && remainder2 - divisor != 0) {\n          carry_flag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient1 = temp6 - 1;\n          if ((carry_flag == false) && (divisor <= remainder2 && remainder2 - divisor != 0)) {\n            quotient1 = temp6 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - remainder2;\n        quotient1 = quotient1 | temp7 << 0x10;\n      }\n      remainder2 = divisor / quotient2;\n      quotient3 = temp4 * remainder2;\n      dividend_shifted = dividend >> 0x10 | (divisor - quotient2 * remainder2) * 0x10000;\n      temp7 = remainder2;\n      if (dividend_shifted <= quotient3 && quotient3 - dividend_shifted != 0) {\n        carry_flag = CARRY4(dividend_shifted,quotient);\n        dividend_shifted = dividend_shifted + quotient;\n        temp7 = remainder2 - 1;\n        if ((carry_flag == false) && (dividend_shifted <= quotient3 && quotient3 - dividend_shifted != 0)) {\n          temp7 = remainder2 - 2;\n          dividend_shifted = dividend_shifted + quotient;\n        }\n      }\n      remainder2 = (dividend_shifted - quotient3) / quotient2;\n      temp4 = temp4 * remainder2;\n      dividend_shifted = dividend & 0xffff | ((dividend_shifted - quotient3) - quotient2 * remainder2) * 0x10000;\n      quotient2 = remainder2;\n      if (dividend_shifted <= temp4 && temp4 - dividend_shifted != 0) {\n        quotient2 = remainder2 - 1;\n        if ((CARRY4(dividend_shifted,quotient) == false) &&\n           (dividend_shifted + quotient <= temp4 && temp4 - (dividend_shifted + quotient) != 0)) {\n          quotient2 = remainder2 - 2;\n        }\n      }\n      return CONCAT44(quotient1,quotient2 | temp7 << 0x10);\n    }\n    shift_count = LZCOUNT(quotient);\n    if (shift_count != 0) {\n      temp7 = dividend >> (0x20U - shift_count & 0xff);\n      quotient = quotient << shift_count;\n      dividend = dividend << shift_count;\n      divisor = temp7 | divisor << shift_count;\n    }\n    quotient1 = quotient >> 0x10;\n    quotient2 = divisor / quotient1;\n    temp4 = (quotient & 0xffff) * quotient2;\n    remainder2 = dividend >> 0x10 | (divisor - quotient1 * quotient2) * 0x10000;\n    temp7 = quotient2;\n    if (remainder2 <= temp4 && temp4 - remainder2 != 0) {\n      carry_flag = CARRY4(remainder2,quotient);\n      remainder2 = remainder2 + quotient;\n      temp7 = quotient2 - 1;\n      if ((carry_flag == false) && (remainder2 <= temp4 && temp4 - remainder2 != 0)) {\n        temp7 = quotient2 - 2;\n        remainder2 = remainder2 + quotient;\n      }\n    }\n    dividend_shifted = (remainder2 - temp4) / quotient1;\n    quotient2 = (quotient & 0xffff) * dividend_shifted;\n    temp4 = dividend & 0xffff | ((remainder2 - temp4) - quotient1 * dividend_shifted) * 0x10000;\n    quotient1 = dividend_shifted;\n    if (temp4 <= quotient2 && quotient2 - temp4 != 0) {\n      quotient1 = dividend_shifted - 1;\n      if ((CARRY4(temp4,quotient) == false) &&\n         (temp4 + quotient <= quotient2 && quotient2 - (temp4 + quotient) != 0)) {\n        quotient1 = dividend_shifted - 2;\n      }\n    }\n    quotient1 = quotient1 | temp7 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift_count = LZCOUNT(remainder);\n    if (shift_count == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      quotient1 = 0;\n    }\n    else {\n      quotient1 = 0x20 - shift_count;\n      temp7 = divisor >> (quotient1 & 0xff);\n      quotient2 = remainder << shift_count | quotient >> (quotient1 & 0xff);\n      temp4 = quotient2 >> 0x10;\n      quotient3 = temp7 / temp4;\n      remainder2 = (quotient2 & 0xffff) * quotient3;\n      dividend_shifted = dividend >> (quotient1 & 0xff) | divisor << shift_count;\n      quotient1 = dividend_shifted >> 0x10 | (temp7 - temp4 * quotient3) * 0x10000;\n      temp7 = quotient3;\n      if (quotient1 <= remainder2 && remainder2 - quotient1 != 0) {\n        carry_flag = CARRY4(quotient1,quotient2);\n        quotient1 = quotient1 + quotient2;\n        temp7 = quotient3 - 1;\n        if ((carry_flag == false) && (quotient1 <= remainder2 && remainder2 - quotient1 != 0)) {\n          temp7 = quotient3 - 2;\n          quotient1 = quotient1 + quotient2;\n        }\n      }\n      quotient3 = (quotient1 - remainder2) / temp4;\n      temp6 = (quotient2 & 0xffff) * quotient3;\n      temp4 = dividend_shifted & 0xffff | ((quotient1 - remainder2) - temp4 * quotient3) * 0x10000;\n      quotient1 = quotient3;\n      if (temp4 <= temp6 && temp6 - temp4 != 0) {\n        carry_flag = CARRY4(temp4,quotient2);\n        temp4 = temp4 + quotient2;\n        quotient1 = quotient3 - 1;\n        if ((carry_flag == false) && (temp4 <= temp6 && temp6 - temp4 != 0)) {\n          quotient1 = quotient3 - 2;\n          temp4 = temp4 + quotient2;\n        }\n      }\n      quotient1 = quotient1 | temp7 << 0x10;\n      result = (ulonglong)quotient1 * (ulonglong)(quotient << shift_count);\n      temp7 = (uint)((ulonglong)result >> 0x20);\n      if ((temp4 - temp6 < temp7) || ((temp4 - temp6 == temp7 && (dividend << shift_count < (uint)result)))\n         ) {\n        quotient1 = quotient1 - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient1;\n}\n\n",
            "current_name": "calculate_quotient_and_remainder_00084860",
            "entrypoint": "0x00084860",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084860": "calculate_quotient_and_remainder_00084860",
                "bVar11": "carry_flag",
                "iVar10": "shift_count",
                "lVar1": "result",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "quotient3",
                "uVar5": "temp4",
                "uVar6": "dividend_shifted",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "remainder2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00085844": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00085844",
            "entrypoint": "0x00085844",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "skipped": true,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_000805a8",
            "FUN_000806a0",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b2c",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c20",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_000810a6",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_000836ec",
            "FUN_00083850",
            "FUN_00083888",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_000841e4",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_00080164",
            "FUN_000801e0",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_0008113a",
            "FUN_0008159e",
            "FUN_000815ec"
        ],
        [
            "FUN_000810e8",
            "FUN_0008117a"
        ],
        [
            "FUN_00080250"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 474952
}