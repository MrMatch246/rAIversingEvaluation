{
    "functions": {
        "FUN_000800f4": {
            "additional_data": {
                "DAT_200708a0": {
                    "flag": 19,
                    "flag_variable": 1
                },
                "FUN_000800f4": {
                    "initialize_flag": 25,
                    "set_flag_if_false": 1,
                    "set_flag_if_not_set": 3,
                    "update_flag_if_null": 1,
                    "update_flag_if_unset": 1
                },
                "param_1": {
                    "input": 14,
                    "input_data": 1,
                    "input_flag": 1,
                    "input_param": 1,
                    "input_value": 9,
                    "value": 5
                }
            },
            "called": [],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initialize_flag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "current_name": "initialize_flag_000800f4",
            "entrypoint": "0x000800f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080118": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080118",
            "entrypoint": "0x00080118",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080164": {
            "additional_data": {
                "FUM_00080164": {
                    "initialize_data": 1
                },
                "FUN_00080164": {
                    "initialize": 4,
                    "initialize_and_configure": 1,
                    "initialize_data": 21,
                    "initialize_data_structures": 2,
                    "initialize_devices": 1,
                    "initialize_function": 1
                },
                "FUN_000806f8": {
                    "configure_byte": 1,
                    "configure_device": 1,
                    "initialize_buffer": 1,
                    "perform_action_with_params": 1,
                    "perform_operation": 2,
                    "process_data": 6,
                    "send_data": 1,
                    "set_byte": 1,
                    "set_byte_data": 2,
                    "set_byte_value": 3,
                    "write_byte": 1,
                    "write_data": 1
                },
                "param_1": {
                    "_unused_param_1": 1,
                    "arg1": 1,
                    "buffer": 1,
                    "byte_array": 2,
                    "byte_data": 1,
                    "byte_stream": 1,
                    "config_param": 1,
                    "data": 6,
                    "data_1": 1,
                    "data_pointer": 1,
                    "data_pointer1": 2,
                    "data_ptr": 3,
                    "device": 1,
                    "param1": 1,
                    "param_1": 2,
                    "unused1": 1,
                    "unused_param": 3,
                    "unused_param1": 2
                },
                "param_2": {
                    "_unused_param_2": 1,
                    "arg2": 1,
                    "buffer_size": 1,
                    "byte_length": 1,
                    "configuration": 1,
                    "data_2": 1,
                    "data_size": 3,
                    "length": 3,
                    "param2": 1,
                    "param_2": 2,
                    "param_value": 1,
                    "size": 2,
                    "unused2": 1,
                    "unused_param": 3,
                    "unused_param2": 2,
                    "value": 7
                },
                "param_3": {
                    "_unused_param_3": 1,
                    "additional_param1": 1,
                    "arg3": 7,
                    "buffer_size": 1,
                    "byte_data": 1,
                    "config_param_3": 1,
                    "data_3": 2,
                    "data_length": 1,
                    "data_param": 1,
                    "initialize_value1": 1,
                    "param1": 1,
                    "param3": 6,
                    "param_3": 3,
                    "parameter3": 1,
                    "size": 1,
                    "unused_param3": 1,
                    "value1": 1
                },
                "param_4": {
                    "_unused_param_4": 1,
                    "additional_param2": 1,
                    "arg4": 7,
                    "config_param_4": 1,
                    "data": 1,
                    "data_4": 2,
                    "data_size": 1,
                    "data_value": 1,
                    "initialize_value2": 1,
                    "param2": 1,
                    "param4": 6,
                    "param_4": 3,
                    "param_value": 1,
                    "parameter4": 1,
                    "unused_param4": 1,
                    "value": 1,
                    "value2": 1
                }
            },
            "called": [
                "FUN_000806f8"
            ],
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "code": "\nvoid initialize_data_structures_00080164(undefined4 data,undefined4 value,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_000806f8(&DAT_200708e8,0x5a);\n  FUN_000806f8(&DAT_200708d4,0x5a,arg3,arg4);\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00080164",
            "entrypoint": "0x00080164",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080164": "initialize_data_structures_00080164",
                "param_1": "data",
                "param_2": "value",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000801e0": {
            "additional_data": {
                "0x39": {
                    "flag3": 1
                },
                "0xd": {
                    "flag1": 1
                },
                "0xe100": {
                    "config_param": 1
                },
                "1000": {
                    "delay": 1
                },
                "2": {
                    "flag6": 1
                },
                "3": {
                    "flag5": 1
                },
                "4": {
                    "flag4": 1
                },
                "6": {
                    "flag2": 1
                },
                "BYTE_FUN_000806a0": {
                    "read_register_byte": 1
                },
                "DAT_200708bc": {
                    "interrupt_flag": 3,
                    "is_initialized": 1
                },
                "DAT_200708d4": {
                    "device1_data": 1
                },
                "DAT_200708e8": {
                    "device2_data": 1
                },
                "DAT_20070be8": {
                    "memory_data": 1
                },
                "FUNC_00080f08": {
                    "delay_execution": 2,
                    "enable_timer": 1,
                    "initialize_timer": 1,
                    "set_delay": 7,
                    "set_interval": 2,
                    "set_sleep_interval": 1,
                    "set_timeout": 6,
                    "set_timer": 6,
                    "set_timer_interval": 4,
                    "wait_for_process": 1
                },
                "FUN_00080164": {
                    "custom_function": 1,
                    "execute_function": 1,
                    "execute_preparation": 1,
                    "initialize_module": 2,
                    "initialize_resources": 1,
                    "initialize_subsystems": 1,
                    "internal_initialization": 1,
                    "log_results": 1,
                    "perform_additional_setup": 1,
                    "perform_additional_tasks": 1,
                    "perform_cleanup": 1,
                    "perform_initial_tasks": 1,
                    "perform_initialization": 8,
                    "perform_setup": 1,
                    "perform_task": 1
                },
                "FUN_000801e0": {
                    "initialize": 3,
                    "initialize_and_check": 3,
                    "initialize_and_check_status": 1,
                    "initialize_and_check_system": 3,
                    "initialize_device": 2,
                    "initialize_device_and_check": 1,
                    "initialize_system": 17,
                    "initiate_startup": 1
                },
                "FUN_000806a0": {
                    "activate_feature": 1,
                    "configure_component": 1,
                    "configure_device": 5,
                    "configure_module": 1,
                    "enable_feature": 5,
                    "enable_module": 1,
                    "enable_peripheral": 1,
                    "initialize_buffer": 1,
                    "initialize_byte": 1,
                    "initialize_component": 1,
                    "initialize_module": 1,
                    "register_component": 1,
                    "set_bit": 1,
                    "set_byte_value": 1,
                    "set_configuration": 1,
                    "set_flag": 1,
                    "set_mode": 1,
                    "set_option": 2,
                    "set_port_config": 1,
                    "setup_io": 1,
                    "toggle_feature": 1,
                    "write_register_byte": 1
                },
                "FUN_00080f08": {
                    "set_delay": 1,
                    "set_flag_interval": 1,
                    "set_timeout": 1
                },
                "FUN_00080f0c": {
                    "change_setting": 1,
                    "configure_component": 1,
                    "configure_device": 3,
                    "configure_feature": 1,
                    "configure_port": 1,
                    "perform_action": 2,
                    "perform_operation": 1,
                    "set_config": 1,
                    "set_configuration": 4,
                    "set_configuration_option": 1,
                    "set_device_property": 1,
                    "set_feature": 1,
                    "set_flag": 9,
                    "set_mode": 2,
                    "set_operation": 1,
                    "toggle_bit": 1
                },
                "FUN_000813dc": {
                    "configure": 1,
                    "configure_data": 1,
                    "configure_device": 6,
                    "configure_hardware": 1,
                    "configure_module": 1,
                    "configure_peripheral": 1,
                    "configure_sensor": 1,
                    "configure_system": 1,
                    "init_data_structure": 1,
                    "initialize_device": 2,
                    "initialize_memory": 3,
                    "process_data": 1,
                    "set_configuration": 8,
                    "set_parameters": 1,
                    "setup_data": 1,
                    "setup_system": 1
                },
                "byte": {
                    "byte": 1
                },
                "int": {
                    "byte": 1
                },
                "param_1": {
                    "argument1": 1,
                    "buffer": 1,
                    "byte_array": 2,
                    "byte_value": 1,
                    "component": 1,
                    "component_id": 1,
                    "config_index": 1,
                    "config_param1": 1,
                    "config_param_1": 1,
                    "data": 1,
                    "device": 2,
                    "device_id": 1,
                    "device_param": 1,
                    "device_param1": 1,
                    "device_register": 1,
                    "feature": 6,
                    "flag_address": 1,
                    "flag_index": 1,
                    "io_address": 1,
                    "module_data": 1,
                    "register": 1,
                    "step_size": 1
                },
                "param_2": {
                    "action": 1,
                    "argument2": 1,
                    "bit_value": 1,
                    "byte_value": 1,
                    "component_value": 1,
                    "config": 1,
                    "config_param2": 1,
                    "config_param_2": 1,
                    "config_value": 2,
                    "count": 1,
                    "device_param": 1,
                    "device_param2": 1,
                    "device_value": 2,
                    "flag": 1,
                    "flag_value": 2,
                    "id": 1,
                    "io_value": 1,
                    "module_id": 1,
                    "option": 2,
                    "param": 1,
                    "size": 1,
                    "state": 1,
                    "value": 3
                },
                "param_3": {
                    "arg3": 13,
                    "argument3": 1,
                    "config_param_3": 1,
                    "param3": 6,
                    "param_3": 2,
                    "param_a": 1,
                    "unknown_param_3": 1,
                    "unknown_parameter_3": 1,
                    "unused": 1,
                    "unused_param_3": 2
                },
                "param_4": {
                    "arg4": 13,
                    "argument4": 1,
                    "config_param_4": 1,
                    "param4": 6,
                    "param_4": 2,
                    "param_b": 1,
                    "unknown_param_4": 1,
                    "unknown_parameter_4": 1,
                    "unused": 1,
                    "unused_param_4": 2
                },
                "return": {
                    "success_status": 1
                },
                "software_interrupt": {
                    "trigger_interrupt": 5
                },
                "uint": {
                    "uint32": 1
                },
                "undeclared_variable": {
                    "delay_time": 1
                },
                "undefined4": {
                    "uint": 1
                },
                "void": {
                    "void": 1
                }
            },
            "called": [
                "FUN_00080164",
                "FUN_000813dc",
                "FUN_00080f08",
                "FUN_000806a0",
                "FUN_00080f0c"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nundefined8 initialize_and_check_system_000801e0(uint feature,uint value,uint arg3,uint arg4)\n\n{\n  FUN_000813dc(&DAT_20070be8,0xe100,arg3,arg4,arg4);\n  FUN_00080f0c(0xd,1);\n  FUN_00080f0c(6,1);\n  FUN_00080f0c(0x39,0);\n  FUN_00080f0c(4,0);\n  FUN_00080f0c(3,0);\n  FUN_00080f0c(2,0);\n  FUN_000806a0(&DAT_200708d4,5);\n  FUN_000806a0(&DAT_200708e8,6);\n  FUN_00080164();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    trigger_interrupt(0x3f);\n    success_status 1;\n  }\n  success_status 0;\n}\n\n",
            "current_name": "initialize_and_check_system_000801e0",
            "entrypoint": "0x000801e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000801e0": "initialize_and_check_system_000801e0",
                "int": "byte",
                "param_1": "feature",
                "param_2": "value",
                "param_3": "arg3",
                "param_4": "arg4",
                "return": "success_status",
                "software_interrupt": "trigger_interrupt",
                "undefined4": "uint"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080250": {
            "additional_data": {
                "FUNC_00080f08": {
                    "configure": 1,
                    "configure_sensor": 1,
                    "delay": 1,
                    "initialize": 5,
                    "initialize_component": 1,
                    "initialize_control": 1,
                    "initialize_hardware": 1,
                    "initialize_motor": 1,
                    "initialize_subsystem": 1,
                    "initialize_system": 4,
                    "set_control": 2,
                    "set_control_flag": 1,
                    "set_control_frequency": 1,
                    "set_control_mode": 2,
                    "set_control_speed": 1,
                    "set_delay": 1,
                    "set_parameter": 1,
                    "set_speed": 1,
                    "update_control": 1
                },
                "FUN_00080064": {
                    "print_message": 1
                },
                "FUN_00080164": {
                    "clear_print_buffer": 1,
                    "display_error": 1,
                    "display_message": 1,
                    "log_entry": 1,
                    "log_message": 2,
                    "log_message2": 1,
                    "print_debug_info": 1,
                    "print_debug_message": 2,
                    "print_header": 3,
                    "print_info": 1,
                    "print_log": 1,
                    "print_message": 12,
                    "print_status": 1,
                    "print_status_message": 1
                },
                "FUN_00080250": {
                    "control_function": 4,
                    "control_mode": 12,
                    "control_mode_handler": 2,
                    "control_mode_switch": 3,
                    "control_system": 6
                },
                "FUN_000806f8": {
                    "apply_control_signal": 1,
                    "control_function": 1,
                    "send_data": 1,
                    "set_control_state": 1,
                    "set_data": 1,
                    "set_motor_speed": 1,
                    "set_output": 1,
                    "store_data": 1,
                    "update_actuator": 1,
                    "update_control": 1,
                    "update_control_signal": 1,
                    "update_data": 8,
                    "update_motor": 2,
                    "update_motor_state": 1,
                    "update_parameter": 1,
                    "update_register": 1,
                    "update_sensor": 1,
                    "update_value": 4
                },
                "FUN_00080f08": {
                    "set_default_parameters": 1
                },
                "FUN_00081014": {
                    "check_condition": 1,
                    "check_control_limit": 1,
                    "check_control_mode": 1,
                    "check_sensor_range": 1,
                    "check_threshold": 1,
                    "display_message": 1,
                    "enable_control": 1,
                    "initialize_subsystem": 1,
                    "initialize_system": 1,
                    "perform_action": 2,
                    "set_configuration": 2,
                    "set_control_mode": 2,
                    "set_mode": 4,
                    "set_parameter": 1,
                    "set_status": 1,
                    "set_threshold": 6,
                    "set_variable": 1,
                    "sleep": 1
                },
                "FUN_000810c4": {
                    "apply_control": 1,
                    "calculate_checksum": 1,
                    "control_steering": 1,
                    "do_something": 1,
                    "execute_command": 1,
                    "modify_control": 1,
                    "print_stack_message": 1,
                    "process_control": 3,
                    "process_control_command": 1,
                    "process_data": 6,
                    "process_message": 1,
                    "set_control_data": 1,
                    "set_parameters": 1,
                    "thunk_set_message": 1,
                    "update_control": 3,
                    "update_control_data": 1,
                    "update_control_settings": 1,
                    "update_data": 1,
                    "update_state": 1,
                    "update_values": 1
                },
                "FUN_000810e8": {
                    "display_message": 4,
                    "enter_control_mode": 3,
                    "enter_mode": 1,
                    "log_message": 6,
                    "print_control_mode": 1,
                    "print_message": 6,
                    "set_control_mode": 1,
                    "set_message": 7
                },
                "FUN_0008113a": {
                    "do_something": 1,
                    "perform_control": 1,
                    "throttle_control": 1,
                    "thunk_function": 1
                },
                "FUN_0008117a": {
                    "analyze_data": 1,
                    "apply_control": 1,
                    "clear_data": 1,
                    "control_component": 1,
                    "control_motor": 1,
                    "execute_control": 1,
                    "output_data": 1,
                    "perform_action": 2,
                    "perform_operation": 1,
                    "process_checksum": 1,
                    "process_control": 1,
                    "process_control_loop": 1,
                    "process_data2": 1,
                    "process_input": 1,
                    "process_value": 1,
                    "send_data": 2,
                    "steer_control": 1,
                    "thunk_message": 1,
                    "update_control": 2,
                    "update_control_data": 1,
                    "update_control_output": 1,
                    "update_data": 3,
                    "update_motors": 1,
                    "update_position_estimate": 1
                },
                "FUN_00081214": {
                    "copy_data": 10,
                    "copy_data_to_buffer": 1,
                    "copy_string": 1,
                    "copy_to_buffer": 1,
                    "format_data": 1,
                    "get_substring": 1,
                    "parse_data": 2,
                    "process_buffer": 1,
                    "process_command": 1,
                    "process_data": 2,
                    "process_data4": 1,
                    "process_data_block": 1,
                    "process_data_chunk": 1,
                    "process_value": 1,
                    "save_data": 1,
                    "store_message": 1
                },
                "FUN_00081248": {
                    "check_value": 1,
                    "get_available_data": 1,
                    "get_buffer_data": 1,
                    "get_buffer_length": 3,
                    "get_buffer_size": 1,
                    "get_control_input": 1,
                    "get_count": 1,
                    "get_data_size": 3,
                    "get_event_count": 1,
                    "get_length": 4,
                    "get_loop_count": 2,
                    "get_message_count": 2,
                    "get_num_messages": 1,
                    "get_pending_commands": 1,
                    "get_queue_size": 1,
                    "get_remaining_data": 1,
                    "get_size": 1,
                    "get_stack_size": 1,
                    "get_valid_data": 1,
                    "receive_data": 1
                },
                "FUN_00081276": {
                    "clear_buffer": 1,
                    "clear_buffer_data": 1,
                    "clear_message": 1,
                    "consume_buffer": 1,
                    "decrement_count": 1,
                    "decrement_stack_size": 1,
                    "dequeue_value": 1,
                    "discard_data": 1,
                    "increment_loop_count": 1,
                    "process_buffer": 2,
                    "process_control_input": 1,
                    "process_data": 9,
                    "process_data_entry": 1,
                    "process_event": 1,
                    "process_message": 2,
                    "process_pending_commands": 1,
                    "reset_loop_count": 1,
                    "update_data": 1,
                    "update_value": 1
                },
                "FUN_0008145c": {
                    "allocate_memory": 1,
                    "calculate_control": 1,
                    "calculate_parameter": 1,
                    "calculate_value": 6,
                    "configure_device": 1,
                    "configure_motors": 1,
                    "configure_params": 1,
                    "configure_settings": 1,
                    "create_control_settings": 1,
                    "create_data": 2,
                    "create_object": 1,
                    "generate_value": 1,
                    "initialize_actuator": 1,
                    "initialize_component": 1,
                    "initialize_control": 1,
                    "initialize_control_system": 1,
                    "initialize_controller": 1,
                    "initialize_controllers": 1,
                    "initialize_data": 2,
                    "initialize_motors": 1,
                    "initialize_sensor": 1,
                    "initialize_values": 1
                },
                "FUN_00081472": {
                    "clean_memory": 1,
                    "clean_up": 1,
                    "clean_up_data": 1,
                    "cleanup": 1,
                    "cleanup_component": 1,
                    "cleanup_control_input": 1,
                    "cleanup_data": 7,
                    "clear_message": 1,
                    "empty_buffer": 1,
                    "free_buffer": 1,
                    "free_memory": 3,
                    "modify_data": 2,
                    "process_command": 1,
                    "process_data": 1,
                    "process_data2": 1,
                    "process_entry": 1,
                    "release_data": 1,
                    "release_resource": 1,
                    "release_resources": 1,
                    "update_print_buffer": 1
                },
                "FUN_00081560": {
                    "convert_data": 3,
                    "copy_buffer": 2,
                    "copy_buffer_data": 1,
                    "copy_data": 3,
                    "parse_command": 1,
                    "parse_data": 4,
                    "parse_packet": 1,
                    "parse_parameter": 1,
                    "parse_value": 1,
                    "process_data": 2,
                    "set_data": 1,
                    "store_data": 3,
                    "store_value": 1
                },
                "FUN_000815b8": {
                    "check_command": 2,
                    "check_data": 10,
                    "check_value": 2,
                    "compare_buffer": 1,
                    "compare_buffer_data": 1,
                    "compare_data": 1,
                    "compare_string": 1,
                    "compare_strings": 5,
                    "compare_value": 1,
                    "compare_values": 1,
                    "find_control_signal": 1,
                    "find_data": 1,
                    "find_value": 1,
                    "validate_data": 1
                },
                "FUN_000815de": {
                    "convert_buffer_data_to_int": 1,
                    "convert_data": 3,
                    "convert_value": 2,
                    "extract_value": 2,
                    "get_data": 1,
                    "get_data_value": 2,
                    "get_value": 3,
                    "parse_buffer": 1,
                    "parse_data": 5,
                    "parse_sensor_data": 1,
                    "parse_value": 2,
                    "read_data": 2,
                    "read_value": 1,
                    "retrieve_value": 1
                },
                "FUN_00081624": {
                    "configure_system": 1,
                    "create_data": 1,
                    "get_data": 1,
                    "get_device_info": 1,
                    "get_sensor_data": 3,
                    "get_sensor_reading": 1,
                    "initialize": 2,
                    "initialize_connection": 1,
                    "initialize_control": 6,
                    "initialize_data": 3,
                    "initialize_params": 1,
                    "initialize_sensor": 3,
                    "initialize_system": 1,
                    "initialize_value": 2,
                    "initialize_values": 1,
                    "set_controller_params": 1
                },
                "auStack_1c": {
                    "stack_array": 1,
                    "temporary_buffer": 1
                },
                "iVar2": {
                    "control_input": 1,
                    "counter": 2
                },
                "puVar3": {
                    "output_pointer": 1,
                    "pointer_variable": 1
                },
                "thunk_FUN_0008113a": {
                    "calculate_value": 2,
                    "control_algorithm": 1,
                    "do_something": 1,
                    "execute_control_command": 1,
                    "initialize_data": 1,
                    "manipulate_data": 2,
                    "process_control": 2,
                    "process_control_buffer": 1,
                    "process_data": 1,
                    "process_data3": 1,
                    "process_data_with_config": 1,
                    "process_data_wrapper": 1,
                    "process_thunk": 1,
                    "steer_vehicle": 1,
                    "thunk_function": 2,
                    "thunk_process_data": 2,
                    "thunk_process_message": 1,
                    "thunk_update_control": 1,
                    "update_buffer_data": 1
                },
                "uVar1": {
                    "return_value": 1,
                    "temp_variable": 1
                }
            },
            "called": [
                "FUN_00081248",
                "FUN_00081276",
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_00081624",
                "FUN_00081014",
                "FUN_00081560",
                "FUN_00080164",
                "FUN_0008145c",
                "FUN_0008117a",
                "FUN_00080f08",
                "thunk_FUN_0008113a",
                "FUN_00081472",
                "FUN_000815de",
                "FUN_000806f8",
                "FUN_000815b8",
                "FUN_00081214"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid control_mode_switch_00080250(void)\n\n{\n  undefined4 return_value;\n  int counter;\n  undefined *output_pointer;\n  undefined stack_array [12];\n  \n  DAT_200708c0 = FUN_00081624(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  FUN_00081014(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        FUN_00080164();\n        FUN_000810e8(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      return_value = FUN_00081624(3,1,20000);\n      DAT_200708d8 = FUN_0008145c(0,1000,2000,0x28,0x96);\n      DAT_200708ec = FUN_0008145c(return_value,1000,2000,0x28,0x96);\n      while (counter = FUN_00081248(&DAT_20070be8), 0 < counter) {\n        FUN_00081276(&DAT_20070be8);\n        thunk_FUN_0008113a(&DAT_20070be8,DAT_200708d8,10);\n        FUN_000810c4(&DAT_20070be8,&DAT_00084b13);\n        FUN_0008117a(&DAT_20070be8,DAT_200708ec,10);\n      }\n      FUN_000806f8(&DAT_200708e8,DAT_200708ec);\n      FUN_000806f8(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        FUN_00080164();\n        FUN_000810e8(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      counter = FUN_00081248(&DAT_20070be8);\n      if (0 < counter) {\n        FUN_00081214(stack_array,&DAT_20070be8,0x2c);\n        FUN_00081560(&DAT_200708dc,stack_array);\n        FUN_00081472(stack_array);\n        FUN_00081214(stack_array,&DAT_20070be8,10);\n        FUN_00081560(&DAT_200708c8,stack_array);\n        FUN_00081472(stack_array);\n        FUN_00081276(&DAT_20070be8);\n        counter = FUN_000815b8(&DAT_200708dc,\"steer\");\n        if (counter == 0) goto LAB_0008039c;\n        return_value = FUN_000815de(&DAT_200708c8);\n        output_pointer = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    FUN_00080164();\n    FUN_000810e8(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  counter = FUN_000815b8(&DAT_200708dc,\"motor\");\n  if (counter != 0) {\n    return_value = FUN_000815de(&DAT_200708c8);\n    output_pointer = &DAT_200708e8;\nLAB_000803b2:\n    FUN_000806f8(output_pointer,return_value);\n  }\n  goto LAB_00080346;\n}\n\n",
            "current_name": "control_mode_switch_00080250",
            "entrypoint": "0x00080250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080250": "control_mode_switch_00080250",
                "auStack_1c": "stack_array",
                "iVar2": "counter",
                "puVar3": "output_pointer",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000803fc": {
            "additional_data": {
                "FUN_000803fc": {
                    "configure_tc_channel": 1,
                    "initialize_channel": 8,
                    "initialize_channels": 1,
                    "initialize_hardware": 1,
                    "initialize_tc": 8,
                    "initialize_tc_channel": 10,
                    "initialize_tc_function": 1,
                    "initialize_transmission": 1
                },
                "FUN_00080aa8": {
                    "init_channel": 1,
                    "initialize": 1,
                    "initialize_options": 1,
                    "initialize_param": 1,
                    "initialize_something": 1,
                    "initialize_tc": 1,
                    "process_param": 3,
                    "process_params": 2
                },
                "FUN_00080b2c": {
                    "configure_channel": 2,
                    "set_channel": 3,
                    "set_channel_config": 1,
                    "set_channel_options": 1,
                    "set_channel_params": 1,
                    "set_channel_value": 1,
                    "set_param": 1,
                    "set_tc_channel": 1
                },
                "FUN_00080b90": {
                    "configure_channel": 3,
                    "configure_tc_channel": 1,
                    "set_channel": 1,
                    "set_channel_frequency": 1,
                    "set_channel_properties": 1,
                    "set_channel_property": 1,
                    "set_param2": 1,
                    "set_param_config": 1,
                    "set_param_value": 1
                },
                "FUN_000816f8": {
                    "check_channel": 2,
                    "check_channel_boundaries": 1,
                    "check_channel_bounds": 1,
                    "check_channel_index": 1,
                    "check_channel_size": 2,
                    "check_channel_validity": 1,
                    "handle_error": 1,
                    "log_error": 1,
                    "validate_channel": 1
                },
                "in_lr": {
                    "": 1,
                    "channel_index2": 1,
                    "constant": 1,
                    "constant2": 1,
                    "in_link_register": 2,
                    "in_lr": 10,
                    "input_lr": 1,
                    "instruction_address": 1,
                    "link_register": 1,
                    "reg_value": 1,
                    "return_address": 1,
                    "temp_var2": 1,
                    "temporary2": 1,
                    "unspecified2": 1,
                    "unused_var2": 1,
                    "var2": 1,
                    "variable2": 1
                },
                "param_1": {
                    "channel": 6,
                    "channel_address": 1,
                    "channel_id": 3,
                    "channel_index": 18,
                    "channel_number": 1,
                    "file_name": 1,
                    "param1_value": 1
                },
                "param_2": {
                    "channel_data": 1,
                    "channel_number": 1,
                    "channel_size": 4,
                    "dw_channel": 9,
                    "flag": 1,
                    "index": 1,
                    "line_number": 1,
                    "num_channels": 1,
                    "offset": 1,
                    "param2": 1,
                    "param2_value": 1,
                    "param_value": 3,
                    "size": 4,
                    "source_id": 1,
                    "value": 1
                },
                "param_3": {
                    "buffer_pointer": 1,
                    "config": 1,
                    "function_name": 1,
                    "options": 1,
                    "p_tc": 3,
                    "param": 3,
                    "param1": 6,
                    "param3": 11,
                    "param3_value": 1,
                    "param_type": 1,
                    "parameter": 1,
                    "some_value": 1
                },
                "param_4": {
                    "bit": 1,
                    "bit_index": 3,
                    "bit_mask": 7,
                    "bit_offset": 3,
                    "bit_position": 4,
                    "error_condition": 1,
                    "flag": 1,
                    "mask": 1,
                    "mask_value": 1,
                    "param2": 4,
                    "param4": 2,
                    "param4_value": 1,
                    "shift": 1,
                    "shift_value": 1
                },
                "uVar1": {
                    "combined": 1,
                    "combined_i_ds": 1,
                    "combined_param": 4,
                    "combined_params": 14,
                    "combined_value": 4,
                    "combined_vars": 1,
                    "concatenated_params": 3,
                    "concatenated_value": 1,
                    "result": 1
                },
                "unaff_r4": {
                    "": 1,
                    "channel_index1": 1,
                    "config_length": 1,
                    "constant": 1,
                    "constant1": 1,
                    "register4": 1,
                    "reserved_register": 1,
                    "temp_var1": 1,
                    "temporary1": 1,
                    "unaff_r4": 10,
                    "unaff_value": 1,
                    "unaffected_r4": 2,
                    "unaffected_register4": 1,
                    "unspecified1": 1,
                    "unused_var": 1,
                    "var1": 1,
                    "variable1": 1
                }
            },
            "called": [
                "FUN_00080b2c",
                "FUN_00080b90",
                "FUN_000816f8",
                "FUN_00080aa8"
            ],
            "calling": [
                "FUN_000806a0"
            ],
            "code": "\nvoid initialize_tc_channel_000803fc(int channel_index,uint dw_channel,undefined4 param3,uint bit_mask)\n\n{\n  undefined4 unaff_r4;\n  undefined4 in_lr;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(dw_channel,channel_index);\n  FUN_00080aa8(param3);\n  FUN_00080b2c(channel_index,dw_channel,0xc002);\n  FUN_00080b90(channel_index,dw_channel,0xa41);\n  *(int *)((bit_mask >> 5) * 4 + -0x1fff1f00) = 1 << (bit_mask & 0x1f);\n  *(undefined4 *)(channel_index + dw_channel * 0x40 + 0x24) = 4;\n  if (2 < dw_channel) {\n    combined_params = FUN_000816f8(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         unaff_r4,in_lr);\n  }\n  *(undefined4 *)((int)combined_params + (int)((ulonglong)combined_params >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "current_name": "initialize_tc_channel_000803fc",
            "entrypoint": "0x000803fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000803fc": "initialize_tc_channel_000803fc",
                "param_1": "channel_index",
                "param_2": "dw_channel",
                "param_3": "param3",
                "param_4": "bit_mask",
                "uVar1": "combined_params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008044c": {
            "additional_data": {
                "DAT_200708f0": {
                    "data2": 1,
                    "data_limit": 1
                },
                "DAT_200708f1": {
                    "data1": 1,
                    "data_array_1": 1
                },
                "DAT_200708f8": {
                    "data3": 1,
                    "data_array_2": 1
                },
                "DAT_200708fc": {
                    "data_array_3": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "elf32_rel_array": 1
                },
                "FUN_0008044c": {
                    "normalize_data": 1,
                    "process_data": 8,
                    "update_data": 12,
                    "update_data_and_check_conditions": 1,
                    "update_flags": 1,
                    "update_memory": 3,
                    "update_memory_value": 1,
                    "update_param_and_offset": 1,
                    "update_param_values": 2,
                    "update_status": 1
                },
                "FUN_00081014": {
                    "adjust_values": 1,
                    "apply_rule": 1,
                    "handle_error": 1,
                    "handle_operation": 1,
                    "process_data": 2,
                    "process_sub_function": 1,
                    "update_flags": 1,
                    "update_value": 2
                },
                "byte": {
                    "byte_value": 1
                },
                "char": {
                    "character": 1
                },
                "iVar2": {
                    "array_offset": 2,
                    "base_offset": 1,
                    "hex_offset": 1,
                    "index": 1,
                    "index_multiplier": 1,
                    "offset": 2,
                    "offset2": 3,
                    "offset_calc": 1,
                    "offset_multiplier": 5,
                    "offset_multiply": 1,
                    "temp": 2,
                    "temp_index": 3,
                    "temp_value": 2,
                    "temp_var": 5,
                    "variable2": 1
                },
                "param_1": {
                    "index": 28,
                    "parameter1": 1,
                    "process_id": 1,
                    "value": 1
                },
                "param_2": {
                    "address": 1,
                    "array": 1,
                    "base_address": 3,
                    "buffer": 7,
                    "data": 10,
                    "data_address": 1,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_ptr": 2,
                    "flag": 1,
                    "memory": 2,
                    "parameter2": 1
                },
                "param_3": {
                    "mode": 1,
                    "multiplier": 1,
                    "offset": 28,
                    "parameter3": 1
                },
                "uVar1": {
                    "data": 1,
                    "data_size": 2,
                    "limit": 11,
                    "max_size": 1,
                    "max_value": 9,
                    "size": 1,
                    "size_limit": 1,
                    "temp_value": 1,
                    "threshold": 1,
                    "upper_limit": 1,
                    "value": 1,
                    "variable1": 1
                }
            },
            "called": [
                "FUN_00081014"
            ],
            "calling": [],
            "code": "\nvoid update_data_and_check_conditions_0008044c(int index,int data,int offset)\n\n{\n  uint limit;\n  int temp_var;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    temp_var = index * 0xc;\n    if (((character)(&DAT_200708f1)[index] + temp_var < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte_value)(&DAT_200708f8)[((character)(&DAT_200708f1)[index] + temp_var) * 8] << 0x19) < 0\n       )) {\n      FUN_00081014((&DAT_200708f8)[(temp_var + (character)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  limit = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  temp_var = index * 0xc;\n  if (((character)(&DAT_200708f1)[index] + temp_var < (int)limit) &&\n     ((character)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((character)(&DAT_200708f1)[index] + temp_var) * 8);\n    if (-1 < (int)((uint)(byte_value)(&DAT_200708f8)[((character)(&DAT_200708f1)[index] + temp_var) * 8] << 0x19\n                  )) {\n      return;\n    }\n    FUN_00081014((&DAT_200708f8)[(temp_var + (character)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  limit = (elf32_rel_array[6].r_offset / 1000000) * 20000 >> 5;\n  if (limit <= *(int *)(data + 0x10) + 4U) {\n    limit = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = limit;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "current_name": "update_data_and_check_conditions_0008044c",
            "entrypoint": "0x0008044c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf32_rel_array",
                "FUN_0008044c": "update_data_and_check_conditions_0008044c",
                "byte": "byte_value",
                "char": "character",
                "iVar2": "temp_var",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "limit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000805a8": {
            "additional_data": {
                "DAT_200708f0": {
                    "current_value": 1,
                    "data_value": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 2,
                    "array_data": 1,
                    "array_of_offsets": 1,
                    "array_offsets": 1,
                    "elf_array": 1,
                    "elf_data_array": 1,
                    "rel_array": 4,
                    "relocation_array": 2
                },
                "FUN_000805a8": {
                    "calculate_offset": 1,
                    "copy_and_shift_offset": 1,
                    "extract_offset": 1,
                    "extract_rel_offset": 1,
                    "extract_relocation_info": 1,
                    "extract_relocation_offset": 1,
                    "extract_value_and_update_array": 1,
                    "extracted_byte": 1,
                    "increment_and_store_value": 1,
                    "process_data": 4,
                    "store_rel_offset": 1,
                    "update_array_value": 1,
                    "update_counter_value": 1,
                    "update_data": 6,
                    "update_data_and_calculate_value": 1,
                    "update_data_and_store_offset": 1,
                    "update_param_and_offset": 1,
                    "update_parameter": 3,
                    "update_relocated_offset": 1,
                    "update_value": 1,
                    "write_to_memory": 1
                },
                "cVar1": {
                    "current_value": 2,
                    "incremented_value": 4,
                    "new_char": 1,
                    "new_count": 1,
                    "new_counter_value": 1,
                    "new_data": 1,
                    "new_value": 2,
                    "next_byte": 1,
                    "next_value": 11,
                    "temp_char": 1,
                    "updated_data": 2,
                    "updated_input": 1,
                    "updated_value": 2
                },
                "param_1": {
                    "array": 1,
                    "buffer": 2,
                    "data": 1,
                    "data_pointer": 2,
                    "data_to_update": 1,
                    "output": 9,
                    "output_buffer": 7,
                    "output_data": 4,
                    "result": 1,
                    "result_buffer": 1
                },
                "r_offset": {
                    "offset": 5
                },
                "uVar2": {
                    "count": 1,
                    "counter": 17,
                    "current_index": 2,
                    "current_value": 2,
                    "data_count": 1,
                    "data_index": 1,
                    "data_value": 2,
                    "index": 1,
                    "input": 1,
                    "original_value": 1,
                    "value": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_data_and_store_offset_000805a8(byte *output)\n\n{\n  char next_value;\n  uint counter;\n  \n  counter = (uint)DAT_200708f0;\n  if (counter < 0x3c) {\n    next_value = DAT_200708f0 + 1;\n    *output = DAT_200708f0;\n    DAT_200708f0 = next_value;\n    *(uint *)(&DAT_200708fc + counter * 8) =\n         (rel_array[6].offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *output = 0xff;\n  return;\n}\n\n",
            "current_name": "update_data_and_store_offset_000805a8",
            "entrypoint": "0x000805a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_000805a8": "update_data_and_store_offset_000805a8",
                "cVar1": "next_value",
                "param_1": "output",
                "r_offset": "offset",
                "uVar2": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000806a0": {
            "additional_data": {
                "FUN_000803fc": {
                    "another_function": 2,
                    "execute_function": 1,
                    "perform_action": 3,
                    "print_info_function": 1,
                    "print_value": 1,
                    "process_function": 1,
                    "sub_function2": 2,
                    "update_data": 1,
                    "write_value": 1
                },
                "FUN_000806a0": {
                    "convert_byte_to_value": 1,
                    "decode_and_execute": 1,
                    "decode_byte": 1,
                    "extract_byte": 1,
                    "extract_byte_from_binary": 1,
                    "process_byte": 4,
                    "process_data": 14,
                    "update_data": 1,
                    "verify_and_update_param": 1
                },
                "FUN_00080f0c": {
                    "configure_settings": 1,
                    "do_something": 1,
                    "execute_action": 1,
                    "init_function": 1,
                    "initialize_data": 1,
                    "perform_action_function": 1,
                    "perform_operation": 2,
                    "set_value": 1,
                    "some_function": 2,
                    "sub_function1": 2
                },
                "LAB_00080660": {
                    "end_of_function": 1
                },
                "bVar1": {
                    "bit_value": 1,
                    "byte_value": 11,
                    "flag": 2,
                    "mask": 1,
                    "masked_value": 1,
                    "modified_byte": 1,
                    "result": 6,
                    "temp": 1,
                    "temp_byte": 4,
                    "value": 1
                },
                "iVar5": {
                    "count": 1,
                    "counter": 22,
                    "counter1": 1,
                    "index": 3,
                    "iterator": 1,
                    "loop_count": 1
                },
                "param_1": {
                    "binary_data": 1,
                    "buffer": 1,
                    "byte_array": 2,
                    "data": 15,
                    "input": 1,
                    "input_array": 3,
                    "input_byte": 2,
                    "input_data": 3
                },
                "param_2": {
                    "flags": 1,
                    "input_size": 1,
                    "length": 1,
                    "param": 10,
                    "param2": 1,
                    "param_2": 2,
                    "param_value": 1,
                    "value": 13
                },
                "uVar2": {
                    "addr1": 1,
                    "address": 12,
                    "base_address": 9,
                    "constant1": 4,
                    "output_value": 1,
                    "register1": 1,
                    "var1": 1
                },
                "uVar3": {
                    "array_index": 1,
                    "div_result": 3,
                    "division_result": 2,
                    "divisor": 1,
                    "group_num": 1,
                    "index": 19,
                    "register2": 1,
                    "var2": 1
                },
                "uVar4": {
                    "addr2": 1,
                    "constant": 2,
                    "constant2": 4,
                    "count": 4,
                    "length": 1,
                    "offset": 2,
                    "param": 2,
                    "param4": 1,
                    "register3": 1,
                    "size": 3,
                    "value": 5,
                    "value2": 1,
                    "value_2": 1,
                    "var3": 1
                },
                "uVar6": {
                    "array_value": 1,
                    "byte_param": 1,
                    "byte_val": 2,
                    "byte_value": 2,
                    "byte_value2": 2,
                    "converted_byte": 1,
                    "data": 1,
                    "data_value": 9,
                    "int_value": 1,
                    "temp": 4,
                    "temp_var1": 1,
                    "value": 3,
                    "value2": 1
                }
            },
            "called": [
                "FUN_00080f0c",
                "FUN_000803fc"
            ],
            "calling": [
                "FUN_000801e0"
            ],
            "code": "\nbyte process_data_000806a0(byte *data,undefined4 value)\n\n{\n  byte byte_value;\n  undefined4 address;\n  uint index;\n  undefined4 value;\n  int counter;\n  uint data_value;\n  \n  if (0x3b < *data) goto end_of_function;\n  FUN_00080f0c(value,1,0x220,*data,0x960);\n  data_value = (uint)*data;\n  byte_value = (&DAT_200708f8)[data_value * 8];\n  data[2] = 0;\n  index = data_value / 0xc;\n  (&DAT_200708f8)[data_value * 8] = byte_value & 0xc0 | (byte)value & 0x3f;\n  data[1] = 0;\n  counter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(counter + index * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    counter = counter + 1;\n  } while (counter != 0xc);\n  if (index == 0) {\n    address = 0x40084000;\n    value = 0x1e;\nLAB_0008064c:\n    FUN_000803fc(address,index,value,value);\n  }\n  else {\n    if (index == 1) {\n      address = 0x40084000;\n      value = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (index == 2) {\n      address = 0x40084000;\n      value = 0x20;\n      goto LAB_0008064c;\n    }\n    if (index == 3) {\n      address = 0x40080000;\n      index = 2;\n      value = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (index == 4) {\n      address = 0x40080000;\n      index = 0;\n      value = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*data * 8] = (&DAT_200708f8)[(uint)*data * 8] | 0x40;\nend_of_function:\n  return *data;\n}\n\n",
            "current_name": "process_data_000806a0",
            "entrypoint": "0x000806a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000806a0": "process_data_000806a0",
                "LAB_00080660": "end_of_function",
                "bVar1": "byte_value",
                "iVar5": "counter",
                "param_1": "data",
                "param_2": "value",
                "uVar2": "address",
                "uVar3": "index",
                "uVar4": "value",
                "uVar6": "data_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000806f8": {
            "additional_data": {
                "DAT_20070000": {
                    "array_data": 1,
                    "elf32_rel_array": 1
                },
                "DAT_200708fc": {
                    "offset_array": 2,
                    "output_data": 1,
                    "pointer": 1,
                    "result_array": 1,
                    "some_table": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_array": 1
                },
                "FUN_000806f8": {
                    "calculate_relocation": 1,
                    "handle_function": 1,
                    "process_binary_data": 1,
                    "process_binary_function": 1,
                    "process_data": 21,
                    "process_function": 1,
                    "update_data": 1,
                    "update_pointer": 1
                },
                "FUN_0008145c": {
                    "calculate_adjusted_length": 1,
                    "calculate_offset": 3,
                    "calculate_value": 13,
                    "compute_value": 1,
                    "process_data": 1,
                    "sub_function": 1
                },
                "PTR_ARRAY_20070000": {
                    "array": 1
                },
                "SBORROW4": {
                    "is_subtraction_overflow": 1
                },
                "param_1": {
                    "a": 3,
                    "buffer": 1,
                    "byte_array": 2,
                    "clamped_size": 1,
                    "data": 14,
                    "data_buffer": 3,
                    "input1": 1,
                    "input_data": 2,
                    "val1": 3,
                    "value1": 1
                },
                "param_2": {
                    "adjusted_size": 1,
                    "b": 3,
                    "buffer_size": 2,
                    "byte_array_length": 1,
                    "data_length": 1,
                    "data_size": 2,
                    "input2": 1,
                    "input_length": 1,
                    "input_size": 1,
                    "length": 9,
                    "size": 4,
                    "unused_param": 1,
                    "val2": 3,
                    "value2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "c": 3,
                    "input3": 1,
                    "unused_param": 1,
                    "val3": 3,
                    "value3": 1
                },
                "param_4": {
                    "arg4": 1,
                    "d": 3,
                    "input4": 1,
                    "offset1": 2,
                    "param_4": 1,
                    "val4": 3,
                    "value4": 1
                },
                "param_5": {
                    "arg5": 1,
                    "e": 3,
                    "input5": 1,
                    "offset2": 2,
                    "param_5": 1,
                    "val5": 3,
                    "value5": 1
                },
                "uVar1": {
                    "adjusted_length": 5,
                    "adjusted_size": 3,
                    "clamped_length": 3,
                    "clamped_size": 2,
                    "min_length": 1,
                    "min_size": 1,
                    "modified_length": 1,
                    "modified_size": 1,
                    "new_size": 1,
                    "result": 2,
                    "size": 1
                }
            },
            "called": [
                "FUN_0008145c"
            ],
            "calling": [
                "FUN_00080164",
                "FUN_00080250"
            ],
            "code": "\nvoid process_binary_data_000806f8(byte *data,uint length)\n\n{\n  uint adjusted_length;\n  \n  if ((int)length < 0x220) {\n    adjusted_length = length;\n    if (0xb3 < (int)length) {\n      adjusted_length = 0xb4;\n    }\n    length = FUN_0008145c(adjusted_length & ~((int)adjusted_length >> 0x1f),0,0xb4,(0x88 - (char)data[1]) * 4,\n                           (600 - (char)data[2]) * 4,length);\n  }\n  if (*data < 0x3c) {\n    adjusted_length = (0x88 - (char)data[1]) * 4;\n    if (((int)(length + (0x88 - (char)data[1]) * -4) < 0 == is_subtraction_overflow(length,adjusted_length)) &&\n       (adjusted_length = (600 - (char)data[2]) * 4, (int)length <= (int)adjusted_length)) {\n      adjusted_length = length;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*data * 8) =\n         (elf_array[6].r_offset / 1000000) * (adjusted_length - 2) >> 5;\n  }\n  return;\n}\n\n",
            "current_name": "process_binary_data_000806f8",
            "entrypoint": "0x000806f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf_array",
                "FUN_000806f8": "process_binary_data_000806f8",
                "SBORROW4": "is_subtraction_overflow",
                "param_1": "data",
                "param_2": "length",
                "uVar1": "adjusted_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008073a": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008073a",
            "entrypoint": "0x0008073a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080748": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080748",
            "entrypoint": "0x00080748",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008074a": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008074a",
            "entrypoint": "0x0008074a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008074c": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008074c",
            "entrypoint": "0x0008074c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080774": {
            "additional_data": {
                "FUN_00080774": {
                    "initialize_components": 2,
                    "initialize_function": 1,
                    "initialize_hardware": 1,
                    "initialize_system": 27
                },
                "FUN_00080a30": {
                    "configure_component": 2,
                    "configure_hardware": 1,
                    "configure_memory": 2,
                    "configure_module": 1,
                    "configure_peripheral": 14,
                    "initialize_memory": 1,
                    "perform_action": 1,
                    "set_memory": 4,
                    "set_memory_region": 2,
                    "set_memory_value": 1,
                    "set_memory_values": 1,
                    "set_register_value": 1
                },
                "FUN_00080aa8": {
                    "configure": 1,
                    "configure_device": 2,
                    "configure_interrupt": 2,
                    "configure_system": 1,
                    "enable_feature": 1,
                    "enable_interrupt": 1,
                    "enable_interrupts": 1,
                    "execute_routine": 1,
                    "execute_task": 1,
                    "handle_interrupt": 1,
                    "reverse_something": 1,
                    "set_flag": 2,
                    "set_flags": 1,
                    "set_interrupt_mask": 1,
                    "set_interrupt_priority": 1,
                    "set_mode": 6,
                    "set_power_mode": 1,
                    "set_system_mode": 1,
                    "set_threshold": 1,
                    "set_timer": 2,
                    "set_watchdog_timeout": 1,
                    "sleep": 1
                },
                "FUN_00080b98": {
                    "configure_modules": 1,
                    "configure_system": 1,
                    "initialize": 1,
                    "initialize_components": 2,
                    "initialize_data": 1,
                    "initialize_elf": 2,
                    "initialize_hardware": 6,
                    "initialize_interrupts": 1,
                    "initialize_miscellaneous": 1,
                    "initialize_modules": 1,
                    "initialize_peripheral": 2,
                    "initialize_registers": 2,
                    "initialize_subsystem": 2,
                    "initialize_subsystems": 2,
                    "perform_initial_setup": 1,
                    "perform_initialization": 1,
                    "perform_setup": 1,
                    "set_initial_values": 1,
                    "setup_environment": 1,
                    "setup_hardware": 1
                },
                "FUN_00080c98": {
                    "apply_configuration": 1,
                    "calculate_memory": 1,
                    "configure_device": 2,
                    "configure_memory": 5,
                    "configure_memory_region": 1,
                    "configure_module": 2,
                    "configure_subsystem": 1,
                    "initialize_function": 1,
                    "load_data": 2,
                    "perform_calculation": 1,
                    "perform_operation": 3,
                    "process_data": 4,
                    "process_elf": 1,
                    "program_memory": 1,
                    "relocate_function": 1,
                    "run_algorithm": 1,
                    "set_configuration": 1,
                    "set_memory_range": 1,
                    "set_memory_region": 1
                },
                "FUN_00080d30": {
                    "clear_data": 1,
                    "clear_memory": 9,
                    "clear_memory_region": 2,
                    "clear_registers": 1,
                    "disable_interrupts": 1,
                    "disable_timers": 1,
                    "initialize_memory": 1,
                    "perform_memory_operations": 1,
                    "read_memory": 1,
                    "reset_component": 2,
                    "reset_hardware": 1,
                    "reset_memory": 2,
                    "reset_peripheral": 7,
                    "reset_registers": 1
                },
                "FUN_00080d3e": {
                    "configure_dma": 1,
                    "configure_memory": 2,
                    "copy_data": 2,
                    "copy_data_to_memory": 1,
                    "copy_memory": 9,
                    "copy_memory_region": 3,
                    "enable_memory_protection": 1,
                    "enable_timers": 1,
                    "fill_memory": 1,
                    "initialize_memory": 6,
                    "load_component": 1,
                    "perform_operation": 1,
                    "reset_and_configure_peripheral": 1,
                    "write_memory": 1
                },
                "FUN_00080d62": {
                    "clean_up": 1,
                    "cleanup": 2,
                    "cleanup_memory": 1,
                    "cleanup_resources": 1,
                    "cleanup_subsystem": 1,
                    "cleanup_system": 1,
                    "clear_memory": 2,
                    "disable_interrupt": 1,
                    "disable_peripheral": 1,
                    "enable_device": 1,
                    "enable_interrupt": 2,
                    "enable_interrupts": 1,
                    "end_timers": 1,
                    "finalize_configuration": 1,
                    "finalize_memory": 2,
                    "finalize_peripheral": 1,
                    "free_memory": 1,
                    "release_device": 1,
                    "release_resources": 2,
                    "reset_configuration": 1,
                    "reset_device": 1,
                    "reset_flag": 1,
                    "reset_memory": 2,
                    "reset_peripheral": 2
                },
                "FUN_00080d6a": {
                    "clear_memory": 1,
                    "configure_peripheral": 1,
                    "configure_system_clock": 1,
                    "disable_interrupt": 3,
                    "disable_interrupts": 8,
                    "disable_memory": 2,
                    "enable_interrupt": 2,
                    "finalize_operation": 1,
                    "reset_peripheral": 1,
                    "set_flag": 1,
                    "set_interrupt_mask": 1,
                    "set_interrupt_priority": 1,
                    "set_memory": 1,
                    "set_register": 1,
                    "set_register_value": 3,
                    "set_reset_flag": 1,
                    "set_subsystem_state": 1,
                    "start_system": 1
                },
                "FUN_00081014": {
                    "configure_component": 1,
                    "configure_module": 1,
                    "configure_modules": 1,
                    "configure_settings": 1,
                    "do_something": 1,
                    "execute_function": 1,
                    "initialize_component": 1,
                    "initialize_module": 2,
                    "initialize_timer": 1,
                    "initialize_variable": 1,
                    "loop_actions": 1,
                    "perform_action": 2,
                    "perform_operation": 8,
                    "process_data": 7,
                    "process_item": 1,
                    "process_value": 1
                },
                "FUN_00081778": {
                    "configure_interrupts": 1,
                    "configure_system": 7,
                    "execute_operations": 1,
                    "initialize_components": 2,
                    "initialize_data": 1,
                    "initialize_devices": 1,
                    "initialize_interrupts": 2,
                    "initialize_io": 1,
                    "initialize_items": 1,
                    "initialize_loop": 2,
                    "initialize_modules": 2,
                    "initialize_peripheral": 1,
                    "initialize_registers": 1,
                    "initialize_system": 1,
                    "initialize_timer": 1,
                    "initialize_uart": 1,
                    "perform_initialization": 1,
                    "set_up_environment": 1,
                    "setup": 1,
                    "setup_system": 2
                }
            },
            "called": [
                "FUN_00080a30",
                "FUN_00080d30",
                "FUN_00080d3e",
                "FUN_00080b98",
                "FUN_00080d6a",
                "FUN_00081014",
                "FUN_00080c98",
                "FUN_00081778",
                "FUN_00080aa8",
                "FUN_00080d62"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\n\n\nvoid initialize_system_00080774(void)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  FUN_00080b98();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081778();\n  iVar1 = 0;\n  do {\n    iVar2 = iVar1 + 1;\n    FUN_00081014(iVar1,0);\n    iVar1 = iVar2;\n  } while (iVar2 != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080a30(0x400e0e00,1,0x300,0);\n  FUN_00081014(0,1);\n  FUN_00080a30(0x400e0e00,1,0xc00,0);\n  FUN_00080a30(0x400e0e00,1,0x3000,0);\n  FUN_00080a30(0x400e1400,2,0x30,0);\n  FUN_00080a30(0x400e1000,1,0xc00,0);\n  FUN_00080a30(0x400e0e00,1,3,0);\n  FUN_00080a30(0x400e1000,1,0xc000,0);\n  FUN_00080aa8(0x25);\n  FUN_00080c98(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00080d3e(0x400c0000,0,0x300000,1);\n  FUN_00080d30(0x400c0000,0,0);\n  FUN_00080d6a(0x400c0000,0xffffffff);\n  FUN_00080d62(0x400c0000);\n  return;\n}\n\n",
            "current_name": "initialize_system_00080774",
            "entrypoint": "0x00080774",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080774": "initialize_system_00080774"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008089c": {
            "additional_data": {
                "0x11": {
                    "config3": 1
                },
                "0x12": {
                    "config4": 1
                },
                "0x14": {
                    "config5": 1
                },
                "0x40098000": {
                    "config2": 1
                },
                "0x4009c000": {
                    "config7": 1
                },
                "0x400e0800": {
                    "setting2": 1
                },
                "8": {
                    "setting3": 1
                },
                "DAT_20070ad8": {
                    "component6": 1,
                    "data7": 1,
                    "data9": 1
                },
                "DAT_20070b60": {
                    "component2": 1,
                    "data2": 1,
                    "data5": 1
                },
                "DAT_20070be8": {
                    "data3": 2,
                    "setting1": 1
                },
                "DAT_20070c0c": {
                    "component1": 1,
                    "data1": 1,
                    "data4": 1
                },
                "DAT_20070c94": {
                    "config1": 1,
                    "data12": 1,
                    "memory1": 1
                },
                "DAT_20070cbc": {
                    "config6": 1,
                    "data13": 1,
                    "memory2": 1
                },
                "DAT_20070ce4": {
                    "config8": 1,
                    "data14": 1,
                    "memory3": 1
                },
                "DAT_20070d0c": {
                    "component7": 1,
                    "data10": 1,
                    "data8": 1
                },
                "DAT_20070d94": {
                    "component8": 1,
                    "data11": 1,
                    "data9": 1
                },
                "DAT_20070e6c": {
                    "component3": 1,
                    "data4": 1,
                    "data6": 1
                },
                "DAT_20070ef4": {
                    "component4": 1,
                    "data5": 1,
                    "data7": 1
                },
                "DAT_20070f7c": {
                    "component5": 1,
                    "data6": 1,
                    "data8": 1
                },
                "FUN_0008089c": {
                    "initialize_components": 14,
                    "initialize_data_structures": 5,
                    "initialize_devices": 5,
                    "initialize_function": 1,
                    "initialize_hardware": 1,
                    "initialize_hardware_components": 1,
                    "initialize_hardware_devices": 1,
                    "initialize_hardware_subsystem": 1,
                    "initialize_modules": 1,
                    "initialize_system": 1
                },
                "FUN_000811b0": {
                    "call_initialization_function": 2,
                    "enable_device": 1,
                    "enable_feature": 1,
                    "enable_module": 1,
                    "init_data": 1,
                    "init_data_structure": 1,
                    "initialize_component": 5,
                    "initialize_data": 6,
                    "initialize_data_block": 1,
                    "initialize_data_structure": 1,
                    "initialize_device": 4,
                    "initialize_global_variables": 1,
                    "initialize_memory": 2,
                    "load_address": 1,
                    "perform_initialization": 1,
                    "reset_data": 1,
                    "reset_peripheral": 1
                },
                "FUN_000811b0_2": {
                    "initialize_memory2": 1
                },
                "FUN_00081348": {
                    "configure_component": 3,
                    "configure_component_with_parameters": 1,
                    "configure_components": 1,
                    "configure_data": 4,
                    "configure_data_structure": 1,
                    "configure_device": 5,
                    "configure_hardware": 2,
                    "configure_module": 1,
                    "configure_params": 1,
                    "initialize_component": 1,
                    "initialize_configuration": 1,
                    "initialize_connections": 1,
                    "initialize_data": 1,
                    "initialize_data_structures_with_params": 1,
                    "initialize_resources": 1,
                    "initialize_settings": 1,
                    "initialize_system": 1,
                    "load_data": 1,
                    "process_data": 1,
                    "set_component_properties": 1,
                    "set_device_parameters": 1
                },
                "FUN_00081438": {
                    "allocate_memory": 2,
                    "configure_component": 2,
                    "configure_component_with_data": 1,
                    "configure_component_with_parameters": 1,
                    "configure_components": 2,
                    "configure_data": 1,
                    "configure_device": 1,
                    "configure_memory": 1,
                    "configure_peripheral": 1,
                    "configure_sub_component": 1,
                    "initialize_buffer": 1,
                    "initialize_buffers": 1,
                    "initialize_components_params": 1,
                    "initialize_data": 1,
                    "initialize_data_block": 1,
                    "initialize_data_structures_with_more_params": 1,
                    "initialize_device_descriptor": 1,
                    "initialize_memory": 3,
                    "initialize_module": 2,
                    "initialize_peripheral": 1,
                    "initialize_resources": 1,
                    "load_data_into_memory": 1,
                    "set_component_data": 1,
                    "set_configuration": 1,
                    "set_device_config": 1
                },
                "param_1": {
                    "arg1": 8,
                    "component": 2,
                    "component1": 2,
                    "data_block": 1,
                    "device_config": 1,
                    "device_configuration": 1,
                    "module": 1,
                    "param1": 2,
                    "param_1": 1,
                    "param_array1": 1,
                    "parameter1": 1,
                    "un_used_param1": 1,
                    "unused_param1": 4,
                    "val1": 1
                },
                "param_2": {
                    "addr": 1,
                    "address": 1,
                    "address2": 1,
                    "arg2": 8,
                    "base_address": 1,
                    "component2": 2,
                    "config_value": 1,
                    "param2": 2,
                    "param_2": 1,
                    "param_array2": 1,
                    "parameter2": 1,
                    "peripheral_base": 1,
                    "un_used_param2": 1,
                    "unused_param2": 4,
                    "val2": 1
                },
                "param_3": {
                    "arg3": 8,
                    "component3": 2,
                    "config_value2": 1,
                    "device_id": 1,
                    "param3": 3,
                    "param_3": 1,
                    "param_array3": 1,
                    "parameter3": 1,
                    "register_count": 1,
                    "register_value": 1,
                    "size1": 1,
                    "size_1": 1,
                    "un_used_param3": 1,
                    "unused_param3": 3,
                    "val3": 1
                },
                "param_4": {
                    "arg4": 1,
                    "config_value3": 1,
                    "param4": 4,
                    "param_array4": 1,
                    "register_count": 1,
                    "register_size": 1,
                    "size2": 1,
                    "size_2": 1
                },
                "param_5": {
                    "memory_block_1": 1
                },
                "param_6": {
                    "memory_block_2": 1
                }
            },
            "called": [
                "FUN_00081438",
                "FUN_000811b0",
                "FUN_00081348"
            ],
            "calling": [],
            "code": "\nvoid initialize_hardware_components_0008089c(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  FUN_000811b0(&DAT_20070c0c);\n  FUN_000811b0(&DAT_20070b60);\n  FUN_00081348(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,arg3);\n  FUN_000811b0(&DAT_20070e6c);\n  FUN_000811b0(&DAT_20070ef4);\n  FUN_000811b0(&DAT_20070f7c);\n  FUN_000811b0(&DAT_20070ad8);\n  FUN_000811b0(&DAT_20070d0c);\n  FUN_000811b0(&DAT_20070d94);\n  FUN_00081438(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  FUN_00081438(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  FUN_00081438(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "current_name": "initialize_hardware_components_0008089c",
            "entrypoint": "0x0008089c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008089c": "initialize_hardware_components_0008089c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080970": {
            "additional_data": {
                "FUNC_0008073a": {
                    "execute_action2": 1,
                    "execute_function1": 4,
                    "execute_function_1": 1,
                    "execute_function_3": 1,
                    "execute_function_a": 4,
                    "function_a": 1,
                    "handle_dat_20070be8": 2,
                    "handle_error_case_3": 1,
                    "handle_invalid_data1": 4,
                    "handle_missing_data": 1,
                    "perform_data_action": 1,
                    "run_function_a": 1,
                    "update_status_b": 1
                },
                "FUNC_00080748": {
                    "execute_action1": 1,
                    "execute_function2": 4,
                    "execute_function_2": 1,
                    "execute_function_4": 1,
                    "execute_function_b": 4,
                    "function_b": 1,
                    "handle_dat_20070c94": 2,
                    "handle_error_case_4": 1,
                    "handle_incomplete_data": 1,
                    "handle_invalid_data2": 4,
                    "perform_data_check": 1,
                    "run_function_b": 1,
                    "update_status_d": 1
                },
                "FUNC_0008074a": {
                    "execute_action3": 1,
                    "execute_function3": 4,
                    "execute_function_2": 1,
                    "execute_function_3": 1,
                    "execute_function_c": 4,
                    "function_c": 1,
                    "handle_corrupted_data": 1,
                    "handle_dat_20070cbc": 2,
                    "handle_data_issue": 1,
                    "handle_error_case_2": 1,
                    "handle_invalid_data3": 4,
                    "run_function_c": 1,
                    "update_status_a": 1
                },
                "FUNC_0008074c": {
                    "execute_action4": 1,
                    "execute_function4": 4,
                    "execute_function_1": 1,
                    "execute_function_4": 1,
                    "execute_function_d": 4,
                    "function_d": 1,
                    "handle_dat_20070ce4": 2,
                    "handle_data_error": 1,
                    "handle_error_case_1": 1,
                    "handle_invalid_data": 1,
                    "handle_invalid_data4": 4,
                    "run_function_d": 1,
                    "update_status_c": 1
                },
                "FUN_00080970": {
                    "check_and_call_functions": 1,
                    "check_and_execute_functions": 20,
                    "check_and_execute_sub_functions": 1,
                    "check_and_run_functions": 1,
                    "check_and_update_data": 1,
                    "check_critical_data": 1,
                    "check_data_validity": 4,
                    "check_function_validity": 1,
                    "perform_data_checks": 1
                },
                "FUN_00081248": {
                    "check_condition": 2,
                    "check_data": 9,
                    "check_data_validity": 1,
                    "check_function": 3,
                    "check_if_valid": 1,
                    "check_validity": 1,
                    "get_data_status": 1,
                    "validate_data": 3
                },
                "iVar1": {
                    "result": 15,
                    "return_code": 1,
                    "return_value": 3
                }
            },
            "called": [
                "FUN_00081248",
                "FUN_0008074c",
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00080748"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid check_and_execute_sub_functions_00080970(void)\n\n{\n  int result;\n  \n  result = FUN_00081248(&DAT_20070be8);\n  if (result != 0) {\n    FUNC_0008073a();\n  }\n  result = FUN_00081248(&DAT_20070c94);\n  if (result != 0) {\n    FUNC_00080748();\n  }\n  result = FUN_00081248(&DAT_20070cbc);\n  if (result != 0) {\n    FUNC_0008074a();\n  }\n  result = FUN_00081248(&DAT_20070ce4);\n  if (result != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_execute_sub_functions_00080970",
            "entrypoint": "0x00080970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080970": "check_and_execute_sub_functions_00080970",
                "iVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000809be": {
            "additional_data": {
                "FUN_000809be": {
                    "set_param": 1,
                    "set_parameter_value": 1,
                    "update_data": 1,
                    "update_memory_values": 1,
                    "update_param": 1,
                    "update_param1": 1,
                    "update_param_value": 1,
                    "update_param_values": 2,
                    "update_parameter": 7,
                    "update_parameter_value": 3,
                    "update_register_value": 1,
                    "update_registrations": 1,
                    "update_value": 9
                },
                "F_UNIMPROVED_000809be": {
                    "update_data": 1
                },
                "param_1": {
                    "base_addr": 2,
                    "base_address": 19,
                    "data": 1,
                    "data_address": 3,
                    "device": 1,
                    "input": 1,
                    "memory_address": 2,
                    "register": 1,
                    "register_address": 1
                },
                "param_2": {
                    "action_type": 3,
                    "command": 1,
                    "flag": 1,
                    "mode": 3,
                    "operation": 2,
                    "operation_type": 6,
                    "option": 10,
                    "param_type": 1,
                    "parameter_type": 1,
                    "selection": 1,
                    "switch_case": 1,
                    "update_type": 1
                },
                "param_3": {
                    "new_value": 23,
                    "parameter_value": 1,
                    "value": 7
                },
                "switchD_000809c4_caseD_6": {
                    "default_case": 1
                },
                "uVar1": {
                    "new_memory_value": 1,
                    "new_value": 1,
                    "result": 5,
                    "updated_value": 24
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a30"
            ],
            "code": "\nvoid update_parameter_value_000809be(int base_address,undefined4 option,uint new_value)\n\n{\n  uint updated_value;\n  \n  *(uint *)(base_address + 0x44) = new_value;\n  switch(option) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updated_value = *(uint *)(base_address + 0x70) & *(uint *)(base_address + 0x70) & ~new_value;\n    break;\n  case 2:\n    updated_value = *(uint *)(base_address + 0x70) | new_value;\n    break;\n  default:\n    goto default_case;\n  }\n  *(uint *)(base_address + 0x70) = updated_value;\ndefault_case:\n  *(uint *)(base_address + 4) = new_value;\n  return;\n}\n\n",
            "current_name": "update_parameter_value_000809be",
            "entrypoint": "0x000809be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000809be": "update_parameter_value_000809be",
                "param_1": "base_address",
                "param_2": "option",
                "param_3": "new_value",
                "switchD_000809c4_caseD_6": "default_case",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000809e4": {
            "additional_data": {
                "0x11": {
                    "first_param_index": 1,
                    "index1": 4,
                    "param_index1": 1,
                    "parameter_index1": 1
                },
                "0x18": {
                    "index3": 4,
                    "param_index3": 1,
                    "parameter_index2": 1,
                    "third_param_index": 1
                },
                "0x19": {
                    "index2": 4,
                    "param_index2": 1,
                    "parameter_index3": 1,
                    "second_param_index": 1
                },
                "0x20": {
                    "index6": 4,
                    "param_index6": 1,
                    "parameter_index6": 1,
                    "sixth_param_index": 1
                },
                "5": {
                    "index7": 4,
                    "param_index7": 1,
                    "parameter_index7": 1,
                    "seventh_param_index": 1
                },
                "8": {
                    "fourth_param_index": 1,
                    "index4": 4,
                    "param_index4": 1,
                    "parameter_index4": 1
                },
                "9": {
                    "fifth_param_index": 1,
                    "index5": 4,
                    "param_index5": 1,
                    "parameter_index5": 1
                },
                "FUN_000809e4": {
                    "assign_values": 1,
                    "assign_values_to_indices": 1,
                    "set_param_value": 1,
                    "set_param_values": 1,
                    "set_parameters": 4,
                    "set_values": 2,
                    "set_values_based_on_condition": 1,
                    "set_values_based_on_conditions": 2,
                    "set_values_based_on_flags": 2,
                    "set_values_by_flags": 1,
                    "update_data": 1,
                    "update_flags_and_values": 1,
                    "update_param_values": 1,
                    "update_parameter_value": 1,
                    "update_parameters": 8,
                    "update_params": 1,
                    "update_values": 2
                },
                "bVar1": {
                    "check_negative": 1,
                    "is_flag_negative": 1,
                    "is_flag_set": 2,
                    "is_flagged": 1,
                    "is_negative": 24,
                    "is_negative_flag": 1,
                    "is_negative_flag_set": 1
                },
                "param_1": {
                    "array": 11,
                    "data_array": 1,
                    "output": 1,
                    "output_array": 4,
                    "param_array": 1,
                    "param_list": 1,
                    "parameter_array": 4,
                    "parameters": 7,
                    "values": 1
                },
                "param_2": {
                    "input_value": 2,
                    "new_parameter": 1,
                    "new_value": 5,
                    "param_value": 1,
                    "parameter_value": 1,
                    "value": 21
                },
                "param_3": {
                    "bit_mask": 1,
                    "bitmask": 1,
                    "bitwise_value": 1,
                    "condition": 1,
                    "conditions": 1,
                    "flag": 3,
                    "flags": 22,
                    "input_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a30"
            ],
            "code": "\nvoid update_parameters_000809e4(undefined4 *array,undefined4 value,uint flags)\n\n{\n  bool is_negative;\n  \n  is_negative = (int)(flags << 0x1f) < 0;\n  array[0x11] = value;\n  if (is_negative) {\n    array[0x19] = value;\n  }\n  if (!is_negative) {\n    array[0x18] = value;\n  }\n  is_negative = (flags & 10) != 0;\n  if (is_negative) {\n    array[8] = value;\n  }\n  if (!is_negative) {\n    array[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    array[0x20] = value;\n  }\n  array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "current_name": "update_parameters_000809e4",
            "entrypoint": "0x000809e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000809e4": "update_parameters_000809e4",
                "bVar1": "is_negative",
                "param_1": "array",
                "param_2": "value",
                "param_3": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "additional_data": {
                "0x11": {
                    "index1": 1,
                    "param_index1": 1
                },
                "0x14": {
                    "index3": 1,
                    "param_index5": 1
                },
                "0x15": {
                    "index2": 1,
                    "param_index4": 1
                },
                "0x18": {
                    "param_index2": 1
                },
                "0x19": {
                    "index4": 1,
                    "param_index3": 1
                },
                "0xc": {
                    "index6": 1,
                    "param_index7": 1
                },
                "0xd": {
                    "index5": 1,
                    "param_index6": 1
                },
                "FUN_00080a0a": {
                    "assign_values": 1,
                    "assign_values_to_parameters": 1,
                    "set_param_values": 10,
                    "set_parameters": 3,
                    "set_params": 4,
                    "set_values": 1,
                    "set_values_based_on_conditions": 1,
                    "set_values_to_param": 1,
                    "update_param_values": 1,
                    "update_parameters": 4,
                    "update_params": 3,
                    "update_pointers": 1
                },
                "param_1": {
                    "array": 2,
                    "output": 2,
                    "output_array": 3,
                    "param_array": 4,
                    "parameters": 7,
                    "params": 9,
                    "params_array": 1,
                    "pointers_array": 1,
                    "values": 1
                },
                "param_2": {
                    "input_value": 2,
                    "new_param": 1,
                    "new_param_value": 1,
                    "new_parameter": 1,
                    "new_value": 8,
                    "param_value": 4,
                    "value": 14
                },
                "param_3": {
                    "check1": 1,
                    "check_param3": 1,
                    "check_value_1": 1,
                    "cond_1": 1,
                    "condition1": 5,
                    "condition1_value": 1,
                    "condition2": 1,
                    "condition3": 2,
                    "flag1": 8,
                    "flag_a": 2,
                    "is_param3_zero": 3,
                    "is_zero_1": 1,
                    "is_zero_3": 1,
                    "param3_flag": 1,
                    "value_1_flag": 1,
                    "value_a": 1
                },
                "param_4": {
                    "check2": 1,
                    "check_param4": 1,
                    "check_value_2": 1,
                    "cond_2": 1,
                    "condition1": 1,
                    "condition2": 5,
                    "condition2_value": 1,
                    "condition4": 2,
                    "flag2": 8,
                    "flag_b": 2,
                    "is_param4_zero": 3,
                    "is_zero_2": 1,
                    "is_zero_4": 1,
                    "param4_flag": 1,
                    "value_2_flag": 1,
                    "value_b": 1
                },
                "param_5": {
                    "check3": 1,
                    "check_param5": 1,
                    "check_value_3": 1,
                    "cond_3": 1,
                    "condition3": 6,
                    "condition3_value": 1,
                    "condition5": 2,
                    "flag3": 8,
                    "flag_c": 2,
                    "is_param5_zero": 3,
                    "is_zero_3": 1,
                    "is_zero_5": 1,
                    "param5_flag": 1,
                    "value_3_flag": 1,
                    "value_c": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "code": "\nvoid set_values_to_param_00080a0a(undefined4 *params,undefined4 value,int flag1,int flag2,int flag3)\n\n{\n  params[0x11] = value;\n  if (flag3 == 0) {\n    params[0x18] = value;\n  }\n  else {\n    params[0x19] = value;\n  }\n  if (flag2 == 0) {\n    params[0x15] = value;\n  }\n  else {\n    params[0x14] = value;\n  }\n  if (flag1 == 0) {\n    params[0xd] = value;\n  }\n  else {\n    params[0xc] = value;\n  }\n  params[4] = value;\n  *params = value;\n  return;\n}\n\n",
            "current_name": "set_values_to_param_00080a0a",
            "entrypoint": "0x00080a0a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a0a": "set_values_to_param_00080a0a",
                "param_1": "params",
                "param_2": "value",
                "param_3": "flag1",
                "param_4": "flag2",
                "param_5": "flag3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a30": {
            "additional_data": {
                "0x809e5": {
                    "constant": 3,
                    "constant1": 1,
                    "constant_value": 1
                },
                "FUN_000809be": {
                    "execute_action_type_1_or_2": 1,
                    "handle_option1or2": 1,
                    "handle_type1or2": 1,
                    "perform_action": 1,
                    "set_default_value": 1,
                    "set_param": 1,
                    "update_code": 1,
                    "update_data": 1,
                    "update_data1": 1,
                    "update_data_with_type": 1,
                    "update_option": 1,
                    "update_param1": 1,
                    "update_param_value": 1,
                    "update_param_values_subfunction1": 1,
                    "update_param_with_case1_or2": 1,
                    "update_param_with_type": 1,
                    "update_parameter": 1,
                    "update_specific_setting": 1,
                    "update_type": 2,
                    "update_value": 3,
                    "update_value1": 2,
                    "update_value_in_memory": 1,
                    "update_values": 1
                },
                "FUN_000809e4": {
                    "apply_special_setting": 1,
                    "case3_function": 1,
                    "do_something": 1,
                    "execute_action": 1,
                    "execute_action_type_3": 1,
                    "handle_option3": 1,
                    "handle_type": 1,
                    "handle_type3": 2,
                    "process_case3": 2,
                    "process_code3": 1,
                    "process_data_type3": 1,
                    "process_option": 1,
                    "process_param_type3": 1,
                    "process_type3": 4,
                    "process_type_three": 1,
                    "process_value": 1,
                    "update_data2": 1,
                    "update_param3": 1,
                    "update_param_values_subfunction2": 1,
                    "update_value2": 2
                },
                "FUN_00080a0a": {
                    "calculate_and_store_result": 1,
                    "case4_or5_function": 1,
                    "execute_action_type_4_or_5": 1,
                    "handle_action": 1,
                    "handle_specific_type": 1,
                    "handle_type4_and5": 1,
                    "handle_type4or5": 1,
                    "perform_action": 1,
                    "process_case4_and5": 1,
                    "process_case4_or5": 1,
                    "process_code4_and5": 1,
                    "process_option4or5": 1,
                    "process_param": 1,
                    "process_param_type4or5": 1,
                    "process_type": 1,
                    "process_type4_and5": 3,
                    "process_type4_or5": 1,
                    "process_type_four_or_five": 1,
                    "toggle_flag": 1,
                    "update_data3": 1,
                    "update_param_values_subfunction3": 1,
                    "update_setting": 1,
                    "update_value3": 2
                },
                "FUN_00080a30": {
                    "process_action": 2,
                    "process_data": 2,
                    "process_input": 1,
                    "process_param": 2,
                    "process_parameter": 1,
                    "update_data": 4,
                    "update_function_param": 1,
                    "update_param": 4,
                    "update_param_setting": 1,
                    "update_param_value": 2,
                    "update_param_values": 2,
                    "update_parameter": 5,
                    "update_parameter_value": 1,
                    "update_parameter_values": 1,
                    "update_params": 1,
                    "update_settings": 1
                },
                "PTR_000809be": {
                    "default_setter_function": 1
                },
                "PTR_000809e4": {
                    "special_case_handler_function": 1
                },
                "PTR_00080a0a": {
                    "process_case45": 1
                },
                "bVar1": {
                    "check_sign": 1,
                    "is_negative": 27,
                    "is_negative_flag": 3
                },
                "param_1": {
                    "arg1": 1,
                    "base_address": 3,
                    "data": 7,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "device": 2,
                    "device_address": 1,
                    "device_handle": 1,
                    "device_ptr": 1,
                    "function_context": 1,
                    "input_data": 2,
                    "input_data_addr": 1,
                    "input_pointer": 1,
                    "object": 3,
                    "param_pointer": 1,
                    "ptr": 1,
                    "setting_ptr": 1,
                    "settings_ptr": 1
                },
                "param_2": {
                    "action_type": 2,
                    "case_number": 1,
                    "case_type": 1,
                    "data_type": 1,
                    "input_type": 1,
                    "opcode": 1,
                    "operation_type": 1,
                    "option": 5,
                    "param_type": 3,
                    "parameter_type": 3,
                    "setting_type": 1,
                    "type": 9,
                    "value": 2
                },
                "param_3": {
                    "action_data": 1,
                    "data": 1,
                    "data_value": 1,
                    "input_value": 1,
                    "is_code5": 1,
                    "is_five": 1,
                    "new_value": 12,
                    "param_value": 2,
                    "value": 11
                },
                "param_4": {
                    "bit_field": 1,
                    "bit_flags": 2,
                    "bit_mask": 1,
                    "bitmask": 2,
                    "flag": 13,
                    "flags": 6,
                    "input_flag": 1,
                    "mask": 1,
                    "param": 1,
                    "param_flag": 2,
                    "shifted": 1
                },
                "param_5": {
                    "last_bit": 1
                }
            },
            "called": [
                "FUN_00080a0a",
                "FUN_000809e4",
                "FUN_000809be"
            ],
            "calling": [
                "FUN_00080774",
                "FUN_00080f0c"
            ],
            "code": "\nundefined4 update_function_param_00080a30(int data,int type,undefined4 new_value,uint flag)\n\n{\n  bool is_negative;\n  \n  switch(type) {\n  case 1:\n  case 2:\n    FUN_000809be(data,type,new_value);\n    is_negative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(data + 0x44) = new_value;\n    if (is_negative) {\n      *(undefined4 *)(data + 100) = new_value;\n    }\n    if (!is_negative) {\n      *(undefined4 *)(data + 0x60) = new_value;\n    }\n    break;\n  case 3:\n    FUN_000809e4(data,new_value,flag,0x809e5,data);\n    break;\n  case 4:\n  case 5:\n    FUN_00080a0a(data,new_value,type == 5,(flag << 0x1d) >> 0x1f,flag & 1,type,new_value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_function_param_00080a30",
            "entrypoint": "0x00080a30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a30": "update_function_param_00080a30",
                "bVar1": "is_negative",
                "param_1": "data",
                "param_2": "type",
                "param_3": "new_value",
                "param_4": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a94": {
            "additional_data": {
                "FUN_00080a94": {
                    "bitwise_and_check": 1,
                    "check_and_return_bitwise_result": 1,
                    "check_bitwise": 2,
                    "check_bitwise_and": 3,
                    "check_bitwise_and_condition": 1,
                    "check_bitwise_comparison": 1,
                    "check_bitwise_condition": 1,
                    "check_bitwise_conditions": 2,
                    "check_bitwise_flags": 1,
                    "check_bitwise_intersection": 1,
                    "check_bitwise_operands": 2,
                    "check_flag": 1,
                    "check_flags_match": 1,
                    "check_intersection": 6,
                    "check_permission": 1,
                    "check_permissions": 5,
                    "perform_logical_operation": 1
                },
                "param_1": {
                    "address": 4,
                    "base_address": 1,
                    "data_address": 4,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input": 1,
                    "input1": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 4,
                    "memory_address": 1,
                    "object1": 1,
                    "object_address": 3,
                    "object_ptr": 1,
                    "offset": 3,
                    "param_pointer": 1,
                    "pointer": 1,
                    "variable_ptr1": 1
                },
                "param_2": {
                    "bit_mask": 2,
                    "bitmask": 5,
                    "bits_to_check": 1,
                    "filter": 1,
                    "flag": 1,
                    "flags": 2,
                    "input": 1,
                    "input2": 1,
                    "intersection_mask": 1,
                    "mask": 6,
                    "mask_value": 1,
                    "object2": 1,
                    "permissions": 6,
                    "value": 1,
                    "variable2": 1
                },
                "uVar1": {
                    "output_flag": 1,
                    "result": 29
                }
            },
            "called": [],
            "calling": [
                "FUN_00081014"
            ],
            "code": "\nuint check_bitwise_intersection_00080a94(int data_address,uint permissions)\n\n{\n  uint result;\n  \n  result = *(uint *)(data_address + 8) & permissions;\n  if (result != 0) {\n    if ((permissions & *(uint *)(data_address + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "check_bitwise_intersection_00080a94",
            "entrypoint": "0x00080a94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a94": "check_bitwise_intersection_00080a94",
                "param_1": "data_address",
                "param_2": "permissions",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "additional_data": {
                "FUN_00080aa8": {
                    "check_and_set_bit": 13,
                    "check_and_set_bits": 1,
                    "check_and_update_bit": 4,
                    "check_and_update_bit_mask": 1,
                    "check_and_update_bitmask": 1,
                    "check_and_update_bits": 1,
                    "check_bit_and_save": 1,
                    "check_bit_and_set": 4,
                    "check_bit_and_update": 3,
                    "check_param_and_set_bitmask": 1,
                    "update_bitmask": 1
                },
                "_DAT_400e0618": {
                    "variable_set_1": 1
                },
                "_DAT_400e0708": {
                    "variable_set_2": 1
                },
                "param_1": {
                    "bit_index": 3,
                    "bit_position": 6,
                    "input": 6,
                    "input_value": 6,
                    "number": 1,
                    "param": 1,
                    "value": 8
                },
                "uVar1": {
                    "bit": 1,
                    "bit_flag": 1,
                    "bit_mask": 21,
                    "bit_value": 1,
                    "bitmask": 3,
                    "mask": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774",
                "FUN_000813dc",
                "FUN_00080f0c",
                "FUN_000803fc"
            ],
            "code": "\n\n\nundefined4 check_bit_and_set_00080aa8(uint value)\n\n{\n  uint bit_mask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bit_mask = 1 << (value & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (value - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_bit_and_set_00080aa8",
            "entrypoint": "0x00080aa8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080aa8": "check_bit_and_set_00080aa8",
                "param_1": "value",
                "uVar1": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "additional_data": {
                "FUN_00080b2c": {
                    "configure_channel": 6,
                    "configure_tc": 1,
                    "configure_tc_channel": 16,
                    "configure_timer_channel": 1,
                    "initialize_channel": 1,
                    "initialize_tc": 1,
                    "initialize_tc_channel": 3,
                    "set_channel_config": 1,
                    "update_channel_configuration": 1
                },
                "FUN_000816f8": {
                    "get_error_message": 3,
                    "report_error": 1,
                    "validate_tc_configuration": 1
                },
                "iVar1": {
                    "calculated_offset": 1,
                    "channel_offset": 4,
                    "index_offset": 3,
                    "multiplier": 2,
                    "offset": 18
                },
                "iVar2": {
                    "address": 7,
                    "calculated_index": 1,
                    "channel": 1,
                    "channel_addr": 1,
                    "channel_address": 12,
                    "channel_index": 2,
                    "channel_pointer": 1,
                    "channel_ptr": 2,
                    "pointer": 1,
                    "result": 1
                },
                "param_1": {
                    "channel_address": 1,
                    "channel_config": 1,
                    "channel_id": 1,
                    "channel_param1": 1,
                    "config": 1,
                    "config_value": 1,
                    "device_id": 1,
                    "error_param1": 1,
                    "file": 1,
                    "input_param": 2,
                    "input_value": 1,
                    "param1": 15,
                    "param_1": 2,
                    "param_a": 1,
                    "parameter1": 1
                },
                "param_2": {
                    "channel": 2,
                    "channel_id": 2,
                    "channel_index": 3,
                    "channel_num": 1,
                    "channel_param2": 1,
                    "channel_size": 3,
                    "dw_channel": 1,
                    "error_param2": 1,
                    "line": 1,
                    "num_channels": 2,
                    "param2": 11,
                    "param_b": 1,
                    "parameter2": 1,
                    "size": 1
                },
                "param_3": {
                    "channel_name": 5,
                    "channel_param3": 1,
                    "config_string": 1,
                    "error_message": 8,
                    "error_msg": 1,
                    "error_param3": 1,
                    "error_string": 4,
                    "function_name": 1,
                    "message": 3,
                    "param3": 6
                },
                "param_4": {
                    "error_message": 2,
                    "error_param4": 1
                },
                "uVar3": {
                    "combined_param": 2,
                    "combined_params": 17,
                    "combined_value": 2,
                    "concatenated_params": 1,
                    "concatenated_value": 1,
                    "modified_param": 1
                }
            },
            "called": [
                "FUN_000816f8"
            ],
            "calling": [
                "FUN_000803fc"
            ],
            "code": "\nvoid configure_tc_channel_00080b2c(undefined4 param1,uint param2,char *error_message)\n\n{\n  int offset;\n  int channel_address;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(param2,param1);\n  if (2 < param2) {\n    error_message = \"TC_Configure\";\n    combined_params = FUN_000816f8(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combined_params >> 0x20) * 0x40;\n  channel_address = (int)combined_params + offset;\n  *(undefined4 *)((int)combined_params + offset) = 2;\n  *(undefined4 *)(channel_address + 0x28) = 0xffffffff;\n  *(char **)(channel_address + 4) = error_message;\n  return;\n}\n\n",
            "current_name": "configure_tc_channel_00080b2c",
            "entrypoint": "0x00080b2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "iVar1": "offset",
                "iVar2": "channel_address",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "error_message",
                "uVar3": "combined_params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b90": {
            "additional_data": {
                "0x14": {
                    "value_offset": 1
                },
                "0x40": {
                    "offset": 1
                },
                "DAT_": {
                    "": 1
                },
                "FUN_00080b90": {
                    "set_data_in_array": 1,
                    "set_memory_value": 2,
                    "set_param_at_offset": 2,
                    "set_param_value": 10,
                    "set_parameter_value": 3,
                    "set_value_at_index": 3,
                    "store_parameter_value": 1,
                    "store_value": 1,
                    "store_value_at_offset": 2,
                    "store_value_in_array": 1,
                    "update_data_at_index": 1,
                    "update_param_value": 1,
                    "update_parameter": 2,
                    "update_value_at_index": 1
                },
                "PTR_": {
                    "": 1
                },
                "param_1": {
                    "array": 2,
                    "array_base": 3,
                    "array_base_address": 2,
                    "base_address": 20,
                    "object_address": 2,
                    "object_base": 1,
                    "object_offset": 1
                },
                "param_2": {
                    "index": 22,
                    "multiplier": 2,
                    "offset": 5,
                    "param_index": 1,
                    "param_offset": 1
                },
                "param_3": {
                    "data_to_set": 1,
                    "new_value": 9,
                    "value": 21
                }
            },
            "called": [],
            "calling": [
                "FUN_000803fc"
            ],
            "code": "\nvoid set_param_value_00080b90(int base_address,int index,undefined4 value)\n\n{\n  *(undefined4 *)(base_address + index * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_00080b90",
            "entrypoint": "0x00080b90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080b90": "set_param_value_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b98": {
            "additional_data": {
                "84000000": {
                    "new_offset": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 3,
                    "array_of_relocations": 1,
                    "array_of_values": 1,
                    "elf32_rel_array": 1,
                    "elf_array": 1,
                    "elf_rel_array": 2,
                    "elf_relocation_array": 1,
                    "rel_array": 1,
                    "relocation_array": 7,
                    "relocation_table": 3
                },
                "FUN_00080b98": {
                    "initialize_data": 3,
                    "initialize_memory": 25,
                    "initialize_registers": 1,
                    "initialize_values": 1,
                    "initialize_variables": 1
                },
                "_DAT_400e0620": {
                    "counter": 4,
                    "data": 3,
                    "data_value": 2,
                    "loop_variable1": 1,
                    "memory_address": 2,
                    "memory_location": 1,
                    "memory_offset": 1,
                    "memory_pointer": 1,
                    "memory_size": 1,
                    "offset": 2,
                    "register1": 1,
                    "shifted_value": 5,
                    "start_address": 1,
                    "status_register": 1,
                    "temp_value": 2,
                    "temp_variable1": 1,
                    "value": 1,
                    "value1": 1
                },
                "_DAT_400e0628": {
                    "another_value": 1,
                    "assigned_value": 1,
                    "constant1": 3,
                    "constant_value": 1,
                    "constant_value1": 2,
                    "control_register": 1,
                    "data1": 3,
                    "flag_value": 1,
                    "offset_value": 1,
                    "pattern1": 1,
                    "register3": 1,
                    "some_data1": 1,
                    "value": 1,
                    "value1": 1,
                    "value3": 1
                },
                "_DAT_400e0630": {
                    "another_constant_value": 1,
                    "constant2": 3,
                    "constant_value": 1,
                    "constant_value2": 2,
                    "counter": 1,
                    "data2": 3,
                    "interrupt_register": 1,
                    "loop_counter": 1,
                    "offset": 1,
                    "pattern2": 1,
                    "register4": 1,
                    "some_data2": 1,
                    "some_value": 1,
                    "value2": 1,
                    "value4": 1
                },
                "_DAT_400e0668": {
                    "compare_value": 1,
                    "comparison_value": 2,
                    "count": 1,
                    "counter": 2,
                    "end_address": 1,
                    "limit_value": 1,
                    "loop_condition": 1,
                    "loop_counter": 4,
                    "loop_variable2": 1,
                    "mask": 1,
                    "memory_value": 1,
                    "register2": 1,
                    "shift_count": 1,
                    "shift_value": 1,
                    "temp": 2,
                    "temp_value": 3,
                    "temp_var": 2,
                    "temp_variable": 1,
                    "temp_variable2": 1,
                    "temporary_value": 1,
                    "value": 1,
                    "value2": 1
                },
                "_DAT_400e0a00": {
                    "base_address1": 1,
                    "buffer_size": 1,
                    "control_register1": 1,
                    "data_size1": 1,
                    "mem_block1": 1,
                    "memory_address1": 1,
                    "memory_address_a": 1,
                    "memory_area1": 1,
                    "memory_block1": 1,
                    "memory_region1": 1,
                    "memory_segment1": 1,
                    "memory_size1": 7,
                    "register1": 1
                },
                "_DAT_400e0c00": {
                    "base_address2": 1,
                    "buffer_capacity": 1,
                    "control_register2": 1,
                    "data_size2": 1,
                    "mem_block2": 1,
                    "memory_address2": 1,
                    "memory_address_b": 1,
                    "memory_area2": 1,
                    "memory_block2": 1,
                    "memory_region2": 1,
                    "memory_segment2": 1,
                    "memory_size2": 7,
                    "register2": 1
                },
                "r_offset": {
                    "offset": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\n\n\nvoid initialize_memory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocation_array[6].offset = 84000000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_00080b98",
            "entrypoint": "0x00080b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00080b98": "initialize_memory_00080b98",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080c98": {
            "additional_data": {
                "FUN_00080c98": {
                    "assign_values": 1,
                    "calculate_function": 1,
                    "calculate_parameters": 1,
                    "calculate_threshold": 19,
                    "calculate_threshold_value": 1,
                    "calculate_value": 1,
                    "decode_param_values": 1,
                    "find_best_config": 1,
                    "find_matching_value": 1,
                    "find_threshold": 2,
                    "initialize_params": 1,
                    "update_configuration": 1
                },
                "local_58": {
                    "configs": 1,
                    "constants_array": 1,
                    "lookup_table": 1,
                    "threshold_array": 4,
                    "threshold_list": 1,
                    "threshold_table": 3,
                    "threshold_values": 8,
                    "thresholds": 12
                },
                "num_iterations": {
                    "iterations": 1
                },
                "output": {
                    "result": 1
                },
                "param_1": {
                    "config": 1,
                    "config_ptr": 1,
                    "output": 5,
                    "output_array": 7,
                    "output_buffer": 1,
                    "output_data": 1,
                    "output_param": 1,
                    "param_array": 1,
                    "result": 4,
                    "threshold": 8,
                    "threshold_value_ptr": 1
                },
                "param_2": {
                    "data_size": 1,
                    "dividend": 1,
                    "input_size": 10,
                    "input_value": 3,
                    "input_value_1": 1,
                    "num_values": 1,
                    "size": 3,
                    "total_bytes": 2,
                    "total_count": 1,
                    "total_size": 6,
                    "total_time": 1,
                    "value": 1
                },
                "param_3": {
                    "block_size": 4,
                    "constant1": 1,
                    "division_factor": 1,
                    "divisor": 5,
                    "element_size": 4,
                    "factor": 1,
                    "factor1": 2,
                    "factor_a": 1,
                    "individual_count": 1,
                    "input_value_2": 1,
                    "min_bytes_per_measurement": 1,
                    "min_size": 1,
                    "multiplier": 4,
                    "num_iterations": 1,
                    "threshold_factor": 1,
                    "threshold_multiplier": 1,
                    "value1": 1
                },
                "param_4": {
                    "constant2": 1,
                    "divisor": 2,
                    "duration": 1,
                    "factor2": 2,
                    "factor_b": 1,
                    "input_value_3": 1,
                    "multiplication_factor": 1,
                    "multiplier": 8,
                    "precision": 1,
                    "scaling_factor": 2,
                    "threshold": 4,
                    "threshold_factor": 1,
                    "threshold_multiplier": 2,
                    "time": 2,
                    "time_per_measurement": 1,
                    "value2": 1
                },
                "threshold_multiplier": {
                    "multiplier": 1
                },
                "total_time": {
                    "total_execution_time": 1
                },
                "uVar1": {
                    "blocks": 1,
                    "dividend": 1,
                    "division_result": 1,
                    "divisor": 2,
                    "num_blocks": 3,
                    "num_configs": 1,
                    "num_elements": 4,
                    "num_measurements": 1,
                    "quotient": 14,
                    "threshold": 1,
                    "threshold_index": 1
                },
                "uVar2": {
                    "i": 4,
                    "index": 25,
                    "loop_index": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nundefined4 calculate_threshold_value_00080c98(undefined4 *threshold,uint input_size,int divisor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *threshold = 1;\n  threshold[1] = 0;\n  threshold[0x48] = 0x202;\n  threshold[0x41] = 0;\n  threshold[0x45] = 0;\n  quotient = input_size / (uint)(divisor * 2);\n  if (input_size == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_size / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      threshold[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | threshold[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_threshold_value_00080c98",
            "entrypoint": "0x00080c98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080c98": "calculate_threshold_value_00080c98",
                "local_58": "thresholds",
                "param_1": "threshold",
                "param_2": "input_size",
                "param_3": "divisor",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d30": {
            "additional_data": {
                "DAT_": {
                    "": 1,
                    "dat_variable": 1
                },
                "FUN_00080d30": {
                    "set_bit_in_register": 2,
                    "set_bit_mask_in_memory": 1,
                    "set_bitmask": 1,
                    "set_flag": 1,
                    "set_param_bits": 1,
                    "update_flag": 1,
                    "update_flag_in_memory": 1,
                    "update_flagged_bit": 1,
                    "update_flags": 11,
                    "update_param": 2,
                    "update_parameter": 3,
                    "update_parameter_flags": 1,
                    "update_parameter_value": 1,
                    "update_parameters": 1,
                    "update_params": 2,
                    "update_register": 1
                },
                "PTR_": {
                    "": 1,
                    "ptr_variable": 1
                },
                "param_1": {
                    "address": 3,
                    "base_address": 13,
                    "data": 2,
                    "data_address": 4,
                    "data_block_address": 1,
                    "flag_address": 1,
                    "flags_address": 1,
                    "memory_address": 1,
                    "memory_offset": 1,
                    "param_base": 1,
                    "register_address": 3
                },
                "param_2": {
                    "bit_value": 1,
                    "bit_value_to_set": 1,
                    "bitmask": 1,
                    "data": 1,
                    "flag_value": 3,
                    "flags_value": 1,
                    "input1": 1,
                    "input_value": 1,
                    "new_flags": 1,
                    "new_value": 6,
                    "param_value": 1,
                    "value": 8,
                    "value1": 2,
                    "value_to_add": 1,
                    "value_to_set": 2
                },
                "param_3": {
                    "bit": 1,
                    "bit_flag": 2,
                    "bit_mask": 6,
                    "bit_position": 1,
                    "bit_to_set": 3,
                    "bit_value": 4,
                    "flag": 7,
                    "flag_mask": 1,
                    "flag_value": 3,
                    "input2": 1,
                    "value2": 2
                },
                "var_1": {
                    "current_flags": 1
                },
                "var_2": {
                    "modified_flags": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid update_parameter_flags_00080d30(int base_address,uint value,uint flag)\n\n{\n  *(uint *)(base_address + 4) = value | *(uint *)(base_address + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "current_name": "update_parameter_flags_00080d30",
            "entrypoint": "0x00080d30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d30": "update_parameter_flags_00080d30",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "additional_data": {
                "DAT_": {
                    "dat": 1
                },
                "FUN_00080d3e": {
                    "combine_flags": 1,
                    "combine_parameters": 1,
                    "set_bits_in_memory_address": 1,
                    "set_flags": 3,
                    "update_configuration": 3,
                    "update_control_flags": 1,
                    "update_control_registers": 1,
                    "update_data": 4,
                    "update_flags": 1,
                    "update_memory": 1,
                    "update_parameter": 2,
                    "update_parameter_value": 1,
                    "update_parameter_values": 1,
                    "update_parameters": 2,
                    "update_register": 2,
                    "update_register_bits": 1,
                    "update_register_values": 4
                },
                "PTR_": {
                    "ptr": 1
                },
                "param_1": {
                    "address": 4,
                    "address_pointer": 1,
                    "base_address": 8,
                    "config_address": 1,
                    "config_pointer": 1,
                    "config_ptr": 1,
                    "control_flags_ptr": 1,
                    "data": 1,
                    "data_address": 2,
                    "data_ptr": 2,
                    "memory_address": 2,
                    "parameter_address": 1,
                    "register_address": 6
                },
                "param_2": {
                    "bit_mask": 2,
                    "bit_values": 1,
                    "bitmask_value": 1,
                    "config_value": 1,
                    "data": 1,
                    "data1": 1,
                    "flag1": 1,
                    "flag_value_1": 1,
                    "input_data": 1,
                    "input_param_a": 1,
                    "input_value": 1,
                    "input_value1": 1,
                    "mask_value": 1,
                    "new_bits": 1,
                    "new_data": 1,
                    "option1": 1,
                    "param2": 1,
                    "val1": 1,
                    "value": 3,
                    "value1": 8,
                    "value_to_set": 1
                },
                "param_3": {
                    "bit_value": 1,
                    "control_flags": 1,
                    "current_value": 2,
                    "data2": 1,
                    "existing_bits": 1,
                    "existing_data": 1,
                    "flag2": 1,
                    "flag_value_2": 1,
                    "input_param_b": 1,
                    "input_value2": 1,
                    "mask": 1,
                    "mask1": 3,
                    "option2": 1,
                    "param3": 1,
                    "prev_config_value": 1,
                    "previous_value": 1,
                    "register_mask": 1,
                    "val2": 1,
                    "value1": 1,
                    "value2": 8,
                    "value_to_combine": 1
                },
                "param_4": {
                    "additional_bits": 1,
                    "additional_config_data": 1,
                    "bit_mask": 2,
                    "data3": 1,
                    "flag": 1,
                    "flag3": 1,
                    "flag_value_3": 1,
                    "flags": 2,
                    "input_param_c": 1,
                    "input_value3": 1,
                    "mask": 1,
                    "mask2": 3,
                    "option3": 1,
                    "param4": 1,
                    "shift_value": 1,
                    "shifted_value": 1,
                    "special_flags": 1,
                    "val3": 1,
                    "value2": 1,
                    "value3": 8
                },
                "param_5": {
                    "shift": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid update_register_values_00080d3e(int base_address,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(base_address + 4) =\n       value2 | *(uint *)(base_address + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "current_name": "update_register_values_00080d3e",
            "entrypoint": "0x00080d3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d3e": "update_register_values_00080d3e",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d58": {
            "additional_data": {
                "0x14": {
                    "offset": 1,
                    "shifted_bit_mask": 1
                },
                "FUN_00080d58": {
                    "set_bit": 15,
                    "set_bit_at_index": 3,
                    "set_bit_at_offset": 3,
                    "set_bit_at_position": 1,
                    "set_bit_in_integer": 4,
                    "set_bit_in_memory": 2,
                    "set_bit_in_value": 1,
                    "set_bit_value": 1,
                    "set_flag": 1
                },
                "param_1": {
                    "address": 3,
                    "array": 1,
                    "array_ptr": 1,
                    "base_address": 20,
                    "integer_address": 1,
                    "memory_address": 3,
                    "target_address": 1,
                    "value_ptr": 1
                },
                "param_2": {
                    "bit_index": 6,
                    "bit_number": 2,
                    "bit_offset": 3,
                    "bit_position": 20
                }
            },
            "called": [],
            "calling": [
                "FUN_00080f0c"
            ],
            "code": "\nvoid set_bit_in_integer_00080d58(int base_address,uint bit_position)\n\n{\n  *(int *)(base_address + 0x14) = 1 << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "set_bit_in_integer_00080d58",
            "entrypoint": "0x00080d58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d58": "set_bit_in_integer_00080d58",
                "param_1": "base_address",
                "param_2": "bit_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d62": {
            "additional_data": {
                "0x14": {
                    "offset": 2
                },
                "0xffff": {
                    "default_value": 1,
                    "initial_value": 2
                },
                "FUN_00080d62": {
                    "initialize_memory": 1,
                    "initialize_param": 1,
                    "initialize_value": 2,
                    "set_default_value": 17,
                    "set_error_code": 2,
                    "set_error_message": 1,
                    "set_initial_value": 2,
                    "set_memory_value_to_ffff": 1,
                    "set_param_to_ffff": 1,
                    "set_param_to_max_value": 3
                },
                "param_1": {
                    "array_pointer": 1,
                    "base_address": 5,
                    "buffer": 1,
                    "data": 2,
                    "error_code": 1,
                    "input": 1,
                    "input_data": 1,
                    "input_param": 2,
                    "input_parameter": 2,
                    "input_value": 2,
                    "memory_address": 4,
                    "object": 1,
                    "object_address": 3,
                    "param": 4,
                    "ptr_to_data": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid set_default_value_00080d62(int base_address)\n\n{\n  *(undefined4 *)(base_address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "current_name": "set_default_value_00080d62",
            "entrypoint": "0x00080d62",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d62": "set_default_value_00080d62",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "additional_data": {
                "FUN_00080d6a": {
                    "set_param": 7,
                    "set_param_value": 10,
                    "set_parameter": 2,
                    "set_parameter_value": 5,
                    "store_parameter_in_memory": 1,
                    "store_value": 1,
                    "update_param_value": 1,
                    "update_parameter": 2,
                    "update_parameter_value": 2
                },
                "param_1": {
                    "base_address": 10,
                    "data_address": 1,
                    "memory_address": 1,
                    "obj_address": 1,
                    "obj_pointer": 1,
                    "obj_ptr": 1,
                    "object_address": 15,
                    "object_pointer": 1
                },
                "param_2": {
                    "new_param_value": 3,
                    "new_parameter_value": 2,
                    "new_value": 9,
                    "param_value": 5,
                    "parameter_value": 5,
                    "value": 5,
                    "value_to_set": 1,
                    "value_to_store": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid set_param_value_00080d6a(int object_address,undefined4 new_value)\n\n{\n  *(undefined4 *)(object_address + 0x28) = new_value;\n  return;\n}\n\n",
            "current_name": "set_param_value_00080d6a",
            "entrypoint": "0x00080d6a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "object_address",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e80": {
            "additional_data": {
                "FUN_00080e80": {
                    "clear_memory": 1,
                    "get_default_value": 2,
                    "get_return_value": 1,
                    "get_status": 1,
                    "get_zero": 1,
                    "initialize": 19,
                    "initialize_data": 1,
                    "initialize_data_structure": 1,
                    "initialize_function": 1,
                    "initialize_program": 2,
                    "zero_return_value": 1
                },
                "return": {
                    "result": 1,
                    "status": 1
                },
                "undefined4": {
                    "initialize_return_value": 1,
                    "int": 1,
                    "status": 1,
                    "void": 11
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid initialize_program_00080e80(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_program_00080e80",
            "entrypoint": "0x00080e80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e80": "initialize_program_00080e80",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e88": {
            "additional_data": {
                "DAT_20071208": {
                    "current_value": 1
                },
                "FUN_00080e88": {
                    "accumulate": 1,
                    "add_and_return_previous_value": 2,
                    "add_and_update": 1,
                    "add_param_to_global": 1,
                    "calculate_new_value": 5,
                    "calculate_new_value_and_return": 1,
                    "calculate_offset": 1,
                    "calculate_sum": 18,
                    "calculate_updated_value": 1
                },
                "iVar1": {
                    "old_value": 2,
                    "original_sum": 1,
                    "original_value": 2,
                    "previous_accumulation": 1,
                    "previous_offset": 1,
                    "previous_sum": 11,
                    "previous_value": 13
                },
                "param_1": {
                    "input": 4,
                    "input_number": 4,
                    "input_offset": 1,
                    "input_value": 14,
                    "new_value": 1,
                    "num": 3,
                    "num_to_add": 1,
                    "number": 1,
                    "value": 1,
                    "value_to_add": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008236c"
            ],
            "code": "\nint calculate_sum_00080e88(int input_value)\n\n{\n  int previous_value;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previous_value = DAT_20071208;\n  DAT_20071208 = input_value + DAT_20071208;\n  return previous_value;\n}\n\n",
            "current_name": "calculate_sum_00080e88",
            "entrypoint": "0x00080e88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e88": "calculate_sum_00080e88",
                "iVar1": "previous_value",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "additional_data": {
                "0xffffffff": {
                    "default_return_value": 1,
                    "invalid_error_code": 1
                },
                "DAT_": {
                    "": 1
                },
                "FUN_00080eaa": {
                    "clear_bits": 2,
                    "clear_error_flag": 1,
                    "get_default_return_value": 1,
                    "get_default_value": 4,
                    "get_error_code": 10,
                    "get_error_status": 1,
                    "get_error_value": 1,
                    "get_negative_one": 3,
                    "get_return_value": 4,
                    "initialize_default_return_value": 1,
                    "initialize_error_value": 1,
                    "initialize_return_value": 2
                },
                "PTR_": {
                    "": 1
                },
                "return": {
                    "error": 1,
                    "status": 1
                },
                "undefined4": {
                    "error_code": 2,
                    "int": 3,
                    "uint32": 2,
                    "uint32_t": 5,
                    "unsigned_int": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nuint32_t get_error_code_00080eaa(void)\n\n{\n  error 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_00080eaa",
            "entrypoint": "0x00080eaa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eaa": "get_error_code_00080eaa",
                "return": "error",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "additional_data": {
                "0x2000": {
                    "initial_value": 1,
                    "new_memory_size": 1,
                    "page_size": 1
                },
                "FUN_00080eb0": {
                    "initialize_data": 1,
                    "initialize_memory": 17,
                    "initialize_memory_region": 1,
                    "set_memory_block_size": 1,
                    "set_memory_page_size": 1,
                    "set_memory_region": 1,
                    "set_memory_size": 4,
                    "set_memory_value": 3,
                    "set_page_size": 2
                },
                "param_1": {
                    "arg1": 2,
                    "base_address": 2,
                    "data": 1,
                    "data_pointer": 1,
                    "mem_block": 1,
                    "new_value": 1,
                    "param": 6,
                    "param1": 10,
                    "param_1": 3,
                    "result": 4
                },
                "param_2": {
                    "address": 2,
                    "base_address": 1,
                    "buffer": 2,
                    "buffer_pointer": 1,
                    "data_address": 1,
                    "data_ptr": 1,
                    "destination_pointer": 1,
                    "memory": 1,
                    "memory_address": 14,
                    "memory_offset": 2,
                    "memory_ptr": 1,
                    "page_address": 1,
                    "param2": 2,
                    "target_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00084494"
            ],
            "code": "\nundefined4 initialize_memory_region_00080eb0(undefined4 param1,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_region_00080eb0",
            "entrypoint": "0x00080eb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eb0": "initialize_memory_region_00080eb0",
                "param_1": "param1",
                "param_2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eba": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_1234": {
                    "constant": 1
                },
                "FUN_00080eba": {
                    "check_success": 1,
                    "determine_success_status": 1,
                    "get_boolean_value": 1,
                    "get_constant_value": 1,
                    "get_default_value": 1,
                    "get_one": 7,
                    "get_return_value": 15,
                    "initialize": 1,
                    "initialize_function": 1,
                    "initialize_return_value": 1,
                    "return_one": 1
                },
                "PTR_LOCAL_1": {
                    "counter": 1
                },
                "PTR_PARAM_1": {
                    "result": 1
                },
                "PTR_param_1": {
                    "param_1": 1
                },
                "PTR_param_2": {
                    "param_2": 1
                },
                "return": {
                    "result": 2,
                    "return_value": 1
                },
                "undefined4": {
                    "int": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_000844bc"
            ],
            "code": "\nint get_return_value_00080eba(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_return_value_00080eba",
            "entrypoint": "0x00080eba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eba": "get_return_value_00080eba",
                "return": "result",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "additional_data": {
                "DAT_00000000": {
                    "result": 1
                },
                "DAT_00000004": {
                    "error_code": 1
                },
                "FUN_00080ebe": {
                    "calculate_result": 2,
                    "clear_cache": 1,
                    "clear_flag": 1,
                    "get_default_value": 3,
                    "get_return_value": 2,
                    "get_zero_value": 1,
                    "initialize": 15,
                    "initialize_application": 2,
                    "initialize_data": 2,
                    "initialize_system": 1,
                    "initialize_value": 1
                },
                "PTR_00000000": {
                    "data": 1
                },
                "undefined4": {
                    "int": 2,
                    "void": 14
                }
            },
            "called": [],
            "calling": [
                "FUN_000844e0"
            ],
            "code": "\nvoid initialize_application_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "current_name": "initialize_application_00080ebe",
            "entrypoint": "0x00080ebe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ebe": "initialize_application_00080ebe",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "additional_data": {
                "DAT_": {
                    "dat_": 1
                },
                "FUN_00080ec2": {
                    "do_nothing": 2,
                    "get_default_value": 4,
                    "get_result": 1,
                    "get_return_value": 2,
                    "get_zero": 1,
                    "get_zero_value": 2,
                    "initialize": 14,
                    "initialize_application": 1,
                    "initialize_default": 1,
                    "initialize_program": 1,
                    "initialize_return_value": 1,
                    "initialize_system": 1
                },
                "PTR_": {
                    "ptr_": 1
                },
                "new_program_var_1": {
                    "counter": 1
                },
                "new_program_var_2": {
                    "result": 1
                },
                "new_program_var_3": {
                    "temp": 1
                },
                "new_program_var_4": {
                    "status": 1
                },
                "original_variable_name_1": {
                    "result": 1
                },
                "return": {
                    "result": 1
                },
                "undefined4": {
                    "int": 2,
                    "uint32_t": 1,
                    "void": 7
                }
            },
            "called": [],
            "calling": [
                "FUN_00084508"
            ],
            "code": "\nvoid initialize_system_00080ec2(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_system_00080ec2",
            "entrypoint": "0x00080ec2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ec2": "initialize_system_00080ec2",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "additional_data": {
                "FUN_00080ec8": {
                    "convert_bytes_to_u_int": 2,
                    "convert_bytes_to_uint": 2,
                    "copy_byte_data": 1,
                    "copy_bytes": 13,
                    "copy_bytes_to_destination": 1,
                    "decode_data": 1,
                    "extract_bytes": 1,
                    "extract_bytes_from_memory": 1,
                    "extract_bytes_from_pointer": 1,
                    "process_bytes": 2,
                    "process_data": 4,
                    "read_bytes": 1
                },
                "iVar1": {
                    "counter": 2,
                    "i": 10,
                    "index": 16
                },
                "param_1": {
                    "address": 1,
                    "arg1": 1,
                    "data": 1,
                    "dest": 1,
                    "dest_buffer": 1,
                    "dest_ptr": 1,
                    "destination": 3,
                    "destination_buffer": 1,
                    "input_address": 1,
                    "input_data": 1,
                    "param": 1,
                    "param1": 9,
                    "param_1": 3,
                    "param_pointer": 1,
                    "result": 1,
                    "size": 1,
                    "unspecified_param_1": 1,
                    "unused_param": 1
                },
                "param_2": {
                    "arg2": 1,
                    "buffer": 1,
                    "byte_array": 4,
                    "byte_array_address": 1,
                    "input_array": 1,
                    "input_buffer": 1,
                    "input_data": 1,
                    "param2": 3,
                    "source": 8,
                    "source_address": 3,
                    "source_buffer": 1,
                    "source_pointer": 1,
                    "src": 1,
                    "src_address": 1,
                    "src_buffer": 1,
                    "src_ptr": 1
                },
                "param_3": {
                    "array_length": 2,
                    "byte_array_length": 2,
                    "byte_array_size": 1,
                    "byte_count": 1,
                    "data_length": 1,
                    "input_size": 1,
                    "length": 1,
                    "num_bytes": 14,
                    "num_elements": 1,
                    "param3": 2,
                    "size": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_00084244"
            ],
            "code": "\n\n\nuint copy_bytes_to_destination_00080ec8(undefined4 param1,int source,uint num_bytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)num_bytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source + index);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "current_name": "copy_bytes_to_destination_00080ec8",
            "entrypoint": "0x00080ec8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ec8": "copy_bytes_to_destination_00080ec8",
                "iVar1": "index",
                "param_1": "param1",
                "param_2": "source",
                "param_3": "num_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eec": {
            "additional_data": {
                "FUM_00080eec": {
                    "exit_with_status": 1
                },
                "FUN_00080eec": {
                    "exit_function_with_status": 1,
                    "exit_with_status": 28,
                    "exit_with_status_message": 1
                },
                "FUN_000817c8": {
                    "print_exit_message": 9,
                    "print_exit_status": 6,
                    "print_exit_status_message": 1,
                    "print_message": 5,
                    "print_status": 1,
                    "print_status_message": 6
                },
                "param_1": {
                    "status": 30,
                    "status_code": 1
                },
                "param_2": {
                    "": 1,
                    "unnamed_param2": 1,
                    "unused": 3,
                    "unused1": 2,
                    "unused_param2": 1,
                    "unused_param_2": 1
                },
                "param_3": {
                    "": 1,
                    "arg3": 5,
                    "message": 1,
                    "param3": 3,
                    "param_2": 1,
                    "param_3": 2,
                    "unknown1": 1,
                    "unnamed_param3": 1,
                    "unused": 3,
                    "unused1": 3,
                    "unused2": 2,
                    "unused_1": 2,
                    "unused_param": 1,
                    "unused_param3": 1,
                    "unused_param_1": 2,
                    "unused_param_3": 1,
                    "var_1": 1
                },
                "param_4": {
                    "": 1,
                    "arg4": 5,
                    "param4": 3,
                    "param_3": 1,
                    "param_4": 3,
                    "unknown2": 1,
                    "unnamed_param4": 1,
                    "unused": 3,
                    "unused2": 3,
                    "unused3": 2,
                    "unused_2": 2,
                    "unused_param": 1,
                    "unused_param4": 1,
                    "unused_param_2": 2,
                    "unused_param_4": 1,
                    "var_2": 1
                }
            },
            "called": [
                "FUN_000817c8"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nvoid exit_function_with_status_00080eec(undefined4 status,undefined4 unused,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_000817c8(\"Exiting with status %d.\\n\",status,arg3,arg4,arg4);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "exit_function_with_status_00080eec",
            "entrypoint": "0x00080eec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eec": "exit_function_with_status_00080eec",
                "param_1": "status",
                "param_2": "unused",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080efc": {
            "called": [],
            "calling": [
                "FUN_000841e4"
            ],
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080efc",
            "entrypoint": "0x00080efc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080efe": {
            "additional_data": {
                "0xffffffff": {
                    "default_value": 1
                },
                "DAT_": {
                    "": 1
                },
                "FUN_00080efe": {
                    "get_default_value": 6,
                    "get_error_code": 13,
                    "get_error_message": 1,
                    "get_error_status": 1,
                    "get_flag": 1,
                    "get_negative_one": 4,
                    "get_return_value": 4,
                    "initialize_status": 1
                },
                "PTR_": {
                    "": 1
                },
                "return": {
                    "negative_one": 1
                },
                "undefined4": {
                    "error_code": 1,
                    "int": 4,
                    "uint32": 1,
                    "uint32_t": 7,
                    "unsigned_int": 1
                }
            },
            "called": [],
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "code": "\nuint32_t get_error_code_00080efe(void)\n\n{\n  negative_one 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_00080efe",
            "entrypoint": "0x00080efe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe",
                "return": "negative_one",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080f08": {
            "called": [],
            "calling": [
                "FUN_000815ec",
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080f08",
            "entrypoint": "0x00080f08",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080f0c": {
            "additional_data": {
                "0": {
                    "constant_value_2": 1
                },
                "0x20": {
                    "constant_value_7": 1
                },
                "0x2c": {
                    "constant_value_6": 1
                },
                "0x400c0000": {
                    "constant_value": 2
                },
                "0xf0": {
                    "type_mask_bit": 1
                },
                "0xff": {
                    "bit_mask": 1
                },
                "1": {
                    "constant_value_9": 1
                },
                "2": {
                    "constant_value_3": 1
                },
                "5": {
                    "constant_value_5": 1
                },
                "FUN_00080a30": {
                    "execute_function": 1,
                    "function2": 1,
                    "internal_function": 1,
                    "perform_action": 1,
                    "perform_task": 1,
                    "process_data": 2
                },
                "FUN_00080aa8": {
                    "do_something": 1,
                    "execute_action": 2,
                    "function1": 1,
                    "perform_action": 1,
                    "print_subfunction": 1,
                    "reset_function": 1,
                    "reverse_bit": 1,
                    "utility_function": 1
                },
                "FUN_00080d58": {
                    "initialize_value": 1,
                    "reverse_action": 1,
                    "reverse_data": 1,
                    "reverse_value": 1,
                    "set_param": 1,
                    "type_conversion_function": 1
                },
                "FUN_00080f0c": {
                    "check_and_modify_value": 2,
                    "check_and_update_status": 1,
                    "handle_param": 1,
                    "process_data": 1,
                    "process_param": 2,
                    "process_params": 1,
                    "update_variable": 1
                },
                "_DAT_400e0614": {
                    "global_variable_2": 2
                },
                "_DAT_400e0618": {
                    "global_variable_1": 2
                },
                "_DAT_400e0704": {
                    "global_variable_4": 2
                },
                "_DAT_400e0708": {
                    "global_variable_3": 2
                },
                "bVar5": {
                    "bit1": 1,
                    "bit_1": 1,
                    "bit_value": 1,
                    "bit_value1": 2,
                    "bitfield1": 1,
                    "byte1": 1,
                    "byte_flag": 1,
                    "byte_var1": 3,
                    "condition_var1": 1,
                    "flag1": 1,
                    "lower_nibble": 10,
                    "mask1": 1,
                    "temp_var4": 2,
                    "temp_var6": 1,
                    "type_mask": 1,
                    "value": 1,
                    "var1": 2
                },
                "bVar6": {
                    "all_nibbles": 1,
                    "bit2": 1,
                    "bit_2": 1,
                    "bit_value2": 2,
                    "bitfield2": 1,
                    "byte2": 1,
                    "byte_value": 5,
                    "byte_var2": 3,
                    "combined_nibbles": 1,
                    "condition_var2": 1,
                    "flag2": 1,
                    "full_byte": 3,
                    "mask2": 1,
                    "status": 1,
                    "temp_var5": 2,
                    "temp_var7": 1,
                    "type": 1,
                    "type_byte": 1,
                    "value": 1,
                    "var2": 2
                },
                "iVar1": {
                    "output": 2,
                    "output_value": 1,
                    "output_var": 2,
                    "result": 25,
                    "return_value": 1
                },
                "iVar7": {
                    "i_var1": 1,
                    "index": 4,
                    "index_1": 2,
                    "index_var": 2,
                    "offset": 1,
                    "temp1": 1,
                    "temp4": 3,
                    "temp_result1": 1,
                    "temp_value1": 1,
                    "temp_var1": 7,
                    "temp_var4": 1,
                    "temp_var6": 2,
                    "temp_var_1": 1,
                    "tmp_var1": 1,
                    "var3": 2
                },
                "iVar8": {
                    "address": 1,
                    "data_var": 1,
                    "i_var2": 1,
                    "index_2": 2,
                    "int_value": 1,
                    "temp2": 1,
                    "temp5": 3,
                    "temp_result2": 1,
                    "temp_value2": 1,
                    "temp_var2": 7,
                    "temp_var5": 1,
                    "temp_var7": 2,
                    "temp_var_2": 1,
                    "tmp_var2": 1,
                    "value": 4,
                    "var4": 2
                },
                "param_1": {
                    "index": 3,
                    "input": 3,
                    "input1": 3,
                    "input_param": 6,
                    "input_param1": 4,
                    "input_parameter": 1,
                    "input_value": 7,
                    "input_value1": 3,
                    "param": 1
                },
                "param_2": {
                    "action": 1,
                    "condition": 2,
                    "condition_flag": 1,
                    "condition_param": 1,
                    "flag_param": 1,
                    "input2": 3,
                    "input_param2": 4,
                    "input_value2": 3,
                    "mode": 5,
                    "operation": 1,
                    "option": 3,
                    "option_param": 1,
                    "param_type": 1,
                    "selection": 3,
                    "switch_value": 1
                },
                "uVar2": {
                    "bit_mask": 2,
                    "check_value": 1,
                    "comparison_value": 1,
                    "flag": 2,
                    "temp": 1,
                    "temp1": 4,
                    "temp_1": 1,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "temp_var": 1,
                    "temp_var1": 6,
                    "temp_var3": 3,
                    "temp_var_3": 1,
                    "value": 2,
                    "value1": 1,
                    "var1": 1
                },
                "uVar3": {
                    "command": 2,
                    "control_value": 1,
                    "func_result": 2,
                    "function_code": 1,
                    "mode": 1,
                    "result": 1,
                    "sub_function_flag": 1,
                    "temp2": 4,
                    "temp_2": 1,
                    "temp_value2": 1,
                    "temp_var2": 7,
                    "temp_var4": 3,
                    "temp_var_4": 1,
                    "type": 1,
                    "value": 1,
                    "value2": 1,
                    "var2": 1
                },
                "uVar4": {
                    "mask": 2,
                    "mask_result": 1,
                    "mask_value": 1,
                    "sub_flag": 1,
                    "temp2": 1,
                    "temp3": 4,
                    "temp_3": 1,
                    "temp_flag": 1,
                    "temp_mask": 1,
                    "temp_value3": 1,
                    "temp_var": 2,
                    "temp_var3": 7,
                    "temp_var5": 3,
                    "temp_var_5": 1,
                    "value3": 1,
                    "var3": 1
                }
            },
            "called": [
                "FUN_00080a30",
                "FUN_00080d58",
                "FUN_00080aa8"
            ],
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "code": "\n\n\nint process_params_00080f0c(int input_value,int mode)\n\n{\n  int result;\n  uint temp_var1;\n  undefined4 temp_var2;\n  uint temp_var3;\n  byte lower_nibble;\n  byte byte_value;\n  int temp_var1;\n  int temp_var2;\n  \n  result = input_value;\n  if ((&DAT_00084b50)[input_value * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[input_value] & 0xf) == 4) {\n      result = FUN_00080d58(0x400c0000,(&DAT_00084b5d)[input_value * 0x1c]);\n    }\n    byte_value = (&DAT_20070e1c)[input_value];\n    lower_nibble = byte_value & 0xf;\n    if ((lower_nibble < 3) && (byte_value != 0)) {\n      if (lower_nibble == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (mode != 1) {\nLAB_00080f68:\n      if (mode == 0) {\n        result = input_value * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = FUN_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),0);\n        byte_value = (&DAT_20070e1c)[input_value] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = input_value * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = FUN_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),1);\n        byte_value = (&DAT_20070e1c)[input_value] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[input_value] = byte_value;\n      return result;\n    }\n    temp_var1 = input_value * 0x1c;\n    temp_var2 = *(int *)(&DAT_00084b44 + temp_var1);\n    if (byte_value >> 4 == 0) {\n      temp_var2 = 4;\n    }\n    else {\n      temp_var2 = 5;\n    }\n    result = FUN_00080a30(temp_var2,temp_var2,*(undefined4 *)(&DAT_00084b48 + temp_var1),\n                         *(undefined4 *)(&DAT_00084b54 + temp_var1));\n    (&DAT_20070e1c)[input_value] = (&DAT_20070e1c)[input_value] & 0xf0 | 3;\n    if (*(int *)(temp_var2 + 0x18) == -1) {\n      temp_var1 = *(uint *)(&DAT_00084b4c + temp_var1);\n      if (0x2c < temp_var1) {\n        return 1;\n      }\n      if (temp_var1 < 0x20) {\n        temp_var1 = 1 << (temp_var1 & 0xff);\n        temp_var3 = _DAT_400e0618 & temp_var1;\n        if (temp_var3 == temp_var1) {\n          _DAT_400e0614 = temp_var3;\n        }\n      }\n      else {\n        temp_var1 = 1 << (temp_var1 - 0x20 & 0xff);\n        temp_var3 = _DAT_400e0708 & temp_var1;\n        if (temp_var3 == temp_var1) {\n          _DAT_400e0704 = temp_var3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "process_params_00080f0c",
            "entrypoint": "0x00080f0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080f0c": "process_params_00080f0c",
                "bVar5": "lower_nibble",
                "bVar6": "byte_value",
                "iVar1": "result",
                "iVar7": "temp_var1",
                "iVar8": "temp_var2",
                "param_1": "input_value",
                "param_2": "mode",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081014": {
            "additional_data": {
                "FUN_00080a0a": {
                    "handle_data": 1,
                    "handle_update": 1,
                    "modify_data": 2,
                    "set_data": 1,
                    "set_value": 2,
                    "update_address": 1,
                    "update_data_value": 1,
                    "update_status": 1,
                    "update_value": 5
                },
                "FUN_00080a94": {
                    "check_and_update_value": 2,
                    "check_data_validity": 2,
                    "check_status": 1,
                    "check_validity": 4,
                    "check_value": 6
                },
                "FUN_00080f0c": {
                    "reverse": 1,
                    "reverse_bits": 1,
                    "reverse_bytes": 1,
                    "reverse_data": 6,
                    "reverse_params": 1,
                    "reverse_value": 1
                },
                "FUN_00081014": {
                    "update_config": 1,
                    "update_configuration": 3,
                    "update_data": 16,
                    "update_data_and_settings": 1,
                    "update_data_record": 1,
                    "update_param": 2,
                    "update_parameter": 5,
                    "update_value": 2
                },
                "iVar1": {
                    "error_code": 1,
                    "result": 26,
                    "return_value": 3,
                    "success": 1
                },
                "iVar3": {
                    "address": 10,
                    "base_address": 1,
                    "config_address": 2,
                    "config_struct_address": 1,
                    "data": 5,
                    "data_addr": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "pointer1": 1,
                    "ptr": 6,
                    "ptr_value": 1
                },
                "param_1": {
                    "config_index": 2,
                    "index": 28,
                    "record_index": 1
                },
                "param_2": {
                    "new_value": 2,
                    "param_flag": 1,
                    "value": 28
                },
                "param_3": {
                    "additional_info": 1,
                    "config": 2,
                    "config_value": 1,
                    "data": 7,
                    "param": 18,
                    "param3": 1,
                    "param_value": 1
                },
                "uVar2": {
                    "config_address": 1,
                    "config_value": 1,
                    "data": 9,
                    "data_value": 1,
                    "existing_value": 1,
                    "new_value": 7,
                    "param": 1,
                    "param_value": 1,
                    "pointer2": 1,
                    "prev_value": 1,
                    "temp": 1,
                    "temp_value": 1,
                    "updated_value": 3,
                    "value2": 1,
                    "value_to_update": 1
                }
            },
            "called": [
                "FUN_00080a94",
                "FUN_00080a0a",
                "FUN_00080f0c"
            ],
            "calling": [
                "FUN_00080250",
                "FUN_00080774",
                "FUN_0008044c"
            ],
            "code": "\nvoid update_data_record_00081014(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 data;\n  int address;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      FUN_00080f0c(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(value << 4);\n    address = *(int *)(&DAT_00084b44 + index * 0x1c);\n    data = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    result = FUN_00080a94(address,data);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(address + 100) = data;\n        return;\n      }\n      *(undefined4 *)(address + 0x60) = data;\n      return;\n    }\n    FUN_00080a0a(address,data,value,0,1);\n  }\n  return;\n}\n\n",
            "current_name": "update_data_record_00081014",
            "entrypoint": "0x00081014",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081014": "update_data_record_00081014",
                "iVar1": "result",
                "iVar3": "address",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "uVar2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810a6": {
            "additional_data": {
                "FUN_000810a6": {
                    "call_subfunction": 1,
                    "execute_callback_if_non_zero": 1,
                    "execute_command": 1,
                    "execute_function": 14,
                    "execute_function_with_parameter": 1,
                    "execute_function_with_parameters": 1,
                    "execute_function_with_params": 2,
                    "execute_operation": 2,
                    "execute_sub_function": 3,
                    "extract_and_call_function": 1,
                    "process_data": 2,
                    "process_param": 1
                },
                "FUN_00082688": {
                    "calculate_result": 1,
                    "get_function_return_value": 1,
                    "get_input_value": 1,
                    "get_integer": 1,
                    "get_integer_value": 2,
                    "get_param_size": 1,
                    "get_processed_value": 1,
                    "obtain_result": 1,
                    "retrieve_data": 2,
                    "reverse_value": 1
                },
                "param_1": {
                    "array": 4,
                    "buffer": 1,
                    "callback": 1,
                    "command_array": 1,
                    "data_pointer": 1,
                    "function_list": 2,
                    "function_pointer": 14,
                    "function_ptr": 2,
                    "function_table": 1,
                    "operation_pointer": 1,
                    "param_array": 3
                },
                "param_2": {
                    "arg_size": 1,
                    "argument": 1,
                    "array_length": 1,
                    "array_size": 1,
                    "function_index": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_size": 2,
                    "input_value": 6,
                    "length": 2,
                    "param_count": 2,
                    "param_size": 4,
                    "param_value": 2,
                    "parameter": 1,
                    "size": 5
                },
                "param_3": {
                    "additional_param1": 1,
                    "arg1": 8,
                    "arg3": 1,
                    "argument1": 1,
                    "extra_param1": 1,
                    "param1": 1,
                    "param3": 7,
                    "param_1": 1,
                    "param_3": 1,
                    "param_val1": 1,
                    "parameter1": 1,
                    "unknown_parameter1": 1,
                    "unused_param": 1,
                    "var1": 2
                },
                "param_4": {
                    "additional_param": 1,
                    "additional_param2": 1,
                    "arg2": 8,
                    "arg4": 1,
                    "argument2": 1,
                    "extra_param2": 1,
                    "param2": 1,
                    "param4": 9,
                    "param_2": 1,
                    "param_4": 1,
                    "param_val2": 1,
                    "parameter2": 1,
                    "parameter4": 1,
                    "unknown_parameter2": 1,
                    "var2": 2
                },
                "uVar1": {
                    "result": 22,
                    "return_value": 4,
                    "sub_function_result": 1
                }
            },
            "called": [
                "FUN_00082688"
            ],
            "calling": [
                "FUN_000810e8",
                "FUN_000810d8",
                "FUN_000810c4",
                "FUN_000810fc"
            ],
            "code": "\nvoid execute_sub_function_000810a6(int *function_pointer,int input_value,undefined4 arg1,undefined4 param4)\n\n{\n  undefined4 result;\n  \n  if (input_value != 0) {\n    result = FUN_00082688(input_value);\n    (**(code **)(*function_pointer + 4))(function_pointer,input_value,result,*(code **)(*function_pointer + 4),param4);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "execute_sub_function_000810a6",
            "entrypoint": "0x000810a6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810a6": "execute_sub_function_000810a6",
                "param_1": "function_pointer",
                "param_2": "input_value",
                "param_3": "arg1",
                "param_4": "param4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810c4": {
            "additional_data": {
                "FUN_000810a6": {
                    "call_initialization": 1,
                    "call_sub_function": 8,
                    "execute_initialization": 1,
                    "execute_setup": 1,
                    "execute_sub_function": 3,
                    "initialize_application": 1,
                    "initialize_data": 1,
                    "perform_additional_tasks": 1,
                    "perform_initialization": 2,
                    "perform_pre_initialization": 1,
                    "perform_secondary_function": 1,
                    "perform_sub_function": 1,
                    "perform_sub_operations": 1,
                    "perform_sub_task": 1,
                    "perform_subroutine": 1,
                    "sub_function": 2
                },
                "FUN_000810c4": {
                    "execute_application": 1,
                    "execute_function": 2,
                    "execute_function_and_return": 1,
                    "execute_initial_operations": 1,
                    "execute_initial_setup": 3,
                    "execute_initialization": 6,
                    "execute_initialization_code": 1,
                    "execute_initialization_routine": 1,
                    "execute_main_function": 3,
                    "execute_operation": 1,
                    "execute_sub_functions": 1,
                    "initialize": 2,
                    "initialize_system": 4,
                    "perform_initialization": 1,
                    "run_some_process": 1
                },
                "original_function_name": {
                    "initialize_system": 1
                },
                "param_1": {
                    "array": 6,
                    "array_pointer": 4,
                    "array_ptr": 2,
                    "buffer": 3,
                    "data_pointer": 2,
                    "input_array": 1
                },
                "param_2": {
                    "array_length": 2,
                    "array_size": 3,
                    "data_size": 2,
                    "length": 2,
                    "size": 9
                },
                "param_3": {
                    "arg1": 1,
                    "arg3": 1,
                    "argument1": 1,
                    "param3": 4,
                    "param_3": 1,
                    "parameter1": 4,
                    "parameter3": 2,
                    "unknown1": 1,
                    "value1": 3
                },
                "param_4": {
                    "arg2": 1,
                    "arg4": 1,
                    "argument2": 1,
                    "param4": 4,
                    "param_4": 1,
                    "parameter2": 4,
                    "parameter4": 2,
                    "unknown2": 1,
                    "value2": 3
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nvoid execute_initialization_code_000810c4(void)\n\n{\n  FUN_000810a6();\n  return;\n}\n\n",
            "current_name": "execute_initialization_code_000810c4",
            "entrypoint": "0x000810c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810c4": "execute_initialization_code_000810c4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810cc": {
            "additional_data": {
                "FUN_000810cc": {
                    "execute_and_return": 1,
                    "execute_code": 5,
                    "execute_first_function": 1,
                    "execute_function": 22,
                    "execute_function_pointer": 1,
                    "execute_indirect_function": 1
                },
                "param_1": {
                    "code_pointer": 2,
                    "function_pointer": 26,
                    "function_ptr": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0008113a"
            ],
            "code": "\nvoid execute_indirect_function_000810cc(undefined4 *function_pointer)\n\n{\n  (**(code **)*function_pointer)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_function_000810cc",
            "entrypoint": "0x000810cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810cc": "execute_indirect_function_000810cc",
                "param_1": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810d8": {
            "additional_data": {
                "FUN_000810a6": {
                    "calculate_result": 1,
                    "call_sub_function": 2,
                    "copy_data": 1,
                    "perform_operation": 2,
                    "process_data": 8,
                    "set_widget_properties": 1,
                    "update_data": 2
                },
                "FUN_000810d8": {
                    "execute_function": 4,
                    "execute_function_with_params": 1,
                    "initialize_and_execute": 1,
                    "initialize_data": 17,
                    "initialize_function": 2,
                    "initialize_some_data": 1,
                    "initialize_widget": 1,
                    "perform_function": 1,
                    "process_data": 3
                },
                "param_1": {
                    "array": 1,
                    "array_pointer": 2,
                    "data": 5,
                    "data_pointer": 13,
                    "data_ptr": 3,
                    "function_params": 1,
                    "input_array": 2,
                    "input_ptr": 1,
                    "pointer": 2,
                    "widget_ptr": 1
                },
                "param_2": {
                    "array_size": 1,
                    "constant_value": 1,
                    "data_length": 1,
                    "input_data": 1,
                    "input_length": 1,
                    "length": 2,
                    "param2": 4,
                    "param_2": 1,
                    "parameter2": 1,
                    "size": 3,
                    "value": 2
                },
                "param_3": {
                    "address1": 1,
                    "arg1": 1,
                    "argument1": 1,
                    "input1": 1,
                    "param": 1,
                    "param1": 5,
                    "param3": 9,
                    "param3_value": 2,
                    "param_3": 3,
                    "param_a": 2,
                    "param_x": 1,
                    "parameter3": 2,
                    "size1": 1,
                    "value1": 1
                },
                "param_4": {
                    "address2": 1,
                    "arg2": 1,
                    "argument2": 1,
                    "index": 1,
                    "input2": 1,
                    "param2": 5,
                    "param4": 9,
                    "param4_value": 2,
                    "param_4": 3,
                    "param_b": 2,
                    "param_y": 1,
                    "parameter4": 2,
                    "size2": 1,
                    "value2": 1
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "code": "\nvoid initialize_some_data_000810d8(undefined4 data_pointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  FUN_000810a6(data_pointer,&DAT_00085635,param3,param4,param4);\n  return;\n}\n\n",
            "current_name": "initialize_some_data_000810d8",
            "entrypoint": "0x000810d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810d8": "initialize_some_data_000810d8",
                "param_1": "data_pointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810e8": {
            "additional_data": {
                "FUN_000810a6": {
                    "calculate_first_result": 1,
                    "calculate_result1": 1,
                    "calculate_value1": 1,
                    "get_first_value": 1,
                    "perform_operation_a": 1
                },
                "FUN_000810d8": {
                    "calculate_result2": 1,
                    "calculate_second_result": 1,
                    "calculate_value2": 1,
                    "get_second_value": 1,
                    "perform_operation_b": 1
                },
                "FUN_000810e8": {
                    "add_results": 1,
                    "add_two_values": 1,
                    "add_values": 1,
                    "calculate_sum": 23,
                    "sum_of_function_results": 1,
                    "sum_of_functions": 1,
                    "sum_of_results": 2,
                    "sum_two_values": 1
                },
                "iVar1": {
                    "result1": 30
                },
                "iVar2": {
                    "result2": 30
                },
                "param_1": {
                    "data": 1,
                    "input": 11,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_value": 14,
                    "value": 1,
                    "value1": 1
                },
                "param_2": {
                    "input1": 1
                },
                "param_3": {
                    "input2": 1
                },
                "param_4": {
                    "input3": 1
                }
            },
            "called": [
                "FUN_000810a6",
                "FUN_000810d8"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_sum_000810e8(undefined4 input_value)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_000810a6();\n  result2 = FUN_000810d8(input_value);\n  return result2 + result1;\n}\n\n",
            "current_name": "calculate_sum_000810e8",
            "entrypoint": "0x000810e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "iVar1": "result1",
                "iVar2": "result2",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810fc": {
            "additional_data": {
                "FUN_000810fc": {
                    "convert_and_print_number": 1,
                    "convert_decimal_to_base": 6,
                    "convert_decimal_to_base_n": 2,
                    "convert_number_to_base": 2,
                    "convert_number_to_string": 2,
                    "convert_to_base": 18
                },
                "cVar4": {
                    "char_value": 4,
                    "converted_char": 1,
                    "converted_character": 1,
                    "converted_digit": 4,
                    "digit": 7,
                    "digit_char": 7
                },
                "local_15": {
                    "base_digits": 1,
                    "base_n_representation": 1,
                    "buffer": 3,
                    "char_array": 1,
                    "char_buffer": 1,
                    "converted_array": 1,
                    "converted_digits": 3,
                    "converted_number": 11,
                    "digit_array": 2,
                    "digit_buffer": 2,
                    "digits": 2,
                    "digits_array": 1,
                    "output_buffer": 1
                },
                "param_1": {
                    "data": 1,
                    "input_buffer": 1,
                    "output": 9,
                    "output_array": 7,
                    "output_buffer": 10,
                    "result": 2,
                    "result_buffer": 1
                },
                "param_2": {
                    "decimal_number": 9,
                    "input_number": 4,
                    "number": 16,
                    "number_to_convert": 1,
                    "value": 1
                },
                "param_3": {
                    "base": 30,
                    "conversion_base": 1
                },
                "pcVar1": {
                    "buffer_pointer": 1,
                    "buffer_ptr": 2,
                    "char_ptr": 1,
                    "current_char": 6,
                    "current_character": 1,
                    "current_digit": 6,
                    "current_digit_ptr": 1,
                    "output_buffer": 1,
                    "output_ptr": 3,
                    "result": 2
                },
                "pcVar3": {
                    "current": 1,
                    "current_char": 3,
                    "current_char_ptr": 2,
                    "current_digit": 2,
                    "current_position": 2,
                    "current_ptr": 1,
                    "next_char": 4,
                    "next_digit": 2,
                    "previous_character": 1,
                    "previous_digit": 4,
                    "previous_digit_ptr": 1,
                    "temp_ptr": 1
                },
                "uVar2": {
                    "dividend": 1,
                    "quotient": 23
                },
                "uVar5": {
                    "remainder": 24
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_0008113a"
            ],
            "code": "\nvoid convert_decimal_to_base_n_000810fc(undefined4 output_buffer,uint number,uint base)\n\n{\n  char *current_char;\n  uint quotient;\n  char *next_char;\n  char digit_char;\n  uint remainder;\n  char converted_number [5];\n  \n  converted_number[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  current_char = converted_number;\n  do {\n    next_char = current_char;\n    quotient = number / base;\n    remainder = number - base * quotient & 0xff;\n    digit_char = (char)remainder;\n    if (remainder < 10) {\n      digit_char = digit_char + '0';\n    }\n    else {\n      digit_char = digit_char + '7';\n    }\n    *next_char = digit_char;\n    number = quotient;\n    current_char = next_char + -1;\n  } while (quotient != 0);\n  FUN_000810a6(output_buffer,next_char);\n  return;\n}\n\n",
            "current_name": "convert_decimal_to_base_n_000810fc",
            "entrypoint": "0x000810fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810fc": "convert_decimal_to_base_n_000810fc",
                "cVar4": "digit_char",
                "local_15": "converted_number",
                "param_1": "output_buffer",
                "param_2": "number",
                "param_3": "base",
                "pcVar1": "current_char",
                "pcVar3": "next_char",
                "uVar2": "quotient",
                "uVar5": "remainder"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008113a": {
            "additional_data": {
                "FUN_000810cc": {
                    "add_character_to_string": 1,
                    "append_character": 1,
                    "print_char": 2,
                    "print_character": 3,
                    "print_minus_sign": 1,
                    "print_negative_sign": 1,
                    "write_character": 3
                },
                "FUN_000810fc": {
                    "append_number": 1,
                    "convert_integer_to_radix": 1,
                    "convert_number": 1,
                    "convert_number_to_base_string": 1,
                    "convert_number_to_string": 1,
                    "convert_to_base": 1,
                    "format_number": 1,
                    "print_number": 4,
                    "write_number": 1
                },
                "FUN_0008113a": {
                    "convert_int_to_str": 1,
                    "convert_integer_to_string": 2,
                    "convert_number_to_string": 5,
                    "convert_to_base": 1,
                    "convert_to_number": 1,
                    "convert_uint_to_string": 1,
                    "decode_and_convert": 2,
                    "format_and_print": 1,
                    "format_number": 3,
                    "parse_integer": 1,
                    "parse_number": 5,
                    "parse_parameter_value": 1,
                    "process_data": 2,
                    "process_number": 2,
                    "process_parameters": 1
                },
                "iVar1": {
                    "result": 28,
                    "return_value": 2
                },
                "iVar2": {
                    "extra_result": 1,
                    "neg_sign_size": 1,
                    "negative": 8,
                    "negative_count": 1,
                    "negative_flag": 7,
                    "negative_indicator": 1,
                    "negative_offset": 1,
                    "negative_result": 3,
                    "negative_value": 3,
                    "sign": 1,
                    "temp": 1,
                    "temp_var": 1,
                    "temp_variable": 1
                },
                "param_1": {
                    "array": 4,
                    "array_ptr": 1,
                    "buffer": 4,
                    "converter": 1,
                    "data": 2,
                    "format": 1,
                    "function_pointer": 2,
                    "function_pointers": 2,
                    "input_array": 2,
                    "input_ptr": 1,
                    "output": 2,
                    "output_buffer": 4,
                    "output_pointer": 1,
                    "output_string": 4
                },
                "param_2": {
                    "input": 2,
                    "input_integer": 1,
                    "input_number": 1,
                    "input_val": 1,
                    "input_value": 1,
                    "input_value_1": 1,
                    "number": 15,
                    "number_to_convert": 1,
                    "value": 7,
                    "value_1": 1
                },
                "param_3": {
                    "base": 26,
                    "format_flag": 1,
                    "input_value_2": 1,
                    "radix": 2,
                    "value_2": 1
                },
                "param_4": {
                    "additional_argument": 1,
                    "additional_param": 2,
                    "arg": 1,
                    "argument": 1,
                    "extra": 1,
                    "extra_param": 3,
                    "flag": 1,
                    "format": 1,
                    "format_option": 2,
                    "options": 1,
                    "param": 1,
                    "param_4": 8,
                    "undefined_value": 1,
                    "unknown": 4,
                    "unknown_param": 1,
                    "value_3": 1,
                    "width": 1
                }
            },
            "called": [
                "FUN_000810cc",
                "FUN_000810fc"
            ],
            "calling": [
                "FUN_0008117a",
                "thunk_FUN_0008113a"
            ],
            "code": "\nint convert_number_to_string_0008113a(undefined4 *array,uint number,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negative;\n  \n  if (base == 0) {\n    result = (**(code **)*array)(array,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = FUN_000810cc(array,0x2d);\n      negative = FUN_000810fc(array,-number,10);\n      return negative + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = FUN_000810fc(array,number,base,param_4);\n  return result;\n}\n\n",
            "current_name": "convert_number_to_string_0008113a",
            "entrypoint": "0x0008113a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008113a": "convert_number_to_string_0008113a",
                "iVar1": "result",
                "iVar2": "negative",
                "param_1": "array",
                "param_2": "number",
                "param_3": "base"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008117a": {
            "additional_data": {
                "FUN_000810d8": {
                    "calculate_first_result": 1,
                    "calculate_value": 4,
                    "get_second_value": 1,
                    "perform_task1": 1,
                    "process_input": 1
                },
                "FUN_0008113a": {
                    "calculate_second_result": 1,
                    "fetch_value": 1,
                    "get_data": 1,
                    "get_first_value": 1,
                    "get_result_value": 1,
                    "multiply_values": 1,
                    "perform_operation": 1,
                    "perform_task2": 1
                },
                "FUN_0008117a": {
                    "add_and_get_values": 1,
                    "add_values": 1,
                    "calculate_sum": 24,
                    "calculate_total": 1,
                    "sum_of_function_results": 1,
                    "sum_of_functions": 1,
                    "sum_of_results": 1,
                    "sum_of_sub_functions": 1
                },
                "iVar1": {
                    "first_value": 3,
                    "result1": 24,
                    "result_of_fetch": 1,
                    "return_value1": 1,
                    "sum1": 1,
                    "value1": 1
                },
                "iVar2": {
                    "result2": 24,
                    "result_of_process": 1,
                    "return_value2": 1,
                    "second_value": 3,
                    "sum2": 1,
                    "value2": 1
                },
                "param_1": {
                    "input": 10,
                    "input_parameter": 1,
                    "input_value": 17,
                    "value": 3
                }
            },
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_sum_0008117a(undefined4 input_value)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_0008113a();\n  result2 = FUN_000810d8(input_value);\n  return result2 + result1;\n}\n\n",
            "current_name": "calculate_sum_0008117a",
            "entrypoint": "0x0008117a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008117a": "calculate_sum_0008117a",
                "iVar1": "result1",
                "iVar2": "result2",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081190": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array_of_relocation_entries": 1,
                    "array_of_relocations": 1,
                    "array_of_structs": 1,
                    "rel_array": 6,
                    "relocation_array": 10,
                    "relocation_entries": 5,
                    "relocation_info_array": 1,
                    "relocation_table": 3,
                    "relocations": 1
                },
                "FUN_00081190": {
                    "call_function_if_needed": 1,
                    "decrement_and_call_function_if_zero": 1,
                    "decrement_and_call_if_zero": 2,
                    "execute_callback_if_condition_met": 1,
                    "execute_callback_if_decremented_to_zero": 1,
                    "execute_function_if_condition_met": 3,
                    "execute_function_if_info_is_zero": 1,
                    "execute_function_if_info_minus_one": 1,
                    "execute_function_if_last_relocation_is_zero": 1,
                    "execute_function_if_r_info_equals_zero": 2,
                    "execute_if_condition_met": 1,
                    "execute_if_counter_is_zero": 1,
                    "execute_if_index_is_zero": 1,
                    "execute_if_index_zero": 1,
                    "execute_if_negative_relocation": 1,
                    "execute_if_r_info_decreased_to_zero": 2,
                    "execute_if_r_info_is_decremented_to_zero": 1,
                    "execute_if_r_info_is_zero": 4,
                    "execute_if_relocation_info_valid": 1,
                    "execute_if_zero_rel_info": 1,
                    "execute_relocation": 1,
                    "execute_triggered_function": 1,
                    "invoke_function_if_info_valid": 1
                },
                "code": {
                    "function_pointer": 2,
                    "function_to_execute": 1
                },
                "r_info": {
                    "info": 9,
                    "relocation_info": 16
                },
                "r_offset": {
                    "offset": 9,
                    "relocation_offset": 16
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_if_r_info_is_decremented_to_zero_00081190(void)\n\n{\n  if ((relocation_array[6].relocation_info != 0xffffffff) &&\n     (relocation_array[6].relocation_info = relocation_array[6].relocation_info - 1,\n     relocation_array[6].relocation_info == 0)) {\n    (*(function_pointer *)((int)&relocation_array[0].relocation_offset + 1))();\n  }\n  return;\n}\n\n",
            "current_name": "execute_if_r_info_is_decremented_to_zero_00081190",
            "entrypoint": "0x00081190",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00081190": "execute_if_r_info_is_decremented_to_zero_00081190",
                "code": "function_pointer",
                "r_info": "relocation_info",
                "r_offset": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811b0": {
            "additional_data": {
                "FUN_000811b0": {
                    "initialize_buffer": 2,
                    "initialize_data": 4,
                    "initialize_data_structure": 3,
                    "initialize_data_structures": 1,
                    "initialize_function": 1,
                    "initialize_memory": 12,
                    "initialize_param": 3,
                    "initialize_param1": 2,
                    "initialize_parameters": 2,
                    "reset_memory": 1
                },
                "FUN_00081f00": {
                    "fill_buffer": 1,
                    "fill_memory": 1,
                    "initialize_array": 2,
                    "initialize_block": 2,
                    "initialize_block_with_data": 1,
                    "initialize_chunk": 1,
                    "initialize_memory": 8,
                    "initialize_memory_block": 3,
                    "initialize_memory_section": 1,
                    "set_default_value": 1,
                    "set_initial_values": 2,
                    "set_memory": 1,
                    "set_memory_block": 1,
                    "set_param_to_zero": 2
                },
                "param_1": {
                    "buffer": 1,
                    "buffer_address": 1,
                    "data": 2,
                    "data_address": 1,
                    "data_pointer": 1,
                    "data_structure": 4,
                    "input": 1,
                    "mem_block": 1,
                    "mem_ptr": 1,
                    "memory": 1,
                    "memory_address": 7,
                    "memory_block": 2,
                    "memory_pointer": 1,
                    "memory_ptr": 1,
                    "param": 4,
                    "parameter": 1,
                    "ptr_param": 1
                },
                "param_2": {
                    "block_type": 1,
                    "data": 1,
                    "default_value": 5,
                    "fill_value": 1,
                    "initial_value": 1,
                    "padding": 1,
                    "param": 2,
                    "param2": 3,
                    "param_2": 1,
                    "start_value": 4,
                    "undefined_value": 1,
                    "unused": 2,
                    "unused_param": 1,
                    "value": 3,
                    "zero": 1
                },
                "param_3": {
                    "array_size": 2,
                    "block_size": 2,
                    "buffer_size": 1,
                    "chunk_length": 1,
                    "memory_size": 6,
                    "param3": 3,
                    "section_size": 1,
                    "size": 12
                }
            },
            "called": [
                "FUN_00081f00"
            ],
            "calling": [
                "FUN_0008089c"
            ],
            "code": "\nint initialize_memory_000811b0(int memory_address)\n\n{\n  FUN_00081f00(memory_address,0,0x80);\n  *(undefined4 *)(memory_address + 0x80) = 0;\n  *(undefined4 *)(memory_address + 0x84) = 0;\n  return memory_address;\n}\n\n",
            "current_name": "initialize_memory_000811b0",
            "entrypoint": "0x000811b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811ca": {
            "additional_data": {
                "FUN_000811ca": {
                    "update_and_increment": 1,
                    "update_and_store_character": 1,
                    "update_and_store_value": 2,
                    "update_buffer": 17,
                    "update_buffer_with_param": 1,
                    "update_circular_buffer": 1,
                    "update_data": 2,
                    "update_param": 2,
                    "update_param_value": 1,
                    "update_pointer_and_check": 1,
                    "update_value": 1,
                    "update_value_in_array": 1
                },
                "param_1": {
                    "array_address": 1,
                    "base_addr": 1,
                    "base_address": 2,
                    "buffer": 15,
                    "buffer_address": 3,
                    "buffer_ptr": 1,
                    "character_data": 1,
                    "data_array": 1,
                    "data_pointer": 2,
                    "input_ptr": 1,
                    "memory_address": 1,
                    "param_address": 1,
                    "pointer": 1
                },
                "param_2": {
                    "data": 5,
                    "new_byte": 1,
                    "new_character": 1,
                    "new_data": 3,
                    "new_value": 14,
                    "value": 7
                },
                "uVar1": {
                    "current_index": 4,
                    "current_position": 1,
                    "new_index": 6,
                    "new_pointer": 1,
                    "next_index": 7,
                    "updated_index": 12
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_buffer_with_param_000811ca(int buffer,undefined new_value)\n\n{\n  uint updated_index;\n  \n  updated_index = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (updated_index != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = new_value;\n    *(uint *)(buffer + 0x80) = updated_index;\n  }\n  return;\n}\n\n",
            "current_name": "update_buffer_with_param_000811ca",
            "entrypoint": "0x000811ca",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811ca": "update_buffer_with_param_000811ca",
                "param_1": "buffer",
                "param_2": "new_value",
                "uVar1": "updated_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811e8": {
            "additional_data": {
                "FIND_VALUE": {
                    "find_value": 1
                },
                "FUN_000811e8": {
                    "calculate_result": 1,
                    "find_index": 1,
                    "find_valid_value": 1,
                    "perform_reverse_operation": 1,
                    "process_data": 6,
                    "process_function": 2,
                    "reverse_and_update_int_array": 1
                },
                "PARAM_1": {
                    "array": 1
                },
                "iVar1": {
                    "index": 1,
                    "random_value": 4,
                    "result": 19,
                    "return_value": 2,
                    "thunk_result": 5
                },
                "param_1": {
                    "array": 9,
                    "data": 4,
                    "data_array": 2,
                    "input_array": 11,
                    "int_array": 1,
                    "parameters": 3
                },
                "thunk_FUN_000816d8": {
                    "generate_random_value": 1,
                    "generate_value": 1,
                    "get_next_index": 1,
                    "get_random_number": 2,
                    "get_random_value": 6,
                    "get_result": 2,
                    "get_thunk_result": 1,
                    "get_thunk_value": 1,
                    "get_value": 1,
                    "get_value_from_thunk": 1,
                    "random_value": 1
                }
            },
            "called": [
                "thunk_FUN_000816d8"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nint process_data_000811e8(int *input_array)\n\n{\n  int result;\n  \n  result = thunk_FUN_000816d8();\n  input_array[3] = result;\n  do {\n    result = (**(code **)(*input_array + 0xc))(input_array);\n    if (-1 < result) {\n      return result;\n    }\n    result = thunk_FUN_000816d8();\n  } while ((uint)(result - input_array[3]) < (uint)input_array[2]);\n  return -1;\n}\n\n",
            "current_name": "process_data_000811e8",
            "entrypoint": "0x000811e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811e8": "process_data_000811e8",
                "iVar1": "result",
                "param_1": "input_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081214": {
            "additional_data": {
                "FUN_000811e8": {
                    "check_status": 1,
                    "check_value": 2,
                    "get_buffer_value": 1,
                    "get_comparison_result": 1,
                    "get_first_element": 1,
                    "get_next_data": 1,
                    "get_next_element": 1,
                    "get_next_index": 1,
                    "get_next_result": 2,
                    "get_next_value": 4,
                    "get_result": 2,
                    "get_return_value": 1,
                    "get_value": 4
                },
                "FUN_00081214": {
                    "decode_and_process_data": 1,
                    "parse_data": 1,
                    "process_data": 24,
                    "read_and_process_data": 2,
                    "reverse_and_process_data": 1
                },
                "FUN_000814f6": {
                    "copy_data": 1,
                    "find_pattern": 1,
                    "get_next_value": 2,
                    "initialize": 1,
                    "initialize_array": 2,
                    "initialize_data": 13,
                    "initialize_ptr": 1,
                    "update_data": 1
                },
                "FUN_0008159e": {
                    "process_byte": 2,
                    "process_data": 2,
                    "process_element": 3,
                    "process_result": 6,
                    "process_value": 5,
                    "send_data": 4
                },
                "param_1": {
                    "arg1": 7,
                    "data": 2,
                    "data1": 1,
                    "data_buffer": 3,
                    "data_ptr": 7,
                    "input": 1,
                    "input1": 3,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "param1": 2,
                    "param_ptr": 1
                },
                "param_2": {
                    "arg2": 7,
                    "array_ptr": 1,
                    "buffer": 2,
                    "buffer_ptr": 2,
                    "buffer_size": 1,
                    "data2": 1,
                    "index_buffer": 2,
                    "input2": 3,
                    "input_param2": 1,
                    "input_ptr": 1,
                    "length_ptr": 1,
                    "output": 1,
                    "output_param": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "param2": 2,
                    "param_val": 1,
                    "result_ptr": 1,
                    "value_to_add": 1
                },
                "param_3": {
                    "desired_value": 1,
                    "param3": 1,
                    "target": 6,
                    "target_data": 1,
                    "target_value": 22
                },
                "uVar1": {
                    "array_value": 1,
                    "current_index": 1,
                    "current_value": 1,
                    "result": 20,
                    "return_value": 6,
                    "status": 2
                }
            },
            "called": [
                "FUN_0008159e",
                "FUN_000811e8",
                "FUN_000814f6"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nvoid read_and_process_data_00081214(undefined4 data_ptr,undefined4 arg2,uint target_value)\n\n{\n  uint result;\n  \n  FUN_000814f6(data_ptr,&DAT_00085637);\n  while ((result = FUN_000811e8(arg2), -1 < (int)result && (result != target_value))) {\n    FUN_0008159e(data_ptr,result & 0xff);\n  }\n  return;\n}\n\n",
            "current_name": "read_and_process_data_00081214",
            "entrypoint": "0x00081214",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081214": "read_and_process_data_00081214",
                "param_1": "data_ptr",
                "param_2": "arg2",
                "param_3": "target_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081248": {
            "additional_data": {
                "0x10": {
                    "base_address": 2,
                    "offset": 3
                },
                "0x80": {
                    "address1_offset": 1,
                    "first_offset": 2,
                    "first_value_offset": 1,
                    "offset1": 2
                },
                "0x84": {
                    "address2_offset": 1,
                    "offset2": 2,
                    "second_offset": 2,
                    "second_value_offset": 1
                },
                "FUN_00081248": {
                    "calculate_difference": 27,
                    "calculate_difference_and_mask": 3,
                    "calculate_variable_difference": 1
                },
                "PTR_X": {
                    "base_ptr": 1
                },
                "PTR_Y": {
                    "offset_ptr": 1
                },
                "int": {
                    "integer": 1
                },
                "param_1": {
                    "input": 5,
                    "input_parameter": 1,
                    "input_value": 25
                },
                "temp1": {
                    "offset_value": 1
                },
                "temp2": {
                    "result": 1
                },
                "temp3": {
                    "masked_result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "code": "\nuinteger calculate_difference_and_mask_00081248(integer input_value)\n\n{\n  return *(integer *)(*(integer *)(input_value + 0x10) + 0x80) - *(integer *)(*(integer *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "current_name": "calculate_difference_and_mask_00081248",
            "entrypoint": "0x00081248",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081248": "calculate_difference_and_mask_00081248",
                "int": "integer",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081276": {
            "additional_data": {
                "FUN_00081276": {
                    "extract_byte_from_array": 1,
                    "extract_byte_from_buffer": 13,
                    "extract_byte_from_data": 1,
                    "extract_byte_from_memory": 3,
                    "get_byte_from_buffer": 2,
                    "get_next_byte": 10,
                    "get_next_byte_from_buffer": 1
                },
                "bVar1": {
                    "byte_value": 1,
                    "extracted_byte": 17,
                    "next_byte": 11
                },
                "iVar2": {
                    "buffer": 2,
                    "buffer_address": 3,
                    "buffer_info": 1,
                    "buffer_pointer": 2,
                    "buffer_ptr": 8,
                    "data_offset": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "element_address": 1,
                    "memory_block_address": 1,
                    "pointer": 1,
                    "ptr_data": 1,
                    "ptr_data_info": 1,
                    "ptr_param_1": 1,
                    "struct_ptr": 4
                },
                "param_1": {
                    "array_address": 1,
                    "buffer": 6,
                    "buffer_address": 8,
                    "buffer_index": 2,
                    "buffer_offset": 1,
                    "data": 1,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "input": 2,
                    "input_data": 1,
                    "input_ptr": 1,
                    "memory_address": 2,
                    "param": 1,
                    "pointer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nuint get_next_byte_from_buffer_00081276(int buffer_address)\n\n{\n  byte extracted_byte;\n  int buffer_ptr;\n  \n  buffer_ptr = *(int *)(buffer_address + 0x10);\n  if (*(int *)(buffer_ptr + 0x80) != *(int *)(buffer_ptr + 0x84)) {\n    extracted_byte = *(byte *)(buffer_ptr + *(int *)(buffer_ptr + 0x84));\n    *(uint *)(buffer_ptr + 0x84) = *(int *)(buffer_ptr + 0x84) + 1U & 0x7f;\n    return (uint)extracted_byte;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "get_next_byte_from_buffer_00081276",
            "entrypoint": "0x00081276",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081276": "get_next_byte_from_buffer_00081276",
                "bVar1": "extracted_byte",
                "iVar2": "buffer_ptr",
                "param_1": "buffer_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000812b8": {
            "additional_data": {
                "FUN_000812b8": {
                    "update_data": 18,
                    "update_memory": 1,
                    "update_param": 1,
                    "update_parameter": 3,
                    "update_status": 1,
                    "update_value": 5,
                    "update_value_in_memory": 1,
                    "validate_and_update_value": 1
                },
                "iVar1": {
                    "data_address": 2,
                    "data_element": 1,
                    "data_offset": 2,
                    "data_pointer": 4,
                    "data_ptr": 1,
                    "data_struct": 1,
                    "offset": 1,
                    "ptr": 1,
                    "ptr1": 8,
                    "ptr_data": 2,
                    "ptr_to_struct": 1,
                    "struct_address": 1,
                    "struct_ptr": 1,
                    "temp_variable1": 1,
                    "tmp_var1": 1,
                    "value": 1,
                    "value1": 1,
                    "var1": 1
                },
                "param_1": {
                    "base_address": 2,
                    "data": 6,
                    "data_address": 1,
                    "data_index": 1,
                    "data_offset": 1,
                    "data_pointer": 4,
                    "data_ptr": 3,
                    "data_struct": 2,
                    "input": 2,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_pointer": 1,
                    "memory_address": 2,
                    "object_address": 1,
                    "param": 2,
                    "value_ptr": 1
                },
                "param_2": {
                    "new_data": 2,
                    "new_param_value": 1,
                    "new_value": 21,
                    "status": 1,
                    "value": 6
                },
                "uVar2": {
                    "new_index": 9,
                    "new_val": 1,
                    "new_value_index": 1,
                    "ptr2": 1,
                    "temp_variable2": 1,
                    "tmp_var2": 1,
                    "updated_index": 2,
                    "updated_value": 14,
                    "value2": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nundefined4 update_data_000812b8(int data,undefined4 new_value)\n\n{\n  int ptr1;\n  uint updated_value;\n  \n  ptr1 = *(int *)(data + 0x14);\n  if ((*(int *)(*(int *)(data + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptr1 + 0x84) == *(int *)(ptr1 + 0x80))) {\n    *(undefined4 *)(*(int *)(data + 0x18) + 0x1c) = new_value;\n  }\n  else {\n    updated_value = *(int *)(ptr1 + 0x80) + 1U & 0x8000007f;\n    if ((int)updated_value < 0) {\n      updated_value = (updated_value - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptr1 + 0x84) == updated_value);\n    *(char *)(ptr1 + *(int *)(ptr1 + 0x80)) = (char)new_value;\n    *(uint *)(*(int *)(data + 0x14) + 0x80) = updated_value;\n    *(undefined4 *)(*(int *)(data + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_data_000812b8",
            "entrypoint": "0x000812b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "iVar1": "ptr1",
                "param_1": "data",
                "param_2": "new_value",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081348": {
            "additional_data": {
                "FUN_00081348": {
                    "initialize_function": 5,
                    "initialize_param1": 1,
                    "initialize_parameters": 17,
                    "initialize_params": 7,
                    "set_initial_values": 1
                },
                "param_1": {
                    "array": 1,
                    "function_params": 1,
                    "output_array": 7,
                    "output_buffer": 1,
                    "output_params": 2,
                    "param_array": 3,
                    "parameter_array": 1,
                    "parameters": 11,
                    "parameters_arr": 1,
                    "params": 2,
                    "params_array": 1
                },
                "param_2": {
                    "input_param": 1,
                    "input_param1": 2,
                    "input_value": 4,
                    "param2": 4,
                    "param2_value": 4,
                    "param_value2": 1,
                    "value1": 8,
                    "value2": 7
                },
                "param_3": {
                    "flag": 2,
                    "input_byte": 1,
                    "input_flag": 2,
                    "input_param2": 2,
                    "param3": 4,
                    "param3_value": 4,
                    "param_value3": 1,
                    "value2": 8,
                    "value3": 7
                },
                "param_4": {
                    "input_param3": 2,
                    "input_value2": 1,
                    "new_value1": 1,
                    "param4": 4,
                    "param4_value": 4,
                    "param_8": 1,
                    "param_value4": 1,
                    "parameter1": 1,
                    "value1": 1,
                    "value3": 8,
                    "value4": 7
                },
                "param_5": {
                    "input_param4": 2,
                    "input_value3": 1,
                    "new_value2": 1,
                    "param5": 4,
                    "param5_value": 4,
                    "param_12": 1,
                    "param_value5": 1,
                    "parameter2": 1,
                    "value2": 1,
                    "value4": 8,
                    "value5": 7
                },
                "param_6": {
                    "input_param5": 2,
                    "input_value4": 1,
                    "new_value3": 1,
                    "param6": 4,
                    "param6_value": 4,
                    "param_16": 1,
                    "param_value6": 1,
                    "parameter3": 1,
                    "value3": 1,
                    "value5": 8,
                    "value6": 7
                }
            },
            "called": [],
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "code": "\nvoid initialize_parameters_00081348(undefined4 *parameters,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[6] = value1;\n  *parameters = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(parameters + 7) = value2;\n  parameters[4] = value4;\n  parameters[8] = value3;\n  parameters[5] = value5;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_00081348",
            "entrypoint": "0x00081348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081348": "initialize_parameters_00081348",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813dc": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_array": 1,
                    "elf_rel_array": 2,
                    "rel_array": 2,
                    "relocation_array": 1
                },
                "FUN_00080aa8": {
                    "initialize_memory_ptr": 1
                },
                "FUN_000813dc": {
                    "initialize_components": 1,
                    "initialize_config": 1,
                    "initialize_configuration": 1,
                    "initialize_data": 5,
                    "initialize_device": 1,
                    "initialize_function": 13,
                    "initialize_graphics_settings": 1,
                    "initialize_memory": 1,
                    "initialize_module": 4,
                    "initialize_program": 1,
                    "initialize_values": 1,
                    "initialize_widget": 1
                },
                "byte": {
                    "data_byte": 1
                },
                "iVar1": {
                    "buffer_address": 1,
                    "config1": 1,
                    "local_var1": 2,
                    "module_var": 1,
                    "offset": 1,
                    "temp_int": 1,
                    "temp_var": 1,
                    "temp_var1": 11,
                    "temp_variable1": 1,
                    "tmp_var1": 1,
                    "var1": 4,
                    "variable1": 6
                },
                "initializeFunction": {
                    "main_function": 1
                },
                "param_1": {
                    "component_pointer": 1,
                    "config_address": 1,
                    "config_param": 1,
                    "data_address": 3,
                    "device_address": 1,
                    "function_data": 1,
                    "function_parameter": 1,
                    "input_param": 4,
                    "memory_block": 1,
                    "module_address": 3,
                    "module_base": 1,
                    "param1": 11,
                    "param_ptr": 1,
                    "widget_address": 1
                },
                "param_2": {
                    "divider": 1,
                    "division_factor": 1,
                    "division_param": 1,
                    "factor": 1,
                    "num_blocks": 1,
                    "offset": 1,
                    "offset_factor": 1,
                    "page_size": 7,
                    "param2": 11,
                    "param_divisor": 1,
                    "param_multiplier": 1,
                    "param_value": 3,
                    "scaling_factor": 1
                },
                "puVar2": {
                    "component_array": 1,
                    "config2": 1,
                    "config_ptr": 1,
                    "data_pointer": 4,
                    "device_data": 1,
                    "memory_ptr": 1,
                    "module_data": 2,
                    "module_data_ptr": 1,
                    "module_pointer": 1,
                    "pointer2": 2,
                    "pointer_var": 4,
                    "pointer_var1": 1,
                    "pointer_var2": 1,
                    "pointer_variable": 1,
                    "pointer_variable2": 1,
                    "ptr": 1,
                    "settings_ptr": 1,
                    "var2": 1,
                    "var_array_ptr": 1,
                    "variable2": 3,
                    "widget_pointer": 1
                },
                "r_offset": {
                    "offset": 3,
                    "offset_value": 1,
                    "offset_var": 1
                }
            },
            "called": [
                "FUN_00080aa8"
            ],
            "calling": [
                "FUN_000801e0"
            ],
            "code": "\nvoid initialize_function_000813dc(int param1,uint param2)\n\n{\n  int temp_var1;\n  undefined4 *pointer_var;\n  \n  FUN_00080aa8(*(undefined4 *)(param1 + 0x20));\n  pointer_var = *(undefined4 **)(param1 + 0x18);\n  pointer_var[0x48] = 0x202;\n  *pointer_var = 0xac;\n  pointer_var[1] = 0x800;\n  pointer_var[8] = elf_rel_array[6].offset / param2 >> 4;\n  pointer_var[3] = 0xffffffff;\n  pointer_var[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(data_byte *)(param1 + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(data_byte *)(param1 + 0x1c) & 0x1f);\n  temp_var1 = *(int *)(param1 + 0x10);\n  *(undefined4 *)(temp_var1 + 0x84) = 0;\n  *(undefined4 *)(temp_var1 + 0x80) = 0;\n  temp_var1 = *(int *)(param1 + 0x14);\n  *(undefined4 *)(temp_var1 + 0x84) = 0;\n  *(undefined4 *)(temp_var1 + 0x80) = 0;\n  *pointer_var = 0x50;\n  return;\n}\n\n",
            "current_name": "initialize_function_000813dc",
            "entrypoint": "0x000813dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf_rel_array",
                "FUN_000813dc": "initialize_function_000813dc",
                "byte": "data_byte",
                "iVar1": "temp_var1",
                "param_1": "param1",
                "param_2": "param2",
                "puVar2": "pointer_var",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081438": {
            "additional_data": {
                "FUN_00081348": {
                    "configure_device": 1,
                    "initialize": 2,
                    "perform_additional_tasks": 1,
                    "perform_initialization": 4,
                    "perform_setup": 1,
                    "prepare_data": 1
                },
                "FUN_00081438": {
                    "extract_and_assign_data": 1,
                    "initialize_data": 3,
                    "initialize_data_structure": 1,
                    "initialize_function": 17,
                    "initialize_function_pointer": 1,
                    "initialize_parameters": 1,
                    "initialize_pointer": 2,
                    "initialize_pointer_and_value": 3,
                    "set_function_data": 1,
                    "set_function_pointer_and_param": 1
                },
                "param_1": {
                    "function_data": 1,
                    "function_output": 1,
                    "function_pointer": 1,
                    "function_ptr": 1,
                    "output_array": 15,
                    "output_data": 2,
                    "output_pointer": 5,
                    "result_pointer": 4
                },
                "param_2": {
                    "input_data": 5,
                    "input_parameter": 1,
                    "input_value": 22,
                    "param_value": 1,
                    "parameter": 1
                },
                "param_3": {
                    "param3": 1,
                    "setup_param1": 1,
                    "unused_1": 1,
                    "unused_param1": 1
                },
                "param_4": {
                    "param4": 1,
                    "setup_param2": 1,
                    "unused_2": 1,
                    "unused_param2": 1
                }
            },
            "called": [
                "FUN_00081348"
            ],
            "calling": [
                "FUN_0008089c"
            ],
            "code": "\nundefined4 * initialize_function_pointer_00081438(undefined4 *output_array,undefined4 input_value)\n\n{\n  FUN_00081348();\n  *output_array = &PTR_FUN_000812b8_1_00085680;\n  output_array[9] = input_value;\n  return output_array;\n}\n\n",
            "current_name": "initialize_function_pointer_00081438",
            "entrypoint": "0x00081438",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081438": "initialize_function_pointer_00081438",
                "param_1": "output_array",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008145c": {
            "additional_data": {
                "FUN_0008145c": {
                    "calculate_adjusted_value": 3,
                    "calculate_coordinate": 1,
                    "calculate_difference_and_scale": 1,
                    "calculate_final_value": 1,
                    "calculate_gradient": 1,
                    "calculate_interpolated_value": 3,
                    "calculate_interpolation": 7,
                    "calculate_interpolation_value": 1,
                    "calculate_linear_interpolation": 3,
                    "calculate_new_value": 4,
                    "calculate_param_difference": 1,
                    "calculate_shifted_value": 1,
                    "calculate_weighted_average": 4
                },
                "new_value_1": {
                    "range_difference": 1
                },
                "new_value_2": {
                    "output_difference": 1
                },
                "new_variable_name_1": {
                    "difference_value_1": 1
                },
                "new_variable_name_2": {
                    "difference_value_2": 1
                },
                "param_1": {
                    "first_parameter": 1,
                    "first_value": 3,
                    "initial_value": 3,
                    "input1": 1,
                    "original_value": 3,
                    "previous_value": 1,
                    "previous_value_1": 1,
                    "start_value": 12,
                    "starting_param": 1,
                    "value_1": 3,
                    "x1": 2
                },
                "param_2": {
                    "current_value": 1,
                    "end_value": 2,
                    "input2": 1,
                    "lower_bound": 1,
                    "middle_param": 1,
                    "previous_value": 3,
                    "previous_value_2": 1,
                    "reference_value_1": 1,
                    "second_parameter": 1,
                    "second_value": 3,
                    "start_index": 1,
                    "start_parameter": 1,
                    "start_point": 2,
                    "start_point1": 1,
                    "start_range": 5,
                    "start_value": 1,
                    "subtracted_value1": 1,
                    "value_2": 2,
                    "x0": 1,
                    "x2": 1
                },
                "param_3": {
                    "current_value_1": 1,
                    "end_index": 1,
                    "end_parameter": 1,
                    "end_point": 2,
                    "end_point1": 1,
                    "end_range": 7,
                    "end_value": 1,
                    "ending_param": 1,
                    "final_value": 2,
                    "input3": 1,
                    "max_value": 1,
                    "reference_value_2": 1,
                    "subtracted_value2": 1,
                    "target_value": 1,
                    "third_parameter": 1,
                    "third_value": 3,
                    "upper_bound": 1,
                    "value_3": 2,
                    "x2": 1,
                    "x3": 1
                },
                "param_4": {
                    "added_value": 1,
                    "current_value_2": 1,
                    "fourth_parameter": 1,
                    "fourth_value": 2,
                    "initial_value": 3,
                    "initial_weight": 1,
                    "lower_limit": 1,
                    "lower_range": 1,
                    "min_value": 1,
                    "offset": 1,
                    "shifted_value": 1,
                    "start_bounds": 1,
                    "start_interpolated_value": 1,
                    "start_output": 3,
                    "start_point2": 1,
                    "start_range": 3,
                    "start_result": 3,
                    "starting_value": 1,
                    "value_4": 2,
                    "y0": 1,
                    "y1": 1
                },
                "param_5": {
                    "added_value2": 1,
                    "adjusted_value": 1,
                    "end_bounds": 1,
                    "end_interpolated_value": 1,
                    "end_output": 3,
                    "end_point2": 1,
                    "end_range": 1,
                    "end_result": 3,
                    "ending_value": 1,
                    "fifth_parameter": 1,
                    "fifth_value": 3,
                    "final_value": 1,
                    "final_weight": 1,
                    "gradient": 1,
                    "input5": 1,
                    "new_final_value": 1,
                    "new_value": 2,
                    "target_range": 1,
                    "upper_limit": 1,
                    "upper_range": 1,
                    "value_5": 2,
                    "y1": 1,
                    "y2": 1
                },
                "param_6": {
                    "interpolated_value": 1
                },
                "return": {
                    "result": 1
                },
                "return_value": {
                    "interpolated_value": 1
                },
                "uint": {
                    "unsigned_int": 1,
                    "unsigned_integer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "code": "\nint calculate_linear_interpolation_0008145c(int start_value,int start_range,int end_range,int start_output,int end_output)\n\n{\n  result (unsigned_integer)((start_value - start_range) * (end_output - start_output)) / (unsigned_integer)(end_range - start_range) + start_output;\n}\n\n",
            "current_name": "calculate_linear_interpolation_0008145c",
            "entrypoint": "0x0008145c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008145c": "calculate_linear_interpolation_0008145c",
                "param_1": "start_value",
                "param_2": "start_range",
                "param_3": "end_range",
                "param_4": "start_output",
                "param_5": "end_output",
                "return": "result",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081472": {
            "additional_data": {
                "FUN_00081472": {
                    "execute_and_return_param": 1,
                    "execute_function": 6,
                    "execute_function_and_return_pointer": 1,
                    "execute_operation": 2,
                    "initialize_and_return_pointer": 2,
                    "initialize_device": 1,
                    "initialize_function": 1,
                    "initialize_parameter": 1,
                    "perform_function_and_return_param": 1,
                    "process": 1,
                    "process_and_return": 1,
                    "process_data": 10,
                    "process_parameter": 1,
                    "update_and_return_pointer": 1
                },
                "FUN_00081800": {
                    "execute_initialization": 1,
                    "execute_process": 1,
                    "execute_sub_function": 3,
                    "execute_task": 2,
                    "handle_data": 5,
                    "invoke_sub_function": 1,
                    "perform_task": 1,
                    "perform_update": 1,
                    "process_data_item": 1,
                    "process_element": 1,
                    "process_parameter": 1,
                    "reverse_data": 1
                },
                "param_1": {
                    "array_pointer": 1,
                    "data": 8,
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "device_ptr": 1,
                    "function_parameter": 4,
                    "input_array": 4,
                    "input_data": 1,
                    "input_param": 1,
                    "input_pointer": 1,
                    "param": 1,
                    "parameter": 3,
                    "pointer": 2
                }
            },
            "called": [
                "FUN_00081800"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nundefined4 * process_data_00081472(undefined4 *data)\n\n{\n  FUN_00081800(*data);\n  return data;\n}\n\n",
            "current_name": "process_data_00081472",
            "entrypoint": "0x00081472",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081472": "process_data_00081472",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081480": {
            "additional_data": {
                "FUN_00081480": {
                    "clear_and_reset_params": 1,
                    "clear_data": 1,
                    "clear_memory": 3,
                    "initialize_parameters": 1,
                    "initialize_params": 1,
                    "reset_and_clear_memory": 1,
                    "reset_and_disable": 1,
                    "reset_data": 3,
                    "reset_memory": 1,
                    "reset_param": 3,
                    "reset_param1": 1,
                    "reset_param_values": 1,
                    "reset_parameters": 4,
                    "reset_params": 3,
                    "reset_values": 2,
                    "reset_variables": 4
                },
                "FUN_00081800": {
                    "clear_data": 3,
                    "execute_reset": 1,
                    "finalize_clear": 1,
                    "perform_reset": 2,
                    "reset_data": 1,
                    "reset_function": 11,
                    "reset_sub_function": 1,
                    "reset_values": 1,
                    "reset_variables": 1
                },
                "param_1": {
                    "array": 1,
                    "data": 3,
                    "data_ptr": 1,
                    "input_array": 2,
                    "memory": 2,
                    "memory_array": 1,
                    "memory_pointer": 2,
                    "param": 2,
                    "param_array": 2,
                    "parameters": 5,
                    "params": 5,
                    "pointer": 1,
                    "values": 1,
                    "variable": 2
                }
            },
            "called": [
                "FUN_00081800"
            ],
            "calling": [
                "FUN_000814d0"
            ],
            "code": "\nvoid reset_param_values_00081480(int *params)\n\n{\n  if (*params != 0) {\n    FUN_00081800();\n  }\n  *params = 0;\n  params[2] = 0;\n  params[1] = 0;\n  return;\n}\n\n",
            "current_name": "reset_param_values_00081480",
            "entrypoint": "0x00081480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081480": "reset_param_values_00081480",
                "param_1": "params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081496": {
            "additional_data": {
                "FUN_00081496": {
                    "check_and_update_param": 1,
                    "update_and_assign_value": 1,
                    "update_and_check_param": 2,
                    "update_and_check_value": 1,
                    "update_and_return": 1,
                    "update_and_store_values": 2,
                    "update_array": 2,
                    "update_array_and_check": 2,
                    "update_array_if_valid": 1,
                    "update_array_value": 1,
                    "update_array_with_condition": 1,
                    "update_array_with_result": 1,
                    "update_data": 1,
                    "update_param": 1,
                    "update_param_and_check_error": 1,
                    "update_param_and_return": 3,
                    "update_param_and_return_value": 1,
                    "update_parameter": 1,
                    "update_parameter_and_check": 1,
                    "update_parameter_and_return": 1,
                    "update_parameter_and_return_value": 1,
                    "update_parameter_value": 1,
                    "update_value_and_index": 2,
                    "update_value_and_index_if_valid": 1
                },
                "FUN_00081f9c": {
                    "perform_operation": 1
                },
                "iVar1": {
                    "result": 19,
                    "result_var": 1,
                    "return_value": 11
                },
                "param_1": {
                    "array": 10,
                    "array_ptr": 2,
                    "data": 2,
                    "data_ptr": 1,
                    "input_array": 1,
                    "input_param": 1,
                    "p_param_array": 1,
                    "param_array": 3,
                    "param_ptr": 1,
                    "parameter_array": 2,
                    "ptr_param": 1,
                    "ptr_value": 1,
                    "value": 1,
                    "value_and_index": 2,
                    "value_array": 1,
                    "values_arr": 1
                },
                "param_2": {
                    "count": 2,
                    "index": 10,
                    "input_number": 1,
                    "input_param": 1,
                    "num_elements": 1,
                    "param_val": 1,
                    "param_value": 2,
                    "size": 5,
                    "value": 8
                },
                "param_3": {
                    "arg1": 3,
                    "param1": 3,
                    "param3": 11,
                    "param_3": 6,
                    "param_a": 3,
                    "value1": 3,
                    "var3": 1
                },
                "param_4": {
                    "arg2": 3,
                    "param2": 3,
                    "param4": 11,
                    "param_4": 6,
                    "param_b": 3,
                    "value2": 3,
                    "var4": 1
                }
            },
            "called": [
                "FUN_00081f9c"
            ],
            "calling": [
                "FUN_000814ae"
            ],
            "code": "\nint update_param_and_return_value_00081496(int *array,int index,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  result = FUN_00081f9c(*array,index + 1,param3,param4,param4);\n  if (result != 0) {\n    *array = result;\n    array[1] = index;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "update_param_and_return_value_00081496",
            "entrypoint": "0x00081496",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081496": "update_param_and_return_value_00081496",
                "iVar1": "result",
                "param_1": "array",
                "param_2": "index",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814ae": {
            "additional_data": {
                "FUN_00081496": {
                    "check_condition": 1,
                    "initialize_if_needed": 1,
                    "initialize_variable": 1,
                    "perform_operation": 1,
                    "process_array": 1,
                    "process_input": 1,
                    "process_input_array": 1,
                    "update_value": 2
                },
                "FUN_000814ae": {
                    "check_and_set": 1,
                    "check_and_update": 2,
                    "check_and_update_data": 2,
                    "check_and_update_param": 2,
                    "check_and_update_param_values": 1,
                    "check_and_update_parameters": 1,
                    "check_and_update_params": 2,
                    "check_and_update_value": 10,
                    "check_and_update_value_in_range": 1,
                    "check_and_update_values": 3,
                    "check_condition_and_set_value": 1,
                    "check_param_validity": 1,
                    "check_threshold": 1,
                    "validate_and_clear_variable": 1,
                    "validate_and_set_value": 1,
                    "validate_and_zero_check": 1
                },
                "iVar1": {
                    "result": 28,
                    "return_value": 1
                },
                "param_1": {
                    "array": 4,
                    "data": 2,
                    "input_array": 4,
                    "input_param_array": 1,
                    "param_array": 3,
                    "params": 2,
                    "ptr_array": 1,
                    "value_and_range": 1,
                    "value_array": 5,
                    "value_pointer": 2,
                    "value_ptr": 3,
                    "values": 2,
                    "variable": 1
                },
                "param_2": {
                    "array_length": 1,
                    "comparison_value": 2,
                    "limit": 2,
                    "max_value": 2,
                    "required_value": 1,
                    "size": 1,
                    "target_value": 1,
                    "threshold": 19,
                    "value": 2
                },
                "param_3": {
                    "param3": 1,
                    "param_3": 3
                },
                "param_4": {
                    "param4": 1,
                    "param_4": 3
                }
            },
            "called": [
                "FUN_00081496"
            ],
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "code": "\nundefined4 check_and_update_value_in_range_000814ae(int *value_array,uint threshold)\n\n{\n  int result;\n  \n  if ((*value_array == 0) || ((uint)value_array[1] < threshold)) {\n    result = FUN_00081496(value_array);\n    if (result == 0) {\n      return 0;\n    }\n    if (value_array[2] == 0) {\n      *(undefined *)*value_array = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_update_value_in_range_000814ae",
            "entrypoint": "0x000814ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814ae": "check_and_update_value_in_range_000814ae",
                "iVar1": "result",
                "param_1": "value_array",
                "param_2": "threshold"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814d0": {
            "additional_data": {
                "FUN_00081480": {
                    "cleanup": 1,
                    "cleanup_data": 2,
                    "do_something_if_invalid": 1,
                    "handle_false_condition": 1,
                    "handle_invalid_input": 1,
                    "handle_success": 1,
                    "handle_valid_parameter": 1,
                    "perform_action": 1,
                    "process_invalid_data": 1,
                    "reset_array": 1,
                    "update_param1": 1
                },
                "FUN_000814ae": {
                    "check_array_values": 1,
                    "check_condition": 3,
                    "check_data": 1,
                    "check_data_validity": 2,
                    "check_input_validity": 1,
                    "check_param1": 1,
                    "check_parameter_validity": 1,
                    "check_validity": 1,
                    "validate_params": 1
                },
                "FUN_000814d0": {
                    "check_and_process_data": 2,
                    "check_and_update_params": 1,
                    "check_and_update_values": 1,
                    "initialize_data": 1,
                    "process_data": 10,
                    "update_array_value": 1,
                    "update_param": 1,
                    "update_param_and_call_function": 1,
                    "validate_and_execute": 2,
                    "validate_and_process": 2,
                    "validate_and_process_data": 6,
                    "validate_and_update_input": 1,
                    "validate_and_update_parameter": 1,
                    "validate_and_update_params": 1
                },
                "FUN_000825cc": {
                    "do_something_with_data": 1,
                    "perform_action": 2,
                    "perform_operation": 2,
                    "process_data": 2,
                    "process_param": 1,
                    "process_valid_data": 1,
                    "update_data": 1,
                    "update_params_and_call_function": 1,
                    "update_values": 1
                },
                "iVar1": {
                    "check_result": 1,
                    "condition_result": 1,
                    "result": 22,
                    "validation_result": 2,
                    "validity_check_result": 1,
                    "verification_result": 1
                },
                "param_1": {
                    "array": 5,
                    "data": 10,
                    "data_array": 2,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "input_array": 4,
                    "param": 1,
                    "param_array": 1,
                    "parameter_array": 1,
                    "parameters": 1,
                    "params": 1,
                    "validated_data": 1
                },
                "param_2": {
                    "data_size": 1,
                    "new_value": 2,
                    "param": 1,
                    "param2": 1,
                    "param_a": 1,
                    "param_ptr": 1,
                    "param_value": 1,
                    "size": 3,
                    "value": 2,
                    "value1": 13,
                    "value_1": 4
                },
                "param_3": {
                    "config": 1,
                    "data_value": 1,
                    "input_param": 1,
                    "key": 1,
                    "new_value": 1,
                    "old_value": 1,
                    "param3": 1,
                    "param_b": 1,
                    "param_data": 1,
                    "param_value": 1,
                    "target": 1,
                    "value": 2,
                    "value2": 13,
                    "value_2": 4
                }
            },
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "calling": [
                "FUN_000814f6"
            ],
            "code": "\nundefined4 * validate_and_process_data_000814d0(undefined4 *data,undefined4 value1,undefined4 value2)\n\n{\n  int result;\n  \n  result = FUN_000814ae(data,value2);\n  if (result == 0) {\n    FUN_00081480(data);\n  }\n  else {\n    data[2] = value2;\n    FUN_000825cc(*data,value1);\n  }\n  return data;\n}\n\n",
            "current_name": "validate_and_process_data_000814d0",
            "entrypoint": "0x000814d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814d0": "validate_and_process_data_000814d0",
                "iVar1": "result",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814f6": {
            "additional_data": {
                "FUN_000814d0": {
                    "assign_params_and_result": 1,
                    "assign_values": 1,
                    "copy_array": 1,
                    "copy_data": 2,
                    "copy_data_into_array": 1,
                    "copy_data_to_memory": 1,
                    "copy_memory": 1,
                    "copy_params": 3,
                    "copy_values": 1,
                    "copy_values_to_array": 1,
                    "copy_values_to_output": 1,
                    "copy_values_to_param_array": 1,
                    "populate_input_array": 1,
                    "populate_param_array": 1,
                    "process_input": 1,
                    "process_values": 1,
                    "set_array_elements": 1,
                    "set_param_values": 1,
                    "set_paramater_values": 1,
                    "set_params": 3,
                    "update_params": 1
                },
                "FUN_000814f6": {
                    "initialize": 1,
                    "initialize_array": 2,
                    "initialize_data": 1,
                    "initialize_function": 1,
                    "initialize_input_array": 1,
                    "initialize_memory": 2,
                    "initialize_param": 4,
                    "initialize_param_array": 6,
                    "initialize_paramater": 1,
                    "initialize_parameters": 4,
                    "initialize_params": 6,
                    "initialize_pointers": 1,
                    "initialize_variables": 1
                },
                "FUN_00082688": {
                    "allocate_memory": 1,
                    "calculate_result": 3,
                    "calculate_value": 8,
                    "fetch_data_from_memory": 1,
                    "get_data_size": 1,
                    "get_modified_value": 1,
                    "get_valid_size": 1,
                    "get_value": 1,
                    "obtain_result": 1,
                    "process_data": 1,
                    "process_input": 4,
                    "process_input_data": 1,
                    "process_param": 1
                },
                "param_1": {
                    "array": 3,
                    "data_array": 1,
                    "input_array": 1,
                    "memory": 1,
                    "memory_ptr": 1,
                    "output": 2,
                    "output_array": 5,
                    "output_param": 1,
                    "output_params": 1,
                    "param_array": 10,
                    "parameters": 1,
                    "params_array": 2,
                    "result_array": 1,
                    "variable_list": 1
                },
                "param_2": {
                    "input_data": 1,
                    "input_value": 19,
                    "length": 1,
                    "output": 1,
                    "param_1_value": 1,
                    "param_size": 2,
                    "size": 3,
                    "value": 3
                },
                "param_3": {
                    "copied_value": 2,
                    "copy_result": 2,
                    "copy_value": 1,
                    "input": 1,
                    "param_2_value": 1,
                    "param_return_value": 1,
                    "param_value": 1,
                    "result": 4,
                    "result_value": 3,
                    "source": 1,
                    "source_ptr": 1,
                    "value": 1
                },
                "uVar1": {
                    "data": 1,
                    "input_result": 1,
                    "processed_value": 1,
                    "result": 11,
                    "result_value": 2,
                    "return_value": 4
                }
            },
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nundefined4 * initialize_param_array_000814f6(undefined4 *param_array,int input_value)\n\n{\n  undefined4 result;\n  \n  *param_array = 0;\n  param_array[1] = 0;\n  param_array[2] = 0;\n  if (input_value != 0) {\n    result = FUN_00082688(input_value);\n    FUN_000814d0(param_array,input_value,result);\n  }\n  return param_array;\n}\n\n",
            "current_name": "initialize_param_array_000814f6",
            "entrypoint": "0x000814f6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814f6": "initialize_param_array_000814f6",
                "param_1": "param_array",
                "param_2": "input_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008151c": {
            "additional_data": {
                "FUN_0008151c": {
                    "copy_and_reset_parameters": 1,
                    "copy_data": 1,
                    "copy_parameters": 4,
                    "update_param": 1,
                    "update_param_values": 1,
                    "update_parameters": 10,
                    "update_params": 11,
                    "update_values": 2
                },
                "FUN_00081800": {
                    "handle_param_change_error": 1,
                    "reset_array": 2,
                    "reset_destination": 2,
                    "reset_destination_params": 2,
                    "reset_old_params": 1,
                    "reset_original_params": 1,
                    "reset_params": 11,
                    "reset_params_to_default": 1,
                    "reset_source": 1,
                    "reset_source_params": 3,
                    "reset_target_param": 1,
                    "reset_values": 1,
                    "set_to_default": 1
                },
                "FUN_000825cc": {
                    "copy_and_update_parameters": 1,
                    "copy_array_section": 1,
                    "copy_data": 1,
                    "copy_param_values": 2,
                    "copy_params": 16,
                    "copy_partial_params": 1,
                    "copy_specific_data": 1,
                    "copy_uint_arrays": 1,
                    "copy_values": 3,
                    "update_params_and_call": 1
                },
                "LAB_00081558": {
                    "end": 1,
                    "end_label": 1,
                    "update_params_end": 1
                },
                "param_1": {
                    "dest_array": 1,
                    "destination_array": 1,
                    "old_params": 5,
                    "original_params": 2,
                    "param_1_ptr": 1,
                    "previous_params": 1,
                    "source": 3,
                    "source_array": 1,
                    "source_param": 1,
                    "source_params": 13,
                    "src_params": 1
                },
                "param_2": {
                    "dest_params": 2,
                    "destination": 3,
                    "destination_array": 1,
                    "destination_params": 3,
                    "new_params": 12,
                    "param_2_ptr": 1,
                    "source_array": 1,
                    "src_array": 1,
                    "target_param": 1,
                    "target_params": 5
                }
            },
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "calling": [
                "FUN_00081560"
            ],
            "code": "\nvoid update_params_0008151c(int *source_params,int *new_params)\n\n{\n  if (*source_params != 0) {\n    if ((*new_params != 0) && ((uint)new_params[2] <= (uint)source_params[1])) {\n      FUN_000825cc();\n      source_params[2] = new_params[2];\n      goto update_params_0008151c_end;\n    }\n    FUN_00081800();\n  }\n  *source_params = *new_params;\n  source_params[1] = new_params[1];\n  source_params[2] = new_params[2];\n  *new_params = 0;\n  new_params[1] = 0;\nupdate_params_0008151c_end:\n  new_params[2] = 0;\n  return;\n}\n\n",
            "current_name": "update_params_0008151c",
            "entrypoint": "0x0008151c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008151c": "update_params_0008151c",
                "LAB_00081558": "update_params_end",
                "param_1": "source_params",
                "param_2": "new_params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081560": {
            "additional_data": {
                "FUN_0008151c": {
                    "check_values": 1,
                    "do_something": 1,
                    "execute_callback": 2,
                    "execute_func": 1,
                    "handle_error": 1,
                    "handle_inequality": 1,
                    "handle_mismatch": 3,
                    "handle_param_inequality": 1,
                    "handle_params_not_equal": 1,
                    "invoke_sub_function": 1,
                    "perform_action": 4,
                    "perform_additional_check": 1,
                    "perform_operation": 1,
                    "print_parameters": 1,
                    "process_inputs": 2,
                    "process_params": 1,
                    "process_values": 2
                },
                "FUN_00081560": {
                    "check_and_call": 1,
                    "check_and_call_function": 5,
                    "check_and_execute": 1,
                    "check_equal_values": 1,
                    "check_equality": 2,
                    "check_if_equal": 1,
                    "check_param_equality": 1,
                    "check_parameters": 9,
                    "check_params_and_call_function": 1,
                    "check_params_equal": 1,
                    "check_params_equality": 1,
                    "compare_and_call": 4,
                    "compare_and_call_function": 1,
                    "compare_and_invoke_function": 1,
                    "validate_parameters": 1
                },
                "param_1": {
                    "callback_input_1": 1,
                    "first_param": 2,
                    "first_param_handle": 1,
                    "input1": 2,
                    "input_1": 6,
                    "input_value1": 1,
                    "pointer_1": 1,
                    "ptr1": 1,
                    "ptr_value_1": 1,
                    "value1": 11,
                    "value_1": 4
                },
                "param_2": {
                    "callback_input_2": 1,
                    "input2": 2,
                    "input_2": 6,
                    "input_value2": 1,
                    "pointer_2": 1,
                    "ptr2": 1,
                    "ptr_value_2": 1,
                    "second_param": 2,
                    "second_param_handle": 1,
                    "value2": 11,
                    "value_2": 4
                }
            },
            "called": [
                "FUN_0008151c"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint check_parameters_00081560(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    FUN_0008151c();\n  }\n  return value1;\n}\n\n",
            "current_name": "check_parameters_00081560",
            "entrypoint": "0x00081560",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081560": "check_parameters_00081560",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081570": {
            "additional_data": {
                "FUM_000825cc": {
                    "modify_array": 1
                },
                "FUN_000814ae": {
                    "check_array_bounds": 1,
                    "check_array_value": 1,
                    "check_data": 1,
                    "check_data_validity": 1,
                    "check_validity": 1,
                    "check_value": 1,
                    "is_valid_offset": 1
                },
                "FUN_00081570": {
                    "check_and_modify_array": 1,
                    "check_and_modify_data": 1,
                    "check_and_modify_params": 1,
                    "check_and_process_data": 2,
                    "check_and_update": 3,
                    "check_and_update_param": 2,
                    "check_and_update_parameter_value": 1,
                    "check_and_update_pointer": 2,
                    "check_and_update_value": 2,
                    "extract_data_and_update": 1,
                    "process_data": 3,
                    "process_function": 1,
                    "process_parameters": 1,
                    "reverse_and_update_array": 1,
                    "update_data": 1,
                    "validate_and_modify_data": 1,
                    "validate_and_update": 1,
                    "validate_and_update_data": 2,
                    "validate_and_update_param": 1,
                    "verify_and_update": 1,
                    "verify_and_update_data": 1,
                    "verify_params_and_update": 1
                },
                "FUN_000825cc": {
                    "copy_data": 2,
                    "update_array": 1,
                    "update_array_value": 1,
                    "update_data": 1,
                    "update_elements": 1,
                    "update_value": 1
                },
                "F_000814ae": {
                    "check_data": 1
                },
                "iVar1": {
                    "is_valid": 1,
                    "result": 27,
                    "result_code": 1,
                    "return_value": 1
                },
                "iVar2": {
                    "array_element": 1,
                    "array_element2": 2,
                    "array_index": 2,
                    "array_offset": 2,
                    "array_value": 2,
                    "current_offset": 3,
                    "data_array_element_2": 1,
                    "data_offset": 1,
                    "offset_value": 1,
                    "old_offset": 1,
                    "param2_value": 3,
                    "pointer_value": 1,
                    "prev_offset": 1,
                    "previous_offset": 2,
                    "ptr_offset": 1,
                    "second_element": 2,
                    "stored_offset": 1,
                    "value": 4
                },
                "param_1": {
                    "array": 11,
                    "data": 7,
                    "data_array": 5,
                    "data_pointer": 1,
                    "input_array": 4,
                    "param_array": 1,
                    "parameters": 2
                },
                "param_2": {
                    "array_length": 1,
                    "condition": 1,
                    "length": 5,
                    "param_size": 1,
                    "size": 21,
                    "value": 1,
                    "value_to_check": 1
                },
                "param_3": {
                    "index": 1,
                    "new_param_value": 1,
                    "offset": 29
                }
            },
            "called": [
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "calling": [
                "FUN_0008159e"
            ],
            "code": "\nundefined4 extract_data_and_update_00081570(int *array,int size,int offset)\n\n{\n  int result;\n  int value;\n  \n  value = array[2];\n  if (size == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    result = FUN_000814ae(array,value + offset);\n    if (result == 0) {\n      return 0;\n    }\n    FUN_000825cc(*array + array[2],size);\n    array[2] = value + offset;\n  }\n  return 1;\n}\n\n",
            "current_name": "extract_data_and_update_00081570",
            "entrypoint": "0x00081570",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081570": "extract_data_and_update_00081570",
                "iVar1": "result",
                "iVar2": "value",
                "param_1": "array",
                "param_2": "size",
                "param_3": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008159e": {
            "additional_data": {
                "FUN_00081570": {
                    "secondary_function": 1
                },
                "FUN_0008159e": {
                    "decompiled_function": 2,
                    "execute_process": 1,
                    "extract_and_process_data": 2,
                    "extract_data": 2,
                    "extract_data_from_binary": 1,
                    "extract_information": 1,
                    "process_data": 2,
                    "reverse": 1,
                    "reverse_and_store": 1
                },
                "local_c": {
                    "data_buffer": 1,
                    "local_var": 2,
                    "local_var1": 1,
                    "local_variable": 4,
                    "local_variable_c": 2,
                    "new_local_variable": 1,
                    "output": 3,
                    "output_array": 1,
                    "result": 2,
                    "return_value": 1,
                    "reversed_array": 1,
                    "temp": 1,
                    "temp_c": 1,
                    "temp_data": 1,
                    "temp_param": 1,
                    "temp_var": 1,
                    "temp_variable": 2,
                    "temporary_value": 1,
                    "temporary_var": 1
                },
                "param_1": {
                    "data": 2,
                    "data_ptr": 2,
                    "info_ptr": 1,
                    "input": 1,
                    "input1": 3,
                    "input_1": 3,
                    "input_array": 2,
                    "input_data": 3,
                    "input_param": 6,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_parameter": 1,
                    "input_parameter1": 1,
                    "input_parameter_1": 1,
                    "input_pointer": 1,
                    "input_value": 2
                },
                "param_2": {
                    "another_parameter": 1,
                    "array_length": 1,
                    "array_size": 1,
                    "count": 1,
                    "flag": 1,
                    "input2": 3,
                    "input_2": 3,
                    "input_length": 1,
                    "input_param_2": 1,
                    "input_parameter2": 1,
                    "input_parameter_2": 1,
                    "limit": 1,
                    "output_buffer": 2,
                    "output_param": 1,
                    "param2": 2,
                    "size": 8,
                    "unused_param": 1
                },
                "param_3": {
                    "additional_parameter": 1,
                    "buffer_size": 1,
                    "data": 4,
                    "destination": 1,
                    "extracted_data": 1,
                    "flag": 1,
                    "flags": 1,
                    "input3": 3,
                    "input_3": 3,
                    "input_param2": 1,
                    "input_param_3": 1,
                    "input_parameter3": 1,
                    "input_parameter_3": 1,
                    "output_data": 2,
                    "output_param": 3,
                    "output_pointer": 1,
                    "param3": 2,
                    "reverse_param": 1,
                    "string_value": 1,
                    "target_element": 1
                },
                "uStack_8": {
                    "param3_copy": 2,
                    "stack_value": 1,
                    "stack_variable": 3,
                    "stack_variable_8": 2,
                    "temp": 3,
                    "temp_stack": 1,
                    "temp_var": 1
                }
            },
            "called": [
                "FUN_00081570"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nvoid extract_and_process_data_0008159e(undefined4 input_param,undefined4 size,undefined4 data)\n\n{\n  undefined4 local_variable;\n  undefined4 temp;\n  \n  temp = data;\n  FUN_00081570(input_param,&local_variable,1,0,input_param);\n  return;\n}\n\n",
            "current_name": "extract_and_process_data_0008159e",
            "entrypoint": "0x0008159e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008159e": "extract_and_process_data_0008159e",
                "local_c": "local_variable",
                "param_1": "input_param",
                "param_2": "size",
                "param_3": "data",
                "uStack_8": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815b8": {
            "additional_data": {
                "FUN_000815b8": {
                    "check_and_compare": 1,
                    "check_byte_validity": 1,
                    "check_byte_value": 2,
                    "check_data": 1,
                    "check_if_byte_is_missing": 1,
                    "check_if_equal": 1,
                    "check_input": 4,
                    "check_input_validity": 4,
                    "check_param": 2,
                    "check_param_and_return_result": 1,
                    "check_param_validity": 2,
                    "check_parameter": 1,
                    "check_validity": 1,
                    "check_value": 4,
                    "check_value_in_range": 2,
                    "check_value_range": 1,
                    "check_zero_or_null": 1,
                    "compare_param_values": 1
                },
                "FUN_00082390": {
                    "calculate_checksum": 1
                },
                "iVar2": {
                    "is_in_range": 2,
                    "is_valid": 5,
                    "result": 21,
                    "validity_status": 1
                },
                "param_1": {
                    "argument_ptr": 1,
                    "array": 2,
                    "buffer": 1,
                    "buffer_array": 1,
                    "byte_array": 1,
                    "byte_array1": 1,
                    "byte_array_ptr": 1,
                    "data": 1,
                    "data_array": 2,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "input_array": 6,
                    "input_data": 4,
                    "input_pointer": 1,
                    "param_array": 2,
                    "param_list": 2,
                    "pointer_array": 2
                },
                "param_2": {
                    "byte_array": 3,
                    "byte_array2": 1,
                    "byte_array_ptr": 1,
                    "byte_ptr": 1,
                    "check_data": 1,
                    "compare_array": 1,
                    "data": 1,
                    "data_ptr": 1,
                    "default_input": 1,
                    "input": 1,
                    "input_array": 1,
                    "input_byte": 2,
                    "input_byte_ptr": 1,
                    "input_data": 1,
                    "input_pointer": 2,
                    "input_ptr": 2,
                    "key": 1,
                    "param_value": 1,
                    "second_param": 1,
                    "single_byte": 1,
                    "target_data": 1,
                    "target_value": 1,
                    "value": 4
                },
                "uVar1": {
                    "array_length": 8,
                    "array_size": 1,
                    "byte_count": 1,
                    "byte_value": 5,
                    "converted_value": 2,
                    "data_length": 2,
                    "first_byte": 1,
                    "input_byte": 1,
                    "input_size": 1,
                    "input_value": 2,
                    "length": 3,
                    "param_length": 1,
                    "valid_len": 1
                }
            },
            "called": [
                "FUN_00082390"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint check_input_validity_000815b8(byte **input_array,byte *value)\n\n{\n  uint array_length;\n  int result;\n  \n  if (input_array[2] == (byte *)0x0) {\n    if (value == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (value != (byte *)0x0) {\n      array_length = FUN_00082390(*input_array);\n      goto LAB_000815d4;\n    }\n    value = *input_array;\n  }\n  array_length = (uint)*value;\nLAB_000815d4:\n  result = 1 - array_length;\n  if (1 < array_length) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "check_input_validity_000815b8",
            "entrypoint": "0x000815b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815b8": "check_input_validity_000815b8",
                "iVar2": "result",
                "param_1": "input_array",
                "param_2": "value",
                "uVar1": "array_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815de": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "some_array": 1
                },
                "FUN_000815de": {
                    "decode_number": 1,
                    "extract_integer_from_buffer": 1,
                    "extract_integer_from_bytes": 1,
                    "parse_input": 1,
                    "parse_integer": 11,
                    "parse_integer_from_byte": 1,
                    "parse_integer_from_bytes": 1,
                    "parse_integer_from_string": 3,
                    "parse_number": 9,
                    "parse_signed_integer": 1
                },
                "bVar1": {
                    "bit_flags": 1,
                    "byte1": 1,
                    "byte_flag": 2,
                    "byte_val": 1,
                    "byte_val1": 1,
                    "byte_value": 6,
                    "cur_byte": 1,
                    "current_byte": 4,
                    "current_byte_value": 1,
                    "current_flag": 1,
                    "flag": 2,
                    "flag1": 1,
                    "flag_byte": 1,
                    "flags": 4,
                    "info_byte": 1,
                    "next_byte": 1,
                    "rel_info_byte": 1
                },
                "bVar2": {
                    "byte2": 1,
                    "byte_val2": 1,
                    "flag2": 1,
                    "is_negative": 23,
                    "negative": 1,
                    "negative_flag": 3
                },
                "iVar7": {
                    "adjusted_byte_value": 1,
                    "adjusted_value": 2,
                    "byte_offset": 1,
                    "char_diff": 1,
                    "char_difference": 1,
                    "char_offset": 1,
                    "char_value": 1,
                    "converted_value": 1,
                    "difference": 1,
                    "digit": 4,
                    "digit_value": 3,
                    "index": 1,
                    "offset": 2,
                    "offset_value": 1,
                    "parsed_value": 2,
                    "subtract_value": 1,
                    "subtracted_value": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_variable": 1,
                    "tmp_var": 1
                },
                "iVar8": {
                    "check_flag": 1,
                    "conversion_flag": 1,
                    "first_digit_neg": 1,
                    "has_digit": 2,
                    "has_valid_number": 1,
                    "is_digit_found": 1,
                    "is_first_digit": 3,
                    "is_negative": 1,
                    "is_parsing_valid": 1,
                    "is_valid": 9,
                    "is_value_negative": 1,
                    "sign_change": 1,
                    "sign_check": 1,
                    "sign_flag": 2,
                    "state": 1,
                    "temp_var2": 1,
                    "valid": 1,
                    "valid_number": 1
                },
                "param_1": {
                    "buffer": 1,
                    "byte_array": 3,
                    "data": 4,
                    "input": 12,
                    "input_byte_array": 1,
                    "input_data": 4,
                    "input_string": 3
                },
                "pbVar4": {
                    "byte_pointer": 2,
                    "current_byte": 9,
                    "current_byte_ptr": 1,
                    "current_char": 3,
                    "data_ptr": 1,
                    "input_ptr": 2,
                    "next_byte": 1,
                    "next_char": 1,
                    "ptr": 9,
                    "ptr_to_current_char": 1
                },
                "pbVar6": {
                    "current": 1,
                    "current_byte": 6,
                    "current_byte_pointer": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "next_byte": 8,
                    "next_byte_ptr": 1,
                    "next_char": 4,
                    "next_data_ptr": 1,
                    "next_ptr": 2,
                    "ptr2": 2,
                    "ptr_to_next_char": 1,
                    "start_byte": 1
                },
                "uVar10": {
                    "boundary": 1,
                    "limit": 1,
                    "lower_limit": 2,
                    "max_limit": 1,
                    "max_result": 1,
                    "max_value": 6,
                    "min_divisor": 3,
                    "min_result": 1,
                    "min_value": 8,
                    "overflow_value": 3,
                    "positive_overflow_limit": 1,
                    "sign_bit": 1,
                    "temp_var4": 1
                },
                "uVar3": {
                    "extracted_int": 1,
                    "parsed_integer": 5,
                    "parsed_number": 3,
                    "parsed_value": 2,
                    "result": 19
                },
                "uVar5": {
                    "ascii_value": 1,
                    "byte_value": 11,
                    "byte_value2": 1,
                    "ch": 2,
                    "char_value": 1,
                    "current": 1,
                    "current_byte": 3,
                    "current_byte_value": 1,
                    "current_char": 2,
                    "current_value": 6,
                    "temp": 1
                },
                "uVar9": {
                    "check_overflow": 1,
                    "divide_by_ten": 1,
                    "division_limit": 1,
                    "divisor": 3,
                    "max_digit_threshold": 1,
                    "max_div_10": 2,
                    "max_divisor": 7,
                    "max_value": 5,
                    "max_value_div10": 1,
                    "negative_overflow_limit": 1,
                    "overflow_threshold": 1,
                    "temp_var3": 1,
                    "threshold": 3,
                    "upper_limit": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parse_integer_from_string_000815de(byte **input)\n\n{\n  byte byte_value;\n  byte is_negative;\n  uint result;\n  byte *ptr;\n  uint byte_value;\n  byte *next_byte;\n  int digit;\n  int is_valid;\n  uint max_divisor;\n  uint min_value;\n  \n  ptr = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    next_byte = ptr;\n    ptr = next_byte + 1;\n    byte_value = (uint)*next_byte;\n    byte_value = *(byte *)(some_array[270].r_info + byte_value + 1);\n    is_negative = byte_value & 8;\n  } while ((byte_value & 8) != 0);\n  if (byte_value == 0x2d) {\n    ptr = next_byte + 2;\n    byte_value = (uint)next_byte[1];\n    is_negative = 1;\n  }\n  else if (byte_value == 0x2b) {\n    byte_value = (uint)next_byte[1];\n    ptr = next_byte + 2;\n  }\n  if (is_negative == 0) {\n    min_value = 0x7fffffff;\n  }\n  else {\n    min_value = 0x80000000;\n  }\n  max_divisor = min_value / 10;\n  is_valid = 0;\n  result = 0;\n  do {\n    byte_value = *(byte *)(some_array[270].r_info + byte_value + 1);\n    if ((byte_value & 4) == 0) {\n      if ((byte_value & 3) == 0) {\nLAB_0008277e:\n        if (is_valid == -1) {\n          if (is_negative == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)some_array[140].r_offset = 0x22;\n        }\n        else if (is_negative != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((byte_value & 3) == 1) {\n        digit = 0x37;\n      }\n      else {\n        digit = 0x57;\n      }\n      digit = byte_value - digit;\n    }\n    else {\n      digit = byte_value - 0x30;\n    }\n    if (9 < digit) goto LAB_0008277e;\n    if (is_valid != -1) {\n      if ((max_divisor <= result && result != max_divisor) || ((result == max_divisor && ((int)(min_value % 10) < digit))))\n      {\n        is_valid = -1;\n      }\n      else {\n        result = result * 10 + digit;\n        is_valid = 1;\n      }\n    }\n    byte_value = (uint)*ptr;\n    ptr = ptr + 1;\n  } while( true );\n}\n\n",
            "current_name": "parse_integer_from_string_000815de",
            "entrypoint": "0x000815de",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "some_array",
                "FUN_000815de": "parse_integer_from_string_000815de",
                "bVar1": "byte_value",
                "bVar2": "is_negative",
                "iVar7": "digit",
                "iVar8": "is_valid",
                "param_1": "input",
                "pbVar4": "ptr",
                "pbVar6": "next_byte",
                "uVar10": "min_value",
                "uVar3": "result",
                "uVar5": "byte_value",
                "uVar9": "max_divisor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815e8": {
            "called": [],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000815e8",
            "entrypoint": "0x000815e8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000815ec": {
            "additional_data": {
                "FUNC_00080f08": {
                    "configure": 1,
                    "configure_device": 1,
                    "configure_mode": 1,
                    "configure_networking": 1,
                    "configure_options": 2,
                    "configure_settings": 5,
                    "enable_feature": 3,
                    "set_config": 1,
                    "set_configuration": 1,
                    "set_mode": 13,
                    "set_operating_mode": 1,
                    "set_operation_mode": 1
                },
                "FUNC_000815e8": {
                    "check_system_status": 1,
                    "configure_devices": 1,
                    "configure_hardware": 1,
                    "configure_settings": 4,
                    "configure_system": 3,
                    "execute_action": 1,
                    "execute_preparation": 1,
                    "finalize_process": 1,
                    "initialize_audio": 1,
                    "initialize_components": 1,
                    "initialize_data": 5,
                    "initialize_data_structures": 1,
                    "initialize_parameters": 1,
                    "initialize_resources": 2,
                    "initialize_variables": 1,
                    "perform_preprocessing": 1,
                    "perform_setup_tasks": 1,
                    "pre_processing": 1,
                    "prepare_data": 1,
                    "setup": 1,
                    "setup_hardware": 1
                },
                "FUN_000801e0": {
                    "decode_data": 1,
                    "execute_program": 1,
                    "handle_exception": 1,
                    "handle_interrupt": 1,
                    "helper_function": 1,
                    "initialize": 1,
                    "initialize_display": 1,
                    "initialize_graphics": 1,
                    "initialize_something": 1,
                    "initialize_system": 1,
                    "main": 1,
                    "main_loop": 1,
                    "perform_initialization": 1,
                    "perform_setup": 1,
                    "perform_startup_tasks": 1,
                    "process_data": 13,
                    "process_initialization": 1,
                    "process_input": 1,
                    "reverse_something": 1
                },
                "FUN_00080250": {
                    "check_condition": 1,
                    "check_conditions": 1,
                    "do_something": 2,
                    "execute_step": 1,
                    "execute_task": 2,
                    "fetch_data": 1,
                    "handle_input": 1,
                    "handle_timer_event": 1,
                    "perform_action": 8,
                    "perform_task": 1,
                    "perform_task_a": 1,
                    "process_data": 2,
                    "process_event": 1,
                    "process_input": 1,
                    "subfunction_one": 1,
                    "update_data": 2,
                    "update_graphics": 1,
                    "update_input": 1,
                    "update_state": 1
                },
                "FUN_00080774": {
                    "check_status": 1,
                    "cleanup": 1,
                    "cleanup_routine": 1,
                    "configure_settings": 2,
                    "do_initialization": 1,
                    "initialize_components": 1,
                    "initialize_subsystem": 1,
                    "initialize_system": 1,
                    "load_data": 1,
                    "perform_initialization": 1,
                    "perform_pre_setup": 1,
                    "perform_preprocessing": 1,
                    "perform_setup": 5,
                    "perform_startup": 1,
                    "perform_startup_tasks": 3,
                    "perform_task": 1,
                    "process_data": 2,
                    "reset": 1,
                    "set_configuration": 1,
                    "setup_configuration": 1,
                    "setup_connections": 1,
                    "setup_environment": 1,
                    "setup_input": 1
                },
                "FUN_00080970": {
                    "execute_task": 3,
                    "handle_events": 1,
                    "handle_input_event": 1,
                    "perform_action": 4,
                    "perform_actions": 1,
                    "perform_cleanup": 1,
                    "perform_cleanup_tasks": 1,
                    "perform_operation": 1,
                    "perform_postprocessing": 1,
                    "perform_task": 2,
                    "perform_task_b": 1,
                    "process_data": 3,
                    "process_data_item": 1,
                    "process_input": 1,
                    "subfunction_two": 1,
                    "update_data": 1,
                    "update_game_logic": 1,
                    "update_state": 4,
                    "update_status": 1,
                    "update_system_state": 1
                },
                "FUN_000815ec": {
                    "do_forever_loop": 1,
                    "execute_loop": 1,
                    "execute_main_loop": 4,
                    "initialize_system": 3,
                    "main_loop": 4,
                    "perform_continuous_processing": 1,
                    "run_application": 2,
                    "run_continuous_operations": 1,
                    "run_infinite_loop": 1,
                    "run_main_function": 1,
                    "run_main_loop": 8,
                    "run_process": 2
                },
                "FUN_00081618": {
                    "initialize": 7,
                    "initialize_component": 1,
                    "initialize_components": 2,
                    "initialize_graphics": 1,
                    "initialize_modules": 1,
                    "initialize_subsystem": 3,
                    "initialize_system": 13,
                    "initialize_variables": 1,
                    "perform_initialization": 1,
                    "start_subfunction": 1
                },
                "param_1": {
                    "data_param1": 1
                },
                "param_2": {
                    "data_param2": 1
                },
                "param_3": {
                    "data_param3": 1
                },
                "param_4": {
                    "data_param4": 1
                }
            },
            "called": [
                "FUN_00080250",
                "FUN_00081618",
                "FUN_00080774",
                "FUN_00080f08",
                "FUN_00080970",
                "FUN_000815e8",
                "FUN_000801e0"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid run_main_loop_000815ec(void)\n\n{\n  FUN_00081618();\n  FUN_00080774();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  FUN_000801e0();\n  do {\n    FUN_00080250();\n    FUN_00080970();\n  } while( true );\n}\n\n",
            "current_name": "run_main_loop_000815ec",
            "entrypoint": "0x000815ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815ec": "run_main_loop_000815ec"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081618": {
            "additional_data": {
                "": {
                    "": 2
                },
                "DAT_400e1a54": {
                    "data_value": 1,
                    "initial_value": 1
                },
                "FUN_00081618": {
                    "initialize_data": 14,
                    "initialize_data_register": 1,
                    "initialize_memory": 5,
                    "initialize_memory_address": 2,
                    "initialize_memory_region": 1,
                    "initiate_memory": 1,
                    "set_default_bits": 1,
                    "set_default_value": 1,
                    "set_initial_value": 5
                },
                "_DAT_400e1a54": {
                    "constant_value": 1,
                    "data_address": 6,
                    "data_pointer": 1,
                    "data_value": 1,
                    "data_variable": 1,
                    "default_bits": 1,
                    "default_value": 1,
                    "flag": 1,
                    "initial_value": 4,
                    "initialized_memory_address": 1,
                    "memory_address": 6,
                    "memory_value": 1,
                    "status_flag": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\n\n\nvoid initialize_data_register_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "current_name": "initialize_data_register_00081618",
            "entrypoint": "0x00081618",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081618": "initialize_data_register_00081618"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081624": {
            "additional_data": {
                "DAT_00084b44": {
                    "array_ptr": 1
                },
                "DAT_00084b48": {
                    "data_array": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 2
                },
                "FUN_00081624": {
                    "calculate_adjusted_value": 1,
                    "calculate_elapsed_time": 3,
                    "calculate_final_value": 1,
                    "calculate_new_value": 2,
                    "calculate_offset": 3,
                    "calculate_relocation_offset": 1,
                    "calculate_result": 5,
                    "calculate_return_value": 1,
                    "calculate_reversed_value": 1,
                    "calculate_time": 10,
                    "calculate_value": 2,
                    "compute_result": 1
                },
                "FUN_00081684": {
                    "calculate": 1,
                    "calculate_duration": 1,
                    "calculate_intermediate_value": 1,
                    "calculate_offset": 2,
                    "calculate_offset_value": 1,
                    "calculate_result": 2,
                    "calculate_sub_result": 2,
                    "calculate_value": 6,
                    "compute_value": 1,
                    "get_relocation_offset": 1,
                    "perform_calculation": 6
                },
                "iVar1": {
                    "adjusted_time": 1,
                    "elapsed_time": 1,
                    "result": 28,
                    "return_value": 1
                },
                "param_1": {
                    "array": 4,
                    "data": 1,
                    "data_index": 1,
                    "index": 19,
                    "input_param1": 1,
                    "pointer": 3,
                    "ptr": 2
                },
                "param_2": {
                    "check_value": 1,
                    "condition": 6,
                    "flag": 11,
                    "input_param2": 1,
                    "is_zero": 2,
                    "offset": 4,
                    "offset1": 1,
                    "param1": 1,
                    "val1": 3,
                    "value1": 1
                },
                "param_3": {
                    "input_param3": 1,
                    "multiplier": 19,
                    "offset2": 1,
                    "param2": 1,
                    "time_multiplier": 1,
                    "val2": 3,
                    "value": 2,
                    "value1": 2,
                    "value2": 1
                },
                "param_4": {
                    "additional_param": 1,
                    "constant_value": 1,
                    "input": 1,
                    "input_param4": 1,
                    "offset": 3,
                    "param": 12,
                    "param3": 1,
                    "param4": 1,
                    "param_4": 3,
                    "param_four": 1,
                    "unknown_value": 1,
                    "val3": 2,
                    "value": 2,
                    "value2": 1
                },
                "uVar2": {
                    "data": 2,
                    "data_value": 1,
                    "offset": 7,
                    "pointer_value": 1,
                    "result": 1,
                    "temp_value": 1,
                    "value": 17,
                    "variable": 1
                }
            },
            "called": [
                "FUN_00081684"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_elapsed_time_00081624(int index,int flag,int multiplier,undefined4 param)\n\n{\n  int result;\n  undefined4 value;\n  \n  value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    value = 0;\n  }\n  result = FUN_00081684(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),value,\n                       ((rel_array[6].r_offset / 1000000) * multiplier) / 0x12,param);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)rel_array[6].r_offset / 1000));\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_elapsed_time_00081624",
            "entrypoint": "0x00081624",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081624": "calculate_elapsed_time_00081624",
                "iVar1": "result",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "param",
                "uVar2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081684": {
            "additional_data": {
                "FUN_00081684": {
                    "check_and_count_bits": 1,
                    "check_and_count_matches": 1,
                    "check_and_count_occurrences": 1,
                    "check_and_return_index": 2,
                    "check_bit_pattern": 1,
                    "check_bit_sequence": 1,
                    "check_condition": 2,
                    "check_conditions": 4,
                    "check_match_count": 1,
                    "check_param": 2,
                    "check_param_conditions": 1,
                    "check_param_match": 2,
                    "check_pattern": 3,
                    "check_sequence": 2,
                    "find_first_index_with_value": 1,
                    "find_last_index": 1,
                    "find_matching_value_index": 1,
                    "find_occurrence": 1,
                    "find_occurrence_index": 1,
                    "find_param_value": 1,
                    "find_value_index": 1
                },
                "iVar1": {
                    "count": 2,
                    "found_index": 1,
                    "incorrect_bit_index": 1,
                    "index": 4,
                    "iteration_count": 2,
                    "match_count": 3,
                    "matched_count": 1,
                    "matching_count": 1,
                    "matching_index": 1,
                    "matching_iterations": 1,
                    "num_matched": 1,
                    "num_matches": 1,
                    "occurrence_count": 2,
                    "occurrence_index": 1,
                    "result": 5
                },
                "iVar1_": {
                    "counter": 1
                },
                "iVar2": {
                    "counter": 1
                },
                "param_1": {
                    "arr": 1,
                    "array": 10,
                    "bits": 1,
                    "data": 3,
                    "data_array": 4,
                    "data_ptr": 1,
                    "input_array": 5,
                    "pattern": 1,
                    "sequence": 2,
                    "value_ptr": 1,
                    "values": 2
                },
                "param_2": {
                    "bit_mask": 4,
                    "bitmask": 1,
                    "mask": 26
                },
                "param_3": {
                    "compare_val": 1,
                    "comparison_result": 1,
                    "comparison_value": 2,
                    "condition": 1,
                    "desired_value": 1,
                    "expected": 1,
                    "expected_value": 10,
                    "pattern": 3,
                    "target": 3,
                    "target_value": 4,
                    "value": 3,
                    "value_to_find": 1
                },
                "param_4": {
                    "array_length": 5,
                    "count": 2,
                    "iter_count": 1,
                    "iteration": 1,
                    "iteration_count": 3,
                    "iteration_limit": 1,
                    "length": 2,
                    "max_iterations": 8,
                    "num_iterations": 4,
                    "sequence_length": 2,
                    "size": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00081624"
            ],
            "code": "\nint check_param_conditions_00081684(uint *array,uint mask,uint expected_value,int max_iterations)\n\n{\n  int result;\n  \n  do {\n    if ((*array & mask) != expected_value) {\n      do {\n        if ((*array & mask) == expected_value) {\n          result = 0;\n          do {\n            if ((*array & mask) != expected_value) {\n              return result;\n            }\n            result = result + 1;\n          } while (max_iterations != result);\n          return 0;\n        }\n        max_iterations = max_iterations + -1;\n      } while (max_iterations != 0);\n      return 0;\n    }\n    max_iterations = max_iterations + -1;\n  } while (max_iterations != 0);\n  return 0;\n}\n\n",
            "current_name": "check_param_conditions_00081684",
            "entrypoint": "0x00081684",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081684": "check_param_conditions_00081684",
                "iVar1": "result",
                "param_1": "array",
                "param_2": "mask",
                "param_3": "expected_value",
                "param_4": "max_iterations"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816d8": {
            "additional_data": {
                "DAT_2007120c": {
                    "constant_value": 1,
                    "data": 6,
                    "global_data": 1,
                    "global_value": 2,
                    "global_variable": 5,
                    "global_variable_value": 1,
                    "memory_value": 1,
                    "return_value": 2
                },
                "FUN_000816d8": {
                    "get_constant_value": 1,
                    "get_dat_value": 1,
                    "get_data": 5,
                    "get_data_from_address": 1,
                    "get_data_value": 6,
                    "get_global_data": 3,
                    "get_global_value": 5,
                    "get_global_variable": 5,
                    "get_global_variable_value": 1,
                    "get_memory_value": 1,
                    "get_return_value": 2
                }
            },
            "called": [],
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "code": "\nundefined4 get_global_variable_value_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "current_name": "get_global_variable_value_000816d8",
            "entrypoint": "0x000816d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816d8": "get_global_variable_value_000816d8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816ec": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 2,
                    "relocation_array": 4
                },
                "FUN_000816ec": {
                    "process_relocations": 1,
                    "update_data": 9,
                    "update_data_and_call_function": 1,
                    "update_param_values": 1,
                    "update_rel_array": 1,
                    "update_rel_entry": 1,
                    "update_relocation": 1,
                    "update_relocation_entry": 11,
                    "update_relocation_info": 1,
                    "update_relocation_table": 2,
                    "update_values": 1
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "call_jumptable": 1,
                    "handle_error": 4,
                    "jmp_handler": 1,
                    "jump_table": 7,
                    "jump_table_entry": 1,
                    "jump_table_function": 3,
                    "jump_table_handler": 1,
                    "jumptable_function": 1,
                    "unknown_jump_table": 1,
                    "unrecovered_jump_table": 2
                },
                "param_1": {
                    "address": 6,
                    "address_to_replace": 1,
                    "data": 1,
                    "data1": 3,
                    "data_address": 1,
                    "input1": 1,
                    "new_address": 3,
                    "new_data1": 2,
                    "new_value1": 6,
                    "new_value_1": 1,
                    "offset": 1,
                    "old_value": 1,
                    "value1": 4
                },
                "param_2": {
                    "data": 1,
                    "data2": 3,
                    "input2": 1,
                    "new_data2": 2,
                    "new_value": 4,
                    "new_value2": 6,
                    "new_value_2": 1,
                    "old_address": 1,
                    "replacement_address": 1,
                    "value": 6,
                    "value1": 1,
                    "value2": 4
                },
                "param_3": {
                    "bitmask": 1,
                    "data3": 3,
                    "extra_value": 1,
                    "flag": 2,
                    "index": 1,
                    "input3": 1,
                    "mask": 2,
                    "new_data3": 2,
                    "new_offset": 1,
                    "new_value2": 1,
                    "new_value3": 6,
                    "new_value_3": 1,
                    "offset": 3,
                    "result": 1,
                    "value2": 1,
                    "value3": 4
                },
                "pdVar1": {
                    "array_pointer": 1,
                    "current_rel": 1,
                    "data_array": 1,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "pointer": 2,
                    "pointer1": 1,
                    "ptr_data": 1,
                    "rel_array": 1,
                    "rel_entry": 1,
                    "relocation": 1,
                    "relocation_entry": 15,
                    "temp_pointer": 1,
                    "temp_ptr": 1
                },
                "uVar2": {
                    "entry_index": 3,
                    "index": 26,
                    "relocation_index": 2
                },
                "uVar3": {
                    "bit_flag": 1,
                    "bit_mask": 21,
                    "bit_pattern": 1,
                    "bit_position": 1,
                    "bitmask": 2,
                    "bitwise_flag": 1,
                    "flag": 2,
                    "mask": 2
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_relocation_entry_000816ec(dword new_value1,dword new_value2,dword new_value3)\n\n{\n  dword *relocation_entry;\n  uint index;\n  uint bit_mask;\n  code *jump_table;\n  \n  if (relocation_array[48].r_offset == 0) {\n    relocation_array[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(relocation_array[48].r_offset + 4);\n  relocation_entry = (dword *)relocation_array[48].r_offset;\n  if (0x1f < (int)index) {\n    relocation_entry = (dword *)FUN_000817f0(400);\n    if (relocation_entry == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *relocation_entry = relocation_array[48].r_offset;\n    relocation_entry[1] = 0;\n    index = 0;\n    relocation_array[48].r_offset = (dword)relocation_entry;\n    relocation_entry[0x62] = 0;\n    relocation_entry[99] = 0;\n  }\n  bit_mask = 1 << (index & 0xff);\n  relocation_entry[index + 0x22] = new_value1;\n  relocation_entry[0x62] = relocation_entry[0x62] | bit_mask;\n  relocation_entry[index + 0x42] = new_value3;\n  relocation_entry[99] = bit_mask | relocation_entry[99];\n  relocation_entry[1] = index + 1;\n  relocation_entry[index + 2] = new_value2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "update_relocation_entry_000816ec",
            "entrypoint": "0x000816ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_000816ec": "update_relocation_entry_000816ec",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "param_1": "new_value1",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "pdVar1": "relocation_entry",
                "uVar2": "index",
                "uVar3": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816f8": {
            "additional_data": {
                "FUM_000816f8": {
                    "assertion_failed_function": 1
                },
                "FUN_000816f8": {
                    "assertion_failed": 15,
                    "assertion_failure": 1,
                    "check_assertion": 1,
                    "handle_assertion_failure": 2,
                    "print_assert_error": 1,
                    "print_assertion_failed": 1,
                    "print_assertion_failed_message": 2,
                    "print_assertion_failure": 1,
                    "print_assertion_failure_message": 1,
                    "report_assertion_failure": 1,
                    "validate_assertion": 2,
                    "validate_assertion_failed": 1,
                    "verify_assertion": 1
                },
                "FUN_00081750": {
                    "print_error_message": 2
                },
                "FUN_000836ec": {
                    "get_current_time": 1,
                    "get_time": 1
                },
                "param_1": {
                    "arg1": 1,
                    "assertion": 2,
                    "assertion_message": 1,
                    "assertion_string": 2,
                    "file": 13,
                    "file_name": 4,
                    "filename": 2,
                    "message": 3,
                    "msg": 1
                },
                "param_2": {
                    "arg2": 1,
                    "assertion_file": 1,
                    "assertion_string": 1,
                    "file": 4,
                    "file_path": 1,
                    "line": 12,
                    "line_number": 8,
                    "linenum": 1
                },
                "param_3": {
                    "assertion": 9,
                    "assertion_condition": 1,
                    "assertion_function": 1,
                    "assertion_message": 4,
                    "condition_expression": 1,
                    "expression": 1,
                    "file_name": 3,
                    "filename": 1,
                    "function_name": 1,
                    "line": 1,
                    "line_number": 2,
                    "message": 5
                },
                "param_4": {
                    "assertion_condition": 1,
                    "assertion_line": 1,
                    "function": 14,
                    "function_name": 10,
                    "line": 1,
                    "line_number": 3
                },
                "pcVar3": {
                    "additional_info": 7,
                    "additional_message": 2,
                    "additional_tags": 1,
                    "auxiliary_msg": 1,
                    "comma_msg": 1,
                    "comma_string": 1,
                    "concatenation": 1,
                    "delimiter": 4,
                    "error_message": 1,
                    "extra_message": 2,
                    "function": 1,
                    "message": 3,
                    "message_suffix": 1,
                    "pc_var": 1,
                    "pc_var_msg": 1,
                    "prefix": 2,
                    "text": 1
                },
                "uVar1": {
                    "assertion": 2,
                    "assertion_message": 2,
                    "assertion_variable": 1,
                    "data_offset": 1,
                    "elf_rel_array_offset": 1,
                    "file_message_format": 1,
                    "file_name_ptr": 1,
                    "file_offset": 1,
                    "local_var1": 1,
                    "message": 1,
                    "message_ptr": 1,
                    "offset": 5,
                    "param1": 1,
                    "ptr_offset": 1,
                    "ptr_to_elf_rel_addr": 1,
                    "rel_offset": 3,
                    "string_format": 1,
                    "u_param1": 1,
                    "u_var1": 2,
                    "u_var_file": 1,
                    "u_var_file_name": 1,
                    "u_var_offset": 1
                },
                "uVar2": {
                    "assertion_function": 1,
                    "assertion_msg": 1,
                    "function": 4,
                    "function_arg": 1,
                    "function_name": 4,
                    "function_name_ptr": 1,
                    "function_param": 2,
                    "function_variable": 1,
                    "line": 2,
                    "line_number_ptr": 1,
                    "local_var2": 1,
                    "original_function_name": 1,
                    "param4": 1,
                    "param_4_copy": 1,
                    "ptr_to_function": 1,
                    "temp": 1,
                    "u_param2": 1,
                    "u_var2": 2,
                    "u_var_function": 2,
                    "u_var_function_name": 1,
                    "var2": 1
                },
                "uVar4": {
                    "function_result": 1,
                    "result": 17,
                    "return_value": 5,
                    "time": 1,
                    "time_stamp": 1,
                    "timestamp": 3,
                    "u_var": 1,
                    "u_var_result": 1,
                    "u_var_ret": 1
                }
            },
            "called": [
                "FUN_00081750",
                "FUN_000836ec"
            ],
            "calling": [
                "FUN_00080b2c",
                "FUN_000803fc"
            ],
            "code": "\nvoid print_assertion_failed_message_000816f8(undefined4 file,undefined4 line,char *assertion,undefined4 function)\n\n{\n  undefined4 offset;\n  undefined4 function_name;\n  char *additional_info;\n  undefined8 result;\n  \n  offset = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (assertion == (char *)0x0) goto LAB_0008171c;\n  function_name = function;\n  additional_info = \", function: \";\n  do {\n    function = file;\n    FUN_00081750(offset,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function_name,file,line,\n                 additional_info,assertion);\n    result = FUN_000836ec();\n    line = (undefined4)((ulonglong)result >> 0x20);\n    offset = (undefined4)result;\nLAB_0008171c:\n    assertion = \"\";\n    function_name = function;\n    additional_info = assertion;\n  } while( true );\n}\n\n",
            "current_name": "print_assertion_failed_message_000816f8",
            "entrypoint": "0x000816f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816f8": "print_assertion_failed_message_000816f8",
                "param_1": "file",
                "param_2": "line",
                "param_3": "assertion",
                "param_4": "function",
                "pcVar3": "additional_info",
                "uVar1": "offset",
                "uVar2": "function_name",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081750": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "data_array": 1
                },
                "FUN_00081750": {
                    "call_subfunction": 1,
                    "execute_relocation": 8,
                    "process_data": 2,
                    "process_elf32_rel_array": 1,
                    "process_elf32_rel_entries": 1,
                    "process_elf_relocation": 1,
                    "process_function": 3,
                    "process_relocation": 6,
                    "process_relocation_entries": 1,
                    "process_relocation_entry": 1,
                    "process_relocations": 1,
                    "relocate_function": 1
                },
                "FUN_0008289c": {
                    "extract_relocation": 1,
                    "perform_relocation": 2,
                    "process_relocation": 1,
                    "reverse_data": 1,
                    "sub_function": 1
                },
                "param_1": {
                    "arg1": 3,
                    "data1": 1,
                    "entry_offset": 2,
                    "input1": 2,
                    "input_param": 1,
                    "offset": 13,
                    "param": 1,
                    "param_1": 1,
                    "param_offset": 1,
                    "param_one": 1,
                    "r_offset": 1,
                    "relocation_array": 1,
                    "relocation_offset": 3
                },
                "param_2": {
                    "arg1": 5,
                    "arg2": 3,
                    "base": 1,
                    "data2": 1,
                    "input2": 2,
                    "output_param": 1,
                    "param": 2,
                    "param1": 2,
                    "param2": 7,
                    "param_2": 4,
                    "param_a": 1,
                    "param_address": 1,
                    "param_two": 1
                },
                "param_3": {
                    "arg2": 5,
                    "arg3": 3,
                    "array_param": 1,
                    "buffer1": 1,
                    "data": 1,
                    "data3": 1,
                    "entry_value": 1,
                    "input3": 1,
                    "input_data": 1,
                    "param2": 2,
                    "param3": 1,
                    "param_b": 1,
                    "param_stack_8": 1,
                    "param_three": 1,
                    "ptr_to_relocation_array": 1,
                    "rel_array": 1,
                    "rel_offset": 1,
                    "relocation_data": 2,
                    "relocation_type": 1,
                    "source": 1,
                    "source_data": 1,
                    "stack_param": 1,
                    "target_address": 1
                },
                "param_4": {
                    "arg3": 5,
                    "arg4": 3,
                    "buffer2": 1,
                    "data4": 1,
                    "destination": 1,
                    "entry_address": 1,
                    "input4": 1,
                    "output_data": 1,
                    "param3": 2,
                    "param4": 3,
                    "param_4": 1,
                    "param_c": 1,
                    "param_four": 1,
                    "param_stack_4": 1,
                    "pointer": 1,
                    "pointer_param": 1,
                    "pointer_to_variables": 1,
                    "ptr_param": 1,
                    "ptr_to_stack_params": 1,
                    "target": 1,
                    "target_data": 1,
                    "u_stack": 1
                },
                "uStack_4": {
                    "arg3_copy": 1,
                    "arg4": 1,
                    "entry_address_temp": 1,
                    "local_variable2": 1,
                    "modified_input4": 1,
                    "param3_value": 1,
                    "param4": 1,
                    "param4_value": 1,
                    "param5": 1,
                    "param_4_copy": 2,
                    "param_c_param": 1,
                    "param_stack_4": 1,
                    "pointer_offset": 1,
                    "processed_data2": 1,
                    "relocation_arg": 2,
                    "stack_arg2": 2,
                    "stack_arg4": 1,
                    "stack_param2": 1,
                    "stack_param4": 1,
                    "stack_var_two": 1,
                    "target_data_copy": 1,
                    "temp2": 1
                },
                "uStack_8": {
                    "arg2_copy": 1,
                    "data_offset": 1,
                    "entry_value_temp": 1,
                    "local_variable1": 1,
                    "modified_input3": 1,
                    "offset_param": 1,
                    "param2_value": 1,
                    "param3_value": 1,
                    "param_3_copy": 2,
                    "param_stack_8": 1,
                    "processed_data1": 1,
                    "relocated_offset": 1,
                    "relocated_value": 1,
                    "relocation_data": 1,
                    "relocation_offset": 2,
                    "source_data_copy": 1,
                    "stack_arg1": 2,
                    "stack_arg3": 1,
                    "stack_param": 1,
                    "stack_param3": 1,
                    "stack_var_one": 1,
                    "temp1": 1
                }
            },
            "called": [
                "FUN_0008289c"
            ],
            "calling": [
                "FUN_000816f8"
            ],
            "code": "\nvoid execute_relocation_00081750(undefined4 offset,undefined4 param2,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 relocation_offset;\n  undefined4 param_4_copy;\n  \n  relocation_offset = arg2;\n  param_4_copy = arg3;\n  FUN_0008289c(data_array[140].r_offset,offset,param2,&relocation_offset);\n  return;\n}\n\n",
            "current_name": "execute_relocation_00081750",
            "entrypoint": "0x00081750",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "data_array",
                "FUN_00081750": "execute_relocation_00081750",
                "param_1": "offset",
                "param_2": "param2",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_4": "param_4_copy",
                "uStack_8": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081778": {
            "additional_data": {
                "FUNC_00080118": {
                    "function1": 1,
                    "sub_function1": 5,
                    "sub_function_one": 1,
                    "subfunction1": 1,
                    "subfunction_1": 1
                },
                "FUNC_000836d8": {
                    "function2": 1,
                    "perform_calculation": 1,
                    "sub_function2": 5,
                    "sub_function_two": 1,
                    "subfunction2": 1,
                    "subfunction_2": 1
                },
                "FUNC_00085844": {
                    "initialize": 9,
                    "initialize_function": 2,
                    "initialize_sub_functions": 1,
                    "initialize_system": 1
                },
                "FUN_00081778": {
                    "execute_function_chain": 1,
                    "execute_function_set": 2,
                    "execute_functions": 2,
                    "execute_sub_functions": 18,
                    "execute_subfunctions": 7,
                    "perform_sub_functions": 1
                },
                "PRINTF_00080118": {
                    "print_message": 1
                },
                "iVar1": {
                    "counter": 5,
                    "index": 1,
                    "iteration": 2,
                    "iteration_count": 18,
                    "iteration_counter": 1,
                    "sub_function_index": 1
                },
                "ppcVar2": {
                    "function_array": 1,
                    "function_array_ptr": 1,
                    "function_list": 1,
                    "function_pointer": 5,
                    "function_pointer_array": 5,
                    "function_pointers": 9,
                    "function_ptr_array": 1,
                    "function_ptrs": 1,
                    "function_table": 1,
                    "sub_func_array": 1,
                    "sub_function_array": 1,
                    "sub_function_pointers": 1
                }
            },
            "called": [
                "FUN_00085844",
                "FUN_00080118",
                "FUN_000836d8"
            ],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid execute_sub_functions_00081778(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  FUNC_00085844();\n  function_pointers = (code **)0x8584c;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "current_name": "execute_sub_functions_00081778",
            "entrypoint": "0x00081778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081778": "execute_sub_functions_00081778",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000817c8": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "rel_array": 1,
                    "relocation_table": 1
                },
                "FUN_000817c8": {
                    "execute_function": 3,
                    "execute_function_with_params": 1,
                    "execute_relocation": 4,
                    "extract_and_process_data": 1,
                    "process_binary_function": 1,
                    "process_data": 1,
                    "process_function": 3,
                    "process_relocation": 1,
                    "process_relocation_entry": 2
                },
                "FUN_0008289c": {
                    "calculate_offset": 1,
                    "perform_action": 2,
                    "perform_relocation": 3,
                    "reverse_data": 1,
                    "reverse_elf32_rel_array": 1,
                    "reverse_helper": 1,
                    "sub_function": 1
                },
                "FUN_0008289c_param_1": {
                    "action_param1": 1
                },
                "FUN_0008289c_param_2": {
                    "action_param2": 1
                },
                "param_1": {
                    "arg1": 3,
                    "argument1": 1,
                    "data_offset": 1,
                    "entry_offset": 1,
                    "function_parameter": 1,
                    "input": 1,
                    "input_param": 5,
                    "input_param1": 1,
                    "input_parameter": 3,
                    "offset": 3,
                    "param": 2,
                    "param1": 1,
                    "param_1": 3,
                    "param_a": 1,
                    "param_index": 1,
                    "parameter1": 2,
                    "reverse_param_1": 1
                },
                "param_2": {
                    "address": 1,
                    "arg2": 3,
                    "argument2": 1,
                    "entry_value": 1,
                    "exec_param_1": 1,
                    "input_param2": 1,
                    "input_param_1": 1,
                    "param2": 3,
                    "param_2": 4,
                    "param_b": 1,
                    "param_source": 1,
                    "parameter2": 2,
                    "rel_array_offset": 1,
                    "rel_offset": 1,
                    "reverse_param_2": 1,
                    "second_parameter": 1,
                    "stack_c": 2,
                    "stack_param_1": 1,
                    "stack_value1": 2,
                    "stack_var1": 1,
                    "value1": 1
                },
                "param_3": {
                    "arg3": 3,
                    "argument3": 1,
                    "exec_param_2": 1,
                    "input_param3": 1,
                    "input_param_2": 1,
                    "offset": 1,
                    "param3": 3,
                    "param_3": 4,
                    "param_c": 1,
                    "param_destination": 1,
                    "parameter3": 2,
                    "rel_array_elem_offset": 1,
                    "rel_offset_plus8": 1,
                    "relocation_data": 1,
                    "reverse_param_3": 1,
                    "stack8": 2,
                    "stack_param_2": 1,
                    "stack_value2": 2,
                    "stack_var2": 1,
                    "third_parameter": 1,
                    "value2": 1
                },
                "param_4": {
                    "arg4": 3,
                    "argument4": 1,
                    "data_pointer": 1,
                    "exec_param_3": 1,
                    "fourth_parameter": 1,
                    "input_param4": 2,
                    "input_param_3": 1,
                    "param4": 2,
                    "param_4": 4,
                    "param_addresses": 1,
                    "param_d": 1,
                    "param_stack": 1,
                    "param_stack_pointer": 1,
                    "parameter4": 2,
                    "pointer": 1,
                    "reverse_param_4": 1,
                    "stack4": 2,
                    "stack_param_3": 1,
                    "stack_value3": 2,
                    "stack_var3": 1,
                    "value3": 1
                },
                "r_offset": {
                    "offset": 2
                },
                "uStack_4": {
                    "arg4_copy": 1,
                    "copied_fourth_parameter": 1,
                    "copy_param_4": 1,
                    "exec_local_var_3": 1,
                    "local_var_3": 1,
                    "param4_copy": 1,
                    "param_4": 1,
                    "param_4_copy": 3,
                    "param_4_modified": 1,
                    "param_stack_4": 1,
                    "stack4": 2,
                    "stack_param3": 1,
                    "stack_param_4": 1,
                    "stack_param_d": 1,
                    "stack_var3": 1,
                    "stack_var_3": 2,
                    "stack_variable6": 1,
                    "stack_variable_4": 1,
                    "temp_var3": 1,
                    "temporary_var3": 1,
                    "tmp3": 1,
                    "updated_stack_value3": 1,
                    "value3_stack": 1
                },
                "uStack_8": {
                    "arg3_copy": 1,
                    "copied_third_parameter": 1,
                    "copy_param_3": 1,
                    "exec_local_var_2": 1,
                    "local_var_2": 1,
                    "param3_copy": 1,
                    "param_3_copy": 3,
                    "param_3_modified": 1,
                    "param_8": 1,
                    "param_stack_8": 1,
                    "stack8": 2,
                    "stack_param2": 1,
                    "stack_param_8": 1,
                    "stack_param_c": 1,
                    "stack_var2": 1,
                    "stack_var_2": 2,
                    "stack_variable5": 1,
                    "stack_variable_8": 1,
                    "temp_var2": 1,
                    "temporary_var2": 1,
                    "tmp2": 1,
                    "updated_stack_value2": 1,
                    "value2_stack": 1
                },
                "uStack_c": {
                    "arg2_copy": 1,
                    "copied_second_parameter": 1,
                    "copy_param_2": 1,
                    "exec_local_var_1": 1,
                    "local_var_1": 1,
                    "param2_copy": 1,
                    "param_2_copy": 3,
                    "param_2_modified": 1,
                    "param_c": 1,
                    "param_stack_c": 1,
                    "stack_c": 2,
                    "stack_param1": 1,
                    "stack_param_b": 1,
                    "stack_param_c": 1,
                    "stack_var1": 1,
                    "stack_var_1": 2,
                    "stack_variable4": 1,
                    "stack_variable_c": 1,
                    "temp_var1": 1,
                    "temporary_var1": 1,
                    "tmp1": 1,
                    "updated_stack_value1": 1,
                    "value1_stack": 1
                }
            },
            "called": [
                "FUN_0008289c"
            ],
            "calling": [
                "FUN_00080eec"
            ],
            "code": "\nvoid execute_function_with_params_000817c8(undefined4 input_param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  param_2_copy = param_2;\n  param_3_copy = param_3;\n  param_4_copy = param_4;\n  FUN_0008289c(relocation_table[140].offset,\n               *(undefined4 *)(relocation_table[140].offset + 8),input_param,&param_2_copy);\n  return;\n}\n\n",
            "current_name": "execute_function_with_params_000817c8",
            "entrypoint": "0x000817c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "FUN_000817c8": "execute_function_with_params_000817c8",
                "param_1": "input_param",
                "r_offset": "offset",
                "uStack_4": "param_4_copy",
                "uStack_8": "param_3_copy",
                "uStack_c": "param_2_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000817f0": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "relocation_array": 1,
                    "relocation_table": 1
                },
                "FUN_000817f0": {
                    "do_something": 1,
                    "execute_function": 2,
                    "execute_relocation": 3,
                    "extract_relocation_data": 1,
                    "extract_symbol_and_call_function": 1,
                    "initialize_relocation": 1,
                    "perform_relocation": 1,
                    "process_elf32_rel_array": 1,
                    "process_elf32_rel_entry": 3,
                    "process_elf_data": 1,
                    "process_elf_relocation": 2,
                    "process_relocation": 9,
                    "process_relocation_entry": 3,
                    "process_relocations": 2
                },
                "FUN_00081810": {
                    "apply_relocation": 15,
                    "call_extracted_function": 1,
                    "invoke_sub_function": 1,
                    "perform_relocation": 6,
                    "process_data": 2,
                    "process_elf32_rel": 1,
                    "process_rel_entry": 1,
                    "process_relocated_elf_data": 1,
                    "process_relocation": 1,
                    "process_relocation_entry": 1
                },
                "param_1": {
                    "address": 1,
                    "arg": 1,
                    "argument": 1,
                    "data": 1,
                    "entry": 1,
                    "entry_address": 1,
                    "entry_index": 1,
                    "input": 1,
                    "input_address": 1,
                    "input_param": 1,
                    "offset": 4,
                    "param": 5,
                    "parameter": 1,
                    "rel_array": 1,
                    "rel_table": 1,
                    "relocated_address": 1,
                    "relocation_array": 2,
                    "relocation_data": 2,
                    "relocation_entry": 1,
                    "relocation_offset": 2,
                    "symbol_to_extract": 1
                },
                "param_2": {
                    "count": 3,
                    "entry_count": 1,
                    "function_parameter": 1,
                    "offset": 3,
                    "relocation_count": 2,
                    "relocation_index": 1,
                    "relocation_offset": 3,
                    "size": 2,
                    "size_of_rel_table": 1,
                    "sub_function_param": 1
                }
            },
            "called": [
                "FUN_00081810"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nvoid process_relocation_entry_000817f0(undefined4 param)\n\n{\n  FUN_00081810(relocation_array[140].r_offset,param);\n  return;\n}\n\n",
            "current_name": "process_relocation_entry_000817f0",
            "entrypoint": "0x000817f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_000817f0": "process_relocation_entry_000817f0",
                "param_1": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081800": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "relocation_array": 2
                },
                "FUN_00081800": {
                    "execute_function": 3,
                    "execute_relocation": 9,
                    "perform_action": 1,
                    "perform_relocation": 4,
                    "process_elf32_rel_array": 1,
                    "process_elf_relocation": 2,
                    "process_function": 1,
                    "process_rel_array_entry": 1,
                    "process_relocation": 6,
                    "process_relocation_entry": 1,
                    "process_relocation_function": 1,
                    "process_relocations": 1
                },
                "FUN_00083b10": {
                    "apply_relocation": 12,
                    "do_relocation": 1,
                    "execute_relocation_step": 1,
                    "execute_sub_function": 1,
                    "handle_operation": 1,
                    "perform_relocation": 10,
                    "process_data": 1,
                    "process_parameter": 1,
                    "process_rel_entry": 1,
                    "process_relocation": 1,
                    "relocate_data": 1
                },
                "param_1": {
                    "address": 1,
                    "arg": 2,
                    "argument": 2,
                    "data": 5,
                    "entry": 1,
                    "entry_address": 1,
                    "function_parameter": 1,
                    "function_pointer": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "offset": 8,
                    "param": 6
                },
                "param_2": {
                    "address": 1,
                    "data_parameter": 1,
                    "offset": 6,
                    "operation_param": 1,
                    "param": 6,
                    "param2": 1,
                    "parameter": 1,
                    "relocation_offset": 2,
                    "relocation_param": 1,
                    "relocation_type": 1,
                    "val": 1,
                    "value": 3
                }
            },
            "called": [
                "FUN_00083b10"
            ],
            "calling": [
                "FUN_0008151c",
                "FUN_00081480",
                "FUN_00081472"
            ],
            "code": "\nvoid execute_relocation_00081800(undefined4 offset)\n\n{\n  FUN_00083b10(relocation_array[140].r_offset,offset);\n  return;\n}\n\n",
            "current_name": "execute_relocation_00081800",
            "entrypoint": "0x00081800",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00081800": "execute_relocation_00081800",
                "param_1": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081810": {
            "additional_data": {
                "FUNC_00081f94": {
                    "initialize_function": 2,
                    "initialize_function1": 1,
                    "initialize_variables": 1
                },
                "FUNC_00081f98": {
                    "cleanup_memory": 1,
                    "finalize_function": 1,
                    "initialize_function2": 1
                },
                "FUN_00081810": {
                    "allocate_and_init_memory": 1,
                    "allocate_memory": 2,
                    "extracted_function": 1,
                    "find_and_modify_relocation": 1,
                    "improved_func": 1,
                    "rearrange_and_allocate_memory": 1
                },
                "FUN_0008236c": {
                    "allocate_memory": 2,
                    "sub_function1": 1
                },
                "FUN_00083b10": {
                    "deallocate_memory": 1,
                    "release_memory": 1,
                    "sub_function2": 1
                },
                "LAB_00081876": {
                    "return_error": 1
                },
                "dVar1": {
                    "dword1": 3,
                    "dword_var1": 1,
                    "first_info": 1,
                    "info": 1,
                    "info1": 2,
                    "info_offset": 1,
                    "offset": 1,
                    "rel_array_element": 1,
                    "rel_info": 1,
                    "rel_info1": 1,
                    "rel_offset": 1,
                    "result": 3,
                    "result_code": 1,
                    "temp1": 9,
                    "temp_rel_info": 1,
                    "temp_var1": 1,
                    "var1": 2
                },
                "dVar11": {
                    "current_offset": 1,
                    "current_offset2": 1,
                    "dword3": 3,
                    "dword_var11": 1,
                    "first_offset": 1,
                    "info2": 1,
                    "info3": 1,
                    "next_offset": 1,
                    "prev_rel_offset": 1,
                    "ptr2": 1,
                    "rel_info7": 1,
                    "temp10": 2,
                    "temp11": 6,
                    "temp_address": 1,
                    "temp_var1": 1,
                    "temp_var11": 1,
                    "temp_var41": 1,
                    "temp_var9": 1,
                    "temp_var_8": 1,
                    "temp_variable7": 1,
                    "tmp_offset1": 1,
                    "var11": 2
                },
                "dVar12": {
                    "dword4": 3,
                    "dword_var12": 1,
                    "info3": 1,
                    "info4": 1,
                    "prev_offset": 2,
                    "prev_rel_entry": 1,
                    "previous_offset": 1,
                    "ptr3": 1,
                    "rel_info8": 1,
                    "second_offset": 1,
                    "temp11": 2,
                    "temp12": 6,
                    "temp_rel_offset3": 1,
                    "temp_var10": 1,
                    "temp_var12": 1,
                    "temp_var2": 1,
                    "temp_var36": 1,
                    "temp_var_9": 1,
                    "temp_variable8": 1,
                    "tmp_offset2": 1,
                    "var12": 2
                },
                "dVar17": {
                    "relative_offset1": 1
                },
                "dVar18": {
                    "relative_offset2": 1
                },
                "dVar2": {
                    "i_var": 1
                },
                "dVar7": {
                    "curr_offset": 1,
                    "current_offset": 1,
                    "dword2": 3,
                    "dword_var7": 1,
                    "info2": 1,
                    "offset": 3,
                    "rel_info5": 1,
                    "rel_offset": 1,
                    "second_info": 1,
                    "symbol_offset": 1,
                    "temp7": 9,
                    "temp_rel_offset": 1,
                    "temp_var20": 1,
                    "temp_var34": 1,
                    "temp_var6": 1,
                    "temp_var_5": 1,
                    "temp_variable4": 1,
                    "var7": 2
                },
                "iVar11": {
                    "index_variable5": 1
                },
                "iVar13": {
                    "bucket_index": 1,
                    "count": 1,
                    "decrement": 1,
                    "i_var2": 1,
                    "index": 1,
                    "index_variable": 1,
                    "index_variable1": 1,
                    "int_value13": 1,
                    "int_value4": 1,
                    "int_var13": 1,
                    "int_var4": 1,
                    "rel_block_index": 1,
                    "temp12": 2,
                    "temp13": 5,
                    "temp_temp1": 1,
                    "temp_var11": 1,
                    "temp_var19": 1,
                    "temp_var29": 1,
                    "temp_var3": 1,
                    "temp_var8": 2,
                    "temp_var_10": 1,
                    "tmp_int4": 1,
                    "var13": 3
                },
                "iVar19": {
                    "int_var5": 1
                },
                "iVar2": {
                    "counter": 1,
                    "entry_offset": 1,
                    "index": 1,
                    "index1": 1,
                    "index_variable2": 1,
                    "int_value1": 1,
                    "int_value2": 1,
                    "int_var1": 1,
                    "int_var2": 1,
                    "rel_info2": 1,
                    "temp2": 9,
                    "temp_var": 1,
                    "temp_var1": 3,
                    "temp_var2": 1,
                    "temp_var30": 1,
                    "tmp_int1": 1,
                    "tmp_var1": 1,
                    "var2": 3
                },
                "iVar20": {
                    "int_var6": 1
                },
                "iVar21": {
                    "int_var7": 1
                },
                "iVar22": {
                    "int_var8": 1
                },
                "iVar23": {
                    "int_var9": 1
                },
                "iVar24": {
                    "int_var10": 1
                },
                "iVar25": {
                    "int_var11": 1
                },
                "iVar26": {
                    "int_var12": 1
                },
                "iVar27": {
                    "int_var13": 1
                },
                "iVar5": {
                    "i_var1": 1,
                    "i_var_temp1": 1,
                    "index2": 1,
                    "index_variable3": 1,
                    "int_value2": 1,
                    "int_value5": 1,
                    "int_var2": 1,
                    "int_var5": 1,
                    "next_offset": 1,
                    "prev_index": 1,
                    "temp5": 9,
                    "temp_var4": 5,
                    "temp_var5": 1,
                    "temp_var_3": 1,
                    "tmp_int2": 1,
                    "tmp_var4": 1,
                    "var5": 3
                },
                "iVar9": {
                    "i_var3": 1,
                    "i_var_temp2": 1,
                    "index3": 1,
                    "index_variable4": 1,
                    "int_value3": 1,
                    "int_value9": 1,
                    "int_var3": 1,
                    "int_var9": 1,
                    "next_index": 1,
                    "prev_offset": 1,
                    "temp9": 9,
                    "temp_var7": 2,
                    "temp_var8": 3,
                    "temp_var9": 1,
                    "temp_var_7": 1,
                    "tmp_int3": 1,
                    "tmp_var7": 1,
                    "var9": 3
                },
                "param_1": {
                    "function_array": 1,
                    "function_params": 1,
                    "function_pointer": 1,
                    "input": 1,
                    "input_array": 2,
                    "input_pointer": 1,
                    "output": 1,
                    "output_array": 1,
                    "output_buffer": 1,
                    "output_parameter": 1,
                    "param_array": 8,
                    "param_pointer": 1,
                    "parameter_1": 1,
                    "parameter_array": 1,
                    "parameters": 1,
                    "pointer": 4,
                    "pointer_array": 1,
                    "result_pointer": 1,
                    "result_ptr": 2
                },
                "param_2": {
                    "array_length": 3,
                    "array_size": 3,
                    "input_parameter": 1,
                    "input_size": 4,
                    "length": 3,
                    "param_length": 1,
                    "param_size": 4,
                    "parameter_2": 1,
                    "rel_size": 1,
                    "size": 10
                },
                "pdVar14": {
                    "current_pointer": 1,
                    "dword_ptr14": 1,
                    "info_array_pointer": 1,
                    "pd_var": 1,
                    "pd_var1": 1,
                    "pointer2": 1,
                    "pointer3": 1,
                    "pointer_array": 1,
                    "pointer_var14": 1,
                    "pointer_var2": 1,
                    "pointer_var_2": 1,
                    "ptr2": 2,
                    "ptr4": 1,
                    "ptr_data1": 1,
                    "ptr_data14": 1,
                    "rel_array_element_ptr": 1,
                    "rel_entry": 1,
                    "rel_info_array_ptr": 1,
                    "rel_ptr": 1,
                    "temp14": 3,
                    "temp_pointer2": 3,
                    "temp_ptr10": 1,
                    "temp_ptr2": 1,
                    "temp_rel_info2": 1,
                    "var14": 1,
                    "var_pointer2": 1
                },
                "pdVar17": {
                    "bucket_ptr": 1,
                    "current_pointer2": 1,
                    "dword_ptr17": 1,
                    "pd_var": 1,
                    "pd_var2": 1,
                    "pointer4": 1,
                    "pointer5": 1,
                    "pointer_array2": 1,
                    "pointer_var17": 1,
                    "pointer_var4": 1,
                    "pointer_var_4": 1,
                    "ptr4": 1,
                    "ptr6": 1,
                    "ptr_data17": 1,
                    "ptr_data2": 1,
                    "rel_entry_ptr": 1,
                    "temp17": 3,
                    "temp_pointer4": 3,
                    "temp_ptr3": 1,
                    "temp_ptr4": 1,
                    "temp_ptr9": 1,
                    "temp_rel_info": 1,
                    "tmp_ptr_array": 1,
                    "var17": 1,
                    "var_pointer4": 1
                },
                "puVar10": {
                    "curr_ptr": 1,
                    "pointer1": 1,
                    "pointer2": 1,
                    "pointer_var": 3,
                    "pointer_var10": 1,
                    "pointer_variable": 1,
                    "ptr": 2,
                    "ptr1": 3,
                    "ptr_var1": 1,
                    "symbol_entry": 1,
                    "temp10": 3,
                    "temp_pointer": 1,
                    "temp_pointer1": 3,
                    "temp_ptr1": 2,
                    "temp_ptr10": 1,
                    "temp_ptr11": 1,
                    "temp_rel_pointer": 1,
                    "tmp_ptr1": 1,
                    "undefined_ptr10": 1,
                    "var10": 1,
                    "var_pointer": 1
                },
                "puVar16": {
                    "new_entry_ptr": 1,
                    "new_rel_entry": 1,
                    "pointer3": 1,
                    "pointer4": 1,
                    "pointer_var16": 1,
                    "pointer_var2": 1,
                    "pointer_var3": 1,
                    "pointer_var_3": 1,
                    "pointer_variable2": 1,
                    "ptr": 1,
                    "ptr3": 2,
                    "ptr5": 1,
                    "ptr_aligned": 1,
                    "ptr_var2": 1,
                    "temp16": 3,
                    "temp_pointer2": 2,
                    "temp_pointer3": 3,
                    "temp_ptr12": 1,
                    "temp_ptr16": 1,
                    "temp_ptr2": 1,
                    "temp_ptr3": 1,
                    "tmp_ptr2": 1,
                    "undefined_ptr16": 1,
                    "var16": 1,
                    "var_pointer3": 1
                },
                "uVar15": {
                    "adjusted_size": 1,
                    "aligned_array_size": 1,
                    "aligned_size": 4,
                    "fixed_size": 1,
                    "info_size": 1,
                    "min_rel_size": 1,
                    "min_size": 1,
                    "size_aligned": 1,
                    "temp13": 1,
                    "temp15": 6,
                    "temp_var12": 2,
                    "temp_var15": 1,
                    "temp_var4": 1,
                    "temp_var9": 1,
                    "temp_var_11": 1,
                    "uint_size": 1,
                    "uint_value5": 1,
                    "uint_var15": 1,
                    "uint_var5": 1,
                    "var15": 3
                },
                "uVar18": {
                    "block_index": 1,
                    "bucket_size": 1,
                    "divisor": 1,
                    "i": 1,
                    "new_size": 1,
                    "rel_factor": 1,
                    "temp13": 1,
                    "temp14": 1,
                    "temp18": 6,
                    "temp4": 1,
                    "temp_var13": 1,
                    "temp_var18": 1,
                    "temp_var3": 1,
                    "temp_var33": 1,
                    "temp_var5": 1,
                    "temp_var_12": 1,
                    "temp_variable6": 1,
                    "tmp_uint5": 1,
                    "uint_index": 1,
                    "uint_value6": 1,
                    "uint_var18": 1,
                    "uint_var6": 1,
                    "var18": 3
                },
                "uVar3": {
                    "entry_size": 1,
                    "mask": 1,
                    "rel_factor": 1,
                    "rel_info3": 1,
                    "size_var1": 1,
                    "temp1": 1,
                    "temp3": 9,
                    "temp_var2": 3,
                    "temp_var3": 1,
                    "temp_var37": 1,
                    "temp_var_1": 1,
                    "temp_variable1": 1,
                    "tmp_uint1": 1,
                    "tmp_var2": 1,
                    "uint1": 1,
                    "uint_value1": 1,
                    "uint_var1": 1,
                    "uint_var3": 1,
                    "var3": 3
                },
                "uVar30": {
                    "temp_var30": 1
                },
                "uVar4": {
                    "aligned_size": 2,
                    "rel_info4": 1,
                    "size_var2": 1,
                    "temp2": 1,
                    "temp4": 9,
                    "temp_u_var": 1,
                    "temp_var27": 1,
                    "temp_var3": 3,
                    "temp_var4": 1,
                    "temp_var_2": 1,
                    "temp_variable2": 1,
                    "tmp_uint2": 1,
                    "tmp_var3": 1,
                    "uint2": 1,
                    "uint_value2": 1,
                    "uint_var2": 1,
                    "uint_var4": 1,
                    "var4": 3
                },
                "uVar6": {
                    "diff": 1,
                    "size_diff": 1,
                    "temp3": 1,
                    "temp6": 9,
                    "temp_rel_offset": 1,
                    "temp_var1": 1,
                    "temp_var40": 1,
                    "temp_var5": 3,
                    "temp_var6": 1,
                    "temp_var_4": 1,
                    "temp_variable3": 1,
                    "tmp_uint3": 1,
                    "tmp_var5": 1,
                    "u_var1": 1,
                    "uint3": 1,
                    "uint_value3": 1,
                    "uint_var3": 1,
                    "uint_var6": 1,
                    "var6": 3
                },
                "uVar8": {
                    "flag": 1,
                    "flags": 1,
                    "new_size": 1,
                    "rel_info6": 1,
                    "temp8": 9,
                    "temp_rel_factor": 1,
                    "temp_var2": 1,
                    "temp_var28": 1,
                    "temp_var6": 2,
                    "temp_var7": 1,
                    "temp_var8": 1,
                    "temp_var_6": 1,
                    "temp_variable5": 1,
                    "tmp_uint4": 1,
                    "tmp_var6": 1,
                    "uint4": 1,
                    "uint_value4": 1,
                    "uint_var4": 1,
                    "uint_var8": 1,
                    "var8": 3
                }
            },
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083b10"
            ],
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8",
                "FUN_00084018",
                "FUN_000817f0"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_and_init_memory_00081810(undefined4 *param_array,uint size)\n\n{\n  dword temp1;\n  int temp2;\n  uint temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  dword temp7;\n  uint temp8;\n  int temp9;\n  undefined *temp_pointer1;\n  dword temp11;\n  dword temp12;\n  int temp13;\n  dword *temp_pointer2;\n  uint temp15;\n  undefined *temp16;\n  dword *temp17;\n  uint temp18;\n  \n  if (size + 0xb < 0x17) {\n    temp15 = 0x10;\n    if (0x10 < size) goto return_error;\n  }\n  else {\n    temp15 = size + 0xb & 0xfffffff8;\n    if (((int)temp15 < 0) || (temp15 < size)) {\nreturn_error:\n      *param_array = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(param_array);\n  temp1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (temp15 < 0x1f8) {\n    temp13 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + temp15);\n    if ((temp13 != temp15 + 0x20070464) ||\n       (temp2 = temp13 + 8, temp13 = *(int *)(temp13 + 0x14), temp2 != temp13)) {\n      temp5 = *(int *)(temp13 + 0xc);\n      temp9 = (*(uint *)(temp13 + 4) & 0xfffffffc) + temp13;\n      temp15 = *(uint *)(temp9 + 4);\n      temp2 = *(int *)(temp13 + 8);\n      *(int *)(temp2 + 0xc) = temp5;\n      *(int *)(temp5 + 8) = temp2;\n      *(uint *)(temp9 + 4) = temp15 | 1;\n      FUNC_00081f98(param_array);\n      return (int *)(temp13 + 8);\n    }\n    temp18 = (temp15 >> 3) + 2;\n  }\n  else {\n    temp18 = temp15 >> 9;\n    if (temp18 == 0) {\n      temp2 = 0x7e;\n      temp13 = 0x3f;\n    }\n    else if (temp18 < 5) {\n      temp13 = (temp15 >> 6) + 0x38;\n      temp2 = temp13 * 2;\n    }\n    else if (temp18 < 0x15) {\n      temp13 = temp18 + 0x5b;\n      temp2 = temp13 * 2;\n    }\n    else if (temp18 < 0x55) {\n      temp13 = (temp15 >> 0xc) + 0x6e;\n      temp2 = temp13 * 2;\n    }\n    else if (temp18 < 0x155) {\n      temp13 = (temp15 >> 0xf) + 0x77;\n      temp2 = temp13 * 2;\n    }\n    else if (temp18 < 0x555) {\n      temp13 = (temp15 >> 0x12) + 0x7c;\n      temp2 = temp13 * 2;\n    }\n    else {\n      temp2 = 0xfc;\n      temp13 = 0x7e;\n    }\n    for (temp7 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[temp2]; temp2 * 4 + 0x20070464U != temp7\n        ; temp7 = *(dword *)(temp7 + 0xc)) {\n      temp18 = *(uint *)(temp7 + 4) & 0xfffffffc;\n      temp5 = temp18 - temp15;\n      if (0xf < temp5) {\n        temp13 = temp13 + -1;\n        break;\n      }\n      if (-1 < temp5) {\n        temp2 = temp18 + temp7;\n        temp15 = *(uint *)(temp2 + 4);\n        temp5 = *(int *)(temp7 + 0xc);\n        temp13 = *(int *)(temp7 + 8);\n        *(int *)(temp13 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp13;\n        *(uint *)(temp2 + 4) = temp15 | 1;\n        FUNC_00081f98(param_array);\n        return (int *)(temp7 + 8);\n      }\n    }\n    temp18 = temp13 + 1;\n  }\n  temp7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temp3 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp4 = temp3 & 0xfffffffc;\n    temp6 = temp4 - temp15;\n    if (0xf < (int)temp6) {\n      temp7 = temp15 + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = temp15 | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = temp7;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = temp7;\n      *(undefined4 *)(temp7 + 0xc) = 0x2007046c;\n      *(undefined4 *)(temp7 + 8) = 0x2007046c;\n      *(uint *)(temp7 + 4) = temp6 | 1;\n      *(uint *)(temp7 + temp6) = temp6;\n      FUNC_00081f98(param_array);\n      return (int *)(temp1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)temp6) {\n      *(uint *)(temp4 + temp1 + 4) = *(uint *)(temp4 + temp1 + 4) | 1;\n      FUNC_00081f98(param_array);\n      return (int *)(temp1 + 8);\n    }\n    if (temp4 < 0x200) {\n      temp4 = temp3 & 0xfffffff8;\n      temp13 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp4);\n      temp7 = 1 << ((int)(temp3 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(temp1 + 8) = temp13;\n      *(uint *)(temp1 + 0xc) = temp4 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = temp7;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp4) = temp1;\n      *(dword *)(temp13 + 0xc) = temp1;\n    }\n    else {\n      temp6 = temp3 >> 9;\n      if (temp6 < 5) {\n        temp2 = (temp3 >> 6) + 0x38;\n        temp13 = temp2 * 2;\n      }\n      else if (temp6 < 0x15) {\n        temp2 = temp6 + 0x5b;\n        temp13 = temp2 * 2;\n      }\n      else if (temp6 < 0x55) {\n        temp2 = (temp3 >> 0xc) + 0x6e;\n        temp13 = temp2 * 2;\n      }\n      else if (temp6 < 0x155) {\n        temp2 = (temp3 >> 0xf) + 0x77;\n        temp13 = temp2 * 2;\n      }\n      else if (temp6 < 0x555) {\n        temp2 = (temp3 >> 0x12) + 0x7c;\n        temp13 = temp2 * 2;\n      }\n      else {\n        temp13 = 0xfc;\n        temp2 = 0x7e;\n      }\n      temp7 = temp13 * 4 + 0x20070464;\n      temp11 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[temp13];\n      if (temp11 == temp7) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp2 >> 2 & 0xffU);\n        temp12 = temp11;\n      }\n      else {\n        do {\n          temp12 = temp11;\n          if ((*(uint *)(temp11 + 4) & 0xfffffffc) <= temp4) break;\n          temp11 = *(dword *)(temp11 + 8);\n          temp12 = temp11;\n        } while (temp7 != temp11);\n        temp11 = *(dword *)(temp12 + 0xc);\n      }\n      temp7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(temp1 + 0xc) = temp11;\n      *(dword *)(temp1 + 8) = temp12;\n      *(dword *)(temp11 + 8) = temp1;\n      *(dword *)(temp12 + 0xc) = temp1;\n    }\n  }\n  temp1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temp3 = 1 << ((int)temp18 >> 2 & 0xffU);\n  if (temp3 <= temp7) {\n    if ((temp7 & temp3) == 0) {\n      temp18 = temp18 & 0xfffffffc;\n      do {\n        temp3 = temp3 << 1;\n        temp18 = temp18 + 4;\n      } while ((temp7 & temp3) == 0);\n    }\n    do {\n      temp17 = &Elf32_Rel_ARRAY_20070000[temp18 + 0x8c].r_info;\n      temp_pointer2 = temp17;\n      temp4 = temp18;\n      do {\n        for (temp_pointer1 = (undefined *)temp_pointer2[3]; temp_pointer2 != (dword *)temp_pointer1;\n            temp_pointer1 = *(undefined **)(temp_pointer1 + 0xc)) {\n          temp6 = *(uint *)(temp_pointer1 + 4) & 0xfffffffc;\n          temp8 = temp6 - temp15;\n          if (0xf < (int)temp8) {\n            temp2 = *(int *)(temp_pointer1 + 8);\n            temp13 = *(int *)(temp_pointer1 + 0xc);\n            temp16 = temp_pointer1 + temp15;\n            *(uint *)(temp_pointer1 + 4) = temp15 | 1;\n            *(int *)(temp2 + 0xc) = temp13;\n            *(int *)(temp13 + 8) = temp2;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)temp16;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)temp16;\n            *(undefined4 *)(temp16 + 0xc) = 0x2007046c;\n            *(undefined4 *)(temp16 + 8) = 0x2007046c;\n            *(uint *)(temp16 + 4) = temp8 | 1;\n            *(uint *)(temp16 + temp8) = temp8;\n            FUNC_00081f98(param_array);\n            return (int *)(temp_pointer1 + 8);\n          }\n          if (-1 < (int)temp8) {\n            temp13 = *(int *)(temp_pointer1 + 8);\n            temp2 = *(int *)(temp_pointer1 + 0xc);\n            *(uint *)(temp_pointer1 + temp6 + 4) = *(uint *)(temp_pointer1 + temp6 + 4) | 1;\n            *(int *)(temp13 + 0xc) = temp2;\n            *(int *)(temp2 + 8) = temp13;\n            FUNC_00081f98(param_array);\n            return (int *)(temp_pointer1 + 8);\n          }\n        }\n        temp4 = temp4 + 1;\n        temp_pointer2 = temp_pointer2 + 2;\n      } while ((temp4 & 3) != 0);\n      do {\n        temp6 = temp18 & 3;\n        temp_pointer1 = (undefined *)(temp17 + -2);\n        temp18 = temp18 - 1;\n        if (temp6 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temp3;\n          break;\n        }\n        temp17 = (dword *)*temp17;\n      } while (temp17 == (dword *)temp_pointer1);\n      temp3 = temp3 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temp3 &&\n           temp3 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (temp18 = temp4, temp3 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temp3) == 0; temp3 = temp3 << 1) {\n        temp18 = temp18 + 4;\n      }\n    } while( true );\n  }\n  temp18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((temp15 <= temp18) &&\n     (temp3 = temp18 - temp15, temp7 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temp3))\n  goto LAB_00081b1a;\n  temp3 = Elf32_Rel_ARRAY_20070000[141].r_info + temp18;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp4 = temp15 + DAT_20071218 + 0x10;\n  }\n  else {\n    temp4 = temp15 + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  temp7 = FUN_0008236c(param_array,temp4);\n  if ((temp7 == 0xffffffff) || ((temp7 < temp3 && (temp1 != 0x20070464)))) {\n    temp18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    temp7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    temp6 = DAT_2007121c + temp4;\n    DAT_2007121c = temp6;\n    if ((temp3 == temp7) && ((temp3 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp4 + temp18 | 1;\n    }\n    else {\n      temp11 = temp7;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        temp11 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = temp6 + (temp7 - temp3);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = temp11;\n      temp3 = temp7 & 7;\n      if (temp3 == 0) {\n        temp13 = 0x1000;\n      }\n      else {\n        temp7 = temp7 + (8 - temp3);\n        temp13 = 0x1008 - temp3;\n      }\n      temp13 = temp13 - (temp4 + temp7 & 0xfff);\n      temp2 = FUN_0008236c(param_array,temp13);\n      if (temp2 == -1) {\n        temp3 = 1;\n        temp13 = 0;\n      }\n      else {\n        temp3 = (temp2 - temp7) + temp13 | 1;\n      }\n      temp6 = DAT_2007121c + temp13;\n      Elf32_Rel_ARRAY_20070000[141].r_info = temp7;\n      DAT_2007121c = temp6;\n      *(uint *)(temp7 + 4) = temp3;\n      if (temp1 != 0x20070464) {\n        if (temp18 < 0x10) {\n          *(undefined4 *)(temp7 + 4) = 1;\n          temp18 = 0;\n          goto LAB_00081b04;\n        }\n        temp18 = temp18 - 0xc & 0xfffffff8;\n        *(uint *)(temp1 + 4) = temp18 | *(uint *)(temp1 + 4) & 1;\n        *(undefined4 *)(temp1 + temp18 + 4) = 5;\n        *(undefined4 *)(temp1 + temp18 + 8) = 5;\n        if (0xf < temp18) {\n          FUN_00083b10(param_array,temp1 + 8);\n          temp6 = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < temp6) {\n      DAT_20071214 = temp6;\n    }\n    if (DAT_20071210 < temp6) {\n      DAT_20071210 = temp6;\n    }\n    temp18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    temp7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  temp3 = temp18 - temp15;\n  if ((temp18 < temp15) || ((int)temp3 < 0x10)) {\n    FUNC_00081f98(param_array);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = temp15 + temp7;\n  *(uint *)(temp7 + 4) = temp15 | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp3 | 1;\n  FUNC_00081f98(param_array);\n  return (int *)(temp7 + 8);\n}\n\n",
            "current_name": "allocate_and_init_memory_00081810",
            "entrypoint": "0x00081810",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081810": "allocate_and_init_memory_00081810",
                "LAB_00081876": "return_error",
                "dVar1": "temp1",
                "dVar11": "temp11",
                "dVar12": "temp12",
                "dVar17": "relative_offset1",
                "dVar7": "temp7",
                "iVar13": "temp13",
                "iVar2": "temp2",
                "iVar5": "temp5",
                "iVar9": "temp9",
                "param_1": "param_array",
                "param_2": "size",
                "pdVar14": "temp_pointer2",
                "pdVar17": "temp17",
                "puVar10": "temp_pointer1",
                "puVar16": "temp16",
                "uVar15": "temp15",
                "uVar18": "temp18",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar6": "temp6",
                "uVar8": "temp8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d48": {
            "additional_data": {
                "FUN_00081d48": {
                    "copy_data": 2,
                    "copy_memory": 26,
                    "mem_copy": 1,
                    "memcpy": 2
                },
                "bVar6": {
                    "can_copy": 1,
                    "condition": 1,
                    "is_bytes_left_greater_than_zero": 1,
                    "is_copy_remaining": 1,
                    "is_greater_than_three": 1,
                    "is_inner_loop_running": 1,
                    "is_looping": 5,
                    "is_remaining": 4,
                    "is_remaining_size_positive": 2,
                    "is_size_greater_than3": 2,
                    "is_temp_size_valid": 1,
                    "is_true": 1,
                    "loop_condition": 8,
                    "loop_flag": 1,
                    "should_continue": 1
                },
                "param_1": {
                    "dest": 10,
                    "destination": 20,
                    "dst": 1
                },
                "param_2": {
                    "source": 20,
                    "src": 11
                },
                "param_3": {
                    "length": 2,
                    "num_bytes": 1,
                    "size": 28
                },
                "puVar1": {
                    "dest_pointer": 2,
                    "dest_ptr": 21,
                    "dst_ptr": 6,
                    "src_current": 1,
                    "temp_dest_ptr": 1
                },
                "puVar2": {
                    "dest": 1,
                    "dest_current": 2,
                    "dest_end": 7,
                    "dest_end_ptr": 3,
                    "dest_iter": 1,
                    "dest_ptr_aligned": 1,
                    "dest_ptr_copy": 1,
                    "dest_ptr_end": 1,
                    "dest_ptr_temp": 1,
                    "dst": 2,
                    "dst_temp": 1,
                    "src_ptr": 10
                },
                "puVar3": {
                    "dest_ptr2": 1,
                    "dest_ptr_end": 1,
                    "dst_end_ptr": 1,
                    "inner_dest_ptr": 1,
                    "source_ptr": 1,
                    "src": 2,
                    "src_current": 1,
                    "src_iter": 1,
                    "src_pointer": 2,
                    "src_ptr": 11,
                    "src_temp": 1,
                    "temp_dest": 1,
                    "temp_dest_ptr": 1,
                    "temp_dst": 1,
                    "temp_ptr": 3,
                    "temp_src_ptr": 1,
                    "tmp_ptr": 1
                },
                "uVar4": {
                    "bytes_remaining": 1,
                    "count": 1,
                    "loop_size": 1,
                    "remainder": 1,
                    "remaining_length": 1,
                    "remaining_size": 19,
                    "size_minus16": 1,
                    "size_remaining": 1,
                    "temp_size": 2,
                    "temp_size1": 1,
                    "temp_size_minus4": 1,
                    "temp_var1": 1
                },
                "uVar5": {
                    "adjusted_size": 1,
                    "bytes_left": 1,
                    "copy_size": 4,
                    "inner_length": 1,
                    "loop_count": 4,
                    "loop_counter": 2,
                    "loop_size": 2,
                    "remaining_4bytes": 1,
                    "remaining_size": 2,
                    "remaining_size_minus4": 1,
                    "size_minus4": 1,
                    "temp_size": 7,
                    "temp_size2": 2,
                    "temp_var2": 1,
                    "unrolled_size": 1
                },
                "uVar5_2": {
                    "loop_count2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00083ca8"
            ],
            "code": "\nundefined4 * copy_memory_00081d48(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint temp_size;\n  bool loop_condition;\n  \n  src_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      temp_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = src_ptr;\n          loop_condition = temp_size != 0;\n          temp_size = temp_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          src_ptr = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      temp_size = 4 - ((uint)destination & 3);\n      size = size - temp_size;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      src_ptr = dest_ptr;\n      source = src_ptr;\n      if ((temp_size & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        src_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *src_ptr = *source;\n    src_ptr[1] = source[1];\n    src_ptr[2] = source[2];\n    src_ptr[3] = source[3];\n    src_ptr[4] = source[4];\n    src_ptr[5] = source[5];\n    src_ptr[6] = source[6];\n    src_ptr[7] = source[7];\n    src_ptr[8] = source[8];\n    src_ptr[9] = source[9];\n    src_ptr[10] = source[10];\n    src_ptr[0xb] = source[0xb];\n    src_ptr[0xc] = source[0xc];\n    src_ptr[0xd] = source[0xd];\n    src_ptr[0xe] = source[0xe];\n    src_ptr[0xf] = source[0xf];\n    src_ptr = src_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *src_ptr = *source;\n      src_ptr[1] = source[1];\n      src_ptr[2] = source[2];\n      src_ptr[3] = source[3];\n      src_ptr = src_ptr + 4;\n      source = source + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  temp_size = remaining_size + 0xc;\n  src_ptr = src_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < temp_size;\n      temp_size = temp_size - 4;\n      src_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (loop_condition);\n  }\nLAB_00081dcc:\n  if (temp_size + 4 != 0) {\n    dest_ptr = src_ptr;\n    src_ptr = source;\n    if ((temp_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)src_ptr + 1);\n      *(undefined *)src_ptr = *(undefined *)source;\n    }\n    if ((temp_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "current_name": "copy_memory_00081d48",
            "entrypoint": "0x00081d48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "bVar6": "loop_condition",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "temp_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081e34": {
            "additional_data": {
                "FUN_00081e34": {
                    "copy_and_reverse": 2,
                    "copy_memory": 20,
                    "reverse_copy": 6,
                    "reverse_copy_array": 1,
                    "reverse_memory": 2
                },
                "default": {
                    "next_iteration": 1
                },
                "iVar1": {
                    "count": 5,
                    "counter": 3,
                    "i": 2,
                    "index": 14,
                    "iteration": 3,
                    "loop_counter": 1,
                    "num_iterations": 1,
                    "remaining_size": 1
                },
                "param_1": {
                    "dest": 9,
                    "dest_pointer": 1,
                    "destination": 16,
                    "source": 3,
                    "source_array": 1,
                    "src": 1
                },
                "param_2": {
                    "dest": 1,
                    "dest_array": 1,
                    "destination": 3,
                    "source": 16,
                    "src": 9,
                    "src_pointer": 1
                },
                "param_3": {
                    "length": 12,
                    "size": 19
                },
                "puVar2": {
                    "dest_pointer": 3,
                    "dest_ptr": 19,
                    "dst_ptr": 4,
                    "next_source": 1,
                    "source_ptr": 1,
                    "src_ptr": 3
                },
                "puVar3": {
                    "dest_ptr": 1,
                    "destination_ptr": 1,
                    "dst_ptr": 2,
                    "next_dest": 1,
                    "source_pointer": 1,
                    "source_ptr": 1,
                    "src_pointer": 2,
                    "src_ptr": 22
                },
                "puVar4": {
                    "copy_dest": 1,
                    "copy_ptr": 2,
                    "curr_dest": 1,
                    "dest_end": 2,
                    "end_ptr": 2,
                    "source_end": 1,
                    "src_end_ptr": 3,
                    "target_ptr": 1,
                    "temp": 2,
                    "temp_dest_ptr": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 13
                },
                "puVar6": {
                    "copy_byte": 1,
                    "copy_ptr": 1,
                    "copy_src": 1,
                    "curr_src": 1,
                    "dest_byte": 1,
                    "dest_byte_ptr": 1,
                    "dest_end": 1,
                    "dest_end_ptr": 3,
                    "dst_end_ptr": 2,
                    "dst_ptr_byte": 1,
                    "temp": 2,
                    "temp_byte": 5,
                    "temp_char": 2,
                    "temp_data": 2,
                    "temp_dest": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 2,
                    "temp_ptr2": 3
                },
                "uVar5": {
                    "copy_count": 1,
                    "copy_length": 1,
                    "remainder": 1,
                    "remaining": 3,
                    "remaining_length": 5,
                    "remaining_size": 5,
                    "temp": 1,
                    "temp_length": 3,
                    "temp_size": 8,
                    "temp_value": 1,
                    "temp_var": 1,
                    "unaligned_bytes": 1
                },
                "uVar7": {
                    "extra": 1,
                    "last_bytes": 2,
                    "offset": 1,
                    "rem_size": 1,
                    "remainder": 11,
                    "remainder_length": 1,
                    "remainder_size": 2,
                    "remaining": 1,
                    "remaining_bytes": 3,
                    "remaining_length": 1,
                    "remaining_size": 1,
                    "short_size": 1,
                    "size_mod16": 1,
                    "src_byte": 1,
                    "temp_remainder": 1,
                    "temp_size2": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8"
            ],
            "code": "\nvoid copy_memory_00081e34(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint temp_size;\n  undefined *temp_byte;\n  uint remainder;\n  \n  if ((source < destination) && (temp_ptr = (undefined4 *)((int)source + size), destination < temp_ptr)) {\n    temp_byte = (undefined *)((int)destination + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        temp_byte = temp_byte + -1;\n        *temp_byte = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    temp_ptr = destination;\n    src_ptr = source;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainder = size & 0xf;\n    source = source + index * 4;\n    destination = destination + index * 4;\n    temp_size = remainder;\n    temp_ptr = destination;\n    src_ptr = source;\n    if (3 < remainder) {\n      do {\n        temp_size = temp_size - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < temp_size);\n      index = (remainder - 4 & 0xfffffffc) + 4;\n      destination = (undefined4 *)((int)destination + index);\n      source = (undefined4 *)((int)source + index);\n      remainder = size & 3;\n    }\n    size = remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  temp_ptr = destination;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)source;\n    source = (undefined4 *)((int)source + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)destination));\n  return;\n}\n\n",
            "current_name": "copy_memory_00081e34",
            "entrypoint": "0x00081e34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "iVar1": "index",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "puVar6": "temp_byte",
                "uVar5": "temp_size",
                "uVar7": "remainder"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081f00": {
            "additional_data": {
                "FUN_00081f00": {
                    "copy_data": 3,
                    "fill_buffer_with_byte": 1,
                    "fill_memory": 4,
                    "fill_memory_with": 1,
                    "fill_memory_with_byte": 2,
                    "fill_memory_with_value": 2,
                    "initialize_memory": 2,
                    "memset": 10,
                    "memset_array": 1,
                    "memset_with_byte": 1,
                    "memset_with_length": 1,
                    "memset_with_padding": 1,
                    "write_data": 1,
                    "write_pattern_to_memory": 1
                },
                "LAB_00081f7c": {
                    "end_loop": 1,
                    "end_of_loop": 2
                },
                "bVar5": {
                    "is_empty": 1,
                    "is_end": 1,
                    "is_length_zero": 4,
                    "is_size_zero": 7,
                    "is_zero": 12,
                    "is_zero_count": 1,
                    "is_zero_length": 1,
                    "is_zero_size": 3,
                    "size_zero": 1
                },
                "param_1": {
                    "array": 1,
                    "buffer": 3,
                    "dest": 12,
                    "destination": 6,
                    "destination_pointer": 1,
                    "dst": 4,
                    "memory": 2,
                    "memory_pointer": 1,
                    "ptr": 1
                },
                "param_2": {
                    "byte": 2,
                    "byte_value": 1,
                    "pattern": 1,
                    "source_byte": 1,
                    "src": 1,
                    "value": 25
                },
                "param_3": {
                    "count": 2,
                    "length": 8,
                    "num": 1,
                    "num_bytes": 1,
                    "size": 19
                },
                "puVar1": {
                    "current": 2,
                    "current_address": 1,
                    "current_pointer": 1,
                    "dest_ptr": 17,
                    "dst_ptr": 4,
                    "p_buffer": 1,
                    "p_dest": 1,
                    "ptr": 2,
                    "ptr1": 2
                },
                "puVar2": {
                    "dest_ptr_temp": 1,
                    "next": 3,
                    "next_address": 1,
                    "next_dest_ptr": 10,
                    "next_dst_ptr": 2,
                    "next_pointer": 1,
                    "next_ptr": 3,
                    "p_dest_next": 1,
                    "p_next_buffer": 1,
                    "ptr": 1,
                    "ptr2": 2,
                    "temp_ptr": 5
                },
                "uVar3": {
                    "byte_value": 1,
                    "byte_word": 1,
                    "fill_value": 5,
                    "four_byte_value": 2,
                    "init_value": 1,
                    "new_value": 3,
                    "padded_value": 1,
                    "pattern": 5,
                    "pattern32": 1,
                    "repeated_value": 1,
                    "temp_value": 1,
                    "value32": 6,
                    "value4_bytes": 1,
                    "value_as_word": 1,
                    "value_pattern": 1
                },
                "uVar4": {
                    "length_remaining": 1,
                    "loop_size": 1,
                    "remainder": 1,
                    "remaining": 3,
                    "remaining_bytes": 1,
                    "remaining_count": 1,
                    "remaining_length": 7,
                    "remaining_num": 1,
                    "remaining_size": 12,
                    "size_temp": 1,
                    "temp_size": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "code": "\nvoid memset_array_00081f00(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 value32;\n  uint remaining_size;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    is_zero = size == 0;\n    dest_ptr = dest;\n    size = size - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = size == 0;\n      dest_ptr = dest;\n      size = size - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = value32;\n        dest_ptr[1] = value32;\n        dest_ptr[2] = value32;\n        dest_ptr[3] = value32;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto end_of_loop;\n    }\n    do {\n      size = size - 4;\n      *dest = value32;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nend_of_loop:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "current_name": "memset_array_00081f00",
            "entrypoint": "0x00081f00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081f00": "memset_array_00081f00",
                "LAB_00081f7c": "end_of_loop",
                "bVar5": "is_zero",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "value32",
                "uVar4": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081f94": {
            "called": [],
            "calling": [
                "FUN_00081fac",
                "FUN_00081810",
                "FUN_00083a74",
                "FUN_00083b10"
            ],
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00081f94",
            "entrypoint": "0x00081f94",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00081f98": {
            "called": [],
            "calling": [
                "FUN_00081fac",
                "FUN_00081810",
                "FUN_00083a74",
                "FUN_00083b10"
            ],
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00081f98",
            "entrypoint": "0x00081f98",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00081f9c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "relocation_array": 1,
                    "relocation_array_location": 1
                },
                "FUN_00081f9c": {
                    "apply_relocation": 1,
                    "execute_relocation": 1,
                    "extract_and_process_rel_data": 1,
                    "extract_relocation_entry": 1,
                    "process_elf_rel_data": 1,
                    "process_elf_rel_entry": 1,
                    "process_elf_relocation": 7,
                    "process_function": 1,
                    "process_rel_table_entry": 1,
                    "process_relative": 1,
                    "process_relocation": 8,
                    "process_relocation_entry": 3,
                    "process_relocations": 1,
                    "reverse_elf_relocation": 1,
                    "update_relocation_entries": 1
                },
                "FUN_00081fac": {
                    "apply_elf_relocation": 1,
                    "apply_relocation": 14,
                    "apply_relocation_helper": 1,
                    "perform_relocation": 3,
                    "perform_relocations": 1,
                    "process_data": 1,
                    "process_elf_rel_data": 1,
                    "process_rel_data": 1,
                    "process_rel_entry": 1,
                    "process_relocation": 3,
                    "process_relocation_entry": 1,
                    "process_subfunction": 1
                },
                "param_1": {
                    "array": 1,
                    "data": 1,
                    "elf_relocation_entry": 1,
                    "entry_offset": 1,
                    "entry_ptr": 1,
                    "input_param": 1,
                    "offset": 7,
                    "offset_ptr": 1,
                    "param_1": 1,
                    "param_offset": 1,
                    "rel_data": 1,
                    "rel_entry": 1,
                    "relocation_array": 3,
                    "relocation_entry": 5,
                    "relocation_offset": 2,
                    "relocation_ptr": 1,
                    "relocation_table_entry": 1,
                    "source_address": 1
                },
                "param_2": {
                    "arg1": 1,
                    "output_param": 1,
                    "param": 3,
                    "param1": 6,
                    "param2": 6,
                    "param2_ptr": 1,
                    "param_1": 3,
                    "param_2": 7,
                    "param_ptr": 2,
                    "param_size": 1
                },
                "param_3": {
                    "length": 1,
                    "param2": 2,
                    "param3": 5,
                    "param3_value": 1,
                    "param_2": 2,
                    "param_3": 7,
                    "relocation_size": 1,
                    "size": 1
                },
                "r_offset": {
                    "offset": 2
                },
                "undefined4": {
                    "param_type": 1
                }
            },
            "called": [
                "FUN_00081fac"
            ],
            "calling": [
                "FUN_00081496"
            ],
            "code": "\nvoid process_elf_relocation_00081f9c(param_type offset,param_type param_2)\n\n{\n  FUN_00081fac(relocation_array[140].offset,offset,param_2);\n  return;\n}\n\n",
            "current_name": "process_elf_relocation_00081f9c",
            "entrypoint": "0x00081f9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00081f9c": "process_elf_relocation_00081f9c",
                "param_1": "offset",
                "r_offset": "offset",
                "undefined4": "param_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081fac": {
            "additional_data": {
                "ELF32_REL_ARRAY": {
                    "elf32_rel_array": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "data_array": 1,
                    "rel_array": 3,
                    "replacement_array": 1
                },
                "FIND_FREE_MEMORY": {
                    "find_free_memory": 1
                },
                "FUNC_00081810": {
                    "function_b": 1
                },
                "FUNC_00081f94": {
                    "function_a": 1,
                    "function_action1": 1,
                    "helper_function1": 1,
                    "initialize": 1,
                    "initialize_function": 1
                },
                "FUNC_00081f98": {
                    "cleanup": 1,
                    "cleanup_function": 1,
                    "function_action2": 1,
                    "function_c": 1,
                    "helper_function2": 1
                },
                "FUN_00081810": {
                    "allocate_memory": 3,
                    "allocate_memory_function": 1
                },
                "FUN_00081e34": {
                    "copy_data": 1,
                    "function_action3": 1,
                    "function_d": 1,
                    "merge_arrays": 1
                },
                "FUN_00081fac": {
                    "allocate_and_copy_memory": 1,
                    "allocate_memory": 4,
                    "process_data": 1,
                    "reallocate_memory": 1,
                    "rearrange_memory_blocks": 1
                },
                "FUN_00083b10": {
                    "free_memory": 1,
                    "function_action4": 1,
                    "function_e": 1,
                    "process_data": 1
                },
                "LAB_00082078": {
                    "label1": 1
                },
                "dVar1": {
                    "current_entry": 1,
                    "d_var1": 2,
                    "dword_var": 1,
                    "temp": 2,
                    "temp1": 5,
                    "temp_d_var": 1,
                    "temp_dword": 2,
                    "temp_value": 2,
                    "temp_value1": 1,
                    "temp_var": 1,
                    "temp_var1": 7,
                    "temp_var3": 1,
                    "temp_variable1": 1,
                    "tmp_var1": 1
                },
                "dword": {
                    "integer": 1
                },
                "iVar4": {
                    "i_var4": 1,
                    "int_var": 1,
                    "offset": 1,
                    "prev_size": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp3": 4,
                    "temp4": 1,
                    "temp_i_var": 1,
                    "temp_int": 1,
                    "temp_int1": 1,
                    "temp_value_3": 1,
                    "temp_var2": 2,
                    "temp_var3": 6,
                    "temp_var4": 1,
                    "temp_variable1": 1,
                    "temp_variable3": 1,
                    "tmp_var3": 1
                },
                "iVar6": {
                    "i_var6": 1,
                    "int_var2": 1,
                    "next_size": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp4": 2,
                    "temp5": 4,
                    "temp6": 1,
                    "temp_i_var2": 1,
                    "temp_int2": 1,
                    "temp_int_2": 1,
                    "temp_value_5": 1,
                    "temp_var4": 2,
                    "temp_var5": 6,
                    "temp_var6": 1,
                    "temp_variable2": 1,
                    "temp_variable5": 1,
                    "tmp_var4": 1
                },
                "param_1": {
                    "argument1": 1,
                    "array_ptr": 1,
                    "function_parameter": 1,
                    "function_ptr": 1,
                    "input_array": 13,
                    "mem_block": 1,
                    "memory_start": 1,
                    "param1": 2,
                    "param_array": 2,
                    "param_pointer": 3,
                    "parameter1": 1,
                    "parameter_array": 1,
                    "result": 1,
                    "target": 1
                },
                "param_2": {
                    "allocated_memory": 1,
                    "argument2": 1,
                    "array_pointer": 1,
                    "base_address": 1,
                    "buffer": 3,
                    "data_array": 1,
                    "data_array_pointer": 1,
                    "data_ptr": 1,
                    "existing_data": 1,
                    "input_array": 2,
                    "memory": 2,
                    "memory_block": 1,
                    "output_array": 10,
                    "param2": 2,
                    "parameter2": 1,
                    "prev_block": 1
                },
                "param_3": {
                    "argument3": 1,
                    "array_length": 5,
                    "array_size": 6,
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "data_size": 2,
                    "input_size": 1,
                    "length": 1,
                    "memory_size": 1,
                    "output_array_size": 1,
                    "param3": 2,
                    "parameter3": 1,
                    "size": 7
                },
                "piVar10": {
                    "allocated_block": 1,
                    "pi_var10": 1,
                    "ptr_var3": 1,
                    "result_address": 1,
                    "result_minus_2": 1,
                    "temp10": 1,
                    "temp9": 2,
                    "temp_array2": 2,
                    "temp_array_2": 1,
                    "temp_pointer2": 4,
                    "temp_pointer3": 1,
                    "temp_ptr2": 2,
                    "temp_result": 1,
                    "temp_result2": 1,
                    "temp_var7": 2,
                    "temp_var8": 1,
                    "temp_var9": 3,
                    "temp_variable9": 1,
                    "tmp_array2": 1
                },
                "piVar2": {
                    "current_block": 1,
                    "new_address": 1,
                    "output_array": 1,
                    "ptr": 1,
                    "ptr_var": 1,
                    "result": 14,
                    "result_array": 2,
                    "result_pointer": 4,
                    "result_ptr": 1,
                    "temp2": 1,
                    "temp_pointer1": 1
                },
                "piVar7": {
                    "next_block": 1,
                    "pi_var7": 1,
                    "prev_address": 1,
                    "ptr_var2": 1,
                    "temp3": 1,
                    "temp6": 2,
                    "temp7": 1,
                    "temp_array": 1,
                    "temp_array1": 1,
                    "temp_array_1": 1,
                    "temp_pi_var": 1,
                    "temp_pointer1": 4,
                    "temp_pointer2": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 1,
                    "temp_result": 1,
                    "temp_var5": 1,
                    "temp_var6": 5,
                    "temp_variable6": 1,
                    "tmp_array": 1
                },
                "uVar3": {
                    "block_size": 1,
                    "data": 1,
                    "remaining_size": 1,
                    "temp1": 2,
                    "temp2": 4,
                    "temp3": 1,
                    "temp_u_var": 1,
                    "temp_uint": 1,
                    "temp_uint1": 1,
                    "temp_value2": 1,
                    "temp_value_2": 1,
                    "temp_var": 1,
                    "temp_var1": 2,
                    "temp_var2": 6,
                    "temp_var3": 1,
                    "temp_variable2": 1,
                    "tmp_var2": 1,
                    "u_var3": 1
                },
                "uVar5": {
                    "block_size": 1,
                    "local_var1": 1,
                    "prev_block_size": 1,
                    "temp3": 2,
                    "temp4": 4,
                    "temp5": 1,
                    "temp_u_var2": 1,
                    "temp_uint2": 1,
                    "temp_uint_2": 1,
                    "temp_value3": 1,
                    "temp_value_4": 1,
                    "temp_var2": 1,
                    "temp_var3": 2,
                    "temp_var4": 6,
                    "temp_var5": 1,
                    "temp_variable4": 1,
                    "u_var5": 2
                },
                "uVar8": {
                    "adjusted_block_size": 1,
                    "adjusted_size": 1,
                    "local_var2": 1,
                    "remaining_size": 1,
                    "requested_size": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp7": 2,
                    "temp8": 1,
                    "temp_size1": 1,
                    "temp_u_var3": 1,
                    "temp_uint3": 1,
                    "temp_uint_3": 1,
                    "temp_value4": 1,
                    "temp_value_6": 1,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "temp_var6": 2,
                    "temp_var7": 3,
                    "temp_var8": 1,
                    "temp_variable7": 1,
                    "u_var8": 1,
                    "updated_length": 1
                },
                "uVar9": {
                    "adjusted_size": 1,
                    "aligned_size": 2,
                    "new_size": 1,
                    "rounded_length": 1,
                    "rounded_size": 1,
                    "temp11": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_size2": 1,
                    "temp_u_var4": 1,
                    "temp_uint4": 1,
                    "temp_uint_4": 1,
                    "temp_value5": 1,
                    "temp_value_7": 1,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "temp_var6": 1,
                    "temp_var7": 2,
                    "temp_var8": 3,
                    "temp_var9": 1,
                    "temp_variable8": 1,
                    "u_var9": 1
                }
            },
            "called": [
                "FUN_00081e34",
                "FUN_00081810",
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083b10"
            ],
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "code": "\nint * allocate_and_copy_memory_00081fac(undefined4 *input_array,int *output_array,uint size)\n\n{\n  integer temp_var1;\n  int *result;\n  uint temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  int temp_var5;\n  int *temp_var6;\n  uint temp_var7;\n  uint temp_var8;\n  int *temp_pointer2;\n  \n  if (output_array == (int *)0x0) {\n    result = (int *)FUN_00081810(input_array,size);\n    return result;\n  }\n  FUNC_00081f94();\n  temp_var4 = output_array[-1];\n  temp_var7 = temp_var4 & 0xfffffffc;\n  result = output_array + -2;\n  if (size + 0xb < 0x17) {\n    temp_var8 = 0x10;\n  }\n  else {\n    temp_var8 = size + 0xb & 0xfffffff8;\n    if ((int)temp_var8 < 0) goto label1;\n  }\n  if (temp_var8 < size) {\nlabel1:\n    *input_array = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp_var7 < (int)temp_var8) {\n    temp_var1 = (int)result + temp_var7;\n    if (rel_array[141].r_info == temp_var1) {\n      temp_var2 = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n      temp_var1 = rel_array[141].r_info;\n      if ((int)(temp_var8 + 0x10) <= (int)(temp_var2 + temp_var7)) {\n        rel_array[141].r_info = (int)result + temp_var8;\n        *(uint *)(rel_array[141].r_info + 4) = (temp_var2 + temp_var7) - temp_var8 | 1;\n        output_array[-1] = temp_var8 | output_array[-1] & 1U;\n        FUNC_00081f98(input_array);\n        return output_array;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_var1 + 4) & 0xfffffffe) + temp_var1 + 4) & 1) == 0) {\n      temp_var2 = *(uint *)(temp_var1 + 4) & 0xfffffffc;\n      if ((int)temp_var8 <= (int)(temp_var2 + temp_var7)) {\n        temp_var5 = *(int *)(temp_var1 + 0xc);\n        temp_var3 = *(int *)(temp_var1 + 8);\n        *(int *)(temp_var3 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var3;\n        temp_var7 = temp_var2 + temp_var7;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      temp_var2 = 0;\n      temp_var1 = 0;\n    }\n    if (-1 < (int)(temp_var4 << 0x1f)) {\n      temp_pointer2 = (int *)((int)result - output_array[-2]);\n      temp_var4 = (temp_pointer2[1] & 0xfffffffcU) + temp_var7;\n      if (temp_var1 != 0) {\n        if (temp_var1 == rel_array[141].r_info) {\n          if ((int)(temp_var8 + 0x10) <= (int)(temp_var2 + temp_var4)) {\n            result = temp_pointer2 + 2;\n            temp_var3 = *result;\n            temp_var5 = temp_pointer2[3];\n            temp_var7 = temp_var7 - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            if (temp_var7 < 0x25) {\n              temp_var6 = result;\n              if (0x13 < temp_var7) {\n                temp_pointer2[2] = *output_array;\n                temp_pointer2[3] = output_array[1];\n                if (temp_var7 < 0x1c) {\n                  output_array = output_array + 2;\n                  temp_var6 = temp_pointer2 + 4;\n                }\n                else {\n                  temp_pointer2[4] = output_array[2];\n                  temp_pointer2[5] = output_array[3];\n                  if (temp_var7 == 0x24) {\n                    temp_pointer2[6] = output_array[4];\n                    temp_var6 = output_array + 5;\n                    output_array = output_array + 6;\n                    temp_pointer2[7] = *temp_var6;\n                    temp_var6 = temp_pointer2 + 8;\n                  }\n                  else {\n                    output_array = output_array + 4;\n                    temp_var6 = temp_pointer2 + 6;\n                  }\n                }\n              }\n              *temp_var6 = *output_array;\n              temp_var6[1] = output_array[1];\n              temp_var6[2] = output_array[2];\n            }\n            else {\n              FUN_00081e34(result,output_array);\n            }\n            rel_array[141].r_info = (int)temp_pointer2 + temp_var8;\n            *(uint *)(rel_array[141].r_info + 4) = (temp_var2 + temp_var4) - temp_var8 | 1;\n            temp_pointer2[1] = temp_var8 | temp_pointer2[1] & 1U;\n            FUNC_00081f98(input_array);\n            return result;\n          }\n        }\n        else {\n          temp_var2 = temp_var2 + temp_var4;\n          if ((int)temp_var8 <= (int)temp_var2) {\n            temp_var5 = *(int *)(temp_var1 + 0xc);\n            temp_var3 = *(int *)(temp_var1 + 8);\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            temp_var6 = temp_pointer2 + 2;\n            temp_var3 = *temp_var6;\n            temp_var5 = temp_pointer2[3];\n            temp_var4 = temp_var7 - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            temp_var7 = temp_var2;\n            if (temp_var4 < 0x25) {\n              result = temp_var6;\n              if (0x13 < temp_var4) {\n                temp_pointer2[2] = *output_array;\n                temp_pointer2[3] = output_array[1];\n                if (temp_var4 < 0x1c) {\n                  output_array = output_array + 2;\n                  result = temp_pointer2 + 4;\n                }\n                else {\n                  temp_pointer2[4] = output_array[2];\n                  temp_pointer2[5] = output_array[3];\n                  if (temp_var4 == 0x24) {\n                    temp_pointer2[6] = output_array[4];\n                    result = output_array + 5;\n                    output_array = output_array + 6;\n                    temp_pointer2[7] = *result;\n                    result = temp_pointer2 + 8;\n                  }\n                  else {\n                    output_array = output_array + 4;\n                    result = temp_pointer2 + 6;\n                  }\n                }\n              }\n              *result = *output_array;\n              result[1] = output_array[1];\n              result[2] = output_array[2];\n              temp_var4 = temp_pointer2[1];\n              result = temp_pointer2;\n              output_array = temp_var6;\n            }\n            else {\n              FUN_00081e34(temp_var6,output_array);\n              temp_var4 = temp_pointer2[1];\n              result = temp_pointer2;\n              output_array = temp_var6;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)temp_var8 <= (int)temp_var4) {\n        temp_var6 = temp_pointer2 + 2;\n        temp_var3 = *temp_var6;\n        temp_var5 = temp_pointer2[3];\n        temp_var2 = temp_var7 - 4;\n        *(int *)(temp_var3 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var3;\n        temp_var7 = temp_var4;\n        if (temp_var2 < 0x25) {\n          result = temp_var6;\n          if (0x13 < temp_var2) {\n            temp_pointer2[2] = *output_array;\n            temp_pointer2[3] = output_array[1];\n            if (temp_var2 < 0x1c) {\n              output_array = output_array + 2;\n              result = temp_pointer2 + 4;\n            }\n            else {\n              temp_pointer2[4] = output_array[2];\n              temp_pointer2[5] = output_array[3];\n              if (temp_var2 == 0x24) {\n                temp_pointer2[6] = output_array[4];\n                result = output_array + 5;\n                output_array = output_array + 6;\n                temp_pointer2[7] = *result;\n                result = temp_pointer2 + 8;\n              }\n              else {\n                output_array = output_array + 4;\n                result = temp_pointer2 + 6;\n              }\n            }\n          }\n          *result = *output_array;\n          result[1] = output_array[1];\n          result[2] = output_array[2];\n          temp_var4 = temp_pointer2[1];\n          result = temp_pointer2;\n          output_array = temp_var6;\n        }\n        else {\n          FUN_00081e34(temp_var6,output_array);\n          temp_var4 = temp_pointer2[1];\n          result = temp_pointer2;\n          output_array = temp_var6;\n        }\n        goto LAB_00082088;\n      }\n    }\n    temp_pointer2 = (int *)FUN_00081810(input_array,size);\n    if (temp_pointer2 == (int *)0x0) goto LAB_000820a0;\n    temp_var4 = output_array[-1];\n    if (temp_pointer2 + -2 != (int *)((temp_var4 & 0xfffffffe) + (int)result)) {\n      temp_var7 = temp_var7 - 4;\n      if (temp_var7 < 0x25) {\n        result = output_array;\n        temp_var6 = temp_pointer2;\n        if (0x13 < temp_var7) {\n          *temp_pointer2 = *output_array;\n          temp_pointer2[1] = output_array[1];\n          if (temp_var7 < 0x1c) {\n            result = output_array + 2;\n            temp_var6 = temp_pointer2 + 2;\n          }\n          else {\n            temp_pointer2[2] = output_array[2];\n            temp_pointer2[3] = output_array[3];\n            if (temp_var7 == 0x24) {\n              temp_pointer2[4] = output_array[4];\n              temp_pointer2[5] = output_array[5];\n              result = output_array + 6;\n              temp_var6 = temp_pointer2 + 6;\n            }\n            else {\n              result = output_array + 4;\n              temp_var6 = temp_pointer2 + 4;\n            }\n          }\n        }\n        *temp_var6 = *result;\n        temp_var6[1] = result[1];\n        temp_var6[2] = result[2];\n      }\n      else {\n        FUN_00081e34(temp_pointer2,output_array);\n      }\n      FUN_00083b10(input_array,output_array);\n      goto LAB_000820a0;\n    }\n    temp_var7 = temp_var7 + (temp_pointer2[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  temp_var2 = temp_var7 - temp_var8;\n  temp_pointer2 = output_array;\n  if (temp_var2 < 0x10) {\n    result[1] = temp_var4 & 1 | temp_var7;\n    *(uint *)((int)result + temp_var7 + 4) = *(uint *)((int)result + temp_var7 + 4) | 1;\n  }\n  else {\n    result[1] = temp_var4 & 1 | temp_var8;\n    *(uint *)((int)result + temp_var8 + 4) = temp_var2 | 1;\n    *(uint *)((int)result + temp_var2 + temp_var8 + 4) = *(uint *)((int)result + temp_var2 + temp_var8 + 4) | 1;\n    FUN_00083b10(input_array,(int)result + temp_var8 + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(input_array);\n  return temp_pointer2;\n}\n\n",
            "current_name": "allocate_and_copy_memory_00081fac",
            "entrypoint": "0x00081fac",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081fac": "allocate_and_copy_memory_00081fac",
                "LAB_00082078": "label1",
                "dVar1": "temp_var1",
                "dword": "integer",
                "iVar4": "temp_var3",
                "iVar6": "temp_var5",
                "param_1": "input_array",
                "param_2": "output_array",
                "param_3": "size",
                "piVar10": "temp_pointer2",
                "piVar2": "result",
                "piVar7": "temp_var6",
                "uVar3": "temp_var2",
                "uVar5": "temp_var4",
                "uVar8": "temp_var7",
                "uVar9": "temp_var8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008236c": {
            "additional_data": {
                "DAT_20071244": {
                    "error_value": 2
                },
                "FUN_0008236c": {
                    "check_and_update_param": 1,
                    "check_return_value_and_set_param": 1,
                    "copy_result_if_successful": 1,
                    "extract_and_assign_data": 1,
                    "extract_data": 1,
                    "find_error_value": 1,
                    "find_negative_value": 1,
                    "find_result": 1,
                    "get_processed_data": 1,
                    "handle_return_value": 1,
                    "process_condition": 1,
                    "process_data": 9,
                    "process_error": 1,
                    "process_function": 1,
                    "process_param": 1,
                    "update_param": 1,
                    "update_param_value": 2,
                    "update_parameter_if_error": 1,
                    "update_value_if_error": 1
                },
                "iVar1": {
                    "error": 1,
                    "error_code": 1,
                    "find_return_value": 1,
                    "result": 14,
                    "return_value": 10,
                    "status": 2
                },
                "param_1": {
                    "output": 8,
                    "output_data": 1,
                    "output_param": 1,
                    "output_ptr": 1,
                    "output_value": 4,
                    "output_variable": 1,
                    "param": 1,
                    "param_value": 1,
                    "param_values": 1,
                    "result": 10,
                    "result_pointer": 1
                },
                "param_2": {
                    "input": 15,
                    "input_data": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 10,
                    "param_input": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_00080e88"
            ],
            "calling": [
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "code": "\nvoid process_data_0008236c(int *result,undefined4 input)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080e88(input);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_0008236c",
            "entrypoint": "0x0008236c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008236c": "process_data_0008236c",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082390": {
            "additional_data": {
                "FUN_00082390": {
                    "compare_and_return": 2,
                    "compare_and_return_result": 2,
                    "compare_array": 1,
                    "compare_arrays": 2,
                    "compare_byte_arrays": 1,
                    "compare_strings": 1,
                    "compare_u_int_arrays": 1,
                    "compare_uint_arrays": 12,
                    "compare_unsigned_integers": 8,
                    "compare_unsigned_pointers": 1
                },
                "LAB_00082410": {
                    "loop_start": 1
                },
                "LAB_0008258e": {
                    "loop_end": 1
                },
                "LAB_0008259a": {
                    "loop_end2": 1
                },
                "LAB_0008259e": {
                    "compare_end": 1
                },
                "iVar2": {
                    "comparison": 1,
                    "comparison_result": 2,
                    "length_diff": 1,
                    "result": 26
                },
                "param_1": {
                    "arr1": 1,
                    "array1": 20,
                    "array_1": 1,
                    "data1": 1,
                    "input1": 4,
                    "pointer1": 1,
                    "str1": 1,
                    "unsigned_int1": 1,
                    "unsigned_integers1": 1
                },
                "param_2": {
                    "arr2": 1,
                    "array2": 20,
                    "array_2": 1,
                    "data2": 1,
                    "input2": 4,
                    "pointer2": 1,
                    "str2": 1,
                    "unsigned_int2": 1,
                    "unsigned_integers2": 1
                },
                "puVar1": {
                    "p1": 2,
                    "p_uint1": 1,
                    "ptr1": 19,
                    "ptr_array1": 4,
                    "ptr_array_1": 1,
                    "ptr_data1": 1,
                    "ptr_unsigned_integers1": 1,
                    "temp_ptr1": 1
                },
                "puVar3": {
                    "p2": 2,
                    "p_uint2": 1,
                    "ptr2": 19,
                    "ptr_array2": 4,
                    "ptr_array_2": 1,
                    "ptr_data2": 1,
                    "ptr_unsigned_integers2": 1,
                    "temp_ptr2": 1
                },
                "puVar4": {
                    "p3": 2,
                    "p_uint3": 1,
                    "ptr": 2,
                    "ptr3": 17,
                    "ptr_array3": 1,
                    "ptr_byte": 1,
                    "ptr_temp": 3,
                    "temp_ptr": 2,
                    "temp_ptr3": 1
                },
                "uVar14": {
                    "temp1": 1
                },
                "uVar15": {
                    "temp2": 1
                },
                "uVar16": {
                    "temp3": 1
                },
                "uVar19": {
                    "byte_mask": 1
                },
                "uVar23": {
                    "prefix_mask": 1
                },
                "uVar5": {
                    "array1_remainder": 1,
                    "byte1": 1,
                    "element1": 1,
                    "len1": 3,
                    "remainder": 1,
                    "shifted_value": 1,
                    "size": 2,
                    "size_remainder": 1,
                    "temp1": 8,
                    "temp_1": 1,
                    "temp_var1": 1,
                    "u1": 2,
                    "val1": 5,
                    "value1": 2
                },
                "uVar6": {
                    "array1_value": 1,
                    "byte_x": 1,
                    "ch1": 1,
                    "current_val_1": 1,
                    "element2": 1,
                    "temp1": 2,
                    "temp2": 8,
                    "temp_2": 1,
                    "temp_var2": 1,
                    "tmp1": 1,
                    "u2": 2,
                    "val1": 2,
                    "val2": 5,
                    "value1": 2,
                    "value2": 1
                },
                "uVar7": {
                    "array2_value": 1,
                    "byte1": 1,
                    "byte2": 1,
                    "byte_y": 1,
                    "ch2": 1,
                    "current_val_2": 1,
                    "element3": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp3": 8,
                    "temp_3": 1,
                    "temp_var3": 1,
                    "tmp2": 1,
                    "u3": 2,
                    "val2": 1,
                    "val3": 4,
                    "value2": 2
                },
                "uVar8": {
                    "array2_value_next": 1,
                    "byte2": 1,
                    "element4": 1,
                    "multiplied_value": 1,
                    "next_val_1": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 8,
                    "temp_4": 1,
                    "temp_value": 1,
                    "temp_var4": 1,
                    "tmp1": 1,
                    "tmp3": 1,
                    "u4": 2,
                    "val2": 1,
                    "val3": 1,
                    "val4": 4,
                    "value2": 1
                },
                "uVar9": {
                    "bit_mask": 2,
                    "byte3": 2,
                    "comparison_mask": 1,
                    "next_val_2": 1,
                    "temp": 2,
                    "temp3": 1,
                    "temp4": 2,
                    "temp5": 8,
                    "temp_5": 1,
                    "temp_var5": 1,
                    "tmp2": 1,
                    "tmp4": 1,
                    "u5": 2,
                    "val4": 1,
                    "val5": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_000815b8"
            ],
            "code": "\nint compare_uint_arrays_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      temp1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\nloop_start:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        temp2 = temp1 >> 0x10 & 0xff;\n        result = temp2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (temp2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          temp2 = temp1 >> 8 & 0xff;\n          result = temp2 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (temp2 == 0) {\n            return 0;\n          }\n          goto loop_start;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (temp1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (temp1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    temp1 = (uint)array2 & 3;\n    if (temp1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (temp1 == 2) {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 0x10;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffff;\n          if ((temp4 & 0x8080) != 0 || temp2 != temp1) goto loop_end;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else if (temp1 < 2) {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 8;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffffff;\n          if ((temp4 & 0x808080) != 0 || temp2 != temp1) goto loop_end;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 0x18;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xff;\n          if ((temp4 & 0x80) != 0 || temp2 != temp1) goto loop_end;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 |\n              temp2 >> 0x18;\n      temp1 = (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 | temp3 >> 0x18;\n      goto compare_end;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      temp1 = *ptr1;\n      ptr2 = array2 + 1;\n      temp3 = *array2;\n      temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n      if (temp1 != temp3 || temp5 != 0) {\nloop_end2:\n        temp2 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 |\n                temp1 >> 0x18;\n        temp1 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n                temp3 >> 0x18;\n        goto compare_end;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      temp1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        temp2 = *array1;\n        temp3 = array1[1];\n        temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n        if (temp2 != temp1 || temp5 != 0) goto loop_end;\n        temp4 = *ptr1;\n        temp1 = ptr1[1];\n        temp5 = temp3 + 0xfefefeff & ~temp3 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (temp3 == temp4 && temp5 == 0);\n      temp2 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n              temp3 >> 0x18;\n      temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 |\n              temp4 >> 0x18;\n      goto compare_end;\n    }\n  }\n  do {\n    temp1 = *array1;\n    temp2 = array1[1];\n    temp3 = *array2;\n    temp4 = array2[1];\n    temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n    if (temp1 != temp3 || temp5 != 0) goto loop_end2;\n    temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (temp2 == temp4 && temp5 == 0);\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 | temp4 >> 0x18;\ncompare_end:\n  temp3 = temp5 << 0x18 | (temp5 >> 8 & 0xff) << 0x10 | (temp5 >> 0x10 & 0xff) << 8 | temp5 >> 0x18;\n  if (temp3 != 0) {\n    temp3 = 0x18 - LZCOUNT(temp3);\n    temp2 = temp2 >> (temp3 & 0xff);\n    temp1 = temp1 >> (temp3 & 0xff);\n  }\n  result = 1;\n  if (temp2 <= temp1) {\n    result = -(uint)(temp2 < temp1);\n  }\n  return result;\nloop_end:\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 | temp1 >> 0x18;\n  goto compare_end;\n}\n\n",
            "current_name": "compare_uint_arrays_00082390",
            "entrypoint": "0x00082390",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082390": "compare_uint_arrays_00082390",
                "LAB_00082410": "loop_start",
                "LAB_0008258e": "loop_end",
                "LAB_0008259a": "loop_end2",
                "LAB_0008259e": "compare_end",
                "iVar2": "result",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000825cc": {
            "additional_data": {
                "FUN_000825cc": {
                    "copy_and_terminate_string": 2,
                    "copy_string": 23,
                    "copy_string_and_terminate": 1,
                    "copy_string_to_destination": 1,
                    "copy_string_with_alignment_check": 3,
                    "copy_strings": 1
                },
                "LAB_00082630": {
                    "check_word_alignment": 1,
                    "end_loop": 2
                },
                "bVar8": {
                    "check_for_null": 1,
                    "end_of_string": 1,
                    "has_zero_byte": 1,
                    "is_aligned": 1,
                    "is_byte_zero": 1,
                    "is_null": 2,
                    "is_null_byte": 1,
                    "is_short_value_zero": 1,
                    "is_short_zero": 3,
                    "is_short_zero_flag": 1,
                    "is_value_zero": 1,
                    "is_zero": 11,
                    "is_zero_byte": 5,
                    "is_zero_terminated": 1
                },
                "cVar1": {
                    "ch": 1,
                    "curr_char": 1,
                    "current_char": 26,
                    "current_character": 2
                },
                "param_1": {
                    "dest": 17,
                    "dest_string": 1,
                    "destination": 13
                },
                "param_2": {
                    "source": 13,
                    "source_string": 1,
                    "src": 17
                },
                "puVar3": {
                    "current_ptr": 2,
                    "current_uint_ptr": 1,
                    "next_element": 1,
                    "next_pointer": 8,
                    "next_ptr": 3,
                    "next_short_ptr": 1,
                    "next_source": 3,
                    "next_source_pointer": 1,
                    "next_src": 1,
                    "next_u_int_ptr": 1,
                    "next_word": 1,
                    "pointer1": 1,
                    "ptr_increment": 1,
                    "source_ptr": 2,
                    "src_ptr": 2,
                    "src_word_ptr": 1,
                    "temp_pointer1": 1
                },
                "puVar4": {
                    "aligned_source_ptr": 1,
                    "current_pointer": 4,
                    "current_ptr2": 2,
                    "current_src_ptr": 1,
                    "next_byte": 1,
                    "next_char_ptr": 1,
                    "next_dest": 1,
                    "next_destination": 1,
                    "next_destination_pointer": 1,
                    "next_element2": 1,
                    "next_pointer_aligned": 2,
                    "next_ptr2": 1,
                    "next_source_bytes": 1,
                    "next_source_char": 1,
                    "next_source_pointer": 1,
                    "next_u_short_ptr": 1,
                    "pointer2": 1,
                    "ptr_source": 1,
                    "source_pointer": 1,
                    "source_ptr2": 1,
                    "src_ptr": 3,
                    "src_ptr2": 2,
                    "temp_pointer2": 1
                },
                "puVar7": {
                    "current_dest": 2,
                    "current_dest_ptr": 1,
                    "current_destination": 2,
                    "current_element2": 1,
                    "dest_pointer": 2,
                    "dest_ptr": 8,
                    "destination_pointer": 6,
                    "destination_ptr": 2,
                    "new_pointer": 1,
                    "next_destination": 2,
                    "next_destination_pointer": 1,
                    "next_u_int_ptr2": 1,
                    "pointer3": 1,
                    "ptr_dest": 1
                },
                "uVar2": {
                    "curr_short": 1,
                    "current_short": 27,
                    "current_short_value": 1,
                    "half_word": 1
                },
                "uVar5": {
                    "current_byte": 1,
                    "current_char": 1,
                    "current_element": 1,
                    "current_u_int": 4,
                    "current_uint": 8,
                    "current_value": 6,
                    "current_word": 8,
                    "src_val": 1,
                    "word": 1
                },
                "uVar6": {
                    "curr_val": 1,
                    "current_uint2": 2,
                    "current_uint_shifted": 1,
                    "current_word_reversed": 1,
                    "new_compressed_value": 1,
                    "next_element_element": 1,
                    "next_uint": 1,
                    "next_value": 1,
                    "rotated_value": 1,
                    "shifted_u_int": 1,
                    "shifted_uint": 2,
                    "shifted_word": 3,
                    "temp": 2,
                    "temp_byte": 1,
                    "temp_u_int": 3,
                    "temp_uint": 2,
                    "temp_value": 4,
                    "temp_word": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_000814d0",
                "FUN_0008151c",
                "FUN_00081570"
            ],
            "code": "\nvoid copy_string_with_alignment_check_000825cc(uint *dest,uint *src)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *next_pointer;\n  uint *current_pointer;\n  uint current_uint;\n  uint temp_value;\n  uint *dest_ptr;\n  bool is_zero;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    current_pointer = src;\n    if (((uint)src & 1) != 0) {\n      current_pointer = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = current_pointer;\n    if (((uint)current_pointer & 2) != 0) {\n      src = (uint *)((int)current_pointer + 2);\n      current_short = *(ushort *)current_pointer;\n      is_zero = (current_short & 0xff) == 0;\n      if (is_zero) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        is_zero = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  current_uint = *src;\n  current_pointer = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto end_loop;\n    dest_ptr = dest + 1;\n    *dest = current_uint;\n    current_pointer = src + 2;\n    current_uint = src[1];\n  }\n  while( true ) {\n    next_pointer = current_pointer + 1;\n    temp_value = *current_pointer;\n    dest = dest_ptr;\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_uint;\n    current_uint = temp_value;\n    if ((temp_value + 0xfefefeff & ~temp_value & 0x80808080) != 0) break;\n    current_pointer = current_pointer + 2;\n    current_uint = *next_pointer;\n    dest_ptr = dest_ptr + 2;\n    *dest = temp_value;\n  }\nend_loop:\n  do {\n    *(char *)dest = (char)current_uint;\n    temp_value = current_uint & 0xff;\n    current_uint = current_uint >> 8 | current_uint << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (temp_value != 0);\n  return;\n}\n\n",
            "current_name": "copy_string_with_alignment_check_000825cc",
            "entrypoint": "0x000825cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000825cc": "copy_string_with_alignment_check_000825cc",
                "LAB_00082630": "end_loop",
                "bVar8": "is_zero",
                "cVar1": "current_char",
                "param_1": "dest",
                "param_2": "src",
                "puVar3": "next_pointer",
                "puVar4": "current_pointer",
                "puVar7": "dest_ptr",
                "uVar2": "current_short",
                "uVar5": "current_uint",
                "uVar6": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082688": {
            "additional_data": {
                "FUN_00082688": {
                    "count_leading_zeroes": 2,
                    "count_leading_zeros": 14,
                    "count_non_zero_bytes": 1,
                    "count_set_bits": 2,
                    "count_trailing_zeros": 8,
                    "find_first_nonzero_byte_index": 1,
                    "find_num_unaligned_bytes": 1,
                    "find_number_of_trailing_zeros": 1,
                    "reverse_count_leading_zeros": 1
                },
                "bVar4": {
                    "found_zero": 1,
                    "is_zero": 28,
                    "is_zero_byte": 1,
                    "no_trailing_zeros": 1
                },
                "iVar1": {
                    "bit_count": 1,
                    "count": 2,
                    "index": 1,
                    "leading_zeroes": 2,
                    "leading_zeros": 14,
                    "leading_zeros_count": 1,
                    "num_unaligned_bytes": 1,
                    "result": 1,
                    "trailing_zeros": 2,
                    "trailing_zeros_count": 6
                },
                "param_1": {
                    "input": 22,
                    "input_number": 1,
                    "input_value": 2,
                    "num": 1,
                    "number": 2,
                    "value": 3
                },
                "puVar2": {
                    "aligned_pointer": 2,
                    "data_pointer": 1,
                    "p_input": 3,
                    "p_number": 1,
                    "p_value": 3,
                    "ptr": 19,
                    "ptr_aligned_value": 1,
                    "ptr_to_input": 1
                },
                "uVar3": {
                    "current_number": 1,
                    "current_value": 4,
                    "current_word": 1,
                    "data": 1,
                    "masked_value": 1,
                    "temp_value": 1,
                    "value": 20,
                    "word": 2
                },
                "uVar5": {
                    "shifted_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000810a6",
                "FUN_000814f6",
                "FUN_0008289c"
            ],
            "code": "\nint reverse_count_leading_zeros_00082688(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  bool is_zero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leading_zeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leading_zeros = leading_zeros + 4;\n    value = *ptr;\n  }\n  is_zero = (value & 0xff) == 0;\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff00) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff0000) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "reverse_count_leading_zeros_00082688",
            "entrypoint": "0x00082688",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082688": "reverse_count_leading_zeros_00082688",
                "bVar4": "is_zero",
                "iVar1": "leading_zeros",
                "param_1": "input",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082824": {
            "additional_data": {
                "FUN_00082824": {
                    "check_and_process_data": 1,
                    "execute_function": 1,
                    "process_data": 23,
                    "process_param": 1
                },
                "F_tooManyErrors": {
                    "find_and_process_errors": 1
                },
                "iVar2": {
                    "counter": 1,
                    "num_processed": 1,
                    "result": 23,
                    "return_value": 6
                },
                "param_1": {
                    "arg1": 6,
                    "config": 3,
                    "config_param": 1,
                    "context": 2,
                    "error_handler": 1,
                    "function_param1": 1,
                    "input": 6,
                    "input_data": 1,
                    "input_value": 2,
                    "param": 1,
                    "param1": 6,
                    "param_flag": 1
                },
                "param_2": {
                    "arg2": 6,
                    "count": 2,
                    "counter": 1,
                    "function_param2": 1,
                    "index": 1,
                    "length": 1,
                    "num_errors": 1,
                    "param2": 6,
                    "param_index": 1,
                    "size": 7,
                    "size_of_data": 1,
                    "total_devices": 1,
                    "value": 1,
                    "value_param": 1
                },
                "param_3": {
                    "arg3": 6,
                    "data": 10,
                    "data_array": 2,
                    "data_param": 1,
                    "data_ptrs": 1,
                    "device_data": 1,
                    "error_list": 1,
                    "function_param3": 1,
                    "nested_array": 1,
                    "param3": 6,
                    "param_array_ptr": 1
                },
                "piVar1": {
                    "curr_data": 1,
                    "curr_data_ptr": 1,
                    "curr_element": 1,
                    "curr_ptr1": 1,
                    "current_data": 6,
                    "current_data_pointer": 1,
                    "current_element": 1,
                    "current_error": 1,
                    "current_item": 2,
                    "current_param": 1,
                    "current_pointer": 2,
                    "current_ptr": 5,
                    "data_pointer": 2,
                    "device_ptr": 1,
                    "pointer1": 1,
                    "ptr1": 3,
                    "ptr_var1": 1
                },
                "piVar3": {
                    "curr_chunk": 1,
                    "curr_ptr2": 1,
                    "current_array": 1,
                    "current_data_pointer": 1,
                    "current_device": 1,
                    "current_item2": 1,
                    "data_pointer2": 1,
                    "data_ptr": 1,
                    "list_pointer": 1,
                    "nested_array_2": 1,
                    "next_data": 1,
                    "next_data_pointer": 1,
                    "next_element": 1,
                    "pointer2": 1,
                    "previous_ptr": 1,
                    "ptr2": 1,
                    "ptr3": 2,
                    "ptr_var2": 1,
                    "remaining_data": 5,
                    "remaining_data_pointer": 1,
                    "remaining_data_ptr": 1,
                    "remaining_errors": 1,
                    "remaining_items": 1,
                    "remaining_ptr": 2,
                    "sub_array_pointer": 1
                },
                "puVar5": {
                    "address_pointer": 1,
                    "current_data": 3,
                    "current_element": 2,
                    "current_error_data": 1,
                    "current_item3": 1,
                    "current_ptr": 1,
                    "current_value": 3,
                    "current_value_pointer": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "func_ptr": 1,
                    "nested_pointer": 1,
                    "pointer": 2,
                    "pointer3": 1,
                    "ptr": 4,
                    "ptr3": 1,
                    "ptr5": 1,
                    "ptr_var3": 1,
                    "temp_data": 1,
                    "temp_ptr": 2
                },
                "uVar4": {
                    "count": 7,
                    "counter": 17,
                    "index": 1,
                    "iteration": 1,
                    "iteration_count": 1,
                    "loop_count": 1,
                    "loop_counter": 1,
                    "nested_result": 1,
                    "temp_var1": 1
                },
                "uVar6": {
                    "chunk_size": 1,
                    "current_data_size": 2,
                    "current_element_value": 1,
                    "current_error_size": 1,
                    "current_value": 1,
                    "data_size": 2,
                    "data_value": 1,
                    "element": 1,
                    "element_size": 2,
                    "item_size": 1,
                    "nested_value": 1,
                    "size": 2,
                    "temp_value": 1,
                    "temp_var1": 6,
                    "temp_var2": 1,
                    "value": 1,
                    "value1": 5,
                    "var1": 1
                },
                "uVar7": {
                    "count": 1,
                    "data_count": 1,
                    "iteration_count": 1,
                    "loop_count": 1,
                    "loop_counter": 1,
                    "loop_iterations": 1,
                    "nested_count": 1,
                    "num_chunks": 1,
                    "num_elements": 3,
                    "num_items": 1,
                    "num_iterations": 1,
                    "num_values": 1,
                    "shifted_error_size": 1,
                    "shifted_value": 3,
                    "temp_var2": 6,
                    "temp_var3": 1,
                    "value2": 5,
                    "var2": 1
                }
            },
            "called": [
                "FUN_000839b4",
                "FUN_00083ca8"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint check_and_process_data_00082824(undefined4 input,int size,int **data)\n\n{\n  int *current_data;\n  int result;\n  int *remaining_data;\n  uint counter;\n  undefined4 *ptr;\n  uint temp_var1;\n  uint temp_var2;\n  \n  if (-1 < *(int *)(size + 100) << 0x12) {\n    result = FUN_00083ca8();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return result;\n  }\n  remaining_data = data[2];\n  current_data = *data;\n  while (remaining_data != (int *)0x0) {\n    temp_var1 = current_data[1];\n    temp_var2 = temp_var1 >> 2;\n    if (temp_var2 != 0) {\n      ptr = (undefined4 *)(*current_data + -4);\n      counter = 0;\n      do {\n        ptr = ptr + 1;\n        result = FUN_000839b4(input,*ptr,size);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (temp_var2 != counter);\n      remaining_data = data[2];\n    }\n    remaining_data = (int *)((int)remaining_data - (temp_var1 & 0xfffffffc));\n    data[2] = remaining_data;\n    current_data = current_data + 2;\n  }\n  result = 0;\nLAB_00082864:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return result;\n}\n\n",
            "current_name": "check_and_process_data_00082824",
            "entrypoint": "0x00082824",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082824": "check_and_process_data_00082824",
                "iVar2": "result",
                "param_1": "input",
                "param_2": "size",
                "param_3": "data",
                "piVar1": "current_data",
                "piVar3": "remaining_data",
                "puVar5": "ptr",
                "uVar4": "counter",
                "uVar6": "temp_var1",
                "uVar7": "temp_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008289c": {
            "additional_data": {
                "ARG_SIZE": {
                    "max_arg_size": 1
                },
                "FUN_00082688": {
                    "function_string_value": 1,
                    "transform_function2": 1
                },
                "FUN_00082824": {
                    "function_process_format_specifier": 1,
                    "process_data_function": 1
                },
                "FUN_0008289c": {
                    "decompiled_function": 1,
                    "format_string": 5,
                    "parse_format_string": 5,
                    "parse_formatted_string": 1,
                    "process_format_string": 1,
                    "reverse_string": 1
                },
                "FUN_000834f0": {
                    "function_convert_var_args": 1,
                    "process_data_function2": 1
                },
                "FUN_0008356c": {
                    "check_function": 1,
                    "function_check": 1
                },
                "FUN_00083888": {
                    "cleanup_function": 1,
                    "function_warning": 1
                },
                "FUN_000840f8": {
                    "transform_function": 1
                },
                "FUN_00084530": {
                    "conversion_function": 1,
                    "function_convert_number": 1
                },
                "LOCAL_BUFFER": {
                    "local_buff": 1
                },
                "bVar1": {
                    "bool1": 1,
                    "boolean_1": 1,
                    "flag1": 1,
                    "has_flag_zero": 1,
                    "has_null_terminator": 1,
                    "has_sign": 1,
                    "is_active": 1,
                    "is_condition1": 1,
                    "is_left_justified": 2,
                    "is_negative": 2,
                    "is_null": 1,
                    "is_settling": 2,
                    "is_string_end": 1,
                    "is_type1": 1,
                    "is_type_a": 1,
                    "is_type_propagation_algorithm_settled": 1,
                    "is_type_propagation_algorithm_settling": 2,
                    "is_unsigned": 1,
                    "var1": 1
                },
                "bVar2": {
                    "bool2": 1,
                    "boolean_2": 1,
                    "flag2": 1,
                    "has_flag": 1,
                    "has_flag_plus": 1,
                    "has_left_justification": 1,
                    "has_plus_sign": 1,
                    "has_sign": 2,
                    "is_character": 1,
                    "is_condition": 1,
                    "is_condition2": 1,
                    "is_double": 1,
                    "is_length_neg": 1,
                    "is_long": 1,
                    "is_negative": 2,
                    "is_type2": 1,
                    "is_type_b": 1,
                    "is_type_propagation_algorithm_settling": 1,
                    "is_type_propagation_algorithm_settling2": 1,
                    "is_var2_true": 1,
                    "var2": 1
                },
                "bVar26": {
                    "bool5": 1,
                    "bool_var2": 1,
                    "boolean_5": 1,
                    "flag5": 1,
                    "has_negative_flag": 1,
                    "has_value": 1,
                    "is_condition5": 1,
                    "is_negative": 3,
                    "is_non_zero": 1,
                    "is_not_zero": 1,
                    "is_ptr": 1,
                    "is_true2": 1,
                    "is_type_e": 1,
                    "is_type_propagation_algorithm_settling": 1,
                    "is_type_propagation_algorithm_settling5": 1,
                    "is_unsigned": 1,
                    "is_var26_true": 1,
                    "negative": 1,
                    "new_variable_name21": 1,
                    "var26": 1
                },
                "bVar3": {
                    "bool3": 1,
                    "boolean_3": 1,
                    "flag3": 1,
                    "has_alternate_form": 1,
                    "has_flag_hash": 1,
                    "has_prefix": 1,
                    "has_sharp_sign": 1,
                    "is_alternative_form": 1,
                    "is_condition3": 1,
                    "is_flag": 1,
                    "is_flag_set": 2,
                    "is_hex": 2,
                    "is_positive": 1,
                    "is_space": 1,
                    "is_true": 1,
                    "is_type3": 1,
                    "is_type_c": 1,
                    "is_type_propagation_algorithm_settling": 1,
                    "is_type_propagation_algorithm_settling3": 1,
                    "is_var3_true": 1,
                    "var3": 1
                },
                "bVar5": {
                    "bool4": 1,
                    "bool_var": 1,
                    "boolean_4": 1,
                    "flag4": 1,
                    "has_zero_flag": 1,
                    "has_zero_padding": 2,
                    "is_condition4": 1,
                    "is_false": 1,
                    "is_print": 1,
                    "is_true": 1,
                    "is_type4": 1,
                    "is_type_d": 1,
                    "is_type_propagation_algorithm_settling": 1,
                    "is_type_propagation_algorithm_settling4": 1,
                    "is_var5_true": 1,
                    "is_zero": 1,
                    "is_zero_pad": 1,
                    "is_zero_padded": 3,
                    "should_print": 1,
                    "var5": 1
                },
                "cStack_6a": {
                    "c_stack_6a": 1,
                    "c_stack_var": 1,
                    "char2": 1,
                    "char_stack_6a": 1,
                    "char_stack_var": 3,
                    "char_stack_variable": 1,
                    "char_value5": 1,
                    "char_var4": 1,
                    "character4": 1,
                    "local_char_var5": 1,
                    "local_character_2": 1,
                    "local_variable11": 1,
                    "new_variable_name35": 1,
                    "result_arr": 1,
                    "single_char": 1,
                    "temp2": 1,
                    "temp_char": 1,
                    "temp_character": 1,
                    "temporary_character": 1,
                    "unused_char": 1
                },
                "cVar4": {
                    "c_var4": 1,
                    "char3": 1,
                    "char_condition": 1,
                    "char_value": 1,
                    "char_var": 7,
                    "char_variable": 1,
                    "character": 1,
                    "character_1": 1,
                    "character_variable": 1,
                    "fill_char": 2,
                    "flag_char": 1,
                    "format_char": 1,
                    "sign": 1,
                    "sign_character": 1
                },
                "cVar9": {
                    "c": 1,
                    "c_var9": 1,
                    "char": 1,
                    "char4": 1,
                    "char_value2": 1,
                    "char_var": 1,
                    "char_var1": 1,
                    "char_var2": 6,
                    "char_var9": 1,
                    "char_variable2": 1,
                    "character2": 1,
                    "character_2": 1,
                    "character_to_print": 1,
                    "character_variable": 1,
                    "current_char": 3,
                    "new_variable_name4": 1,
                    "specifier": 1
                },
                "iVar10": {
                    "int_var3": 1
                },
                "iVar15": {
                    "arg_counter": 1,
                    "count": 1,
                    "count2": 1,
                    "counter": 2,
                    "format_idx": 1,
                    "hex_index": 1,
                    "i_var1": 1,
                    "i_var15": 1,
                    "int_var15": 1,
                    "int_var3": 1,
                    "int_variable2": 1,
                    "integer_2": 1,
                    "integer_value2": 1,
                    "integer_var2": 1,
                    "integer_variable2": 1,
                    "loop_var2": 1,
                    "new_length": 1,
                    "new_variable_name10": 1,
                    "outer_idx": 1,
                    "result2": 1,
                    "temp_counter": 1,
                    "temp_var5": 1,
                    "var6": 1
                },
                "iVar17": {
                    "count3": 1,
                    "format_idx": 1,
                    "i_var17": 1,
                    "i_var2": 1,
                    "index": 1,
                    "int_var17": 1,
                    "int_var4": 1,
                    "int_variable3": 1,
                    "integer_3": 1,
                    "integer_value3": 1,
                    "integer_var3": 1,
                    "integer_variable3": 1,
                    "loop_var3": 1,
                    "nested_counter": 1,
                    "new_variable_name12": 1,
                    "num_args": 2,
                    "outer_loop_var": 1,
                    "result3": 1,
                    "specifier_counter": 1,
                    "temp_counter2": 1,
                    "temp_var7": 1,
                    "var_counter": 1
                },
                "iVar20": {
                    "int_var4": 1
                },
                "iVar22": {
                    "integer_value2": 1
                },
                "iVar25": {
                    "i_var5": 1,
                    "status": 1
                },
                "iVar8": {
                    "count": 2,
                    "i": 1,
                    "i_var8": 1,
                    "idx": 1,
                    "index": 1,
                    "int_var2": 1,
                    "int_var8": 1,
                    "int_variable": 1,
                    "integer_1": 1,
                    "integer_value": 1,
                    "integer_var1": 1,
                    "integer_variable1": 1,
                    "loop_counter": 1,
                    "loop_var": 1,
                    "new_variable_name3": 1,
                    "res": 1,
                    "result": 5,
                    "var2": 1
                },
                "lVar27": {
                    "combined_integer_value": 1,
                    "combined_val": 1,
                    "combined_value": 2,
                    "combined_vars": 1,
                    "l_var27": 1,
                    "long_long_var": 2,
                    "long_value": 2,
                    "long_var": 4,
                    "long_var27": 2,
                    "long_variable": 1,
                    "long_variable1": 1,
                    "longlong_1": 1,
                    "longlong_var": 2,
                    "new_variable_name22": 1,
                    "variable": 1
                },
                "local_64": {
                    "arg_ptr_arr": 1,
                    "array": 1,
                    "ignore": 1,
                    "local_array": 1,
                    "local_array_var": 1,
                    "local_array_var2": 1,
                    "local_buffer_array": 1,
                    "local_pointer_array": 1,
                    "local_vars_array": 1,
                    "nested_pointer13": 1,
                    "new_variable_name37": 1,
                    "pointer_array": 1,
                    "ptr_array": 1,
                    "repeater_buffer_array2": 1,
                    "size_list": 1,
                    "specifier_array_buffer": 1,
                    "unused_array": 1
                },
                "local_68": {
                    "address_stack": 1,
                    "buffer_array": 1,
                    "format_data_buffer": 1,
                    "local_array_var": 2,
                    "local_buffer": 1,
                    "local_char_variable": 1,
                    "local_var8": 1,
                    "nested_pointer12": 1,
                    "repeater_buffer_array": 1,
                    "specifier_buffer": 1,
                    "temp_buffer": 1,
                    "varargs_list": 1
                },
                "local_69": {
                    "c_stack_var2": 1,
                    "char3": 1,
                    "hexadecimal_character": 1,
                    "local_char": 1,
                    "local_char_var6": 1,
                    "local_undefined4": 1,
                    "local_undefined_5": 1,
                    "local_undefined_var4": 2,
                    "new_variable_name36": 1,
                    "single_char2": 1,
                    "temp3": 1,
                    "temp_character": 1,
                    "temp_var": 1,
                    "undefined_value4": 1,
                    "undefined_value5": 1,
                    "undefined_var1": 1,
                    "zero": 1
                },
                "local_90": {
                    "arg_width": 1,
                    "char1": 1,
                    "char_var3": 2,
                    "digit_char": 1,
                    "local_char_var4": 1,
                    "local_flag_2": 1,
                    "local_undefined3": 1,
                    "local_undefined_3": 1,
                    "local_undefined_var3": 2,
                    "local_var_90": 1,
                    "local_variable10": 1,
                    "local_variable_90": 1,
                    "new_variable_name34": 1,
                    "padding_char": 1,
                    "padding_character2": 1,
                    "result_var": 1,
                    "string_char": 1,
                    "temp1": 1,
                    "undefined_value3": 1,
                    "undefined_value4": 1
                },
                "local_94": {
                    "additional_format_elements": 1,
                    "arg_set2": 1,
                    "arg_val_ptr": 1,
                    "args_total": 1,
                    "current_len": 1,
                    "format_sequence": 1,
                    "format_specifier_list": 1,
                    "formatted_string": 1,
                    "local_data_ptr_3": 1,
                    "local_output_pointer_3": 1,
                    "local_pointer5": 1,
                    "local_pointer_var5": 1,
                    "local_ptr_var": 1,
                    "local_var7": 1,
                    "local_var8": 1,
                    "local_var_94": 1,
                    "local_variable9": 1,
                    "local_variable_94": 1,
                    "nested_pointer11": 1,
                    "new_variable_name33": 1,
                    "param_offsets": 1,
                    "parsed_repeater": 1,
                    "pointer_94": 1,
                    "pointer_array": 1,
                    "pointer_to_pointer11": 1,
                    "size_sum": 1,
                    "specifier_array": 1
                },
                "local_98": {
                    "arg_count": 1,
                    "arg_counter": 1,
                    "counter": 1,
                    "counter2": 1,
                    "format_element_index": 1,
                    "index": 2,
                    "integer_value5": 1,
                    "local_counter_1": 1,
                    "local_int2": 1,
                    "local_int_var2": 1,
                    "local_loop_var": 1,
                    "local_output_integer": 1,
                    "local_var6": 1,
                    "local_var7": 1,
                    "local_var_98": 1,
                    "local_variable8": 1,
                    "local_variable_98": 1,
                    "new_variable_name32": 1,
                    "num_argptrs": 1,
                    "num_sets": 1,
                    "param_count": 1,
                    "param_idx": 1,
                    "repeater_count": 1,
                    "size_counter": 1,
                    "specifier_count": 2
                },
                "local_9c": {
                    "arg_ptr_arr": 1,
                    "current_arg_ptr": 1,
                    "current_format_element_ptr": 1,
                    "current_param": 1,
                    "current_set2": 1,
                    "format_data": 1,
                    "format_specifier_ptr": 1,
                    "local_data_ptr_2": 1,
                    "local_output_pointer_2": 1,
                    "local_pointer": 1,
                    "local_pointer4": 1,
                    "local_pointer_var4": 1,
                    "local_var5": 1,
                    "local_var6": 1,
                    "local_var_9c": 1,
                    "local_variable7": 1,
                    "local_variable_9c": 1,
                    "nested_pointer10": 1,
                    "new_variable_name31": 1,
                    "param4_pointer": 1,
                    "param_address_stack": 1,
                    "pointer_9c": 1,
                    "pointer_to_pointer10": 1,
                    "repeater_start": 1,
                    "size_ptr3": 1,
                    "specifier_pointer": 1,
                    "var_list": 1
                },
                "local_9f": {
                    "a0": 1,
                    "alternate_form_character": 1,
                    "count3": 1,
                    "hex_prefix_char": 1,
                    "hexadecimal_character": 1,
                    "is_long": 1,
                    "is_negative": 1,
                    "is_zero_pad": 1,
                    "local_char2": 1,
                    "local_char_var3": 1,
                    "local_display_count": 1,
                    "local_undefined2": 1,
                    "local_undefined_2": 1,
                    "local_undefined_var2": 2,
                    "local_var_9f": 1,
                    "local_variable_9f": 1,
                    "new_variable_name30": 1,
                    "null_char": 1,
                    "padding_char": 1,
                    "precision_char": 1,
                    "print_char3": 1,
                    "space_char": 1,
                    "undefined_value2": 1,
                    "undefined_value3": 1
                },
                "local_a0": {
                    "a0": 1,
                    "char2": 1,
                    "fill_char": 2,
                    "hex_prefix": 1,
                    "local_char0": 1,
                    "local_char_var2": 1,
                    "local_padding": 1,
                    "local_undefined1": 1,
                    "local_undefined_4": 1,
                    "local_undefined_var1": 2,
                    "local_var_a0": 1,
                    "local_variable_a0": 1,
                    "new_variable_name29": 1,
                    "padding_char": 2,
                    "padding_character": 1,
                    "prefix_char": 1,
                    "print_char2": 1,
                    "undefined_value": 1,
                    "undefined_value2": 1,
                    "width_char": 1,
                    "zero_padding": 1,
                    "zero_padding_character": 1
                },
                "local_a1": {
                    "a1": 1,
                    "alignment": 1,
                    "char1": 1,
                    "char_value4": 1,
                    "character3": 1,
                    "current_char": 1,
                    "current_character": 1,
                    "fill_char": 1,
                    "flag": 1,
                    "flag_char": 1,
                    "flag_char2": 1,
                    "flag_character": 1,
                    "format_modifier": 1,
                    "local_char1": 2,
                    "local_char_var": 1,
                    "local_char_var1": 1,
                    "local_char_var2": 1,
                    "local_character_1": 1,
                    "local_flag": 1,
                    "local_var_a1": 1,
                    "local_variable6": 1,
                    "local_variable_a1": 1,
                    "new_variable_name28": 1,
                    "print_char": 1,
                    "sign": 1
                },
                "local_c0": {
                    "buffer": 1,
                    "buffer_pointer": 1,
                    "c0": 1,
                    "char_pointer": 1,
                    "character_array": 1,
                    "convert_base": 1,
                    "digit_chars": 1,
                    "digit_string": 1,
                    "digits": 2,
                    "format_string": 1,
                    "hex_chars": 1,
                    "hex_digits": 2,
                    "local_char_pointer": 2,
                    "local_char_var": 1,
                    "local_format_string_ptr": 1,
                    "local_string_1": 1,
                    "local_string_var": 1,
                    "local_var5": 1,
                    "local_var_c0": 1,
                    "local_variable5": 1,
                    "local_variable_c0": 1,
                    "new_variable_name27": 1,
                    "print_char_set": 1
                },
                "local_c4": {
                    "c4": 1,
                    "char_value3": 1,
                    "format_str_pos": 1,
                    "formatted_length": 1,
                    "int_var7": 1,
                    "integer_value4": 1,
                    "local_arg_pointer": 1,
                    "local_data": 1,
                    "local_int1": 1,
                    "local_int_var1": 1,
                    "local_output_integer_2": 1,
                    "local_var4": 2,
                    "local_var_c4": 1,
                    "local_variable4": 1,
                    "local_variable_c4": 1,
                    "new_variable_name26": 1,
                    "num_written": 1,
                    "parsed_count": 1,
                    "result": 4,
                    "result_count": 1,
                    "result_size": 1,
                    "return_value": 1
                },
                "local_c8": {
                    "arg_list": 1,
                    "arg_pointer": 1,
                    "arg_ptr_arr": 1,
                    "arg_ptrs": 1,
                    "arg_set": 1,
                    "argptr_list": 1,
                    "args_ptr": 1,
                    "current_argument": 1,
                    "double_pointer3": 1,
                    "local_data_ptr_1": 1,
                    "local_output_pointer": 1,
                    "local_param_pointer": 1,
                    "local_pointer3": 1,
                    "local_pointer_var3": 1,
                    "local_var3": 2,
                    "local_var_c8": 1,
                    "local_variable3": 1,
                    "local_variable_c8": 1,
                    "new_variable_name25": 1,
                    "param4": 1,
                    "param_array": 1,
                    "param_array_ptr": 1,
                    "pointer4": 1,
                    "pointer_c8": 1,
                    "size_ptr2": 1,
                    "start_index": 1
                },
                "local_d4": {
                    "arg_size": 1,
                    "combined_repeater": 1,
                    "count2": 1,
                    "current_format_set": 1,
                    "current_string_size": 1,
                    "format_element_ptrs": 1,
                    "format_ptr": 1,
                    "format_str_len": 1,
                    "length_ptr": 1,
                    "local_count_2": 1,
                    "local_info_pointer": 1,
                    "local_pointer2": 1,
                    "local_pointer_2": 1,
                    "local_pointer_var2": 1,
                    "local_var2": 2,
                    "local_var_d4": 1,
                    "local_variable2": 1,
                    "local_variable_d4": 1,
                    "max_width": 1,
                    "maximum_specifier": 1,
                    "nested_pointer9": 1,
                    "new_variable_name24": 1,
                    "pointer_d4": 1,
                    "pointer_to_pointer9": 1,
                    "precision": 1,
                    "size_ptr1": 1
                },
                "local_dc": {
                    "count1": 1,
                    "current_specifier": 1,
                    "format_element_count": 1,
                    "local_count_1": 1,
                    "local_data_pointer": 1,
                    "local_pointer1": 1,
                    "local_pointer_1": 1,
                    "local_pointer_var1": 1,
                    "local_var1": 2,
                    "local_var_dc": 1,
                    "local_variable1": 1,
                    "local_variable_dc": 1,
                    "max_field_width": 1,
                    "max_format_sets": 1,
                    "max_width": 1,
                    "max_width_ptr": 1,
                    "min_width": 1,
                    "nested_pointer8": 1,
                    "new_variable_name23": 1,
                    "num_printed": 1,
                    "pointer_dc": 1,
                    "pointer_to_pointer8": 1,
                    "temp_repeater": 1,
                    "total_size": 1,
                    "total_string_size": 1,
                    "value_size": 1
                },
                "param_1": {
                    "arg1": 3,
                    "buffer": 2,
                    "data_pointer": 1,
                    "format": 2,
                    "format_string": 3,
                    "format_string_index": 1,
                    "format_string_ptr": 1,
                    "input1": 3,
                    "input_1": 3,
                    "input_buffer": 1,
                    "input_data": 1,
                    "input_parameter1": 1,
                    "input_parameter_1": 1,
                    "input_pointer": 2,
                    "input_string": 1,
                    "input_value_1": 1,
                    "original_param1": 1,
                    "param1": 1,
                    "string": 1,
                    "string_buffer": 1
                },
                "param_2": {
                    "arg2": 3,
                    "arg_list": 1,
                    "args": 3,
                    "args_ptr": 1,
                    "buffer_index": 1,
                    "flag_pointer": 1,
                    "format": 1,
                    "format_index": 1,
                    "format_specifier": 2,
                    "format_struct": 1,
                    "info_pointer": 1,
                    "input2": 3,
                    "input_2": 3,
                    "input_parameter2": 1,
                    "input_parameter_2": 1,
                    "input_value_2": 1,
                    "original_param2": 1,
                    "param2": 1,
                    "param_array": 1,
                    "param_data": 1,
                    "param_pointer": 1,
                    "value": 1
                },
                "param_3": {
                    "arg": 1,
                    "arg3": 3,
                    "arg_data": 1,
                    "args": 2,
                    "arguments": 1,
                    "format_args": 2,
                    "format_args_ptr": 1,
                    "format_length": 1,
                    "format_specifier": 2,
                    "format_specifier_index": 1,
                    "format_string": 1,
                    "input3": 3,
                    "input_3": 3,
                    "input_parameter3": 1,
                    "input_parameter_3": 1,
                    "input_value_3": 1,
                    "num_args": 1,
                    "original_param3": 1,
                    "param3": 1,
                    "param_pointer": 1,
                    "pointer": 1,
                    "string_pointer": 1
                },
                "param_4": {
                    "arg4": 3,
                    "arg_list": 1,
                    "arg_list_index": 1,
                    "arg_pointer": 2,
                    "arg_ptr": 1,
                    "arg_ptr_arr": 1,
                    "arg_values": 1,
                    "argptr": 1,
                    "args": 1,
                    "args_pointer": 1,
                    "arguments_pointer": 1,
                    "double_pointer": 1,
                    "input4": 3,
                    "input_4": 3,
                    "input_parameter4": 1,
                    "input_parameter_4": 1,
                    "input_value_4": 1,
                    "int_pointer": 1,
                    "original_param4": 1,
                    "p_arg": 1,
                    "param4": 1,
                    "ptr_to_param_array": 1,
                    "result_ptr": 1,
                    "vararg_list": 1
                },
                "piVar19": {
                    "arg": 1,
                    "arg_ptr2": 1,
                    "arg_val_ptr": 1,
                    "arg_value": 1,
                    "int_pointer2": 2,
                    "int_var19": 1,
                    "int_var5": 1,
                    "integer_value": 1,
                    "new_variable_name14": 1,
                    "param_val_ptr": 1,
                    "pi_var1": 1,
                    "pi_var19": 1,
                    "pointer2": 1,
                    "pointer_7": 1,
                    "pointer_var19": 1,
                    "pointer_var7": 1,
                    "pointer_variable4": 2,
                    "ptr_var2": 1,
                    "ptr_var3": 1,
                    "temp_var9": 1
                },
                "piVar22": {
                    "arg_val_ptr": 1,
                    "high_arg": 1,
                    "int_pointer3": 2,
                    "int_var22": 1,
                    "int_var6": 1,
                    "negative_flag": 1,
                    "new_variable_name17": 1,
                    "pi_var22": 1,
                    "pointer3": 1,
                    "pointer_9": 1,
                    "pointer_var22": 1,
                    "pointer_var9": 1,
                    "pointer_variable5": 2,
                    "ptr_var3": 1,
                    "ptr_var5": 1,
                    "temp_var12": 1
                },
                "piVar23": {
                    "pi_var2": 1
                },
                "piVar6": {
                    "int_var1": 1
                },
                "piVar7": {
                    "arg": 3,
                    "arg_ptr": 1,
                    "arg_ptr1": 1,
                    "current_argument": 1,
                    "current_value": 1,
                    "int_pointer": 2,
                    "int_var1": 1,
                    "int_var2": 1,
                    "int_var7": 1,
                    "new_variable_name2": 1,
                    "param_val_neg": 1,
                    "pi_var7": 1,
                    "pointer": 1,
                    "pointer_2": 1,
                    "pointer_var2": 1,
                    "pointer_var7": 1,
                    "pointer_variable2": 2,
                    "ptr_dest": 1,
                    "ptr_var": 1,
                    "ptr_var1": 1
                },
                "ppiVar12": {
                    "arg_pointer2": 1,
                    "arg_ptr": 1,
                    "arg_ptr3": 1,
                    "arg_ptr_arr": 1,
                    "double_pointer2": 1,
                    "int_pointer_pointer": 1,
                    "new_variable_name7": 1,
                    "pointer_4": 1,
                    "pointer_pointer_variable1": 1,
                    "pointer_pointer_variable2": 1,
                    "pointer_to_pointer3": 1,
                    "pointer_var12": 1,
                    "pointer_var4": 1,
                    "ppi_var1": 1,
                    "ppi_var12": 1,
                    "ptr_array3": 1,
                    "ptr_array_var": 1,
                    "ptr_to_next_ptr": 1,
                    "ptr_var": 1,
                    "temp_var2": 1,
                    "vararg_pointer": 1,
                    "varptr": 1
                },
                "ppiVar16": {
                    "ppi_var2": 1
                },
                "ppiVar18": {
                    "ppi_var3": 1
                },
                "ppiVar21": {
                    "ppi_var4": 1
                },
                "pppppppVar23": {
                    "remaining_format": 1
                },
                "pppppppiVar10": {
                    "char_ptr_arr": 1,
                    "current_format": 1,
                    "current_format_specifier": 1,
                    "current_specifier": 1,
                    "format_set": 1,
                    "int8_pointer_pointer": 1,
                    "nested_pointer2": 1,
                    "new_variable_name5": 1,
                    "pointer1": 1,
                    "pointer_3": 1,
                    "pointer_pointer_variable": 1,
                    "pointer_to_pointer2": 1,
                    "pointer_var10": 1,
                    "pointer_var3": 1,
                    "pointer_variable3": 1,
                    "pppppppi_var10": 1,
                    "ptr_array2": 1,
                    "ptr_to_format_str": 1,
                    "ptr_var10": 1,
                    "ptr_var2": 1,
                    "specifier_ptr": 1
                },
                "pppppppiVar16": {
                    "num_decimals_pointer": 1,
                    "pointer_pointer_variable2": 1
                },
                "pppppppiVar18": {
                    "format_remainder": 1,
                    "format_str_len_left": 1,
                    "int_pointer_pointer": 1,
                    "length_ptr": 1,
                    "nested_pointer4": 1,
                    "new_variable_name13": 1,
                    "pointer_6": 1,
                    "pointer_pointer_variable3": 2,
                    "pointer_to_pointer5": 1,
                    "pointer_var18": 1,
                    "pointer_var6": 1,
                    "pppppppi_var18": 1,
                    "ptr_array5": 1,
                    "ptr_var18": 1,
                    "ptr_var4": 1,
                    "remaining_format": 1,
                    "specifier_size": 1,
                    "temp_arg_size": 1,
                    "temp_var8": 1
                },
                "pppppppiVar20": {
                    "arg_val_ptr": 1,
                    "int_pointer_pointer2": 1,
                    "nested_pointer5": 1,
                    "new_variable_name15": 1,
                    "pointer2": 1,
                    "pointer_8": 1,
                    "pointer_pointer_variable4": 2,
                    "pointer_to_pointer6": 1,
                    "pointer_var20": 1,
                    "pppppppi_var20": 1,
                    "ptr_array6": 1,
                    "ptr_var20": 1,
                    "temp_var10": 1,
                    "width_ptr": 1
                },
                "pppppppiVar23": {
                    "format_remainder2": 1,
                    "int_pointer_pointer3": 1,
                    "length_ptr": 1,
                    "nested_pointer6": 1,
                    "new_variable_name18": 1,
                    "pointer_10": 1,
                    "pointer_pointer_variable5": 2,
                    "pointer_to_pointer7": 1,
                    "pointer_var23": 1,
                    "pppppppi_var23": 1,
                    "ptr_array7": 1,
                    "ptr_var23": 1,
                    "ptr_var6": 1,
                    "temp_var13": 1
                },
                "pppppppiVar25": {
                    "pointer_pointer_variable6": 1,
                    "ptr_var7": 1
                },
                "ppppppppiVar16": {
                    "current_repeater": 1,
                    "format_in_progress": 1,
                    "int8_pointer_pointer": 1,
                    "length_ptr": 1,
                    "nested_pointer3": 1,
                    "new_variable_name11": 1,
                    "param_address_stack": 1,
                    "pointer_5": 1,
                    "pointer_array1": 1,
                    "pointer_to_pointer4": 1,
                    "pointer_var16": 1,
                    "pointer_var5": 1,
                    "pointer_variable3": 1,
                    "ppppppppi_var16": 1,
                    "ptr_array4": 1,
                    "ptr_var16": 1,
                    "specifier_list": 1,
                    "temp_var6": 1
                },
                "ppppppppiVar18": {
                    "num_digits": 1,
                    "pointer_array2": 1
                },
                "ppppppppiVar20": {
                    "arg_ptr_backup": 1,
                    "param_address_stack3": 1
                },
                "ppppppppiVar23": {
                    "pointer_var10": 1,
                    "temp_repeater_size": 1
                },
                "ppppppppiVar25": {
                    "int8_pointer_pointer2": 1,
                    "nested_pointer7": 1,
                    "new_variable_name20": 1,
                    "pointer_11": 1,
                    "pointer_var25": 1,
                    "pointer_variable6": 1,
                    "ppppppppi_var25": 1,
                    "ptr_array8": 1,
                    "ptr_var25": 1,
                    "temp_var15": 1
                },
                "ppppppppiVar6": {
                    "args_ptr_list": 1,
                    "current_set": 1,
                    "format_data": 1,
                    "format_specifier": 1,
                    "format_specifiers": 1,
                    "format_string_arg_ptr_arr": 1,
                    "int8_pointer_pointer": 1,
                    "nested_pointer": 1,
                    "new_variable_name1": 1,
                    "param_address_stack": 1,
                    "pointer_1": 1,
                    "pointer_array": 1,
                    "pointer_to_pointer": 1,
                    "pointer_var1": 1,
                    "pointer_var6": 1,
                    "pointer_variable": 1,
                    "pointer_variable1": 1,
                    "ppppppppi_var6": 1,
                    "ptr_array1": 1,
                    "ptr_var6": 1,
                    "repeater_buffer": 1,
                    "var1": 1
                },
                "ppppppppvai25": {
                    "length_part": 1
                },
                "pppppppvVar25": {
                    "format_data_pointer": 1
                },
                "return": {
                    "return_value": 1
                },
                "uVar11": {
                    "byte2": 1,
                    "conversion_specifier": 1,
                    "digit": 6,
                    "format_char": 1,
                    "new_variable_name6": 1,
                    "temp_var1": 1,
                    "u_var1": 1,
                    "u_var11": 1,
                    "uint_var": 1,
                    "uint_var11": 2,
                    "unsigned_integer_1": 1,
                    "unsigned_integer_variable1": 1,
                    "unsigned_value": 1,
                    "unsigned_var1": 1,
                    "unsigned_variable": 1,
                    "ushort_value": 1,
                    "ushort_var1": 2,
                    "var3": 1
                },
                "uVar13": {
                    "conversion_flag": 1,
                    "flag": 1,
                    "flags": 4,
                    "new_variable_name8": 1,
                    "temp": 1,
                    "temp_var3": 1,
                    "u_var13": 1,
                    "u_var2": 1,
                    "uint_value": 1,
                    "uint_var13": 2,
                    "uint_var2": 1,
                    "unsigned_integer_2": 1,
                    "unsigned_integer_variable2": 1,
                    "unsigned_value2": 1,
                    "unsigned_var2": 1,
                    "unsigned_variable2": 1,
                    "ushort1": 1,
                    "ushort_val": 1,
                    "ushort_var2": 2,
                    "var4": 1
                },
                "uVar14": {
                    "byte1": 1,
                    "byte_val": 1,
                    "byte_value": 1,
                    "byte_var1": 1,
                    "ch": 1,
                    "char_code": 1,
                    "current_char": 1,
                    "current_char_ascii": 1,
                    "current_flags": 1,
                    "new_variable_name9": 1,
                    "next_char": 1,
                    "next_character": 1,
                    "temp_var4": 1,
                    "u_var14": 1,
                    "u_var3": 1,
                    "uchar_var1": 1,
                    "uint_var14": 2,
                    "uint_var3": 1,
                    "unsigned_integer_3": 1,
                    "unsigned_integer_variable3": 1,
                    "unsigned_value3": 1,
                    "unsigned_var3": 1,
                    "unsigned_variable3": 1,
                    "var5": 1
                },
                "uVar21": {
                    "byte_count": 1,
                    "new_variable_name16": 1,
                    "num_digits": 1,
                    "temp2": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var11": 1,
                    "u_var21": 1,
                    "u_var4": 1,
                    "uint_value2": 1,
                    "uint_var1": 1,
                    "uint_var21": 2,
                    "uint_var4": 1,
                    "unsigned_integer_4": 1,
                    "unsigned_integer_variable4": 1,
                    "unsigned_value4": 1,
                    "unsigned_var4": 1,
                    "unsigned_variable4": 1,
                    "var7": 1
                },
                "uVar22": {
                    "ushort_var3": 1
                },
                "uVar24": {
                    "hi_part": 1,
                    "new_variable_name19": 1,
                    "return_var": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var14": 1,
                    "tmp_val": 1,
                    "u_var1": 1,
                    "u_var24": 1,
                    "u_var5": 1,
                    "uint_var2": 1,
                    "uint_var24": 2,
                    "uint_var5": 1,
                    "undefined_value": 1,
                    "unsigned_integer_5": 1,
                    "unsigned_integer_variable5": 1,
                    "unsigned_value5": 1,
                    "unsigned_variable5": 1,
                    "var8": 1
                }
            },
            "called": [
                "FUN_000840f8",
                "FUN_0008356c",
                "FUN_00082824",
                "FUN_000834f0",
                "FUN_00084530",
                "FUN_00082688",
                "FUN_00083888"
            ],
            "calling": [
                "FUN_00081750",
                "FUN_000834f0",
                "FUN_000817c8"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parse_format_string_0008289c(int input1,int input2,int *******input_3,int **arg4)\n\n{\n  bool is_negative;\n  bool is_negative;\n  bool is_flag_set;\n  char char_var;\n  bool is_zero_padded;\n  int ********format_specifier;\n  int *arg;\n  int result;\n  char char_var2;\n  int *******nested_pointer2;\n  uint digit;\n  int **pointer_to_pointer3;\n  uint flags;\n  uint uint_var14;\n  int counter;\n  int ********pointer_var5;\n  int num_args;\n  int *******pointer_pointer_variable3;\n  int *int_pointer2;\n  int *******pointer_pointer_variable4;\n  uint uint_var21;\n  int *int_pointer3;\n  int *******pointer_pointer_variable5;\n  undefined4 uint_var24;\n  int ********ppppppppi_var25;\n  bool is_negative;\n  longlong long_var;\n  int *******local_var1;\n  int *******local_var2;\n  int **local_var3;\n  int result;\n  char *hex_digits;\n  char local_char1;\n  undefined padding_char;\n  undefined local_undefined_var2;\n  int ********format_specifier_ptr;\n  int index;\n  int *******current_len;\n  undefined char_var3;\n  char char_stack_var;\n  undefined local_undefined_var4;\n  undefined local_array_var [4];\n  int *******ignore [16];\n  \n  if ((input1 != 0) && (*(int *)(input1 + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  flags = (uint)*(ushort *)(input2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(input2 + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(input2 + 0xc) = (short)flags;\n    *(uint *)(input2 + 100) = *(uint *)(input2 + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(input2 + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = FUN_0008356c(input1,input2);\n    if (result != 0) {\n      return_value -1;\n    }\n    if ((*(ushort *)(input2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(input2 + 0xe)) {\n    result = FUN_000834f0(input1,input2,input_3,arg4);\n    return_value result;\n  }\nLAB_000828ee:\n  hex_digits = (char *)0x0;\n  current_len = (int *******)0x0;\n  index = 0;\n  result = 0;\n  format_specifier = (int ********)local_array_var;\n  local_var3 = arg4;\n  format_specifier_ptr = (int ********)local_array_var;\nLAB_00082902:\n  nested_pointer2 = input_3;\n  if ((*(char *)input_3 != '\\0') && (*(char *)input_3 != '%')) {\n    do {\n      nested_pointer2 = (int *******)((int)nested_pointer2 + 1);\n      if (*(char *)nested_pointer2 == '\\0') break;\n    } while (*(char *)nested_pointer2 != '%');\n    pointer_pointer_variable4 = (int *******)((int)nested_pointer2 - (int)input_3);\n    if (pointer_pointer_variable4 != (int *******)0x0) {\n      index = index + 1;\n      current_len = (int *******)((int)current_len + (int)pointer_pointer_variable4);\n      *format_specifier = input_3;\n      format_specifier[1] = pointer_pointer_variable4;\n      if (index < 8) {\n        format_specifier = format_specifier + 2;\n      }\n      else {\n        if (current_len == (int *******)0x0) {\n          result = result + (int)pointer_pointer_variable4;\n          index = 0;\n          format_specifier = (int ********)local_array_var;\n          goto LAB_00082952;\n        }\n        result = FUN_00082824(input1,input2,&format_specifier_ptr);\n        format_specifier = (int ********)local_array_var;\n        if (result != 0) goto LAB_00083142;\n      }\n      result = result + (int)pointer_pointer_variable4;\n    }\n  }\nLAB_00082952:\n  if (*(char *)nested_pointer2 != '\\0') {\n    local_char1 = '\\0';\n    uint_var14 = (uint)*(byte *)((int)nested_pointer2 + 1);\n    flags = 0;\n    is_zero_padded = false;\n    is_negative = false;\n    is_negative = false;\n    is_flag_set = false;\n    is_negative = false;\n    pointer_pointer_variable4 = (int *******)0x0;\n    local_var2 = (int *******)0xffffffff;\n    input_3 = (int *******)((int)nested_pointer2 + 1);\nLAB_00082976:\n    input_3 = (int *******)((int)input_3 + 1);\nLAB_0008297a:\n    switch(uint_var14) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (uint_var14 != 0) {\n        local_var1 = (int *******)0x1;\n        local_var2 = (int *******)0x1;\n        ppppppppi_var25 = (int ********)&char_var3;\n        char_var3 = (char)uint_var14;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      is_flag_set = true;\n      uint_var14 = (uint)*(byte *)input_3;\n      goto LAB_00082976;\n    case 0x2a:\n      pointer_pointer_variable4 = (int *******)*local_var3;\n      local_var3 = local_var3 + 1;\n      if ((int)pointer_pointer_variable4 < 0) {\n        pointer_pointer_variable4 = (int *******)-(int)pointer_pointer_variable4;\n        goto switchD_00082984_caseD_2d;\n      }\n      uint_var14 = (uint)*(byte *)input_3;\n      goto LAB_00082976;\n    case 0x2b:\n      uint_var14 = (uint)*(byte *)input_3;\n      local_char1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flags = flags | 4;\n      uint_var14 = (uint)*(byte *)input_3;\n      goto LAB_00082976;\n    case 0x2e:\n      uint_var14 = (uint)*(byte *)input_3;\n      nested_pointer2 = (int *******)((int)input_3 + 1);\n      if (uint_var14 == 0x2a) {\n        uint_var14 = (uint)*(byte *)((int)input_3 + 1);\n        local_var2 = (int *******)*local_var3;\n        local_var3 = local_var3 + 1;\n        input_3 = nested_pointer2;\n        if ((int)local_var2 < 0) {\n          local_var2 = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digit = uint_var14 - 0x30;\n      if (digit < 10) {\n        uint_var21 = 0;\n        do {\n          input_3 = (int *******)((int)nested_pointer2 + 1);\n          uint_var14 = (uint)*(byte *)nested_pointer2;\n          uint_var21 = digit + uint_var21 * 10;\n          digit = uint_var14 - 0x30;\n          nested_pointer2 = input_3;\n        } while (digit < 10);\n        local_var2 = (int *******)(uint_var21 | (int)uint_var21 >> 0x1f);\n      }\n      else {\n        local_var2 = (int *******)0x0;\n        input_3 = nested_pointer2;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flags = flags | 0x80;\n      uint_var14 = (uint)*(byte *)input_3;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      is_negative = true;\n      if (is_negative == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_var3 = (int **)((int)local_var3 + 7U & 0xfffffff8);\n      int_pointer2 = *local_var3;\n      int_pointer3 = local_var3[1];\n      local_var3 = local_var3 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      is_negative = true;\n      if (is_negative != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)is_negative << 4;\n      counter = (uint)is_negative << 5;\n      if ((is_negative == 0) && (counter = (uint)is_negative << 6, is_negative != 0)) {\n        int_pointer2 = (int *)(uint)*(ushort *)local_var3;\n        local_var3 = local_var3 + 1;\n        int_pointer3 = (int *)0x0;\n      }\n      else {\n        result = counter;\n        int_pointer2 = *local_var3;\n        local_var3 = local_var3 + 1;\n        int_pointer3 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      is_negative = true;\n      if (is_negative != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((is_negative) || (is_negative == false)) {\n        result = 1;\n        int_pointer2 = *local_var3;\n        local_var3 = local_var3 + 1;\n        int_pointer3 = (int *)0x0;\n      }\n      else {\n        int_pointer3 = (int *)0x0;\n        int_pointer2 = (int *)(uint)*(ushort *)local_var3;\n        local_var3 = local_var3 + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hex_digits = \"0123456789ABCDEF\";\n      if (is_negative == false) goto LAB_00082efa;\nLAB_00082d1a:\n      pointer_to_pointer3 = (int **)((int)local_var3 + 7U & 0xfffffff8);\n      local_var3 = pointer_to_pointer3 + 2;\n      int_pointer2 = *pointer_to_pointer3;\n      int_pointer3 = pointer_to_pointer3[1];\n      goto LAB_00082d2e;\n    case 99:\n      int_pointer2 = *local_var3;\n      local_var3 = local_var3 + 1;\n      local_var1 = (int *******)0x1;\n      char_var3 = SUB41(int_pointer2,0);\n      local_var2 = (int *******)0x1;\n      ppppppppi_var25 = (int ********)&char_var3;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (is_negative != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((is_negative == false) && (is_negative != false)) {\n        int_pointer2 = (int *)(int)*(short *)local_var3;\n        local_var3 = local_var3 + 1;\n        int_pointer3 = (int *)((int)int_pointer2 >> 0x1f);\n      }\n      else {\n        int_pointer2 = *local_var3;\n        local_var3 = local_var3 + 1;\n        int_pointer3 = (int *)((int)int_pointer2 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)int_pointer3 < 0) {\n        is_negative = int_pointer2 != (int *)0x0;\n        int_pointer2 = (int *)-(int)int_pointer2;\n        int_pointer3 = (int *)(-(int)int_pointer3 - (uint)is_negative);\n        local_char1 = '-';\n        char_var = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_var2) {\n        flags = flags & 0xffffff7f;\n      }\n      is_zero_padded = false;\n      uint_var14 = (uint)int_pointer2 | (uint)int_pointer3;\n      result = 1;\n      char_var = local_char1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      is_negative = true;\n      uint_var14 = (uint)*(byte *)input_3;\n      goto LAB_00082976;\n    case 0x6c:\n      uint_var14 = (uint)*(byte *)input_3;\n      if (uint_var14 == 0x6c) {\n        is_negative = true;\n        uint_var14 = (uint)*(byte *)((int)input_3 + 1);\n        input_3 = (int *******)((int)input_3 + 1);\n      }\n      else {\n        is_negative = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (is_negative == false) {\n        if (is_negative == false) {\n          if (is_negative) {\n            int_pointer2 = *local_var3;\n            local_var3 = local_var3 + 1;\n            *(short *)int_pointer2 = (short)result;\n          }\n          else {\n            int_pointer2 = *local_var3;\n            local_var3 = local_var3 + 1;\n            *int_pointer2 = result;\n          }\n        }\n        else {\n          int_pointer2 = *local_var3;\n          local_var3 = local_var3 + 1;\n          *int_pointer2 = result;\n        }\n      }\n      else {\n        int_pointer2 = *local_var3;\n        local_var3 = local_var3 + 1;\n        *int_pointer2 = result;\n        int_pointer2[1] = result >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (is_negative == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      pointer_to_pointer3 = (int **)((int)local_var3 + 7U & 0xfffffff8);\n      local_var3 = pointer_to_pointer3 + 2;\n      int_pointer2 = *pointer_to_pointer3;\n      int_pointer3 = pointer_to_pointer3[1];\n      result = 0;\n      break;\n    case 0x70:\n      int_pointer2 = *local_var3;\n      local_var3 = local_var3 + 1;\n      local_undefined_var2 = 0x78;\n      is_zero_padded = true;\n      int_pointer3 = (int *)0x0;\n      padding_char = 0x30;\n      hex_digits = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      is_negative = true;\n      uint_var14 = (uint)*(byte *)input_3;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppi_var25 = (int ********)*local_var3;\n      local_char1 = '\\0';\n      local_var3 = local_var3 + 1;\n      if (ppppppppi_var25 != (int ********)0x0) {\n        if ((int)local_var2 < 0) {\n          local_var2 = (int *******)FUN_00082688(ppppppppi_var25);\n          nested_pointer2 = (int *******)0x0;\n          char_var = local_char1;\n        }\n        else {\n          result = FUN_000840f8(ppppppppi_var25,0,local_var2);\n          char_var = local_char1;\n          if (result == 0) {\n            nested_pointer2 = (int *******)0x0;\n          }\n          else {\n            pointer_pointer_variable3 = (int *******)(result - (int)ppppppppi_var25);\n            if ((int)local_var2 <= (int)(int *******)(result - (int)ppppppppi_var25)) {\n              pointer_pointer_variable3 = local_var2;\n            }\n            nested_pointer2 = (int *******)0x0;\n            local_var2 = pointer_pointer_variable3;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < local_var2) {\n        local_var2 = (int *******)0x6;\n      }\n      local_var1 = (int *******)((uint)local_var2 & ~((int)local_var2 >> 0x1f));\n      ppppppppi_var25 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      local_char1 = '\\0';\n      nested_pointer2 = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!is_negative) goto LAB_00082ce0;\nLAB_00082bc6:\n      pointer_to_pointer3 = (int **)((int)local_var3 + 7U & 0xfffffff8);\n      local_var3 = pointer_to_pointer3 + 2;\n      int_pointer2 = *pointer_to_pointer3;\n      int_pointer3 = pointer_to_pointer3[1];\n      result = 1;\n      break;\n    case 0x78:\n      hex_digits = \"0123456789abcdef\";\n      if (is_negative != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((is_negative == false) && (is_negative != false)) {\n        int_pointer3 = (int *)0x0;\n        int_pointer2 = (int *)(uint)*(ushort *)local_var3;\n        local_var3 = local_var3 + 1;\n      }\n      else {\n        int_pointer2 = *local_var3;\n        local_var3 = local_var3 + 1;\n        int_pointer3 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((is_flag_set) && (((uint)int_pointer2 | (uint)int_pointer3) != 0)) {\n        is_zero_padded = true;\n        padding_char = 0x30;\n        result = 2;\n        local_undefined_var2 = (char)uint_var14;\n      }\n      else {\n        result = 2;\n      }\n    }\n    local_char1 = '\\0';\n    char_var = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_var2) {\n      flags = flags & 0xffffff7f;\n    }\n    uint_var14 = (uint)int_pointer2 | (uint)int_pointer3;\njoined_r0x00082adc:\n    long_var = CONCAT44(int_pointer3,int_pointer2);\n    nested_pointer2 = local_var2;\n    if ((uint_var14 == 0) && (local_var2 == (int *******)0x0)) {\n      ppppppppi_var25 = (int ********)local_array_var;\n      if ((result != 0) || (!is_flag_set)) goto LAB_00082b04;\n      ppppppppi_var25 = (int ********)(&char_stack_var + 1);\n      local_undefined_var4 = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (int_pointer3 != (int *)0x0 || (int *)0x9 < int_pointer2) {\n        pointer_var5 = (int ********)(&char_stack_var + 1);\n        do {\n          ppppppppi_var25 = pointer_var5;\n          uint_var24 = (undefined4)((ulonglong)long_var >> 0x20);\n          char_var2 = '\\n';\n          FUN_00084530((int)long_var,uint_var24,10,0);\n          *(char *)ppppppppi_var25 = char_var2 + '0';\n          long_var = FUN_00084530((int)long_var,uint_var24,10,0);\n          pointer_var5 = (int ********)((int)ppppppppi_var25 + -1);\n        } while (long_var != 0);\n        local_var2 = (int *******)((int)local_array_var - (int)ppppppppi_var25);\n        goto LAB_00082b04;\n      }\n      local_undefined_var4 = (char)int_pointer2 + '0';\n      ppppppppi_var25 = (int ********)(&char_stack_var + 1);\n      goto LAB_00083282;\n    }\n    pointer_var5 = (int ********)(&char_stack_var + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      ppppppppi_var25 = pointer_var5;\n      uint_var14 = (uint)int_pointer2 & 0xf;\n      int_pointer2 = (int *)((uint)int_pointer2 >> 4 | (int)int_pointer3 << 0x1c);\n      int_pointer3 = (int *)((uint)int_pointer3 >> 4);\n      *(char *)ppppppppi_var25 = hex_digits[uint_var14];\n      pointer_var5 = (int ********)((int)ppppppppi_var25 + -1);\n    } while (((uint)int_pointer2 | (uint)int_pointer3) != 0);\n    local_var2 = (int *******)((int)local_array_var - (int)ppppppppi_var25);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (current_len != (int *******)0x0) {\n    FUN_00082824(input1,input2,&format_specifier_ptr);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(input2 + 0xc) << 0x19) < 0) {\n    return_value -1;\n  }\n  return_value result;\nLAB_000830e2:\n  do {\n    ppppppppi_var25 = pointer_var5;\n    arg = (int *)((uint)int_pointer2 >> 3 | (int)int_pointer3 << 0x1d);\n    int_pointer3 = (int *)((uint)int_pointer3 >> 3);\n    result = ((uint)int_pointer2 & 7) + 0x30;\n    *(char *)ppppppppi_var25 = (char)result;\n    pointer_var5 = (int ********)((int)ppppppppi_var25 + -1);\n    int_pointer2 = arg;\n  } while (((uint)arg | (uint)int_pointer3) != 0);\n  if (is_flag_set) {\n    if (result == 0x30) {\nLAB_00082afe:\n      local_var2 = (int *******)((int)local_array_var - (int)ppppppppi_var25);\n    }\n    else {\n      *(undefined *)((int)ppppppppi_var25 + -1) = 0x30;\n      ppppppppi_var25 = pointer_var5;\n      local_var2 = (int *******)((int)local_array_var - (int)pointer_var5);\n    }\n  }\n  else {\nLAB_00083282:\n    local_var2 = (int *******)((int)local_array_var - (int)ppppppppi_var25);\n  }\nLAB_00082b04:\n  local_var1 = local_var2;\n  if ((int)local_var2 < (int)nested_pointer2) {\n    local_var1 = nested_pointer2;\n  }\n  if (char_var != '\\0') {\n    local_var1 = (int *******)((int)local_var1 + 1);\n  }\nLAB_00082b1e:\n  if (is_zero_padded) {\n    local_var1 = (int *******)((int)local_var1 + 2);\n  }\n  if ((flags == 0) &&\n     (pointer_pointer_variable3 = (int *******)((int)pointer_pointer_variable4 - (int)local_var1), 0 < (int)pointer_pointer_variable3)) {\n    if ((int)pointer_pointer_variable3 < 0x11) {\n      index = index + 1;\n    }\n    else {\n      do {\n        pointer_pointer_variable5 = pointer_pointer_variable3;\n        result = index + 1;\n        current_len = current_len + 4;\n        *format_specifier = (int *******)0x856f0;\n        format_specifier[1] = (int *******)0x10;\n        if (result < 8) {\n          counter = index + 2;\n          format_specifier = format_specifier + 2;\n          index = result;\n        }\n        else if (current_len == (int *******)0x0) {\n          counter = 1;\n          format_specifier = (int ********)local_array_var;\n          index = 0;\n        }\n        else {\n          index = result;\n          result = FUN_00082824(input1,input2,&format_specifier_ptr);\n          if (result != 0) goto LAB_00083142;\n          counter = index + 1;\n          format_specifier = (int ********)local_array_var;\n        }\n        pointer_pointer_variable3 = pointer_pointer_variable5 + -4;\n      } while (0x10 < (int)pointer_pointer_variable3);\n      pointer_pointer_variable3 = pointer_pointer_variable5 + -4;\n      index = counter;\n    }\n    current_len = (int *******)((int)current_len + (int)pointer_pointer_variable3);\n    *format_specifier = (int *******)0x856f0;\n    format_specifier[1] = pointer_pointer_variable3;\n    if (index < 8) {\n      result = index + 1;\n      format_specifier = format_specifier + 2;\n    }\n    else if (current_len == (int *******)0x0) {\n      result = 1;\n      index = 0;\n      format_specifier = (int ********)local_array_var;\n    }\n    else {\n      result = FUN_00082824(input1,input2,&format_specifier_ptr);\n      if (result != 0) goto LAB_00083142;\n      result = index + 1;\n      format_specifier = (int ********)local_array_var;\n    }\n  }\n  else {\n    result = index + 1;\n  }\n  counter = result;\n  if (local_char1 != '\\0') {\n    current_len = (int *******)((int)current_len + 1);\n    counter = 1;\n    *format_specifier = (int *******)&local_char1;\n    format_specifier[1] = (int *******)0x1;\n    index = result;\n    if (result < 8) {\n      counter = result + 1;\n      format_specifier = format_specifier + 2;\n    }\n    else if (current_len == (int *******)0x0) {\n      index = 0;\n      format_specifier = (int ********)local_array_var;\n    }\n    else {\n      result = FUN_00082824(input1,input2,&format_specifier_ptr);\n      if (result != 0) goto LAB_00083142;\n      counter = index + 1;\n      format_specifier = (int ********)local_array_var;\n    }\n  }\n  result = counter;\n  num_args = index;\n  if (is_zero_padded) {\n    current_len = (int *******)((int)current_len + 2);\n    *format_specifier = (int *******)&padding_char;\n    format_specifier[1] = (int *******)0x2;\n    if (counter < 8) {\n      result = counter + 1;\n      num_args = counter;\n      format_specifier = format_specifier + 2;\n    }\n    else if (current_len == (int *******)0x0) {\n      result = 1;\n      num_args = 0;\n      format_specifier = (int ********)local_array_var;\n    }\n    else {\n      index = counter;\n      result = FUN_00082824(input1,input2,&format_specifier_ptr);\n      if (result != 0) goto LAB_00083142;\n      result = index + 1;\n      num_args = index;\n      format_specifier = (int ********)local_array_var;\n    }\n  }\n  index = num_args;\n  if ((flags == 0x80) &&\n     (pointer_pointer_variable3 = (int *******)((int)pointer_pointer_variable4 - (int)local_var1), 0 < (int)pointer_pointer_variable3)) {\n    if (0x10 < (int)pointer_pointer_variable3) {\n      do {\n        while( true ) {\n          pointer_pointer_variable5 = pointer_pointer_variable3;\n          index = num_args + 1;\n          current_len = current_len + 4;\n          *format_specifier = (int *******)\"0000000000000000\";\n          format_specifier[1] = (int *******)0x10;\n          if (7 < index) break;\n          result = num_args + 2;\n          format_specifier = format_specifier + 2;\nLAB_000831f2:\n          num_args = index;\n          pointer_pointer_variable3 = pointer_pointer_variable5 + -4;\n          if ((int)(pointer_pointer_variable5 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (current_len != (int *******)0x0) {\n          result = FUN_00082824(input1,input2,&format_specifier_ptr);\n          if (result == 0) {\n            result = index + 1;\n            format_specifier = (int ********)local_array_var;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        num_args = 0;\n        pointer_pointer_variable3 = pointer_pointer_variable5 + -4;\n        format_specifier = (int ********)local_array_var;\n      } while (0x10 < (int)(pointer_pointer_variable5 + -4));\nLAB_00083218:\n      pointer_pointer_variable3 = pointer_pointer_variable5 + -4;\n    }\n    current_len = (int *******)((int)current_len + (int)pointer_pointer_variable3);\n    *format_specifier = (int *******)\"0000000000000000\";\n    format_specifier[1] = pointer_pointer_variable3;\n    index = result;\n    if (result < 8) {\n      result = result + 1;\n      format_specifier = format_specifier + 2;\n    }\n    else if (current_len == (int *******)0x0) {\n      result = 1;\n      index = 0;\n      format_specifier = (int ********)local_array_var;\n    }\n    else {\n      result = FUN_00082824(input1,input2,&format_specifier_ptr);\n      if (result != 0) goto LAB_00083142;\n      result = index + 1;\n      format_specifier = (int ********)local_array_var;\n    }\n  }\n  nested_pointer2 = (int *******)((int)nested_pointer2 - (int)local_var2);\n  pointer_var5 = (int ********)local_array_var;\n  if ((int)nested_pointer2 < 1) {\nLAB_0008302a:\n    current_len = (int *******)((int)current_len + (int)local_var2);\n    *format_specifier = (int *******)ppppppppi_var25;\n    format_specifier[1] = local_var2;\n    local_var2 = current_len;\n    index = result;\n    if (result < 8) goto LAB_000831be;\n    if (current_len == (int *******)0x0) {\n      index = 0;\n    }\n    else {\n      result = FUN_00082824(input1,input2,&format_specifier_ptr);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    counter = index;\n    if (0x10 < (int)nested_pointer2) {\n      do {\n        while( true ) {\n          pointer_pointer_variable3 = nested_pointer2;\n          index = counter + 1;\n          current_len = current_len + 4;\n          *format_specifier = (int *******)\"0000000000000000\";\n          format_specifier[1] = (int *******)0x10;\n          if (7 < index) break;\n          result = counter + 2;\n          format_specifier = format_specifier + 2;\nLAB_00082fe6:\n          counter = index;\n          nested_pointer2 = pointer_pointer_variable3 + -4;\n          if ((int)(pointer_pointer_variable3 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (current_len != (int *******)0x0) {\n          result = FUN_00082824(input1,input2,&format_specifier_ptr);\n          if (result == 0) {\n            result = index + 1;\n            format_specifier = (int ********)local_array_var;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        format_specifier = (int ********)local_array_var;\n        counter = 0;\n        nested_pointer2 = pointer_pointer_variable3 + -4;\n      } while (0x10 < (int)(pointer_pointer_variable3 + -4));\nLAB_0008300e:\n      nested_pointer2 = pointer_pointer_variable3 + -4;\n    }\n    current_len = (int *******)((int)current_len + (int)nested_pointer2);\n    *format_specifier = (int *******)\"0000000000000000\";\n    format_specifier[1] = nested_pointer2;\n    if (result < 8) {\n      result = result + 1;\n      format_specifier = format_specifier + 2;\n      goto LAB_0008302a;\n    }\n    if (current_len != (int *******)0x0) {\n      index = result;\n      result = FUN_00082824(input1,input2,&format_specifier_ptr);\n      if (result != 0) goto LAB_00083142;\n      result = index + 1;\n      format_specifier = (int ********)local_array_var;\n      goto LAB_0008302a;\n    }\n    ignore[0] = local_var2;\n    index = 1;\n    format_specifier = (int ********)local_array_var;\n    local_array_var = (undefined  [4])ppppppppi_var25;\nLAB_000831be:\n    pointer_var5 = format_specifier + 2;\n    current_len = local_var2;\n  }\n  if (((flags & 4) != 0) &&\n     (nested_pointer2 = (int *******)((int)pointer_pointer_variable4 - (int)local_var1), 0 < (int)nested_pointer2)) {\n    result = index;\n    if ((int)nested_pointer2 < 0x11) {\n      counter = index + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          index = result + 1;\n          current_len = current_len + 4;\n          *pointer_var5 = (int *******)0x856f0;\n          pointer_var5[1] = (int *******)0x10;\n          if (7 < index) break;\n          counter = result + 2;\n          pointer_var5 = pointer_var5 + 2;\nLAB_0008307a:\n          nested_pointer2 = nested_pointer2 + -4;\n          result = index;\n          if ((int)nested_pointer2 < 0x11) goto LAB_000830a2;\n        }\n        if (current_len != (int *******)0x0) {\n          result = FUN_00082824(input1,input2,&format_specifier_ptr);\n          if (result == 0) {\n            counter = index + 1;\n            pointer_var5 = (int ********)local_array_var;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        nested_pointer2 = nested_pointer2 + -4;\n        counter = 1;\n        result = 0;\n        pointer_var5 = (int ********)local_array_var;\n      } while (0x10 < (int)nested_pointer2);\n    }\nLAB_000830a2:\n    current_len = (int *******)((int)current_len + (int)nested_pointer2);\n    *pointer_var5 = (int *******)0x856f0;\n    pointer_var5[1] = nested_pointer2;\n    index = counter;\n    if (7 < counter) {\n      if (current_len == (int *******)0x0) {\n        if ((int)local_var1 < (int)pointer_pointer_variable4) {\n          local_var1 = pointer_pointer_variable4;\n        }\n        result = result + (int)local_var1;\n        goto LAB_00083186;\n      }\n      result = FUN_00082824(input1,input2,&format_specifier_ptr);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_var1 < (int)pointer_pointer_variable4) {\n    local_var1 = pointer_pointer_variable4;\n  }\n  result = result + (int)local_var1;\n  if ((current_len != (int *******)0x0) &&\n     (result = FUN_00082824(input1,input2,&format_specifier_ptr), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  index = 0;\n  format_specifier = (int ********)local_array_var;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digit = uint_var14 - 0x30;\n  pointer_pointer_variable4 = (int *******)0x0;\n  nested_pointer2 = input_3;\n  do {\n    input_3 = (int *******)((int)nested_pointer2 + 1);\n    uint_var14 = (uint)*(byte *)nested_pointer2;\n    pointer_pointer_variable4 = (int *******)(digit + (int)pointer_pointer_variable4 * 10);\n    digit = uint_var14 - 0x30;\n    nested_pointer2 = input_3;\n  } while (digit < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  uint_var14 = (uint)*(byte *)input_3;\n  if (local_char1 == '\\0') {\n    local_char1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "current_name": "parse_format_string_0008289c",
            "entrypoint": "0x0008289c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008289c": "parse_format_string_0008289c",
                "bVar1": "is_negative",
                "bVar2": "is_negative",
                "bVar26": "is_negative",
                "bVar3": "is_flag_set",
                "bVar5": "is_zero_padded",
                "cStack_6a": "char_stack_var",
                "cVar4": "char_var",
                "cVar9": "char_var2",
                "iVar10": "int_var3",
                "iVar15": "counter",
                "iVar17": "num_args",
                "iVar20": "int_var4",
                "iVar22": "integer_value2",
                "iVar25": "status",
                "iVar8": "result",
                "lVar27": "long_var",
                "local_64": "ignore",
                "local_68": "local_array_var",
                "local_69": "local_undefined_var4",
                "local_90": "char_var3",
                "local_94": "current_len",
                "local_98": "index",
                "local_9c": "format_specifier_ptr",
                "local_9f": "local_undefined_var2",
                "local_a0": "padding_char",
                "local_a1": "local_char1",
                "local_c0": "hex_digits",
                "local_c4": "result",
                "local_c8": "local_var3",
                "local_d4": "local_var2",
                "local_dc": "local_var1",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input_3",
                "param_4": "arg4",
                "piVar19": "int_pointer2",
                "piVar22": "int_pointer3",
                "piVar23": "pi_var2",
                "piVar6": "int_var1",
                "piVar7": "arg",
                "ppiVar12": "pointer_to_pointer3",
                "ppiVar16": "ppi_var2",
                "ppiVar18": "ppi_var3",
                "pppppppiVar10": "nested_pointer2",
                "pppppppiVar16": "pointer_pointer_variable2",
                "pppppppiVar18": "pointer_pointer_variable3",
                "pppppppiVar20": "pointer_pointer_variable4",
                "pppppppiVar23": "pointer_pointer_variable5",
                "pppppppiVar25": "ptr_var7",
                "ppppppppiVar16": "pointer_var5",
                "ppppppppiVar25": "ppppppppi_var25",
                "ppppppppiVar6": "format_specifier",
                "return": "return_value",
                "uVar11": "digit",
                "uVar13": "flags",
                "uVar14": "uint_var14",
                "uVar21": "uint_var21",
                "uVar24": "uint_var24"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000834f0": {
            "additional_data": {
                "FUN_0008289c": {
                    "process_parameters": 1
                },
                "FUN_000834f0": {
                    "decipher_binary": 1,
                    "decode_and_process_data": 1,
                    "decode_and_update": 1,
                    "decompiled_function": 1,
                    "process_binary_function": 1,
                    "process_data": 11,
                    "process_function": 1,
                    "reverse_binary": 1,
                    "validate_and_update_parameters": 1
                },
                "FUN_00083850": {
                    "check_conditions": 1
                },
                "auStack_420": {
                    "au_stack_buffer": 1,
                    "buffer": 2,
                    "buffer_data": 1,
                    "byte_array": 1,
                    "local_buffer": 3,
                    "local_stack_array": 1,
                    "stack_arr": 1,
                    "stack_array": 6,
                    "stack_buffer": 10,
                    "stack_data": 1,
                    "stack_variable": 1,
                    "temp_buffer": 2,
                    "temp_stack": 1
                },
                "iVar1": {
                    "error_code": 1,
                    "result": 18,
                    "result_value": 1,
                    "return_value": 3,
                    "status": 1
                },
                "iVar2": {
                    "check_result": 2,
                    "result": 3,
                    "result_value2": 1,
                    "return_value": 1,
                    "second_result": 1,
                    "status": 2,
                    "sub_function_result": 8,
                    "sub_result": 5,
                    "subfunction_result": 1
                },
                "local_424": {
                    "constant_four": 1,
                    "constant_value": 2,
                    "data": 1,
                    "local_data": 1,
                    "local_value6": 1,
                    "local_value7": 1,
                    "local_value8": 1,
                    "local_var": 1,
                    "local_var7": 1,
                    "local_variable": 3,
                    "parameter_1": 1,
                    "saved_value": 1,
                    "stack_param6": 1,
                    "sub_param_5": 1,
                    "temp": 1,
                    "temp_buffer": 2,
                    "temp_variable": 1,
                    "unknown_value2": 1,
                    "value1": 1,
                    "value3": 2,
                    "value4": 2,
                    "var1": 1,
                    "var4": 1,
                    "var6": 1,
                    "var_424": 1
                },
                "local_464": {
                    "buffer_size2": 1,
                    "buffer_size3": 1,
                    "buffer_size_3": 2,
                    "constant4": 1,
                    "constant_three": 1,
                    "local_value": 1,
                    "local_value5": 1,
                    "local_value6": 1,
                    "local_value7": 1,
                    "local_var8": 1,
                    "param8": 1,
                    "size4": 2,
                    "size_3": 1,
                    "some_other_data": 1,
                    "stack_param5": 1,
                    "sub_param_4": 1,
                    "value": 1,
                    "value2": 3,
                    "value3": 2,
                    "value5": 1,
                    "value_copy2": 1,
                    "var2": 1,
                    "var5": 1,
                    "var_464": 1
                },
                "local_46c": {
                    "buffer_size_2": 1,
                    "constant_two": 1,
                    "data": 1,
                    "local_value4": 1,
                    "local_value5": 1,
                    "local_value6": 1,
                    "param7": 1,
                    "param_value": 1,
                    "size3": 2,
                    "some_data": 1,
                    "sub_param_3": 1,
                    "unknown_value": 1,
                    "value": 1,
                    "value1": 2,
                    "value2": 2,
                    "value4": 1,
                    "value_copy": 1,
                    "var4": 1,
                    "var_46c": 1
                },
                "local_470": {
                    "constant3": 1,
                    "constant_zero": 1,
                    "count": 1,
                    "counter": 2,
                    "local_value3": 1,
                    "local_value4": 1,
                    "local_value5": 1,
                    "local_var6": 1,
                    "param6": 1,
                    "param_count": 1,
                    "size2": 3,
                    "size_2": 1,
                    "some_value": 1,
                    "stack_param4": 1,
                    "sub_param_2": 1,
                    "temp": 1,
                    "value": 2,
                    "var3": 2,
                    "var_470": 1,
                    "zero": 4,
                    "zero_value": 2
                },
                "local_474": {
                    "array_size2": 2,
                    "buffer_size1": 2,
                    "buffer_size2": 6,
                    "buffer_size_1": 1,
                    "buffer_size_2": 1,
                    "buffer_size_copy": 2,
                    "constant2": 1,
                    "constant_one": 1,
                    "local_size2": 1,
                    "local_value3": 1,
                    "local_value4": 1,
                    "local_var5": 1,
                    "output_size": 1,
                    "param5": 1,
                    "param_size": 1,
                    "size1": 3,
                    "size_1": 1,
                    "stack_param3": 1,
                    "sub_param_1": 1,
                    "var_474": 1
                },
                "local_478": {
                    "buffer": 10,
                    "buffer_pointer": 1,
                    "buffer_ptr": 7,
                    "current_pointer": 1,
                    "local_array": 1,
                    "local_pointer": 3,
                    "local_var4": 1,
                    "output": 2,
                    "param4": 1,
                    "pointer": 1,
                    "pointer_var": 1,
                    "stack_param2": 1,
                    "string_pointer": 1
                },
                "local_47a": {
                    "condition_flag": 1,
                    "data_flag": 1,
                    "data_type": 1,
                    "data_value": 1,
                    "input_value_2": 1,
                    "local_data": 1,
                    "local_value2": 2,
                    "local_value3": 1,
                    "local_var3": 1,
                    "modified_short2": 1,
                    "modified_value2": 1,
                    "param3_value": 1,
                    "param_flag": 1,
                    "parameter_value": 1,
                    "short_value": 1,
                    "undefined_var": 1,
                    "updated_value": 1,
                    "ushort_value": 2,
                    "value": 9,
                    "value2": 1,
                    "var2": 1
                },
                "local_47c": {
                    "data_length": 1,
                    "data_value": 1,
                    "flag": 7,
                    "input_value": 1,
                    "local_value1": 2,
                    "local_value2": 1,
                    "local_var2": 1,
                    "mask": 1,
                    "masked_data": 1,
                    "masked_short": 1,
                    "masked_value": 4,
                    "modified_flag": 1,
                    "modified_short": 1,
                    "modified_value": 1,
                    "modified_value1": 2,
                    "param2_value": 1,
                    "param_value": 1,
                    "short_value": 1,
                    "ushort_var": 1,
                    "var1": 1
                },
                "local_480": {
                    "array_size": 1,
                    "array_size1": 2,
                    "buffer_size": 17,
                    "buffer_size1": 4,
                    "constant1": 1,
                    "local_size": 1,
                    "local_size1": 1,
                    "local_value1": 1,
                    "local_var1": 1,
                    "local_variable_1": 1,
                    "stack_param1": 1
                },
                "local_488": {
                    "array_of_pointers": 1,
                    "arrays": 1,
                    "buffer": 6,
                    "buffer_arr": 1,
                    "buffer_array": 9,
                    "local_array": 6,
                    "local_variables": 1,
                    "pointer_array": 1,
                    "stack_array": 1,
                    "stack_params": 1,
                    "stack_pointers": 1,
                    "string_array": 1
                },
                "param_1": {
                    "arg1": 6,
                    "arg_1": 1,
                    "argument_1": 1,
                    "config": 1,
                    "context": 2,
                    "input": 1,
                    "input1": 1,
                    "input_param": 4,
                    "input_value": 1,
                    "param": 3,
                    "param1": 6,
                    "param_1": 3,
                    "status": 1
                },
                "param_2": {
                    "arg": 1,
                    "arg2": 6,
                    "arg_2": 1,
                    "argument_2": 1,
                    "binary_address": 2,
                    "binary_data": 2,
                    "binary_param": 2,
                    "data": 5,
                    "data_param": 1,
                    "data_pointer": 1,
                    "input": 1,
                    "input2": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "param2": 5
                }
            },
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint decode_and_process_data_000834f0(undefined4 param1,int arg2)\n\n{\n  int result;\n  int sub_function_result;\n  undefined *buffer_array [2];\n  undefined4 buffer_size;\n  ushort flag;\n  undefined2 value;\n  undefined *buffer;\n  undefined4 buffer_size2;\n  undefined4 zero;\n  undefined4 value2;\n  undefined4 value2;\n  undefined4 local_variable;\n  undefined stack_buffer [1024];\n  \n  local_variable = *(undefined4 *)(arg2 + 100);\n  value2 = *(undefined4 *)(arg2 + 0x1c);\n  value = *(undefined2 *)(arg2 + 0xe);\n  value2 = *(undefined4 *)(arg2 + 0x24);\n  buffer_array[0] = stack_buffer;\n  flag = *(ushort *)(arg2 + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size2 = 0x400;\n  zero = 0;\n  buffer = buffer_array[0];\n  result = FUN_0008289c(param1,buffer_array);\n  if ((-1 < result) && (sub_function_result = FUN_00083850(param1,buffer_array), sub_function_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(arg2 + 0xc) = *(ushort *)(arg2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "current_name": "decode_and_process_data_000834f0",
            "entrypoint": "0x000834f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000834f0": "decode_and_process_data_000834f0",
                "auStack_420": "stack_buffer",
                "iVar1": "result",
                "iVar2": "sub_function_result",
                "local_424": "local_variable",
                "local_464": "value2",
                "local_46c": "value2",
                "local_470": "zero",
                "local_474": "buffer_size2",
                "local_478": "buffer",
                "local_47a": "value",
                "local_47c": "flag",
                "local_480": "buffer_size",
                "local_488": "buffer_array",
                "param_1": "param1",
                "param_2": "arg2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008356c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "elf32_rel_array": 1,
                    "rel_array": 1
                },
                "FUN_0008356c": {
                    "check_and_fix_relocation_offset": 1,
                    "check_and_modify_value": 1,
                    "check_and_update_value": 1,
                    "decode_and_update": 1,
                    "extract_elf_info": 1,
                    "parse_data": 1,
                    "parse_input_data": 1,
                    "process_binary_data": 1,
                    "process_binary_function": 1,
                    "process_data": 6,
                    "process_function": 2,
                    "process_relocation": 3,
                    "process_relocation_entry": 1,
                    "validate_and_process_data": 3,
                    "validate_input": 1
                },
                "FUN_00083888": {
                    "perform_relocation": 1
                },
                "FUN_00083b10": {
                    "cleanup_relocation": 1
                },
                "F_00083888": {
                    "handle_non_zero_relocation_offset": 1
                },
                "F_00083b10": {
                    "cleanup_relocation_entry": 1
                },
                "F_00084018": {
                    "handle_zero_symbol_value": 1
                },
                "iVar1": {
                    "auxiliary_value": 1,
                    "index_1": 1,
                    "local_var1": 1,
                    "section_index": 1,
                    "temp_val1": 1,
                    "temp_var1": 14,
                    "temp_var2": 1,
                    "temp_variable1": 2,
                    "value": 3,
                    "value1": 3,
                    "variable_1": 1
                },
                "iVar2": {
                    "data_value": 1,
                    "flag": 1,
                    "index_2": 1,
                    "local_var2": 1,
                    "section_type": 1,
                    "symbol_value": 1,
                    "temp_val2": 1,
                    "temp_var": 1,
                    "temp_var2": 14,
                    "temp_variable2": 2,
                    "value": 2,
                    "value2": 4,
                    "variable_2": 1
                },
                "iVar2_1": {
                    "value": 1
                },
                "param_1": {
                    "error_code": 6,
                    "out_status": 1,
                    "output": 2,
                    "output_buffer": 1,
                    "output_param": 3,
                    "output_parameter": 1,
                    "output_ptr": 2,
                    "output_status": 1,
                    "output_value": 1,
                    "result": 9,
                    "result_ptr": 1,
                    "status": 2
                },
                "param_1_1": {
                    "status": 1
                },
                "param_2": {
                    "data": 7,
                    "data_array": 2,
                    "elf_header": 1,
                    "input": 2,
                    "input_array": 2,
                    "input_buffer": 1,
                    "input_data": 3,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_ptr": 3,
                    "input_values": 1,
                    "relocation_data": 3,
                    "relocation_entry": 1
                },
                "param_2_0": {
                    "value": 1
                },
                "param_2_1": {
                    "temp": 1
                },
                "param_2_12": {
                    "cleanup_data": 1
                },
                "param_2_2": {
                    "result": 1
                },
                "param_2_3": {
                    "flag": 1
                },
                "param_2_3_1": {
                    "flag": 1
                },
                "param_2_4": {
                    "value": 1
                },
                "param_2_5": {
                    "result": 1
                },
                "param_2_6": {
                    "temp": 1
                },
                "r_offset": {
                    "offset": 1
                },
                "uVar3": {
                    "flag": 1,
                    "flags": 1,
                    "input_value": 1,
                    "relocation_offset": 1,
                    "section_flags": 1,
                    "temp": 1,
                    "temp_val3": 1,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "temp_var": 1,
                    "temp_var3": 11,
                    "temp_variable3": 1,
                    "u_value": 1,
                    "u_value1": 1,
                    "u_var3": 1,
                    "uint_value": 1,
                    "unsigned_var": 1,
                    "unsigned_variable_1": 1,
                    "uval1": 1,
                    "var1": 1,
                    "variable3": 1
                },
                "uVar3_1": {
                    "temp": 1
                },
                "uVar4": {
                    "flag": 2,
                    "mask": 2,
                    "old_section_flags": 1,
                    "original_flags": 1,
                    "relocation_value": 1,
                    "temp_val4": 1,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_var4": 11,
                    "temp_variable4": 1,
                    "u_value2": 1,
                    "u_var4": 1,
                    "unsigned_var_2": 1,
                    "unsigned_variable_2": 1,
                    "ushort_value": 2,
                    "uval2": 1,
                    "var2": 1,
                    "variable4": 1
                },
                "uVar4_1": {
                    "flag": 1
                }
            },
            "called": [
                "FUN_00084018",
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "calling": [
                "FUN_000842a4",
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "code": "\nundefined4 validate_and_process_data_0008356c(undefined4 *result,int *data)\n\n{\n  int temp_var1;\n  int temp_var2;\n  uint temp_var3;\n  ushort temp_var4;\n  \n  if ((elf32_rel_array[140].offset != 0) &&\n     (*(int *)(elf32_rel_array[140].offset + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  temp_var4 = *(ushort *)(data + 3);\n  temp_var3 = (uint)temp_var4;\n  if ((int)(temp_var3 << 0x1c) < 0) {\n    temp_var2 = data[4];\n  }\n  else {\n    if (-1 < (int)(temp_var3 << 0x1b)) {\n      *result = 9;\n      *(ushort *)(data + 3) = temp_var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var3 << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          FUN_00083b10(result);\n          temp_var4 = *(ushort *)(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      temp_var2 = data[4];\n      temp_var4 = temp_var4 & 0xffdb;\n      *data = temp_var2;\n      data[1] = 0;\n    }\n    else {\n      temp_var2 = data[4];\n    }\n    *(ushort *)(data + 3) = temp_var4 | 8;\n    temp_var3 = (uint)(temp_var4 | 8);\n  }\n  if ((temp_var2 == 0) && ((temp_var3 & 0x280) != 0x200)) {\n    FUN_00084018(result,data);\n    temp_var3 = (uint)*(ushort *)(data + 3);\n    temp_var2 = data[4];\n  }\n  if ((temp_var3 & 1) == 0) {\n    temp_var1 = 0;\n    if (-1 < (int)(temp_var3 << 0x1e)) {\n      temp_var1 = data[5];\n    }\n    data[2] = temp_var1;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((temp_var2 == 0) && ((int)((uint)*(ushort *)(data + 3) << 0x18) < 0)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "current_name": "validate_and_process_data_0008356c",
            "entrypoint": "0x0008356c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf32_rel_array",
                "FUN_0008356c": "validate_and_process_data_0008356c",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "param_1": "result",
                "param_2": "data",
                "r_offset": "offset",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000836d8": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000836d8",
            "entrypoint": "0x000836d8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000836ec": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "array_of_values": 1,
                    "array_variable": 1,
                    "rel_array": 2,
                    "relocation_array": 2,
                    "relocation_table": 1
                },
                "FUN_00080eec": {
                    "calculate_value": 2,
                    "get_data": 1,
                    "get_elf32_rel_offset": 1,
                    "get_first_element": 1,
                    "get_input_data": 1,
                    "get_input_value": 1,
                    "get_random_number": 2,
                    "get_random_value": 1,
                    "get_relocation_entry": 1,
                    "get_relocation_offset": 2,
                    "get_relocation_value": 2,
                    "get_value": 2,
                    "get_variable": 2
                },
                "FUN_000817f0": {
                    "allocate_memory": 19
                },
                "FUN_000836ec": {
                    "execute_function": 1,
                    "execute_relocated_code": 1,
                    "initialize": 1,
                    "initialize_and_call_function": 2,
                    "initialize_data": 2,
                    "initialize_data_structures": 1,
                    "initialize_function": 10,
                    "initialize_relocation": 1,
                    "initialize_relocation_data": 1,
                    "initialize_relocation_table": 5,
                    "initialize_relocations": 1,
                    "process_data": 2
                },
                "FUN_000841e4": {
                    "initialize_elf": 1,
                    "initialize_some_value": 1,
                    "initialize_system": 2,
                    "initialize_value": 4,
                    "print_message": 1,
                    "set_argument": 2,
                    "set_initial_value": 1,
                    "set_integer_parameter": 1,
                    "set_mode": 2,
                    "set_param": 2,
                    "set_permissions": 1,
                    "set_relocation_count": 1,
                    "set_relocation_entry_count": 1,
                    "set_relocation_size": 1,
                    "set_value": 1,
                    "set_variable": 1
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "error_handler": 1,
                    "execute_function": 1,
                    "jump_table": 8,
                    "jump_table_function": 3,
                    "recovery_jump_table": 1,
                    "unrecovered_jump_table": 2,
                    "unrecovered_jumptable": 1
                },
                "dVar2": {
                    "relocated_value": 1,
                    "relocation_data": 1,
                    "result": 10,
                    "result_var": 1,
                    "return_value": 1,
                    "temporary_variable": 1,
                    "var2": 1
                },
                "iVar3": {
                    "counter": 4,
                    "counter_var": 1,
                    "current_index": 1,
                    "index": 6,
                    "loop_variable": 1,
                    "relocation_index": 2,
                    "var3": 1
                },
                "pdVar1": {
                    "data_pointer": 3,
                    "pointer": 3,
                    "pointer1": 1,
                    "pointer_to_data": 1,
                    "pointer_to_var1": 1,
                    "pointer_variable1": 1,
                    "relocation_array": 1,
                    "relocation_pointer": 1,
                    "relocation_ptr": 1,
                    "relocation_table": 2
                }
            },
            "called": [
                "FUN_000817f0",
                "FUN_00080eec",
                "FUN_000841e4"
            ],
            "calling": [
                "FUN_000816f8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid initialize_and_call_function_000836ec(void)\n\n{\n  dword *pointer;\n  dword result;\n  int index;\n  code *jump_table;\n  \n  FUN_000841e4(6);\n  jump_table = (code *)0x836fb;\n  result = FUN_00080eec(1);\n  if (rel_array[48].r_offset == 0) {\n    rel_array[48].r_offset = 0x20070184;\n  }\n  index = *(int *)(rel_array[48].r_offset + 4);\n  pointer = (dword *)rel_array[48].r_offset;\n  if (0x1f < index) {\n    pointer = (dword *)FUN_000817f0(400);\n    if (pointer == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *pointer = rel_array[48].r_offset;\n    pointer[1] = 0;\n    index = 0;\n    rel_array[48].r_offset = (dword)pointer;\n    pointer[0x62] = 0;\n    pointer[99] = 0;\n  }\n  pointer[1] = index + 1;\n  pointer[index + 2] = result;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "initialize_and_call_function_000836ec",
            "entrypoint": "0x000836ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_000836ec": "initialize_and_call_function_000836ec",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "dVar2": "result",
                "iVar3": "index",
                "pdVar1": "pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083850": {
            "additional_data": {
                "FUN_00083850": {
                    "decode_and_process_data": 1,
                    "decompile_and_improve": 1,
                    "process_data": 15
                },
                "FUN_00083888": {
                    "initialize_output_array": 1
                },
                "FUN_00083b10": {
                    "clear_memory": 1
                },
                "iVar2": {
                    "count": 2,
                    "counter1": 1,
                    "index": 1,
                    "int_var1": 2,
                    "int_var2": 2,
                    "integer_var1": 1,
                    "length": 1,
                    "remaining_size": 1,
                    "temp_var": 3,
                    "temp_var1": 2,
                    "temp_var2": 5,
                    "temp_var_1": 1,
                    "temp_variable": 1,
                    "temp_variable1": 2,
                    "var1": 3,
                    "var2": 1,
                    "var_1": 1
                },
                "iVar5": {
                    "counter2": 1,
                    "int_var2": 2,
                    "int_var5": 2,
                    "integer_var2": 1,
                    "offset": 1,
                    "temp2": 1,
                    "temp_size": 1,
                    "temp_var": 2,
                    "temp_var2": 2,
                    "temp_var3": 2,
                    "temp_var4": 3,
                    "temp_var5": 3,
                    "temp_var_4": 1,
                    "temp_variable2": 1,
                    "temp_variable4": 2,
                    "var2": 1,
                    "var4": 2,
                    "var5": 1,
                    "var_4": 1
                },
                "iVar7": {
                    "int_var3": 2,
                    "int_var7": 2,
                    "integer_var3": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_var": 2,
                    "temp_var2": 2,
                    "temp_var3": 2,
                    "temp_var4": 1,
                    "temp_var5": 2,
                    "temp_var6": 1,
                    "temp_var7": 3,
                    "temp_var_5": 1,
                    "temp_variable3": 1,
                    "temp_variable5": 2,
                    "var3": 1,
                    "var5": 2,
                    "var7": 1,
                    "var_5": 1
                },
                "param_1": {
                    "array1": 2,
                    "array_1": 1,
                    "data": 4,
                    "data_array": 1,
                    "data_array_1": 1,
                    "data_buffer": 4,
                    "data_ptr": 2,
                    "data_ptr1": 1,
                    "input_array": 11,
                    "input_data": 4
                },
                "param_2": {
                    "array2": 2,
                    "array_2": 1,
                    "config": 2,
                    "control_buffer": 1,
                    "control_info": 1,
                    "data_array_2": 1,
                    "data_ptr2": 1,
                    "data_struct": 1,
                    "header_info": 1,
                    "info": 2,
                    "info_array": 1,
                    "info_buffer": 1,
                    "info_ptr": 2,
                    "output_array": 10,
                    "output_data": 4
                },
                "pcVar6": {
                    "callback": 6,
                    "callback_function": 1,
                    "func_ptr": 1,
                    "function": 1,
                    "function_pointer": 9,
                    "function_ptr": 11,
                    "function_var": 1
                },
                "piVar1": {
                    "pointer1": 1,
                    "pointer_var": 2,
                    "pointer_var1": 2,
                    "ptr": 2,
                    "ptr1": 2,
                    "ptr_var": 1,
                    "ptr_var1": 3,
                    "temp_pointer": 3,
                    "temp_pointer1": 1,
                    "temp_ptr": 3,
                    "temp_ptr1": 2,
                    "temp_ptr_1": 1,
                    "temp_var1": 4,
                    "var1": 1
                },
                "uVar3": {
                    "config_flags": 1,
                    "flag": 1,
                    "flags": 6,
                    "info_value": 1,
                    "status": 2,
                    "status_flag": 1,
                    "temp_u_short": 1,
                    "temp_unsigned_variable": 1,
                    "temp_var2": 2,
                    "temp_var3": 2,
                    "temp_var_2": 1,
                    "temp_variable2": 2,
                    "ushort_var": 2,
                    "ushort_var1": 2,
                    "ushort_var3": 1,
                    "var2": 2,
                    "var3": 1,
                    "var_2": 1
                },
                "uVar4": {
                    "flag2": 1,
                    "temp": 3,
                    "temp_flags": 4,
                    "temp_u_int": 1,
                    "temp_unsigned_variable2": 1,
                    "temp_var2": 1,
                    "temp_var3": 3,
                    "temp_var4": 3,
                    "temp_var_3": 1,
                    "temp_variable3": 2,
                    "uint_var": 2,
                    "uint_var1": 2,
                    "uint_var4": 1,
                    "var3": 2,
                    "var4": 1,
                    "var_3": 1
                },
                "unaff_r4": {
                    "register_var": 1,
                    "result": 8,
                    "ret_val": 1,
                    "return_code": 1,
                    "return_val": 1,
                    "return_value": 7,
                    "status": 2,
                    "temp_var5": 1,
                    "unaff_r4": 2,
                    "unaff_var": 2,
                    "unaff_var4": 1,
                    "unknwon_var": 1
                }
            },
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "calling": [
                "FUN_000842a4",
                "FUN_000834f0",
                "FUN_00083ca8",
                "FUN_00084484"
            ],
            "code": "\nundefined4 decode_and_process_data_00083850(int *input_array,int *output_array)\n\n{\n  int *temp_var1;\n  int temp_var2;\n  ushort flags;\n  uint temp_flags;\n  int temp_var5;\n  code *function_ptr;\n  undefined4 result;\n  int temp_var7;\n  \n  if ((input_array != (int *)0x0) && (input_array[0xe] == 0)) {\n    FUN_00083888();\n  }\n  if (*(short *)(output_array + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(output_array + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp_var7 = output_array[4];\n    if (temp_var7 == 0) {\n      return 0;\n    }\n    temp_var2 = *output_array;\n    if ((flags & 3) == 0) {\n      temp_var5 = output_array[5];\n    }\n    else {\n      temp_var5 = 0;\n    }\n    *output_array = temp_var7;\n    temp_var2 = temp_var2 - temp_var7;\n    output_array[2] = temp_var5;\n    do {\n      if (temp_var2 < 1) {\n        return 0;\n      }\n      temp_var5 = (*(code *)output_array[9])(input_array,output_array[7],temp_var7,temp_var2,result);\n      temp_var2 = temp_var2 - temp_var5;\n      temp_var7 = temp_var7 + temp_var5;\n    } while (0 < temp_var5);\nLAB_000837c8:\n    *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_array + 3) = flags | 0x800;\n  if ((output_array[1] < 1) && (output_array[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (code *)output_array[10];\n  if (function_ptr == (code *)0x0) {\n    return 0;\n  }\n  temp_flags = (uint)(flags | 0x800);\n  temp_var7 = *input_array;\n  *input_array = 0;\n  if ((flags & 0x1000) == 0) {\n    temp_var2 = (*function_ptr)(input_array,output_array[7],temp_flags & 0x1000,1);\n    if ((temp_var2 == -1) && (temp_var5 = *input_array, temp_var5 != 0)) {\n      if ((temp_var5 == 0x1d) || (temp_var5 == 0x16)) {\n        *input_array = temp_var7;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    temp_flags = (uint)*(ushort *)(output_array + 3);\n    function_ptr = (code *)output_array[10];\n  }\n  else {\n    temp_var2 = output_array[0x14];\n  }\n  if (((int)(temp_flags << 0x1d) < 0) && (temp_var2 = temp_var2 - output_array[1], output_array[0xc] != 0)) {\n    temp_var2 = temp_var2 - output_array[0xf];\n  }\n  temp_var2 = (*function_ptr)(input_array,output_array[7],temp_var2,0);\n  if (temp_var2 == -1) {\n    temp_var5 = *input_array;\n    if (temp_var5 != 0) {\n      if ((temp_var5 != 0x1d) && (temp_var5 != 0x16)) {\n        *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) & 0xf7ff;\n      *output_array = output_array[4];\n      output_array[1] = 0;\n      goto LAB_00083774;\n    }\n    flags = *(ushort *)(output_array + 3) & 0xf7ff;\n    output_array[1] = 0;\n    *(ushort *)(output_array + 3) = flags;\n    *output_array = output_array[4];\n  }\n  else {\n    flags = *(ushort *)(output_array + 3) & 0xf7ff;\n    *output_array = output_array[4];\n    *(ushort *)(output_array + 3) = flags;\n    output_array[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    output_array[0x14] = temp_var2;\n  }\nLAB_00083774:\n  temp_var1 = (int *)output_array[0xc];\n  *input_array = temp_var7;\n  if (temp_var1 == (int *)0x0) {\n    return 0;\n  }\n  if (temp_var1 != output_array + 0x10) {\n    FUN_00083b10(input_array);\n  }\n  output_array[0xc] = 0;\n  return 0;\n}\n\n",
            "current_name": "decode_and_process_data_00083850",
            "entrypoint": "0x00083850",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083850": "decode_and_process_data_00083850",
                "iVar2": "temp_var2",
                "iVar5": "temp_var5",
                "iVar7": "temp_var7",
                "param_1": "input_array",
                "param_2": "output_array",
                "pcVar6": "function_ptr",
                "piVar1": "temp_var1",
                "uVar3": "flags",
                "uVar4": "temp_flags",
                "unaff_r4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083888": {
            "additional_data": {
                "FUN_00081f00": {
                    "fill_array": 1
                },
                "FUN_00083888": {
                    "initialize_data": 9,
                    "initialize_data_structure": 2,
                    "initialize_data_structures": 14,
                    "initialize_function": 2,
                    "initialize_parameters": 3,
                    "initialize_params": 1
                },
                "param_1": {
                    "base_address": 3,
                    "data": 7,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "data_struct": 5,
                    "data_struct_addr": 1,
                    "data_struct_pointer": 1,
                    "data_struct_ptr": 1,
                    "data_structure": 3,
                    "data_structure_address": 1,
                    "function_parameter": 1,
                    "input_param": 1,
                    "param": 4
                },
                "puVar1": {
                    "array_ptr": 1,
                    "data_array1": 1,
                    "data_struct_pointer1": 1,
                    "data_structure_ptr1": 1,
                    "param1": 2,
                    "param1_array": 1,
                    "parameter_array1": 1,
                    "pointer1": 4,
                    "pointer_var1": 1,
                    "ptr1": 10,
                    "ptr_data1": 2,
                    "ptr_data_struct1": 2,
                    "pu_var1": 1,
                    "struct1": 2,
                    "temp_ptr1": 1
                },
                "puVar2": {
                    "array_ptr2": 1,
                    "data_array2": 1,
                    "data_struct_pointer2": 1,
                    "data_structure_ptr2": 1,
                    "param2": 2,
                    "param2_array": 1,
                    "parameter_array2": 1,
                    "pointer2": 4,
                    "pointer_var2": 1,
                    "ptr2": 10,
                    "ptr_data2": 2,
                    "ptr_data_struct2": 2,
                    "pu_var2": 1,
                    "struct2": 2,
                    "temp_ptr2": 1
                }
            },
            "called": [
                "FUN_00081f00"
            ],
            "calling": [
                "FUN_000842a4",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_0008289c",
                "FUN_00084484"
            ],
            "code": "\nvoid initialize_data_structures_00083888(int data)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(data + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(data + 4);\n    *(undefined **)(data + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(data + 0x2e4) = 3;\n    *(int *)(data + 0x2e8) = data + 0x2ec;\n    *(undefined4 *)(data + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00081f00(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(data + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    FUN_00081f00(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(data + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84221;\n    ptr2[9] = 0x84245;\n    ptr2[10] = 0x8427d;\n    ptr2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00081f00(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(data + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00083888",
            "entrypoint": "0x00083888",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "data",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008397c": {
            "called": [],
            "calling": [
                "FUN_00084484"
            ],
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008397c",
            "entrypoint": "0x0008397c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00083980": {
            "called": [],
            "calling": [
                "FUN_00084484"
            ],
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00083980",
            "entrypoint": "0x00083980",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000839b4": {
            "additional_data": {
                "FUN_000839b4": {
                    "parse_input_data": 1,
                    "perform_operation": 1,
                    "process_data": 25,
                    "process_input": 1,
                    "process_input_data": 1,
                    "translate_and_write_data": 1
                },
                "abStack_1b": {
                    "aux_bytes": 1,
                    "buffer": 1,
                    "byte_array": 16,
                    "byte_buffer": 2,
                    "byte_stack": 3,
                    "char_array": 1,
                    "decoded_data_array": 1,
                    "stack_array": 3,
                    "stack_buffer": 1,
                    "stack_data": 1,
                    "temp_values_array": 1
                },
                "iVar1": {
                    "result": 24,
                    "return_value": 2,
                    "status": 5
                },
                "local_1c": {
                    "byte_data": 1,
                    "byte_value": 9,
                    "current_byte": 6,
                    "current_byte2": 1,
                    "current_char": 2,
                    "decoded_data_byte": 1,
                    "new_value": 1,
                    "single_byte": 1,
                    "temp_byte": 5,
                    "temp_data": 1,
                    "temp_value": 2,
                    "temporary_byte": 1
                },
                "param_1": {
                    "arg1": 4,
                    "error_code": 2,
                    "input": 4,
                    "input1": 1,
                    "input_flag": 1,
                    "input_value": 1,
                    "param": 1,
                    "param1": 7,
                    "status": 7,
                    "status_code": 1,
                    "unknown": 1,
                    "value1": 1
                },
                "param_2": {
                    "arg2": 2,
                    "data_length": 2,
                    "data_size": 8,
                    "input2": 1,
                    "input_size": 1,
                    "length": 6,
                    "param2": 6,
                    "size": 5
                },
                "param_3": {
                    "arg3": 2,
                    "buffer": 2,
                    "data": 12,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "data_ptr": 4,
                    "input_array": 1,
                    "input_data_array": 1,
                    "param3": 6
                },
                "pbVar4": {
                    "byte_pointer": 2,
                    "byte_ptr": 5,
                    "current_byte": 6,
                    "current_byte_ptr": 1,
                    "current_data_byte": 1,
                    "current_data_ptr": 1,
                    "current_pointer": 1,
                    "current_pos": 1,
                    "current_ptr": 4,
                    "pointer": 2,
                    "ptr": 6,
                    "ptr1": 1
                },
                "uVar2": {
                    "buffer_status": 1,
                    "byte_processed": 1,
                    "count": 1,
                    "flag": 9,
                    "is_data_encoded": 1,
                    "is_data_size_valid": 1,
                    "is_one": 1,
                    "is_single_byte": 1,
                    "is_small": 1,
                    "is_small_enough": 1,
                    "is_valid": 1,
                    "loop_count": 1,
                    "result": 4,
                    "status": 5,
                    "value": 2
                },
                "uVar3": {
                    "buffer_value": 1,
                    "byte_data": 2,
                    "byte_value": 8,
                    "converted_data": 1,
                    "current_byte": 10,
                    "current_value": 1,
                    "data_value": 1,
                    "encoded_data": 1,
                    "value": 6
                },
                "uVar5": {
                    "counter": 15,
                    "current_index": 1,
                    "index": 13,
                    "iteration_counter": 1,
                    "iterator": 1
                }
            },
            "called": [
                "FUN_000842a4",
                "FUN_0008434c",
                "FUN_0008400c"
            ],
            "calling": [
                "FUN_00082824"
            ],
            "code": "\nuint process_input_data_000839b4(undefined4 status,uint data_size,byte **data)\n\n{\n  int result;\n  uint flag;\n  uint current_byte;\n  byte *ptr;\n  uint counter;\n  byte byte_value;\n  byte byte_array [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x12)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x2000;\n    data[0x19] = (byte *)((uint)data[0x19] | 0x2000);\n  }\n  result = FUN_0008400c();\n  if ((result == 1) && (data_size - 1 < 0xff)) {\n    current_byte = data_size & 0xff;\n    byte_value = (byte)current_byte;\n    flag = 1;\n  }\n  else {\n    flag = FUN_0008434c(status,&byte_value,data_size,data + 0x17);\n    if (flag == 0xffffffff) {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (flag == 0) {\n      return data_size;\n    }\n    current_byte = (uint)byte_value;\n  }\n  counter = 0;\n  do {\n    ptr = data[2] + -1;\n    data[2] = ptr;\n    if ((int)ptr < 0) {\n      if ((int)data[6] <= (int)ptr) {\n        **data = (byte)current_byte;\n        ptr = *data;\n        current_byte = (uint)*ptr;\n        if (current_byte != 10) goto LAB_00083a04;\n      }\n      result = FUN_000842a4(status,current_byte,data);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data = (byte)current_byte;\n      ptr = *data;\nLAB_00083a04:\n      *data = ptr + 1;\n    }\n    if (flag <= counter + 1) {\n      return data_size;\n    }\n    current_byte = (uint)byte_array[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "current_name": "process_input_data_000839b4",
            "entrypoint": "0x000839b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000839b4": "process_input_data_000839b4",
                "abStack_1b": "byte_array",
                "iVar1": "result",
                "local_1c": "byte_value",
                "param_1": "status",
                "param_2": "data_size",
                "param_3": "data",
                "pbVar4": "ptr",
                "uVar2": "flag",
                "uVar3": "current_byte",
                "uVar5": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083a74": {
            "additional_data": {
                "DAT_2007121c": {
                    "constant_offset": 1,
                    "data_adjustment": 1,
                    "data_offset": 1,
                    "data_value": 1,
                    "data_variable": 2,
                    "global_offset": 1,
                    "global_var": 1,
                    "modified_offset": 1,
                    "updated_offset": 1
                },
                "FUNC_00081f94": {
                    "initialize": 2,
                    "initialize_elf": 1,
                    "initialize_elf_info": 1,
                    "initialize_entries": 1,
                    "initialize_environment": 1,
                    "initialize_function": 3
                },
                "FUNC_00081f98": {
                    "clean_up_environment": 1,
                    "cleanup_entries": 1,
                    "cleanup_function": 1,
                    "finalize": 1,
                    "finalize_elf": 1,
                    "finalize_elf_info": 1,
                    "finalize_function": 1,
                    "post_processing_function": 1
                },
                "FUNC_0008236c": {
                    "adjust_offset": 1,
                    "modify_param_function": 1
                },
                "FUN_00081f94": {
                    "preprocessing_function": 1
                },
                "FUN_0008236c": {
                    "adjust_offset": 1,
                    "apply_offset": 1,
                    "calculate_new_offset": 2,
                    "modify_param": 1,
                    "modify_value_in_array": 1,
                    "update_info": 1
                },
                "FUN_00083a74": {
                    "extract_and_adjust": 1,
                    "improve_and_adjust_segment_offset": 1,
                    "improve_binary_loading": 1,
                    "improve_func": 1,
                    "perform_memory_adjustment": 1,
                    "process_relocation": 1,
                    "relocate_function": 2,
                    "relocate_symbol": 1,
                    "reverse_and_update_data": 1,
                    "update_memory_mapping": 1
                },
                "iVar1": {
                    "result": 22,
                    "result1": 6,
                    "result_1": 1,
                    "result_var1": 1
                },
                "iVar3": {
                    "adjusted_offset": 15,
                    "adjusted_value": 1,
                    "aligned_offset": 2,
                    "calculated_offset": 2,
                    "calculated_value": 1,
                    "modified_arg2": 1,
                    "new_offset": 8,
                    "relocated_offset": 1
                },
                "param_1": {
                    "arg1": 2,
                    "context": 1,
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "function_parameter": 1,
                    "function_pointer": 1,
                    "input": 1,
                    "input_buffer": 2,
                    "input_data": 1,
                    "input_param": 11,
                    "input_parameter": 1,
                    "input_pointer": 2,
                    "param": 1,
                    "param1": 2,
                    "pointer": 1
                },
                "param_2": {
                    "arg2": 2,
                    "buffer_length": 1,
                    "input_offset": 1,
                    "offset": 22,
                    "param2": 2,
                    "previous_offset": 1,
                    "segment_offset": 1,
                    "symbol_offset": 1
                },
                "uVar2": {
                    "adjusted_offset": 1,
                    "elf_rel_info": 1,
                    "info": 3,
                    "info_offset": 3,
                    "mask": 4,
                    "masked_offset": 3,
                    "masked_u_var": 1,
                    "masked_uint": 1,
                    "masked_value": 3,
                    "offset": 1,
                    "ptr_value": 1,
                    "rel_info": 3,
                    "rel_offset": 3,
                    "segment_info": 1,
                    "symbol_info": 1,
                    "u_var": 1
                }
            },
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "calling": [
                "FUN_00083b10"
            ],
            "code": "\nundefined4 relocate_function_00083a74(undefined4 input_param,int offset)\n\n{\n  int result;\n  uint mask;\n  int adjusted_offset;\n  \n  FUNC_00081f94();\n  mask = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjusted_offset = ((mask - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_offset) {\n    result = FUN_0008236c(input_param,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + mask) {\n      result = FUN_0008236c(input_param,-adjusted_offset);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - adjusted_offset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = mask - adjusted_offset | 1;\n        FUNC_00081f98(input_param);\n        return 1;\n      }\n      adjusted_offset = FUN_0008236c(input_param,0);\n      if (0xf < (int)(adjusted_offset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = adjusted_offset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjusted_offset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(input_param);\n  return 0;\n}\n\n",
            "current_name": "relocate_function_00083a74",
            "entrypoint": "0x00083a74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083a74": "relocate_function_00083a74",
                "iVar1": "result",
                "iVar3": "adjusted_offset",
                "param_1": "input_param",
                "param_2": "offset",
                "uVar2": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083b10": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "symbol_array": 1
                },
                "FUNC_00081f94": {
                    "initialize": 3,
                    "initialize_global_data": 1,
                    "pre_update_process": 1
                },
                "FUNC_00081f98": {
                    "cleanup": 1,
                    "cleanup_function": 1,
                    "finalize": 1,
                    "post_update_process": 1
                },
                "FUNC_00083a74": {
                    "handle_special_case": 1
                },
                "FUN_00083a74": {
                    "handle_entry_match": 1
                },
                "FUN_00083b10": {
                    "improve_extracted_code": 1,
                    "process_binary_function": 1,
                    "process_function": 2,
                    "process_relocation": 6,
                    "process_relocation_entry": 2,
                    "process_relocations": 2,
                    "relocate_function": 1,
                    "update_relocation_entries": 1,
                    "update_relocation_entry": 3,
                    "update_relocation_table": 2,
                    "update_symbol": 1,
                    "update_symbol_table": 1
                },
                "bVar2": {
                    "flag": 3,
                    "is_condition_met": 6,
                    "is_condition_true": 1,
                    "is_entry_function": 1,
                    "is_first_entry": 1,
                    "is_first_relocation": 1,
                    "is_flag_set": 1,
                    "is_index_valid": 1,
                    "is_match": 1,
                    "is_next_offset_equal_to_current_offset": 1,
                    "is_prev_offset_same": 1,
                    "is_previous_null": 1,
                    "is_same": 1,
                    "is_special_case": 4,
                    "is_special_entry": 1,
                    "is_symbol_table_entry": 1,
                    "is_true": 1,
                    "is_var2": 1,
                    "is_var2_true": 1,
                    "skip_first_relocation": 1,
                    "variable2": 1
                },
                "dVar4": {
                    "address1": 2,
                    "curr_reloc_entry": 1,
                    "current": 1,
                    "current_entry": 1,
                    "current_reloc": 1,
                    "current_reloc_entry": 1,
                    "current_relocation": 4,
                    "current_relocation_entry": 1,
                    "d_offset": 1,
                    "d_value": 1,
                    "entry": 1,
                    "offset1": 1,
                    "prev_entry": 1,
                    "prev_entry_offset": 1,
                    "prev_reloc_entry": 1,
                    "rel_offset": 1,
                    "relocation_entry": 1,
                    "temp_offset": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "var2": 4,
                    "var4": 1,
                    "variable3": 1,
                    "variable4": 1
                },
                "dVar7": {
                    "address2": 2,
                    "adjusted_address": 1,
                    "base_address": 1,
                    "base_relocation": 1,
                    "cur_reloc_entry": 1,
                    "current_entry": 2,
                    "d_value2": 1,
                    "entry": 1,
                    "entry_ptr": 1,
                    "offset2": 1,
                    "prev_entry_address": 1,
                    "prev_reloc_entry": 1,
                    "previous_reloc_entry": 1,
                    "previous_relocation": 1,
                    "previous_relocation_entry": 1,
                    "rel_addr": 1,
                    "reloc_table": 1,
                    "relocation_data": 1,
                    "temp_address": 1,
                    "temp_var4": 1,
                    "temp_var6": 1,
                    "var4": 4,
                    "var7": 1,
                    "variable6": 1,
                    "variable7": 1
                },
                "dVar9": {
                    "address3": 2,
                    "adjusted_offset": 1,
                    "d_next_offset": 1,
                    "d_value3": 1,
                    "destination_address": 1,
                    "new_addr": 1,
                    "new_entry": 1,
                    "new_entry_address": 1,
                    "new_relocation": 1,
                    "new_relocation_entry": 1,
                    "next_entry": 3,
                    "next_reloc": 1,
                    "next_reloc_entry": 3,
                    "next_relocation": 1,
                    "relocated_address": 1,
                    "symbol_table_entry": 1,
                    "temp_var5": 1,
                    "temp_var8": 1,
                    "updated_offset": 1,
                    "var6": 4,
                    "var9": 1,
                    "variable8": 1,
                    "variable9": 1
                },
                "iVar1": {
                    "current_index": 1,
                    "first_index": 1,
                    "first_relocation": 1,
                    "index": 1,
                    "index1": 7,
                    "num1": 1,
                    "prev": 1,
                    "prev_entry": 1,
                    "prev_entry_offset": 1,
                    "prev_offset": 3,
                    "previous": 1,
                    "previous_offset": 1,
                    "relocation_entry1": 1,
                    "source_address": 1,
                    "temp1": 2,
                    "temp_var1": 4,
                    "var1": 1,
                    "variable1": 2
                },
                "iVar5": {
                    "another_offset": 1,
                    "cur_offset": 1,
                    "index2": 7,
                    "next": 2,
                    "next_address": 1,
                    "next_entry": 1,
                    "next_index": 1,
                    "next_offset": 2,
                    "next_relocation": 1,
                    "num2": 1,
                    "prev_entry_next": 1,
                    "prev_index": 1,
                    "relocation_entry2": 1,
                    "second_index": 1,
                    "temp2": 2,
                    "temp_var2": 2,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "var5": 1,
                    "variable4": 1,
                    "variable5": 1
                },
                "param_1": {
                    "arg1": 6,
                    "arg_1": 1,
                    "argument1": 1,
                    "context": 1,
                    "param": 3,
                    "param1": 16,
                    "param_1": 1,
                    "param_flag": 1,
                    "ptr": 1
                },
                "param_2": {
                    "arg2": 5,
                    "arg_2": 1,
                    "argument2": 1,
                    "entry_index": 1,
                    "input_value": 1,
                    "number_of_entries": 1,
                    "offset": 1,
                    "param2": 15,
                    "relocation_index": 1,
                    "relocation_table": 2,
                    "relocation_table_address": 1,
                    "symbol_table": 1
                },
                "uVar3": {
                    "alignment": 1,
                    "current_entry_offset": 1,
                    "entry_flags": 2,
                    "entry_size": 1,
                    "flags": 2,
                    "info": 1,
                    "mask": 2,
                    "masked_arg2": 1,
                    "offset": 1,
                    "relocation_entry1_value": 1,
                    "relocation_flags": 1,
                    "relocation_offset": 1,
                    "relocation_type_offset": 1,
                    "temp_value": 1,
                    "temp_var2": 1,
                    "u_offset": 1,
                    "u_value": 2,
                    "value1": 3,
                    "var1": 4,
                    "var3": 1,
                    "variable2": 1,
                    "variable3": 1
                },
                "uVar6": {
                    "adjusted_arg2": 1,
                    "adjusted_offset": 1,
                    "cur_size": 1,
                    "current_entry_size": 1,
                    "current_offset": 1,
                    "entry_offset": 2,
                    "entry_size": 1,
                    "increment": 1,
                    "initial_offset": 1,
                    "offset": 3,
                    "offset_mask": 1,
                    "rel_size": 1,
                    "relocation_entry1_offset": 1,
                    "relocation_size": 1,
                    "temp_flag": 1,
                    "temp_var5": 1,
                    "u_offset": 1,
                    "u_value2": 1,
                    "value2": 3,
                    "var3": 4,
                    "var6": 1,
                    "variable5": 1,
                    "variable6": 1
                },
                "uVar8": {
                    "adjusted_arg2_2": 1,
                    "adjusted_offset": 1,
                    "adjusted_size": 1,
                    "adjusted_value": 1,
                    "new_offset": 4,
                    "next_entry_flags": 1,
                    "next_entry_offset": 1,
                    "next_entry_size": 1,
                    "next_relocation_offset": 1,
                    "offset": 1,
                    "relocation_entry2_offset": 1,
                    "temp_var7": 1,
                    "u_next_offset": 1,
                    "u_value3": 1,
                    "updated_entry_size": 1,
                    "updated_flag": 1,
                    "updated_offset": 2,
                    "updated_size": 1,
                    "value3": 2,
                    "var5": 4,
                    "var8": 1,
                    "variable7": 1,
                    "variable8": 1
                }
            },
            "called": [
                "FUN_00083a74",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "calling": [
                "FUN_00081800",
                "FUN_00081fac",
                "FUN_00081810",
                "FUN_0008356c",
                "FUN_00083ca8",
                "FUN_00083850",
                "FUN_00084484"
            ],
            "code": "\nvoid process_relocation_entry_00083b10(undefined4 param1,int param2)\n\n{\n  int index1;\n  bool is_condition_met;\n  uint var1;\n  dword current_relocation;\n  int index2;\n  uint var3;\n  dword var4;\n  uint new_offset;\n  dword var6;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  var1 = *(uint *)(param2 + -4);\n  var4 = param2 - 8;\n  var3 = var1 & 0xfffffffe;\n  current_relocation = var4 + var3;\n  new_offset = *(uint *)(current_relocation + 4) & 0xfffffffc;\n  if (symbol_array[141].r_info == current_relocation) {\n    new_offset = new_offset + var3;\n    if (-1 < (int)(var1 << 0x1f)) {\n      var4 = var4 - *(int *)(param2 + -8);\n      index2 = *(int *)(var4 + 0xc);\n      index1 = *(int *)(var4 + 8);\n      new_offset = new_offset + *(int *)(param2 + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    current_relocation = symbol_array[269].r_info;\n    *(uint *)(var4 + 4) = new_offset | 1;\n    symbol_array[141].r_info = var4;\n    if (current_relocation <= new_offset) {\n      FUN_00083a74(param1,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(current_relocation + 4) = new_offset;\n    if ((var1 & 1) == 0) {\n      var4 = var4 - *(int *)(param2 + -8);\n      index1 = *(int *)(var4 + 8);\n      var3 = var3 + *(int *)(param2 + -8);\n      if (index1 == 0x2007046c) {\n        is_condition_met = true;\n      }\n      else {\n        index2 = *(int *)(var4 + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        is_condition_met = false;\n      }\n    }\n    else {\n      is_condition_met = false;\n    }\n    if (-1 < *(int *)(current_relocation + new_offset + 4) << 0x1f) {\n      var3 = var3 + new_offset;\n      index1 = *(int *)(current_relocation + 8);\n      if ((!is_condition_met) && (index1 == 0x2007046c)) {\n        symbol_array[142].r_info = var4;\n        symbol_array[143].r_offset = var4;\n        *(undefined4 *)(var4 + 0xc) = 0x2007046c;\n        *(undefined4 *)(var4 + 8) = 0x2007046c;\n        *(uint *)(var4 + 4) = var3 | 1;\n        *(uint *)(var4 + var3) = var3;\n        goto LAB_00083ba4;\n      }\n      index2 = *(int *)(current_relocation + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(var4 + 4) = var3 | 1;\n    *(uint *)(var4 + var3) = var3;\n    if (!is_condition_met) {\n      if (var3 < 0x200) {\n        var1 = var3 & 0xfffffff8;\n        index1 = *(int *)((int)&symbol_array[0x8d].r_info + var1);\n        symbol_array[141].r_offset =\n             symbol_array[141].r_offset | 1 << ((int)(var3 >> 3) >> 2 & 0xffU);\n        *(int *)(var4 + 8) = index1;\n        *(uint *)(var4 + 0xc) = var1 + 0x20070464;\n        *(dword *)((int)&symbol_array[0x8d].r_info + var1) = var4;\n        *(dword *)(index1 + 0xc) = var4;\n        FUNC_00081f98(param1);\n        return;\n      }\n      var1 = var3 >> 9;\n      if (var1 < 5) {\n        index1 = (var3 >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (var1 < 0x15) {\n        index1 = var1 + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (var1 < 0x55) {\n        index1 = (var3 >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (var1 < 0x155) {\n        index1 = (var3 >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (var1 < 0x555) {\n        index1 = (var3 >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      var6 = index2 * 4 + 0x20070464;\n      current_relocation = (&symbol_array[0x8d].r_info)[index2];\n      if (current_relocation == var6) {\n        symbol_array[141].r_offset =\n             symbol_array[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        var6 = current_relocation;\n      }\n      else {\n        do {\n          if ((*(uint *)(current_relocation + 4) & 0xfffffffc) <= var3) break;\n          current_relocation = *(dword *)(current_relocation + 8);\n        } while (var6 != current_relocation);\n        var6 = *(dword *)(current_relocation + 0xc);\n      }\n      *(dword *)(var4 + 0xc) = var6;\n      *(dword *)(var4 + 8) = current_relocation;\n      *(dword *)(var6 + 8) = var4;\n      *(dword *)(current_relocation + 0xc) = var4;\n    }\n  }\nLAB_00083ba4:\n  FUNC_00081f98(param1);\n  return;\n}\n\n",
            "current_name": "process_relocation_entry_00083b10",
            "entrypoint": "0x00083b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "symbol_array",
                "FUN_00083b10": "process_relocation_entry_00083b10",
                "bVar2": "is_condition_met",
                "dVar4": "current_relocation",
                "dVar7": "var4",
                "dVar9": "var6",
                "iVar1": "index1",
                "iVar5": "index2",
                "param_1": "param1",
                "param_2": "param2",
                "uVar3": "var1",
                "uVar6": "var3",
                "uVar8": "new_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "additional_data": {
                "FUN_00081810": {
                    "allocate_memory": 8,
                    "allocate_memory1": 1,
                    "sub_function4": 2,
                    "sub_function_4": 1
                },
                "FUN_00081d48": {
                    "copy_data": 2,
                    "copy_memory": 2,
                    "function_4": 1,
                    "modify_values": 1,
                    "process_data3": 1,
                    "process_data_again": 1,
                    "sub_function7": 2,
                    "sub_function_7": 1,
                    "update_memory": 1
                },
                "FUN_00081e34": {
                    "adjust_data": 1,
                    "function_2": 1,
                    "modify_array": 1,
                    "process_data2": 1,
                    "sub_function2": 2,
                    "sub_function_2": 1,
                    "update_data": 1,
                    "update_memory": 1,
                    "update_values": 1
                },
                "FUN_00081fac": {
                    "allocate_memory2": 3,
                    "allocate_memory_2": 1,
                    "allocate_more_memory": 1,
                    "another_function": 1,
                    "create_data": 1,
                    "resize_memory": 1,
                    "some_other_sub_function": 1,
                    "sub_function5": 2,
                    "sub_function_5": 1
                },
                "FUN_0008356c": {
                    "check_argument": 1,
                    "check_conditions": 1,
                    "check_data": 2,
                    "check_input": 1,
                    "reverse_data": 1,
                    "sub_function3": 2,
                    "sub_function_3": 1,
                    "validate_condition": 1,
                    "validate_data": 2
                },
                "FUN_00083850": {
                    "check_condition": 2,
                    "check_conditions2": 1,
                    "check_data": 1,
                    "check_result": 1,
                    "check_status": 1,
                    "function_3": 1,
                    "handle_error": 1,
                    "sub_function6": 2,
                    "sub_function_6": 1,
                    "validate_data": 1
                },
                "FUN_00083b10": {
                    "change_value": 1,
                    "cleanup": 1,
                    "free_memory": 1,
                    "function_5": 1,
                    "process_data4": 1,
                    "process_value": 1,
                    "release_memory": 1,
                    "some_other_function": 1,
                    "sub_function8": 2,
                    "sub_function_8": 1
                },
                "FUN_00083ca8": {
                    "decode_and_process_data": 2,
                    "extract_data": 1,
                    "process_data": 10,
                    "reverse_and_update_data": 1
                },
                "FUN_000840f8": {
                    "calculate_value": 2,
                    "check_condition": 1,
                    "function_1": 1,
                    "process_data": 1,
                    "process_value": 1,
                    "some_function": 1,
                    "some_sub_function": 1,
                    "sub_function1": 2,
                    "sub_function_1": 1
                },
                "iVar1": {
                    "error": 1,
                    "error_code": 3,
                    "inner_temp_var21": 1,
                    "result": 16,
                    "return_value": 4,
                    "status": 5,
                    "temp": 1
                },
                "local_2c": {
                    "inner_temp_var43": 1,
                    "length3": 1,
                    "local_flag": 2,
                    "local_value": 1,
                    "local_var": 10,
                    "local_var1": 6,
                    "local_variable": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp9": 2,
                    "temp_local": 1,
                    "temp_var5": 1,
                    "temp_var_9": 1,
                    "var7": 1,
                    "var9": 1
                },
                "param_1": {
                    "buffer": 1,
                    "data_buffer": 1,
                    "error_message": 1,
                    "input_array": 6,
                    "output": 4,
                    "output_array": 4,
                    "output_buffer": 3,
                    "output_data": 2,
                    "result": 9
                },
                "param_2": {
                    "config_array": 1,
                    "data": 6,
                    "data_buffer": 2,
                    "data_values": 1,
                    "info_buffer": 1,
                    "input": 3,
                    "input_array": 6,
                    "input_buffer": 3,
                    "input_data": 4,
                    "output_array": 2,
                    "param_array": 2
                },
                "param_3": {
                    "additional_data": 1,
                    "additional_parameters": 1,
                    "buffer": 2,
                    "context_data": 1,
                    "data": 1,
                    "data_array": 1,
                    "data_ptr": 1,
                    "extra_data": 1,
                    "header": 1,
                    "info": 1,
                    "input_data_ptr": 1,
                    "input_pointer_array": 1,
                    "metadata": 1,
                    "output": 2,
                    "output_array": 2,
                    "output_buffer": 1,
                    "output_data": 1,
                    "output_ptr_array": 1,
                    "param_array": 1,
                    "param_pointer_array": 1,
                    "parameter_array": 1,
                    "parameters": 1,
                    "pointer_array": 1,
                    "pointers": 1,
                    "ptr_arr": 1,
                    "ptr_array": 2,
                    "ptrs": 1
                },
                "puVar6": {
                    "inner_temp_pointer3": 1,
                    "pointer1": 2,
                    "pointer_1": 1,
                    "pointer_var1": 3,
                    "ptr1": 17,
                    "ptr_1": 1,
                    "ptr_var1": 3,
                    "temp_ptr1": 2,
                    "temp_ptr_1": 1
                },
                "puVar7": {
                    "pointer2": 2,
                    "pointer_2": 1,
                    "pointer_var2": 3,
                    "ptr2": 17,
                    "ptr_2": 1,
                    "ptr_var2": 3,
                    "temp_pointer2": 1,
                    "temp_ptr2": 2,
                    "temp_ptr_2": 1
                },
                "uVar10": {
                    "accum": 1,
                    "amount": 1,
                    "increment": 1,
                    "inner_temp_var41": 1,
                    "loop_var1": 1,
                    "partial_result": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 1,
                    "temp7": 4,
                    "temp_uint_4": 1,
                    "temp_value2": 1,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "temp_var7": 3,
                    "temp_var_7": 1,
                    "tmp3": 1,
                    "tmp_var3": 1,
                    "value3": 1,
                    "var1": 1,
                    "var10": 1,
                    "var5": 1,
                    "var7": 3
                },
                "uVar11": {
                    "calculation_2": 1,
                    "inner_temp_var42": 1,
                    "loop_var2": 1,
                    "partial_result2": 1,
                    "result2": 1,
                    "temp3": 2,
                    "temp4": 2,
                    "temp5": 1,
                    "temp8": 4,
                    "temp_uint_5": 1,
                    "temp_value3": 1,
                    "temp_var4": 1,
                    "temp_var6": 1,
                    "temp_var8": 3,
                    "temp_var_8": 1,
                    "tmp4": 1,
                    "tmp_var4": 1,
                    "value4": 1,
                    "var15": 1,
                    "var2": 1,
                    "var6": 1,
                    "var8": 3
                },
                "uVar2": {
                    "data_offset": 1,
                    "flag1": 1,
                    "flag_1": 1,
                    "inner_temp_var40": 1,
                    "temp1": 7,
                    "temp_var1": 5,
                    "temp_var_1": 1,
                    "tmp1": 1,
                    "tmp_var1": 1,
                    "value": 1,
                    "value1": 5,
                    "value_1": 1,
                    "var1": 4,
                    "var14": 1
                },
                "uVar3": {
                    "data_mask": 1,
                    "flag2": 1,
                    "flag_2": 1,
                    "inner_temp_var13": 1,
                    "temp2": 7,
                    "temp_value": 1,
                    "temp_var2": 5,
                    "temp_var_2": 1,
                    "tmp2": 1,
                    "tmp_var2": 1,
                    "value2": 5,
                    "value_2": 1,
                    "var2": 5
                },
                "uVar4": {
                    "flag": 8,
                    "flag1": 1,
                    "flags": 3,
                    "metadata_value": 1,
                    "temp3": 4,
                    "temp_ushort": 1,
                    "temp_var3": 4,
                    "temp_var_3": 1,
                    "ushort_value": 1,
                    "ushort_var": 2,
                    "value": 1,
                    "var3": 4
                },
                "uVar5": {
                    "count": 1,
                    "flag2": 1,
                    "inner_temp_var38": 1,
                    "input_val1": 1,
                    "length": 1,
                    "metadata_flag": 1,
                    "size": 1,
                    "temp": 2,
                    "temp1": 1,
                    "temp4": 4,
                    "temp_uint": 1,
                    "temp_value": 3,
                    "temp_var4": 3,
                    "temp_var_4": 1,
                    "uint_value": 1,
                    "uint_var": 1,
                    "value": 2,
                    "var12": 1,
                    "var3": 1,
                    "var4": 3
                },
                "uVar8": {
                    "count": 4,
                    "inner_temp_var39": 1,
                    "input_val2": 1,
                    "length": 2,
                    "length1": 1,
                    "num_bytes": 1,
                    "size": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp5": 4,
                    "temp_uint_2": 1,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "temp_var5": 3,
                    "temp_var_5": 1,
                    "uint_var1": 1,
                    "value1": 1,
                    "var13": 1,
                    "var5": 3
                },
                "uVar9": {
                    "calculation": 1,
                    "inner_temp_var14": 1,
                    "length2": 1,
                    "partial_size": 1,
                    "temp1": 2,
                    "temp2": 2,
                    "temp3": 3,
                    "temp6": 4,
                    "temp_count": 1,
                    "temp_uint_3": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var6": 3,
                    "temp_var_6": 1,
                    "uint_var2": 1,
                    "value2": 1,
                    "var11": 1,
                    "var4": 1,
                    "var6": 3
                }
            },
            "called": [
                "FUN_000840f8",
                "FUN_00081e34",
                "FUN_0008356c",
                "FUN_00081810",
                "FUN_00081fac",
                "FUN_00083850",
                "FUN_00081d48",
                "FUN_00083b10"
            ],
            "calling": [
                "FUN_00082824"
            ],
            "code": "\nundefined4 decode_and_process_data_00083ca8(undefined4 *result,uint *input_array,uint **buffer)\n\n{\n  int result;\n  uint temp1;\n  uint temp2;\n  ushort flag;\n  uint temp4;\n  uint *ptr1;\n  uint *ptr2;\n  uint count;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint local_var;\n  \n  if (buffer[2] != (uint *)0x0) {\n    flag = *(ushort *)(input_array + 3);\n    temp4 = (uint)flag;\n    if (((int)(temp4 << 0x1c) < 0) && (input_array[4] != 0)) {\n      ptr2 = *buffer;\n    }\n    else {\n      result = FUN_0008356c(result,input_array);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(input_array + 3);\n      temp4 = (uint)flag;\n      ptr2 = *buffer;\n    }\n    if ((flag & 2) == 0) {\n      temp1 = temp4 & 2;\n      temp7 = temp1;\n      count = temp1;\n      local_var = temp1;\n      if ((temp4 & 1) == 0) {\n        temp1 = 0;\n        temp7 = 0;\n        while( true ) {\n          while (temp1 == 0) {\n            temp7 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp1 = *ptr1;\n          }\n          count = input_array[2];\n          if ((int)(temp4 << 0x16) < 0) {\n            if (temp1 < count) {\n              temp4 = *input_array;\n              count = temp1;\n            }\n            else if ((temp4 & 0x480) == 0) {\n              temp4 = *input_array;\n            }\n            else {\n              result = *input_array - input_array[4];\n              count = result + 1 + temp1;\n              temp6 = (int)(input_array[5] * 3) / 2;\n              if (count <= temp6) {\n                count = temp6;\n              }\n              if ((int)(temp4 << 0x15) < 0) {\n                temp6 = FUN_00081810(result,count);\n                if (temp6 == 0) {\n                  *result = 0xc;\n                  flag = *(ushort *)(input_array + 3);\n                  goto LAB_00083da4;\n                }\n                FUN_00081d48(temp6,input_array[4],result);\n                *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp6 = FUN_00081fac(result);\n                if (temp6 == 0) {\n                  FUN_00083b10(result,input_array[4]);\n                  flag = *(ushort *)(input_array + 3) & 0xff7f;\n                  *result = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              temp4 = temp6 + result;\n              input_array[4] = temp6;\n              input_array[5] = count;\n              *input_array = temp4;\n              input_array[2] = count - result;\n              count = temp1;\n            }\n            FUN_00081e34(temp4,temp7,count);\n            input_array[2] = input_array[2] - count;\n            *input_array = *input_array + count;\n            count = temp1;\n          }\n          else if ((input_array[4] < *input_array) || (temp4 = input_array[5], temp1 < temp4)) {\n            if (temp1 < count) {\n              count = temp1;\n            }\n            FUN_00081e34(*input_array,temp7,count);\n            temp4 = input_array[2];\n            input_array[2] = temp4 - count;\n            *input_array = *input_array + count;\n            if ((temp4 - count == 0) && (result = FUN_00083850(result,input_array), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            count = 0x7fffffff;\n            if (temp1 < 0x7fffffff) {\n              count = temp1;\n            }\n            count = (*(code *)input_array[9])(result,input_array[7],temp7,(count / temp4) * temp4);\n            if ((int)count < 1) goto LAB_00083da2;\n          }\n          ptr1 = buffer[2];\n          temp7 = temp7 + count;\n          temp1 = temp1 - count;\n          buffer[2] = (uint *)((int)ptr1 - count);\n          if ((uint *)((int)ptr1 - count) == (uint *)0x0) break;\n          temp4 = (uint)*(ushort *)(input_array + 3);\n        }\n      }\n      else {\n        do {\n          while (temp1 == 0) {\n            count = *ptr2;\n            temp1 = ptr2[1];\n            local_var = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_var == 0) {\n            result = FUN_000840f8(count,10,temp1);\n            if (result == 0) {\n              temp7 = temp1 + 1;\n              local_var = 1;\n            }\n            else {\n              temp7 = (result + 1) - count;\n              local_var = 1;\n            }\n          }\n          temp6 = *input_array;\n          temp4 = temp7;\n          if (temp1 <= temp7) {\n            temp4 = temp1;\n          }\n          temp2 = input_array[5];\n          if ((input_array[4] < temp6) && (temp8 = input_array[2] + temp2, (int)temp8 < (int)temp4)) {\n            FUN_00081e34(temp6,count,temp8);\n            *input_array = *input_array + temp8;\n            result = FUN_00083850(result,input_array);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)temp4 < (int)temp2) {\n            FUN_00081e34(temp6,count,temp4);\n            input_array[2] = input_array[2] - temp4;\n            *input_array = temp4 + *input_array;\n            temp8 = temp4;\n          }\n          else {\n            temp8 = (*(code *)input_array[9])(result,input_array[7],count,temp2);\n            if ((int)temp8 < 1) goto LAB_00083da2;\n          }\n          temp7 = temp7 - temp8;\n          if (temp7 == 0) {\n            result = FUN_00083850(result,input_array);\n            if (result != 0) goto LAB_00083da2;\n            local_var = 0;\n          }\n          ptr1 = buffer[2];\n          count = count + temp8;\n          temp1 = temp1 - temp8;\n          buffer[2] = (uint *)((int)ptr1 - temp8);\n        } while ((uint *)((int)ptr1 - temp8) != (uint *)0x0);\n      }\n    }\n    else {\n      temp1 = 0;\n      temp4 = 0;\n      do {\n        while( true ) {\n          temp7 = temp4;\n          if (0x7ffffbff < temp4) {\n            temp7 = 0x7ffffc00;\n          }\n          if (temp4 != 0) break;\n          temp1 = *ptr2;\n          temp4 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)input_array[9])(result,input_array[7],temp1,temp7);\n        if (result < 1) {\nLAB_00083da2:\n          flag = *(ushort *)(input_array + 3);\nLAB_00083da4:\n          *(ushort *)(input_array + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = buffer[2];\n        temp1 = temp1 + result;\n        temp4 = temp4 - result;\n        buffer[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "decode_and_process_data_00083ca8",
            "entrypoint": "0x00083ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083ca8": "decode_and_process_data_00083ca8",
                "iVar1": "result",
                "local_2c": "local_var",
                "param_1": "result",
                "param_2": "input_array",
                "param_3": "buffer",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "flag",
                "uVar5": "temp4",
                "uVar8": "count",
                "uVar9": "temp6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084004": {
            "additional_data": {
                "0x20070878": {
                    "memory_address": 4
                },
                "FUN_00084004": {
                    "get_base_address": 1,
                    "get_initial_value": 1,
                    "get_initialized_value": 1,
                    "get_magic_number": 5,
                    "get_memory_address": 20,
                    "get_memory_base_address": 1,
                    "get_return_value": 1
                },
                "PTR_00000010": {
                    "memory_address": 1
                },
                "PTR_FUN_00084004": {
                    "base_address": 1
                },
                "original_variable_name_1": {
                    "return_value": 1
                },
                "undefined4": {
                    "memory_address": 2,
                    "uint32": 1,
                    "uint32_t": 13
                }
            },
            "called": [],
            "calling": [
                "FUN_0008434c"
            ],
            "code": "\nuint32_t get_memory_base_address_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "current_name": "get_memory_base_address_00084004",
            "entrypoint": "0x00084004",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084004": "get_memory_base_address_00084004",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008400c": {
            "additional_data": {
                "275": {
                    "index": 3
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "elf32_rel_array": 2,
                    "elf_rel_array": 1,
                    "elf_relocation_array": 4,
                    "elf_relocation_table": 1,
                    "elf_relocations": 2,
                    "rel_array": 6,
                    "relocation_array": 7,
                    "relocation_data": 1,
                    "relocation_entries": 1,
                    "relocation_table": 4
                },
                "FUN_0008400c": {
                    "get_elf32_rel_offset": 2,
                    "get_elf_relocation_offset": 9,
                    "get_offset": 1,
                    "get_r_offset": 1,
                    "get_rel_array_offset": 2,
                    "get_rel_offset": 2,
                    "get_rel_r_offset": 1,
                    "get_relocation_offset": 13
                },
                "_": {
                    "_": 1
                },
                "r_offset": {
                    "offset": 2,
                    "relocated_offset": 1,
                    "relocation_offset": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\ndword get_elf_relocation_offset_0008400c(void)\n\n{\n  return relocation_array[275].relocation_offset;\n}\n\n",
            "current_name": "get_elf_relocation_offset_0008400c",
            "entrypoint": "0x0008400c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_0008400c": "get_elf_relocation_offset_0008400c",
                "r_offset": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084018": {
            "additional_data": {
                "FUN_00081810": {
                    "allocate_memory": 1,
                    "check_value_function": 1,
                    "perform_action": 1
                },
                "FUN_00084018": {
                    "analyze_data": 1,
                    "analyze_function": 1,
                    "check_and_modify": 1,
                    "check_and_update_param": 1,
                    "check_compatibility": 1,
                    "improve_code": 1,
                    "parse_data": 1,
                    "process_data": 5,
                    "process_param": 1,
                    "update_data": 1,
                    "update_flags_and_values": 2,
                    "update_param": 1
                },
                "FUN_00084494": {
                    "analyze_value_function": 1,
                    "check_input_validity": 1,
                    "process_value": 1
                },
                "FUN_000844bc": {
                    "check_value": 1,
                    "perform_another_action": 1,
                    "process_value_function": 1
                },
                "auStack_54": {
                    "additional_data": 1,
                    "buffer": 1,
                    "data_stack": 1,
                    "stack_54": 1,
                    "stack_arr": 1,
                    "stack_array": 8,
                    "stack_buffer": 2,
                    "stack_data": 1,
                    "stack_var": 1,
                    "stack_variable": 2,
                    "temp_array": 7,
                    "temp_buffer": 1,
                    "temp_data": 1,
                    "temp_stack": 1,
                    "temporary_data": 1,
                    "temporary_stack": 1
                },
                "bVar5": {
                    "bool_value": 1,
                    "bool_var": 1,
                    "check_flag": 3,
                    "condition": 2,
                    "condition_flag": 1,
                    "flag": 10,
                    "flag3": 1,
                    "is_condition1": 1,
                    "is_condition_met": 2,
                    "is_flag_set": 3,
                    "is_flag_true": 1,
                    "is_flagged": 1,
                    "is_special_case": 2,
                    "is_true": 1,
                    "var5": 1
                },
                "iVar2": {
                    "int_value_1": 1,
                    "integer_var1": 1,
                    "result": 10,
                    "result1": 6,
                    "result_variable": 1,
                    "return_value": 3,
                    "status": 3,
                    "temp_value": 1,
                    "temp_var1": 2,
                    "value2": 2,
                    "var2": 1
                },
                "iVar3": {
                    "another_return_value": 1,
                    "error_code": 1,
                    "fun_ret_val": 1,
                    "func_return_value": 1,
                    "int_value_2": 1,
                    "integer_var2": 1,
                    "result": 1,
                    "result2": 7,
                    "return_value": 3,
                    "status": 5,
                    "status2": 1,
                    "sub_result": 1,
                    "success_flag": 1,
                    "temp_var2": 2,
                    "value": 1,
                    "value3": 2,
                    "var3": 1
                },
                "local_50": {
                    "local_50": 1,
                    "local_flag": 2,
                    "local_num": 1,
                    "local_temp": 1,
                    "local_uint_value": 1,
                    "local_value": 11,
                    "local_var": 4,
                    "local_variable": 4,
                    "mask": 1,
                    "temp": 1,
                    "temp_value": 2,
                    "temp_var": 1
                },
                "param_1": {
                    "arg1": 1,
                    "context": 1,
                    "data": 5,
                    "data_size": 1,
                    "func_param_1": 1,
                    "function_param": 1,
                    "input": 7,
                    "input1": 1,
                    "input_array": 1,
                    "input_param": 5,
                    "input_param1": 2,
                    "input_value": 2,
                    "param1": 2,
                    "param_array": 1
                },
                "param_2": {
                    "arg2": 1,
                    "array": 1,
                    "data": 1,
                    "data_array": 1,
                    "data_param": 1,
                    "func_param_2": 1,
                    "function_result": 1,
                    "info": 1,
                    "input2": 1,
                    "input_param2": 2,
                    "output": 6,
                    "output_array": 3,
                    "output_param": 4,
                    "param2": 2,
                    "param_array": 2,
                    "ptr": 1,
                    "result": 1,
                    "results": 1
                },
                "uVar1": {
                    "current_value": 1,
                    "data_flag": 1,
                    "flag1": 2,
                    "flags": 2,
                    "param3": 1,
                    "param_value": 1,
                    "result_flag": 1,
                    "result_value": 1,
                    "status": 1,
                    "ushort_val": 1,
                    "ushort_value": 6,
                    "ushort_var": 1,
                    "value": 6,
                    "value1": 5,
                    "var1": 1
                },
                "uVar4": {
                    "converted_value": 4,
                    "flag2": 2,
                    "param_value_converted": 1,
                    "result_value2": 1,
                    "temp": 6,
                    "temp_value_2": 1,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "uint_val": 1,
                    "uint_value": 5,
                    "uint_var": 1,
                    "value2": 3,
                    "value4": 2,
                    "value_as_unsigned": 1,
                    "var4": 1
                }
            },
            "called": [
                "FUN_00081810",
                "FUN_000844bc",
                "FUN_00084494"
            ],
            "calling": [
                "FUN_0008356c"
            ],
            "code": "\nvoid process_data_00084018(int input,int *output)\n\n{\n  ushort ushort_value;\n  int result;\n  int result2;\n  uint temp;\n  bool flag;\n  undefined stack_array [4];\n  uint local_value;\n  \n  ushort_value = *(ushort *)(output + 3);\n  temp = (uint)ushort_value;\n  if ((int)(temp << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)output + 0xe)) {\n    result = FUN_00084494(input,(int)*(short *)((int)output + 0xe),stack_array);\n    if (-1 < result) {\n      flag = (local_value & 0xf000) == 0x2000;\n      if (((local_value & 0xf000) == 0x8000) && (output[10] == 0x8427d)) {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    ushort_value = *(ushort *)(output + 3);\n    temp = (uint)ushort_value;\n  }\n  *(ushort *)(output + 3) = ushort_value | 0x800;\n  if ((temp & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  flag = false;\nLAB_00084074:\n  result2 = FUN_00081810(input,result);\n  ushort_value = *(ushort *)(output + 3);\n  if (result2 == 0) {\n    if (-1 < (int)((uint)ushort_value << 0x16)) {\n      *(ushort *)(output + 3) = ushort_value | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(input + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(output + 3) = ushort_value | 0x80;\n    *output = result2;\n    output[4] = result2;\n    output[5] = result;\n    if ((flag) && (result = FUN_000844bc(input,(int)*(short *)((int)output + 0xe)), result != 0))\n    {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00084018",
            "entrypoint": "0x00084018",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084018": "process_data_00084018",
                "auStack_54": "stack_array",
                "bVar5": "flag",
                "iVar2": "result",
                "iVar3": "result2",
                "local_50": "local_value",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "ushort_value",
                "uVar4": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000840f8": {
            "additional_data": {
                "FUN_000840f8": {
                    "find_byte_sequence": 1,
                    "find_char_in_array": 1,
                    "find_char_occurrence": 1,
                    "find_char_occurrences": 1,
                    "find_char_sequence": 3,
                    "find_character": 6,
                    "find_character_ptr": 1,
                    "find_character_sequence": 2,
                    "find_first_char": 1,
                    "find_first_match": 1,
                    "find_first_occurrence": 9,
                    "find_next_occurrence": 1,
                    "find_param": 1,
                    "find_target_in_array": 1,
                    "search_char_in_buffer": 1
                },
                "LAB_00084128": {
                    "start_loop": 2
                },
                "LAB_00084150": {
                    "end_loop": 2
                },
                "bVar4": {
                    "check": 1,
                    "flag": 1,
                    "found": 3,
                    "found_match": 1,
                    "is_last": 1,
                    "is_last_byte": 1,
                    "is_last_character": 3,
                    "is_last_element": 4,
                    "is_last_index": 7,
                    "is_last_iter": 1,
                    "is_last_iteration": 3,
                    "loop_condition": 1,
                    "reached_end": 2
                },
                "iVar2": {
                    "counter": 2,
                    "current_index": 1,
                    "index": 26
                },
                "param_1": {
                    "array": 13,
                    "buffer": 2,
                    "data": 5,
                    "data_array": 1,
                    "input_array": 5,
                    "input_sequence": 1,
                    "sequence": 4
                },
                "param_2": {
                    "byte_to_find": 1,
                    "char_to_find": 1,
                    "character": 12,
                    "search_character": 1,
                    "search_element": 1,
                    "target": 8,
                    "target_char": 4,
                    "target_value": 2,
                    "value": 1
                },
                "param_3": {
                    "array_length": 12,
                    "data_length": 1,
                    "length": 14,
                    "sequence_length": 2,
                    "size": 2
                },
                "puVar3": {
                    "current": 7,
                    "current_elem": 1,
                    "current_element": 2,
                    "current_pointer": 1,
                    "current_ptr": 10,
                    "next_sequence": 1,
                    "p": 1,
                    "ptr": 5
                },
                "uVar1": {
                    "masked_data": 1,
                    "result": 5,
                    "temp": 8,
                    "tmp": 1,
                    "value1": 1,
                    "xor_result": 8,
                    "xor_value": 1,
                    "xored_value": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "code": "\nuint * find_first_occurrence_000840f8(uint *array,char character,uint length)\n\n{\n  uint temp;\n  int index;\n  uint *current_ptr;\n  bool is_last_index;\n  \n  if (((uint)array & 3) == 0) {\nstart_loop:\n    if (3 < length) {\n      current_ptr = array;\n      do {\n        temp = *current_ptr ^ CONCAT22(CONCAT11(character,character),CONCAT11(character,character));\n        array = current_ptr;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n        length = length - 4;\n        array = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != character) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_index = index == length - 1;\n        index = index + 1;\n        if (is_last_index) goto end_loop;\n      } while (*(char *)array != character);\n    }\n  }\n  else if (length == 0) {\nend_loop:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != character) {\n    current_ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = current_ptr;\n      if (((uint)array & 3) == 0) goto start_loop;\n      if (length == 0) goto end_loop;\n      current_ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != character);\n  }\n  return array;\n}\n\n",
            "current_name": "find_first_occurrence_000840f8",
            "entrypoint": "0x000840f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000840f8": "find_first_occurrence_000840f8",
                "LAB_00084128": "start_loop",
                "LAB_00084150": "end_loop",
                "bVar4": "is_last_index",
                "iVar2": "index",
                "param_1": "array",
                "param_2": "character",
                "param_3": "length",
                "puVar3": "current_ptr",
                "uVar1": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000841e4": {
            "additional_data": {
                "DAT_20071244": {
                    "data_flag": 1
                },
                "FUNC_00080efc": {
                    "execute_code": 1,
                    "execute_function": 1,
                    "helper_function": 1,
                    "initialize": 2,
                    "other_function": 1,
                    "process_function": 1,
                    "process_result": 1
                },
                "FUN_000841e4": {
                    "check_and_execute_function": 1,
                    "execute_function": 1,
                    "handle_action": 1,
                    "handle_function": 1,
                    "handle_relocation": 1,
                    "process_data": 1,
                    "process_function": 9,
                    "process_input": 4,
                    "process_param": 3,
                    "process_parameter": 5,
                    "process_parameter_value": 1,
                    "validate_input": 1
                },
                "dVar1": {
                    "data_offset": 2,
                    "offset": 18,
                    "offset_value": 1,
                    "r_offset": 2,
                    "rel_array_offset": 1,
                    "rel_offset": 5,
                    "relocation_offset": 2
                },
                "iVar3": {
                    "address": 3,
                    "code_pointer": 1,
                    "func_offset": 1,
                    "func_pointer": 1,
                    "function_pointer": 4,
                    "function_pointer_offset": 1,
                    "function_ptr": 2,
                    "function_ptr_array_offset": 1,
                    "function_result": 1,
                    "handler": 1,
                    "offset_value": 1,
                    "pointer_value": 1,
                    "ptr_value": 1,
                    "result": 2,
                    "temp": 2,
                    "temp_value": 1,
                    "temp_variable": 1,
                    "value": 5,
                    "var3": 1
                },
                "in_lr": {
                    "in_link_register": 1,
                    "link_reg": 1,
                    "link_register": 4,
                    "link_register_value": 1,
                    "return_addr": 1,
                    "return_address": 2
                },
                "param_1": {
                    "action": 1,
                    "index": 1,
                    "input": 11,
                    "input_number": 1,
                    "input_param": 5,
                    "input_parameter": 1,
                    "input_value": 3,
                    "param": 4,
                    "parameter": 4
                },
                "pcVar4": {
                    "called_function": 1,
                    "code_pointer": 2,
                    "code_ptr": 5,
                    "current_function": 2,
                    "func_ptr": 1,
                    "function": 2,
                    "function_pointer": 8,
                    "function_ptr": 10
                },
                "thunk_FUN_00080efe": {
                    "get_offset": 2,
                    "get_rel_offset": 1,
                    "get_thunk_result": 2,
                    "retrieve_value": 1,
                    "thunk_function": 2
                },
                "uVar2": {
                    "function_result": 1,
                    "result": 16,
                    "return_value": 3,
                    "thunk_result": 10,
                    "thunk_return_value": 1
                },
                "uVar5": {
                    "base_address": 1,
                    "constant": 9,
                    "constant_value": 17,
                    "data": 3,
                    "data_address": 1
                },
                "unaff_r4": {
                    "arg1": 1,
                    "arg4": 1,
                    "first_argument": 1,
                    "register_4_value": 1,
                    "temp_register_4": 1,
                    "unaff1": 1,
                    "value1": 1,
                    "value_4": 1
                },
                "unaff_r5": {
                    "arg2": 1,
                    "arg5": 1,
                    "register_5_value": 1,
                    "second_argument": 1,
                    "temp_register_5": 1,
                    "unaff2": 1,
                    "value2": 1,
                    "value_5": 1
                }
            },
            "called": [
                "FUN_00080efc",
                "thunk_FUN_00080efe"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nint process_function_000841e4(uint input)\n\n{\n  dword offset;\n  undefined4 result;\n  int value;\n  code *function_ptr;\n  undefined4 arg4;\n  undefined4 arg5;\n  undefined4 link_register;\n  undefined4 constant_value;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  constant_value = 0x20070460;\n  if (0x1f < input) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  value = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((value == 0) || (function_ptr = *(code **)(value + input * 4), function_ptr == (code *)0x0)) {\n    result = thunk_FUN_00080efe(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    value = FUNC_00080efc(result,input,input,0,constant_value,arg4,arg5,link_register);\n    if ((value == -1) && (DAT_20071244 != 0)) {\n      *(int *)offset = DAT_20071244;\n      return -1;\n    }\n    return value;\n  }\n  if (function_ptr == (code *)0x1) {\n    return 0;\n  }\n  if (function_ptr != (code *)0xffffffff) {\n    *(undefined4 *)(value + input * 4) = 0;\n    (*function_ptr)(input);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "current_name": "process_function_000841e4",
            "entrypoint": "0x000841e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000841e4": "process_function_000841e4",
                "dVar1": "offset",
                "iVar3": "value",
                "in_lr": "link_register",
                "param_1": "input",
                "pcVar4": "function_ptr",
                "uVar2": "result",
                "uVar5": "constant_value",
                "unaff_r4": "arg4",
                "unaff_r5": "arg5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084220": {
            "additional_data": {
                "FUN_00084220": {
                    "calculate_and_update_value": 2,
                    "modify_param_and_add_to_value": 1,
                    "update_counter": 6,
                    "update_counter_based_on_input": 1,
                    "update_param2_value": 1,
                    "update_parameter": 1,
                    "update_parameter_value": 1,
                    "update_total": 1,
                    "update_value": 4,
                    "update_value_based_on_condition": 3,
                    "update_value_based_on_short_value": 1,
                    "update_value_from_short": 1,
                    "update_value_if_needed": 2,
                    "update_value_if_positive": 2,
                    "update_values": 4
                },
                "FUN_00084508": {
                    "calculate_increment": 1,
                    "calculate_offset": 2,
                    "calculate_result": 1,
                    "calculate_value": 1,
                    "calculate_value_based_on_pointer": 1,
                    "calculate_value_from_param_a_and_param_b": 1,
                    "compute_result": 1,
                    "get_array_value_at_offset": 1,
                    "get_value": 4,
                    "get_value_from_param": 1,
                    "get_value_from_pointer": 1,
                    "perform_calculation": 1,
                    "process_input_and_update_counter_based_on_condition": 1,
                    "process_param1": 1
                },
                "iVar1": {
                    "result": 25,
                    "return_value": 5
                },
                "param_1": {
                    "arg1": 3,
                    "context": 1,
                    "data": 3,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input": 1,
                    "input_address": 1,
                    "input_array": 6,
                    "param": 2,
                    "param1": 4,
                    "param_1": 1,
                    "param_a": 1,
                    "param_address": 1,
                    "param_pointer": 1,
                    "prev_param": 1,
                    "ptr1": 1,
                    "ptr_data": 1,
                    "ptr_to_data": 1
                },
                "param_2": {
                    "address": 2,
                    "arg2": 3,
                    "array_index": 1,
                    "base_address": 3,
                    "counter": 1,
                    "data_offset": 2,
                    "offset": 8,
                    "param": 1,
                    "param2": 4,
                    "param2_value": 1,
                    "param_2": 2,
                    "param_b": 1,
                    "struct_address": 2
                }
            },
            "called": [
                "FUN_00084508"
            ],
            "calling": [],
            "code": "\nvoid update_value_from_short_00084220(undefined4 input_array,int offset)\n\n{\n  int result;\n  \n  result = FUN_00084508(input_array,(int)*(short *)(offset + 0xe));\n  if (-1 < result) {\n    *(int *)(offset + 0x50) = *(int *)(offset + 0x50) + result;\n    return;\n  }\n  *(ushort *)(offset + 0xc) = *(ushort *)(offset + 0xc) & 0xefff;\n  return;\n}\n\n",
            "current_name": "update_value_from_short_00084220",
            "entrypoint": "0x00084220",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084220": "update_value_from_short_00084220",
                "iVar1": "result",
                "param_1": "input_array",
                "param_2": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084244": {
            "additional_data": {
                "DAT_20071244": {
                    "data": 1,
                    "return_value": 1
                },
                "FUN_00080ec8": {
                    "check_data": 2,
                    "check_validity": 1,
                    "check_value": 1,
                    "process_data": 1
                },
                "FUN_00084244": {
                    "calculate_checksum": 1,
                    "extract_and_update_value": 1,
                    "extract_data": 3,
                    "process_data": 13,
                    "process_value": 1,
                    "sanitize_data": 1,
                    "update_data": 4,
                    "update_parameter": 2,
                    "update_parameter_value": 1
                },
                "FUN_000844e0": {
                    "handle_error": 1,
                    "process_data": 3,
                    "process_error": 1
                },
                "iVar1": {
                    "error_code": 1,
                    "result": 19,
                    "result_check": 1,
                    "return_value": 7,
                    "return_value_check": 1
                },
                "in_lr": {
                    "in_link_register": 1,
                    "in_lr": 2,
                    "in_register": 1,
                    "link_reg": 1,
                    "link_register": 4,
                    "lr_value": 1,
                    "param_f": 1,
                    "return_address": 1,
                    "temp_lr": 1,
                    "unnamed4": 1,
                    "unused4": 4,
                    "unused_4": 1,
                    "unused_arg4": 1,
                    "unused_lr": 1,
                    "unused_param4": 2,
                    "unused_var4": 1,
                    "unused_var_d": 1,
                    "unused_var_lr": 1
                },
                "param_1": {
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "output": 10,
                    "output_array": 7,
                    "output_buffer": 1,
                    "output_data": 2,
                    "result": 7,
                    "result_array": 1
                },
                "param_2": {
                    "address": 1,
                    "data": 4,
                    "input": 11,
                    "input_address": 1,
                    "input_array": 5,
                    "input_buffer": 1,
                    "input_data": 4,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "source_address": 1,
                    "struct_ptr": 1
                },
                "param_3": {
                    "param1": 8,
                    "param3": 3,
                    "param_3": 2,
                    "param_a": 17,
                    "param_x": 1
                },
                "param_4": {
                    "param2": 8,
                    "param4": 3,
                    "param_4": 2,
                    "param_b": 17,
                    "param_y": 1
                },
                "uVar2": {
                    "buffer_value": 1,
                    "data": 2,
                    "data_value": 1,
                    "input_value": 1,
                    "param_c": 1,
                    "temp_value": 2,
                    "ushort_value": 5,
                    "value": 16,
                    "value1": 1,
                    "value_at_index_c": 1
                },
                "unaff_r4": {
                    "param_c": 1,
                    "temp1": 1,
                    "temp4": 1,
                    "unaff_param1": 3,
                    "unaff_r4": 1,
                    "unaff_value4": 1,
                    "unaffi_var4": 1,
                    "unnamed1": 1,
                    "unused1": 4,
                    "unused_1": 1,
                    "unused_arg1": 1,
                    "unused_param1": 3,
                    "unused_register4": 1,
                    "unused_var1": 1,
                    "unused_var4": 1,
                    "unused_var_a": 1,
                    "var1": 1
                },
                "unaff_r5": {
                    "param_d": 1,
                    "temp2": 1,
                    "temp5": 1,
                    "unaff_param2": 3,
                    "unaff_r5": 1,
                    "unaff_value5": 1,
                    "unaffi_var5": 1,
                    "unnamed2": 1,
                    "unused2": 4,
                    "unused_2": 1,
                    "unused_arg2": 1,
                    "unused_param2": 3,
                    "unused_register5": 1,
                    "unused_var2": 1,
                    "unused_var5": 1,
                    "unused_var_b": 1,
                    "var2": 1
                },
                "unaff_r6": {
                    "param_e": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "unaff_param3": 3,
                    "unaff_r6": 1,
                    "unaff_value6": 1,
                    "unaffi_var6": 1,
                    "unnamed3": 1,
                    "unused3": 4,
                    "unused_3": 1,
                    "unused_arg3": 1,
                    "unused_param3": 3,
                    "unused_register6": 1,
                    "unused_var3": 1,
                    "unused_var6": 1,
                    "unused_var_c": 1,
                    "var3": 1
                }
            },
            "called": [
                "FUN_000844e0",
                "FUN_00080ec8"
            ],
            "calling": [],
            "code": "\nvoid process_data_00084244(int *output,int input,undefined4 param_a,undefined4 param_b)\n\n{\n  int result;\n  ushort value;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    FUN_000844e0(output,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_20071244 = 0;\n  result = FUN_00080ec8((int)*(short *)(input + 0xe),param_a,param_b,param_b,unused1,unused2,\n                       unused3,unused4);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00084244",
            "entrypoint": "0x00084244",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "iVar1": "result",
                "in_lr": "unused4",
                "param_1": "output",
                "param_2": "input",
                "param_3": "param_a",
                "param_4": "param_b",
                "uVar2": "value",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008427c": {
            "additional_data": {
                "FUN_0008427c": {
                    "update_configuration": 1,
                    "update_data": 2,
                    "update_data_with_flag": 1,
                    "update_flag_value": 2,
                    "update_flags": 2,
                    "update_flags_and_value": 1,
                    "update_memory": 1,
                    "update_memory_status": 1,
                    "update_parameter": 3,
                    "update_parameters": 1,
                    "update_status": 10,
                    "update_value": 2,
                    "update_value_based_on_condition": 1,
                    "update_variable": 3
                },
                "FUN_000844e0": {
                    "check_flag": 1,
                    "find_value": 1
                },
                "iVar1": {
                    "index": 1,
                    "result": 28,
                    "return_value": 2
                },
                "param_1": {
                    "address": 1,
                    "arg1": 3,
                    "buffer": 1,
                    "config": 1,
                    "data": 4,
                    "data_buffer": 1,
                    "data_pointer": 2,
                    "device_status": 1,
                    "flag_array": 1,
                    "flags": 1,
                    "input": 1,
                    "input_array": 2,
                    "input_pointer": 1,
                    "param": 5,
                    "param1_pointer": 1,
                    "param_1": 1,
                    "status": 3,
                    "status_pointer": 1
                },
                "param_2": {
                    "address": 3,
                    "arg2": 3,
                    "base_address": 1,
                    "buffer": 1,
                    "buffer_offset": 1,
                    "data": 9,
                    "data_address": 1,
                    "data_offset": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "memory_address": 1,
                    "memory_block_address": 1,
                    "param": 1,
                    "param_2": 1,
                    "ptr": 1,
                    "struct_pointer": 2
                },
                "uVar2": {
                    "flags": 3,
                    "modified_flag": 1,
                    "modified_value": 1,
                    "new_flag": 3,
                    "new_value": 2,
                    "status_flag": 4,
                    "updated_flag": 5,
                    "updated_flags": 1,
                    "updated_status": 1,
                    "updated_value": 10
                }
            },
            "called": [
                "FUN_000844e0"
            ],
            "calling": [],
            "code": "\nvoid update_memory_status_0008427c(undefined4 param,int data)\n\n{\n  int result;\n  ushort updated_value;\n  \n  result = FUN_000844e0(param,(int)*(short *)(data + 0xe));\n  if (result == -1) {\n    updated_value = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    updated_value = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(data + 0x50) = result;\n  }\n  *(ushort *)(data + 0xc) = updated_value;\n  return;\n}\n\n",
            "current_name": "update_memory_status_0008427c",
            "entrypoint": "0x0008427c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008427c": "update_memory_status_0008427c",
                "iVar1": "result",
                "param_1": "param",
                "param_2": "data",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000842a4": {
            "additional_data": {
                "0x19": {
                    "var_offset": 1
                },
                "0x38": {
                    "offset": 1
                },
                "0xffffffff": {
                    "failure": 1
                },
                "FUN_0008356c": {
                    "function_a": 1,
                    "handle_error": 1,
                    "process_data": 2,
                    "sub_function1": 2
                },
                "FUN_00083850": {
                    "finalize_processing": 3,
                    "function_b": 1,
                    "sub_function2": 2
                },
                "FUN_00083888": {
                    "function_c": 1,
                    "initialize": 2,
                    "initialize_processing": 2,
                    "sub_function3": 1
                },
                "FUN_000842a4": {
                    "decode_and_process_data": 2,
                    "parse_and_process_input": 1,
                    "process_data": 24,
                    "process_input": 1,
                    "process_packet": 1
                },
                "iVar4": {
                    "count": 1,
                    "counter": 4,
                    "index": 4,
                    "int_value": 3,
                    "length": 1,
                    "offset": 4,
                    "result": 6,
                    "temp": 1,
                    "temp_value": 1,
                    "temp_var": 5,
                    "var1": 1
                },
                "param_1": {
                    "data": 1,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "data_size": 1,
                    "input": 10,
                    "input_data": 6,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_ptr": 2,
                    "input_value": 2,
                    "packet_address": 1,
                    "value": 2
                },
                "param_2": {
                    "byte_value": 1,
                    "data": 1,
                    "filter": 1,
                    "flag": 12,
                    "flags": 2,
                    "input_data": 1,
                    "input_flag": 1,
                    "input_value": 3,
                    "mask": 1,
                    "output_param": 1,
                    "output_value": 1,
                    "packet_size": 1,
                    "param2": 1,
                    "size": 1,
                    "value": 3
                },
                "param_3": {
                    "array_param": 1,
                    "buffer": 6,
                    "data": 8,
                    "data_array": 8,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input_array": 1,
                    "output_data": 2,
                    "packet_data": 1,
                    "results": 1
                },
                "param_4": {
                    "additional_info": 1,
                    "additional_param": 1,
                    "config": 2,
                    "config_data": 1,
                    "config_value": 2,
                    "constant_value": 1,
                    "data": 1,
                    "data_size": 1,
                    "extra_data": 1,
                    "flag": 2,
                    "input_variable": 1,
                    "param": 3,
                    "param4": 1,
                    "param_value": 2,
                    "size": 5,
                    "value": 5,
                    "value_param": 1
                },
                "puVar3": {
                    "byte_pointer": 1,
                    "byte_ptr": 2,
                    "curr_byte": 1,
                    "current_ptr": 1,
                    "data_ptr": 3,
                    "new_pointer": 1,
                    "pointer": 7,
                    "pointer_value": 1,
                    "ptr": 11,
                    "ptr_value": 3
                },
                "uVar1": {
                    "data": 1,
                    "data_length": 3,
                    "data_value": 1,
                    "flag_value": 1,
                    "header": 1,
                    "header_value": 1,
                    "packet_flag": 1,
                    "ushort_val": 1,
                    "ushort_value": 14,
                    "value": 2,
                    "value1": 5
                },
                "uVar2": {
                    "converted_value": 2,
                    "data_as_u_int": 1,
                    "data_length_as_int": 1,
                    "data_length_uint": 1,
                    "flag_as_int": 1,
                    "header_ushort": 1,
                    "header_value": 1,
                    "int_value": 2,
                    "packet_flag_value": 1,
                    "temp_length": 1,
                    "tmp_value": 1,
                    "uint_val": 1,
                    "uint_value": 11,
                    "ushort_value": 2,
                    "value2": 4
                }
            },
            "called": [
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00083888"
            ],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\nuint decode_and_process_data_000842a4(int input,uint flag,undefined4 *data_array,undefined4 size)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *ptr;\n  int result;\n  \n  if ((input != 0) && (*(int *)(input + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  ushort_value = *(ushort *)(data_array + 3);\n  uint_value = (uint)ushort_value;\n  data_array[2] = data_array[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (result = data_array[4], result == 0)) {\n    result = FUN_0008356c(input,data_array,ushort_value,uint_value,size);\n    if (result != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(data_array + 3);\n    result = data_array[4];\n    uint_value = (uint)ushort_value;\n  }\n  flag = flag & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    ptr = (undefined *)*data_array;\n    result = (int)ptr - result;\n    if (result < (int)data_array[5]) {\nLAB_000842d6:\n      result = result + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    data_array[0x19] = data_array[0x19] & 0xffffdfff;\n    ptr = (undefined *)*data_array;\n    *(ushort *)(data_array + 3) = ushort_value | 0x2000;\n    result = (int)ptr - result;\n    if (result < (int)data_array[5]) goto LAB_000842d6;\n  }\n  result = FUN_00083850(input,data_array);\n  if (result != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*data_array;\n  result = 1;\nLAB_000842d8:\n  data_array[2] = data_array[2] + -1;\n  *data_array = ptr + 1;\n  *ptr = (char)flag;\n  if (((data_array[5] == result) ||\n      (((int)((uint)*(ushort *)(data_array + 3) << 0x1f) < 0 && (flag == 10)))) &&\n     (result = FUN_00083850(input,data_array), result != 0)) {\n    return 0xffffffff;\n  }\n  return flag;\n}\n\n",
            "current_name": "decode_and_process_data_000842a4",
            "entrypoint": "0x000842a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000842a4": "decode_and_process_data_000842a4",
                "iVar4": "result",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "data_array",
                "param_4": "size",
                "puVar3": "ptr",
                "uVar1": "ushort_value",
                "uVar2": "uint_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008434c": {
            "additional_data": {
                "FUN_00084004": {
                    "get_system_value": 1
                },
                "FUN_0008434c": {
                    "execute_function": 5,
                    "execute_relocation": 6,
                    "perform_action": 1,
                    "perform_function": 1,
                    "perform_operation": 2,
                    "process_binary_data": 1,
                    "process_binary_function": 1,
                    "process_data": 2,
                    "process_function": 7,
                    "process_parameter": 1,
                    "process_params": 1,
                    "process_relocation": 1
                },
                "auStack_24": {
                    "buffer": 5,
                    "local_array": 1,
                    "stack_array": 1,
                    "stack_data": 4,
                    "temp_array": 1,
                    "temp_buffer": 7,
                    "temporary_buffer": 5,
                    "temporary_data": 2
                },
                "dVar1": {
                    "function_info": 1,
                    "info": 4,
                    "info_index": 1,
                    "r_info": 9,
                    "r_info_value": 1,
                    "rel_entry": 1,
                    "rel_info": 7,
                    "relocation_info": 7
                },
                "iVar3": {
                    "execution_result": 2,
                    "execution_status": 1,
                    "function_status": 1,
                    "result": 9,
                    "result_code": 1,
                    "return_code": 1,
                    "return_value": 15,
                    "status": 1
                },
                "param_1": {
                    "data_pointer": 1,
                    "function_pointer": 1,
                    "input_param": 1,
                    "input_ptr": 1,
                    "output": 7,
                    "output_array": 1,
                    "output_buffer": 2,
                    "output_mem": 1,
                    "output_param": 1,
                    "output_pointer": 4,
                    "output_ptr": 2,
                    "output_result": 1,
                    "param_array": 1,
                    "result": 4,
                    "result_param": 1,
                    "result_ptr": 2
                },
                "param_2": {
                    "array_size": 1,
                    "condition": 1,
                    "count": 2,
                    "flag": 4,
                    "input_length": 1,
                    "input_size": 9,
                    "length": 3,
                    "mode": 1,
                    "option": 3,
                    "size": 6
                },
                "param_3": {
                    "additional_param": 1,
                    "arg": 1,
                    "arg3": 2,
                    "constant": 1,
                    "data": 2,
                    "input": 1,
                    "input_arg": 1,
                    "input_param": 2,
                    "input_value": 5,
                    "param": 2,
                    "param3": 2,
                    "param_3": 2,
                    "parameter": 1,
                    "unused_param": 1,
                    "value": 7
                },
                "param_4": {
                    "error": 1,
                    "error_code": 2,
                    "error_status": 1,
                    "output_param": 2,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "output_status": 1,
                    "result": 8,
                    "result_array": 1,
                    "result_pointer": 2,
                    "result_ptr": 1,
                    "status": 5,
                    "status_param": 1,
                    "status_pointer": 1,
                    "status_ptr": 3
                },
                "uVar2": {
                    "code_value": 1,
                    "function_code": 1,
                    "function_pointer": 2,
                    "function_ptr": 1,
                    "function_result": 6,
                    "handle": 1,
                    "helper_result": 1,
                    "helper_var": 1,
                    "info": 1,
                    "result": 6,
                    "return_value": 7,
                    "temp_value": 1,
                    "value": 2
                }
            },
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\nvoid process_binary_function_0008434c(undefined4 *output,int input_size,undefined4 value,undefined4 *result)\n\n{\n  dword r_info;\n  undefined4 return_value;\n  int return_value;\n  undefined temp_buffer [12];\n  \n  r_info = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (input_size == 0) {\n    return_value = FUN_00084004();\n    return_value = (*(code *)r_info)(output,temp_buffer,0,return_value,result);\n  }\n  else {\n    return_value = FUN_00084004();\n    return_value = (*(code *)r_info)(output,input_size,value,return_value,result);\n  }\n  if (return_value == -1) {\n    *result = 0;\n    *output = 0x8a;\n  }\n  return;\n}\n\n",
            "current_name": "process_binary_function_0008434c",
            "entrypoint": "0x0008434c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008434c": "process_binary_function_0008434c",
                "auStack_24": "temp_buffer",
                "dVar1": "r_info",
                "iVar3": "return_value",
                "param_1": "output",
                "param_2": "input_size",
                "param_3": "value",
                "param_4": "result",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008439c": {
            "additional_data": {
                "0x0": {
                    "null": 1
                },
                "0x100": {
                    "256": 2,
                    "buffer_size": 1
                },
                "0x8a": {
                    "error_code": 1,
                    "failure_code": 1,
                    "invalid_value": 1
                },
                "0xffffffff": {
                    "error_code": 1,
                    "failure": 1
                },
                "DAT_": {
                    "dat_": 1
                },
                "FUN_0008439c": {
                    "char_to_value": 1,
                    "convert_byte_to_char": 1,
                    "convert_byte_to_value": 1,
                    "convert_int_to_char": 1,
                    "convert_integer_to_char": 1,
                    "convert_to_byte": 4,
                    "convert_to_char": 1,
                    "convert_u_int_to_char": 1,
                    "convert_value_to_byte": 1,
                    "convert_value_to_char": 3,
                    "copy_and_check_value": 1,
                    "copy_byte_to_buffer": 1,
                    "copy_byte_to_pointer": 1,
                    "copy_to_buffer": 1,
                    "copy_uint_to_char": 1,
                    "copy_value_to_memory": 1,
                    "decode_byte": 1,
                    "process_input": 1,
                    "set_data_byte": 1,
                    "write_byte_to_buffer": 1,
                    "write_byte_to_memory": 3,
                    "write_single_byte": 1,
                    "write_value": 1,
                    "write_value_to_memory": 1
                },
                "PTR_": {
                    "ptr_": 1
                },
                "char": {
                    "byte": 1,
                    "char": 1
                },
                "param_1": {
                    "address": 1,
                    "buffer": 1,
                    "dest": 1,
                    "destination": 4,
                    "memory_address": 1,
                    "output": 5,
                    "output_address": 2,
                    "output_buffer": 2,
                    "output_byte": 1,
                    "output_ptr": 5,
                    "output_value": 3,
                    "result": 4
                },
                "param_2": {
                    "buffer": 5,
                    "char_ptr": 1,
                    "data": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "dest": 1,
                    "destination": 1,
                    "input": 3,
                    "input_addr": 1,
                    "input_buffer": 2,
                    "input_ptr": 3,
                    "memory_buffer": 1,
                    "output": 1,
                    "output_buffer": 4,
                    "pointer": 1,
                    "source": 2,
                    "src": 1,
                    "target_byte": 1
                },
                "param_3": {
                    "byte_to_copy": 1,
                    "byte_to_write": 1,
                    "byte_value": 1,
                    "data": 2,
                    "data_value": 1,
                    "input": 1,
                    "input_int": 1,
                    "input_integer": 1,
                    "input_value": 7,
                    "number": 1,
                    "value": 14
                },
                "undefined": {
                    "void": 1
                },
                "undefined4": {
                    "uint32_t": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008434c"
            ],
            "code": "\nuint32_t convert_byte_to_value_0008439c(uint32_t *output_ptr,void *buffer,uint value)\n\n{\n  if (buffer == (void *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *buffer = (char)value;\n    return 1;\n  }\n  *output_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "current_name": "convert_byte_to_value_0008439c",
            "entrypoint": "0x0008439c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008439c": "convert_byte_to_value_0008439c",
                "param_1": "output_ptr",
                "param_2": "buffer",
                "param_3": "value",
                "undefined": "void",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084484": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1
                },
                "FUNC_0008397c": {
                    "cleanup": 1,
                    "cleanup1": 5,
                    "cleanup_1": 2,
                    "cleanup_a": 1,
                    "cleanup_operation1": 1,
                    "cleanup_process": 2,
                    "execute_func1": 1,
                    "finalize_process": 1,
                    "function_1": 1,
                    "initialize_fields_before_action": 1,
                    "perform_action1": 2
                },
                "FUNC_00083980": {
                    "cleanup2": 5,
                    "cleanup_2": 2,
                    "cleanup_b": 1,
                    "cleanup_operation2": 1,
                    "execute_func2": 1,
                    "finalize_action": 1,
                    "finalize_process": 2,
                    "finalize_processing": 1,
                    "function_2": 1,
                    "perform_action2": 2,
                    "post_process": 1
                },
                "FUN_00083850": {
                    "calculate_result": 1,
                    "calculate_value": 4,
                    "execute_function_b": 1,
                    "extract_data": 1,
                    "perform_operation": 1,
                    "process_data": 7,
                    "process_input": 1,
                    "process_relocator": 1,
                    "process_value": 1
                },
                "FUN_00083888": {
                    "check_and_execute_function": 1,
                    "cleanup_unused": 1,
                    "do_something": 1,
                    "execute_action": 1,
                    "execute_function": 1,
                    "execute_function_a": 1,
                    "handle_error": 2,
                    "handle_null_offset": 2,
                    "handle_offset": 3,
                    "handle_relocation_offset": 1,
                    "perform_action": 3,
                    "perform_cleanup": 1,
                    "perform_cleanup1": 1
                },
                "FUN_00083b10": {
                    "clean_up_memory": 1,
                    "cleanup": 2,
                    "cleanup_3": 1,
                    "cleanup_relocation": 1,
                    "cleanup_resource": 1,
                    "clear_data": 1,
                    "execute_action": 1,
                    "handle_error": 3,
                    "modify_data": 1,
                    "perform_cleanup2": 1,
                    "perform_extra_cleanup": 1,
                    "perform_operation": 1,
                    "reset_data": 1,
                    "reset_params": 1,
                    "reverse_operation": 1
                },
                "FUN_00084484": {
                    "check_and_cleanup_function": 1,
                    "check_and_execute": 1,
                    "check_and_execute_operation": 1,
                    "check_and_process_param": 1,
                    "check_param": 2,
                    "check_parameter": 1,
                    "execute_operation": 1,
                    "perform_action": 1,
                    "perform_action_on_data": 1,
                    "process_data": 1,
                    "process_function": 5,
                    "process_param": 7,
                    "process_parameter": 2,
                    "process_params": 1,
                    "validate_and_execute": 1,
                    "validate_and_process_data": 1,
                    "validate_param_1": 1,
                    "validate_parameter": 1
                },
                "code": {
                    "function_pointer": 1
                },
                "dVar1": {
                    "offset": 19,
                    "offset_value": 1,
                    "r_offset": 5,
                    "r_offset_value": 1,
                    "rel_offset": 3,
                    "relocation_offset": 1,
                    "return_value": 1
                },
                "iVar3": {
                    "function_result": 1,
                    "negative": 1,
                    "result": 6,
                    "return_value": 12,
                    "return_value2": 1,
                    "status": 9,
                    "temp_var": 1
                },
                "param_1": {
                    "data": 3,
                    "input": 9,
                    "input_param": 5,
                    "input_parameter": 1,
                    "operation": 1,
                    "param": 9,
                    "parameter": 2,
                    "value_to_check": 1
                },
                "param_2": {
                    "extra_parameter": 1
                },
                "uVar2": {
                    "result": 22,
                    "return_code": 1,
                    "return_value": 8
                }
            },
            "called": [
                "FUN_00083850",
                "FUN_0008397c",
                "FUN_00083980",
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "calling": [],
            "code": "\nundefined4 check_and_process_param_00084484(int input)\n\n{\n  dword offset;\n  undefined4 result;\n  int return_value;\n  \n  offset = array[140].r_offset;\n  if (input != 0) {\n    if ((array[140].r_offset != 0) &&\n       (*(int *)(array[140].r_offset + 0x38) == 0)) {\n      FUN_00083888();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      result = FUN_00083850(offset,input);\n      if ((*(function_pointer **)(input + 0x2c) != (function_pointer *)0x0) &&\n         (return_value = (**(function_pointer **)(input + 0x2c))(offset,*(undefined4 *)(input + 0x1c)), return_value < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        FUN_00083b10(offset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          FUN_00083b10(offset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        FUN_00083b10(offset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(input + 0xc) = 0;\n      FUNC_00083980();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_and_process_param_00084484",
            "entrypoint": "0x00084484",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "array",
                "FUN_00084484": "check_and_process_param_00084484",
                "code": "function_pointer",
                "dVar1": "offset",
                "iVar3": "return_value",
                "param_1": "input",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084494": {
            "additional_data": {
                "DAT_20071244": {
                    "error_code": 1
                },
                "FUN_00080eb0": {
                    "process_input": 1
                },
                "FUN_00084494": {
                    "assign_return_value_if_error": 1,
                    "extract_and_assign_value": 1,
                    "extract_data": 2,
                    "extract_error_code": 6,
                    "extract_integer": 1,
                    "extract_value": 1,
                    "find_error_code": 2,
                    "find_error_value": 1,
                    "find_value_and_update": 2,
                    "process_data": 7,
                    "process_function": 1,
                    "process_function_result": 1,
                    "process_results": 1,
                    "resolve_issue": 1,
                    "update_param": 2,
                    "update_value_if_error": 1
                },
                "iVar1": {
                    "function_result": 2,
                    "function_return_value": 1,
                    "result": 12,
                    "return_value": 10,
                    "status": 1,
                    "status_code": 1
                },
                "param_1": {
                    "error": 1,
                    "error_code": 5,
                    "output": 5,
                    "output_data": 1,
                    "output_ptr": 1,
                    "output_value": 3,
                    "result": 15
                },
                "param_2": {
                    "arg1": 2,
                    "input1": 14,
                    "input_1": 6,
                    "input_param1": 2,
                    "input_param_1": 1,
                    "input_value1": 1,
                    "param1": 2,
                    "val_1": 1,
                    "value1": 2
                },
                "param_3": {
                    "arg2": 2,
                    "input2": 14,
                    "input_2": 6,
                    "input_param2": 2,
                    "input_param_2": 1,
                    "input_value2": 1,
                    "param2": 2,
                    "val_2": 1,
                    "value2": 2
                },
                "param_4": {
                    "arg3": 2,
                    "input3": 14,
                    "input_3": 6,
                    "input_param3": 2,
                    "input_param_3": 1,
                    "input_value3": 1,
                    "param3": 2,
                    "val_3": 1,
                    "value3": 2
                }
            },
            "called": [
                "FUN_00080eb0"
            ],
            "calling": [
                "FUN_00084018"
            ],
            "code": "\nvoid process_data_00084494(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080eb0(input1,input2,input2,0,input3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00084494",
            "entrypoint": "0x00084494",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084494": "process_data_00084494",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000844bc": {
            "additional_data": {
                "FUN_00080eba": {
                    "calculate_result": 1
                },
                "FUN_000844bc": {
                    "extract_and_assign_value": 1,
                    "extract_data": 4,
                    "extract_data_from_binary": 1,
                    "extract_error_code": 1,
                    "extract_value": 1,
                    "extract_value_if_error": 1,
                    "find_and_assign_value": 1,
                    "find_and_set_parameter_value": 1,
                    "find_error": 1,
                    "get_result_from_function": 1,
                    "get_return_value": 1,
                    "get_updated_value": 1,
                    "get_value_from_source": 1,
                    "initialize_and_check_value": 1,
                    "process_data": 4,
                    "reverse_and_assign_dat_value": 1,
                    "reverse_and_store": 1,
                    "reverse_and_update_value": 1,
                    "update_param": 2,
                    "update_param_with_value": 1,
                    "update_parameter": 1,
                    "update_value_if_needed": 1,
                    "update_value_if_negative": 1
                },
                "iVar1": {
                    "error_code": 1,
                    "function_result": 1,
                    "result": 21,
                    "return_value": 2,
                    "returned_value": 1,
                    "status": 3
                },
                "param_1": {
                    "error_code": 1,
                    "output": 9,
                    "output_data": 1,
                    "output_value": 9,
                    "result": 5,
                    "result_pointer": 1,
                    "result_ptr": 1,
                    "result_value": 1,
                    "target_param": 1
                },
                "param_2": {
                    "input": 9,
                    "input_data": 2,
                    "input_param": 3,
                    "input_value": 17
                }
            },
            "called": [
                "FUN_00080eba"
            ],
            "calling": [
                "FUN_00084018"
            ],
            "code": "\nvoid extract_data_from_binary_000844bc(int *output,undefined4 input_value)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080eba(input_value);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "extract_data_from_binary_000844bc",
            "entrypoint": "0x000844bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000844bc": "extract_data_from_binary_000844bc",
                "iVar1": "result",
                "param_1": "output",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000844e0": {
            "additional_data": {
                "DAT_20071244": {
                    "stored_value": 1
                },
                "FUN_00080ebe": {
                    "get_result": 1,
                    "perform_validation": 1
                },
                "FUN_000844e0": {
                    "check_and_assign_value": 1,
                    "check_error_code": 1,
                    "decode_and_assign_value": 1,
                    "evaluate_condition": 1,
                    "extract_and_verify_result": 1,
                    "extract_data": 3,
                    "extract_error_value": 1,
                    "extract_integer_value": 1,
                    "extract_value_from_binary": 1,
                    "find_and_assign_value": 1,
                    "find_and_set_error_code": 1,
                    "find_error_and_set_result": 1,
                    "find_error_code": 1,
                    "find_parameter_and_set": 1,
                    "find_valid_value": 1,
                    "get_error_code": 1,
                    "perform_operation": 1,
                    "process_data": 3,
                    "process_extracted_binary": 1,
                    "process_function": 1,
                    "process_return_value": 1,
                    "update_param": 1,
                    "update_param1_if_negative": 1,
                    "update_return_value_if_needed": 1,
                    "update_value_if_needed": 1,
                    "validate_and_assign_result": 2
                },
                "iVar1": {
                    "error_code": 2,
                    "func_result": 1,
                    "result": 13,
                    "result_flag": 1,
                    "return_value": 8,
                    "sub_function_result": 1,
                    "subfunc_result": 1
                },
                "param_1": {
                    "destination": 1,
                    "error": 1,
                    "error_code": 1,
                    "output": 6,
                    "output_data": 1,
                    "output_error_code": 1,
                    "output_pointer": 2,
                    "output_value": 1,
                    "result": 14,
                    "result_buffer": 1,
                    "result_ptr": 1
                },
                "param_2": {
                    "arg1": 7,
                    "arg_1": 1,
                    "input1": 12,
                    "input_1": 3,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_value1": 1,
                    "param1": 1,
                    "param2": 1,
                    "value1": 1,
                    "var2": 1
                },
                "param_3": {
                    "arg2": 7,
                    "arg_2": 1,
                    "input2": 12,
                    "input_2": 3,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_value2": 1,
                    "param2": 1,
                    "param3": 1,
                    "value2": 1,
                    "var3": 1
                },
                "param_4": {
                    "arg3": 7,
                    "arg_3": 1,
                    "input3": 12,
                    "input_3": 3,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "input_value3": 1,
                    "param3": 1,
                    "param4": 1,
                    "value3": 1,
                    "var4": 1
                }
            },
            "called": [
                "FUN_00080ebe"
            ],
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "code": "\nvoid process_extracted_binary_000844e0(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080ebe(input1,input2,input3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_extracted_binary_000844e0",
            "entrypoint": "0x000844e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000844e0": "process_extracted_binary_000844e0",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084508": {
            "additional_data": {
                "DAT_20071244": {
                    "stored_value": 1,
                    "temporary_value": 1
                },
                "FUN_00084508": {
                    "check_and_assign_value": 1,
                    "copy_error_value": 1,
                    "extract_error_code": 1,
                    "extract_result": 1,
                    "extract_result_from_binary": 1,
                    "extract_return_value": 1,
                    "extract_value_from_binary": 1,
                    "find_and_assign_value": 1,
                    "find_and_set_error": 1,
                    "find_error_value": 2,
                    "get_error_code": 2,
                    "process_data": 10,
                    "process_function": 2,
                    "process_param_result": 1,
                    "process_result": 1,
                    "set_return_value_if_error_occurs": 1,
                    "update_value_if_error": 1
                },
                "iVar1": {
                    "result": 20,
                    "result_value": 1,
                    "return_code": 1,
                    "return_value": 2,
                    "status": 1,
                    "sub_function_result": 3
                },
                "param_1": {
                    "error_code": 2,
                    "error_output": 1,
                    "output": 12,
                    "output_ptr": 1,
                    "output_result": 1,
                    "output_value": 8,
                    "result": 6
                },
                "param_2": {
                    "arg1": 6,
                    "input1": 12,
                    "input_1": 4,
                    "input_a": 1,
                    "input_param1": 1,
                    "input_var1": 1,
                    "param1": 1,
                    "param2": 1,
                    "param_2": 1,
                    "parameter2": 1,
                    "value1": 1
                },
                "param_3": {
                    "arg2": 6,
                    "input2": 12,
                    "input_2": 4,
                    "input_b": 1,
                    "input_param2": 1,
                    "input_var2": 1,
                    "param2": 1,
                    "param3": 1,
                    "param_3": 1,
                    "parameter3": 1,
                    "value2": 1
                },
                "param_4": {
                    "arg3": 6,
                    "input3": 12,
                    "input_3": 4,
                    "input_c": 1,
                    "input_param3": 1,
                    "input_var3": 1,
                    "param3": 1,
                    "param4": 1,
                    "param_4": 1,
                    "parameter4": 1,
                    "value3": 1
                }
            },
            "called": [
                "FUN_00080ec2"
            ],
            "calling": [
                "FUN_00084220"
            ],
            "code": "\nvoid process_data_00084508(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080ec2(input1,input2,input3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00084508",
            "entrypoint": "0x00084508",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084508": "process_data_00084508",
                "iVar1": "result",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084530": {
            "additional_data": {
                "FUN_00084530": {
                    "calculate_result": 2,
                    "check_input_and_return_result": 1,
                    "check_input_params": 1,
                    "check_invalid_params": 1,
                    "check_parameters": 8,
                    "check_params": 4,
                    "check_params_and_call": 1,
                    "check_params_and_return": 1,
                    "check_zero_params_and_return_value": 1,
                    "extract_return_value": 1,
                    "handle_params": 1,
                    "process_parameters": 1,
                    "process_params": 6
                },
                "FUN_0008458c": {
                    "perform_operation": 2
                },
                "iVar1": {
                    "result": 25,
                    "return_value": 1
                },
                "param_1": {
                    "first_param": 1,
                    "input1": 16,
                    "input_1": 5,
                    "input_param1": 1,
                    "input_value1": 1,
                    "value1": 5,
                    "value_1": 2
                },
                "param_2": {
                    "input2": 16,
                    "input_2": 5,
                    "input_param2": 1,
                    "input_value2": 1,
                    "second_param": 1,
                    "value2": 5,
                    "value_2": 2
                },
                "param_3": {
                    "condition1": 1,
                    "condition_1": 1,
                    "flag1": 3,
                    "flag_1": 1,
                    "input3": 12,
                    "input_3": 3,
                    "input_param3": 1,
                    "input_value3": 1,
                    "third_param": 1,
                    "value3": 5,
                    "value_3": 2
                },
                "param_4": {
                    "condition2": 1,
                    "condition_2": 1,
                    "flag2": 3,
                    "flag_2": 1,
                    "fourth_param": 1,
                    "input4": 12,
                    "input_4": 3,
                    "input_param4": 1,
                    "input_value4": 1,
                    "value4": 5,
                    "value_4": 2
                }
            },
            "called": [
                "FUN_0008458c"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint check_parameters_00084530(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = FUN_0008458c();\n  return result;\n}\n\n",
            "current_name": "check_parameters_00084530",
            "entrypoint": "0x00084530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084530": "check_parameters_00084530",
                "iVar1": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008455c": {
            "additional_data": {
                "FRENEMIES": {
                    "calculate_difference": 1
                },
                "FUN_0008455c": {
                    "calculate_difference": 5,
                    "reverse_subtraction": 1,
                    "subtract_and_adjust": 1,
                    "subtract_and_assign": 1,
                    "subtract_and_store": 4,
                    "subtract_and_store_difference": 1,
                    "subtract_and_store_result": 1,
                    "subtract_and_update": 4,
                    "subtract_and_update_values": 3,
                    "subtract_from_params": 1,
                    "subtract_params": 2,
                    "subtract_values": 2,
                    "subtract_values_from_params": 1,
                    "subtract_with_offset": 1,
                    "update_param_array": 1,
                    "update_parameters": 1
                },
                "FUN_000845c0": {
                    "calculate_product": 1,
                    "multiply_and_convert": 2
                },
                "lVar2": {
                    "converted_value": 1,
                    "multiplied_value": 4,
                    "multiplier": 2,
                    "product": 8,
                    "product_value": 1,
                    "result": 13,
                    "temp_value": 1
                },
                "param_1": {
                    "input1": 3,
                    "input_param": 2,
                    "input_param_1": 1,
                    "input_val": 1,
                    "input_value": 20,
                    "input_value1": 1,
                    "original_value": 1,
                    "value": 1,
                    "value_1": 1
                },
                "param_2": {
                    "another_input": 2,
                    "another_param": 3,
                    "count": 1,
                    "input2": 3,
                    "input_number": 1,
                    "input_param_2": 1,
                    "input_value2": 1,
                    "int_value": 2,
                    "integer": 1,
                    "num_iterations": 1,
                    "offset": 2,
                    "offset_value": 1,
                    "param2": 2,
                    "param_increment": 1,
                    "param_size": 1,
                    "param_value": 1,
                    "second_param": 1,
                    "second_value": 1,
                    "shift_amount": 1,
                    "subtract_value": 1,
                    "subtracted_value": 2,
                    "value_2": 1
                },
                "param_3": {
                    "constant1": 1,
                    "contribution1": 1,
                    "lower_half": 1,
                    "multiplier_low": 1,
                    "param_3": 1,
                    "param_3_val": 1,
                    "value1": 1
                },
                "param_4": {
                    "constant2": 1,
                    "contribution2": 1,
                    "multiplier_high": 1,
                    "param_4": 1,
                    "param_4_val": 1,
                    "upper_half": 1,
                    "value2": 1
                },
                "param_5": {
                    "output_array": 11,
                    "output_param": 2,
                    "output_params": 1,
                    "output_values": 2,
                    "result_array": 15
                },
                "uVar1": {
                    "calculated_value": 5,
                    "calculation_result": 2,
                    "casted_result": 1,
                    "converted_result": 6,
                    "converted_value": 4,
                    "lower_half_result": 1,
                    "product_as_u_int": 1,
                    "result": 3,
                    "result_as_u_int": 1,
                    "result_as_uint": 2,
                    "result_to_uint": 1,
                    "result_uint": 1,
                    "result_value": 1,
                    "updated_result": 1
                }
            },
            "called": [
                "FUN_000845c0"
            ],
            "calling": [],
            "code": "\nvoid subtract_and_update_values_0008455c(uint input_value,int input2,undefined4 contribution1,undefined4 value2,int *result_array)\n\n{\n  uint converted_result;\n  longlong result;\n  \n  result = FUN_000845c0();\n  result = result * CONCAT44(value2,contribution1);\n  converted_result = (uint)result;\n  *result_array = input_value - converted_result;\n  result_array[1] = (input2 - (int)((ulonglong)result >> 0x20)) - (uint)(input_value < converted_result);\n  return;\n}\n\n",
            "current_name": "subtract_and_update_values_0008455c",
            "entrypoint": "0x0008455c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008455c": "subtract_and_update_values_0008455c",
                "lVar2": "result",
                "param_1": "input_value",
                "param_2": "input2",
                "param_3": "contribution1",
                "param_4": "value2",
                "param_5": "result_array",
                "uVar1": "converted_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008458c": {
            "additional_data": {
                "CONCAT44": {
                    "combine": 1
                },
                "FUN_0008458c": {
                    "calculate_difference": 6,
                    "subtract_and_adjust": 8,
                    "subtract_and_assign": 3,
                    "subtract_and_calculate_difference": 1,
                    "subtract_and_store": 1,
                    "subtract_and_update": 6,
                    "subtract_param_from_value": 1,
                    "subtract_parameters": 1,
                    "subtract_params": 2,
                    "subtract_values": 2
                },
                "FUN_00084860": {
                    "calculate_product": 2,
                    "compute_product": 1,
                    "multiply_values": 4
                },
                "lVar2": {
                    "combined_value": 1,
                    "multiplication_result": 1,
                    "multiplied_result": 2,
                    "multiplied_value": 4,
                    "product": 13,
                    "result": 7,
                    "result_longlong": 1,
                    "temp_value": 1,
                    "temp_variable": 1
                },
                "param_1": {
                    "initial_value": 1,
                    "input": 1,
                    "input_1": 2,
                    "input_param": 2,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_value": 20,
                    "operand_1": 1,
                    "original_value": 2
                },
                "param_2": {
                    "another_value": 1,
                    "input_2": 2,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_value": 1,
                    "int_param": 1,
                    "int_value": 3,
                    "integer_value": 2,
                    "offset_value": 1,
                    "operand_2": 1,
                    "other_value": 1,
                    "param2": 2,
                    "param_2_val": 1,
                    "param_length": 1,
                    "param_value": 3,
                    "second_param": 3,
                    "subtract_value": 1,
                    "subtraction_value": 2,
                    "target_value": 1,
                    "value": 1,
                    "value_to_subtract": 1
                },
                "param_3": {
                    "concat_param_1": 1,
                    "concatenation_value_1": 1,
                    "first_value": 1,
                    "input_3": 1,
                    "lower_part": 1,
                    "lower_part_value": 1,
                    "operand_3_low": 1,
                    "param_3_val": 1,
                    "param_a": 1,
                    "param_third": 1,
                    "value1": 1
                },
                "param_4": {
                    "concat_param_2": 1,
                    "concatenation_value_2": 1,
                    "higher_part_value": 1,
                    "input_4": 1,
                    "operand_3_high": 1,
                    "param_4_val": 1,
                    "param_b": 1,
                    "param_fourth": 1,
                    "second_value": 1,
                    "upper_part": 1,
                    "value2": 1
                },
                "param_5": {
                    "output_array": 10,
                    "output_params": 1,
                    "output_values": 3,
                    "result_array": 17
                },
                "uVar1": {
                    "calculated_value": 4,
                    "calculation_result": 1,
                    "casted_result": 1,
                    "converted_product": 2,
                    "converted_result": 3,
                    "converted_value": 4,
                    "lower_part": 2,
                    "lower_result": 1,
                    "result": 9,
                    "result_converted": 1,
                    "result_uint": 2,
                    "result_value": 1
                }
            },
            "called": [
                "FUN_00084860"
            ],
            "calling": [
                "FUN_00084530"
            ],
            "code": "\nvoid subtract_and_adjust_0008458c(uint input_value,int int_value,undefined4 param_a,undefined4 higher_part_value,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = FUN_00084860();\n  product = product * combine(higher_part_value,param_a);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (int_value - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "current_name": "subtract_and_adjust_0008458c",
            "entrypoint": "0x0008458c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine",
                "FUN_0008458c": "subtract_and_adjust_0008458c",
                "lVar2": "product",
                "param_1": "input_value",
                "param_2": "int_value",
                "param_3": "param_a",
                "param_4": "higher_part_value",
                "param_5": "result_array",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000845c0": {
            "additional_data": {
                "FUN_000845c0": {
                    "calculate_integer_division": 1,
                    "div_and_mod": 1,
                    "div_and_remainder": 1,
                    "divide_unsigned": 1,
                    "divide_unsigned_integers": 5,
                    "divide_with_overflow": 1,
                    "divide_with_overflow_check": 1,
                    "divide_with_remainder": 9,
                    "dividing_algorithm": 1,
                    "division_with_remainder": 3,
                    "integer_division": 1,
                    "perform_division": 2,
                    "perform_division_operation": 1,
                    "perform_unsigned_division": 1,
                    "unsigned_division": 1
                },
                "F_UNIMPELL": {
                    "divide_unsigned": 1
                },
                "bVar13": {
                    "b_var13": 1,
                    "carry": 1,
                    "carry_flag": 10,
                    "has_carry": 1,
                    "has_overflow": 1,
                    "has_remainder": 1,
                    "is_borrow": 2,
                    "is_carry": 3,
                    "is_negative": 1,
                    "is_negative2": 2,
                    "need_extra_sub": 1
                },
                "bVar14": {
                    "carry_flag": 1,
                    "is_quotient_zero": 1
                },
                "bVar15": {
                    "carry_flag": 1
                },
                "iVar15": {
                    "leading_zeros": 1
                },
                "iVar6": {
                    "bit_shift": 2,
                    "count": 2,
                    "leading_zeros": 2,
                    "num_shifts": 1,
                    "shift": 1,
                    "shift_amount": 9,
                    "shift_count": 10
                },
                "lVar1": {
                    "int64_temp": 1,
                    "multiplication_result": 1,
                    "product": 9,
                    "quotient": 1,
                    "quotient_and_remainder": 1,
                    "quotient_product": 1,
                    "quotient_remainder": 1,
                    "temp": 2,
                    "temp_long": 1,
                    "tmp_result": 1
                },
                "lVar19": {
                    "intermediate_calculation": 1
                },
                "param_1": {
                    "dividend": 31
                },
                "param_2": {
                    "dividend_abs": 1,
                    "dividend_bitlength": 1,
                    "dividend_copy": 1,
                    "dividend_extended": 1,
                    "dividend_high": 10,
                    "dividend_low": 1,
                    "dividend_lower": 2,
                    "dividend_msb": 1,
                    "dividend_quotient": 1,
                    "dividend_remainder_high": 1,
                    "dividend_top": 1,
                    "dividend_upper": 4,
                    "dividend_upper32_bits": 1,
                    "divisor": 2,
                    "numerator": 1,
                    "quotient_divisor": 1,
                    "remainder1": 1
                },
                "param_3": {
                    "divisor": 27,
                    "divisor_low": 1,
                    "divisor_upper": 1,
                    "quotient": 2
                },
                "param_4": {
                    "denominator": 1,
                    "divisor_abs": 1,
                    "divisor_bitlength": 1,
                    "divisor_copy": 1,
                    "divisor_extended": 1,
                    "divisor_high": 10,
                    "divisor_low": 1,
                    "divisor_lower": 2,
                    "divisor_msb": 1,
                    "divisor_quotient": 1,
                    "divisor_remainder_high": 1,
                    "divisor_top": 1,
                    "divisor_upper": 4,
                    "divisor_upper32_bits": 1,
                    "remainder": 2,
                    "remainder2": 1,
                    "remainder_divisor": 1
                },
                "uVar1": {
                    "bit_mask": 1
                },
                "uVar10": {
                    "division_result_low": 1,
                    "divisor_multiplier": 2,
                    "factor1": 1,
                    "is_divisor_negative": 3,
                    "is_negative_divisor": 4,
                    "is_quotient_negative": 1,
                    "low_product": 1,
                    "partial_quotient": 1,
                    "quotient_estimate": 1,
                    "quotient_partial": 1,
                    "quotient_second": 1,
                    "quotient_upper_temp1": 1,
                    "remainder": 1,
                    "sign2": 1,
                    "temp2": 1,
                    "temp3": 3,
                    "temp4": 1,
                    "temp_negative_divisor": 1,
                    "tmp_quotient": 1,
                    "u_quotient1": 1,
                    "u_var10": 1
                },
                "uVar11": {
                    "carry": 1,
                    "dividend_multiplier": 1,
                    "division_result_high": 1,
                    "factor2": 1,
                    "is_divisor_negative": 2,
                    "is_negative_quotient": 2,
                    "is_quotient_negative": 1,
                    "quotient_count": 1,
                    "quotient_upper_temp2": 1,
                    "rem_divisor": 1,
                    "remainder_low_extended": 1,
                    "remainder_lower": 1,
                    "remainder_product": 1,
                    "shift_amount": 1,
                    "shifted_divisor": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp4": 3,
                    "temp5": 2,
                    "temp_negative_dividend": 1,
                    "tmp_remainder": 1,
                    "u_quotient2": 1,
                    "u_var11": 1
                },
                "uVar12": {
                    "combined_quotient_temp": 1,
                    "dividend_and_remainder2": 1,
                    "divisor_extended": 2,
                    "divisor_lower": 1,
                    "divisor_shifted": 2,
                    "divisor_temp": 1,
                    "is_divisor_remainder_high_negative": 1,
                    "is_negative_divisor": 1,
                    "partial_divisor": 1,
                    "remainder": 1,
                    "shifted_divisor": 2,
                    "shifted_divisor_high": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp5": 5,
                    "temp6": 1,
                    "temp_high": 1,
                    "tmp_divisor1": 1,
                    "tmp_quotient2": 1,
                    "u_remainder1": 1,
                    "u_var12": 1
                },
                "uVar13": {
                    "dividend_shifted": 1,
                    "is_divisor_negative": 1,
                    "u_remainder2": 1,
                    "zero": 1
                },
                "uVar14": {
                    "mask": 1
                },
                "uVar16": {
                    "divisor_high_part": 1
                },
                "uVar17": {
                    "divisor_low_part": 1
                },
                "uVar18": {
                    "leading_zeros_divisor": 1
                },
                "uVar2": {
                    "q1": 1,
                    "quotient": 10,
                    "quotient1": 1,
                    "quotient_1": 1,
                    "quotient_high": 2,
                    "quotient_low": 6,
                    "quotient_lower": 1,
                    "quotient_lower32_bits": 1,
                    "quotient_lsb": 1,
                    "quotient_part1": 3,
                    "quotient_top": 1,
                    "quotient_upper": 2,
                    "result_quotient": 1
                },
                "uVar3": {
                    "q2": 1,
                    "quotient": 1,
                    "quotient2": 1,
                    "quotient_2": 1,
                    "quotient_high": 9,
                    "quotient_low": 2,
                    "quotient_lower": 3,
                    "quotient_msb": 1,
                    "quotient_part2": 3,
                    "quotient_temp": 1,
                    "quotient_upper": 4,
                    "quotient_upper32_bits": 1,
                    "remainder": 1,
                    "result_remainder": 1,
                    "shifted_divisor": 1
                },
                "uVar4": {
                    "dividend_low": 2,
                    "dividend_partial": 1,
                    "divisor_high": 1,
                    "divisor_higher": 1,
                    "divisor_part1": 1,
                    "quotient": 2,
                    "quotient_3": 1,
                    "quotient_lower_temp1": 1,
                    "quotient_part3": 1,
                    "quotient_partial": 1,
                    "quotient_temp": 1,
                    "rem_dividend": 1,
                    "shift": 1,
                    "shifted_dividend": 1,
                    "temp": 1,
                    "temp1": 8,
                    "temp_1": 1,
                    "temp_quotient": 1,
                    "temp_upper": 1,
                    "temporary": 1
                },
                "uVar5": {
                    "dividend_low_extended": 1,
                    "divisor_low": 1,
                    "divisor_part2": 1,
                    "divisor_partial": 1,
                    "product_low": 1,
                    "quotient_4": 1,
                    "quotient_low": 1,
                    "quotient_lower_temp2": 1,
                    "quotient_part4": 1,
                    "quotient_temp": 1,
                    "rem_dividend_temp": 1,
                    "remainder": 3,
                    "result_temp": 1,
                    "temp1": 2,
                    "temp2": 8,
                    "temp4": 1,
                    "temp_2": 1,
                    "temp_lower": 1,
                    "temp_quotient_top": 1
                },
                "uVar6": {
                    "quotient": 1
                },
                "uVar7": {
                    "carry": 1,
                    "carry1": 1,
                    "combined_dividend": 1,
                    "low_divisor": 1,
                    "partial_product": 1,
                    "partial_product_low": 1,
                    "prod_low": 1,
                    "product1": 1,
                    "product_low": 1,
                    "product_part1": 1,
                    "product_upper_temp": 1,
                    "quotient_low_extended": 1,
                    "quotient_part1": 1,
                    "remainder": 2,
                    "remainder1": 1,
                    "temp1": 4,
                    "temp2": 2,
                    "temp3": 5,
                    "temp_3": 1,
                    "temp_product": 1,
                    "tmp": 1
                },
                "uVar8": {
                    "carry2": 1,
                    "combined_quotient": 1,
                    "partial_product_high": 2,
                    "product2": 1,
                    "product_high": 1,
                    "product_lower": 1,
                    "product_part2": 1,
                    "quotient_higher": 1,
                    "quotient_middle": 1,
                    "quotient_part2": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 3,
                    "temp3": 1,
                    "temp4": 5,
                    "temp6": 1,
                    "temp_4": 1,
                    "temp_partial_quotient": 1,
                    "temp_remainder": 1,
                    "temp_result": 1,
                    "tmp_dividend1": 1,
                    "tmp_result2": 1,
                    "unadjusted_divisor_difference_high": 1
                },
                "uVar9": {
                    "dividend_mask": 1,
                    "dividend_sign_bit_mask": 1,
                    "divisor_high_extended": 1,
                    "is_dividend_negative": 7,
                    "is_neg_dividend": 1,
                    "is_negative": 1,
                    "is_negative1": 2,
                    "is_negative_dividend": 9,
                    "is_negative_divisor": 1,
                    "negate_dividend": 2,
                    "negative": 1,
                    "sign1": 1,
                    "sign_dividend": 1
                },
                "uVarLong1": {
                    "temp_multiplication": 1
                },
                "uVarLong2": {
                    "temp_product_high": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008455c"
            ],
            "code": "\nundefined8 divide_with_remainder_000845c0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong product;\n  uint quotient;\n  uint quotient_high;\n  uint temp1;\n  uint temp2;\n  int shift_count;\n  uint temp3;\n  uint temp4;\n  uint is_negative_dividend;\n  uint is_negative_divisor;\n  uint temp4;\n  uint temp5;\n  bool carry_flag;\n  \n  if ((int)dividend_high < 0) {\n    carry_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)carry_flag;\n    is_negative_dividend = 0xffffffff;\n  }\n  else {\n    is_negative_dividend = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_negative_dividend = ~is_negative_dividend;\n    carry_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)carry_flag;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_count = LZCOUNT(divisor);\n      if (shift_count != 0) {\n        quotient_high = dividend >> (0x20U - shift_count & 0xff);\n        divisor = divisor << shift_count;\n        dividend = dividend << shift_count;\n        dividend_high = dividend_high << shift_count | quotient_high;\n      }\n      quotient = divisor >> 0x10;\n      temp1 = dividend_high / quotient;\n      temp3 = (divisor & 0xffff) * temp1;\n      is_negative_divisor = dividend >> 0x10 | (dividend_high - quotient * temp1) * 0x10000;\n      quotient_high = temp1;\n      if (is_negative_divisor <= temp3 && temp3 - is_negative_divisor != 0) {\n        carry_flag = CARRY4(is_negative_divisor,divisor);\n        is_negative_divisor = is_negative_divisor + divisor;\n        quotient_high = temp1 - 1;\n        if ((carry_flag == false) && (is_negative_divisor <= temp3 && temp3 - is_negative_divisor != 0)) {\n          quotient_high = temp1 - 2;\n          is_negative_divisor = is_negative_divisor + divisor;\n        }\n      }\n      temp4 = (is_negative_divisor - temp3) / quotient;\n      temp1 = (divisor & 0xffff) * temp4;\n      temp3 = dividend & 0xffff | ((is_negative_divisor - temp3) - quotient * temp4) * 0x10000;\n      quotient = temp4;\n      if (temp3 <= temp1 && temp1 - temp3 != 0) {\n        quotient = temp4 - 1;\n        if ((CARRY4(temp3,divisor) == false) &&\n           (temp3 + divisor <= temp1 && temp1 - (temp3 + divisor) != 0)) {\n          quotient = temp4 - 2;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_count = LZCOUNT(divisor);\n      if (shift_count == 0) {\n        dividend_high = dividend_high - divisor;\n        temp1 = divisor >> 0x10;\n        temp5 = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << shift_count;\n        quotient_high = dividend_high >> (0x20U - shift_count & 0xff);\n        temp1 = divisor >> 0x10;\n        is_negative_divisor = quotient_high / temp1;\n        temp5 = divisor & 0xffff;\n        temp3 = temp5 * is_negative_divisor;\n        temp4 = dividend >> (0x20U - shift_count & 0xff) | dividend_high << shift_count;\n        quotient_high = temp4 >> 0x10 | (quotient_high - temp1 * is_negative_divisor) * 0x10000;\n        dividend = dividend << shift_count;\n        quotient = is_negative_divisor;\n        if (quotient_high <= temp3 && temp3 - quotient_high != 0) {\n          carry_flag = CARRY4(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient = is_negative_divisor - 1;\n          if ((carry_flag == false) && (quotient_high <= temp3 && temp3 - quotient_high != 0)) {\n            quotient = is_negative_divisor - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        temp2 = (quotient_high - temp3) / temp1;\n        is_negative_divisor = temp5 * temp2;\n        dividend_high = temp4 & 0xffff | ((quotient_high - temp3) - temp1 * temp2) * 0x10000;\n        quotient_high = temp2;\n        if (dividend_high <= is_negative_divisor && is_negative_divisor - dividend_high != 0) {\n          carry_flag = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = temp2 - 1;\n          if ((carry_flag == false) && (dividend_high <= is_negative_divisor && is_negative_divisor - dividend_high != 0)) {\n            quotient_high = temp2 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - is_negative_divisor;\n        quotient_high = quotient_high | quotient << 0x10;\n      }\n      quotient = dividend_high / temp1;\n      is_negative_divisor = temp5 * quotient;\n      temp4 = dividend >> 0x10 | (dividend_high - temp1 * quotient) * 0x10000;\n      temp3 = quotient;\n      if (temp4 <= is_negative_divisor && is_negative_divisor - temp4 != 0) {\n        carry_flag = CARRY4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = quotient - 1;\n        if ((carry_flag == false) && (temp4 <= is_negative_divisor && is_negative_divisor - temp4 != 0)) {\n          temp3 = quotient - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp2 = (temp4 - is_negative_divisor) / temp1;\n      temp5 = temp5 * temp2;\n      temp1 = dividend & 0xffff | ((temp4 - is_negative_divisor) - temp1 * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp5 && temp5 - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp5 && temp5 - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | temp3 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient = 0;\n  }\n  else {\n    shift_count = LZCOUNT(divisor_high);\n    if (shift_count == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - shift_count;\n      temp1 = dividend_high >> (quotient_high & 0xff);\n      temp5 = divisor >> (quotient_high & 0xff) | divisor_high << shift_count;\n      is_negative_divisor = temp5 >> 0x10;\n      quotient = temp1 / is_negative_divisor;\n      temp4 = (temp5 & 0xffff) * quotient;\n      temp3 = dividend_high << shift_count | dividend >> (quotient_high & 0xff);\n      temp1 = temp3 >> 0x10 | (temp1 - is_negative_divisor * quotient) * 0x10000;\n      quotient_high = quotient;\n      if (temp1 <= temp4 && temp4 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,temp5);\n        temp1 = temp1 + temp5;\n        quotient_high = quotient - 1;\n        if ((carry_flag == false) && (temp1 <= temp4 && temp4 - temp1 != 0)) {\n          quotient_high = quotient - 2;\n          temp1 = temp1 + temp5;\n        }\n      }\n      temp2 = (temp1 - temp4) / is_negative_divisor;\n      temp4 = (temp5 & 0xffff) * temp2;\n      temp1 = temp3 & 0xffff | ((temp1 - temp4) - is_negative_divisor * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp4 && temp4 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,temp5);\n        temp1 = temp1 + temp5;\n        quotient = temp2 - 1;\n        if ((carry_flag == false) && (temp1 <= temp4 && temp4 - temp1 != 0)) {\n          quotient = temp2 - 2;\n          temp1 = temp1 + temp5;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      product = (ulonglong)quotient * (ulonglong)(divisor << shift_count);\n      temp3 = (uint)((ulonglong)product >> 0x20);\n      quotient_high = 0;\n      if ((temp1 - temp4 < temp3) ||\n         ((temp1 - temp4 == temp3 && (dividend << shift_count < (uint)product)))) {\n        quotient = quotient - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_negative_dividend != 0) {\n    carry_flag = quotient != 0;\n    quotient = -quotient;\n    quotient_high = -quotient_high - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_high,quotient);\n}\n\n",
            "current_name": "divide_with_remainder_000845c0",
            "entrypoint": "0x000845c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000845c0": "divide_with_remainder_000845c0",
                "bVar13": "carry_flag",
                "iVar6": "shift_count",
                "lVar1": "product",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "uVar1": "bit_mask",
                "uVar10": "is_negative_divisor",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "uVar2": "quotient",
                "uVar3": "quotient_high",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "is_negative_dividend"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084860": {
            "additional_data": {
                "CARRY4": {
                    "carry4": 1
                },
                "FUN_00084860": {
                    "calculate_dividend": 1,
                    "calculate_division": 1,
                    "calculate_quotient": 7,
                    "calculate_quotient_remainder": 1,
                    "calculate_unsigned_division": 1,
                    "calculate_unsigned_division_without_remainder": 1,
                    "div_mod": 2,
                    "div_remainder": 1,
                    "divide_and_conquer": 2,
                    "divide_and_modulo": 1,
                    "divide_and_remainder": 3,
                    "divide_with_carry": 1,
                    "divide_with_remainder": 2,
                    "division_remainder": 1,
                    "division_with_remainder": 1,
                    "perform_division": 5
                },
                "LZCOUNT": {
                    "leading_zeros_count": 1
                },
                "bVar11": {
                    "carry": 12,
                    "carry_flag": 17,
                    "flag": 1
                },
                "iVar10": {
                    "shift": 8,
                    "shift_amount": 13,
                    "shift_count": 8
                },
                "lVar1": {
                    "product": 6,
                    "quotient": 2,
                    "result": 3,
                    "temp": 6,
                    "temp_result": 3,
                    "temp_variable": 1
                },
                "param_1": {
                    "dividend": 31
                },
                "param_1_0x10000": {
                    "dividend_top_half": 1
                },
                "param_1_0xffff": {
                    "dividend_bottom_half": 1
                },
                "param_2": {
                    "dividend_copy": 1,
                    "dividend_high": 1,
                    "dividend_low": 1,
                    "dividend_lower": 1,
                    "dividend_upper": 1,
                    "dividend_upper32_bits": 1,
                    "divisor": 21,
                    "quotient": 4
                },
                "param_2_0x10000": {
                    "divisor_top_half": 1
                },
                "param_2_0x20": {
                    "divisor_bit_count": 1
                },
                "param_2_0xffff": {
                    "divisor_bottom_half": 1
                },
                "param_3": {
                    "divisor": 10,
                    "q": 1,
                    "quotient": 16,
                    "temp": 2,
                    "temp1": 1,
                    "temp_dividend": 1
                },
                "param_3_0x10": {
                    "quotient_top_half": 1
                },
                "param_3_0x10000": {
                    "quotient_bottom_half": 1
                },
                "param_4": {
                    "divisor_high": 1,
                    "divisor_low": 1,
                    "divisor_lower": 1,
                    "divisor_upper": 1,
                    "divisor_upper32_bits": 1,
                    "r": 1,
                    "remainder": 23,
                    "temp2": 1,
                    "temp_divisor": 1
                },
                "uVar10": {
                    "loop_counter": 1,
                    "loop_index": 1
                },
                "uVar11": {
                    "carry_flag": 1
                },
                "uVar12": {
                    "dividend4": 1
                },
                "uVar13": {
                    "quotient5": 1
                },
                "uVar14": {
                    "dividend5": 1
                },
                "uVar15": {
                    "quotient6": 1
                },
                "uVar16": {
                    "dividend6": 1
                },
                "uVar17": {
                    "quotient7": 1
                },
                "uVar18": {
                    "dividend7": 1
                },
                "uVar19": {
                    "quotient8": 1
                },
                "uVar2": {
                    "current_divisor": 1,
                    "div_result": 1,
                    "dividend_quotient": 1,
                    "q1": 2,
                    "quotient1": 9,
                    "quotient_final": 1,
                    "quotient_low": 1,
                    "quotient_lower": 1,
                    "quotient_lower32_bits": 1,
                    "result": 4,
                    "result1": 1,
                    "shifted_dividend": 1,
                    "shifted_quotient": 1,
                    "shifted_remainder": 1,
                    "temp1": 2,
                    "temp_quotient_high": 1,
                    "temp_result": 1,
                    "temp_variable1": 1
                },
                "uVar20": {
                    "dividend8": 1
                },
                "uVar3": {
                    "current_quotient": 1,
                    "dividend_temp1": 1,
                    "divisor1": 3,
                    "divisor_high": 2,
                    "divisor_low": 1,
                    "divisor_lower16_bits": 1,
                    "divisor_upper": 1,
                    "q2": 2,
                    "quotient": 1,
                    "quotient1": 2,
                    "quotient2": 5,
                    "quotient_bits": 1,
                    "quotient_divisor": 1,
                    "quotient_guess": 1,
                    "quotient_high": 1,
                    "quotient_part1": 1,
                    "quotient_upper": 1,
                    "shifted_divisor": 1,
                    "shifted_quotient": 1,
                    "temp1": 1,
                    "temp6": 1,
                    "temp_quotient_low": 1
                },
                "uVar4": {
                    "divisor_dividend_count": 1,
                    "divisor_final1": 1,
                    "divisor_lower": 1,
                    "partial_quotient": 1,
                    "q3": 2,
                    "quotient2": 4,
                    "quotient3": 4,
                    "quotient_low": 1,
                    "quotient_mid": 1,
                    "quotient_multiplier": 1,
                    "remainder1": 4,
                    "remainder_lower32_bits": 1,
                    "remainder_part1": 1,
                    "remainder_tmp1": 1,
                    "result1": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp5": 2,
                    "temp_quotient_high2": 1,
                    "temp_variable2": 1
                },
                "uVar5": {
                    "current_remainder": 1,
                    "dividend1": 1,
                    "dividend_quotient": 1,
                    "divisor2": 2,
                    "divisor_low": 1,
                    "divisor_remainder_count": 1,
                    "mult_result_lower32_bits": 1,
                    "multiply1": 1,
                    "partial_product": 1,
                    "partial_quotient": 1,
                    "product1": 3,
                    "product_low": 1,
                    "q4": 2,
                    "quotient_part2": 1,
                    "remainder1": 2,
                    "remainder2": 1,
                    "remainder_guess": 1,
                    "remainder_low": 1,
                    "remainder_temp1": 1,
                    "remainder_tmp2": 1,
                    "result2": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_quotient_low2": 1
                },
                "uVar6": {
                    "dividend1": 1,
                    "dividend_shifted": 1,
                    "dividend_temp2": 1,
                    "dividend_top_half_shifted": 1,
                    "dividend_upper32_bits_shifted": 1,
                    "partial_product": 1,
                    "partial_remainder": 1,
                    "product2": 2,
                    "q5": 1,
                    "quotient3": 4,
                    "quotient_high": 1,
                    "remainder2": 2,
                    "remainder_part2": 1,
                    "result2": 1,
                    "result3": 1,
                    "shifted_dividend": 1,
                    "temp1": 4,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp_quotient_high3": 1,
                    "temp_var1": 1
                },
                "uVar7": {
                    "dividend2": 1,
                    "divisor3": 2,
                    "divisor_lower16_bits_repeated_quotient": 1,
                    "multiply2": 1,
                    "partial_remainder": 1,
                    "product3": 2,
                    "product_mid": 1,
                    "q6": 1,
                    "quotient1": 1,
                    "quotient2": 1,
                    "quotient_part": 1,
                    "quotient_part1": 1,
                    "quotient_part3": 1,
                    "remainder": 1,
                    "remainder3": 2,
                    "remainder_quotient": 1,
                    "result4": 1,
                    "subtracted_quotient": 1,
                    "temp2": 5,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_quotient": 1,
                    "temp_quotient_low3": 1,
                    "temp_var2": 1
                },
                "uVar8": {
                    "current_dividend": 1,
                    "dividend_quotient_high": 1,
                    "divisor1": 1,
                    "divisor_final2": 1,
                    "divisor_quotient": 1,
                    "num3": 1,
                    "partial_quotient1": 1,
                    "previous_quotient_part": 1,
                    "q7": 1,
                    "quotient": 3,
                    "quotient1_partial": 1,
                    "quotient4": 3,
                    "quotient_high": 1,
                    "quotient_part2": 1,
                    "quotient_upper": 1,
                    "quotient_upper32_bits": 1,
                    "r1": 1,
                    "remainder2": 1,
                    "remainder_part3": 1,
                    "temp1": 2,
                    "temp3": 2,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_quotient": 1,
                    "temp_variable3": 1
                },
                "uVar9": {
                    "dividend3": 1,
                    "dividend_lower16_bits": 1,
                    "dividend_remainder_count": 1,
                    "divisor4": 2,
                    "num4": 1,
                    "partial_remainder1": 1,
                    "product2": 1,
                    "q8": 1,
                    "quotient2": 2,
                    "quotient2_partial": 1,
                    "quotient_digit": 1,
                    "quotient_lower": 1,
                    "quotient_part3": 1,
                    "quotient_part4": 1,
                    "r2": 1,
                    "remainder": 1,
                    "remainder_high": 1,
                    "remainder_temp2": 1,
                    "temp": 1,
                    "temp2": 2,
                    "temp3": 2,
                    "temp4": 2,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_dividend": 1,
                    "temp_variable4": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008458c"
            ],
            "code": "\nulonglong calculate_quotient_remainder_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint quotient1;\n  uint quotient2;\n  uint quotient3;\n  uint product1;\n  uint quotient3;\n  uint temp2;\n  uint quotient;\n  uint divisor4;\n  int shift_amount;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_amount = leading_zeros_count(quotient);\n      if (shift_amount == 0) {\n        divisor = divisor - quotient;\n        quotient2 = quotient >> 0x10;\n        product1 = quotient & 0xffff;\n        quotient1 = 1;\n      }\n      else {\n        quotient = quotient << shift_amount;\n        quotient = divisor >> (0x20U - shift_amount & 0xff);\n        quotient2 = quotient >> 0x10;\n        divisor4 = quotient / quotient2;\n        product1 = quotient & 0xffff;\n        quotient1 = product1 * divisor4;\n        quotient3 = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        quotient3 = quotient3 >> 0x10 | (quotient - quotient2 * divisor4) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient = divisor4;\n        if (quotient3 <= quotient1 && quotient1 - quotient3 != 0) {\n          carry_flag = carry4(quotient3,quotient);\n          quotient3 = quotient3 + quotient;\n          quotient = divisor4 - 1;\n          if ((carry_flag == false) && (quotient3 <= quotient1 && quotient1 - quotient3 != 0)) {\n            quotient = divisor4 - 2;\n            quotient3 = quotient3 + quotient;\n          }\n        }\n        temp2 = (quotient3 - quotient1) / quotient2;\n        divisor4 = product1 * temp2;\n        divisor = quotient3 & 0xffff | ((quotient3 - quotient1) - quotient2 * temp2) * 0x10000;\n        quotient1 = temp2;\n        if (divisor <= divisor4 && divisor4 - divisor != 0) {\n          carry_flag = carry4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient1 = temp2 - 1;\n          if ((carry_flag == false) && (divisor <= divisor4 && divisor4 - divisor != 0)) {\n            quotient1 = temp2 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - divisor4;\n        quotient1 = quotient1 | quotient << 0x10;\n      }\n      divisor4 = divisor / quotient2;\n      quotient3 = product1 * divisor4;\n      quotient3 = dividend >> 0x10 | (divisor - quotient2 * divisor4) * 0x10000;\n      quotient = divisor4;\n      if (quotient3 <= quotient3 && quotient3 - quotient3 != 0) {\n        carry_flag = carry4(quotient3,quotient);\n        quotient3 = quotient3 + quotient;\n        quotient = divisor4 - 1;\n        if ((carry_flag == false) && (quotient3 <= quotient3 && quotient3 - quotient3 != 0)) {\n          quotient = divisor4 - 2;\n          quotient3 = quotient3 + quotient;\n        }\n      }\n      divisor4 = (quotient3 - quotient3) / quotient2;\n      product1 = product1 * divisor4;\n      quotient3 = dividend & 0xffff | ((quotient3 - quotient3) - quotient2 * divisor4) * 0x10000;\n      quotient2 = divisor4;\n      if (quotient3 <= product1 && product1 - quotient3 != 0) {\n        quotient2 = divisor4 - 1;\n        if ((carry4(quotient3,quotient) == false) &&\n           (quotient3 + quotient <= product1 && product1 - (quotient3 + quotient) != 0)) {\n          quotient2 = divisor4 - 2;\n        }\n      }\n      return CONCAT44(quotient1,quotient2 | quotient << 0x10);\n    }\n    shift_amount = leading_zeros_count(quotient);\n    if (shift_amount != 0) {\n      quotient = dividend >> (0x20U - shift_amount & 0xff);\n      quotient = quotient << shift_amount;\n      dividend = dividend << shift_amount;\n      divisor = quotient | divisor << shift_amount;\n    }\n    quotient1 = quotient >> 0x10;\n    quotient2 = divisor / quotient1;\n    product1 = (quotient & 0xffff) * quotient2;\n    divisor4 = dividend >> 0x10 | (divisor - quotient1 * quotient2) * 0x10000;\n    quotient = quotient2;\n    if (divisor4 <= product1 && product1 - divisor4 != 0) {\n      carry_flag = carry4(divisor4,quotient);\n      divisor4 = divisor4 + quotient;\n      quotient = quotient2 - 1;\n      if ((carry_flag == false) && (divisor4 <= product1 && product1 - divisor4 != 0)) {\n        quotient = quotient2 - 2;\n        divisor4 = divisor4 + quotient;\n      }\n    }\n    quotient3 = (divisor4 - product1) / quotient1;\n    quotient2 = (quotient & 0xffff) * quotient3;\n    product1 = dividend & 0xffff | ((divisor4 - product1) - quotient1 * quotient3) * 0x10000;\n    quotient1 = quotient3;\n    if (product1 <= quotient2 && quotient2 - product1 != 0) {\n      quotient1 = quotient3 - 1;\n      if ((carry4(product1,quotient) == false) &&\n         (product1 + quotient <= quotient2 && quotient2 - (product1 + quotient) != 0)) {\n        quotient1 = quotient3 - 2;\n      }\n    }\n    quotient1 = quotient1 | quotient << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift_amount = leading_zeros_count(remainder);\n    if (shift_amount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      quotient1 = 0;\n    }\n    else {\n      quotient1 = 0x20 - shift_amount;\n      quotient = divisor >> (quotient1 & 0xff);\n      quotient2 = remainder << shift_amount | quotient >> (quotient1 & 0xff);\n      product1 = quotient2 >> 0x10;\n      quotient3 = quotient / product1;\n      divisor4 = (quotient2 & 0xffff) * quotient3;\n      quotient3 = dividend >> (quotient1 & 0xff) | divisor << shift_amount;\n      quotient1 = quotient3 >> 0x10 | (quotient - product1 * quotient3) * 0x10000;\n      quotient = quotient3;\n      if (quotient1 <= divisor4 && divisor4 - quotient1 != 0) {\n        carry_flag = carry4(quotient1,quotient2);\n        quotient1 = quotient1 + quotient2;\n        quotient = quotient3 - 1;\n        if ((carry_flag == false) && (quotient1 <= divisor4 && divisor4 - quotient1 != 0)) {\n          quotient = quotient3 - 2;\n          quotient1 = quotient1 + quotient2;\n        }\n      }\n      quotient3 = (quotient1 - divisor4) / product1;\n      temp2 = (quotient2 & 0xffff) * quotient3;\n      product1 = quotient3 & 0xffff | ((quotient1 - divisor4) - product1 * quotient3) * 0x10000;\n      quotient1 = quotient3;\n      if (product1 <= temp2 && temp2 - product1 != 0) {\n        carry_flag = carry4(product1,quotient2);\n        product1 = product1 + quotient2;\n        quotient1 = quotient3 - 1;\n        if ((carry_flag == false) && (product1 <= temp2 && temp2 - product1 != 0)) {\n          quotient1 = quotient3 - 2;\n          product1 = product1 + quotient2;\n        }\n      }\n      quotient1 = quotient1 | quotient << 0x10;\n      temp = (ulonglong)quotient1 * (ulonglong)(quotient << shift_amount);\n      quotient = (uint)((ulonglong)temp >> 0x20);\n      if ((product1 - temp2 < quotient) || ((product1 - temp2 == quotient && (dividend << shift_amount < (uint)temp)))\n         ) {\n        quotient1 = quotient1 - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient1;\n}\n\n",
            "current_name": "calculate_quotient_remainder_00084860",
            "entrypoint": "0x00084860",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "carry4",
                "FUN_00084860": "calculate_quotient_remainder_00084860",
                "LZCOUNT": "leading_zeros_count",
                "bVar11": "carry_flag",
                "iVar10": "shift_amount",
                "lVar1": "temp",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "quotient3",
                "uVar5": "product1",
                "uVar6": "quotient3",
                "uVar7": "temp2",
                "uVar8": "quotient",
                "uVar9": "divisor4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00085844": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00085844",
            "entrypoint": "0x00085844",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_000815ec"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00080c20",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "additional_data": {
                "FUNK_00080efe": {
                    "calculate_result": 1
                },
                "FUN_00080efe": {
                    "calculate_default_value": 2,
                    "calculate_return_value": 1,
                    "check_network_status": 1,
                    "fetch_value": 1,
                    "get_constant_value": 1,
                    "get_data": 1,
                    "get_return_value": 2,
                    "get_specific_value": 1,
                    "get_value": 4,
                    "perform_calculation": 1,
                    "perform_calculations": 1,
                    "retrieve_default_value": 1,
                    "retrieve_status": 2,
                    "retrieve_status_code": 1,
                    "retrieve_value": 6
                },
                "thunk_FUN_00080efe": {
                    "calculate_result": 1,
                    "get_default_value": 14,
                    "get_error_code": 2,
                    "get_network_status": 1,
                    "get_return_value": 5,
                    "get_status": 2,
                    "get_status_code": 1,
                    "initialize_data": 1,
                    "initialize_function": 1,
                    "initialize_return_value": 1,
                    "return_constant_value": 1
                }
            },
            "called": [
                "FUN_00080efe"
            ],
            "calling": [
                "FUN_000841e4"
            ],
            "code": "\nundefined4 get_default_value_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "current_name": "get_default_value_thunk_00080efe",
            "entrypoint": "0x0008421c",
            "imported": false,
            "improved": true,
            "renaming": {
                "thunk_FUN_00080efe": "get_default_value_thunk_00080efe"
            },
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "additional_data": {
                "0x2d": {
                    "negative_sign": 1
                },
                "FUN_000810cc": {
                    "print_character": 5,
                    "write_character": 1
                },
                "FUN_000810fc": {
                    "convert_num_to_str": 1,
                    "convert_number": 1,
                    "convert_value": 2,
                    "parse_integer_recursive": 1,
                    "print_number": 1
                },
                "iVar1": {
                    "formatted_number": 1,
                    "result": 28,
                    "return_value": 2
                },
                "iVar2": {
                    "neg_value": 1,
                    "negative": 2,
                    "negative_digits": 1,
                    "negative_flag": 4,
                    "negative_number": 1,
                    "negative_offset": 1,
                    "negative_prefix_length": 1,
                    "negative_result": 10,
                    "negative_sign": 1,
                    "negative_value": 5,
                    "reversed_value": 1,
                    "sign": 2,
                    "sign_length": 1
                },
                "param_1": {
                    "array": 1,
                    "array_ptr": 1,
                    "base_converter": 1,
                    "buffer": 3,
                    "conversion_table": 1,
                    "converter": 1,
                    "data": 2,
                    "data_array": 1,
                    "decimal_array": 1,
                    "format_string": 3,
                    "function_pointer": 2,
                    "input": 1,
                    "input_buffer": 1,
                    "input_ptr": 1,
                    "number_format": 1,
                    "output_buffer": 4,
                    "param_array": 1,
                    "param_list": 1,
                    "pointer": 1,
                    "str_param": 1,
                    "string_ptr": 1,
                    "target_function_pointer": 1
                },
                "param_2": {
                    "input": 1,
                    "input_value": 2,
                    "num_param": 1,
                    "number": 16,
                    "value": 10,
                    "value1": 1
                },
                "param_3": {
                    "base": 25,
                    "format": 2,
                    "output_base": 1,
                    "radix": 2,
                    "value2": 1
                },
                "param_4": {
                    "additional_param": 2,
                    "extra": 2,
                    "extra_param": 7,
                    "extra_parameter": 1,
                    "flag": 1,
                    "flags": 1,
                    "param": 4,
                    "param_4": 10,
                    "size_of_buffer": 1,
                    "unknown_param": 1,
                    "value3": 1
                },
                "thunk_FUN_0008113a": {
                    "convert_base_to_decimal": 1,
                    "convert_number": 1,
                    "convert_number_to_string": 3,
                    "convert_param_to_str": 1,
                    "convert_to_base": 1,
                    "convert_to_int_with_base": 1,
                    "convert_value": 1,
                    "decode_and_convert": 2,
                    "decode_and_format_number": 1,
                    "format_and_convert": 1,
                    "format_and_print_number": 3,
                    "format_number": 7,
                    "formatted_number_converter": 1,
                    "handle_param": 1,
                    "parse_integer": 1,
                    "process_number": 1,
                    "process_param": 1,
                    "process_value": 1,
                    "translate_number": 1
                }
            },
            "called": [
                "FUN_0008113a"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint format_and_print_number_thunk_0008113a(undefined4 *output_buffer,uint number,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negative_result;\n  \n  if (base == 0) {\n    result = (**(code **)*output_buffer)(output_buffer,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = FUN_000810cc(output_buffer,0x2d);\n      negative_result = FUN_000810fc(output_buffer,-number,10);\n      return negative_result + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = FUN_000810fc(output_buffer,number,base,param_4);\n  return result;\n}\n\n",
            "current_name": "format_and_print_number_thunk_0008113a",
            "entrypoint": "0x00081176",
            "imported": false,
            "improved": true,
            "renaming": {
                "iVar1": "result",
                "iVar2": "negative_result",
                "param_1": "output_buffer",
                "param_2": "number",
                "param_3": "base",
                "thunk_FUN_0008113a": "format_and_print_number_thunk_0008113a"
            },
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "additional_data": {
                "DAT_2007120c": {
                    "constant_value": 1,
                    "data": 2,
                    "data_value": 1,
                    "global_variable_value": 1,
                    "stored_value": 1
                },
                "FUN_000816d8": {
                    "get_dat_2007120c": 1,
                    "get_data": 1,
                    "get_data_helper": 1,
                    "get_data_internal": 1,
                    "get_global_variable_helper": 2,
                    "get_global_variable_impl": 1,
                    "get_local_data": 2,
                    "get_local_value": 4,
                    "get_local_variable": 2,
                    "get_stored_value": 1,
                    "get_value_helper": 1,
                    "retrieve_dat_value": 1,
                    "retrieve_data": 4,
                    "retrieve_global_value": 1,
                    "retrieve_value": 1
                },
                "thunk_FUN_000816d8": {
                    "get_constant_value": 1,
                    "get_dat_2007120c": 1,
                    "get_dat_value": 1,
                    "get_data": 6,
                    "get_data_ptr": 1,
                    "get_data_value": 5,
                    "get_global_data": 2,
                    "get_global_value": 5,
                    "get_global_variable": 5,
                    "get_global_variable_value": 1,
                    "get_stored_value": 1,
                    "get_value": 2
                }
            },
            "called": [
                "FUN_000816d8"
            ],
            "calling": [
                "FUN_000811e8"
            ],
            "code": "\nundefined4 get_data_value_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "current_name": "get_data_value_thunk_000816d8",
            "entrypoint": "0x00080f04",
            "imported": false,
            "improved": true,
            "renaming": {
                "thunk_FUN_000816d8": "get_data_value_thunk_000816d8"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801e0",
            "FUN_00080250",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_000805a8",
            "FUN_000806a0",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b2c",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_000810a6",
            "FUN_000810c4",
            "FUN_000810cc",
            "FUN_000810d8",
            "FUN_000810e8",
            "FUN_000810fc",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_0008117a",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_0008159e",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_000815ec",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_000836ec",
            "FUN_00083850",
            "FUN_00083888",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_000841e4",
            "thunk_FUN_00080efe",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 483145
}