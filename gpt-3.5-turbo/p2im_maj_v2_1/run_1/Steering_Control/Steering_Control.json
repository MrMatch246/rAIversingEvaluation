{
    "functions": {
        "FUN_000800f4": {
            "additional_data": {
                "DAT_200708a0": {
                    "flag": 13
                },
                "FUN_000800f4": {
                    "initialize_flag": 28,
                    "initialize_flag_if_unset": 1,
                    "initialize_status": 1,
                    "set_flag_if_not_set": 1
                },
                "param_1": {
                    "input": 9,
                    "input_param": 2,
                    "input_value": 16,
                    "status": 1,
                    "value": 3
                }
            },
            "called": [],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initialize_flag_if_unset_000800f4(undefined4 input_value)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "current_name": "initialize_flag_if_unset_000800f4",
            "entrypoint": "0x000800f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000800f4": "initialize_flag_if_unset_000800f4",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080118": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080118",
            "entrypoint": "0x00080118",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080164": {
            "additional_data": {
                "FUN_00080164": {
                    "calculate_and_store_linear_interpolation": 1,
                    "calculate_interpolated_values": 2,
                    "calculate_interpolation": 6,
                    "calculate_interpolations": 4,
                    "calculate_linear_interpolation": 3,
                    "interpolate_data": 4,
                    "interpolate_linear_values": 1,
                    "interpolate_values": 5,
                    "linear_interpolation": 3,
                    "perform_interpolation": 1,
                    "perform_linear_interpolation": 1
                },
                "calculate_linear_interpolation_000806f8": {
                    "calculate_linear_interpolation": 1
                },
                "param_1": {
                    "arg1": 3,
                    "data1": 1,
                    "first_param": 2,
                    "input1": 3,
                    "input_parameter_1": 1,
                    "interpolation_data_1": 1,
                    "interpolation_param1": 1,
                    "interpolation_param_1": 2,
                    "param1": 1,
                    "param_1": 2,
                    "start_address": 1,
                    "start_value": 1,
                    "undefined_param_1": 1,
                    "unknown_param1": 1,
                    "unused": 1,
                    "unused_1": 1,
                    "unused_param": 4,
                    "unused_param1": 3
                },
                "param_2": {
                    "arg2": 3,
                    "data2": 1,
                    "end_address": 1,
                    "end_value": 1,
                    "input2": 3,
                    "input_parameter_2": 1,
                    "interpolation_data_2": 1,
                    "interpolation_param2": 1,
                    "interpolation_param_2": 2,
                    "param2": 1,
                    "param_2": 2,
                    "second_param": 2,
                    "undefined_param_2": 1,
                    "unknown_param2": 1,
                    "unused": 1,
                    "unused_2": 1,
                    "unused_param": 4,
                    "unused_param2": 3
                },
                "param_3": {
                    "arg3": 3,
                    "input_param_1": 1,
                    "input_parameter_3": 1,
                    "input_value_1": 2,
                    "interpolated_value_1": 1,
                    "interpolation1": 2,
                    "interpolation_param1": 3,
                    "interpolation_param3": 1,
                    "interpolation_param_3": 2,
                    "interpolation_value1": 2,
                    "output1": 1,
                    "param3": 1,
                    "param_3": 1,
                    "param_x": 1,
                    "start_value": 4,
                    "third_param": 2,
                    "undefined_param_3": 1,
                    "unknown_param3": 1,
                    "value1": 1
                },
                "param_4": {
                    "arg4": 3,
                    "end_value": 4,
                    "fourth_param": 2,
                    "input_param_2": 1,
                    "input_parameter_4": 1,
                    "input_value_2": 2,
                    "interpolated_value_2": 1,
                    "interpolation2": 2,
                    "interpolation_param2": 3,
                    "interpolation_param4": 1,
                    "interpolation_param_4": 2,
                    "interpolation_value2": 2,
                    "output2": 1,
                    "param4": 1,
                    "param_4": 1,
                    "param_y": 1,
                    "undefined_param_4": 1,
                    "unknown_param4": 1,
                    "value2": 1
                }
            },
            "called": [
                "FUN_000806f8"
            ],
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "code": "\nvoid calculate_and_store_linear_interpolation_00080164(undefined4 unused_param,undefined4 unused_param,undefined4 start_value,undefined4 end_value)\n\n{\n  calculate_linear_interpolation(&DAT_200708e8,0x5a);\n  calculate_linear_interpolation(&DAT_200708d4,0x5a,start_value,end_value);\n  return;\n}\n\n",
            "current_name": "calculate_and_store_linear_interpolation_00080164",
            "entrypoint": "0x00080164",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080164": "calculate_and_store_linear_interpolation_00080164",
                "calculate_linear_interpolation_000806f8": "calculate_linear_interpolation",
                "param_1": "unused_param",
                "param_2": "unused_param",
                "param_3": "start_value",
                "param_4": "end_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000801e0": {
            "additional_data": {
                "DAT_200708bc": {
                    "interrupt_condition": 1,
                    "interrupt_flag": 1,
                    "interrupt_status": 3
                },
                "DAT_200708d4": {
                    "tc_channel1": 1,
                    "tc_channel_1": 3,
                    "tc_channel_data_1": 1
                },
                "DAT_200708e8": {
                    "tc_channel2": 1,
                    "tc_channel_2": 3,
                    "tc_channel_data_2": 1
                },
                "DAT_20070be8": {
                    "data_structure": 5
                },
                "FUNC_00080f08": {
                    "execute_delay": 1,
                    "execute_function": 6,
                    "execute_task": 1,
                    "function_00080f08": 1,
                    "initialize_timer": 1,
                    "perform_action": 2,
                    "perform_additional_operations": 1,
                    "perform_additional_task": 2,
                    "perform_operation": 4,
                    "process_data": 1,
                    "process_device_data": 1,
                    "wait_for_device": 1
                },
                "FUN_000801e0": {
                    "configure_and_check_parameters": 1,
                    "initialize_and_configure": 3,
                    "initialize_and_configure_device": 8,
                    "initialize_and_configure_system": 18,
                    "initialize_and_update_configuration": 1
                },
                "calculate_and_store_linear_interpolation_00080164": {
                    "calculate_and_store_interpolation": 1,
                    "calculate_and_store_linear_interp": 1,
                    "calculate_and_store_linear_interpolation": 16,
                    "calculate_linear_interpolation": 3,
                    "calculate_store_linear_interpolation": 1
                },
                "initialize_data_structure_000813dc": {
                    "initialize_data_structure": 20,
                    "initialize_device_data_structure": 1
                },
                "param_1": {
                    "config_1": 1,
                    "config_param_1": 2,
                    "data_structure_param": 1,
                    "device_param_1": 1,
                    "device_parameter_1": 1,
                    "initial_value": 1,
                    "initialization_param1": 1,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "param1": 2,
                    "param_1": 1,
                    "subsystem_param": 1,
                    "unknown_param_1": 1,
                    "unused_param": 3,
                    "unused_param1": 1,
                    "unused_param_1": 8,
                    "unused_parameter_1": 1,
                    "width": 1
                },
                "param_2": {
                    "config_2": 1,
                    "config_param_2": 2,
                    "device_param": 1,
                    "device_param_2": 1,
                    "device_parameter_2": 1,
                    "height": 1,
                    "initialization_param2": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "param2": 2,
                    "param_2": 2,
                    "some_value": 1,
                    "unknown_param_2": 1,
                    "unused_param": 3,
                    "unused_param2": 1,
                    "unused_param_2": 8,
                    "unused_parameter_2": 1
                },
                "param_3": {
                    "config_param_1": 3,
                    "config_param_3": 2,
                    "config_parameter_1": 1,
                    "config_value_1": 1,
                    "data_param1": 1,
                    "data_param_1": 4,
                    "device_id": 1,
                    "device_param_3": 1,
                    "device_parameter_3": 1,
                    "device_type": 1,
                    "initialization_param3": 1,
                    "input_param3": 1,
                    "input_param_1": 1,
                    "input_param_3": 1,
                    "num_channels": 1,
                    "param3": 2,
                    "param_3": 5,
                    "param_3_device_id": 1,
                    "system_param_1": 1,
                    "unused_param_3": 1
                },
                "param_4": {
                    "channel_config": 1,
                    "config_param_2": 3,
                    "config_param_4": 2,
                    "config_parameter_2": 1,
                    "config_value_2": 1,
                    "configuration_flags": 1,
                    "data_param2": 1,
                    "data_param_2": 4,
                    "device_id": 1,
                    "device_param_4": 1,
                    "device_parameter_4": 1,
                    "initialization_param4": 1,
                    "input_param4": 1,
                    "input_param_2": 1,
                    "input_param_4": 1,
                    "param4": 2,
                    "param_4": 5,
                    "param_4_configuration": 1,
                    "system_param_2": 1,
                    "unused_param_4": 1
                },
                "return": {
                    "exit": 1
                },
                "software_interrupt": {
                    "perform_software_interrupt": 2,
                    "trigger_interrupt": 9,
                    "trigger_software_interrupt": 6
                },
                "update_and_configure_tc_channel_000806a0": {
                    "configure_tc_channel": 1,
                    "update_and_configure_tc_channel": 19,
                    "update_and_configure_timer_channel": 1,
                    "update_configure_tc_channel": 1
                },
                "update_parameter_and_return_value_00080f0c": {
                    "update_device_parameter": 1,
                    "update_param_and_return_val": 1,
                    "update_param_and_return_value": 2,
                    "update_param_return_value": 1,
                    "update_parameter": 8,
                    "update_parameter_and_get_return_value": 1,
                    "update_parameter_and_return_value": 8
                }
            },
            "called": [
                "FUN_00080f08",
                "FUN_00080f0c",
                "FUN_000806a0",
                "FUN_00080164",
                "FUN_000813dc"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nundefined8 initialize_and_configure_system_000801e0(undefined4 unused_param_1,undefined4 unused_param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_data_structure(&DAT_20070be8,0xe100,param_3,param_4,param_4);\n  update_parameter(0xd,1);\n  update_parameter(6,1);\n  update_parameter(0x39,0);\n  update_parameter(4,0);\n  update_parameter(3,0);\n  update_parameter(2,0);\n  update_and_configure_tc_channel(&DAT_200708d4,5);\n  update_and_configure_tc_channel(&DAT_200708e8,6);\n  calculate_and_store_linear_interpolation();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    trigger_interrupt(0x3f);\n    exit 1;\n  }\n  exit 0;\n}\n\n",
            "current_name": "initialize_and_configure_system_000801e0",
            "entrypoint": "0x000801e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000801e0": "initialize_and_configure_system_000801e0",
                "calculate_and_store_linear_interpolation_00080164": "calculate_and_store_linear_interpolation",
                "initialize_data_structure_000813dc": "initialize_data_structure",
                "param_1": "unused_param_1",
                "param_2": "unused_param_2",
                "return": "exit",
                "software_interrupt": "trigger_interrupt",
                "update_and_configure_tc_channel_000806a0": "update_and_configure_tc_channel",
                "update_parameter_and_return_value_00080f0c": "update_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080250": {
            "additional_data": {
                "DAT_200708c0": {
                    "result_value": 2
                },
                "DAT_200708c4": {
                    "control_flag": 1,
                    "flag": 1
                },
                "DAT_200708d4": {
                    "value2": 1
                },
                "DAT_200708d8": {
                    "interpolation_value_2": 1
                },
                "DAT_200708dc": {
                    "string1": 1
                },
                "DAT_200708e8": {
                    "interpolation_value_1": 1,
                    "value1": 1
                },
                "DAT_200708eb": {
                    "control_mode": 1,
                    "manual_control_mode_flag": 1
                },
                "DAT_200708ec": {
                    "interpolation_value_3": 1
                },
                "FUNC_00080f08": {
                    "execute_function": 6,
                    "perform_action": 15,
                    "perform_operation": 1,
                    "set_control_mode": 5,
                    "set_flag": 1,
                    "update_control": 1
                },
                "FUN_00080250": {
                    "control_function": 10,
                    "control_mode": 3,
                    "control_mode_action": 1,
                    "control_mode_handler": 1,
                    "control_mode_switch": 2,
                    "control_module": 2,
                    "control_system": 11,
                    "improve_control_system": 1
                },
                "LAB_00080346": {
                    "autonomous_control_mode": 2
                },
                "LAB_0008039c": {
                    "condition_check": 1,
                    "motor_control_mode": 1
                },
                "auStack_1c": {
                    "buffer": 3,
                    "interpolation_data": 1,
                    "stack_buffer": 1,
                    "temp_buffer": 1,
                    "temporary_buffer": 1
                },
                "calculate_and_store_linear_interpolation_00080164": {
                    "calculate_and_store_interpolation": 24,
                    "calculate_and_store_interpolation2": 1,
                    "calculate_and_store_linear_interpolation": 2,
                    "calculate_linear_interpolation": 1,
                    "linear_interpolation": 1
                },
                "calculate_difference_and_mask_00081248": {
                    "calculate_difference_and_mask": 29
                },
                "calculate_linear_interpolation_000806f8": {
                    "calculate_interpolation": 9,
                    "calculate_interpolation2": 1,
                    "calculate_linear_interpolation": 13,
                    "calculate_linear_interpolation2": 3,
                    "interpolate_values": 1,
                    "linear_interpolation": 2
                },
                "calculate_linear_interpolation_0008145c": {
                    "calculate_interpolation": 11,
                    "calculate_linear_interpolation": 16,
                    "interpolate_values": 1,
                    "linear_interpolation": 1
                },
                "calculate_result_00081624": {
                    "calculate_result": 29
                },
                "calculate_sum_000810e8": {
                    "calculate_sum": 28,
                    "calculate_sum_and_store": 1
                },
                "calculate_sum_with_conversion_0008117a": {
                    "calculate_sum_with_conversion": 29
                },
                "check_and_copy_string_00081560": {
                    "check_and_copy_string": 29
                },
                "compare_array_and_return_result_000815b8": {
                    "compare_array_and_return_result": 29
                },
                "execute_function_if_non_zero_000810c4": {
                    "execute_function_if_non_zero": 28,
                    "execute_if_non_zero": 1
                },
                "extract_byte_from_buffer_00081276": {
                    "extract_byte_from_buffer": 29
                },
                "iVar2": {
                    "comparison_result": 1,
                    "difference": 4,
                    "result": 1,
                    "result2": 1
                },
                "parse_integer_from_bytes_000815de": {
                    "parse_int_from_bytes": 2,
                    "parse_integer_from_bytes": 27
                },
                "process_and_update_data_00081214": {
                    "process_and_update_data": 29
                },
                "puVar3": {
                    "output_buffer": 1,
                    "parameter_ptr": 1,
                    "pointer": 1,
                    "pointer3": 1,
                    "ptr": 1,
                    "updated_variable": 1
                },
                "thunk_convert_number_to_base_with_sign_0008113a": {
                    "convert_number": 1,
                    "convert_number_to_base": 9,
                    "convert_number_to_base_with_sign": 19
                },
                "uVar1": {
                    "interpolation_value": 1,
                    "parsed_integer": 1,
                    "result": 3,
                    "result1": 1
                },
                "update_and_reverse_memory_offset_00081472": {
                    "update_and_reverse_memory_offset": 19,
                    "update_and_reverse_offset": 10
                },
                "update_parameter_and_return_value_00081014": {
                    "update_and_get_parameter": 1,
                    "update_and_return_value": 1,
                    "update_param_and_return_value": 1,
                    "update_parameter": 2,
                    "update_parameter_and_return": 2,
                    "update_parameter_and_return_value": 22
                }
            },
            "called": [
                "FUN_00081472",
                "FUN_00080164",
                "FUN_000810e8",
                "thunk_FUN_0008113a",
                "FUN_0008145c",
                "FUN_00081248",
                "FUN_000810c4",
                "FUN_00080f08",
                "FUN_00081214",
                "FUN_000815b8",
                "FUN_0008117a",
                "FUN_000806f8",
                "FUN_000815de",
                "FUN_00081014",
                "FUN_00081624",
                "FUN_00081276",
                "FUN_00081560"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid improve_control_system_00080250(void)\n\n{\n  undefined4 result;\n  int difference;\n  undefined *pointer3;\n  undefined buffer [12];\n  \n  DAT_200708c0 = calculate_result(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  update_parameter_and_return_value(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        calculate_and_store_interpolation();\n        calculate_sum(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      result = calculate_result(3,1,20000);\n      DAT_200708d8 = calculate_linear_interpolation(0,1000,2000,0x28,0x96);\n      DAT_200708ec = calculate_linear_interpolation(result,1000,2000,0x28,0x96);\n      while (difference = calculate_difference_and_mask(&DAT_20070be8), 0 < difference) {\n        extract_byte_from_buffer(&DAT_20070be8);\n        convert_number_to_base_with_sign(&DAT_20070be8,DAT_200708d8,10);\n        execute_function_if_non_zero(&DAT_20070be8,&DAT_00084b13);\n        calculate_sum_with_conversion(&DAT_20070be8,DAT_200708ec,10);\n      }\n      calculate_linear_interpolation(&DAT_200708e8,DAT_200708ec);\n      calculate_linear_interpolation(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        calculate_and_store_interpolation();\n        calculate_sum(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nautonomous_control_mode:\n      difference = calculate_difference_and_mask(&DAT_20070be8);\n      if (0 < difference) {\n        process_and_update_data(buffer,&DAT_20070be8,0x2c);\n        check_and_copy_string(&DAT_200708dc,buffer);\n        update_and_reverse_memory_offset(buffer);\n        process_and_update_data(buffer,&DAT_20070be8,10);\n        check_and_copy_string(&DAT_200708c8,buffer);\n        update_and_reverse_memory_offset(buffer);\n        extract_byte_from_buffer(&DAT_20070be8);\n        difference = compare_array_and_return_result(&DAT_200708dc,\"steer\");\n        if (difference == 0) goto motor_control_mode;\n        result = parse_integer_from_bytes(&DAT_200708c8);\n        pointer3 = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    calculate_and_store_interpolation();\n    calculate_sum(&DAT_20070be8,\"error\");\n  }\n  return;\nmotor_control_mode:\n  difference = compare_array_and_return_result(&DAT_200708dc,\"motor\");\n  if (difference != 0) {\n    result = parse_integer_from_bytes(&DAT_200708c8);\n    pointer3 = &DAT_200708e8;\nLAB_000803b2:\n    calculate_linear_interpolation(pointer3,result);\n  }\n  goto autonomous_control_mode;\n}\n\n",
            "current_name": "improve_control_system_00080250",
            "entrypoint": "0x00080250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080250": "improve_control_system_00080250",
                "LAB_00080346": "autonomous_control_mode",
                "LAB_0008039c": "motor_control_mode",
                "auStack_1c": "buffer",
                "calculate_and_store_linear_interpolation_00080164": "calculate_and_store_interpolation",
                "calculate_difference_and_mask_00081248": "calculate_difference_and_mask",
                "calculate_linear_interpolation_000806f8": "calculate_linear_interpolation",
                "calculate_linear_interpolation_0008145c": "calculate_linear_interpolation",
                "calculate_result_00081624": "calculate_result",
                "calculate_sum_000810e8": "calculate_sum",
                "calculate_sum_with_conversion_0008117a": "calculate_sum_with_conversion",
                "check_and_copy_string_00081560": "check_and_copy_string",
                "compare_array_and_return_result_000815b8": "compare_array_and_return_result",
                "execute_function_if_non_zero_000810c4": "execute_function_if_non_zero",
                "extract_byte_from_buffer_00081276": "extract_byte_from_buffer",
                "iVar2": "difference",
                "parse_integer_from_bytes_000815de": "parse_integer_from_bytes",
                "process_and_update_data_00081214": "process_and_update_data",
                "puVar3": "pointer3",
                "thunk_convert_number_to_base_with_sign_0008113a": "convert_number_to_base_with_sign",
                "uVar1": "result",
                "update_and_reverse_memory_offset_00081472": "update_and_reverse_memory_offset",
                "update_parameter_and_return_value_00081014": "update_parameter_and_return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000803fc": {
            "additional_data": {
                "FUN_000803fc": {
                    "configure_and_start_tc": 2,
                    "configure_and_start_tc_channel": 4,
                    "configure_and_start_timer": 1,
                    "configure_and_start_timers": 1,
                    "initialize_channel": 1,
                    "initialize_tc_channel": 5,
                    "initialize_timer_channel": 1,
                    "start_tc": 3,
                    "start_tc_channel": 12,
                    "start_timer": 1
                },
                "check_bit_and_set_00080aa8": {
                    "check_and_set_bit": 6,
                    "check_bit_and_set": 1
                },
                "configure_tc_channel_00080b2c": {
                    "configure_channel": 4,
                    "configure_tc_channel": 3
                },
                "execute_relocated_assertion_000816f8": {
                    "execute_assert": 1,
                    "execute_assertion": 6,
                    "execute_relocated_assertion": 1
                },
                "in_lr": {
                    "": 1,
                    "assertion_line": 1,
                    "auxiliary_data2": 1,
                    "dw_channel": 1,
                    "execute_relocated_assertion_param": 1,
                    "execution_address": 1,
                    "in_link_register": 1,
                    "incremental_value": 1,
                    "instruction_pointer": 2,
                    "interrupted_lr": 1,
                    "link_register": 2,
                    "local_variable_2": 1,
                    "previously_set_param": 1,
                    "register_2": 1,
                    "relocated_assertion_2": 1,
                    "relocated_assertion_arg2": 2,
                    "relocated_assertion_result": 1,
                    "temp2": 1,
                    "temp_value": 1,
                    "tmp2": 1,
                    "tmp_2": 1,
                    "unused_var": 2,
                    "unused_var2": 1,
                    "unused_variable2": 1
                },
                "param_1": {
                    "base_address": 1,
                    "channel": 2,
                    "channel_address": 1,
                    "channel_id": 10,
                    "channel_index": 11,
                    "channel_num": 2,
                    "channel_number": 1,
                    "channel_ptr": 1,
                    "timer_id": 1,
                    "timer_index": 1
                },
                "param_2": {
                    "channel_index": 5,
                    "channel_number": 1,
                    "dw_channel": 1,
                    "index": 2,
                    "param2": 1,
                    "param_val": 1,
                    "param_value": 18,
                    "value": 1,
                    "value1": 1
                },
                "param_3": {
                    "bit_and_set_param": 1,
                    "bit_mask": 2,
                    "bit_val": 1,
                    "bit_value": 2,
                    "bitmask_param": 1,
                    "check_value": 1,
                    "config_data": 1,
                    "config_param": 2,
                    "config_param1": 1,
                    "config_param_1": 1,
                    "config_value": 11,
                    "config_value_1": 1,
                    "configuration": 1,
                    "configuration_value": 1,
                    "device_address": 1,
                    "flag": 1,
                    "param_value_1": 1
                },
                "param_4": {
                    "bit_idx": 1,
                    "bit_index": 6,
                    "bit_mask": 2,
                    "bit_offset": 2,
                    "bit_position": 15,
                    "bit_position_param": 1,
                    "bit_shift": 1,
                    "config_param_2": 1,
                    "config_value_2": 1,
                    "param_value_2": 1
                },
                "set_param_value_00080b90": {
                    "set_param_value": 5,
                    "set_parameter_value": 1,
                    "set_value": 1
                },
                "uVar1": {
                    "combined_input": 1,
                    "combined_param": 3,
                    "combined_params": 11,
                    "combined_val": 1,
                    "combined_value": 4,
                    "combined_values": 4,
                    "concatenated_params": 1,
                    "result": 4
                },
                "unaff_r4": {
                    "": 1,
                    "assert_file_path": 1,
                    "assertion_file_path": 1,
                    "assertion_result": 1,
                    "auxiliary_data1": 1,
                    "bit_check_result": 1,
                    "config_value": 1,
                    "local_variable_1": 1,
                    "register_1": 1,
                    "relocated_assertion": 2,
                    "relocated_assertion_1": 1,
                    "relocated_assertion_arg1": 2,
                    "relocated_assertion_param": 1,
                    "reserved_register_4": 1,
                    "tc_channel_data": 1,
                    "temp1": 1,
                    "temp_register": 1,
                    "tmp1": 1,
                    "tmp_1": 1,
                    "unaff_param": 1,
                    "unaffected_r4": 2,
                    "unused_var": 2,
                    "unused_var1": 1,
                    "unused_variable1": 1
                }
            },
            "called": [
                "FUN_00080b90",
                "FUN_000816f8",
                "FUN_00080b2c",
                "FUN_00080aa8"
            ],
            "calling": [
                "FUN_000806a0"
            ],
            "code": "\nvoid configure_and_start_tc_channel_000803fc(int channel_index,uint param_value,undefined4 config_value,uint bit_position)\n\n{\n  undefined4 relocated_assertion_arg1;\n  undefined4 instruction_pointer;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(param_value,channel_index);\n  check_and_set_bit(config_value);\n  configure_channel(channel_index,param_value,0xc002);\n  set_param_value(channel_index,param_value,0xa41);\n  *(int *)((bit_position >> 5) * 4 + -0x1fff1f00) = 1 << (bit_position & 0x1f);\n  *(undefined4 *)(channel_index + param_value * 0x40 + 0x24) = 4;\n  if (2 < param_value) {\n    combined_params = execute_assertion(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         relocated_assertion_arg1,instruction_pointer);\n  }\n  *(undefined4 *)((int)combined_params + (int)((ulonglong)combined_params >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "current_name": "configure_and_start_tc_channel_000803fc",
            "entrypoint": "0x000803fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000803fc": "configure_and_start_tc_channel_000803fc",
                "check_bit_and_set_00080aa8": "check_and_set_bit",
                "configure_tc_channel_00080b2c": "configure_channel",
                "execute_relocated_assertion_000816f8": "execute_assertion",
                "in_lr": "instruction_pointer",
                "param_1": "channel_index",
                "param_2": "param_value",
                "param_3": "config_value",
                "param_4": "bit_position",
                "set_param_value_00080b90": "set_param_value",
                "uVar1": "combined_params",
                "unaff_r4": "relocated_assertion_arg1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008044c": {
            "additional_data": {
                "0x10": {
                    "old_data_offset": 1
                },
                "0x14": {
                    "new_data_offset": 1
                },
                "0x40": {
                    "offset_multiplier": 1
                },
                "0x80": {
                    "flag_check_mask": 1
                },
                "4": {
                    "bit_mask": 1
                },
                "DAT_200708f0": {
                    "data2": 1,
                    "limit_value": 1,
                    "lower_limit": 1,
                    "max_limit": 1,
                    "max_value": 1,
                    "status_array_size": 1
                },
                "DAT_200708f1": {
                    "data1": 1,
                    "flags": 1,
                    "flags_array": 1,
                    "status_array": 1
                },
                "DAT_200708f8": {
                    "data3": 1,
                    "parameter_array": 1,
                    "parameters": 1,
                    "parameters_array": 1
                },
                "DAT_200708fc": {
                    "values": 1,
                    "values_array": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_data": 1,
                    "elf_data_array": 1,
                    "rel_array": 3,
                    "relocation_array": 2,
                    "relocation_table": 1,
                    "unknown_array": 1
                },
                "FUN_0008044c": {
                    "process_data": 1,
                    "update_data": 2,
                    "update_flag_and_value": 3,
                    "update_flag_or_compute_value": 1,
                    "update_flag_or_set_value": 1,
                    "update_flag_or_value": 1,
                    "update_flags": 1,
                    "update_flags_and_values": 6,
                    "update_flags_or_set_value": 1,
                    "update_function": 1,
                    "update_param_and_return_value": 1,
                    "update_parameter": 1,
                    "update_parameter_and_return_value": 2,
                    "update_parameter_value": 2,
                    "update_parameters": 1,
                    "update_status": 2,
                    "update_value": 2,
                    "update_value_and_check_threshold": 1
                },
                "iVar2": {
                    "array_offset": 1,
                    "index": 1,
                    "index_mul": 1,
                    "index_multiplier": 1,
                    "index_offset": 3,
                    "iteration": 1,
                    "mul_var": 1,
                    "multiplier": 1,
                    "offset": 1,
                    "offset2": 2,
                    "offset_2": 1,
                    "offset_multiplier": 3,
                    "offset_multiply": 1,
                    "temp": 5,
                    "temp_index": 2,
                    "temp_var": 5,
                    "variable": 1
                },
                "input_2": {
                    "buffer": 1
                },
                "input_3": {
                    "index": 1
                },
                "param_1": {
                    "flag_index": 2,
                    "index": 27,
                    "input_1": 1,
                    "status_index": 1
                },
                "param_2": {
                    "array": 3,
                    "base_addr": 1,
                    "base_address": 1,
                    "buffer": 10,
                    "buffer_address": 1,
                    "buffer_base": 1,
                    "data": 7,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "input_2": 1,
                    "memory": 1
                },
                "param_3": {
                    "array_offset": 1,
                    "buffer_index": 1,
                    "buffer_offset": 3,
                    "input_3": 1,
                    "offset": 25
                },
                "uVar1": {
                    "data_size": 1,
                    "desired_value": 1,
                    "limit": 9,
                    "limit_var": 1,
                    "max_value": 11,
                    "size": 3,
                    "threshold": 3,
                    "upper_limit": 2
                },
                "update_parameter_and_return_value_00081014": {
                    "update_param_and_return": 2,
                    "update_parameter": 1,
                    "update_parameter_and_return_value": 8,
                    "update_parameter_value": 1,
                    "update_value": 6
                }
            },
            "called": [
                "FUN_00081014"
            ],
            "calling": [],
            "code": "\nvoid update_flags_and_values_0008044c(int index,int buffer,int offset)\n\n{\n  uint max_value;\n  int temp;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    temp = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + temp < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + temp) * 8] << 0x19) < 0\n       )) {\n      update_parameter_and_return_value((&DAT_200708f8)[(temp + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(buffer + offset) = *(uint *)(buffer + offset) | 4;\n  }\n  max_value = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  temp = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + temp < (int)max_value) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(buffer + offset + 0x14) =\n         *(int *)(buffer + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + temp) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + temp) * 8] << 0x19\n                  )) {\n      return;\n    }\n    update_parameter_and_return_value((&DAT_200708f8)[(temp + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  buffer = buffer + offset;\n  max_value = (rel_array[6].r_offset / 1000000) * 20000 >> 5;\n  if (max_value <= *(int *)(buffer + 0x10) + 4U) {\n    max_value = *(int *)(buffer + 0x10) + 4;\n  }\n  *(uint *)(buffer + 0x14) = max_value;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "current_name": "update_flags_and_values_0008044c",
            "entrypoint": "0x0008044c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_0008044c": "update_flags_and_values_0008044c",
                "iVar2": "temp",
                "param_1": "index",
                "param_2": "buffer",
                "param_3": "offset",
                "uVar1": "max_value",
                "update_parameter_and_return_value_00081014": "update_parameter_and_return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000805a8": {
            "additional_data": {
                "DAT_200708f0": {
                    "current_value": 1,
                    "input_value": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array_of_elf_relocations": 1,
                    "elf_relocations_array": 1,
                    "offset_array": 1,
                    "relocation_array": 4
                },
                "FUN_000805a8": {
                    "copy_and_calculate_offset": 1,
                    "copy_and_update_value": 1,
                    "decode_and_store_value": 1,
                    "decode_and_update_array": 1,
                    "extract_and_scale": 1,
                    "extract_and_store_relocation_value": 1,
                    "extract_and_store_value": 1,
                    "initialize_relocation_data": 1,
                    "parse_and_store_relocation_entry": 1,
                    "process_data": 5,
                    "store_rel_offset": 1,
                    "store_rel_offset_to_param": 1,
                    "update_byte": 1,
                    "update_current_value": 1,
                    "update_data": 1,
                    "update_offset": 1,
                    "update_param_and_offset": 1,
                    "update_relocation_entry": 3,
                    "update_relocation_offset": 1,
                    "update_relocation_table": 1,
                    "update_value": 3,
                    "write_relocation_entry": 1
                },
                "cVar1": {
                    "current_value": 2,
                    "incremented_relocation_size": 1,
                    "incremented_value": 4,
                    "new_byte": 1,
                    "new_char": 1,
                    "new_count": 1,
                    "new_counter": 2,
                    "new_value": 4,
                    "next_byte": 3,
                    "next_char": 2,
                    "next_counter": 1,
                    "next_data_count": 1,
                    "next_value": 6,
                    "updated_byte": 1,
                    "updated_value": 1
                },
                "param_1": {
                    "buffer": 2,
                    "data": 1,
                    "data_buffer": 2,
                    "destination_buffer": 1,
                    "output": 3,
                    "output_array": 2,
                    "output_buffer": 13,
                    "output_byte": 4,
                    "output_byte_pointer": 1,
                    "output_parameter": 1,
                    "result": 1
                },
                "uVar2": {
                    "count": 2,
                    "counter": 11,
                    "current_count": 1,
                    "current_offset": 2,
                    "current_value": 4,
                    "current_value_index": 1,
                    "data_count": 1,
                    "data_index": 1,
                    "data_value": 1,
                    "i": 1,
                    "index": 2,
                    "input_value_as_u_int": 1,
                    "offset": 1,
                    "old_counter": 1,
                    "relocation_size": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid process_data_000805a8(byte *output_buffer)\n\n{\n  char next_value;\n  uint counter;\n  \n  counter = (uint)DAT_200708f0;\n  if (counter < 0x3c) {\n    next_value = DAT_200708f0 + 1;\n    *output_buffer = DAT_200708f0;\n    DAT_200708f0 = next_value;\n    *(uint *)(&DAT_200708fc + counter * 8) =\n         (relocation_array[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *output_buffer = 0xff;\n  return;\n}\n\n",
            "current_name": "process_data_000805a8",
            "entrypoint": "0x000805a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_000805a8": "process_data_000805a8",
                "cVar1": "next_value",
                "param_1": "output_buffer",
                "uVar2": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000806a0": {
            "additional_data": {
                "FUN_000806a0": {
                    "configure_tc_channel": 1,
                    "update_and_configure": 1,
                    "update_and_configure_channel": 5,
                    "update_and_configure_tc": 1,
                    "update_and_configure_tc_channel": 11,
                    "update_and_configure_timer": 2,
                    "update_and_configure_timer_channel": 1,
                    "update_and_configure_timers": 1,
                    "update_and_return_byte_value": 2,
                    "update_and_return_parameter": 1,
                    "update_parameter_and_return_value": 3,
                    "update_parameter_value": 2
                },
                "LAB_00080652": {
                    "skip_configuration": 1
                },
                "LAB_00080660": {
                    "skip_update": 1
                },
                "bVar1": {
                    "buffer_value_modified": 1,
                    "byte_val": 2,
                    "byte_value": 7,
                    "byte_var": 1,
                    "channel_data": 1,
                    "channel_mask": 1,
                    "channel_value": 2,
                    "current_byte": 1,
                    "current_value": 1,
                    "existing_value": 1,
                    "flags": 1,
                    "old_value": 2,
                    "original_value": 3,
                    "result": 1,
                    "temp": 1,
                    "temp_byte": 2,
                    "temp_var": 1,
                    "updated_byte": 1,
                    "updated_value": 1
                },
                "configure_and_start_tc_channel_000803fc": {
                    "configure_and_start_tc_channel": 2
                },
                "iVar5": {
                    "counter": 19,
                    "i": 1,
                    "iteration": 1,
                    "iteration_count": 1,
                    "iterator": 1,
                    "loop_counter": 4,
                    "loop_index": 2,
                    "loop_var": 2
                },
                "param_1": {
                    "buffer": 2,
                    "data": 15,
                    "input": 2,
                    "input_array": 2,
                    "input_buffer": 2,
                    "input_data": 4,
                    "param_array": 1
                },
                "param_2": {
                    "channel_value": 1,
                    "config_value": 2,
                    "param": 11,
                    "param_value": 6,
                    "parameter": 2,
                    "value": 9
                },
                "uVar2": {
                    "address": 2,
                    "address_var": 1,
                    "base_addr": 1,
                    "base_address": 13,
                    "channel_base_address": 3,
                    "config_addr": 1,
                    "config_var1": 1,
                    "register1": 2,
                    "target_address": 1,
                    "tc_address": 1,
                    "tc_base_address": 1,
                    "timer_base": 2,
                    "timer_base_address": 1,
                    "uart_register": 1
                },
                "uVar3": {
                    "channel_index": 3,
                    "channel_number": 1,
                    "channel_offset": 1,
                    "data_index": 1,
                    "div_factor": 1,
                    "divide_result": 1,
                    "division_factor": 1,
                    "division_result": 1,
                    "index": 18,
                    "tc_channel": 1,
                    "timer_channel": 1,
                    "timer_channels": 1
                },
                "uVar4": {
                    "baud_rate_value": 1,
                    "channel": 2,
                    "channel_config": 2,
                    "channel_config1": 1,
                    "channel_number": 1,
                    "channel_value": 1,
                    "config1": 1,
                    "config_val": 2,
                    "config_value": 8,
                    "config_var2": 1,
                    "register2": 2,
                    "tc_config": 1,
                    "tc_value": 1,
                    "timer_count": 1,
                    "timer_value": 4,
                    "value": 1,
                    "value_var": 1
                },
                "uVar6": {
                    "array_element": 1,
                    "buffer_value": 2,
                    "byte_data": 2,
                    "byte_value": 2,
                    "channel_key": 1,
                    "data": 1,
                    "data_val": 2,
                    "data_value": 8,
                    "input_value": 5,
                    "param_value": 2,
                    "param_value_converted": 1,
                    "temp_value": 1,
                    "value": 3
                },
                "update_parameter_and_return_value_00080f0c": {
                    "update_parameter_and_return_value": 1
                }
            },
            "called": [
                "FUN_00080f0c",
                "FUN_000803fc"
            ],
            "calling": [
                "FUN_000801e0"
            ],
            "code": "\nbyte update_and_configure_tc_channel_000806a0(byte *data,undefined4 param)\n\n{\n  byte byte_value;\n  undefined4 base_address;\n  uint index;\n  undefined4 config_value;\n  int counter;\n  uint data_value;\n  \n  if (0x3b < *data) goto skip_update;\n  update_parameter_and_return_value(param,1,0x220,*data,0x960);\n  data_value = (uint)*data;\n  byte_value = (&DAT_200708f8)[data_value * 8];\n  data[2] = 0;\n  index = data_value / 0xc;\n  (&DAT_200708f8)[data_value * 8] = byte_value & 0xc0 | (byte)param & 0x3f;\n  data[1] = 0;\n  counter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(counter + index * 0xc) * 8] << 0x19) < 0)\n    goto skip_configuration;\n    counter = counter + 1;\n  } while (counter != 0xc);\n  if (index == 0) {\n    base_address = 0x40084000;\n    config_value = 0x1e;\nLAB_0008064c:\n    configure_and_start_tc_channel(base_address,index,config_value,config_value);\n  }\n  else {\n    if (index == 1) {\n      base_address = 0x40084000;\n      config_value = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (index == 2) {\n      base_address = 0x40084000;\n      config_value = 0x20;\n      goto LAB_0008064c;\n    }\n    if (index == 3) {\n      base_address = 0x40080000;\n      index = 2;\n      config_value = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (index == 4) {\n      base_address = 0x40080000;\n      index = 0;\n      config_value = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nskip_configuration:\n  (&DAT_200708f8)[(uint)*data * 8] = (&DAT_200708f8)[(uint)*data * 8] | 0x40;\nskip_update:\n  return *data;\n}\n\n",
            "current_name": "update_and_configure_tc_channel_000806a0",
            "entrypoint": "0x000806a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000806a0": "update_and_configure_tc_channel_000806a0",
                "LAB_00080652": "skip_configuration",
                "LAB_00080660": "skip_update",
                "bVar1": "byte_value",
                "configure_and_start_tc_channel_000803fc": "configure_and_start_tc_channel",
                "iVar5": "counter",
                "param_1": "data",
                "param_2": "param",
                "uVar2": "base_address",
                "uVar3": "index",
                "uVar4": "config_value",
                "uVar6": "data_value",
                "update_parameter_and_return_value_00080f0c": "update_parameter_and_return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000806f8": {
            "additional_data": {
                "DAT_200708fc": {
                    "output_array": 1,
                    "output_data": 1,
                    "result_array": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_rel_array": 2,
                    "rel_array": 1,
                    "relocation_array": 1,
                    "relocation_table": 1
                },
                "FUN_000806f8": {
                    "calculate_coefficient": 1,
                    "calculate_interp_factor": 1,
                    "calculate_interpolated_value": 1,
                    "calculate_interpolation": 2,
                    "calculate_interpolation_and_store": 1,
                    "calculate_linear_interpolation": 4,
                    "interpolate_and_calculate": 1,
                    "interpolate_and_store_value": 1,
                    "interpolate_and_store_values": 1,
                    "interpolate_data": 1,
                    "interpolate_parameter": 1,
                    "interpolate_values": 9,
                    "linear_interpolation": 6
                },
                "F_UN000806f8": {
                    "calculate_linear_interpolation": 1
                },
                "SBORROW4": {
                    "has_borrow": 1,
                    "has_signed_overflow": 1,
                    "has_subtraction_overflow": 1,
                    "is_borrowing": 1,
                    "is_subtract_borrow": 1,
                    "is_subtraction_borrowed": 1,
                    "is_subtraction_overflow": 2,
                    "signed_subtraction": 1
                },
                "calculate_linear_interpolation_0008145c": {
                    "calculate_interpolation": 4,
                    "calculate_linear_interpolation": 4,
                    "calculate_linear_interpolation_helper": 1,
                    "interpolate_values": 1,
                    "linear_interpolation": 1
                },
                "param_1": {
                    "buffer": 2,
                    "byte_array": 3,
                    "bytes_array": 1,
                    "data": 12,
                    "data_array": 1,
                    "data_buffer": 2,
                    "data_pointer": 1,
                    "input_array": 6,
                    "input_buffer": 2,
                    "input_data": 1
                },
                "param_2": {
                    "array_length": 5,
                    "array_size": 1,
                    "buffer_size": 1,
                    "data_length": 2,
                    "data_size": 2,
                    "input_length": 2,
                    "input_size": 2,
                    "length": 11,
                    "size": 5
                },
                "uVar1": {
                    "clamped_length": 7,
                    "clamped_size": 4,
                    "interpolated_size": 1,
                    "interpolated_value": 1,
                    "interpolation_size": 1,
                    "interpolation_value": 3
                },
                "uint": {
                    "unsigned_integer_type": 1
                }
            },
            "called": [
                "FUN_0008145c"
            ],
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "code": "\nvoid calculate_linear_interpolation_000806f8(byte *data,unsigned_integer_type length)\n\n{\n  unsigned_integer_type clamped_length;\n  \n  if ((int)length < 0x220) {\n    clamped_length = length;\n    if (0xb3 < (int)length) {\n      clamped_length = 0xb4;\n    }\n    length = calculate_interpolation(clamped_length & ~((int)clamped_length >> 0x1f),0,0xb4,(0x88 - (char)data[1]) * 4,\n                           (600 - (char)data[2]) * 4,length);\n  }\n  if (*data < 0x3c) {\n    clamped_length = (0x88 - (char)data[1]) * 4;\n    if (((int)(length + (0x88 - (char)data[1]) * -4) < 0 == is_subtraction_overflow(length,clamped_length)) &&\n       (clamped_length = (600 - (char)data[2]) * 4, (int)length <= (int)clamped_length)) {\n      clamped_length = length;\n    }\n    *(unsigned_integer_type *)(&DAT_200708fc + (unsigned_integer_type)*data * 8) =\n         (elf_rel_array[6].r_offset / 1000000) * (clamped_length - 2) >> 5;\n  }\n  return;\n}\n\n",
            "current_name": "calculate_linear_interpolation_000806f8",
            "entrypoint": "0x000806f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf_rel_array",
                "FUN_000806f8": "calculate_linear_interpolation_000806f8",
                "SBORROW4": "is_subtraction_overflow",
                "calculate_linear_interpolation_0008145c": "calculate_interpolation",
                "param_1": "data",
                "param_2": "length",
                "uVar1": "clamped_length",
                "uint": "unsigned_integer_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008073a": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008073a",
            "entrypoint": "0x0008073a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080748": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080748",
            "entrypoint": "0x00080748",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008074a": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008074a",
            "entrypoint": "0x0008074a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008074c": {
            "called": [],
            "calling": [
                "FUN_00080970"
            ],
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008074c",
            "entrypoint": "0x0008074c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080774": {
            "additional_data": {
                "DAT_e000ed23": {
                    "constant": 2,
                    "constant_value": 4,
                    "data_variable": 1,
                    "default_value": 1,
                    "some_data2": 1,
                    "some_value": 1,
                    "system_status": 1,
                    "value": 1,
                    "value_e000ed23": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "elf32_rel_array": 1,
                    "elf32_relocation_array": 2,
                    "elf_rel_array": 1,
                    "elf_relocation_array": 2,
                    "elf_relocations": 2,
                    "rel_array": 3,
                    "relocation_table": 1,
                    "relocations": 1
                },
                "FUN_00080774": {
                    "initialize_and_configure": 4,
                    "initialize_and_configure_device": 2,
                    "initialize_and_configure_system": 6,
                    "initialize_and_execute": 8,
                    "initialize_and_execute_operations": 2,
                    "initialize_and_set_values": 1,
                    "initialize_and_update_memory": 1,
                    "initialize_and_update_parameters": 1,
                    "initialize_and_update_values": 1,
                    "initialize_configuration": 1,
                    "initialize_memory": 1,
                    "initialize_memory_and_parameters": 1,
                    "initialize_memory_and_settings": 1,
                    "initialize_program": 1
                },
                "_DAT_400c0000": {
                    "register5": 1,
                    "threshold_value": 1
                },
                "_DAT_400e0e00": {
                    "address1": 1,
                    "parameter_one": 1,
                    "parameter_value_1": 1,
                    "register_1": 1,
                    "register_5": 2,
                    "register_location_1": 1
                },
                "_DAT_400e0ea0": {
                    "data1": 1,
                    "data_register_1": 1,
                    "first_register": 1,
                    "first_register_value": 1,
                    "memory_location_1": 1,
                    "param1": 1,
                    "param_1": 1,
                    "parameter1": 1,
                    "register1": 4,
                    "register_1": 4,
                    "register_400e0ea0": 1,
                    "register_value1": 1,
                    "register_value_1": 6,
                    "variable_one": 1
                },
                "_DAT_400e1000": {
                    "address3": 1,
                    "parameter_three": 1,
                    "parameter_value_3": 1,
                    "register_3": 1,
                    "register_7": 2,
                    "register_location_3": 1
                },
                "_DAT_400e10a0": {
                    "data2": 1,
                    "data_register_2": 1,
                    "memory_location_2": 1,
                    "param2": 1,
                    "param_2": 1,
                    "parameter2": 1,
                    "register2": 4,
                    "register_2": 4,
                    "register_400e10a0": 1,
                    "register_value2": 1,
                    "register_value_2": 6,
                    "second_register": 1,
                    "second_register_value": 1,
                    "variable_two": 1
                },
                "_DAT_400e12a0": {
                    "data3": 1,
                    "data_register_3": 1,
                    "memory_location_3": 1,
                    "param3": 1,
                    "param_3": 1,
                    "parameter3": 1,
                    "register3": 4,
                    "register_3": 4,
                    "register_400e12a0": 1,
                    "register_value3": 1,
                    "register_value_3": 6,
                    "third_register": 1,
                    "third_register_value": 1,
                    "variable_three": 1
                },
                "_DAT_400e1400": {
                    "address2": 1,
                    "parameter_two": 1,
                    "parameter_value_2": 1,
                    "register_2": 1,
                    "register_6": 2,
                    "register_location_2": 1
                },
                "_DAT_400e14a0": {
                    "data4": 1,
                    "data_register_4": 1,
                    "fourth_register": 1,
                    "fourth_register_value": 1,
                    "memory_location_4": 1,
                    "param4": 1,
                    "param_4": 1,
                    "parameter4": 1,
                    "register4": 4,
                    "register_4": 4,
                    "register_400e14a0": 1,
                    "register_value4": 1,
                    "register_value_4": 6,
                    "variable_four": 1
                },
                "_DAT_e000e010": {
                    "another_variable": 1,
                    "constant": 1,
                    "iteration_limit": 2,
                    "length": 1,
                    "limit": 2,
                    "more_value": 1,
                    "number_of_executions": 1,
                    "some_data4": 1,
                    "threshold": 1,
                    "value2": 1,
                    "value_e000e010": 1,
                    "variable2": 2,
                    "variable_2": 2
                },
                "_DAT_e000e014": {
                    "adjusted_offset": 2,
                    "calculated_offset": 2,
                    "elf_offset_divided": 1,
                    "flash_base_address": 1,
                    "offset": 7,
                    "offset_divided_by_1000_minus_one": 1,
                    "offset_value": 1,
                    "rel_offset": 1,
                    "relocated_offset": 2,
                    "relocation_offset": 2,
                    "some_data1": 1
                },
                "_DAT_e000e018": {
                    "another_value": 1,
                    "counter": 4,
                    "data": 1,
                    "initialized_value": 2,
                    "some_data3": 1,
                    "some_variable": 1,
                    "system_configuration": 1,
                    "value1": 1,
                    "value_e000e018": 1,
                    "variable1": 2,
                    "variable_1": 2
                },
                "_DAT_e000ed23": {
                    "data_value": 1
                },
                "calculate_threshold_00080c98": {
                    "calculate_threshold": 25
                },
                "check_bit_and_set_00080aa8": {
                    "check_and_set_bit": 3,
                    "check_bit_and_set": 21,
                    "check_bit_and_set_flag": 1
                },
                "execute_function_set_four_times_00081778": {
                    "execute_four_times": 1,
                    "execute_function_four_times": 1,
                    "execute_function_set_four_times": 17,
                    "execute_functions_four_times": 1,
                    "execute_operation_set": 1,
                    "execute_repeatedly": 1,
                    "perform_action_set_four_times": 1,
                    "perform_four_function_calls": 1
                },
                "iVar1": {
                    "count": 1,
                    "counter": 2,
                    "index": 6,
                    "iteration_counter": 2,
                    "iteration_variable_1": 1
                },
                "iVar2": {
                    "iteration_variable_2": 1,
                    "next_count": 1,
                    "next_counter": 2,
                    "next_index": 6,
                    "next_iteration_counter": 2
                },
                "initialize_memory_00080b98": {
                    "initialize_memory": 7
                },
                "set_default_value_00080d62": {
                    "set_default_value": 25
                },
                "set_param_value_00080d6a": {
                    "set_param_value": 20,
                    "set_parameter_value": 5
                },
                "update_bitwise_flags_00080d30": {
                    "update_bitwise_flags": 25
                },
                "update_parameter_and_return_value_00080a30": {
                    "set_parameter": 1,
                    "update_and_return": 1,
                    "update_param_and_return_value": 1,
                    "update_parameter_and_return": 1,
                    "update_parameter_and_return_flag": 1,
                    "update_parameter_and_return_multiple_times": 1,
                    "update_parameter_and_return_value": 6,
                    "update_parameter_and_return_value2": 2,
                    "update_parameter_and_return_value3": 1,
                    "update_parameter_and_return_value_00080a30": 1,
                    "update_parameter_and_return_value_2": 4,
                    "update_parameter_and_return_value_advanced": 1,
                    "update_parameter_and_return_value_alt": 1,
                    "update_parameter_and_return_value_three": 1,
                    "update_parameter_two_inputs": 1,
                    "update_parameter_with_value": 1
                },
                "update_parameter_and_return_value_00080a30_1": {
                    "update_parameter_and_return_value_1": 1
                },
                "update_parameter_and_return_value_00080a30_2": {
                    "update_parameter_and_return_value_2": 1
                },
                "update_parameter_and_return_value_00080a30_3": {
                    "update_parameter_and_return_value_3": 1
                },
                "update_parameter_and_return_value_00080a30_4": {
                    "update_parameter_and_return_value_4": 1
                },
                "update_parameter_and_return_value_00080a30_5": {
                    "update_parameter_and_return_value_5": 1
                },
                "update_parameter_and_return_value_00080a30_6": {
                    "update_parameter_and_return_value_6": 1
                },
                "update_parameter_and_return_value_00080a30_7": {
                    "update_parameter_and_return_value_7": 1
                },
                "update_parameter_and_return_value_00081014": {
                    "update_parameter": 3,
                    "update_parameter_and_return": 2,
                    "update_parameter_and_return_value": 19,
                    "update_parameter_value": 1
                },
                "update_register_value_00080d3e": {
                    "update_register_value": 25
                }
            },
            "called": [
                "FUN_00080d62",
                "FUN_00080c98",
                "FUN_00080a30",
                "FUN_00080d30",
                "FUN_00080b98",
                "FUN_00081778",
                "FUN_00080aa8",
                "FUN_00081014",
                "FUN_00080d6a",
                "FUN_00080d3e"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\n\n\nvoid initialize_and_configure_device_00080774(void)\n\n{\n  int index;\n  int next_index;\n  \n  initialize_memory();\n  _DAT_e000e014 = rel_array[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_function_set_four_times();\n  index = 0;\n  do {\n    next_index = index + 1;\n    update_parameter_and_return_value(index,0);\n    index = next_index;\n  } while (next_index != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_parameter_and_return_value(0x400e0e00,1,0x300,0);\n  update_parameter_and_return_value(0,1);\n  update_parameter_and_return_value(0x400e0e00,1,0xc00,0);\n  update_parameter_and_return_value(0x400e0e00,1,0x3000,0);\n  update_parameter_and_return_value(0x400e1400,2,0x30,0);\n  update_parameter_and_return_value(0x400e1000,1,0xc00,0);\n  update_parameter_and_return_value(0x400e0e00,1,3,0);\n  update_parameter_and_return_value(0x400e1000,1,0xc000,0);\n  check_bit_and_set(0x25);\n  calculate_threshold(0x400c0000,rel_array[6].r_offset,20000000,0xc);\n  update_register_value(0x400c0000,0,0x300000,1);\n  update_bitwise_flags(0x400c0000,0,0);\n  set_param_value(0x400c0000,0xffffffff);\n  set_default_value(0x400c0000);\n  return;\n}\n\n",
            "current_name": "initialize_and_configure_device_00080774",
            "entrypoint": "0x00080774",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00080774": "initialize_and_configure_device_00080774",
                "calculate_threshold_00080c98": "calculate_threshold",
                "check_bit_and_set_00080aa8": "check_bit_and_set",
                "execute_function_set_four_times_00081778": "execute_function_set_four_times",
                "iVar1": "index",
                "iVar2": "next_index",
                "initialize_memory_00080b98": "initialize_memory",
                "set_default_value_00080d62": "set_default_value",
                "set_param_value_00080d6a": "set_param_value",
                "update_bitwise_flags_00080d30": "update_bitwise_flags",
                "update_parameter_and_return_value_00080a30": "update_parameter_and_return_value",
                "update_parameter_and_return_value_00081014": "update_parameter_and_return_value",
                "update_register_value_00080d3e": "update_register_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008089c": {
            "additional_data": {
                "DAT_20070ad8": {
                    "memory_segment_6": 1
                },
                "DAT_20070b60": {
                    "memory_segment_2": 1
                },
                "DAT_20070be8": {
                    "parameters": 1
                },
                "DAT_20070c0c": {
                    "memory_segment_1": 1
                },
                "DAT_20070c94": {
                    "data_segment_1": 1
                },
                "DAT_20070cbc": {
                    "data_segment_2": 1
                },
                "DAT_20070ce4": {
                    "data_segment_3": 1
                },
                "DAT_20070d0c": {
                    "memory_segment_7": 1
                },
                "DAT_20070d94": {
                    "memory_segment_8": 1
                },
                "DAT_20070e6c": {
                    "memory_segment_3": 1
                },
                "DAT_20070ef4": {
                    "memory_segment_4": 1
                },
                "DAT_20070f7c": {
                    "memory_segment_5": 1
                },
                "FUN_0008089c": {
                    "initialize_all_memory_segments": 4,
                    "initialize_data_segments": 1,
                    "initialize_memory_segments": 16,
                    "initialize_memory_segments_and_data": 2,
                    "initialize_segments": 1,
                    "initialize_segments_and_data": 6,
                    "initialize_segments_and_data_regions": 1
                },
                "init_and_update_data": {
                    "init_and_update_data": 1
                },
                "init_memory_segment": {
                    "init_memory_segment": 1
                },
                "init_parameters": {
                    "init_parameters": 1
                },
                "initialize_and_update_data": {
                    "initialize_and_update_data": 4
                },
                "initialize_and_update_data_00081438": {
                    "init_and_update_data": 3,
                    "init_update_data": 1,
                    "initialize_and_update_data": 13
                },
                "initialize_memory_segment": {
                    "initialize_memory_segment": 4
                },
                "initialize_memory_segment_000811b0": {
                    "init_mem_segment": 1,
                    "init_memory_segment": 2,
                    "init_segment": 1,
                    "initialize_memory_segment": 13
                },
                "initialize_memory_segment_000811b0_2": {
                    "initialize_memory_segment": 1
                },
                "initialize_memory_segments": {
                    "initialize_memory_segments": 1
                },
                "initialize_parameters": {
                    "initialize_parameters": 4
                },
                "initialize_parameters_00081348": {
                    "init_parameters": 3,
                    "init_params": 1,
                    "initialize_parameters": 13
                },
                "initialize_segments_and_data": {
                    "initialize_segments_and_data": 1
                },
                "param_1": {
                    "arg1": 1,
                    "memory_segment_1": 1,
                    "param1": 1,
                    "param_1": 1,
                    "param_segment_1": 1,
                    "segment1": 1,
                    "segment1_param": 3,
                    "segment1_param1": 2,
                    "segment_1": 2,
                    "segment_1_offset": 1,
                    "segment_1_param": 5,
                    "segment_1_size": 1,
                    "segment_1_start": 1,
                    "segment_param_1": 2,
                    "unused_param": 4,
                    "unused_param1": 2,
                    "unused_param_1": 2
                },
                "param_2": {
                    "arg2": 1,
                    "memory_segment_2": 1,
                    "param2": 1,
                    "param_2": 1,
                    "param_segment_2": 1,
                    "segment1_param2": 2,
                    "segment2": 1,
                    "segment2_param": 3,
                    "segment_2": 2,
                    "segment_2_offset": 1,
                    "segment_2_param": 5,
                    "segment_2_size": 1,
                    "segment_2_start": 1,
                    "segment_param_2": 2,
                    "unused_param": 4,
                    "unused_param2": 2,
                    "unused_param_2": 2
                },
                "param_3": {
                    "arg3": 1,
                    "config_param": 1,
                    "memory_segment_3": 1,
                    "memory_segment_param": 1,
                    "param3": 1,
                    "param_3": 1,
                    "param_segment_3": 1,
                    "segment1_param3": 2,
                    "segment3": 1,
                    "segment3_param": 3,
                    "segment_3": 2,
                    "segment_3_offset": 1,
                    "segment_3_param": 5,
                    "segment_3_size": 1,
                    "segment_3_start": 1,
                    "segment_param_3": 2,
                    "segment_size": 2,
                    "size": 1,
                    "unused_param": 1,
                    "unused_param3": 1,
                    "unused_param_3": 1
                },
                "segment1_param": {
                    "segment1_param": 2
                },
                "segment2_param": {
                    "segment2_param": 2
                },
                "segment3_param": {
                    "segment3_param": 2
                },
                "segment_10": {
                    "segment_10": 1
                },
                "segment_11": {
                    "segment_11": 1
                },
                "segment_12": {
                    "segment_12": 1
                },
                "segment_1_offset": {
                    "0x400e0800": 1
                },
                "segment_1_param": {
                    "segment_1_param": 1
                },
                "segment_2_offset": {
                    "8": 1
                },
                "segment_2_param": {
                    "segment_2_param": 1
                },
                "segment_3_offset": {
                    "8": 1
                },
                "segment_3_param": {
                    "segment_3_param": 1
                },
                "segment_4": {
                    "segment_4": 1
                },
                "segment_5": {
                    "segment_5": 1
                },
                "segment_6": {
                    "segment_6": 1
                },
                "segment_7": {
                    "segment_7": 1
                },
                "segment_8": {
                    "segment_8": 1
                },
                "segment_9": {
                    "segment_9": 1
                },
                "segment_size": {
                    "segment_size": 1
                }
            },
            "called": [
                "FUN_000811b0",
                "FUN_00081348",
                "FUN_00081438"
            ],
            "calling": [],
            "code": "\nvoid initialize_all_memory_segments_0008089c(undefined4 segment_1_param,undefined4 segment_2_param,undefined4 segment_3_param)\n\n{\n  initialize_memory_segment(&DAT_20070c0c);\n  initialize_memory_segment(&DAT_20070b60);\n  initialize_parameters(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,segment_3_param);\n  initialize_memory_segment(&DAT_20070e6c);\n  initialize_memory_segment(&DAT_20070ef4);\n  initialize_memory_segment(&DAT_20070f7c);\n  initialize_memory_segment(&DAT_20070ad8);\n  initialize_memory_segment(&DAT_20070d0c);\n  initialize_memory_segment(&DAT_20070d94);\n  initialize_and_update_data(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initialize_and_update_data(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initialize_and_update_data(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "current_name": "initialize_all_memory_segments_0008089c",
            "entrypoint": "0x0008089c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008089c": "initialize_all_memory_segments_0008089c",
                "initialize_and_update_data_00081438": "initialize_and_update_data",
                "initialize_memory_segment_000811b0": "initialize_memory_segment",
                "initialize_parameters_00081348": "initialize_parameters",
                "param_1": "segment_1_param",
                "param_2": "segment_2_param",
                "param_3": "segment_3_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080970": {
            "additional_data": {
                "FUNC_0008073a": {
                    "call_function_a": 1,
                    "execute_action_a": 1,
                    "execute_function1": 1,
                    "execute_function_1": 3,
                    "execute_function_a": 5,
                    "execute_operation_a": 1,
                    "function_a": 1,
                    "handle_case_1": 3,
                    "handle_difference_1": 1,
                    "handle_difference_case1": 1,
                    "handle_difference_case_1": 1,
                    "handle_difference_error": 1,
                    "handle_error_1": 3,
                    "handle_error_case_1": 1,
                    "handle_result_a": 1,
                    "invoke_function_1": 1,
                    "process_0008073a": 1
                },
                "FUNC_00080748": {
                    "call_function_b": 1,
                    "execute_action_b": 1,
                    "execute_function2": 1,
                    "execute_function_2": 3,
                    "execute_function_b": 5,
                    "execute_operation_b": 1,
                    "function_b": 1,
                    "handle_case_2": 3,
                    "handle_difference_2": 1,
                    "handle_difference_case2": 1,
                    "handle_difference_case_2": 1,
                    "handle_difference_error": 1,
                    "handle_error_2": 3,
                    "handle_error_case_2": 1,
                    "handle_result_b": 1,
                    "invoke_function_2": 1,
                    "process_00080748": 1
                },
                "FUNC_0008074a": {
                    "call_function_c": 1,
                    "execute_action_c": 1,
                    "execute_function3": 1,
                    "execute_function_3": 3,
                    "execute_function_c": 5,
                    "execute_operation_c": 1,
                    "function_c": 1,
                    "handle_case_3": 3,
                    "handle_difference_3": 1,
                    "handle_difference_case3": 1,
                    "handle_difference_case_3": 1,
                    "handle_difference_error": 1,
                    "handle_error_3": 3,
                    "handle_error_case_3": 1,
                    "handle_result_c": 1,
                    "invoke_function_3": 1,
                    "process_0008074a": 1
                },
                "FUNC_0008074c": {
                    "call_function_d": 1,
                    "execute_action_d": 1,
                    "execute_function4": 1,
                    "execute_function_4": 3,
                    "execute_function_d": 5,
                    "execute_operation_d": 1,
                    "function_d": 1,
                    "handle_case_4": 3,
                    "handle_difference_4": 1,
                    "handle_difference_case4": 1,
                    "handle_difference_case_4": 1,
                    "handle_difference_error": 1,
                    "handle_error_4": 3,
                    "handle_error_case_4": 1,
                    "handle_result_d": 1,
                    "invoke_function_4": 1,
                    "process_0008074c": 1
                },
                "FUN_00080970": {
                    "calculate_and_execute_functions": 1,
                    "calculate_and_execute_mask_operations": 1,
                    "calculate_and_execute_masks": 1,
                    "calculate_and_handle_differences": 7,
                    "calculate_and_mask_differences": 1,
                    "check_and_call_calculate_difference": 1,
                    "check_and_call_functions": 1,
                    "check_and_execute_calculations": 1,
                    "check_and_execute_difference_masks": 1,
                    "check_and_execute_functions": 4,
                    "check_and_execute_masking": 1,
                    "check_and_invoke_functions": 1,
                    "find_and_execute_difference": 1,
                    "identify_and_process_data": 1,
                    "process_data": 8
                },
                "calculate_difference_and_mask_00081248": {
                    "calculate_difference_and_mask": 26,
                    "calculate_mask_difference": 1
                },
                "iVar1": {
                    "error_code": 1,
                    "result": 21
                }
            },
            "called": [
                "FUN_0008073a",
                "FUN_0008074a",
                "FUN_0008074c",
                "FUN_00081248",
                "FUN_00080748"
            ],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid identify_and_process_data_00080970(void)\n\n{\n  int result;\n  \n  result = calculate_difference_and_mask(&DAT_20070be8);\n  if (result != 0) {\n    FUNC_0008073a();\n  }\n  result = calculate_difference_and_mask(&DAT_20070c94);\n  if (result != 0) {\n    FUNC_00080748();\n  }\n  result = calculate_difference_and_mask(&DAT_20070cbc);\n  if (result != 0) {\n    FUNC_0008074a();\n  }\n  result = calculate_difference_and_mask(&DAT_20070ce4);\n  if (result != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "current_name": "identify_and_process_data_00080970",
            "entrypoint": "0x00080970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080970": "identify_and_process_data_00080970",
                "calculate_difference_and_mask_00081248": "calculate_difference_and_mask",
                "iVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000809be": {
            "additional_data": {
                "DAT_": {
                    "unchanged": 1
                },
                "FUN_000809be": {
                    "update_data": 6,
                    "update_param": 6,
                    "update_param_value": 1,
                    "update_parameter": 7,
                    "update_parameter_value": 5,
                    "update_register": 1,
                    "update_value": 4,
                    "update_values": 1
                },
                "PTR_": {
                    "unchanged": 1
                },
                "param_1": {
                    "base_addr": 2,
                    "base_address": 19,
                    "data": 1,
                    "data_address": 1,
                    "data_location": 1,
                    "data_ptr": 1,
                    "data_struct": 1,
                    "memory_address": 1,
                    "object_address": 3,
                    "object_ptr": 1
                },
                "param_2": {
                    "action": 1,
                    "action_type": 3,
                    "case_type": 2,
                    "flag": 2,
                    "mode": 2,
                    "operation": 5,
                    "operation_type": 6,
                    "option": 8,
                    "update_type": 2
                },
                "param_3": {
                    "data_value": 1,
                    "new_value": 21,
                    "param_value": 1,
                    "value": 8
                },
                "switchD_000809c4_caseD_6": {
                    "case_default": 1,
                    "default_case": 2
                },
                "uVar1": {
                    "modified_value": 1,
                    "result": 7,
                    "updated_value": 22
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a30"
            ],
            "code": "\nvoid update_parameter_value_000809be(int base_address,undefined4 option,uint new_value)\n\n{\n  uint updated_value;\n  \n  *(uint *)(base_address + 0x44) = new_value;\n  switch(option) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updated_value = *(uint *)(base_address + 0x70) & *(uint *)(base_address + 0x70) & ~new_value;\n    break;\n  case 2:\n    updated_value = *(uint *)(base_address + 0x70) | new_value;\n    break;\n  default:\n    goto default_case;\n  }\n  *(uint *)(base_address + 0x70) = updated_value;\ndefault_case:\n  *(uint *)(base_address + 4) = new_value;\n  return;\n}\n\n",
            "current_name": "update_parameter_value_000809be",
            "entrypoint": "0x000809be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000809be": "update_parameter_value_000809be",
                "param_1": "base_address",
                "param_2": "option",
                "param_3": "new_value",
                "switchD_000809c4_caseD_6": "default_case",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000809e4": {
            "additional_data": {
                "0x11": {
                    "buffer_index1": 1,
                    "index1": 3,
                    "param_index_1": 1,
                    "parameter_index1": 1
                },
                "0x18": {
                    "buffer_index2": 1,
                    "index3": 3,
                    "param_index_3": 1,
                    "parameter_index2": 1
                },
                "0x19": {
                    "buffer_index3": 1,
                    "index2": 3,
                    "param_index_2": 1,
                    "parameter_index3": 1
                },
                "0x20": {
                    "buffer_index6": 1,
                    "index6": 3,
                    "param_index_6": 1,
                    "parameter_index6": 1
                },
                "5": {
                    "buffer_index7": 1,
                    "index7": 3,
                    "param_index_7": 1,
                    "parameter_index7": 1
                },
                "8": {
                    "buffer_index4": 1,
                    "index4": 3,
                    "param_index_4": 1,
                    "parameter_index4": 1
                },
                "9": {
                    "buffer_index5": 1,
                    "index5": 3,
                    "param_index_5": 1,
                    "parameter_index5": 1
                },
                "DAT_": {
                    "omit": 1
                },
                "FUN_000809e4": {
                    "assign_values": 1,
                    "assign_values_to_indices": 2,
                    "initialize_param_data": 1,
                    "set_param_values": 2,
                    "set_parameters": 8,
                    "set_params": 1,
                    "set_values": 5,
                    "set_values_based_on_condition": 1,
                    "set_values_based_on_flags": 1,
                    "update_data": 1,
                    "update_param_values": 3,
                    "update_parameters": 4,
                    "update_params": 1
                },
                "PTR_": {
                    "omit": 1
                },
                "bVar1": {
                    "check_flag": 1,
                    "is_flag_negative": 1,
                    "is_flag_set": 2,
                    "is_negative": 19,
                    "is_negative_flag": 6,
                    "is_negative_flag_set": 1,
                    "is_negative_shift": 1
                },
                "param_1": {
                    "array": 10,
                    "array_ptr": 1,
                    "data_array": 1,
                    "output": 3,
                    "output_array": 6,
                    "output_buffer": 1,
                    "param_array": 4,
                    "parameter_array": 1,
                    "parameters": 2,
                    "params_array": 1,
                    "result_array": 1
                },
                "param_2": {
                    "input_value": 1,
                    "new_param_value": 1,
                    "new_value": 6,
                    "param_value": 2,
                    "parameter_value": 1,
                    "value": 20
                },
                "param_3": {
                    "bitmask": 2,
                    "flag": 1,
                    "flag_value": 1,
                    "flags": 26,
                    "param_flag": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a30"
            ],
            "code": "\nvoid set_parameters_000809e4(undefined4 *array,undefined4 value,uint flags)\n\n{\n  bool is_negative;\n  \n  is_negative = (int)(flags << 0x1f) < 0;\n  array[0x11] = value;\n  if (is_negative) {\n    array[0x19] = value;\n  }\n  if (!is_negative) {\n    array[0x18] = value;\n  }\n  is_negative = (flags & 10) != 0;\n  if (is_negative) {\n    array[8] = value;\n  }\n  if (!is_negative) {\n    array[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    array[0x20] = value;\n  }\n  array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "current_name": "set_parameters_000809e4",
            "entrypoint": "0x000809e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000809e4": "set_parameters_000809e4",
                "bVar1": "is_negative",
                "param_1": "array",
                "param_2": "value",
                "param_3": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "additional_data": {
                "0x11": {
                    "array_element1": 1,
                    "index1": 1
                },
                "0x14": {
                    "array_element5": 1,
                    "index5": 1
                },
                "0x15": {
                    "array_element4": 1,
                    "index4": 1
                },
                "0x18": {
                    "array_element2": 1,
                    "index2": 1
                },
                "0x19": {
                    "array_element3": 1,
                    "index3": 1
                },
                "0xc": {
                    "array_element7": 1,
                    "index7": 1
                },
                "0xd": {
                    "array_element6": 1,
                    "index6": 1
                },
                "4": {
                    "array_element8": 1
                },
                "FUN_00080a0a": {
                    "assign_values": 2,
                    "assign_values_to_params": 1,
                    "set_param_values": 9,
                    "set_parameters": 4,
                    "set_params": 2,
                    "update_memory_values": 1,
                    "update_param_array": 1,
                    "update_param_values": 2,
                    "update_parameters": 6,
                    "update_params": 2,
                    "update_pointers": 1
                },
                "param_1": {
                    "args": 1,
                    "memory_array": 1,
                    "output": 1,
                    "output_array": 7,
                    "param_array": 6,
                    "param_list": 2,
                    "parameters": 10,
                    "params": 1,
                    "params_array": 1,
                    "pointers": 1
                },
                "param_2": {
                    "input_value": 1,
                    "new_parameter": 1,
                    "new_pointer": 1,
                    "new_value": 9,
                    "param_value": 4,
                    "value": 15
                },
                "param_3": {
                    "condition1": 16,
                    "condition_1": 3,
                    "condition_a": 1,
                    "flag1": 3,
                    "flag_1": 1,
                    "is_param3_null": 1,
                    "is_param3_zero": 5,
                    "is_zero_1": 1
                },
                "param_4": {
                    "condition2": 16,
                    "condition_2": 3,
                    "condition_b": 1,
                    "flag2": 3,
                    "flag_2": 1,
                    "is_param4_null": 1,
                    "is_param4_zero": 5,
                    "is_zero_2": 1
                },
                "param_5": {
                    "condition3": 16,
                    "condition_3": 3,
                    "condition_c": 1,
                    "flag3": 3,
                    "flag_3": 1,
                    "is_param5_null": 1,
                    "is_param5_zero": 5,
                    "is_zero_3": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "code": "\nvoid set_param_values_00080a0a(undefined4 *parameters,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  parameters[0x11] = value;\n  if (condition3 == 0) {\n    parameters[0x18] = value;\n  }\n  else {\n    parameters[0x19] = value;\n  }\n  if (condition2 == 0) {\n    parameters[0x15] = value;\n  }\n  else {\n    parameters[0x14] = value;\n  }\n  if (condition1 == 0) {\n    parameters[0xd] = value;\n  }\n  else {\n    parameters[0xc] = value;\n  }\n  parameters[4] = value;\n  *parameters = value;\n  return;\n}\n\n",
            "current_name": "set_param_values_00080a0a",
            "entrypoint": "0x00080a0a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a0a": "set_param_values_00080a0a",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a30": {
            "additional_data": {
                "FUN_00080a30": {
                    "update_and_set_parameter": 1,
                    "update_or_create_parameter_value": 1,
                    "update_param_value": 1,
                    "update_parameter": 2,
                    "update_parameter_and_return_value": 1,
                    "update_parameter_value": 24,
                    "update_parameter_values": 1
                },
                "PTR_809e5": {
                    "parameter_list": 1
                },
                "bVar1": {
                    "is_flag_negative": 3,
                    "is_negative": 19,
                    "is_negative_flag": 8,
                    "is_negative_flag_set": 1
                },
                "param_1": {
                    "data_pointer": 1,
                    "device": 24,
                    "device_address": 1,
                    "device_context": 2,
                    "device_id": 1,
                    "param1": 1,
                    "param_ptr": 1
                },
                "param_2": {
                    "action": 2,
                    "mode": 1,
                    "option": 2,
                    "param2": 1,
                    "param_type": 6,
                    "parameter": 1,
                    "parameter_type": 16,
                    "type": 2
                },
                "param_3": {
                    "new_value": 6,
                    "param3": 1,
                    "param_value": 1,
                    "parameter_value": 4,
                    "value": 19
                },
                "param_4": {
                    "bit_value": 1,
                    "bitmask": 1,
                    "bits": 1,
                    "flag": 16,
                    "flags": 9,
                    "param4": 1,
                    "parameter_flags": 1,
                    "update_flag": 1
                },
                "set_param_values_00080a0a": {
                    "set_param_values": 14,
                    "set_parameter_values": 3,
                    "update_parameter_value_func3": 1
                },
                "set_parameters_000809e4": {
                    "set_parameters": 17,
                    "update_parameter_value_func2": 1
                },
                "update_parameter_value_000809be": {
                    "update_param_value_helper": 1,
                    "update_parameter": 4,
                    "update_parameter_value": 3,
                    "update_parameter_value_func1": 1,
                    "update_parameter_value_function": 1,
                    "update_parameter_value_helper": 6,
                    "update_value": 1
                }
            },
            "called": [
                "FUN_00080a0a",
                "FUN_000809e4",
                "FUN_000809be"
            ],
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "code": "\nundefined4 update_parameter_and_return_value_00080a30(int device,int parameter_type,undefined4 value,uint flag)\n\n{\n  bool is_negative;\n  \n  switch(parameter_type) {\n  case 1:\n  case 2:\n    update_parameter_value_helper(device,parameter_type,value);\n    is_negative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = value;\n    if (is_negative) {\n      *(undefined4 *)(device + 100) = value;\n    }\n    if (!is_negative) {\n      *(undefined4 *)(device + 0x60) = value;\n    }\n    break;\n  case 3:\n    set_parameters(device,value,flag,0x809e5,device);\n    break;\n  case 4:\n  case 5:\n    set_param_values(device,value,parameter_type == 5,(flag << 0x1d) >> 0x1f,flag & 1,parameter_type,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_parameter_and_return_value_00080a30",
            "entrypoint": "0x00080a30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a30": "update_parameter_and_return_value_00080a30",
                "bVar1": "is_negative",
                "param_1": "device",
                "param_2": "parameter_type",
                "param_3": "value",
                "param_4": "flag",
                "set_param_values_00080a0a": "set_param_values",
                "set_parameters_000809e4": "set_parameters",
                "update_parameter_value_000809be": "update_parameter_value_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a94": {
            "additional_data": {
                "FUN_00080a94": {
                    "check_bitmask": 1,
                    "check_bitwise": 1,
                    "check_bitwise_and": 4,
                    "check_bitwise_and_condition": 2,
                    "check_bitwise_comparison": 1,
                    "check_bitwise_compatibility": 1,
                    "check_bitwise_conditions": 3,
                    "check_bitwise_intersection": 4,
                    "check_bitwise_operation": 1,
                    "check_bitwise_operations": 1,
                    "check_conditions": 1,
                    "check_flags": 1,
                    "check_intersection": 2,
                    "check_param": 1,
                    "check_parameters": 1,
                    "check_permission": 2,
                    "check_permissions": 4
                },
                "param_1": {
                    "address": 1,
                    "base_address": 1,
                    "context": 1,
                    "context_address": 1,
                    "data_pointer": 3,
                    "input": 2,
                    "input_1": 1,
                    "input_address": 1,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "input_value": 8,
                    "memory_offset": 1,
                    "object_address": 4,
                    "offset": 1,
                    "ptr_data": 1,
                    "ptr_param": 1,
                    "ptr_to_data": 1,
                    "value1": 1
                },
                "param_2": {
                    "bit_mask": 2,
                    "bitmask": 6,
                    "bitwise_mask": 1,
                    "flags": 1,
                    "input_2": 1,
                    "input_permission": 1,
                    "input_val": 1,
                    "mask": 9,
                    "mask_value": 2,
                    "permission_flag": 1,
                    "permission_mask": 2,
                    "permissions": 1,
                    "permissions_mask": 1,
                    "value": 1,
                    "value2": 1
                },
                "uVar1": {
                    "result": 30
                }
            },
            "called": [],
            "calling": [
                "FUN_00081014"
            ],
            "code": "\nuint check_bitwise_and_condition_00080a94(int input_value,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "check_bitwise_and_condition_00080a94",
            "entrypoint": "0x00080a94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a94": "check_bitwise_and_condition_00080a94",
                "param_1": "input_value",
                "param_2": "mask",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "additional_data": {
                "FUN_00080aa8": {
                    "check_and_set_bit": 19,
                    "check_and_set_flag": 1,
                    "check_and_update_bit": 3,
                    "check_bit_and_set": 1,
                    "check_bit_and_update": 2,
                    "check_bitmask_and_update": 1,
                    "set_bit_in_memory": 1,
                    "set_bit_value": 1,
                    "set_flag_if_not_set": 1,
                    "update_bitmask": 1
                },
                "param_1": {
                    "bit_index": 3,
                    "bit_number": 1,
                    "bit_position": 8,
                    "input": 8,
                    "input_bit": 1,
                    "input_value": 2,
                    "value": 8
                },
                "uVar1": {
                    "bit_mask": 27,
                    "bit_value": 1,
                    "bitmask": 2,
                    "mask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774",
                "FUN_000803fc",
                "FUN_000813dc"
            ],
            "code": "\n\n\nundefined4 check_bit_and_set_00080aa8(uint input)\n\n{\n  uint bit_mask;\n  \n  if (input < 0x2d) {\n    if (input < 0x20) {\n      bit_mask = 1 << (input & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (input - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_bit_and_set_00080aa8",
            "entrypoint": "0x00080aa8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080aa8": "check_bit_and_set_00080aa8",
                "param_1": "input",
                "uVar1": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "additional_data": {
                "FUN_00080b2c": {
                    "configure_channel": 5,
                    "configure_tc": 4,
                    "configure_tc_channel": 15,
                    "configure_timer": 2,
                    "configure_timer_channel": 1,
                    "initialize_tc_channel": 3,
                    "initialize_tc_configuration": 1
                },
                "execute_relocated_assertion_000816f8": {
                    "execute_assertion": 1
                },
                "iVar1": {
                    "base_offset": 1,
                    "channel_index": 2,
                    "channel_offset": 7,
                    "index": 2,
                    "index_offset": 2,
                    "offset": 15,
                    "shifted_param1": 1
                },
                "iVar2": {
                    "address": 10,
                    "calculated_address": 1,
                    "channel_addr": 2,
                    "channel_address": 7,
                    "channel_base_addr": 1,
                    "channel_base_address": 1,
                    "channel_index": 1,
                    "channel_offset": 2,
                    "channel_ptr": 2,
                    "offset": 1,
                    "target_address": 1,
                    "tc_channel_address": 1
                },
                "param_1": {
                    "channel_id": 2,
                    "channel_index": 2,
                    "channel_number": 1,
                    "channel_param": 1,
                    "channel_value": 1,
                    "config_param_1": 1,
                    "config_value": 1,
                    "dw_channel_size": 1,
                    "param1": 18,
                    "param2": 1,
                    "param_1": 1,
                    "value1": 1
                },
                "param_2": {
                    "channel": 1,
                    "channel_index": 1,
                    "channel_size": 2,
                    "dw_channel": 5,
                    "num_channels": 4,
                    "param": 1,
                    "param2": 15,
                    "param3": 1,
                    "value2": 1
                },
                "param_3": {
                    "channel_config": 1,
                    "channel_name": 12,
                    "error_message": 1,
                    "error_string": 1,
                    "function_name": 3,
                    "message": 1,
                    "param3": 12
                },
                "uVar3": {
                    "combined_parameters": 1,
                    "combined_params": 19,
                    "combined_value": 1,
                    "config_data": 1,
                    "config_param": 1,
                    "param_concatenated": 1,
                    "timer_config": 1
                }
            },
            "called": [
                "FUN_000816f8"
            ],
            "calling": [
                "FUN_000803fc"
            ],
            "code": "\nvoid configure_tc_channel_00080b2c(undefined4 param1,uint param2,char *channel_name)\n\n{\n  int offset;\n  int address;\n  undefined8 combined_params;\n  \n  combined_params = CONCAT44(param2,param1);\n  if (2 < param2) {\n    channel_name = \"TC_Configure\";\n    combined_params = execute_assertion(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combined_params >> 0x20) * 0x40;\n  address = (int)combined_params + offset;\n  *(undefined4 *)((int)combined_params + offset) = 2;\n  *(undefined4 *)(address + 0x28) = 0xffffffff;\n  *(char **)(address + 4) = channel_name;\n  return;\n}\n\n",
            "current_name": "configure_tc_channel_00080b2c",
            "entrypoint": "0x00080b2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "execute_relocated_assertion_000816f8": "execute_assertion",
                "iVar1": "offset",
                "iVar2": "address",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "channel_name",
                "uVar3": "combined_params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b90": {
            "additional_data": {
                "FUN_00080b90": {
                    "set_memory_value": 2,
                    "set_param_at_index": 2,
                    "set_param_at_offset": 1,
                    "set_param_value": 14,
                    "set_parameter_value": 1,
                    "set_value_at_offset": 1,
                    "store_data": 1,
                    "store_parameter_value": 1,
                    "update_array_element": 1,
                    "update_data": 1,
                    "update_data_value": 1,
                    "update_parameter_value": 1,
                    "update_value_at_index": 1,
                    "update_value_in_array": 2,
                    "write_value_to_memory": 1
                },
                "param_1": {
                    "array_base_address": 3,
                    "array_pointer": 2,
                    "base_address": 20,
                    "base_pointer": 1,
                    "data_address": 1,
                    "object": 1,
                    "object_address": 1,
                    "object_base": 1,
                    "target_address": 1
                },
                "param_2": {
                    "element_index": 1,
                    "index": 20,
                    "offset": 6,
                    "offset_multiplier": 2,
                    "param_index": 2
                },
                "param_3": {
                    "data": 1,
                    "new_value": 11,
                    "value": 19
                }
            },
            "called": [],
            "calling": [
                "FUN_000803fc"
            ],
            "code": "\nvoid set_param_value_00080b90(int base_address,int index,undefined4 value)\n\n{\n  *(undefined4 *)(base_address + index * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_00080b90",
            "entrypoint": "0x00080b90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080b90": "set_param_value_00080b90",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080b98": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "array_data": 2,
                    "array_of_relocations": 1,
                    "elf_rel_array": 4,
                    "elf_reloc_array": 1,
                    "elf_relocation_array": 4,
                    "elf_relocations": 1,
                    "elf_table": 1,
                    "memory_array": 1,
                    "rel_array": 1,
                    "relocation_array": 3,
                    "relocation_table": 3
                },
                "FUN_00080b98": {
                    "initialize_data": 3,
                    "initialize_memory": 26,
                    "initialize_registers": 1,
                    "setup_memory_and_data": 1
                },
                "_DAT_400e0620": {
                    "bitshift_value": 1,
                    "count1": 1,
                    "counter1": 1,
                    "data": 2,
                    "data1": 1,
                    "data_value": 1,
                    "data_value1": 1,
                    "flag1": 1,
                    "increment_value": 1,
                    "loop_counter": 1,
                    "mem_address": 1,
                    "memory_address": 1,
                    "memory_value": 1,
                    "memory_value1": 1,
                    "offset": 1,
                    "register_value": 1,
                    "shift_value": 2,
                    "shifted_value": 5,
                    "shifted_value1": 3,
                    "temp_value1": 1,
                    "value": 1,
                    "value1": 1
                },
                "_DAT_400e0628": {
                    "constant_value": 1,
                    "constant_value1": 1,
                    "constant_value_1": 2,
                    "control_register": 1,
                    "data1": 2,
                    "data3": 1,
                    "data_value1": 2,
                    "data_value3": 1,
                    "default_value1": 1,
                    "fixed_value1": 1,
                    "flag": 1,
                    "initial_value": 1,
                    "magic_number1": 1,
                    "memory_value3": 2,
                    "result": 1,
                    "temp_value3": 1,
                    "value1": 2,
                    "value3": 1
                },
                "_DAT_400e0630": {
                    "another_constant_value": 1,
                    "constant_value": 1,
                    "constant_value2": 1,
                    "constant_value_2": 2,
                    "count": 1,
                    "counter": 1,
                    "data2": 2,
                    "data4": 1,
                    "data_value2": 2,
                    "data_value4": 1,
                    "default_value2": 1,
                    "fixed_value2": 1,
                    "magic_number2": 1,
                    "memory_value4": 2,
                    "temp_value4": 1,
                    "timer_delay": 1,
                    "value2": 2,
                    "value4": 1
                },
                "_DAT_400e0668": {
                    "bit_mask": 1,
                    "bit_shifted_value": 1,
                    "bitshift_result": 1,
                    "comparison_value": 4,
                    "condition_value": 1,
                    "count2": 1,
                    "counter2": 1,
                    "data2": 1,
                    "data_value2": 1,
                    "flag2": 1,
                    "loop_counter": 2,
                    "mask": 2,
                    "mem_address2": 1,
                    "memory_value": 1,
                    "memory_value2": 1,
                    "shifted_value2": 3,
                    "temp": 1,
                    "temp_value": 2,
                    "temp_value2": 1,
                    "temporary_value": 2,
                    "value2": 1
                },
                "_DAT_400e0a00": {
                    "base_address": 2,
                    "base_address1": 1,
                    "buffer_size1": 1,
                    "data_offset1": 1,
                    "dma_address1": 1,
                    "memory_address1": 2,
                    "memory_block_1": 1,
                    "memory_block_one": 1,
                    "memory_block_size": 1,
                    "memory_control1": 1,
                    "memory_location_1": 1,
                    "memory_size1": 8,
                    "memory_start": 1,
                    "memory_value1": 1,
                    "register1": 1
                },
                "_DAT_400e0c00": {
                    "base_address2": 1,
                    "buffer_size": 1,
                    "buffer_size2": 1,
                    "data_offset2": 1,
                    "dma_address2": 1,
                    "end_address": 1,
                    "memory_address2": 2,
                    "memory_allocation_size": 1,
                    "memory_block_2": 1,
                    "memory_block_two": 1,
                    "memory_control2": 1,
                    "memory_end": 1,
                    "memory_location_2": 1,
                    "memory_size2": 8,
                    "memory_value2": 1,
                    "register2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\n\n\nvoid initialize_memory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  elf_rel_array[6].r_offset = 84000000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_00080b98",
            "entrypoint": "0x00080b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf_rel_array",
                "FUN_00080b98": "initialize_memory_00080b98"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080c98": {
            "additional_data": {
                "FUN_00080c98": {
                    "calculate_function": 1,
                    "calculate_index": 4,
                    "calculate_indexes": 1,
                    "calculate_offset": 2,
                    "calculate_parameters": 1,
                    "calculate_progress": 1,
                    "calculate_threshold": 14,
                    "calculate_value": 1,
                    "decode_values": 1,
                    "establish_threshold": 1,
                    "find_optimal_value": 1,
                    "initialize_params": 1,
                    "set_values_and_check_threshold": 1
                },
                "local_58": {
                    "indexes": 1,
                    "indices": 1,
                    "offset_threshold": 1,
                    "offset_values": 1,
                    "threshold": 1,
                    "threshold_array": 3,
                    "threshold_lookup": 1,
                    "threshold_table": 4,
                    "threshold_values": 10,
                    "thresholds": 8
                },
                "param_1": {
                    "index": 1,
                    "offset_buffer": 1,
                    "output": 4,
                    "output_array": 5,
                    "output_data": 1,
                    "result": 8,
                    "threshold": 8,
                    "threshold_array": 2,
                    "threshold_output": 1
                },
                "param_2": {
                    "data_size": 4,
                    "input_data_size": 1,
                    "input_length": 1,
                    "input_size": 7,
                    "input_value": 5,
                    "size": 5,
                    "total_bytes": 1,
                    "total_length": 1,
                    "total_size": 3,
                    "total_time": 3
                },
                "param_3": {
                    "block_size": 3,
                    "division_factor": 1,
                    "divisor": 6,
                    "duration": 1,
                    "element_size": 2,
                    "factor": 2,
                    "first_multiplier": 1,
                    "intervals": 1,
                    "multiplier": 4,
                    "num1": 1,
                    "num_a": 1,
                    "num_segments": 1,
                    "packet_length": 1,
                    "processing_time": 1,
                    "ratio": 1,
                    "threshold": 2,
                    "threshold_multiplier": 1,
                    "unit_size": 1
                },
                "param_4": {
                    "conversion_factor": 1,
                    "divider": 1,
                    "divisor": 2,
                    "factor": 3,
                    "limit": 1,
                    "multiplication_factor": 1,
                    "multiplier": 7,
                    "num2": 1,
                    "num_b": 1,
                    "second_multiplier": 1,
                    "threshold": 5,
                    "threshold_factor": 1,
                    "threshold_value": 1,
                    "time_divisor": 1,
                    "time_factor": 2,
                    "time_taken": 1,
                    "unit_size": 1
                },
                "uVar1": {
                    "adjusted_size": 1,
                    "division_result": 1,
                    "divisor": 3,
                    "num_blocks": 2,
                    "num_divisions": 1,
                    "num_elements": 1,
                    "num_intervals": 2,
                    "num_segments_scaled": 1,
                    "quotient": 14,
                    "repetition": 1,
                    "threshold_index": 2
                },
                "uVar2": {
                    "counter": 2,
                    "i": 4,
                    "idx": 1,
                    "index": 20,
                    "iterator": 1,
                    "offset_index": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nundefined4 calculate_threshold_00080c98(undefined4 *result,uint input_size,int divisor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint threshold_values [16];\n  \n  threshold_values[0] = 0;\n  threshold_values[1] = 8;\n  threshold_values[2] = 0x10;\n  threshold_values[3] = 0x18;\n  threshold_values[4] = 0x40;\n  threshold_values[5] = 0x50;\n  threshold_values[6] = 0x60;\n  threshold_values[7] = 0x70;\n  threshold_values[8] = 0x200;\n  threshold_values[9] = 0x240;\n  threshold_values[10] = 0x280;\n  threshold_values[11] = 0x2c0;\n  threshold_values[12] = 0x300;\n  threshold_values[13] = 0x340;\n  threshold_values[14] = 0x380;\n  threshold_values[15] = 0x3c0;\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  quotient = input_size / (uint)(divisor * 2);\n  if (input_size == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_size / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        threshold_values[index]) {\n      result[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_threshold_00080c98",
            "entrypoint": "0x00080c98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "local_58": "threshold_values",
                "param_1": "result",
                "param_2": "input_size",
                "param_3": "divisor",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d30": {
            "additional_data": {
                "DAT_": {
                    "": 1,
                    "_": 1
                },
                "FUN_00080d30": {
                    "set_bit_and_or": 1,
                    "set_bit_in_memory": 1,
                    "set_bitwise_or_flag": 1,
                    "set_bitwise_or_value": 1,
                    "set_flag_in_memory": 1,
                    "set_flags": 1,
                    "set_parameters": 1,
                    "set_params_with_bit_operations": 1,
                    "update_bit_value": 1,
                    "update_bitwise_flags": 1,
                    "update_data_with_flag": 1,
                    "update_flag": 3,
                    "update_flag_bits": 1,
                    "update_flag_in_memory": 1,
                    "update_flags": 7,
                    "update_memory": 1,
                    "update_param_bits": 1,
                    "update_parameter": 2,
                    "update_parameter_value": 2,
                    "update_parameter_with_flag": 1,
                    "update_value_with_flag": 1
                },
                "PTR_": {
                    "": 1,
                    "_": 1
                },
                "param_1": {
                    "address": 3,
                    "base_address": 16,
                    "data_address": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "input_address": 1,
                    "input_pointer": 1,
                    "memory_address": 4,
                    "object_address": 1,
                    "value_address": 1
                },
                "param_2": {
                    "bit_value": 1,
                    "flag": 1,
                    "flag_value": 2,
                    "input_value": 1,
                    "new_bits": 3,
                    "new_data": 1,
                    "new_flag_bits": 1,
                    "new_value": 8,
                    "value": 10,
                    "value1": 1,
                    "value_to_or": 1,
                    "value_to_set": 1
                },
                "param_3": {
                    "bit": 1,
                    "bit_flag": 2,
                    "bit_mask": 1,
                    "bit_position": 2,
                    "bit_to_set": 2,
                    "bit_value": 4,
                    "flag": 14,
                    "flag_bit": 1,
                    "flag_bits": 1,
                    "flag_position": 1,
                    "mask": 1,
                    "value2": 1
                },
                "param_4": {
                    "temp": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid update_bitwise_flags_00080d30(int base_address,uint value,uint flag)\n\n{\n  *(uint *)(base_address + 4) = value | *(uint *)(base_address + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "current_name": "update_bitwise_flags_00080d30",
            "entrypoint": "0x00080d30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d30": "update_bitwise_flags_00080d30",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "additional_data": {
                "FUN_00080d3e": {
                    "combine_parameters": 2,
                    "combine_params": 1,
                    "merge_params": 1,
                    "set_flags": 1,
                    "set_flags_in_register": 1,
                    "set_parameters": 1,
                    "update_bits": 1,
                    "update_config": 2,
                    "update_configuration": 1,
                    "update_data": 4,
                    "update_flags": 3,
                    "update_memory": 2,
                    "update_memory_values": 1,
                    "update_param_values": 1,
                    "update_parameter": 1,
                    "update_parameters": 3,
                    "update_register": 3,
                    "update_register_value": 1,
                    "update_values": 1
                },
                "param_1": {
                    "address": 2,
                    "base_address": 14,
                    "config_address": 3,
                    "data_address": 2,
                    "data_pointer": 2,
                    "input_address": 1,
                    "memory_address": 1,
                    "ptr": 1,
                    "register_address": 4,
                    "struct_ptr": 1
                },
                "param_2": {
                    "bit_field1": 1,
                    "bit_mask": 1,
                    "bit_mask1": 1,
                    "bitmask": 1,
                    "bitmask1": 2,
                    "config_mask": 1,
                    "config_type": 1,
                    "data": 2,
                    "data1": 1,
                    "flag_bits": 1,
                    "input_data": 1,
                    "input_value": 2,
                    "mask_value": 1,
                    "new_bits": 1,
                    "part1": 1,
                    "value1": 12,
                    "value2": 1
                },
                "param_3": {
                    "bit_field2": 1,
                    "bit_mask2": 1,
                    "bitmask2": 2,
                    "config_mask": 1,
                    "config_value": 1,
                    "curr_value": 1,
                    "data2": 1,
                    "existing_bits": 1,
                    "existing_value": 1,
                    "mask1": 3,
                    "new_value": 1,
                    "old_value": 1,
                    "param1_value": 1,
                    "part2": 1,
                    "value1": 2,
                    "value2": 12
                },
                "param_4": {
                    "additional_flags": 1,
                    "bit_field3": 1,
                    "bit_mask3": 1,
                    "bitmask": 1,
                    "bitmask3": 2,
                    "config_bits": 1,
                    "config_data": 1,
                    "data3": 1,
                    "mask": 2,
                    "mask2": 3,
                    "new_bits": 1,
                    "param2_value": 1,
                    "part3": 1,
                    "value2": 1,
                    "value3": 13
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid update_register_value_00080d3e(int base_address,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(base_address + 4) =\n       value2 | *(uint *)(base_address + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "current_name": "update_register_value_00080d3e",
            "entrypoint": "0x00080d3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d3e": "update_register_value_00080d3e",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d58": {
            "additional_data": {
                "FUN_00080d58": {
                    "set_bit": 12,
                    "set_bit_at_index": 3,
                    "set_bit_at_position": 6,
                    "set_bit_in_integer": 3,
                    "set_bit_in_memory": 1,
                    "set_bit_in_position": 1,
                    "set_bit_in_variable": 1,
                    "set_bit_value": 3,
                    "set_bits_at_position": 1
                },
                "param_1": {
                    "address": 1,
                    "array": 1,
                    "base_addr": 1,
                    "base_address": 25,
                    "data": 1,
                    "memory_address": 1,
                    "variable_address": 1
                },
                "param_2": {
                    "bit_index": 5,
                    "bit_number": 1,
                    "bit_position": 23,
                    "index": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00080f0c"
            ],
            "code": "\nvoid set_bit_at_position_00080d58(int base_address,uint bit_position)\n\n{\n  *(int *)(base_address + 0x14) = 1 << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "set_bit_at_position_00080d58",
            "entrypoint": "0x00080d58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d58": "set_bit_at_position_00080d58",
                "param_1": "base_address",
                "param_2": "bit_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d62": {
            "additional_data": {
                "0x14": {
                    "offset": 1,
                    "value": 1
                },
                "0xffff": {
                    "default_value": 1,
                    "initial_value": 2
                },
                "FUN_00080d62": {
                    "initialize_data": 3,
                    "initialize_memory_value": 1,
                    "initialize_status": 1,
                    "initialize_value": 6,
                    "initialize_value_to_max": 1,
                    "set_default_value": 17,
                    "set_initial_value": 1,
                    "set_to_max_value": 1
                },
                "param_1": {
                    "arg1": 1,
                    "array_base_address": 1,
                    "base_address": 7,
                    "data_address": 2,
                    "data_pointer": 1,
                    "input": 2,
                    "input_param": 2,
                    "memory_address": 5,
                    "obj": 2,
                    "object_address": 3,
                    "object_pointer": 2,
                    "parameter": 1,
                    "status_struct": 1,
                    "target_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid set_default_value_00080d62(int base_address)\n\n{\n  *(undefined4 *)(base_address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "current_name": "set_default_value_00080d62",
            "entrypoint": "0x00080d62",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d62": "set_default_value_00080d62",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "additional_data": {
                "0x28": {
                    "offset": 1
                },
                "FUN_00080d6a": {
                    "set_param": 5,
                    "set_param_value": 15,
                    "set_parameter": 1,
                    "set_parameter_value": 2,
                    "set_value": 1,
                    "set_value_in_memory": 1,
                    "set_variable": 1,
                    "store_parameter_value": 3,
                    "store_value": 1,
                    "store_value_in_memory": 1
                },
                "param_1": {
                    "base_address": 8,
                    "main_parameter": 1,
                    "memory_address": 3,
                    "obj_address": 1,
                    "object_address": 15,
                    "object_offset": 1,
                    "object_ptr": 1,
                    "param_offset": 1
                },
                "param_2": {
                    "new_value": 8,
                    "param_value": 8,
                    "parameter_value": 4,
                    "value": 9,
                    "value_to_store": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\nvoid set_param_value_00080d6a(int object_address,undefined4 value)\n\n{\n  *(undefined4 *)(object_address + 0x28) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_00080d6a",
            "entrypoint": "0x00080d6a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "object_address",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e80": {
            "additional_data": {
                "DAT_00000000": {
                    "program_status": 1
                },
                "FUN_00080e80": {
                    "calculate_result": 1,
                    "get_default_value": 6,
                    "get_zero": 1,
                    "initialize": 17,
                    "initialize_data": 1,
                    "initialize_function": 2,
                    "initialize_program": 2,
                    "initialize_value": 1
                },
                "ret": {
                    "result": 1
                },
                "return": {
                    "result": 1
                },
                "undefined4": {
                    "void": 6
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid initialize_program_00080e80(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_program_00080e80",
            "entrypoint": "0x00080e80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e80": "initialize_program_00080e80",
                "ret": "result",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e88": {
            "additional_data": {
                "DAT_20071208": {
                    "current_sum": 1,
                    "current_value": 1,
                    "previous_value": 1,
                    "sum": 3,
                    "sum_value": 1
                },
                "FUN_00080e88": {
                    "add_and_update_value": 1,
                    "add_param_to_var_and_return": 1,
                    "add_param_to_variable": 1,
                    "add_with_previous": 2,
                    "calculate_and_store_sum": 2,
                    "calculate_new_value": 5,
                    "calculate_next_value": 1,
                    "calculate_sum": 18
                },
                "iVar1": {
                    "old_sum": 2,
                    "old_value": 1,
                    "original_value": 3,
                    "original_var_value": 1,
                    "output_value": 1,
                    "previous_sum": 7,
                    "previous_value": 13,
                    "return_value": 1,
                    "saved_value": 1,
                    "temp_variable": 1
                },
                "param_1": {
                    "input": 4,
                    "input_number": 4,
                    "input_value": 17,
                    "number": 1,
                    "value": 3,
                    "value_to_add": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0008236c"
            ],
            "code": "\nint calculate_and_store_sum_00080e88(int input_value)\n\n{\n  int previous_value;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previous_value = DAT_20071208;\n  DAT_20071208 = input_value + DAT_20071208;\n  return previous_value;\n}\n\n",
            "current_name": "calculate_and_store_sum_00080e88",
            "entrypoint": "0x00080e88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e88": "calculate_and_store_sum_00080e88",
                "iVar1": "previous_value",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "additional_data": {
                "0xffffffff": {
                    "error_code": 2,
                    "negative_one": 1
                },
                "DAT_00080eb7": {
                    "default_value": 1
                },
                "DAT_XXXXX": {
                    "": 1
                },
                "FUN_00080eaa": {
                    "get_default_return_value": 1,
                    "get_default_value": 4,
                    "get_error_code": 13,
                    "get_error_message": 1,
                    "get_negative_one": 4,
                    "get_negative_value": 1,
                    "get_return_value": 3,
                    "initialize_return_value": 1,
                    "initialize_value": 1,
                    "initialize_value_to_negative_one": 1,
                    "return_error": 1
                },
                "PTR_XXXXX": {
                    "": 1
                },
                "return": {
                    "return_value": 2
                },
                "undefined4": {
                    "int": 8,
                    "uint32": 2,
                    "uint32_t": 2,
                    "unsigned_int": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nint get_error_code_00080eaa(void)\n\n{\n  return_value 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_00080eaa",
            "entrypoint": "0x00080eaa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eaa": "get_error_code_00080eaa",
                "return": "return_value",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "additional_data": {
                "FUN_00080eb0": {
                    "initialize_data": 1,
                    "initialize_memory": 12,
                    "initialize_memory_segment": 1,
                    "set_memory_page_size": 6,
                    "set_memory_size": 1,
                    "set_memory_to_constant": 1,
                    "set_memory_value": 6,
                    "set_page_size": 3
                },
                "param_1": {
                    "base_address": 2,
                    "destination": 1,
                    "initial_value": 1,
                    "input_param": 1,
                    "input_value": 1,
                    "param": 2,
                    "param1": 8,
                    "param_value": 2,
                    "result": 6,
                    "status": 2,
                    "unused_argument": 1,
                    "unused_param": 1,
                    "value": 2,
                    "value_to_set": 1
                },
                "param_2": {
                    "address": 4,
                    "buffer": 1,
                    "data_address": 1,
                    "mem_address": 1,
                    "memory": 1,
                    "memory_address": 17,
                    "memory_location": 1,
                    "memory_pointer": 1,
                    "offset": 1,
                    "param2": 1,
                    "source": 1,
                    "target_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00084494"
            ],
            "code": "\nundefined4 initialize_memory_segment_00080eb0(undefined4 param1,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_segment_00080eb0",
            "entrypoint": "0x00080eb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eb0": "initialize_memory_segment_00080eb0",
                "param_1": "param1",
                "param_2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eba": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_": {
                    "": 1
                },
                "DAT_00000001": {
                    "result": 1
                },
                "FUN_00080eba": {
                    "check_if_one": 1,
                    "check_return_value": 1,
                    "get_constant_value": 1,
                    "get_one": 8,
                    "get_return_value": 11,
                    "initialize": 7,
                    "return_one": 2
                },
                "PTR_": {
                    "": 1
                },
                "return": {
                    "result": 3,
                    "status": 3
                },
                "undefined4": {
                    "int": 5,
                    "void": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000844bc"
            ],
            "code": "\nint get_return_value_00080eba(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_return_value_00080eba",
            "entrypoint": "0x00080eba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eba": "get_return_value_00080eba",
                "return": "result",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "additional_data": {
                "": {
                    "": 1
                },
                "FUN_00080ebe": {
                    "calculate_result": 2,
                    "clear_data": 1,
                    "get_default_value": 3,
                    "get_result": 1,
                    "get_zero": 2,
                    "initialize": 13,
                    "initialize_data": 3,
                    "initialize_program": 1,
                    "initialize_value": 4,
                    "initialize_value_to_zero": 1
                },
                "PTR_param1": {
                    "parameter1": 1
                },
                "PTR_param2": {
                    "parameter2": 1
                },
                "VAR_00000000": {
                    "result": 1
                },
                "ret_val": {
                    "result": 1
                },
                "return": {
                    "result": 1
                },
                "undefined4": {
                    "return_type": 1,
                    "return_value": 1,
                    "uint32_t": 1,
                    "void": 10
                }
            },
            "called": [],
            "calling": [
                "FUN_000844e0"
            ],
            "code": "\nvoid initialize_value_to_zero_00080ebe(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_value_to_zero_00080ebe",
            "entrypoint": "0x00080ebe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ebe": "initialize_value_to_zero_00080ebe",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "additional_data": {
                "FUN_00080ec2": {
                    "better_function_name": 1,
                    "get_default_value": 9,
                    "get_return_value": 2,
                    "get_zero": 3,
                    "get_zero_value": 3,
                    "initialize": 11,
                    "initialize_program": 1,
                    "initialize_value": 1
                },
                "PTR_FUN_00080ec2": {
                    "p_zero": 1
                },
                "return": {
                    "result": 1
                },
                "undefined4": {
                    "int": 2,
                    "uint32_t": 1,
                    "void": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_00084508"
            ],
            "code": "\nvoid initialize_value_00080ec2(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_value_00080ec2",
            "entrypoint": "0x00080ec2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ec2": "initialize_value_00080ec2",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "additional_data": {
                "FUN_00080ec8": {
                    "convert_bytes_to_u_int": 1,
                    "convert_bytes_to_unsigned_int": 2,
                    "copy_byte_array": 1,
                    "copy_bytes": 7,
                    "copy_bytes_from_source_to_dest": 1,
                    "copy_bytes_to_array": 1,
                    "extract_bytes_from_pointer": 1,
                    "parse_data": 3,
                    "process_bytes": 3,
                    "process_data": 8,
                    "read_and_store_bytes": 1,
                    "unpack_data": 1,
                    "update_data": 1
                },
                "iVar1": {
                    "counter": 1,
                    "i": 9,
                    "index": 20
                },
                "param_1": {
                    "arg1": 1,
                    "array": 1,
                    "config": 2,
                    "conversion_type": 1,
                    "dest": 3,
                    "input_buffer": 1,
                    "input_ptr": 1,
                    "param": 2,
                    "param1": 12,
                    "param_1": 1,
                    "source": 1,
                    "undefined": 2,
                    "undefined_param": 2,
                    "undefined_value": 1
                },
                "param_2": {
                    "byte_array": 3,
                    "byte_array_ptr": 1,
                    "data": 1,
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_ptr": 6,
                    "dest_ptr": 1,
                    "input_array": 2,
                    "input_buffer": 1,
                    "input_buffer_start_index": 1,
                    "param2": 3,
                    "pointer_offset": 1,
                    "source": 2,
                    "source_address": 1,
                    "source_buffer": 1,
                    "src": 5
                },
                "param_3": {
                    "array_length": 3,
                    "buffer_size": 1,
                    "byte_array_length": 2,
                    "byte_count": 1,
                    "data_length": 2,
                    "data_size": 5,
                    "input_buffer_length": 1,
                    "length": 2,
                    "num_bytes": 8,
                    "param3": 3,
                    "size": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_00084244"
            ],
            "code": "\n\n\nuint copy_bytes_from_source_to_dest_00080ec8(undefined4 param1,int data_ptr,uint num_bytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)num_bytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(data_ptr + index);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "current_name": "copy_bytes_from_source_to_dest_00080ec8",
            "entrypoint": "0x00080ec8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ec8": "copy_bytes_from_source_to_dest_00080ec8",
                "iVar1": "index",
                "param_1": "param1",
                "param_2": "data_ptr",
                "param_3": "num_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080eec": {
            "additional_data": {
                "FUN_00080eec": {
                    "end_program": 1,
                    "exit_with_message": 1,
                    "exit_with_status": 25,
                    "exit_with_status_message": 2,
                    "infinite_loop": 1,
                    "print_exit_status": 1
                },
                "param_1": {
                    "exit_status": 1,
                    "status": 27,
                    "status_code": 3
                },
                "param_2": {
                    "": 1,
                    "unused": 11,
                    "unused1": 1,
                    "unused_param": 1,
                    "unused_param2": 2,
                    "unused_param_2": 1
                },
                "param_3": {
                    "": 1,
                    "arg3": 2,
                    "format_string": 7,
                    "message": 3,
                    "param_3": 1,
                    "unused": 4,
                    "unused1": 4,
                    "unused_1": 1,
                    "unused_2": 2,
                    "unused_param1": 2,
                    "unused_param3": 2,
                    "unused_param_2": 1,
                    "unused_param_3": 1
                },
                "param_4": {
                    "": 1,
                    "arg1": 1,
                    "arg4": 2,
                    "param_4": 2,
                    "unused": 10,
                    "unused2": 6,
                    "unused_2": 1,
                    "unused_3": 2,
                    "unused_param2": 2,
                    "unused_param4": 2,
                    "unused_param_3": 1,
                    "unused_param_4": 1
                },
                "process_elf_data_000817c8": {
                    "print_message": 2,
                    "print_status_message": 1
                }
            },
            "called": [
                "FUN_000817c8"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nvoid exit_with_status_message_00080eec(undefined4 status,undefined4 unused,undefined4 format_string,undefined4 unused)\n\n{\n  print_message(\"Exiting with status %d.\\n\",status,format_string,unused,unused);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "exit_with_status_message_00080eec",
            "entrypoint": "0x00080eec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080eec": "exit_with_status_message_00080eec",
                "param_1": "status",
                "param_2": "unused",
                "param_3": "format_string",
                "param_4": "unused",
                "process_elf_data_000817c8": "print_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080efc": {
            "called": [],
            "calling": [
                "FUN_000841e4"
            ],
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080efc",
            "entrypoint": "0x00080efc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080efe": {
            "additional_data": {
                "0xffffffff": {
                    "error_code": 1,
                    "error_message": 1
                },
                "FUN_00080efe": {
                    "get_default_value": 5,
                    "get_error_code": 13,
                    "get_error_message": 1,
                    "get_failure_code": 1,
                    "get_negative_one": 1,
                    "get_return_code": 2,
                    "get_return_value": 6,
                    "initialize_return_value": 1
                },
                "FUN_00080efe_param_1": {
                    "param1": 1
                },
                "FUN_00080efe_param_2": {
                    "param2": 1
                },
                "return": {
                    "result": 1
                },
                "undefined4": {
                    "int": 3,
                    "uint32_t": 3,
                    "unsigned_int": 1
                }
            },
            "called": [],
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "code": "\nuint32_t get_error_code_00080efe(void)\n\n{\n  result 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_00080efe",
            "entrypoint": "0x00080efe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe",
                "return": "result",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080f08": {
            "called": [],
            "calling": [
                "FUN_00080250",
                "FUN_000801e0",
                "FUN_000815ec"
            ],
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080f08",
            "entrypoint": "0x00080f08",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080f0c": {
            "additional_data": {
                "FUN_00080f0c": {
                    "process_data": 1,
                    "update_and_return": 1,
                    "update_and_return_parameter": 1,
                    "update_parameter": 5,
                    "update_parameter_and_return": 1,
                    "update_parameter_and_return_value": 5,
                    "update_parameter_value": 8,
                    "update_status": 1,
                    "update_value": 1,
                    "updated_function": 1
                },
                "_DAT_400e0614": {
                    "bit_register2": 1,
                    "reg2": 1,
                    "reg_b": 1,
                    "register2": 3
                },
                "_DAT_400e0618": {
                    "bit_register1": 1,
                    "reg1": 1,
                    "reg_a": 1,
                    "register1": 3
                },
                "_DAT_400e0704": {
                    "bit_register4": 1,
                    "reg4": 1,
                    "reg_d": 1,
                    "register4": 3
                },
                "_DAT_400e0708": {
                    "bit_register3": 1,
                    "reg3": 1,
                    "reg_c": 1,
                    "register3": 3
                },
                "bVar5": {
                    "bit_low": 1,
                    "bit_value": 1,
                    "bit_value1": 1,
                    "bit_value_1": 1,
                    "bit_var1": 1,
                    "condition1": 1,
                    "input_value1_bit": 1,
                    "lower_bits": 6,
                    "lower_byte": 1,
                    "lower_nibble": 10,
                    "mask_lower": 1,
                    "option_type": 1,
                    "parameter_type": 1,
                    "temp_byte1": 1,
                    "temp_var4": 1,
                    "type_low": 1,
                    "var4": 1
                },
                "bVar6": {
                    "all_bits": 1,
                    "bit_field": 1,
                    "bit_flags": 1,
                    "bit_high": 1,
                    "bit_info": 1,
                    "bit_value2": 1,
                    "bit_value_2": 1,
                    "bit_var2": 1,
                    "bits": 1,
                    "bitwise_flags": 1,
                    "byte_value": 1,
                    "byte_var": 1,
                    "combined_bits": 2,
                    "combined_byte": 1,
                    "combined_value": 1,
                    "condition2": 1,
                    "full_byte": 1,
                    "input_value1_type": 1,
                    "mask": 1,
                    "old_value": 1,
                    "status": 1,
                    "temp_byte2": 1,
                    "temp_var5": 1,
                    "type_full": 1,
                    "upper_byte": 1,
                    "upper_nibble": 2,
                    "value": 1,
                    "var5": 1,
                    "var_flags": 1
                },
                "check_bit_and_set_00080aa8": {
                    "check_and_set_bit": 1,
                    "check_bit_and_set": 2
                },
                "iVar1": {
                    "output": 2,
                    "output_value": 1,
                    "result": 18,
                    "return_value": 9,
                    "updated_parameter": 1
                },
                "iVar7": {
                    "data_offset": 1,
                    "index": 2,
                    "index_offset": 1,
                    "index_var1": 1,
                    "offset": 6,
                    "param_index": 1,
                    "param_offset": 5,
                    "parameter_index": 1,
                    "parameter_offset": 1,
                    "temp_index": 1,
                    "temp_index1": 2,
                    "temp_var": 1,
                    "temp_var1": 2,
                    "temp_var4": 3,
                    "temp_var6": 1,
                    "temp_variable1": 1,
                    "var6": 1
                },
                "iVar8": {
                    "index_var2": 1,
                    "param_address": 3,
                    "param_value": 2,
                    "param_value_ptr": 1,
                    "parameter": 4,
                    "parameter_address": 1,
                    "parameter_ptr": 2,
                    "parameter_value": 2,
                    "ptr": 1,
                    "ptr_value": 1,
                    "temp_index2": 2,
                    "temp_value": 1,
                    "temp_var2": 2,
                    "temp_var5": 3,
                    "temp_var7": 1,
                    "temp_variable2": 1,
                    "update_param": 1,
                    "value": 1,
                    "var7": 1
                },
                "iVar9": {
                    "set_bit_result": 1
                },
                "param_1": {
                    "data_index": 1,
                    "device_index": 1,
                    "index": 5,
                    "input": 3,
                    "input_1": 2,
                    "input_index": 3,
                    "input_param": 10,
                    "input_parameter": 1,
                    "input_value": 3,
                    "input_value1": 1,
                    "param": 1
                },
                "param_2": {
                    "another_param": 1,
                    "condition": 2,
                    "condition_param": 1,
                    "flag": 1,
                    "flag_param": 1,
                    "input_2": 2,
                    "input_value": 1,
                    "input_value2": 1,
                    "mode": 3,
                    "mode_param": 1,
                    "operation": 1,
                    "option": 3,
                    "other_param": 1,
                    "parameter": 1,
                    "parameter_value": 1,
                    "selection": 1,
                    "selection_param": 2,
                    "state_param": 1,
                    "type": 1,
                    "value": 5
                },
                "set_bit_at_position_00080d58": {
                    "set_bit_at_position": 2
                },
                "uVar10": {
                    "bit_index": 1
                },
                "uVar11": {
                    "bit_check_result": 1
                },
                "uVar2": {
                    "bit_index": 3,
                    "bit_mask": 5,
                    "bit_position": 5,
                    "mask": 2,
                    "position": 1,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "temp_var1": 7,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "u_result": 1,
                    "value": 1,
                    "var1": 1
                },
                "uVar3": {
                    "action": 1,
                    "function_flag": 1,
                    "new_value": 1,
                    "new_value_type": 1,
                    "param_type": 3,
                    "parameter_type": 2,
                    "parameter_value": 1,
                    "temp_value2": 1,
                    "temp_var2": 7,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "update_mode": 2,
                    "update_option": 1,
                    "update_type": 5,
                    "update_value": 1,
                    "var2": 1
                },
                "uVar4": {
                    "bit_check_result": 1,
                    "bit_flag": 1,
                    "bit_mask": 7,
                    "bit_result": 2,
                    "check_result": 2,
                    "check_value": 1,
                    "mask": 1,
                    "new_value": 1,
                    "result": 1,
                    "temp": 2,
                    "temp_value3": 1,
                    "temp_var3": 7,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "var3": 1
                },
                "update_parameter_and_return_value_00080a30": {
                    "update_and_return_value": 1,
                    "update_parameter_and_return_value": 2
                }
            },
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "calling": [
                "FUN_000801e0",
                "FUN_000806a0",
                "FUN_00081014"
            ],
            "code": "\n\n\nint update_parameter_and_return_value_00080f0c(int input_param,int value)\n\n{\n  int result;\n  uint temp_var1;\n  undefined4 temp_var2;\n  uint bit_mask;\n  byte lower_nibble;\n  byte upper_nibble;\n  int offset;\n  int parameter;\n  \n  result = input_param;\n  if ((&DAT_00084b50)[input_param * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[input_param] & 0xf) == 4) {\n      result = set_bit_at_position(0x400c0000,(&DAT_00084b5d)[input_param * 0x1c]);\n    }\n    upper_nibble = (&DAT_20070e1c)[input_param];\n    lower_nibble = upper_nibble & 0xf;\n    if ((lower_nibble < 3) && (upper_nibble != 0)) {\n      if (lower_nibble == 2) {\n        if (value == 0) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 1) {\n        if (value == 2) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 3) {\n        if (value == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (value != 1) {\nLAB_00080f68:\n      if (value == 0) {\n        result = input_param * 0x1c;\n        check_bit_and_set(*(undefined4 *)(&DAT_00084b4c + result));\n        result = update_parameter_and_return_value_00080f0c(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),0);\n        upper_nibble = (&DAT_20070e1c)[input_param] & 0xf0 | 2;\n      }\n      else {\n        if (value != 2) {\n          return result;\n        }\n        result = input_param * 0x1c;\n        check_bit_and_set(*(undefined4 *)(&DAT_00084b4c + result));\n        result = update_parameter_and_return_value_00080f0c(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),1);\n        upper_nibble = (&DAT_20070e1c)[input_param] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[input_param] = upper_nibble;\n      return result;\n    }\n    offset = input_param * 0x1c;\n    parameter = *(int *)(&DAT_00084b44 + offset);\n    if (upper_nibble >> 4 == 0) {\n      temp_var2 = 4;\n    }\n    else {\n      temp_var2 = 5;\n    }\n    result = update_parameter_and_return_value_00080f0c(parameter,temp_var2,*(undefined4 *)(&DAT_00084b48 + offset),\n                         *(undefined4 *)(&DAT_00084b54 + offset));\n    (&DAT_20070e1c)[input_param] = (&DAT_20070e1c)[input_param] & 0xf0 | 3;\n    if (*(int *)(parameter + 0x18) == -1) {\n      temp_var1 = *(uint *)(&DAT_00084b4c + offset);\n      if (0x2c < temp_var1) {\n        return 1;\n      }\n      if (temp_var1 < 0x20) {\n        temp_var1 = 1 << (temp_var1 & 0xff);\n        bit_mask = _DAT_400e0618 & temp_var1;\n        if (bit_mask == temp_var1) {\n          _DAT_400e0614 = bit_mask;\n        }\n      }\n      else {\n        temp_var1 = 1 << (temp_var1 - 0x20 & 0xff);\n        bit_mask = _DAT_400e0708 & temp_var1;\n        if (bit_mask == temp_var1) {\n          _DAT_400e0704 = bit_mask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "update_parameter_and_return_value_00080f0c",
            "entrypoint": "0x00080f0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080f0c": "update_parameter_and_return_value_00080f0c",
                "bVar5": "lower_nibble",
                "bVar6": "upper_nibble",
                "check_bit_and_set_00080aa8": "check_bit_and_set",
                "iVar1": "result",
                "iVar7": "offset",
                "iVar8": "parameter",
                "param_1": "input_param",
                "param_2": "value",
                "set_bit_at_position_00080d58": "set_bit_at_position",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "bit_mask",
                "update_parameter_and_return_value_00080a30": "update_parameter_and_return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081014": {
            "additional_data": {
                "FUN_00081014": {
                    "update_and_set_param_values": 1,
                    "update_and_set_parameter": 2,
                    "update_param_and_return_value": 1,
                    "update_param_or_set_value": 1,
                    "update_param_value": 1,
                    "update_parameter": 3,
                    "update_parameter_and_return_value": 1,
                    "update_parameter_if_condition_met": 2,
                    "update_parameter_value": 18,
                    "update_parameter_values": 1
                },
                "check_bitwise_and_condition_00080a94": {
                    "check_bitwise_and_condition": 9,
                    "check_bitwise_condition": 2,
                    "check_condition": 2
                },
                "iVar1": {
                    "bitwise_condition": 1,
                    "bitwise_result": 3,
                    "check_result": 1,
                    "condition": 2,
                    "condition_result": 12,
                    "result": 11,
                    "status": 1
                },
                "iVar3": {
                    "data": 2,
                    "data_address": 5,
                    "data_offset": 1,
                    "func_address": 1,
                    "param_address": 4,
                    "param_ptr": 2,
                    "param_value": 1,
                    "parameter_address": 1,
                    "parameter_struct": 1,
                    "pointer": 1,
                    "ptr": 6,
                    "ptr_index": 1,
                    "ptr_value": 3,
                    "ptr_var": 1,
                    "struct_address": 1
                },
                "param_1": {
                    "index": 31
                },
                "param_2": {
                    "new_param_value": 1,
                    "param_value": 1,
                    "value": 29
                },
                "param_3": {
                    "data": 3,
                    "extra_param": 2,
                    "new_value": 2,
                    "param": 21,
                    "param_value": 1,
                    "parameter": 2
                },
                "set_param_values_00080a0a": {
                    "set_param_values": 8,
                    "set_parameter_values": 3,
                    "set_values": 2
                },
                "uVar2": {
                    "new_value": 4,
                    "param_value": 20,
                    "param_value2": 1,
                    "param_value_2": 1,
                    "parameter_value": 1,
                    "updated_value": 1,
                    "value_to_assign": 1,
                    "value_to_update": 2
                },
                "update_parameter_and_return_value_00080f0c": {
                    "update_and_return": 1,
                    "update_and_return_value": 4,
                    "update_param_and_return_value": 1,
                    "update_parameter_and_return_value": 6
                },
                "update_parameter_values": {
                    "update_and_return_value": 1
                }
            },
            "called": [
                "FUN_00080a0a",
                "FUN_00080f0c",
                "FUN_00080a94"
            ],
            "calling": [
                "FUN_00080774",
                "FUN_0008044c",
                "FUN_00080250"
            ],
            "code": "\nvoid update_parameter_and_return_value_00081014(int index,int value,undefined4 param)\n\n{\n  int condition_result;\n  undefined4 param_value;\n  int ptr;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      update_parameter_and_return_value_00081014(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(value << 4);\n    ptr = *(int *)(&DAT_00084b44 + index * 0x1c);\n    param_value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    condition_result = check_bitwise_and_condition(ptr,param_value);\n    if (condition_result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(ptr + 100) = param_value;\n        return;\n      }\n      *(undefined4 *)(ptr + 0x60) = param_value;\n      return;\n    }\n    set_param_values(ptr,param_value,value,0,1);\n  }\n  return;\n}\n\n",
            "current_name": "update_parameter_and_return_value_00081014",
            "entrypoint": "0x00081014",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081014": "update_parameter_and_return_value_00081014",
                "check_bitwise_and_condition_00080a94": "check_bitwise_and_condition",
                "iVar1": "condition_result",
                "iVar3": "ptr",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "set_param_values_00080a0a": "set_param_values",
                "uVar2": "param_value",
                "update_parameter_and_return_value_00080f0c": "update_parameter_and_return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810a6": {
            "additional_data": {
                "FUN_000810a6": {
                    "execute_callback": 1,
                    "execute_function": 6,
                    "execute_function_if_non_zero": 2,
                    "execute_function_if_param_not_zero": 1,
                    "execute_function_with_leading_zeros": 1,
                    "execute_operation": 1,
                    "execute_reverse": 1,
                    "execute_reverse_operation": 1,
                    "handle_parameter": 1,
                    "perform_action_on_parameter": 1,
                    "process_and_call_function": 1,
                    "process_data": 5,
                    "process_input": 2,
                    "process_integer": 1,
                    "process_leading_zeros": 1,
                    "process_param": 1,
                    "process_with_leading_zeros": 1
                },
                "count_leading_zeros_00082688": {
                    "count_leading_zeros": 3
                },
                "param_1": {
                    "array": 1,
                    "array_pointer": 2,
                    "array_ptr": 5,
                    "callback_list": 1,
                    "data": 1,
                    "data_array": 1,
                    "data_ptr": 4,
                    "function": 1,
                    "function_args": 1,
                    "function_array": 1,
                    "function_pointer": 6,
                    "function_ptr_array": 1,
                    "input_array": 2,
                    "operation_data": 1,
                    "param_array": 1,
                    "param_ptr": 1,
                    "pointer_to_array": 1
                },
                "param_2": {
                    "input": 1,
                    "input_data": 1,
                    "input_param": 2,
                    "input_size": 2,
                    "input_value": 12,
                    "number": 3,
                    "param_value": 1,
                    "size": 1,
                    "value": 6,
                    "value_to_check": 2
                },
                "param_3": {
                    "arg1": 1,
                    "argument1": 1,
                    "count": 5,
                    "count_leading_zeros": 1,
                    "count_value": 1,
                    "first_additional_parameter": 1,
                    "first_param": 2,
                    "func_pointer1": 1,
                    "leading_zeros": 6,
                    "leading_zeros_count": 3,
                    "param3": 2,
                    "param_a": 1,
                    "parameter_3": 1,
                    "temp_var1": 1,
                    "unused_param": 1,
                    "var1": 1
                },
                "param_4": {
                    "additional_param": 3,
                    "additional_parameter": 1,
                    "arg2": 1,
                    "argument2": 1,
                    "callback": 2,
                    "callback_function": 1,
                    "data": 1,
                    "extra_data": 3,
                    "extra_param": 6,
                    "extra_parameter": 1,
                    "func_pointer2": 1,
                    "handler": 1,
                    "param4": 2,
                    "param_b": 1,
                    "parameter_4": 1,
                    "second_additional_parameter": 1,
                    "second_param": 2,
                    "temp_var2": 1,
                    "var2": 1
                },
                "uVar1": {
                    "count": 3,
                    "count_leading_zeros": 3,
                    "leading_zero_count": 1,
                    "leading_zeros": 5,
                    "leading_zeros_count": 10,
                    "num_leading_zeros": 5,
                    "zeros_count": 2
                }
            },
            "called": [
                "FUN_00082688"
            ],
            "calling": [
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_000810fc",
                "FUN_000810d8"
            ],
            "code": "\nvoid execute_function_if_non_zero_000810a6(int *function_pointer,int input_value,undefined4 leading_zeros,undefined4 extra_param)\n\n{\n  undefined4 leading_zeros_count;\n  \n  if (input_value != 0) {\n    leading_zeros_count = count_leading_zeros(input_value);\n    (**(code **)(*function_pointer + 4))(function_pointer,input_value,leading_zeros_count,*(code **)(*function_pointer + 4),extra_param);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_if_non_zero_000810a6",
            "entrypoint": "0x000810a6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810a6": "execute_function_if_non_zero_000810a6",
                "count_leading_zeros_00082688": "count_leading_zeros",
                "param_1": "function_pointer",
                "param_2": "input_value",
                "param_3": "leading_zeros",
                "param_4": "extra_param",
                "uVar1": "leading_zeros_count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810c4": {
            "additional_data": {
                "FUN_000810c4": {
                    "execute_first_function": 2,
                    "execute_function_if_needed": 1,
                    "execute_function_if_non_zero": 4,
                    "execute_if_non_zero": 2,
                    "execute_initialization": 2,
                    "execute_named_function": 1,
                    "execute_non_zero_conditionally": 1,
                    "execute_non_zero_function": 7,
                    "execute_non_zero_functions": 2,
                    "execute_nonzero_function": 2,
                    "execute_preconditions": 1,
                    "execute_preparation": 1,
                    "execute_previously_if_non_zero": 1,
                    "execute_related_function": 1,
                    "execute_relevant_function": 2,
                    "execute_specific_function": 1
                },
                "execute_function_if_non_zero_000810a6": {
                    "call_non_zero_function": 1,
                    "check_and_execute": 2,
                    "check_and_execute_function": 3,
                    "check_condition": 1,
                    "check_condition_and_execute": 1,
                    "check_condition_and_execute_function": 1,
                    "check_if_condition_is_met": 1,
                    "execute_function_if_condition_true": 1,
                    "execute_function_if_non_zero": 1,
                    "execute_functions_conditionally": 1,
                    "execute_if_non_zero": 4,
                    "execute_if_nonzero": 1,
                    "execute_if_value_non_zero": 1,
                    "execute_non_zero_function": 3,
                    "execute_non_zero_functions": 1,
                    "execute_nonzero_function_if_available": 1,
                    "execute_previously_if_non_zero": 1,
                    "execute_second_function": 2
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nvoid execute_function_if_non_zero_000810c4(void)\n\n{\n  execute_if_non_zero();\n  return;\n}\n\n",
            "current_name": "execute_function_if_non_zero_000810c4",
            "entrypoint": "0x000810c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810c4": "execute_function_if_non_zero_000810c4",
                "execute_function_if_non_zero_000810a6": "execute_if_non_zero"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810cc": {
            "additional_data": {
                "FUN_000810cc": {
                    "execute_callback_function": 1,
                    "execute_code": 5,
                    "execute_code_block": 1,
                    "execute_code_function": 1,
                    "execute_first_function": 1,
                    "execute_func": 1,
                    "execute_function": 21
                },
                "code": {
                    "function_to_execute": 2
                },
                "param_1": {
                    "callback_function_pointer": 1,
                    "code_block_ptr": 1,
                    "code_pointer": 1,
                    "code_ptr": 1,
                    "function_pointer": 23,
                    "function_ptr": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0008113a"
            ],
            "code": "\nvoid execute_code_function_000810cc(undefined4 *function_pointer)\n\n{\n  (**(function_to_execute **)*function_pointer)();\n  return;\n}\n\n",
            "current_name": "execute_code_function_000810cc",
            "entrypoint": "0x000810cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810cc": "execute_code_function_000810cc",
                "code": "function_to_execute",
                "param_1": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810d8": {
            "additional_data": {
                "FUN_000810d8": {
                    "execute_function": 2,
                    "execute_function_and_update_if_non_zero": 1,
                    "execute_function_if_non_zero": 3,
                    "execute_function_or_default": 1,
                    "execute_function_with_condition": 1,
                    "execute_function_with_non_zero": 1,
                    "execute_function_with_non_zero_check": 2,
                    "execute_function_with_params": 6,
                    "execute_if_non_zero": 2,
                    "execute_if_nonzero": 1,
                    "execute_non_zero_function": 4,
                    "execute_nonzero_function": 1,
                    "execute_with_condition": 2,
                    "execute_with_non_zero_condition": 1,
                    "execute_with_nonzero_check": 1,
                    "execute_with_params": 2
                },
                "param_1": {
                    "arg1": 5,
                    "arg_1": 2,
                    "argument1": 1,
                    "argument_1": 1,
                    "condition": 3,
                    "data_1": 1,
                    "input1": 1,
                    "input_1": 3,
                    "input_param": 1,
                    "input_param_1": 1,
                    "input_parameter_1": 1,
                    "input_value": 1,
                    "param": 1,
                    "param1": 5,
                    "param_1": 1,
                    "param_a": 1,
                    "param_x": 1,
                    "parameter1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "arg_2": 1,
                    "data_2": 1,
                    "param2": 2,
                    "param_y": 1,
                    "unused": 1,
                    "unused_param": 1
                },
                "param_3": {
                    "arg2": 2,
                    "arg3": 3,
                    "arg_2": 1,
                    "arg_3": 1,
                    "argument3": 1,
                    "argument_1": 1,
                    "argument_3": 1,
                    "config_1": 1,
                    "data_1": 1,
                    "data_param": 1,
                    "data_param_1": 1,
                    "input3": 1,
                    "input_1": 1,
                    "input_2": 2,
                    "input_3": 1,
                    "input_param_2": 1,
                    "input_parameter_2": 1,
                    "param2": 1,
                    "param3": 5,
                    "param_2": 1,
                    "param_c": 1,
                    "param_z": 1,
                    "parameter3": 1
                },
                "param_4": {
                    "arg3": 2,
                    "arg4": 3,
                    "arg_3": 1,
                    "arg_4": 1,
                    "argument4": 1,
                    "argument_2": 1,
                    "argument_4": 1,
                    "config_2": 1,
                    "data_2": 1,
                    "data_param_2": 1,
                    "input4": 1,
                    "input_2": 1,
                    "input_3": 2,
                    "input_4": 1,
                    "input_param_3": 1,
                    "input_parameter_3": 1,
                    "param3": 1,
                    "param4": 5,
                    "param_3": 1,
                    "param_4": 1,
                    "param_d": 1,
                    "param_w": 1,
                    "parameter4": 1
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "code": "\nvoid execute_function_and_update_if_non_zero_000810d8(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  execute_function_if_non_zero_000810a6(param1,&DAT_00085635,param3,param4,param4);\n  return;\n}\n\n",
            "current_name": "execute_function_and_update_if_non_zero_000810d8",
            "entrypoint": "0x000810d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810d8": "execute_function_and_update_if_non_zero_000810d8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810e8": {
            "additional_data": {
                "FUN_000810e8": {
                    "add_two_values": 1,
                    "calculate_sum": 27,
                    "sum_execute_functions": 3
                },
                "iVar1": {
                    "execution_result1": 1,
                    "first_result": 3,
                    "result1": 27
                },
                "iVar2": {
                    "execution_result2": 1,
                    "result2": 27,
                    "second_result": 3
                },
                "param_1": {
                    "arg": 1,
                    "input": 8,
                    "input_param": 4,
                    "input_value": 14,
                    "param": 1,
                    "value": 3
                }
            },
            "called": [
                "FUN_000810a6",
                "FUN_000810d8"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_sum_000810e8(undefined4 input_value)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = execute_function_if_non_zero_000810a6();\n  result2 = execute_function_and_update_if_non_zero_000810d8(input_value);\n  return result2 + result1;\n}\n\n",
            "current_name": "calculate_sum_000810e8",
            "entrypoint": "0x000810e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "iVar1": "result1",
                "iVar2": "result2",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000810fc": {
            "additional_data": {
                "FUN_000810fc": {
                    "convert_decimal_to_base": 7,
                    "convert_integer_to_base": 1,
                    "convert_number": 1,
                    "convert_number_to_base": 8,
                    "convert_number_to_string": 2,
                    "convert_to_base": 11,
                    "convert_to_base_string": 1
                },
                "cVar4": {
                    "converted_char": 2,
                    "converted_digit": 5,
                    "digit": 9,
                    "digit_char": 6,
                    "digit_character": 1
                },
                "local_15": {
                    "converted_digits": 4,
                    "converted_num": 1,
                    "converted_number": 8,
                    "converted_value": 2,
                    "digit_array": 1,
                    "result": 1,
                    "result_buffer": 1
                },
                "param_1": {
                    "function_param_1": 1,
                    "input": 7,
                    "input_buffer": 1,
                    "input_number": 1,
                    "input_param": 1,
                    "input_value": 6,
                    "num_to_convert": 1,
                    "original_number": 1,
                    "output": 1,
                    "output_buffer": 6,
                    "output_param": 1,
                    "output_value": 1,
                    "param1": 1,
                    "result": 1,
                    "value_to_convert": 1
                },
                "param_2": {
                    "decimal": 1,
                    "decimal_num": 1,
                    "decimal_number": 4,
                    "decimal_value": 2,
                    "dividend": 1,
                    "input_integer": 1,
                    "input_number": 1,
                    "input_value": 1,
                    "number": 16,
                    "number_to_convert": 1,
                    "original_number": 2
                },
                "param_3": {
                    "base": 31
                },
                "pcVar1": {
                    "buffer": 1,
                    "buffer_pointer": 1,
                    "converted_number": 1,
                    "current_character": 1,
                    "current_digit": 4,
                    "output": 3,
                    "output_ptr": 2,
                    "output_string": 3,
                    "ptr_converted_value": 1,
                    "result": 2,
                    "result_array": 1,
                    "result_ptr": 3
                },
                "pcVar3": {
                    "current_char": 6,
                    "current_digit": 5,
                    "current_output_ptr": 1,
                    "current_ptr": 3,
                    "output_ptr_prev": 1,
                    "previous_character": 1,
                    "previous_digit": 4,
                    "ptr_current_char": 1,
                    "result_ptr": 1
                },
                "uVar2": {
                    "quotient": 23
                },
                "uVar5": {
                    "remainder": 23
                }
            },
            "called": [
                "FUN_000810a6"
            ],
            "calling": [
                "FUN_0008113a"
            ],
            "code": "\nvoid convert_number_to_base_000810fc(undefined4 input,uint number,uint base)\n\n{\n  char *current_digit;\n  uint quotient;\n  char *current_char;\n  char digit;\n  uint remainder;\n  char converted_number [5];\n  \n  converted_number[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  current_digit = converted_number;\n  do {\n    current_char = current_digit;\n    quotient = number / base;\n    remainder = number - base * quotient & 0xff;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *current_char = digit;\n    number = quotient;\n    current_digit = current_char + -1;\n  } while (quotient != 0);\n  execute_function_if_non_zero_000810a6(input,current_char);\n  return;\n}\n\n",
            "current_name": "convert_number_to_base_000810fc",
            "entrypoint": "0x000810fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000810fc": "convert_number_to_base_000810fc",
                "cVar4": "digit",
                "local_15": "converted_number",
                "param_1": "input",
                "param_2": "number",
                "param_3": "base",
                "pcVar1": "current_digit",
                "pcVar3": "current_char",
                "uVar2": "quotient",
                "uVar5": "remainder"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008113a": {
            "additional_data": {
                "FUN_0008113a": {
                    "convert_and_execute": 1,
                    "convert_base": 2,
                    "convert_number": 7,
                    "convert_number_base": 4,
                    "convert_number_based_on_parameters": 1,
                    "convert_number_to_base": 12,
                    "convert_number_to_base_with_sign": 1,
                    "convert_number_to_string": 1,
                    "convert_number_with_base": 2
                },
                "convert_number_to_base_000810fc": {
                    "convert_number_to_base": 2,
                    "convert_to_base": 2
                },
                "execute_code_function_000810cc": {
                    "execute_code": 1,
                    "execute_code_function": 2,
                    "execute_minus_symbol_code": 1
                },
                "iVar1": {
                    "result": 30,
                    "result_1": 1
                },
                "iVar2": {
                    "absolute_value": 1,
                    "additional": 1,
                    "converted_number": 1,
                    "negative_multiplier": 1,
                    "negative_number": 1,
                    "negative_offset": 1,
                    "negative_part": 1,
                    "negative_result": 19,
                    "offset": 1,
                    "prefix_length": 1,
                    "result_2": 1,
                    "sign": 1,
                    "temp_result": 1
                },
                "param_1": {
                    "arg1": 1,
                    "array": 2,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "buffer": 2,
                    "config": 1,
                    "data": 2,
                    "data_array": 1,
                    "data_list": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "destination": 1,
                    "function_pointer": 1,
                    "input": 1,
                    "input_array": 5,
                    "input_buffer": 1,
                    "input_data": 1,
                    "input_ptr": 1,
                    "num_ptr": 1,
                    "output": 1,
                    "ptr": 1,
                    "result_buffer": 1
                },
                "param_2": {
                    "input_number": 3,
                    "num": 1,
                    "number": 26,
                    "value": 1
                },
                "param_3": {
                    "base": 30,
                    "conversion_base": 1
                },
                "param_4": {
                    "arg": 1,
                    "arg4": 1,
                    "argument": 1,
                    "conversion_param": 1,
                    "conversion_parameter": 1,
                    "extra_param": 4,
                    "output_buffer": 1,
                    "param": 4,
                    "param4": 1,
                    "param_4": 12,
                    "special_number": 1,
                    "undefined4": 1,
                    "unknown": 1,
                    "unknown_param": 1
                }
            },
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "calling": [
                "FUN_0008117a",
                "thunk_FUN_0008113a"
            ],
            "code": "\nint convert_number_to_base_with_sign_0008113a(undefined4 *input_array,uint number,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negative_result;\n  \n  if (base == 0) {\n    result = (**(code **)*input_array)(input_array,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = execute_code_function(input_array,0x2d);\n      negative_result = convert_to_base(input_array,-number,10);\n      return negative_result + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_to_base(input_array,number,base,param_4);\n  return result;\n}\n\n",
            "current_name": "convert_number_to_base_with_sign_0008113a",
            "entrypoint": "0x0008113a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008113a": "convert_number_to_base_with_sign_0008113a",
                "convert_number_to_base_000810fc": "convert_to_base",
                "execute_code_function_000810cc": "execute_code_function",
                "iVar1": "result",
                "iVar2": "negative_result",
                "param_1": "input_array",
                "param_2": "number",
                "param_3": "base"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008117a": {
            "additional_data": {
                "FUN_0008117a": {
                    "add_converted_number_and_result": 1,
                    "calculate_and_update_result": 1,
                    "calculate_result": 2,
                    "calculate_sum": 15,
                    "calculate_sum_and_add": 1,
                    "calculate_sum_from_function_and_number": 1,
                    "calculate_sum_of_converted_numbers": 2,
                    "calculate_sum_of_number_and_result": 1,
                    "calculate_sum_with_conversion": 3,
                    "calculate_updated_value": 1,
                    "sum_of_converted_number_and_function_result": 1,
                    "sum_of_converted_number_and_return_value": 1,
                    "sum_with_converted_number": 1
                },
                "iVar1": {
                    "base_conversion_result": 2,
                    "converted_number": 23,
                    "converted_value": 6
                },
                "iVar2": {
                    "executed_function_result": 1,
                    "executed_result": 9,
                    "executed_value": 1,
                    "function_execution_result": 1,
                    "function_result": 8,
                    "result": 2,
                    "result_after_execution": 1,
                    "result_from_execution": 1,
                    "result_from_function": 1,
                    "result_of_execution": 3,
                    "result_of_function": 1,
                    "return_value": 1,
                    "updated_value": 1
                },
                "param_1": {
                    "input": 1,
                    "input_number": 8,
                    "input_param": 1,
                    "input_value": 19,
                    "number": 2
                }
            },
            "called": [
                "FUN_0008113a",
                "FUN_000810d8"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_sum_with_conversion_0008117a(undefined4 input_value)\n\n{\n  int converted_number;\n  int executed_result;\n  \n  converted_number = convert_number_to_base_with_sign_0008113a();\n  executed_result = execute_function_and_update_if_non_zero_000810d8(input_value);\n  return executed_result + converted_number;\n}\n\n",
            "current_name": "calculate_sum_with_conversion_0008117a",
            "entrypoint": "0x0008117a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008117a": "calculate_sum_with_conversion_0008117a",
                "iVar1": "converted_number",
                "iVar2": "executed_result",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081190": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "elf_relocation_array": 1,
                    "rel_array": 7,
                    "rel_entry_array": 1,
                    "relocation_array": 6,
                    "relocation_entries": 8,
                    "relocation_table": 4,
                    "relocations": 2
                },
                "FUN_00081190": {
                    "decrement_and_call_if_zero": 1,
                    "decrement_and_execute_if_zero": 1,
                    "decrement_if_zero": 1,
                    "execute_func_if_r_info_zero": 1,
                    "execute_function_after_decrement": 1,
                    "execute_function_if_condition_met": 3,
                    "execute_function_if_r_info_is_zero": 3,
                    "execute_if_condition_met": 3,
                    "execute_if_r_info_decreased_to_zero": 1,
                    "execute_if_r_info_equals_zero": 2,
                    "execute_if_r_info_is_minus_one": 1,
                    "execute_if_r_info_is_zero": 4,
                    "execute_if_r_info_zero": 2,
                    "execute_if_rel_entry_6_is_zero": 1,
                    "execute_if_rel_info_zero": 1,
                    "execute_if_relocated": 1,
                    "execute_if_relocation_is_zero": 1,
                    "execute_if_reversed_info_valid": 1,
                    "perform_action_if_counter_zero": 1,
                    "perform_function_if_condition_met": 1
                },
                "code": {
                    "code_pointer": 1,
                    "function_to_call": 1,
                    "function_to_execute": 1
                },
                "r_info": {
                    "entry_info": 3,
                    "info": 12,
                    "rel_info": 1,
                    "relocation_info": 11
                },
                "r_offset": {
                    "entry_offset": 2,
                    "offset": 13,
                    "rel_offset": 1,
                    "relocation_offset": 11
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_function_if_r_info_is_zero_00081190(void)\n\n{\n  if ((relocation_entries[6].info != 0xffffffff) &&\n     (relocation_entries[6].info = relocation_entries[6].info - 1,\n     relocation_entries[6].info == 0)) {\n    (*(function_to_execute *)((int)&relocation_entries[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_if_r_info_is_zero_00081190",
            "entrypoint": "0x00081190",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_entries",
                "FUN_00081190": "execute_function_if_r_info_is_zero_00081190",
                "code": "function_to_execute",
                "r_info": "info",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811b0": {
            "additional_data": {
                "0": {
                    "byte_to_fill": 2,
                    "byte_value": 5,
                    "initial_value": 2,
                    "start_byte": 2,
                    "start_offset": 1,
                    "start_value": 1
                },
                "0x80": {
                    "byte_count": 1,
                    "byte_value": 1,
                    "byte_value_size": 1,
                    "end_offset": 1,
                    "memory_block_size": 1,
                    "memory_size": 5,
                    "num_bytes": 1,
                    "offset2": 1,
                    "segment_size": 1
                },
                "0x84": {
                    "additional_value": 1,
                    "offset": 4,
                    "offset1": 1,
                    "ptr1": 1,
                    "value1": 1,
                    "zero": 1
                },
                "DAT_00081f00": {
                    "byte_to_fill": 1
                },
                "FUN_000811b0": {
                    "fill_memory_with_byte": 6,
                    "fill_memory_with_byte_and_clear": 1,
                    "initialize_memory": 23,
                    "initialize_memory_segment": 1
                },
                "PTR_000011b0": {
                    "byte_pointer": 1
                },
                "_param_2": {
                    "start_offset": 1
                },
                "_param_3": {
                    "length": 1
                },
                "fill_memory_with_byte_00081f00": {
                    "fill_memory": 5,
                    "fill_memory_block_with_byte": 1,
                    "fill_memory_segment": 1,
                    "fill_memory_with_byte": 13,
                    "fill_memory_with_zero": 1,
                    "fill_memory_with_zeros": 1
                },
                "new_variable_name_1": {
                    "byte_value": 1
                },
                "original_variable_name_1": {
                    "buffer": 1,
                    "end_address": 1
                },
                "original_variable_name_2": {
                    "pointer1": 1,
                    "temp1": 1
                },
                "original_variable_name_3": {
                    "pointer2": 1,
                    "temp2": 1
                },
                "param_1": {
                    "dest_address": 1,
                    "memory": 2,
                    "memory_address": 22,
                    "memory_block_address": 1,
                    "memory_pointer": 2,
                    "memory_ptr": 1,
                    "memory_segment": 1,
                    "memory_start_address": 1
                },
                "param_2": {
                    "byte_value": 1
                },
                "param_3": {
                    "num_bytes": 1
                },
                "var_1": {
                    "zero_int": 1
                },
                "var_2": {
                    "zero_int": 1
                },
                "var_3": {
                    "byte_address": 1
                }
            },
            "called": [
                "FUN_00081f00"
            ],
            "calling": [
                "FUN_0008089c"
            ],
            "code": "\nint initialize_memory_segment_000811b0(int memory_address)\n\n{\n  fill_memory_with_byte(memory_address,0,0x80);\n  *(undefined4 *)(memory_address + 0x80) = 0;\n  *(undefined4 *)(memory_address + 0x84) = 0;\n  return memory_address;\n}\n\n",
            "current_name": "initialize_memory_segment_000811b0",
            "entrypoint": "0x000811b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811b0": "initialize_memory_segment_000811b0",
                "fill_memory_with_byte_00081f00": "fill_memory_with_byte",
                "param_1": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811ca": {
            "additional_data": {
                "DAT_": {
                    "unchanged_variable": 1
                },
                "FUN_000811ca": {
                    "increment_and_store": 1,
                    "update_and_store_data": 1,
                    "update_and_store_value": 3,
                    "update_array_element_at_index": 1,
                    "update_buffer": 15,
                    "update_buffer_and_index": 1,
                    "update_data": 3,
                    "update_data_and_index": 1,
                    "update_param_and_index": 1,
                    "update_parameter": 1,
                    "update_pointer_and_store_value": 1,
                    "update_pointer_value": 1,
                    "update_value_and_index": 1
                },
                "PTR_": {
                    "unchanged_variable": 1
                },
                "param_1": {
                    "array": 2,
                    "array_ptr": 1,
                    "base_address": 4,
                    "buffer": 12,
                    "buffer_address": 3,
                    "buffer_ptr": 1,
                    "data": 3,
                    "data_address": 1,
                    "data_pointer": 1,
                    "input_address": 1,
                    "input_ptr": 1,
                    "pointer": 1
                },
                "param_2": {
                    "data": 5,
                    "new_data": 4,
                    "new_element": 1,
                    "new_value": 13,
                    "value": 7,
                    "value_to_store": 1
                },
                "uVar1": {
                    "current_index": 3,
                    "current_offset": 1,
                    "new_index": 7,
                    "next_index": 6,
                    "updated_index": 12,
                    "updated_pointer": 1,
                    "updated_pointer_value": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_buffer_and_index_000811ca(int buffer,undefined new_value)\n\n{\n  uint updated_index;\n  \n  updated_index = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (updated_index != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = new_value;\n    *(uint *)(buffer + 0x80) = updated_index;\n  }\n  return;\n}\n\n",
            "current_name": "update_buffer_and_index_000811ca",
            "entrypoint": "0x000811ca",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811ca": "update_buffer_and_index_000811ca",
                "param_1": "buffer",
                "param_2": "new_value",
                "uVar1": "updated_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811e8": {
            "additional_data": {
                "FUN_000811e8": {
                    "calculate_data_difference": 1,
                    "calculate_data_range": 1,
                    "calculate_result": 1,
                    "check_and_update_data": 1,
                    "compute_data_value": 1,
                    "extract_data": 1,
                    "extract_data_value": 1,
                    "find_data_value": 3,
                    "get_data_and_check_threshold": 1,
                    "process_data": 8,
                    "reverse_data_value": 1,
                    "update_data": 3,
                    "update_data_value": 7
                },
                "UINT_MAX": {
                    "max_range": 1
                },
                "code": {
                    "function_pointer": 2,
                    "function_ptr": 3
                },
                "get_data_value_thunk_000816d8": {
                    "get_data_value": 16,
                    "get_data_value_thunk": 1,
                    "get_new_data_value": 1,
                    "get_new_value": 1,
                    "get_next_data_value": 6,
                    "get_updated_value": 1
                },
                "iVar1": {
                    "data_value": 25,
                    "new_value": 2,
                    "value": 4
                },
                "param_1": {
                    "array": 2,
                    "data": 4,
                    "data_array": 19,
                    "data_buffer": 1,
                    "data_list": 1,
                    "data_ptr": 1,
                    "data_values": 1,
                    "input_array": 1
                },
                "uint": {
                    "unsigned_int": 1
                }
            },
            "called": [
                "thunk_FUN_000816d8"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nint update_data_value_000811e8(int *data_array)\n\n{\n  int data_value;\n  \n  data_value = get_data_value();\n  data_array[3] = data_value;\n  do {\n    data_value = (**(function_ptr **)(*data_array + 0xc))(data_array);\n    if (-1 < data_value) {\n      return data_value;\n    }\n    data_value = get_data_value();\n  } while ((unsigned_int)(data_value - data_array[3]) < (unsigned_int)data_array[2]);\n  return -1;\n}\n\n",
            "current_name": "update_data_value_000811e8",
            "entrypoint": "0x000811e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811e8": "update_data_value_000811e8",
                "code": "function_ptr",
                "get_data_value_thunk_000816d8": "get_data_value",
                "iVar1": "data_value",
                "param_1": "data_array",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081214": {
            "additional_data": {
                "FUN_00081214": {
                    "process_and_allocate_memory": 1,
                    "process_and_update_data": 2,
                    "process_data": 28
                },
                "initialize_memory_and_process_allocation_000814f6": {
                    "initialize_memory_and_allocate_process": 1,
                    "initialize_memory_and_allocation": 1,
                    "initialize_memory_and_process_allocation": 1
                },
                "param_1": {
                    "arg1": 3,
                    "data1": 1,
                    "data_pointer": 1,
                    "input": 1,
                    "input1": 1,
                    "input_param1": 1,
                    "mem_pointer": 1,
                    "memory": 1,
                    "memory_address": 4,
                    "memory_allocation_param": 1,
                    "memory_handle": 2,
                    "memory_location": 1,
                    "memory_pointer": 4,
                    "memory_ptr": 1,
                    "memory_segment": 1,
                    "memory_size": 1,
                    "param1": 5,
                    "param_ptr": 1
                },
                "param_2": {
                    "arg2": 3,
                    "data": 2,
                    "data2": 1,
                    "data_address": 3,
                    "data_buffer": 1,
                    "data_handle": 1,
                    "data_pointer": 3,
                    "data_ptr": 2,
                    "data_update_param": 1,
                    "data_value": 5,
                    "input2": 1,
                    "input_param2": 1,
                    "output": 1,
                    "param2": 5,
                    "update_pointer": 1
                },
                "param_3": {
                    "param3": 4,
                    "target": 2,
                    "target_data": 1,
                    "target_param": 1,
                    "target_value": 23
                },
                "uVar1": {
                    "data_update": 1,
                    "data_value": 21,
                    "new_value": 1,
                    "updated_value": 8
                },
                "update_data_value_000811e8": {
                    "update_data_value": 3
                },
                "update_string_and_resize_0008159e": {
                    "update_string_and_resize": 3
                }
            },
            "called": [
                "FUN_0008159e",
                "FUN_000814f6",
                "FUN_000811e8"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nvoid process_and_update_data_00081214(undefined4 param1,undefined4 param2,uint target_value)\n\n{\n  uint data_value;\n  \n  initialize_memory_and_allocate_process(param1,&DAT_00085637);\n  while ((data_value = update_data_value(param2), -1 < (int)data_value && (data_value != target_value))) {\n    update_string_and_resize(param1,data_value & 0xff);\n  }\n  return;\n}\n\n",
            "current_name": "process_and_update_data_00081214",
            "entrypoint": "0x00081214",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081214": "process_and_update_data_00081214",
                "initialize_memory_and_process_allocation_000814f6": "initialize_memory_and_allocate_process",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "target_value",
                "uVar1": "data_value",
                "update_data_value_000811e8": "update_data_value",
                "update_string_and_resize_0008159e": "update_string_and_resize"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081248": {
            "additional_data": {
                "0x10": {
                    "offset": 2
                },
                "0x7f": {
                    "bit_mask": 1
                },
                "0x80": {
                    "first_offset": 1,
                    "first_pointer_offset": 1
                },
                "0x84": {
                    "second_offset": 1,
                    "second_pointer_offset": 1
                },
                "FUN_00081248": {
                    "calculate_data_difference": 1,
                    "calculate_difference": 26,
                    "calculate_difference_and_mask": 3,
                    "calculate_result": 1
                },
                "PTR_address_10": {
                    "data_pointer": 1
                },
                "PTR_data_pointer_80": {
                    "first_value_pointer": 1
                },
                "PTR_data_pointer_84": {
                    "second_value_pointer": 1
                },
                "PTR_param_1_10": {
                    "address": 1
                },
                "input_value": {
                    "input_value": 1
                },
                "param_1": {
                    "data_address": 2,
                    "input": 3,
                    "input_value": 26
                },
                "result": {
                    "difference": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "code": "\nuint calculate_difference_and_mask_00081248(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "current_name": "calculate_difference_and_mask_00081248",
            "entrypoint": "0x00081248",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081248": "calculate_difference_and_mask_00081248",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081276": {
            "additional_data": {
                "FUN_00081276": {
                    "decode_byte": 1,
                    "decode_byte_from_memory": 1,
                    "extract_byte": 1,
                    "extract_byte_from_buffer": 16,
                    "extract_byte_from_memory": 3,
                    "get_byte_from_buffer": 2,
                    "get_next_byte": 2,
                    "get_value_from_buffer": 1,
                    "process_data": 1,
                    "read_byte_from_buffer": 1,
                    "read_byte_from_memory": 2
                },
                "bVar1": {
                    "byte_result": 1,
                    "byte_value": 5,
                    "decoded_byte": 2,
                    "extracted_byte": 19,
                    "next_byte": 2,
                    "value": 1
                },
                "iVar2": {
                    "buffer": 3,
                    "buffer_address": 2,
                    "buffer_offset": 1,
                    "buffer_pointer": 5,
                    "buffer_ptr": 4,
                    "buffer_ptr_value": 1,
                    "data_struct": 1,
                    "inner_buffer_address": 1,
                    "mem_block_address": 1,
                    "memory_address": 1,
                    "memory_pointer": 2,
                    "memory_ptr": 1,
                    "pointer_to_memory": 1,
                    "ptr_buffer": 2,
                    "ptr_data": 1,
                    "struct_address": 1,
                    "struct_ptr": 2
                },
                "param_1": {
                    "address": 1,
                    "address_pointer": 1,
                    "buffer": 5,
                    "buffer_address": 9,
                    "buffer_pointer": 1,
                    "buffer_ptr": 5,
                    "data": 2,
                    "data_ptr": 1,
                    "input_addr": 1,
                    "memory_address": 4,
                    "memory_offset": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nuint extract_byte_from_buffer_00081276(int buffer_address)\n\n{\n  byte extracted_byte;\n  int buffer_pointer;\n  \n  buffer_pointer = *(int *)(buffer_address + 0x10);\n  if (*(int *)(buffer_pointer + 0x80) != *(int *)(buffer_pointer + 0x84)) {\n    extracted_byte = *(byte *)(buffer_pointer + *(int *)(buffer_pointer + 0x84));\n    *(uint *)(buffer_pointer + 0x84) = *(int *)(buffer_pointer + 0x84) + 1U & 0x7f;\n    return (uint)extracted_byte;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "extract_byte_from_buffer_00081276",
            "entrypoint": "0x00081276",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081276": "extract_byte_from_buffer_00081276",
                "bVar1": "extracted_byte",
                "iVar2": "buffer_pointer",
                "param_1": "buffer_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000812b8": {
            "additional_data": {
                "FUN_000812b8": {
                    "process_data": 1,
                    "update_buffer": 1,
                    "update_data": 17,
                    "update_parameter": 2,
                    "update_value": 6,
                    "update_value_if_condition": 1,
                    "update_value_if_condition_met": 1,
                    "update_value_in_memory": 1,
                    "write_data": 1
                },
                "iVar1": {
                    "buffer_ptr": 1,
                    "data_address": 1,
                    "data_index": 1,
                    "data_offset": 4,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_struct": 1,
                    "data_var1": 1,
                    "offset": 2,
                    "ptr1": 5,
                    "ptr_data": 3,
                    "ptr_input_data": 1,
                    "ptr_to_data": 2,
                    "struct_address": 1,
                    "struct_offset": 1,
                    "struct_ptr": 1,
                    "temp": 1,
                    "temp_var1": 1,
                    "value": 1,
                    "var1": 1
                },
                "param_1": {
                    "base_address": 1,
                    "buffer_address": 1,
                    "data": 5,
                    "data_address": 4,
                    "data_pointer": 9,
                    "data_ptr": 4,
                    "data_ptr1": 1,
                    "data_struct": 1,
                    "input_data": 1,
                    "input_value": 1,
                    "memory_pointer": 1,
                    "struct_offset": 1,
                    "structure": 1
                },
                "param_2": {
                    "input_data": 1,
                    "new_data": 4,
                    "new_parameter": 1,
                    "new_value": 22,
                    "value": 3
                },
                "uVar2": {
                    "incremented_value": 2,
                    "modified_index": 2,
                    "new_buffer_index": 1,
                    "new_index": 8,
                    "new_offset": 2,
                    "new_value_index": 1,
                    "new_value_offset": 1,
                    "next_index": 1,
                    "temp_var2": 1,
                    "updated_index": 6,
                    "updated_value": 5,
                    "updated_var": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nundefined4 update_data_000812b8(int data_pointer,undefined4 new_value)\n\n{\n  int ptr1;\n  uint new_index;\n  \n  ptr1 = *(int *)(data_pointer + 0x14);\n  if ((*(int *)(*(int *)(data_pointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptr1 + 0x84) == *(int *)(ptr1 + 0x80))) {\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 0x1c) = new_value;\n  }\n  else {\n    new_index = *(int *)(ptr1 + 0x80) + 1U & 0x8000007f;\n    if ((int)new_index < 0) {\n      new_index = (new_index - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptr1 + 0x84) == new_index);\n    *(char *)(ptr1 + *(int *)(ptr1 + 0x80)) = (char)new_value;\n    *(uint *)(*(int *)(data_pointer + 0x14) + 0x80) = new_index;\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_data_000812b8",
            "entrypoint": "0x000812b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "iVar1": "ptr1",
                "param_1": "data_pointer",
                "param_2": "new_value",
                "uVar2": "new_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081348": {
            "additional_data": {
                "FUN_00081348": {
                    "initialize_function": 8,
                    "initialize_parameters": 19,
                    "initialize_params": 4
                },
                "param_1": {
                    "function_params": 1,
                    "output_array": 7,
                    "output_data": 1,
                    "output_params": 3,
                    "param_array": 2,
                    "parameters": 13,
                    "params": 4
                },
                "param_2": {
                    "input_data": 1,
                    "input_param1": 3,
                    "input_value": 2,
                    "input_value1": 2,
                    "param2": 3,
                    "param2_value": 2,
                    "param_value2": 1,
                    "value1": 9,
                    "value2": 8
                },
                "param_3": {
                    "flag": 3,
                    "input_param2": 3,
                    "input_value2": 2,
                    "param3": 3,
                    "param3_value": 2,
                    "param_value3": 1,
                    "value2": 9,
                    "value3": 8
                },
                "param_4": {
                    "constant_value1": 1,
                    "data_a": 1,
                    "input_param3": 3,
                    "input_value3": 2,
                    "param4": 3,
                    "param4_value": 3,
                    "param_value4": 1,
                    "value3": 9,
                    "value4": 8
                },
                "param_5": {
                    "constant_value2": 1,
                    "data_b": 1,
                    "input_param4": 3,
                    "input_value4": 2,
                    "param5": 3,
                    "param5_value": 2,
                    "param_value5": 1,
                    "unused_value": 1,
                    "value4": 9,
                    "value5": 8
                },
                "param_6": {
                    "constant_value3": 1,
                    "data_c": 1,
                    "input_param5": 3,
                    "input_value5": 2,
                    "param6": 3,
                    "param6_value": 3,
                    "param_value6": 1,
                    "value5": 9,
                    "value6": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "code": "\nvoid initialize_parameters_00081348(undefined4 *parameters,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[6] = value1;\n  *parameters = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(parameters + 7) = value2;\n  parameters[4] = value4;\n  parameters[8] = value3;\n  parameters[5] = value5;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_00081348",
            "entrypoint": "0x00081348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081348": "initialize_parameters_00081348",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813dc": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "array_data": 1,
                    "elf_table": 1,
                    "rel_array": 2,
                    "relocation_array": 1,
                    "relocation_table": 1
                },
                "FUN_000813dc": {
                    "initialize": 1,
                    "initialize_application": 1,
                    "initialize_config": 1,
                    "initialize_configuration": 1,
                    "initialize_data": 8,
                    "initialize_data_structure": 1,
                    "initialize_elf_header": 1,
                    "initialize_function": 2,
                    "initialize_memory": 2,
                    "initialize_module": 1,
                    "initialize_registers": 1,
                    "initialize_settings": 2,
                    "set_configuration": 5,
                    "set_function_options": 1,
                    "set_initial_values": 2,
                    "set_initialization_values": 1
                },
                "check_bit_and_set_00080aa8": {
                    "check_bit_and_set": 1
                },
                "iVar1": {
                    "base_address": 1,
                    "config1_offset": 1,
                    "data_address": 1,
                    "first_variable": 1,
                    "local_var1": 1,
                    "memory_offset": 1,
                    "offset": 5,
                    "offset1": 1,
                    "register_offset": 1,
                    "section1_address": 1,
                    "temp": 1,
                    "temp_var": 1,
                    "temp_var1": 3,
                    "tmp": 2,
                    "var": 1,
                    "var1": 8,
                    "variable1": 1
                },
                "initializeData": {
                    "void": 1
                },
                "param_1": {
                    "address": 2,
                    "app_config": 1,
                    "base_address": 1,
                    "config_address": 3,
                    "config_pointer": 1,
                    "config_ptr": 3,
                    "data_address": 1,
                    "data_offset": 2,
                    "data_pointer": 2,
                    "data_struct": 1,
                    "data_structure": 1,
                    "function_options": 1,
                    "function_pointer": 1,
                    "input_value": 1,
                    "mem_address": 1,
                    "memory_address": 1,
                    "module_base_address": 1,
                    "param": 1,
                    "param1": 2,
                    "pointer": 1,
                    "register_base": 1,
                    "settings": 2
                },
                "param_2": {
                    "bit_mask": 1,
                    "block_size": 1,
                    "byte_offset": 1,
                    "divider": 2,
                    "division_factor": 1,
                    "divisor": 6,
                    "factor": 2,
                    "offset": 1,
                    "page_size": 6,
                    "param2": 2,
                    "param_divider": 1,
                    "param_divisor": 1,
                    "param_value": 3,
                    "shift_value": 1,
                    "value": 2
                },
                "puVar2": {
                    "config1": 1,
                    "config_array": 1,
                    "config_data": 2,
                    "config_data_ptr": 2,
                    "config_ptr": 2,
                    "data_array": 2,
                    "data_array_pointer": 1,
                    "data_pointer": 5,
                    "data_pointer2": 1,
                    "data_struct_pointer": 1,
                    "elf_header": 1,
                    "local_var2": 1,
                    "memory_ptr": 1,
                    "module_data": 1,
                    "pointer": 1,
                    "ptr": 1,
                    "ptr_array": 1,
                    "register_array": 1,
                    "second_variable": 1,
                    "setting_ptr": 1,
                    "settings_array": 1,
                    "var2": 1,
                    "variable2": 1
                },
                "r_offset": {
                    "array_offset": 1,
                    "relocation_offset": 1
                }
            },
            "called": [
                "FUN_00080aa8"
            ],
            "calling": [
                "FUN_000801e0"
            ],
            "code": "\nvoid initialize_data_structure_000813dc(int config_ptr,uint divisor)\n\n{\n  int var1;\n  undefined4 *data_pointer;\n  \n  check_bit_and_set(*(undefined4 *)(config_ptr + 0x20));\n  data_pointer = *(undefined4 **)(config_ptr + 0x18);\n  data_pointer[0x48] = 0x202;\n  *data_pointer = 0xac;\n  data_pointer[1] = 0x800;\n  data_pointer[8] = rel_array[6].array_offset / divisor >> 4;\n  data_pointer[3] = 0xffffffff;\n  data_pointer[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(config_ptr + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(config_ptr + 0x1c) & 0x1f);\n  var1 = *(int *)(config_ptr + 0x10);\n  *(undefined4 *)(var1 + 0x84) = 0;\n  *(undefined4 *)(var1 + 0x80) = 0;\n  var1 = *(int *)(config_ptr + 0x14);\n  *(undefined4 *)(var1 + 0x84) = 0;\n  *(undefined4 *)(var1 + 0x80) = 0;\n  *data_pointer = 0x50;\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_000813dc",
            "entrypoint": "0x000813dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_000813dc": "initialize_data_structure_000813dc",
                "check_bit_and_set_00080aa8": "check_bit_and_set",
                "iVar1": "var1",
                "param_1": "config_ptr",
                "param_2": "divisor",
                "puVar2": "data_pointer",
                "r_offset": "array_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081438": {
            "additional_data": {
                "FUN_00081438": {
                    "initialize_and_assign_data": 2,
                    "initialize_and_assign_parameters": 2,
                    "initialize_and_return_data": 3,
                    "initialize_and_return_parameters": 2,
                    "initialize_and_return_pointer": 1,
                    "initialize_and_set_data": 5,
                    "initialize_and_set_parameters": 5,
                    "initialize_and_set_params": 1,
                    "initialize_and_update": 2,
                    "initialize_and_update_data": 3,
                    "initialize_data": 1,
                    "initialize_parameters": 1,
                    "update_data": 2
                },
                "PTR_update_data_000812b8_1_00085680": {
                    "update_data": 5,
                    "update_data_pointer": 3,
                    "update_data_reference": 1
                },
                "initialize_parameters_00081348": {
                    "initialize_data_parameters": 1,
                    "initialize_parameters": 13,
                    "initialize_params": 1
                },
                "param_1": {
                    "data": 1,
                    "data_array": 2,
                    "data_pointer": 2,
                    "function_result": 1,
                    "output": 3,
                    "output_array": 8,
                    "output_buffer": 4,
                    "output_data": 3,
                    "output_parameters": 1,
                    "output_pointer": 2,
                    "parameters": 1,
                    "pointer": 1,
                    "result": 1
                },
                "param_2": {
                    "data": 1,
                    "data_value": 2,
                    "initial_value": 1,
                    "input": 1,
                    "input_data": 1,
                    "input_param": 3,
                    "input_parameter": 7,
                    "input_value": 11,
                    "param": 1,
                    "update_value": 1,
                    "value": 1
                },
                "update_data_000812b8_1_00085680": {
                    "updated_data": 1
                }
            },
            "called": [
                "FUN_00081348"
            ],
            "calling": [
                "FUN_0008089c"
            ],
            "code": "\nundefined4 * initialize_and_update_data_00081438(undefined4 *output_array,undefined4 input_value)\n\n{\n  initialize_parameters();\n  *output_array = &PTR_updated_data;\n  output_array[9] = input_value;\n  return output_array;\n}\n\n",
            "current_name": "initialize_and_update_data_00081438",
            "entrypoint": "0x00081438",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081438": "initialize_and_update_data_00081438",
                "initialize_parameters_00081348": "initialize_parameters",
                "param_1": "output_array",
                "param_2": "input_value",
                "update_data_000812b8_1_00085680": "updated_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008145c": {
            "additional_data": {
                "F": {
                    "calculate_linear_interpolation": 1
                },
                "FUN_0008145c": {
                    "calculate_difference_and_scale": 1,
                    "calculate_interpolated_value": 4,
                    "calculate_interpolation": 7,
                    "calculate_interpolation_value": 1,
                    "calculate_linear_interpolation": 6,
                    "calculate_new_value": 1,
                    "calculate_offset": 1,
                    "calculate_result": 3,
                    "calculate_slope_intercept": 1,
                    "calculate_value": 1,
                    "calculate_weighted_average": 3,
                    "calculate_weighted_sum": 1
                },
                "end": {
                    "end_value": 1
                },
                "end_point_1": {
                    "end": 1
                },
                "end_point_2": {
                    "end_2": 1
                },
                "end_val": {
                    "end_value": 1
                },
                "param_1": {
                    "first_number": 1,
                    "first_parameter": 1,
                    "first_value": 3,
                    "initial_value": 2,
                    "input_value_1": 1,
                    "start1": 1,
                    "start_position": 1,
                    "start_val": 1,
                    "start_value": 13,
                    "subtraction_operand_1": 1,
                    "value1": 3,
                    "value_1": 1,
                    "weight1": 1,
                    "x1": 1
                },
                "param_2": {
                    "initial_coordinate": 1,
                    "input_value_2": 1,
                    "previous_position": 1,
                    "previous_value": 1,
                    "second_number": 1,
                    "second_parameter": 1,
                    "second_value": 3,
                    "start2": 2,
                    "start_input": 1,
                    "start_interval": 2,
                    "start_point": 2,
                    "start_point_1": 1,
                    "start_position": 1,
                    "start_range": 1,
                    "start_range_min": 2,
                    "start_time": 2,
                    "subtraction_operand_2": 1,
                    "value2": 2,
                    "value_2": 1,
                    "weight2": 1,
                    "y1": 1
                },
                "param_3": {
                    "division_operand_1": 1,
                    "end": 1,
                    "end1": 1,
                    "end_input": 1,
                    "end_interval": 2,
                    "end_point": 2,
                    "end_point_2": 1,
                    "end_position": 1,
                    "end_range": 1,
                    "end_time": 2,
                    "end_value": 2,
                    "ending_value": 1,
                    "final_coordinate": 1,
                    "input_value_3": 1,
                    "next_position": 1,
                    "next_value": 1,
                    "start_range_max": 2,
                    "third_number": 1,
                    "third_parameter": 1,
                    "third_value": 2,
                    "value1": 1,
                    "value3": 2,
                    "value_3": 1,
                    "x2": 1
                },
                "param_4": {
                    "division_operand_2": 1,
                    "fourth_number": 1,
                    "fourth_parameter": 1,
                    "fourth_value": 1,
                    "initial_offset": 1,
                    "initial_result": 1,
                    "input_value_4": 1,
                    "min_value": 3,
                    "start_interval_value": 1,
                    "start_output": 3,
                    "start_point_2": 1,
                    "start_position": 2,
                    "start_range": 4,
                    "start_val": 1,
                    "start_value": 1,
                    "starting_weight": 1,
                    "target_range_min": 2,
                    "value1": 1,
                    "value2": 1,
                    "value4": 1,
                    "value_4": 1,
                    "y2": 1
                },
                "param_5": {
                    "end2": 1,
                    "end_interval_value": 1,
                    "end_output": 3,
                    "end_position": 2,
                    "end_range": 4,
                    "end_val": 1,
                    "end_value": 2,
                    "ending_weight": 1,
                    "fifth_number": 1,
                    "fifth_parameter": 1,
                    "fifth_value": 1,
                    "final_offset": 1,
                    "final_result": 1,
                    "input_value_5": 1,
                    "max_value": 3,
                    "multiplication_operand": 1,
                    "target_range_max": 2,
                    "value3": 1,
                    "value5": 1,
                    "value_5": 1,
                    "x": 1
                },
                "result": {
                    "calculated_result": 1
                },
                "return": {
                    "result": 2
                },
                "start1": {
                    "start_value1": 1
                },
                "start2": {
                    "start_value2": 1
                },
                "start_point_1": {
                    "start": 1
                },
                "start_point_2": {
                    "start_2": 1
                },
                "start_val": {
                    "start_value": 1
                },
                "uint": {
                    "unsigned_int": 1,
                    "unsigned_integer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "code": "\nint calculate_linear_interpolation_0008145c(int start_value,int second_value,int end_time,int start_range,int end_range)\n\n{\n  result (unsigned_integer)((start_value - second_value) * (end_range - start_range)) / (unsigned_integer)(end_time - second_value) + start_range;\n}\n\n",
            "current_name": "calculate_linear_interpolation_0008145c",
            "entrypoint": "0x0008145c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008145c": "calculate_linear_interpolation_0008145c",
                "param_1": "start_value",
                "param_2": "second_value",
                "param_3": "end_time",
                "param_4": "start_range",
                "param_5": "end_range",
                "return": "result",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081472": {
            "additional_data": {
                "FUN_00081472": {
                    "memory_offset_update": 1,
                    "update_and_reverse_memory_offset": 7,
                    "update_and_reverse_offset": 1,
                    "update_memory_offset": 21,
                    "update_offset_and_memory": 1
                },
                "param_1": {
                    "input_data": 1,
                    "memory": 2,
                    "memory_address": 1,
                    "memory_offset": 23,
                    "memory_pointer": 1,
                    "offset_ptr": 1
                },
                "update_and_reverse_memory_offset_00081800": {
                    "reverse_and_update_memory_offset": 1,
                    "reverse_and_update_offset": 1,
                    "reverse_memory_offset": 1,
                    "update_and_reverse_memory_offset": 1,
                    "update_and_reverse_offset": 1,
                    "update_reverse_offset": 1
                }
            },
            "called": [
                "FUN_00081800"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nundefined4 * update_and_reverse_memory_offset_00081472(undefined4 *memory_offset)\n\n{\n  reverse_and_update_memory_offset(*memory_offset);\n  return memory_offset;\n}\n\n",
            "current_name": "update_and_reverse_memory_offset_00081472",
            "entrypoint": "0x00081472",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081472": "update_and_reverse_memory_offset_00081472",
                "param_1": "memory_offset",
                "update_and_reverse_memory_offset_00081800": "reverse_and_update_memory_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081480": {
            "additional_data": {
                "FUN_00081480": {
                    "clear_memory": 1,
                    "reset_and_clear_memory": 1,
                    "reset_memory": 20,
                    "reset_memory_and_pointers": 1,
                    "reset_memory_offset": 1,
                    "reset_memory_offsets": 7
                },
                "param_1": {
                    "memory": 10,
                    "memory_array": 1,
                    "memory_block": 2,
                    "memory_offset": 1,
                    "memory_offsets": 7,
                    "memory_pointer": 6,
                    "memory_ptr": 4
                },
                "update_and_reverse_memory_offset_00081800": {
                    "reverse_memory_offset": 2,
                    "update_and_reverse_memory_offset": 4,
                    "update_and_reverse_offset": 1,
                    "update_memory_offset": 5,
                    "update_reverse_memory_offset": 1
                }
            },
            "called": [
                "FUN_00081800"
            ],
            "calling": [
                "FUN_000814d0"
            ],
            "code": "\nvoid reset_memory_offsets_00081480(int *memory)\n\n{\n  if (*memory != 0) {\n    update_memory_offset();\n  }\n  *memory = 0;\n  memory[2] = 0;\n  memory[1] = 0;\n  return;\n}\n\n",
            "current_name": "reset_memory_offsets_00081480",
            "entrypoint": "0x00081480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081480": "reset_memory_offsets_00081480",
                "param_1": "memory",
                "update_and_reverse_memory_offset_00081800": "update_memory_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081496": {
            "additional_data": {
                "FUN_00081496": {
                    "allocate_and_initialize_memory": 1,
                    "allocate_and_set_memory": 7,
                    "allocate_and_set_param": 2,
                    "allocate_and_store": 1,
                    "allocate_and_store_memory": 4,
                    "allocate_and_update_memory": 9,
                    "allocate_and_update_pointer": 1,
                    "allocate_memory_and_update_parameters": 1,
                    "allocate_memory_and_update_params": 1,
                    "link_and_allocate_memory": 4
                },
                "iVar1": {
                    "allocation_result": 1,
                    "result": 28
                },
                "param_1": {
                    "array_pointer": 1,
                    "input_param": 1,
                    "memory": 3,
                    "memory_address": 6,
                    "memory_location": 1,
                    "memory_pointer": 3,
                    "memory_ptr": 11,
                    "pointer": 2,
                    "pointer_to_value": 1,
                    "ptr": 1,
                    "ptr_to_int": 1
                },
                "param_2": {
                    "memory_size": 4,
                    "size": 27
                },
                "param_3": {
                    "arg1": 9,
                    "arg3": 2,
                    "arg_1": 2,
                    "arg_3": 1,
                    "initial_value_1": 1,
                    "param": 1,
                    "param_3": 7,
                    "param_a": 1,
                    "param_start": 1,
                    "parameter_1": 1,
                    "parameter_3": 1,
                    "value1": 2,
                    "value_1": 1,
                    "var1": 1
                },
                "param_4": {
                    "arg2": 9,
                    "arg4": 2,
                    "arg_2": 2,
                    "arg_4": 1,
                    "initial_value_2": 1,
                    "param2": 1,
                    "param_4": 7,
                    "param_b": 1,
                    "param_end": 1,
                    "parameter_2": 1,
                    "parameter_4": 1,
                    "value2": 2,
                    "value_2": 1,
                    "var2": 1
                }
            },
            "called": [
                "FUN_00081f9c"
            ],
            "calling": [
                "FUN_000814ae"
            ],
            "code": "\nint allocate_memory_and_update_parameters_00081496(int *memory_ptr,int size,undefined4 arg1,undefined4 arg2)\n\n{\n  int result;\n  \n  result = link_and_allocate_memory_00081f9c(*memory_ptr,size + 1,arg1,arg2,arg2);\n  if (result != 0) {\n    *memory_ptr = result;\n    memory_ptr[1] = size;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "allocate_memory_and_update_parameters_00081496",
            "entrypoint": "0x00081496",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081496": "allocate_memory_and_update_parameters_00081496",
                "iVar1": "result",
                "param_1": "memory_ptr",
                "param_2": "size",
                "param_3": "arg1",
                "param_4": "arg2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814ae": {
            "additional_data": {
                "FUN_000814ae": {
                    "allocate_and_initialize": 1,
                    "allocate_and_initialize_memory": 1,
                    "allocate_and_update": 4,
                    "allocate_and_update_parameters": 2,
                    "allocate_memory_and_check_bounds": 1,
                    "allocate_memory_if_needed": 2,
                    "allocate_or_update_parameters": 1,
                    "check_allocation": 1,
                    "check_allocation_and_update_parameters": 1,
                    "check_and_allocate_memory": 8,
                    "check_and_update_parameters": 1,
                    "check_memory_allocation": 2,
                    "check_memory_and_initialize": 1,
                    "check_memory_and_update": 1,
                    "check_memory_and_update_parameters": 2,
                    "check_memory_and_update_params": 1,
                    "check_memory_availability": 1
                },
                "allocate_memory_and_update_parameters_00081496": {
                    "allocate_memory": 1
                },
                "iVar1": {
                    "alloc_result": 1,
                    "allocation_result": 17,
                    "allocation_status": 5,
                    "error_code": 1,
                    "result": 3
                },
                "param_1": {
                    "array": 4,
                    "buffer": 1,
                    "data": 1,
                    "input_array": 1,
                    "input_buffer": 1,
                    "input_params": 1,
                    "memory": 3,
                    "memory_array": 1,
                    "memory_info": 1,
                    "memory_parameters": 8,
                    "memory_params": 1,
                    "memory_ptr": 1,
                    "parameters": 3,
                    "params": 1,
                    "pointer": 2,
                    "ptr_to_data": 1
                },
                "param_2": {
                    "desired_value": 1,
                    "required_memory": 1,
                    "required_memory_size": 5,
                    "required_size": 13,
                    "size": 7,
                    "threshold": 3,
                    "value": 1
                }
            },
            "called": [
                "FUN_00081496"
            ],
            "calling": [
                "FUN_00081570",
                "FUN_000814d0"
            ],
            "code": "\nundefined4 allocate_memory_and_check_bounds_000814ae(int *memory_parameters,uint required_size)\n\n{\n  int allocation_result;\n  \n  if ((*memory_parameters == 0) || ((uint)memory_parameters[1] < required_size)) {\n    allocation_result = allocate_memory(memory_parameters);\n    if (allocation_result == 0) {\n      return 0;\n    }\n    if (memory_parameters[2] == 0) {\n      *(undefined *)*memory_parameters = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "allocate_memory_and_check_bounds_000814ae",
            "entrypoint": "0x000814ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814ae": "allocate_memory_and_check_bounds_000814ae",
                "allocate_memory_and_update_parameters_00081496": "allocate_memory",
                "iVar1": "allocation_result",
                "param_1": "memory_parameters",
                "param_2": "required_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814d0": {
            "additional_data": {
                "FUN_000814d0": {
                    "allocate_and_copy_string": 1,
                    "allocate_memory_and_copy_string": 1,
                    "initialize_memory": 8,
                    "process_data": 6,
                    "process_input": 1,
                    "process_memory": 11,
                    "process_memory_allocation": 3
                },
                "iVar1": {
                    "allocation_result": 20,
                    "allocation_status": 8,
                    "allocation_success": 3
                },
                "param_1": {
                    "array": 1,
                    "data": 2,
                    "data_buffer": 2,
                    "data_pointer": 1,
                    "input_array": 1,
                    "mem_array": 1,
                    "memory": 1,
                    "memory_array": 5,
                    "memory_block": 8,
                    "memory_buffer": 2,
                    "memory_pointer": 1,
                    "memory_ptr": 1,
                    "output": 1,
                    "result": 2,
                    "string_array": 1
                },
                "param_2": {
                    "data_ptr": 1,
                    "input_string": 2,
                    "source": 1,
                    "source_data": 1,
                    "source_str": 1,
                    "source_string": 20,
                    "source_string_address": 1,
                    "string": 1,
                    "string_data": 1,
                    "string_to_copy": 2
                },
                "param_3": {
                    "buffer_size": 3,
                    "destination_string": 1,
                    "input_length": 1,
                    "length": 2,
                    "max_length": 1,
                    "mem_size": 1,
                    "memory_size": 1,
                    "new_size": 2,
                    "size": 11,
                    "size_of_string": 1,
                    "string_length": 5,
                    "target_data": 1,
                    "target_length": 1
                }
            },
            "called": [
                "FUN_000814ae",
                "FUN_00081480",
                "FUN_000825cc"
            ],
            "calling": [
                "FUN_000814f6"
            ],
            "code": "\nundefined4 * process_memory_allocation_000814d0(undefined4 *memory_block,undefined4 source_string,undefined4 size)\n\n{\n  int allocation_result;\n  \n  allocation_result = allocate_memory_and_check_bounds_000814ae(memory_block,size);\n  if (allocation_result == 0) {\n    reset_memory_offsets_00081480(memory_block);\n  }\n  else {\n    memory_block[2] = size;\n    copy_and_terminate_string_000825cc(*memory_block,source_string);\n  }\n  return memory_block;\n}\n\n",
            "current_name": "process_memory_allocation_000814d0",
            "entrypoint": "0x000814d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814d0": "process_memory_allocation_000814d0",
                "iVar1": "allocation_result",
                "param_1": "memory_block",
                "param_2": "source_string",
                "param_3": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814f6": {
            "additional_data": {
                "FUN_000814f6": {
                    "allocate_and_initialize_data": 1,
                    "allocate_and_process_memory": 2,
                    "allocate_memory_and_process": 1,
                    "initialize_memory": 22,
                    "initialize_memory_and_process_allocation": 1,
                    "initialize_param": 1,
                    "initialize_param_array": 1,
                    "initialize_params": 1,
                    "initialize_ptr_values": 1
                },
                "count_leading_zeros_00082688": {
                    "count_leading_zeros": 3
                },
                "param_1": {
                    "array": 1,
                    "data_ptr": 1,
                    "memory": 6,
                    "memory_arr": 1,
                    "memory_array": 6,
                    "memory_array_ptr": 1,
                    "memory_block": 2,
                    "memory_pointer": 1,
                    "memory_ptr": 1,
                    "output_array": 4,
                    "output_params": 1,
                    "param_array": 1,
                    "result": 3,
                    "result_array": 2
                },
                "param_2": {
                    "data": 1,
                    "input_data": 1,
                    "input_number": 1,
                    "input_value": 22,
                    "memory_size": 1,
                    "size": 1,
                    "value": 4
                },
                "process_memory_allocation_000814d0": {
                    "allocate_memory": 4
                },
                "uVar1": {
                    "leading_zeroes_count": 1,
                    "leading_zeros": 4,
                    "leading_zeros_count": 21,
                    "num_leading_zeros": 3,
                    "number_of_zeros": 1
                }
            },
            "called": [
                "FUN_00082688",
                "FUN_000814d0"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nundefined4 * initialize_memory_and_process_allocation_000814f6(undefined4 *memory,int input_value)\n\n{\n  undefined4 leading_zeros_count;\n  \n  *memory = 0;\n  memory[1] = 0;\n  memory[2] = 0;\n  if (input_value != 0) {\n    leading_zeros_count = count_leading_zeros(input_value);\n    allocate_memory(memory,input_value,leading_zeros_count);\n  }\n  return memory;\n}\n\n",
            "current_name": "initialize_memory_and_process_allocation_000814f6",
            "entrypoint": "0x000814f6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814f6": "initialize_memory_and_process_allocation_000814f6",
                "count_leading_zeros_00082688": "count_leading_zeros",
                "param_1": "memory",
                "param_2": "input_value",
                "process_memory_allocation_000814d0": "allocate_memory",
                "uVar1": "leading_zeros_count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008151c": {
            "additional_data": {
                "FUN_0008151c": {
                    "copy_and_replace_if_valid": 1,
                    "copy_and_terminate_string": 10,
                    "copy_and_update": 1,
                    "copy_and_update_memory": 2,
                    "copy_and_update_params": 1,
                    "copy_and_update_string": 2,
                    "copy_data_and_update": 1,
                    "copy_if_valid_string": 1,
                    "copy_param_if_valid": 1,
                    "copy_string_and_terminator": 1,
                    "copy_string_and_update_offset": 2,
                    "update_destination_params": 1,
                    "update_memory": 1,
                    "update_memory_and_copy_string": 1,
                    "update_param1_with_param2": 1,
                    "update_parameter": 1,
                    "update_parameters": 2,
                    "update_params": 1
                },
                "LAB_00081558": {
                    "end": 1
                },
                "copy_and_terminate_string_000825cc": {
                    "copy_and_terminate_string": 12,
                    "copy_and_terminate_string_helper": 4,
                    "copy_string": 1,
                    "copy_string_and_terminate": 1
                },
                "param_1": {
                    "current_param": 1,
                    "dest": 1,
                    "dest_array": 2,
                    "destination": 14,
                    "old_params": 1,
                    "param_to_update": 1,
                    "source": 3,
                    "source_data": 1,
                    "source_param": 1,
                    "source_parameters": 1,
                    "source_params": 2,
                    "source_string": 3
                },
                "param_2": {
                    "destination": 3,
                    "destination_data": 1,
                    "destination_param": 1,
                    "destination_parameters": 1,
                    "destination_params": 1,
                    "destination_string": 3,
                    "new_param": 1,
                    "new_params": 1,
                    "param_with_values": 1,
                    "source": 14,
                    "src": 1,
                    "src_array": 2,
                    "target_params": 1
                },
                "update_and_reverse_memory_offset_00081800": {
                    "update_and_reverse_memory_offset": 17,
                    "update_offset": 1
                }
            },
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "calling": [
                "FUN_00081560"
            ],
            "code": "\nvoid copy_and_terminate_string_0008151c(int *destination,int *source)\n\n{\n  if (*destination != 0) {\n    if ((*source != 0) && ((uint)source[2] <= (uint)destination[1])) {\n      copy_and_terminate_string_0008151c();\n      destination[2] = source[2];\n      goto end;\n    }\n    update_and_reverse_memory_offset();\n  }\n  *destination = *source;\n  destination[1] = source[1];\n  destination[2] = source[2];\n  *source = 0;\n  source[1] = 0;\nend:\n  source[2] = 0;\n  return;\n}\n\n",
            "current_name": "copy_and_terminate_string_0008151c",
            "entrypoint": "0x0008151c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008151c": "copy_and_terminate_string_0008151c",
                "LAB_00081558": "end",
                "copy_and_terminate_string_000825cc": "copy_and_terminate_string",
                "param_1": "destination",
                "param_2": "source",
                "update_and_reverse_memory_offset_00081800": "update_and_reverse_memory_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081560": {
            "additional_data": {
                "FUN_00081560": {
                    "check_and_copy_string": 14,
                    "check_and_terminate_string": 4,
                    "check_and_terminate_strings": 1,
                    "compare_and_copy": 1,
                    "compare_and_copy_if_different": 2,
                    "compare_and_copy_string": 5,
                    "compare_and_terminate": 1,
                    "compare_and_terminate_if_different": 1,
                    "copy_string_if_different": 1,
                    "validate_and_copy_string": 1
                },
                "param_1": {
                    "first_value": 1,
                    "input_1": 4,
                    "input_string": 11,
                    "input_value_1": 1,
                    "source_string": 3,
                    "str1": 2,
                    "string1": 6,
                    "string_1": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "compare_string": 1,
                    "comparison_string": 4,
                    "expected_string": 2,
                    "input_2": 4,
                    "input_value_2": 1,
                    "reference_string": 3,
                    "second_value": 1,
                    "str2": 2,
                    "string2": 6,
                    "string_2": 1,
                    "target_string": 4,
                    "value2": 1,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_0008151c"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint check_and_copy_string_00081560(int input_string,int string2)\n\n{\n  if (input_string != string2) {\n    copy_and_terminate_string_0008151c();\n  }\n  return input_string;\n}\n\n",
            "current_name": "check_and_copy_string_00081560",
            "entrypoint": "0x00081560",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081560": "check_and_copy_string_00081560",
                "param_1": "input_string",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081570": {
            "additional_data": {
                "FUN_00081570": {
                    "allocate_and_copy_string": 6,
                    "copy_and_extend_string": 3,
                    "copy_string": 1,
                    "expand_and_copy_string": 1,
                    "modify_and_extend_string": 1,
                    "string_copy_and_extend": 1,
                    "string_modification": 1,
                    "update_and_resize_string": 1,
                    "update_string": 3,
                    "update_string_and_allocate_memory": 3,
                    "update_string_and_extend_memory": 2,
                    "update_string_and_extend_size": 1,
                    "update_string_and_length": 1,
                    "update_string_and_resize": 4,
                    "update_string_and_size": 2
                },
                "iVar1": {
                    "allocated_memory": 9,
                    "allocation_result": 12,
                    "allocation_status": 3,
                    "memory_allocation_result": 2,
                    "memory_allocation_status": 1,
                    "new_array_length": 1,
                    "new_size": 1,
                    "result": 2
                },
                "iVar2": {
                    "array_element2": 2,
                    "array_element_2": 1,
                    "array_index": 4,
                    "array_length": 2,
                    "array_offset": 1,
                    "array_value2": 1,
                    "base_length": 1,
                    "current_length": 4,
                    "current_memory_size": 1,
                    "current_size": 5,
                    "index": 1,
                    "initial_length": 1,
                    "original_extension_length": 1,
                    "original_length": 2,
                    "original_size": 1,
                    "second_element_value": 1,
                    "size": 2
                },
                "param_1": {
                    "args": 1,
                    "arr": 1,
                    "array": 16,
                    "data": 1,
                    "input_array": 3,
                    "param_array": 1,
                    "parameters": 2,
                    "string_data": 2,
                    "string_info": 4
                },
                "param_2": {
                    "input_size": 1,
                    "length": 5,
                    "length_of_string": 1,
                    "old_size": 1,
                    "size": 1,
                    "string_length": 21,
                    "string_size": 1
                },
                "param_3": {
                    "additional_length": 17,
                    "additional_size": 2,
                    "extend_size": 1,
                    "extension": 1,
                    "extension_length": 3,
                    "extension_size": 4,
                    "extra_length": 2,
                    "new_size": 1
                }
            },
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "calling": [
                "FUN_0008159e"
            ],
            "code": "\nundefined4 update_and_resize_string_00081570(int *array,int string_length,int additional_length)\n\n{\n  int allocation_result;\n  int current_size;\n  \n  current_size = array[2];\n  if (string_length == 0) {\n    return 0;\n  }\n  if (additional_length != 0) {\n    allocation_result = allocate_memory_and_check_bounds_000814ae(array,current_size + additional_length);\n    if (allocation_result == 0) {\n      return 0;\n    }\n    copy_and_terminate_string_000825cc(*array + array[2],string_length);\n    array[2] = current_size + additional_length;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_and_resize_string_00081570",
            "entrypoint": "0x00081570",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081570": "update_and_resize_string_00081570",
                "iVar1": "allocation_result",
                "iVar2": "current_size",
                "param_1": "array",
                "param_2": "string_length",
                "param_3": "additional_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008159e": {
            "additional_data": {
                "FUN_0008159e": {
                    "update_and_resize_string": 19,
                    "update_string": 10,
                    "update_string_and_resize": 1,
                    "update_string_with_resized": 1
                },
                "local_c": {
                    "local_buffer": 1,
                    "local_var": 2,
                    "local_variable": 4,
                    "local_variable1": 1,
                    "local_variable3": 1,
                    "local_variable_c": 1,
                    "new_local_variable": 1,
                    "new_string": 2,
                    "output_string": 1,
                    "resized_string": 1,
                    "string_to_resize": 1,
                    "target_string": 1,
                    "temp3": 1,
                    "temp_value": 1,
                    "updated_string": 11
                },
                "param_1": {
                    "input_param": 2,
                    "input_string": 20,
                    "original_string": 2,
                    "source_string": 3,
                    "string": 2,
                    "string_to_update": 2
                },
                "param_2": {
                    "buffer": 1,
                    "length": 1,
                    "local_variable1": 1,
                    "new_string": 2,
                    "output_string": 1,
                    "param2": 3,
                    "some_parameter2": 1,
                    "temp1": 1,
                    "temp_var": 1,
                    "unused_param": 10,
                    "unused_param2": 1,
                    "unused_parameter": 2
                },
                "param_3": {
                    "additional_param": 2,
                    "destination_string": 1,
                    "local_variable2": 1,
                    "new_size": 6,
                    "output_string": 1,
                    "param": 1,
                    "param3": 3,
                    "resize_amount": 1,
                    "resize_param": 1,
                    "resize_value": 4,
                    "resized_string": 1,
                    "size": 1,
                    "some_parameter3": 1,
                    "string_param": 1,
                    "string_pointer": 1,
                    "string_size": 2,
                    "string_to_update": 1,
                    "temp2": 1,
                    "unused_param3": 1
                },
                "uStack_8": {
                    "new_size": 1,
                    "param3": 1,
                    "resized_string_placeholder": 1,
                    "stack_var": 1,
                    "stack_variable": 1,
                    "stack_variable8": 1,
                    "string_pointer": 1,
                    "string_size_backup": 1,
                    "temp4": 1,
                    "u_stack_variable": 1
                }
            },
            "called": [
                "FUN_00081570"
            ],
            "calling": [
                "FUN_00081214"
            ],
            "code": "\nvoid update_string_and_resize_0008159e(undefined4 input_string,undefined4 unused_param,undefined4 new_size)\n\n{\n  undefined4 updated_string;\n  undefined4 stack_variable;\n  \n  stack_variable = new_size;\n  update_and_resize_string_00081570(input_string,&updated_string,1,0,input_string);\n  return;\n}\n\n",
            "current_name": "update_string_and_resize_0008159e",
            "entrypoint": "0x0008159e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008159e": "update_string_and_resize_0008159e",
                "local_c": "updated_string",
                "param_1": "input_string",
                "param_2": "unused_param",
                "param_3": "new_size",
                "uStack_8": "stack_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815b8": {
            "additional_data": {
                "FUN_000815b8": {
                    "check_array": 1,
                    "check_array_element": 3,
                    "check_array_length": 2,
                    "check_array_size": 1,
                    "check_array_value": 4,
                    "check_array_values": 1,
                    "check_byte_array": 1,
                    "check_byte_arrays": 1,
                    "check_comparison": 1,
                    "check_input_validity": 1,
                    "check_value_range": 1,
                    "compare_and_check": 1,
                    "compare_and_return": 2,
                    "compare_and_return_difference": 2,
                    "compare_and_return_index": 1,
                    "compare_and_return_result": 3,
                    "compare_and_return_value": 1,
                    "compare_array_and_return_result": 1,
                    "compare_arrays": 1,
                    "compare_byte_arrays": 1,
                    "validate_input": 1
                },
                "iVar2": {
                    "comparison_result": 3,
                    "difference": 1,
                    "is_element_present": 1,
                    "is_equal": 1,
                    "is_length_valid": 1,
                    "is_within_range": 1,
                    "result": 19,
                    "return_value": 3,
                    "validity_flag": 1
                },
                "param_1": {
                    "array": 7,
                    "array_1": 1,
                    "array_of_arrays": 1,
                    "array_of_pointers": 1,
                    "array_pointer": 8,
                    "array_ptr": 3,
                    "array_ptr_param": 1,
                    "byte_arrays": 1,
                    "input_array": 5,
                    "input_arrays": 2,
                    "pp_data": 1
                },
                "param_2": {
                    "array_2": 1,
                    "byte_array": 2,
                    "compare_array": 2,
                    "comparison_array": 5,
                    "element": 4,
                    "input_array": 2,
                    "input_pointer": 1,
                    "input_value": 1,
                    "p_data": 1,
                    "ptr_param": 1,
                    "single_array": 1,
                    "single_element_pointer": 1,
                    "target": 1,
                    "target_array": 3,
                    "value": 1,
                    "value_pointer": 3,
                    "value_ptr": 1
                },
                "uVar1": {
                    "array_compare_result": 1,
                    "array_comparison": 1,
                    "array_comparison_result": 11,
                    "array_length": 12,
                    "array_match_result": 1,
                    "array_size": 1,
                    "comparison_result": 3,
                    "index": 1
                }
            },
            "called": [
                "FUN_00082390"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint compare_array_and_return_result_000815b8(byte **array_pointer,byte *comparison_array)\n\n{\n  uint array_length;\n  int result;\n  \n  if (array_pointer[2] == (byte *)0x0) {\n    if (comparison_array == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (comparison_array != (byte *)0x0) {\n      array_length = compare_uint_arrays_00082390(*array_pointer);\n      goto LAB_000815d4;\n    }\n    comparison_array = *array_pointer;\n  }\n  array_length = (uint)*comparison_array;\nLAB_000815d4:\n  result = 1 - array_length;\n  if (1 < array_length) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "compare_array_and_return_result_000815b8",
            "entrypoint": "0x000815b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815b8": "compare_array_and_return_result_000815b8",
                "iVar2": "result",
                "param_1": "array_pointer",
                "param_2": "comparison_array",
                "uVar1": "array_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815de": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 1,
                    "some_array": 1
                },
                "FUN_000815de": {
                    "convert_byte_array_to_int": 1,
                    "extract_integer_from_byte_array": 2,
                    "extract_number_from_byte_array": 1,
                    "parse_input": 1,
                    "parse_input_to_uint": 1,
                    "parse_integer": 9,
                    "parse_integer_from_byte": 1,
                    "parse_integer_from_byte_array": 2,
                    "parse_integer_from_bytes": 2,
                    "parse_integer_from_string": 2,
                    "parse_number": 6,
                    "parse_number_from_bytes": 1,
                    "parse_number_from_string": 2
                },
                "bVar1": {
                    "byte1": 1,
                    "byte_1": 1,
                    "byte_val1": 1,
                    "byte_value": 6,
                    "char_attribute": 1,
                    "current_byte": 7,
                    "current_byte_value": 3,
                    "flag": 6,
                    "flag1": 1,
                    "flag_byte": 1,
                    "flags": 2,
                    "next_byte_value": 1
                },
                "bVar2": {
                    "byte2": 1,
                    "byte_2": 1,
                    "byte_val2": 1,
                    "flag2": 1,
                    "is_negative": 21,
                    "negative": 2,
                    "negative_flag": 3,
                    "sign_flag": 1
                },
                "iVar7": {
                    "adjusted_byte_value": 1,
                    "adjusted_value": 2,
                    "calculation_result": 1,
                    "character_offset": 1,
                    "comparison_value": 1,
                    "computed_value": 1,
                    "difference": 1,
                    "digit": 3,
                    "digit_offset": 2,
                    "digit_value": 4,
                    "index_offset": 1,
                    "offset": 2,
                    "parsed_digit": 2,
                    "temp_val1": 1,
                    "temp_value": 2,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "tmp_value": 2
                },
                "iVar8": {
                    "flag": 1,
                    "has_digit": 3,
                    "has_started": 1,
                    "is_first_digit": 1,
                    "is_negative": 1,
                    "is_number": 1,
                    "is_number_valid": 1,
                    "is_overflow": 1,
                    "is_valid": 11,
                    "positive": 1,
                    "sign_flag": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "valid": 1,
                    "valid_number": 1,
                    "valid_number_flag": 2,
                    "valid_value": 1,
                    "value_assigned": 1
                },
                "param_1": {
                    "buffer": 1,
                    "byte_array": 6,
                    "bytes_array": 1,
                    "bytes_ptr": 1,
                    "input": 12,
                    "input_data": 1,
                    "input_ptr": 2,
                    "input_str": 1,
                    "input_string": 2,
                    "string_ptr": 2
                },
                "pbVar4": {
                    "byte_pointer": 1,
                    "current_byte": 14,
                    "current_byte_ptr": 1,
                    "current_char": 7,
                    "current_ptr": 5,
                    "ptr": 3
                },
                "pbVar6": {
                    "current": 1,
                    "current_byte": 1,
                    "current_position": 1,
                    "current_ptr": 1,
                    "next_byte": 13,
                    "next_char": 4,
                    "next_char_ptr": 1,
                    "next_ptr": 3,
                    "previous_byte": 1,
                    "previous_byte_ptr": 1,
                    "previous_ptr": 2,
                    "start_char": 1,
                    "start_ptr": 1
                },
                "uVar10": {
                    "max_integer": 1,
                    "max_result": 1,
                    "max_value": 6,
                    "min_divisor": 1,
                    "min_max_value": 2,
                    "min_negative_div10": 1,
                    "min_number": 1,
                    "min_result": 1,
                    "min_val": 1,
                    "min_value": 9,
                    "min_value_cap": 1,
                    "minimum_value": 1,
                    "negative_limit": 1,
                    "overflow_value": 1,
                    "positive_threshold": 1,
                    "range_limit": 1
                },
                "uVar3": {
                    "parsed_integer": 5,
                    "parsed_number": 6,
                    "parsed_value": 1,
                    "result": 19
                },
                "uVar5": {
                    "byte_val3": 1,
                    "byte_value": 5,
                    "char_value": 4,
                    "current_byte": 3,
                    "current_byte_value": 1,
                    "current_char_code": 1,
                    "current_value": 11,
                    "next_byte": 1,
                    "num": 1,
                    "parsed_value": 1,
                    "temp_val": 1
                },
                "uVar9": {
                    "divide_by_10": 1,
                    "divide_limit": 1,
                    "divide_threshold": 1,
                    "divide_value": 1,
                    "division_limit": 2,
                    "divisor": 3,
                    "max_div": 1,
                    "max_div10": 1,
                    "max_div_10": 1,
                    "max_divisor": 4,
                    "max_integer_divided": 1,
                    "max_positive_div10": 1,
                    "max_val": 1,
                    "max_value": 8,
                    "max_value_cap": 1,
                    "max_value_div_10": 1,
                    "max_value_divided_by10": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parse_integer_from_bytes_000815de(byte **input)\n\n{\n  byte current_byte;\n  byte is_negative;\n  uint result;\n  byte *current_byte;\n  uint current_value;\n  byte *next_byte;\n  int digit_value;\n  int is_valid;\n  uint max_value;\n  uint min_value;\n  \n  current_byte = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    next_byte = current_byte;\n    current_byte = next_byte + 1;\n    current_value = (uint)*next_byte;\n    current_byte = *(byte *)(some_array[270].r_info + current_value + 1);\n    is_negative = current_byte & 8;\n  } while ((current_byte & 8) != 0);\n  if (current_value == 0x2d) {\n    current_byte = next_byte + 2;\n    current_value = (uint)next_byte[1];\n    is_negative = 1;\n  }\n  else if (current_value == 0x2b) {\n    current_value = (uint)next_byte[1];\n    current_byte = next_byte + 2;\n  }\n  if (is_negative == 0) {\n    min_value = 0x7fffffff;\n  }\n  else {\n    min_value = 0x80000000;\n  }\n  max_value = min_value / 10;\n  is_valid = 0;\n  result = 0;\n  do {\n    current_byte = *(byte *)(some_array[270].r_info + current_value + 1);\n    if ((current_byte & 4) == 0) {\n      if ((current_byte & 3) == 0) {\nLAB_0008277e:\n        if (is_valid == -1) {\n          if (is_negative == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)some_array[140].r_offset = 0x22;\n        }\n        else if (is_negative != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((current_byte & 3) == 1) {\n        digit_value = 0x37;\n      }\n      else {\n        digit_value = 0x57;\n      }\n      digit_value = current_value - digit_value;\n    }\n    else {\n      digit_value = current_value - 0x30;\n    }\n    if (9 < digit_value) goto LAB_0008277e;\n    if (is_valid != -1) {\n      if ((max_value <= result && result != max_value) || ((result == max_value && ((int)(min_value % 10) < digit_value))))\n      {\n        is_valid = -1;\n      }\n      else {\n        result = result * 10 + digit_value;\n        is_valid = 1;\n      }\n    }\n    current_value = (uint)*current_byte;\n    current_byte = current_byte + 1;\n  } while( true );\n}\n\n",
            "current_name": "parse_integer_from_bytes_000815de",
            "entrypoint": "0x000815de",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "some_array",
                "FUN_000815de": "parse_integer_from_bytes_000815de",
                "bVar1": "current_byte",
                "bVar2": "is_negative",
                "iVar7": "digit_value",
                "iVar8": "is_valid",
                "param_1": "input",
                "pbVar4": "current_byte",
                "pbVar6": "next_byte",
                "uVar10": "min_value",
                "uVar3": "result",
                "uVar5": "current_value",
                "uVar9": "max_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815e8": {
            "called": [],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000815e8",
            "entrypoint": "0x000815e8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000815ec": {
            "additional_data": {
                "FUNC_00080f08": {
                    "configure_device_settings": 1,
                    "configure_system": 1,
                    "enable_device": 1,
                    "execute_function_2": 1,
                    "execute_instruction": 1,
                    "function2": 1,
                    "function_2": 2,
                    "set_configuration": 4,
                    "set_configuration_parameter": 1,
                    "set_control_flag": 1,
                    "set_control_mode": 3,
                    "set_device_configuration": 1,
                    "set_device_mode": 1,
                    "set_flag": 1,
                    "set_initial_configuration": 1,
                    "set_initial_values": 1,
                    "set_mode": 7,
                    "update_system_status": 1
                },
                "FUNC_000815e8": {
                    "configure_device_mode": 1,
                    "do_initial_setup": 1,
                    "execute_function_1": 1,
                    "execute_initialization": 1,
                    "execute_initialization_steps": 1,
                    "execute_pre_processing": 1,
                    "execute_preparation": 1,
                    "execute_preparation_steps": 1,
                    "function1": 1,
                    "function_1": 2,
                    "initialize_control": 1,
                    "initialize_control_system": 1,
                    "initialize_display": 1,
                    "initialize_registers": 1,
                    "perform_initial_checks": 1,
                    "perform_initial_setup": 2,
                    "perform_initial_tasks": 1,
                    "perform_initialization": 6,
                    "perform_setup": 1,
                    "process_initialization": 2,
                    "some_function": 1,
                    "some_function_a": 1
                },
                "FUN_000801e0": {
                    "initialize_and_configure_system": 1
                },
                "FUN_00080250": {
                    "improve_control_system": 1
                },
                "FUN_00080774": {
                    "initialize_and_configure_device": 1
                },
                "FUN_00080970": {
                    "process_data": 1
                },
                "FUN_00080f08": {
                    "set_mode": 1
                },
                "FUN_000815e8": {
                    "execute_initialization": 1
                },
                "FUN_000815ec": {
                    "continuous_data_processing": 1,
                    "continuous_monitoring": 1,
                    "continuous_processing": 2,
                    "continuous_system_update": 1,
                    "control_loop": 3,
                    "control_system": 3,
                    "control_system_loop": 1,
                    "improve_control_and_data_processing": 1,
                    "improve_control_system": 1,
                    "improve_control_system_loop": 1,
                    "improve_data_processing": 3,
                    "initialize_and_process_data": 1,
                    "initialize_and_process_system": 1,
                    "initialize_system": 1,
                    "main_control_loop": 1,
                    "main_loop": 1,
                    "run_continuous_loop": 1,
                    "run_control_system": 7
                },
                "FUN_00081618": {
                    "initialize_data_register": 1
                },
                "do": {
                    "do": 1,
                    "do_loop": 1,
                    "while": 1,
                    "while_true": 1
                },
                "identify_and_process_data_00080970": {
                    "identify_and_process_data": 22,
                    "process_data": 6,
                    "process_identified_data": 1
                },
                "improve_control_system_00080250": {
                    "improve_control_system": 26,
                    "optimize_control_system": 1,
                    "update_control_system": 2
                },
                "initialize_and_configure_device_00080774": {
                    "configure_device": 1,
                    "initialize_and_configure_device": 26,
                    "initialize_device": 3
                },
                "initialize_and_configure_system_000801e0": {
                    "initialize_and_configure_system": 25,
                    "initialize_system": 4,
                    "setup_system": 1
                },
                "initialize_data_register_00081618": {
                    "initialize_data_register": 29,
                    "initialize_data_registers": 1
                }
            },
            "called": [
                "FUN_00080774",
                "FUN_00080f08",
                "FUN_00080250",
                "FUN_000801e0",
                "FUN_000815e8",
                "FUN_00080970",
                "FUN_00081618"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid run_control_system_000815ec(void)\n\n{\n  initialize_data_register();\n  initialize_and_configure_device();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  initialize_and_configure_system();\n  do {\n    improve_control_system();\n    identify_and_process_data();\n  } while( true );\n}\n\n",
            "current_name": "run_control_system_000815ec",
            "entrypoint": "0x000815ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815ec": "run_control_system_000815ec",
                "identify_and_process_data_00080970": "identify_and_process_data",
                "improve_control_system_00080250": "improve_control_system",
                "initialize_and_configure_device_00080774": "initialize_and_configure_device",
                "initialize_and_configure_system_000801e0": "initialize_and_configure_system",
                "initialize_data_register_00081618": "initialize_data_register"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081618": {
            "additional_data": {
                "DAT_400e1a54": {
                    "memory_address": 1
                },
                "FUN_00081618": {
                    "initialize_data": 11,
                    "initialize_data_register": 1,
                    "initialize_default_settings": 1,
                    "initialize_global_value": 1,
                    "initialize_memory": 9,
                    "initialize_memory_address": 1,
                    "initialize_memory_location": 1,
                    "set_default_value": 1,
                    "set_flag": 1,
                    "set_global_variable": 1,
                    "set_initial_value": 1,
                    "set_memory_address": 2
                },
                "_DAT_400e1a54": {
                    "base_address": 1,
                    "constant_value": 1,
                    "data_address": 1,
                    "data_flag": 1,
                    "data_pointer": 2,
                    "data_size": 1,
                    "data_value": 2,
                    "default_error_code": 1,
                    "default_settings": 1,
                    "flag": 1,
                    "flag_variable": 1,
                    "global_variable": 1,
                    "initial_value": 3,
                    "memory_address": 6,
                    "memory_flag": 1,
                    "memory_value": 1,
                    "some_constant": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000815ec"
            ],
            "code": "\n\n\nvoid initialize_data_register_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "current_name": "initialize_data_register_00081618",
            "entrypoint": "0x00081618",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081618": "initialize_data_register_00081618"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081624": {
            "additional_data": {
                "DAT_00084b44": {
                    "array_offset": 1
                },
                "DAT_00084b48": {
                    "array_start": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 6,
                    "bit_pattern": 1,
                    "offsets": 1,
                    "rel_array": 2,
                    "relocation_array": 2
                },
                "FUN_00081624": {
                    "calculate_elapsed_time": 1,
                    "calculate_final_value": 1,
                    "calculate_interval": 1,
                    "calculate_modified_value": 5,
                    "calculate_result": 12,
                    "calculate_time": 5,
                    "calculate_time_estimate": 1,
                    "calculate_time_factor": 1,
                    "calculate_time_offset": 1,
                    "calculate_value": 1,
                    "get_processed_value": 1
                },
                "F_00081624": {
                    "calculate_time": 1
                },
                "check_bit_pattern_00081684": {
                    "check_bit_pattern": 1
                },
                "iVar1": {
                    "result": 30,
                    "time_offset": 1
                },
                "param_1": {
                    "data_index": 1,
                    "index": 28,
                    "input_index": 2
                },
                "param_2": {
                    "check_condition": 1,
                    "condition": 3,
                    "condition_flag": 1,
                    "flag": 21,
                    "is_zero": 4,
                    "status": 1
                },
                "param_3": {
                    "factor": 1,
                    "multiplier": 29,
                    "value": 1
                },
                "param_4": {
                    "additional_param": 1,
                    "constant": 2,
                    "input": 2,
                    "offset": 8,
                    "param": 12,
                    "param_4": 3,
                    "value": 3
                },
                "r_offset": {
                    "offset": 2,
                    "offset_value": 1
                },
                "uVar2": {
                    "base_address": 1,
                    "base_value": 2,
                    "data": 2,
                    "initial_value": 3,
                    "offset": 6,
                    "ptr": 1,
                    "rel_offset": 1,
                    "some_value": 1,
                    "value": 12,
                    "value1": 2
                }
            },
            "called": [
                "FUN_00081684"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint calculate_result_00081624(int index,int flag,int multiplier,undefined4 param)\n\n{\n  int result;\n  undefined4 value;\n  \n  value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    value = 0;\n  }\n  result = check_bit_pattern(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),value,\n                       ((array[6].offset / 1000000) * multiplier) / 0x12,param);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)array[6].offset / 1000));\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_result_00081624",
            "entrypoint": "0x00081624",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "array",
                "FUN_00081624": "calculate_result_00081624",
                "check_bit_pattern_00081684": "check_bit_pattern",
                "iVar1": "result",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "param",
                "r_offset": "offset",
                "uVar2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081684": {
            "additional_data": {
                "FUN_00081684": {
                    "check_and_count": 2,
                    "check_and_count_bits": 1,
                    "check_and_count_occurrences": 1,
                    "check_and_return_index": 1,
                    "check_bit_pattern": 5,
                    "check_bit_sequence": 2,
                    "check_bits": 1,
                    "check_bits_match": 1,
                    "check_condition": 1,
                    "check_condition_and_count": 1,
                    "check_conditions": 1,
                    "check_occurrence": 1,
                    "check_param": 1,
                    "check_param_and_return_index": 1,
                    "check_param_association": 1,
                    "check_param_equivalence": 1,
                    "check_param_match": 1,
                    "check_param_sequence": 1,
                    "check_parameters": 1,
                    "check_params": 1,
                    "check_pattern": 2,
                    "check_sequence": 1,
                    "find_index_with_condition": 1,
                    "find_value_in_array": 1
                },
                "iVar1": {
                    "count": 5,
                    "index": 4,
                    "iteration_count": 5,
                    "match_count": 3,
                    "matching_count": 2,
                    "matching_iterations": 1,
                    "num_matches": 1,
                    "occurrence_count": 1,
                    "result": 7,
                    "success_count": 1
                },
                "iVar2": {
                    "iteration_count": 1,
                    "loop_counter": 1
                },
                "param_1": {
                    "array": 7,
                    "bit_array": 3,
                    "bit_sequence": 1,
                    "bits": 1,
                    "bits_array": 1,
                    "data": 4,
                    "data_array": 5,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "input_array": 3,
                    "sequence": 2,
                    "sequence_ptr": 1
                },
                "param_2": {
                    "bit_mask": 8,
                    "mask": 23
                },
                "param_3": {
                    "condition": 2,
                    "desired_value": 1,
                    "expected_bit_pattern": 1,
                    "expected_pattern": 1,
                    "expected_value": 11,
                    "pattern": 2,
                    "target": 2,
                    "target_bit_pattern": 1,
                    "target_value": 4,
                    "value": 6
                },
                "param_4": {
                    "array_length": 2,
                    "count": 3,
                    "iteration_count": 2,
                    "iterations": 5,
                    "length": 1,
                    "limit": 1,
                    "loop_count": 1,
                    "max_iterations": 10,
                    "num_iterations": 3,
                    "sequence_length": 2,
                    "size": 1
                },
                "return": {
                    "output": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00081624"
            ],
            "code": "\nint check_bit_pattern_00081684(uint *array,uint mask,uint expected_value,int max_iterations)\n\n{\n  int result;\n  \n  do {\n    if ((*array & mask) != expected_value) {\n      do {\n        if ((*array & mask) == expected_value) {\n          result = 0;\n          do {\n            if ((*array & mask) != expected_value) {\n              output result;\n            }\n            result = result + 1;\n          } while (max_iterations != result);\n          output 0;\n        }\n        max_iterations = max_iterations + -1;\n      } while (max_iterations != 0);\n      output 0;\n    }\n    max_iterations = max_iterations + -1;\n  } while (max_iterations != 0);\n  output 0;\n}\n\n",
            "current_name": "check_bit_pattern_00081684",
            "entrypoint": "0x00081684",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081684": "check_bit_pattern_00081684",
                "iVar1": "result",
                "param_1": "array",
                "param_2": "mask",
                "param_3": "expected_value",
                "param_4": "max_iterations",
                "return": "output"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816d8": {
            "additional_data": {
                "DAT_2007120c": {
                    "constant_value": 1,
                    "data": 5,
                    "data_variable": 1,
                    "global_data": 1,
                    "global_value": 2,
                    "global_variable": 3,
                    "global_variable_value": 2,
                    "memory_data": 1,
                    "result": 1,
                    "return_value": 4,
                    "saved_value": 1
                },
                "FUN_000816d8": {
                    "get_constant_value": 2,
                    "get_data": 8,
                    "get_data_from_memory": 1,
                    "get_data_value": 2,
                    "get_data_variable": 1,
                    "get_global_data": 1,
                    "get_global_value": 2,
                    "get_global_variable": 5,
                    "get_global_variable_value": 3,
                    "get_return_value": 4,
                    "get_saved_value": 1
                }
            },
            "called": [],
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "code": "\nundefined4 get_global_variable_value_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "current_name": "get_global_variable_value_000816d8",
            "entrypoint": "0x000816d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816d8": "get_global_variable_value_000816d8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816ec": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "data_array": 2,
                    "memory_layout": 1,
                    "relocation_array": 2,
                    "relocation_table": 2
                },
                "FUN_000816ec": {
                    "modify_data": 1,
                    "process_parameters": 1,
                    "update_data": 3,
                    "update_data_entry": 2,
                    "update_data_in_array": 1,
                    "update_entries": 1,
                    "update_memory_layout": 1,
                    "update_param": 1,
                    "update_param_values": 1,
                    "update_parameters": 1,
                    "update_params": 1,
                    "update_params_and_call": 2,
                    "update_paramters": 1,
                    "update_rel_function": 1,
                    "update_rel_offset": 1,
                    "update_relocation": 2,
                    "update_relocation_entries": 1,
                    "update_relocation_entry": 8,
                    "update_relocation_table": 1
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "handle_error": 3,
                    "indirect_jump_target": 1,
                    "jump_function": 1,
                    "jump_table": 6,
                    "jump_table_func": 5,
                    "jump_table_function": 2,
                    "recovery_function": 1,
                    "unrecovered_jump_table": 5,
                    "unrecovered_jumptable": 2
                },
                "param_1": {
                    "address": 4,
                    "data1": 3,
                    "data_1": 1,
                    "data_to_update1": 1,
                    "elf_entry": 1,
                    "entry_address": 1,
                    "entry_value": 1,
                    "input1": 1,
                    "new_address": 4,
                    "new_param1": 2,
                    "new_value": 1,
                    "new_value1": 4,
                    "param1": 1,
                    "source_address": 1,
                    "symbol_address": 1,
                    "updated_param1": 1,
                    "value1": 3
                },
                "param_2": {
                    "data": 1,
                    "data2": 3,
                    "data_2": 1,
                    "data_to_update2": 1,
                    "destination_address": 1,
                    "input2": 1,
                    "new_data": 1,
                    "new_offset": 1,
                    "new_param2": 2,
                    "new_value": 4,
                    "new_value2": 4,
                    "param2": 2,
                    "symbol_value": 1,
                    "updated_param2": 1,
                    "value": 2,
                    "value1": 2,
                    "value2": 3
                },
                "param_3": {
                    "additional_value": 1,
                    "data3": 3,
                    "data_3": 1,
                    "data_to_update3": 1,
                    "flag": 1,
                    "input3": 1,
                    "new_data": 1,
                    "new_offset": 2,
                    "new_param3": 2,
                    "new_value": 1,
                    "new_value3": 4,
                    "offset": 4,
                    "param3": 1,
                    "param_3": 1,
                    "relocation_offset": 1,
                    "updated_param3": 1,
                    "value2": 2,
                    "value3": 3
                },
                "pdVar1": {
                    "array_ptr": 1,
                    "data_array": 1,
                    "data_entry": 1,
                    "data_pointer": 1,
                    "entry_pointer": 1,
                    "new_memory_layout": 1,
                    "pd_variable": 1,
                    "pointer": 1,
                    "rel_array": 4,
                    "rel_array_entry": 1,
                    "rel_entry": 1,
                    "rel_table_entry": 1,
                    "relocated_data": 1,
                    "relocated_entry": 1,
                    "relocated_entry_ptr": 1,
                    "relocation_entry": 7,
                    "relocation_entry_ptr": 2,
                    "relocation_table": 1,
                    "temp_pointer": 2,
                    "temporary_array": 1
                },
                "uVar2": {
                    "entry_index": 3,
                    "index": 25,
                    "index1": 1,
                    "param_index": 1,
                    "rel_index": 1
                },
                "uVar3": {
                    "bit_flag": 1,
                    "bit_mask": 19,
                    "bitmask": 6,
                    "bitwise_flag": 1,
                    "flag": 1,
                    "index2": 1,
                    "mask": 2
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_relocation_entry_000816ec(dword new_value1,dword new_value2,dword offset)\n\n{\n  dword *relocation_entry;\n  uint index;\n  uint bit_mask;\n  code *jump_table;\n  \n  if (relocation_array[48].r_offset == 0) {\n    relocation_array[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(relocation_array[48].r_offset + 4);\n  relocation_entry = (dword *)relocation_array[48].r_offset;\n  if (0x1f < (int)index) {\n    relocation_entry = (dword *)link_and_allocate_memory_000817f0(400);\n    if (relocation_entry == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *relocation_entry = relocation_array[48].r_offset;\n    relocation_entry[1] = 0;\n    index = 0;\n    relocation_array[48].r_offset = (dword)relocation_entry;\n    relocation_entry[0x62] = 0;\n    relocation_entry[99] = 0;\n  }\n  bit_mask = 1 << (index & 0xff);\n  relocation_entry[index + 0x22] = new_value1;\n  relocation_entry[0x62] = relocation_entry[0x62] | bit_mask;\n  relocation_entry[index + 0x42] = offset;\n  relocation_entry[99] = bit_mask | relocation_entry[99];\n  relocation_entry[1] = index + 1;\n  relocation_entry[index + 2] = new_value2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "update_relocation_entry_000816ec",
            "entrypoint": "0x000816ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_000816ec": "update_relocation_entry_000816ec",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "param_1": "new_value1",
                "param_2": "new_value2",
                "param_3": "offset",
                "pdVar1": "relocation_entry",
                "uVar2": "index",
                "uVar3": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816f8": {
            "additional_data": {
                "FUN_000816f8": {
                    "assertion_failed": 4,
                    "assertion_failed_error": 2,
                    "assertion_failed_handler": 1,
                    "assertion_failure": 1,
                    "execute_and_process_assertion": 1,
                    "execute_assertion": 7,
                    "execute_assertion_failed": 1,
                    "execute_relocated_assertion": 1,
                    "execute_relocation_and_process": 1,
                    "execute_relocation_error": 1,
                    "process_assertion": 3,
                    "process_assertion_error": 1,
                    "process_assertion_failed": 1,
                    "process_relocation": 1,
                    "validate_assertion": 2,
                    "validate_assertion_failed": 1,
                    "verify_assertion_failed": 1
                },
                "param_1": {
                    "assertion": 3,
                    "assertion_expr": 1,
                    "assertion_message": 1,
                    "error_message": 1,
                    "file": 6,
                    "file_name": 10,
                    "filename": 1,
                    "line": 1,
                    "message": 3,
                    "parameter_1": 1,
                    "relocation_base": 1,
                    "source_file": 1
                },
                "param_2": {
                    "assertion_file": 1,
                    "file": 7,
                    "filename": 1,
                    "line": 4,
                    "line_number": 15,
                    "parameter_2": 1,
                    "relocation_offset": 1
                },
                "param_3": {
                    "assertion": 3,
                    "assertion_condition": 2,
                    "assertion_message": 7,
                    "condition": 3,
                    "error_message": 1,
                    "filename": 1,
                    "function_name": 2,
                    "line": 2,
                    "line_number": 2,
                    "message": 7
                },
                "param_4": {
                    "assertion_line": 1,
                    "condition": 1,
                    "file_name": 1,
                    "function": 7,
                    "function_name": 16,
                    "line": 1,
                    "line_number": 1,
                    "message": 1,
                    "parameter_4": 1
                },
                "pcVar3": {
                    "additional_info": 2,
                    "additional_message": 1,
                    "additional_text": 4,
                    "comma_string": 1,
                    "delim": 1,
                    "delimiter": 2,
                    "extra_info": 1,
                    "function": 1,
                    "function_message": 1,
                    "function_msg": 1,
                    "function_name": 1,
                    "info": 1,
                    "message": 1,
                    "message_prefix": 1,
                    "pc_var3": 1,
                    "prefix": 7,
                    "separator": 2,
                    "static_message": 1,
                    "temp_string": 1
                },
                "uVar1": {
                    "assertion": 1,
                    "assertion_message": 2,
                    "assertion_msg": 1,
                    "assertion_offset": 2,
                    "assertion_string_address": 1,
                    "file_name_ptr": 1,
                    "func_ptr": 1,
                    "message_format": 1,
                    "offset": 2,
                    "ptr_offset": 1,
                    "rel_offset": 1,
                    "relocation": 2,
                    "relocation_addr": 2,
                    "relocation_address": 3,
                    "relocation_offset": 6,
                    "relocation_ptr": 1,
                    "relocation_value": 2,
                    "u_var1": 1
                },
                "uVar2": {
                    "argument": 1,
                    "assertion_message": 1,
                    "assertion_msg": 1,
                    "condition_copy": 1,
                    "curr_function": 1,
                    "current_function": 1,
                    "current_function_name": 1,
                    "file_name": 1,
                    "function_msg": 1,
                    "function_name": 2,
                    "function_name_copy": 2,
                    "function_offset": 1,
                    "function_param": 1,
                    "function_ptr": 1,
                    "jump": 1,
                    "original_function_name": 1,
                    "process_and_jump_arg": 1,
                    "ptr_function_name": 1,
                    "temp": 1,
                    "temp_func_arg": 1,
                    "temp_function": 1,
                    "temp_function_name": 5,
                    "temp_message": 1,
                    "temp_parameter_4": 1,
                    "u_var2": 1
                },
                "uVar4": {
                    "execution_result": 3,
                    "process_and_jump_result": 2,
                    "process_result": 7,
                    "processed_result": 3,
                    "relocation_result": 1,
                    "result": 15
                }
            },
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "calling": [
                "FUN_00080b2c",
                "FUN_000803fc"
            ],
            "code": "\nvoid execute_relocated_assertion_000816f8(undefined4 file_name,undefined4 line_number,char *assertion_message,undefined4 function_name)\n\n{\n  undefined4 relocation_offset;\n  undefined4 temp_function_name;\n  char *prefix;\n  undefined8 result;\n  \n  relocation_offset = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (assertion_message == (char *)0x0) goto LAB_0008171c;\n  temp_function_name = function_name;\n  prefix = \", function: \";\n  do {\n    function_name = file_name;\n    execute_relocation_00081750(relocation_offset,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",temp_function_name,file_name,line_number,\n                 prefix,assertion_message);\n    result = process_and_jump_000836ec();\n    line_number = (undefined4)((ulonglong)result >> 0x20);\n    relocation_offset = (undefined4)result;\nLAB_0008171c:\n    assertion_message = \"\";\n    temp_function_name = function_name;\n    prefix = assertion_message;\n  } while( true );\n}\n\n",
            "current_name": "execute_relocated_assertion_000816f8",
            "entrypoint": "0x000816f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816f8": "execute_relocated_assertion_000816f8",
                "param_1": "file_name",
                "param_2": "line_number",
                "param_3": "assertion_message",
                "param_4": "function_name",
                "pcVar3": "prefix",
                "uVar1": "relocation_offset",
                "uVar2": "temp_function_name",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081750": {
            "additional_data": {
                "FUNC_0008289c": {
                    "perform_relocation": 2
                },
                "FUN_00081750": {
                    "apply_relocation": 2,
                    "calculate_and_update_offset": 1,
                    "elf32_relocate": 1,
                    "execute_function_with_parameters": 1,
                    "execute_function_with_params": 1,
                    "execute_function_with_stack_args": 1,
                    "execute_relocation": 10,
                    "perform_relocation": 1,
                    "process_data": 1,
                    "process_function": 1,
                    "process_parameters": 1,
                    "process_rel_array": 1,
                    "process_relocation": 2,
                    "process_relocation_entry": 1,
                    "relocate_function": 1,
                    "reverse_elf32_rel": 1,
                    "update_function": 1
                },
                "param_1": {
                    "arg1": 2,
                    "data_offset": 1,
                    "data_segment": 1,
                    "func_parameter1": 1,
                    "input1": 1,
                    "input_offset": 1,
                    "input_param1": 3,
                    "offset": 16,
                    "parameter1": 1,
                    "r_offset": 1,
                    "relocation_offset": 1,
                    "relocation_table": 1,
                    "value1": 1
                },
                "param_2": {
                    "arg1": 7,
                    "arg2": 2,
                    "func_parameter2": 1,
                    "input2": 1,
                    "input_param": 1,
                    "input_param2": 3,
                    "param": 2,
                    "param1": 10,
                    "param2": 1,
                    "parameter2": 1,
                    "text_segment": 1,
                    "value2": 1
                },
                "param_3": {
                    "arg2": 7,
                    "arg3": 2,
                    "dynamic_param1": 1,
                    "func_parameter3": 1,
                    "helper_param1": 1,
                    "input_param3": 1,
                    "output_offset": 1,
                    "param2": 10,
                    "parameter3": 1,
                    "relocation_offset": 1,
                    "reverse_input1": 1,
                    "stack_param": 1,
                    "stack_variable_1": 1,
                    "value1": 1,
                    "value3": 1
                },
                "param_4": {
                    "arg3": 7,
                    "arg4": 2,
                    "dynamic_param2": 1,
                    "func_parameter4": 1,
                    "helper_param2": 1,
                    "input_param4": 1,
                    "output_param": 1,
                    "param3": 10,
                    "parameter4": 1,
                    "reverse_input2": 1,
                    "stack_param_2": 1,
                    "stack_variable": 1,
                    "stack_variable_2": 1,
                    "value2": 1,
                    "value4": 1
                },
                "uStack_4": {
                    "arg3_copied": 1,
                    "arg3_ptr": 1,
                    "arg4_stack": 1,
                    "args_value": 1,
                    "calculated_param": 1,
                    "data_ptr": 1,
                    "modified_reverse_input2": 1,
                    "new_value2": 1,
                    "param3": 1,
                    "param3_copy": 3,
                    "param4": 1,
                    "parameter4": 1,
                    "relocated_param": 1,
                    "relocation_arg": 1,
                    "relocation_function": 1,
                    "relocation_param": 4,
                    "relocation_value": 1,
                    "stack_arg4": 1,
                    "stack_param": 1,
                    "stack_parameter2": 2,
                    "stack_variable_4": 1,
                    "temp_param4": 1,
                    "temp_variable2": 1,
                    "updated_param2": 1,
                    "value2": 1
                },
                "uStack_8": {
                    "arg2_copied": 1,
                    "arg2_ptr": 1,
                    "arg3_stack": 1,
                    "args_address": 1,
                    "calculated_offset": 1,
                    "modified_reverse_input1": 1,
                    "new_value1": 1,
                    "param2": 1,
                    "param2_copy": 3,
                    "parameter3": 1,
                    "relocated_offset": 1,
                    "relocation_addr": 1,
                    "relocation_offset": 8,
                    "relocation_param": 1,
                    "stack_arg3": 1,
                    "stack_parameter1": 2,
                    "stack_variable_3": 1,
                    "temp_param3": 1,
                    "temp_variable1": 1,
                    "updated_param1": 1,
                    "value1": 1
                }
            },
            "called": [
                "FUN_0008289c"
            ],
            "calling": [
                "FUN_000816f8"
            ],
            "code": "\nvoid execute_relocation_00081750(undefined4 offset,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 relocation_offset;\n  undefined4 relocation_param;\n  \n  relocation_offset = param2;\n  relocation_param = param3;\n  process_and_validate_data_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,offset,param1,&relocation_offset);\n  return;\n}\n\n",
            "code_backup": "\nvoid FUN_00081750(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,param_1,param_2,&uStack_8);\n  return;\n}\n\n",
            "current_name": "execute_relocation_00081750",
            "entrypoint": "0x00081750",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081750": "execute_relocation_00081750",
                "param_1": "offset",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uStack_4": "relocation_param",
                "uStack_8": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081778": {
            "additional_data": {
                "0x8584c": {
                    "function_array": 1,
                    "function_pointer": 1,
                    "starting_function_set_pointer": 1
                },
                "FUNC_00085844": {
                    "init_function_set": 1,
                    "initialize": 2,
                    "initialize_function": 1,
                    "initialize_function_set": 4,
                    "initialize_functions": 3
                },
                "FUNK_00081778": {
                    "run_function_4_times": 1
                },
                "FUN_00081778": {
                    "execute_callback_functions": 1,
                    "execute_callbacks": 1,
                    "execute_four_code_blocks": 1,
                    "execute_four_functions": 2,
                    "execute_func_four_times": 1,
                    "execute_function_loop": 1,
                    "execute_function_pointers": 1,
                    "execute_function_sequence": 1,
                    "execute_function_set": 11,
                    "execute_function_set_four_times": 3,
                    "execute_functions": 6,
                    "run_function_set": 1
                },
                "iVar1": {
                    "counter": 7,
                    "iteration": 2,
                    "iteration_count": 17,
                    "iteration_counter": 3,
                    "loop_counter": 1,
                    "num_executions": 1
                },
                "ppcVar2": {
                    "callback_function_array": 1,
                    "callback_pointer": 1,
                    "code_pointers": 1,
                    "function_array": 4,
                    "function_list": 1,
                    "function_pointer": 14,
                    "function_pointer_array": 3,
                    "function_pointer_ptr": 1,
                    "function_pointers": 4,
                    "function_set_pointer": 1
                }
            },
            "called": [
                "FUN_00080118",
                "FUN_00085844",
                "FUN_000836d8"
            ],
            "calling": [
                "FUN_00080774"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid execute_function_set_four_times_00081778(void)\n\n{\n  int iteration_count;\n  code **function_pointer;\n  \n  FUNC_00085844();\n  function_pointer = (code **)0x8584c;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_pointer = function_pointer + 1;\n    (**function_pointer)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "current_name": "execute_function_set_four_times_00081778",
            "entrypoint": "0x00081778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081778": "execute_function_set_four_times_00081778",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000817c8": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array_variable": 1,
                    "elf32_rel_array": 1
                },
                "FUNC_0008289c": {
                    "perform_operations": 1,
                    "reverse_data_at_address_and_call": 1,
                    "reverse_operation": 1
                },
                "FUN_000817c8": {
                    "apply_function_to_stack": 1,
                    "execute_function": 1,
                    "execute_function_with_params": 1,
                    "load_data_from_elf_relocation": 1,
                    "process_data": 3,
                    "process_elf_data": 1,
                    "process_function": 1,
                    "process_parameters": 1
                },
                "param_1": {
                    "arg1": 1,
                    "data_address": 1,
                    "first_parameter": 1,
                    "function_to_execute": 1,
                    "input_data": 1,
                    "input_param": 19,
                    "input_parameter": 4,
                    "param1": 1,
                    "relocation_index": 1,
                    "source_data": 1
                },
                "param_2": {
                    "arg2": 1,
                    "data_param": 2,
                    "param2": 7,
                    "param_2": 3,
                    "param_a": 1,
                    "param_buffer": 1,
                    "second_parameter": 2,
                    "secondary_param": 1,
                    "source_param": 2,
                    "stack_param1": 4,
                    "stack_param2": 1,
                    "stack_param_1": 1,
                    "stack_param_2": 1,
                    "stack_parameter1": 1,
                    "target_data": 1,
                    "temp_param": 1,
                    "temp_var_1": 1
                },
                "param_3": {
                    "arg3": 1,
                    "auxiliary_data": 1,
                    "dest_param": 1,
                    "destination_param": 1,
                    "offset_param": 3,
                    "param3": 7,
                    "param_3": 3,
                    "param_b": 1,
                    "param_value": 1,
                    "stack_param2": 4,
                    "stack_param3": 1,
                    "stack_param_2": 1,
                    "stack_param_3": 1,
                    "stack_parameter2": 1,
                    "temp_var_2": 1,
                    "tertiary_param": 1,
                    "third_parameter": 2
                },
                "param_4": {
                    "additional_data": 1,
                    "additional_param": 1,
                    "arg4": 1,
                    "fourth_parameter": 2,
                    "offset_param": 1,
                    "param4": 7,
                    "param_4": 3,
                    "param_c": 1,
                    "param_data": 1,
                    "quaternary_param": 1,
                    "result_param": 1,
                    "stack_param": 1,
                    "stack_param3": 4,
                    "stack_param4": 1,
                    "stack_param_3": 1,
                    "stack_param_4": 1,
                    "stack_parameter3": 1,
                    "temp_var_3": 1,
                    "value_param": 1
                },
                "uStack_4": {
                    "additional_data_ptr": 1,
                    "additional_variable": 1,
                    "copy_of_fourth_parameter": 1,
                    "data_ptr": 1,
                    "fourth_param_copy": 1,
                    "offset": 1,
                    "param4_copy": 4,
                    "param_4_copy": 1,
                    "param_d": 1,
                    "processed_param4": 2,
                    "quaternary_stack": 1,
                    "result": 1,
                    "stack_4": 1,
                    "stack_param4": 1,
                    "stack_var": 1,
                    "stack_var3": 4,
                    "stack_var_3": 1,
                    "stack_variable3": 1,
                    "stack_variable4": 1,
                    "stack_variable_3": 1,
                    "stack_variable_4": 1,
                    "temp_var_6": 1
                },
                "uStack_8": {
                    "auxiliary_data_ptr": 1,
                    "copy_of_third_parameter": 1,
                    "dest_offset": 1,
                    "destination_variable": 1,
                    "offset": 1,
                    "offset_plus_8": 1,
                    "offset_stack": 1,
                    "param3_copy": 4,
                    "param_3_copy": 1,
                    "processed_param3": 2,
                    "stack_8": 1,
                    "stack_param3": 1,
                    "stack_var2": 4,
                    "stack_var_2": 1,
                    "stack_variable2": 1,
                    "stack_variable8": 1,
                    "stack_variable_2": 1,
                    "stack_variable_8": 1,
                    "temp_var_5": 1,
                    "tertiary_stack": 1,
                    "third_param_copy": 1,
                    "value_ptr": 1
                },
                "uStack_c": {
                    "buffer_ptr": 1,
                    "copy_of_second_parameter": 1,
                    "data": 1,
                    "data_stack": 1,
                    "param2_copy": 4,
                    "param_2_copy": 1,
                    "processed_param2": 2,
                    "reversed_offset": 1,
                    "second_param_copy": 1,
                    "secondary_stack": 1,
                    "source_offset": 1,
                    "source_variable": 1,
                    "stack_c": 1,
                    "stack_param2": 1,
                    "stack_var1": 4,
                    "stack_var_1": 1,
                    "stack_variable1": 1,
                    "stack_variable_1": 1,
                    "stack_variable_c": 2,
                    "target_data_ptr": 1,
                    "temp_var_4": 1
                }
            },
            "called": [
                "FUN_0008289c"
            ],
            "calling": [
                "FUN_00080eec"
            ],
            "code": "\nvoid process_elf_data_000817c8(undefined4 input_param,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 stack_var1;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  \n  stack_var1 = param2;\n  param3_copy = param3;\n  param4_copy = param4;\n  process_and_validate_data_0008289c(elf32_rel_array[140].r_offset,\n               *(undefined4 *)(elf32_rel_array[140].r_offset + 8),input_param,&stack_var1);\n  return;\n}\n\n",
            "code_backup": "\nvoid FUN_000817c8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),param_1,&uStack_c);\n  return;\n}\n\n",
            "current_name": "process_elf_data_000817c8",
            "entrypoint": "0x000817c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf32_rel_array",
                "FUN_000817c8": "process_elf_data_000817c8",
                "param_1": "input_param",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_4": "param4_copy",
                "uStack_8": "param3_copy",
                "uStack_c": "stack_var1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000817f0": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "elf32_rel_array": 1,
                    "elf_rel_array": 1,
                    "linking_table": 1,
                    "rel_array": 3,
                    "relocation_array": 10,
                    "relocation_data": 1,
                    "relocation_entries": 1,
                    "relocation_table": 3,
                    "relocations": 1,
                    "result_array": 1
                },
                "FUN_000817f0": {
                    "allocate_and_link": 2,
                    "allocate_and_link_memory": 20,
                    "allocate_memory_and_link": 5,
                    "initialize_memory": 1,
                    "link_allocated_memory": 1,
                    "link_and_allocate_memory": 1,
                    "link_memory_and_allocate": 1
                },
                "param_1": {
                    "buffer_address": 1,
                    "data": 1,
                    "input": 4,
                    "input_address": 1,
                    "input_param": 4,
                    "input_parameter": 1,
                    "memory": 1,
                    "memory_address": 9,
                    "memory_size": 2,
                    "param": 6,
                    "unnamed_parameter": 1
                },
                "r_offset": {
                    "offset": 6
                }
            },
            "called": [
                "FUN_00081810"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nvoid link_and_allocate_memory_000817f0(undefined4 memory_address)\n\n{\n  allocate_memory_and_link_00081810(relocation_array[140].offset,memory_address);\n  return;\n}\n\n",
            "current_name": "link_and_allocate_memory_000817f0",
            "entrypoint": "0x000817f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_000817f0": "link_and_allocate_memory_000817f0",
                "param_1": "memory_address",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081800": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "rel_array": 11,
                    "relocation_array": 5,
                    "relocation_entries": 1,
                    "relocation_table": 3
                },
                "FUN_00081800": {
                    "reverse_and_update_memory_offset": 1,
                    "update_and_reverse_memory_offset": 1,
                    "update_memory_offset": 29
                },
                "param_1": {
                    "data": 3,
                    "input": 2,
                    "input_address": 1,
                    "input_param": 1,
                    "input_value": 1,
                    "memory": 1,
                    "memory_offset": 2,
                    "new_offset": 3,
                    "new_param": 1,
                    "new_value": 2,
                    "offset": 6,
                    "offset_to_update": 1,
                    "offset_value": 2,
                    "param": 2,
                    "updated_offset": 1,
                    "updated_value": 1,
                    "value": 1
                },
                "r_offset": {
                    "memory_offset": 1,
                    "offset": 3,
                    "offset_value": 1
                },
                "reverse_and_update_memory_offset_00083b10": {
                    "reverse_and_update_offset": 1,
                    "update_and_reverse_offset": 1
                }
            },
            "called": [
                "FUN_00083b10"
            ],
            "calling": [
                "FUN_00081472",
                "FUN_0008151c",
                "FUN_00081480"
            ],
            "code": "\nvoid update_and_reverse_memory_offset_00081800(undefined4 offset)\n\n{\n  reverse_and_update_offset(rel_array[140].offset,offset);\n  return;\n}\n\n",
            "current_name": "update_and_reverse_memory_offset_00081800",
            "entrypoint": "0x00081800",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081800": "update_and_reverse_memory_offset_00081800",
                "param_1": "offset",
                "r_offset": "offset",
                "reverse_and_update_memory_offset_00083b10": "reverse_and_update_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081810": {
            "additional_data": {
                "DAT_20071218": {
                    "initial_data": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 1,
                    "relocation_array": 1,
                    "relocation_table": 1
                },
                "FUNC_00081f94": {
                    "initialize_block_header": 1,
                    "initialize_data_structure": 1,
                    "initialize_memory": 1,
                    "initialize_parameters": 1
                },
                "FUNC_00081f98": {
                    "cleanup": 1,
                    "finalize_data_structure": 1
                },
                "FUN_00081810": {
                    "allocate_and_initialize_block": 1,
                    "allocate_and_initialize_memory": 2,
                    "allocate_and_initialize_memory_block": 1,
                    "allocate_and_link_memory": 2,
                    "allocate_and_store_memory": 1,
                    "allocate_and_update_memory": 1,
                    "allocate_memory": 8,
                    "allocate_memory_and_initialize": 1,
                    "allocate_memory_and_link": 2,
                    "allocate_memory_and_update_pointers": 1,
                    "allocate_memory_block": 1,
                    "improved_extract_relocation_entries": 1,
                    "process_binary_function": 1,
                    "reverse_and_store_relocations": 1,
                    "reverse_and_update_memory": 1
                },
                "LAB_00081876": {
                    "return_zero": 1
                },
                "dVar1": {
                    "addr1": 1,
                    "aligned_size_temp": 1,
                    "base_node": 1,
                    "current_memory_offset": 1,
                    "current_offset": 1,
                    "current_rel_entry": 1,
                    "current_relocation": 1,
                    "dword_variable1": 1,
                    "first_offset": 1,
                    "info1": 1,
                    "info_1": 1,
                    "last_allocated_block": 1,
                    "last_block_offset": 1,
                    "last_node_address": 1,
                    "linked_offset": 1,
                    "position": 1,
                    "prev_size": 1,
                    "rel_array_info": 1,
                    "rel_info": 3,
                    "rel_info_1": 2,
                    "rel_offset": 1,
                    "temp1": 2,
                    "temp_var1": 1,
                    "temp_variable_14": 1,
                    "value": 1,
                    "var1": 1
                },
                "dVar11": {
                    "current_node_address": 1,
                    "current_offset": 1,
                    "current_offset3": 1,
                    "d_var11": 1,
                    "dword_variable11": 1,
                    "info4": 1,
                    "loop_offset": 1,
                    "next": 1,
                    "next_block": 1,
                    "next_offset": 1,
                    "node1": 1,
                    "offset_4": 1,
                    "prev_block_offset_temp": 1,
                    "prev_rel_offset": 1,
                    "previous_node": 1,
                    "rel_entry": 1,
                    "rel_offset_3": 1,
                    "relocation_ptr2": 1,
                    "temp_block": 1,
                    "temp_offset": 1,
                    "temp_ptr2": 2,
                    "temp_var11": 1,
                    "temp_var_8": 1,
                    "temp_variable_21": 1,
                    "tmp7": 1,
                    "var11": 1,
                    "var_34": 1
                },
                "dVar11_b": {
                    "temp_var11_b": 1
                },
                "dVar11_c": {
                    "temp_var11_c": 1
                },
                "dVar12": {
                    "current_block_offset_temp": 1,
                    "current_offset4": 1,
                    "d_var12": 1,
                    "dword_variable12": 1,
                    "info5": 1,
                    "next_next": 1,
                    "node2": 1,
                    "offset_3": 1,
                    "prev_block": 1,
                    "prev_offset": 2,
                    "prev_rel_offset2": 1,
                    "previous_block": 1,
                    "previous_node_address": 1,
                    "previous_offset": 2,
                    "previous_previous_node": 1,
                    "rel_entry2": 1,
                    "rel_offset_4": 1,
                    "relocation_ptr3": 1,
                    "temp_ptr3": 2,
                    "temp_var12": 1,
                    "temp_var_9": 1,
                    "temp_variable_22": 1,
                    "tmp8": 1,
                    "var12": 1,
                    "var_38": 1
                },
                "dVar17": {
                    "d_var17": 1,
                    "rel_ptr": 1
                },
                "dVar18": {
                    "d_var18": 1
                },
                "dVar1_b": {
                    "temp_var1_b": 1
                },
                "dVar2": {
                    "index_offset": 1
                },
                "dVar4": {
                    "loop_value_2": 1
                },
                "dVar5": {
                    "last_offset": 1
                },
                "dVar7": {
                    "addr2": 1,
                    "current_block": 1,
                    "current_chunk": 1,
                    "current_node": 1,
                    "current_offset": 4,
                    "current_offset2": 1,
                    "dword_variable7": 1,
                    "first_offset": 1,
                    "info3": 1,
                    "next_node_address": 1,
                    "next_ptr": 1,
                    "next_rel_info": 1,
                    "node_offset": 1,
                    "offset": 1,
                    "offset_1": 1,
                    "previous_rel_entry": 1,
                    "rel_offset": 1,
                    "rel_offset_2": 1,
                    "relocation_offset": 1,
                    "temp7": 1,
                    "temp_offset": 1,
                    "temp_var13": 1,
                    "temp_var7": 1,
                    "temp_var_6": 1,
                    "valid_offset": 1,
                    "var7": 1
                },
                "dVar7_b": {
                    "temp_var7_b": 1
                },
                "dVar7_c": {
                    "temp_var7_c": 1
                },
                "dVar8": {
                    "last_offset_2": 1
                },
                "iVar13": {
                    "block_offset": 1,
                    "counter": 2,
                    "counter_var": 1,
                    "current_entry": 1,
                    "current_size": 1,
                    "i_value3": 1,
                    "i_var13": 1,
                    "i_var4": 1,
                    "index": 3,
                    "index3": 1,
                    "index_1": 1,
                    "int_variable13": 1,
                    "list_index": 1,
                    "loop_var": 1,
                    "offset": 1,
                    "ptr_7": 1,
                    "rel_info_5": 1,
                    "temp2": 1,
                    "temp_int_4": 1,
                    "temp_var12": 1,
                    "temp_var13": 1,
                    "temp_var7": 1,
                    "temp_var_5": 1,
                    "temp_var_8": 1,
                    "tmp9": 1,
                    "var13": 1,
                    "var4": 1
                },
                "iVar19": {
                    "temp_index": 1
                },
                "iVar2": {
                    "current": 1,
                    "current_address": 1,
                    "current_offset": 1,
                    "current_ptr": 1,
                    "first_allocated_block": 1,
                    "index": 3,
                    "index_2": 1,
                    "info2": 1,
                    "int_variable2": 1,
                    "link_val_1": 1,
                    "next_offset": 2,
                    "next_rel_entry": 1,
                    "rel_offset_1": 2,
                    "size_temp_2": 1,
                    "temp": 2,
                    "temp2": 2,
                    "temp_index": 1,
                    "temp_int_1": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_variable": 1,
                    "tmp1": 1,
                    "var1": 1,
                    "var2": 1
                },
                "iVar20": {
                    "temp_index2": 1
                },
                "iVar21": {
                    "temp_index3": 1
                },
                "iVar22": {
                    "temp_index4": 1
                },
                "iVar23": {
                    "temp_index5": 1
                },
                "iVar24": {
                    "temp_index6": 1
                },
                "iVar25": {
                    "temp_index7": 1
                },
                "iVar26": {
                    "temp_index8": 1
                },
                "iVar27": {
                    "temp_index9": 1
                },
                "iVar5": {
                    "current_index": 1,
                    "i_value": 1,
                    "i_var1": 1,
                    "i_var5": 1,
                    "int_variable5": 1,
                    "link_val_4": 1,
                    "next": 1,
                    "next_block_size": 1,
                    "prev_ptr": 1,
                    "previous": 1,
                    "ptr_2": 1,
                    "rel_info_2": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp5": 2,
                    "temp_int_2": 1,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "temp_var_1": 2,
                    "temp_var_4": 1,
                    "temp_variable_2": 1,
                    "tmp4": 1,
                    "value": 1,
                    "var2": 1,
                    "var5": 1,
                    "var_1_c": 1
                },
                "iVar7": {
                    "last_index": 1
                },
                "iVar9": {
                    "i_value2": 1,
                    "i_var3": 1,
                    "i_var9": 1,
                    "index_temp": 1,
                    "int_variable9": 1,
                    "next": 1,
                    "next_index": 1,
                    "prev": 1,
                    "prev_block_offset": 1,
                    "prev_size": 1,
                    "previous": 1,
                    "ptr_3": 1,
                    "rel_info_3": 1,
                    "relocation_2": 1,
                    "temp6": 1,
                    "temp9": 2,
                    "temp_int_3": 1,
                    "temp_var6": 1,
                    "temp_var9": 1,
                    "temp_var_2": 1,
                    "temp_var_3": 1,
                    "temp_var_4": 1,
                    "temp_var_7": 1,
                    "temp_variable_3": 1,
                    "tmp6": 1,
                    "var3": 1,
                    "var9": 1,
                    "var_2_c": 1
                },
                "param_1": {
                    "buffer": 1,
                    "function_arguments": 1,
                    "input_array": 1,
                    "input_pointer": 1,
                    "mem_block_ptr": 1,
                    "mem_ptr": 1,
                    "memory": 1,
                    "memory_pointer": 1,
                    "memory_ptr": 1,
                    "output": 2,
                    "output_address": 1,
                    "output_array": 1,
                    "output_buffer": 1,
                    "output_pointer": 5,
                    "output_ptr": 2,
                    "param_array": 1,
                    "param_ptr": 2,
                    "parameters": 1,
                    "relocation_data": 1,
                    "result_ptr": 4
                },
                "param_2": {
                    "array_length": 1,
                    "block_size": 1,
                    "buffer_size": 2,
                    "input_size": 3,
                    "param_size": 1,
                    "param_value": 1,
                    "relocation_count": 1,
                    "size": 20
                },
                "pdVar14": {
                    "array_entry": 1,
                    "current_block": 1,
                    "current_node": 1,
                    "data_array": 1,
                    "data_pointer1": 1,
                    "info_2": 1,
                    "loop_ptr": 1,
                    "pd_var1": 2,
                    "pointer2": 1,
                    "pointer_to_previous_entry": 1,
                    "pointer_variable14": 1,
                    "prev_block": 1,
                    "ptr1": 2,
                    "ptr2": 1,
                    "ptr_value2": 1,
                    "ptr_var1": 1,
                    "ptr_var14": 1,
                    "rel_array_ptr": 1,
                    "rel_entries": 1,
                    "rel_info_ptr": 1,
                    "rel_node": 1,
                    "struct_ptr_1": 1,
                    "temp_pointer_2": 1,
                    "temp_ptr1": 1,
                    "temp_ptr2": 1,
                    "temp_ptr_2": 2,
                    "temp_var2": 1
                },
                "pdVar17": {
                    "data_pointer2": 1,
                    "info_3": 1,
                    "pd_var2": 1,
                    "pointer4": 1,
                    "pointer_to_current_entry": 1,
                    "pointer_variable17": 1,
                    "prev_block": 1,
                    "previous_block": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr4": 1,
                    "ptr_value4": 1,
                    "ptr_var17": 1,
                    "ptr_var2": 1,
                    "rel_array": 1,
                    "rel_entry": 1,
                    "rel_info_ptr_2": 1,
                    "struct_ptr_2": 1,
                    "temp_pointer_3": 1,
                    "temp_ptr3": 1,
                    "temp_ptr4": 1,
                    "temp_ptr_4": 1,
                    "temp_var5": 1
                },
                "puVar10": {
                    "current": 1,
                    "current_block": 1,
                    "current_pointer": 1,
                    "data_pointer3": 1,
                    "entry_ptr": 1,
                    "loop_ptr_temp": 1,
                    "node": 2,
                    "node_ptr": 1,
                    "pointer": 1,
                    "pointer_to_current_entry": 1,
                    "pointer_variable10": 1,
                    "ptr": 1,
                    "ptr1": 1,
                    "ptr_4": 1,
                    "ptr_value": 1,
                    "ptr_var1": 1,
                    "ptr_var10": 1,
                    "rel_entry": 1,
                    "relocation_ptr1": 1,
                    "temp_pointer": 2,
                    "temp_pointer_1": 1,
                    "temp_ptr": 2,
                    "temp_ptr1": 3,
                    "temp_ptr_1": 1
                },
                "puVar16": {
                    "aligned_node": 1,
                    "block_header": 1,
                    "data_pointer4": 1,
                    "entry": 1,
                    "loop_ptr_2": 1,
                    "new_block": 1,
                    "new_node": 1,
                    "new_node_address": 1,
                    "new_pointer": 1,
                    "new_rel_entry": 1,
                    "node_ptr_temp": 1,
                    "pointer3": 1,
                    "pointer_variable16": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr_6": 1,
                    "ptr_value3": 1,
                    "ptr_var16": 1,
                    "ptr_var2": 1,
                    "relocation_ptr4": 1,
                    "temp_pointer_2": 1,
                    "temp_ptr2": 1,
                    "temp_ptr3": 1,
                    "temp_ptr4": 1,
                    "temp_ptr_2": 1,
                    "temp_ptr_3": 2
                },
                "uVar15": {
                    "aligned_block_size": 1,
                    "aligned_size": 10,
                    "alignment_size": 1,
                    "alloc_size": 1,
                    "allocated_size": 1,
                    "block_size": 1,
                    "loop_value": 1,
                    "size": 1,
                    "size_temp": 2,
                    "size_var1": 1,
                    "temp_5": 1,
                    "temp_var15": 1,
                    "temp_var3": 1,
                    "temp_var8": 1,
                    "temp_variable_12": 1,
                    "total_size": 1,
                    "u_value5": 1,
                    "uint_variable15": 1,
                    "var15": 1,
                    "var_40": 1
                },
                "uVar15_b": {
                    "temp_var15_b": 1
                },
                "uVar15_c": {
                    "temp_var15_c": 1
                },
                "uVar18": {
                    "adjusted_size": 1,
                    "alignment_offset": 1,
                    "block_index": 3,
                    "count": 1,
                    "group_index": 1,
                    "group_number": 1,
                    "index": 3,
                    "index2": 1,
                    "loop_index": 1,
                    "segment_index": 1,
                    "size_var2": 1,
                    "temp3": 1,
                    "temp_1": 1,
                    "temp_6": 1,
                    "temp_var18": 1,
                    "temp_var6": 1,
                    "temp_var9": 1,
                    "temp_var_10": 1,
                    "temp_var_6": 1,
                    "temp_var_9": 1,
                    "temp_variable_11": 1,
                    "u_value6": 1,
                    "uint_variable18": 1,
                    "var18": 1,
                    "var_44": 1
                },
                "uVar18_c": {
                    "temp_var18_c": 1
                },
                "uVar3": {
                    "alignment": 1,
                    "block_size": 1,
                    "current_size": 1,
                    "flag_1": 1,
                    "index_value": 1,
                    "initial_size": 1,
                    "link_val_2": 1,
                    "linked_size": 1,
                    "mask": 5,
                    "mask_1": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp_1": 1,
                    "temp_uint_1": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var14": 1,
                    "temp_var3": 1,
                    "temp_var_2": 1,
                    "temp_var_3": 1,
                    "temp_variable_23": 1,
                    "tmp2": 1,
                    "u_value": 1,
                    "uint_variable3": 1,
                    "var3": 1
                },
                "uVar3_b": {
                    "temp_var3_b": 1
                },
                "uVar4": {
                    "adjusted_size": 1,
                    "aligned_size": 3,
                    "alignment": 1,
                    "alignment_diff": 1,
                    "block_start": 1,
                    "current_entry_size": 1,
                    "flag_2": 1,
                    "link_val_3": 1,
                    "mask_2": 1,
                    "size_aligned": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp_2": 1,
                    "temp_size": 1,
                    "temp_uint_2": 1,
                    "temp_var15": 1,
                    "temp_var2": 2,
                    "temp_var4": 1,
                    "temp_var_3": 1,
                    "temp_var_4": 1,
                    "temp_variable_5": 1,
                    "tmp": 1,
                    "tmp3": 1,
                    "u_value2": 1,
                    "uint_variable4": 1,
                    "var4": 1
                },
                "uVar4_b": {
                    "temp_var4_b": 1
                },
                "uVar6": {
                    "current_sum": 1,
                    "difference": 2,
                    "flag_3": 1,
                    "last_difference": 1,
                    "length_diff": 1,
                    "link_val_5": 1,
                    "offset": 1,
                    "old_address": 1,
                    "remaining_size": 1,
                    "sum": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp_3": 1,
                    "temp_uint_3": 1,
                    "temp_var16": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var6": 1,
                    "temp_var_2": 1,
                    "temp_var_5": 2,
                    "temp_variable_20": 1,
                    "u_value3": 1,
                    "u_var6": 1,
                    "uint_variable6": 1,
                    "var6": 1,
                    "var_20": 1
                },
                "uVar6_b": {
                    "temp_var6_b": 1
                },
                "uVar8": {
                    "current_size": 1,
                    "flag_4": 1,
                    "flags": 1,
                    "rel_size_1": 1,
                    "relocation_value": 1,
                    "size_diff": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp8": 2,
                    "temp_4": 1,
                    "temp_difference": 1,
                    "temp_uint_4": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var8": 1,
                    "temp_var_2": 1,
                    "temp_var_3": 1,
                    "temp_var_6": 1,
                    "temp_var_7": 1,
                    "temp_variable_7": 1,
                    "tmp5": 1,
                    "u_value4": 1,
                    "uint_variable8": 1,
                    "value": 1,
                    "var8": 1,
                    "var_28": 1
                }
            },
            "called": [
                "FUN_00081f94",
                "FUN_00083b10",
                "FUN_0008236c",
                "FUN_00081f98"
            ],
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8",
                "FUN_000817f0",
                "FUN_00084018"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_and_link_00081810(undefined4 *output_pointer,uint size)\n\n{\n  dword rel_info;\n  int index;\n  uint mask;\n  uint aligned_size;\n  int temp_var_1;\n  uint difference;\n  dword current_offset;\n  uint temp8;\n  int temp9;\n  undefined *temp_ptr1;\n  dword temp_ptr2;\n  dword temp_ptr3;\n  int index;\n  dword *temp_ptr_2;\n  uint aligned_size;\n  undefined *temp_ptr_3;\n  dword *ptr_value4;\n  uint index;\n  \n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < size) goto return_zero;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nreturn_zero:\n      *output_pointer = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(output_pointer);\n  rel_info = relocation_array[142].r_info;\n  if (aligned_size < 0x1f8) {\n    index = *(int *)((int)&relocation_array[0x8e].r_offset + aligned_size);\n    if ((index != aligned_size + 0x20070464) ||\n       (index = index + 8, index = *(int *)(index + 0x14), index != index)) {\n      temp_var_1 = *(int *)(index + 0xc);\n      temp9 = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      aligned_size = *(uint *)(temp9 + 4);\n      index = *(int *)(index + 8);\n      *(int *)(index + 0xc) = temp_var_1;\n      *(int *)(temp_var_1 + 8) = index;\n      *(uint *)(temp9 + 4) = aligned_size | 1;\n      FUNC_00081f98(output_pointer);\n      return (int *)(index + 8);\n    }\n    index = (aligned_size >> 3) + 2;\n  }\n  else {\n    index = aligned_size >> 9;\n    if (index == 0) {\n      index = 0x7e;\n      index = 0x3f;\n    }\n    else if (index < 5) {\n      index = (aligned_size >> 6) + 0x38;\n      index = index * 2;\n    }\n    else if (index < 0x15) {\n      index = index + 0x5b;\n      index = index * 2;\n    }\n    else if (index < 0x55) {\n      index = (aligned_size >> 0xc) + 0x6e;\n      index = index * 2;\n    }\n    else if (index < 0x155) {\n      index = (aligned_size >> 0xf) + 0x77;\n      index = index * 2;\n    }\n    else if (index < 0x555) {\n      index = (aligned_size >> 0x12) + 0x7c;\n      index = index * 2;\n    }\n    else {\n      index = 0xfc;\n      index = 0x7e;\n    }\n    for (current_offset = (&relocation_array[0x8e].r_offset)[index]; index * 4 + 0x20070464U != current_offset\n        ; current_offset = *(dword *)(current_offset + 0xc)) {\n      index = *(uint *)(current_offset + 4) & 0xfffffffc;\n      temp_var_1 = index - aligned_size;\n      if (0xf < temp_var_1) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < temp_var_1) {\n        index = index + current_offset;\n        aligned_size = *(uint *)(index + 4);\n        temp_var_1 = *(int *)(current_offset + 0xc);\n        index = *(int *)(current_offset + 8);\n        *(int *)(index + 0xc) = temp_var_1;\n        *(int *)(temp_var_1 + 8) = index;\n        *(uint *)(index + 4) = aligned_size | 1;\n        FUNC_00081f98(output_pointer);\n        return (int *)(current_offset + 8);\n      }\n    }\n    index = index + 1;\n  }\n  current_offset = relocation_array[141].r_offset;\n  if (relocation_array[142].r_info != 0x2007046c) {\n    mask = *(uint *)(relocation_array[142].r_info + 4);\n    aligned_size = mask & 0xfffffffc;\n    difference = aligned_size - aligned_size;\n    if (0xf < (int)difference) {\n      current_offset = aligned_size + relocation_array[142].r_info;\n      *(uint *)(relocation_array[142].r_info + 4) = aligned_size | 1;\n      relocation_array[142].r_info = current_offset;\n      relocation_array[143].r_offset = current_offset;\n      *(undefined4 *)(current_offset + 0xc) = 0x2007046c;\n      *(undefined4 *)(current_offset + 8) = 0x2007046c;\n      *(uint *)(current_offset + 4) = difference | 1;\n      *(uint *)(current_offset + difference) = difference;\n      FUNC_00081f98(output_pointer);\n      return (int *)(rel_info + 8);\n    }\n    relocation_array[143].r_offset = 0x2007046c;\n    relocation_array[142].r_info = 0x2007046c;\n    if (-1 < (int)difference) {\n      *(uint *)(aligned_size + rel_info + 4) = *(uint *)(aligned_size + rel_info + 4) | 1;\n      FUNC_00081f98(output_pointer);\n      return (int *)(rel_info + 8);\n    }\n    if (aligned_size < 0x200) {\n      aligned_size = mask & 0xfffffff8;\n      index = *(int *)((int)&relocation_array[0x8d].r_info + aligned_size);\n      current_offset = 1 << ((int)(mask >> 3) >> 2 & 0xffU) | relocation_array[141].r_offset;\n      *(int *)(rel_info + 8) = index;\n      *(uint *)(rel_info + 0xc) = aligned_size + 0x20070464;\n      relocation_array[141].r_offset = current_offset;\n      *(dword *)((int)&relocation_array[0x8d].r_info + aligned_size) = rel_info;\n      *(dword *)(index + 0xc) = rel_info;\n    }\n    else {\n      difference = mask >> 9;\n      if (difference < 5) {\n        index = (mask >> 6) + 0x38;\n        index = index * 2;\n      }\n      else if (difference < 0x15) {\n        index = difference + 0x5b;\n        index = index * 2;\n      }\n      else if (difference < 0x55) {\n        index = (mask >> 0xc) + 0x6e;\n        index = index * 2;\n      }\n      else if (difference < 0x155) {\n        index = (mask >> 0xf) + 0x77;\n        index = index * 2;\n      }\n      else if (difference < 0x555) {\n        index = (mask >> 0x12) + 0x7c;\n        index = index * 2;\n      }\n      else {\n        index = 0xfc;\n        index = 0x7e;\n      }\n      current_offset = index * 4 + 0x20070464;\n      temp_ptr2 = (&relocation_array[0x8d].r_info)[index];\n      if (temp_ptr2 == current_offset) {\n        relocation_array[141].r_offset =\n             relocation_array[141].r_offset | 1 << (index >> 2 & 0xffU);\n        temp_ptr3 = temp_ptr2;\n      }\n      else {\n        do {\n          temp_ptr3 = temp_ptr2;\n          if ((*(uint *)(temp_ptr2 + 4) & 0xfffffffc) <= aligned_size) break;\n          temp_ptr2 = *(dword *)(temp_ptr2 + 8);\n          temp_ptr3 = temp_ptr2;\n        } while (current_offset != temp_ptr2);\n        temp_ptr2 = *(dword *)(temp_ptr3 + 0xc);\n      }\n      current_offset = relocation_array[141].r_offset;\n      *(dword *)(rel_info + 0xc) = temp_ptr2;\n      *(dword *)(rel_info + 8) = temp_ptr3;\n      *(dword *)(temp_ptr2 + 8) = rel_info;\n      *(dword *)(temp_ptr3 + 0xc) = rel_info;\n    }\n  }\n  rel_info = relocation_array[141].r_info;\n  mask = 1 << ((int)index >> 2 & 0xffU);\n  if (mask <= current_offset) {\n    if ((current_offset & mask) == 0) {\n      index = index & 0xfffffffc;\n      do {\n        mask = mask << 1;\n        index = index + 4;\n      } while ((current_offset & mask) == 0);\n    }\n    do {\n      ptr_value4 = &relocation_array[index + 0x8c].r_info;\n      temp_ptr_2 = ptr_value4;\n      aligned_size = index;\n      do {\n        for (temp_ptr1 = (undefined *)temp_ptr_2[3]; temp_ptr_2 != (dword *)temp_ptr1;\n            temp_ptr1 = *(undefined **)(temp_ptr1 + 0xc)) {\n          difference = *(uint *)(temp_ptr1 + 4) & 0xfffffffc;\n          temp8 = difference - aligned_size;\n          if (0xf < (int)temp8) {\n            index = *(int *)(temp_ptr1 + 8);\n            index = *(int *)(temp_ptr1 + 0xc);\n            temp_ptr_3 = temp_ptr1 + aligned_size;\n            *(uint *)(temp_ptr1 + 4) = aligned_size | 1;\n            *(int *)(index + 0xc) = index;\n            *(int *)(index + 8) = index;\n            relocation_array[142].r_info = (dword)temp_ptr_3;\n            relocation_array[143].r_offset = (dword)temp_ptr_3;\n            *(undefined4 *)(temp_ptr_3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(temp_ptr_3 + 8) = 0x2007046c;\n            *(uint *)(temp_ptr_3 + 4) = temp8 | 1;\n            *(uint *)(temp_ptr_3 + temp8) = temp8;\n            FUNC_00081f98(output_pointer);\n            return (int *)(temp_ptr1 + 8);\n          }\n          if (-1 < (int)temp8) {\n            index = *(int *)(temp_ptr1 + 8);\n            index = *(int *)(temp_ptr1 + 0xc);\n            *(uint *)(temp_ptr1 + difference + 4) = *(uint *)(temp_ptr1 + difference + 4) | 1;\n            *(int *)(index + 0xc) = index;\n            *(int *)(index + 8) = index;\n            FUNC_00081f98(output_pointer);\n            return (int *)(temp_ptr1 + 8);\n          }\n        }\n        aligned_size = aligned_size + 1;\n        temp_ptr_2 = temp_ptr_2 + 2;\n      } while ((aligned_size & 3) != 0);\n      do {\n        difference = index & 3;\n        temp_ptr1 = (undefined *)(ptr_value4 + -2);\n        index = index - 1;\n        if (difference == 0) {\n          relocation_array[141].r_offset = relocation_array[141].r_offset & ~mask;\n          break;\n        }\n        ptr_value4 = (dword *)*ptr_value4;\n      } while (ptr_value4 == (dword *)temp_ptr1);\n      mask = mask * 2;\n      if ((relocation_array[141].r_offset <= mask &&\n           mask - relocation_array[141].r_offset != 0) || (index = aligned_size, mask == 0))\n      break;\n      for (; (relocation_array[141].r_offset & mask) == 0; mask = mask << 1) {\n        index = index + 4;\n      }\n    } while( true );\n  }\n  index = *(uint *)(relocation_array[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size <= index) &&\n     (mask = index - aligned_size, current_offset = relocation_array[141].r_info, 0xf < (int)mask))\n  goto LAB_00081b1a;\n  mask = relocation_array[141].r_info + index;\n  if (relocation_array[270].r_offset == 0xffffffff) {\n    aligned_size = aligned_size + DAT_20071218 + 0x10;\n  }\n  else {\n    aligned_size = aligned_size + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  current_offset = calculate_sum_and_store_if_valid_0008236c(output_pointer,aligned_size);\n  if ((current_offset == 0xffffffff) || ((current_offset < mask && (rel_info != 0x20070464)))) {\n    index = *(uint *)(relocation_array[141].r_info + 4) & 0xfffffffc;\n    current_offset = relocation_array[141].r_info;\n  }\n  else {\n    difference = DAT_2007121c + aligned_size;\n    DAT_2007121c = difference;\n    if ((mask == current_offset) && ((mask & 0xfff) == 0)) {\n      *(uint *)(relocation_array[141].r_info + 4) = aligned_size + index | 1;\n    }\n    else {\n      temp_ptr2 = current_offset;\n      if (relocation_array[270].r_offset != 0xffffffff) {\n        temp_ptr2 = relocation_array[270].r_offset;\n        DAT_2007121c = difference + (current_offset - mask);\n      }\n      relocation_array[270].r_offset = temp_ptr2;\n      mask = current_offset & 7;\n      if (mask == 0) {\n        index = 0x1000;\n      }\n      else {\n        current_offset = current_offset + (8 - mask);\n        index = 0x1008 - mask;\n      }\n      index = index - (aligned_size + current_offset & 0xfff);\n      index = calculate_sum_and_store_if_valid_0008236c(output_pointer,index);\n      if (index == -1) {\n        mask = 1;\n        index = 0;\n      }\n      else {\n        mask = (index - current_offset) + index | 1;\n      }\n      difference = DAT_2007121c + index;\n      relocation_array[141].r_info = current_offset;\n      DAT_2007121c = difference;\n      *(uint *)(current_offset + 4) = mask;\n      if (rel_info != 0x20070464) {\n        if (index < 0x10) {\n          *(undefined4 *)(current_offset + 4) = 1;\n          index = 0;\n          goto LAB_00081b04;\n        }\n        index = index - 0xc & 0xfffffff8;\n        *(uint *)(rel_info + 4) = index | *(uint *)(rel_info + 4) & 1;\n        *(undefined4 *)(rel_info + index + 4) = 5;\n        *(undefined4 *)(rel_info + index + 8) = 5;\n        if (0xf < index) {\n          reverse_and_update_memory_offset_00083b10(output_pointer,rel_info + 8);\n          difference = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < difference) {\n      DAT_20071214 = difference;\n    }\n    if (DAT_20071210 < difference) {\n      DAT_20071210 = difference;\n    }\n    index = *(uint *)(relocation_array[141].r_info + 4) & 0xfffffffc;\n    current_offset = relocation_array[141].r_info;\n  }\nLAB_00081b04:\n  mask = index - aligned_size;\n  if ((index < aligned_size) || ((int)mask < 0x10)) {\n    FUNC_00081f98(output_pointer);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  relocation_array[141].r_info = aligned_size + current_offset;\n  *(uint *)(current_offset + 4) = aligned_size | 1;\n  *(uint *)(relocation_array[141].r_info + 4) = mask | 1;\n  FUNC_00081f98(output_pointer);\n  return (int *)(current_offset + 8);\n}\n\n",
            "current_name": "allocate_memory_and_link_00081810",
            "entrypoint": "0x00081810",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00081810": "allocate_memory_and_link_00081810",
                "LAB_00081876": "return_zero",
                "dVar1": "rel_info",
                "dVar11": "temp_ptr2",
                "dVar12": "temp_ptr3",
                "dVar17": "d_var17",
                "dVar7": "current_offset",
                "iVar13": "index",
                "iVar2": "index",
                "iVar5": "temp_var_1",
                "iVar9": "temp9",
                "param_1": "output_pointer",
                "param_2": "size",
                "pdVar14": "temp_ptr_2",
                "pdVar17": "ptr_value4",
                "puVar10": "temp_ptr1",
                "puVar16": "temp_ptr_3",
                "uVar15": "aligned_size",
                "uVar18": "index",
                "uVar3": "mask",
                "uVar4": "aligned_size",
                "uVar6": "difference",
                "uVar8": "temp8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d48": {
            "additional_data": {
                "FUN_00081d48": {
                    "copy_data": 6,
                    "copy_memory": 23,
                    "memcpy_chunk": 1,
                    "memcpy_with_alignment_check": 1
                },
                "LAB_00081dcc": {
                    "copy_remainder": 1,
                    "copy_remaining": 1
                },
                "bVar6": {
                    "flag": 1,
                    "is_copy_possible": 1,
                    "is_greater_than_zero": 1,
                    "is_inner_loop_size_valid": 1,
                    "is_inner_size_greater_than_zero": 1,
                    "is_looping": 3,
                    "is_remaining": 4,
                    "is_remaining_length_non_zero": 1,
                    "is_remaining_size_multiple_of_16": 1,
                    "is_remaining_size_valid": 1,
                    "is_size_zero": 1,
                    "is_valid": 2,
                    "loop": 1,
                    "loop_condition": 9,
                    "temp_bool": 1
                },
                "param_1": {
                    "dest": 11,
                    "dest_ptr": 1,
                    "destination": 19
                },
                "param_2": {
                    "source": 19,
                    "src": 11,
                    "src_ptr": 1
                },
                "param_3": {
                    "length": 7,
                    "size": 24
                },
                "puVar1": {
                    "dest_iter": 1,
                    "dest_ptr": 21,
                    "dest_ptr_temp": 1,
                    "dst_ptr": 5,
                    "temp1": 1
                },
                "puVar2": {
                    "dest": 2,
                    "dest_end": 3,
                    "dest_end_ptr": 6,
                    "dest_iter": 2,
                    "dest_ptr": 2,
                    "dest_ptr2": 1,
                    "dest_ptr_aligned": 1,
                    "dest_ptr_incremented": 1,
                    "dest_ptr_next": 1,
                    "dest_start": 1,
                    "dst": 1,
                    "dst_ptr_end": 1,
                    "dst_ptr_tmp": 1,
                    "src_ptr": 6
                },
                "puVar3": {
                    "dest_4_ptr": 1,
                    "dest_ptr_update": 1,
                    "dest_temp": 1,
                    "new_dest_ptr": 1,
                    "source_ptr": 1,
                    "src": 1,
                    "src_iter": 3,
                    "src_ptr": 15,
                    "src_ptr_temp": 1,
                    "temp_dest_ptr": 1,
                    "temp_ptr": 3
                },
                "puVar4": {
                    "temp2": 1
                },
                "uVar4": {
                    "bytes_to_copy": 1,
                    "copy_count": 1,
                    "count": 1,
                    "remainder": 1,
                    "remaining_length": 5,
                    "remaining_size": 15,
                    "size_aligned": 1,
                    "size_copy": 1,
                    "size_temp": 1,
                    "temp_size": 2
                },
                "uVar5": {
                    "copy_length": 1,
                    "copy_size": 2,
                    "inner_loop_length": 1,
                    "inner_loop_size": 1,
                    "inner_size": 1,
                    "loop_counter": 1,
                    "partial_size": 1,
                    "remaining": 2,
                    "remaining_bytes": 1,
                    "remaining_size": 1,
                    "remaining_size2": 1,
                    "remaining_size_copy": 1,
                    "remaining_size_loop": 1,
                    "remaining_size_minus4": 1,
                    "remaining_size_mod16": 1,
                    "size_temp": 1,
                    "size_temp2": 1,
                    "temp_length": 2,
                    "temp_size": 2,
                    "temp_size_2": 1,
                    "temp_size_remaining": 1,
                    "unaligned_size": 1,
                    "unroll_size": 1,
                    "unrolled_length": 1,
                    "unrolled_size": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00083ca8"
            ],
            "code": "\nundefined4 * copy_memory_00081d48(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint remaining;\n  bool loop_condition;\n  \n  src_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      remaining = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = src_ptr;\n          loop_condition = remaining != 0;\n          remaining = remaining - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          src_ptr = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto copy_remaining;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      remaining = 4 - ((uint)destination & 3);\n      size = size - remaining;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      src_ptr = dest_ptr;\n      source = src_ptr;\n      if ((remaining & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        src_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *src_ptr = *source;\n    src_ptr[1] = source[1];\n    src_ptr[2] = source[2];\n    src_ptr[3] = source[3];\n    src_ptr[4] = source[4];\n    src_ptr[5] = source[5];\n    src_ptr[6] = source[6];\n    src_ptr[7] = source[7];\n    src_ptr[8] = source[8];\n    src_ptr[9] = source[9];\n    src_ptr[10] = source[10];\n    src_ptr[0xb] = source[0xb];\n    src_ptr[0xc] = source[0xc];\n    src_ptr[0xd] = source[0xd];\n    src_ptr[0xe] = source[0xe];\n    src_ptr[0xf] = source[0xf];\n    src_ptr = src_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *src_ptr = *source;\n      src_ptr[1] = source[1];\n      src_ptr[2] = source[2];\n      src_ptr[3] = source[3];\n      src_ptr = src_ptr + 4;\n      source = source + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  remaining = remaining_size + 0xc;\n  src_ptr = src_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < remaining;\n      remaining = remaining - 4;\n      src_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (loop_condition);\n  }\ncopy_remaining:\n  if (remaining + 4 != 0) {\n    dest_ptr = src_ptr;\n    src_ptr = source;\n    if ((remaining & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)src_ptr + 1);\n      *(undefined *)src_ptr = *(undefined *)source;\n    }\n    if ((remaining + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "current_name": "copy_memory_00081d48",
            "entrypoint": "0x00081d48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "LAB_00081dcc": "copy_remaining",
                "bVar6": "loop_condition",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "remaining"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081e34": {
            "additional_data": {
                "FUN_00081e34": {
                    "copy_memory": 18,
                    "copy_reverse": 1,
                    "reverse_copy": 8,
                    "reverse_copy_memory": 3,
                    "reverse_memory_blocks": 1
                },
                "iVar1": {
                    "count": 3,
                    "counter": 1,
                    "i": 3,
                    "idx": 1,
                    "index": 16,
                    "iteration": 2,
                    "loop_counter": 2,
                    "remaining_size": 1,
                    "temp_counter": 1
                },
                "param_1": {
                    "dest": 16,
                    "destination": 14,
                    "source": 1
                },
                "param_2": {
                    "destination": 1,
                    "source": 14,
                    "src": 16
                },
                "param_3": {
                    "length": 12,
                    "size": 19
                },
                "puVar2": {
                    "dest_pointer": 2,
                    "dest_ptr": 21,
                    "dest_ptr1": 1,
                    "dest_ptr2": 1,
                    "dest_tmp": 1,
                    "destination_ptr": 1,
                    "src_ptr": 1,
                    "temp_dest_ptr": 1,
                    "temp_ptr": 1
                },
                "puVar3": {
                    "dst_ptr": 1,
                    "source_ptr": 1,
                    "src_pointer": 2,
                    "src_ptr": 25,
                    "src_tmp": 1
                },
                "puVar4": {
                    "copy_end": 1,
                    "copy_end_ptr": 1,
                    "copy_ptr": 4,
                    "dest_end": 8,
                    "dest_end_ptr": 1,
                    "dest_ptr": 2,
                    "end_dest_ptr": 1,
                    "src_end": 1,
                    "temp_dest_ptr": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 6,
                    "tmp_ptr": 2
                },
                "puVar5": {
                    "src_ptr1": 1
                },
                "puVar6": {
                    "copy_addr": 1,
                    "copy_end": 1,
                    "copy_end_ptr": 1,
                    "copy_ptr": 1,
                    "data_ptr": 1,
                    "dest_byte": 1,
                    "dest_byte_ptr": 2,
                    "dest_char": 1,
                    "dest_end": 3,
                    "dest_end_ptr": 1,
                    "dest_ptr": 2,
                    "end_ptr": 2,
                    "end_src_ptr": 1,
                    "src_end": 1,
                    "temp": 1,
                    "temp_byte": 3,
                    "temp_char": 1,
                    "temp_char_ptr": 1,
                    "temp_dest": 1,
                    "temp_pointer2": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 1,
                    "temp_src_ptr": 1
                },
                "puVar7": {
                    "src_byte_ptr": 1
                },
                "uVar5": {
                    "copy_count": 1,
                    "copy_length": 2,
                    "copy_size": 1,
                    "count": 3,
                    "num_chunks": 1,
                    "offset": 1,
                    "rem_size": 1,
                    "remaining": 2,
                    "remaining_length": 3,
                    "remaining_size": 4,
                    "src_byte_ptr": 1,
                    "temp": 2,
                    "temp_length": 2,
                    "temp_size": 5,
                    "temp_var": 1
                },
                "uVar7": {
                    "copy_remaining": 1,
                    "copy_size": 2,
                    "extra_bytes": 1,
                    "extra_length": 1,
                    "mod_size": 2,
                    "rem_bytes": 1,
                    "remainder": 5,
                    "remaining": 1,
                    "remaining_bytes": 2,
                    "remaining_length": 2,
                    "remaining_length2": 1,
                    "remaining_size": 5,
                    "remaining_size1": 1,
                    "temp_remaining": 1,
                    "temp_var2": 1,
                    "unaligned_len": 1
                },
                "uVar8": {
                    "copy_offset": 1
                },
                "uVar9": {
                    "copy_loop_count": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8"
            ],
            "code": "\nvoid reverse_copy_memory_00081e34(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *dest_end;\n  uint temp_size;\n  undefined *temp_byte;\n  uint remaining_size;\n  \n  if ((src < dest) && (dest_end = (undefined4 *)((int)src + size), dest < dest_end)) {\n    temp_byte = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        dest_end = (undefined4 *)((int)dest_end + -1);\n        index = index + -1;\n        temp_byte = temp_byte + -1;\n        *temp_byte = *(undefined *)dest_end;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    dest_end = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = dest_end + 4;\n      *dest_end = *src_ptr;\n      dest_end[1] = src_ptr[1];\n      dest_end[2] = src_ptr[2];\n      dest_end[3] = src_ptr[3];\n      dest_end = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remaining_size = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    temp_size = remaining_size;\n    dest_end = dest;\n    src_ptr = src;\n    if (3 < remaining_size) {\n      do {\n        temp_size = temp_size - 4;\n        *dest_end = *src_ptr;\n        dest_end = dest_end + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < temp_size);\n      index = (remaining_size - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remaining_size = size & 3;\n    }\n    size = remaining_size;\n    if (size == 0) {\n      return;\n    }\n  }\n  dest_end = dest;\n  do {\n    src_ptr = (undefined4 *)((int)dest_end + 1);\n    *(undefined *)dest_end = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    dest_end = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "current_name": "reverse_copy_memory_00081e34",
            "entrypoint": "0x00081e34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081e34": "reverse_copy_memory_00081e34",
                "iVar1": "index",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "dest_end",
                "puVar6": "temp_byte",
                "uVar5": "temp_size",
                "uVar7": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081f00": {
            "additional_data": {
                "CONCAT11": {
                    "concat_11": 1
                },
                "CONCAT22": {
                    "concat_22": 1
                },
                "FUN_00081f00": {
                    "copy_and_fill": 1,
                    "copy_and_fill_buffer": 1,
                    "copy_byte_to_memory": 1,
                    "fill_array_with_byte": 1,
                    "fill_buffer": 3,
                    "fill_buffer_with_byte": 1,
                    "fill_memory": 7,
                    "fill_memory_range": 1,
                    "fill_memory_with_byte": 4,
                    "memset": 8,
                    "memset_function": 1,
                    "memset_with_value": 1,
                    "write_bytes": 1
                },
                "LAB_00081f7c": {
                    "end_loop": 1,
                    "finalize_loop": 1
                },
                "bVar5": {
                    "continue_looping": 1,
                    "exit_loop": 1,
                    "is_count_zero": 1,
                    "is_empty": 3,
                    "is_finished": 1,
                    "is_length_zero": 2,
                    "is_num_bytes_zero": 1,
                    "is_size_zero": 4,
                    "is_zero": 9,
                    "is_zero_count": 2,
                    "is_zero_size": 4
                },
                "param_1": {
                    "array": 1,
                    "buffer": 8,
                    "dest": 12,
                    "dest_ptr": 1,
                    "destination": 8,
                    "memory": 1
                },
                "param_2": {
                    "byte": 2,
                    "byte_to_fill": 2,
                    "byte_value": 3,
                    "pattern": 2,
                    "value": 22
                },
                "param_3": {
                    "array_size": 1,
                    "byte_count": 1,
                    "count": 4,
                    "length": 5,
                    "num": 1,
                    "num_bytes": 1,
                    "size": 18
                },
                "puVar1": {
                    "buffer_ptr": 2,
                    "current": 2,
                    "current_address": 1,
                    "current_pointer": 1,
                    "dest": 1,
                    "dest_pointer": 1,
                    "dest_ptr": 18,
                    "dst": 1,
                    "p_dest": 1,
                    "pointer": 1
                },
                "puVar2": {
                    "next": 2,
                    "next_address": 1,
                    "next_buffer_ptr": 1,
                    "next_dest": 1,
                    "next_dest_ptr": 12,
                    "next_pointer": 2,
                    "next_ptr": 2,
                    "p_next_dest": 1,
                    "temp": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 5
                },
                "uVar3": {
                    "byte_pattern": 1,
                    "combined_byte": 1,
                    "current_byte_value": 1,
                    "double_value": 1,
                    "fill_value": 2,
                    "filled_value": 1,
                    "masked_value": 1,
                    "new_value": 1,
                    "packed_value": 1,
                    "pattern": 5,
                    "pattern32": 2,
                    "value32": 5,
                    "value_32": 2,
                    "value_32bit": 2,
                    "value_block": 1,
                    "value_concat": 1,
                    "word_value": 1
                },
                "uVar4": {
                    "bytes_remaining": 1,
                    "len_32": 1,
                    "remainder": 1,
                    "remaining": 1,
                    "remaining_bytes": 1,
                    "remaining_count": 5,
                    "remaining_length": 3,
                    "remaining_size": 13,
                    "temp": 1,
                    "temp_size": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_000811b0",
                "FUN_00083888"
            ],
            "code": "\nvoid fill_memory_with_byte_00081f00(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 value32;\n  uint remaining_size;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    is_zero = size == 0;\n    dest_ptr = dest;\n    size = size - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = size == 0;\n      dest_ptr = dest;\n      size = size - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value32 = concat_22(concat_11(value,value),concat_11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = value32;\n        dest_ptr[1] = value32;\n        dest_ptr[2] = value32;\n        dest_ptr[3] = value32;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto end_loop;\n    }\n    do {\n      size = size - 4;\n      *dest = value32;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nend_loop:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_with_byte_00081f00",
            "entrypoint": "0x00081f00",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT11": "concat_11",
                "CONCAT22": "concat_22",
                "FUN_00081f00": "fill_memory_with_byte_00081f00",
                "LAB_00081f7c": "end_loop",
                "bVar5": "is_zero",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "value32",
                "uVar4": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081f94": {
            "called": [],
            "calling": [
                "FUN_00083a74",
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081810"
            ],
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00081f94",
            "entrypoint": "0x00081f94",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00081f98": {
            "called": [],
            "calling": [
                "FUN_00083a74",
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081810"
            ],
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00081f98",
            "entrypoint": "0x00081f98",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00081f9c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "array_of_elf_relocations": 1,
                    "rel_array": 3,
                    "relocation_array": 7
                },
                "FUN_00081f9c": {
                    "allocate_and_link": 1,
                    "allocate_and_link_memory": 27,
                    "allocate_memory_and_link": 2,
                    "link_and_allocate_memory": 1
                },
                "param_1": {
                    "arg1": 2,
                    "data_1": 1,
                    "input_param": 1,
                    "input_param_1": 1,
                    "mem_address": 1,
                    "memory_address": 4,
                    "memory_block_size": 1,
                    "memory_offset": 2,
                    "memory_pointer": 1,
                    "memory_size": 1,
                    "new_param": 1,
                    "offset": 9,
                    "param_1": 1,
                    "param_size": 1,
                    "r_offset": 1,
                    "size": 2,
                    "value_1": 1
                },
                "param_2": {
                    "arg1": 2,
                    "arg2": 2,
                    "data": 1,
                    "data_2": 1,
                    "input_param_2": 1,
                    "link_param": 1,
                    "new_param2": 1,
                    "output_param": 1,
                    "param": 9,
                    "param_2": 4,
                    "param_3": 1,
                    "param_value": 2,
                    "parameter_2": 1,
                    "size": 2,
                    "value_2": 1,
                    "value_to_allocate": 1
                }
            },
            "called": [
                "FUN_00081fac"
            ],
            "calling": [
                "FUN_00081496"
            ],
            "code": "\nvoid link_and_allocate_memory_00081f9c(undefined4 offset,undefined4 param)\n\n{\n  allocate_memory_and_link_00081fac(relocation_array[140].r_offset,offset,param);\n  return;\n}\n\n",
            "current_name": "link_and_allocate_memory_00081f9c",
            "entrypoint": "0x00081f9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00081f9c": "link_and_allocate_memory_00081f9c",
                "param_1": "offset",
                "param_2": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081fac": {
            "additional_data": {
                "141": {
                    "index": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "array_address": 1,
                    "elf32_rel_array": 1,
                    "rel_array": 2,
                    "some_array": 1
                },
                "FUNC_00081f94": {
                    "function1": 2
                },
                "FUNC_00081f98": {
                    "function2": 2
                },
                "FUN_00081fac": {
                    "allocate_and_link_memory": 23,
                    "allocate_memory_and_link": 1,
                    "allocate_or_modify_memory": 1,
                    "allocate_or_resize_memory": 1,
                    "allocate_or_update_memory": 4
                },
                "LAB_00082078": {
                    "label1": 2
                },
                "allocate_memory_and_link_00081810": {
                    "allocate_memory_and_link": 2
                },
                "dVar1": {
                    "address_1": 1,
                    "d_word_value": 1,
                    "dword_value": 1,
                    "dword_var": 2,
                    "dword_variable": 1,
                    "dynamic_var_1": 1,
                    "first_dword": 1,
                    "memory_offset": 1,
                    "offset": 2,
                    "rel_dual_use_addr": 1,
                    "relative_value": 1,
                    "temp": 2,
                    "temp1": 2,
                    "temp_1": 1,
                    "temp_d_var": 2,
                    "temp_d_var1": 1,
                    "temp_data": 1,
                    "temp_dword": 2,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "tmp_d_var": 1,
                    "tmp_var5": 1,
                    "var_7": 1
                },
                "iVar4": {
                    "i_var4": 1,
                    "int_variable_1": 1,
                    "integer1": 1,
                    "temp2": 2,
                    "temp3": 2,
                    "temp_3": 1,
                    "temp_i_var": 1,
                    "temp_i_var1": 1,
                    "temp_i_var4": 1,
                    "temp_int_1": 2,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var3": 2,
                    "temp_var_1": 3,
                    "temp_var_2": 3,
                    "temp_var_3": 1,
                    "tmp_i_var": 1,
                    "tmp_var1": 2,
                    "value_2": 1,
                    "var4": 3
                },
                "iVar6": {
                    "int_variable_2": 1,
                    "integer2": 1,
                    "next_offset": 1,
                    "temp4": 2,
                    "temp5": 2,
                    "temp_5": 1,
                    "temp_i_var2": 2,
                    "temp_i_var6": 1,
                    "temp_int_2": 2,
                    "temp_var2": 2,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var_2": 2,
                    "temp_var_3": 3,
                    "temp_var_5": 1,
                    "tmp_i_var2": 1,
                    "tmp_var2": 2,
                    "value_4": 1,
                    "var6": 3,
                    "var_2": 1
                },
                "param_1": {
                    "config_ptr": 1,
                    "function_param": 1,
                    "input_array": 2,
                    "input_param": 2,
                    "input_ptr": 1,
                    "memory_block": 1,
                    "memory_ptr": 4,
                    "param": 1,
                    "param1": 1,
                    "param_1": 1,
                    "param_address": 1,
                    "param_array": 1,
                    "param_input": 1,
                    "param_memory": 1,
                    "param_pointer": 2,
                    "param_ptr": 7,
                    "param_source": 1,
                    "parameter_list": 1,
                    "pointer_to_initialization_data": 1
                },
                "param_2": {
                    "buffer": 1,
                    "buffer_ptr": 1,
                    "data_ptr": 2,
                    "existing_array": 1,
                    "existing_memory": 11,
                    "input_array": 1,
                    "input_buffer": 1,
                    "input_memory": 1,
                    "mem_array": 1,
                    "memory_ptr": 2,
                    "old_memory": 2,
                    "old_memory_ptr": 1,
                    "param2": 1,
                    "param_2": 1,
                    "param_dest": 1,
                    "param_existing_memory": 1,
                    "pointer_to_existing_memory": 1,
                    "ptr": 1
                },
                "param_3": {
                    "array_length": 1,
                    "array_size": 1,
                    "buffer_length": 1,
                    "buffer_size": 2,
                    "bytes_needed": 1,
                    "data_size": 2,
                    "memory_size": 3,
                    "new_memory_size": 2,
                    "new_size": 1,
                    "param3": 1,
                    "param_3": 1,
                    "param_requested_size": 1,
                    "required_size": 2,
                    "size": 11,
                    "size_of_new_memory": 1
                },
                "piVar10": {
                    "allocated_buffer_ptr": 1,
                    "existing_memory_minus_2": 1,
                    "new_array_ptr": 1,
                    "new_buffer2": 1,
                    "new_buffer_ptr": 1,
                    "new_memory": 1,
                    "new_memory_pointer": 1,
                    "new_ptr2": 1,
                    "pointer2": 1,
                    "result_ptr": 2,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_9": 1,
                    "temp_pi_var10": 1,
                    "temp_pointer2": 1,
                    "temp_pointer_2": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 1,
                    "temp_ptr_2": 3,
                    "temp_var7": 1,
                    "temp_var_4": 2,
                    "temp_var_9": 1,
                    "tmp_ptr2": 1,
                    "tmp_var4": 1,
                    "var10": 2,
                    "var_6": 1
                },
                "piVar2": {
                    "buffer_start": 1,
                    "new_array": 2,
                    "new_buffer": 1,
                    "new_memory": 11,
                    "new_memory_block": 1,
                    "new_memory_ptr": 3,
                    "new_pointer": 1,
                    "new_ptr": 1,
                    "result": 5,
                    "result_ptr": 5
                },
                "piVar7": {
                    "dest_ptr": 1,
                    "int_pointer": 1,
                    "new_buffer_ptr": 1,
                    "pi_var7": 1,
                    "pointer1": 1,
                    "temp5": 1,
                    "temp6": 2,
                    "temp_6": 1,
                    "temp_array_ptr": 1,
                    "temp_buffer_ptr": 1,
                    "temp_pi_var7": 1,
                    "temp_pointer": 1,
                    "temp_pointer_1": 1,
                    "temp_ptr": 2,
                    "temp_ptr1": 1,
                    "temp_ptr_1": 3,
                    "temp_val": 1,
                    "temp_var6": 1,
                    "temp_var_3": 2,
                    "temp_var_6": 1,
                    "tmp_ptr": 2,
                    "tmp_var3": 1,
                    "var7": 2,
                    "var_3": 1
                },
                "reverse_and_update_memory_offset_00083b10": {
                    "reverse_and_update_memory_offset": 1,
                    "reverse_and_update_offset": 1
                },
                "reverse_copy_memory_00081e34": {
                    "reverse_and_copy_memory": 1,
                    "reverse_copy_memory": 1
                },
                "temp1": {
                    "temp1": 1
                },
                "temp2": {
                    "temp2": 1
                },
                "temp3": {
                    "temp3": 1
                },
                "temp4": {
                    "temp4": 1
                },
                "temp5": {
                    "temp5": 1
                },
                "temp6": {
                    "temp6": 1
                },
                "uVar3": {
                    "align_size": 1,
                    "offset_difference": 1,
                    "offset_temp": 1,
                    "pointer_value": 1,
                    "rel_dual_use_size": 1,
                    "remainder": 1,
                    "remaining_size": 1,
                    "size_alignment": 1,
                    "size_diff": 1,
                    "start_offset": 1,
                    "temp1": 2,
                    "temp2": 2,
                    "temp_2": 1,
                    "temp_u_var": 1,
                    "temp_u_var1": 1,
                    "temp_u_var3": 1,
                    "temp_uint_1": 2,
                    "temp_var": 1,
                    "temp_var2": 2,
                    "temp_var_1": 3,
                    "temp_var_2": 1,
                    "tmp_u_var": 1,
                    "uint_variable": 1,
                    "value_1": 1,
                    "var3": 1
                },
                "uVar5": {
                    "buffer_size": 1,
                    "buffer_size_aligned": 1,
                    "buffer_size_flag": 1,
                    "data_size_temp": 1,
                    "existing_array_size": 1,
                    "existing_memory_size": 1,
                    "existing_memory_value": 1,
                    "existing_size": 1,
                    "flags": 1,
                    "original_array_length": 1,
                    "original_size": 2,
                    "original_size_flag": 1,
                    "size_var": 1,
                    "temp3": 2,
                    "temp4": 2,
                    "temp_4": 1,
                    "temp_uint_2": 2,
                    "temp_var4": 1,
                    "temp_var_2": 1,
                    "temp_var_4": 1,
                    "u_var2": 1,
                    "u_var5": 1,
                    "uint_variable_2": 1,
                    "unsigned_value1": 1,
                    "value_3": 1,
                    "var5": 1,
                    "var_1": 1
                },
                "uVar8": {
                    "adjusted_size": 1,
                    "adjusted_value_1": 1,
                    "aligned_buffer_size": 2,
                    "available_size": 1,
                    "end_offset": 1,
                    "existing_memory_size": 1,
                    "new_array_length": 1,
                    "new_array_size": 1,
                    "new_memory_size": 2,
                    "new_size": 3,
                    "new_size_aligned": 1,
                    "remaining_size": 1,
                    "size_temp": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp_7": 1,
                    "temp_uint_3": 2,
                    "temp_var_7": 1,
                    "total_size": 1,
                    "u_var8": 1,
                    "uint_variable_3": 1,
                    "unsigned_value2": 1,
                    "updated_size": 2,
                    "var8": 1,
                    "var_4": 1
                },
                "uVar9": {
                    "adjusted_memory_size": 1,
                    "adjusted_size": 1,
                    "adjusted_value_2": 1,
                    "aligned_buffer_length": 1,
                    "aligned_bytes_needed": 1,
                    "aligned_length": 1,
                    "aligned_size": 8,
                    "buffer_size_rounded": 1,
                    "new_size": 1,
                    "new_size2": 1,
                    "rel_dual_use_size_aligned": 1,
                    "rounded_size": 1,
                    "size_aligned": 1,
                    "temp7": 1,
                    "temp8": 1,
                    "temp_8": 1,
                    "temp_uint_4": 2,
                    "temp_var_8": 1,
                    "u_var9": 1,
                    "uint_variable_4": 1,
                    "unsigned_value3": 1,
                    "var9": 1,
                    "var_5": 1
                }
            },
            "called": [
                "FUN_00081f94",
                "FUN_00083b10",
                "FUN_00081e34",
                "FUN_00081f98",
                "FUN_00081810"
            ],
            "calling": [
                "FUN_00081f9c",
                "FUN_00083ca8"
            ],
            "code": "\nint * allocate_memory_and_link_00081fac(undefined4 *param_ptr,int *existing_memory,uint size)\n\n{\n  dword temp_d_var;\n  int *new_memory;\n  uint temp_var_1;\n  int var4;\n  uint original_size;\n  int temp_var_3;\n  int *temp_ptr_1;\n  uint new_size;\n  uint aligned_size;\n  int *temp_ptr_2;\n  \n  if (existing_memory == (int *)0x0) {\n    new_memory = (int *)allocate_memory_and_link_00081fac(param_ptr,size);\n    return new_memory;\n  }\n  FUNC_00081f94();\n  original_size = existing_memory[-1];\n  new_size = original_size & 0xfffffffc;\n  new_memory = existing_memory + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto label1;\n  }\n  if (aligned_size < size) {\nlabel1:\n    *param_ptr = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)new_size < (int)aligned_size) {\n    temp_d_var = (int)new_memory + new_size;\n    if (rel_array[141].r_info == temp_d_var) {\n      temp_var_1 = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n      temp_d_var = rel_array[141].r_info;\n      if ((int)(aligned_size + 0x10) <= (int)(temp_var_1 + new_size)) {\n        rel_array[141].r_info = (int)new_memory + aligned_size;\n        *(uint *)(rel_array[141].r_info + 4) = (temp_var_1 + new_size) - aligned_size | 1;\n        existing_memory[-1] = aligned_size | existing_memory[-1] & 1U;\n        FUNC_00081f98(param_ptr);\n        return existing_memory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_d_var + 4) & 0xfffffffe) + temp_d_var + 4) & 1) == 0) {\n      temp_var_1 = *(uint *)(temp_d_var + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp_var_1 + new_size)) {\n        temp_var_3 = *(int *)(temp_d_var + 0xc);\n        var4 = *(int *)(temp_d_var + 8);\n        *(int *)(var4 + 0xc) = temp_var_3;\n        *(int *)(temp_var_3 + 8) = var4;\n        new_size = temp_var_1 + new_size;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      temp_var_1 = 0;\n      temp_d_var = 0;\n    }\n    if (-1 < (int)(original_size << 0x1f)) {\n      temp_ptr_2 = (int *)((int)new_memory - existing_memory[-2]);\n      original_size = (temp_ptr_2[1] & 0xfffffffcU) + new_size;\n      if (temp_d_var != 0) {\n        if (temp_d_var == rel_array[141].r_info) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp_var_1 + original_size)) {\n            new_memory = temp_ptr_2 + 2;\n            var4 = *new_memory;\n            temp_var_3 = temp_ptr_2[3];\n            new_size = new_size - 4;\n            *(int *)(var4 + 0xc) = temp_var_3;\n            *(int *)(temp_var_3 + 8) = var4;\n            if (new_size < 0x25) {\n              temp_ptr_1 = new_memory;\n              if (0x13 < new_size) {\n                temp_ptr_2[2] = *existing_memory;\n                temp_ptr_2[3] = existing_memory[1];\n                if (new_size < 0x1c) {\n                  existing_memory = existing_memory + 2;\n                  temp_ptr_1 = temp_ptr_2 + 4;\n                }\n                else {\n                  temp_ptr_2[4] = existing_memory[2];\n                  temp_ptr_2[5] = existing_memory[3];\n                  if (new_size == 0x24) {\n                    temp_ptr_2[6] = existing_memory[4];\n                    temp_ptr_1 = existing_memory + 5;\n                    existing_memory = existing_memory + 6;\n                    temp_ptr_2[7] = *temp_ptr_1;\n                    temp_ptr_1 = temp_ptr_2 + 8;\n                  }\n                  else {\n                    existing_memory = existing_memory + 4;\n                    temp_ptr_1 = temp_ptr_2 + 6;\n                  }\n                }\n              }\n              *temp_ptr_1 = *existing_memory;\n              temp_ptr_1[1] = existing_memory[1];\n              temp_ptr_1[2] = existing_memory[2];\n            }\n            else {\n              reverse_and_copy_memory(new_memory,existing_memory);\n            }\n            rel_array[141].r_info = (int)temp_ptr_2 + aligned_size;\n            *(uint *)(rel_array[141].r_info + 4) = (temp_var_1 + original_size) - aligned_size | 1;\n            temp_ptr_2[1] = aligned_size | temp_ptr_2[1] & 1U;\n            FUNC_00081f98(param_ptr);\n            return new_memory;\n          }\n        }\n        else {\n          temp_var_1 = temp_var_1 + original_size;\n          if ((int)aligned_size <= (int)temp_var_1) {\n            temp_var_3 = *(int *)(temp_d_var + 0xc);\n            var4 = *(int *)(temp_d_var + 8);\n            *(int *)(var4 + 0xc) = temp_var_3;\n            *(int *)(temp_var_3 + 8) = var4;\n            temp_ptr_1 = temp_ptr_2 + 2;\n            var4 = *temp_ptr_1;\n            temp_var_3 = temp_ptr_2[3];\n            original_size = new_size - 4;\n            *(int *)(var4 + 0xc) = temp_var_3;\n            *(int *)(temp_var_3 + 8) = var4;\n            new_size = temp_var_1;\n            if (original_size < 0x25) {\n              new_memory = temp_ptr_1;\n              if (0x13 < original_size) {\n                temp_ptr_2[2] = *existing_memory;\n                temp_ptr_2[3] = existing_memory[1];\n                if (original_size < 0x1c) {\n                  existing_memory = existing_memory + 2;\n                  new_memory = temp_ptr_2 + 4;\n                }\n                else {\n                  temp_ptr_2[4] = existing_memory[2];\n                  temp_ptr_2[5] = existing_memory[3];\n                  if (original_size == 0x24) {\n                    temp_ptr_2[6] = existing_memory[4];\n                    new_memory = existing_memory + 5;\n                    existing_memory = existing_memory + 6;\n                    temp_ptr_2[7] = *new_memory;\n                    new_memory = temp_ptr_2 + 8;\n                  }\n                  else {\n                    existing_memory = existing_memory + 4;\n                    new_memory = temp_ptr_2 + 6;\n                  }\n                }\n              }\n              *new_memory = *existing_memory;\n              new_memory[1] = existing_memory[1];\n              new_memory[2] = existing_memory[2];\n              original_size = temp_ptr_2[1];\n              new_memory = temp_ptr_2;\n              existing_memory = temp_ptr_1;\n            }\n            else {\n              reverse_and_copy_memory(temp_ptr_1,existing_memory);\n              original_size = temp_ptr_2[1];\n              new_memory = temp_ptr_2;\n              existing_memory = temp_ptr_1;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)original_size) {\n        temp_ptr_1 = temp_ptr_2 + 2;\n        var4 = *temp_ptr_1;\n        temp_var_3 = temp_ptr_2[3];\n        temp_var_1 = new_size - 4;\n        *(int *)(var4 + 0xc) = temp_var_3;\n        *(int *)(temp_var_3 + 8) = var4;\n        new_size = original_size;\n        if (temp_var_1 < 0x25) {\n          new_memory = temp_ptr_1;\n          if (0x13 < temp_var_1) {\n            temp_ptr_2[2] = *existing_memory;\n            temp_ptr_2[3] = existing_memory[1];\n            if (temp_var_1 < 0x1c) {\n              existing_memory = existing_memory + 2;\n              new_memory = temp_ptr_2 + 4;\n            }\n            else {\n              temp_ptr_2[4] = existing_memory[2];\n              temp_ptr_2[5] = existing_memory[3];\n              if (temp_var_1 == 0x24) {\n                temp_ptr_2[6] = existing_memory[4];\n                new_memory = existing_memory + 5;\n                existing_memory = existing_memory + 6;\n                temp_ptr_2[7] = *new_memory;\n                new_memory = temp_ptr_2 + 8;\n              }\n              else {\n                existing_memory = existing_memory + 4;\n                new_memory = temp_ptr_2 + 6;\n              }\n            }\n          }\n          *new_memory = *existing_memory;\n          new_memory[1] = existing_memory[1];\n          new_memory[2] = existing_memory[2];\n          original_size = temp_ptr_2[1];\n          new_memory = temp_ptr_2;\n          existing_memory = temp_ptr_1;\n        }\n        else {\n          reverse_and_copy_memory(temp_ptr_1,existing_memory);\n          original_size = temp_ptr_2[1];\n          new_memory = temp_ptr_2;\n          existing_memory = temp_ptr_1;\n        }\n        goto LAB_00082088;\n      }\n    }\n    temp_ptr_2 = (int *)allocate_memory_and_link_00081fac(param_ptr,size);\n    if (temp_ptr_2 == (int *)0x0) goto LAB_000820a0;\n    original_size = existing_memory[-1];\n    if (temp_ptr_2 + -2 != (int *)((original_size & 0xfffffffe) + (int)new_memory)) {\n      new_size = new_size - 4;\n      if (new_size < 0x25) {\n        new_memory = existing_memory;\n        temp_ptr_1 = temp_ptr_2;\n        if (0x13 < new_size) {\n          *temp_ptr_2 = *existing_memory;\n          temp_ptr_2[1] = existing_memory[1];\n          if (new_size < 0x1c) {\n            new_memory = existing_memory + 2;\n            temp_ptr_1 = temp_ptr_2 + 2;\n          }\n          else {\n            temp_ptr_2[2] = existing_memory[2];\n            temp_ptr_2[3] = existing_memory[3];\n            if (new_size == 0x24) {\n              temp_ptr_2[4] = existing_memory[4];\n              temp_ptr_2[5] = existing_memory[5];\n              new_memory = existing_memory + 6;\n              temp_ptr_1 = temp_ptr_2 + 6;\n            }\n            else {\n              new_memory = existing_memory + 4;\n              temp_ptr_1 = temp_ptr_2 + 4;\n            }\n          }\n        }\n        *temp_ptr_1 = *new_memory;\n        temp_ptr_1[1] = new_memory[1];\n        temp_ptr_1[2] = new_memory[2];\n      }\n      else {\n        reverse_and_copy_memory(temp_ptr_2,existing_memory);\n      }\n      reverse_and_update_memory_offset(param_ptr,existing_memory);\n      goto LAB_000820a0;\n    }\n    new_size = new_size + (temp_ptr_2[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  temp_var_1 = new_size - aligned_size;\n  temp_ptr_2 = existing_memory;\n  if (temp_var_1 < 0x10) {\n    new_memory[1] = original_size & 1 | new_size;\n    *(uint *)((int)new_memory + new_size + 4) = *(uint *)((int)new_memory + new_size + 4) | 1;\n  }\n  else {\n    new_memory[1] = original_size & 1 | aligned_size;\n    *(uint *)((int)new_memory + aligned_size + 4) = temp_var_1 | 1;\n    *(uint *)((int)new_memory + temp_var_1 + aligned_size + 4) = *(uint *)((int)new_memory + temp_var_1 + aligned_size + 4) | 1;\n    reverse_and_update_memory_offset(param_ptr,(int)new_memory + aligned_size + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(param_ptr);\n  return temp_ptr_2;\n}\n\n",
            "current_name": "allocate_memory_and_link_00081fac",
            "entrypoint": "0x00081fac",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081fac": "allocate_memory_and_link_00081fac",
                "LAB_00082078": "label1",
                "allocate_memory_and_link_00081810": "allocate_memory_and_link",
                "dVar1": "temp_d_var",
                "iVar4": "var4",
                "iVar6": "temp_var_3",
                "param_1": "param_ptr",
                "param_2": "existing_memory",
                "param_3": "size",
                "piVar10": "temp_ptr_2",
                "piVar2": "new_memory",
                "piVar7": "temp_ptr_1",
                "reverse_and_update_memory_offset_00083b10": "reverse_and_update_memory_offset",
                "reverse_copy_memory_00081e34": "reverse_and_copy_memory",
                "uVar3": "temp_var_1",
                "uVar5": "original_size",
                "uVar8": "new_size",
                "uVar9": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008236c": {
            "additional_data": {
                "FUN_0008236c": {
                    "calculate_and_store_sum": 16,
                    "calculate_and_update_sum": 1,
                    "calculate_sum_and_store_if_valid": 1,
                    "find_and_store_sum": 1,
                    "process_and_check_sum": 1,
                    "store_calculated_sum": 3,
                    "store_sum_and_check": 2,
                    "store_sum_if_negative": 1,
                    "store_sum_if_valid": 1,
                    "store_sum_in_param": 1,
                    "store_sum_in_pointer": 1,
                    "store_sum_value": 1,
                    "sum_maybe_store": 1
                },
                "calculate_and_store_sum_00080e88": {
                    "calculate_sum": 1
                },
                "iVar1": {
                    "calculation_result": 1,
                    "sum": 24,
                    "sum_result": 4
                },
                "param_1": {
                    "output": 3,
                    "result": 23,
                    "result_pointer": 4,
                    "result_ptr": 1
                },
                "param_2": {
                    "input": 22,
                    "input_value": 9
                }
            },
            "called": [
                "FUN_00080e88"
            ],
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "code": "\nvoid calculate_sum_and_store_if_valid_0008236c(int *result,undefined4 input)\n\n{\n  int sum;\n  \n  DAT_20071244 = 0;\n  sum = calculate_sum(input);\n  if ((sum == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "calculate_sum_and_store_if_valid_0008236c",
            "entrypoint": "0x0008236c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008236c": "calculate_sum_and_store_if_valid_0008236c",
                "calculate_and_store_sum_00080e88": "calculate_sum",
                "iVar1": "sum",
                "param_1": "result",
                "param_2": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082390": {
            "additional_data": {
                "FUN_00082390": {
                    "compare_and_return": 2,
                    "compare_and_return_difference": 1,
                    "compare_and_return_value": 1,
                    "compare_arrays": 3,
                    "compare_buffers": 3,
                    "compare_byte_arrays": 3,
                    "compare_strings": 1,
                    "compare_u_int_arrays": 4,
                    "compare_uint_arrays": 8,
                    "compare_unsigned_integers": 4,
                    "compare_words": 1
                },
                "LAB_00082410": {
                    "check_bytes": 1
                },
                "LAB_0008258e": {
                    "combine_bytes": 1
                },
                "LAB_0008259a": {
                    "combine_bytes2": 1
                },
                "LAB_0008259e": {
                    "combine_bytes3": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 3
                },
                "iVar2": {
                    "comparison_result": 1,
                    "difference": 1,
                    "result": 29
                },
                "param_1": {
                    "arr1": 2,
                    "array1": 17,
                    "buffer1": 2,
                    "buffer_1": 1,
                    "byte_array1": 1,
                    "first_array": 1,
                    "input1": 4,
                    "string1": 1,
                    "unsigned_integers1": 1,
                    "word1": 1
                },
                "param_2": {
                    "arr2": 2,
                    "array2": 17,
                    "buffer2": 2,
                    "buffer_2": 1,
                    "byte_array2": 1,
                    "input2": 4,
                    "second_array": 1,
                    "string2": 1,
                    "unsigned_integers2": 1,
                    "word2": 1
                },
                "puVar1": {
                    "p_first": 1,
                    "ptr1": 25,
                    "ptr_array1": 2,
                    "ptr_buffer_1": 1,
                    "ptr_input1": 1,
                    "ptr_word1": 1
                },
                "puVar3": {
                    "p_second": 1,
                    "ptr2": 25,
                    "ptr_array2": 2,
                    "ptr_buffer_2": 1,
                    "ptr_input2": 1,
                    "ptr_word2": 1
                },
                "puVar4": {
                    "p_temp": 1,
                    "ptr3": 24,
                    "ptr_byte": 2,
                    "ptr_temp": 2,
                    "temp_ptr": 2
                },
                "uVar10": {
                    "temp_byte": 1
                },
                "uVar11": {
                    "u_var9_fixed": 1
                },
                "uVar12": {
                    "u_var7_not_ff": 1
                },
                "uVar13": {
                    "u_var8_not0": 1
                },
                "uVar14": {
                    "shift": 1
                },
                "uVar15": {
                    "shifted_byte1": 1
                },
                "uVar16": {
                    "shifted_byte2": 1
                },
                "uVar17": {
                    "shifted_byte3": 1
                },
                "uVar18": {
                    "shifted_byte4": 1
                },
                "uVar19": {
                    "shifted_ptr1_byte": 1
                },
                "uVar20": {
                    "shifted_ptr2_byte": 1
                },
                "uVar21": {
                    "shifted_ptr2_not_ff": 1
                },
                "uVar22": {
                    "shifted_ptr1_not0": 1
                },
                "uVar23": {
                    "shifted_ptr1_not_ff": 1
                },
                "uVar24": {
                    "shifted_ptr1_not0x_ff": 1
                },
                "uVar5": {
                    "arr1_byte": 1,
                    "array1_byte": 1,
                    "buffer1_value": 1,
                    "byte1": 1,
                    "count1": 1,
                    "index": 1,
                    "len1": 4,
                    "length": 1,
                    "mask": 1,
                    "remainder": 1,
                    "remainder1": 2,
                    "remaining_bytes1": 1,
                    "temp1": 8,
                    "temp_val_1": 1,
                    "u1": 1,
                    "u_temp1": 1,
                    "val1": 2,
                    "value1": 2
                },
                "uVar6": {
                    "arr1_byte_shifted": 1,
                    "buffer2_value": 1,
                    "byte1": 4,
                    "byte2": 1,
                    "char1": 1,
                    "comp_val": 1,
                    "remainder2": 2,
                    "temp1": 1,
                    "temp2": 8,
                    "temp_val_2": 1,
                    "tmp1": 2,
                    "u2": 1,
                    "u_temp2": 1,
                    "val1": 1,
                    "val2": 2,
                    "value1": 1,
                    "value2": 1,
                    "value2_upper_byte": 1
                },
                "uVar7": {
                    "arr2_byte": 1,
                    "byte1": 1,
                    "byte2": 4,
                    "byte3": 1,
                    "char2": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 8,
                    "temp_val_3": 1,
                    "tmp2": 2,
                    "u3": 1,
                    "u_temp3": 1,
                    "val1": 1,
                    "val2": 1,
                    "val3": 1,
                    "value1": 2,
                    "value2": 1,
                    "value2_lower_byte": 1,
                    "value3": 1
                },
                "uVar8": {
                    "arr2_byte_shifted": 1,
                    "byte2": 1,
                    "byte3": 3,
                    "byte4": 1,
                    "len2": 1,
                    "temp1": 3,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 8,
                    "temp_val_4": 1,
                    "tmp3": 2,
                    "u4": 1,
                    "u_temp4": 1,
                    "u_var8": 1,
                    "val2": 1,
                    "val4": 1,
                    "value2": 2,
                    "value4": 1
                },
                "uVar9": {
                    "bitwise_and_value": 1,
                    "byte4": 3,
                    "byte5": 1,
                    "comparison_mask": 1,
                    "mask": 2,
                    "temp2": 3,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 8,
                    "temp_val": 1,
                    "temp_val_5": 1,
                    "tmp4": 2,
                    "u5": 1,
                    "u_temp5": 1,
                    "u_var9": 2,
                    "val5": 1,
                    "value5": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000815b8"
            ],
            "code": "\nint compare_uint_arrays_00082390(uint *array1,uint *array2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  \n  if ((((uint)array1 | (uint)array2) & 7) != 0) {\n    ptr1 = array1;\n    if (((uint)array1 & 3) != 0) {\n      ptr1 = (uint *)((uint)array1 & 0xfffffffc) + 1;\n      temp1 = *(uint *)((uint)array1 & 0xfffffffc);\n      ptr2 = array2;\n      if (((uint)array1 & 1) == 0) {\ncheck_bytes:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        temp2 = temp1 >> 0x10 & 0xff;\n        result = temp2 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (temp2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = array2;\n        if (((uint)array1 & 2) == 0) {\n          ptr2 = (uint *)((int)array2 + 1);\n          temp2 = temp1 >> 8 & 0xff;\n          result = temp2 - *(byte *)array2;\n          if (result != 0) {\n            return result;\n          }\n          if (temp2 == 0) {\n            return 0;\n          }\n          goto check_bytes;\n        }\n      }\n      array2 = (uint *)((int)ptr3 + 1);\n      result = (temp1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (temp1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    temp1 = (uint)array2 & 3;\n    if (temp1 != 0) {\n      array2 = (uint *)((uint)array2 & 0xfffffffc);\n      if (temp1 == 2) {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 0x10;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffff;\n          if ((temp4 & 0x8080) != 0 || temp2 != temp1) goto combine_bytes;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else if (temp1 < 2) {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 8;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xffffff;\n          if ((temp4 & 0x808080) != 0 || temp2 != temp1) goto combine_bytes;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      else {\n        temp1 = *array2;\n        do {\n          array2 = array2 + 1;\n          temp3 = *ptr1;\n          temp1 = temp1 >> 0x18;\n          temp4 = temp3 + 0xfefefeff & ~temp3;\n          temp5 = temp4 & 0x80808080;\n          temp2 = temp3 & 0xff;\n          if ((temp4 & 0x80) != 0 || temp2 != temp1) goto combine_bytes;\n          temp1 = *array2;\n          temp2 = temp2 ^ temp3;\n          temp3 = temp1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (temp5 == 0 && temp2 == temp3);\n      }\n      temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 |\n              temp2 >> 0x18;\n      temp1 = (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 | temp3 >> 0x18;\n      goto combine_bytes3;\n    }\n    array1 = ptr1;\n    ptr2 = array2;\n    if (((uint)ptr1 & 4) != 0) {\n      array1 = ptr1 + 1;\n      temp1 = *ptr1;\n      ptr2 = array2 + 1;\n      temp3 = *array2;\n      temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n      if (temp1 != temp3 || temp5 != 0) {\ncombine_bytes2:\n        temp2 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 |\n                temp1 >> 0x18;\n        temp1 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n                temp3 >> 0x18;\n        goto combine_bytes3;\n      }\n    }\n    array2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      temp1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        temp2 = *array1;\n        temp3 = array1[1];\n        temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n        if (temp2 != temp1 || temp5 != 0) goto combine_bytes;\n        temp4 = *ptr1;\n        temp1 = ptr1[1];\n        temp5 = temp3 + 0xfefefeff & ~temp3 & 0x80808080;\n        array1 = array1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (temp3 == temp4 && temp5 == 0);\n      temp2 = temp3 << 0x18 | (temp3 >> 8 & 0xff) << 0x10 | (temp3 >> 0x10 & 0xff) << 8 |\n              temp3 >> 0x18;\n      temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 |\n              temp4 >> 0x18;\n      goto combine_bytes3;\n    }\n  }\n  do {\n    temp1 = *array1;\n    temp2 = array1[1];\n    temp3 = *array2;\n    temp4 = array2[1];\n    temp5 = temp1 + 0xfefefeff & ~temp1 & 0x80808080;\n    if (temp1 != temp3 || temp5 != 0) goto combine_bytes2;\n    temp5 = temp2 + 0xfefefeff & ~temp2 & 0x80808080;\n    array1 = array1 + 2;\n    array2 = array2 + 2;\n  } while (temp2 == temp4 && temp5 == 0);\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp4 << 0x18 | (temp4 >> 8 & 0xff) << 0x10 | (temp4 >> 0x10 & 0xff) << 8 | temp4 >> 0x18;\ncombine_bytes3:\n  temp3 = temp5 << 0x18 | (temp5 >> 8 & 0xff) << 0x10 | (temp5 >> 0x10 & 0xff) << 8 | temp5 >> 0x18;\n  if (temp3 != 0) {\n    temp3 = 0x18 - leading_zero_count(temp3);\n    temp2 = temp2 >> (temp3 & 0xff);\n    temp1 = temp1 >> (temp3 & 0xff);\n  }\n  result = 1;\n  if (temp2 <= temp1) {\n    result = -(uint)(temp2 < temp1);\n  }\n  return result;\ncombine_bytes:\n  temp2 = temp2 << 0x18 | (temp2 >> 8 & 0xff) << 0x10 | (temp2 >> 0x10 & 0xff) << 8 | temp2 >> 0x18;\n  temp1 = temp1 << 0x18 | (temp1 >> 8 & 0xff) << 0x10 | (temp1 >> 0x10 & 0xff) << 8 | temp1 >> 0x18;\n  goto combine_bytes3;\n}\n\n",
            "current_name": "compare_uint_arrays_00082390",
            "entrypoint": "0x00082390",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082390": "compare_uint_arrays_00082390",
                "LAB_00082410": "check_bytes",
                "LAB_0008258e": "combine_bytes",
                "LAB_0008259a": "combine_bytes2",
                "LAB_0008259e": "combine_bytes3",
                "LZCOUNT": "leading_zero_count",
                "iVar2": "result",
                "param_1": "array1",
                "param_2": "array2",
                "puVar1": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000825cc": {
            "additional_data": {
                "FUN_000825cc": {
                    "copy_and_terminate_string": 1,
                    "copy_string": 25,
                    "copy_string_and_terminate": 1,
                    "copy_string_with_alignment": 1,
                    "copy_string_with_alignment_check": 1,
                    "copy_string_with_null": 1,
                    "copy_strings": 1
                },
                "LAB_00082630": {
                    "check_for_zero": 1,
                    "end_loop": 2
                },
                "bVar8": {
                    "check_flag": 1,
                    "is_byte_string": 1,
                    "is_char_null": 1,
                    "is_end_of_string": 2,
                    "is_null_byte": 1,
                    "is_short_zero": 3,
                    "is_single_byte": 1,
                    "is_zero": 12,
                    "is_zero_byte": 7
                },
                "cVar1": {
                    "current_byte": 1,
                    "current_char": 28
                },
                "param_1": {
                    "dest": 20,
                    "dest_string": 2,
                    "destination": 8,
                    "dst": 1
                },
                "param_2": {
                    "source": 8,
                    "src": 21,
                    "src_string": 2
                },
                "puVar3": {
                    "current_ptr": 1,
                    "next_int_p": 1,
                    "next_pointer": 2,
                    "next_ptr": 5,
                    "next_source": 2,
                    "next_src": 4,
                    "next_src_ptr": 2,
                    "next_uint_ptr": 3,
                    "next_word": 1,
                    "ptr1": 1,
                    "source_pointer": 1,
                    "src_pointer": 1,
                    "src_ptr": 3,
                    "temp1": 1,
                    "temp_pointer1": 1,
                    "temp_ptr": 2
                },
                "puVar4": {
                    "current_int_p": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "current_ptr_2": 1,
                    "dst_ptr": 1,
                    "next_byte": 1,
                    "next_char_ptr": 1,
                    "next_char_uint_ptr": 1,
                    "next_dest": 3,
                    "next_dest_ptr": 1,
                    "next_destination": 1,
                    "next_pointer": 1,
                    "next_ptr": 1,
                    "next_ptr2": 3,
                    "next_source_char": 1,
                    "next_src_byte": 1,
                    "next_uint_ptr2": 1,
                    "ptr2": 1,
                    "source_pointer2": 1,
                    "src_pointer": 1,
                    "src_ptr": 1,
                    "src_ptr2": 1,
                    "src_ptr_temp": 1,
                    "temp2": 1,
                    "temp_pointer2": 1,
                    "temp_ptr2": 2
                },
                "puVar7": {
                    "current_dest": 3,
                    "current_destination": 1,
                    "current_ptr": 1,
                    "current_u_int_ptr": 1,
                    "current_uint_ptr": 1,
                    "dest": 1,
                    "dest_pointer": 1,
                    "dest_ptr": 9,
                    "destination_pointer": 3,
                    "dst_p": 1,
                    "dst_ptr2": 1,
                    "final_pointer": 1,
                    "final_ptr": 1,
                    "next_destination": 1,
                    "next_pointer": 1,
                    "next_uint_ptr2": 2,
                    "result_ptr": 1,
                    "temp_dest": 1
                },
                "uVar2": {
                    "current_short": 28,
                    "current_u_short": 1,
                    "short_value": 1
                },
                "uVar5": {
                    "current_char": 1,
                    "current_int": 3,
                    "current_source_value": 1,
                    "current_src": 1,
                    "current_u_int": 3,
                    "current_uint": 6,
                    "current_value": 2,
                    "current_word": 12,
                    "next_u_int": 1,
                    "value": 1
                },
                "uVar6": {
                    "byte_value": 1,
                    "current_byte": 3,
                    "current_int": 1,
                    "current_int_rotated": 1,
                    "current_src_shifted": 1,
                    "current_u_int": 1,
                    "current_uint_shifted": 1,
                    "current_value_rotated": 1,
                    "current_word": 1,
                    "next_word": 1,
                    "rotated_uint": 1,
                    "shifted_uint": 1,
                    "shifted_word": 3,
                    "temp": 3,
                    "temp_u_int": 2,
                    "temp_uint": 2,
                    "temp_value": 2,
                    "temp_word": 4,
                    "tmp_char": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00081570",
                "FUN_0008151c",
                "FUN_000814d0"
            ],
            "code": "\nvoid copy_and_terminate_string_000825cc(uint *dest,uint *src)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *next_ptr;\n  uint *next_dest;\n  uint current_word;\n  uint temp_word;\n  uint *dest_ptr;\n  bool is_zero;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    next_dest = src;\n    if (((uint)src & 1) != 0) {\n      next_dest = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = next_dest;\n    if (((uint)next_dest & 2) != 0) {\n      src = (uint *)((int)next_dest + 2);\n      current_short = *(ushort *)next_dest;\n      is_zero = (current_short & 0xff) == 0;\n      if (is_zero) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        is_zero = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  current_word = *src;\n  next_dest = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto end_loop;\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    next_dest = src + 2;\n    current_word = src[1];\n  }\n  while( true ) {\n    next_ptr = next_dest + 1;\n    temp_word = *next_dest;\n    dest = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_word;\n    current_word = temp_word;\n    if ((temp_word + 0xfefefeff & ~temp_word & 0x80808080) != 0) break;\n    next_dest = next_dest + 2;\n    current_word = *next_ptr;\n    dest_ptr = dest_ptr + 2;\n    *dest = temp_word;\n  }\nend_loop:\n  do {\n    *(char *)dest = (char)current_word;\n    temp_word = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (temp_word != 0);\n  return;\n}\n\n",
            "current_name": "copy_and_terminate_string_000825cc",
            "entrypoint": "0x000825cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000825cc": "copy_and_terminate_string_000825cc",
                "LAB_00082630": "end_loop",
                "bVar8": "is_zero",
                "cVar1": "current_char",
                "param_1": "dest",
                "param_2": "src",
                "puVar3": "next_ptr",
                "puVar4": "next_dest",
                "puVar7": "dest_ptr",
                "uVar2": "current_short",
                "uVar5": "current_word",
                "uVar6": "temp_word"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082688": {
            "additional_data": {
                "DAT_0008307c": {
                    "bit_mask": 1
                },
                "DAT_0008354c": {
                    "byte_mask": 1
                },
                "FUN_00082688": {
                    "calculate_string_length": 1,
                    "count_leading_zero_bytes": 2,
                    "count_leading_zeroes": 2,
                    "count_leading_zeros": 15,
                    "count_non_zero_bytes": 1,
                    "count_trailing_zeroes": 1,
                    "count_trailing_zeros": 3,
                    "count_zero_bits": 1,
                    "find_first_nonzero_byte_index": 1,
                    "find_last_nonzero_byte_index": 1,
                    "find_non_null_byte_count": 1,
                    "find_nonzero_bytes": 1,
                    "get_length": 1
                },
                "bVar4": {
                    "has_zero": 1,
                    "has_zero_bytes": 1,
                    "is_first_byte_zero": 1,
                    "is_zero": 27,
                    "is_zero_byte": 1
                },
                "iVar1": {
                    "byte_offset": 1,
                    "count": 4,
                    "index": 2,
                    "leading_zero_bytes": 1,
                    "leading_zero_count": 1,
                    "leading_zeroes": 1,
                    "leading_zeroes_count": 1,
                    "leading_zeros": 12,
                    "leading_zeros_count": 2,
                    "length": 2,
                    "offset": 1,
                    "trailing_zero_count": 1,
                    "trailing_zeros": 2
                },
                "param_1": {
                    "data": 2,
                    "input": 22,
                    "input_string": 1,
                    "input_value": 1,
                    "num": 3,
                    "value": 2
                },
                "puVar2": {
                    "aligned_address": 1,
                    "byte_pointer": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "p_int": 1,
                    "p_num": 1,
                    "p_word": 1,
                    "ptr": 17,
                    "ptr_input": 2,
                    "word_pointer": 2,
                    "word_ptr": 2
                },
                "uVar3": {
                    "current_data": 1,
                    "current_num": 1,
                    "current_value": 1,
                    "current_word": 1,
                    "data": 1,
                    "temp_value": 1,
                    "value": 20,
                    "word": 2,
                    "word_value": 3
                },
                "uVar5": {
                    "bit_mask": 1,
                    "upper_bits_mask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008289c",
                "FUN_000810a6",
                "FUN_000814f6"
            ],
            "code": "\nint count_leading_zeros_00082688(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  bool is_zero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leading_zeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leading_zeros = leading_zeros + 4;\n    value = *ptr;\n  }\n  is_zero = (value & 0xff) == 0;\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff00) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff0000) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_leading_zeros_00082688",
            "entrypoint": "0x00082688",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082688": "count_leading_zeros_00082688",
                "bVar4": "is_zero",
                "iVar1": "leading_zeros",
                "param_1": "input",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082824": {
            "additional_data": {
                "FUN_00082824": {
                    "copy_and_process_data": 2,
                    "process_and_validate_all_data": 1,
                    "process_and_validate_data": 3,
                    "process_data": 22,
                    "process_data_and_validate": 1,
                    "process_data_func": 1,
                    "reverse_and_validate_data": 1
                },
                "iVar2": {
                    "result": 28,
                    "return_value": 3
                },
                "param_1": {
                    "arg1": 3,
                    "argument_1": 1,
                    "data": 6,
                    "data_buffer": 1,
                    "data_param": 1,
                    "data_start": 1,
                    "input": 3,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 1,
                    "param": 1,
                    "param1": 6,
                    "param_a": 1,
                    "param_value": 1,
                    "some_param": 1,
                    "source_data": 1,
                    "undefined_value": 1
                },
                "param_2": {
                    "arg2": 3,
                    "argument_2": 1,
                    "count": 1,
                    "count_param": 1,
                    "data_buffer_size": 1,
                    "data_length": 1,
                    "data_size": 3,
                    "length": 4,
                    "num_elements": 1,
                    "offset": 2,
                    "param2": 6,
                    "param_b": 1,
                    "param_index": 1,
                    "size": 5
                },
                "param_3": {
                    "arg3": 3,
                    "argument_3": 1,
                    "data": 4,
                    "data_arr_param": 1,
                    "data_array": 9,
                    "data_buffer": 1,
                    "data_list": 1,
                    "data_ptr": 3,
                    "output": 1,
                    "param3": 6,
                    "param_c": 1
                },
                "piVar1": {
                    "curr_ptr": 1,
                    "current_array": 1,
                    "current_data": 16,
                    "current_data_ptr": 3,
                    "current_element": 2,
                    "current_list_item": 1,
                    "current_pointer": 1,
                    "data": 1,
                    "data_element_ptr": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "ptr1": 1,
                    "src_ptr": 1
                },
                "piVar3": {
                    "current_array": 1,
                    "current_buffer": 1,
                    "current_chunk": 1,
                    "current_chunk_ptr": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "data_end_pointer": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "dst_ptr": 1,
                    "next_pointer": 1,
                    "ptr": 1,
                    "ptr2": 1,
                    "ptr_array": 1,
                    "remaining_data": 12,
                    "remaining_data_ptr": 3,
                    "remaining_list_items": 1,
                    "temp_data_ptr": 1
                },
                "puVar5": {
                    "current_data": 4,
                    "current_data_pointer": 1,
                    "current_data_ptr": 1,
                    "current_element": 3,
                    "current_item": 1,
                    "current_pointer": 1,
                    "current_ptr": 3,
                    "current_value": 3,
                    "data": 1,
                    "data_pointer": 1,
                    "data_ptr": 5,
                    "data_ptr_pointer": 1,
                    "data_value_ptr": 1,
                    "ptr": 2,
                    "ptr_data": 2,
                    "ptr_value": 1
                },
                "uVar4": {
                    "count": 5,
                    "counter": 9,
                    "index": 2,
                    "iteration": 4,
                    "iteration_count": 8,
                    "loop_count": 1,
                    "loop_counter": 1,
                    "loop_counter_1": 1
                },
                "uVar6": {
                    "current_data_size": 4,
                    "current_data_value": 1,
                    "current_element_info": 1,
                    "current_list_item_value": 1,
                    "current_value": 1,
                    "current_value_size": 1,
                    "data_element": 1,
                    "data_length": 1,
                    "data_offset": 1,
                    "data_size": 5,
                    "data_value": 3,
                    "element": 1,
                    "element_size": 2,
                    "item_size": 1,
                    "temp_value": 1,
                    "temp_var1": 3,
                    "value": 3
                },
                "uVar7": {
                    "chunk_count": 1,
                    "data_shifted": 1,
                    "data_size": 1,
                    "element_count": 1,
                    "item_count": 1,
                    "iteration_limit": 1,
                    "loop_counter": 1,
                    "num_elements": 2,
                    "num_iterations": 1,
                    "num_values": 1,
                    "number_of_elements": 1,
                    "shift_value": 2,
                    "shifted_data_size": 3,
                    "shifted_data_value": 2,
                    "shifted_element_info": 1,
                    "shifted_list_item_value": 1,
                    "shifted_size": 1,
                    "shifted_value": 5,
                    "temp_var2": 3,
                    "u_var7": 1
                }
            },
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint process_and_validate_all_data_00082824(undefined4 param1,int param2,int **data_array)\n\n{\n  int *current_data;\n  int result;\n  int *remaining_data;\n  uint counter;\n  undefined4 *data_ptr;\n  uint data_size;\n  uint shifted_value;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    result = process_and_copy_data_00083ca8();\n    data_array[2] = (int *)0x0;\n    data_array[1] = (int *)0x0;\n    return result;\n  }\n  remaining_data = data_array[2];\n  current_data = *data_array;\n  while (remaining_data != (int *)0x0) {\n    data_size = current_data[1];\n    shifted_value = data_size >> 2;\n    if (shifted_value != 0) {\n      data_ptr = (undefined4 *)(*current_data + -4);\n      counter = 0;\n      do {\n        data_ptr = data_ptr + 1;\n        result = process_and_validate_data_000839b4(param1,*data_ptr,param2);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (shifted_value != counter);\n      remaining_data = data_array[2];\n    }\n    remaining_data = (int *)((int)remaining_data - (data_size & 0xfffffffc));\n    data_array[2] = remaining_data;\n    current_data = current_data + 2;\n  }\n  result = 0;\nLAB_00082864:\n  data_array[2] = (int *)0x0;\n  data_array[1] = (int *)0x0;\n  return result;\n}\n\n",
            "current_name": "process_and_validate_all_data_00082824",
            "entrypoint": "0x00082824",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082824": "process_and_validate_all_data_00082824",
                "iVar2": "result",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data_array",
                "piVar1": "current_data",
                "piVar3": "remaining_data",
                "puVar5": "data_ptr",
                "uVar4": "counter",
                "uVar6": "data_size",
                "uVar7": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008289c": {
            "additional_data": {
                "FUN_0008289c": {
                    "parse_and_process_data": 1,
                    "parse_and_validate_printf_format": 1,
                    "parse_data": 1,
                    "parse_format_string": 4,
                    "parse_input": 1,
                    "process_and_validate_data": 3,
                    "process_and_validate_parameters": 1,
                    "process_data": 16,
                    "process_formatted_data": 1,
                    "process_formatted_string": 2
                },
                "bVar1": {
                    "flag1": 2,
                    "format_width_exist": 1,
                    "found_percent": 1,
                    "has_flag": 1,
                    "has_flag_plus": 1,
                    "has_length_modifier": 1,
                    "has_length_specifier": 1,
                    "has_plus_flag": 1,
                    "has_plus_sign": 1,
                    "has_sign": 2,
                    "has_width": 2,
                    "is_flag1": 1,
                    "is_left_aligned": 1,
                    "is_left_justified": 2,
                    "is_length_specifier": 1,
                    "is_long": 1,
                    "is_negative": 2,
                    "is_plus": 1,
                    "is_positive": 1,
                    "is_signed": 3,
                    "is_signed_conversion": 1,
                    "is_type1": 1,
                    "is_type_settling": 1
                },
                "bVar2": {
                    "flag2": 2,
                    "found_plus": 1,
                    "has_flag": 1,
                    "has_flag_minus": 1,
                    "has_minus_flag": 1,
                    "has_offset": 1,
                    "has_plus": 1,
                    "has_plus_sign": 1,
                    "has_precision": 1,
                    "has_width": 3,
                    "is_flag2": 1,
                    "is_float_conversion": 1,
                    "is_floating_point": 1,
                    "is_integer": 1,
                    "is_integer_specifier": 1,
                    "is_minus": 1,
                    "is_negative": 3,
                    "is_positive": 1,
                    "is_processing_data": 1,
                    "is_sign_shown": 2,
                    "is_signed": 3,
                    "is_type2": 1
                },
                "bVar26": {
                    "flag5": 2,
                    "has_minus": 1,
                    "has_width_field": 1,
                    "is_flag5": 1,
                    "is_long": 1,
                    "is_negative": 7,
                    "is_positive": 1,
                    "is_signed": 1,
                    "is_type26": 1,
                    "is_unsigned": 2,
                    "negative_sign_flag": 1,
                    "temp_bool": 1
                },
                "bVar3": {
                    "flag3": 2,
                    "found_hash": 1,
                    "has_alt": 1,
                    "has_alternate_form": 1,
                    "has_flag": 1,
                    "has_flag_hash": 1,
                    "has_hash": 3,
                    "has_hash_flag": 2,
                    "has_precision": 1,
                    "has_prefix": 1,
                    "has_sign": 1,
                    "has_specifier": 1,
                    "is_a_valid_character": 1,
                    "is_alternate": 2,
                    "is_alternate_form": 3,
                    "is_alternate_format": 1,
                    "is_alternative": 1,
                    "is_flag3": 1,
                    "is_flag_specifier": 1,
                    "is_hash": 2,
                    "is_hash_specifier": 1,
                    "is_type3": 1
                },
                "bVar5": {
                    "flag4": 2,
                    "has_flag_zero": 1,
                    "has_leading_zeroes": 1,
                    "has_leading_zeros": 1,
                    "has_length_modifier": 1,
                    "has_padding": 1,
                    "has_precision": 3,
                    "has_zero_flag": 1,
                    "is_decimal": 1,
                    "is_flag4": 1,
                    "is_formatting": 1,
                    "is_leading_zero": 2,
                    "is_negative": 1,
                    "is_padding_zero": 1,
                    "is_type5": 1,
                    "is_width_specifier": 1,
                    "is_zero_flag": 1,
                    "is_zero_pad": 1,
                    "is_zero_padded": 3,
                    "is_zero_specifier": 1,
                    "use_alternate": 1,
                    "use_leading_zeros": 1,
                    "use_zero_padding": 1,
                    "use_zeros": 1
                },
                "cStack_6a": {
                    "buffer": 1,
                    "c_stack": 1,
                    "c_stack_6a": 1,
                    "c_stack_char": 1,
                    "ch2": 1,
                    "char2": 2,
                    "char_stack": 1,
                    "digit_char": 1,
                    "extra_space_char": 1,
                    "hex_char": 1,
                    "last_char": 1,
                    "leading_zero_char": 1,
                    "local_char2": 1,
                    "small_local_buffer": 1,
                    "stack_char": 1,
                    "temp_char": 4,
                    "temp_char3": 2,
                    "temp_stack_char": 1,
                    "value_temp2": 1
                },
                "cVar26": {
                    "is_negative2": 1
                },
                "cVar4": {
                    "char_var": 2,
                    "char_var1": 1,
                    "character": 2,
                    "conversion_character": 1,
                    "current_char": 1,
                    "fill_char": 1,
                    "flag": 1,
                    "flag_char": 2,
                    "flag_specifier_value": 1,
                    "format_specifier": 1,
                    "hash_flag_char": 1,
                    "hash_symbol": 1,
                    "padding_char": 2,
                    "sign_char": 4,
                    "sign_character": 1,
                    "sign_symbol": 1,
                    "specifier": 2,
                    "temp_char": 1
                },
                "cVar9": {
                    "char1": 2,
                    "char_result": 1,
                    "char_value": 3,
                    "char_var2": 3,
                    "character2": 1,
                    "convert_character": 1,
                    "current_char": 1,
                    "digit": 1,
                    "format_specifier": 2,
                    "int_char": 1,
                    "length_modifier": 1,
                    "next_char": 1,
                    "number": 1,
                    "precision_char": 1,
                    "specifier": 1,
                    "temp_char": 7,
                    "temp_char2": 1,
                    "temp_character": 1
                },
                "ciVar8": {
                    "char_value": 1
                },
                "iVar15": {
                    "argument_index": 1,
                    "count": 1,
                    "count2": 2,
                    "counter": 3,
                    "counter1": 1,
                    "counter2": 1,
                    "i": 1,
                    "i_var15": 1,
                    "int_var2": 1,
                    "loop_index": 1,
                    "loop_variable1": 1,
                    "new_result": 1,
                    "num_processed_tokens": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp_int1": 2,
                    "temp_result": 1,
                    "temp_var": 2,
                    "temp_var2": 1,
                    "temp_var4": 2,
                    "tmp_int": 1,
                    "value2": 1,
                    "var9": 1
                },
                "iVar17": {
                    "arg_counter": 2,
                    "count": 1,
                    "count3": 1,
                    "counter2": 2,
                    "counter3": 1,
                    "i_var17": 1,
                    "int_var3": 1,
                    "loop_var": 1,
                    "loop_variable2": 1,
                    "new_result": 1,
                    "num_total_tokens": 1,
                    "result_temp": 1,
                    "start_index": 1,
                    "temp": 1,
                    "temp5": 1,
                    "temp_int2": 2,
                    "temp_result2": 1,
                    "temp_var3": 1,
                    "temp_var5": 2,
                    "tmp_int2": 1,
                    "var11": 1
                },
                "iVar8": {
                    "count": 2,
                    "counter": 1,
                    "fractional_part": 1,
                    "i_var8": 1,
                    "index": 1,
                    "int_var1": 1,
                    "result": 19,
                    "return_value": 3,
                    "value": 1,
                    "var3": 1
                },
                "lVar27": {
                    "combined": 1,
                    "combined_arg_value": 1,
                    "combined_data": 1,
                    "combined_int": 1,
                    "combined_value": 4,
                    "combined_var": 1,
                    "combined_width": 1,
                    "current_arg_value64": 1,
                    "current_value": 1,
                    "long_long_var": 1,
                    "long_var": 1,
                    "long_var1": 1,
                    "long_var27": 1,
                    "longlong1": 1,
                    "longlong_var": 1,
                    "temp7": 1,
                    "temp_long": 1,
                    "temp_long_long": 1,
                    "temp_long_value": 1,
                    "temp_value3": 1,
                    "value_to_print": 1
                },
                "local_63": {
                    "result_ptr": 1
                },
                "local_64": {
                    "array_list": 1,
                    "format_specifier_stack": 1,
                    "formatted_data_arr": 1,
                    "large_local_buffer": 1,
                    "local_pointer_array_64": 1,
                    "local_ptr_arr2": 1,
                    "pointer_list2": 1,
                    "temp_array": 2,
                    "temp_array2": 2,
                    "temp_buffer_array": 1,
                    "temp_pointer_array7": 1,
                    "temp_ptr_array": 1,
                    "temp_results": 1,
                    "tmp": 1,
                    "unused_array": 1
                },
                "local_68": {
                    "arg_buffer": 1,
                    "format_buffer": 2,
                    "local_68": 1,
                    "local_buffer": 1,
                    "ptr_array": 1,
                    "small_local_buffer_var": 1,
                    "stack_array": 1,
                    "temp_array": 1,
                    "temp_buffer": 1,
                    "temp_stack": 1,
                    "temp_stack_array": 1
                },
                "local_69": {
                    "b_stack": 1,
                    "buffer_char": 1,
                    "decimal_digit_char": 1,
                    "extra_space_char": 1,
                    "format_char_copy": 1,
                    "int_char3": 1,
                    "leading_space": 1,
                    "leading_zero_char2": 1,
                    "local_69": 1,
                    "local_undefined4": 1,
                    "padding_char3": 1,
                    "padding_character_flag": 1,
                    "small_local_var1": 1,
                    "temp_char": 1,
                    "temp_char2": 1,
                    "temp_char4": 1,
                    "value_temp3": 1,
                    "width_padding_char": 1
                },
                "local_70": {
                    "temp_str": 1
                },
                "local_90": {
                    "decimal_digits": 1,
                    "flag_char2": 1,
                    "flag_char_buffer": 1,
                    "format_flags": 1,
                    "hex_lowercase_string": 1,
                    "is_hexadecimal": 1,
                    "leading_zero_character": 1,
                    "local_undefined3": 1,
                    "local_var1": 1,
                    "num_buffer": 1,
                    "number_char": 1,
                    "padding_char2": 1,
                    "padding_character": 1,
                    "padding_character_ascii3": 1,
                    "specifier_char": 1,
                    "temp8": 1,
                    "temp_char2": 1,
                    "value_temp1": 1,
                    "width": 1,
                    "width_char": 1,
                    "zero_flag_char": 1
                },
                "local_94": {
                    "accumulated_data": 1,
                    "arg_data_struct": 1,
                    "arg_list": 1,
                    "data_array": 1,
                    "data_ptr": 1,
                    "format_data_pointer_temp": 1,
                    "format_data_ptr": 1,
                    "format_ptr_array_ptr": 1,
                    "format_specifiers": 1,
                    "format_str_accumulator": 1,
                    "formatted_data": 1,
                    "local_data3": 1,
                    "local_ptr_data2": 1,
                    "param_offset": 1,
                    "remaining_bytes": 1,
                    "remaining_format_ref": 1,
                    "remaining_format_specifiers": 1,
                    "remaining_format_string_pointer": 1,
                    "remaining_formats_copy": 1,
                    "temp_data_length": 1,
                    "temp_data_list": 1,
                    "temp_format_args": 1,
                    "total_data_size": 1,
                    "total_format_specifiers": 1,
                    "total_specifier_size2": 1,
                    "total_width": 1
                },
                "local_98": {
                    "arg_count": 3,
                    "arg_counter": 1,
                    "arg_counter_ref": 1,
                    "arg_index": 1,
                    "arg_ptr_count": 1,
                    "argument_count": 1,
                    "arguments_processed": 1,
                    "count": 1,
                    "counter": 1,
                    "current_item_count": 1,
                    "current_pointer_index": 1,
                    "format_count": 2,
                    "format_counter": 1,
                    "format_specifier_count": 1,
                    "local_count4": 1,
                    "local_counter2": 1,
                    "num_finished_bytes": 1,
                    "num_variables": 1,
                    "number_of_args_processed": 1,
                    "param_count": 1,
                    "pointer_array_index": 1,
                    "pointer_count": 1,
                    "specifier_count2": 1,
                    "temp_result": 1
                },
                "local_9c": {
                    "arg_format_buffer_ref": 1,
                    "arg_list_ptr": 1,
                    "arg_pointer2_list": 1,
                    "arg_ptr_list": 1,
                    "current_pointer": 1,
                    "extra_argument_list": 1,
                    "format_array": 1,
                    "format_ptr_array": 1,
                    "format_specifier": 1,
                    "format_specifier_start": 1,
                    "format_str_ptr_copy": 1,
                    "local_buffer_ptr": 1,
                    "local_ptr6": 1,
                    "local_ptr_data": 1,
                    "original_param_pointer": 1,
                    "pointer_array_temp2": 1,
                    "ppi_temp": 1,
                    "previous_format_specifier_pointer": 1,
                    "remaining_data_pointer": 1,
                    "temp": 1,
                    "temp_data_ptr2": 1,
                    "temp_pointer": 1,
                    "temp_pointer_array6": 1,
                    "var_array_copy": 1
                },
                "local_9f": {
                    "alignment_char": 1,
                    "base_prefix": 1,
                    "char_var4": 1,
                    "digit_symbol": 1,
                    "extra_width": 1,
                    "hex_digit_char": 1,
                    "hex_prefix": 1,
                    "hex_prefix_char": 1,
                    "hex_prefix_character": 1,
                    "hexadecimal_flag": 2,
                    "int_char2": 1,
                    "is_leading_zero": 1,
                    "leading_zero_char": 1,
                    "local_undefined2": 1,
                    "lowercase_x": 1,
                    "output_length": 1,
                    "padding_char2": 1,
                    "padding_character_ascii2": 1,
                    "prefix_digit": 1,
                    "size_modifier_char": 1,
                    "specifier": 1
                },
                "local_a0": {
                    "char_var3": 1,
                    "extra_value": 1,
                    "leading_char": 1,
                    "leading_hex_char": 1,
                    "leading_zero": 1,
                    "leading_zero_char": 1,
                    "local_undefined": 1,
                    "pad_char": 1,
                    "padding_char": 5,
                    "padding_character": 2,
                    "padding_character_ascii": 1,
                    "prefix": 1,
                    "zero_padding_char": 3,
                    "zero_padding_character": 1
                },
                "local_a1": {
                    "alignment_char": 1,
                    "arg_sign": 1,
                    "char1": 1,
                    "current_conversion_char": 1,
                    "extra_flag": 1,
                    "flag": 1,
                    "flag6": 1,
                    "flag_char": 1,
                    "flag_character": 1,
                    "flag_specifier": 1,
                    "flags": 1,
                    "format_specifier": 2,
                    "format_specifier_char": 1,
                    "leading_char": 3,
                    "local_char": 1,
                    "local_char1": 1,
                    "sign": 2,
                    "sign_char": 3,
                    "sign_char_copy": 1,
                    "sign_character": 2,
                    "specifier": 1
                },
                "local_c0": {
                    "conversion": 1,
                    "current_format_character": 1,
                    "digit_set": 1,
                    "digits": 2,
                    "format_str_index": 1,
                    "format_string_ptr": 1,
                    "hex_char_set": 1,
                    "hex_characters": 1,
                    "hex_chars": 3,
                    "hex_digits": 4,
                    "hex_lowercase": 1,
                    "hexadecimal_chars": 1,
                    "hexadecimal_digits": 1,
                    "local_c0": 1,
                    "local_char_arr": 1,
                    "local_string": 1,
                    "number_buffer": 1,
                    "numeric_characters": 1,
                    "padding_character": 1,
                    "string_conversion": 1,
                    "temp_str": 1
                },
                "local_c4": {
                    "converted_values_count": 1,
                    "final_result": 1,
                    "local_c4": 1,
                    "local_count3": 1,
                    "local_counter": 1,
                    "num_args": 1,
                    "num_bytes_written": 1,
                    "num_chars_written": 1,
                    "output_count": 1,
                    "result": 6,
                    "result_count": 2,
                    "result_length": 2,
                    "result_size": 3,
                    "return_value": 1,
                    "total_data_size": 1,
                    "total_length": 1,
                    "total_output_chars": 1,
                    "total_processed": 1
                },
                "local_c8": {
                    "arg_list_ptr": 2,
                    "arg_pointer": 1,
                    "arg_pointer_list": 1,
                    "arg_ptr": 1,
                    "arg_ptr_array": 1,
                    "arg_ref_list": 1,
                    "args_pointer_copy": 1,
                    "current_arg": 1,
                    "current_arg_pointer": 2,
                    "current_argument_pointer": 2,
                    "current_output_argument_ptr": 1,
                    "current_output_param": 1,
                    "data": 1,
                    "data_list": 1,
                    "local_data": 1,
                    "local_pointer_array_c8": 1,
                    "local_ptr_arr": 1,
                    "output_ptr_copy": 1,
                    "param4_ptr": 1,
                    "param_pointer": 1,
                    "pointer_list": 1,
                    "remaining_arguments": 1,
                    "temp_array": 1,
                    "variable_ptr": 1
                },
                "local_d4": {
                    "current_format_specifier_length": 1,
                    "current_precision": 1,
                    "current_remaining_tokens": 1,
                    "data_count_threshold": 1,
                    "format_data_pointer": 1,
                    "leading_zeros": 1,
                    "local_count2": 1,
                    "local_data_count2": 1,
                    "local_data_end": 1,
                    "local_pointer_array_d4": 1,
                    "max_arg_count": 1,
                    "max_format_length": 1,
                    "max_precision": 1,
                    "max_width_value": 1,
                    "min_width": 1,
                    "remaining_args": 1,
                    "remaining_formats2": 1,
                    "star_precision": 1,
                    "temp_data_count": 1,
                    "temp_pointer": 1,
                    "total_data_ptr": 1,
                    "total_data_size": 1,
                    "total_specifier_size": 1,
                    "total_width": 3,
                    "width": 1
                },
                "local_d8": {
                    "num_digits": 1
                },
                "local_dc": {
                    "accumulated_length": 1,
                    "arg_count": 1,
                    "current_arg_index": 1,
                    "current_data_ptr": 1,
                    "current_num_processed_tokens": 1,
                    "current_width": 1,
                    "data_count": 2,
                    "digit_count": 1,
                    "format_length": 1,
                    "formatted_data_ptr": 1,
                    "local_count": 1,
                    "local_data": 1,
                    "local_data_count": 1,
                    "local_pointer_array_dc": 1,
                    "max_data": 1,
                    "max_data_count": 1,
                    "max_data_list_size": 1,
                    "max_field_width": 1,
                    "max_format_specifier_length": 1,
                    "max_formats": 1,
                    "max_width": 4,
                    "maximum_width": 1,
                    "remaining_data": 1,
                    "specifier_count": 1
                },
                "param_1": {
                    "arg1": 2,
                    "data": 2,
                    "data1": 2,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "data_size": 1,
                    "data_struct": 4,
                    "data_structure": 2,
                    "data_structure_pointer": 1,
                    "input": 1,
                    "input1": 2,
                    "input_buffer": 3,
                    "input_data": 4,
                    "input_parameter": 1,
                    "p_data": 1,
                    "param1": 1,
                    "pointer_to_data": 1
                },
                "param_2": {
                    "arg2": 2,
                    "buffer": 1,
                    "buffer_size": 1,
                    "config": 2,
                    "config_data": 2,
                    "config_ptr": 1,
                    "data": 5,
                    "data2": 2,
                    "format_data": 1,
                    "format_string": 1,
                    "format_struct": 1,
                    "info_pointer": 1,
                    "input": 1,
                    "input2": 2,
                    "input_buffer_size": 1,
                    "metadata_pointer": 1,
                    "output_buffer": 1,
                    "output_parameter": 1,
                    "p_params": 1,
                    "param2": 1,
                    "pointer_to_format_string": 1,
                    "string_pointer": 1
                },
                "param_3": {
                    "data": 1,
                    "data3": 2,
                    "format": 4,
                    "format_arguments": 1,
                    "format_str_ptr": 1,
                    "format_string": 17,
                    "input3": 2,
                    "p_string": 1,
                    "param3": 1,
                    "pointer_to_arg_list": 1
                },
                "param_4": {
                    "arg_list": 3,
                    "arg_pointer": 1,
                    "args": 3,
                    "argument_list_pointer": 1,
                    "arguments": 7,
                    "data4": 2,
                    "input4": 2,
                    "output_arguments": 1,
                    "output_buffer": 1,
                    "output_data": 2,
                    "output_parameters": 1,
                    "output_params": 1,
                    "output_ptr": 1,
                    "param4": 1,
                    "pointer_to_output": 1,
                    "pointers": 1,
                    "pp_data": 1,
                    "variable_list": 1
                },
                "piVar19": {
                    "arg": 1,
                    "current_arg_value": 1,
                    "int_var1": 1,
                    "int_var2": 1,
                    "p_data": 1,
                    "pi_temp1": 1,
                    "pointer1": 1,
                    "pointer2": 1,
                    "ptr19": 1,
                    "ptr_data3": 1,
                    "ptr_var2": 1,
                    "ptr_var6": 1,
                    "temp5": 1,
                    "temp_param1": 1,
                    "temp_pointer2": 1,
                    "temp_ptr": 1,
                    "temp_value1": 1,
                    "temp_var4": 1,
                    "value": 1,
                    "value2": 1,
                    "value_ptr": 2,
                    "var13": 1
                },
                "piVar22": {
                    "bits_to_ignore": 1,
                    "int_var2": 1,
                    "is_negative": 1,
                    "local_ptr": 1,
                    "negative_value": 1,
                    "pi_temp2": 1,
                    "pointer1": 1,
                    "pointer2": 1,
                    "pointer3": 1,
                    "pp_output_buffer": 1,
                    "ptr2": 1,
                    "ptr22": 1,
                    "ptr_data5": 1,
                    "ptr_var3": 1,
                    "ptr_var8": 1,
                    "sign": 1,
                    "temp7": 1,
                    "temp_param2": 1,
                    "temp_pointer": 1,
                    "temp_pointer4": 1,
                    "temp_value2": 1,
                    "temp_var6": 1,
                    "tmp_int3": 1,
                    "var16": 1,
                    "width_value": 1
                },
                "piVar7": {
                    "arg_ptr": 1,
                    "arg_value": 1,
                    "argument": 1,
                    "current_arg": 2,
                    "i_var_array": 1,
                    "int_var1": 1,
                    "integer_part": 1,
                    "integer_pointer": 1,
                    "integer_value": 1,
                    "param": 1,
                    "param_pointer": 1,
                    "parameter1": 1,
                    "pi_var1": 1,
                    "pointer": 2,
                    "pointer_var7": 1,
                    "ptr1": 1,
                    "ptr7": 1,
                    "ptr_data1": 1,
                    "ptr_var1": 1,
                    "ptr_var2": 1,
                    "temp_int_pointer": 1,
                    "temp_pointer": 2,
                    "temp_pointer1": 1,
                    "value1": 1,
                    "var2": 1,
                    "var_pointer": 1
                },
                "ppiVar12": {
                    "arg": 1,
                    "arg_list": 1,
                    "arg_pointer": 1,
                    "args_pointer": 1,
                    "current_arg_ref": 1,
                    "next_variable": 1,
                    "pointer_list": 1,
                    "pointer_pointer": 1,
                    "pp_int_pointer": 1,
                    "ppi": 1,
                    "ppi_var1": 1,
                    "ptr_arr": 1,
                    "ptr_array3": 1,
                    "ptr_temp1": 1,
                    "star_argument_ptr": 1,
                    "temp_arg_list": 1,
                    "temp_arg_ptr": 1,
                    "temp_pointer": 1,
                    "temp_pointer2": 2,
                    "temp_pointer3": 1,
                    "temp_pointer_array": 1,
                    "temp_pointer_array2": 1,
                    "temp_ptr": 2,
                    "temp_ptr1": 1,
                    "var6": 1
                },
                "ppppppiVar10": {
                    "temp_pointer1": 1
                },
                "pppppppVar25": {
                    "arg_format_buffer": 1
                },
                "pppppppiVar10": {
                    "current_char": 1,
                    "current_format_arg": 1,
                    "current_format_char": 2,
                    "current_format_specifier": 4,
                    "current_format_specifier_ptr": 1,
                    "current_specifier": 1,
                    "format_pointer": 1,
                    "format_ptr": 2,
                    "format_ptr2": 1,
                    "next_format_token": 1,
                    "pointer_array_var10": 1,
                    "pp_data": 1,
                    "ptr10": 1,
                    "ptr_array2": 1,
                    "ptr_data2": 1,
                    "ptr_var3": 1,
                    "temp_data": 1,
                    "temp_format_ptr": 1,
                    "var4": 1
                },
                "pppppppiVar16": {
                    "arg_pointer2": 1,
                    "current_token": 1,
                    "output_argument_ptr": 1,
                    "ptr_array4": 1,
                    "temp_pointer3": 1
                },
                "pppppppiVar18": {
                    "current_char_temp": 1,
                    "fmt_ptr": 1,
                    "pp_data2": 1,
                    "ptr18": 1,
                    "ptr_array5": 1,
                    "ptr_format_string": 1,
                    "ptr_var5": 1,
                    "remaining_data": 1,
                    "remaining_format": 1,
                    "remaining_format_specifier_ptr": 1,
                    "remaining_format_string": 2,
                    "remaining_formats": 1,
                    "remaining_tokens": 1,
                    "temp_data2": 1,
                    "temp_format_ptr2": 1,
                    "temp_pointer4": 1,
                    "temp_pointer_array2": 1,
                    "temp_ptr2": 1,
                    "var12": 1
                },
                "pppppppiVar19": {
                    "arg_pointer": 1,
                    "format_str": 1,
                    "temp_pointer_array3": 1,
                    "zero_prefix": 1
                },
                "pppppppiVar20": {
                    "arg_ptr": 1,
                    "arg_value": 1,
                    "next_arg_ptr": 1,
                    "next_format_specifier": 1,
                    "p_temp_value": 1,
                    "pointer_array_var20": 1,
                    "ptr20": 1,
                    "ptr_array6": 1,
                    "ptr_data4": 1,
                    "ptr_var7": 1,
                    "star_arg": 1,
                    "star_width": 1,
                    "temp_data3": 1,
                    "temp_pointer5": 1,
                    "temp_pointer_array4": 1,
                    "var14": 1,
                    "width_field": 1
                },
                "pppppppiVar23": {
                    "current_char_temp2": 1,
                    "next_arg_value": 1,
                    "next_format_specifier": 1,
                    "pp_data3": 1,
                    "ptr23": 1,
                    "ptr_array7": 1,
                    "ptr_data6": 1,
                    "ptr_var9": 1,
                    "remaining_args": 1,
                    "remaining_data": 1,
                    "remaining_format": 1,
                    "remaining_format_specifier_ptr": 1,
                    "remaining_specifier": 1,
                    "temp_data4": 1,
                    "temp_pointer6": 1,
                    "temp_ptr3": 1,
                    "var17": 1
                },
                "pppppppiVar25": {
                    "local_variables": 1,
                    "temp_pointer7": 1
                },
                "pppppppiVar6": {
                    "arg_pointer": 1,
                    "format_param_pointer": 1,
                    "format_token": 1
                },
                "ppppppppiVar10": {
                    "ppi_temp": 1
                },
                "ppppppppiVar16": {
                    "buffer_ptr": 1,
                    "format_specifier": 1,
                    "local_format_specifier": 1,
                    "pointer_array2": 1,
                    "pointer_array_temp": 1,
                    "pointer_array_var16": 1,
                    "pointers_to_data": 1,
                    "ptr16": 1,
                    "ptr_array2": 1,
                    "ptr_var4": 1,
                    "temp_data_ptr": 1,
                    "temp_pointer_array": 1,
                    "temp_pointer_array3": 1,
                    "temp_ptr1": 1,
                    "var10": 1
                },
                "ppppppppiVar18": {
                    "pointer_array_var18": 1,
                    "remaining_format_string": 1,
                    "remaining_specifier": 1
                },
                "ppppppppiVar20": {
                    "argument_value": 1
                },
                "ppppppppiVar23": {
                    "pointer2": 1,
                    "temp_arg_list": 1
                },
                "ppppppppiVar25": {
                    "buffer_ptr2": 1,
                    "digits_data": 1,
                    "local_90_ptr": 1,
                    "pointer3": 1,
                    "ptr25": 1,
                    "ptr_array8": 1,
                    "ptr_result": 1,
                    "ptr_var10": 1,
                    "result_temp2": 1,
                    "temp_pointer5": 1,
                    "temp_pointer_array5": 1,
                    "temp_ptr4": 1
                },
                "ppppppppiVar6": {
                    "arg_list": 3,
                    "args_ptr": 1,
                    "argument_list": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "format_args": 1,
                    "format_argument_ptr": 1,
                    "format_arguments": 1,
                    "format_ptr": 1,
                    "local_buffer": 1,
                    "local_pointers": 2,
                    "pointer_array": 4,
                    "pointer_array_var6": 1,
                    "ptr6": 1,
                    "ptr_array": 1,
                    "ptr_array1": 1,
                    "ptr_var1": 1,
                    "segment_pointer": 1,
                    "temp_pointer_array": 1,
                    "var1": 1,
                    "var_array": 1
                },
                "uParam_3": {
                    "format_string_ptr": 1
                },
                "uVar11": {
                    "char_conversion_number": 1,
                    "character_value": 1,
                    "digit": 6,
                    "digit_value": 3,
                    "num_digits": 1,
                    "temp1": 5,
                    "temp_u_int1": 1,
                    "temp_value": 2,
                    "temp_value1": 1,
                    "temp_var": 1,
                    "temp_var1": 2,
                    "u_var1": 1,
                    "uint_var1": 1,
                    "ushort1": 1,
                    "ushort_var11": 1,
                    "var5": 1,
                    "width_specifier": 1
                },
                "uVar13": {
                    "char_conversion_flags": 1,
                    "flag": 1,
                    "flags": 8,
                    "format_flags": 2,
                    "format_specifier_value": 1,
                    "modifier_flags": 1,
                    "temp2": 4,
                    "temp3": 1,
                    "temp_flag": 1,
                    "temp_short_value": 1,
                    "temp_u_int2": 1,
                    "temp_value2": 1,
                    "temp_var2": 2,
                    "temp_variable1": 1,
                    "u_var2": 1,
                    "uint_var2": 1,
                    "ushort2": 1,
                    "ushort_var13": 1,
                    "var7": 1
                },
                "uVar14": {
                    "byte1": 1,
                    "ch": 5,
                    "char_conversion_flag": 1,
                    "current_char": 2,
                    "flag_value": 1,
                    "format_char": 2,
                    "format_specifier_char_code": 1,
                    "next_char": 2,
                    "next_format_char": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp_byte_value": 1,
                    "temp_char2": 1,
                    "temp_u_int3": 1,
                    "temp_value": 1,
                    "temp_value3": 1,
                    "temp_var3": 2,
                    "temp_variable2": 1,
                    "u_var3": 1,
                    "uint_var3": 1,
                    "ushort_var14": 1,
                    "var8": 1
                },
                "uVar21": {
                    "converted_value": 1,
                    "count": 1,
                    "first_digit": 1,
                    "leading_zeros": 1,
                    "star_arg_value": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_char3": 1,
                    "temp_digit": 1,
                    "temp_int": 1,
                    "temp_u_int4": 1,
                    "temp_uint_value": 1,
                    "temp_value4": 1,
                    "temp_var5": 1,
                    "temp_var6": 2,
                    "temp_variable3": 1,
                    "tmp_uint": 1,
                    "u_var4": 1,
                    "uint1": 1,
                    "uint_var4": 1,
                    "value": 1,
                    "value3": 1,
                    "var15": 1,
                    "width": 1,
                    "width_value": 1
                },
                "uVar24": {
                    "hi_arg_bit_size": 1,
                    "high_bits": 1,
                    "high_d_word": 1,
                    "high_part": 1,
                    "high_value": 1,
                    "temp4": 2,
                    "temp6": 1,
                    "temp8": 1,
                    "temp_u_int5": 1,
                    "temp_uint_value2": 1,
                    "temp_value": 1,
                    "temp_value5": 1,
                    "temp_var": 1,
                    "temp_var7": 2,
                    "temp_variable4": 1,
                    "tmp_uint2": 1,
                    "u_var5": 1,
                    "uint_var5": 1,
                    "undefined4_value": 1,
                    "upper_value": 1,
                    "var18": 1
                },
                "uVar27": {
                    "lower_value": 1
                }
            },
            "called": [
                "FUN_000834f0",
                "FUN_00084530",
                "FUN_00083888",
                "FUN_00082688",
                "FUN_00082824",
                "FUN_000840f8",
                "FUN_0008356c"
            ],
            "calling": [
                "FUN_000834f0",
                "FUN_000817c8",
                "FUN_00081750"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint process_and_validate_data_0008289c(int input_data,int data,int *******format_string,int **arguments)\n\n{\n  bool is_signed;\n  bool is_negative;\n  bool has_hash;\n  char sign_char;\n  bool has_precision;\n  int ********pointer_array;\n  int *pointer;\n  int result;\n  char temp_char;\n  int *******current_format_specifier;\n  uint digit;\n  int **temp_pointer2;\n  uint flags;\n  uint ch;\n  int counter;\n  int ********ptr16;\n  int temp_int2;\n  int *******remaining_format_string;\n  int *value_ptr;\n  int *******ptr_array6;\n  uint temp_var6;\n  int *temp_var6;\n  int *******pp_data3;\n  undefined4 temp_var7;\n  int ********pointer3;\n  bool is_negative;\n  longlong combined_value;\n  int *******max_width;\n  int *******total_width;\n  int **arg_list_ptr;\n  int result;\n  char *hex_digits;\n  char leading_char;\n  undefined padding_char;\n  undefined hexadecimal_flag;\n  int ********format_specifier;\n  int arg_count;\n  int *******total_format_specifiers;\n  undefined specifier_char;\n  char temp_char;\n  undefined temp_char2;\n  undefined format_buffer [4];\n  int *******temp_array2 [16];\n  \n  if ((input_data != 0) && (*(int *)(input_data + 0x38) == 0)) {\n    initialize_data_structures_00083888();\n  }\n  flags = (uint)*(ushort *)(data + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(data + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(data + 0xc) = (short)flags;\n    *(uint *)(data + 100) = *(uint *)(data + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(data + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = process_data_0008356c(input_data,data);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(data + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(data + 0xe)) {\n    result = process_and_check_data_000834f0(input_data,data,format_string,arguments);\n    return result;\n  }\nLAB_000828ee:\n  hex_digits = (char *)0x0;\n  total_format_specifiers = (int *******)0x0;\n  arg_count = 0;\n  result = 0;\n  pointer_array = (int ********)format_buffer;\n  arg_list_ptr = arguments;\n  format_specifier = (int ********)format_buffer;\nLAB_00082902:\n  current_format_specifier = format_string;\n  if ((*(char *)format_string != '\\0') && (*(char *)format_string != '%')) {\n    do {\n      current_format_specifier = (int *******)((int)current_format_specifier + 1);\n      if (*(char *)current_format_specifier == '\\0') break;\n    } while (*(char *)current_format_specifier != '%');\n    ptr_array6 = (int *******)((int)current_format_specifier - (int)format_string);\n    if (ptr_array6 != (int *******)0x0) {\n      arg_count = arg_count + 1;\n      total_format_specifiers = (int *******)((int)total_format_specifiers + (int)ptr_array6);\n      *pointer_array = format_string;\n      pointer_array[1] = ptr_array6;\n      if (arg_count < 8) {\n        pointer_array = pointer_array + 2;\n      }\n      else {\n        if (total_format_specifiers == (int *******)0x0) {\n          result = result + (int)ptr_array6;\n          arg_count = 0;\n          pointer_array = (int ********)format_buffer;\n          goto LAB_00082952;\n        }\n        result = process_and_validate_all_data_00082824(input_data,data,&format_specifier);\n        pointer_array = (int ********)format_buffer;\n        if (result != 0) goto LAB_00083142;\n      }\n      result = result + (int)ptr_array6;\n    }\n  }\nLAB_00082952:\n  if (*(char *)current_format_specifier != '\\0') {\n    leading_char = '\\0';\n    ch = (uint)*(byte *)((int)current_format_specifier + 1);\n    flags = 0;\n    has_precision = false;\n    is_negative = false;\n    is_signed = false;\n    has_hash = false;\n    is_negative = false;\n    ptr_array6 = (int *******)0x0;\n    total_width = (int *******)0xffffffff;\n    format_string = (int *******)((int)current_format_specifier + 1);\nLAB_00082976:\n    format_string = (int *******)((int)format_string + 1);\nLAB_0008297a:\n    switch(ch) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (ch != 0) {\n        max_width = (int *******)0x1;\n        total_width = (int *******)0x1;\n        pointer3 = (int ********)&specifier_char;\n        specifier_char = (char)ch;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      has_hash = true;\n      ch = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x2a:\n      ptr_array6 = (int *******)*arg_list_ptr;\n      arg_list_ptr = arg_list_ptr + 1;\n      if ((int)ptr_array6 < 0) {\n        ptr_array6 = (int *******)-(int)ptr_array6;\n        goto switchD_00082984_caseD_2d;\n      }\n      ch = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x2b:\n      ch = (uint)*(byte *)format_string;\n      leading_char = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flags = flags | 4;\n      ch = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x2e:\n      ch = (uint)*(byte *)format_string;\n      current_format_specifier = (int *******)((int)format_string + 1);\n      if (ch == 0x2a) {\n        ch = (uint)*(byte *)((int)format_string + 1);\n        total_width = (int *******)*arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        format_string = current_format_specifier;\n        if ((int)total_width < 0) {\n          total_width = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digit = ch - 0x30;\n      if (digit < 10) {\n        temp_var6 = 0;\n        do {\n          format_string = (int *******)((int)current_format_specifier + 1);\n          ch = (uint)*(byte *)current_format_specifier;\n          temp_var6 = digit + temp_var6 * 10;\n          digit = ch - 0x30;\n          current_format_specifier = format_string;\n        } while (digit < 10);\n        total_width = (int *******)(temp_var6 | (int)temp_var6 >> 0x1f);\n      }\n      else {\n        total_width = (int *******)0x0;\n        format_string = current_format_specifier;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flags = flags | 0x80;\n      ch = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      is_negative = true;\n      if (is_signed == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      arg_list_ptr = (int **)((int)arg_list_ptr + 7U & 0xfffffff8);\n      value_ptr = *arg_list_ptr;\n      temp_var6 = arg_list_ptr[1];\n      arg_list_ptr = arg_list_ptr + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      is_negative = true;\n      if (is_signed != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)is_negative << 4;\n      counter = (uint)is_signed << 5;\n      if ((is_negative == 0) && (counter = (uint)is_negative << 6, is_negative != 0)) {\n        value_ptr = (int *)(uint)*(ushort *)arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        temp_var6 = (int *)0x0;\n      }\n      else {\n        result = counter;\n        value_ptr = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        temp_var6 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      is_negative = true;\n      if (is_signed != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((is_negative) || (is_negative == false)) {\n        result = 1;\n        value_ptr = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        temp_var6 = (int *)0x0;\n      }\n      else {\n        temp_var6 = (int *)0x0;\n        value_ptr = (int *)(uint)*(ushort *)arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hex_digits = \"0123456789ABCDEF\";\n      if (is_signed == false) goto LAB_00082efa;\nLAB_00082d1a:\n      temp_pointer2 = (int **)((int)arg_list_ptr + 7U & 0xfffffff8);\n      arg_list_ptr = temp_pointer2 + 2;\n      value_ptr = *temp_pointer2;\n      temp_var6 = temp_pointer2[1];\n      goto LAB_00082d2e;\n    case 99:\n      value_ptr = *arg_list_ptr;\n      arg_list_ptr = arg_list_ptr + 1;\n      max_width = (int *******)0x1;\n      specifier_char = SUB41(value_ptr,0);\n      total_width = (int *******)0x1;\n      pointer3 = (int ********)&specifier_char;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (is_signed != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((is_negative == false) && (is_negative != false)) {\n        value_ptr = (int *)(int)*(short *)arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        temp_var6 = (int *)((int)value_ptr >> 0x1f);\n      }\n      else {\n        value_ptr = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        temp_var6 = (int *)((int)value_ptr >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)temp_var6 < 0) {\n        is_negative = value_ptr != (int *)0x0;\n        value_ptr = (int *)-(int)value_ptr;\n        temp_var6 = (int *)(-(int)temp_var6 - (uint)is_negative);\n        leading_char = '-';\n        sign_char = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)total_width) {\n        flags = flags & 0xffffff7f;\n      }\n      has_precision = false;\n      ch = (uint)value_ptr | (uint)temp_var6;\n      result = 1;\n      sign_char = leading_char;\n      goto joined_r0x00082adc;\n    case 0x68:\n      is_negative = true;\n      ch = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x6c:\n      ch = (uint)*(byte *)format_string;\n      if (ch == 0x6c) {\n        is_signed = true;\n        ch = (uint)*(byte *)((int)format_string + 1);\n        format_string = (int *******)((int)format_string + 1);\n      }\n      else {\n        is_negative = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (is_signed == false) {\n        if (is_negative == false) {\n          if (is_negative) {\n            value_ptr = *arg_list_ptr;\n            arg_list_ptr = arg_list_ptr + 1;\n            *(short *)value_ptr = (short)result;\n          }\n          else {\n            value_ptr = *arg_list_ptr;\n            arg_list_ptr = arg_list_ptr + 1;\n            *value_ptr = result;\n          }\n        }\n        else {\n          value_ptr = *arg_list_ptr;\n          arg_list_ptr = arg_list_ptr + 1;\n          *value_ptr = result;\n        }\n      }\n      else {\n        value_ptr = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        *value_ptr = result;\n        value_ptr[1] = result >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (is_signed == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      temp_pointer2 = (int **)((int)arg_list_ptr + 7U & 0xfffffff8);\n      arg_list_ptr = temp_pointer2 + 2;\n      value_ptr = *temp_pointer2;\n      temp_var6 = temp_pointer2[1];\n      result = 0;\n      break;\n    case 0x70:\n      value_ptr = *arg_list_ptr;\n      arg_list_ptr = arg_list_ptr + 1;\n      hexadecimal_flag = 0x78;\n      has_precision = true;\n      temp_var6 = (int *)0x0;\n      padding_char = 0x30;\n      hex_digits = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      is_signed = true;\n      ch = (uint)*(byte *)format_string;\n      goto LAB_00082976;\n    case 0x73:\n      pointer3 = (int ********)*arg_list_ptr;\n      leading_char = '\\0';\n      arg_list_ptr = arg_list_ptr + 1;\n      if (pointer3 != (int ********)0x0) {\n        if ((int)total_width < 0) {\n          total_width = (int *******)count_leading_zeros_00082688(pointer3);\n          current_format_specifier = (int *******)0x0;\n          sign_char = leading_char;\n        }\n        else {\n          result = find_first_occurrence_000840f8(pointer3,0,total_width);\n          sign_char = leading_char;\n          if (result == 0) {\n            current_format_specifier = (int *******)0x0;\n          }\n          else {\n            remaining_format_string = (int *******)(result - (int)pointer3);\n            if ((int)total_width <= (int)(int *******)(result - (int)pointer3)) {\n              remaining_format_string = total_width;\n            }\n            current_format_specifier = (int *******)0x0;\n            total_width = remaining_format_string;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < total_width) {\n        total_width = (int *******)0x6;\n      }\n      max_width = (int *******)((uint)total_width & ~((int)total_width >> 0x1f));\n      pointer3 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      leading_char = '\\0';\n      current_format_specifier = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!is_signed) goto LAB_00082ce0;\nLAB_00082bc6:\n      temp_pointer2 = (int **)((int)arg_list_ptr + 7U & 0xfffffff8);\n      arg_list_ptr = temp_pointer2 + 2;\n      value_ptr = *temp_pointer2;\n      temp_var6 = temp_pointer2[1];\n      result = 1;\n      break;\n    case 0x78:\n      hex_digits = \"0123456789abcdef\";\n      if (is_signed != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((is_negative == false) && (is_negative != false)) {\n        temp_var6 = (int *)0x0;\n        value_ptr = (int *)(uint)*(ushort *)arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n      }\n      else {\n        value_ptr = *arg_list_ptr;\n        arg_list_ptr = arg_list_ptr + 1;\n        temp_var6 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((has_hash) && (((uint)value_ptr | (uint)temp_var6) != 0)) {\n        has_precision = true;\n        padding_char = 0x30;\n        result = 2;\n        hexadecimal_flag = (char)ch;\n      }\n      else {\n        result = 2;\n      }\n    }\n    leading_char = '\\0';\n    sign_char = '\\0';\nLAB_00082ace:\n    if (-1 < (int)total_width) {\n      flags = flags & 0xffffff7f;\n    }\n    ch = (uint)value_ptr | (uint)temp_var6;\njoined_r0x00082adc:\n    combined_value = CONCAT44(temp_var6,value_ptr);\n    current_format_specifier = total_width;\n    if ((ch == 0) && (total_width == (int *******)0x0)) {\n      pointer3 = (int ********)format_buffer;\n      if ((result != 0) || (!has_hash)) goto LAB_00082b04;\n      pointer3 = (int ********)(&temp_char + 1);\n      temp_char2 = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (temp_var6 != (int *)0x0 || (int *)0x9 < value_ptr) {\n        ptr16 = (int ********)(&temp_char + 1);\n        do {\n          pointer3 = ptr16;\n          temp_var7 = (undefined4)((ulonglong)combined_value >> 0x20);\n          temp_char = '\\n';\n          calculate_difference_or_return_negative_one_00084530((int)combined_value,temp_var7,10,0);\n          *(char *)pointer3 = temp_char + '0';\n          combined_value = calculate_difference_or_return_negative_one_00084530((int)combined_value,temp_var7,10,0);\n          ptr16 = (int ********)((int)pointer3 + -1);\n        } while (combined_value != 0);\n        total_width = (int *******)((int)format_buffer - (int)pointer3);\n        goto LAB_00082b04;\n      }\n      temp_char2 = (char)value_ptr + '0';\n      pointer3 = (int ********)(&temp_char + 1);\n      goto LAB_00083282;\n    }\n    ptr16 = (int ********)(&temp_char + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      pointer3 = ptr16;\n      ch = (uint)value_ptr & 0xf;\n      value_ptr = (int *)((uint)value_ptr >> 4 | (int)temp_var6 << 0x1c);\n      temp_var6 = (int *)((uint)temp_var6 >> 4);\n      *(char *)pointer3 = hex_digits[ch];\n      ptr16 = (int ********)((int)pointer3 + -1);\n    } while (((uint)value_ptr | (uint)temp_var6) != 0);\n    total_width = (int *******)((int)format_buffer - (int)pointer3);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (total_format_specifiers != (int *******)0x0) {\n    process_and_validate_all_data_00082824(input_data,data,&format_specifier);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return result;\nLAB_000830e2:\n  do {\n    pointer3 = ptr16;\n    pointer = (int *)((uint)value_ptr >> 3 | (int)temp_var6 << 0x1d);\n    temp_var6 = (int *)((uint)temp_var6 >> 3);\n    result = ((uint)value_ptr & 7) + 0x30;\n    *(char *)pointer3 = (char)result;\n    ptr16 = (int ********)((int)pointer3 + -1);\n    value_ptr = pointer;\n  } while (((uint)pointer | (uint)temp_var6) != 0);\n  if (has_hash) {\n    if (result == 0x30) {\nLAB_00082afe:\n      total_width = (int *******)((int)format_buffer - (int)pointer3);\n    }\n    else {\n      *(undefined *)((int)pointer3 + -1) = 0x30;\n      pointer3 = ptr16;\n      total_width = (int *******)((int)format_buffer - (int)ptr16);\n    }\n  }\n  else {\nLAB_00083282:\n    total_width = (int *******)((int)format_buffer - (int)pointer3);\n  }\nLAB_00082b04:\n  max_width = total_width;\n  if ((int)total_width < (int)current_format_specifier) {\n    max_width = current_format_specifier;\n  }\n  if (sign_char != '\\0') {\n    max_width = (int *******)((int)max_width + 1);\n  }\nLAB_00082b1e:\n  if (has_precision) {\n    max_width = (int *******)((int)max_width + 2);\n  }\n  if ((flags == 0) &&\n     (remaining_format_string = (int *******)((int)ptr_array6 - (int)max_width), 0 < (int)remaining_format_string)) {\n    if ((int)remaining_format_string < 0x11) {\n      arg_count = arg_count + 1;\n    }\n    else {\n      do {\n        pp_data3 = remaining_format_string;\n        result = arg_count + 1;\n        total_format_specifiers = total_format_specifiers + 4;\n        *pointer_array = (int *******)0x856f0;\n        pointer_array[1] = (int *******)0x10;\n        if (result < 8) {\n          counter = arg_count + 2;\n          pointer_array = pointer_array + 2;\n          arg_count = result;\n        }\n        else if (total_format_specifiers == (int *******)0x0) {\n          counter = 1;\n          pointer_array = (int ********)format_buffer;\n          arg_count = 0;\n        }\n        else {\n          arg_count = result;\n          result = process_and_validate_all_data_00082824(input_data,data,&format_specifier);\n          if (result != 0) goto LAB_00083142;\n          counter = arg_count + 1;\n          pointer_array = (int ********)format_buffer;\n        }\n        remaining_format_string = pp_data3 + -4;\n      } while (0x10 < (int)remaining_format_string);\n      remaining_format_string = pp_data3 + -4;\n      arg_count = counter;\n    }\n    total_format_specifiers = (int *******)((int)total_format_specifiers + (int)remaining_format_string);\n    *pointer_array = (int *******)0x856f0;\n    pointer_array[1] = remaining_format_string;\n    if (arg_count < 8) {\n      result = arg_count + 1;\n      pointer_array = pointer_array + 2;\n    }\n    else if (total_format_specifiers == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      pointer_array = (int ********)format_buffer;\n    }\n    else {\n      result = process_and_validate_all_data_00082824(input_data,data,&format_specifier);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      pointer_array = (int ********)format_buffer;\n    }\n  }\n  else {\n    result = arg_count + 1;\n  }\n  counter = result;\n  if (leading_char != '\\0') {\n    total_format_specifiers = (int *******)((int)total_format_specifiers + 1);\n    counter = 1;\n    *pointer_array = (int *******)&leading_char;\n    pointer_array[1] = (int *******)0x1;\n    arg_count = result;\n    if (result < 8) {\n      counter = result + 1;\n      pointer_array = pointer_array + 2;\n    }\n    else if (total_format_specifiers == (int *******)0x0) {\n      arg_count = 0;\n      pointer_array = (int ********)format_buffer;\n    }\n    else {\n      result = process_and_validate_all_data_00082824(input_data,data,&format_specifier);\n      if (result != 0) goto LAB_00083142;\n      counter = arg_count + 1;\n      pointer_array = (int ********)format_buffer;\n    }\n  }\n  result = counter;\n  temp_int2 = arg_count;\n  if (has_precision) {\n    total_format_specifiers = (int *******)((int)total_format_specifiers + 2);\n    *pointer_array = (int *******)&padding_char;\n    pointer_array[1] = (int *******)0x2;\n    if (counter < 8) {\n      result = counter + 1;\n      temp_int2 = counter;\n      pointer_array = pointer_array + 2;\n    }\n    else if (total_format_specifiers == (int *******)0x0) {\n      result = 1;\n      temp_int2 = 0;\n      pointer_array = (int ********)format_buffer;\n    }\n    else {\n      arg_count = counter;\n      result = process_and_validate_all_data_00082824(input_data,data,&format_specifier);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      temp_int2 = arg_count;\n      pointer_array = (int ********)format_buffer;\n    }\n  }\n  arg_count = temp_int2;\n  if ((flags == 0x80) &&\n     (remaining_format_string = (int *******)((int)ptr_array6 - (int)max_width), 0 < (int)remaining_format_string)) {\n    if (0x10 < (int)remaining_format_string) {\n      do {\n        while( true ) {\n          pp_data3 = remaining_format_string;\n          arg_count = temp_int2 + 1;\n          total_format_specifiers = total_format_specifiers + 4;\n          *pointer_array = (int *******)\"0000000000000000\";\n          pointer_array[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          result = temp_int2 + 2;\n          pointer_array = pointer_array + 2;\nLAB_000831f2:\n          temp_int2 = arg_count;\n          remaining_format_string = pp_data3 + -4;\n          if ((int)(pp_data3 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (total_format_specifiers != (int *******)0x0) {\n          result = process_and_validate_all_data_00082824(input_data,data,&format_specifier);\n          if (result == 0) {\n            result = arg_count + 1;\n            pointer_array = (int ********)format_buffer;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        temp_int2 = 0;\n        remaining_format_string = pp_data3 + -4;\n        pointer_array = (int ********)format_buffer;\n      } while (0x10 < (int)(pp_data3 + -4));\nLAB_00083218:\n      remaining_format_string = pp_data3 + -4;\n    }\n    total_format_specifiers = (int *******)((int)total_format_specifiers + (int)remaining_format_string);\n    *pointer_array = (int *******)\"0000000000000000\";\n    pointer_array[1] = remaining_format_string;\n    arg_count = result;\n    if (result < 8) {\n      result = result + 1;\n      pointer_array = pointer_array + 2;\n    }\n    else if (total_format_specifiers == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      pointer_array = (int ********)format_buffer;\n    }\n    else {\n      result = process_and_validate_all_data_00082824(input_data,data,&format_specifier);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      pointer_array = (int ********)format_buffer;\n    }\n  }\n  current_format_specifier = (int *******)((int)current_format_specifier - (int)total_width);\n  ptr16 = (int ********)format_buffer;\n  if ((int)current_format_specifier < 1) {\nLAB_0008302a:\n    total_format_specifiers = (int *******)((int)total_format_specifiers + (int)total_width);\n    *pointer_array = (int *******)pointer3;\n    pointer_array[1] = total_width;\n    total_width = total_format_specifiers;\n    arg_count = result;\n    if (result < 8) goto LAB_000831be;\n    if (total_format_specifiers == (int *******)0x0) {\n      arg_count = 0;\n    }\n    else {\n      result = process_and_validate_all_data_00082824(input_data,data,&format_specifier);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    counter = arg_count;\n    if (0x10 < (int)current_format_specifier) {\n      do {\n        while( true ) {\n          remaining_format_string = current_format_specifier;\n          arg_count = counter + 1;\n          total_format_specifiers = total_format_specifiers + 4;\n          *pointer_array = (int *******)\"0000000000000000\";\n          pointer_array[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          result = counter + 2;\n          pointer_array = pointer_array + 2;\nLAB_00082fe6:\n          counter = arg_count;\n          current_format_specifier = remaining_format_string + -4;\n          if ((int)(remaining_format_string + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (total_format_specifiers != (int *******)0x0) {\n          result = process_and_validate_all_data_00082824(input_data,data,&format_specifier);\n          if (result == 0) {\n            result = arg_count + 1;\n            pointer_array = (int ********)format_buffer;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        pointer_array = (int ********)format_buffer;\n        counter = 0;\n        current_format_specifier = remaining_format_string + -4;\n      } while (0x10 < (int)(remaining_format_string + -4));\nLAB_0008300e:\n      current_format_specifier = remaining_format_string + -4;\n    }\n    total_format_specifiers = (int *******)((int)total_format_specifiers + (int)current_format_specifier);\n    *pointer_array = (int *******)\"0000000000000000\";\n    pointer_array[1] = current_format_specifier;\n    if (result < 8) {\n      result = result + 1;\n      pointer_array = pointer_array + 2;\n      goto LAB_0008302a;\n    }\n    if (total_format_specifiers != (int *******)0x0) {\n      arg_count = result;\n      result = process_and_validate_all_data_00082824(input_data,data,&format_specifier);\n      if (result != 0) goto LAB_00083142;\n      result = arg_count + 1;\n      pointer_array = (int ********)format_buffer;\n      goto LAB_0008302a;\n    }\n    temp_array2[0] = total_width;\n    arg_count = 1;\n    pointer_array = (int ********)format_buffer;\n    format_buffer = (undefined  [4])pointer3;\nLAB_000831be:\n    ptr16 = pointer_array + 2;\n    total_format_specifiers = total_width;\n  }\n  if (((flags & 4) != 0) &&\n     (current_format_specifier = (int *******)((int)ptr_array6 - (int)max_width), 0 < (int)current_format_specifier)) {\n    result = arg_count;\n    if ((int)current_format_specifier < 0x11) {\n      counter = arg_count + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          arg_count = result + 1;\n          total_format_specifiers = total_format_specifiers + 4;\n          *ptr16 = (int *******)0x856f0;\n          ptr16[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          counter = result + 2;\n          ptr16 = ptr16 + 2;\nLAB_0008307a:\n          current_format_specifier = current_format_specifier + -4;\n          result = arg_count;\n          if ((int)current_format_specifier < 0x11) goto LAB_000830a2;\n        }\n        if (total_format_specifiers != (int *******)0x0) {\n          result = process_and_validate_all_data_00082824(input_data,data,&format_specifier);\n          if (result == 0) {\n            counter = arg_count + 1;\n            ptr16 = (int ********)format_buffer;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        current_format_specifier = current_format_specifier + -4;\n        counter = 1;\n        result = 0;\n        ptr16 = (int ********)format_buffer;\n      } while (0x10 < (int)current_format_specifier);\n    }\nLAB_000830a2:\n    total_format_specifiers = (int *******)((int)total_format_specifiers + (int)current_format_specifier);\n    *ptr16 = (int *******)0x856f0;\n    ptr16[1] = current_format_specifier;\n    arg_count = counter;\n    if (7 < counter) {\n      if (total_format_specifiers == (int *******)0x0) {\n        if ((int)max_width < (int)ptr_array6) {\n          max_width = ptr_array6;\n        }\n        result = result + (int)max_width;\n        goto LAB_00083186;\n      }\n      result = process_and_validate_all_data_00082824(input_data,data,&format_specifier);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)max_width < (int)ptr_array6) {\n    max_width = ptr_array6;\n  }\n  result = result + (int)max_width;\n  if ((total_format_specifiers != (int *******)0x0) &&\n     (result = process_and_validate_all_data_00082824(input_data,data,&format_specifier), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  arg_count = 0;\n  pointer_array = (int ********)format_buffer;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digit = ch - 0x30;\n  ptr_array6 = (int *******)0x0;\n  current_format_specifier = format_string;\n  do {\n    format_string = (int *******)((int)current_format_specifier + 1);\n    ch = (uint)*(byte *)current_format_specifier;\n    ptr_array6 = (int *******)(digit + (int)ptr_array6 * 10);\n    digit = ch - 0x30;\n    current_format_specifier = format_string;\n  } while (digit < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  ch = (uint)*(byte *)format_string;\n  if (leading_char == '\\0') {\n    leading_char = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "current_name": "process_and_validate_data_0008289c",
            "entrypoint": "0x0008289c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008289c": "process_and_validate_data_0008289c",
                "bVar1": "is_signed",
                "bVar2": "is_negative",
                "bVar26": "is_negative",
                "bVar3": "has_hash",
                "bVar5": "has_precision",
                "cStack_6a": "temp_char",
                "cVar4": "sign_char",
                "cVar9": "temp_char",
                "iVar15": "counter",
                "iVar17": "temp_int2",
                "iVar8": "result",
                "lVar27": "combined_value",
                "local_64": "temp_array2",
                "local_68": "format_buffer",
                "local_69": "temp_char2",
                "local_90": "specifier_char",
                "local_94": "total_format_specifiers",
                "local_98": "arg_count",
                "local_9c": "format_specifier",
                "local_9f": "hexadecimal_flag",
                "local_a0": "padding_char",
                "local_a1": "leading_char",
                "local_c0": "hex_digits",
                "local_c4": "result",
                "local_c8": "arg_list_ptr",
                "local_d4": "total_width",
                "local_dc": "max_width",
                "param_1": "input_data",
                "param_2": "data",
                "param_3": "format_string",
                "param_4": "arguments",
                "piVar19": "value_ptr",
                "piVar22": "temp_var6",
                "piVar7": "pointer",
                "ppiVar12": "temp_pointer2",
                "ppppppiVar10": "temp_pointer1",
                "pppppppiVar10": "current_format_specifier",
                "pppppppiVar16": "ptr_array4",
                "pppppppiVar18": "remaining_format_string",
                "pppppppiVar20": "ptr_array6",
                "pppppppiVar23": "pp_data3",
                "pppppppiVar25": "temp_pointer7",
                "pppppppiVar6": "arg_pointer",
                "ppppppppiVar16": "ptr16",
                "ppppppppiVar25": "pointer3",
                "ppppppppiVar6": "pointer_array",
                "uVar11": "digit",
                "uVar13": "flags",
                "uVar14": "ch",
                "uVar21": "temp_var6",
                "uVar24": "temp_var7"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000834f0": {
            "additional_data": {
                "FUNC_0008289c": {
                    "call_function1": 1
                },
                "FUN_000834f0": {
                    "process_and_check_data": 1,
                    "process_and_validate_data": 1,
                    "process_data": 28,
                    "process_function": 1
                },
                "auStack_420": {
                    "aux_buffer": 1,
                    "buffer": 1,
                    "data": 1,
                    "local_array2": 1,
                    "processing_buffer": 1,
                    "stack": 1,
                    "stack_array": 5,
                    "stack_buffer": 10,
                    "stack_data": 4,
                    "temporary_stack": 1
                },
                "iVar1": {
                    "result": 14,
                    "result1": 3,
                    "return_value": 1,
                    "return_value1": 1
                },
                "iVar2": {
                    "process_result": 11,
                    "processing_result": 4,
                    "result2": 3,
                    "return_value2": 1
                },
                "local_424": {
                    "buffer": 1,
                    "buffer_size8": 1,
                    "data": 1,
                    "local_data": 1,
                    "local_value6": 1,
                    "local_variable": 1,
                    "local_variable1": 1,
                    "local_variable3": 1,
                    "param1_value": 1,
                    "param2_offset": 1,
                    "param3": 1,
                    "param5": 1,
                    "param_value": 2,
                    "ptr_to_value": 1,
                    "size": 2,
                    "some_value": 1,
                    "some_value3": 1,
                    "temp_data": 1,
                    "temp_value4": 1,
                    "temp_variable": 1,
                    "value3": 2,
                    "value4": 2,
                    "value6": 1,
                    "value_a": 1,
                    "var4": 1,
                    "variable3": 1
                },
                "local_464": {
                    "buffer_size3": 1,
                    "buffer_size6": 1,
                    "buffer_size7": 3,
                    "local_value5": 1,
                    "local_variable2": 1,
                    "local_variable4": 1,
                    "offset": 1,
                    "param2": 1,
                    "param2_value": 1,
                    "param3_value": 1,
                    "param4": 1,
                    "size3": 1,
                    "some_value2": 1,
                    "temp_value3": 1,
                    "unknown_value2": 1,
                    "value2": 3,
                    "value3": 2,
                    "value5": 1,
                    "value_copy2": 2,
                    "value_d": 1,
                    "var3": 1,
                    "variable2": 1
                },
                "local_46c": {
                    "buffer_size5": 1,
                    "buffer_size6": 3,
                    "local_value4": 1,
                    "local_variable1": 1,
                    "local_variable2": 1,
                    "param1": 1,
                    "param2_offset": 1,
                    "param2_value": 1,
                    "param3": 1,
                    "unknown_value1": 1,
                    "value": 1,
                    "value1": 1,
                    "value2": 3,
                    "value4": 1,
                    "value_c": 1,
                    "value_copy": 2,
                    "var2": 1,
                    "variable1": 1
                },
                "local_470": {
                    "buffer_size4": 1,
                    "buffer_size5": 3,
                    "constant3": 1,
                    "constant_zero": 1,
                    "count": 2,
                    "counter": 3,
                    "index": 1,
                    "local_value3": 2,
                    "local_variable8": 1,
                    "size2": 1,
                    "some_count": 1,
                    "temp_value": 1,
                    "temp_value3": 1,
                    "unused": 1,
                    "value1": 2,
                    "value3": 1,
                    "var1": 1,
                    "zero": 5
                },
                "local_474": {
                    "allocation_size": 1,
                    "buffer_size": 1,
                    "buffer_size1": 2,
                    "buffer_size2": 9,
                    "buffer_size3": 2,
                    "buffer_size4": 3,
                    "buffer_size_copy": 3,
                    "constant2": 1,
                    "local_size2": 2,
                    "local_variable7": 1,
                    "output_size": 1,
                    "size": 1,
                    "size1": 1,
                    "temp_buffer2": 1,
                    "value2": 1
                },
                "local_478": {
                    "buffer": 13,
                    "buffer_pointer": 3,
                    "buffer_ptr": 5,
                    "current_element": 1,
                    "data_pointer": 1,
                    "local_buffer": 1,
                    "local_pointer": 1,
                    "local_ptr": 2,
                    "local_variable9": 1,
                    "output_buffer": 1,
                    "ptr_to_buffer": 1,
                    "stack_buffer": 1
                },
                "local_47a": {
                    "additional_value": 1,
                    "buffer_size3": 3,
                    "data_length": 1,
                    "data_short": 1,
                    "flag_value": 1,
                    "header_data": 1,
                    "local_value2": 2,
                    "local_variable3": 1,
                    "param2_value": 2,
                    "random_value": 1,
                    "some_value": 1,
                    "source_value": 1,
                    "temp_value2": 1,
                    "ushort_value": 2,
                    "value": 11,
                    "value1": 1
                },
                "local_47c": {
                    "buffer_size2": 5,
                    "flags": 3,
                    "local_value1": 2,
                    "local_variable5": 1,
                    "mask": 1,
                    "masked_value": 7,
                    "modified_flag": 2,
                    "modified_value": 7,
                    "processed_data": 1,
                    "short_value": 1,
                    "temp_value": 1
                },
                "local_480": {
                    "buffer_size": 14,
                    "buffer_size1": 9,
                    "constant1": 1,
                    "local_size1": 2,
                    "local_variable6": 1,
                    "stack_buffer_size": 1,
                    "stack_size": 1
                },
                "local_488": {
                    "buffer": 5,
                    "buffer_array": 10,
                    "data_buffer": 1,
                    "local_array": 2,
                    "stack_array": 1,
                    "stack_buffer": 1,
                    "stack_buffers": 4,
                    "temp_buffer": 1
                },
                "param_1": {
                    "arg1": 3,
                    "context": 3,
                    "input": 3,
                    "input1": 4,
                    "input_data": 2,
                    "input_param": 3,
                    "input_param1": 1,
                    "param1": 10,
                    "result": 1,
                    "some_param": 1
                },
                "param_2": {
                    "arg2": 3,
                    "binary_data": 1,
                    "buffer": 1,
                    "data": 6,
                    "data_param": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "input2": 4,
                    "input_param2": 1,
                    "param2": 10
                },
                "process_data_00083850": {
                    "call_function2": 1
                }
            },
            "called": [
                "FUN_0008289c",
                "FUN_00083850"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint process_and_check_data_000834f0(undefined4 param1,int param2)\n\n{\n  int result;\n  int process_result;\n  undefined *buffer_array [2];\n  undefined4 buffer_size;\n  ushort masked_value;\n  undefined2 value;\n  undefined *buffer;\n  undefined4 buffer_size2;\n  undefined4 zero;\n  undefined4 value2;\n  undefined4 value2;\n  undefined4 size;\n  undefined stack_buffer [1024];\n  \n  size = *(undefined4 *)(param2 + 100);\n  value2 = *(undefined4 *)(param2 + 0x1c);\n  value = *(undefined2 *)(param2 + 0xe);\n  value2 = *(undefined4 *)(param2 + 0x24);\n  buffer_array[0] = stack_buffer;\n  masked_value = *(ushort *)(param2 + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size2 = 0x400;\n  zero = 0;\n  buffer = buffer_array[0];\n  result = process_and_validate_data_0008289c(param1,buffer_array);\n  if ((-1 < result) && (process_result = call_function2(param1,buffer_array), process_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)masked_value << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "code_backup": "\nint FUN_000834f0(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_0008289c(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083850(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n",
            "current_name": "process_and_check_data_000834f0",
            "entrypoint": "0x000834f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000834f0": "process_and_check_data_000834f0",
                "auStack_420": "stack_buffer",
                "iVar1": "result",
                "iVar2": "process_result",
                "local_424": "size",
                "local_464": "value2",
                "local_46c": "value2",
                "local_470": "zero",
                "local_474": "buffer_size2",
                "local_478": "buffer",
                "local_47a": "value",
                "local_47c": "masked_value",
                "local_480": "buffer_size",
                "local_488": "buffer_array",
                "param_1": "param1",
                "param_2": "param2",
                "process_data_00083850": "call_function2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008356c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_relocation_table": 1
                },
                "FUN_0008356c": {
                    "check_and_initialize_data_structures": 1,
                    "handle_memory_segment": 1,
                    "initialize_and_check": 1,
                    "initialize_and_check_data": 2,
                    "initialize_and_check_segment": 1,
                    "initialize_and_validate_param": 1,
                    "initialize_and_validate_parameters": 1,
                    "initialize_data": 2,
                    "initialize_data_structures": 4,
                    "initialize_or_check_data": 1,
                    "initialize_or_check_data_structures": 1,
                    "initialize_or_update_data_structures": 1,
                    "process_data": 13,
                    "update_memory_offset": 1
                },
                "iVar1": {
                    "checked_input_value": 1,
                    "condition_offset": 1,
                    "initialized_value": 1,
                    "memory_offset": 1,
                    "offset": 2,
                    "offset_value": 1,
                    "segment_flag": 1,
                    "segment_index": 1,
                    "segment_offset": 3,
                    "segment_value": 2,
                    "temp1": 2,
                    "temp_var": 2,
                    "temp_var1": 6,
                    "updated_value1": 1,
                    "value1": 3,
                    "value_1": 1,
                    "var3": 1
                },
                "iVar2": {
                    "data_offset": 1,
                    "data_segment": 1,
                    "memory_segment": 5,
                    "memory_value": 2,
                    "segment": 2,
                    "segment_offset": 2,
                    "segment_priority": 1,
                    "segment_size": 1,
                    "segment_value": 1,
                    "temp2": 2,
                    "temp_var2": 6,
                    "updated_value2": 1,
                    "value2": 3,
                    "value_2": 1,
                    "var4": 1
                },
                "initialize_data_structures_00083888": {
                    "initialize_data_structures": 9
                },
                "initialize_memory_segment_00084018": {
                    "initialize_memory_segment": 9
                },
                "param_1": {
                    "data_status": 1,
                    "out_param": 1,
                    "out_parameter": 1,
                    "output": 8,
                    "output_code": 3,
                    "output_ptr": 1,
                    "output_status": 4,
                    "result": 7,
                    "result_code": 1,
                    "status": 4
                },
                "param_2": {
                    "data": 5,
                    "input": 8,
                    "input_array": 2,
                    "input_data": 7,
                    "input_param": 1,
                    "input_params": 1,
                    "input_ptr": 1,
                    "memory_data": 1,
                    "memory_segment": 1,
                    "parameters": 1,
                    "params": 1,
                    "segment": 1,
                    "values": 1
                },
                "reverse_and_update_memory_offset_00083b10": {
                    "reverse_and_update_memory_offset": 8,
                    "reverse_and_update_offset": 1
                },
                "uVar3": {
                    "combined_value": 1,
                    "converted_u_var4": 1,
                    "data_value": 1,
                    "flag": 2,
                    "flag1": 1,
                    "flag_and_offset": 1,
                    "flags": 10,
                    "target_value_as_uint": 1,
                    "temp": 1,
                    "temp3": 2,
                    "temp_value1": 1,
                    "temp_var3": 6,
                    "value": 2,
                    "var1": 1
                },
                "uVar4": {
                    "data": 2,
                    "data_flags": 1,
                    "data_value": 1,
                    "flag": 1,
                    "flag2": 1,
                    "flags": 1,
                    "mask": 1,
                    "original_u_var4": 1,
                    "param_2_ushort": 1,
                    "param_value": 1,
                    "target_value": 1,
                    "temp": 2,
                    "temp2": 1,
                    "temp4": 2,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "temp_var4": 6,
                    "ushort_value": 3,
                    "value": 2,
                    "var2": 1
                }
            },
            "called": [
                "FUN_00083888",
                "FUN_00083b10",
                "FUN_00084018"
            ],
            "calling": [
                "FUN_000842a4",
                "FUN_0008289c",
                "FUN_00083ca8"
            ],
            "code": "\nundefined4 process_data_0008356c(undefined4 *output,int *input)\n\n{\n  int temp_var1;\n  int temp_var2;\n  uint flags;\n  ushort temp_var4;\n  \n  if ((elf_relocation_table[140].r_offset != 0) &&\n     (*(int *)(elf_relocation_table[140].r_offset + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  temp_var4 = *(ushort *)(input + 3);\n  flags = (uint)temp_var4;\n  if ((int)(flags << 0x1c) < 0) {\n    temp_var2 = input[4];\n  }\n  else {\n    if (-1 < (int)(flags << 0x1b)) {\n      *output = 9;\n      *(ushort *)(input + 3) = temp_var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(flags << 0x1d) < 0) {\n      if ((int *)input[0xc] != (int *)0x0) {\n        if ((int *)input[0xc] != input + 0x10) {\n          reverse_and_update_memory_offset(output);\n          temp_var4 = *(ushort *)(input + 3);\n        }\n        input[0xc] = 0;\n      }\n      temp_var2 = input[4];\n      temp_var4 = temp_var4 & 0xffdb;\n      *input = temp_var2;\n      input[1] = 0;\n    }\n    else {\n      temp_var2 = input[4];\n    }\n    *(ushort *)(input + 3) = temp_var4 | 8;\n    flags = (uint)(temp_var4 | 8);\n  }\n  if ((temp_var2 == 0) && ((flags & 0x280) != 0x200)) {\n    initialize_memory_segment(output,input);\n    flags = (uint)*(ushort *)(input + 3);\n    temp_var2 = input[4];\n  }\n  if ((flags & 1) == 0) {\n    temp_var1 = 0;\n    if (-1 < (int)(flags << 0x1e)) {\n      temp_var1 = input[5];\n    }\n    input[2] = temp_var1;\n  }\n  else {\n    input[6] = -input[5];\n    input[2] = 0;\n  }\n  if ((temp_var2 == 0) && ((int)((uint)*(ushort *)(input + 3) << 0x18) < 0)) {\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0008356c",
            "entrypoint": "0x0008356c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf_relocation_table",
                "FUN_0008356c": "process_data_0008356c",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "initialize_data_structures_00083888": "initialize_data_structures",
                "initialize_memory_segment_00084018": "initialize_memory_segment",
                "param_1": "output",
                "param_2": "input",
                "reverse_and_update_memory_offset_00083b10": "reverse_and_update_memory_offset",
                "uVar3": "flags",
                "uVar4": "temp_var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000836d8": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000836d8",
            "entrypoint": "0x000836d8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000836ec": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "array_data": 1,
                    "elf_array": 1,
                    "elf_rel": 1,
                    "elf_rel_array": 2,
                    "elf_relocations": 1,
                    "rel_array": 6,
                    "relocation_array": 5,
                    "relocation_table": 1,
                    "relocations": 1
                },
                "FUN_000836ec": {
                    "initialize_memory_and_jump": 1,
                    "initialize_memory_manager": 1,
                    "initialize_process": 2,
                    "process_and_call": 1,
                    "process_and_execute": 5,
                    "process_and_execute_function": 1,
                    "process_and_execute_instructions": 1,
                    "process_and_execute_jumptable": 1,
                    "process_and_exit": 2,
                    "process_and_jump": 16
                },
                "UNRECOVERED_JUMPTABLE_00": {
                    "call_function": 1,
                    "callback_function": 1,
                    "error_handler": 1,
                    "exit_function": 2,
                    "exit_with_error": 1,
                    "handle_error": 1,
                    "handle_error_jumptable": 1,
                    "jmp_table": 1,
                    "jump_function": 1,
                    "jump_table": 9,
                    "jump_table_call": 1,
                    "jump_table_function": 1,
                    "jump_table_handler": 1,
                    "jumptable": 1,
                    "unrecovered_jump_table": 4,
                    "unrecovered_jumptable": 3
                },
                "dVar2": {
                    "exit_status": 10,
                    "return_value": 1,
                    "status": 11,
                    "status_code": 1,
                    "status_message": 4,
                    "var2": 1
                },
                "exit_with_status_message_00080eec": {
                    "exit_with_error": 1,
                    "exit_with_message": 1,
                    "exit_with_status_message": 7
                },
                "iVar3": {
                    "count": 4,
                    "counter": 7,
                    "index": 11,
                    "iter_variable": 1,
                    "iteration_count": 1,
                    "length": 1,
                    "loop_counter": 1,
                    "var3": 1
                },
                "link_and_allocate_memory_000817f0": {
                    "alloc_memory": 1,
                    "allocate_memory": 6,
                    "link_and_allocate_memory": 2
                },
                "pdVar1": {
                    "array_pointer": 1,
                    "data_array": 1,
                    "data_pointer": 1,
                    "dword_var": 1,
                    "mem_ptr": 1,
                    "memory": 2,
                    "memory_location": 1,
                    "memory_pointer": 2,
                    "memory_ptr": 1,
                    "pointer": 1,
                    "pointer1": 1,
                    "pointer_array": 1,
                    "pointer_data": 1,
                    "pointer_to_array": 1,
                    "ptr1": 1,
                    "rel_array_ptr": 1,
                    "rel_offset": 1,
                    "rel_offset_array": 1,
                    "rel_offset_pointer": 1,
                    "relocated_offset": 1,
                    "relocated_pointer": 1,
                    "relocated_ptr": 1,
                    "relocation": 1,
                    "result_pointer": 1
                },
                "process_parameter_000841e4": {
                    "process_parameter": 5,
                    "set_input_parameter": 1,
                    "set_param": 1,
                    "set_parameters": 1,
                    "set_process_parameter": 1,
                    "setup_parameters": 1
                }
            },
            "called": [
                "FUN_00080eec",
                "FUN_000817f0",
                "FUN_000841e4"
            ],
            "calling": [
                "FUN_000816f8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid process_and_jump_000836ec(void)\n\n{\n  dword *memory_pointer;\n  dword status;\n  int index;\n  code *jump_table;\n  \n  process_parameter(6);\n  jump_table = (code *)0x836fb;\n  status = exit_with_status_message(1);\n  if (rel_array[48].r_offset == 0) {\n    rel_array[48].r_offset = 0x20070184;\n  }\n  index = *(int *)(rel_array[48].r_offset + 4);\n  memory_pointer = (dword *)rel_array[48].r_offset;\n  if (0x1f < index) {\n    memory_pointer = (dword *)allocate_memory(400);\n    if (memory_pointer == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *memory_pointer = rel_array[48].r_offset;\n    memory_pointer[1] = 0;\n    index = 0;\n    rel_array[48].r_offset = (dword)memory_pointer;\n    memory_pointer[0x62] = 0;\n    memory_pointer[99] = 0;\n  }\n  memory_pointer[1] = index + 1;\n  memory_pointer[index + 2] = status;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "current_name": "process_and_jump_000836ec",
            "entrypoint": "0x000836ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_000836ec": "process_and_jump_000836ec",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "dVar2": "status",
                "exit_with_status_message_00080eec": "exit_with_status_message",
                "iVar3": "index",
                "link_and_allocate_memory_000817f0": "allocate_memory",
                "pdVar1": "memory_pointer",
                "process_parameter_000841e4": "process_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083850": {
            "additional_data": {
                "FUN_00083850": {
                    "process_data": 31
                },
                "LAB_000837c8": {
                    "end_of_loop": 1
                },
                "iVar2": {
                    "count": 3,
                    "data_size": 1,
                    "index": 1,
                    "int_value": 1,
                    "int_var2": 1,
                    "length": 1,
                    "offset": 2,
                    "size": 2,
                    "start_offset": 1,
                    "start_value": 1,
                    "temp_var1": 3,
                    "temp_var2": 4,
                    "total_size": 1,
                    "value1": 3,
                    "var1": 2,
                    "var2": 2,
                    "var_1": 1,
                    "variable2": 1
                },
                "iVar5": {
                    "count": 1,
                    "int_var5": 1,
                    "offset": 4,
                    "result": 1,
                    "temp2": 1,
                    "temp_size": 2,
                    "temp_value": 2,
                    "temp_var": 2,
                    "temp_var2": 1,
                    "temp_var4": 2,
                    "temp_var5": 4,
                    "tmp_count": 1,
                    "value2": 3,
                    "var2": 1,
                    "var4": 1,
                    "var5": 2,
                    "var_4": 1,
                    "variable5": 1
                },
                "iVar7": {
                    "i_var7": 1,
                    "initial_value": 1,
                    "int_var7": 1,
                    "original_data": 1,
                    "temp": 1,
                    "temp2": 3,
                    "temp3": 1,
                    "temp_value": 1,
                    "temp_var": 3,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "temp_var6": 2,
                    "temp_var7": 3,
                    "temp_var_2": 1,
                    "tmp_var": 1,
                    "value3": 1,
                    "var1": 1,
                    "var3": 1,
                    "var6": 1,
                    "var7": 2,
                    "var_5": 1,
                    "variable7": 1
                },
                "initialize_data_structures_00083888": {
                    "initialize_data_structures": 1
                },
                "param_1": {
                    "data": 4,
                    "data1": 1,
                    "data_array": 4,
                    "data_buffer": 5,
                    "data_pointer": 1,
                    "data_pointer1": 1,
                    "data_ptr": 4,
                    "data_ptr1": 1,
                    "data_struct": 3,
                    "input_array": 4,
                    "input_data": 3
                },
                "param_2": {
                    "config_array": 1,
                    "config_ptr": 1,
                    "control_buffer": 2,
                    "control_data": 2,
                    "data2": 1,
                    "data_pointer2": 1,
                    "data_ptr2": 1,
                    "data_struct": 1,
                    "info": 3,
                    "info_array": 3,
                    "info_buffer": 1,
                    "info_pointer": 1,
                    "info_ptr": 3,
                    "info_struct": 1,
                    "output_array": 3,
                    "output_data": 3,
                    "param_array": 1,
                    "parameters": 1,
                    "processing_params": 1
                },
                "pcVar6": {
                    "callback": 5,
                    "callback_func": 3,
                    "func_ptr": 4,
                    "function_pointer": 5,
                    "function_ptr": 13,
                    "pointer_to_function": 1
                },
                "piVar1": {
                    "data_ptr": 1,
                    "info_ptr2": 1,
                    "more_data": 1,
                    "offset_pointer": 1,
                    "p_data_ptr": 1,
                    "pointer_var": 1,
                    "pointer_var1": 2,
                    "ptr": 4,
                    "ptr1": 5,
                    "ptr_1": 1,
                    "temp_pointer": 1,
                    "temp_pointer1": 1,
                    "temp_ptr": 3,
                    "temp_ptr1": 2,
                    "temp_var1": 3,
                    "var1": 2
                },
                "reverse_and_update_memory_offset_00083b10": {
                    "reverse_and_update_memory_offset": 1
                },
                "uVar3": {
                    "control_flag": 1,
                    "flag": 2,
                    "flag1": 1,
                    "flags": 11,
                    "info_flags": 1,
                    "info_short": 1,
                    "info_var": 1,
                    "temp_var2": 2,
                    "temp_var3": 4,
                    "ushort_value": 1,
                    "ushort_var": 1,
                    "ushort_var3": 1,
                    "var2": 1,
                    "var3": 2,
                    "var_2": 1
                },
                "uVar4": {
                    "combined_flags": 1,
                    "flag2": 2,
                    "flags2": 1,
                    "info_flags2": 1,
                    "info_uint": 1,
                    "info_var2": 1,
                    "modified_flags": 1,
                    "temp": 7,
                    "temp_flag": 1,
                    "temp_flags": 1,
                    "temp_value": 1,
                    "temp_var3": 2,
                    "temp_var4": 4,
                    "uint_value": 1,
                    "uint_var": 1,
                    "uint_var4": 1,
                    "var3": 1,
                    "var4": 2,
                    "var_3": 1
                },
                "unaff_r4": {
                    "additional_data": 1,
                    "constant_var": 1,
                    "init_value": 1,
                    "result": 15,
                    "return_val": 2,
                    "return_value": 4,
                    "status": 2,
                    "temp_var5": 1,
                    "unaff_reg_var1": 1,
                    "unaff_var4": 2,
                    "var5": 1
                }
            },
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "calling": [
                "FUN_000834f0",
                "FUN_000842a4",
                "FUN_00083ca8",
                "FUN_00084484"
            ],
            "code": "\nundefined4 process_data_00083850(int *data_buffer,int *info_array)\n\n{\n  int *ptr1;\n  int temp_var2;\n  ushort flags;\n  uint temp;\n  int offset;\n  code *function_ptr;\n  undefined4 result;\n  int temp2;\n  \n  if ((data_buffer != (int *)0x0) && (data_buffer[0xe] == 0)) {\n    initialize_data_structures();\n  }\n  if (*(short *)(info_array + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(info_array + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp2 = info_array[4];\n    if (temp2 == 0) {\n      return 0;\n    }\n    temp_var2 = *info_array;\n    if ((flags & 3) == 0) {\n      offset = info_array[5];\n    }\n    else {\n      offset = 0;\n    }\n    *info_array = temp2;\n    temp_var2 = temp_var2 - temp2;\n    info_array[2] = offset;\n    do {\n      if (temp_var2 < 1) {\n        return 0;\n      }\n      offset = (*(code *)info_array[9])(data_buffer,info_array[7],temp2,temp_var2,result);\n      temp_var2 = temp_var2 - offset;\n      temp2 = temp2 + offset;\n    } while (0 < offset);\nend_of_loop:\n    *(ushort *)(info_array + 3) = *(ushort *)(info_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(info_array + 3) = flags | 0x800;\n  if ((info_array[1] < 1) && (info_array[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (code *)info_array[10];\n  if (function_ptr == (code *)0x0) {\n    return 0;\n  }\n  temp = (uint)(flags | 0x800);\n  temp2 = *data_buffer;\n  *data_buffer = 0;\n  if ((flags & 0x1000) == 0) {\n    temp_var2 = (*function_ptr)(data_buffer,info_array[7],temp & 0x1000,1);\n    if ((temp_var2 == -1) && (offset = *data_buffer, offset != 0)) {\n      if ((offset == 0x1d) || (offset == 0x16)) {\n        *data_buffer = temp2;\n        return 0;\n      }\n      goto end_of_loop;\n    }\n    temp = (uint)*(ushort *)(info_array + 3);\n    function_ptr = (code *)info_array[10];\n  }\n  else {\n    temp_var2 = info_array[0x14];\n  }\n  if (((int)(temp << 0x1d) < 0) && (temp_var2 = temp_var2 - info_array[1], info_array[0xc] != 0)) {\n    temp_var2 = temp_var2 - info_array[0xf];\n  }\n  temp_var2 = (*function_ptr)(data_buffer,info_array[7],temp_var2,0);\n  if (temp_var2 == -1) {\n    offset = *data_buffer;\n    if (offset != 0) {\n      if ((offset != 0x1d) && (offset != 0x16)) {\n        *(ushort *)(info_array + 3) = *(ushort *)(info_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(info_array + 3) = *(ushort *)(info_array + 3) & 0xf7ff;\n      *info_array = info_array[4];\n      info_array[1] = 0;\n      goto LAB_00083774;\n    }\n    flags = *(ushort *)(info_array + 3) & 0xf7ff;\n    info_array[1] = 0;\n    *(ushort *)(info_array + 3) = flags;\n    *info_array = info_array[4];\n  }\n  else {\n    flags = *(ushort *)(info_array + 3) & 0xf7ff;\n    *info_array = info_array[4];\n    *(ushort *)(info_array + 3) = flags;\n    info_array[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    info_array[0x14] = temp_var2;\n  }\nLAB_00083774:\n  ptr1 = (int *)info_array[0xc];\n  *data_buffer = temp2;\n  if (ptr1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptr1 != info_array + 0x10) {\n    reverse_and_update_memory_offset(data_buffer);\n  }\n  info_array[0xc] = 0;\n  return 0;\n}\n\n",
            "current_name": "process_data_00083850",
            "entrypoint": "0x00083850",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "LAB_000837c8": "end_of_loop",
                "iVar2": "temp_var2",
                "iVar5": "offset",
                "iVar7": "temp2",
                "initialize_data_structures_00083888": "initialize_data_structures",
                "param_1": "data_buffer",
                "param_2": "info_array",
                "pcVar6": "function_ptr",
                "piVar1": "ptr1",
                "reverse_and_update_memory_offset_00083b10": "reverse_and_update_memory_offset",
                "uVar3": "flags",
                "uVar4": "temp",
                "unaff_r4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083888": {
            "additional_data": {
                "FUN_00083888": {
                    "initialize_data": 2,
                    "initialize_data_structure": 4,
                    "initialize_data_structures": 22,
                    "initialize_parameters": 3
                },
                "param_1": {
                    "base_address": 2,
                    "data": 3,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_struct": 2,
                    "data_struct_addr": 1,
                    "data_struct_address": 1,
                    "data_struct_ptr": 2,
                    "data_structure": 5,
                    "data_structure_addr": 1,
                    "data_structure_address": 1,
                    "data_structure_ptr": 3,
                    "data_structures": 2,
                    "data_structures_ptr": 1,
                    "object_pointer": 1,
                    "param": 2,
                    "parameter": 1
                },
                "puVar1": {
                    "data1_ptr": 1,
                    "data_array1": 1,
                    "data_pointer1": 1,
                    "data_struct1": 1,
                    "data_structure1": 1,
                    "first_array": 1,
                    "object_1": 1,
                    "param1": 2,
                    "parameter1": 1,
                    "pointer1": 2,
                    "ptr1": 11,
                    "ptr_data1": 1,
                    "ptr_first_array": 1,
                    "pu_var1": 1,
                    "struct1": 2,
                    "struct1_addr": 1,
                    "struct_ptr": 1,
                    "sub_struct_ptr": 1
                },
                "puVar2": {
                    "data2_ptr": 1,
                    "data_array2": 1,
                    "data_pointer2": 1,
                    "data_struct2": 1,
                    "data_structure2": 1,
                    "object_2": 1,
                    "param2": 2,
                    "parameter2": 1,
                    "pointer2": 2,
                    "ptr2": 11,
                    "ptr_data2": 1,
                    "ptr_second_array": 1,
                    "pu_var2": 1,
                    "second_array": 1,
                    "struct2": 2,
                    "struct2_addr": 1,
                    "struct2_ptr": 1,
                    "sub_struct_ptr2": 1
                }
            },
            "called": [
                "FUN_00081f00"
            ],
            "calling": [
                "FUN_000842a4",
                "FUN_0008289c",
                "FUN_00084484",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "code": "\nvoid initialize_data_structures_00083888(int data_structure)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(data_structure + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(data_structure + 4);\n    *(undefined **)(data_structure + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(data_structure + 0x2e4) = 3;\n    *(int *)(data_structure + 0x2e8) = data_structure + 0x2ec;\n    *(undefined4 *)(data_structure + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    fill_memory_with_byte_00081f00(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(data_structure + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    fill_memory_with_byte_00081f00(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(data_structure + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84221;\n    ptr2[9] = 0x84245;\n    ptr2[10] = 0x8427d;\n    ptr2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    fill_memory_with_byte_00081f00(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(data_structure + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00083888",
            "entrypoint": "0x00083888",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "data_structure",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008397c": {
            "called": [],
            "calling": [
                "FUN_00084484"
            ],
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008397c",
            "entrypoint": "0x0008397c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00083980": {
            "called": [],
            "calling": [
                "FUN_00084484"
            ],
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00083980",
            "entrypoint": "0x00083980",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000839b4": {
            "additional_data": {
                "FUN_000839b4": {
                    "process_and_validate_data": 1,
                    "process_binary_data": 1,
                    "process_data": 26,
                    "process_data_with_relocation": 1,
                    "process_input_data": 1,
                    "reverse_and_process_data": 1
                },
                "abStack_1b": {
                    "byte_array": 6,
                    "byte_queue": 1,
                    "byte_stack": 8,
                    "stack_array": 11,
                    "stack_bytes": 2,
                    "stack_data": 1,
                    "stack_values": 1,
                    "temp_array": 1
                },
                "iVar1": {
                    "offset": 15,
                    "relocation_offset": 6,
                    "relocation_result": 6,
                    "relocation_status": 1,
                    "result": 3
                },
                "local_1c": {
                    "byte_value": 10,
                    "byte_var": 1,
                    "current_byte": 5,
                    "current_byte_aux": 1,
                    "current_byte_temp": 1,
                    "current_byte_value": 1,
                    "current_data": 1,
                    "current_value": 3,
                    "first_byte": 1,
                    "new_value": 1,
                    "temp_byte": 4,
                    "temp_value": 1,
                    "value": 1
                },
                "param_1": {
                    "arg1": 3,
                    "base_address": 1,
                    "elf_data": 1,
                    "elf_handle": 1,
                    "input": 1,
                    "offset": 3,
                    "param": 2,
                    "param1": 12,
                    "param_1": 1,
                    "param_elf": 1,
                    "param_pointer": 1,
                    "param_ptr": 1,
                    "parameter1": 1,
                    "status": 1,
                    "value1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "data_length": 2,
                    "data_size": 7,
                    "input_length": 1,
                    "input_size": 1,
                    "length": 2,
                    "num_bytes": 1,
                    "param2": 10,
                    "param_count": 1,
                    "parameter2": 1,
                    "size": 3,
                    "value2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "buffer": 2,
                    "data": 8,
                    "data_array": 2,
                    "data_buffer": 1,
                    "data_ptr": 4,
                    "data_ptrs": 1,
                    "input_data": 1,
                    "param3": 10,
                    "parameter3": 1
                },
                "pbVar4": {
                    "byte_pointer": 3,
                    "byte_ptr": 1,
                    "current_byte": 4,
                    "current_char": 2,
                    "current_data": 3,
                    "current_data_byte": 2,
                    "current_data_pointer": 1,
                    "current_data_ptr": 1,
                    "current_pointer": 2,
                    "current_ptr": 3,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "pointer": 1,
                    "ptr": 2
                },
                "uVar2": {
                    "data_index": 1,
                    "error": 1,
                    "execute_result": 1,
                    "offset": 1,
                    "relocated": 1,
                    "relocation_result": 3,
                    "relocation_status": 2,
                    "result": 20,
                    "success": 1
                },
                "uVar3": {
                    "byte_value": 5,
                    "current_byte": 12,
                    "current_byte_value": 1,
                    "current_data": 1,
                    "data": 2,
                    "data_value": 2,
                    "value": 8
                },
                "uVar5": {
                    "byte_count": 1,
                    "byte_index": 2,
                    "count": 2,
                    "counter": 6,
                    "index": 15,
                    "iteration": 1,
                    "iteration_count": 2,
                    "loop_counter": 1,
                    "loop_index": 1
                }
            },
            "called": [
                "FUN_0008400c",
                "FUN_000842a4",
                "FUN_0008434c"
            ],
            "calling": [
                "FUN_00082824"
            ],
            "code": "\nuint process_and_validate_data_000839b4(undefined4 param1,uint param2,byte **param3)\n\n{\n  int offset;\n  uint result;\n  uint current_byte;\n  byte *current_byte;\n  uint index;\n  byte byte_value;\n  byte stack_array [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  offset = get_offset_from_elf_relocation_0008400c();\n  if ((offset == 1) && (param2 - 1 < 0xff)) {\n    current_byte = param2 & 0xff;\n    byte_value = (byte)current_byte;\n    result = 1;\n  }\n  else {\n    result = execute_elf_relocation_0008434c(param1,&byte_value,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    current_byte = (uint)byte_value;\n  }\n  index = 0;\n  do {\n    current_byte = param3[2] + -1;\n    param3[2] = current_byte;\n    if ((int)current_byte < 0) {\n      if ((int)param3[6] <= (int)current_byte) {\n        **param3 = (byte)current_byte;\n        current_byte = *param3;\n        current_byte = (uint)*current_byte;\n        if (current_byte != 10) goto LAB_00083a04;\n      }\n      offset = process_and_validate_data_000839b4_000842a4(param1,current_byte,param3);\n      if (offset == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)current_byte;\n      current_byte = *param3;\nLAB_00083a04:\n      *param3 = current_byte + 1;\n    }\n    if (result <= index + 1) {\n      return param2;\n    }\n    current_byte = (uint)stack_array[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "current_name": "process_and_validate_data_000839b4",
            "entrypoint": "0x000839b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000839b4": "process_and_validate_data_000839b4",
                "abStack_1b": "stack_array",
                "iVar1": "offset",
                "local_1c": "byte_value",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pbVar4": "current_byte",
                "uVar2": "result",
                "uVar3": "current_byte",
                "uVar5": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083a74": {
            "additional_data": {
                "141": {
                    "array_index": 1
                },
                "DAT_2007121c": {
                    "adjusted_info": 1,
                    "data": 1,
                    "data_offset": 4,
                    "data_storage": 1,
                    "global_offset": 2,
                    "global_variable": 1,
                    "stored_offset": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array_of_structs": 1,
                    "elf32_rel_array": 1,
                    "elf_rel_array": 1,
                    "rel_array": 4,
                    "rel_table": 1,
                    "section_data": 1
                },
                "FUNC_00081f94": {
                    "initialize": 6,
                    "initialize_func": 1,
                    "initialize_library": 1
                },
                "FUNC_00081f98": {
                    "cleanup": 3,
                    "finalize": 1
                },
                "FUN_00083a74": {
                    "calculate_and_adjust_offset": 2,
                    "calculate_and_store_offset": 1,
                    "calculate_and_update_offset": 4,
                    "calculate_offset_and_update": 1,
                    "decompiled_function": 1,
                    "perform_relocation": 1,
                    "process_rel_entry": 1,
                    "process_relocation": 1,
                    "relocate_and_adjust_memory": 1,
                    "relocate_function": 1,
                    "relocate_memory_region": 1,
                    "reverse_and_update": 3,
                    "reverse_and_update_memory": 1,
                    "reverse_and_update_memory_offset": 1,
                    "reverse_and_update_offset": 1,
                    "reverse_and_update_section": 1,
                    "reverse_and_update_segment": 1
                },
                "calculate_sum_and_store_if_valid_0008236c": {
                    "calculate_and_store_sum": 1,
                    "calculate_sum": 2,
                    "calculate_sum_and_check_validity": 1,
                    "calculate_sum_and_store": 4,
                    "calculate_sum_and_store_if_valid": 2
                },
                "iVar1": {
                    "result": 18,
                    "result1": 1,
                    "result_1": 2,
                    "sum": 3,
                    "sum_result": 6,
                    "temp_var": 1
                },
                "iVar3": {
                    "adjusted_memory": 1,
                    "adjusted_offset": 15,
                    "aligned_offset": 2,
                    "calculated_offset": 2,
                    "new_base_address": 1,
                    "new_offset": 7,
                    "new_region_address": 1,
                    "new_section_address": 1,
                    "new_segment_offset": 1
                },
                "param_1": {
                    "arg1": 2,
                    "data": 4,
                    "data_1": 1,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "input": 2,
                    "input_data": 5,
                    "input_param": 7,
                    "input_parameter": 1,
                    "input_value": 2,
                    "param": 2,
                    "param1": 1,
                    "ptr": 1,
                    "result": 1
                },
                "param_2": {
                    "arg2": 1,
                    "base_address": 1,
                    "current_offset": 4,
                    "entry_offset": 1,
                    "offset": 20,
                    "original_offset": 1,
                    "param2": 1,
                    "section_offset": 1,
                    "size_of_region": 1
                },
                "uVar2": {
                    "adjusted_offset": 1,
                    "entry_data": 1,
                    "info": 3,
                    "info_mask": 1,
                    "info_offset": 1,
                    "info_val": 1,
                    "info_value": 1,
                    "mask": 3,
                    "masked_info": 1,
                    "masked_offset": 2,
                    "masked_value": 2,
                    "offset_value": 1,
                    "r_info": 1,
                    "r_info_value": 1,
                    "rel_info": 4,
                    "rel_info_offset": 1,
                    "rel_offset": 1,
                    "rounded_offset": 1,
                    "section_size": 1,
                    "segment_offset": 1,
                    "shifted_value": 1,
                    "var1": 1
                }
            },
            "called": [
                "FUN_00081f94",
                "FUN_0008236c",
                "FUN_00081f98"
            ],
            "calling": [
                "FUN_00083b10"
            ],
            "code": "\nundefined4 reverse_and_update_memory_offset_00083a74(undefined4 input_param,int offset)\n\n{\n  int result;\n  uint rel_info;\n  int adjusted_offset;\n  \n  FUNC_00081f94();\n  rel_info = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n  adjusted_offset = ((rel_info - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_offset) {\n    result = calculate_sum_and_store(input_param,0);\n    if (result == rel_array[141].r_info + rel_info) {\n      result = calculate_sum_and_store(input_param,-adjusted_offset);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - adjusted_offset;\n        *(uint *)(rel_array[141].r_info + 4) = rel_info - adjusted_offset | 1;\n        FUNC_00081f98(input_param);\n        return 1;\n      }\n      adjusted_offset = calculate_sum_and_store(input_param,0);\n      if (0xf < (int)(adjusted_offset - rel_array[141].r_info)) {\n        DAT_2007121c = adjusted_offset - rel_array[270].r_offset;\n        *(dword *)(rel_array[141].r_info + 4) =\n             adjusted_offset - rel_array[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(input_param);\n  return 0;\n}\n\n",
            "current_name": "reverse_and_update_memory_offset_00083a74",
            "entrypoint": "0x00083a74",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00083a74": "reverse_and_update_memory_offset_00083a74",
                "calculate_sum_and_store_if_valid_0008236c": "calculate_sum_and_store",
                "iVar1": "result",
                "iVar3": "adjusted_offset",
                "param_1": "input_param",
                "param_2": "offset",
                "uVar2": "rel_info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083b10": {
            "additional_data": {
                "DAT_20071218": {
                    "memory_offset": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 2,
                    "relocation_array": 1
                },
                "FUNC_00081f94": {
                    "initialize": 1
                },
                "FUN_00083b10": {
                    "process_binary": 1,
                    "process_memory": 1,
                    "process_relocation": 1,
                    "process_relocations": 1,
                    "reverse_and_update_memory_offset": 2,
                    "reverse_and_update_memory_offsets": 2,
                    "update_and_reverse_offset": 1,
                    "update_memory_offset": 7,
                    "update_memory_offsets": 5,
                    "update_relocation": 3,
                    "update_relocation_entry": 4,
                    "update_relocation_table": 2
                },
                "bVar2": {
                    "is2007046c": 1,
                    "is_addr_aligned": 1,
                    "is_condition_met": 5,
                    "is_condition_true": 2,
                    "is_first_relocation": 1,
                    "is_flag_set": 3,
                    "is_offset2007046c": 1,
                    "is_offset_equal": 1,
                    "is_offset_equal2007046c": 1,
                    "is_offset_valid": 1,
                    "is_prev_offset_valid": 1,
                    "is_previous_relocation_offset_valid": 1,
                    "is_same_offset": 1,
                    "is_special_case": 5,
                    "is_symbol_table": 1,
                    "is_target_symbol_function": 1,
                    "is_value_true": 1,
                    "is_var2": 1,
                    "is_var2_true": 2
                },
                "dVar4": {
                    "calculated_value": 1,
                    "current_entry": 2,
                    "current_info": 1,
                    "current_offset": 6,
                    "current_relocation": 1,
                    "current_relocation_entry": 1,
                    "current_relocation_offset": 1,
                    "entry": 2,
                    "index2": 1,
                    "info1": 1,
                    "offset1": 1,
                    "offset2": 1,
                    "offset_temp": 1,
                    "offset_var": 1,
                    "offset_var1": 1,
                    "prev_reloc": 1,
                    "prev_relocation_entry": 1,
                    "rel_offset": 1,
                    "relocation_entry": 2,
                    "temp2": 1,
                    "temp_var1": 1,
                    "tmp3": 1,
                    "var4": 1
                },
                "dVar7": {
                    "adjusted_offset": 1,
                    "adjusted_offset_var": 1,
                    "base": 1,
                    "current_entry": 1,
                    "current_entry_ptr": 1,
                    "current_relocation_entry": 1,
                    "index4": 1,
                    "info2": 1,
                    "new_info": 1,
                    "new_offset": 1,
                    "new_offset_address": 1,
                    "new_reloc": 1,
                    "offset2": 1,
                    "offset4": 1,
                    "offset_pointer": 1,
                    "offset_temp2": 1,
                    "prev_entry": 1,
                    "prev_offset": 2,
                    "previous_offset": 1,
                    "rel_entry": 1,
                    "relocation_target": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp_var3": 1,
                    "temp_variable3": 1,
                    "tmp6": 1,
                    "updated_current_relocation": 1,
                    "updated_offset_var": 1,
                    "updated_value": 1,
                    "var7": 1
                },
                "dVar9": {
                    "before_final_offset": 1,
                    "found_offset": 1,
                    "index5": 1,
                    "linked_entry": 1,
                    "new_current_entry": 1,
                    "new_entry": 2,
                    "new_info": 1,
                    "new_next_offset": 1,
                    "new_offset_pointer": 1,
                    "new_offset_var": 1,
                    "new_rel_entry": 1,
                    "next_entry_ptr": 1,
                    "next_offset": 1,
                    "next_offset2": 1,
                    "next_reloc": 1,
                    "next_relocation": 1,
                    "next_value": 1,
                    "offset3": 1,
                    "offset6": 1,
                    "previous_info": 1,
                    "previous_relocation": 1,
                    "target_offset_var": 1,
                    "temp5": 1,
                    "temp_offset": 1,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "temp_variable5": 1,
                    "tmp8": 1,
                    "updated_offset": 1,
                    "var9": 1
                },
                "iVar1": {
                    "counter": 1,
                    "current_offset": 4,
                    "current_reloc": 1,
                    "first_index": 1,
                    "index": 2,
                    "index1": 5,
                    "index_var": 1,
                    "old_offset": 1,
                    "prev_offset": 2,
                    "prev_relocation_entry": 1,
                    "previous_offset": 1,
                    "previous_relocation_offset": 1,
                    "target": 1,
                    "temp1": 1,
                    "temp_var1": 3,
                    "tmp1": 1,
                    "tmp_var1": 1,
                    "var1": 1,
                    "variable1": 1
                },
                "iVar5": {
                    "i_var5": 1,
                    "index2": 4,
                    "index3": 1,
                    "next_offset": 5,
                    "next_relocation_entry": 1,
                    "prev_index": 1,
                    "prev_target": 1,
                    "previous_index": 1,
                    "previous_offset": 1,
                    "second_index": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp_var": 1,
                    "temp_var2": 5,
                    "temp_variable1": 1,
                    "tmp4": 1,
                    "tmp_var2": 1,
                    "var5": 1,
                    "variable2": 1
                },
                "param_1": {
                    "arg1": 4,
                    "context": 2,
                    "data": 1,
                    "data_struct": 1,
                    "module_base_address": 1,
                    "param": 8,
                    "param1": 11,
                    "param_1": 2,
                    "undefined_param": 1
                },
                "param_2": {
                    "address": 2,
                    "arg2": 4,
                    "num_offsets": 1,
                    "offset": 8,
                    "param2": 10,
                    "reloc_table_start": 1,
                    "relocation": 1,
                    "relocation_array": 1,
                    "relocation_entry": 1,
                    "relocation_table": 2
                },
                "reverse_and_update_memory_offset_00083a74": {
                    "reverse_and_update_memory_offset": 1
                },
                "uVar1": {
                    "value1": 1
                },
                "uVar3": {
                    "adjusted_offset": 1,
                    "data_size": 1,
                    "entry_size": 1,
                    "entry_value": 1,
                    "flag": 2,
                    "flags": 1,
                    "info": 1,
                    "mask": 2,
                    "mask_var": 1,
                    "offset": 3,
                    "offset1": 1,
                    "offset_flag": 1,
                    "offset_mask": 1,
                    "offset_value": 1,
                    "raw_value": 1,
                    "relocation_entry": 1,
                    "relocation_flags": 1,
                    "relocation_value": 1,
                    "shifted_value": 1,
                    "size": 1,
                    "temp_var": 1,
                    "tmp2": 1,
                    "val1": 1,
                    "value1": 2,
                    "value2": 1,
                    "var3": 1
                },
                "uVar6": {
                    "addend": 1,
                    "adjusted_flags": 1,
                    "adjusted_mask_var": 1,
                    "adjusted_offset": 1,
                    "aligned_offset": 1,
                    "current_offset": 1,
                    "current_relative_offset": 1,
                    "modified_value": 1,
                    "new_offset": 3,
                    "offset": 2,
                    "offset3": 1,
                    "offset_diff": 1,
                    "offset_increment": 1,
                    "offset_mask": 1,
                    "rel_size": 1,
                    "relocation_offset": 1,
                    "relocation_size": 1,
                    "temp_flag": 1,
                    "temp_variable2": 1,
                    "tmp5": 1,
                    "updated_data_size": 1,
                    "updated_offset": 1,
                    "updated_var": 1,
                    "val2": 1,
                    "value2": 2,
                    "value3": 1,
                    "var6": 1
                },
                "uVar8": {
                    "adjusted_offset": 1,
                    "adjusted_size": 1,
                    "adjusted_value": 1,
                    "final_offset": 1,
                    "new_offset": 7,
                    "new_offset2": 1,
                    "new_rel_size": 1,
                    "new_relative_offset": 1,
                    "new_size": 1,
                    "new_value": 1,
                    "new_var": 1,
                    "next_offset": 1,
                    "offset": 1,
                    "offset5": 1,
                    "relocation_size": 1,
                    "temp_flag2": 1,
                    "temp_variable4": 1,
                    "tmp7": 1,
                    "updated_flags": 1,
                    "updated_next_offset": 1,
                    "val3": 1,
                    "value3": 2,
                    "value4": 1,
                    "var8": 1
                }
            },
            "called": [
                "FUN_00083a74",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8",
                "FUN_00081800",
                "FUN_00084484",
                "FUN_00083850",
                "FUN_00081810",
                "FUN_0008356c"
            ],
            "code": "\nvoid reverse_and_update_memory_offset_00083b10(undefined4 param1,int param2)\n\n{\n  int index1;\n  bool is_special_case;\n  uint offset;\n  dword current_offset;\n  int next_offset;\n  uint new_offset;\n  dword prev_offset;\n  uint new_offset;\n  dword new_entry;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  offset = *(uint *)(param2 + -4);\n  prev_offset = param2 - 8;\n  new_offset = offset & 0xfffffffe;\n  current_offset = prev_offset + new_offset;\n  new_offset = *(uint *)(current_offset + 4) & 0xfffffffc;\n  if (rel_array[141].r_info == current_offset) {\n    new_offset = new_offset + new_offset;\n    if (-1 < (int)(offset << 0x1f)) {\n      prev_offset = prev_offset - *(int *)(param2 + -8);\n      next_offset = *(int *)(prev_offset + 0xc);\n      index1 = *(int *)(prev_offset + 8);\n      new_offset = new_offset + *(int *)(param2 + -8);\n      *(int *)(index1 + 0xc) = next_offset;\n      *(int *)(next_offset + 8) = index1;\n    }\n    current_offset = rel_array[269].r_info;\n    *(uint *)(prev_offset + 4) = new_offset | 1;\n    rel_array[141].r_info = prev_offset;\n    if (current_offset <= new_offset) {\n      reverse_and_update_memory_offset_00083b10(param1,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(current_offset + 4) = new_offset;\n    if ((offset & 1) == 0) {\n      prev_offset = prev_offset - *(int *)(param2 + -8);\n      index1 = *(int *)(prev_offset + 8);\n      new_offset = new_offset + *(int *)(param2 + -8);\n      if (index1 == 0x2007046c) {\n        is_special_case = true;\n      }\n      else {\n        next_offset = *(int *)(prev_offset + 0xc);\n        *(int *)(index1 + 0xc) = next_offset;\n        *(int *)(next_offset + 8) = index1;\n        is_special_case = false;\n      }\n    }\n    else {\n      is_special_case = false;\n    }\n    if (-1 < *(int *)(current_offset + new_offset + 4) << 0x1f) {\n      new_offset = new_offset + new_offset;\n      index1 = *(int *)(current_offset + 8);\n      if ((!is_special_case) && (index1 == 0x2007046c)) {\n        rel_array[142].r_info = prev_offset;\n        rel_array[143].r_offset = prev_offset;\n        *(undefined4 *)(prev_offset + 0xc) = 0x2007046c;\n        *(undefined4 *)(prev_offset + 8) = 0x2007046c;\n        *(uint *)(prev_offset + 4) = new_offset | 1;\n        *(uint *)(prev_offset + new_offset) = new_offset;\n        goto LAB_00083ba4;\n      }\n      next_offset = *(int *)(current_offset + 0xc);\n      *(int *)(index1 + 0xc) = next_offset;\n      *(int *)(next_offset + 8) = index1;\n    }\n    *(uint *)(prev_offset + 4) = new_offset | 1;\n    *(uint *)(prev_offset + new_offset) = new_offset;\n    if (!is_special_case) {\n      if (new_offset < 0x200) {\n        offset = new_offset & 0xfffffff8;\n        index1 = *(int *)((int)&rel_array[0x8d].r_info + offset);\n        rel_array[141].r_offset =\n             rel_array[141].r_offset | 1 << ((int)(new_offset >> 3) >> 2 & 0xffU);\n        *(int *)(prev_offset + 8) = index1;\n        *(uint *)(prev_offset + 0xc) = offset + 0x20070464;\n        *(dword *)((int)&rel_array[0x8d].r_info + offset) = prev_offset;\n        *(dword *)(index1 + 0xc) = prev_offset;\n        FUNC_00081f98(param1);\n        return;\n      }\n      offset = new_offset >> 9;\n      if (offset < 5) {\n        index1 = (new_offset >> 6) + 0x38;\n        next_offset = index1 * 2;\n      }\n      else if (offset < 0x15) {\n        index1 = offset + 0x5b;\n        next_offset = index1 * 2;\n      }\n      else if (offset < 0x55) {\n        index1 = (new_offset >> 0xc) + 0x6e;\n        next_offset = index1 * 2;\n      }\n      else if (offset < 0x155) {\n        index1 = (new_offset >> 0xf) + 0x77;\n        next_offset = index1 * 2;\n      }\n      else if (offset < 0x555) {\n        index1 = (new_offset >> 0x12) + 0x7c;\n        next_offset = index1 * 2;\n      }\n      else {\n        next_offset = 0xfc;\n        index1 = 0x7e;\n      }\n      new_entry = next_offset * 4 + 0x20070464;\n      current_offset = (&rel_array[0x8d].r_info)[next_offset];\n      if (current_offset == new_entry) {\n        rel_array[141].r_offset =\n             rel_array[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        new_entry = current_offset;\n      }\n      else {\n        do {\n          if ((*(uint *)(current_offset + 4) & 0xfffffffc) <= new_offset) break;\n          current_offset = *(dword *)(current_offset + 8);\n        } while (new_entry != current_offset);\n        new_entry = *(dword *)(current_offset + 0xc);\n      }\n      *(dword *)(prev_offset + 0xc) = new_entry;\n      *(dword *)(prev_offset + 8) = current_offset;\n      *(dword *)(new_entry + 8) = prev_offset;\n      *(dword *)(current_offset + 0xc) = prev_offset;\n    }\n  }\nLAB_00083ba4:\n  FUNC_00081f98(param1);\n  return;\n}\n\n",
            "current_name": "reverse_and_update_memory_offset_00083b10",
            "entrypoint": "0x00083b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00083b10": "reverse_and_update_memory_offset_00083b10",
                "bVar2": "is_special_case",
                "dVar4": "current_offset",
                "dVar7": "prev_offset",
                "dVar9": "new_entry",
                "iVar1": "index1",
                "iVar5": "next_offset",
                "param_1": "param1",
                "param_2": "param2",
                "reverse_and_update_memory_offset_00083a74": "reverse_and_update_memory_offset",
                "uVar3": "offset",
                "uVar6": "new_offset",
                "uVar8": "new_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "additional_data": {
                "FUN_00083ca8": {
                    "process_and_allocate_data": 1,
                    "process_and_copy_data": 5,
                    "process_and_modify_data": 2,
                    "process_data": 22,
                    "process_input_data": 1
                },
                "allocate_memory_and_link_00081810": {
                    "allocate_and_link_memory": 3,
                    "allocate_memory_and_link": 1,
                    "allocate_memory_and_link1": 1
                },
                "allocate_memory_and_link_00081fac": {
                    "allocate_and_link_memory": 2,
                    "allocate_and_link_memory2": 1,
                    "allocate_memory_and_link2": 2
                },
                "copy_memory_00081d48": {
                    "copy_memory": 5
                },
                "find_first_occurrence_000840f8": {
                    "find_first_occurrence": 5
                },
                "iVar1": {
                    "result": 23,
                    "return_value": 7,
                    "status": 1
                },
                "local_2c": {
                    "local_flag": 4,
                    "local_value": 2,
                    "local_var": 6,
                    "local_var1": 2,
                    "local_variable": 2,
                    "offset": 1,
                    "temp": 3,
                    "temp4": 3,
                    "temp5": 1,
                    "temp6": 1,
                    "temp9": 1,
                    "temp_value": 1,
                    "temp_var4": 2,
                    "temp_var5": 1
                },
                "param_1": {
                    "data": 1,
                    "data_buffer": 1,
                    "data_pointer": 3,
                    "input_array": 3,
                    "output": 12,
                    "output_buffer": 3,
                    "output_ptr": 1,
                    "output_status": 1,
                    "param": 1,
                    "param1": 2,
                    "param_array": 2,
                    "result": 1
                },
                "param_2": {
                    "data": 5,
                    "data_array": 2,
                    "info": 1,
                    "info_buffer": 1,
                    "info_pointer": 1,
                    "input": 7,
                    "input1": 1,
                    "input_array": 1,
                    "input_buffer": 3,
                    "input_data": 3,
                    "input_params": 1,
                    "input_ptr": 1,
                    "param2": 2,
                    "parameters": 1,
                    "params_array": 1
                },
                "param_3": {
                    "auxiliary_data": 2,
                    "buffer": 2,
                    "buffer_ptr": 1,
                    "data": 2,
                    "extra_buffer": 1,
                    "extra_parameters": 1,
                    "info": 2,
                    "input2": 1,
                    "linked_list_pointer": 1,
                    "memory": 4,
                    "memory_allocations": 1,
                    "memory_block": 1,
                    "output_array": 3,
                    "output_params": 1,
                    "param3": 2,
                    "parameter_list": 1,
                    "pointer_array": 1,
                    "pointers": 1,
                    "ptr_array": 1,
                    "ptr_data": 1,
                    "state": 1
                },
                "process_data_0008356c": {
                    "process_data": 2,
                    "process_data1": 1,
                    "process_data_func": 1,
                    "process_data_helper1": 1
                },
                "process_data_00083850": {
                    "process_data": 1,
                    "process_data2": 2,
                    "process_data_func": 1,
                    "process_data_helper2": 1
                },
                "puVar6": {
                    "pointer1": 3,
                    "pointer_var1": 1,
                    "ptr1": 20,
                    "ptr6": 1,
                    "temp_pointer1": 2,
                    "temp_ptr1": 3
                },
                "puVar7": {
                    "pointer2": 3,
                    "pointer_var2": 1,
                    "ptr2": 20,
                    "ptr7": 1,
                    "temp_pointer2": 2,
                    "temp_ptr2": 3
                },
                "reverse_and_update_memory_offset_00083b10": {
                    "reverse_and_update_memory_offset": 3,
                    "reverse_and_update_offset": 2
                },
                "reverse_copy_memory_00081e34": {
                    "reverse_copy_memory": 5
                },
                "uVar10": {
                    "bytes_copied": 1,
                    "copy_size": 2,
                    "count": 5,
                    "counter": 1,
                    "current": 1,
                    "data_offset2": 1,
                    "length": 1,
                    "new_len": 1,
                    "offset": 3,
                    "processed_length": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 2,
                    "temp7": 1,
                    "temp_size": 1,
                    "temp_value3": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "value3": 1,
                    "var3": 1
                },
                "uVar11": {
                    "allocated_count": 1,
                    "bytes_modified": 1,
                    "bytes_processed": 1,
                    "calculation": 1,
                    "count": 1,
                    "data_offset3": 1,
                    "num_bytes": 1,
                    "res": 1,
                    "result": 1,
                    "result2": 1,
                    "step": 1,
                    "temp": 1,
                    "temp3": 2,
                    "temp4": 2,
                    "temp5": 2,
                    "temp8": 1,
                    "temp_count": 1,
                    "temp_result": 1,
                    "temp_value4": 1,
                    "temp_var3": 3,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var7": 1,
                    "temp_var8": 1,
                    "value4": 1,
                    "var4": 1
                },
                "uVar2": {
                    "count": 1,
                    "current_value": 1,
                    "data_value1": 1,
                    "first_value": 1,
                    "input_value1": 1,
                    "size1": 1,
                    "start_index": 1,
                    "temp1": 7,
                    "temp_var1": 10,
                    "value1": 6,
                    "var1": 1
                },
                "uVar3": {
                    "data_value2": 1,
                    "end_index": 1,
                    "input_value2": 1,
                    "mask": 1,
                    "second_value": 1,
                    "size2": 1,
                    "temp": 1,
                    "temp2": 7,
                    "temp_var2": 10,
                    "value2": 6,
                    "var2": 1
                },
                "uVar4": {
                    "flag": 11,
                    "flag_var": 2,
                    "flags": 14,
                    "info_flag": 1,
                    "temp3": 1,
                    "temp_var3": 1,
                    "u_flag": 1
                },
                "uVar5": {
                    "copy_size": 1,
                    "count": 2,
                    "data_value": 1,
                    "flag2": 1,
                    "flag_value": 1,
                    "flags_copy": 1,
                    "info_value": 1,
                    "length": 5,
                    "local_count": 1,
                    "temp": 4,
                    "temp1": 2,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_value": 2,
                    "temp_var3": 2,
                    "temp_var4": 1,
                    "u_value": 1,
                    "uvar": 1,
                    "value": 2
                },
                "uVar8": {
                    "copy_amount": 1,
                    "copy_length": 2,
                    "len": 1,
                    "length": 8,
                    "length1": 1,
                    "length_var1": 1,
                    "offset": 1,
                    "size": 5,
                    "temp1": 1,
                    "temp2": 2,
                    "temp5": 1,
                    "temp_value1": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "value": 1,
                    "value1": 1,
                    "var1": 2
                },
                "uVar9": {
                    "alloc_size": 1,
                    "allocated_memory": 1,
                    "allocated_size": 3,
                    "data_offset": 1,
                    "length2": 1,
                    "length_var2": 1,
                    "mem_length": 1,
                    "memory_size": 3,
                    "new_length": 1,
                    "offset": 1,
                    "size": 4,
                    "size2": 2,
                    "temp": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp6": 1,
                    "temp_value2": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "value2": 1,
                    "var2": 2
                }
            },
            "called": [
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081e34",
                "FUN_00081d48",
                "FUN_00083850",
                "FUN_000840f8",
                "FUN_0008356c",
                "FUN_00081810"
            ],
            "calling": [
                "FUN_00082824"
            ],
            "code": "\nundefined4 process_and_copy_data_00083ca8(undefined4 *output,uint *input,uint **memory)\n\n{\n  int result;\n  uint temp_var1;\n  uint temp_var2;\n  ushort flags;\n  uint length;\n  uint *ptr1;\n  uint *ptr2;\n  uint length;\n  uint size;\n  uint count;\n  uint temp_var3;\n  uint local_var;\n  \n  if (memory[2] != (uint *)0x0) {\n    flags = *(ushort *)(input + 3);\n    length = (uint)flags;\n    if (((int)(length << 0x1c) < 0) && (input[4] != 0)) {\n      ptr2 = *memory;\n    }\n    else {\n      result = process_data(output,input);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flags = *(ushort *)(input + 3);\n      length = (uint)flags;\n      ptr2 = *memory;\n    }\n    if ((flags & 2) == 0) {\n      temp_var1 = length & 2;\n      count = temp_var1;\n      length = temp_var1;\n      local_var = temp_var1;\n      if ((length & 1) == 0) {\n        temp_var1 = 0;\n        count = 0;\n        while( true ) {\n          while (temp_var1 == 0) {\n            count = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp_var1 = *ptr1;\n          }\n          length = input[2];\n          if ((int)(length << 0x16) < 0) {\n            if (temp_var1 < length) {\n              length = *input;\n              length = temp_var1;\n            }\n            else if ((length & 0x480) == 0) {\n              length = *input;\n            }\n            else {\n              result = *input - input[4];\n              length = result + 1 + temp_var1;\n              size = (int)(input[5] * 3) / 2;\n              if (length <= size) {\n                length = size;\n              }\n              if ((int)(length << 0x15) < 0) {\n                size = allocate_and_link_memory(output,length);\n                if (size == 0) {\n                  *output = 0xc;\n                  flags = *(ushort *)(input + 3);\n                  goto LAB_00083da4;\n                }\n                copy_memory(size,input[4],result);\n                *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                size = allocate_and_link_memory(output);\n                if (size == 0) {\n                  reverse_and_update_memory_offset(output,input[4]);\n                  flags = *(ushort *)(input + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              length = size + result;\n              input[4] = size;\n              input[5] = length;\n              *input = length;\n              input[2] = length - result;\n              length = temp_var1;\n            }\n            reverse_copy_memory(length,count,length);\n            input[2] = input[2] - length;\n            *input = *input + length;\n            length = temp_var1;\n          }\n          else if ((input[4] < *input) || (length = input[5], temp_var1 < length)) {\n            if (temp_var1 < length) {\n              length = temp_var1;\n            }\n            reverse_copy_memory(*input,count,length);\n            length = input[2];\n            input[2] = length - length;\n            *input = *input + length;\n            if ((length - length == 0) && (result = process_data2(output,input), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            length = 0x7fffffff;\n            if (temp_var1 < 0x7fffffff) {\n              length = temp_var1;\n            }\n            length = (*(code *)input[9])(output,input[7],count,(length / length) * length);\n            if ((int)length < 1) goto LAB_00083da2;\n          }\n          ptr1 = memory[2];\n          count = count + length;\n          temp_var1 = temp_var1 - length;\n          memory[2] = (uint *)((int)ptr1 - length);\n          if ((uint *)((int)ptr1 - length) == (uint *)0x0) break;\n          length = (uint)*(ushort *)(input + 3);\n        }\n      }\n      else {\n        do {\n          while (temp_var1 == 0) {\n            length = *ptr2;\n            temp_var1 = ptr2[1];\n            local_var = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_var == 0) {\n            result = find_first_occurrence(length,10,temp_var1);\n            if (result == 0) {\n              count = temp_var1 + 1;\n              local_var = 1;\n            }\n            else {\n              count = (result + 1) - length;\n              local_var = 1;\n            }\n          }\n          size = *input;\n          length = count;\n          if (temp_var1 <= count) {\n            length = temp_var1;\n          }\n          temp_var2 = input[5];\n          if ((input[4] < size) && (temp_var3 = input[2] + temp_var2, (int)temp_var3 < (int)length)) {\n            reverse_copy_memory(size,length,temp_var3);\n            *input = *input + temp_var3;\n            result = process_data2(output,input);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)length < (int)temp_var2) {\n            reverse_copy_memory(size,length,length);\n            input[2] = input[2] - length;\n            *input = length + *input;\n            temp_var3 = length;\n          }\n          else {\n            temp_var3 = (*(code *)input[9])(output,input[7],length,temp_var2);\n            if ((int)temp_var3 < 1) goto LAB_00083da2;\n          }\n          count = count - temp_var3;\n          if (count == 0) {\n            result = process_data2(output,input);\n            if (result != 0) goto LAB_00083da2;\n            local_var = 0;\n          }\n          ptr1 = memory[2];\n          length = length + temp_var3;\n          temp_var1 = temp_var1 - temp_var3;\n          memory[2] = (uint *)((int)ptr1 - temp_var3);\n        } while ((uint *)((int)ptr1 - temp_var3) != (uint *)0x0);\n      }\n    }\n    else {\n      temp_var1 = 0;\n      length = 0;\n      do {\n        while( true ) {\n          count = length;\n          if (0x7ffffbff < length) {\n            count = 0x7ffffc00;\n          }\n          if (length != 0) break;\n          temp_var1 = *ptr2;\n          length = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)input[9])(output,input[7],temp_var1,count);\n        if (result < 1) {\nLAB_00083da2:\n          flags = *(ushort *)(input + 3);\nLAB_00083da4:\n          *(ushort *)(input + 3) = flags | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = memory[2];\n        temp_var1 = temp_var1 + result;\n        length = length - result;\n        memory[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_and_copy_data_00083ca8",
            "entrypoint": "0x00083ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083ca8": "process_and_copy_data_00083ca8",
                "allocate_memory_and_link_00081810": "allocate_and_link_memory",
                "allocate_memory_and_link_00081fac": "allocate_and_link_memory",
                "copy_memory_00081d48": "copy_memory",
                "find_first_occurrence_000840f8": "find_first_occurrence",
                "iVar1": "result",
                "local_2c": "local_var",
                "param_1": "output",
                "param_2": "input",
                "param_3": "memory",
                "process_data_0008356c": "process_data",
                "process_data_00083850": "process_data2",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "reverse_and_update_memory_offset_00083b10": "reverse_and_update_memory_offset",
                "reverse_copy_memory_00081e34": "reverse_copy_memory",
                "uVar10": "count",
                "uVar11": "temp_var3",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "flags",
                "uVar5": "length",
                "uVar8": "length",
                "uVar9": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084004": {
            "additional_data": {
                "0x20070878": {
                    "memory_address": 3,
                    "return_value": 1,
                    "some_memory_address": 1
                },
                "DAT_": {
                    "dat_": 1
                },
                "DAT_xxxxxxxx": {
                    "new_data": 1
                },
                "FUN_00084004": {
                    "get_base_address": 1,
                    "get_constant_value": 3,
                    "get_initial_value": 1,
                    "get_magic_number": 3,
                    "get_memory_address": 20,
                    "get_memory_location": 1,
                    "get_return_value": 2
                },
                "PTR_": {
                    "ptr_": 1
                },
                "PTR_xxxxxxxx": {
                    "new_pointer": 1
                },
                "return_value": {
                    "memory_address": 1
                },
                "undefined4": {
                    "u_int32": 1,
                    "uint32": 3,
                    "uint32_t": 9,
                    "uintptr_t": 1
                },
                "unspecified_variable": {
                    "memory_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008434c"
            ],
            "code": "\nuint32_t get_memory_address_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "current_name": "get_memory_address_00084004",
            "entrypoint": "0x00084004",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008400c": {
            "additional_data": {
                "275": {
                    "index": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "elf32_rel_array": 4,
                    "elf_rel_array": 3,
                    "elf_relocation_array": 5,
                    "elf_relocations": 1,
                    "rel_array": 4,
                    "relocation_array": 6,
                    "relocation_table": 8
                },
                "FUN_0008400c": {
                    "get_elf32_rel_offset": 5,
                    "get_elf32_rel_r_offset": 1,
                    "get_elf_rel_offset": 1,
                    "get_elf_relocation_offset": 7,
                    "get_offset": 1,
                    "get_offset_from_elf_relocation": 1,
                    "get_offset_from_relocation_table": 1,
                    "get_rel_offset": 2,
                    "get_relocated_offset": 1,
                    "get_relocation_offset": 11
                },
                "r_offset": {
                    "offset": 6,
                    "rel_offset": 1,
                    "relocation_offset": 5
                }
            },
            "called": [],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\ndword get_offset_from_elf_relocation_0008400c(void)\n\n{\n  return relocation_table[275].offset;\n}\n\n",
            "current_name": "get_offset_from_elf_relocation_0008400c",
            "entrypoint": "0x0008400c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "FUN_0008400c": "get_offset_from_elf_relocation_0008400c",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084018": {
            "additional_data": {
                "FUN_00084018": {
                    "allocate_and_initialize_memory": 4,
                    "allocate_and_link_memory": 9,
                    "allocate_and_link_memory_segment": 1,
                    "initialize_and_allocate_memory": 3,
                    "initialize_memory": 2,
                    "initialize_memory_segment": 8,
                    "initialize_segment": 2
                },
                "allocate_memory_and_link_00081810": {
                    "allocate_memory_and_link": 5
                },
                "auStack_54": {
                    "buffer": 2,
                    "dummy_array": 1,
                    "memory": 1,
                    "memory_buffer": 2,
                    "memory_segment": 2,
                    "memory_segment_array": 1,
                    "memory_stack": 2,
                    "segment_buffer": 1,
                    "segment_data": 2,
                    "segment_info": 1,
                    "stack_array": 8,
                    "stack_buffer": 2,
                    "stack_data": 1,
                    "stack_variable": 1,
                    "temp_array": 1,
                    "temp_buffer": 1,
                    "temporary_array": 1,
                    "temporary_buffer": 1
                },
                "bVar5": {
                    "check_flag": 2,
                    "condition": 1,
                    "condition_check": 1,
                    "condition_flag": 1,
                    "flag": 5,
                    "is_condition_met": 8,
                    "is_extracted": 1,
                    "is_flag_set": 3,
                    "is_segment_condition_met": 1,
                    "is_segment_flag": 1,
                    "is_segment_initialized": 1,
                    "is_segment_valid": 2,
                    "is_special_segment": 1,
                    "is_valid_flag": 1,
                    "is_valid_segment": 1,
                    "special_case": 1
                },
                "extract_return_value_and_update_param_000844bc": {
                    "extract_and_update_return_value": 1,
                    "extract_return_value_and_update_param": 4
                },
                "iVar2": {
                    "initialize_result": 1,
                    "mem_segment_size": 1,
                    "mem_size": 1,
                    "memory_result": 1,
                    "memory_segment": 1,
                    "memory_size": 6,
                    "result": 5,
                    "result1": 1,
                    "return_value": 3,
                    "segment_result": 1,
                    "segment_size": 8,
                    "segment_status": 1,
                    "value2": 1
                },
                "iVar3": {
                    "allocate_result": 1,
                    "allocated_address": 1,
                    "allocated_memory": 20,
                    "allocation_result": 4,
                    "memory_allocation_result": 1,
                    "memory_allocation_status": 1,
                    "memory_segment": 1,
                    "result2": 1,
                    "value3": 1
                },
                "initialize_memory_segment_00084494": {
                    "initialize_memory_segment": 5
                },
                "local_50": {
                    "flag": 2,
                    "flags": 1,
                    "local_flag": 3,
                    "local_flags": 2,
                    "local_param": 1,
                    "local_value": 6,
                    "local_var": 3,
                    "local_variable": 11,
                    "segment_info": 1,
                    "segment_value": 1
                },
                "param_1": {
                    "input1": 1,
                    "memory_manager": 1,
                    "memory_segment": 6,
                    "param": 5,
                    "param1": 9,
                    "param_1": 1,
                    "param_pointer": 1,
                    "param_ptr": 1,
                    "parameter_1": 1,
                    "ptr1": 1,
                    "segment_id": 1,
                    "segment_index": 1,
                    "segment_pointer": 2
                },
                "param_2": {
                    "array": 1,
                    "function_data": 4,
                    "function_params": 3,
                    "input2": 1,
                    "memory": 1,
                    "memory_block": 3,
                    "memory_info": 2,
                    "param2": 9,
                    "param_2": 1,
                    "param_array": 1,
                    "parameter_2": 1,
                    "ptr2": 1,
                    "segment_data": 3
                },
                "uVar1": {
                    "flags": 7,
                    "function_code": 1,
                    "info_flags": 1,
                    "param_value": 2,
                    "segment_flag": 1,
                    "segment_flags": 1,
                    "segment_size": 2,
                    "short_value": 2,
                    "status": 1,
                    "ushort_value": 8,
                    "value": 2,
                    "value1": 2,
                    "value_1": 1
                },
                "uVar4": {
                    "code_value": 1,
                    "flag_mask": 1,
                    "flags_as_int": 1,
                    "flags_as_uint": 1,
                    "flags_copy": 3,
                    "info_value": 1,
                    "param_value_as_uint": 1,
                    "param_value_modified": 1,
                    "short_to_int_value": 1,
                    "short_value_copy": 1,
                    "temp": 2,
                    "temp_value": 1,
                    "temp_var": 1,
                    "uint_value": 4,
                    "ushort_to_uint": 2,
                    "ushort_value": 3,
                    "ushort_value2": 2,
                    "value2": 2,
                    "value4": 1,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "calling": [
                "FUN_0008356c"
            ],
            "code": "\nvoid initialize_memory_segment_00084018(int param1,int *param2)\n\n{\n  ushort ushort_value;\n  int segment_size;\n  int allocated_memory;\n  uint uint_value;\n  bool is_condition_met;\n  undefined stack_array [4];\n  uint local_variable;\n  \n  ushort_value = *(ushort *)(param2 + 3);\n  uint_value = (uint)ushort_value;\n  if ((int)(uint_value << 0x1e) < 0) {\n    *param2 = (int)param2 + 0x43;\n    param2[4] = (int)param2 + 0x43;\n    param2[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)param2 + 0xe)) {\n    segment_size = initialize_memory_segment_00084018(param1,(int)*(short *)((int)param2 + 0xe),stack_array);\n    if (-1 < segment_size) {\n      is_condition_met = (local_variable & 0xf000) == 0x2000;\n      if (((local_variable & 0xf000) == 0x8000) && (param2[10] == 0x8427d)) {\n        segment_size = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x400;\n        param2[0x13] = 0x400;\n      }\n      else {\n        segment_size = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    ushort_value = *(ushort *)(param2 + 3);\n    uint_value = (uint)ushort_value;\n  }\n  *(ushort *)(param2 + 3) = ushort_value | 0x800;\n  if ((uint_value & 0x80) == 0) {\n    segment_size = 0x400;\n  }\n  else {\n    segment_size = 0x40;\n  }\n  is_condition_met = false;\nLAB_00084074:\n  allocated_memory = allocate_memory_and_link(param1,segment_size);\n  ushort_value = *(ushort *)(param2 + 3);\n  if (allocated_memory == 0) {\n    if (-1 < (int)((uint)ushort_value << 0x16)) {\n      *(ushort *)(param2 + 3) = ushort_value | 2;\n      *param2 = (int)param2 + 0x43;\n      param2[4] = (int)param2 + 0x43;\n      param2[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(param1 + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(param2 + 3) = ushort_value | 0x80;\n    *param2 = allocated_memory;\n    param2[4] = allocated_memory;\n    param2[5] = segment_size;\n    if ((is_condition_met) && (segment_size = extract_return_value_and_update_param(param1,(int)*(short *)((int)param2 + 0xe)), segment_size != 0))\n    {\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_memory_segment_00084018",
            "entrypoint": "0x00084018",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084018": "initialize_memory_segment_00084018",
                "allocate_memory_and_link_00081810": "allocate_memory_and_link",
                "auStack_54": "stack_array",
                "bVar5": "is_condition_met",
                "extract_return_value_and_update_param_000844bc": "extract_return_value_and_update_param",
                "iVar2": "segment_size",
                "iVar3": "allocated_memory",
                "initialize_memory_segment_00084494": "initialize_memory_segment",
                "local_50": "local_variable",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "ushort_value",
                "uVar4": "uint_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000840f8": {
            "additional_data": {
                "FUN_000840f8": {
                    "find_byte_sequence": 1,
                    "find_char_in_array": 5,
                    "find_char_in_buffer": 2,
                    "find_char_pointer": 1,
                    "find_char_ptr": 2,
                    "find_char_sequence": 1,
                    "find_character": 2,
                    "find_character_in_array": 2,
                    "find_character_in_buffer": 2,
                    "find_first_character": 1,
                    "find_first_occurrence": 7,
                    "find_last_occurrence": 1,
                    "find_param": 1,
                    "find_value_in_array": 2,
                    "search_character": 1
                },
                "LAB_00084128": {
                    "check_alignment": 1,
                    "loop_start": 1
                },
                "LAB_00084150": {
                    "character_not_found": 1,
                    "end_of_function": 1
                },
                "bVar4": {
                    "flag": 1,
                    "found": 5,
                    "is_last": 1,
                    "is_last_char": 3,
                    "is_last_character": 1,
                    "is_last_element": 4,
                    "is_last_index": 9,
                    "is_last_iteration": 3,
                    "is_target_byte_found": 1,
                    "reached_end": 2
                },
                "iVar2": {
                    "index": 29,
                    "loop_counter": 1
                },
                "param_1": {
                    "array": 17,
                    "array_ptr": 2,
                    "buffer": 4,
                    "data": 2,
                    "data_array": 1,
                    "input": 1,
                    "input_array": 4
                },
                "param_2": {
                    "char_to_find": 1,
                    "character": 10,
                    "character_to_search": 1,
                    "search_char": 1,
                    "target": 9,
                    "target_byte": 1,
                    "target_char": 5,
                    "value": 3
                },
                "param_3": {
                    "array_length": 11,
                    "array_size": 1,
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "length": 13,
                    "size": 4
                },
                "puVar3": {
                    "current": 4,
                    "current_element": 2,
                    "current_pointer": 3,
                    "current_ptr": 10,
                    "pointer": 1,
                    "ptr": 9,
                    "temp_ptr": 1
                },
                "uVar1": {
                    "masked_value": 3,
                    "result": 3,
                    "temp": 9,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_xor_val": 1,
                    "xor_result": 12
                }
            },
            "called": [],
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8"
            ],
            "code": "\nuint * find_first_occurrence_000840f8(uint *array,char character,uint length)\n\n{\n  uint xor_result;\n  int index;\n  uint *current_ptr;\n  bool is_last_index;\n  \n  if (((uint)array & 3) == 0) {\ncheck_alignment:\n    if (3 < length) {\n      current_ptr = array;\n      do {\n        xor_result = *current_ptr ^ CONCAT22(CONCAT11(character,character),CONCAT11(character,character));\n        array = current_ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        length = length - 4;\n        array = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != character) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_index = index == length - 1;\n        index = index + 1;\n        if (is_last_index) goto character_not_found;\n      } while (*(char *)array != character);\n    }\n  }\n  else if (length == 0) {\ncharacter_not_found:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != character) {\n    current_ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = current_ptr;\n      if (((uint)array & 3) == 0) goto check_alignment;\n      if (length == 0) goto character_not_found;\n      current_ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != character);\n  }\n  return array;\n}\n\n",
            "current_name": "find_first_occurrence_000840f8",
            "entrypoint": "0x000840f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000840f8": "find_first_occurrence_000840f8",
                "LAB_00084128": "check_alignment",
                "LAB_00084150": "character_not_found",
                "bVar4": "is_last_index",
                "iVar2": "index",
                "param_1": "array",
                "param_2": "character",
                "param_3": "length",
                "puVar3": "current_ptr",
                "uVar1": "xor_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000841e4": {
            "additional_data": {
                "DAT_20071244": {
                    "data": 1
                },
                "FUN_000841e4": {
                    "decode_function": 1,
                    "execute_function": 2,
                    "handle_relocation": 1,
                    "perform_action": 1,
                    "process_data": 2,
                    "process_function": 5,
                    "process_param": 6,
                    "process_parameter": 11,
                    "update_parameter": 1
                },
                "dVar1": {
                    "offset": 19,
                    "offset1": 1,
                    "r_offset": 1,
                    "r_offset_value": 1,
                    "rel_offset": 5,
                    "related_offset": 1,
                    "relocated_offset": 1,
                    "relocation_offset": 2
                },
                "iVar3": {
                    "action_ptr": 1,
                    "func_pointer": 1,
                    "func_ptr": 2,
                    "func_result": 2,
                    "function_index": 1,
                    "function_pointer": 7,
                    "function_ptr": 3,
                    "function_ptr_array": 1,
                    "function_result": 1,
                    "offset2": 1,
                    "offset_value": 1,
                    "pointer": 4,
                    "ptr": 2,
                    "value": 3,
                    "variable1": 1
                },
                "in_lr": {
                    "in_lr": 1,
                    "link_register": 2,
                    "register": 1,
                    "return_address": 2,
                    "variable5": 1
                },
                "param_1": {
                    "function_index": 1,
                    "index": 2,
                    "input": 10,
                    "input_param": 2,
                    "input_parameter": 2,
                    "input_value": 4,
                    "param": 4,
                    "parameter": 6
                },
                "pcVar4": {
                    "action_code_ptr": 1,
                    "callback": 1,
                    "callback_func": 1,
                    "code_pointer": 4,
                    "code_ptr": 3,
                    "current_function": 6,
                    "func_pointer": 1,
                    "func_ptr": 2,
                    "function": 2,
                    "function_pointer": 6,
                    "function_ptr": 3,
                    "variable2": 1
                },
                "uVar2": {
                    "error_code": 31
                },
                "uVar5": {
                    "constant": 9,
                    "constant1": 1,
                    "constant_value": 19,
                    "global_variable": 1,
                    "variable6": 1
                },
                "unaff_r4": {
                    "register4": 1,
                    "unaff_r4": 1,
                    "variable3": 1
                },
                "unaff_r5": {
                    "register5": 1,
                    "unaff_r5": 1,
                    "variable4": 1
                }
            },
            "called": [
                "FUN_00080efc",
                "thunk_FUN_00080efe"
            ],
            "calling": [
                "FUN_000836ec"
            ],
            "code": "\nint process_parameter_000841e4(uint input)\n\n{\n  dword offset;\n  undefined4 error_code;\n  int function_pointer;\n  code *current_function;\n  undefined4 variable3;\n  undefined4 unaff_r5;\n  undefined4 link_register;\n  undefined4 constant_value;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  constant_value = 0x20070460;\n  if (0x1f < input) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  function_pointer = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((function_pointer == 0) || (current_function = *(code **)(function_pointer + input * 4), current_function == (code *)0x0)) {\n    error_code = thunk_get_error_code_00080efe(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    function_pointer = FUNC_00080efc(error_code,input,input,0,constant_value,variable3,unaff_r5,link_register);\n    if ((function_pointer == -1) && (DAT_20071244 != 0)) {\n      *(int *)offset = DAT_20071244;\n      return -1;\n    }\n    return function_pointer;\n  }\n  if (current_function == (code *)0x1) {\n    return 0;\n  }\n  if (current_function != (code *)0xffffffff) {\n    *(undefined4 *)(function_pointer + input * 4) = 0;\n    (*current_function)(input);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "current_name": "process_parameter_000841e4",
            "entrypoint": "0x000841e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000841e4": "process_parameter_000841e4",
                "dVar1": "offset",
                "iVar3": "function_pointer",
                "in_lr": "link_register",
                "param_1": "input",
                "pcVar4": "current_function",
                "uVar2": "error_code",
                "uVar5": "constant_value",
                "unaff_r4": "variable3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084220": {
            "additional_data": {
                "FUN_00084220": {
                    "update_parameter_value": 1,
                    "update_value": 7,
                    "update_value_and_check_error": 16,
                    "update_value_and_notify_error": 1,
                    "update_value_if_no_error": 2,
                    "update_value_if_valid": 2,
                    "update_value_or_reset": 1,
                    "update_values": 1
                },
                "iVar1": {
                    "checked_value": 1,
                    "error_check": 2,
                    "error_check_result": 1,
                    "error_code": 2,
                    "initialized_value": 1,
                    "result": 23
                },
                "initialize_value_and_check_error_00084508": {
                    "initialize_and_check_error": 2,
                    "initialize_value_and_check_error": 4
                },
                "param_1": {
                    "data1": 1,
                    "device": 1,
                    "error": 1,
                    "input": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 2,
                    "param": 1,
                    "param1": 5,
                    "param_1": 1,
                    "param_a": 1,
                    "param_ptr": 2,
                    "param_value": 1,
                    "value": 11,
                    "value_ptr": 1
                },
                "param_2": {
                    "buffer": 1,
                    "data": 13,
                    "data2": 1,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "input_index": 1,
                    "param2": 5,
                    "param2_offset": 1,
                    "param_2": 1,
                    "param_address": 1,
                    "param_b": 1,
                    "struct_handle": 1,
                    "updated_values": 1
                }
            },
            "called": [
                "FUN_00084508"
            ],
            "calling": [],
            "code": "\nvoid update_value_and_check_error_00084220(undefined4 value,int data)\n\n{\n  int result;\n  \n  result = initialize_value_and_check_error(value,(int)*(short *)(data + 0xe));\n  if (-1 < result) {\n    *(int *)(data + 0x50) = *(int *)(data + 0x50) + result;\n    return;\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  return;\n}\n\n",
            "current_name": "update_value_and_check_error_00084220",
            "entrypoint": "0x00084220",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084220": "update_value_and_check_error_00084220",
                "iVar1": "result",
                "initialize_value_and_check_error_00084508": "initialize_value_and_check_error",
                "param_1": "value",
                "param_2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084244": {
            "additional_data": {
                "DAT_20071244": {
                    "error": 1
                },
                "FUN_00084244": {
                    "copy_and_check": 1,
                    "copy_and_check_bytes": 4,
                    "copy_and_check_data": 7,
                    "copy_and_check_error": 2,
                    "copy_and_check_value": 3,
                    "copy_and_initialize_data": 3,
                    "copy_and_initialize_value": 1,
                    "copy_and_update_values": 1,
                    "copy_and_validate_data": 1,
                    "copy_bytes_and_check_error": 1,
                    "copy_data": 1,
                    "copy_data_and_check_error": 2,
                    "copy_data_and_check_errors": 1,
                    "process_data": 3
                },
                "iVar1": {
                    "copy_result": 19,
                    "result": 11
                },
                "in_lr": {
                    "in_lr": 1,
                    "link_register": 3,
                    "return_address": 1,
                    "temp4": 1,
                    "unused4": 3,
                    "unused_4": 2,
                    "unused_lr": 3,
                    "unused_param4": 1,
                    "unused_param7": 1,
                    "unused_var4": 8,
                    "var_lr": 2
                },
                "initialized_value_and_checked_error_000844e0": {
                    "initialize_value_and_check_error": 1
                },
                "param_1": {
                    "dest": 2,
                    "dest_array": 1,
                    "destination": 3,
                    "destination_array": 1,
                    "output": 11,
                    "output_array": 3,
                    "output_buffer": 3,
                    "output_data": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "output_value": 1,
                    "result": 3
                },
                "param_2": {
                    "data": 1,
                    "input": 12,
                    "input_array": 1,
                    "input_buffer": 2,
                    "input_data": 2,
                    "input_data_address": 1,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "source": 6,
                    "source_array": 1,
                    "source_data": 1,
                    "source_struct": 1,
                    "src": 1
                },
                "param_3": {
                    "dest1": 2,
                    "destination_address": 1,
                    "length": 1,
                    "param1": 1,
                    "param_1_value": 1,
                    "param_3": 1,
                    "param_a": 12,
                    "parameter_3": 1,
                    "source": 6,
                    "source_address": 2,
                    "source_data": 1,
                    "source_offset": 1,
                    "source_ptr": 1
                },
                "param_4": {
                    "dest": 5,
                    "dest2": 2,
                    "dest_address": 2,
                    "dest_data": 1,
                    "dest_offset": 1,
                    "dest_ptr": 1,
                    "destination": 1,
                    "num_bytes": 1,
                    "param2": 1,
                    "param_2_value": 1,
                    "param_4": 1,
                    "param_b": 12,
                    "parameter_4": 1,
                    "source": 1
                },
                "uVar2": {
                    "input_value": 4,
                    "mask": 1,
                    "short_value": 1,
                    "source_value": 2,
                    "temp_value": 1,
                    "ushort_value": 2,
                    "value": 19
                },
                "unaff_r4": {
                    "register1": 1,
                    "temp1": 1,
                    "unaff_param_4": 1,
                    "unused1": 3,
                    "unused_1": 2,
                    "unused_param1": 1,
                    "unused_param4": 1,
                    "unused_r4": 2,
                    "unused_register_4": 1,
                    "unused_var1": 8,
                    "var4": 2
                },
                "unaff_r5": {
                    "register2": 1,
                    "temp2": 1,
                    "unaff_param_5": 1,
                    "unused2": 3,
                    "unused_2": 2,
                    "unused_param2": 1,
                    "unused_param5": 1,
                    "unused_r5": 2,
                    "unused_register_5": 1,
                    "unused_var2": 8,
                    "var5": 2
                },
                "unaff_r6": {
                    "register3": 1,
                    "temp3": 1,
                    "unaff_param_6": 1,
                    "unused3": 3,
                    "unused_3": 2,
                    "unused_param3": 1,
                    "unused_param6": 1,
                    "unused_r6": 2,
                    "unused_register_6": 1,
                    "unused_var3": 8,
                    "var6": 2
                }
            },
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "calling": [],
            "code": "\nvoid copy_data_and_check_error_00084244(int *output,int input,undefined4 param_a,undefined4 param_b)\n\n{\n  int copy_result;\n  ushort value;\n  undefined4 unused_var1;\n  undefined4 unused_var2;\n  undefined4 unused_var3;\n  undefined4 unused_var4;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    initialize_value_and_check_error_000844e0(output,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_20071244 = 0;\n  copy_result = copy_bytes_from_source_to_dest_00080ec8((int)*(short *)(input + 0xe),param_a,param_b,param_b,unused_var1,unused_var2,\n                       unused_var3,unused_var4);\n  if ((copy_result == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "copy_data_and_check_error_00084244",
            "entrypoint": "0x00084244",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084244": "copy_data_and_check_error_00084244",
                "iVar1": "copy_result",
                "in_lr": "unused_var4",
                "param_1": "output",
                "param_2": "input",
                "param_3": "param_a",
                "param_4": "param_b",
                "uVar2": "value",
                "unaff_r4": "unused_var1",
                "unaff_r5": "unused_var2",
                "unaff_r6": "unused_var3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008427c": {
            "additional_data": {
                "FUN_0008427c": {
                    "initialize_and_check_value": 1,
                    "initialize_and_modify_value": 2,
                    "initialize_and_set_error_bits": 1,
                    "initialize_and_set_flag": 1,
                    "initialize_and_set_status": 1,
                    "initialize_and_update_value": 17,
                    "initialize_and_update_values": 2,
                    "initialize_value": 1,
                    "initialize_value_and_check_error": 1,
                    "initialize_value_and_update_flags": 1,
                    "update_value_and_check_error": 3
                },
                "iVar1": {
                    "error_check_result": 1,
                    "initialize_result": 1,
                    "initialized_value": 11,
                    "result": 12,
                    "value": 5,
                    "value_check_result": 1
                },
                "param_1": {
                    "arg1": 2,
                    "initialize_param": 1,
                    "input_parameter": 1,
                    "param": 14,
                    "param1": 3,
                    "param_1": 4,
                    "param_pointer": 1,
                    "param_ptr": 1,
                    "status": 1,
                    "value": 3
                },
                "param_2": {
                    "arg": 1,
                    "arg2": 2,
                    "buffer": 1,
                    "data": 8,
                    "data_param": 1,
                    "data_ptr": 1,
                    "function_data": 1,
                    "input": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "param2": 4,
                    "param_2": 4,
                    "param_2_ptr": 1,
                    "pointer": 1,
                    "ptr": 2,
                    "struct_address": 1
                },
                "uVar2": {
                    "flag": 2,
                    "modified_bits": 1,
                    "modified_input": 1,
                    "modified_value": 2,
                    "new_value": 1,
                    "update_value": 1,
                    "updated_flag": 2,
                    "updated_flags": 1,
                    "updated_value": 20
                }
            },
            "called": [
                "FUN_000844e0"
            ],
            "calling": [],
            "code": "\nvoid initialize_value_and_update_flags_0008427c(undefined4 param,int data)\n\n{\n  int result;\n  ushort updated_value;\n  \n  result = initialize_value_and_check_error_000844e0(param,(int)*(short *)(data + 0xe));\n  if (result == -1) {\n    updated_value = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    updated_value = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(data + 0x50) = result;\n  }\n  *(ushort *)(data + 0xc) = updated_value;\n  return;\n}\n\n",
            "current_name": "initialize_value_and_update_flags_0008427c",
            "entrypoint": "0x0008427c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008427c": "initialize_value_and_update_flags_0008427c",
                "iVar1": "result",
                "param_1": "param",
                "param_2": "data",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000842a4": {
            "additional_data": {
                "FUN_000842a4": {
                    "decode_and_process_data": 1,
                    "process_and_modify_data": 1,
                    "process_and_update_data": 4,
                    "process_and_validate_data": 6,
                    "process_data": 16,
                    "process_data_and_update": 1,
                    "process_input": 1,
                    "process_input_data": 1
                },
                "LAB_000842d6": {
                    "data_processing_loop": 1
                },
                "LAB_000842d8": {
                    "data_processing_loop_condition": 1
                },
                "iVar4": {
                    "counter": 1,
                    "data_index": 1,
                    "data_offset": 1,
                    "data_var4": 1,
                    "index": 10,
                    "int_value": 3,
                    "integer_value": 1,
                    "offset": 1,
                    "result": 3,
                    "return_value": 3,
                    "temp_value": 1,
                    "temp_var": 2,
                    "var1": 1,
                    "variable": 1
                },
                "initialize_data_structures_00083888": {
                    "initialize_data_structures": 10
                },
                "param_1": {
                    "data": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "input": 10,
                    "input_data": 3,
                    "input_param": 3,
                    "input_param1": 4,
                    "input_parameter": 2,
                    "input_pointer": 2,
                    "value1": 2
                },
                "param_2": {
                    "byte_value": 1,
                    "character": 5,
                    "data": 1,
                    "data_length": 1,
                    "data_value": 2,
                    "flag": 2,
                    "input_byte": 1,
                    "input_param2": 4,
                    "input_value": 3,
                    "output": 2,
                    "value": 7,
                    "value2": 2
                },
                "param_3": {
                    "array": 1,
                    "buffer": 1,
                    "data": 2,
                    "data_array": 8,
                    "data_buffer": 3,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "data_struct": 8,
                    "data_struct_array": 1,
                    "data_structure": 2,
                    "data_structures": 1
                },
                "param_4": {
                    "additional_param": 1,
                    "config": 1,
                    "config_param": 2,
                    "constant": 1,
                    "constant_value": 1,
                    "data_param4": 1,
                    "data_type": 1,
                    "data_value": 1,
                    "flag": 6,
                    "input_param4": 3,
                    "option": 1,
                    "param": 2,
                    "param4": 1,
                    "param_4": 2,
                    "parameter": 1,
                    "size": 2,
                    "unsigned_value": 1,
                    "value": 1,
                    "value4": 2
                },
                "process_data_0008356c": {
                    "process_data": 8,
                    "process_data_function": 1,
                    "process_data_helper": 1
                },
                "process_data_00083850": {
                    "process_data2": 1,
                    "process_data_2": 1,
                    "process_data_again": 3,
                    "process_data_and_check": 1,
                    "process_data_function2": 1,
                    "process_data_helper2": 1,
                    "process_data_two": 1,
                    "process_remaining_data": 1
                },
                "puVar3": {
                    "byte_pointer": 2,
                    "byte_ptr": 1,
                    "current_byte_ptr": 1,
                    "current_data_byte": 1,
                    "current_pointer": 1,
                    "data": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "pointer": 4,
                    "pointer_to_char": 1,
                    "pointer_to_data": 2,
                    "pointer_value": 1,
                    "ptr": 6,
                    "ptr_data": 2,
                    "ptr_to_data": 2,
                    "ptr_value": 1,
                    "temp_pointer": 1
                },
                "uVar1": {
                    "data_length": 2,
                    "data_size": 1,
                    "data_value": 3,
                    "data_var1": 1,
                    "length": 1,
                    "third_short": 1,
                    "ushort_data": 1,
                    "ushort_val": 2,
                    "ushort_value": 15,
                    "ushort_var": 1,
                    "value": 3
                },
                "uVar2": {
                    "converted_data_size": 1,
                    "converted_value": 1,
                    "data": 1,
                    "data_uint": 1,
                    "data_value_int": 1,
                    "data_value_uint": 1,
                    "data_var2": 1,
                    "length": 1,
                    "length_uint": 1,
                    "third_short_as_u_int": 1,
                    "uint_data": 1,
                    "uint_val": 2,
                    "uint_value": 15,
                    "uint_var": 1,
                    "value_as_integer": 1,
                    "value_shifted": 1
                }
            },
            "called": [
                "FUN_00083888",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\nuint process_and_validate_data_000842a4(int input,uint value,undefined4 *data_array,undefined4 flag)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *ptr;\n  int index;\n  \n  if ((input != 0) && (*(int *)(input + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  ushort_value = *(ushort *)(data_array + 3);\n  uint_value = (uint)ushort_value;\n  data_array[2] = data_array[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = data_array[4], index == 0)) {\n    index = process_data(input,data_array,ushort_value,uint_value,flag);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(data_array + 3);\n    index = data_array[4];\n    uint_value = (uint)ushort_value;\n  }\n  value = value & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    ptr = (undefined *)*data_array;\n    index = (int)ptr - index;\n    if (index < (int)data_array[5]) {\ndata_processing_loop:\n      index = index + 1;\n      goto data_processing_loop_condition;\n    }\n  }\n  else {\n    data_array[0x19] = data_array[0x19] & 0xffffdfff;\n    ptr = (undefined *)*data_array;\n    *(ushort *)(data_array + 3) = ushort_value | 0x2000;\n    index = (int)ptr - index;\n    if (index < (int)data_array[5]) goto data_processing_loop;\n  }\n  index = process_data_again(input,data_array);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*data_array;\n  index = 1;\ndata_processing_loop_condition:\n  data_array[2] = data_array[2] + -1;\n  *data_array = ptr + 1;\n  *ptr = (char)value;\n  if (((data_array[5] == index) ||\n      (((int)((uint)*(ushort *)(data_array + 3) << 0x1f) < 0 && (value == 10)))) &&\n     (index = process_data_again(input,data_array), index != 0)) {\n    return 0xffffffff;\n  }\n  return value;\n}\n\n",
            "current_name": "process_and_validate_data_000842a4",
            "entrypoint": "0x000842a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000842a4": "process_and_validate_data_000842a4",
                "LAB_000842d6": "data_processing_loop",
                "LAB_000842d8": "data_processing_loop_condition",
                "iVar4": "index",
                "initialize_data_structures_00083888": "initialize_data_structures",
                "param_1": "input",
                "param_2": "value",
                "param_3": "data_array",
                "param_4": "flag",
                "process_data_0008356c": "process_data",
                "process_data_00083850": "process_data_again",
                "puVar3": "ptr",
                "uVar1": "ushort_value",
                "uVar2": "uint_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008434c": {
            "additional_data": {
                "FUN_0008434c": {
                    "execute_code": 1,
                    "execute_dynamic_function": 1,
                    "execute_elf_relocation": 1,
                    "execute_function": 5,
                    "execute_memory_function": 1,
                    "execute_operation": 1,
                    "execute_process": 1,
                    "execute_relocation": 6,
                    "perform_operation": 2,
                    "process_data": 2,
                    "process_function": 6,
                    "process_memory": 2,
                    "process_relocation": 1
                },
                "auStack_24": {
                    "stack_buffer": 3,
                    "stack_data": 2,
                    "temp_buffer": 3,
                    "temp_stack": 1,
                    "temporary_array": 3,
                    "temporary_buffer": 6,
                    "temporary_data": 1,
                    "temporary_storage": 1
                },
                "dVar1": {
                    "elf32_rel_info": 1,
                    "elf_rel_info": 2,
                    "elf_relocation_info": 1,
                    "function_info": 1,
                    "info_value": 1,
                    "r_info": 8,
                    "r_info_value": 1,
                    "rel_info": 4,
                    "relocation_info": 11,
                    "relocation_offset": 1
                },
                "iVar3": {
                    "function_result": 1,
                    "operation_result": 1,
                    "result": 8,
                    "result_code": 3,
                    "result_value": 1,
                    "return_value": 17
                },
                "param_1": {
                    "arg1": 1,
                    "data_pointer": 1,
                    "destination": 1,
                    "function_address": 1,
                    "function_parameter": 1,
                    "function_pointer": 1,
                    "input_pointer": 1,
                    "output": 2,
                    "output_address": 1,
                    "output_array": 3,
                    "output_data": 1,
                    "output_parameter": 1,
                    "output_pointer": 1,
                    "output_ptr": 4,
                    "output_value": 1,
                    "parameter_ptr": 1,
                    "result": 8,
                    "result_ptr": 1
                },
                "param_2": {
                    "arg2": 1,
                    "count": 2,
                    "input_flag": 1,
                    "input_length": 5,
                    "input_size": 6,
                    "int_parameter": 1,
                    "mode": 1,
                    "num_params": 1,
                    "size": 11,
                    "value": 1,
                    "value_count": 1
                },
                "param_3": {
                    "another_int_parameter": 1,
                    "arg3": 1,
                    "constant_value": 1,
                    "data": 3,
                    "input_data": 2,
                    "input_parameter": 1,
                    "input_value": 7,
                    "offset": 2,
                    "param3": 1,
                    "param_3": 1,
                    "param_value": 1,
                    "parameter_3": 1,
                    "some_data": 1,
                    "value": 8
                },
                "param_4": {
                    "arg4": 1,
                    "error_code": 3,
                    "error_ptr": 2,
                    "output": 1,
                    "output_parameter": 1,
                    "output_pointer": 2,
                    "output_ptr": 1,
                    "output_status": 1,
                    "output_value": 1,
                    "result": 5,
                    "result_array": 2,
                    "result_parameter": 1,
                    "result_pointer": 1,
                    "result_ptr": 3,
                    "status": 6
                },
                "uVar2": {
                    "addr": 1,
                    "address": 1,
                    "get_memory_address": 1,
                    "mem_address": 1,
                    "memory_address": 27
                }
            },
            "called": [
                "FUN_00084004",
                "FUN_0008439c"
            ],
            "calling": [
                "FUN_000839b4"
            ],
            "code": "\nvoid execute_elf_relocation_0008434c(undefined4 *result,int size,undefined4 value,undefined4 *status)\n\n{\n  dword relocation_info;\n  undefined4 memory_address;\n  int return_value;\n  undefined temporary_buffer [12];\n  \n  relocation_info = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (size == 0) {\n    memory_address = get_memory_address_00084004();\n    return_value = (*(code *)relocation_info)(result,temporary_buffer,0,memory_address,status);\n  }\n  else {\n    memory_address = get_memory_address_00084004();\n    return_value = (*(code *)relocation_info)(result,size,value,memory_address,status);\n  }\n  if (return_value == -1) {\n    *status = 0;\n    *result = 0x8a;\n  }\n  return;\n}\n\n",
            "current_name": "execute_elf_relocation_0008434c",
            "entrypoint": "0x0008434c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008434c": "execute_elf_relocation_0008434c",
                "auStack_24": "temporary_buffer",
                "dVar1": "relocation_info",
                "iVar3": "return_value",
                "param_1": "result",
                "param_2": "size",
                "param_3": "value",
                "param_4": "status",
                "uVar2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008439c": {
            "additional_data": {
                "0x0": {
                    "null": 1
                },
                "0x100": {
                    "256": 1,
                    "max_value": 1
                },
                "0x8a": {
                    "error_code": 2
                },
                "FUN_0008439c": {
                    "convert_byte_to_char": 1,
                    "convert_char_to_byte": 1,
                    "convert_int_to_char": 2,
                    "convert_integer_to_byte": 1,
                    "convert_integer_to_char": 1,
                    "convert_number_to_byte": 1,
                    "convert_to_char": 4,
                    "convert_value_to_byte": 2,
                    "convert_value_to_char": 1,
                    "copy_byte_to_buffer": 2,
                    "copy_byte_to_memory": 2,
                    "copy_byte_to_pointer": 1,
                    "decode_byte": 2,
                    "map_number_to_char": 1,
                    "set_value": 1,
                    "store_byte_or_return_error": 1,
                    "store_value_or_error": 1,
                    "translate_value_to_char": 1,
                    "write_byte": 1,
                    "write_byte_to_buffer": 1,
                    "write_byte_to_memory": 2,
                    "write_value_to_memory": 1
                },
                "char": {
                    "decoded_byte": 1
                },
                "param_1": {
                    "buffer": 1,
                    "converted_value_ptr": 1,
                    "destination": 2,
                    "destination_ptr": 1,
                    "memory_location": 1,
                    "output": 4,
                    "output_buffer": 3,
                    "output_byte": 3,
                    "output_data": 1,
                    "output_pointer": 1,
                    "output_ptr": 4,
                    "output_value": 6,
                    "pointer": 1,
                    "result": 2
                },
                "param_2": {
                    "buffer": 1,
                    "buffer_ptr": 1,
                    "byte_array_ptr": 1,
                    "data": 2,
                    "input": 3,
                    "input_buffer": 2,
                    "input_byte": 1,
                    "input_data": 1,
                    "input_pointer": 1,
                    "input_ptr": 4,
                    "output": 2,
                    "output_buffer": 5,
                    "output_byte": 1,
                    "output_char": 2,
                    "source": 1,
                    "source_ptr": 1,
                    "value": 2
                },
                "param_3": {
                    "byte": 1,
                    "byte_value": 4,
                    "data_size": 1,
                    "input_byte": 1,
                    "input_number": 1,
                    "input_value": 8,
                    "integer": 1,
                    "number": 1,
                    "value": 12,
                    "value_to_copy": 1
                },
                "return": {
                    "success_flag": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008434c"
            ],
            "code": "\nundefined4 convert_int_to_char_0008439c(undefined4 *output_value,undefined *output_buffer,uint value)\n\n{\n  if (output_buffer == (undefined *)0x0) {\n    success_flag 0;\n  }\n  if (value < 0x100) {\n    *output_buffer = (decoded_byte)value;\n    success_flag 1;\n  }\n  *output_value = 0x8a;\n  success_flag 0xffffffff;\n}\n\n",
            "current_name": "convert_int_to_char_0008439c",
            "entrypoint": "0x0008439c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008439c": "convert_int_to_char_0008439c",
                "char": "decoded_byte",
                "param_1": "output_value",
                "param_2": "output_buffer",
                "param_3": "value",
                "return": "success_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084484": {
            "additional_data": {
                "FUNC_0008397c": {
                    "function1": 2,
                    "function_1": 2,
                    "function_a": 1,
                    "function_one": 2,
                    "unknown_func1": 1
                },
                "FUNC_00083980": {
                    "function2": 2,
                    "function_2": 2,
                    "function_b": 1,
                    "function_two": 2,
                    "unknown_func2": 1
                },
                "FUN_00084484": {
                    "process_and_cleanup_data": 1,
                    "process_and_initialize": 1,
                    "process_and_initialize_data": 1,
                    "process_and_reverse_data": 1,
                    "process_and_update_data": 3,
                    "process_and_update_memory": 1,
                    "process_data": 15,
                    "process_data_and_reverse_memory": 1,
                    "process_data_and_update_memory": 1,
                    "process_function": 5,
                    "process_input": 1
                },
                "code": {
                    "function_pointer": 1
                },
                "dVar1": {
                    "array_offset": 1,
                    "data_offset": 4,
                    "memory_offset": 7,
                    "offset": 13,
                    "r_offset": 3,
                    "r_offset_value": 1,
                    "rel_offset": 2
                },
                "iVar3": {
                    "error": 1,
                    "error_code": 2,
                    "function_result": 1,
                    "process_result": 2,
                    "result": 3,
                    "ret_val": 1,
                    "return_value": 14,
                    "status": 7
                },
                "initialize_data_structures_00083888": {
                    "initialize_data_structures": 8
                },
                "param_1": {
                    "data": 7,
                    "data_offset": 1,
                    "data_param": 1,
                    "data_ptr": 6,
                    "data_struct": 1,
                    "input": 5,
                    "input_data": 2,
                    "input_param": 4,
                    "input_parameter": 1,
                    "input_value": 3
                },
                "process_data_00083850": {
                    "process_data": 7,
                    "process_data_with_offset": 1
                },
                "reverse_and_update_memory_offset_00083b10": {
                    "reverse_and_update_memory_offset": 5,
                    "reverse_and_update_offset": 1,
                    "reverse_update_offset": 1,
                    "update_memory_offset": 1
                },
                "uVar2": {
                    "result": 27,
                    "return_value": 4
                }
            },
            "called": [
                "FUN_00083980",
                "FUN_00083888",
                "FUN_00083b10",
                "FUN_0008397c",
                "FUN_00083850"
            ],
            "calling": [],
            "code": "\nundefined4 process_data_and_update_memory_00084484(int data)\n\n{\n  dword offset;\n  undefined4 result;\n  int return_value;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (data != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_structures();\n    }\n    if (*(short *)(data + 0xc) != 0) {\n      result = process_data(offset,data);\n      if ((*(function_pointer **)(data + 0x2c) != (function_pointer *)0x0) &&\n         (return_value = (**(function_pointer **)(data + 0x2c))(offset,*(undefined4 *)(data + 0x1c)), return_value < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n        reverse_and_update_memory_offset(offset,*(undefined4 *)(data + 0x10));\n      }\n      if (*(int *)(data + 0x30) != 0) {\n        if (*(int *)(data + 0x30) != data + 0x40) {\n          reverse_and_update_memory_offset(offset);\n        }\n        *(undefined4 *)(data + 0x30) = 0;\n      }\n      if (*(int *)(data + 0x44) != 0) {\n        reverse_and_update_memory_offset(offset);\n        *(undefined4 *)(data + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(data + 0xc) = 0;\n      FUNC_00083980();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_and_update_memory_00084484",
            "entrypoint": "0x00084484",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084484": "process_data_and_update_memory_00084484",
                "code": "function_pointer",
                "dVar1": "offset",
                "iVar3": "return_value",
                "initialize_data_structures_00083888": "initialize_data_structures",
                "param_1": "data",
                "process_data_00083850": "process_data",
                "reverse_and_update_memory_offset_00083b10": "reverse_and_update_memory_offset",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084494": {
            "additional_data": {
                "FUN_00084494": {
                    "initialize_and_check_memory": 1,
                    "initialize_memory_segment": 28,
                    "initialize_segment": 2
                },
                "iVar1": {
                    "error_code": 2,
                    "init_result": 2,
                    "init_status": 1,
                    "initialization_result": 1,
                    "initialize_result": 2,
                    "memory_init_result": 1,
                    "result": 6,
                    "result_status": 1,
                    "return_value": 1,
                    "segment_status": 2,
                    "status": 3
                },
                "param_1": {
                    "output": 1,
                    "output_address": 2,
                    "output_pointer": 6,
                    "output_ptr": 1,
                    "result": 16,
                    "result_pointer": 3,
                    "result_ptr": 1,
                    "segment_pointer": 1
                },
                "param_2": {
                    "arg1": 15,
                    "init_param1": 1,
                    "mem_param1": 1,
                    "memory_segment_size": 1,
                    "param_a": 1,
                    "segment_id": 1,
                    "segment_size": 8,
                    "size": 1,
                    "value1": 2
                },
                "param_3": {
                    "arg2": 15,
                    "init_param2": 1,
                    "initial_value": 3,
                    "initial_value1": 1,
                    "mem_param2": 1,
                    "page_size": 1,
                    "param3": 3,
                    "param_b": 1,
                    "start_address": 1,
                    "start_value": 1,
                    "value": 1,
                    "value2": 2
                },
                "param_4": {
                    "alignment": 1,
                    "arg3": 15,
                    "extra_param": 1,
                    "extra_parameter": 1,
                    "flag": 2,
                    "increment_value": 1,
                    "init_param3": 1,
                    "initial_value2": 1,
                    "mem_param3": 1,
                    "param4": 3,
                    "param_c": 1,
                    "size": 1,
                    "value3": 2
                }
            },
            "called": [
                "FUN_00080eb0"
            ],
            "calling": [
                "FUN_00084018"
            ],
            "code": "\nvoid initialize_memory_segment_00084494(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = initialize_memory_segment_00084494_00080eb0(arg1,arg2,arg2,0,arg3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_memory_segment_00084494",
            "entrypoint": "0x00084494",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084494": "initialize_memory_segment_00084494",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000844bc": {
            "additional_data": {
                "FUN_000844bc": {
                    "check_return_value": 1,
                    "check_return_value_and_update": 1,
                    "extract_return_value": 4,
                    "extract_return_value_and_update_input": 1,
                    "extract_return_value_and_update_param": 1,
                    "extract_return_value_and_update_parameter": 1,
                    "find_return_value_and_update_param": 1,
                    "handle_return_value": 1,
                    "initialize_return_value": 1,
                    "process_return_value": 10,
                    "update_param": 1,
                    "update_param_if_value_invalid": 1,
                    "update_parameter": 1,
                    "update_return_value": 6
                },
                "iVar1": {
                    "return_value": 31
                },
                "param_1": {
                    "output": 14,
                    "output_param": 1,
                    "output_value": 4,
                    "result": 8,
                    "result_pointer": 2,
                    "updated_value": 1
                },
                "param_2": {
                    "input": 14,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 15
                }
            },
            "called": [
                "FUN_00080eba"
            ],
            "calling": [
                "FUN_00084018"
            ],
            "code": "\nvoid extract_return_value_and_update_param_000844bc(int *output,undefined4 input_value)\n\n{\n  int return_value;\n  \n  DAT_20071244 = 0;\n  return_value = get_return_value_00080eba(input_value);\n  if ((return_value == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "extract_return_value_and_update_param_000844bc",
            "entrypoint": "0x000844bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000844bc": "extract_return_value_and_update_param_000844bc",
                "iVar1": "return_value",
                "param_1": "output",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000844e0": {
            "additional_data": {
                "FUN_000844e0": {
                    "assign_initialized_value_to_param": 1,
                    "calculate_result": 1,
                    "copy_if_initialized": 1,
                    "copy_value_if_initialized": 5,
                    "copy_value_if_needed": 1,
                    "copy_value_if_valid": 1,
                    "copy_value_to_parameter": 1,
                    "find_value_and_assign": 1,
                    "initialize_and_assign": 1,
                    "initialize_and_check_value": 7,
                    "initialize_if_not_negative": 1,
                    "initialize_value_and_check": 1,
                    "initialize_value_and_check_error": 1,
                    "process_data": 1,
                    "process_initialization": 1,
                    "resolve_error": 1,
                    "set_return_value_if_initialized": 1,
                    "update_param_if_initialized": 1,
                    "update_param_value": 1,
                    "update_parameter_if_valid": 1,
                    "update_value": 1
                },
                "iVar1": {
                    "init_result": 3,
                    "initialization_result": 6,
                    "initialized_result": 1,
                    "initialized_value": 1,
                    "result": 14,
                    "return_value": 2
                },
                "initialize_value_to_zero_00080ebe": {
                    "initialize_to_zero": 1,
                    "initialize_values_to_zero": 1
                },
                "param_1": {
                    "destination": 4,
                    "output": 7,
                    "output_param": 2,
                    "output_ptr": 1,
                    "output_value": 4,
                    "result": 10,
                    "result_pointer": 1,
                    "result_ptr": 1,
                    "return_value": 1
                },
                "param_2": {
                    "arg1": 3,
                    "input1": 5,
                    "input_1": 4,
                    "input_param1": 2,
                    "input_param_1": 1,
                    "input_value1": 2,
                    "param2": 1,
                    "source1": 1,
                    "value1": 9,
                    "value_1": 1,
                    "value_2": 1
                },
                "param_3": {
                    "arg2": 3,
                    "input2": 5,
                    "input_2": 4,
                    "input_param2": 2,
                    "input_param_2": 1,
                    "input_value2": 2,
                    "param3": 1,
                    "source2": 1,
                    "value2": 9,
                    "value_2": 1,
                    "value_3": 1
                },
                "param_4": {
                    "arg3": 3,
                    "input3": 5,
                    "input_3": 4,
                    "input_param3": 2,
                    "input_param_3": 1,
                    "input_value3": 2,
                    "param4": 1,
                    "source3": 1,
                    "value3": 9,
                    "value_3": 1,
                    "value_4": 1
                }
            },
            "called": [
                "FUN_00080ebe"
            ],
            "calling": [
                "FUN_00084244",
                "FUN_0008427c"
            ],
            "code": "\nvoid initialize_value_and_check_error_000844e0(int *result,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = initialize_values_to_zero(value1,value2,value3);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_value_and_check_error_000844e0",
            "entrypoint": "0x000844e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000844e0": "initialize_value_and_check_error_000844e0",
                "iVar1": "result",
                "initialize_value_to_zero_00080ebe": "initialize_values_to_zero",
                "param_1": "result",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084508": {
            "additional_data": {
                "FUN_00084508": {
                    "initialize_and_check": 5,
                    "initialize_and_check_error": 1,
                    "initialize_and_check_value": 16,
                    "initialize_and_check_values": 1,
                    "initialize_and_get_result": 1,
                    "initialize_and_return": 1,
                    "initialize_and_return_error_code": 1,
                    "initialize_and_return_value": 1,
                    "initialize_value": 1,
                    "initialize_value_and_check": 1,
                    "initialize_value_and_check_error": 1,
                    "initialize_value_and_return": 1
                },
                "iVar1": {
                    "error_code": 1,
                    "init_result": 9,
                    "initialization_result": 3,
                    "result": 7,
                    "status": 2
                },
                "param_1": {
                    "error_pointer": 1,
                    "output": 5,
                    "output_value": 8,
                    "result": 14,
                    "result_ptr": 3
                },
                "param_2": {
                    "arg1": 8,
                    "input1": 3,
                    "input_1": 5,
                    "input_param_1": 2,
                    "input_value1": 1,
                    "input_value_1": 2,
                    "param1": 1,
                    "param_2": 1,
                    "val1": 1,
                    "value1": 5,
                    "value_1": 1
                },
                "param_3": {
                    "arg2": 8,
                    "input2": 3,
                    "input_2": 5,
                    "input_param_2": 2,
                    "input_value2": 1,
                    "input_value_2": 2,
                    "param2": 1,
                    "param_3": 1,
                    "val2": 1,
                    "value2": 5,
                    "value_2": 1
                },
                "param_4": {
                    "arg3": 8,
                    "input3": 3,
                    "input_3": 5,
                    "input_param_3": 2,
                    "input_value3": 1,
                    "input_value_3": 2,
                    "param3": 1,
                    "param_4": 1,
                    "val3": 1,
                    "value3": 5,
                    "value_3": 1
                }
            },
            "called": [
                "FUN_00080ec2"
            ],
            "calling": [
                "FUN_00084220"
            ],
            "code": "\nvoid initialize_value_and_check_error_00084508(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int init_result;\n  \n  DAT_20071244 = 0;\n  init_result = initialize_value_00080ec2(arg1,arg2,arg3);\n  if ((init_result == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_value_and_check_error_00084508",
            "entrypoint": "0x00084508",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084508": "initialize_value_and_check_error_00084508",
                "iVar1": "init_result",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084530": {
            "additional_data": {
                "FUN_00084530": {
                    "calculate_difference": 5,
                    "calculate_difference_and_subtract": 2,
                    "calculate_difference_if_zero": 1,
                    "calculate_difference_or_default": 2,
                    "calculate_difference_or_negate": 2,
                    "calculate_difference_or_negative": 1,
                    "calculate_difference_or_return_default": 1,
                    "calculate_difference_or_return_error": 1,
                    "calculate_difference_or_return_minus_one": 2,
                    "calculate_difference_or_return_neg_one": 1,
                    "calculate_difference_or_return_negative": 6,
                    "calculate_difference_or_return_negative_one": 5,
                    "calculate_difference_or_return_param": 1,
                    "calculate_result": 1
                },
                "iVar1": {
                    "difference": 8,
                    "difference_or_error": 1,
                    "difference_or_return_value": 1,
                    "difference_result": 1,
                    "result": 16
                },
                "param_1": {
                    "first_param": 1,
                    "input1": 3,
                    "input_1": 15,
                    "input_param_1": 6,
                    "input_param_one": 1,
                    "input_value_1": 4,
                    "value_1": 1
                },
                "param_2": {
                    "input2": 3,
                    "input_2": 15,
                    "input_param_2": 6,
                    "input_param_two": 1,
                    "input_value_2": 4,
                    "second_param": 1,
                    "value_2": 1
                },
                "param_3": {
                    "condition_1": 1,
                    "difference_flag": 1,
                    "flag_1": 1,
                    "input3": 3,
                    "input_3": 12,
                    "input_param_3": 6,
                    "input_param_three": 1,
                    "input_value_3": 4,
                    "param_3": 1,
                    "third_param": 1
                },
                "param_4": {
                    "condition_2": 1,
                    "flag_2": 1,
                    "fourth_param": 1,
                    "input4": 3,
                    "input_4": 12,
                    "input_param_4": 6,
                    "input_param_four": 1,
                    "input_value_4": 4,
                    "param_4": 1,
                    "subtract_flag": 1
                }
            },
            "called": [
                "FUN_0008458c"
            ],
            "calling": [
                "FUN_0008289c"
            ],
            "code": "\nint calculate_difference_or_return_negative_one_00084530(int input_1,int input_2,int input_3,int input_4)\n\n{\n  int result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  result = calculate_difference_and_subtract_0008458c();\n  return result;\n}\n\n",
            "current_name": "calculate_difference_or_return_negative_one_00084530",
            "entrypoint": "0x00084530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084530": "calculate_difference_or_return_negative_one_00084530",
                "iVar1": "result",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008455c": {
            "additional_data": {
                "CONCAT44": {
                    "combine_parameters": 1,
                    "combine_values": 1
                },
                "FUN_0008455c": {
                    "calculate_difference": 5,
                    "subtract_and_adjust": 1,
                    "subtract_and_adjust_parameters": 1,
                    "subtract_and_adjust_params": 1,
                    "subtract_and_adjust_values": 1,
                    "subtract_and_assign": 1,
                    "subtract_and_set_difference": 1,
                    "subtract_and_set_value": 1,
                    "subtract_and_store": 5,
                    "subtract_and_store_difference": 2,
                    "subtract_and_store_result": 3,
                    "subtract_and_update": 4,
                    "subtract_and_update_integers": 1,
                    "subtract_and_update_parameters": 1,
                    "subtract_operation": 1,
                    "subtract_param_from_array": 1,
                    "subtract_values": 1
                },
                "divide_with_remainder_000845c0": {
                    "divide_with_remainder": 1
                },
                "lVar2": {
                    "divided_and_multiplied_value": 1,
                    "division_result": 3,
                    "multiplied_value": 4,
                    "product": 14,
                    "product_value": 1,
                    "quotient": 1,
                    "result": 3,
                    "result2": 1,
                    "result_long_long": 1,
                    "temp_result": 1,
                    "temp_value": 1
                },
                "param_1": {
                    "array_value": 1,
                    "input": 1,
                    "input1": 4,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 15,
                    "input_value1": 1,
                    "minuend": 3,
                    "original_value": 2,
                    "value1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "constant_value": 1,
                    "input2": 4,
                    "input_value2": 1,
                    "int_param": 1,
                    "new_value": 1,
                    "offset": 3,
                    "param2": 1,
                    "param_2": 3,
                    "second_input_value": 1,
                    "second_parameter": 1,
                    "subtract_value": 4,
                    "subtracted_value": 1,
                    "subtraction_value": 2,
                    "subtrahend": 3,
                    "value": 1,
                    "value2": 1,
                    "value_2": 1,
                    "value_to_subtract": 1
                },
                "param_3": {
                    "concat_value_lower": 1,
                    "lower_bits": 2,
                    "lower_bits_multiplier": 1,
                    "lower_value": 1,
                    "multiplier1": 1,
                    "multiplier_low": 1,
                    "operand_high": 1
                },
                "param_4": {
                    "concat_value_upper": 1,
                    "higher_bits": 2,
                    "multiplier2": 1,
                    "multiplier_high": 1,
                    "operand_low": 1,
                    "upper_bits_multiplier": 1,
                    "upper_value": 1
                },
                "param_5": {
                    "difference": 1,
                    "output": 2,
                    "output_array": 8,
                    "output_parameters": 2,
                    "output_values": 3,
                    "result": 2,
                    "result_array": 13
                },
                "uVar1": {
                    "calculated_value": 5,
                    "computed_value": 1,
                    "lower_value_multiplied": 1,
                    "multiplied_result": 1,
                    "multiplied_value": 1,
                    "quotient": 1,
                    "result": 15,
                    "result1": 1,
                    "result_as_uint": 1,
                    "result_lower": 1,
                    "result_lower_bits": 1,
                    "result_u_int": 1,
                    "result_value": 1
                }
            },
            "called": [
                "FUN_000845c0"
            ],
            "calling": [],
            "code": "\nvoid subtract_and_store_result_0008455c(uint input_value,int input2,undefined4 lower_bits,undefined4 higher_bits,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = divide_with_remainder();\n  product = product * combine_values(higher_bits,lower_bits);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (input2 - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "current_name": "subtract_and_store_result_0008455c",
            "entrypoint": "0x0008455c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_values",
                "FUN_0008455c": "subtract_and_store_result_0008455c",
                "divide_with_remainder_000845c0": "divide_with_remainder",
                "lVar2": "product",
                "param_1": "input_value",
                "param_2": "input2",
                "param_3": "lower_bits",
                "param_4": "higher_bits",
                "param_5": "result_array",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008458c": {
            "additional_data": {
                "FUN_0008458c": {
                    "calculate_and_subtract": 1,
                    "calculate_and_update": 1,
                    "calculate_and_update_remainder": 1,
                    "calculate_and_update_values": 1,
                    "calculate_difference": 17,
                    "calculate_difference_and_subtract": 1,
                    "calculate_remainder_and_update": 3,
                    "calculate_subtraction_and_adjustment": 1,
                    "subtract_and_adjust": 1,
                    "subtract_and_store_remainder": 1,
                    "subtract_and_update": 1,
                    "subtract_and_update_values": 1,
                    "subtract_from_params": 1
                },
                "calculate_quotient_and_remainder_00084860": {
                    "calculate_quotient_and_remainder": 2
                },
                "lVar2": {
                    "calculated_value": 1,
                    "multiplication_result": 1,
                    "multiplier": 1,
                    "product": 9,
                    "quotient": 6,
                    "quotient_and_remainder": 4,
                    "quotient_remainder": 4,
                    "quotient_remainder_product": 1,
                    "quotient_result": 1,
                    "quotient_times_product": 1
                },
                "param_1": {
                    "dividend": 15,
                    "input_1": 1,
                    "input_num": 1,
                    "input_param": 1,
                    "input_value": 11,
                    "minuend": 1,
                    "original_value": 1
                },
                "param_2": {
                    "another_param": 1,
                    "divisor": 12,
                    "input_2": 1,
                    "input_number": 1,
                    "int_param": 1,
                    "offset": 1,
                    "other_value": 1,
                    "param2": 1,
                    "param_2": 3,
                    "param_value": 1,
                    "second_input": 1,
                    "second_param": 1,
                    "secondary_param": 1,
                    "subtract_val": 1,
                    "subtracted_value": 1,
                    "subtrahend": 3
                },
                "param_3": {
                    "factor_high": 1,
                    "high_bits": 1,
                    "left_operand_lower": 1,
                    "lower_half_multiplier": 1
                },
                "param_4": {
                    "factor_low": 1,
                    "left_operand_upper": 1,
                    "low_bits": 1,
                    "upper_half_multiplier": 1
                },
                "param_5": {
                    "output_array": 6,
                    "output_values": 2,
                    "quotient_and_remainder": 1,
                    "remainder": 1,
                    "result": 6,
                    "result_array": 13,
                    "results": 1,
                    "results_array": 1
                },
                "uVar1": {
                    "calculated_quotient": 1,
                    "calculated_value": 1,
                    "calculation_result": 1,
                    "converted_value": 2,
                    "dividend_remainder": 1,
                    "final_result": 1,
                    "product_to_uint": 1,
                    "quotient": 11,
                    "quotient_as_uint": 1,
                    "quotient_in_uint": 1,
                    "remainder": 3,
                    "result": 3,
                    "temp_var": 1,
                    "whole_quotient": 1
                }
            },
            "called": [
                "FUN_00084860"
            ],
            "calling": [
                "FUN_00084530"
            ],
            "code": "\nvoid calculate_difference_and_subtract_0008458c(uint dividend,int divisor,undefined4 factor_high,undefined4 left_operand_upper,int *result_array)\n\n{\n  uint quotient;\n  longlong product;\n  \n  product = calculate_quotient_and_remainder();\n  product = product * CONCAT44(left_operand_upper,factor_high);\n  quotient = (uint)product;\n  *result_array = dividend - quotient;\n  result_array[1] = (divisor - (int)((ulonglong)product >> 0x20)) - (uint)(dividend < quotient);\n  return;\n}\n\n",
            "current_name": "calculate_difference_and_subtract_0008458c",
            "entrypoint": "0x0008458c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008458c": "calculate_difference_and_subtract_0008458c",
                "calculate_quotient_and_remainder_00084860": "calculate_quotient_and_remainder",
                "lVar2": "product",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "factor_high",
                "param_4": "left_operand_upper",
                "param_5": "result_array",
                "uVar1": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000845c0": {
            "additional_data": {
                "FUN_000845c0": {
                    "calculate_division": 1,
                    "div_and_mod": 1,
                    "div_remainder": 1,
                    "divide_and_remainder": 1,
                    "divide_unsigned": 3,
                    "divide_unsigned_integers": 5,
                    "divide_with_overflow_check": 1,
                    "divide_with_remainder": 12,
                    "division_algorithm": 1,
                    "division_with_remainder": 4,
                    "perform_unsigned_division": 1
                },
                "bVar13": {
                    "carry": 3,
                    "carry_flag": 9,
                    "expression_result": 1,
                    "has_carry": 1,
                    "is_borrow": 3,
                    "is_carry": 3,
                    "is_divisor_negative": 1,
                    "is_negative": 2,
                    "is_negative_divisor": 1,
                    "is_overflow": 1,
                    "is_temp_1_carry": 1,
                    "is_temp_negative": 1,
                    "is_temporary": 1,
                    "temp_bool": 1
                },
                "bVar15": {
                    "is_carry_set": 1
                },
                "iVar6": {
                    "bit_count": 1,
                    "bit_shift": 1,
                    "shift": 3,
                    "shift_amount": 13,
                    "shift_bits": 1,
                    "shift_count": 6,
                    "shift_value": 1,
                    "shifts": 2
                },
                "lVar1": {
                    "combined_quotient": 1,
                    "product": 6,
                    "quotient": 2,
                    "quotient_product": 1,
                    "result": 1,
                    "temp_long": 1
                },
                "param_1": {
                    "dividend": 29,
                    "dividend1": 1,
                    "numerator": 1
                },
                "param_2": {
                    "denominator": 1,
                    "dividend2": 1,
                    "dividend_divisor_quotient": 1,
                    "dividend_extra": 1,
                    "dividend_hi": 2,
                    "dividend_high": 7,
                    "dividend_low": 1,
                    "dividend_msb": 1,
                    "dividend_ptr": 1,
                    "dividend_shifted": 1,
                    "dividend_top": 3,
                    "dividend_upper": 4,
                    "dividend_upper32": 1,
                    "dividend_upper_32": 1,
                    "dividend_upper_bits": 1,
                    "dividend_upper_half": 1,
                    "divisor": 2,
                    "quotient": 1
                },
                "param_3": {
                    "divisor": 24,
                    "divisor1": 1,
                    "divisor_lower": 1,
                    "divisor_top": 1,
                    "divisor_upper32": 1,
                    "quotient": 3
                },
                "param_4": {
                    "dividend_divisor_remainder": 1,
                    "divisor": 2,
                    "divisor2": 1,
                    "divisor_extra": 1,
                    "divisor_hi": 2,
                    "divisor_high": 7,
                    "divisor_low": 1,
                    "divisor_msb": 1,
                    "divisor_ptr": 1,
                    "divisor_shifted": 1,
                    "divisor_top": 2,
                    "divisor_upper": 4,
                    "divisor_upper_32": 1,
                    "divisor_upper_bits": 1,
                    "divisor_upper_half": 1,
                    "remainder": 4
                },
                "uVar": {
                    "temp_quotient": 1
                },
                "uVar1": {
                    "temp5": 1
                },
                "uVar10": {
                    "dividend_abs": 1,
                    "dividend_remainder": 1,
                    "divisor_quotient": 1,
                    "is_dividend2_negative": 1,
                    "is_divisor_negative": 3,
                    "is_negative_divisor": 3,
                    "negative_divisor": 1,
                    "new_quotient_low": 1,
                    "product_high": 1,
                    "quotient": 1,
                    "quotient_part1": 1,
                    "quotient_temp": 1,
                    "quotient_temp1": 1,
                    "sign2": 1,
                    "temp": 1,
                    "temp3": 5,
                    "temp5": 1,
                    "temp9": 1,
                    "temp_3": 1,
                    "temp_divisor": 2,
                    "temp_quotient": 1,
                    "u_var10": 1
                },
                "uVar11": {
                    "carry": 1,
                    "dividend_sign_bit": 1,
                    "divisor_remainder": 1,
                    "final_quotient_lower_32": 1,
                    "is_divisor1_negative": 1,
                    "is_negative_divisor": 1,
                    "is_result_negative": 1,
                    "multiplication_result_high": 1,
                    "new_partial_product_low": 1,
                    "partial_remainder": 1,
                    "product_temp_high": 1,
                    "quotient_part2": 1,
                    "quotient_temp2": 1,
                    "shifted_divisor": 1,
                    "sign3": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 5,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_4": 1,
                    "temp_divisor_hi": 1,
                    "temp_quotient_high": 1,
                    "temp_remainder": 1,
                    "u_var11": 1
                },
                "uVar12": {
                    "dividend_divisor_top": 1,
                    "divisor_abs": 1,
                    "divisor_extended": 1,
                    "divisor_lower_32": 1,
                    "divisor_lower_half": 1,
                    "divisor_shifted": 1,
                    "divisor_sign_bit": 1,
                    "divisor_temp": 1,
                    "is_divisor2_negative": 1,
                    "new_divisor": 1,
                    "operand": 1,
                    "quotient2": 1,
                    "remainder_temp_high": 1,
                    "shifted_divisor": 1,
                    "shifted_divisor_upper": 1,
                    "temp10": 1,
                    "temp3": 1,
                    "temp4": 3,
                    "temp5": 4,
                    "temp6": 1,
                    "temp7": 1,
                    "temp_5": 1,
                    "temp_divisor2": 1,
                    "temp_divisor_lo": 1,
                    "temp_uint": 1,
                    "u_var12": 1
                },
                "uVar13": {
                    "dividend_temp": 1,
                    "temp3": 1,
                    "temporary_quotient_lower_32": 1
                },
                "uVar14": {
                    "dividend_high": 1,
                    "remainder": 1,
                    "temporary_quotient_upper_32": 1
                },
                "uVar15": {
                    "dividend_low": 1,
                    "remainder2": 1
                },
                "uVar16": {
                    "quotient_temp3": 1,
                    "temp4": 1
                },
                "uVar17": {
                    "remainder3": 1,
                    "temp3": 1
                },
                "uVar18": {
                    "is_dividend_zero": 1,
                    "temp4": 1
                },
                "uVar19": {
                    "is_divisor_zero": 1,
                    "temp5": 1
                },
                "uVar2": {
                    "dividend_quotient": 1,
                    "quotient": 8,
                    "quotient1": 5,
                    "quotient_1": 1,
                    "quotient_high": 2,
                    "quotient_lo": 1,
                    "quotient_low": 4,
                    "quotient_lower": 4,
                    "quotient_lower16": 1,
                    "quotient_lower_32": 1,
                    "quotient_upper": 1,
                    "result1": 1,
                    "result_upper_half": 1
                },
                "uVar20": {
                    "temp6": 1
                },
                "uVar21": {
                    "temp7": 1
                },
                "uVar22": {
                    "temp8": 1
                },
                "uVar23": {
                    "temp9": 1
                },
                "uVar24": {
                    "temp10": 1
                },
                "uVar25": {
                    "temp11": 1
                },
                "uVar26": {
                    "temp12": 1
                },
                "uVar27": {
                    "temp13": 1
                },
                "uVar28": {
                    "temp14": 1
                },
                "uVar29": {
                    "temp15": 1
                },
                "uVar3": {
                    "quotient2": 5,
                    "quotient_2": 1,
                    "quotient_hi": 2,
                    "quotient_high": 8,
                    "quotient_low": 2,
                    "quotient_lower": 1,
                    "quotient_mid": 1,
                    "quotient_shifted": 1,
                    "quotient_top": 2,
                    "quotient_upper": 3,
                    "quotient_upper16": 1,
                    "quotient_upper_32": 1,
                    "remainder": 1,
                    "result2": 1,
                    "result_lower_half": 1
                },
                "uVar30": {
                    "temp16": 1
                },
                "uVar31": {
                    "temp17": 1
                },
                "uVar32": {
                    "temp18": 1
                },
                "uVar33": {
                    "temp19": 1
                },
                "uVar34": {
                    "temp20": 1
                },
                "uVar35": {
                    "temp21": 1
                },
                "uVar36": {
                    "temp22": 1
                },
                "uVar4": {
                    "divisor": 1,
                    "divisor1": 1,
                    "divisor_high": 1,
                    "divisor_lower_shifted": 1,
                    "divisor_quotient": 1,
                    "product1": 1,
                    "quotient": 1,
                    "quotient1": 1,
                    "quotient3": 1,
                    "quotient_divisor": 1,
                    "quotient_lo": 1,
                    "quotient_low_temp": 1,
                    "quotient_lower_half": 1,
                    "quotient_upper": 1,
                    "remainder_1": 1,
                    "remainder_low": 1,
                    "remainder_temp": 1,
                    "remainder_top": 1,
                    "scaled_divisor": 1,
                    "temp": 1,
                    "temp1": 6,
                    "temp_dividend": 1,
                    "temp_quotient1": 1,
                    "temp_quotient_lower": 1,
                    "u_var4": 1
                },
                "uVar5": {
                    "divisor2": 1,
                    "divisor_quotient_high": 1,
                    "multiplication_result_low": 1,
                    "product2": 1,
                    "quotient4": 1,
                    "quotient_additional": 1,
                    "quotient_high_temp": 1,
                    "quotient_low": 1,
                    "quotient_remainder": 1,
                    "quotient_temp_high": 1,
                    "quotient_upper_half": 1,
                    "remainder": 3,
                    "remainder_2": 1,
                    "remainder_high": 1,
                    "scaled_remainder": 1,
                    "temp1": 1,
                    "temp2": 8,
                    "temp_divisor": 1,
                    "temp_quotient": 1,
                    "temp_quotient2": 1,
                    "temp_quotient_upper": 1,
                    "u_var5": 1
                },
                "uVar6": {
                    "lzcount_result": 1,
                    "temp3": 1
                },
                "uVar7": {
                    "dividend_high": 1,
                    "divisor_remainder": 1,
                    "mul_temp": 1,
                    "partial_product": 1,
                    "partial_product_low": 1,
                    "product1": 1,
                    "remainder": 1,
                    "remainder_low": 2,
                    "remainder_lower": 1,
                    "temp": 1,
                    "temp1": 8,
                    "temp2": 1,
                    "temp3": 3,
                    "temp4": 1,
                    "temp7": 1,
                    "temp_1": 1,
                    "temp_lower": 1,
                    "temp_mult1": 1,
                    "temp_result": 2,
                    "u_var7": 1
                },
                "uVar8": {
                    "division_result_low": 1,
                    "divisor_remainder_high": 1,
                    "partial_product_high": 1,
                    "partial_quotient": 1,
                    "product2": 1,
                    "remainder_high": 2,
                    "remainder_temp": 1,
                    "remainder_upper": 1,
                    "temp2": 9,
                    "temp3": 1,
                    "temp4": 3,
                    "temp5": 1,
                    "temp8": 1,
                    "temp_2": 1,
                    "temp_combined": 1,
                    "temp_divisor_high": 1,
                    "temp_mult2": 1,
                    "temp_quotient": 1,
                    "temp_result_hi": 1,
                    "u_var8": 1
                },
                "uVar9": {
                    "dividend_negative": 1,
                    "dividend_sign": 2,
                    "is_denominator_negative": 1,
                    "is_dividend1_negative": 1,
                    "is_dividend_neg": 1,
                    "is_dividend_negative": 7,
                    "is_negative": 3,
                    "is_negative_dividend": 7,
                    "is_negative_quotient": 1,
                    "negate_dividend": 1,
                    "negative_dividend": 2,
                    "sign1": 1,
                    "sign_dividend": 1,
                    "temp1": 1,
                    "u_var9": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008455c"
            ],
            "code": "\nundefined8 divide_with_remainder_000845c0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong product;\n  uint quotient;\n  uint quotient_high;\n  uint temp1;\n  uint temp2;\n  int shift_amount;\n  uint temp1;\n  uint temp2;\n  uint is_dividend_negative;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  bool carry_flag;\n  \n  if ((int)dividend_high < 0) {\n    carry_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)carry_flag;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    carry_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)carry_flag;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount != 0) {\n        quotient_high = dividend >> (0x20U - shift_amount & 0xff);\n        divisor = divisor << shift_amount;\n        dividend = dividend << shift_amount;\n        dividend_high = dividend_high << shift_amount | quotient_high;\n      }\n      quotient = divisor >> 0x10;\n      temp1 = dividend_high / quotient;\n      temp1 = (divisor & 0xffff) * temp1;\n      temp3 = dividend >> 0x10 | (dividend_high - quotient * temp1) * 0x10000;\n      quotient_high = temp1;\n      if (temp3 <= temp1 && temp1 - temp3 != 0) {\n        carry_flag = CARRY4(temp3,divisor);\n        temp3 = temp3 + divisor;\n        quotient_high = temp1 - 1;\n        if ((carry_flag == false) && (temp3 <= temp1 && temp1 - temp3 != 0)) {\n          quotient_high = temp1 - 2;\n          temp3 = temp3 + divisor;\n        }\n      }\n      temp2 = (temp3 - temp1) / quotient;\n      temp1 = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((temp3 - temp1) - quotient * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp1 && temp1 - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp1 && temp1 - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        temp1 = divisor >> 0x10;\n        temp5 = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        quotient_high = dividend_high >> (0x20U - shift_amount & 0xff);\n        temp1 = divisor >> 0x10;\n        temp3 = quotient_high / temp1;\n        temp5 = divisor & 0xffff;\n        temp1 = temp5 * temp3;\n        temp2 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        quotient_high = temp2 >> 0x10 | (quotient_high - temp1 * temp3) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient = temp3;\n        if (quotient_high <= temp1 && temp1 - quotient_high != 0) {\n          carry_flag = CARRY4(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient = temp3 - 1;\n          if ((carry_flag == false) && (quotient_high <= temp1 && temp1 - quotient_high != 0)) {\n            quotient = temp3 - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        temp2 = (quotient_high - temp1) / temp1;\n        temp3 = temp5 * temp2;\n        dividend_high = temp2 & 0xffff | ((quotient_high - temp1) - temp1 * temp2) * 0x10000;\n        quotient_high = temp2;\n        if (dividend_high <= temp3 && temp3 - dividend_high != 0) {\n          carry_flag = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = temp2 - 1;\n          if ((carry_flag == false) && (dividend_high <= temp3 && temp3 - dividend_high != 0)) {\n            quotient_high = temp2 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - temp3;\n        quotient_high = quotient_high | quotient << 0x10;\n      }\n      quotient = dividend_high / temp1;\n      temp3 = temp5 * quotient;\n      temp2 = dividend >> 0x10 | (dividend_high - temp1 * quotient) * 0x10000;\n      temp1 = quotient;\n      if (temp2 <= temp3 && temp3 - temp2 != 0) {\n        carry_flag = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient - 1;\n        if ((carry_flag == false) && (temp2 <= temp3 && temp3 - temp2 != 0)) {\n          temp1 = quotient - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp2 = (temp2 - temp3) / temp1;\n      temp5 = temp5 * temp2;\n      temp1 = dividend & 0xffff | ((temp2 - temp3) - temp1 * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp5 && temp5 - temp1 != 0) {\n        quotient = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp5 && temp5 - (temp1 + divisor) != 0)) {\n          quotient = temp2 - 2;\n        }\n      }\n      quotient = quotient | temp1 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(divisor_high);\n    if (shift_amount == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient = 1;\n      }\n      else {\n        quotient = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - shift_amount;\n      temp1 = dividend_high >> (quotient_high & 0xff);\n      temp5 = divisor >> (quotient_high & 0xff) | divisor_high << shift_amount;\n      temp3 = temp5 >> 0x10;\n      quotient = temp1 / temp3;\n      temp2 = (temp5 & 0xffff) * quotient;\n      temp1 = dividend_high << shift_amount | dividend >> (quotient_high & 0xff);\n      temp1 = temp1 >> 0x10 | (temp1 - temp3 * quotient) * 0x10000;\n      quotient_high = quotient;\n      if (temp1 <= temp2 && temp2 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,temp5);\n        temp1 = temp1 + temp5;\n        quotient_high = quotient - 1;\n        if ((carry_flag == false) && (temp1 <= temp2 && temp2 - temp1 != 0)) {\n          quotient_high = quotient - 2;\n          temp1 = temp1 + temp5;\n        }\n      }\n      temp2 = (temp1 - temp2) / temp3;\n      temp4 = (temp5 & 0xffff) * temp2;\n      temp1 = temp1 & 0xffff | ((temp1 - temp2) - temp3 * temp2) * 0x10000;\n      quotient = temp2;\n      if (temp1 <= temp4 && temp4 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,temp5);\n        temp1 = temp1 + temp5;\n        quotient = temp2 - 1;\n        if ((carry_flag == false) && (temp1 <= temp4 && temp4 - temp1 != 0)) {\n          quotient = temp2 - 2;\n          temp1 = temp1 + temp5;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      product = (ulonglong)quotient * (ulonglong)(divisor << shift_amount);\n      temp1 = (uint)((ulonglong)product >> 0x20);\n      quotient_high = 0;\n      if ((temp1 - temp4 < temp1) ||\n         ((temp1 - temp4 == temp1 && (dividend << shift_amount < (uint)product)))) {\n        quotient = quotient - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    carry_flag = quotient != 0;\n    quotient = -quotient;\n    quotient_high = -quotient_high - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_high,quotient);\n}\n\n",
            "current_name": "divide_with_remainder_000845c0",
            "entrypoint": "0x000845c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000845c0": "divide_with_remainder_000845c0",
                "bVar13": "carry_flag",
                "iVar6": "shift_amount",
                "lVar1": "product",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "uVar": "temp_quotient",
                "uVar1": "temp5",
                "uVar10": "temp3",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "uVar2": "quotient",
                "uVar3": "quotient_high",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "is_dividend_negative"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084860": {
            "additional_data": {
                "FUN_00084860": {
                    "calculate_dividend": 1,
                    "calculate_division": 1,
                    "calculate_division_and_remainder": 1,
                    "calculate_quotient": 5,
                    "calculate_quotient_and_remainder": 1,
                    "calculate_quotient_remainder": 1,
                    "div_operation": 1,
                    "div_remainder": 1,
                    "divide_and_conquer": 2,
                    "divide_and_modulo": 1,
                    "divide_and_remainder": 2,
                    "divide_and_round": 1,
                    "divide_unsigned": 1,
                    "divide_with_carry": 1,
                    "divide_with_remainder": 4,
                    "division_and_remainder": 1,
                    "division_with_carry": 1,
                    "division_with_remainder": 2,
                    "divmod": 1,
                    "perform_division": 1,
                    "perform_unsigned_division": 1
                },
                "bVar11": {
                    "carry": 7,
                    "carry_flag": 18,
                    "has_carry": 2,
                    "is_carry": 1,
                    "is_cary": 1,
                    "temp_bool": 1
                },
                "iVar10": {
                    "bit_count": 1,
                    "count": 1,
                    "leading_zeros": 1,
                    "leading_zeros_count": 1,
                    "left_shift_amount": 1,
                    "lzc": 1,
                    "shift": 3,
                    "shift_amount": 9,
                    "shift_count": 11,
                    "temp_9": 1,
                    "temp_i_var1": 1
                },
                "lVar1": {
                    "l_product": 1,
                    "mul_result": 1,
                    "partial_product": 1,
                    "product": 1,
                    "product32": 1,
                    "quotient": 3,
                    "quotient_partial": 1,
                    "result": 1,
                    "temp": 3,
                    "temp3": 1,
                    "temp_div": 1,
                    "temp_long": 1,
                    "temp_result": 1
                },
                "param3": {
                    "divisor": 1
                },
                "param4": {
                    "divisor_lower_part": 1
                },
                "param_1": {
                    "dividend": 31
                },
                "param_2": {
                    "dividend_copy": 1,
                    "dividend_high": 4,
                    "dividend_lower_part": 1,
                    "dividend_upper": 1,
                    "dividend_upper_16bits": 1,
                    "dividend_upper_bits": 1,
                    "divisor": 22
                },
                "param_3": {
                    "dividend_high": 1,
                    "dividend_lower": 1,
                    "divisor": 8,
                    "divisor1": 1,
                    "high_dividend_bits": 1,
                    "quotient": 17,
                    "quotient1": 1
                },
                "param_4": {
                    "divisor2": 1,
                    "divisor_copy": 1,
                    "divisor_high": 5,
                    "divisor_lower": 1,
                    "divisor_upper": 1,
                    "divisor_upper_16bits": 1,
                    "divisor_upper_bits": 1,
                    "high_divisor_bits": 1,
                    "quotient2": 1,
                    "remainder": 17
                },
                "uVar11": {
                    "carry_result": 1,
                    "temp": 1,
                    "temp9": 1
                },
                "uVar2": {
                    "cur_quotient": 1,
                    "current_quotient": 1,
                    "div": 1,
                    "final_quotient": 1,
                    "q1": 1,
                    "quotient": 3,
                    "quotient1": 4,
                    "quotient2": 1,
                    "quotient_higher": 1,
                    "quotient_low": 3,
                    "quotient_lower": 1,
                    "quotient_part1": 1,
                    "quotient_upper_bits": 1,
                    "quotient_upper_part": 1,
                    "result": 3,
                    "result1": 2,
                    "result_lower_16bits": 1,
                    "temp1": 2,
                    "temp_1": 1,
                    "temp_u_var1": 1
                },
                "uVar3": {
                    "current_remainder": 1,
                    "div_high": 1,
                    "dividend_high": 1,
                    "dividend_higher": 1,
                    "dividend_low": 2,
                    "dividend_lower": 1,
                    "dividend_lower_bits_shifted": 1,
                    "divisor_high_bits": 1,
                    "divisor_part1": 2,
                    "divisor_upper_16bits_copy": 1,
                    "divisor_upper_part": 1,
                    "quotient1": 1,
                    "quotient1_upper": 1,
                    "quotient2": 5,
                    "quotient_high": 3,
                    "quotient_part1": 1,
                    "shifted_quotient": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp_2": 1,
                    "temp_u_var2": 1,
                    "u1": 1
                },
                "uVar4": {
                    "div_times_quotient_lower_16bits_1": 1,
                    "dividend_low": 1,
                    "dividend_quotient": 1,
                    "divisor_low": 1,
                    "divisor_quotient": 1,
                    "high_order_dividend": 1,
                    "partial_quotient": 1,
                    "partial_remainder_upper_bits": 1,
                    "q2": 1,
                    "quotient": 1,
                    "quotient3": 5,
                    "quotient_low": 1,
                    "quotient_mid1": 1,
                    "quotient_part2": 1,
                    "quotient_partial2": 1,
                    "remainder": 1,
                    "remainder1": 1,
                    "remainder_part1": 2,
                    "temp1": 3,
                    "temp2": 1,
                    "temp3": 2,
                    "temp_3": 1,
                    "temp_u_var3": 1
                },
                "uVar5": {
                    "div_times_quotient_lower_16bits_2": 1,
                    "low_divisor_bits": 1,
                    "low_order_dividend": 1,
                    "mul_lower": 1,
                    "multiplication": 1,
                    "multiplication_result": 1,
                    "multiply1": 1,
                    "partial_product": 1,
                    "partial_product_lower_bits": 1,
                    "partial_result": 1,
                    "prod_part1": 1,
                    "product1": 2,
                    "quotient1_lower": 1,
                    "quotient4": 1,
                    "quotient_high": 1,
                    "remainder": 1,
                    "remainder_high": 1,
                    "remainder_low": 1,
                    "remainder_part2": 2,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 2,
                    "temp_4": 1,
                    "temp_quotient": 1,
                    "temp_u_var4": 1,
                    "u2": 1
                },
                "uVar6": {
                    "dividend_copy": 1,
                    "dividend_high": 1,
                    "dividend_shifted": 2,
                    "dividend_shifted_with_quotient": 1,
                    "dividend_upper": 1,
                    "multiply2": 1,
                    "prod_part2": 1,
                    "product1": 1,
                    "product2": 3,
                    "q3": 1,
                    "quotient_low": 1,
                    "quotient_mid2": 1,
                    "quotient_part2": 1,
                    "quotient_partial_product": 1,
                    "remainder": 1,
                    "result2": 1,
                    "temp": 3,
                    "temp1": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 2,
                    "temp_5": 1,
                    "temp_u_var5": 1
                },
                "uVar7": {
                    "carry": 1,
                    "carry1": 1,
                    "div_temp": 1,
                    "dividend_low": 1,
                    "divisor_part2": 1,
                    "divisor_quotient": 1,
                    "mul_remainder": 1,
                    "multiply3": 1,
                    "partial_remainder_lower_bits": 1,
                    "product3": 2,
                    "quotient2": 1,
                    "quotient4": 1,
                    "quotient_lower_16bits_1": 1,
                    "quotient_part3": 1,
                    "remainder": 2,
                    "remainder_high": 1,
                    "remainder_mid": 1,
                    "remainder_partial_product": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 2,
                    "temp_6": 1,
                    "temp_high": 1,
                    "temp_quotient": 1,
                    "temp_u_var6": 1,
                    "u3": 1
                },
                "uVar8": {
                    "cur_divisor": 1,
                    "dividend_low": 1,
                    "dividend_shifted": 1,
                    "divisor1": 1,
                    "divisor_higher": 1,
                    "divisor_quotient": 2,
                    "factor_high": 1,
                    "high_order_quotient_digit": 1,
                    "initial_quotient": 1,
                    "product2": 1,
                    "q": 1,
                    "quotient_high": 1,
                    "quotient_high_bits": 1,
                    "quotient_lower_part": 1,
                    "quotient_part1": 1,
                    "quotient_partial": 1,
                    "quotient_upper_16bits": 1,
                    "remainder2": 1,
                    "remainder_low": 1,
                    "temp1": 3,
                    "temp3": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp7": 2,
                    "temp_7": 1,
                    "temp_dividend": 1,
                    "temp_u_var7": 1
                },
                "uVar9": {
                    "carry2": 1,
                    "comparison_value": 1,
                    "divisor2": 1,
                    "divisor_part2": 1,
                    "divisor_remainder": 1,
                    "factor_low": 1,
                    "intermediate_remainder": 1,
                    "multiplication1": 1,
                    "partial_product_upper_bits": 1,
                    "quotient2_lower": 1,
                    "quotient_part2": 1,
                    "quotient_partial3": 1,
                    "remainder_divisor": 1,
                    "remainder_high": 1,
                    "remainder_partial": 1,
                    "temp": 2,
                    "temp2": 4,
                    "temp3": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp8": 2,
                    "temp_8": 1,
                    "temp_product": 1,
                    "temp_u_var8": 1,
                    "u": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008458c"
            ],
            "code": "\nulonglong calculate_quotient_and_remainder_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint quotient1;\n  uint quotient2;\n  uint quotient3;\n  uint remainder_part2;\n  uint product2;\n  uint product3;\n  uint temp1;\n  uint temp2;\n  int shift_count;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_count = LZCOUNT(quotient);\n      if (shift_count == 0) {\n        divisor = divisor - quotient;\n        quotient2 = quotient >> 0x10;\n        remainder_part2 = quotient & 0xffff;\n        quotient1 = 1;\n      }\n      else {\n        quotient = quotient << shift_count;\n        temp1 = divisor >> (0x20U - shift_count & 0xff);\n        quotient2 = quotient >> 0x10;\n        temp2 = temp1 / quotient2;\n        remainder_part2 = quotient & 0xffff;\n        quotient1 = remainder_part2 * temp2;\n        product2 = dividend >> (0x20U - shift_count & 0xff) | divisor << shift_count;\n        quotient3 = product2 >> 0x10 | (temp1 - quotient2 * temp2) * 0x10000;\n        dividend = dividend << shift_count;\n        temp1 = temp2;\n        if (quotient3 <= quotient1 && quotient1 - quotient3 != 0) {\n          carry_flag = CARRY4(quotient3,quotient);\n          quotient3 = quotient3 + quotient;\n          temp1 = temp2 - 1;\n          if ((carry_flag == false) && (quotient3 <= quotient1 && quotient1 - quotient3 != 0)) {\n            temp1 = temp2 - 2;\n            quotient3 = quotient3 + quotient;\n          }\n        }\n        product3 = (quotient3 - quotient1) / quotient2;\n        temp2 = remainder_part2 * product3;\n        divisor = product2 & 0xffff | ((quotient3 - quotient1) - quotient2 * product3) * 0x10000;\n        quotient1 = product3;\n        if (divisor <= temp2 && temp2 - divisor != 0) {\n          carry_flag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient1 = product3 - 1;\n          if ((carry_flag == false) && (divisor <= temp2 && temp2 - divisor != 0)) {\n            quotient1 = product3 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp2;\n        quotient1 = quotient1 | temp1 << 0x10;\n      }\n      temp2 = divisor / quotient2;\n      quotient3 = remainder_part2 * temp2;\n      product2 = dividend >> 0x10 | (divisor - quotient2 * temp2) * 0x10000;\n      temp1 = temp2;\n      if (product2 <= quotient3 && quotient3 - product2 != 0) {\n        carry_flag = CARRY4(product2,quotient);\n        product2 = product2 + quotient;\n        temp1 = temp2 - 1;\n        if ((carry_flag == false) && (product2 <= quotient3 && quotient3 - product2 != 0)) {\n          temp1 = temp2 - 2;\n          product2 = product2 + quotient;\n        }\n      }\n      temp2 = (product2 - quotient3) / quotient2;\n      remainder_part2 = remainder_part2 * temp2;\n      product2 = dividend & 0xffff | ((product2 - quotient3) - quotient2 * temp2) * 0x10000;\n      quotient2 = temp2;\n      if (product2 <= remainder_part2 && remainder_part2 - product2 != 0) {\n        quotient2 = temp2 - 1;\n        if ((CARRY4(product2,quotient) == false) &&\n           (product2 + quotient <= remainder_part2 && remainder_part2 - (product2 + quotient) != 0)) {\n          quotient2 = temp2 - 2;\n        }\n      }\n      return CONCAT44(quotient1,quotient2 | temp1 << 0x10);\n    }\n    shift_count = LZCOUNT(quotient);\n    if (shift_count != 0) {\n      temp1 = dividend >> (0x20U - shift_count & 0xff);\n      quotient = quotient << shift_count;\n      dividend = dividend << shift_count;\n      divisor = temp1 | divisor << shift_count;\n    }\n    quotient1 = quotient >> 0x10;\n    quotient2 = divisor / quotient1;\n    remainder_part2 = (quotient & 0xffff) * quotient2;\n    temp2 = dividend >> 0x10 | (divisor - quotient1 * quotient2) * 0x10000;\n    temp1 = quotient2;\n    if (temp2 <= remainder_part2 && remainder_part2 - temp2 != 0) {\n      carry_flag = CARRY4(temp2,quotient);\n      temp2 = temp2 + quotient;\n      temp1 = quotient2 - 1;\n      if ((carry_flag == false) && (temp2 <= remainder_part2 && remainder_part2 - temp2 != 0)) {\n        temp1 = quotient2 - 2;\n        temp2 = temp2 + quotient;\n      }\n    }\n    product2 = (temp2 - remainder_part2) / quotient1;\n    quotient2 = (quotient & 0xffff) * product2;\n    remainder_part2 = dividend & 0xffff | ((temp2 - remainder_part2) - quotient1 * product2) * 0x10000;\n    quotient1 = product2;\n    if (remainder_part2 <= quotient2 && quotient2 - remainder_part2 != 0) {\n      quotient1 = product2 - 1;\n      if ((CARRY4(remainder_part2,quotient) == false) &&\n         (remainder_part2 + quotient <= quotient2 && quotient2 - (remainder_part2 + quotient) != 0)) {\n        quotient1 = product2 - 2;\n      }\n    }\n    quotient1 = quotient1 | temp1 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift_count = LZCOUNT(remainder);\n    if (shift_count == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      quotient1 = 0;\n    }\n    else {\n      quotient1 = 0x20 - shift_count;\n      temp1 = divisor >> (quotient1 & 0xff);\n      quotient2 = remainder << shift_count | quotient >> (quotient1 & 0xff);\n      remainder_part2 = quotient2 >> 0x10;\n      quotient3 = temp1 / remainder_part2;\n      temp2 = (quotient2 & 0xffff) * quotient3;\n      product2 = dividend >> (quotient1 & 0xff) | divisor << shift_count;\n      quotient1 = product2 >> 0x10 | (temp1 - remainder_part2 * quotient3) * 0x10000;\n      temp1 = quotient3;\n      if (quotient1 <= temp2 && temp2 - quotient1 != 0) {\n        carry_flag = CARRY4(quotient1,quotient2);\n        quotient1 = quotient1 + quotient2;\n        temp1 = quotient3 - 1;\n        if ((carry_flag == false) && (quotient1 <= temp2 && temp2 - quotient1 != 0)) {\n          temp1 = quotient3 - 2;\n          quotient1 = quotient1 + quotient2;\n        }\n      }\n      quotient3 = (quotient1 - temp2) / remainder_part2;\n      product3 = (quotient2 & 0xffff) * quotient3;\n      remainder_part2 = product2 & 0xffff | ((quotient1 - temp2) - remainder_part2 * quotient3) * 0x10000;\n      quotient1 = quotient3;\n      if (remainder_part2 <= product3 && product3 - remainder_part2 != 0) {\n        carry_flag = CARRY4(remainder_part2,quotient2);\n        remainder_part2 = remainder_part2 + quotient2;\n        quotient1 = quotient3 - 1;\n        if ((carry_flag == false) && (remainder_part2 <= product3 && product3 - remainder_part2 != 0)) {\n          quotient1 = quotient3 - 2;\n          remainder_part2 = remainder_part2 + quotient2;\n        }\n      }\n      quotient1 = quotient1 | temp1 << 0x10;\n      temp = (ulonglong)quotient1 * (ulonglong)(quotient << shift_count);\n      temp1 = (uint)((ulonglong)temp >> 0x20);\n      if ((remainder_part2 - product3 < temp1) || ((remainder_part2 - product3 == temp1 && (dividend << shift_count < (uint)temp)))\n         ) {\n        quotient1 = quotient1 - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient1;\n}\n\n",
            "current_name": "calculate_quotient_and_remainder_00084860",
            "entrypoint": "0x00084860",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084860": "calculate_quotient_and_remainder_00084860",
                "bVar11": "carry_flag",
                "iVar10": "shift_count",
                "lVar1": "temp",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "quotient3",
                "uVar5": "remainder_part2",
                "uVar6": "product2",
                "uVar7": "product3",
                "uVar8": "temp1",
                "uVar9": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00085844": {
            "called": [],
            "calling": [
                "FUN_00081778"
            ],
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00085844",
            "entrypoint": "0x00085844",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_000815ec"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  run_control_system_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00080c20",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "additional_data": {
                "thunk_FUN_00080efe": {
                    "fetch_error_code": 1,
                    "get_default_value": 5,
                    "get_error_code": 13,
                    "get_error_status": 1,
                    "get_negative_one": 2,
                    "get_status": 1,
                    "handle_error": 1,
                    "initialize_data": 1,
                    "initialize_error_code": 3,
                    "initialize_flag": 1,
                    "initialize_return_value": 1,
                    "set_default_value": 1
                },
                "undefined4": {
                    "int": 1,
                    "status": 1,
                    "uint32_t": 1,
                    "void": 1
                }
            },
            "called": [
                "FUN_00080efe"
            ],
            "calling": [
                "FUN_000841e4"
            ],
            "code": "\nuint32_t get_error_code_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_thunk_00080efe",
            "entrypoint": "0x0008421c",
            "imported": false,
            "improved": true,
            "renaming": {
                "thunk_FUN_00080efe": "get_error_code_thunk_00080efe",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "additional_data": {
                "convert_number_to_base_000810fc": {
                    "convert_number_to_base": 5
                },
                "execute_code_function_000810cc": {
                    "execute_code": 1,
                    "execute_code_function": 2,
                    "execute_function": 1,
                    "execute_negative_sign": 1
                },
                "iVar1": {
                    "output": 1,
                    "result": 28,
                    "return_value": 2
                },
                "iVar2": {
                    "conversion_result": 3,
                    "convert_result": 1,
                    "converted_num": 1,
                    "converted_number": 1,
                    "extra_result": 1,
                    "negative_flag": 1,
                    "negative_num": 1,
                    "negative_part": 1,
                    "negative_result": 17,
                    "negative_sign_length": 1,
                    "negative_value": 1,
                    "sign": 1,
                    "temp": 1
                },
                "param_1": {
                    "arg1": 1,
                    "array_pointer": 1,
                    "data": 4,
                    "data_array": 3,
                    "data_pointer": 2,
                    "data_ptr": 3,
                    "input": 2,
                    "input_array": 3,
                    "input_buffer": 2,
                    "input_data": 3,
                    "input_ptr": 1,
                    "output_array": 2,
                    "output_buffer": 1,
                    "param_list": 1,
                    "pointer": 1
                },
                "param_2": {
                    "input_num": 1,
                    "input_number": 4,
                    "number": 24,
                    "value": 2
                },
                "param_3": {
                    "base": 30,
                    "output_base": 1
                },
                "param_4": {
                    "additional_param": 1,
                    "additional_parameter": 1,
                    "arg4": 1,
                    "extra_param": 2,
                    "format": 1,
                    "modifier": 1,
                    "param": 1,
                    "param4": 1,
                    "param_4": 12,
                    "undefined": 2,
                    "undefined_param": 2,
                    "unknown": 2,
                    "unknown_param": 3,
                    "unknown_parameter": 1
                },
                "thunk_FUN_0008113a": {
                    "convert_base": 5,
                    "convert_base_and_execute": 1,
                    "convert_number": 4,
                    "convert_number_base": 8,
                    "convert_number_base_if_needed": 1,
                    "convert_number_base_or_execute": 1,
                    "convert_number_base_with_sign": 1,
                    "convert_number_to_base": 5,
                    "convert_number_with_base": 3,
                    "convert_to_base": 2
                }
            },
            "called": [
                "FUN_0008113a"
            ],
            "calling": [
                "FUN_00080250"
            ],
            "code": "\nint convert_number_to_base_thunk_0008113a(undefined4 *data,uint number,uint base,undefined4 param_4)\n\n{\n  int result;\n  int negative_result;\n  \n  if (base == 0) {\n    result = (**(code **)*data)(data,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = execute_code_function(data,0x2d);\n      negative_result = convert_number_to_base_thunk_0008113a(data,-number,10);\n      return negative_result + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = convert_number_to_base_thunk_0008113a(data,number,base,param_4);\n  return result;\n}\n\n",
            "current_name": "convert_number_to_base_thunk_0008113a",
            "entrypoint": "0x00081176",
            "imported": false,
            "improved": true,
            "renaming": {
                "convert_number_to_base_000810fc": "convert_number_to_base",
                "execute_code_function_000810cc": "execute_code_function",
                "iVar1": "result",
                "iVar2": "negative_result",
                "param_1": "data",
                "param_2": "number",
                "param_3": "base",
                "thunk_FUN_0008113a": "convert_number_to_base_thunk_0008113a"
            },
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "additional_data": {
                "D5T_2007120c": {
                    "data": 1
                },
                "DAT_2007120c": {
                    "data": 5,
                    "global_data": 2,
                    "global_value": 2,
                    "global_variable": 6,
                    "return_value": 1
                },
                "thunk_FUN_000816d8": {
                    "get_dat_2007120c": 2,
                    "get_data": 8,
                    "get_data_from_memory_address": 1,
                    "get_data_value": 7,
                    "get_global_data": 2,
                    "get_global_value": 3,
                    "get_global_variable": 7,
                    "get_return_value": 1
                }
            },
            "called": [
                "FUN_000816d8"
            ],
            "calling": [
                "FUN_000811e8"
            ],
            "code": "\nundefined4 get_data_value_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "current_name": "get_data_value_thunk_000816d8",
            "entrypoint": "0x00080f04",
            "imported": false,
            "improved": true,
            "renaming": {
                "thunk_FUN_000816d8": "get_data_value_thunk_000816d8"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000805a8",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811ca",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_0008145c",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_000840f8",
            "thunk_FUN_00080efe",
            "FUN_0008439c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_000806f8",
            "FUN_00080970",
            "FUN_00080a30",
            "FUN_000810a6",
            "FUN_000811b0",
            "FUN_000811e8",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_000815b8",
            "FUN_00081624",
            "FUN_0008236c",
            "FUN_00083888",
            "FUN_000841e4",
            "FUN_0008434c",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_0008455c",
            "FUN_0008458c"
        ],
        [
            "FUN_00080164",
            "FUN_0008089c",
            "FUN_00080f0c",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_00083a74",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_00084530"
        ],
        [
            "FUN_00081014",
            "FUN_000810e8",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_00083b10"
        ],
        [
            "FUN_0008044c",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00083850"
        ],
        [
            "FUN_00081472",
            "FUN_00081480",
            "FUN_0008151c",
            "FUN_000817f0",
            "FUN_00081fac",
            "FUN_00084018",
            "FUN_00084484"
        ],
        [
            "FUN_00081560",
            "FUN_00081f9c",
            "FUN_0008356c"
        ],
        [
            "FUN_00081496",
            "FUN_00083ca8",
            "FUN_000842a4"
        ],
        [
            "FUN_000814ae",
            "FUN_000839b4"
        ],
        [
            "FUN_000814d0",
            "FUN_00081570",
            "FUN_00082824"
        ],
        [
            "FUN_000814f6",
            "FUN_0008159e"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_000834f0"
        ],
        [
            "FUN_00080eec",
            "FUN_0008289c"
        ],
        [
            "FUN_000836ec"
        ],
        [
            "FUN_000816f8"
        ],
        [
            "FUN_00080b2c"
        ],
        [
            "FUN_000803fc"
        ],
        [
            "FUN_000806a0"
        ],
        [
            "FUN_000801e0"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 476579
}