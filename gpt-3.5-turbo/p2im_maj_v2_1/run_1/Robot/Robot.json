{
    "functions": {
        "FUN_08000110": {
            "additional_data": {
                "DAT_200009c8": {
                    "data_flag": 1,
                    "flag": 19,
                    "flag_value": 2,
                    "flag_variable": 2
                },
                "FUN_08000110": {
                    "initialize_data_flag": 1,
                    "initialize_flag": 21,
                    "set_flag": 1,
                    "set_flag_if_false": 1,
                    "set_flag_if_not_set": 5,
                    "update_flag": 1,
                    "update_flag_if_not_set": 1
                },
                "param_1": {
                    "flag": 2,
                    "input": 15,
                    "input_data": 2,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_value": 6,
                    "value": 2
                }
            },
            "called": [
                "FUN_08009e68"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initialize_data_flag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "current_name": "initialize_data_flag_08000110",
            "entrypoint": "0x08000110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000110": "initialize_data_flag_08000110",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000134": {
            "additional_data": {
                "FUN_08000134": {
                    "concat64": 1,
                    "concatenate": 2,
                    "concatenate32_to64": 1,
                    "concatenate_32_bit_to_64_bit": 1,
                    "concatenate_32bit_to_64bit": 1,
                    "concatenate_44": 1,
                    "concatenate_64_bit": 1,
                    "concatenate_64_bits": 1,
                    "concatenate_64bit": 1,
                    "concatenate_64bit_arrays": 1,
                    "concatenate_64bit_numbers": 1,
                    "concatenate_64bit_values": 1,
                    "concatenate_integers": 4,
                    "concatenate_param": 1,
                    "concatenate_param2_param1": 1,
                    "concatenate_parameter": 1,
                    "concatenate_params": 4,
                    "concatenate_uint64": 1,
                    "concatenate_values": 3,
                    "concatenate_words": 3
                },
                "param_1": {
                    "first_32bit": 1,
                    "first_param": 5,
                    "first_parameter": 2,
                    "first_value": 2,
                    "first_word": 2,
                    "input_1": 1,
                    "input_array_1": 1,
                    "input_low": 2,
                    "integer1": 2,
                    "integer_1": 1,
                    "low_32_bits": 1,
                    "low_word": 1,
                    "lower_32bits": 1,
                    "value1": 4,
                    "value_1": 1,
                    "value_low": 1,
                    "variable32_1": 1,
                    "word1": 1,
                    "x": 1
                },
                "param_2": {
                    "high_32_bits": 1,
                    "high_word": 1,
                    "higher_32bits": 1,
                    "input_2": 1,
                    "input_array_2": 1,
                    "input_high": 2,
                    "integer2": 2,
                    "integer_2": 1,
                    "second_32bit": 1,
                    "second_param": 5,
                    "second_parameter": 2,
                    "second_value": 2,
                    "second_word": 2,
                    "value2": 4,
                    "value_2": 1,
                    "value_high": 1,
                    "variable32_2": 1,
                    "word2": 1,
                    "y": 1
                }
            },
            "called": [
                "FUN_08009e68"
            ],
            "calling": [
                "FUN_08005d20"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_integers_08000134(undefined4 first_param,undefined4 second_param)\n\n{\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "current_name": "concatenate_integers_08000134",
            "entrypoint": "0x08000134",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000134": "concatenate_integers_08000134",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000158": {
            "additional_data": {
                "FUN_08000158": {
                    "calculate": 6,
                    "calculate_and_combine": 1,
                    "calculate_concatenation": 1,
                    "calculate_new_value": 1,
                    "calculate_product": 1,
                    "calculate_result": 6,
                    "calculate_shifted_values": 1,
                    "calculate_unsigned_division": 1,
                    "perform_arithmetic_operation": 1,
                    "perform_operation": 1,
                    "reverse_binary_arithmetic": 1,
                    "reverse_binary_operation": 2,
                    "reverse_bits": 1,
                    "reverse_bits_and_shift": 1,
                    "reversible_arithmetic": 1
                },
                "bVar13": {
                    "are_inputs_equal": 1,
                    "bool_1": 1,
                    "bool_var1": 1,
                    "carry_flag1": 1,
                    "check_result3": 1,
                    "cond1": 1,
                    "condition1": 3,
                    "condition_a": 1,
                    "equal": 1,
                    "equal1": 1,
                    "flag1": 4,
                    "flag2": 1,
                    "is_condition1": 2,
                    "is_condition_met1": 2,
                    "is_divisible": 1,
                    "is_equal": 1,
                    "is_equal1": 1,
                    "is_zero": 4,
                    "is_zero_difference": 1,
                    "is_zero_result": 1,
                    "temp_bool_1": 1
                },
                "bVar14": {
                    "bool_2": 1,
                    "bool_var2": 1,
                    "carry_flag2": 1,
                    "check_flag": 1,
                    "check_result1": 1,
                    "cond2": 1,
                    "condition2": 3,
                    "condition_b": 1,
                    "equal2": 1,
                    "equal_or_zero": 1,
                    "flag2": 4,
                    "flag3": 1,
                    "is_condition2": 2,
                    "is_condition_met": 1,
                    "is_condition_met2": 2,
                    "is_equal": 2,
                    "is_equal2": 1,
                    "is_negative_result": 1,
                    "is_true": 1,
                    "is_zero": 2,
                    "is_zero_shifted_input": 1,
                    "temp_bool_2": 1
                },
                "bVar15": {
                    "bool_3": 1,
                    "bool_var3": 1,
                    "carry_flag3": 1,
                    "carry_flag_2": 1,
                    "check_result4": 1,
                    "cond3": 1,
                    "condition3": 3,
                    "flag3": 4,
                    "flag4": 1,
                    "has_carry": 1,
                    "is_condition3": 2,
                    "is_condition_met3": 2,
                    "is_negative": 4,
                    "is_negative_shift": 1,
                    "is_negative_shift_amount": 1,
                    "is_set": 1,
                    "is_sum_negative": 1,
                    "overflow": 1,
                    "overflow_flag": 1,
                    "shift_overflow": 1,
                    "temp_bool_3": 1
                },
                "bVar2": {
                    "carry": 6,
                    "carry1": 2,
                    "carry_bit": 2,
                    "carry_flag": 4,
                    "check_result2": 1,
                    "flag1": 1,
                    "temp7": 1,
                    "temp_byte": 1
                },
                "iVar1": {
                    "bit_shift1": 2,
                    "index1": 1,
                    "negative_shift_amount": 1,
                    "result1": 2,
                    "shift": 1,
                    "shift1": 2,
                    "shift_a": 1,
                    "shift_amount1": 2,
                    "shift_amount2": 2,
                    "shift_amount_1": 1,
                    "shift_val1": 1,
                    "shifted_input4": 1,
                    "shifted_input_2": 1,
                    "shifted_input_b": 1,
                    "shifted_param_4": 1,
                    "temp1": 1,
                    "temp6": 2
                },
                "iVar8": {
                    "bit_shift2": 2,
                    "comparison": 1,
                    "index2": 1,
                    "iteration": 1,
                    "result2": 1,
                    "result4": 1,
                    "shift2": 3,
                    "shift_amount": 1,
                    "shift_amount1": 2,
                    "shift_amount2": 2,
                    "shift_amount_2": 1,
                    "shift_b": 1,
                    "shift_val2": 1,
                    "shifted_bits": 1,
                    "shifted_input2": 1,
                    "shifted_input_4": 1,
                    "shifted_input_d": 1,
                    "shifted_param_2_extr": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp6": 2,
                    "temp7": 1,
                    "temp_var_6": 1
                },
                "param_1": {
                    "a": 1,
                    "divisor": 1,
                    "input1": 17,
                    "input_1": 3,
                    "input_a": 2,
                    "input_param_1": 1,
                    "input_value1": 1,
                    "multiply1": 1,
                    "num1": 1,
                    "operand1": 1,
                    "val1": 1,
                    "x1": 1
                },
                "param_2": {
                    "b": 1,
                    "input2": 17,
                    "input_2": 3,
                    "input_b": 2,
                    "input_param_2": 1,
                    "input_value2": 1,
                    "multiply2": 1,
                    "num1": 1,
                    "num2": 1,
                    "operand2": 1,
                    "val2": 1,
                    "x2": 1
                },
                "param_3": {
                    "c": 1,
                    "input3": 17,
                    "input_3": 3,
                    "input_c": 2,
                    "input_param_3": 1,
                    "input_value3": 1,
                    "multiply3": 1,
                    "num2": 1,
                    "num3": 1,
                    "operand3": 1,
                    "val3": 1,
                    "x3": 1
                },
                "param_4": {
                    "d": 1,
                    "input4": 17,
                    "input_4": 3,
                    "input_d": 2,
                    "input_param_4": 1,
                    "input_value4": 1,
                    "multiply4": 1,
                    "num4": 1,
                    "operand4": 1,
                    "remainder": 1,
                    "val4": 1,
                    "x4": 1
                },
                "uVar10": {
                    "b": 1,
                    "carry_result": 1,
                    "conditional_add": 1,
                    "input_1_normalized": 1,
                    "mask2": 1,
                    "oper_result1": 1,
                    "result2": 1,
                    "result3": 1,
                    "result4": 1,
                    "result_value2": 1,
                    "result_var2": 1,
                    "shifted_input1": 1,
                    "shifted_sum_a": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 3,
                    "temp7": 1,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_3": 1,
                    "temp_input_b": 1,
                    "temp_var_8": 1,
                    "u_var2": 1
                },
                "uVar11": {
                    "carry": 1,
                    "difference": 1,
                    "modified_input3": 1,
                    "oper_result2": 1,
                    "result3": 2,
                    "result5": 1,
                    "result_a": 1,
                    "result_value3": 1,
                    "result_var3": 1,
                    "shifted_param4": 1,
                    "shifted_value": 1,
                    "sum_result": 1,
                    "temp": 1,
                    "temp10": 1,
                    "temp2": 1,
                    "temp3": 3,
                    "temp4": 2,
                    "temp5": 1,
                    "temp6": 2,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_4": 1,
                    "temp_input_c": 1,
                    "temp_var_6": 1,
                    "temp_var_9": 1,
                    "u_var3": 1
                },
                "uVar12": {
                    "bitwise_shift": 1,
                    "carry": 1,
                    "carry3": 1,
                    "carry_shift": 1,
                    "carry_value": 1,
                    "modified_result": 1,
                    "negative_difference": 1,
                    "oper_result3": 1,
                    "result4": 2,
                    "result6": 1,
                    "result_b": 1,
                    "result_var4": 1,
                    "temp": 2,
                    "temp10": 1,
                    "temp11": 1,
                    "temp2": 1,
                    "temp4": 2,
                    "temp5": 2,
                    "temp6": 1,
                    "temp7": 2,
                    "temp9": 1,
                    "temp_5": 1,
                    "temp_input_d": 1,
                    "temp_var_10": 1,
                    "temp_var_7": 1,
                    "u_var4": 1
                },
                "uVar14": {
                    "temp13": 1
                },
                "uVar16": {
                    "shifted_carry": 1
                },
                "uVar17": {
                    "shifted_input1": 1
                },
                "uVar3": {
                    "addition1": 1,
                    "carry": 1,
                    "carry1": 1,
                    "result1": 2,
                    "result2": 1,
                    "result_a": 1,
                    "shifted_value": 1,
                    "shifted_value1": 1,
                    "sum": 1,
                    "sum1": 1,
                    "sum_a": 1,
                    "temp1": 10,
                    "temp2": 1,
                    "temp3": 1,
                    "temp8": 1,
                    "temp_1": 1,
                    "temp_var1": 1,
                    "temp_var_1": 2
                },
                "uVar4": {
                    "carry2": 1,
                    "carry_temp": 1,
                    "dividend_lower": 1,
                    "masked_value1": 1,
                    "or_result2": 1,
                    "result1": 1,
                    "result2": 2,
                    "result_b": 1,
                    "shifted_bit": 1,
                    "shifted_operand1": 1,
                    "shifted_value2": 1,
                    "sum_b": 1,
                    "temp2": 10,
                    "temp3": 1,
                    "temp9": 1,
                    "temp_var2": 1,
                    "temp_var_2": 2,
                    "u_var4": 1,
                    "var_1": 1
                },
                "uVar5": {
                    "addition2": 1,
                    "carry2": 1,
                    "carry_addition": 1,
                    "result3": 3,
                    "result_c": 1,
                    "shifted_sum_b": 1,
                    "shifted_value2": 1,
                    "shifted_value3": 1,
                    "sum2": 1,
                    "sum_temp": 1,
                    "temp10": 1,
                    "temp3": 10,
                    "temp4": 1,
                    "temp_var3": 1,
                    "temp_var_3": 2,
                    "u_var5": 1,
                    "var_2": 1
                },
                "uVar6": {
                    "bitwise_xor": 1,
                    "carry3": 1,
                    "input1_temp": 1,
                    "masked_value2": 1,
                    "modified_input4": 1,
                    "modified_operand4": 1,
                    "new_remainder": 1,
                    "result1": 4,
                    "result4": 1,
                    "result_1": 1,
                    "temp1": 3,
                    "temp4": 5,
                    "temp_a": 2,
                    "temp_value1": 1,
                    "temp_var4": 1,
                    "temp_var_4": 2,
                    "x": 1,
                    "xor_result": 2,
                    "xored_input4": 1
                },
                "uVar7": {
                    "input2_temp": 1,
                    "modified_operand2": 1,
                    "num1_lower": 1,
                    "or_result1": 1,
                    "result2": 5,
                    "result5": 1,
                    "result_2": 1,
                    "shifted_value2": 1,
                    "shifted_value3": 1,
                    "temp1": 1,
                    "temp11": 1,
                    "temp2": 1,
                    "temp4": 2,
                    "temp5": 5,
                    "temp_b": 2,
                    "temp_value2": 1,
                    "temp_var5": 1,
                    "temp_var_5": 2,
                    "y": 1
                },
                "uVar8": {
                    "temp12": 1,
                    "z": 1
                },
                "uVar9": {
                    "a": 1,
                    "dividend": 1,
                    "input1_result": 1,
                    "left_shift1": 1,
                    "mask1": 1,
                    "modified_input2": 1,
                    "result1": 1,
                    "result3": 1,
                    "result_value1": 1,
                    "result_var1": 1,
                    "shifted_input2": 2,
                    "shifted_input_2_normalized": 1,
                    "shifted_input_a": 1,
                    "shifted_operand2": 1,
                    "shifted_param2": 1,
                    "shifted_param_2": 1,
                    "temp1": 2,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 2,
                    "temp6": 1,
                    "temp7": 1,
                    "temp8": 1,
                    "temp_2": 1,
                    "temp_input_a": 1,
                    "temp_var_7": 1,
                    "u_var1": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08004bd8",
                "FUN_08005838",
                "FUN_08005e9c"
            ],
            "code": "\nulonglong calculate_result_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int bit_shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint result2;\n  int shift2;\n  uint shifted_input2;\n  uint temp5;\n  uint temp3;\n  uint temp;\n  bool flag1;\n  bool flag2;\n  bool is_negative;\n  \n  temp4 = input4 ^ 0x80000000;\n  shifted_input2 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (shifted_input2 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  bit_shift1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = bit_shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || bit_shift1 == -1) {\n      shifted_input2 = temp4;\n      temp3 = input3;\n      if (shift2 == -1) {\n        shifted_input2 = input2;\n        temp3 = input1;\n      }\n      if (shift2 != -1 || bit_shift1 != -1) {\n        input3 = temp3;\n        temp4 = shifted_input2;\n      }\n      flag2 = (temp3 | shifted_input2 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = shifted_input2 == temp4;\n      }\n      if (!flag2) {\n        shifted_input2 = shifted_input2 | 0x80000;\n      }\n      return CONCAT44(shifted_input2,temp3);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp3 = input4 - shifted_input2;\n  flag2 = temp3 != 0;\n  if (input4 < shifted_input2) {\n    temp3 = -temp3;\n  }\n  temp5 = input1;\n  result2 = input2;\n  if (flag2 && shifted_input2 <= input4) {\n    shifted_input2 = shifted_input2 + temp3;\n    temp5 = input3;\n    result2 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < temp3) {\n    return CONCAT44(result2,temp5);\n  }\n  temp2 = result2 & 0xfffff | 0x100000;\n  if ((result2 & 0x80000000) != 0) {\n    flag2 = temp5 != 0;\n    temp5 = -temp5;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  result2 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    result2 = -result2 - (uint)flag2;\n  }\n  if (shifted_input2 == temp3) {\n    result2 = result2 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      temp3 = temp3 - 1;\n    }\n  }\n  temp4 = -temp3 + 0x20;\n  if ((int)temp3 < 0x21) {\n    temp = input3 << (temp4 & 0xff);\n    input3 = input3 >> (temp3 & 0xff);\n    temp1 = temp5 + input3;\n    temp3 = result2 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp5,input3) + ((int)result2 >> (temp3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp = result2 << (-temp3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp = temp | 2;\n    }\n    result2 = (int)result2 >> (temp3 - 0x20 & 0xff);\n    temp4 = temp5 + result2;\n    temp2 = temp2 + ((int)result2 >> 0x1f) + (uint)CARRY4(temp5,result2);\n  }\n  input2 = temp2 & 0x80000000;\n  temp3 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = temp == 0;\n    temp = -temp;\n    temp3 = -temp4;\n    temp4 = -(uint)!flag2 - temp4;\n    temp3 = -(uint)(flag2 <= temp3) - temp2;\n  }\n  if (0xfffff < temp3) {\n    temp5 = shifted_input2 - 1;\n    if (0x1fffff < temp3) {\n      temp5 = temp3 & 1;\n      temp3 = temp3 >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(temp5 != 0) << 0x1f | temp4 >> 1;\n      temp = (uint)(carry & 1) << 0x1f | temp >> 1;\n      temp5 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    flag2 = 0x7fffffff < temp;\n    if (temp == 0x80000000) {\n      flag2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(temp3 + temp5 * 0x100000 + (uint)CARRY4(temp4,(uint)flag2) | input2,\n                    temp4 + flag2);\n  }\n  flag1 = (temp & 0x80000000) != 0;\n  temp = temp << 1;\n  temp5 = temp4 * 2;\n  flag2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)flag1;\n  temp3 = temp3 * 2 + (uint)(flag2 || CARRY4(temp5,(uint)flag1));\n  temp5 = shifted_input2 - 2;\n  if ((temp3 & 0x100000) != 0) goto LAB_08000268;\n  result2 = temp4;\n  shifted_input2 = temp3;\n  if (temp3 == 0) {\n    result2 = 0;\n    shifted_input2 = temp4;\n  }\n  shift2 = LZCOUNT(shifted_input2);\n  if (temp3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp3 = shift2 - 0xb;\n  is_negative = SBORROW4(temp3,0x20);\n  temp4 = shift2 - 0x2b;\n  flag2 = (int)temp4 < 0;\n  flag1 = temp4 == 0;\n  if ((int)temp3 < 0x20) {\n    is_negative = SCARRY4(temp4,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    flag1 = shift2 == 0;\n    temp4 = temp3;\n    if (!flag1 && flag2 == is_negative) {\n      result2 = shifted_input2 << (temp3 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (flag1 || flag2 != is_negative) {\n    temp = 0x20 - temp4;\n  }\n  shifted_input2 = shifted_input2 << (temp4 & 0xff);\n  if (flag1 || flag2 != is_negative) {\n    shifted_input2 = shifted_input2 | result2 >> (temp & 0xff);\n  }\n  if (flag1 || flag2 != is_negative) {\n    result2 = result2 << (temp4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp3 <= (int)temp5) {\n    return CONCAT44(shifted_input2 + (temp5 - temp3) * 0x100000 | input2,result2);\n  }\n  temp4 = ~(temp5 - temp3);\n  if ((int)temp4 < 0x1f) {\n    shift2 = temp4 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,result2 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | shifted_input2 >> (temp4 & 0xff),\n                    result2 >> (temp4 & 0xff) | shifted_input2 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,shifted_input2 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_result_08000158",
            "entrypoint": "0x08000158",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000158": "calculate_result_08000158",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "is_negative",
                "bVar2": "carry",
                "iVar1": "bit_shift1",
                "iVar8": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "temp5",
                "uVar11": "temp3",
                "uVar12": "temp",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "result2",
                "uVar9": "shifted_input2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800015c": {
            "additional_data": {
                "FUN_0800015c": {
                    "arithmetic_operation": 1,
                    "calculate": 1,
                    "calculate_arithmetic_result": 1,
                    "calculate_concatenation": 3,
                    "calculate_converted_value": 1,
                    "calculate_result": 4,
                    "calculate_shifted_sums": 1,
                    "calculate_sum": 2,
                    "calculate_updated_value": 1,
                    "convert_float_to_long": 1,
                    "perform_arithmetic_operation": 1,
                    "perform_calculation": 1,
                    "reverse_arithmetic": 1,
                    "reverse_bin_op": 1,
                    "reverse_binary_calculation": 1,
                    "reverse_numbers": 1
                },
                "bVar13": {
                    "check": 1,
                    "check1": 1,
                    "check_flag": 1,
                    "condition1": 4,
                    "condition_1": 2,
                    "equal_inputs_check": 1,
                    "flag1": 4,
                    "is_bit_zero": 1,
                    "is_condition_true1": 1,
                    "is_criterion_met": 1,
                    "is_equal": 6,
                    "is_equal1": 1,
                    "is_equal_parts": 1,
                    "is_negative": 1,
                    "is_zero": 1,
                    "same_sign": 1,
                    "temp_var_13": 1,
                    "var13": 1
                },
                "bVar14": {
                    "check2": 1,
                    "check_result": 1,
                    "condition2": 4,
                    "condition_2": 2,
                    "flag2": 4,
                    "is_condition_true": 1,
                    "is_condition_true2": 1,
                    "is_more_descriptive_condition1": 1,
                    "is_multiple": 1,
                    "is_not_zero": 1,
                    "is_overflow": 1,
                    "is_result_zero1": 1,
                    "is_true": 1,
                    "is_zero": 6,
                    "result_flag1": 1,
                    "temp8": 1,
                    "temp_var_14": 1,
                    "var14": 1
                },
                "bVar15": {
                    "carry3": 1,
                    "check3": 1,
                    "condition3": 3,
                    "condition_3": 2,
                    "flag3": 4,
                    "is_borrow_set": 1,
                    "is_carry_set": 1,
                    "is_condition_true3": 1,
                    "is_less_descriptive_condition1": 1,
                    "is_less_than": 1,
                    "is_negative": 5,
                    "is_result_zero2": 1,
                    "is_s_carry": 1,
                    "is_shift_negative": 1,
                    "overflow": 1,
                    "result_flag2": 1,
                    "subtraction_carry_flag": 1,
                    "temp9": 1,
                    "temp_var_15": 1,
                    "var15": 1
                },
                "bVar2": {
                    "bit": 1,
                    "bit1": 1,
                    "carry": 2,
                    "carry1": 3,
                    "carry_bit": 4,
                    "carry_check": 1,
                    "carry_flag": 2,
                    "criterion": 1,
                    "temp2": 3,
                    "temp_var_2": 1,
                    "var2": 2
                },
                "iVar1": {
                    "bit_shift1": 1,
                    "d_shifted_signed": 1,
                    "index1": 1,
                    "remainder_shift": 1,
                    "right_shift_1": 1,
                    "shift1": 3,
                    "shift_amount_2": 1,
                    "shift_amt1": 1,
                    "shift_right1": 1,
                    "shift_right_half1": 1,
                    "shifted_b": 1,
                    "shifted_input2": 2,
                    "shifted_input_2": 1,
                    "temp1": 4,
                    "temp_shifted": 1,
                    "temp_var_1": 1,
                    "var1": 2
                },
                "iVar6": {
                    "b_shifted_signed": 1,
                    "bit_shift2": 1,
                    "index2": 1,
                    "lz_temp": 1,
                    "right_shift_2": 1,
                    "shift1": 1,
                    "shift2": 3,
                    "shift_amount": 2,
                    "shift_amount1": 1,
                    "shift_amount_1": 1,
                    "shift_amt2": 1,
                    "shift_right2": 1,
                    "shift_right_half2": 1,
                    "shifted_d": 1,
                    "shifted_input4": 2,
                    "shifted_input_4": 1,
                    "temp4": 1,
                    "temp6": 3,
                    "temp_4": 1,
                    "temp_shifted_sign": 1,
                    "temp_var": 1,
                    "temp_var_6": 1,
                    "var6": 2
                },
                "iVar6new": {
                    "b_shifted_signed_recalculated": 1
                },
                "param4": {
                    "d": 1
                },
                "param_1": {
                    "a": 2,
                    "first_integer": 1,
                    "float_1": 1,
                    "input1": 15,
                    "input_1": 7,
                    "input_a": 1,
                    "num1": 1,
                    "operand1": 1,
                    "operand_a": 1
                },
                "param_2": {
                    "b": 2,
                    "float_2": 1,
                    "input2": 15,
                    "input_2": 7,
                    "input_b": 1,
                    "num2": 1,
                    "operand2": 1,
                    "operand_b": 1,
                    "second_integer": 1
                },
                "param_3": {
                    "c": 2,
                    "float_3": 1,
                    "input3": 15,
                    "input_3": 7,
                    "input_c": 1,
                    "num3": 1,
                    "operand3": 1,
                    "operand_c": 1,
                    "third_integer": 1
                },
                "param_4": {
                    "d": 1,
                    "float_4": 1,
                    "fourth_integer": 1,
                    "input4": 15,
                    "input_4": 7,
                    "input_d": 1,
                    "num4": 1,
                    "operand4": 1,
                    "operand_d": 1
                },
                "uVar10": {
                    "converted_input_4": 1,
                    "diff": 4,
                    "diff_shifted": 1,
                    "difference": 4,
                    "difference_of_shifted_integers": 1,
                    "lz_count": 1,
                    "result2": 2,
                    "result_2": 2,
                    "shifted_input2_temp": 1,
                    "shifted_operand_c": 1,
                    "temp10": 3,
                    "temp5": 1,
                    "temp7": 2,
                    "temp_7": 1,
                    "temp_input4": 1,
                    "temp_var_10": 1,
                    "updated_num2": 1,
                    "var10": 2
                },
                "uVar10shifted": {
                    "diff_shifted": 1
                },
                "uVar11": {
                    "carry": 1,
                    "carry_result": 1,
                    "input2_carry": 1,
                    "new_carry": 1,
                    "product1": 1,
                    "result3": 1,
                    "result_3": 1,
                    "result_b": 1,
                    "shift_correction": 1,
                    "shifted_carry": 1,
                    "shifted_input1": 1,
                    "shifted_value": 1,
                    "temp1": 1,
                    "temp11": 3,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp8": 2,
                    "temp_3": 1,
                    "temp_8": 1,
                    "temp_result": 1,
                    "temp_result1": 1,
                    "temp_var_11": 1,
                    "temporary_variable": 1,
                    "updated_num3": 1,
                    "var11": 2
                },
                "uVar11bit": {
                    "bit_of_result_b": 1
                },
                "uVar12": {
                    "converted_temp_value": 1,
                    "final_result": 1,
                    "modified_sum2": 1,
                    "negative_result": 1,
                    "result1": 1,
                    "result4": 1,
                    "result_4": 1,
                    "result_a": 1,
                    "shift_amount": 1,
                    "shifted_result": 1,
                    "shifted_result1": 1,
                    "sum_of_shifted_integers": 1,
                    "temp12": 3,
                    "temp2": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp9": 2,
                    "temp_1": 1,
                    "temp_4": 1,
                    "temp_9": 1,
                    "temp_overflow": 1,
                    "temp_result2": 1,
                    "temp_var_12": 1,
                    "var12": 2
                },
                "uVar12bit": {
                    "bit_of_result_a": 1
                },
                "uVar12new": {
                    "recalculated_result_a": 1
                },
                "uVar12shifted": {
                    "result_a_shifted": 1
                },
                "uVar3": {
                    "carry": 1,
                    "carry2": 1,
                    "final_result1": 1,
                    "result1": 1,
                    "shifted_num": 1,
                    "sum1": 1,
                    "sum_1": 1,
                    "sum_a_c": 1,
                    "sum_op1": 1,
                    "temp1": 8,
                    "temp3": 3,
                    "temp_1": 4,
                    "temp_result_2_lower": 1,
                    "temp_var1": 1,
                    "temp_var_3": 1,
                    "var3": 2
                },
                "uVar4": {
                    "final_result2": 1,
                    "result2": 1,
                    "shifted_num2": 1,
                    "shifted_sum1": 1,
                    "sum1": 1,
                    "sum_2": 1,
                    "sum_b_d": 1,
                    "sum_op2": 1,
                    "temp2": 9,
                    "temp4": 3,
                    "temp_2": 4,
                    "temp_result_2_upper": 1,
                    "temp_var2": 1,
                    "temp_var_4": 1,
                    "var4": 2
                },
                "uVar5": {
                    "b": 1,
                    "final_result3": 1,
                    "op": 1,
                    "result1": 1,
                    "shifted_input_2": 1,
                    "sum2": 2,
                    "sum_3": 1,
                    "temp1": 1,
                    "temp3": 8,
                    "temp5": 3,
                    "temp_3": 3,
                    "temp_num": 1,
                    "temp_var3": 1,
                    "temp_var_5": 1,
                    "var5": 2
                },
                "uVar7": {
                    "b_shifted": 1,
                    "shift2": 1,
                    "shifted_b": 2,
                    "shifted_float_2": 1,
                    "shifted_input2": 5,
                    "shifted_input2_": 1,
                    "shifted_input2_times2": 1,
                    "shifted_input_1": 1,
                    "shifted_input_2": 2,
                    "shifted_num3": 1,
                    "shifted_operand_b": 1,
                    "shifted_second_integer": 1,
                    "temp2": 1,
                    "temp4": 3,
                    "temp7": 3,
                    "temp_4": 1,
                    "temp_result": 1,
                    "temp_var_7": 1,
                    "var7": 2
                },
                "uVar8": {
                    "a": 1,
                    "abs_shifted_input_2": 1,
                    "carry_check": 1,
                    "converted_value": 1,
                    "op1": 1,
                    "operand1": 1,
                    "result_1": 1,
                    "shifted_d": 1,
                    "shifted_first_integer": 1,
                    "shifted_input4": 4,
                    "shifted_input4_": 1,
                    "shifted_input_4": 1,
                    "shifted_num4": 1,
                    "shifted_operand_a": 1,
                    "temp3": 1,
                    "temp5": 3,
                    "temp8": 3,
                    "temp_5": 1,
                    "temp_shifted1": 1,
                    "temp_var_8": 1,
                    "var8": 2
                },
                "uVar9": {
                    "abs_shifted_input_1": 1,
                    "converted_input_2": 1,
                    "d_shifted": 1,
                    "operand2": 1,
                    "result1": 2,
                    "result_1": 1,
                    "shifted_d": 1,
                    "shifted_d_bit": 1,
                    "shifted_float_4": 1,
                    "shifted_fourth_integer": 1,
                    "shifted_input4_temp": 1,
                    "shifted_input_4": 1,
                    "shifted_operand_d": 1,
                    "shifted_sum2": 1,
                    "temp4": 2,
                    "temp6": 2,
                    "temp9": 3,
                    "temp_6": 1,
                    "temp_input2": 1,
                    "temp_operand": 1,
                    "temp_shifted2": 1,
                    "temp_var_9": 1,
                    "updated_num": 1,
                    "var9": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08004bd8",
                "FUN_08005838"
            ],
            "code": "\nulonglong calculate_arithmetic_result_0800015c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  byte carry_bit;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int temp6;\n  uint shifted_input2;\n  uint shifted_input4;\n  uint temp9;\n  uint diff;\n  uint temp11;\n  uint temp12;\n  bool is_equal;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input2 = input2 << 1;\n  temp9 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_zero = (shifted_input2 | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (temp9 | input3) == 0;\n  }\n  temp6 = (int)shifted_input2 >> 0x15;\n  if (!is_zero) {\n    is_zero = temp6 == -1;\n  }\n  temp1 = (int)temp9 >> 0x15;\n  if (!is_zero) {\n    is_zero = temp1 == -1;\n  }\n  if (is_zero) {\n    if (temp6 == -1 || temp1 == -1) {\n      temp9 = input4;\n      shifted_input2 = input3;\n      if (temp6 == -1) {\n        temp9 = input2;\n        shifted_input2 = input1;\n      }\n      if (temp6 != -1 || temp1 != -1) {\n        input3 = shifted_input2;\n        input4 = temp9;\n      }\n      is_zero = (shifted_input2 | temp9 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = temp9 == input4;\n      }\n      if (!is_zero) {\n        temp9 = temp9 | 0x80000;\n      }\n      return CONCAT44(temp9,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      temp9 = input2 * 2 + (uint)is_zero;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)is_zero)) {\n        temp9 = temp9 | 0x80000000;\n      }\n      return CONCAT44(temp9,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  temp9 = temp9 >> 0x15;\n  diff = temp9 - shifted_input2;\n  is_zero = diff != 0;\n  if (temp9 < shifted_input2) {\n    diff = -diff;\n  }\n  shifted_input4 = input1;\n  temp3 = input2;\n  if (is_zero && shifted_input2 <= temp9) {\n    shifted_input2 = shifted_input2 + diff;\n    shifted_input4 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < diff) {\n    return CONCAT44(temp3,shifted_input4);\n  }\n  temp9 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = shifted_input4 != 0;\n    shifted_input4 = -shifted_input4;\n    temp9 = -temp9 - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_input2 == diff) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      temp9 = temp9 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      diff = diff - 1;\n    }\n  }\n  temp12 = -diff + 0x20;\n  if ((int)diff < 0x21) {\n    temp11 = input3 << (temp12 & 0xff);\n    input3 = input3 >> (diff & 0xff);\n    temp1 = shifted_input4 + input3;\n    temp2 = temp3 << (temp12 & 0xff);\n    temp12 = temp1 + temp2;\n    temp9 = temp9 + CARRY4(shifted_input4,input3) + ((int)temp3 >> (diff & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp11 = temp3 << (-diff + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp11 = temp11 | 2;\n    }\n    temp3 = (int)temp3 >> (diff - 0x20 & 0xff);\n    temp12 = shifted_input4 + temp3;\n    temp9 = temp9 + ((int)temp3 >> 0x1f) + (uint)CARRY4(shifted_input4,temp3);\n  }\n  input2 = temp9 & 0x80000000;\n  diff = temp9;\n  if ((int)temp9 < 0) {\n    is_zero = temp11 == 0;\n    temp11 = -temp11;\n    diff = -temp12;\n    temp12 = -(uint)!is_zero - temp12;\n    diff = -(uint)(is_zero <= diff) - temp9;\n  }\n  if (0xfffff < diff) {\n    shifted_input4 = shifted_input2 - 1;\n    if (0x1fffff < diff) {\n      temp9 = diff & 1;\n      diff = diff >> 1;\n      carry_bit = (byte)temp12;\n      temp12 = (uint)(temp9 != 0) << 0x1f | temp12 >> 1;\n      temp11 = (uint)(carry_bit & 1) << 0x1f | temp11 >> 1;\n      shifted_input4 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    is_zero = 0x7fffffff < temp11;\n    if (temp11 == 0x80000000) {\n      is_zero = (temp12 & 1) != 0;\n    }\n    return CONCAT44(diff + shifted_input4 * 0x100000 + (uint)CARRY4(temp12,(uint)is_zero) | input2,\n                    temp12 + is_zero);\n  }\n  is_equal = (temp11 & 0x80000000) != 0;\n  temp11 = temp11 << 1;\n  shifted_input4 = temp12 * 2;\n  is_zero = CARRY4(temp12,temp12);\n  temp12 = temp12 * 2 + (uint)is_equal;\n  diff = diff * 2 + (uint)(is_zero || CARRY4(shifted_input4,(uint)is_equal));\n  shifted_input4 = shifted_input2 - 2;\n  if ((diff & 0x100000) != 0) goto LAB_08000268;\n  temp3 = temp12;\n  shifted_input2 = diff;\n  if (diff == 0) {\n    temp3 = 0;\n    shifted_input2 = temp12;\n  }\n  temp6 = LZCOUNT(shifted_input2);\n  if (diff == 0) {\n    temp6 = temp6 + 0x20;\n  }\n  temp12 = temp6 - 0xb;\n  is_negative = SBORROW4(temp12,0x20);\n  diff = temp6 - 0x2b;\n  is_zero = (int)diff < 0;\n  is_equal = diff == 0;\n  if ((int)temp12 < 0x20) {\n    is_negative = SCARRY4(diff,0xc);\n    temp6 = temp6 + -0x1f;\n    is_zero = temp6 < 0;\n    is_equal = temp6 == 0;\n    diff = temp12;\n    if (!is_equal && is_zero == is_negative) {\n      temp3 = shifted_input2 << (temp12 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - temp6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp11 = 0x20 - diff;\n  }\n  shifted_input2 = shifted_input2 << (diff & 0xff);\n  if (is_equal || is_zero != is_negative) {\n    shifted_input2 = shifted_input2 | temp3 >> (temp11 & 0xff);\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp3 = temp3 << (diff & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp12 <= (int)shifted_input4) {\n    return CONCAT44(shifted_input2 + (shifted_input4 - temp12) * 0x100000 | input2,temp3);\n  }\n  diff = ~(shifted_input4 - temp12);\n  if ((int)diff < 0x1f) {\n    temp6 = diff - 0x13;\n    if (temp6 != 0 && temp6 < 0 == SCARRY4(diff - 0x1f,0xc)) {\n      return CONCAT44(temp9,temp3 >> (0x20 - (0xcU - temp6) & 0xff) | shifted_input2 << (0xcU - temp6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    diff = diff + 1;\n    return CONCAT44(input2 | shifted_input2 >> (diff & 0xff),\n                    temp3 >> (diff & 0xff) | shifted_input2 << (0x20 - diff & 0xff));\n  }\n  return CONCAT44(temp9,shifted_input2 >> (diff - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_arithmetic_result_0800015c",
            "entrypoint": "0x0800015c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800015c": "calculate_arithmetic_result_0800015c",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "is_negative",
                "bVar2": "carry_bit",
                "iVar1": "temp1",
                "iVar6": "temp6",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "diff",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar7": "shifted_input2",
                "uVar8": "shifted_input4",
                "uVar9": "temp9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080003d4": {
            "additional_data": {
                "0U": {
                    "zero_constant": 1
                },
                "0x432": {
                    "mid_limit": 1
                },
                "0x433": {
                    "upper_limit": 1
                },
                "CONCAT44": {
                    "combine_parts": 1,
                    "combine_result": 1,
                    "combine_values": 1,
                    "concatenate": 3
                },
                "FUN_080003d4": {
                    "apply_shift_mask": 1,
                    "bit_manipulation": 1,
                    "bit_shift_operation": 1,
                    "bit_shifting_calculation": 1,
                    "bitwise_shift": 3,
                    "bitwise_shift_and_concatenate": 1,
                    "bitwise_shift_operation": 1,
                    "byte_shift": 1,
                    "convert_to_big_int": 1,
                    "extract_bits": 1,
                    "process_param": 1,
                    "reverse_and_shift_bits": 1,
                    "reverse_bits": 2,
                    "reverse_bitwise_operation": 1,
                    "shift_and_combine": 2,
                    "shift_and_concat": 2,
                    "shift_and_concatenate": 4,
                    "shift_and_mask": 1,
                    "shift_and_merge": 2,
                    "shift_variance": 1,
                    "shift_with_padding": 1
                },
                "LAB_080002e0": {
                    "calculate_shift": 1,
                    "end_label": 3,
                    "shift_and_append": 1,
                    "shift_bits": 1,
                    "shift_bits_left": 1,
                    "shift_end_label": 1,
                    "shift_left": 1,
                    "shift_left_and_return": 1,
                    "shift_operation": 1,
                    "shift_right_bits": 1
                },
                "bVar5": {
                    "is_less_than_zero": 2,
                    "is_negative": 28,
                    "is_negative_shift": 1
                },
                "bVar6": {
                    "is_equal_to_zero": 1,
                    "is_zero": 29,
                    "is_zero_shift": 1
                },
                "bVar7": {
                    "borrow": 1,
                    "carry": 2,
                    "carry_flag": 2,
                    "comparison_result": 1,
                    "has_carry": 1,
                    "is_borrow": 4,
                    "is_carry": 5,
                    "is_negative_overflow": 1,
                    "is_overflow": 7,
                    "is_overflown": 1,
                    "is_subtraction": 1,
                    "overflow": 4,
                    "subtraction_overflow": 1
                },
                "iVar3": {
                    "bit_count": 8,
                    "bits": 1,
                    "bits_to_shift": 1,
                    "count": 4,
                    "leading_zeros": 7,
                    "lz_count": 1,
                    "lzcount": 2,
                    "lzcount_result": 2,
                    "num_bits": 2,
                    "shift_amount": 2,
                    "shift_count": 1
                },
                "in_r12": {
                    "mask": 1,
                    "mask3": 1,
                    "mask_value": 1,
                    "remainder": 4,
                    "remaining_bits": 16,
                    "remaining_shift_amount": 1,
                    "shift_amount": 2,
                    "temp": 2,
                    "temp2": 1,
                    "value_mask": 1
                },
                "param_1": {
                    "input": 25,
                    "input_num": 1,
                    "input_value": 5
                },
                "uVar1": {
                    "concatenated_result": 3,
                    "first_part": 1,
                    "mask1": 1,
                    "output": 1,
                    "result": 5,
                    "result1": 6,
                    "result_1": 1,
                    "result_upper": 1,
                    "shift_result": 2,
                    "shifted_and_concatenated_value": 1,
                    "shifted_byte": 1,
                    "shifted_result": 2,
                    "shifted_value": 2,
                    "upper_bits": 3,
                    "upper_part": 1
                },
                "uVar2": {
                    "count": 1,
                    "lower_bits": 2,
                    "mask2": 1,
                    "result2": 5,
                    "result_2": 1,
                    "shift_amount": 15,
                    "shift_amount1": 1,
                    "shift_value": 1,
                    "shifted_value2": 1,
                    "temp_value": 1
                },
                "uVar4": {
                    "adjusted_shift": 1,
                    "adjusted_shift_amount": 1,
                    "concat_shift": 1,
                    "constant": 1,
                    "final_shift_amount": 1,
                    "offset": 1,
                    "result_count": 1,
                    "shift_amount": 7,
                    "shift_amount2": 1,
                    "shift_count": 1,
                    "shift_value": 4,
                    "shifted_bits": 1,
                    "shifted_offset": 1,
                    "sum": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp_var": 1,
                    "total_bits": 3,
                    "total_length": 1,
                    "trailing_zeros": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nulonglong bitwise_shift_and_concatenate_080003d4(uint input)\n\n{\n  uint result1;\n  uint shift_amount;\n  int bit_count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result1 = 0;\n  bit_count = LZCOUNT(input);\n  shift_amount = bit_count + 0x15;\n  is_overflow = SBORROW4(shift_amount,0x20);\n  shift_amount = bit_count - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    is_overflow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = bit_count + 1 == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && is_overflow == false) {\n      result1 = input << shift_amount;\n      input = input >> (0xcU - (bit_count + 1) & 0xff);\n      goto end_label;\n    }\n  }\n  if (is_zero || is_negative != is_overflow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    input = input | zero_constant >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    result1 = 0 << (shift_amount & 0xff);\n  }\nend_label:\n  if (shift_amount < 0x433) {\n    return concatenate(input + (0x432 - shift_amount) * 0x100000,result1);\n  }\n  shift_amount = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  bit_count = shift_amount - 0x13;\n  if (bit_count == 0 || bit_count < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return concatenate(input >> (shift_amount & 0xff),\n                    result1 >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result1 >> (0x20 - (0xcU - bit_count) & 0xff) | input << (0xcU - bit_count & 0xff));\n}\n\n",
            "current_name": "bitwise_shift_and_concatenate_080003d4",
            "entrypoint": "0x080003d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "0U": "zero_constant",
                "CONCAT44": "concatenate",
                "FUN_080003d4": "bitwise_shift_and_concatenate_080003d4",
                "LAB_080002e0": "end_label",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow",
                "iVar3": "bit_count",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "shift_amount",
                "uVar4": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080003f4": {
            "additional_data": {
                "0U": {
                    "zero": 1
                },
                "0x13": {
                    "shift_difference_threshold": 1
                },
                "0x1e": {
                    "max_shift_difference": 1
                },
                "0x433": {
                    "maximum_shift": 1
                },
                "0xcU": {
                    "carry_shift": 1
                },
                "CONCAT44": {
                    "concatenate64": 1
                },
                "FUN_080003f4": {
                    "bit_shift_operation": 2,
                    "convert_to64_bit": 1,
                    "decode_and_shift": 1,
                    "reverse_and_shift": 1,
                    "reverse_and_shift_bits": 2,
                    "reverse_bit_order": 1,
                    "reverse_bits": 17,
                    "reverse_bits_and_shift": 1,
                    "reverse_bitwise_algorithm": 1,
                    "reverse_shift": 2,
                    "reversed_bits": 1
                },
                "F_080003f4": {
                    "reverse_bitwise_shift": 1
                },
                "LAB_080002e0": {
                    "shift_end": 1
                },
                "LZCOUNT": {
                    "leading_zeros_count": 1
                },
                "SCARRY4": {
                    "signed_carry4": 1
                },
                "bVar7": {
                    "check_sign": 1,
                    "is_leading_zero": 1,
                    "is_negative": 19,
                    "is_negative_offset": 1,
                    "is_negative_shift": 2,
                    "is_positive": 1,
                    "is_zero_shift": 1,
                    "less_than": 1,
                    "needs_shift": 1,
                    "negative_shift": 1,
                    "non_negative": 1,
                    "positive_input": 1
                },
                "bVar8": {
                    "equal": 1,
                    "is_negative_value": 1,
                    "is_zero": 19,
                    "is_zero_offset": 1,
                    "is_zero_or_positive": 1,
                    "is_zero_shift": 4,
                    "no_leading_zeros": 1,
                    "zero_leading_zeros": 1,
                    "zero_shift": 2
                },
                "bVar9": {
                    "carry": 3,
                    "carry_flag": 9,
                    "check_carry": 1,
                    "has_carry": 1,
                    "is_carry": 6,
                    "is_carry_shift": 1,
                    "is_negative_overflow": 1,
                    "is_overflow": 1,
                    "is_shift_less_than_leading_zeros": 1,
                    "needs_carry": 1,
                    "overflow": 5,
                    "shift_overflow": 1
                },
                "iVar4": {
                    "count": 1,
                    "leading_zero_count": 2,
                    "leading_zeros": 27,
                    "leading_zeros_count": 1
                },
                "iVar4_new": {
                    "zeros": 1
                },
                "in_r12": {
                    "in_r12": 1,
                    "mask": 3,
                    "remainder": 1,
                    "remainder_bit": 1,
                    "remaining_bits": 17,
                    "remaining_shift": 3,
                    "shift_mask": 1,
                    "shift_remainder": 1,
                    "temp": 3
                },
                "param_1": {
                    "input": 28,
                    "input_number": 1,
                    "input_value": 1,
                    "number": 1
                },
                "uVar1": {
                    "bit_count": 4,
                    "bits_to_shift": 1,
                    "count_leading_zeros": 1,
                    "output1": 1,
                    "output_lower": 1,
                    "output_upper": 2,
                    "result": 10,
                    "result1": 1,
                    "shift_amount": 1,
                    "shift_count": 4,
                    "shifted_input": 4,
                    "shifted_value": 1
                },
                "uVar15": {
                    "shifted_input": 1
                },
                "uVar16": {
                    "shifted_result": 1
                },
                "uVar1_new": {
                    "shift": 1
                },
                "uVar2": {
                    "abs_input": 18,
                    "abs_input_number": 1,
                    "abs_number": 1,
                    "absolute_input": 3,
                    "absolute_value": 1,
                    "input_abs": 2,
                    "temp1": 1,
                    "temp_input": 2,
                    "temp_value": 1,
                    "value": 1
                },
                "uVar2_new": {
                    "abs_value": 1
                },
                "uVar3": {
                    "bit_shift": 1,
                    "effective_shift": 1,
                    "inverse_shift": 1,
                    "shift_amount": 23,
                    "shift_count": 2,
                    "shift_value": 1,
                    "temp2": 1,
                    "temp_shift_count": 1
                },
                "uVar3_new": {
                    "amount": 1
                },
                "uVar5": {
                    "adjusted_leading_zeros": 1,
                    "adjusted_shift": 3,
                    "adjusted_shift_amount": 2,
                    "constant_value": 1,
                    "final_shift": 3,
                    "final_shift_amount": 2,
                    "final_shift_count": 1,
                    "new_shift_amount": 1,
                    "num_bits": 1,
                    "offset": 1,
                    "result_bits": 1,
                    "scaled_shift_amount": 1,
                    "shift_amount": 2,
                    "shift_limit": 1,
                    "shifted": 1,
                    "shifted_bit_count": 1,
                    "shifted_bits": 2,
                    "shifted_leading_zeros": 1,
                    "sum": 1,
                    "temp_shift": 1,
                    "temp_var": 1,
                    "total_bits": 1,
                    "total_shift": 1
                },
                "uVar5_new": {
                    "scaled_amount": 1
                },
                "uVar6": {
                    "input_sign": 2,
                    "is_negative": 2,
                    "sign_bit": 25,
                    "sign_extend": 1,
                    "sign_extension": 1
                },
                "uVar7": {
                    "mask": 1
                },
                "uVar8": {
                    "shifted_result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nulonglong reverse_bits_and_shift_080003f4(uint input)\n\n{\n  uint result;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint final_shift;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  result = 0;\n  leading_zeros = leading_zeros_count(abs_input);\n  final_shift = leading_zeros + 0x15;\n  carry_flag = SBORROW4(final_shift,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (final_shift < 0x20) {\n    carry_flag = signed_carry4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = final_shift;\n    if (!is_zero && carry_flag == false) {\n      result = abs_input << final_shift;\n      abs_input = abs_input >> (carry_shift - (leading_zeros + 1) & 0xff);\n      goto shift_end;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    abs_input = abs_input | zero >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    result = 0 << (shift_amount & 0xff);\n  }\nshift_end:\n  if (final_shift < 0x433) {\n    return concatenate64(abs_input + (0x432 - final_shift) * 0x100000 | sign_bit,result);\n  }\n  shift_amount = ~(0x432 - final_shift);\n  if (0x1e < (int)shift_amount) {\n    return concatenate64(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != signed_carry4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return concatenate64(sign_bit | abs_input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return concatenate64(input,result >> (0x20 - (carry_shift - leading_zeros) & 0xff) | abs_input << (carry_shift - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_and_shift_080003f4",
            "entrypoint": "0x080003f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "0U": "zero",
                "0xcU": "carry_shift",
                "CONCAT44": "concatenate64",
                "FUN_080003f4": "reverse_bits_and_shift_080003f4",
                "LAB_080002e0": "shift_end",
                "LZCOUNT": "leading_zeros_count",
                "SCARRY4": "signed_carry4",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry_flag",
                "iVar4": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "uVar5": "final_shift",
                "uVar6": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000418": {
            "additional_data": {
                "CONCAT44": {
                    "join_u_ints": 1
                },
                "FUN_08000418": {
                    "bitwise_combination": 1,
                    "bitwise_operation": 2,
                    "calculate_shifted_value": 1,
                    "convert_and_shift": 1,
                    "convert_to64_bit": 2,
                    "decode_number": 1,
                    "reverse_bit_pattern": 1,
                    "reverse_bits": 20,
                    "reverse_unsigned_long_long": 1,
                    "reverse_unsigned_long_long_bits": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 1
                },
                "SBORROW4": {
                    "signed_borrow4": 1
                },
                "SCARRY4": {
                    "signed_carry4": 1
                },
                "bVar10": {
                    "carry": 1,
                    "carry_flag": 5,
                    "check3": 1,
                    "condition3": 2,
                    "condition_3": 1,
                    "is_bit_count_negative": 1,
                    "is_bit_set": 1,
                    "is_count_negative": 1,
                    "is_min": 1,
                    "is_negative": 5,
                    "is_negative_shift": 3,
                    "is_negative_shifted": 1,
                    "is_positive": 1,
                    "is_positive_shift": 1,
                    "is_shift_amount_valid": 1,
                    "is_zero": 1,
                    "negative_shift": 1,
                    "overflow3": 1,
                    "was_zero": 1
                },
                "bVar8": {
                    "check1": 1,
                    "condition1": 2,
                    "condition_1": 1,
                    "is_bit_count_zero": 1,
                    "is_lesser_than_zero": 1,
                    "is_lower_shift": 1,
                    "is_negative": 3,
                    "is_positive": 1,
                    "is_residual_zero": 1,
                    "is_shifted": 1,
                    "is_zero": 5,
                    "is_zero_shift": 3,
                    "is_zero_shift_amount": 2,
                    "is_zero_shifted": 1,
                    "less_than32_bits": 1,
                    "less_than_zero": 1,
                    "overflow1": 1,
                    "shift_carry": 1,
                    "shift_required": 1,
                    "shifted_sign_bit": 1
                },
                "bVar9": {
                    "check": 1,
                    "check2": 1,
                    "condition2": 2,
                    "condition_2": 1,
                    "equal_flag": 1,
                    "has_alpha": 1,
                    "is255": 2,
                    "is_all_ones_shift": 1,
                    "is_equal_to_zero": 1,
                    "is_ff000000": 1,
                    "is_ff_value": 1,
                    "is_full_mask": 1,
                    "is_high_byte_zero": 1,
                    "is_input_zero": 1,
                    "is_mask_zero": 1,
                    "is_masked": 3,
                    "is_max": 1,
                    "is_param4_zero": 1,
                    "is_zero": 3,
                    "is_zero2": 1,
                    "is_zero_check": 1,
                    "is_zero_mask": 1,
                    "mask_is_ff000000": 1,
                    "overflow2": 1
                },
                "iVar6": {
                    "bit_count": 13,
                    "bit_length": 1,
                    "count": 7,
                    "leading_zeroes": 1,
                    "leading_zeros": 4,
                    "num_bits": 1,
                    "number_of_leading_zeros": 1,
                    "shift_count": 1,
                    "sign_shift_amount": 1
                },
                "in_r12": {
                    "bit_count": 1,
                    "constant": 1,
                    "in_r12": 1,
                    "mask": 1,
                    "remainder": 3,
                    "remaining_bit_count": 1,
                    "remaining_bits": 12,
                    "remaining_shift": 1,
                    "shift_adjusted": 1,
                    "shift_offset": 1,
                    "shift_value": 1,
                    "temp": 1,
                    "temp2": 2,
                    "temp4": 1,
                    "temp_2": 1,
                    "unused4": 1
                },
                "new_variable_name": {
                    "new_variable_name": 1,
                    "shifted_result": 1
                },
                "new_variable_name_1": {
                    "shifted_input": 1
                },
                "new_variable_name_2": {
                    "residual_shift": 1
                },
                "new_variable_name_3": {
                    "high_bytes": 1
                },
                "new_variable_name_4": {
                    "shifted_high": 1
                },
                "new_variable_name_5": {
                    "shifted_input_high": 1
                },
                "new_variable_name_6": {
                    "residual_result": 1
                },
                "new_variable_name_7": {
                    "is_shifted_high_negative": 1
                },
                "new_variable_name_8": {
                    "residual_shift_minus1": 1
                },
                "new_variable_name_9": {
                    "is_shifted_high_or_residual_negative": 1
                },
                "param_1": {
                    "input": 25,
                    "input_number": 1,
                    "input_value": 4,
                    "number": 1
                },
                "param_2": {
                    "flag1": 1,
                    "param2": 3,
                    "param_2": 1,
                    "temp1": 1,
                    "undefined1": 1,
                    "unused": 1,
                    "unused1": 2,
                    "unused_1": 1,
                    "unused_param": 2,
                    "unused_param1": 1,
                    "unused_param_1": 1,
                    "unused_param_2": 2,
                    "var1": 1
                },
                "param_3": {
                    "flag2": 1,
                    "param3": 3,
                    "param_3": 1,
                    "temp2": 1,
                    "undefined2": 1,
                    "unused": 1,
                    "unused2": 2,
                    "unused_2": 1,
                    "unused_param": 2,
                    "unused_param2": 1,
                    "unused_param_2": 1,
                    "unused_param_3": 2,
                    "var2": 1
                },
                "param_4": {
                    "extra_flag": 1,
                    "flag": 3,
                    "flags": 1,
                    "mask": 13,
                    "param4": 3,
                    "param_4": 1,
                    "shifted_value": 1,
                    "temp3": 1,
                    "unused3": 2,
                    "unused_3": 1,
                    "unused_param3": 1,
                    "unused_param_3": 1,
                    "unused_param_4": 1,
                    "var3": 1
                },
                "return": {
                    "reversed_output": 1
                },
                "return_value": {
                    "reversed_value": 1
                },
                "uVar1": {
                    "bit31": 4,
                    "high_bit": 4,
                    "high_sign_mask": 1,
                    "highest_bit": 1,
                    "mask": 1,
                    "mask1": 1,
                    "msb_bit": 1,
                    "msb_flag": 2,
                    "msb_mask": 2,
                    "msb_set": 1,
                    "msb_shifted": 1,
                    "number_sign_flag": 1,
                    "output_high": 1,
                    "result_high": 1,
                    "sign_bit": 6,
                    "sign_extension": 2
                },
                "uVar2": {
                    "input": 1,
                    "low_sign_mask": 1,
                    "output": 1,
                    "output_low": 1,
                    "result": 5,
                    "shifted": 1,
                    "shifted_input": 4,
                    "shifted_value": 1,
                    "shifted_value_copy": 1,
                    "shifted_var": 1,
                    "temp": 7,
                    "temp1": 4,
                    "temp_var1": 1,
                    "upper_bits": 1
                },
                "uVar3": {
                    "combined": 1,
                    "combined_bits": 1,
                    "final_result": 1,
                    "high_bits": 1,
                    "mask2": 1,
                    "merged_bits": 1,
                    "output_high": 2,
                    "result": 14,
                    "result1": 1,
                    "result_high": 4,
                    "shifted_input": 2,
                    "temp": 1
                },
                "uVar4": {
                    "aligned_bits": 1,
                    "bits_shifted": 1,
                    "low_shift_amount": 1,
                    "shift": 2,
                    "shift_amount": 9,
                    "shift_count": 1,
                    "shifted": 3,
                    "shifted_count": 1,
                    "shifted_input": 7,
                    "shifted_mask": 2,
                    "shifted_value2": 1,
                    "temp2": 1
                },
                "uVar5": {
                    "doubled": 1,
                    "input": 1,
                    "low_shifted_input": 1,
                    "multiplied_input": 1,
                    "shifted_bits": 1,
                    "shifted_input": 5,
                    "shifted_input2": 1,
                    "shifted_mask": 1,
                    "shifted_number": 1,
                    "shifted_value_copy2": 1,
                    "shifted_var_temp": 1,
                    "temp": 4,
                    "temp1": 1,
                    "temp2": 5,
                    "temp3": 1,
                    "temp_shifted": 1,
                    "temp_var2": 1,
                    "tmp1": 1,
                    "twice_input": 1
                },
                "uVar7": {
                    "bit_count_adjusted": 1,
                    "bit_difference": 1,
                    "count_minus_11": 1,
                    "effective_shift": 1,
                    "limit": 1,
                    "low_shift_amount": 1,
                    "msb": 1,
                    "num_bits_minus11": 1,
                    "remaining_bits": 1,
                    "residual": 1,
                    "shift": 2,
                    "shift_amount": 6,
                    "shift_count": 2,
                    "shifted": 1,
                    "shifted_bits": 1,
                    "shifted_input2": 1,
                    "shifted_input3": 1,
                    "shifted_value_copy3": 1,
                    "shifted_zeros": 2,
                    "temp_var": 1,
                    "tmp2": 1,
                    "trailing_bits": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "code": "\nulonglong reverse_unsigned_long_long_bits_08000418(uint input,undefined4 param2,undefined4 param3,uint mask)\n\n{\n  uint sign_bit;\n  uint temp;\n  uint result;\n  uint shift_amount;\n  uint temp2;\n  int bit_count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_zero;\n  bool is_masked;\n  bool is_negative;\n  \n  temp2 = input << 1;\n  is_masked = temp2 == 0;\n  sign_bit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shift_amount = (uint)((int)temp2 >> 3) >> 1;\n  result = sign_bit | shift_amount;\n  input = input << 0x1d;\n  if (!is_masked) {\n    mask = temp2 & 0xff000000;\n    is_masked = mask == 0;\n  }\n  if (!is_masked) {\n    is_masked = mask == 0xff000000;\n  }\n  if (!is_masked) {\n    reversed_output join_u_ints(result,input) ^ 0x3800000000000000;\n  }\n  if ((temp2 & 0xffffff) == 0) {\n    reversed_output join_u_ints(result,input);\n  }\n  if (mask == 0xff000000) {\n    reversed_output join_u_ints(result,input) | 0x8000000000000;\n  }\n  temp = input;\n  temp2 = shift_amount;\n  if (shift_amount == 0) {\n    temp = 0;\n    temp2 = input;\n  }\n  bit_count = leading_zero_count(temp2);\n  if (shift_amount == 0) {\n    bit_count = bit_count + 0x20;\n  }\n  shift_amount = bit_count - 0xb;\n  is_negative = signed_borrow4(shift_amount,0x20);\n  shift_amount = bit_count - 0x2b;\n  is_masked = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if ((int)shift_amount < 0x20) {\n    is_negative = signed_carry4(shift_amount,0xc);\n    bit_count = bit_count + -0x1f;\n    is_masked = bit_count < 0;\n    is_zero = bit_count == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && is_masked == is_negative) {\n      temp = temp2 << (shift_amount & 0xff);\n      temp2 = temp2 >> (0xcU - bit_count & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero || is_masked != is_negative) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  temp2 = temp2 << (shift_amount & 0xff);\n  if (is_zero || is_masked != is_negative) {\n    temp2 = temp2 | temp >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_masked != is_negative) {\n    temp = temp << (shift_amount & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift_amount < 0x381) {\n    reversed_output join_u_ints(temp2 + (0x380 - shift_amount) * 0x100000 | sign_bit,temp);\n  }\n  shift_amount = ~(0x380 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    reversed_output join_u_ints(result,temp2 >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bit_count = shift_amount - 0x13;\n  if (bit_count == 0 || bit_count < 0 != signed_carry4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    reversed_output join_u_ints(sign_bit | temp2 >> (shift_amount & 0xff),\n                    temp >> (shift_amount & 0xff) | temp2 << (0x20 - shift_amount & 0xff));\n  }\n  reversed_output join_u_ints(result,temp >> (0x20 - (0xcU - bit_count) & 0xff) | temp2 << (0xcU - bit_count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_unsigned_long_long_bits_08000418",
            "entrypoint": "0x08000418",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "join_u_ints",
                "FUN_08000418": "reverse_unsigned_long_long_bits_08000418",
                "LZCOUNT": "leading_zero_count",
                "SBORROW4": "signed_borrow4",
                "SCARRY4": "signed_carry4",
                "bVar10": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_masked",
                "iVar6": "bit_count",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "mask",
                "return": "reversed_output",
                "uVar1": "sign_bit",
                "uVar2": "temp",
                "uVar3": "result",
                "uVar4": "shift_amount",
                "uVar5": "temp2",
                "uVar7": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004c8": {
            "additional_data": {
                "FUN_080004c8": {
                    "calculate": 3,
                    "calculate_improved_result": 5,
                    "calculate_improved_value": 4,
                    "calculate_modified_value": 2,
                    "calculate_operation_result": 1,
                    "calculate_product": 1,
                    "calculate_result": 8,
                    "calculate_updated_value": 2,
                    "perform_calculation": 3,
                    "perform_calculations": 1
                },
                "bVar10": {
                    "bool_var2": 1,
                    "carry": 1,
                    "carry_flag": 1,
                    "condition2": 2,
                    "flag2": 9,
                    "flag_2": 2,
                    "is_carry": 1,
                    "is_carry1": 1,
                    "is_condition_false1": 1,
                    "is_greater_than3": 1,
                    "is_negative": 6,
                    "is_overflow": 1,
                    "is_var6_lower": 1,
                    "is_zero2": 2,
                    "temp_bool_2": 1
                },
                "bVar11": {
                    "bool_var3": 1,
                    "condition3": 2,
                    "flag3": 9,
                    "flag_3": 2,
                    "is_borrow": 1,
                    "is_carry2": 1,
                    "is_condition_false2": 1,
                    "is_negative": 4,
                    "is_negative2": 2,
                    "is_overflow": 1,
                    "is_var3_lower": 1,
                    "overflow": 3,
                    "overflow_flag": 1,
                    "subtraction_borrow": 1,
                    "temp_bool_3": 1
                },
                "bVar9": {
                    "bool_var1": 1,
                    "condition1": 2,
                    "flag1": 9,
                    "flag_1": 2,
                    "is_condition_true": 1,
                    "is_var1_zero": 1,
                    "is_zero": 10,
                    "is_zero1": 3,
                    "is_zero2": 1,
                    "temp_bool_1": 1
                },
                "iVar5": {
                    "add_high32": 1,
                    "dummy3": 1,
                    "i_var": 1,
                    "iteration_var": 1,
                    "result5": 3,
                    "sum": 4,
                    "sum1": 1,
                    "temp3": 7,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_2": 1,
                    "temp_3": 1,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "value_3": 1,
                    "var3": 5
                },
                "lVar2": {
                    "mul_high": 1,
                    "product2": 1,
                    "result": 1,
                    "result2": 13,
                    "result_2": 2,
                    "result_part2": 1,
                    "temp": 5,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_result": 3,
                    "temp_var": 2
                },
                "param_1": {
                    "input1": 16,
                    "input_1": 2,
                    "input_param1": 1,
                    "input_value1": 3,
                    "input_var_1": 1,
                    "param1": 3,
                    "value1": 4,
                    "x1": 1
                },
                "param_2": {
                    "input2": 16,
                    "input_2": 2,
                    "input_param2": 1,
                    "input_value2": 3,
                    "input_var_2": 1,
                    "param2": 3,
                    "value2": 4,
                    "x2": 1
                },
                "param_3": {
                    "input3": 16,
                    "input_3": 2,
                    "input_value3": 3,
                    "input_var_3": 1,
                    "param3": 3,
                    "result1": 1,
                    "value3": 4,
                    "y1": 1
                },
                "param_4": {
                    "input4": 16,
                    "input_4": 2,
                    "input_value4": 3,
                    "input_var_4": 1,
                    "param4": 3,
                    "result4": 1,
                    "value4": 4,
                    "y2": 1
                },
                "uVar1": {
                    "mul_low": 1,
                    "product": 1,
                    "product1": 1,
                    "result": 9,
                    "result1": 13,
                    "result_1": 2,
                    "result_hi": 1,
                    "result_low": 1,
                    "result_part1": 1,
                    "temp1": 1
                },
                "uVar12": {
                    "combined": 1,
                    "combined_input": 7,
                    "combined_input_values": 1,
                    "combined_inputs": 4,
                    "combined_params": 2,
                    "combined_result": 1,
                    "combined_values": 3,
                    "concat_result": 1,
                    "concat_value": 1,
                    "concatenated": 1,
                    "concatenated_value": 1,
                    "concatenated_values": 1,
                    "input_combined": 1,
                    "merged_input": 1,
                    "result": 2,
                    "result_high": 1,
                    "temp_8": 1,
                    "value1": 1
                },
                "uVar3": {
                    "dummy1": 1,
                    "mask1": 2,
                    "mut_low32": 1,
                    "new_var1": 1,
                    "result3": 3,
                    "shift2": 1,
                    "temp1": 10,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_1": 1,
                    "temp_result_lower": 1,
                    "temp_var1": 1,
                    "upper_value2": 1,
                    "value_1": 1,
                    "var1": 5
                },
                "uVar4": {
                    "add_low32": 1,
                    "dummy2": 1,
                    "exponent2": 1,
                    "mask2": 2,
                    "new_var2": 1,
                    "result4": 3,
                    "temp2": 10,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_1": 1,
                    "temp_2": 1,
                    "temp_var2": 1,
                    "upper_value2_shifted": 1,
                    "value_2": 1,
                    "var2": 5
                },
                "uVar6": {
                    "calculation_var1": 1,
                    "carry": 1,
                    "difference": 1,
                    "dummy4": 1,
                    "result6": 3,
                    "sub_low32": 1,
                    "temp3": 2,
                    "temp4": 7,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_3": 1,
                    "temp_4": 1,
                    "temp_result3": 1,
                    "temp_var2": 2,
                    "temp_var4": 1,
                    "value_4": 1,
                    "var4": 5
                },
                "uVar7": {
                    "bit_mask": 1,
                    "calculation_var3": 1,
                    "carry": 2,
                    "dummy6": 1,
                    "mask": 2,
                    "result1": 1,
                    "result8": 2,
                    "scale": 1,
                    "temp4": 1,
                    "temp5": 5,
                    "temp6": 3,
                    "temp7": 1,
                    "temp8": 1,
                    "temp_5": 1,
                    "temp_6": 1,
                    "temp_low32": 1,
                    "temp_result": 1,
                    "temp_var5": 1,
                    "value_6": 1,
                    "var5": 1,
                    "var6": 2
                },
                "uVar8": {
                    "calculation_var4": 1,
                    "carry2": 1,
                    "dummy7": 1,
                    "result2": 2,
                    "result9": 3,
                    "temp5": 1,
                    "temp6": 5,
                    "temp7": 3,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_6": 1,
                    "temp_7": 1,
                    "temp_high32": 1,
                    "temp_result2": 1,
                    "temp_result_shifted": 1,
                    "temp_var6": 1,
                    "value_7": 1,
                    "var6": 1,
                    "var7": 4
                },
                "unaff_r5": {
                    "calculation_var2": 1,
                    "dummy5": 1,
                    "mask3": 1,
                    "result7": 3,
                    "sub_high32": 1,
                    "temp3": 1,
                    "temp4": 2,
                    "temp5": 3,
                    "temp6": 1,
                    "temp7": 2,
                    "temp_4": 1,
                    "temp_5": 1,
                    "upper_value4": 1,
                    "value_5": 1,
                    "var4": 1,
                    "var5": 4
                }
            },
            "called": [
                "FUN_080006a4"
            ],
            "calling": [
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_080096e0"
            ],
            "code": "\nulonglong calculate_improved_result_080004c8(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint var5;\n  uint temp5;\n  uint temp6;\n  bool is_zero;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp5 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  is_zero = temp2 == 0;\n  if (!is_zero) {\n    var5 = input4 >> 0x14 & 0x7ff;\n    is_zero = var5 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp2 == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = var5 == 0x7ff;\n  }\n  if (is_zero) {\n    combined_input = calculate_bitwise_operations_080006a4();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  temp3 = temp2 + var5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp5 << 0x15);\n  input4 = input4 & ~(temp5 << 0x15);\n  is_zero = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (is_zero) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp5 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    is_zero = temp4 == 0;\n    temp1 = temp4;\n    if (!is_zero && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp5,temp4);\n      temp1 = temp5 - temp4;\n      is_zero = temp5 == temp4;\n    }\n    if (!is_zero && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!is_zero && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp5 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    is_zero = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp6 = (uint)combined_input;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp5 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp6 = temp6 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      is_zero = (temp6 & 0x80000000) != 0;\n      temp6 = temp6 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp5,temp5) || CARRY4(temp5 * 2,(uint)is_zero)),\n                       temp5 * 2 + (uint)is_zero);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp6 >> 0x15;\n    temp5 = temp6 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    is_zero = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !is_zero) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      is_zero = temp1 == 0x700;\n    }\n    if (!flag2 || is_zero) {\n      is_zero = 0x7fffffff < temp5;\n      if (temp5 == 0x80000000) {\n        is_zero = (temp6 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)is_zero),input3 + is_zero\n                     );\n    }\n  }\n  if (!is_zero && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  is_zero = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || is_zero != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || is_zero != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || is_zero != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp5 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp6 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp6 >> 0x1f);\n    if ((temp5 | temp6 << 1) == 0) {\n      temp4 = temp4 & ~(temp6 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp6 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp5 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "current_name": "calculate_improved_result_080004c8",
            "entrypoint": "0x080004c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004c8": "calculate_improved_result_080004c8",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "bVar9": "is_zero",
                "iVar5": "temp3",
                "lVar2": "result2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar12": "combined_input",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "unaff_r5": "var5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080006a4": {
            "additional_data": {
                "FUN_080006a4": {
                    "bitwise_operation": 1,
                    "calculate_bitwise_operation": 1,
                    "calculate_bitwise_operations": 1,
                    "calculate_result": 5,
                    "calculate_shift": 1,
                    "calculate_shifted_bitwise": 1,
                    "calculate_shifted_result": 1,
                    "calculate_shifted_value": 1,
                    "decode_and_convert": 1,
                    "extract_bit_range": 1,
                    "extract_strategy_from_binary": 1,
                    "perform_bitwise_operation": 1,
                    "perform_bitwise_operations": 1,
                    "reverse_and_combine_bits": 1,
                    "reverse_and_convert": 1,
                    "reverse_binary_operations": 1,
                    "reverse_bits": 5,
                    "reverse_bitwise_operation": 1,
                    "reverse_bitwise_operations": 1,
                    "reverse_operation": 1
                },
                "bVar1": {
                    "flag": 1
                },
                "bVar2": {
                    "flag2": 1
                },
                "bVar4": {
                    "check_result": 1,
                    "flag": 3,
                    "is_zero": 24
                },
                "in_r12": {
                    "bit5": 5,
                    "bit_5": 2,
                    "bit_e": 1,
                    "compared_value_2": 1,
                    "constant": 1,
                    "constant2": 1,
                    "constant_1": 1,
                    "helper2": 1,
                    "input_r12": 1,
                    "mask": 3,
                    "mask1": 1,
                    "mask_1": 1,
                    "temp2": 2,
                    "temp5": 3,
                    "temp_2": 1,
                    "temp_5": 3,
                    "temp_reg_2": 1
                },
                "param_1": {
                    "input1": 14,
                    "input_1": 9,
                    "input_a": 2,
                    "input_param_1": 1,
                    "input_value_1": 2,
                    "num1": 1,
                    "result3": 1,
                    "value1": 1
                },
                "param_2": {
                    "input2": 14,
                    "input_2": 9,
                    "input_b": 2,
                    "input_param_2": 1,
                    "input_value_2": 2,
                    "num2": 1,
                    "result2": 1,
                    "value2": 1
                },
                "param_3": {
                    "input3": 15,
                    "input_3": 9,
                    "input_c": 2,
                    "input_param_3": 1,
                    "input_value_3": 2,
                    "num3": 1,
                    "value3": 1
                },
                "param_4": {
                    "input4": 15,
                    "input_4": 9,
                    "input_d": 2,
                    "input_param_4": 1,
                    "input_value_4": 2,
                    "num4": 1,
                    "value4": 1
                },
                "return_value": {
                    "result": 1
                },
                "uVar1": {
                    "bit1": 9,
                    "bit_1": 3,
                    "bit_a": 1,
                    "loop_condition_1": 1,
                    "result_bit_1": 1,
                    "shifted_input1": 1,
                    "shifted_input_1": 1,
                    "temp1": 5,
                    "temp3": 2,
                    "temp_1": 3,
                    "temp_2": 2,
                    "temp_4": 1,
                    "temp_var_1": 1
                },
                "uVar2": {
                    "bit2": 4,
                    "bit3": 3,
                    "bit_2": 1,
                    "bit_3": 2,
                    "bit_c": 1,
                    "mask": 1,
                    "result4": 1,
                    "result_bit_3": 1,
                    "shifted_in_r12": 1,
                    "shifted_result": 1,
                    "temp2": 2,
                    "temp3": 3,
                    "temp4": 2,
                    "temp_2": 2,
                    "temp_3": 4,
                    "temp_5": 1,
                    "temp_var_2": 1
                },
                "uVar3": {
                    "bit3": 4,
                    "bit4": 3,
                    "bit_4": 2,
                    "bit_d": 1,
                    "loop_condition_2": 1,
                    "result": 1,
                    "result1": 1,
                    "result_bit_4": 1,
                    "shifted_input2": 1,
                    "temp": 1,
                    "temp3": 2,
                    "temp4": 2,
                    "temp5": 2,
                    "temp_3": 2,
                    "temp_4": 3,
                    "temp_6": 2,
                    "temp_value": 1,
                    "temp_var_3": 1
                },
                "uVar4": {
                    "temp1": 1,
                    "temp4": 1
                },
                "uVar5": {
                    "temp2": 1,
                    "temp5": 1
                },
                "unaff_r4": {
                    "bit2": 5,
                    "bit4": 1,
                    "bit_2": 3,
                    "bit_b": 1,
                    "compared_value_1": 1,
                    "condition": 1,
                    "constant1": 1,
                    "flag": 1,
                    "helper1": 1,
                    "mask2": 1,
                    "mask_2": 1,
                    "temp1": 2,
                    "temp2": 3,
                    "temp4": 1,
                    "temp_1": 4,
                    "temp_2": 2,
                    "temp_reg_1": 1,
                    "unaffected_r4": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080004c8"
            ],
            "code": "\nulonglong calculate_bitwise_operations_080006a4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint temp_3;\n  uint bit3;\n  uint bit5;\n  bool is_zero;\n  \n  temp_3 = bit5 & input4 >> 0x14;\n  if (bit2 != bit5 && temp_3 != bit5) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      bit3 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | bit3;\n      if (temp_3 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      temp_3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp_3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  bit3 = input2;\n  if (((!is_zero) && ((bit2 != bit5 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((temp_3 != bit5 || (input1 = input3, bit3 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit3,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "calculate_bitwise_operations_080006a4",
            "entrypoint": "0x080006a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080006a4": "calculate_bitwise_operations_080006a4",
                "bVar4": "is_zero",
                "in_r12": "bit5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "temp_3",
                "uVar3": "bit3",
                "unaff_r4": "bit2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800071c": {
            "additional_data": {
                "FUN_0800071c": {
                    "calculate_double_precision": 2,
                    "calculate_float": 5,
                    "calculate_float_value": 1,
                    "calculate_floating_point": 8,
                    "calculate_floating_point_value": 8,
                    "calculate_improved_value": 1,
                    "calculate_result": 2,
                    "calculate_unsigned_double_precision": 1,
                    "perform_calculation": 2
                },
                "bVar14": {
                    "carry_flag_bool": 1,
                    "condition": 1,
                    "condition1": 5,
                    "equal_exponents": 1,
                    "flag1": 7,
                    "flag_1": 2,
                    "is_case_1": 1,
                    "is_equal": 2,
                    "is_floating_point_operation": 1,
                    "is_zero": 7,
                    "is_zero1": 2,
                    "is_zero_bit": 1
                },
                "bVar15": {
                    "b_var15": 1,
                    "borrow_flag_bool": 1,
                    "condition2": 5,
                    "equality_condition": 1,
                    "flag2": 7,
                    "flag_2": 2,
                    "is_case_2": 1,
                    "is_equal": 7,
                    "is_equal_zero": 1,
                    "is_exponent_zero": 1,
                    "is_zero": 2,
                    "is_zero2": 2
                },
                "bVar16": {
                    "b_var16": 1,
                    "carry": 1,
                    "carry_condition": 2,
                    "carry_flag": 2,
                    "check": 1,
                    "condition3": 4,
                    "flag3": 7,
                    "flag_3": 2,
                    "is_carry": 2,
                    "is_case_3": 1,
                    "is_condition_true": 1,
                    "is_greater_than": 1,
                    "is_negative": 3,
                    "is_negative1": 1,
                    "overflow_flag": 1,
                    "overflow_flag_bool": 1
                },
                "bVar17": {
                    "is_carry": 1,
                    "is_carry2": 1,
                    "is_negative2": 1,
                    "sign_bit_and_exponent": 1
                },
                "iVar8": {
                    "difference": 12,
                    "exponent_diff": 3,
                    "exponent_diff_with_carry": 1,
                    "exponent_difference": 3,
                    "exponent_difference_abs": 1,
                    "temp6": 1,
                    "temp8": 7,
                    "temp_8": 2
                },
                "param_1": {
                    "exponent_bits": 1,
                    "exponent_part": 1,
                    "first_half_lower": 1,
                    "float_part": 1,
                    "input1": 5,
                    "input_1": 1,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "mantissa_and_sign": 1,
                    "num1": 1,
                    "param1": 1,
                    "sign": 6,
                    "sign_and_exponent": 1,
                    "sign_bit": 2,
                    "sign_exponent": 1,
                    "uint_value1": 1,
                    "value1": 1,
                    "value_1": 2,
                    "value_a": 1
                },
                "param_2": {
                    "combined_bits": 1,
                    "exponent": 5,
                    "exponent_and_mantissa": 1,
                    "exponent_and_sign": 1,
                    "exponent_and_significand": 1,
                    "exponent_bits": 1,
                    "first_half_upper": 1,
                    "input2": 5,
                    "input_2": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "long_bits": 1,
                    "mantissa_part1": 1,
                    "num1": 1,
                    "num1_bits": 1,
                    "param2": 1,
                    "sign_and_exponent": 1,
                    "significand": 1,
                    "uint_value2": 1,
                    "value2": 1,
                    "value_2": 2,
                    "value_b": 1
                },
                "param_3": {
                    "exponent": 1,
                    "float_a": 1,
                    "float_val_312": 1,
                    "input3": 5,
                    "input_3": 1,
                    "input_integer": 1,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "left_shifted_significand": 1,
                    "mantissa": 1,
                    "mantissa1": 3,
                    "mantissa_bits1": 1,
                    "mantissa_high": 1,
                    "mantissa_part": 1,
                    "mantissa_part2": 1,
                    "num2": 1,
                    "num2_bits": 1,
                    "param3": 2,
                    "second_half_lower": 1,
                    "uint_value3": 1,
                    "value3": 1,
                    "value_3": 2,
                    "value_c": 1
                },
                "param_4": {
                    "float_b": 1,
                    "input4": 5,
                    "input_4": 1,
                    "input_fraction": 1,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "mantissa2": 3,
                    "mantissa_bits2": 1,
                    "mantissa_low": 1,
                    "mantissa_part3": 1,
                    "num2": 1,
                    "num3": 1,
                    "param4": 2,
                    "raw_bits": 1,
                    "second_half_upper": 1,
                    "sign_and_exponent_bits": 1,
                    "sign_exponent2": 1,
                    "significand": 1,
                    "u_var6": 1,
                    "uint_value4": 1,
                    "value4": 1,
                    "value_4": 2,
                    "value_d": 1
                },
                "reverse_bits_0800088a": {
                    "reverse_bits": 1
                },
                "uVar1": {
                    "bit_1": 1,
                    "bit_mask1": 1,
                    "bit_shifted_input_integer": 1,
                    "exponent_diff": 1,
                    "exponent_sign": 1,
                    "fractional_part": 1,
                    "num_bits1": 1,
                    "position": 1,
                    "result": 1,
                    "result1": 1,
                    "shifted_mantissa_bits": 1,
                    "shifted_param3": 1,
                    "sign_bit": 2,
                    "significand2": 1,
                    "temp1": 14,
                    "temp_1": 2
                },
                "uVar10": {
                    "adjusted_float_a": 1,
                    "leading_bit2": 1,
                    "mantissa2_fraction_part": 1,
                    "normalized_exponent1": 1,
                    "normalized_mantissa1": 1,
                    "num_bits8": 1,
                    "remainder": 1,
                    "result": 1,
                    "rounded_bit_shifted_input_integer": 1,
                    "shifted_exponent": 1,
                    "shifted_exponent_and_sign": 1,
                    "shifted_input2_divided_by2": 1,
                    "temp10": 3,
                    "temp11": 6,
                    "temp2": 1,
                    "temp3": 1,
                    "temp8": 1,
                    "temp9": 2,
                    "temp_11": 2,
                    "temp_3": 1,
                    "u_var10": 1,
                    "var3": 1
                },
                "uVar11": {
                    "adjusted_float_b": 1,
                    "float_val_128": 1,
                    "fractional_part": 1,
                    "mantissa1_fraction_part": 1,
                    "normalized_fractional_part1": 1,
                    "normalized_mantissa2": 1,
                    "remainder": 1,
                    "result": 1,
                    "result1": 1,
                    "result_significand": 1,
                    "rounded_integer": 1,
                    "shifted_mantissa": 1,
                    "temp": 1,
                    "temp10": 1,
                    "temp11": 3,
                    "temp12": 6,
                    "temp3": 1,
                    "temp4": 1,
                    "temp9": 1,
                    "temp_12": 2,
                    "temp_4": 1,
                    "u_var11": 1,
                    "var4": 1
                },
                "uVar12": {
                    "adjusted_mantissa_difference": 1,
                    "exponent_difference": 1,
                    "mantissa_diff": 2,
                    "normalized_fractional_part2": 1,
                    "remaining_difference": 1,
                    "rounded_fraction": 1,
                    "shifted_difference": 1,
                    "temp": 1,
                    "temp10": 2,
                    "temp11": 1,
                    "temp12": 3,
                    "temp13": 6,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_13": 2,
                    "temp_5": 1,
                    "temp_value": 1,
                    "u_var12": 2,
                    "var5": 1
                },
                "uVar13": {
                    "bits_to_shift": 1,
                    "carry_flag": 2,
                    "constant": 1,
                    "end_condition": 1,
                    "exponent_mask": 1,
                    "fractional_bit": 1,
                    "infinity": 1,
                    "input": 1,
                    "leading_bit_mask": 1,
                    "mantissa_mask": 1,
                    "max_11_bit_value": 1,
                    "max_exponent": 1,
                    "normalized_fractional_part": 1,
                    "overflow_check": 1,
                    "temp11": 2,
                    "temp12": 1,
                    "temp13": 2,
                    "temp14": 6,
                    "temp_14": 2,
                    "temp_6": 1,
                    "u_var13": 1,
                    "var6": 1
                },
                "uVar17": {
                    "combined_bits": 1,
                    "combined_float_val": 1,
                    "combined_input": 1,
                    "combined_value": 1,
                    "result": 8,
                    "reverse_bits": 1,
                    "reversed_bits": 10,
                    "reversed_value": 3,
                    "temp_result": 1
                },
                "uVar18": {
                    "bits1": 1,
                    "temp5": 1
                },
                "uVar19": {
                    "bits2": 1,
                    "temp6": 1
                },
                "uVar2": {
                    "bit31": 1,
                    "bit_2": 1,
                    "bit_mask2": 1,
                    "bit_shifted_input_fraction": 1,
                    "exponent2": 1,
                    "exponent_bits": 1,
                    "exponent_masked": 1,
                    "exponent_part1": 1,
                    "normalized_exponent": 1,
                    "num_bits2": 1,
                    "result2": 1,
                    "shifted_input2": 1,
                    "shifted_inverse_mantissa_bits": 1,
                    "temp": 1,
                    "temp2": 14,
                    "temp_2": 2,
                    "temp_value": 1
                },
                "uVar20": {
                    "bits3": 1,
                    "temp7": 1
                },
                "uVar21": {
                    "bits4": 1,
                    "temp8": 1
                },
                "uVar22": {
                    "bits5": 1,
                    "temp9": 1
                },
                "uVar23": {
                    "bits6": 1,
                    "temp10": 1
                },
                "uVar24": {
                    "bits7": 1
                },
                "uVar25": {
                    "bits8": 1
                },
                "uVar26": {
                    "bits9": 1
                },
                "uVar27": {
                    "final_bits1": 1
                },
                "uVar28": {
                    "final_bits2": 1
                },
                "uVar29": {
                    "final_bits3": 1
                },
                "uVar3": {
                    "bit30": 1,
                    "bit_3": 1,
                    "exponent1": 1,
                    "exponent_mantissa_bits": 1,
                    "exponent_part2": 1,
                    "float_val_120": 1,
                    "mantissa_sign": 1,
                    "num_bits3": 1,
                    "position": 1,
                    "shifted_a": 1,
                    "shifted_exponent": 1,
                    "shifted_mantissa1": 1,
                    "shifted_param4": 1,
                    "significand1": 1,
                    "temp1": 1,
                    "temp3": 14,
                    "temp_3": 2
                },
                "uVar30": {
                    "final_bits4": 1
                },
                "uVar31": {
                    "final_bits5": 1
                },
                "uVar32": {
                    "final_bits6": 1
                },
                "uVar33": {
                    "final_bits7": 1
                },
                "uVar34": {
                    "final_bits8": 1
                },
                "uVar35": {
                    "final_bits9": 1
                },
                "uVar36": {
                    "final_bits10": 1
                },
                "uVar37": {
                    "final_bits11": 1
                },
                "uVar4": {
                    "bit29": 1,
                    "bit_4": 1,
                    "exponent2": 1,
                    "exponent_mantissa_bits_inverse": 1,
                    "exponent_part": 1,
                    "float_val_316": 1,
                    "mask": 1,
                    "num_bits4": 1,
                    "shifted_b": 1,
                    "shifted_integer": 1,
                    "shifted_mantissa2": 1,
                    "shifted_param4_divided_by16": 1,
                    "temp2": 1,
                    "temp4": 14,
                    "temp_4": 2,
                    "u_var4": 2
                },
                "uVar5": {
                    "bit28": 1,
                    "bit_5": 1,
                    "carry": 1,
                    "float_val_319": 1,
                    "fraction_part": 1,
                    "mask": 1,
                    "num_bits5": 1,
                    "remainder": 1,
                    "shifted_fraction": 1,
                    "shifted_input2_divided_by16": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp5": 13,
                    "temp7": 1,
                    "temp_5": 2,
                    "u_var5": 3
                },
                "uVar6": {
                    "bit27": 1,
                    "bit_6": 1,
                    "bit_mask": 1,
                    "float_val_323": 1,
                    "mantissa1": 1,
                    "mantissa_bits": 1,
                    "num_bits6": 1,
                    "shifted_bit": 1,
                    "shifted_input2_divided_by8": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp6": 13,
                    "temp8": 1,
                    "temp_6": 2,
                    "temp_value": 1,
                    "u_var6": 3
                },
                "uVar7": {
                    "bit26": 1,
                    "bit_7": 1,
                    "exponent": 1,
                    "exponent_difference": 1,
                    "mantissa2": 1,
                    "mantissa_inverted_bits": 1,
                    "positive_result": 1,
                    "result": 3,
                    "result_sign_and_exponent": 1,
                    "shifted_input2_divided_by4": 1,
                    "shifted_mantissa_and_sign": 1,
                    "temp5": 1,
                    "temp7": 13,
                    "temp_7": 2,
                    "u_var7": 2
                },
                "uVar8": {
                    "mantissa_and_sign_bits": 1
                },
                "uVar9": {
                    "additional_fractional_part": 1,
                    "biased_exponent": 1,
                    "exponent": 1,
                    "exponent_adjusted": 1,
                    "exponent_diff_adjusted": 1,
                    "fraction_part": 1,
                    "leading_bit": 1,
                    "new_exponent_diff": 1,
                    "normalized_exponent": 1,
                    "rounded_exponent": 1,
                    "shifted_difference": 1,
                    "temp1": 1,
                    "temp5": 1,
                    "temp7": 1,
                    "temp8": 2,
                    "temp9": 8,
                    "temp_1": 1,
                    "temp_9": 2,
                    "temp_value": 1,
                    "u_var9": 2,
                    "var1": 1
                },
                "unaff_r5": {
                    "additional_fractional_part_abs": 1,
                    "fraction_part2": 1,
                    "inverse_exponent_bits": 1,
                    "mantissa2_bits": 1,
                    "mantissa_part4": 1,
                    "num_bits7": 1,
                    "other_exponent": 1,
                    "second_half_first_bit": 1,
                    "shifted_exponent_difference": 1,
                    "shifted_param4_divided_by4": 1,
                    "significand1": 1,
                    "temp10": 6,
                    "temp_10": 2,
                    "temp_2": 1,
                    "unaff_r5": 2,
                    "var2": 1
                }
            },
            "called": [
                "FUN_0800088a"
            ],
            "calling": [
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_08004bd8",
                "FUN_08005838"
            ],
            "code": "\nulonglong calculate_floating_point_value_0800071c(undefined4 sign,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int difference;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool is_equal;\n  bool flag3;\n  undefined8 reversed_bits;\n  \n  reversed_bits = CONCAT44(input2,sign);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    reversed_bits = reverse_bits();\n  }\n  temp9 = (uint)((ulonglong)reversed_bits >> 0x20);\n  temp12 = (uint)reversed_bits;\n  difference = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(difference,temp14 >> 1);\n    temp9 = difference + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    is_equal = temp9 == 0;\n    if (!is_equal && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      is_equal = temp14 == temp9;\n    }\n    if (!is_equal && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!is_equal && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    is_equal = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    difference = difference + (uint)flag1;\n    temp9 = difference + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      is_equal = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)is_equal;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!is_equal;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      is_equal = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)is_equal;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!is_equal;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      is_equal = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)is_equal;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!is_equal;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800083a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800083a:\n    flag3 = 0xfc < temp9;\n    is_equal = SBORROW4(temp9,0xfd);\n    temp4 = difference + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      is_equal = SBORROW4(temp4,0x700);\n      temp3 = difference - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == is_equal) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  is_equal = temp9 == 0xffffffca;\n  if (is_equal || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (is_equal || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (is_equal || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  difference = temp3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - difference;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "current_name": "calculate_floating_point_value_0800071c",
            "entrypoint": "0x0800071c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800071c": "calculate_floating_point_value_0800071c",
                "bVar14": "flag1",
                "bVar15": "is_equal",
                "bVar16": "flag3",
                "iVar8": "difference",
                "param_1": "sign",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_bits_0800088a": "reverse_bits",
                "uVar1": "temp1",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "uVar17": "reversed_bits",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar9": "temp9",
                "unaff_r5": "temp10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800088a": {
            "additional_data": {
                "FUN_0800088a": {
                    "calculate_bitwise_result": 1,
                    "calculate_double": 1,
                    "calculate_double_from_uints": 1,
                    "calculate_double_precision": 1,
                    "calculate_double_precision_value": 1,
                    "convert_float_to_binary": 1,
                    "convert_to_double": 3,
                    "decode_and_pack_float64": 1,
                    "decode_float": 1,
                    "decompile_function": 1,
                    "extracted_data": 1,
                    "extracted_function": 1,
                    "perform_calculation": 1,
                    "reverse_and_check": 1,
                    "reverse_and_convert": 1,
                    "reverse_binary_operation": 3,
                    "reverse_binop": 1,
                    "reverse_bits": 5
                },
                "bVar4": {
                    "bool_var": 1,
                    "boolean": 1,
                    "check_result": 1,
                    "condition": 2,
                    "flag": 1,
                    "is_zero": 20,
                    "is_zero_or_not": 1,
                    "temp6": 1,
                    "temp_var6": 1
                },
                "in_r12": {
                    "bit12": 1,
                    "bit4": 1,
                    "bit5": 2,
                    "bit_5": 2,
                    "bitmask": 1,
                    "constant": 2,
                    "constant_r12": 1,
                    "constant_value": 2,
                    "final_value": 1,
                    "input_nan_flag": 1,
                    "mask": 3,
                    "param_flag": 1,
                    "register": 1,
                    "register12": 1,
                    "temp2": 2,
                    "temp5": 2,
                    "temp_5": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var5": 1,
                    "unchanged_var2": 1,
                    "variable4": 1
                },
                "param_1": {
                    "first_param": 2,
                    "input1": 18,
                    "input_1": 5,
                    "input_param1": 1,
                    "input_sign": 1,
                    "input_value": 1,
                    "sign": 1,
                    "value1": 2
                },
                "param_2": {
                    "bit_mask": 1,
                    "exponent": 1,
                    "input2": 18,
                    "input_2": 5,
                    "input_exponent": 1,
                    "input_param2": 1,
                    "second_param": 2,
                    "value2": 2
                },
                "param_3": {
                    "fraction_hi": 1,
                    "input3": 18,
                    "input_3": 5,
                    "input_mantissa": 1,
                    "input_param3": 1,
                    "input_value_2": 1,
                    "third_param": 2,
                    "value3": 2
                },
                "param_4": {
                    "bit_shift": 1,
                    "fourth_param": 2,
                    "fraction_lo": 1,
                    "input4": 18,
                    "input_4": 5,
                    "input_nan_fraction": 1,
                    "input_param4": 1,
                    "value4": 2
                },
                "uVar1": {
                    "bit1": 10,
                    "bit_1": 2,
                    "flag1": 1,
                    "result1": 1,
                    "result_1": 1,
                    "sign_bit": 1,
                    "temp1": 3,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_1": 1,
                    "temp_2": 2,
                    "temp_var1": 2,
                    "temp_var_1": 1
                },
                "uVar2": {
                    "bit2": 4,
                    "bit3": 3,
                    "bit_3": 2,
                    "flag3": 1,
                    "mask_result": 1,
                    "masked_value": 1,
                    "result2": 1,
                    "result_2": 1,
                    "shifted_nan_fraction": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 3,
                    "temp4": 1,
                    "temp_3": 3,
                    "temp_reg2": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "variable2": 1
                },
                "uVar3": {
                    "bit3": 3,
                    "bit4": 3,
                    "bit_4": 2,
                    "flag4": 1,
                    "packed_exponent": 1,
                    "result3": 1,
                    "result_3": 1,
                    "shifted_input2": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 3,
                    "temp5": 1,
                    "temp_4": 3,
                    "temp_reg3": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "updated_input_2": 1,
                    "variable3": 1
                },
                "unaff_r4": {
                    "bit2": 3,
                    "bit4": 1,
                    "bit_2": 2,
                    "bit_flag": 1,
                    "constant": 1,
                    "flag2": 1,
                    "input_sign_flag": 1,
                    "param_5": 1,
                    "result4": 1,
                    "temp1": 4,
                    "temp2": 2,
                    "temp_1": 2,
                    "temp_2": 1,
                    "temp_reg1": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "unaffected_r4": 1,
                    "unaffected_reg": 1,
                    "unaffected_register4": 1,
                    "unchanged_var1": 1,
                    "variable1": 1,
                    "variable_r4": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800071c"
            ],
            "code": "\nulonglong reverse_bits_0800088a(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint bit4;\n  uint mask;\n  bool is_zero;\n  \n  bit2 = mask & input4 >> 0x14;\n  bit4 = input2;\n  if (temp1 != mask || bit2 != mask) {\n    if (temp1 == mask) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit2 != mask)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == mask) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp1 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_080006fc;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_0800088a",
            "entrypoint": "0x0800088a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800088a": "reverse_bits_0800088a",
                "bVar4": "is_zero",
                "in_r12": "mask",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "uVar3": "bit4",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080008fc": {
            "additional_data": {
                "FUN_080008fc": {
                    "check_equal_or_zero": 1,
                    "check_equality": 8,
                    "check_equality_and_boundaries": 1,
                    "check_equality_and_bounds": 1,
                    "check_equality_and_comparison": 1,
                    "check_equality_or_zero": 1,
                    "check_overlap": 1,
                    "check_parameters": 7,
                    "check_parameters_equality_and_set_result": 1,
                    "check_parameters_equivalence": 1,
                    "check_values": 1,
                    "compare_and_check": 1,
                    "compare_inputs": 1,
                    "compare_parameters": 3,
                    "compare_params": 1,
                    "compare_values": 1
                },
                "bVar2": {
                    "are_inputs_zero": 2,
                    "check1": 3,
                    "is_all_zero": 2,
                    "is_equal": 1,
                    "is_input_pair_zero": 1,
                    "is_zero": 19,
                    "is_zero1": 3
                },
                "bVar3": {
                    "check2": 3,
                    "is_bigger_or_equal": 1,
                    "is_condition_met": 2,
                    "is_greater": 1,
                    "is_greater_or_equal": 1,
                    "is_less_or_equal": 6,
                    "is_less_than_or_equal": 2,
                    "is_negative": 9,
                    "is_output_negative": 1,
                    "is_result_negative": 1,
                    "is_zero2": 3,
                    "is_zero_or_negative": 1
                },
                "param_1": {
                    "a": 4,
                    "first_input": 1,
                    "first_value": 1,
                    "input1": 4,
                    "input_1": 1,
                    "num1": 1,
                    "shifted_param_1": 1,
                    "value1": 17,
                    "value_1": 1
                },
                "param_2": {
                    "b": 4,
                    "input2": 4,
                    "input_2": 2,
                    "num2": 1,
                    "second_input": 1,
                    "second_value": 1,
                    "value2": 17,
                    "value_2": 1
                },
                "param_3": {
                    "c": 4,
                    "input3": 4,
                    "input_3": 2,
                    "num3": 1,
                    "third_input": 1,
                    "third_value": 1,
                    "value3": 17,
                    "value_3": 1
                },
                "param_4": {
                    "d": 4,
                    "fourth_input": 1,
                    "fourth_value": 1,
                    "input4": 4,
                    "input_4": 1,
                    "num4": 1,
                    "right_shifted": 1,
                    "shifted_param2": 1,
                    "shifted_param_4": 1,
                    "value4": 15,
                    "value_4": 1
                },
                "return": {
                    "result": 1
                },
                "uVar1": {
                    "bitwise_xor": 1,
                    "result": 13,
                    "result_xor": 1,
                    "temp_var1": 1,
                    "xor_result": 15
                }
            },
            "called": [],
            "calling": [
                "FUN_08000988"
            ],
            "code": "\nuint check_equality_and_boundaries_080008fc(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint xor_result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    result 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    xor_result = value2 ^ value4;\n    is_zero = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)xor_result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    result value4 | 1;\n  }\n  result 0;\n}\n\n",
            "current_name": "check_equality_and_boundaries_080008fc",
            "entrypoint": "0x080008fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080008fc": "check_equality_and_boundaries_080008fc",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "return": "result",
                "uVar1": "xor_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000978": {
            "additional_data": {
                "FUN_08000978": {
                    "check_and_boundaries": 2,
                    "check_boundaries": 2,
                    "check_bounds": 1,
                    "check_equality_and_boundaries": 24,
                    "check_equality_bounds": 1,
                    "verify_equality_and_boundaries": 1
                },
                "param_1": {
                    "arg1": 1,
                    "argument_1": 1,
                    "bound_param_1": 1,
                    "boundary_a": 1,
                    "first_param": 1,
                    "first_parameter": 1,
                    "input1": 1,
                    "input_1": 3,
                    "input_param_1": 2,
                    "input_parameter_1": 1,
                    "lower_bound": 1,
                    "param_3": 1,
                    "param_a": 1,
                    "value1": 5,
                    "value_1": 9,
                    "variable_1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "argument_2": 1,
                    "bound_param_2": 1,
                    "boundary_b": 1,
                    "input2": 1,
                    "input_2": 3,
                    "input_param_2": 2,
                    "input_parameter_2": 1,
                    "param_4": 1,
                    "param_b": 1,
                    "second_param": 1,
                    "second_parameter": 1,
                    "upper_bound": 1,
                    "value2": 5,
                    "value_2": 9,
                    "variable_2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "argument_3": 1,
                    "array1": 1,
                    "bound1": 1,
                    "data_1": 3,
                    "input1": 2,
                    "input_1": 1,
                    "input_param_3": 1,
                    "input_parameter_3": 1,
                    "param_c": 1,
                    "parameter_1": 2,
                    "third_param": 1,
                    "third_parameter": 1,
                    "value1": 2,
                    "value3": 1,
                    "value_3": 6,
                    "value_a": 1,
                    "value_param_1": 2,
                    "variable_3": 1
                },
                "param_4": {
                    "arg4": 1,
                    "argument_4": 1,
                    "array2": 1,
                    "bound2": 1,
                    "data_2": 3,
                    "fourth_param": 1,
                    "fourth_parameter": 1,
                    "input2": 2,
                    "input_2": 1,
                    "input_param_4": 1,
                    "input_parameter_4": 1,
                    "param_d": 1,
                    "parameter_2": 2,
                    "value2": 2,
                    "value4": 1,
                    "value_4": 6,
                    "value_b": 1,
                    "value_param_2": 2,
                    "variable_4": 1
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "code": "\nvoid check_equality_and_boundaries_08000978(undefined4 value_1,undefined4 value_2,undefined4 value_3,undefined4 value_4)\n\n{\n  check_equality_and_boundaries_08000978_08000988(value_3,value_4,value_1,value_2);\n  return;\n}\n\n",
            "current_name": "check_equality_and_boundaries_08000978",
            "entrypoint": "0x08000978",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000978": "check_equality_and_boundaries_08000978",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000988": {
            "additional_data": {
                "FUN_08000988": {
                    "check_and_boundaries": 2,
                    "check_and_return": 2,
                    "check_and_return_param": 3,
                    "check_equality_and_boundaries": 19,
                    "check_equality_boundaries": 1,
                    "validate_and_return": 3,
                    "validate_and_return_input": 1
                },
                "param_1": {
                    "input": 4,
                    "input_param": 5,
                    "input_parameter": 2,
                    "input_value": 17,
                    "new_value": 1,
                    "value": 2
                },
                "param_2": {
                    "new_param_name": 1
                }
            },
            "called": [
                "FUN_080008fc"
            ],
            "calling": [
                "FUN_080009ac",
                "FUN_080009c0",
                "FUN_08000998",
                "FUN_08000978"
            ],
            "code": "\nundefined4 check_equality_and_boundaries_08000988(undefined4 input_value)\n\n{\n  check_equality_and_boundaries_08000988_080008fc();\n  return input_value;\n}\n\n",
            "current_name": "check_equality_and_boundaries_08000988",
            "entrypoint": "0x08000988",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000988": "check_equality_and_boundaries_08000988",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000998": {
            "additional_data": {
                "FUN_08000998": {
                    "check_and_return_non_zero": 1,
                    "check_boundary": 1,
                    "check_condition": 1,
                    "check_equality": 1,
                    "check_equality_and_boundaries": 17,
                    "check_equality_bounds": 1,
                    "check_if_char_not_null": 2,
                    "check_if_character_not_null": 1,
                    "is_char_not_null": 1,
                    "is_character_non_null": 2,
                    "is_character_not_null": 1,
                    "is_character_not_zero": 1,
                    "is_input_valid": 1
                },
                "check_equality_and_boundaries_08000988": {
                    "check_character_equality_and_boundaries": 1,
                    "check_equality_and_boundaries": 1
                },
                "in_ZR": {
                    "char_input": 1,
                    "character": 4,
                    "character_not_null": 1,
                    "input_char": 3,
                    "input_character": 9,
                    "is_nonzero": 1,
                    "is_not_null": 3,
                    "result": 9
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nbool check_equality_and_boundaries_08000998(void)\n\n{\n  char input_character;\n  \n  check_equality_and_boundaries_08000998();\n  return input_character != '\\0';\n}\n\n",
            "current_name": "check_equality_and_boundaries_08000998",
            "entrypoint": "0x08000998",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000998": "check_equality_and_boundaries_08000998",
                "check_equality_and_boundaries_08000988": "check_equality_and_boundaries",
                "in_ZR": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009ac": {
            "additional_data": {
                "FUN_080009ac": {
                    "check_equality_and_boundaries": 1,
                    "check_for_null_termination": 1,
                    "check_if_end_of_string_reached": 1,
                    "check_if_input_is_null_080009ac": 1,
                    "check_if_null_terminated": 1,
                    "check_if_string_empty": 3,
                    "check_if_string_ends_with_null": 1,
                    "check_if_string_is_empty": 3,
                    "check_if_string_terminated": 2,
                    "check_input_termination": 1,
                    "check_null_termination": 2,
                    "check_termination": 1,
                    "is_cy_null": 1,
                    "is_end_of_string": 3,
                    "is_input_empty": 1,
                    "is_input_null": 1,
                    "is_last_character_null": 1,
                    "is_string_empty": 3,
                    "is_string_null_terminated": 2,
                    "is_string_null_terminator": 1
                },
                "in_CY": {
                    "character": 2,
                    "current_character": 2,
                    "input_char": 8,
                    "input_character": 17,
                    "last_character": 1,
                    "string_char": 1
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nbool check_if_string_is_empty_080009ac(void)\n\n{\n  char input_character;\n  \n  check_equality_and_boundaries_08000988();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_string_is_empty_080009ac",
            "entrypoint": "0x080009ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009ac": "check_if_string_is_empty_080009ac",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009c0": {
            "additional_data": {
                "FUN_080009c0": {
                    "check_and_boundaries": 2,
                    "check_and_return_equality_or_boundaries": 1,
                    "check_boundaries_and_equality": 2,
                    "check_boundaries_and_return_bool": 1,
                    "check_bounds_and_equality": 1,
                    "check_equality_and_boundaries": 22,
                    "check_equality_or_boundaries": 1,
                    "is_valid_input": 1
                },
                "in_CY": {
                    "carry_bit": 1,
                    "carry_flag": 4,
                    "condition_flag": 1,
                    "is_bound": 1,
                    "is_carried_over": 1,
                    "is_carry": 15,
                    "is_carry_flag": 3,
                    "is_carry_over": 1,
                    "is_carry_set": 1,
                    "is_cy_set": 1,
                    "is_cy_true": 1,
                    "is_zero_cycle": 1
                },
                "in_ZR": {
                    "is_zero": 13,
                    "is_zero_flag": 2,
                    "is_zero_result": 8,
                    "is_zr_set": 1,
                    "is_zr_true": 1,
                    "zero_flag": 3,
                    "zero_result": 2,
                    "zero_result_flag": 1
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nbool check_and_return_equality_or_boundaries_080009c0(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  check_equality_and_boundaries_08000988();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "current_name": "check_and_return_equality_or_boundaries_080009c0",
            "entrypoint": "0x080009c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009c0": "check_and_return_equality_or_boundaries_080009c0",
                "in_CY": "is_carry",
                "in_ZR": "is_zero"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009d4": {
            "additional_data": {
                "FUN_080009d4": {
                    "check_and_boundaries": 1,
                    "check_and_return": 1,
                    "check_boundaries": 2,
                    "check_boundaries_and_equality": 1,
                    "check_boundaries_and_return_result": 2,
                    "check_boundaries_or_equality": 1,
                    "check_bounds_and_equality": 4,
                    "check_equality_and_boundaries": 19
                },
                "bool": {
                    "boolean": 1
                },
                "in_CY": {
                    "carry": 1,
                    "carry_flag": 2,
                    "carry_result": 1,
                    "is_carry": 21,
                    "is_carry_flag": 2,
                    "is_carry_flag_set": 1,
                    "is_carry_set": 2,
                    "is_zero_equality": 1
                },
                "in_ZR": {
                    "is_boundaries_zero": 1,
                    "is_equal_to_zero": 1,
                    "is_zero": 12,
                    "is_zero_flag": 1,
                    "is_zero_flag_set": 1,
                    "is_zero_result": 10,
                    "is_zero_return": 1,
                    "zero_flag": 1,
                    "zero_result": 3
                }
            },
            "called": [
                "FUN_08000978"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nboolean check_boundaries_and_equality_080009d4(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  check_equality_and_boundaries_08000978();\n  return !(boolean)is_carry || (boolean)is_zero;\n}\n\n",
            "current_name": "check_boundaries_and_equality_080009d4",
            "entrypoint": "0x080009d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009d4": "check_boundaries_and_equality_080009d4",
                "bool": "boolean",
                "in_CY": "is_carry",
                "in_ZR": "is_zero"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009e8": {
            "additional_data": {
                "FUN_080009e8": {
                    "check_equality_and_boundaries": 2,
                    "check_for_null_termination": 1,
                    "check_if_empty_string": 1,
                    "check_if_input_is_empty": 1,
                    "check_if_input_is_null_080009e8": 1,
                    "check_if_null_termination": 1,
                    "check_if_pointer_is_null": 1,
                    "check_if_string_empty": 5,
                    "check_if_string_ends_with_zero": 1,
                    "check_if_string_is_empty": 4,
                    "check_string_termination": 1,
                    "is_cy_null": 1,
                    "is_end_of_input": 1,
                    "is_end_of_string": 2,
                    "is_input_empty": 1,
                    "is_last_character_null": 1,
                    "is_null_terminated": 1,
                    "is_null_termination": 1,
                    "is_null_terminator": 2,
                    "is_string_empty": 2
                },
                "check_equality_and_boundaries_08000978": {
                    "check_string_equality_and_boundaries": 1
                },
                "in_CY": {
                    "char_value": 1,
                    "character": 1,
                    "current_character": 1,
                    "input_char": 8,
                    "input_character": 19,
                    "input_string": 1
                }
            },
            "called": [
                "FUN_08000978"
            ],
            "calling": [
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nbool check_if_string_is_empty_080009e8(void)\n\n{\n  char input_character;\n  \n  check_string_equality_and_boundaries();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_string_is_empty_080009e8",
            "entrypoint": "0x080009e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009e8": "check_if_string_is_empty_080009e8",
                "check_equality_and_boundaries_08000978": "check_string_equality_and_boundaries",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009fc": {
            "additional_data": {
                "FUN_080009fc": {
                    "calculate_adjusted_float": 1,
                    "calculate_float": 6,
                    "calculate_float_bits": 1,
                    "calculate_float_value": 3,
                    "calculate_floating_point": 4,
                    "calculate_floating_point_representation": 1,
                    "calculate_floating_point_value": 4,
                    "calculate_modified_value": 1,
                    "calculate_normalized_value": 1,
                    "calculate_shifted_value": 1,
                    "calculate_uint": 1,
                    "calculate_updated_value": 2,
                    "convert_float_to_u_int": 2,
                    "convert_to_float": 1,
                    "reverse_binary_calculation": 1,
                    "reverse_bits": 1
                },
                "SCARRY4": {
                    "check_carry": 1,
                    "check_overflow": 1,
                    "is_carry_set": 1,
                    "is_negative": 1
                },
                "bVar4": {
                    "check1": 1,
                    "is_special_case1": 1,
                    "is_zero": 29
                },
                "bVar5": {
                    "check2": 1,
                    "is_in_range": 2,
                    "is_less": 1,
                    "is_less_than": 8,
                    "is_less_than2_billion": 1,
                    "is_less_than_boundary": 1,
                    "is_less_than_seven_billion": 1,
                    "is_less_than_threshold": 10,
                    "is_lower_limit": 1,
                    "is_small_double_b": 1,
                    "is_small_exponent_value": 1,
                    "is_smaller": 1,
                    "is_special_case2": 1,
                    "is_valid": 1
                },
                "in_r12": {
                    "additional_val": 1,
                    "additional_value": 1,
                    "adjusted_double_b": 1,
                    "adjusted_exponent2": 1,
                    "adjusted_multiplier2": 1,
                    "alternative_offset": 1,
                    "bit_pattern_with_offset": 1,
                    "check_var": 1,
                    "condition": 2,
                    "modified_input2_if_false": 1,
                    "previous_exponent": 1,
                    "shifted_bits_subtraction": 1,
                    "shifted_input_alternative": 1,
                    "temp3": 4,
                    "temp_value": 6,
                    "temp_value3": 1,
                    "temp_value_3": 1,
                    "temp_var": 1,
                    "temp_var_3": 1,
                    "temp_variable": 1,
                    "temporary_value": 1,
                    "updated_add_result": 1
                },
                "param_1": {
                    "float_a": 1,
                    "float_number": 1,
                    "float_value": 1,
                    "input": 1,
                    "input1": 7,
                    "input_1": 1,
                    "input_float": 1,
                    "input_float1": 1,
                    "input_val": 1,
                    "input_value": 7,
                    "input_value_1": 2,
                    "mantissa": 1,
                    "original_value": 1,
                    "shifted_input_with_one": 1,
                    "significand": 1,
                    "value": 2,
                    "value1": 1
                },
                "param_2": {
                    "bit_pattern": 1,
                    "exponent": 4,
                    "flag": 1,
                    "float_b": 1,
                    "float_bits": 1,
                    "input2": 7,
                    "input_2": 1,
                    "input_float2": 1,
                    "input_mask": 1,
                    "input_multi": 1,
                    "input_value_2": 2,
                    "int_value": 1,
                    "mask": 1,
                    "modifier": 1,
                    "multiplier": 2,
                    "shift_amount": 2,
                    "shift_val": 1,
                    "shifted_and_extended_input": 1,
                    "value2": 1
                },
                "uVar1": {
                    "result": 29,
                    "sign_exponent_mantissa": 1,
                    "updated_value": 1
                },
                "uVar2": {
                    "bit_pattern2_times": 1,
                    "double_b": 1,
                    "double_multiplier": 1,
                    "double_value": 1,
                    "doubled_input2": 1,
                    "doubled_multiplier": 1,
                    "exponent_times2": 1,
                    "exponent_times_two": 1,
                    "input2_times_two": 1,
                    "modified_input2": 1,
                    "mul_result": 1,
                    "multiplied_input2": 1,
                    "multiplied_value": 2,
                    "multiplier": 2,
                    "shifted_amount": 1,
                    "shifted_bits": 1,
                    "shifted_double_input": 1,
                    "shifted_val": 1,
                    "shifted_value": 1,
                    "temp": 1,
                    "temp1": 4,
                    "temp_value1": 1,
                    "temp_value_1": 1,
                    "temp_var_1": 1,
                    "twice_input2": 1,
                    "twice_param2": 1
                },
                "uVar3": {
                    "add_result": 1,
                    "adjusted_bit_pattern": 1,
                    "adjusted_exponent": 1,
                    "adjusted_multiplier": 1,
                    "adjusted_value": 2,
                    "float_var": 1,
                    "modified_doubled_multiplier": 1,
                    "modified_input2": 2,
                    "modified_multiplier": 1,
                    "modified_value": 1,
                    "new_double_b": 1,
                    "new_mask": 1,
                    "new_value": 1,
                    "normalized_value": 1,
                    "offset": 1,
                    "partial_result": 1,
                    "shifted_and_extended_input": 1,
                    "shifted_bits_plus_constant": 1,
                    "temp2": 4,
                    "temp_val": 1,
                    "temp_value2": 1,
                    "temp_value_2": 1,
                    "temp_var_2": 1,
                    "updated_double_value": 1,
                    "updated_exponent": 1,
                    "updated_value_with_offset": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "code": "\nuint calculate_float_value_080009fc(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp_value;\n  bool is_zero;\n  bool is_less_than_threshold;\n  \n  temp1 = input2 * 2;\n  is_less_than_threshold = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than_threshold) {\n    temp_value = temp1 + 0x8fe00000;\n    result = temp_value;\n  }\n  is_zero = result == 0;\n  if (!is_less_than_threshold && temp2 >= 0x200000) {\n    is_zero = temp_value == 0x1fc00000;\n  }\n  if (((is_less_than_threshold || temp2 < 0x200000) || 0x1fc00000 < temp_value) || is_zero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != check_overflow(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_float_value_080009fc",
            "entrypoint": "0x080009fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009fc": "calculate_float_value_080009fc",
                "SCARRY4": "check_overflow",
                "bVar4": "is_zero",
                "bVar5": "is_less_than_threshold",
                "in_r12": "temp_value",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "additional_data": {
                "FUN_08000aa4": {
                    "apply_bitwise_operations": 1,
                    "binary_to_float": 1,
                    "calculate_float": 10,
                    "calculate_floating_point": 1,
                    "calculate_floating_point_value": 1,
                    "calculate_modified_float": 1,
                    "calculate_new_float": 1,
                    "calculate_new_value": 1,
                    "calculate_result": 2,
                    "calculate_shifted_sum": 1,
                    "perform_arithmetic": 1,
                    "perform_arithmetic_operation": 2,
                    "perform_unsigned_division": 1,
                    "process_data": 1,
                    "reverse_bits": 2,
                    "reverse_bitwise_operation": 1,
                    "reverse_operation": 1,
                    "reverse_with_carry": 1,
                    "reversed_float": 1
                },
                "LZCOUNT": {
                    "leading_zeros_count": 1
                },
                "bVar8": {
                    "are_equal_significant_bits": 1,
                    "check": 1,
                    "check_flag": 1,
                    "comparison_result": 1,
                    "condition": 1,
                    "condition_check": 1,
                    "flag": 2,
                    "is_condition_met": 1,
                    "is_condition_satisfied": 1,
                    "is_equal": 13,
                    "is_true": 3,
                    "is_zero": 4,
                    "is_zero_shift": 1
                },
                "iVar1": {
                    "bit_count": 1,
                    "dividend_shift": 1,
                    "high_byte_1": 1,
                    "high_byte_operand1": 1,
                    "input_sign_shifted": 1,
                    "left_shifted_input": 1,
                    "left_shifted_input1": 1,
                    "msb_float1": 1,
                    "msb_input": 1,
                    "msb_shifted": 1,
                    "result_1": 1,
                    "shift1": 1,
                    "shift_amount": 2,
                    "shifted_float": 2,
                    "shifted_input1": 1,
                    "shifted_input_1": 2,
                    "shifted_input_1_24th_bit": 1,
                    "shifted_input_1_sign": 1,
                    "shifted_input_byte": 1,
                    "shifted_input_val": 1,
                    "shifted_input_value": 1,
                    "shifted_value": 2,
                    "sign_1": 1,
                    "temp1": 2
                },
                "iVar2": {
                    "divisor_shift": 1,
                    "float_part": 1,
                    "high_byte_2": 1,
                    "high_byte_shifted_op2": 1,
                    "input_exp_shifted": 1,
                    "left_shifted_input2": 1,
                    "left_shifted_mask": 1,
                    "msb_float2": 1,
                    "msb_mask": 1,
                    "msb_shifted2": 1,
                    "result_2": 1,
                    "shift2": 1,
                    "shift_amount_2": 1,
                    "shifted_input2": 1,
                    "shifted_input_2": 2,
                    "shifted_input_2_24th_bit": 1,
                    "shifted_input_mask": 1,
                    "shifted_int": 1,
                    "shifted_mask_val": 1,
                    "shifted_rounding_byte": 1,
                    "shifted_value": 1,
                    "shifted_value2": 2,
                    "sign_2": 1,
                    "temp": 1,
                    "temp2": 3
                },
                "param_1": {
                    "dividend": 1,
                    "float1": 1,
                    "input": 5,
                    "input1": 2,
                    "input_1": 7,
                    "input_exponent": 1,
                    "input_float": 3,
                    "input_num": 1,
                    "input_sign": 1,
                    "input_val": 1,
                    "input_value": 4,
                    "input_value_1": 1,
                    "operand1": 2,
                    "value1": 1
                },
                "param_2": {
                    "bit_reverse_mask": 1,
                    "carry": 1,
                    "divisor": 1,
                    "flag": 1,
                    "float2": 1,
                    "input2": 2,
                    "input_2": 7,
                    "input_exp": 1,
                    "input_flag": 1,
                    "input_int1": 1,
                    "input_mantissa": 1,
                    "input_mask": 1,
                    "input_value_2": 1,
                    "mask": 6,
                    "mask_val": 1,
                    "operand2": 2,
                    "value2": 1,
                    "xor_value": 1
                },
                "param_3": {
                    "constant1": 1,
                    "constant_1": 2,
                    "data": 1,
                    "flag": 3,
                    "input_3": 4,
                    "input_frac": 1,
                    "input_int2": 1,
                    "input_undefined": 1,
                    "input_value_3": 1,
                    "modifier": 1,
                    "operation": 1,
                    "param_3": 4,
                    "shift_val": 1,
                    "shift_value": 1,
                    "threshold": 1,
                    "undefined": 1,
                    "undefined_arg": 1,
                    "unused": 2,
                    "unused_parameter": 1,
                    "value3": 1
                },
                "param_4": {
                    "carry": 1,
                    "comparison_value": 1,
                    "constant2": 1,
                    "constant_2": 2,
                    "flags": 1,
                    "float3": 1,
                    "input3": 1,
                    "input_3": 1,
                    "input_4": 4,
                    "input_int3": 1,
                    "input_value": 1,
                    "input_value_4": 1,
                    "mask": 1,
                    "output_bits": 1,
                    "output_num": 1,
                    "param_4": 2,
                    "remainder": 1,
                    "result": 5,
                    "round_mode": 1,
                    "rounding": 1,
                    "rounding_mode": 1,
                    "shift": 1
                },
                "uVar3": {
                    "abs_float2": 1,
                    "bitwise_complement": 1,
                    "dividend_copy": 1,
                    "flipped_input": 1,
                    "flipped_input_2": 1,
                    "input_float_copy": 1,
                    "input_float_temp": 1,
                    "input_xor": 1,
                    "inverted_op2": 1,
                    "mask": 1,
                    "masked_input": 2,
                    "modified_input2": 1,
                    "modified_operand2": 1,
                    "result": 1,
                    "result1": 1,
                    "result_1": 1,
                    "shifted_float_xor": 1,
                    "shifted_input_2": 1,
                    "shifted_xor_value": 1,
                    "temp1": 3,
                    "temp3": 1,
                    "temp_1": 1,
                    "temp_var_1": 1,
                    "tmp_sign": 1,
                    "value1": 1,
                    "value1_shifted": 1,
                    "xor_input_mask": 1,
                    "xor_result": 1
                },
                "uVar4": {
                    "abs_float1": 1,
                    "divisor_copy": 1,
                    "flipped_input_3": 1,
                    "flipped_mask": 1,
                    "input_mask_val": 1,
                    "masked_result": 1,
                    "masked_rounding": 1,
                    "modified_operand1": 1,
                    "result2": 1,
                    "result_2": 1,
                    "shifted_2_ones_bit": 1,
                    "shifted_float_copy": 1,
                    "shifted_float_sign": 1,
                    "shifted_temp_value": 1,
                    "temp1": 2,
                    "temp2": 3,
                    "temp4": 1,
                    "temp_1": 1,
                    "temp_2": 1,
                    "temp_operand": 1,
                    "temp_value1": 1,
                    "temp_var1": 1,
                    "temp_var_2": 1,
                    "temp_variable": 1,
                    "tmp_frac1": 1,
                    "u_var4": 1,
                    "value2": 1,
                    "value2_shifted": 1
                },
                "uVar5": {
                    "dividend_significant_bits": 1,
                    "input1": 1,
                    "input_value_shifted": 1,
                    "left_shift_val": 1,
                    "modified_input1": 1,
                    "normalized_float": 1,
                    "output": 2,
                    "res_float": 1,
                    "result": 3,
                    "result1": 1,
                    "result_1": 1,
                    "result_float": 1,
                    "shifted_input": 3,
                    "shifted_input_1": 2,
                    "shifted_input_value": 1,
                    "shifted_operand1": 1,
                    "shifted_result": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp_1": 1,
                    "temp_3": 1,
                    "temp_value2": 1,
                    "temp_var2": 1,
                    "tmp_frac2": 1
                },
                "uVar6": {
                    "adjusted_shift": 1,
                    "count1": 1,
                    "diff_msb": 1,
                    "divisor_significant_bits": 1,
                    "input2": 1,
                    "output_value": 1,
                    "result2": 1,
                    "rshifted_input_val": 1,
                    "shift_amount": 2,
                    "shifted_mask": 2,
                    "shifted_output": 1,
                    "shifted_result": 2,
                    "temp": 2,
                    "temp1": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp_1": 1,
                    "temp_2": 2,
                    "temp_4": 1,
                    "temp_value3": 1,
                    "temp_var3": 1,
                    "temp_variable2": 1,
                    "tmp_exp": 1,
                    "u_var6": 1,
                    "updated_shift_amount": 1
                },
                "uVar7": {
                    "count2": 1,
                    "diff_float": 1,
                    "diff_temp": 1,
                    "difference": 19,
                    "shift_difference": 2,
                    "temp4": 1,
                    "temp5": 1,
                    "temp7": 1,
                    "temp_2": 1,
                    "temp_3": 1,
                    "temp_5": 1,
                    "tmp_diff": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "code": "\nuint calculate_new_float_08000aa4(uint input_1,uint input_2,undefined4 param_3,uint result)\n\n{\n  int shifted_input_1;\n  int temp2;\n  uint temp1;\n  uint temp2;\n  uint result;\n  uint shifted_result;\n  uint difference;\n  bool is_equal;\n  \n  temp1 = input_2 ^ 0x80000000;\n  result = input_1 << 1;\n  is_equal = result == 0;\n  if (!is_equal) {\n    result = input_2 << 1;\n    is_equal = result == 0;\n  }\n  if (!is_equal) {\n    is_equal = result == result;\n  }\n  shifted_input_1 = (int)result >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input_1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)result >> 0x18 == -1;\n  }\n  if (is_equal) {\n    temp2 = (int)(input_2 << 1) >> 0x18;\n    if (shifted_input_1 == -1 || temp2 == -1) {\n      result = temp1;\n      if (shifted_input_1 == -1) {\n        result = input_1;\n      }\n      if (shifted_input_1 != -1 || temp2 != -1) {\n        temp1 = result;\n      }\n      is_equal = (result & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result == temp1;\n      }\n      if (!is_equal) {\n        result = result | 0x400000;\n      }\n      return result;\n    }\n    if (((input_1 ^ temp1) & 0x7fffffff) != 0) {\n      if (result == 0) {\n        input_1 = temp1;\n      }\n      return input_1;\n    }\n    if (input_1 != temp1) {\n      return 0;\n    }\n    if ((result & 0xff000000) == 0) {\n      temp1 = input_1 << 1;\n      if ((input_1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (result < 0xfe000000) {\n      return input_1 + 0x800000;\n    }\n    input_1 = input_1 & 0x80000000;\nLAB_08000bde:\n    return input_1 | 0x7f800000;\n  }\n  result = result >> 0x18;\n  result = result >> 0x18;\n  difference = result - result;\n  is_equal = difference != 0;\n  shifted_result = result;\n  if (is_equal && result <= result) {\n    shifted_result = result + difference;\n  }\n  if (is_equal && result <= result) {\n    temp1 = temp1 ^ input_1;\n  }\n  if (is_equal && result <= result) {\n    input_1 = input_1 ^ temp1;\n  }\n  if (is_equal && result <= result) {\n    temp1 = temp1 ^ input_1;\n  }\n  if (result < result) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input_1;\n  }\n  result = input_1 & 0xffffff | 0x800000;\n  if ((input_1 & 0x80000000) != 0) {\n    result = -result;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (shifted_result == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (shifted_result == 0) {\n      result = result ^ 0x800000;\n      shifted_result = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = result + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input_1 = result & 0x80000000;\n  if ((int)result < 0) {\n    is_equal = temp2 != 0;\n    temp2 = -temp2;\n    result = -result - (uint)is_equal;\n  }\n  if (result < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    result = result * 2 + (uint)(temp1 != 0);\n    temp1 = shifted_result - 2;\n    if ((result & 0x800000) == 0) {\n      difference = leading_zeros_count(result) - 8;\n      result = result << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        result = result >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        result = result + (temp1 - difference) * 0x800000;\n      }\n      return result | input_1;\n    }\n  }\n  else {\n    temp1 = shifted_result - 1;\n    if (0xffffff < result) {\n      temp1 = result & 1;\n      result = result >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = shifted_result;\n      if (0xfd < shifted_result) goto LAB_08000bde;\n    }\n  }\n  result = result + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result | input_1;\n}\n\n",
            "current_name": "calculate_new_float_08000aa4",
            "entrypoint": "0x08000aa4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aa4": "calculate_new_float_08000aa4",
                "LZCOUNT": "leading_zeros_count",
                "bVar8": "is_equal",
                "iVar1": "shifted_input_1",
                "iVar2": "temp2",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_4": "result",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "result",
                "uVar6": "shifted_result",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "additional_data": {
                "FUN_08000aa8": {
                    "apply_floating_point_operation": 1,
                    "calculate_float": 9,
                    "calculate_float_manipulation": 1,
                    "calculate_float_operation": 1,
                    "calculate_float_value": 1,
                    "calculate_floating_point": 7,
                    "calculate_normalized_float": 1,
                    "calculate_result": 1,
                    "convert_to_float": 2,
                    "perform_calculation": 1,
                    "process_floating_point": 1,
                    "process_numbers": 1,
                    "reverse_bits": 1
                },
                "LZCOUNT": {
                    "count_leading_zeros": 1,
                    "leading_zero_bit_count": 1,
                    "leading_zero_count": 4,
                    "leading_zeros_count": 1
                },
                "bVar7": {
                    "condition": 1,
                    "exponents_equal": 1,
                    "flag": 2,
                    "is_condition_met": 1,
                    "is_condition_true": 1,
                    "is_equal": 7,
                    "is_shifted": 1,
                    "is_true": 2,
                    "is_zero": 14,
                    "is_zero_result": 1
                },
                "iVar1": {
                    "bit_shifted_num1": 1,
                    "exponent1_shifted": 1,
                    "first_shift": 1,
                    "high_bits_operand1": 1,
                    "msb1": 1,
                    "operand1_sign": 1,
                    "shift": 1,
                    "shift1": 2,
                    "shift_amount": 1,
                    "shift_amount1": 2,
                    "shift_value1": 1,
                    "shifted1": 2,
                    "shifted_float1": 1,
                    "shifted_input1": 5,
                    "shifted_input1_sign": 1,
                    "shifted_input_1": 2,
                    "shifted_number1": 1,
                    "shifted_value1": 1,
                    "sign1": 1,
                    "signed_input_value": 1,
                    "temp1": 2,
                    "x_msb": 1
                },
                "iVar2": {
                    "bit_shifted_num2": 1,
                    "exponent2_shifted": 1,
                    "high_bits_operand2": 1,
                    "msb2": 1,
                    "operand2_sign": 1,
                    "second_shift": 1,
                    "shift2": 3,
                    "shift_amount2": 3,
                    "shift_value2": 1,
                    "shifted2": 2,
                    "shifted_float2": 1,
                    "shifted_input2": 5,
                    "shifted_input2_sign": 1,
                    "shifted_input_2": 2,
                    "shifted_number2": 1,
                    "shifted_value2": 1,
                    "sign2": 1,
                    "signed_exponent": 1,
                    "temp2": 2,
                    "y_msb": 1
                },
                "param_1": {
                    "exponent1": 1,
                    "first_number": 1,
                    "float1": 1,
                    "input1": 14,
                    "input_1": 1,
                    "input_float1": 1,
                    "input_value": 1,
                    "input_value_1": 1,
                    "integer1": 2,
                    "num1": 1,
                    "number1": 1,
                    "operand1": 2,
                    "value1": 3,
                    "x": 1
                },
                "param_2": {
                    "exponent": 1,
                    "exponent2": 1,
                    "float2": 1,
                    "input2": 14,
                    "input_2": 1,
                    "input_float2": 1,
                    "input_value_2": 1,
                    "integer2": 2,
                    "num2": 1,
                    "number2": 1,
                    "operand2": 2,
                    "second_number": 1,
                    "value2": 3,
                    "y": 1
                },
                "param_3": {
                    "flag": 1,
                    "flags": 1,
                    "fractional_bits": 1,
                    "initial_value": 1,
                    "input3": 10,
                    "input_u_int1": 1,
                    "input_value_3": 1,
                    "operation_type": 1,
                    "param3": 6,
                    "param_3": 1,
                    "parameter_3": 1,
                    "size": 1,
                    "unused": 1,
                    "unused_parameter": 1,
                    "value": 1,
                    "value3": 1,
                    "z": 1
                },
                "param_4": {
                    "exponent_diff": 1,
                    "flag": 1,
                    "input4": 10,
                    "input_3": 1,
                    "input_u_int2": 1,
                    "input_value_4": 1,
                    "output": 1,
                    "overflow_flag": 1,
                    "param4": 6,
                    "param_4": 1,
                    "result": 4,
                    "unused_parameter": 1,
                    "value4": 1,
                    "w": 1
                },
                "uVar3": {
                    "abs_float1": 1,
                    "abs_input1": 1,
                    "abs_input_1": 1,
                    "bit_shifted_input2": 1,
                    "exponent1_frac": 1,
                    "fraction1": 1,
                    "mantissa1": 2,
                    "mask1": 2,
                    "masked_number1": 1,
                    "multiplied_input1": 1,
                    "normalized_input1": 1,
                    "operand1_mantissa": 1,
                    "result": 2,
                    "result1": 7,
                    "result_1": 1,
                    "shifted_input2_abs": 1,
                    "shifted_result": 1,
                    "sign1": 1,
                    "temp3": 1,
                    "temp_operand1": 1,
                    "temp_value": 1,
                    "x_sign_exp": 1
                },
                "uVar4": {
                    "abs_float2": 1,
                    "abs_input1": 1,
                    "abs_input2": 1,
                    "abs_input_2": 1,
                    "exponent2_frac": 1,
                    "fraction2": 1,
                    "mantissa2": 2,
                    "mask2": 1,
                    "masked_number2": 1,
                    "normalized_input2": 1,
                    "operand1_exponent": 1,
                    "result": 1,
                    "result2": 3,
                    "shifted1_result": 1,
                    "shifted_input1": 2,
                    "shifted_input1_times2": 1,
                    "shifted_multiplied_input1": 1,
                    "shifted_num1": 1,
                    "sign2": 1,
                    "temp1": 3,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_1": 1,
                    "temp_operand2": 1,
                    "y_sign_exp": 1
                },
                "uVar5": {
                    "abs_diff": 1,
                    "abs_difference": 1,
                    "abs_input2": 1,
                    "count": 2,
                    "difference": 1,
                    "exponent1_orig": 1,
                    "final_input1": 1,
                    "final_result": 1,
                    "loop_counter": 2,
                    "num_bits": 1,
                    "operand2_mantissa": 1,
                    "result2": 1,
                    "shift_amount": 3,
                    "shift_count": 3,
                    "shift_diff": 1,
                    "shifted_input": 1,
                    "shifted_num2": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 3,
                    "temp5": 1,
                    "temp_2": 1,
                    "u_var": 1
                },
                "uVar6": {
                    "abs_shift_diff": 1,
                    "abs_shifted_diff": 1,
                    "abs_shifts": 1,
                    "absolute_difference": 1,
                    "diff": 2,
                    "diff_count": 1,
                    "difference": 20,
                    "exponent2_orig": 1,
                    "operand2_exponent": 1,
                    "temp2": 1,
                    "temp6": 1
                },
                "uVar8": {
                    "mask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "code": "\nuint calculate_normalized_float_08000aa8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint temp1;\n  uint shift_count;\n  uint difference;\n  bool is_zero;\n  \n  temp1 = input1 << 1;\n  is_zero = temp1 == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp1 == input4;\n  }\n  shifted_input1 = (int)temp1 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      temp1 = input2;\n      if (shifted_input1 == -1) {\n        temp1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = temp1;\n      }\n      is_zero = (temp1 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = temp1 == input2;\n      }\n      if (!is_zero) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - temp1;\n  is_zero = difference != 0;\n  shift_count = temp1;\n  if (is_zero && temp1 <= input4) {\n    shift_count = temp1 + difference;\n  }\n  if (is_zero && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && temp1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < temp1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (shift_count == difference) {\n    result1 = result1 ^ 0x800000;\n    if (shift_count == 0) {\n      temp1 = temp1 ^ 0x800000;\n      shift_count = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    is_zero = result1 != 0;\n    result1 = -result1;\n    temp1 = -temp1 - (uint)is_zero;\n  }\n  if (temp1 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    temp1 = temp1 * 2 + (uint)(difference != 0);\n    difference = shift_count - 2;\n    if ((temp1 & 0x800000) == 0) {\n      shift_count = leading_zero_count(temp1) - 8;\n      temp1 = temp1 << (shift_count & 0xff);\n      if ((int)difference < (int)shift_count) {\n        temp1 = temp1 >> (-(difference - shift_count) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (difference - shift_count) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    difference = shift_count - 1;\n    if (0xffffff < temp1) {\n      difference = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = shift_count;\n      if (0xfd < shift_count) goto LAB_08000bde;\n    }\n  }\n  temp1 = temp1 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "current_name": "calculate_normalized_float_08000aa8",
            "entrypoint": "0x08000aa8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aa8": "calculate_normalized_float_08000aa8",
                "LZCOUNT": "leading_zero_count",
                "bVar7": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result1",
                "uVar4": "temp1",
                "uVar5": "shift_count",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c08": {
            "additional_data": {
                "0x1f": {
                    "bit_shift": 1
                },
                "0x7fffffff": {
                    "comparison_value": 1
                },
                "0xfffffffe": {
                    "even_value": 1
                },
                "FUN_08000c08": {
                    "calculate_hash": 1,
                    "calculate_inverse": 1,
                    "calculate_lz_count": 1,
                    "calculate_result": 5,
                    "calculate_something": 1,
                    "calculate_value": 3,
                    "convert_to_integer": 1,
                    "convert_to_unsigned": 1,
                    "count_bits": 2,
                    "count_leading_bits": 1,
                    "count_shifted_bits": 1,
                    "decode_and_calculate": 1,
                    "decode_bits": 1,
                    "decode_function": 1,
                    "decode_integer": 1,
                    "extract_bits": 1,
                    "reverse_bits": 6,
                    "reverse_computation": 1
                },
                "iVar3": {
                    "add_constant": 1,
                    "base_value": 2,
                    "calculation_result": 1,
                    "constant": 11,
                    "constant_term": 1,
                    "constant_value": 5,
                    "initial_value": 1,
                    "intermediate_value": 1,
                    "offset": 8
                },
                "new_variable_name_1": {
                    "new_name_1": 1
                },
                "new_variable_name_2": {
                    "new_name_2": 1
                },
                "new_variable_name_n": {
                    "new_name_n": 1
                },
                "param_1": {
                    "input": 14,
                    "input_number": 1,
                    "input_value": 15,
                    "number": 1
                },
                "uVar1": {
                    "bit_count": 1,
                    "byte_count": 1,
                    "final_result": 1,
                    "leading_bits": 1,
                    "leading_zero_count": 1,
                    "leading_zeroes": 2,
                    "leading_zeros": 16,
                    "new_value": 1,
                    "result": 7
                },
                "uVar1_bitwise_and": {
                    "mask": 1
                },
                "uVar1_bitwise_not": {
                    "bitwise_not_result": 1
                },
                "uVar1_comparison": {
                    "comparison_result": 1
                },
                "uVar1_even": {
                    "is_even": 1
                },
                "uVar1_final_is_zero": {
                    "final_is_zero": 1
                },
                "uVar1_final_result": {
                    "final_result": 1
                },
                "uVar1_final_shift": {
                    "final_shift": 1
                },
                "uVar1_large": {
                    "additional_shift": 1
                },
                "uVar1_position": {
                    "shift_position": 1
                },
                "uVar1_small": {
                    "small_shift": 1
                },
                "uVar2": {
                    "combined_value": 1,
                    "modified_value": 1,
                    "shift": 1,
                    "shift_amount": 20,
                    "shift_value": 1,
                    "shifted_bits": 1,
                    "shifted_input": 2,
                    "shifted_value": 1,
                    "shifted_zeros": 1,
                    "temp": 1,
                    "temp_shift": 1
                },
                "uVar2_bitwise_and": {
                    "bitwise_and_result": 1
                },
                "uVar2_final_is_zero": {
                    "final_is_not_zero": 1
                },
                "uVar2_masked": {
                    "masked_value": 1
                },
                "uVar2_normalized": {
                    "normalized_value": 1
                },
                "uVar2_temp": {
                    "temp_value": 1
                },
                "uVar3": {
                    "temp1": 1
                },
                "uVar4": {
                    "additional_var": 1,
                    "bit_flag": 1,
                    "bit_mask": 1,
                    "check_overflow": 1,
                    "comparison_result": 1,
                    "conditional_result1": 1,
                    "evaluated_value": 1,
                    "flag": 1,
                    "mask": 9,
                    "masked_bit": 1,
                    "masked_shift": 1,
                    "shifted_val": 1,
                    "shifted_value": 2,
                    "shifted_zero": 1,
                    "sign_bit": 1,
                    "temp": 2,
                    "temp2": 1,
                    "temp_value": 3,
                    "temporary": 1
                },
                "uVar4_masked": {
                    "shifted_value_masked": 1
                },
                "uVar4_original": {
                    "shifted_value_original": 1
                },
                "uVar4_translated": {
                    "shifted_value_temp": 1
                },
                "uVar5": {
                    "masked_input": 1,
                    "result": 3,
                    "shift": 1,
                    "temp3": 1
                },
                "uVar6": {
                    "conditional_check": 1,
                    "mask": 1,
                    "overflow_check": 1,
                    "shifted_input": 1,
                    "temp": 1
                },
                "uVar7": {
                    "conditional_result": 1,
                    "mask": 1
                },
                "uVar8": {
                    "mask_condition": 1
                },
                "uVar9": {
                    "result": 1
                },
                "uVarX": {
                    "shifted_input": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint reverse_bits_08000c08(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = constant + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "reverse_bits_08000c08",
            "entrypoint": "0x08000c08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c08": "reverse_bits_08000c08",
                "iVar3": "constant",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c10": {
            "additional_data": {
                "0": {
                    "zero": 1
                },
                "0x4b000000": {
                    "constant_a": 1
                },
                "0x7fffffff": {
                    "max_int": 1
                },
                "0x800000": {
                    "constant_b": 1
                },
                "0x80000000": {
                    "smallest_int": 1
                },
                "0xfffffffe": {
                    "even_max_int": 1
                },
                "7": {
                    "threshold": 1
                },
                "FUN_08000c10": {
                    "calculate_result": 1,
                    "calculate_unsigned": 2,
                    "calculate_unsigned_integer": 3,
                    "compress_unsigned_int": 1,
                    "convert_unsigned_to_twos_complement": 1,
                    "count_bits": 4,
                    "count_bits_and_shift": 1,
                    "count_leading_zeros": 4,
                    "count_reverse_bits": 1,
                    "count_set_bits": 1,
                    "count_trailing_zeros": 2,
                    "decode_signed_integer": 1,
                    "decode_unsigned_integer": 1,
                    "decode_value": 1,
                    "extract_bitfield": 1,
                    "extract_bits": 1,
                    "reverse_binary_operation": 1,
                    "reverse_bits": 2,
                    "reverse_number": 1
                },
                "LZCOUNT": {
                    "find_leading_zeroes": 1,
                    "leading_zeros_count": 1
                },
                "iVar4": {
                    "fixed_value": 1,
                    "result": 29,
                    "result_offset": 1
                },
                "param_1": {
                    "input": 17,
                    "input_value": 8,
                    "num": 2,
                    "number": 3,
                    "value": 1
                },
                "uVar1": {
                    "bit_count": 2,
                    "count": 2,
                    "highest_bit_set": 1,
                    "leading_zero_count": 1,
                    "leading_zeroes": 4,
                    "leading_zeros": 15,
                    "leading_zeros_count": 2,
                    "mask": 1,
                    "num_bits": 1,
                    "temp_result": 1,
                    "trailing_zeros": 1
                },
                "uVar10": {
                    "temp1": 1
                },
                "uVar10000": {
                    "bit_mask": 1
                },
                "uVar11": {
                    "temp2": 1
                },
                "uVar2": {
                    "shift": 2,
                    "shift_amount": 20,
                    "shift_count": 2,
                    "shift_value": 2,
                    "shifted_input": 1,
                    "shifted_value": 3,
                    "temp_value": 1
                },
                "uVar20000": {
                    "bit_value": 1
                },
                "uVar3": {
                    "adjusted_result": 1,
                    "is_negative": 6,
                    "mask": 1,
                    "negative_flag": 1,
                    "result": 2,
                    "sign": 2,
                    "sign_bit": 16,
                    "sign_mask": 1,
                    "temp2": 1
                },
                "uVar30000": {
                    "new_bit_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc",
                "FUN_08004ae0"
            ],
            "code": "\nuint count_bits_and_shift_08000c10(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = leading_zeros_count(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "count_bits_and_shift_08000c10",
            "entrypoint": "0x08000c10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c10": "count_bits_and_shift_08000c10",
                "LZCOUNT": "leading_zeros_count",
                "iVar4": "result",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "additional_data": {
                "0x7fc00000": {
                    "special_result1": 1
                },
                "FUN_08000cb8": {
                    "calculate_float": 10,
                    "calculate_float_from_u_int": 1,
                    "calculate_floating_point": 7,
                    "calculate_floating_point_value": 3,
                    "floating_point_calculation": 1,
                    "reverse_bits": 2,
                    "reverse_float": 1,
                    "reverse_float_bits": 1
                },
                "LAB_08000e08": {
                    "end_of_function": 1
                },
                "SBORROW4": {
                    "subtract_overflow": 1
                },
                "SCARRY4": {
                    "signed_carry": 1
                },
                "bVar10": {
                    "boolean_variable2": 1,
                    "borrow_flag": 1,
                    "carry": 1,
                    "carry_check": 1,
                    "carry_overflow": 1,
                    "check2": 1,
                    "condition2": 1,
                    "is_borrow": 2,
                    "is_carry": 2,
                    "is_condition_met2": 1,
                    "is_less_than_zero": 1,
                    "is_negative": 11,
                    "is_negative_diff": 1,
                    "is_negative_result": 1,
                    "is_negative_sum": 1,
                    "is_overflow": 1,
                    "is_subtraction": 1,
                    "is_sum_minus127_zero": 1,
                    "is_zero2": 1
                },
                "bVar9": {
                    "boolean_variable1": 1,
                    "check1": 1,
                    "check_condition": 1,
                    "condition1": 1,
                    "is_condition_met": 1,
                    "is_first_byte1_zero": 1,
                    "is_zero": 13,
                    "is_zero1": 3,
                    "is_zero_a": 1,
                    "is_zero_byte": 1,
                    "is_zero_num1": 1,
                    "is_zero_or_ff": 2,
                    "is_zero_or_max": 1,
                    "is_zero_shift": 1,
                    "is_zero_shift_value": 1,
                    "zero_check": 1
                },
                "iVar4": {
                    "exponent_sum": 2,
                    "shifted_sum": 1,
                    "sum": 13,
                    "sum1": 1,
                    "sum_ab": 1,
                    "sum_bit_shift_counts": 1,
                    "sum_first_bytes": 1,
                    "sum_num1_num2": 1,
                    "sum_of_bytes": 1,
                    "sum_of_high_bits": 1,
                    "sum_of_parameters": 1,
                    "sum_of_shift_values": 1,
                    "sum_of_shifted_bits": 1,
                    "sum_of_shifted_inputs": 1,
                    "sum_shifted": 1,
                    "sum_shifted_bits": 1,
                    "sum_shifts": 1,
                    "temp_variable1": 1
                },
                "iVar5": {
                    "adjusted_exponent": 1,
                    "adjusted_sum": 1,
                    "condition_variable": 1,
                    "diff": 5,
                    "diff1": 1,
                    "diff_shifted_bits": 1,
                    "diff_sum_ab_0x7f": 1,
                    "diff_sum_num1_num2": 1,
                    "difference": 6,
                    "exponent_diff": 1,
                    "high_bits_difference": 1,
                    "normalized_shifts": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shift_difference": 1,
                    "shift_val_2": 1,
                    "sum2": 1,
                    "sum_diff": 1,
                    "sum_difference": 1,
                    "sum_minus127": 1,
                    "sum_without_flag": 1,
                    "temp_variable2": 1
                },
                "iVar7": {
                    "adjusted_sum": 1,
                    "bit_shift_count_diff": 1,
                    "count": 1,
                    "diff2": 3,
                    "diff_shifts": 1,
                    "diff_sum_ab_0xff": 1,
                    "diff_sum_num1_num2_modified": 1,
                    "difference2": 2,
                    "difference_abs": 1,
                    "exponent_diff2": 1,
                    "exponent_difference": 1,
                    "high_bits_difference_abs": 1,
                    "loop_counter": 1,
                    "positive_shift_difference": 1,
                    "remaining_shift": 1,
                    "remaining_shifts": 1,
                    "shift": 1,
                    "shift_amount": 2,
                    "shift_diff": 1,
                    "shifted_diff1": 1,
                    "shifted_difference": 1,
                    "sum3": 1,
                    "sum_difference": 1,
                    "sum_minus255": 1,
                    "temp_var2": 1,
                    "temp_variable": 1,
                    "temp_variable3": 1
                },
                "lVar1": {
                    "long1": 1,
                    "long_result": 1,
                    "long_variable": 1,
                    "multiply_result": 1,
                    "product": 5,
                    "product_multiply": 1,
                    "temp": 1,
                    "temp_result64": 1,
                    "temp_var": 4
                },
                "param_1": {
                    "exponent1": 1,
                    "exponent_a": 1,
                    "exponent_part1": 1,
                    "float1": 1,
                    "input1": 13,
                    "input_1": 4,
                    "input_a": 3,
                    "input_value1": 1,
                    "number1": 2,
                    "operand1": 2,
                    "value1": 2
                },
                "param_2": {
                    "exponent2": 1,
                    "exponent_b": 1,
                    "exponent_part2": 1,
                    "float2": 1,
                    "input2": 13,
                    "input_2": 4,
                    "input_b": 3,
                    "input_value2": 1,
                    "number2": 2,
                    "operand2": 2,
                    "value2": 2
                },
                "param_3": {
                    "float3": 1,
                    "input3": 7,
                    "input_3": 4,
                    "input_c": 3,
                    "param3": 8,
                    "parameter3": 1,
                    "rounding_mode": 1,
                    "undefined": 2,
                    "unknown_value": 1,
                    "unused": 1,
                    "value3": 2
                },
                "param_4": {
                    "bitmask": 1,
                    "exception_flags": 1,
                    "exponent_part3": 1,
                    "float4": 1,
                    "input4": 7,
                    "input_4": 4,
                    "input_d": 3,
                    "operand3": 1,
                    "param4": 8,
                    "unknown_value2": 1,
                    "unused2": 1,
                    "value4": 2
                },
                "uVar2": {
                    "calculated_value": 1,
                    "float_result": 1,
                    "mantissa_union": 1,
                    "result": 25,
                    "result1": 2,
                    "temp1": 1
                },
                "uVar3": {
                    "bit_count1": 1,
                    "bit_mask": 1,
                    "bit_shift_count1": 1,
                    "byte1_input1": 1,
                    "exponent1": 2,
                    "exponent1_masked": 1,
                    "exponent_a_shifted": 1,
                    "extracted_bits1": 1,
                    "extracted_u_var": 1,
                    "first_byte1": 1,
                    "high_byte1": 1,
                    "input1_high_bits": 1,
                    "input1_high_byte": 1,
                    "input1_shifted": 2,
                    "num1_8bits": 1,
                    "num1_shift": 1,
                    "operand1_shifted": 1,
                    "shift_a": 2,
                    "shift_val_1": 1,
                    "shifted_bits1": 2,
                    "shifted_input1": 2,
                    "shifted_value": 1,
                    "shifted_value1": 1,
                    "temp1": 2,
                    "upper_byte1": 1
                },
                "uVar4": {
                    "extracted_bits2": 1
                },
                "uVar6": {
                    "adjusted_product": 1,
                    "computed_result": 1,
                    "lower_bits_product": 1,
                    "mantissa_mult": 1,
                    "mantissa_product": 1,
                    "mul_result": 1,
                    "mult_ab": 1,
                    "multiplication_product": 1,
                    "multiplied_result": 1,
                    "partial_result": 1,
                    "product": 4,
                    "product1": 1,
                    "product_low": 3,
                    "product_lower": 1,
                    "product_lower_bits": 1,
                    "result2": 2,
                    "result_lower": 1,
                    "temp2": 2,
                    "temp_result": 5,
                    "temporary_value": 1
                },
                "uVar8": {
                    "adjusted_exponent": 1,
                    "combined_inputs": 1,
                    "combined_num": 1,
                    "combined_result": 1,
                    "exponent_xo_red": 1,
                    "extended_result": 1,
                    "final_float": 1,
                    "float_bits": 1,
                    "input1_and_input2": 1,
                    "operand1_modified": 1,
                    "or_result": 1,
                    "output": 2,
                    "product2": 1,
                    "result": 2,
                    "result3": 1,
                    "result_bits": 1,
                    "result_upper": 1,
                    "shifted_result": 4,
                    "sum_minus128": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp_result": 3,
                    "temp_var": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint calculate_float_from_u_int_08000cb8(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint shifted_bits1;\n  int sum;\n  int difference;\n  uint temp_result;\n  int diff2;\n  uint shifted_result;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_bits1 = input1 >> 0x17 & 0xff;\n  is_zero = shifted_bits1 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = shifted_bits1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (shifted_bits1 == 0xff || param4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      shifted_result = result;\n      if (((is_zero) || ((shifted_bits1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (shifted_result = input2, (input2 & 0x7fffff) != 0)))) {\n        return shifted_result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto end_of_function;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = shifted_bits1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      shifted_bits1 = shifted_bits1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = shifted_bits1 + param4;\n  shifted_result = input1 ^ input2;\n  shifted_bits1 = input1 << 9;\n  is_zero = shifted_bits1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (shifted_bits1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = shifted_result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = subtract_overflow(sum,0x7f);\n    difference = sum + -0x7f;\n    is_zero = difference == 0;\n    diff2 = difference;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = subtract_overflow(0xff,difference);\n      diff2 = 0xff - difference;\n      is_zero = difference == 0xff;\n    }\n    if (!is_zero && diff2 < 0 == is_negative) {\n      result = result | difference * 0x800000;\n    }\n    if (!is_zero && diff2 < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    temp_result = 0;\n    is_negative = subtract_overflow(difference,1);\n    shifted_result = sum - 0x80;\n    is_zero = shifted_result == 0;\n    shifted_bits1 = shifted_result;\n  }\n  else {\n    product = (ulonglong)(shifted_bits1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    temp_result = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | temp_result >> 0x1f;\n      temp_result = temp_result << 1;\n    }\n    result = shifted_result & 0x80000000 | result;\n    shifted_result = (sum + -0x7f) - (uint)is_zero;\n    is_negative = subtract_overflow(shifted_result,0xfd);\n    is_zero = shifted_result == 0xfd;\n    shifted_bits1 = shifted_result - 0xfd;\n    if (shifted_result < 0xfe) {\n      result = result + shifted_result * 0x800000 + (uint)(0x7fffffff < temp_result);\n      if (temp_result == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)shifted_bits1 < 0 != is_negative) {\n    is_zero = (int)(shifted_result + 0x19) < 0;\n    if (shifted_result == 0xffffffe7 || is_zero != signed_carry(shifted_result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (shifted_result != 0xffffffe7 && is_zero == signed_carry(shifted_result,0x19)) {\n      shifted_bits1 = (result << 1) >> (-shifted_result & 0xff);\n      shifted_result = result << (shifted_result + 0x20 & 0xff);\n      shifted_bits1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shifted_bits1 >> 1) + (uint)((byte)shifted_bits1 & 1);\n      if ((temp_result | shifted_result << 1) == 0) {\n        shifted_bits1 = shifted_bits1 & ~(shifted_result >> 0x1f);\n      }\n      return shifted_bits1;\n    }\n    return result;\n  }\nend_of_function:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_float_from_u_int_08000cb8",
            "entrypoint": "0x08000cb8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000cb8": "calculate_float_from_u_int_08000cb8",
                "LAB_08000e08": "end_of_function",
                "SBORROW4": "subtract_overflow",
                "SCARRY4": "signed_carry",
                "bVar10": "is_negative",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "diff2",
                "lVar1": "product",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "result",
                "uVar3": "shifted_bits1",
                "uVar6": "temp_result",
                "uVar8": "shifted_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000e20": {
            "additional_data": {
                "FUN_08000e20": {
                    "calc_floating_point": 1,
                    "calculate_float": 8,
                    "calculate_float_from_uint": 1,
                    "calculate_floating_point": 9,
                    "calculate_normalized_float": 1,
                    "compute_floating_point": 1,
                    "convert_to_float": 1,
                    "decode_float": 1,
                    "decode_floating_point_number": 1,
                    "floating_point_addition": 1,
                    "perform_float_conversion": 1,
                    "perform_floating_point_operation": 1,
                    "reverse_float": 1,
                    "reverse_reverse_float": 1,
                    "update_float": 1
                },
                "bVar7": {
                    "bit_check1": 1,
                    "check": 2,
                    "check1": 1,
                    "check_exponent": 1,
                    "condition": 1,
                    "condition1": 8,
                    "flag": 1,
                    "flag1": 5,
                    "is_condition1_true": 1,
                    "is_true": 1,
                    "is_zero": 6,
                    "is_zero_shift_required": 1,
                    "temp_57": 1
                },
                "bVar8": {
                    "b_var8": 1,
                    "bit_check2": 1,
                    "carry": 1,
                    "check2": 2,
                    "check_exponent2": 1,
                    "condition2": 9,
                    "flag1": 1,
                    "flag2": 6,
                    "is_condition2_true": 1,
                    "is_false": 1,
                    "is_negative": 3,
                    "is_overflow": 2,
                    "temp_55": 1
                },
                "bVar9": {
                    "b_var9": 1,
                    "borrow": 1,
                    "carry_flag": 6,
                    "check3": 2,
                    "check_exponent3": 1,
                    "condition3": 8,
                    "flag2": 1,
                    "flag3": 5,
                    "is_carry": 2,
                    "is_condition3_true": 1,
                    "overflow": 1,
                    "temp_56": 1
                },
                "iVar10": {
                    "iteration": 1
                },
                "iVar3": {
                    "bit_difference": 1,
                    "diff": 3,
                    "diff_exp": 2,
                    "difference": 9,
                    "exponent_diff": 1,
                    "exponent_difference": 2,
                    "shift_difference": 1,
                    "temp3": 7,
                    "temp_29": 1,
                    "temp_var3": 3
                },
                "iVar5": {
                    "increased_exponent_difference": 1,
                    "increment": 1,
                    "normalized_diff_plus127": 1,
                    "normalized_exponent": 1,
                    "normalized_shift_diff": 1,
                    "shifted_bit_difference": 1,
                    "shifted_normalized_exponent_diff": 1,
                    "sum": 6,
                    "sum_minus_one": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp5": 7,
                    "temp_31": 1,
                    "temp_var3": 1,
                    "temp_var5": 3,
                    "temp_variable": 1
                },
                "param_1": {
                    "encoded_value1": 1,
                    "exponent1": 1,
                    "float1": 1,
                    "float_bits1": 1,
                    "input1": 10,
                    "input_1": 1,
                    "input_float1": 1,
                    "input_value1": 2,
                    "num1": 3,
                    "number1": 2,
                    "operand1": 1,
                    "original_float": 1,
                    "value1": 6
                },
                "param_2": {
                    "encoded_value2": 1,
                    "exponent2": 1,
                    "float2": 1,
                    "float_bits2": 1,
                    "float_to_reverse": 1,
                    "input2": 10,
                    "input_2": 1,
                    "input_float2": 1,
                    "input_value2": 2,
                    "num2": 3,
                    "number2": 2,
                    "operand2": 1,
                    "value2": 6
                },
                "param_3": {
                    "const1": 1,
                    "decimal": 1,
                    "float3": 1,
                    "input3": 5,
                    "input_3": 1,
                    "param3": 9,
                    "parameter3": 1,
                    "precision": 2,
                    "rounding_mode": 1,
                    "some_value": 1,
                    "temp1": 1,
                    "undef_param": 1,
                    "undefined_param": 1,
                    "unused_param": 1,
                    "unused_parameter": 1,
                    "value3": 1,
                    "var3": 1
                },
                "param_4": {
                    "another_value": 1,
                    "const2": 1,
                    "exception_flags": 1,
                    "exp_bits": 1,
                    "exponent": 1,
                    "float4": 1,
                    "input4": 5,
                    "input_4": 1,
                    "mantissa2": 1,
                    "num2_shifted": 1,
                    "num3": 1,
                    "param4": 9,
                    "parameter4": 1,
                    "rounding": 1,
                    "temp2": 1,
                    "unused_param2": 1,
                    "unused_parameter": 1,
                    "value4": 1,
                    "var4": 1
                },
                "uVar1": {
                    "bit_index1": 1,
                    "bit_mask1": 2,
                    "bitwise_shifted_float": 1,
                    "input1_masked": 1,
                    "mask1": 1,
                    "masked_sign_bit": 1,
                    "normalized_input1": 1,
                    "normalized_input2": 1,
                    "normalized_mantissa1": 1,
                    "num2_shifted_bit4": 1,
                    "quotient": 1,
                    "rounded_value": 1,
                    "shifted_encoded_value1": 1,
                    "shifted_input2": 2,
                    "sign_bit": 1,
                    "temp1": 8,
                    "temp_7": 1,
                    "temp_var1": 4
                },
                "uVar11": {
                    "mask": 1
                },
                "uVar2": {
                    "bit_index2": 1,
                    "bit_mask2": 1,
                    "exp1": 1,
                    "exponent1": 2,
                    "input2_masked": 1,
                    "mask": 1,
                    "mask2": 1,
                    "normalized_exp1": 1,
                    "normalized_exponent1": 1,
                    "normalized_input1": 1,
                    "normalized_input2": 1,
                    "num1_shifted_bit4": 1,
                    "shift_val1": 1,
                    "shifted_bits": 1,
                    "shifted_encoded_value2": 1,
                    "shifted_input1": 1,
                    "temp2": 8,
                    "temp_34": 1,
                    "temp_var2": 3
                },
                "uVar4": {
                    "accumulator": 1,
                    "compare_value": 1,
                    "computed_value": 1,
                    "exponent_difference_abs": 1,
                    "increment": 1,
                    "limit": 1,
                    "loop_counter": 1,
                    "normalized_diff": 1,
                    "normalized_exp_diff": 1,
                    "normalized_exponent_diff": 1,
                    "shift_amount": 1,
                    "shift_val2": 1,
                    "sum": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp4": 7,
                    "temp_47": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var4": 3,
                    "u1": 1
                },
                "uVar6": {
                    "decoded_value": 1,
                    "result": 18,
                    "temp": 1,
                    "temp6": 6,
                    "temp_48": 1,
                    "temp_var6": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "code": "\nuint calculate_float_from_uint_08000e20(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  int difference;\n  uint temp4;\n  int temp5;\n  uint result;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  condition1 = temp2 == 0;\n  if (!condition1) {\n    param4 = input2 >> 0x17 & 0xff;\n    condition1 = param4 == 0;\n  }\n  if (!condition1) {\n    condition1 = temp2 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = param4 == 0xff;\n  }\n  if (condition1) {\n    param4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, param4 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      condition1 = (input1 & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = temp2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input1 = input1 << 1;\n            condition1 = (input1 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | result;\n        condition1 = param4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input2 = input2 << 1;\n            condition1 = (input2 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e38;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e38:\n    difference = temp2 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      condition3 = SCARRY4(difference,0x7f);\n      temp5 = difference + 0x7f;\n      condition1 = temp5 < 0;\n      condition2 = temp5 == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = SBORROW4(0xff,temp5);\n        condition1 = 0xff - temp5 < 0;\n        condition2 = temp5 == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      condition2 = SBORROW4(temp5,1);\n      temp4 = difference + 0x7e;\n      condition1 = temp4 == 0;\n      result = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      condition1 = temp1 <= temp2;\n      if (!condition1) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = difference + 0x7d + (uint)condition1;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | result;\n        }\n        condition1 = temp1 >> 1 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 1;\n        }\n        condition1 = temp1 >> 2 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 2;\n        }\n        condition1 = temp1 >> 3 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        condition1 = temp2 == 0;\n        if (!condition1) {\n          result = result >> 4;\n          condition1 = result == 0;\n        }\n      } while (!condition1);\n      condition2 = SBORROW4(temp4,0xfd);\n      condition1 = temp4 == 0xfd;\n      result = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (condition1 || (int)result < 0 != condition2) {\n      condition1 = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || condition1 != SCARRY4(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || condition1 != SCARRY4(temp4,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        result = result & ~(temp4 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_float_from_uint_08000e20",
            "entrypoint": "0x08000e20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000e20": "calculate_float_from_uint_08000e20",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3",
                "iVar3": "difference",
                "iVar5": "temp5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar4": "temp4",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000f68": {
            "additional_data": {
                "FUN_08000f68": {
                    "calculate_bitwise_operations": 1,
                    "calculate_result": 3,
                    "calculate_unsigned_division": 1,
                    "calculate_unsigned_integer": 1,
                    "calculate_xor_and_shift": 1,
                    "check_integer_overflow": 2,
                    "check_overflow": 7,
                    "check_overflow_and_negate": 1,
                    "check_overflow_and_sign": 4,
                    "check_overflow_condition": 1,
                    "check_parameters": 2,
                    "double_and_check_overflow": 1,
                    "double_and_compare": 1,
                    "multiplication_with_conditions": 1,
                    "multiply_and_check": 1,
                    "multiply_and_compare": 2,
                    "multiply_and_manipulate_bits": 1
                },
                "bVar1": {
                    "check_flag": 1,
                    "is_combined_negative": 1,
                    "is_less_than_zero": 1,
                    "is_negative": 21,
                    "is_negative_combined": 1,
                    "is_negative_overflow": 1,
                    "is_overflow": 4,
                    "is_xor_negative": 1
                },
                "bVar5": {
                    "check_zero": 1,
                    "is_combined_zero": 3,
                    "is_zero": 25,
                    "is_zero_combined": 1,
                    "is_zero_or_equal": 1
                },
                "is_param_2_lteq_number1_times_minus_2": {
                    "is_param_2_lteq_number1_times_minus_2": 1
                },
                "param_1": {
                    "dividend": 1,
                    "first_number": 1,
                    "input1": 5,
                    "input_1": 17,
                    "input_num_1": 1,
                    "input_parameter_1": 1,
                    "input_value_1": 2,
                    "num1": 1,
                    "number1": 2
                },
                "param_1_bitwise": {
                    "input_1_bitwise_input_2": 1
                },
                "param_1_minus_number2_times_2": {
                    "result1": 1
                },
                "param_1_or_param_2_with_lower_31_bits": {
                    "combined_number": 1
                },
                "param_1_shifted": {
                    "input_1_msbit_shifted": 1
                },
                "param_1_times_2": {
                    "input_1_times_negative_2": 1,
                    "number1_times_2": 1
                },
                "param_1_times_minus_2": {
                    "number1_times_minus_2": 1
                },
                "param_1_xor_param_2": {
                    "xor_result": 1
                },
                "param_2": {
                    "divisor": 1,
                    "input2": 5,
                    "input_2": 17,
                    "input_num_2": 1,
                    "input_parameter_2": 1,
                    "input_value_2": 2,
                    "num2": 1,
                    "number2": 2,
                    "second_number": 1
                },
                "param_2_shifted": {
                    "input_2_msbit_shifted": 1
                },
                "return": {
                    "result": 3
                },
                "uVar2": {
                    "dividend_times_two": 1,
                    "double_first_number": 1,
                    "double_input_1": 4,
                    "double_input_value_1": 1,
                    "double_of_input_value_1": 1,
                    "doubled_1": 1,
                    "doubled_input1": 2,
                    "doubled_input_1": 5,
                    "doubled_num_1": 1,
                    "input1_double": 2,
                    "input1_times2": 1,
                    "input_1_doubled": 2,
                    "input_1_times_2": 3,
                    "input_1_times_two": 1,
                    "multiplied_input1": 1,
                    "number1_times_2": 1,
                    "number1_times_two": 1,
                    "param_1_times_2": 1,
                    "result1": 1
                },
                "uVar3": {
                    "divisor_times_two": 1,
                    "double_input_2": 4,
                    "double_input_value_2": 1,
                    "double_of_input_value_2": 1,
                    "double_second_number": 1,
                    "doubled_2": 1,
                    "doubled_input2": 2,
                    "doubled_input_2": 5,
                    "doubled_num_2": 1,
                    "input2_double": 2,
                    "input2_times2": 1,
                    "input_2_doubled": 2,
                    "input_2_times_2": 3,
                    "input_2_times_two": 1,
                    "multiplied_input2": 1,
                    "number2_times_2": 1,
                    "number2_times_two": 1,
                    "param_2_times_2": 1,
                    "result2": 1
                },
                "uVar4": {
                    "bitwise_operation_result": 1,
                    "bitwise_or_result": 1,
                    "combined": 1,
                    "combined_input": 5,
                    "combined_inputs": 15,
                    "combined_number": 2,
                    "combined_nums": 1,
                    "combined_result": 1,
                    "combined_unsigned_values": 1,
                    "combined_value": 1,
                    "merged_numbers": 1,
                    "modified_input": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08000fd0"
            ],
            "code": "\nuint check_overflow_and_sign_08000f68(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "current_name": "check_overflow_and_sign_08000f68",
            "entrypoint": "0x08000f68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000f68": "check_overflow_and_sign_08000f68",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input_1",
                "param_2": "input_2",
                "return": "result",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "additional_data": {
                "FUN_08000fc8": {
                    "concatenate_and_return": 1,
                    "concatenate_parameters": 26,
                    "concatenate_params": 4
                },
                "param_1": {
                    "dest": 3,
                    "dest_param": 1,
                    "destination": 20,
                    "dst": 1,
                    "first_parameter": 2,
                    "input1": 1,
                    "source": 2,
                    "source_param": 1
                },
                "param_2": {
                    "destination": 2,
                    "destination_param": 1,
                    "input2": 1,
                    "second_parameter": 2,
                    "source": 20,
                    "src": 4,
                    "src_param": 1
                }
            },
            "called": [
                "FUN_08000fd0"
            ],
            "calling": [
                "FUN_08001030"
            ],
            "code": "\nvoid concatenate_parameters_08000fc8(undefined4 destination,undefined4 source)\n\n{\n  concatenate_parameters_08000fc8_08000fd0(source,destination);\n  return;\n}\n\n",
            "current_name": "concatenate_parameters_08000fc8",
            "entrypoint": "0x08000fc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000fc8": "concatenate_parameters_08000fc8",
                "param_1": "destination",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "additional_data": {
                "FUN_08000fd0": {
                    "concat_variables": 1,
                    "concatenate_32bit_to_64bit": 1,
                    "concatenate_44": 1,
                    "concatenate_44_bits": 1,
                    "concatenate_64bit_values": 1,
                    "concatenate_and_combine": 2,
                    "concatenate_and_convert": 1,
                    "concatenate_and_extend": 1,
                    "concatenate_and_return": 1,
                    "concatenate_integers": 2,
                    "concatenate_param": 1,
                    "concatenate_parameters": 9,
                    "concatenate_params": 5,
                    "concatenate_unsigned_integers": 2,
                    "concatenate_values": 2
                },
                "param_1": {
                    "first_integer": 1,
                    "first_number": 1,
                    "first_param": 8,
                    "first_parameter": 11,
                    "input_1": 2,
                    "input_param_1": 1,
                    "integer1": 1,
                    "integer_1": 1,
                    "lower_32bit": 1,
                    "lower_32bit_value": 1,
                    "value1": 2,
                    "value_1": 1
                },
                "param_2": {
                    "input_2": 2,
                    "input_param_2": 1,
                    "integer2": 1,
                    "integer_2": 1,
                    "second_integer": 1,
                    "second_number": 1,
                    "second_param": 8,
                    "second_parameter": 11,
                    "upper_32bit": 1,
                    "upper_32bit_value": 1,
                    "value2": 2,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_08000f68"
            ],
            "calling": [
                "FUN_08000fc8",
                "FUN_08000ff4"
            ],
            "code": "\nundefined8 concatenate_parameters_08000fd0(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  check_overflow_and_sign_08000f68();\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "current_name": "concatenate_parameters_08000fd0",
            "entrypoint": "0x08000fd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000fd0": "concatenate_parameters_08000fd0",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "additional_data": {
                "FUN_08000ff4": {
                    "check_if_concatenated_parameters_are_empty": 2,
                    "check_if_concatenated_parameters_is_null": 1,
                    "check_if_concatenation_empty": 2,
                    "check_if_empty_string": 1,
                    "check_if_string_empty": 4,
                    "check_if_string_is_empty": 1,
                    "check_null_termination": 3,
                    "check_termination": 1,
                    "is_concatenation_successful": 2,
                    "is_cy_null": 1,
                    "is_empty_string": 1,
                    "is_end_of_string": 1,
                    "is_in_cy_null": 1,
                    "is_input_empty": 1,
                    "is_null_terminated": 5,
                    "is_null_terminated_string": 1,
                    "is_null_termination": 1,
                    "is_null_terminator": 1,
                    "is_null_terminator_present": 1
                },
                "concatenate_parameters_08000fd0": {
                    "concatenate_parameters": 1
                },
                "in_CY": {
                    "char_input": 1,
                    "char_to_check": 1,
                    "char_value": 1,
                    "character": 1,
                    "concatenated_string": 1,
                    "cy_character": 1,
                    "cy_flag": 1,
                    "input_char": 8,
                    "input_character": 15,
                    "is_null_termination": 1
                }
            },
            "called": [
                "FUN_08000fd0"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nbool check_if_string_is_empty_08000ff4(void)\n\n{\n  char input_character;\n  \n  concatenate_parameters();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_string_is_empty_08000ff4",
            "entrypoint": "0x08000ff4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000ff4": "check_if_string_is_empty_08000ff4",
                "concatenate_parameters_08000fd0": "concatenate_parameters",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001030": {
            "additional_data": {
                "FUN_08001030": {
                    "check_if_concatenated_parameters_are_empty": 2,
                    "check_if_concatenated_parameters_empty": 2,
                    "check_if_concatenated_parameters_null": 1,
                    "check_if_concatenation_empty": 3,
                    "check_if_concatenation_successful": 3,
                    "check_if_null_08001030": 1,
                    "does_in_cy_end_with_null": 1,
                    "is_concatenation_empty": 2,
                    "is_concatenation_successful": 3,
                    "is_empty_string": 1,
                    "is_input_empty": 3,
                    "is_null_terminated": 1,
                    "is_null_termination": 1,
                    "is_null_terminator": 1,
                    "is_string_empty": 5,
                    "is_zero_terminated_string": 1
                },
                "concatenate_parameters_08000fc8": {
                    "combine_parameters": 1
                },
                "in_CY": {
                    "character": 2,
                    "concatenated_parameters": 1,
                    "concatenated_string": 1,
                    "concatenation_result": 2,
                    "input_char": 9,
                    "input_character": 12,
                    "input_string": 2,
                    "input_string_terminated": 1,
                    "user_input": 1
                }
            },
            "called": [
                "FUN_08000fc8"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nbool is_empty_string_08001030(void)\n\n{\n  char input_character;\n  \n  combine_parameters();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "is_empty_string_08001030",
            "entrypoint": "0x08001030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001030": "is_empty_string_08001030",
                "concatenate_parameters_08000fc8": "combine_parameters",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001044": {
            "additional_data": {
                "FUN_08001044": {
                    "binary_number_to_unsigned_integer": 1,
                    "bitshifting_function": 1,
                    "bitwise_shift": 1,
                    "calculate_bitshifted_value": 1,
                    "calculate_shifted_value": 2,
                    "convert_to_canonical": 1,
                    "decode": 1,
                    "decode_number": 1,
                    "decode_param": 1,
                    "decode_unsigned_integer": 3,
                    "decode_unsigned_number": 1,
                    "decode_value": 1,
                    "extract_bits": 1,
                    "get_shifted_value": 1,
                    "process_number": 1,
                    "reverse_and_shift_bits": 1,
                    "reverse_bits": 7,
                    "reverse_bitwise_operation": 1,
                    "reverse_compute": 1,
                    "reverse_number": 1
                },
                "param_1": {
                    "encoded_value": 1,
                    "input": 10,
                    "input_number": 3,
                    "input_value": 14,
                    "number": 2,
                    "value": 1
                },
                "return_value": {
                    "decoded_value": 1
                },
                "uVar1": {
                    "result": 6,
                    "shift_amount": 18,
                    "shift_value": 2,
                    "shifted_count": 1,
                    "shifted_value": 3,
                    "threshold": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint reverse_and_shift_bits_08001044(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "reverse_and_shift_bits_08001044",
            "entrypoint": "0x08001044",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001044": "reverse_and_shift_bits_08001044",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001084": {
            "additional_data": {
                "FUN_08001084": {
                    "copy_bytes": 1,
                    "copy_data": 1,
                    "copy_memory": 26,
                    "copy_uint_array": 1,
                    "memcpy": 1,
                    "memcpy_custom": 1
                },
                "LAB_08001108": {
                    "continue_loop": 1,
                    "copy_remaining": 1,
                    "copy_remaining_memory": 1
                },
                "bVar6": {
                    "condition": 1,
                    "condition1": 1,
                    "continue_loop": 1,
                    "copy_flag": 2,
                    "flag": 1,
                    "has_remaining_bytes": 2,
                    "is_copy_possible": 1,
                    "is_greater": 1,
                    "is_less_than": 1,
                    "is_longer_than_unroll": 1,
                    "is_loop": 1,
                    "is_looping": 1,
                    "is_more_data": 1,
                    "is_remaining": 3,
                    "is_remaining_copy": 1,
                    "is_remaining_size_zero": 1,
                    "is_size_greater_than_f": 1,
                    "is_true": 1,
                    "loop_check": 1,
                    "loop_condition": 8
                },
                "param_1": {
                    "dest": 10,
                    "dest_ptr": 1,
                    "destination": 19,
                    "destination_array": 1
                },
                "param_2": {
                    "source": 19,
                    "source_array": 1,
                    "src": 9,
                    "src_ptr": 1,
                    "src_ptr_loop": 1
                },
                "param_3": {
                    "array_size": 1,
                    "length": 6,
                    "n": 2,
                    "num_bytes": 1,
                    "size": 20,
                    "size_loop": 1
                },
                "puVar1": {
                    "dest": 2,
                    "dest_pointer": 1,
                    "dest_ptr": 22,
                    "dest_ptr_partial": 1,
                    "dst_ptr": 5
                },
                "puVar2": {
                    "dest": 1,
                    "dest_cur": 1,
                    "dest_curr": 1,
                    "dest_end": 1,
                    "dest_end_ptr": 3,
                    "dest_iter": 1,
                    "dest_offset": 1,
                    "dest_ptr": 1,
                    "dest_ptr2": 1,
                    "dest_ptr_copy": 1,
                    "dest_ptr_end": 1,
                    "dest_ptr_iter": 1,
                    "dest_ptr_loop": 1,
                    "dest_ptr_temp": 2,
                    "dest_ptr_tmp": 1,
                    "dst": 2,
                    "dst_end_ptr": 2,
                    "dst_next_ptr": 1,
                    "new_dest_pointer": 1,
                    "src": 1,
                    "src_ptr": 6
                },
                "puVar3": {
                    "dest_ptr2": 2,
                    "dest_ptr_temp": 1,
                    "dest_temp": 1,
                    "new_dst_ptr": 1,
                    "source_pointer": 1,
                    "source_ptr": 1,
                    "src": 2,
                    "src_cur": 1,
                    "src_curr": 1,
                    "src_iter": 1,
                    "src_offset": 1,
                    "src_ptr": 15,
                    "src_ptr_partial": 1,
                    "temp_ptr": 2
                },
                "uVar4": {
                    "bytes_left": 1,
                    "loop_count": 2,
                    "remaining": 2,
                    "remaining_bytes": 1,
                    "remaining_length": 3,
                    "remaining_size": 15,
                    "size_temp": 1,
                    "temp": 2,
                    "temp1": 2,
                    "temp_size": 1,
                    "tmp_size": 1
                },
                "uVar5": {
                    "adjusted_size": 1,
                    "bytes_to_copy": 1,
                    "copy_count": 1,
                    "copy_length": 1,
                    "copy_size": 2,
                    "count": 1,
                    "current_size": 1,
                    "loop_count": 1,
                    "loop_counter": 1,
                    "loop_size": 1,
                    "remaining": 2,
                    "remaining_aligned": 1,
                    "remaining_bytes_temp": 1,
                    "remaining_copy_size": 1,
                    "remaining_length2": 1,
                    "remaining_size": 3,
                    "remaining_size_mod4": 1,
                    "size_copy": 1,
                    "temp2": 2,
                    "temp_size": 5,
                    "unroll_factor": 1,
                    "unrolled_length": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_080097cc",
                "FUN_08009120"
            ],
            "code": "\nundefined4 * copy_memory_08001084(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint temp_size;\n  bool loop_condition;\n  \n  src_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      temp_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = src_ptr;\n          loop_condition = temp_size != 0;\n          temp_size = temp_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          src_ptr = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto continue_loop;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      temp_size = 4 - ((uint)destination & 3);\n      size = size - temp_size;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      src_ptr = dest_ptr;\n      source = src_ptr;\n      if ((temp_size & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        src_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *src_ptr = *source;\n    src_ptr[1] = source[1];\n    src_ptr[2] = source[2];\n    src_ptr[3] = source[3];\n    src_ptr[4] = source[4];\n    src_ptr[5] = source[5];\n    src_ptr[6] = source[6];\n    src_ptr[7] = source[7];\n    src_ptr[8] = source[8];\n    src_ptr[9] = source[9];\n    src_ptr[10] = source[10];\n    src_ptr[0xb] = source[0xb];\n    src_ptr[0xc] = source[0xc];\n    src_ptr[0xd] = source[0xd];\n    src_ptr[0xe] = source[0xe];\n    src_ptr[0xf] = source[0xf];\n    src_ptr = src_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *src_ptr = *source;\n      src_ptr[1] = source[1];\n      src_ptr[2] = source[2];\n      src_ptr[3] = source[3];\n      src_ptr = src_ptr + 4;\n      source = source + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  temp_size = remaining_size + 0xc;\n  src_ptr = src_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < temp_size;\n      temp_size = temp_size - 4;\n      src_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (loop_condition);\n  }\ncontinue_loop:\n  if (temp_size + 4 != 0) {\n    dest_ptr = src_ptr;\n    src_ptr = source;\n    if ((temp_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)src_ptr + 1);\n      *(undefined *)src_ptr = *(undefined *)source;\n    }\n    if ((temp_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "current_name": "copy_memory_08001084",
            "entrypoint": "0x08001084",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "LAB_08001108": "continue_loop",
                "bVar6": "loop_condition",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "temp_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001170": {
            "additional_data": {
                "FUN_08001170": {
                    "check_conditions": 1,
                    "check_input": 1,
                    "check_input_validity": 1,
                    "check_inputs": 3,
                    "check_param_combination": 1,
                    "check_parameters": 12,
                    "check_params": 4,
                    "check_params_validity": 2,
                    "check_valid_input": 1,
                    "is_valid_input": 2,
                    "is_valid_parameters": 1,
                    "validate_parameters": 1,
                    "validate_params": 1
                },
                "param_1": {
                    "first_param": 3,
                    "input1": 7,
                    "input_1": 9,
                    "input_num1": 1,
                    "number_1": 1,
                    "value1": 7,
                    "value_1": 3
                },
                "param_2": {
                    "input2": 7,
                    "input_2": 9,
                    "input_num2": 1,
                    "number_2": 1,
                    "second_param": 3,
                    "shifted_value1": 1,
                    "value2": 6,
                    "value_2": 3
                },
                "param_3": {
                    "input3": 7,
                    "input_3": 9,
                    "input_num3": 1,
                    "number_3": 1,
                    "third_param": 3,
                    "value2": 1,
                    "value3": 6,
                    "value_3": 3
                },
                "param_4": {
                    "fourth_param": 3,
                    "input4": 7,
                    "input_4": 9,
                    "input_num4": 1,
                    "number_4": 1,
                    "shifted_value2": 1,
                    "value4": 6,
                    "value_4": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined4 check_parameters_08001170(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_parameters_08001170",
            "entrypoint": "0x08001170",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001170": "check_parameters_08001170",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800119c": {
            "additional_data": {
                "FUN_0800119c": {
                    "apply_transformation": 1,
                    "calculate_output_value": 1,
                    "calculate_result": 1,
                    "calculate_unsigned_dividend": 1,
                    "calculate_unsigned_quotient": 1,
                    "calculate_value": 1,
                    "compute_integer": 1,
                    "convert_to_signed": 2,
                    "convert_to_signed_int": 1,
                    "convert_to_twos_complement": 1,
                    "convert_unsigned_to_signed": 1,
                    "decode_integer": 1,
                    "decode_parameters": 1,
                    "decode_signed_integer": 1,
                    "decode_unsigned_integer": 1,
                    "extract_bits": 1,
                    "perform_operation": 1,
                    "range_conversion": 1,
                    "reverse_and_adjust_value": 1,
                    "reverse_and_scale": 1,
                    "reverse_arithmetic": 1,
                    "reverse_bits": 4,
                    "reverse_integer": 1,
                    "reverse_number": 1,
                    "reverse_param_calculation": 1,
                    "signed_integer_division": 1
                },
                "iVar2": {
                    "adjusted_divisor": 1,
                    "adjusted_value": 1,
                    "calculated_value": 1,
                    "calculation_result": 1,
                    "computed_value": 1,
                    "modified_input_2": 1,
                    "modified_shift": 1,
                    "modified_value": 1,
                    "multiplied_value": 4,
                    "offset": 3,
                    "result2": 1,
                    "result_1": 1,
                    "scaled_param2": 1,
                    "scaled_value": 1,
                    "shifted_divisor": 1,
                    "shifted_flag": 1,
                    "shifted_num": 1,
                    "shifted_value": 4,
                    "shifted_value2": 1,
                    "shifted_value_times2": 1,
                    "temp": 1,
                    "temp_value": 1,
                    "var2": 1
                },
                "param_1": {
                    "dividend": 3,
                    "input1": 3,
                    "input_1": 4,
                    "input_value": 11,
                    "input_value1": 4,
                    "input_value_ptr": 1,
                    "original_num": 1,
                    "unsigned_input1": 1,
                    "unsigned_number": 1,
                    "value": 1,
                    "value_to_convert": 1
                },
                "param_2": {
                    "bit_count": 2,
                    "bit_pattern": 1,
                    "bit_position": 1,
                    "bit_shift": 2,
                    "divisor": 3,
                    "final_value": 1,
                    "flag": 1,
                    "input2": 3,
                    "input_2": 4,
                    "input_mask": 1,
                    "input_value2": 2,
                    "result_flag": 1,
                    "scaling_factor": 2,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_value": 3,
                    "sign_bit": 1,
                    "unsigned_input2": 1
                },
                "uVar1": {
                    "converted_value": 1,
                    "final_result": 2,
                    "negative_num": 1,
                    "processed_value": 1,
                    "quotient_shifted": 1,
                    "result": 8,
                    "result1": 1,
                    "result_2": 1,
                    "result_9": 1,
                    "shift_amount": 1,
                    "shift_result": 1,
                    "shifted_input": 1,
                    "shifted_result": 2,
                    "shifted_value": 7,
                    "unsigned_result": 1,
                    "var1": 1
                },
                "uVar2": {
                    "result": 1,
                    "shifted_input_signed": 1
                },
                "uVar3": {
                    "adjusted_shift": 3,
                    "adjusted_value": 2,
                    "adjustment": 1,
                    "binary_value": 1,
                    "comparison_value": 1,
                    "conversion_factor": 1,
                    "divided_value": 1,
                    "magic_number": 1,
                    "mask": 2,
                    "modified_shift": 1,
                    "negative_shifted_value": 1,
                    "offset_adjustment": 1,
                    "quotient": 1,
                    "quotient_subtracted": 1,
                    "result3": 1,
                    "result_3": 1,
                    "result_7": 1,
                    "shift": 1,
                    "shift_amount": 3,
                    "shifted_input_mod": 1,
                    "shifted_offset": 1,
                    "shifted_value_offset": 1,
                    "temp_result": 1,
                    "value_condition": 1,
                    "var3": 1
                },
                "uVar4": {
                    "result": 1,
                    "shifted_result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nuint reverse_bits_0800119c(uint input_value,uint input_2)\n\n{\n  uint result;\n  int shifted_value;\n  uint adjusted_shift;\n  \n  shifted_value = input_2 * 2 + 0x200000;\n  if (input_2 * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    result = shifted_value >> 0x15;\n    adjusted_shift = -result - 0x3e1;\n    if (result < 0xfffffc20 && adjusted_shift != 0) {\n      result = (input_2 << 0xb | 0x80000000 | input_value >> 0x15) >> (adjusted_shift & 0xff);\n      if ((input_2 & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input_value | input_2 << 0xc) != 0) {\n    return 0;\n  }\n  input_2 = input_2 & 0x80000000;\n  if (input_2 == 0) {\n    input_2 = 0x7fffffff;\n  }\n  return input_2;\n}\n\n",
            "current_name": "reverse_bits_0800119c",
            "entrypoint": "0x0800119c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800119c": "reverse_bits_0800119c",
                "iVar2": "shifted_value",
                "param_1": "input_value",
                "param_2": "input_2",
                "uVar1": "result",
                "uVar3": "adjusted_shift"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080011ec": {
            "additional_data": {
                "FUN_080011ec": {
                    "calculate": 1,
                    "calculate_remainder_or_negative_value": 1,
                    "calculate_result": 27
                },
                "param_1": {
                    "first_parameter": 1,
                    "input1": 6,
                    "input_1": 19,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_value1": 2,
                    "input_value_1": 1
                },
                "param_2": {
                    "input2": 6,
                    "input_2": 19,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_value2": 2,
                    "input_value_2": 1,
                    "second_parameter": 1
                },
                "param_3": {
                    "condition_1": 1,
                    "input3": 2,
                    "input_3": 14,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "param3": 1,
                    "remainder": 10,
                    "third_parameter": 1
                },
                "param_4": {
                    "condition_2": 1,
                    "fourth_parameter": 1,
                    "input4": 2,
                    "input_4": 14,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "param4": 1,
                    "quotient": 10
                },
                "uVar1": {
                    "result": 22
                }
            },
            "called": [
                "FUN_0800121c"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined8 calculate_result_080011ec(int input_1,int input_2,int input_3,int input_4)\n\n{\n  undefined8 result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_2 = -1;\n      input_1 = -1;\n    }\n    return CONCAT44(input_2,input_1);\n  }\n  result = calculate_remainder_and_quotient_0800121c();\n  return result;\n}\n\n",
            "current_name": "calculate_result_080011ec",
            "entrypoint": "0x080011ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080011ec": "calculate_result_080011ec",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800121c": {
            "additional_data": {
                "CARRY4": {
                    "carry_operation": 1
                },
                "FUN_0800121c": {
                    "calculate": 1,
                    "calculate_division": 2,
                    "calculate_division_remainder": 1,
                    "calculate_divisions": 1,
                    "calculate_integer_division_remainder": 1,
                    "calculate_integer_divisions": 1,
                    "calculate_quotient_and_remainder": 4,
                    "calculate_quotient_remainder": 2,
                    "calculate_remainder": 1,
                    "calculate_remainder_and_quotient": 1,
                    "divide_and_remainder": 3,
                    "divide_remainder": 1,
                    "dividend_quotient_remainder": 1,
                    "optimize_division": 1,
                    "perform_division": 7,
                    "perform_integer_division": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 1
                },
                "UNRECOVERED_JUMPTABLE": {
                    "error_handle_func": 1,
                    "function_table": 1,
                    "jmp_table": 2,
                    "jump_table": 1,
                    "recovery_jumptable": 1
                },
                "bVar13": {
                    "b_var13": 1,
                    "carry": 8,
                    "carry_flag": 17,
                    "carry_flag_result": 1,
                    "carry_over": 1,
                    "is_carry": 1
                },
                "bVar14": {
                    "carry_flag": 1
                },
                "iVar30": {
                    "temp_23": 1
                },
                "iVar5": {
                    "bit_count": 1,
                    "bit_shift_amount": 1,
                    "ctr": 1,
                    "divisor_shift_count": 1,
                    "shift": 4,
                    "shift_amount": 9,
                    "shift_count": 6,
                    "temp_count": 1,
                    "temp_index": 1
                },
                "param_1": {
                    "dividend": 28,
                    "divisor": 1,
                    "input1": 2
                },
                "param_2": {
                    "dividend": 1,
                    "dividend_high": 4,
                    "dividend_low": 4,
                    "dividend_lower": 3,
                    "dividend_lower_32bits": 1,
                    "dividend_lower_half": 1,
                    "dividend_part1": 1,
                    "dividend_remainder": 1,
                    "dividend_upper": 3,
                    "divisor": 8,
                    "input2": 2,
                    "numerator": 1,
                    "quotient": 1
                },
                "param_3": {
                    "denominator": 1,
                    "divider1": 1,
                    "divisor": 19,
                    "divisor_part1": 1,
                    "divisor_upper_32bits": 1,
                    "high_divisor": 1,
                    "num1": 1,
                    "quotient": 6
                },
                "param_4": {
                    "denominator": 1,
                    "dividend_remainder": 1,
                    "divider2": 1,
                    "divisor": 1,
                    "divisor_high": 4,
                    "divisor_low": 4,
                    "divisor_lower": 2,
                    "divisor_lower_32bits": 1,
                    "divisor_lower_half": 1,
                    "divisor_remainder": 1,
                    "divisor_upper": 3,
                    "high_dividend": 1,
                    "max_divisor": 1,
                    "num2": 1,
                    "remainder": 7,
                    "subtract_value": 1
                },
                "param_5": {
                    "output": 2,
                    "quotient": 5,
                    "quotient_and_remainder": 2,
                    "quotient_remainder": 4,
                    "remainder": 8,
                    "remainder_ptr": 3,
                    "result": 4,
                    "result_array": 3
                },
                "puVar71": {
                    "remainder_low": 1
                },
                "puVar72": {
                    "remainder_high": 1
                },
                "puVar9": {
                    "return_val": 1,
                    "temp_pointer": 2,
                    "zero": 1
                },
                "uVar1": {
                    "extra_product": 1,
                    "mult_result": 1,
                    "multiplier": 1,
                    "overflow": 1,
                    "partial_product": 1,
                    "product": 5,
                    "quotient": 7,
                    "quotient_high": 1,
                    "quotient_low": 1,
                    "quotient_product": 1,
                    "remainder": 1,
                    "temp": 3,
                    "temp1": 3,
                    "temp64": 1,
                    "temp_mul": 1,
                    "temp_var1": 1,
                    "tmp": 1
                },
                "uVar10": {
                    "current_quotient": 1,
                    "mod_multiplier": 1,
                    "partial_product_2": 1,
                    "partial_quotient": 1,
                    "partial_quotient_low": 1,
                    "quotient1": 3,
                    "quotient2": 2,
                    "quotient3": 3,
                    "quotient_low": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp6": 2,
                    "temp_3": 1,
                    "temp_div2": 1,
                    "temp_mult_result": 1,
                    "temp_quotient2": 1,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var6": 1,
                    "temp_variable2": 1,
                    "tmp1": 1,
                    "tmp_var4": 1,
                    "u_var10_temp": 1
                },
                "uVar11": {
                    "divisor_lower": 1,
                    "divisor_part2": 1,
                    "divisor_quotient": 1,
                    "divisor_upper_half": 1,
                    "mod_subtrahend": 1,
                    "multiplication_result1": 1,
                    "partial_product_lower": 1,
                    "partial_quotient1": 1,
                    "partial_quotient_low": 1,
                    "partial_quotient_temp": 1,
                    "partial_remainder_2": 1,
                    "quotient2": 1,
                    "quotient4": 1,
                    "quotient_hi": 1,
                    "quotient_high_temp": 1,
                    "remainder3": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp7": 1,
                    "temp_4": 1,
                    "temp_final_remainder": 1,
                    "temp_mult2": 1,
                    "temp_product2": 1,
                    "temp_quotient2": 1,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "temp_variable3": 1,
                    "tmp2": 1,
                    "u_var11": 1,
                    "u_var11_temp": 1
                },
                "uVar12": {
                    "multiplication_result2": 1,
                    "partial_product": 1,
                    "partial_product_1": 1,
                    "partial_quotient2": 1,
                    "partial_quotient_lower": 1,
                    "partial_quotient_temp": 1,
                    "quot_lo2": 1,
                    "quotient3": 1,
                    "remainder2": 1,
                    "remainder_upper": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp5": 2,
                    "temp6": 1,
                    "temp8": 1,
                    "temp_5": 1,
                    "temp_divisor_multiplication": 1,
                    "temp_mult3": 1,
                    "temp_remainder2": 2,
                    "temp_var3": 2,
                    "temp_var5": 1,
                    "temp_var7": 1,
                    "temp_variable4": 1,
                    "tmp3": 1,
                    "tmp_var5": 1,
                    "u_var12_temp": 1
                },
                "uVar13": {
                    "carry_flag": 1,
                    "remainder_hi": 1,
                    "temp_6": 1,
                    "temp_var4": 1
                },
                "uVar14": {
                    "result": 18,
                    "result_combine": 1,
                    "return_value": 7,
                    "temp_7": 1
                },
                "uVar15": {
                    "temp_8": 1
                },
                "uVar16": {
                    "temp_9": 1
                },
                "uVar17": {
                    "temp_10": 1
                },
                "uVar18": {
                    "temp_11": 1
                },
                "uVar19": {
                    "temp_12": 1
                },
                "uVar2": {
                    "dividend_lo": 1,
                    "dividend_lower": 1,
                    "dividend_lower_16bits": 1,
                    "dividend_temp": 1,
                    "dividend_upper": 1,
                    "divisor_div": 1,
                    "numerator_div_part": 1,
                    "partial_quotient": 1,
                    "quotient1": 3,
                    "quotient2": 1,
                    "quotient_digit1": 1,
                    "quotient_high": 3,
                    "quotient_low": 2,
                    "quotient_lower": 2,
                    "quotient_part1": 1,
                    "quotient_upper": 2,
                    "remainder_low": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp_div": 1,
                    "temp_divisor": 1,
                    "temp_var2": 1
                },
                "uVar20": {
                    "temp_13": 1
                },
                "uVar21": {
                    "temp_14": 1
                },
                "uVar22": {
                    "temp_15": 1
                },
                "uVar23": {
                    "temp_16": 1
                },
                "uVar24": {
                    "temp_17": 1
                },
                "uVar25": {
                    "temp_18": 1
                },
                "uVar26": {
                    "temp_19": 1
                },
                "uVar27": {
                    "temp_20": 1
                },
                "uVar28": {
                    "temp_21": 1
                },
                "uVar29": {
                    "temp_22": 1
                },
                "uVar3": {
                    "dividend_higher_16bits": 1,
                    "divisor_lo": 1,
                    "divisor_lower": 1,
                    "numerator_mod_part": 1,
                    "partial_remainder": 1,
                    "quotient": 1,
                    "quotient2": 2,
                    "quotient_digit2": 1,
                    "quotient_high": 3,
                    "quotient_low": 2,
                    "quotient_lower": 2,
                    "quotient_part2": 1,
                    "quotient_temp": 1,
                    "quotient_upper": 1,
                    "remainder1": 1,
                    "shifted_dividend": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp3": 2,
                    "temp_denominator": 1,
                    "temp_divisor": 1,
                    "temp_quotient": 2,
                    "temp_var3": 1
                },
                "uVar31": {
                    "temp_24": 1
                },
                "uVar32": {
                    "temp_25": 1
                },
                "uVar33": {
                    "temp_26": 1
                },
                "uVar34": {
                    "temp_27": 1
                },
                "uVar35": {
                    "temp_28": 1
                },
                "uVar36": {
                    "temp_29": 1
                },
                "uVar37": {
                    "temp_30": 1
                },
                "uVar38": {
                    "temp_31": 1
                },
                "uVar39": {
                    "temp_32": 1
                },
                "uVar4": {
                    "current_remainder": 1,
                    "denominator_div_part": 1,
                    "divisor_high": 1,
                    "divisor_low": 1,
                    "divisor_lower_16bits": 1,
                    "multiplication_result": 1,
                    "partial_product": 1,
                    "partial_remainder_upper": 1,
                    "product_low": 1,
                    "quot_lo": 1,
                    "quotient3": 1,
                    "quotient_part3": 1,
                    "remainder_high": 1,
                    "remainder_low": 1,
                    "remainder_product": 1,
                    "temp": 2,
                    "temp1": 2,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 2,
                    "temp_divisor": 1,
                    "temp_divisor_high": 1,
                    "temp_mult": 1,
                    "temp_remainder": 2,
                    "temp_var4": 1,
                    "tmp_var1": 1
                },
                "uVar40": {
                    "temp_33": 1
                },
                "uVar41": {
                    "temp_34": 1
                },
                "uVar42": {
                    "temp_35": 1
                },
                "uVar43": {
                    "temp_36": 1
                },
                "uVar44": {
                    "temp_37": 1
                },
                "uVar45": {
                    "temp_38": 1
                },
                "uVar46": {
                    "temp_39": 1
                },
                "uVar47": {
                    "temp_40": 1
                },
                "uVar48": {
                    "temp_41": 1
                },
                "uVar49": {
                    "temp_42": 1
                },
                "uVar5": {
                    "current_quotient": 1,
                    "divisor_higher_16bits": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "temp1": 1,
                    "tmp_var2": 1
                },
                "uVar50": {
                    "temp_43": 1
                },
                "uVar51": {
                    "temp_44": 1
                },
                "uVar52": {
                    "temp_45": 1
                },
                "uVar53": {
                    "temp_46": 1
                },
                "uVar54": {
                    "temp_47": 1
                },
                "uVar55": {
                    "temp_48": 1
                },
                "uVar56": {
                    "temp_49": 1
                },
                "uVar57": {
                    "temp_50": 1
                },
                "uVar58": {
                    "temp_51": 1
                },
                "uVar59": {
                    "temp_52": 1
                },
                "uVar6": {
                    "current_quotient": 1,
                    "div_result": 1,
                    "final_quotient": 1,
                    "partial_quotient": 1,
                    "quotient": 8,
                    "quotient1": 3,
                    "quotient2": 1,
                    "quotient_high": 1,
                    "quotient_low": 1,
                    "quotient_lower": 1,
                    "quotient_lower_16bits": 1,
                    "quotient_result": 2,
                    "quotient_upper": 2,
                    "res": 1,
                    "result": 3,
                    "temp2": 1,
                    "temp_quotient": 2
                },
                "uVar60": {
                    "temp_53": 1
                },
                "uVar61": {
                    "temp_54": 1
                },
                "uVar62": {
                    "temp_55": 1
                },
                "uVar63": {
                    "temp_56": 1
                },
                "uVar64": {
                    "temp_57": 1
                },
                "uVar65": {
                    "temp_58": 1
                },
                "uVar66": {
                    "temp_59": 1
                },
                "uVar67": {
                    "temp_60": 1
                },
                "uVar68": {
                    "temp_61": 1
                },
                "uVar69": {
                    "temp_62": 1
                },
                "uVar7": {
                    "div_multiplier": 1,
                    "dividend_extended": 1,
                    "divisor_half": 1,
                    "divisor_high": 1,
                    "divisor_lower": 1,
                    "divisor_shifted": 1,
                    "final_remainder": 1,
                    "lzcount_result": 1,
                    "partial_remainder_lower": 1,
                    "product_high": 1,
                    "quotient2": 2,
                    "quotient_higher_16bits": 1,
                    "quotient_temp": 2,
                    "quotient_upper": 1,
                    "remainder2": 1,
                    "remainder_temp": 1,
                    "temp1": 2,
                    "temp3": 2,
                    "temp5": 1,
                    "temp_product": 1,
                    "temp_quotient": 1,
                    "temp_quotient_high": 1,
                    "temp_res": 1,
                    "temp_var1": 2,
                    "temp_var5": 1,
                    "u_var7": 1
                },
                "uVar70": {
                    "temp_63": 1
                },
                "uVar8": {
                    "div_subtrahend": 1,
                    "dividend_shifted": 1,
                    "dividend_tmp": 1,
                    "quotient_high": 1,
                    "quotient_lower": 1,
                    "remainder": 3,
                    "remainder1": 2,
                    "remainder_high": 1,
                    "remainder_lower": 2,
                    "remainder_temp": 1,
                    "remainder_upper": 1,
                    "result_builder": 1,
                    "temp2": 3,
                    "temp4": 3,
                    "temp_1": 1,
                    "temp_rem": 1,
                    "temp_remainder": 2,
                    "temp_result": 1,
                    "temp_var2": 2,
                    "temp_variable": 1,
                    "tmp": 1
                },
                "uVar9": {
                    "remainder2": 1,
                    "remainder_lower": 1,
                    "temp5": 1,
                    "temp_2": 1,
                    "temp_remainder_high": 1,
                    "temp_shifted_dividend": 1,
                    "tmp_var3": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080011ec"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculate_remainder_and_quotient_0800121c(uint dividend,uint divisor,uint divisor,uint remainder,uint *remainder)\n\n{\n  code *jmp_table;\n  ulonglong quotient;\n  uint quotient_high;\n  uint quotient_high;\n  uint temp_remainder;\n  int shift_amount;\n  uint quotient;\n  uint quotient_temp;\n  uint remainder;\n  uint *temp_pointer;\n  uint quotient3;\n  uint partial_remainder_2;\n  uint temp_remainder2;\n  bool carry_flag;\n  undefined8 result;\n  \n  if (remainder == 0) {\n    if (divisor < divisor) {\n      shift_amount = leading_zero_count(divisor);\n      quotient_temp = divisor;\n      if (shift_amount != 0) {\n        quotient_temp = divisor << shift_amount;\n        divisor = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      partial_remainder_2 = quotient_temp >> 0x10;\n      remainder = divisor / partial_remainder_2;\n      quotient3 = remainder * (quotient_temp & 0xffff);\n      quotient = dividend >> 0x10 | (divisor - partial_remainder_2 * remainder) * 0x10000;\n      quotient_high = remainder;\n      if (quotient <= quotient3 && quotient3 - quotient != 0) {\n        carry_flag = carry_operation(quotient_temp,quotient);\n        quotient = quotient_temp + quotient;\n        quotient_high = remainder - 1;\n        if ((carry_flag == false) && (quotient <= quotient3 && quotient3 - quotient != 0)) {\n          quotient_high = remainder - 2;\n          quotient = quotient + quotient_temp;\n        }\n      }\n      quotient_high = (quotient - quotient3) / partial_remainder_2;\n      temp_remainder = quotient_high * (quotient_temp & 0xffff);\n      remainder = dividend & 0xffff | ((quotient - quotient3) - partial_remainder_2 * quotient_high) * 0x10000;\n      quotient = quotient_high;\n      if (remainder <= temp_remainder && temp_remainder - remainder != 0) {\n        carry_flag = carry_operation(quotient_temp,remainder);\n        remainder = quotient_temp + remainder;\n        quotient = quotient_high - 1;\n        if ((carry_flag == false) && (remainder <= temp_remainder && temp_remainder - remainder != 0)) {\n          quotient = quotient_high - 2;\n          remainder = remainder + quotient_temp;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      temp_pointer = (uint *)0x0;\n      remainder = remainder - temp_remainder;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jmp_table = (code *)software_udf(0xff,0x8001302);\n        result = (*jmp_table)();\n        return result;\n      }\n      shift_amount = leading_zero_count(divisor);\n      if (shift_amount == 0) {\n        temp_pointer = (uint *)0x1;\n        divisor = divisor - divisor;\n        partial_remainder_2 = divisor >> 0x10;\n        quotient_high = divisor & 0xffff;\n        quotient_temp = divisor;\n      }\n      else {\n        quotient_temp = divisor << shift_amount;\n        quotient = divisor >> (0x20U - shift_amount & 0xff);\n        partial_remainder_2 = quotient_temp >> 0x10;\n        quotient3 = quotient / partial_remainder_2;\n        quotient_high = quotient_temp & 0xffff;\n        temp_remainder = quotient3 * quotient_high;\n        remainder = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        quotient_high = remainder >> 0x10 | (quotient - partial_remainder_2 * quotient3) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient = quotient3;\n        if (quotient_high <= temp_remainder && temp_remainder - quotient_high != 0) {\n          carry_flag = carry_operation(quotient_temp,quotient_high);\n          quotient_high = quotient_temp + quotient_high;\n          quotient = quotient3 - 1;\n          if ((carry_flag == false) && (quotient_high <= temp_remainder && temp_remainder - quotient_high != 0)) {\n            quotient = quotient3 - 2;\n            quotient_high = quotient_high + quotient_temp;\n          }\n        }\n        quotient3 = (quotient_high - temp_remainder) / partial_remainder_2;\n        temp_remainder2 = quotient3 * quotient_high;\n        divisor = remainder & 0xffff | ((quotient_high - temp_remainder) - partial_remainder_2 * quotient3) * 0x10000;\n        quotient_high = quotient3;\n        if (divisor <= temp_remainder2 && temp_remainder2 - divisor != 0) {\n          carry_flag = carry_operation(quotient_temp,divisor);\n          divisor = quotient_temp + divisor;\n          quotient_high = quotient3 - 1;\n          if ((carry_flag == false) && (divisor <= temp_remainder2 && temp_remainder2 - divisor != 0)) {\n            quotient_high = quotient3 - 2;\n            divisor = divisor + quotient_temp;\n          }\n        }\n        divisor = divisor - temp_remainder2;\n        temp_pointer = (uint *)(quotient_high | quotient << 0x10);\n      }\n      quotient3 = divisor / partial_remainder_2;\n      quotient = quotient_high * quotient3;\n      remainder = dividend >> 0x10 | (divisor - partial_remainder_2 * quotient3) * 0x10000;\n      quotient_high = quotient3;\n      if (remainder <= quotient && quotient - remainder != 0) {\n        carry_flag = carry_operation(quotient_temp,remainder);\n        remainder = quotient_temp + remainder;\n        quotient_high = quotient3 - 1;\n        if ((carry_flag == false) && (remainder <= quotient && quotient - remainder != 0)) {\n          quotient_high = quotient3 - 2;\n          remainder = remainder + quotient_temp;\n        }\n      }\n      quotient3 = (remainder - quotient) / partial_remainder_2;\n      quotient_high = quotient_high * quotient3;\n      remainder = dividend & 0xffff | ((remainder - quotient) - partial_remainder_2 * quotient3) * 0x10000;\n      quotient = quotient3;\n      if (remainder <= quotient_high && quotient_high - remainder != 0) {\n        carry_flag = carry_operation(quotient_temp,remainder);\n        remainder = quotient_temp + remainder;\n        quotient = quotient3 - 1;\n        if ((carry_flag == false) && (remainder <= quotient_high && quotient_high - remainder != 0)) {\n          quotient = quotient3 - 2;\n          remainder = remainder + quotient_temp;\n        }\n      }\n      remainder = remainder - quotient_high;\n      quotient = quotient | quotient_high << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = remainder >> leading_zero_count(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else {\n    temp_pointer = remainder;\n    if (divisor < remainder) {\n      if (remainder != (uint *)0x0) {\n        *remainder = dividend;\n        remainder[1] = divisor;\n        return 0;\n      }\n      quotient = 0;\n    }\n    else {\n      shift_amount = leading_zero_count(remainder);\n      if (shift_amount == 0) {\n        if ((remainder < divisor) || (divisor <= dividend)) {\n          carry_flag = dividend < divisor;\n          dividend = dividend - divisor;\n          divisor = (divisor - remainder) - (uint)carry_flag;\n          quotient = 1;\n        }\n        else {\n          quotient = 0;\n        }\n        temp_pointer = (uint *)0x0;\n        if (remainder != (uint *)0x0) {\n          *remainder = dividend;\n          remainder[1] = divisor;\n        }\n      }\n      else {\n        remainder = 0x20 - shift_amount;\n        quotient_high = divisor >> (remainder & 0xff) | remainder << shift_amount;\n        quotient_temp = divisor >> (remainder & 0xff);\n        temp_remainder = quotient_high >> 0x10;\n        quotient3 = quotient_temp / temp_remainder;\n        partial_remainder_2 = quotient3 * (quotient_high & 0xffff);\n        quotient = divisor << shift_amount | dividend >> (remainder & 0xff);\n        quotient_high = quotient >> 0x10 | (quotient_temp - temp_remainder * quotient3) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient_temp = quotient3;\n        if (quotient_high <= partial_remainder_2 && partial_remainder_2 - quotient_high != 0) {\n          carry_flag = carry_operation(quotient_high,quotient_high);\n          quotient_high = quotient_high + quotient_high;\n          quotient_temp = quotient3 - 1;\n          if ((carry_flag == false) && (quotient_high <= partial_remainder_2 && partial_remainder_2 - quotient_high != 0)) {\n            quotient_temp = quotient3 - 2;\n            quotient_high = quotient_high + quotient_high;\n          }\n        }\n        quotient3 = (quotient_high - partial_remainder_2) / temp_remainder;\n        temp_remainder2 = quotient3 * (quotient_high & 0xffff);\n        quotient_high = quotient & 0xffff | ((quotient_high - partial_remainder_2) - temp_remainder * quotient3) * 0x10000;\n        quotient = quotient3;\n        if (quotient_high <= temp_remainder2 && temp_remainder2 - quotient_high != 0) {\n          carry_flag = carry_operation(quotient_high,quotient_high);\n          quotient_high = quotient_high + quotient_high;\n          quotient = quotient3 - 1;\n          if ((carry_flag == false) && (quotient_high <= temp_remainder2 && temp_remainder2 - quotient_high != 0)) {\n            quotient = quotient3 - 2;\n            quotient_high = quotient_high + quotient_high;\n          }\n        }\n        quotient = quotient | quotient_temp << 0x10;\n        quotient = (ulonglong)quotient * (ulonglong)(divisor << shift_amount);\n        if (CONCAT44(quotient_high - temp_remainder2,dividend) < quotient) {\n          quotient = quotient - 1;\n          quotient = quotient - CONCAT44(quotient_high,divisor << shift_amount);\n        }\n        if (remainder != (uint *)0x0) {\n          quotient_temp = ((quotient_high - temp_remainder2) - (int)(quotient >> 0x20)) - (uint)(dividend < (uint)quotient);\n          *remainder = quotient_temp << (remainder & 0xff) | dividend - (uint)quotient >> shift_amount;\n          remainder[1] = quotient_temp >> shift_amount;\n          temp_pointer = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(temp_pointer,quotient);\n}\n\n",
            "current_name": "calculate_remainder_and_quotient_0800121c",
            "entrypoint": "0x0800121c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "carry_operation",
                "FUN_0800121c": "calculate_remainder_and_quotient_0800121c",
                "LZCOUNT": "leading_zero_count",
                "UNRECOVERED_JUMPTABLE": "jmp_table",
                "bVar13": "carry_flag",
                "iVar5": "shift_amount",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "divisor",
                "param_4": "remainder",
                "param_5": "remainder",
                "puVar9": "temp_pointer",
                "uVar1": "quotient",
                "uVar10": "quotient3",
                "uVar11": "partial_remainder_2",
                "uVar12": "temp_remainder2",
                "uVar14": "result",
                "uVar2": "quotient_high",
                "uVar3": "quotient_high",
                "uVar4": "temp_remainder",
                "uVar6": "quotient",
                "uVar7": "quotient_temp",
                "uVar8": "remainder",
                "uVar9": "tmp_var3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080014f0": {
            "additional_data": {
                "FUNC_08002d8a": {
                    "execute_additional_function": 3,
                    "execute_function": 2,
                    "execute_main_function": 1,
                    "execute_system_function": 1,
                    "perform_additional_operations": 4,
                    "perform_additional_setup": 1,
                    "perform_additional_tasks": 13,
                    "perform_device_action": 1,
                    "perform_function": 1,
                    "perform_operation": 2,
                    "perform_specific_operation": 1,
                    "perform_task": 1
                },
                "FUN_080014f0": {
                    "configure_and_initialize_device": 1,
                    "configure_device": 1,
                    "initialize_and_configure_device": 1,
                    "initialize_and_update_configuration": 1,
                    "initialize_configuration": 1,
                    "initialize_device": 4,
                    "initialize_system": 20,
                    "set_configuration_and_initialize": 1,
                    "update_configuration_and_initialize": 1
                },
                "_DAT_40022000": {
                    "configuration_register": 5,
                    "device_configuration_register": 1,
                    "device_register": 1,
                    "device_status_register": 1,
                    "system_configuration_register": 1
                },
                "check_data_and_initialize_0800151c": {
                    "check_data_and_init": 2,
                    "check_data_and_initialize": 18,
                    "initialize_data": 4,
                    "initialize_data_check": 1,
                    "validate_and_initialize_data": 1,
                    "validate_data_and_initialize": 3,
                    "verify_and_initialize_data": 1,
                    "verify_data_and_initialize": 1
                },
                "update_configuration_register_08001714": {
                    "configure_device": 1,
                    "configure_registers": 1,
                    "set_configuration": 5,
                    "set_configuration_register": 6,
                    "set_configuration_register_value": 1,
                    "update_config_register": 3,
                    "update_configuration": 2,
                    "update_configuration_register": 12
                }
            },
            "called": [
                "FUN_0800151c",
                "FUN_08002d8a",
                "FUN_08001714"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\n\n\nundefined4 initialize_system_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  update_configuration_register(3);\n  check_data_and_initialize(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "current_name": "initialize_system_080014f0",
            "entrypoint": "0x080014f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080014f0": "initialize_system_080014f0",
                "check_data_and_initialize_0800151c": "check_data_and_initialize",
                "update_configuration_register_08001714": "update_configuration_register"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800151c": {
            "additional_data": {
                "DAT_20000000": {
                    "current_value": 1,
                    "data_size": 1
                },
                "DAT_20000004": {
                    "time_interval": 1
                },
                "DAT_20000018": {
                    "data_chunk_size": 1
                },
                "FUN_0800151c": {
                    "check_and_initialize_data": 3,
                    "check_and_save_data": 1,
                    "check_and_write_shifted_value": 3,
                    "check_and_write_value": 3,
                    "check_data_and_initialize": 1,
                    "check_data_and_write_to_memory": 1,
                    "initialize_and_check": 3,
                    "initialize_and_check_data": 7,
                    "initialize_and_write_shifted_value": 1,
                    "initialize_check_data": 1,
                    "initialize_data_and_check": 2,
                    "initialize_data_check": 2,
                    "initialize_shifted_value": 1,
                    "verify_and_initialize_data": 1,
                    "verify_and_set_shifted_value": 1
                },
                "iVar1": {
                    "data_check_result": 11,
                    "initialization_result": 1,
                    "initialize_result": 1,
                    "initialized": 1,
                    "result": 17
                },
                "initialize_and_check_data_08001762": {
                    "initialize_and_check_data": 2
                },
                "param_1": {
                    "data_size": 2,
                    "input_value": 18,
                    "param": 1,
                    "shifted_value": 1,
                    "value": 9
                },
                "uVar2": {
                    "function_result": 1,
                    "is_success": 1,
                    "result": 3,
                    "return_code": 1,
                    "return_value": 13,
                    "status": 9,
                    "success": 3
                },
                "write_shifted_value_to_memory_0800172a": {
                    "store_shifted_value_in_memory": 1,
                    "write_shifted_value_to_memory": 2,
                    "write_value_to_memory": 1
                }
            },
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "calling": [
                "FUN_08003260",
                "FUN_080014f0"
            ],
            "code": "\nundefined4 check_data_and_initialize_0800151c(uint input_value)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  result = initialize_and_check_data((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (result == 0) {\n    if (input_value < 0x10) {\n      write_shifted_value_to_memory(0xffffffff,input_value,0);\n      return_value = 0;\n      DAT_20000000 = input_value;\n    }\n    else {\n      return_value = 1;\n    }\n  }\n  else {\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "current_name": "check_data_and_initialize_0800151c",
            "entrypoint": "0x0800151c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800151c": "check_data_and_initialize_0800151c",
                "iVar1": "result",
                "initialize_and_check_data_08001762": "initialize_and_check_data",
                "param_1": "input_value",
                "uVar2": "return_value",
                "write_shifted_value_to_memory_0800172a": "write_shifted_value_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800157c": {
            "additional_data": {
                "DAT_20000004": {
                    "data": 1,
                    "data_to_add": 1,
                    "increment": 5,
                    "increment_value": 8,
                    "input": 3,
                    "input_data": 1,
                    "input_value": 1,
                    "parameter": 1,
                    "temp_var": 1,
                    "value": 5,
                    "value_to_add": 3,
                    "value_to_increment": 1
                },
                "DAT_20000a48": {
                    "accumulator": 1,
                    "base_value": 1,
                    "current_value": 1,
                    "dat_value": 1,
                    "data": 3,
                    "data_value": 5,
                    "global_data": 1,
                    "global_value": 2,
                    "global_var": 1,
                    "global_variable": 1,
                    "result": 7,
                    "sum": 4,
                    "sum_variable": 1,
                    "updated_value": 2
                },
                "FUN_0800157c": {
                    "add_data_to_global": 3,
                    "add_data_to_global_var": 1,
                    "add_values": 2,
                    "addition_and_update": 1,
                    "increase_and_assign": 1,
                    "increase_global_value": 1,
                    "increment_data": 3,
                    "increment_data_by_value": 1,
                    "increment_data_value": 2,
                    "increment_data_variable": 1,
                    "increment_global_value": 1,
                    "increment_sum": 3,
                    "increment_value": 2,
                    "increment_value_by_data": 1,
                    "update_dat_value": 1,
                    "update_data": 6,
                    "update_global_variable": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005704"
            ],
            "code": "\nvoid increment_data_by_value_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "current_name": "increment_data_by_value_0800157c",
            "entrypoint": "0x0800157c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800157c": "increment_data_by_value_0800157c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015a0": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_20000a48": {
                    "configuration_value": 1,
                    "data": 4,
                    "data_result": 1,
                    "data_value": 5,
                    "global_data": 2,
                    "global_value": 5,
                    "global_variable": 4,
                    "initial_value": 1,
                    "value": 1
                },
                "FUN_080015a0": {
                    "get_configuration_value": 1,
                    "get_data": 5,
                    "get_data_from_memory": 1,
                    "get_data_value": 9,
                    "get_global_data": 2,
                    "get_global_value": 5,
                    "get_global_variable": 6,
                    "get_initial_value": 1,
                    "get_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001ccc",
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_08001f6c",
                "FUN_08002c2e",
                "FUN_08002640",
                "FUN_08002bb4",
                "FUN_08004f2c",
                "FUN_080027f4",
                "FUN_08004436",
                "FUN_08002ca8",
                "FUN_08002ad8"
            ],
            "code": "\nundefined4 get_data_value_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "current_name": "get_data_value_080015a0",
            "entrypoint": "0x080015a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015a0": "get_data_value_080015a0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015b4": {
            "additional_data": {
                "0x5fa0000": {
                    "constant": 2
                },
                "0xf8ff": {
                    "bit_mask": 1,
                    "mask": 1
                },
                "7": {
                    "bit_mask": 1
                },
                "8": {
                    "bit_shift": 1
                },
                "FUN_080015b4": {
                    "configure_peripheral": 2,
                    "configure_register": 2,
                    "configure_registers": 1,
                    "initialize_register": 1,
                    "reconfigure_device_settings": 1,
                    "set_bit_value_in_register": 1,
                    "set_bits_in_register": 1,
                    "set_config_value": 1,
                    "set_configuration_bits": 1,
                    "set_configuration_register": 1,
                    "set_display_mode": 1,
                    "set_memory_configuration": 1,
                    "set_memory_mapping": 1,
                    "set_mode": 1,
                    "set_mode_bits": 1,
                    "set_param_bits": 2,
                    "set_register_bits": 1,
                    "update_configuration": 4,
                    "update_configuration_register": 1,
                    "update_control_register": 1,
                    "update_data_register": 1,
                    "update_flags": 1,
                    "update_parameter_flags": 1,
                    "update_register": 1,
                    "update_register_bits": 1
                },
                "_DAT_e000ed0c": {
                    "config_register": 2,
                    "configuration_register": 5,
                    "control_register": 2,
                    "device_register": 1,
                    "display_control_register": 1,
                    "flags": 1,
                    "memory_control_register": 1,
                    "memory_mapping_register": 1,
                    "peripheral_config": 1,
                    "peripheral_register": 1,
                    "register": 2,
                    "register_value": 6
                },
                "param_1": {
                    "bit_flags": 1,
                    "bit_value": 1,
                    "bitmask": 1,
                    "config": 1,
                    "config_value": 2,
                    "configuration": 1,
                    "configuration_bits": 1,
                    "configuration_byte": 1,
                    "configuration_data": 1,
                    "display_mode": 1,
                    "input": 1,
                    "input_value": 10,
                    "memory_configuration": 1,
                    "memory_mode": 1,
                    "mode": 2,
                    "peripheral_config": 1,
                    "peripheral_options": 1,
                    "register_value": 1,
                    "value": 1,
                    "value_to_set": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001714"
            ],
            "code": "\n\n\nvoid update_configuration_register_080015b4(uint input_value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (input_value & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "current_name": "update_configuration_register_080015b4",
            "entrypoint": "0x080015b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015b4": "update_configuration_register_080015b4",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015fc": {
            "additional_data": {
                "7": {
                    "mask": 2
                },
                "8": {
                    "shift_amount": 1
                },
                "FUN_080015fc": {
                    "extract_bits": 1,
                    "extract_bits_from_register": 1,
                    "extract_low_bits": 1,
                    "get_bit_pattern": 1,
                    "get_bit_value": 2,
                    "get_bits": 2,
                    "get_bits_from_control_reg": 1,
                    "get_bits_from_register": 5,
                    "get_bitwise_shift_result": 1,
                    "get_bitwise_shifted_value": 2,
                    "get_lower_bits": 1,
                    "get_most_significant_bits": 1,
                    "get_shifted_and_masked_value": 1,
                    "get_shifted_bits": 4,
                    "get_shifted_bits_and_masked_value": 1,
                    "get_shifted_bits_value": 1,
                    "get_shifted_value": 2,
                    "get_three_least_sig_bits_of_shifted_value": 1,
                    "get_three_most_significant_bits": 1
                },
                "_DAT_e000ed0c": {
                    "bit_value": 1,
                    "control_register": 1,
                    "data": 1,
                    "data_register": 8,
                    "input_data": 1,
                    "input_value": 4,
                    "input_variable": 1,
                    "original_value": 4,
                    "register_value": 8,
                    "shifted_value": 2
                },
                "_FUN_080015fc": {
                    "get_shifted_and_masked_value": 1
                },
                "e000ed0c": {
                    "register_value": 1
                },
                "new_value": {
                    "shifted_value": 1
                },
                "return": {
                    "shifted_value": 1
                },
                "val_result": {
                    "shifted_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800172a"
            ],
            "code": "\n\n\nuint get_three_least_sig_bits_of_shifted_value_080015fc(void)\n\n{\n  shifted_value _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "current_name": "get_three_least_sig_bits_of_shifted_value_080015fc",
            "entrypoint": "0x080015fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015fc": "get_three_least_sig_bits_of_shifted_value_080015fc",
                "return": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001618": {
            "additional_data": {
                "0x1fff1c00": {
                    "base_address2": 1,
                    "memory_address2": 1,
                    "memory_location2": 1
                },
                "0xe000ed14": {
                    "base_address1": 1,
                    "memory_address1": 1,
                    "memory_location1": 1
                },
                "FUN_08001618": {
                    "set_data_at_offset": 1,
                    "store_byte": 1,
                    "store_byte_value": 3,
                    "store_data": 4,
                    "store_shifted_byte": 1,
                    "store_value": 3,
                    "store_value_at_address": 1,
                    "store_value_in_memory": 2,
                    "update_memory": 4,
                    "write_byte_to_memory": 4,
                    "write_byte_value": 1,
                    "write_data": 1,
                    "write_to_memory": 4,
                    "write_value_to_memory": 1
                },
                "char": {
                    "byte": 1
                },
                "param_1": {
                    "address": 4,
                    "address_offset": 1,
                    "byte_code": 1,
                    "byte_to_write": 1,
                    "byte_value": 5,
                    "data": 1,
                    "data_byte": 1,
                    "input_byte": 9,
                    "input_value": 1,
                    "memory_address": 1,
                    "offset": 3,
                    "source_value": 2,
                    "value": 1
                },
                "param_2": {
                    "byte_value": 1,
                    "data": 8,
                    "data_to_store": 1,
                    "data_value": 1,
                    "input_value": 5,
                    "int_value": 1,
                    "new_byte_value": 1,
                    "number": 1,
                    "uint_value": 2,
                    "update_value": 1,
                    "value": 7,
                    "value_to_store": 2
                },
                "var_1": {
                    "base_address": 1
                },
                "var_2": {
                    "offset": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800172a",
                "FUN_080016d0"
            ],
            "code": "\nvoid write_byte_to_memory_08001618(byte input_byte,uint data)\n\n{\n  if ((byte)input_byte < '\\0') {\n    *(byte *)((input_byte & 0xf) + 0xe000ed14) = (byte)((data & 0xff) << 4);\n  }\n  else {\n    *(byte *)((byte)input_byte + -0x1fff1c00) = (byte)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "write_byte_to_memory_08001618",
            "entrypoint": "0x08001618",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001618": "write_byte_to_memory_08001618",
                "char": "byte",
                "param_1": "input_byte",
                "param_2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800166c": {
            "additional_data": {
                "FUN_0800166c": {
                    "apply_bit_mask": 1,
                    "apply_bit_masks": 1,
                    "apply_bitmask": 2,
                    "apply_bitwise_operation": 1,
                    "apply_bitwise_operations": 3,
                    "bitmask_operation": 1,
                    "bitwise_and_shift": 1,
                    "bitwise_computation": 1,
                    "bitwise_concatenation": 1,
                    "bitwise_manipulation": 1,
                    "bitwise_operation": 11,
                    "bitwise_operations": 3,
                    "clear_bits_and_shift": 1,
                    "extract_bits": 1,
                    "reverse_bits": 1,
                    "update_bits": 1
                },
                "new_variable_name_1": {
                    "masked_bit_pattern1": 1,
                    "temp": 1
                },
                "new_variable_name_2": {
                    "masked_bit_pattern2": 1
                },
                "param_1": {
                    "bit_index": 1,
                    "bit_mask": 1,
                    "bit_offset": 3,
                    "bit_position": 5,
                    "bit_position_masked": 1,
                    "bitmask": 1,
                    "input": 2,
                    "input1": 1,
                    "input1_modified": 1,
                    "input_bit": 1,
                    "input_bit_size": 1,
                    "input_bits": 2,
                    "input_mask": 1,
                    "input_value": 4,
                    "mask": 1,
                    "mask_offset": 1,
                    "masking_result": 1,
                    "num_bits": 1,
                    "result": 1,
                    "value": 1
                },
                "param_1_new": {
                    "shift_amount": 1
                },
                "param_2": {
                    "bit_pattern1": 1,
                    "bit_sequence1": 1,
                    "bitmask": 1,
                    "bitmask_a": 1,
                    "bits_to_be_applied": 1,
                    "data": 1,
                    "data1": 1,
                    "data_bit": 1,
                    "data_value": 1,
                    "input1": 1,
                    "input2": 2,
                    "input_value": 2,
                    "input_value1": 1,
                    "mask": 6,
                    "new_value": 1,
                    "operand": 1,
                    "original_bits": 1,
                    "original_value": 1,
                    "secondary_bits": 1,
                    "source": 1,
                    "value": 1,
                    "value1": 3
                },
                "param_2_new": {
                    "masked_operand": 1
                },
                "param_3": {
                    "bit_mask": 1,
                    "bit_pattern2": 1,
                    "bit_sequence2": 1,
                    "bitmask_b": 1,
                    "data": 5,
                    "data2": 1,
                    "input2": 1,
                    "input3": 2,
                    "input_value2": 1,
                    "mask": 1,
                    "mask_value": 1,
                    "modified_bits": 1,
                    "new_value": 1,
                    "original_bits": 1,
                    "original_value": 2,
                    "output_bit": 1,
                    "output_mask": 1,
                    "result": 3,
                    "target": 1,
                    "value": 1,
                    "value2": 3
                },
                "param_3_new": {
                    "modified_result": 1
                },
                "result": {
                    "final_result": 1
                },
                "return": {
                    "result": 2
                },
                "return_value": {
                    "final_result": 1
                },
                "uVar1": {
                    "bit_count": 2,
                    "bit_difference": 1,
                    "bit_shift_amount": 1,
                    "bit_width": 1,
                    "bits_to_clear": 1,
                    "bits_to_shift": 2,
                    "num_bits_to_set": 1,
                    "num_bits_to_shift": 1,
                    "num_bits_to_zero": 1,
                    "num_ones": 1,
                    "remaining_bits": 6,
                    "shift": 2,
                    "shift_amount": 8,
                    "shift_value": 1,
                    "shifted_mask": 1
                },
                "uVar2": {
                    "mask_shifted": 1,
                    "shifted_data": 1
                },
                "uVar3": {
                    "value_shifted": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800172a"
            ],
            "code": "\nuint apply_bitwise_operation_0800166c(uint bit_position,uint mask,uint data)\n\n{\n  uint shift_amount;\n  \n  bit_position = bit_position & 7;\n  shift_amount = 7 - bit_position;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_position + 4 < 7) {\n    bit_position = 0;\n  }\n  else {\n    bit_position = bit_position - 3;\n  }\n  result data & ~(-1 << (bit_position & 0xff)) |\n         (~(-1 << (shift_amount & 0xff)) & mask) << (bit_position & 0xff);\n}\n\n",
            "current_name": "apply_bitwise_operation_0800166c",
            "entrypoint": "0x0800166c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800166c": "apply_bitwise_operation_0800166c",
                "param_1": "bit_position",
                "param_2": "mask",
                "param_3": "data",
                "return": "result",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080016d0": {
            "additional_data": {
                "FUN_080016d0": {
                    "check_and_configure_memory": 2,
                    "check_and_configure_param": 1,
                    "check_and_initialize": 4,
                    "check_and_initialize_data": 1,
                    "check_and_set_data": 1,
                    "check_and_set_memory": 1,
                    "check_and_set_parameters": 1,
                    "check_and_set_value": 2,
                    "check_and_update_param": 1,
                    "check_and_update_parameter": 1,
                    "check_and_update_value": 1,
                    "check_and_write_memory": 1,
                    "check_boundary_and_set_registers": 1,
                    "check_if_valid_value": 1,
                    "check_input_param": 1,
                    "check_param_and_initialize": 1,
                    "check_param_and_set_registers": 1,
                    "check_parameter_value": 1,
                    "initialize_memory": 4,
                    "is_param_valid": 1,
                    "set_memory_configuration": 1,
                    "update_data_and_check_threshold": 1,
                    "validate_input": 1
                },
                "_DAT_e000e010": {
                    "config_value": 1,
                    "configuration_flag": 1,
                    "constant_value": 1,
                    "counter": 1,
                    "default_value": 4,
                    "flag": 3,
                    "flag_value": 2,
                    "initialized_var2": 1,
                    "memory_mode": 2,
                    "modified_value_3": 1,
                    "register3": 1,
                    "register_status": 1,
                    "timer_register": 1
                },
                "_DAT_e000e014": {
                    "adjusted_input": 1,
                    "adjusted_value": 1,
                    "memory_address": 2,
                    "modified_input": 3,
                    "modified_param": 1,
                    "modified_value": 1,
                    "modified_value_1": 1,
                    "previous_input_value": 1,
                    "previous_param": 1,
                    "previous_value": 1,
                    "register1": 1,
                    "updated_param": 1,
                    "updated_value": 5
                },
                "_DAT_e000e018": {
                    "additional_data": 2,
                    "configuration_flag": 1,
                    "counter": 1,
                    "current_value": 1,
                    "flag_value": 1,
                    "initialized_value": 2,
                    "initialized_var1": 1,
                    "modified_value_2": 1,
                    "register2": 1,
                    "reserved_value": 1,
                    "reset_param": 1,
                    "reset_value": 1,
                    "some_data": 1,
                    "some_other_value": 1,
                    "status_register": 1,
                    "unused_param": 1,
                    "unused_variable": 2
                },
                "bVar1": {
                    "is_in_boundary": 1,
                    "is_input_valid": 2,
                    "is_threshold_met": 1,
                    "is_valid": 15,
                    "is_valid_input": 4,
                    "is_valid_param": 1,
                    "is_valid_size": 1,
                    "is_valid_value": 3,
                    "is_value_in_range": 1,
                    "is_value_valid": 2
                },
                "param_1": {
                    "data_size": 1,
                    "input": 2,
                    "input_param": 3,
                    "input_value": 17,
                    "value": 7,
                    "value_to_check": 1
                },
                "write_byte_to_memory_08001618": {
                    "write_byte_to_memory": 7,
                    "write_data_to_memory": 1,
                    "write_to_memory": 3
                }
            },
            "called": [
                "FUN_08001618"
            ],
            "calling": [
                "FUN_08001762"
            ],
            "code": "\n\n\nbool check_and_initialize_data_080016d0(int input_value)\n\n{\n  bool is_valid;\n  \n  is_valid = input_value - 1U < 0x1000000;\n  if (is_valid) {\n    _DAT_e000e014 = input_value + -1;\n    write_byte_to_memory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_valid;\n}\n\n",
            "current_name": "check_and_initialize_data_080016d0",
            "entrypoint": "0x080016d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080016d0": "check_and_initialize_data_080016d0",
                "bVar1": "is_valid",
                "param_1": "input_value",
                "write_byte_to_memory_08001618": "write_byte_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001714": {
            "additional_data": {
                "FUN_08001714": {
                    "configure_register": 4,
                    "configure_registers": 1,
                    "initialize_configuration": 1,
                    "update_configuration": 16,
                    "update_configuration_register": 9
                },
                "param_1": {
                    "config": 1,
                    "config_data": 6,
                    "config_param": 9,
                    "config_parameter": 1,
                    "config_register": 4,
                    "configuration": 2,
                    "configuration_data": 5,
                    "configuration_register": 1,
                    "configuration_value": 1,
                    "register": 1
                },
                "param_n": {
                    "new_param_n": 1
                },
                "update_configuration_register_080015b4": {
                    "update_config_register": 2,
                    "update_configuration_register": 1,
                    "update_configuration_registers": 1,
                    "update_register": 2
                }
            },
            "called": [
                "FUN_080015b4"
            ],
            "calling": [
                "FUN_080014f0"
            ],
            "code": "\nvoid update_configuration_register_08001714(undefined4 config_param)\n\n{\n  update_config_register(config_param);\n  return;\n}\n\n",
            "current_name": "update_configuration_register_08001714",
            "entrypoint": "0x08001714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001714": "update_configuration_register_08001714",
                "param_1": "config_param",
                "update_configuration_register_080015b4": "update_config_register"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800172a": {
            "additional_data": {
                "FUN_0800172a": {
                    "store_shifted_value_in_memory": 1,
                    "store_three_least_significant_bits": 1,
                    "write_byte_to_memory": 5,
                    "write_shifted_byte_to_memory": 1,
                    "write_shifted_value_to_memory": 19,
                    "write_three_least_sig_bits_to_memory": 2,
                    "write_three_least_significant_bits": 1,
                    "write_three_least_significant_bits_of_shifted_value": 1
                },
                "apply_bitwise_operation_0800166c": {
                    "apply_bitwise_operation": 7
                },
                "get_three_least_sig_bits_of_shifted_value_080015fc": {
                    "get_shifted_value": 2,
                    "get_three_least_sig_bits": 2,
                    "get_three_least_sig_bits_of_shifted_value": 1,
                    "get_three_least_significant_bits": 1,
                    "get_three_least_significant_bits_of_shifted_value": 1
                },
                "param_1": {
                    "address": 2,
                    "byte_to_write": 2,
                    "character": 1,
                    "input_char": 1,
                    "memory_address": 23,
                    "memory_location": 1,
                    "output_address": 1
                },
                "param_2": {
                    "bitwise_op_param1": 1,
                    "bitwise_operand_1": 1,
                    "bitwise_operation1": 1,
                    "bitwise_param1": 3,
                    "input_value1": 2,
                    "operand1": 6,
                    "param2": 1,
                    "shift_value": 1,
                    "shifted_value": 2,
                    "value": 1,
                    "value1": 10,
                    "value2": 1,
                    "value_a": 1
                },
                "param_3": {
                    "bitwise_op_param2": 1,
                    "bitwise_operand_2": 1,
                    "bitwise_operation": 3,
                    "bitwise_operation2": 1,
                    "bitwise_param2": 3,
                    "input_value2": 2,
                    "mask": 1,
                    "operand2": 6,
                    "param3": 1,
                    "value2": 10,
                    "value3": 1,
                    "value_b": 1
                },
                "uVar1": {
                    "shifted_value": 28,
                    "shifted_value_with_three_least_significant_bits": 1,
                    "three_least_sig_bits": 2
                },
                "write_byte_to_memory_08001618": {
                    "write_byte_to_memory": 7
                }
            },
            "called": [
                "FUN_08001618",
                "FUN_080015fc",
                "FUN_0800166c"
            ],
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "code": "\nvoid write_shifted_value_to_memory_0800172a(char memory_address,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 shifted_value;\n  \n  shifted_value = get_shifted_value();\n  shifted_value = apply_bitwise_operation(shifted_value,value1,value2);\n  write_byte_to_memory((int)memory_address,shifted_value);\n  return;\n}\n\n",
            "current_name": "write_shifted_value_to_memory_0800172a",
            "entrypoint": "0x0800172a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800172a": "write_shifted_value_to_memory_0800172a",
                "apply_bitwise_operation_0800166c": "apply_bitwise_operation",
                "get_three_least_sig_bits_of_shifted_value_080015fc": "get_shifted_value",
                "param_1": "memory_address",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "shifted_value",
                "write_byte_to_memory_08001618": "write_byte_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001762": {
            "additional_data": {
                "FUN_08001762": {
                    "initialize_and_check_data": 7,
                    "initialize_data": 23,
                    "initialize_data_check": 1
                },
                "param_1": {
                    "arg": 1,
                    "data": 10,
                    "data_parameter": 1,
                    "input": 7,
                    "input_data": 1,
                    "input_param": 6,
                    "input_parameter": 1,
                    "input_value": 2,
                    "param": 1,
                    "parameter": 1
                },
                "uVar1": {
                    "result": 31
                }
            },
            "called": [
                "FUN_080016d0"
            ],
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "code": "\nundefined4 initialize_and_check_data_08001762(undefined4 data)\n\n{\n  undefined4 result;\n  \n  result = check_and_initialize_data_080016d0(data);\n  return result;\n}\n\n",
            "current_name": "initialize_and_check_data_08001762",
            "entrypoint": "0x08001762",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001762": "initialize_and_check_data_08001762",
                "param_1": "data",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800177c": {
            "additional_data": {
                "FUN_0800177c": {
                    "set_bit_4": 2,
                    "set_bit_or_clear_bit": 1,
                    "set_bitmask": 1,
                    "set_control_flag": 1,
                    "set_e000e010_bit": 1,
                    "set_flag": 11,
                    "set_flag_if_equal_to_four": 1,
                    "set_flag_if_four": 1,
                    "set_flag_if_param_equal_four": 1,
                    "set_flag_if_param_is_four": 1,
                    "update_control_register": 2,
                    "update_data_register": 1,
                    "update_e000e010_flag": 1,
                    "update_e000e010_register": 1,
                    "update_flags": 1,
                    "update_register_bit": 1,
                    "update_register_bits": 1,
                    "update_register_value": 1,
                    "update_status": 1
                },
                "_DAT_e000e010": {
                    "control_register": 2,
                    "data_register": 1,
                    "flag": 1,
                    "flag_e000e010": 1,
                    "flag_register": 6,
                    "flags": 1,
                    "register": 2,
                    "register_value": 12,
                    "status_register": 1,
                    "system_control_register": 1
                },
                "param_1": {
                    "bit_index": 1,
                    "bit_number": 2,
                    "bit_value": 1,
                    "flag": 1,
                    "flag_value": 9,
                    "input": 1,
                    "input_flag": 1,
                    "input_parameter": 1,
                    "input_value": 2,
                    "status": 1,
                    "status_flag": 1,
                    "value": 9,
                    "value_to_check": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nvoid set_flag_if_param_is_four_0800177c(int flag_value)\n\n{\n  if (flag_value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "current_name": "set_flag_if_param_is_four_0800177c",
            "entrypoint": "0x0800177c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800177c": "set_flag_if_param_is_four_0800177c",
                "param_1": "flag_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080017b4": {
            "additional_data": {
                "0": {
                    "data_extraction_flag": 1,
                    "input_data": 1
                },
                "FUN_080017b4": {
                    "extract_and_store_data": 23,
                    "initialize_data_extraction": 1,
                    "process_and_store_data": 7
                },
                "extract_process_and_store_data_08004f78": {
                    "extract_and_process_data": 7,
                    "extract_and_store_data": 4,
                    "extract_and_store_data_helper": 2,
                    "extract_and_store_process_data": 1,
                    "extract_data": 2,
                    "extract_process_and_store_data": 10,
                    "extract_process_store_data": 3,
                    "extraction_process": 1,
                    "process_data": 1
                }
            },
            "called": [
                "FUN_08004f78"
            ],
            "calling": [
                "FUN_08005704"
            ],
            "code": "\nvoid extract_and_store_data_080017b4(void)\n\n{\n  extract_process_and_store_data(0);\n  return;\n}\n\n",
            "current_name": "extract_and_store_data_080017b4",
            "entrypoint": "0x080017b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080017b4": "extract_and_store_data_080017b4",
                "extract_process_and_store_data_08004f78": "extract_process_and_store_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080017c4": {
            "additional_data": {
                "FUN_080017c4": {
                    "update_bitmask": 6,
                    "update_bits": 4,
                    "update_bits_and_flags": 1,
                    "update_bits_and_registers": 1,
                    "update_bitwise_flag": 1,
                    "update_config": 1,
                    "update_configuration": 2,
                    "update_flags": 4,
                    "update_flags_and_values": 3,
                    "update_param_and_memory": 1,
                    "update_param_values": 1,
                    "update_parameter": 3,
                    "update_parameter_settings": 1,
                    "update_settings": 1,
                    "update_status_bits": 1
                },
                "iVar5": {
                    "array_index": 1,
                    "device_index": 2,
                    "index": 22,
                    "loop_index": 1,
                    "opcode_index": 1,
                    "reg_index": 1,
                    "register_index": 1,
                    "var_index": 1
                },
                "local_10": {
                    "bit_update_value": 1,
                    "bit_value": 1,
                    "new_bits": 1,
                    "new_data": 1,
                    "new_setting": 1,
                    "new_status": 1,
                    "new_value": 15,
                    "offset": 3,
                    "shift_value": 2,
                    "updated_value": 1,
                    "value": 2,
                    "value_to_update": 2
                },
                "local_c": {
                    "bit_index": 13,
                    "bit_position": 3,
                    "config_index": 1,
                    "count": 1,
                    "counter": 9,
                    "flag_index": 1,
                    "i": 1,
                    "opcode_index": 1,
                    "position": 1
                },
                "param_1": {
                    "bit_array": 1,
                    "bit_array1": 1,
                    "bit_register_array": 1,
                    "bitmask": 2,
                    "bitmask_array": 1,
                    "bitmask_ptr": 1,
                    "config1": 1,
                    "config_bits": 1,
                    "configuration": 1,
                    "data": 1,
                    "data_array": 1,
                    "flag_array1": 1,
                    "flag_registers": 1,
                    "flags": 1,
                    "flags_array": 1,
                    "output": 1,
                    "output_bits": 1,
                    "output_data": 1,
                    "output_flags": 1,
                    "output_params": 3,
                    "output_value": 1,
                    "output_values": 1,
                    "param_array1": 1,
                    "parameter_settings": 1,
                    "register1": 1,
                    "settings": 1,
                    "status_bits": 1
                },
                "param_2": {
                    "bit_array2": 1,
                    "bit_value_array": 1,
                    "config2": 1,
                    "control_array": 1,
                    "data": 2,
                    "data_array": 1,
                    "data_ptr": 1,
                    "flag_array2": 1,
                    "flags": 3,
                    "input": 3,
                    "input_bits": 1,
                    "input_data": 2,
                    "input_flags": 1,
                    "input_parameters": 1,
                    "input_params": 3,
                    "input_value": 1,
                    "input_values": 2,
                    "mask": 1,
                    "param_array2": 1,
                    "register2": 1,
                    "update_bits": 1
                },
                "puVar4": {
                    "array_pointer": 1,
                    "bit_array_ptr": 1,
                    "bitmask_ptr": 1,
                    "config_ptr": 2,
                    "config_reg": 1,
                    "data_ptr": 1,
                    "flag_ptr": 1,
                    "flags_ptr": 1,
                    "modified_params": 1,
                    "output_address": 1,
                    "output_data_ptr": 1,
                    "output_params_ptr": 1,
                    "output_ptr": 4,
                    "output_values": 1,
                    "p_bitmask": 1,
                    "param1": 1,
                    "parameter_settings_ptr": 1,
                    "ptr_to_bitmask": 1,
                    "register_pointer": 1,
                    "register_ptr": 1,
                    "result_array": 2,
                    "settings_ptr": 1,
                    "status_ptr": 1,
                    "target": 1
                },
                "uVar1": {
                    "bit": 3,
                    "bit_mask": 20,
                    "bit_position": 1,
                    "bitmask": 1,
                    "mask": 5
                },
                "uVar2": {
                    "bit": 2,
                    "bit_check": 7,
                    "bit_comparison": 2,
                    "bit_flag": 1,
                    "bit_mask": 1,
                    "bit_value": 6,
                    "check_mask": 1,
                    "flag": 1,
                    "flag_check": 2,
                    "input_bit": 2,
                    "input_bit_value": 1,
                    "input_mask": 1,
                    "mask_bit": 1,
                    "param2_bit_check": 1,
                    "temp_var": 1
                },
                "uVar3": {
                    "action": 1,
                    "code": 1,
                    "condition": 3,
                    "config_value": 1,
                    "control_value": 1,
                    "data_type": 1,
                    "flag_value": 1,
                    "header": 1,
                    "opcode": 11,
                    "operation": 1,
                    "operation_code": 1,
                    "register_value": 1,
                    "second_element": 1,
                    "selector": 1,
                    "type": 1,
                    "type_code": 1,
                    "u_var3": 1,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080055f4",
                "FUN_08005680"
            ],
            "code": "\n\n\nvoid update_flags_and_values_080017c4(uint *output_params,uint *input)\n\n{\n  uint bit_mask;\n  uint bit_check;\n  uint opcode;\n  uint *output_ptr;\n  int index;\n  uint new_value;\n  uint bit_index;\n  \n  new_value = 0;\n  bit_index = 0;\n  do {\n    if (0xf < bit_index) {\n      return;\n    }\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_check = *input & bit_mask;\n    if (bit_check == bit_mask) {\n      opcode = input[1];\n      if (opcode == 0x12) {\n        new_value = input[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          new_value = input[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_08001882;\n          if (opcode == 1) {\n            new_value = input[3];\n          }\n        }\n        else if (opcode == 3) {\n          new_value = 0;\n        }\n        else if (opcode == 0x11) {\n          new_value = input[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_08001882:\n        if (input[2] == 0) {\n          new_value = 4;\n        }\n        else if (input[2] == 1) {\n          new_value = 8;\n          output_params[4] = bit_mask;\n        }\n        else {\n          new_value = 8;\n          output_params[5] = bit_mask;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((opcode == 0x10310000) || (opcode == 0x10320000)) || (opcode == 0x10220000))\n      goto LAB_08001882;\n      if (bit_check < 0x100) {\n        bit_mask = bit_index << 2;\n        output_ptr = output_params;\n      }\n      else {\n        output_ptr = output_params + 1;\n        bit_mask = (bit_index - 8) * 4;\n      }\n      *output_ptr = *output_ptr & ~(0xf << (bit_mask & 0xff)) | new_value << (bit_mask & 0xff);\n      if ((input[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (output_params == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (output_params == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (output_params == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (output_params == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) =\n             index << ((bit_index & 3) << 2) |\n             ~(0xf << ((bit_index & 3) << 2)) & *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000);\n        if ((input[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bit_check & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bit_check | _DAT_40010400;\n        }\n        if ((input[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bit_check & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bit_check | _DAT_40010404;\n        }\n        if ((input[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bit_check & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bit_check | _DAT_40010408;\n        }\n        if ((input[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bit_check & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bit_check | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } while( true );\n}\n\n",
            "current_name": "update_flags_and_values_080017c4",
            "entrypoint": "0x080017c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080017c4": "update_flags_and_values_080017c4",
                "iVar5": "index",
                "local_10": "new_value",
                "local_c": "bit_index",
                "param_1": "output_params",
                "param_2": "input",
                "puVar4": "output_ptr",
                "uVar1": "bit_mask",
                "uVar2": "bit_check",
                "uVar3": "opcode"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001a80": {
            "additional_data": {
                "0x10": {
                    "offset": 1
                },
                "FUN_08001a80": {
                    "convert_param_to_value": 1,
                    "set_param": 3,
                    "set_param_value": 15,
                    "set_param_value_based_on_flag": 1,
                    "set_parameter_value": 2,
                    "store_param_value": 1,
                    "store_parameter_value": 1,
                    "update_data_value": 1,
                    "update_param": 2,
                    "update_parameter": 2,
                    "update_parameter_value": 1,
                    "update_value": 1
                },
                "basePointer": {
                    "base_addr": 1
                },
                "param_1": {
                    "address": 1,
                    "base_address": 4,
                    "base_pointer": 1,
                    "data": 1,
                    "data_address": 2,
                    "data_pointer": 2,
                    "data_struct_ptr": 1,
                    "input_pointer": 1,
                    "memory_address": 1,
                    "obj_address": 3,
                    "obj_ptr": 1,
                    "object": 1,
                    "object_address": 5,
                    "p_object": 1,
                    "param_address": 1,
                    "param_pointer": 1,
                    "parameter1": 1,
                    "struct_offset": 1,
                    "target_address": 2
                },
                "param_2": {
                    "new_value": 4,
                    "param_value": 5,
                    "parameter2": 1,
                    "value": 21
                },
                "param_3": {
                    "condition": 2,
                    "flag": 4,
                    "has_shift": 1,
                    "is_conversion_needed": 1,
                    "is_flag_set": 1,
                    "is_hexadecimal": 1,
                    "is_shifted": 20,
                    "use_upper_bits": 1
                },
                "param_4": {
                    "is_reversed": 1
                },
                "uint": {
                    "unsigned_int": 6,
                    "unsigned_integer": 3
                },
                "value": {
                    "param_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "code": "\nvoid set_param_value_based_on_flag_08001a80(int object_address,ushort value,char is_shifted)\n\n{\n  if (is_shifted == '\\0') {\n    *(unsigned_int *)(object_address + 0x10) = (unsigned_int)value << 0x10;\n  }\n  else {\n    *(unsigned_int *)(object_address + 0x10) = (unsigned_int)value;\n  }\n  return;\n}\n\n",
            "current_name": "set_param_value_based_on_flag_08001a80",
            "entrypoint": "0x08001a80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001a80": "set_param_value_based_on_flag_08001a80",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "additional_data": {
                "FUNC_08001cb8": {
                    "do_something": 2,
                    "initialize_data": 1,
                    "perform_initialization": 1,
                    "process_data": 1,
                    "some_function": 1
                },
                "FUN_08001ab0": {
                    "calculate_and_set_values": 1,
                    "calculate_and_update_values": 2,
                    "calculate_checksum": 1,
                    "calculate_data": 1,
                    "calculate_parameter": 1,
                    "calculate_parameters": 6,
                    "calculate_params": 1,
                    "calculate_shift": 1,
                    "calculate_shifted_data": 1,
                    "calculate_shifted_data_value": 1,
                    "calculate_stats": 1,
                    "calculate_value": 2,
                    "calculate_values": 8,
                    "initialize_data": 2,
                    "initialize_settings": 1
                },
                "bVar5": {
                    "is_temp_value_zero": 2,
                    "is_zero": 29
                },
                "cVar2": {
                    "can_divide": 1,
                    "condition": 2,
                    "flag": 3,
                    "is_invalid": 1,
                    "is_less_than_range": 1,
                    "is_out_of_range": 1,
                    "is_shifted_value_valid": 1,
                    "is_valid": 16,
                    "is_valid_value": 1,
                    "is_value_in_range": 1,
                    "is_value_valid": 1,
                    "is_within_range": 1,
                    "valid_flag": 1
                },
                "get_shifted_data_value_08003518": {
                    "get_shifted_data_value": 13
                },
                "param_1": {
                    "config_data": 1,
                    "data": 10,
                    "data_pointer": 1,
                    "input": 1,
                    "input_array": 2,
                    "input_data": 2,
                    "input_params": 2,
                    "input_ptr": 1,
                    "parameters": 9,
                    "params": 1,
                    "settings": 1
                },
                "uVar1": {
                    "data_value": 3,
                    "shift_value": 1,
                    "shifted_data_value": 19,
                    "shifted_value": 8
                },
                "uVar3": {
                    "result": 26,
                    "return_value": 5
                },
                "uVar4": {
                    "adjusted_value": 1,
                    "calculated_value": 3,
                    "calculation_result": 1,
                    "computed_value": 1,
                    "temp": 4,
                    "temp_value": 17,
                    "temp_var": 1,
                    "tmp_value": 1,
                    "u_value": 1,
                    "var1": 1
                }
            },
            "called": [
                "FUN_08001cb8",
                "FUN_08003518"
            ],
            "calling": [
                "FUN_08005348"
            ],
            "code": "\nundefined4 calculate_and_update_values_08001ab0(uint **data)\n\n{\n  uint shifted_data_value;\n  char is_valid;\n  undefined4 result;\n  uint temp_value;\n  bool is_zero;\n  \n  if (data == (uint **)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data + 0x3d) == '\\0') {\n      *(undefined *)(data + 0xf) = 0;\n      FUNC_08001cb8(data);\n    }\n    *(undefined *)((int)data + 0x3d) = 0x24;\n    **data = **data & 0xfffffffe;\n    shifted_data_value = get_shifted_data_value();\n    if (data[1] < (uint *)0x186a1) {\n      temp_value = shifted_data_value;\n      if (shifted_data_value < 2000000) {\n        temp_value = 1;\n      }\n      is_valid = (char)temp_value;\n      if (1999999 < shifted_data_value) {\n        is_valid = '\\0';\n      }\n    }\n    else {\n      temp_value = shifted_data_value;\n      if (shifted_data_value < 4000000) {\n        temp_value = 1;\n      }\n      is_valid = (char)temp_value;\n      if (3999999 < shifted_data_value) {\n        is_valid = '\\0';\n      }\n    }\n    if (is_valid == '\\0') {\n      temp_value = shifted_data_value / 1000000;\n      (*data)[1] = temp_value;\n      if ((uint *)0x186a0 < data[1]) {\n        temp_value = (temp_value * 300) / 1000;\n      }\n      (*data)[8] = temp_value + 1;\n      if (data[1] < (uint *)0x186a1) {\n        shifted_data_value = (shifted_data_value - 1) / (uint)((int)data[1] << 1) + 1 & 0xfff;\n        if (shifted_data_value < 4) {\n          shifted_data_value = 4;\n        }\n      }\n      else {\n        if (data[2] == (uint *)0x0) {\n          temp_value = (shifted_data_value - 1) / (uint)((int)data[1] * 3) + 1 & 0xfff;\n          is_zero = temp_value == 0;\n          if (is_zero) {\n            temp_value = 1;\n          }\n          is_valid = (char)temp_value;\n          if (!is_zero) {\n            is_valid = '\\0';\n          }\n        }\n        else {\n          temp_value = (shifted_data_value - 1) / (uint)((int)data[1] * 0x19) + 1 & 0xfff;\n          is_zero = temp_value == 0;\n          if (is_zero) {\n            temp_value = 1;\n          }\n          is_valid = (char)temp_value;\n          if (!is_zero) {\n            is_valid = '\\0';\n          }\n        }\n        if (is_valid == '\\0') {\n          if (data[2] == (uint *)0x0) {\n            shifted_data_value = (shifted_data_value - 1) / (uint)((int)data[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            shifted_data_value = (shifted_data_value - 1) / (uint)((int)data[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          shifted_data_value = 1;\n        }\n      }\n      (*data)[7] = shifted_data_value;\n      **data = (uint)data[8] | (uint)data[7];\n      (*data)[2] = (uint)data[3] | (uint)data[4];\n      (*data)[3] = (uint)data[6] | (uint)data[5];\n      **data = **data | 1;\n      data[0x10] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3e) = 0;\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_and_update_values_08001ab0",
            "entrypoint": "0x08001ab0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ab0": "calculate_and_update_values_08001ab0",
                "bVar5": "is_zero",
                "cVar2": "is_valid",
                "get_shifted_data_value_08003518": "get_shifted_data_value",
                "param_1": "data",
                "uVar1": "shifted_data_value",
                "uVar3": "result",
                "uVar4": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "called": [],
            "calling": [
                "FUN_08001ab0"
            ],
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08001cb8",
            "entrypoint": "0x08001cb8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08001ccc": {
            "additional_data": {
                "FUN_08001ccc": {
                    "check_and_update_flag": 2,
                    "check_and_update_permission": 1,
                    "handle_data_processing": 1,
                    "perform_data_processing": 1,
                    "perform_data_validation": 2,
                    "perform_operation": 1,
                    "process_data": 12,
                    "validate_and_update_data": 1,
                    "validate_and_update_flag": 3,
                    "validate_and_update_permission": 1,
                    "validate_and_update_permissions": 1,
                    "validate_flag_and_update_data": 1,
                    "validate_permission_and_update_flag": 1,
                    "verify_data_and_update_flag": 1
                },
                "apply_permission_and_update_flag_08002640": {
                    "apply_permission_and_update_flag": 2
                },
                "check_and_update_flag_08002bb4": {
                    "check_and_update_flag": 2
                },
                "check_flag_status_and_validate_data_08002c2e": {
                    "check_flag_status_and_validate_data": 2
                },
                "get_data_value_080015a0": {
                    "get_data_value": 1
                },
                "iVar1": {
                    "data_value": 2,
                    "data_value1": 24,
                    "data_value_1": 4,
                    "initial_value1": 1
                },
                "iVar2": {
                    "check": 1,
                    "check_value": 1,
                    "data_value2": 24,
                    "data_value_2": 4,
                    "initial_value2": 1
                },
                "param_1": {
                    "data": 21,
                    "data_array": 1,
                    "data_pointer": 3,
                    "input_array": 1,
                    "input_data": 1,
                    "parameters": 2,
                    "params": 2
                },
                "param_2": {
                    "input1": 1,
                    "param1": 3,
                    "param2": 10,
                    "param_2": 1,
                    "val1": 1,
                    "value1": 11,
                    "value_1": 2,
                    "value_2": 2
                },
                "param_3": {
                    "input2": 1,
                    "param2": 3,
                    "param3": 10,
                    "param_3": 1,
                    "val2": 1,
                    "value2": 11,
                    "value_2": 2,
                    "value_3": 2
                },
                "param_4": {
                    "input3": 1,
                    "param3": 3,
                    "param4": 10,
                    "param_4": 1,
                    "val3": 1,
                    "value3": 11,
                    "value_3": 2,
                    "value_4": 2
                },
                "param_5": {
                    "array": 1,
                    "buffer": 4,
                    "data": 2,
                    "data_array": 1,
                    "data_pointer2": 1,
                    "data_size": 1,
                    "data_values": 1,
                    "flag": 3,
                    "flag_array": 2,
                    "flags": 1,
                    "input_data": 3,
                    "param4": 1,
                    "param5": 6,
                    "param_5": 1,
                    "param_array": 1,
                    "permission_pointer": 1,
                    "ptr": 1
                },
                "param_6": {
                    "input4": 1,
                    "param4": 1,
                    "param5": 2,
                    "param6": 10,
                    "param_6": 2,
                    "val4": 1,
                    "value4": 11,
                    "value_4": 1,
                    "value_6": 2
                },
                "param_7": {
                    "flag": 1,
                    "param5": 1,
                    "param6": 1,
                    "param7": 11,
                    "param_7": 1,
                    "result": 8,
                    "return_value": 4,
                    "status": 2,
                    "value5": 2
                },
                "puVar4": {
                    "buffer_ptr": 1,
                    "byte_data": 1,
                    "byte_pointer": 1,
                    "byte_ptr": 6,
                    "byte_val": 1,
                    "data_array": 1,
                    "data_byte": 1,
                    "data_pointer": 2,
                    "data_pointer3": 1,
                    "data_ptr": 3,
                    "input_byte": 1,
                    "next_byte": 1,
                    "pointer": 1,
                    "ptr": 4,
                    "ptr_var": 3,
                    "pu_var": 1,
                    "temp": 1,
                    "temp_pointer": 1
                },
                "uVar3": {
                    "result": 21,
                    "return_value": 10
                }
            },
            "called": [
                "FUN_080015a0",
                "FUN_08002c2e",
                "FUN_08002640",
                "FUN_08002bb4"
            ],
            "calling": [
                "FUN_08004ea4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nprocess_data_08001ccc(uint **data,undefined2 value1,undefined2 value2,undefined2 value3,uint *param5,\n            undefined2 value4,undefined4 param7)\n\n{\n  int data_value1;\n  int data_value2;\n  undefined4 result;\n  uint *byte_ptr;\n  \n  data_value1 = get_data_value();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        data_value2 = 0;\n        goto LAB_08001d9c;\n      }\n      data_value2 = get_data_value();\n    } while ((uint)(data_value2 - data_value1) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    data_value2 = 3;\nLAB_08001d9c:\n    if (data_value2 == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x21;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = param5;\n        *(undefined2 *)((int)data + 0x2a) = value4;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        data_value2 = apply_permission_and_update_flag(data,value1,value2,value3,param7,data_value1);\n        if (data_value2 == 0) {\n          while (*(short *)(data + 10) != 0) {\n            data_value2 = check_and_update_flag(data,param7,data_value1);\n            if (data_value2 != 0) {\n              if (data[0x10] == (uint *)0x4) {\n                **data = **data | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            byte_ptr = data[9];\n            data[9] = (uint *)((int)byte_ptr + 1);\n            (*data)[4] = (uint)*(byte *)byte_ptr;\n            *(short *)(data + 10) = *(short *)(data + 10) + -1;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            if ((((*data)[5] & 4) == 4) && (*(short *)(data + 10) != 0)) {\n              byte_ptr = data[9];\n              data[9] = (uint *)((int)byte_ptr + 1);\n              (*data)[4] = (uint)*(byte *)byte_ptr;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            }\n          }\n          data_value1 = check_flag_status_and_validate_data(data,param7,data_value1);\n          if (data_value1 == 0) {\n            **data = **data | 0x200;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)(data + 0xf) = 0;\n            result = 0;\n          }\n          else if (data[0x10] == (uint *)0x4) {\n            **data = **data | 0x200;\n            result = 1;\n          }\n          else {\n            result = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_08001ccc",
            "entrypoint": "0x08001ccc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ccc": "process_data_08001ccc",
                "apply_permission_and_update_flag_08002640": "apply_permission_and_update_flag",
                "check_and_update_flag_08002bb4": "check_and_update_flag",
                "check_flag_status_and_validate_data_08002c2e": "check_flag_status_and_validate_data",
                "get_data_value_080015a0": "get_data_value",
                "iVar1": "data_value1",
                "iVar2": "data_value2",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "param5",
                "param_6": "value4",
                "param_7": "param7",
                "puVar4": "byte_ptr",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "additional_data": {
                "FUN_08001f6c": {
                    "check_and_update_flags": 1,
                    "check_data_and_update_flag": 1,
                    "decode_and_process_data": 1,
                    "handle_data_processing": 1,
                    "improve_code": 1,
                    "perform_data_operation": 1,
                    "process_data": 23,
                    "update_flag_and_permission": 1,
                    "validate_and_update_data": 1
                },
                "check_data_validity_08002ca8": {
                    "check_data_validity": 8
                },
                "disableIRQinterrupts": {
                    "disable_interrupts": 4,
                    "disable_irq": 3
                },
                "enableIRQinterrupts": {
                    "enable_interrupts": 4,
                    "enable_irq": 3
                },
                "get_data_value_080015a0": {
                    "get_data_value": 8
                },
                "iVar1": {
                    "base_value": 1,
                    "data_value": 12,
                    "data_value1": 13,
                    "data_value_1": 3,
                    "value": 1,
                    "value1": 1
                },
                "iVar3": {
                    "check_result": 1,
                    "check_value": 1,
                    "data_value2": 1,
                    "data_value3": 10,
                    "data_value_3": 3,
                    "loop_var": 1,
                    "result": 5,
                    "return_value": 2,
                    "temp_var": 2,
                    "temp_var2": 2,
                    "temp_var_2": 1,
                    "value3": 2
                },
                "param_1": {
                    "data": 20,
                    "data_ptr": 7,
                    "input_data": 1,
                    "param1": 1,
                    "param_array": 1,
                    "pointer_array": 1
                },
                "param_2": {
                    "flag1": 1,
                    "input1": 1,
                    "input_1": 1,
                    "param1": 2,
                    "param2": 9,
                    "param_2": 3,
                    "val1": 1,
                    "value1": 11,
                    "value_1": 2
                },
                "param_3": {
                    "flag2": 1,
                    "input2": 1,
                    "input_2": 1,
                    "param2": 2,
                    "param3": 9,
                    "param_3": 3,
                    "val2": 1,
                    "value2": 11,
                    "value_2": 2
                },
                "param_4": {
                    "flag3": 1,
                    "input3": 1,
                    "input_3": 1,
                    "param3": 2,
                    "param4": 9,
                    "param_4": 3,
                    "val3": 1,
                    "value3": 11,
                    "value_3": 2
                },
                "param_5": {
                    "arr": 1,
                    "buffer": 10,
                    "count": 1,
                    "data": 1,
                    "data_array": 2,
                    "data_ptr": 1,
                    "data_ptr_end": 1,
                    "input": 1,
                    "input_data_ptr": 2,
                    "output_data": 1,
                    "param4": 2,
                    "param5": 5,
                    "ptr": 1,
                    "result": 2
                },
                "param_6": {
                    "additional_flag": 1,
                    "condition1": 1,
                    "flag": 1,
                    "input4": 1,
                    "input_4": 1,
                    "param5": 2,
                    "param6": 10,
                    "param_6": 3,
                    "value4": 9,
                    "value_4": 2
                },
                "param_7": {
                    "condition2": 1,
                    "flag": 3,
                    "input5": 1,
                    "input_5": 1,
                    "length": 1,
                    "limit": 4,
                    "max_value": 1,
                    "param": 1,
                    "param6": 2,
                    "param7": 9,
                    "param_7": 3,
                    "size": 1,
                    "threshold": 1,
                    "value_5": 2
                },
                "puVar5": {
                    "data_ptr": 1,
                    "data_ptr2": 1,
                    "output_data_ptr": 1,
                    "pointer": 3,
                    "pointer_var": 2,
                    "pointer_var1": 1,
                    "ptr": 9,
                    "ptr2": 1,
                    "ptr5": 1,
                    "ptr_buffer": 2,
                    "ptr_data": 1,
                    "ptr_data_array": 1,
                    "ptr_value": 2,
                    "ptr_var": 2,
                    "temp_ptr": 1,
                    "u_var_pointer": 1
                },
                "pu_Var5": {
                    "ptr": 1
                },
                "uVar2": {
                    "data_value2": 11,
                    "data_value_2": 3,
                    "temp_value": 6,
                    "temp_var": 5,
                    "temp_var1": 1,
                    "temporary_var": 1,
                    "value": 2,
                    "value2": 2
                },
                "uVar4": {
                    "result": 21,
                    "return_val": 1,
                    "return_value": 9
                },
                "update_flag_and_permission_080027f4": {
                    "update_flag_and_permission": 8
                }
            },
            "called": [
                "FUN_080015a0",
                "FUN_080027f4",
                "FUN_08002ca8"
            ],
            "calling": [
                "FUN_08004ee8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\ndecode_and_process_data_08001f6c(uint **data,undefined2 value1,undefined2 value2,undefined2 value3,uint *buffer,\n            undefined2 param6,uint param7)\n\n{\n  int data_value1;\n  uint data_value2;\n  int data_value3;\n  undefined4 result;\n  uint *ptr;\n  \n  data_value1 = get_data_value();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        data_value3 = 0;\n        goto LAB_08002040;\n      }\n      data_value3 = get_data_value();\n    } while ((uint)(data_value3 - data_value1) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    data_value3 = 3;\nLAB_08002040:\n    if (data_value3 == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x22;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = buffer;\n        *(undefined2 *)((int)data + 0x2a) = param6;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        data_value3 = update_flag_and_permission(data,value1,value2,value3,param7,data_value1);\n        if (data_value3 == 0) {\n          if (*(short *)(data + 10) == 0) {\n            **data = **data | 0x200;\n          }\n          else if (*(short *)(data + 10) == 1) {\n            **data = **data & 0xfffffbff;\n            disable_interrupts();\n            **data = **data | 0x200;\n            enable_interrupts();\n          }\n          else if (*(short *)(data + 10) == 2) {\n            **data = **data | 0x800;\n            disable_interrupts();\n            **data = **data & 0xfffffbff;\n            enable_interrupts();\n          }\n          else {\n            **data = **data | 0x400;\n          }\n          while (*(short *)(data + 10) != 0) {\n            if (*(ushort *)(data + 10) < 4) {\n              if (*(short *)(data + 10) == 1) {\n                data_value3 = check_data_validity(data,param7,data_value1);\n                if (data_value3 != 0) {\n                  if (data[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                data_value2 = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)data_value2;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else if (*(short *)(data + 10) == 2) {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    data_value3 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (data_value3 = get_data_value(), (uint)(data_value3 - data_value1) <= param7)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                data_value3 = 3;\nLAB_080022fa:\n                if (data_value3 != 0) {\n                  return 3;\n                }\n                disable_interrupts();\n                **data = **data | 0x200;\n                data_value2 = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)data_value2;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enable_interrupts();\n                data_value2 = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)data_value2;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    data_value3 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (data_value3 = get_data_value(), (uint)(data_value3 - data_value1) <= param7)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                data_value3 = 3;\nLAB_08002418:\n                if (data_value3 != 0) {\n                  return 3;\n                }\n                **data = **data & 0xfffffbff;\n                disable_interrupts();\n                data_value2 = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)data_value2;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    data_value3 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (data_value3 = get_data_value(), (uint)(data_value3 - data_value1) <= param7)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                data_value3 = 3;\nLAB_0800250a:\n                if (data_value3 != 0) {\n                  return 3;\n                }\n                **data = **data | 0x200;\n                data_value2 = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)data_value2;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enable_interrupts();\n                data_value2 = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)data_value2;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n            else {\n              data_value3 = check_data_validity(data,param7,data_value1);\n              if (data_value3 != 0) {\n                if (data[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              data_value2 = (*data)[4];\n              ptr = data[9];\n              data[9] = (uint *)((int)ptr + 1);\n              *(char *)ptr = (char)data_value2;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              if (((*data)[5] & 4) == 4) {\n                data_value2 = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)data_value2;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          result = 0;\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "decode_and_process_data_08001f6c",
            "entrypoint": "0x08001f6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001f6c": "decode_and_process_data_08001f6c",
                "check_data_validity_08002ca8": "check_data_validity",
                "disableIRQinterrupts": "disable_interrupts",
                "enableIRQinterrupts": "enable_interrupts",
                "get_data_value_080015a0": "get_data_value",
                "iVar1": "data_value1",
                "iVar3": "data_value3",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "buffer",
                "param_6": "param6",
                "param_7": "param7",
                "puVar5": "ptr",
                "uVar2": "data_value2",
                "uVar4": "result",
                "update_flag_and_permission_080027f4": "update_flag_and_permission"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002640": {
            "additional_data": {
                "FUN_08002640": {
                    "apply_permission_and_update_flag": 1,
                    "process_data": 3,
                    "set_permission_and_flag": 1,
                    "update_and_check_permission": 1,
                    "update_data": 1,
                    "update_data_permission": 2,
                    "update_data_permissions": 1,
                    "update_flag_and_permission": 2,
                    "update_flags": 1,
                    "update_flags_and_permissions": 1,
                    "update_permission_and_flag": 11,
                    "update_permissions": 4,
                    "update_permissions_and_flags": 1,
                    "update_permissions_flag_and_value": 1
                },
                "check_and_update_flag_08002bb4": {
                    "check_and_update_flag": 1
                },
                "check_and_update_permission_08002ad8": {
                    "check_and_update_permission": 1
                },
                "get_data_value_080015a0": {
                    "get_data_value": 1
                },
                "iVar1": {
                    "check_result": 5,
                    "check_value": 1,
                    "condition": 1,
                    "result": 20,
                    "status": 4
                },
                "param_1": {
                    "arg1": 1,
                    "data": 21,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "input_array": 1,
                    "param": 1,
                    "param_ptr": 1,
                    "parameters": 1,
                    "pp_data": 1
                },
                "param_2": {
                    "arg2": 1,
                    "byte_data": 1,
                    "byte_value": 2,
                    "flag": 13,
                    "flags": 1,
                    "new_flag": 1,
                    "new_permission": 1,
                    "param_byte": 1,
                    "permission": 6,
                    "permission_byte": 2,
                    "value": 2
                },
                "param_3": {
                    "arg3": 1,
                    "flag": 8,
                    "flag_with_mask": 1,
                    "mode": 1,
                    "new_flag": 1,
                    "new_flag_value": 2,
                    "new_permission": 1,
                    "new_value": 1,
                    "param_word": 1,
                    "permission": 4,
                    "relevant_data": 1,
                    "short_value": 1,
                    "value": 8
                },
                "param_4": {
                    "arg4": 1,
                    "bit_shift": 1,
                    "condition": 13,
                    "flag": 3,
                    "flag_index": 1,
                    "flag_length": 1,
                    "flag_mode": 1,
                    "flag_type": 2,
                    "is_flag_set": 1,
                    "is_reversed": 1,
                    "mode": 3,
                    "param_short": 1,
                    "type": 2
                },
                "param_5": {
                    "arg5": 1,
                    "limit": 13,
                    "max_data_length": 1,
                    "max_diff": 1,
                    "max_value": 6,
                    "param_value": 1,
                    "size": 1,
                    "threshold": 3,
                    "value": 4
                },
                "param_6": {
                    "arg6": 1,
                    "base_value": 1,
                    "compare_to": 1,
                    "compare_value": 1,
                    "comparison": 1,
                    "comparison_value": 3,
                    "current_data_length": 1,
                    "current_value": 8,
                    "data_value": 1,
                    "offset": 1,
                    "param_int": 1,
                    "reference": 6,
                    "target": 1,
                    "value": 3,
                    "value_to_compare": 1
                },
                "uVar2": {
                    "result": 8,
                    "return_val": 1,
                    "return_value": 21,
                    "status_code": 1
                }
            },
            "called": [
                "FUN_080015a0",
                "FUN_08002bb4",
                "FUN_08002ad8"
            ],
            "calling": [
                "FUN_08001ccc"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\napply_permission_and_update_flag_08002640(uint **data,byte flag,undefined2 flag,short condition,uint limit,int current_value)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = get_data_value(), (uint)(result - current_value) <= limit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = check_and_update_permission(data,0x10002,limit,current_value);\n    if (result == 0) {\n      result = check_and_update_flag(data,limit,current_value,(*data)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*data)[4] = (uint)(byte)flag;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)flag >> 8);\n          result = check_and_update_flag(data,limit,current_value);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)flag;\n        }\n        return_value = 0;\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        return_value = 1;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      return_value = 1;\n    }\n    else {\n      return_value = 3;\n    }\n  }\n  else {\n    return_value = 3;\n  }\n  return return_value;\n}\n\n",
            "current_name": "apply_permission_and_update_flag_08002640",
            "entrypoint": "0x08002640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002640": "apply_permission_and_update_flag_08002640",
                "check_and_update_flag_08002bb4": "check_and_update_flag",
                "check_and_update_permission_08002ad8": "check_and_update_permission",
                "get_data_value_080015a0": "get_data_value",
                "iVar1": "result",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "flag",
                "param_4": "condition",
                "param_5": "limit",
                "param_6": "current_value",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080027f4": {
            "additional_data": {
                "FUN_080027f4": {
                    "perform_action": 1,
                    "process_permissions": 1,
                    "set_permission_and_flag": 1,
                    "update_data": 1,
                    "update_flag_and_permission": 1,
                    "update_permission": 1,
                    "update_permission_and_flag": 9,
                    "update_permission_flag": 2,
                    "update_permissions": 9,
                    "update_permissions_and_flag": 1,
                    "update_permissions_and_flags": 2
                },
                "check_and_update_flag_08002bb4": {
                    "check_and_update_flag": 1
                },
                "check_and_update_permission_08002ad8": {
                    "check_and_update_permission": 1
                },
                "get_data_value_080015a0": {
                    "get_data_value": 1
                },
                "iVar1": {
                    "check_result": 1,
                    "error": 1,
                    "result": 23,
                    "status": 6
                },
                "param_1": {
                    "data": 9,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "input": 1,
                    "input_data": 1,
                    "param": 1,
                    "param_array": 5,
                    "param_pointer": 2,
                    "params": 2,
                    "permission_data": 1,
                    "permissions": 3,
                    "pointer": 2
                },
                "param_2": {
                    "byte": 1,
                    "byte_param": 2,
                    "byte_value": 4,
                    "flag": 11,
                    "flags": 1,
                    "input_byte": 1,
                    "param_byte": 1,
                    "permission": 5,
                    "permission_byte": 1,
                    "permission_flag": 3,
                    "value": 1
                },
                "param_3": {
                    "byte_value": 1,
                    "flag": 7,
                    "flag_value": 2,
                    "flags": 1,
                    "input_short": 1,
                    "param_short": 1,
                    "permission": 7,
                    "permission_bits": 1,
                    "permission_flag": 1,
                    "permission_value_1": 1,
                    "short_param": 1,
                    "short_value": 5,
                    "special_flag": 1,
                    "ushort_param": 1
                },
                "param_4": {
                    "action": 1,
                    "condition": 10,
                    "flag": 3,
                    "flag_length": 1,
                    "flag_param": 1,
                    "flag_type": 2,
                    "flag_value": 2,
                    "int_value": 1,
                    "is_single_byte": 1,
                    "mode": 3,
                    "param_flag": 1,
                    "permission_type": 1,
                    "permission_value_2": 1,
                    "short_param": 1,
                    "type": 2
                },
                "param_5": {
                    "count_param": 1,
                    "data_limit": 1,
                    "data_size": 1,
                    "data_value": 3,
                    "limit": 5,
                    "max_value": 7,
                    "param_value": 1,
                    "threshold": 1,
                    "uint_param": 1,
                    "uint_value": 1,
                    "value": 8,
                    "value_limit": 1
                },
                "param_6": {
                    "base_value": 1,
                    "check_value": 1,
                    "compare_value": 1,
                    "comparison_value": 1,
                    "current_value": 8,
                    "data_value": 1,
                    "input_value": 1,
                    "int_param": 1,
                    "int_value": 1,
                    "param": 2,
                    "param6": 1,
                    "param_6": 1,
                    "param_int": 1,
                    "param_value": 2,
                    "parameter": 1,
                    "reference": 1,
                    "reference_value": 2,
                    "value": 3,
                    "value_param": 1
                },
                "uVar2": {
                    "output": 1,
                    "result": 7,
                    "return_val": 1,
                    "return_value": 22
                }
            },
            "called": [
                "FUN_080015a0",
                "FUN_08002bb4",
                "FUN_08002ad8"
            ],
            "calling": [
                "FUN_08001f6c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nupdate_flag_and_permission_080027f4(uint **data,byte flag,undefined2 flag,short condition,uint value,int current_value)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  **data = **data | 0x400;\n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((value == 0xffffffff) ||\n          ((value != 0 && (result = get_data_value(), (uint)(result - current_value) <= value))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_080028d2:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = check_and_update_permission(data,0x10002,value,current_value);\n    if (result == 0) {\n      result = check_and_update_flag(data,value,current_value,(*data)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*data)[4] = (uint)(byte)flag;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)flag >> 8);\n          result = check_and_update_flag(data,value,current_value);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)flag;\n        }\n        result = check_and_update_flag(data,value,current_value);\n        if (result == 0) {\n          **data = **data | 0x100;\n          do {\n            if ((~(*data)[5] & 1) == 0) {\n              result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((value == 0xffffffff) ||\n                  ((value != 0 && (result = get_data_value(), (uint)(result - current_value) <= value))));\n          data[0xc] = (uint *)0x0;\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\nLAB_08002a90:\n          if (result == 0) {\n            (*data)[4] = (uint)(flag | 1);\n            result = check_and_update_permission(data,0x10002,value,current_value);\n            if (result == 0) {\n              return_value = 0;\n            }\n            else if (data[0x10] == (uint *)0x4) {\n              return_value = 1;\n            }\n            else {\n              return_value = 3;\n            }\n          }\n          else {\n            return_value = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          **data = **data | 0x200;\n          return_value = 1;\n        }\n        else {\n          return_value = 3;\n        }\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        return_value = 1;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      return_value = 1;\n    }\n    else {\n      return_value = 3;\n    }\n  }\n  else {\n    return_value = 3;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_flag_and_permission_080027f4",
            "entrypoint": "0x080027f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080027f4": "update_flag_and_permission_080027f4",
                "check_and_update_flag_08002bb4": "check_and_update_flag",
                "check_and_update_permission_08002ad8": "check_and_update_permission",
                "get_data_value_080015a0": "get_data_value",
                "iVar1": "result",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "flag",
                "param_4": "condition",
                "param_5": "value",
                "param_6": "current_value",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "additional_data": {
                "FUN_08002ad8": {
                    "check_and_modify_data": 1,
                    "check_and_modify_params": 1,
                    "check_and_modify_value": 1,
                    "check_and_modify_values": 1,
                    "check_and_set_flag": 2,
                    "check_and_set_flags": 1,
                    "check_and_update": 1,
                    "check_and_update_data": 1,
                    "check_and_update_flag": 2,
                    "check_and_update_flags": 2,
                    "check_and_update_parameters": 2,
                    "check_and_update_permission": 1,
                    "check_and_update_value": 2,
                    "check_condition": 1,
                    "check_condition_and_set_flags": 1,
                    "check_condition_and_update": 1,
                    "check_flag": 1,
                    "check_flag_validity": 1,
                    "check_permission": 1,
                    "process_data": 3,
                    "reverse_binary_operation": 1,
                    "reverse_check": 1,
                    "validate_condition": 1
                },
                "bVar4": {
                    "flag": 1,
                    "has_value": 1,
                    "is_flag_set": 1,
                    "is_flag_updated": 1,
                    "is_flag_valid": 1,
                    "is_modified": 7,
                    "is_non_zero": 8,
                    "is_nonzero": 2,
                    "is_not_zero": 1,
                    "is_result_non_zero": 1,
                    "is_set": 1,
                    "is_updated": 2,
                    "is_value_non_zero": 1,
                    "mask_exists": 1,
                    "value_flag": 1,
                    "value_updated": 1
                },
                "cVar2": {
                    "char_value": 2,
                    "check_value": 1,
                    "condition_flag": 1,
                    "condition_passed": 1,
                    "flag": 1,
                    "flag_char": 4,
                    "flag_status": 1,
                    "is_flag_set": 1,
                    "permission_flag": 2,
                    "result": 16,
                    "result_char": 1
                },
                "get_data_value_080015a0": {
                    "get_data_value": 4
                },
                "iVar1": {
                    "data_value": 31
                },
                "param_1": {
                    "array_ptr": 1,
                    "data": 8,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "flag_data": 1,
                    "input": 1,
                    "input_data": 1,
                    "param": 1,
                    "param_arr": 1,
                    "param_array": 3,
                    "parameter_array": 1,
                    "parameter_list": 2,
                    "parameters": 2,
                    "params": 1,
                    "permission": 1,
                    "permission_array": 1,
                    "pointer_array": 1,
                    "ptr_to_uint": 1,
                    "values": 1
                },
                "param_2": {
                    "bit_mask": 1,
                    "flag": 8,
                    "flag1": 1,
                    "flag_value": 3,
                    "flags": 1,
                    "input1": 1,
                    "input_value": 2,
                    "permission_value": 1,
                    "value": 9,
                    "value1": 3,
                    "value_1": 1
                },
                "param_3": {
                    "check_value": 1,
                    "data_length": 3,
                    "flag2": 1,
                    "input2": 1,
                    "limit": 14,
                    "max_value": 4,
                    "threshold": 1,
                    "value": 2,
                    "value2": 3,
                    "value_2": 1
                },
                "param_4": {
                    "compare_value": 3,
                    "comparison_value": 8,
                    "current_value": 1,
                    "initial_value": 1,
                    "input3": 1,
                    "input_length": 1,
                    "param_value": 1,
                    "reference_value": 4,
                    "target": 1,
                    "threshold": 3,
                    "value": 3,
                    "value3": 3,
                    "value_3": 1
                },
                "uVar3": {
                    "flag_result": 1,
                    "mask_value": 1,
                    "masked_flag": 1,
                    "masked_value": 11,
                    "modified_flag": 4,
                    "modified_value": 5,
                    "non_zero_bits": 1,
                    "result": 1,
                    "temp": 1,
                    "temp_value": 1,
                    "updated_flag": 1,
                    "updated_value": 3
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "code": "\nundefined4 check_and_update_permission_08002ad8(uint **data,uint value,uint limit,int comparison_value)\n\n{\n  int data_value;\n  char result;\n  uint masked_value;\n  bool is_non_zero;\n  \n  do {\n    if ((value >> 0x10 & 0xff) == 1) {\n      masked_value = value & ~(*data)[5] & 0xffff;\n      is_non_zero = masked_value != 0;\n      if (is_non_zero) {\n        masked_value = 1;\n      }\n      result = (char)masked_value;\n      if (!is_non_zero) {\n        result = '\\0';\n      }\n    }\n    else {\n      masked_value = value & ~(*data)[6] & 0xffff;\n      is_non_zero = masked_value != 0;\n      if (is_non_zero) {\n        masked_value = 1;\n      }\n      result = (char)masked_value;\n      if (!is_non_zero) {\n        result = '\\0';\n      }\n    }\n    if (result == '\\0') {\n      return 0;\n    }\n    if (((*data)[5] & 0x400) == 0x400) {\n      **data = **data | 0x200;\n      (*data)[5] = 0xfffffbff;\n      data[0x10] = (uint *)0x4;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)(data + 0xf) = 0;\n      return 1;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (data_value = get_data_value(), (uint)(data_value - comparison_value) <= limit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)(data + 0xf) = 0;\n  return 3;\n}\n\n",
            "current_name": "check_and_update_permission_08002ad8",
            "entrypoint": "0x08002ad8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ad8": "check_and_update_permission_08002ad8",
                "bVar4": "is_non_zero",
                "cVar2": "result",
                "get_data_value_080015a0": "get_data_value",
                "iVar1": "data_value",
                "param_1": "data",
                "param_2": "value",
                "param_3": "limit",
                "param_4": "comparison_value",
                "uVar3": "masked_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "additional_data": {
                "0x14": {
                    "flag_mask": 1
                },
                "0x20": {
                    "flag_1": 1
                },
                "0x3d": {
                    "flag_2": 1
                },
                "0x80": {
                    "flag_check": 1
                },
                "0xc": {
                    "counter": 1
                },
                "0xf": {
                    "flag_3": 1
                },
                "0xffffffff": {
                    "invalid_data": 1
                },
                "FUN_08002bb4": {
                    "check_and_update_data": 1,
                    "check_and_update_flag": 3,
                    "check_and_update_flags": 3,
                    "check_and_update_status": 3,
                    "check_conditions": 1,
                    "check_data": 1,
                    "check_data_integrity": 1,
                    "check_data_status": 2,
                    "check_data_validity": 6,
                    "check_flag": 1,
                    "check_flag_and_data": 2,
                    "check_flag_and_update": 4,
                    "check_flag_status": 2,
                    "flag_check_and_process": 1
                },
                "check_flag_status_08002d3c": {
                    "check_flag_status": 27
                },
                "get_data_value_080015a0": {
                    "get_data_value": 23,
                    "get_max_data_value": 4,
                    "get_maximum_data_value": 1,
                    "get_maximum_value": 1
                },
                "iVar1": {
                    "flag_check_result": 1,
                    "flag_status": 28,
                    "result": 1,
                    "status": 1
                },
                "param_1": {
                    "data": 3,
                    "data_array": 8,
                    "data_pointer": 4,
                    "data_ptr": 3,
                    "flag_and_data": 1,
                    "flag_array": 3,
                    "flag_data": 2,
                    "flag_ptr": 1,
                    "flags": 1,
                    "input_array": 1,
                    "input_data": 1,
                    "input_ptr": 1,
                    "pointer_to_data": 1,
                    "status_array": 1
                },
                "param_2": {
                    "array_length": 1,
                    "array_size": 1,
                    "data_index": 1,
                    "data_length": 11,
                    "data_size": 10,
                    "flag": 1,
                    "input_value": 1,
                    "length": 2,
                    "max_data_value": 1,
                    "target_value": 1,
                    "value": 1
                },
                "param_3": {
                    "current_value": 1,
                    "data_offset": 7,
                    "data_value": 1,
                    "index_offset": 1,
                    "offset": 14,
                    "requested_size": 1,
                    "required_length": 1,
                    "start_pos": 1,
                    "threshold": 3,
                    "value_threshold": 1
                }
            },
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "calling": [
                "FUN_08001ccc",
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "code": "\nundefined4 check_and_update_flag_08002bb4(int *data_array,uint data_length,int offset)\n\n{\n  int flag_status;\n  \n  while( true ) {\n    if ((*(uint *)(*data_array + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    flag_status = check_flag_status(data_array);\n    if (flag_status != 0) break;\n    if ((data_length != 0xffffffff) &&\n       ((data_length == 0 || (flag_status = get_data_value(), data_length < (uint)(flag_status - offset))))) {\n      data_array[0x10] = data_array[0x10] | 0x20;\n      data_array[0xc] = 0;\n      *(undefined *)((int)data_array + 0x3d) = 0x20;\n      *(undefined *)(data_array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_update_flag_08002bb4",
            "entrypoint": "0x08002bb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002bb4": "check_and_update_flag_08002bb4",
                "check_flag_status_08002d3c": "check_flag_status",
                "get_data_value_080015a0": "get_data_value",
                "iVar1": "flag_status",
                "param_1": "data_array",
                "param_2": "data_length",
                "param_3": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "additional_data": {
                "FUN_08002c2e": {
                    "check_and_update_data": 3,
                    "check_and_update_data_status": 1,
                    "check_and_update_data_value": 1,
                    "check_and_update_flag": 3,
                    "check_and_update_flags": 1,
                    "check_and_update_status": 1,
                    "check_condition_and_return_status": 1,
                    "check_data_integrity": 1,
                    "check_data_status": 3,
                    "check_data_validity": 5,
                    "check_flag": 3,
                    "check_flag_and_data": 1,
                    "check_flag_and_get_data_value": 1,
                    "check_flag_and_update": 1,
                    "check_flag_and_update_state": 1,
                    "check_flag_and_update_status": 1,
                    "check_flag_status_and_validate_data": 1,
                    "improved_check_flag_status": 1,
                    "process_data": 1
                },
                "check_flag_status_08002d3c": {
                    "check_flag_status": 30
                },
                "get_data_value_080015a0": {
                    "get_data_value": 27,
                    "get_max_data_value": 1,
                    "get_maximum_data_value": 1,
                    "get_value": 1
                },
                "iVar1": {
                    "flag_check_result": 1,
                    "flag_status": 24,
                    "result": 1,
                    "status": 5
                },
                "param_1": {
                    "array": 1,
                    "data": 4,
                    "data_array": 6,
                    "data_pointer": 1,
                    "data_ptr": 5,
                    "data_status": 1,
                    "flag": 1,
                    "flag_array": 1,
                    "flag_data": 3,
                    "flag_ptr": 3,
                    "flags": 3,
                    "input_array": 1,
                    "input_data": 1
                },
                "param_2": {
                    "data_length": 4,
                    "data_limit": 1,
                    "data_offset": 1,
                    "data_size": 6,
                    "desired_value": 1,
                    "flag": 3,
                    "flag_value": 2,
                    "index": 1,
                    "length": 1,
                    "limit_value": 1,
                    "max_data_value": 1,
                    "max_value": 5,
                    "target_value": 1,
                    "value": 3
                },
                "param_3": {
                    "current_value": 1,
                    "data_length": 1,
                    "data_offset": 3,
                    "desired_length": 1,
                    "difference": 1,
                    "expected_data_size": 1,
                    "min_data_size": 1,
                    "offset": 16,
                    "required_size": 1,
                    "target": 1,
                    "threshold": 3,
                    "value": 1
                }
            },
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "calling": [
                "FUN_08001ccc"
            ],
            "code": "\nundefined4 check_flag_status_and_validate_data_08002c2e(int *data_array,uint data_size,int offset)\n\n{\n  int flag_status;\n  \n  while( true ) {\n    if ((*(uint *)(*data_array + 0x14) & 4) == 4) {\n      return 0;\n    }\n    flag_status = check_flag_status(data_array);\n    if (flag_status != 0) break;\n    if ((data_size != 0xffffffff) &&\n       ((data_size == 0 || (flag_status = get_data_value(), data_size < (uint)(flag_status - offset))))) {\n      data_array[0x10] = data_array[0x10] | 0x20;\n      data_array[0xc] = 0;\n      *(undefined *)((int)data_array + 0x3d) = 0x20;\n      *(undefined *)(data_array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_flag_status_and_validate_data_08002c2e",
            "entrypoint": "0x08002c2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c2e": "check_flag_status_and_validate_data_08002c2e",
                "check_flag_status_08002d3c": "check_flag_status",
                "get_data_value_080015a0": "get_data_value",
                "iVar1": "flag_status",
                "param_1": "data_array",
                "param_2": "data_size",
                "param_3": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "additional_data": {
                "0": {
                    "success": 1
                },
                "0x10": {
                    "data_flag_condition": 1,
                    "flag_2": 2,
                    "flag_b": 2
                },
                "0x14": {
                    "data_flag": 1,
                    "data_flags": 1,
                    "flag": 1
                },
                "0x20": {
                    "data_flag_updated": 1,
                    "flag_d": 1
                },
                "0x3d": {
                    "data_flag_final": 1,
                    "flag_3": 1,
                    "flag_c": 1
                },
                "0x40": {
                    "data_flag_stop_processing": 1,
                    "flag_1": 2,
                    "flag_a": 2
                },
                "0xffffffef": {
                    "data_flag_reset": 1,
                    "new_flag_value": 1
                },
                "3": {
                    "failure": 1
                },
                "DAT_08002ca8": {
                    "constant": 1,
                    "data_flags": 1
                },
                "DAT_08008d5c": {
                    "flag_10": 1
                },
                "DAT_08008d60": {
                    "flag_40": 1
                },
                "FUN_08002ca8": {
                    "check_and_modify_data": 1,
                    "check_condition_and_modify": 1,
                    "check_conditions_and_perform_action": 1,
                    "check_data_integrity": 5,
                    "check_data_range": 1,
                    "check_data_validity": 16,
                    "check_data_value": 1,
                    "check_param_values": 1,
                    "process_data": 2,
                    "verify_data_integrity": 1,
                    "verify_data_range": 1
                },
                "PTR_080015a0": {
                    "data_value_pointer": 1
                },
                "PTR_08002ca8": {
                    "pointer": 1
                },
                "PTR_FUN_080015a0": {
                    "get_data_value": 1
                },
                "PTR_FUN_08002ca8": {
                    "check_data_validity": 1
                },
                "c": {
                    "data_size": 1
                },
                "get_data_value_080015a0": {
                    "get_data_value": 15,
                    "get_expected_data_value": 1,
                    "retrieve_data_value": 1
                },
                "iVar1": {
                    "data_value": 26,
                    "data_value_diff": 1,
                    "required_data_value": 2,
                    "value_offset": 2
                },
                "param_1": {
                    "data": 13,
                    "data_array": 1,
                    "data_pointer": 8,
                    "data_ptr": 8,
                    "parameters": 1
                },
                "param_2": {
                    "array_length": 1,
                    "buffer_size": 1,
                    "data_length": 4,
                    "data_size": 15,
                    "input_value": 1,
                    "length": 1,
                    "max_iterations": 1,
                    "size": 7
                },
                "param_3": {
                    "base_value": 1,
                    "comparison_value": 1,
                    "current_value": 1,
                    "data_offset": 5,
                    "expected_length": 1,
                    "expected_size": 2,
                    "index": 1,
                    "minimum_size": 1,
                    "offset": 14,
                    "range_threshold": 1,
                    "requested_size": 1,
                    "required_size": 1,
                    "threshold": 1
                },
                "ptr_1": {
                    "ptr_to_data": 1
                },
                "ptr_2": {
                    "ptr_to_flag": 1
                },
                "ptr_3": {
                    "ptr_to_status": 1
                },
                "uint": {
                    "unsigned_int": 1
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001f6c"
            ],
            "code": "\nundefined4 check_data_validity_08002ca8(int *data,unsigned_int data_size,int offset)\n\n{\n  int data_value;\n  \n  while( true ) {\n    if ((*(unsigned_int *)(*data + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(unsigned_int *)(*data + 0x14) & 0x10) == 0x10) break;\n    if ((data_size == 0) || (data_value = get_data_value(), data_size < (unsigned_int)(data_value - offset))) {\n      data[0x10] = data[0x10] | 0x20;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)(data + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*data + 0x14) = 0xffffffef;\n  data[0x10] = 0;\n  data[0xc] = 0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)(data + 0xf) = 0;\n  return 1;\n}\n\n",
            "current_name": "check_data_validity_08002ca8",
            "entrypoint": "0x08002ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ca8": "check_data_validity_08002ca8",
                "get_data_value_080015a0": "get_data_value",
                "iVar1": "data_value",
                "param_1": "data",
                "param_2": "data_size",
                "param_3": "offset",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "additional_data": {
                "0x400": {
                    "flag_mask": 1
                },
                "FUN_08002d3c": {
                    "check_and_initialize_flags": 1,
                    "check_and_update_flags": 1,
                    "check_flag": 5,
                    "check_flag_and_set": 1,
                    "check_flag_and_set_defaults": 1,
                    "check_flag_permissions": 1,
                    "check_flag_status": 14,
                    "check_flagged_status": 1,
                    "initialize_settings": 1,
                    "set_flags_and_values": 1,
                    "update_param_and_flag": 1,
                    "update_parameters": 1,
                    "update_settings": 1,
                    "validate_flags": 1
                },
                "bVar1": {
                    "flag_check_result": 1,
                    "has_flag": 1,
                    "has_permission": 1,
                    "is_flag_set": 26,
                    "is_set": 1,
                    "is_setting_enabled": 1
                },
                "param_1": {
                    "data": 2,
                    "flag": 1,
                    "flag_address": 1,
                    "flag_array": 1,
                    "flag_data": 2,
                    "flag_holder": 1,
                    "flag_pointer": 5,
                    "flag_ptr": 5,
                    "flag_status": 4,
                    "flagged_data": 1,
                    "flags": 1,
                    "input": 1,
                    "input_array": 1,
                    "input_data": 2,
                    "param": 1,
                    "settings": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "code": "\nbool check_flag_status_08002d3c(int *flag_pointer)\n\n{\n  bool is_flag_set;\n  \n  is_flag_set = (*(uint *)(*flag_pointer + 0x14) & 0x400) == 0x400;\n  if (is_flag_set) {\n    *(undefined4 *)(*flag_pointer + 0x14) = 0xfffffbff;\n    flag_pointer[0x10] = 4;\n    flag_pointer[0xc] = 0;\n    *(undefined *)((int)flag_pointer + 0x3d) = 0x20;\n    *(undefined *)(flag_pointer + 0xf) = 0;\n  }\n  return is_flag_set;\n}\n\n",
            "current_name": "check_flag_status_08002d3c",
            "entrypoint": "0x08002d3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d3c": "check_flag_status_08002d3c",
                "bVar1": "is_flag_set",
                "param_1": "flag_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "called": [],
            "calling": [
                "FUN_080014f0"
            ],
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002d8a",
            "entrypoint": "0x08002d8a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002d98": {
            "additional_data": {
                "FUN_08002d98": {
                    "check_and_adjust_settings": 1,
                    "check_and_control": 1,
                    "check_and_control_function": 1,
                    "check_and_modify_settings": 1,
                    "check_and_update_config": 1,
                    "check_and_update_flags": 2,
                    "check_and_update_settings": 1,
                    "check_condition": 1,
                    "check_conditions": 2,
                    "check_configuration": 1,
                    "check_flags": 4,
                    "check_flags_and_perform_action": 1,
                    "check_status": 4,
                    "process_data": 2,
                    "process_flags": 1,
                    "verify_conditions": 1
                },
                "_DAT_40007000": {
                    "reg4": 1,
                    "register_value6": 1,
                    "status_register": 1,
                    "var4": 1
                },
                "_DAT_40021000": {
                    "data_register": 2,
                    "reg2": 1,
                    "register_b": 1,
                    "register_value2": 1
                },
                "_DAT_40021004": {
                    "control_register": 1,
                    "reg7": 1,
                    "register_a": 1,
                    "register_value9": 1,
                    "var6": 1
                },
                "_DAT_4002101c": {
                    "reg5": 1,
                    "register_value8": 1,
                    "var3": 1
                },
                "_DAT_40021020": {
                    "reg6": 1,
                    "register_c": 1,
                    "register_value7": 1,
                    "var5": 1
                },
                "_DAT_40021024": {
                    "reg3": 1,
                    "register_d": 1,
                    "register_value4": 1,
                    "var2": 1
                },
                "_DAT_42420000": {
                    "reg8": 1,
                    "register_value3": 1,
                    "var1": 1,
                    "variable_a": 1
                },
                "_DAT_42420060": {
                    "reg10": 1,
                    "register_value10": 1,
                    "var7": 1,
                    "variable_b": 1
                },
                "_DAT_42420480": {
                    "reg9": 1,
                    "register_value5": 1
                },
                "bVar4": {
                    "flag": 6,
                    "is_bit_set": 3,
                    "is_clear_first_flag": 1,
                    "is_condition_met": 1,
                    "is_condition_true": 2,
                    "is_flag_cleared": 1,
                    "is_flag_set": 12,
                    "is_reset": 1,
                    "is_unset": 1,
                    "is_var4_true": 1,
                    "is_variable_set": 1,
                    "was_bit_cleared": 1
                },
                "calculate_delay_08003568": {
                    "calculate_delay": 1
                },
                "get_data_value_080015a0": {
                    "get_data_value": 9
                },
                "iVar1": {
                    "current_value": 1,
                    "initial_value": 15,
                    "prev_value": 3,
                    "previous_value": 1,
                    "start_time": 2,
                    "start_value": 8,
                    "value1": 1
                },
                "iVar2": {
                    "curr_value": 2,
                    "current_time": 2,
                    "current_value": 24,
                    "new_value": 2,
                    "value2": 1
                },
                "param_1": {
                    "config": 1,
                    "config_params": 1,
                    "data": 1,
                    "flags": 16,
                    "input_data": 2,
                    "param": 2,
                    "parameters": 2,
                    "settings": 2,
                    "status": 3,
                    "status_flags": 1
                },
                "uVar3": {
                    "result": 31
                }
            },
            "called": [
                "FUN_080015a0",
                "FUN_08003568"
            ],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nundefined4 check_and_update_flags_08002d98(uint *flags)\n\n{\n  int initial_value;\n  int current_value;\n  undefined4 result;\n  bool is_flag_set;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (flags[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (flags[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (flags[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        initial_value = get_data_value();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_value = get_data_value();\n          if (100 < (uint)(current_value - initial_value)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initial_value = get_data_value();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_value = get_data_value();\n          if (100 < (uint)(current_value - initial_value)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      initial_value = get_data_value();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_value = get_data_value();\n        if (2 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      initial_value = get_data_value();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_value = get_data_value();\n        if (2 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      initial_value = get_data_value();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_value = get_data_value();\n        if (2 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      initial_value = get_data_value();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_value = get_data_value();\n        if (2 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n      calculate_delay(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    is_flag_set = (_DAT_4002101c & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initial_value = get_data_value();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_value = get_data_value();\n        if (100 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    if (flags[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (flags[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (flags[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      initial_value = get_data_value();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_value = get_data_value();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initial_value = get_data_value();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_value = get_data_value();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    initial_value = get_data_value();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = flags[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = flags[9] | flags[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        initial_value = get_data_value();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          current_value = get_data_value();\n          if (2 < (uint)(current_value - initial_value)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      current_value = get_data_value();\n    } while ((uint)(current_value - initial_value) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    initial_value = get_data_value();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      current_value = get_data_value();\n    } while ((uint)(current_value - initial_value) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "current_name": "check_and_update_flags_08002d98",
            "entrypoint": "0x08002d98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d98": "check_and_update_flags_08002d98",
                "bVar4": "is_flag_set",
                "calculate_delay_08003568": "calculate_delay",
                "get_data_value_080015a0": "get_data_value",
                "iVar1": "initial_value",
                "iVar2": "current_value",
                "param_1": "flags",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003260": {
            "additional_data": {
                "DAT_08009eb0": {
                    "execution_lookup": 1,
                    "lookup_table": 1
                },
                "DAT_20000018": {
                    "calculated_value": 1,
                    "execution_duration": 1,
                    "execution_time": 1,
                    "execution_time_bits": 1,
                    "execution_time_data": 1,
                    "initialized_data": 2,
                    "output_data": 1,
                    "shifted_execution_time": 1
                },
                "FUN_08003260": {
                    "calculate_execution_time": 15,
                    "calculate_execution_time_and_initialize": 6,
                    "calculate_execution_time_and_initialize_data": 1,
                    "execute_function": 2,
                    "extract_and_initialize_data": 1,
                    "improved_execution_time_check": 1,
                    "update_data_and_calculate_time": 1,
                    "update_data_and_initialize": 1,
                    "update_execution_params": 1,
                    "update_settings": 1
                },
                "_DAT_40021000": {
                    "config_register": 2,
                    "other_flags": 1
                },
                "_DAT_40021004": {
                    "data_config": 2,
                    "data_register": 1,
                    "data_register_2": 1,
                    "data_value": 2,
                    "device_register_2": 1,
                    "memory_flags": 1,
                    "status_register": 1
                },
                "_DAT_40022000": {
                    "control_register": 1,
                    "data_register": 1,
                    "data_register_1": 1,
                    "device_register_1": 1,
                    "execution_config": 1,
                    "execution_flag": 1,
                    "execution_flags": 1,
                    "execution_options": 1,
                    "memory_config": 1
                },
                "calculate_execution_time_08003440": {
                    "calculate_execution_time": 4,
                    "calculate_execution_time_value": 1
                },
                "check_data_and_initialize_0800151c": {
                    "check_and_initialize_data": 1,
                    "check_data_and_initialize": 3,
                    "initialize_data": 2
                },
                "get_data_value_080015a0": {
                    "get_data_value": 6
                },
                "iVar1": {
                    "base_data_value": 1,
                    "data_value1": 6,
                    "data_value_1": 10,
                    "initial_data_value": 5,
                    "initial_value": 2,
                    "prev_value": 1,
                    "value1": 1,
                    "value_1": 2
                },
                "iVar2": {
                    "curr_value": 1,
                    "current_data_value": 6,
                    "current_value": 1,
                    "data_value": 1,
                    "data_value2": 6,
                    "data_value_2": 10,
                    "value2": 1,
                    "value_2": 2
                },
                "param_1": {
                    "array": 1,
                    "config": 2,
                    "configuration": 1,
                    "data": 1,
                    "data_array": 2,
                    "execution_params": 1,
                    "execution_settings": 1,
                    "flags": 9,
                    "function_params": 1,
                    "input_data": 2,
                    "input_flags": 2,
                    "input_parameters": 1,
                    "input_params": 1,
                    "options": 3,
                    "param_array": 1,
                    "parameter_array": 1,
                    "settings": 1
                },
                "param_2": {
                    "data_length": 2,
                    "desired_execution_time": 1,
                    "execution_limit": 3,
                    "execution_time": 10,
                    "input_size": 1,
                    "input_value": 2,
                    "length": 1,
                    "new_settings": 1,
                    "param_size": 1,
                    "param_value": 1,
                    "size": 7,
                    "task_size": 1
                },
                "uVar3": {
                    "calculated_time": 6,
                    "exec_time": 1,
                    "execution_time": 19,
                    "result": 1,
                    "time": 1,
                    "time_value": 1
                },
                "uVar4": {
                    "error_code": 1,
                    "result": 28,
                    "return_value": 1,
                    "status": 1
                }
            },
            "called": [
                "FUN_080015a0",
                "FUN_0800151c",
                "FUN_08003440"
            ],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nundefined4 calculate_execution_time_and_initialize_data_08003260(uint *flags,uint execution_time)\n\n{\n  int data_value_1;\n  int data_value_2;\n  uint execution_time;\n  undefined4 result;\n  \n  if (((_DAT_40022000 & 7) < execution_time) &&\n     (_DAT_40022000 = execution_time | _DAT_40022000 & 0xfffffff8, execution_time != (execution_time & 7))) {\n    result = 1;\n  }\n  else {\n    if ((*flags & 2) != 0) {\n      _DAT_40021004 = flags[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*flags & 1) == 0) {\nLAB_08003394:\n      if ((execution_time < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = execution_time | _DAT_40022000 & 0xfffffff8, execution_time != (execution_time & 7))) {\n        result = 1;\n      }\n      else {\n        if ((*flags & 4) != 0) {\n          _DAT_40021004 = flags[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*flags & 8) != 0) {\n          _DAT_40021004 = flags[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        execution_time = calculate_execution_time();\n        DAT_20000018 = execution_time >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        check_data_and_initialize(0xf);\n        result = 0;\n      }\n    }\n    else {\n      if (flags[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((flags[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = flags[1] | _DAT_40021004 & 0xfffffffc;\n      data_value_1 = get_data_value();\n      if (flags[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          data_value_2 = get_data_value();\n        } while ((uint)(data_value_2 - data_value_1) < 0x1389);\n        result = 3;\n      }\n      else if (flags[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          data_value_2 = get_data_value();\n        } while ((uint)(data_value_2 - data_value_1) < 0x1389);\n        result = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          data_value_2 = get_data_value();\n        } while ((uint)(data_value_2 - data_value_1) < 0x1389);\n        result = 3;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_execution_time_and_initialize_data_08003260",
            "entrypoint": "0x08003260",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003260": "calculate_execution_time_and_initialize_data_08003260",
                "calculate_execution_time_08003440": "calculate_execution_time",
                "check_data_and_initialize_0800151c": "check_data_and_initialize",
                "get_data_value_080015a0": "get_data_value",
                "iVar1": "data_value_1",
                "iVar2": "data_value_2",
                "param_1": "flags",
                "param_2": "execution_time",
                "uVar3": "execution_time",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003440": {
            "additional_data": {
                "FUN_08003440": {
                    "calculate_clock_frequency": 1,
                    "calculate_clock_speed": 2,
                    "calculate_delay": 9,
                    "calculate_execution_time": 14,
                    "calculate_local_time": 2,
                    "calculate_processing_time": 1,
                    "calculate_time_delay": 1,
                    "calculate_timing": 1
                },
                "_DAT_40021004": {
                    "data": 1,
                    "input": 1,
                    "input_register": 1,
                    "register_data": 1,
                    "status": 1
                },
                "local_10": {
                    "clock_frequency": 1,
                    "delay": 3,
                    "delay_result": 2,
                    "execution_time": 9,
                    "final_delay": 2,
                    "final_execution_time": 1,
                    "local_time": 1,
                    "processing_time": 1,
                    "result": 5,
                    "time": 1,
                    "time_delay": 1,
                    "timing_result": 1
                },
                "local_14": {
                    "condition3": 1,
                    "dat_40021004": 4,
                    "data": 7,
                    "data_40021004": 1,
                    "data_address": 1,
                    "data_register": 1,
                    "data_value": 2,
                    "flag": 1,
                    "global_variable": 2,
                    "input": 1,
                    "input_data": 1,
                    "parameter7": 1,
                    "reg_value": 1,
                    "register_value": 1,
                    "some_flag": 1,
                    "system_status": 1,
                    "temp2": 1,
                    "variable1": 1,
                    "variable7": 1
                },
                "local_18": {
                    "calculation2": 1,
                    "condition2": 2,
                    "constant2": 1,
                    "delay_value2": 1,
                    "local_variable_1": 1,
                    "option2": 2,
                    "param_6": 1,
                    "parameter6": 1,
                    "result": 3,
                    "result2": 1,
                    "stack_var6": 1,
                    "temp": 6,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_value": 1,
                    "timing_modifier2": 1,
                    "unused_var": 1,
                    "unused_variable": 1,
                    "value2": 1,
                    "var5": 1,
                    "variable6": 1
                },
                "local_1c": {
                    "byte_value": 1,
                    "calculated_delay": 1,
                    "calculation1": 1,
                    "condition": 1,
                    "condition1": 2,
                    "delay_value": 1,
                    "delay_value1": 1,
                    "execution_time": 1,
                    "multiplier": 2,
                    "offset": 2,
                    "option1": 2,
                    "parameter5": 1,
                    "result": 7,
                    "result1": 1,
                    "stack_var5": 1,
                    "time": 1,
                    "timing_modifier1": 1,
                    "value1": 1,
                    "variable1": 1,
                    "variable5": 1
                },
                "local_2c": {
                    "config": 1,
                    "constant1": 8,
                    "constant_1": 1,
                    "constant_offset": 1,
                    "constant_value1": 1,
                    "default_constant": 1,
                    "default_value": 1,
                    "initial_value": 1,
                    "mask1": 1,
                    "param_1": 1,
                    "parameter1": 1,
                    "some_value2": 1,
                    "stack_var1": 1,
                    "value1": 6,
                    "value5": 1,
                    "var1": 2,
                    "variable1": 1
                },
                "local_30": {
                    "base_address": 1,
                    "config_value": 3,
                    "constant": 1,
                    "constant1": 1,
                    "constants": 1,
                    "counter": 1,
                    "delay_multiplier": 5,
                    "execution_time": 2,
                    "flag": 1,
                    "flag1": 1,
                    "flags": 1,
                    "header_value": 1,
                    "milliseconds": 1,
                    "num_iterations": 1,
                    "num_threads": 1,
                    "param_5": 1,
                    "some_value1": 1,
                    "step_size": 1,
                    "time_multiplier": 1,
                    "time_offset": 2,
                    "timeout_value": 1,
                    "value4": 1
                },
                "local_c": {
                    "calc_value": 1,
                    "calculated_time": 1,
                    "calculated_value": 1,
                    "calculation": 1,
                    "calculation3": 1,
                    "calculation_result": 3,
                    "delay": 1,
                    "execution_time": 2,
                    "execution_time_result": 1,
                    "multiplier": 2,
                    "product": 1,
                    "temp": 1,
                    "temp1": 4,
                    "temp2": 1,
                    "temp_delay": 1,
                    "temp_result": 2,
                    "temp_value": 1,
                    "temp_variable": 2,
                    "time_multiplier": 1,
                    "variable2": 2
                },
                "uStack_20": {
                    "constant3": 1,
                    "constant4": 8,
                    "constant_4": 1,
                    "constant_value4": 1,
                    "mask4": 1,
                    "param_4": 1,
                    "parameter4": 1,
                    "some_value5": 1,
                    "stack_value3": 1,
                    "stack_var4": 1,
                    "value3": 4,
                    "value4": 6,
                    "var4": 2,
                    "variable4": 1
                },
                "uStack_24": {
                    "constant2": 1,
                    "constant3": 8,
                    "constant_3": 1,
                    "constant_value3": 1,
                    "mask3": 1,
                    "param_3": 1,
                    "parameter3": 1,
                    "some_value4": 1,
                    "stack_value2": 1,
                    "stack_var3": 1,
                    "value2": 4,
                    "value3": 6,
                    "var3": 2,
                    "variable3": 1
                },
                "uStack_28": {
                    "constant1": 1,
                    "constant2": 8,
                    "constant_2": 1,
                    "constant_value2": 1,
                    "mask2": 1,
                    "param_2": 1,
                    "parameter2": 1,
                    "some_value3": 1,
                    "stack_value1": 1,
                    "stack_var2": 1,
                    "value1": 4,
                    "value2": 6,
                    "var2": 2,
                    "variable2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003260"
            ],
            "code": "\n\n\nuint calculate_execution_time_08003440(void)\n\n{\n  undefined2 delay_multiplier;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  uint result;\n  undefined4 temp;\n  uint data;\n  uint execution_time;\n  uint temp1;\n  \n  constant1 = 0x5040302;\n  constant2 = 0x9080706;\n  constant3 = 0xd0c0b0a;\n  constant4 = 0x10100f0e;\n  delay_multiplier = 0x201;\n  temp = 0;\n  temp1 = 0;\n  result = 0;\n  execution_time = 0;\n  data = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    execution_time = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = (uint)*(byte *)((int)&constant1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      temp1 = result * 4000000;\n    }\n    else {\n      temp1 = (result * 8000000) / (uint)*(byte *)((int)&delay_multiplier + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    execution_time = temp1;\n  }\n  else {\n    execution_time = 8000000;\n  }\n  return execution_time;\n}\n\n",
            "current_name": "calculate_execution_time_08003440",
            "entrypoint": "0x08003440",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003440": "calculate_execution_time_08003440",
                "local_10": "execution_time",
                "local_14": "data",
                "local_18": "temp",
                "local_1c": "result",
                "local_2c": "constant1",
                "local_30": "delay_multiplier",
                "local_c": "temp1",
                "uStack_20": "constant4",
                "uStack_24": "constant3",
                "uStack_28": "constant2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003504": {
            "additional_data": {
                "DAT_20000018": {
                    "data": 10,
                    "data_address": 1,
                    "data_element": 1,
                    "data_value": 3,
                    "global_value": 3,
                    "global_variable": 2,
                    "global_variable_value": 1,
                    "result": 1
                },
                "FUN_08003504": {
                    "get_dat_value": 1,
                    "get_data": 13,
                    "get_data_20000018": 1,
                    "get_data_address": 2,
                    "get_data_element": 1,
                    "get_data_from_address": 1,
                    "get_data_value": 6,
                    "get_global_value": 3,
                    "get_global_variable": 2,
                    "get_global_variable_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080052a0",
                "FUN_08003540",
                "FUN_08003518"
            ],
            "code": "\nundefined4 get_data_value_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "current_name": "get_data_value_08003504",
            "entrypoint": "0x08003504",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003504": "get_data_value_08003504"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003518": {
            "additional_data": {
                "DAT_08009ec0": {
                    "data_offset": 1
                },
                "FUN_08003518": {
                    "bit_shift_function": 1,
                    "calculate_shifted_data_value": 1,
                    "extract_and_shift_data": 1,
                    "extract_data_and_shift": 1,
                    "extract_data_value": 1,
                    "extracted_data_shift": 4,
                    "extracted_data_shifted": 2,
                    "get_shifted_data": 1,
                    "get_shifted_data_value": 12,
                    "get_shifted_value": 2,
                    "shift_data_value": 5
                },
                "_DAT_40021004": {
                    "data_index": 1,
                    "data_offset": 3,
                    "data_value": 1,
                    "input_data": 1,
                    "input_value": 1,
                    "shift_amount": 2,
                    "shift_value": 4
                },
                "get_data_value_08003504": {
                    "extract_data_value": 1,
                    "get_data_value": 8
                },
                "sbyte": {
                    "byte_value": 1,
                    "shift_amount": 5,
                    "shift_value": 5,
                    "signed_byte": 3
                },
                "sbytePathParam": {
                    "shift_param": 1
                },
                "sbyte_08009ec0": {
                    "shift_amount": 1,
                    "shift_value": 2
                },
                "uVar1": {
                    "data_value": 28,
                    "extracted_value": 1
                }
            },
            "called": [
                "FUN_08003504"
            ],
            "calling": [
                "FUN_080046ec",
                "FUN_08001ab0"
            ],
            "code": "\n\n\nuint get_shifted_data_value_08003518(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value();\n  return data_value >> *(shift_amount *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "current_name": "get_shifted_data_value_08003518",
            "entrypoint": "0x08003518",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003518": "get_shifted_data_value_08003518",
                "get_data_value_08003504": "get_data_value",
                "sbyte": "shift_amount",
                "uVar1": "data_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003540": {
            "additional_data": {
                "7": {
                    "bit_mask": 1
                },
                "DAT_08009ec0": {
                    "data_address": 1,
                    "data_array": 1,
                    "data_block": 1,
                    "data_table": 2,
                    "lookup_table": 2,
                    "shift_table": 2
                },
                "FUN_08003540": {
                    "extract_and_shift_data": 1,
                    "extracted_data_shift": 1,
                    "extracted_data_value": 1,
                    "extracted_data_value_shifted": 1,
                    "get_shifted_data_value": 14,
                    "get_shifted_value": 2,
                    "reverse_data_shift": 1,
                    "shift_and_get_data_value": 1,
                    "shift_and_return_data_value": 1,
                    "shift_data_value": 7,
                    "shifted_data_value": 1
                },
                "_DAT_40021004": {
                    "constant_value": 1,
                    "data_value": 1,
                    "input_data": 2,
                    "input_value": 2,
                    "shift_amount": 3,
                    "shift_value": 7,
                    "shifted_data": 1,
                    "shifted_value": 1
                },
                "get_data_value_08003504": {
                    "fetch_data_value": 2,
                    "get_data_value": 11
                },
                "sbyte": {
                    "byte_shift_amount": 1,
                    "shift_amount": 6,
                    "shift_offset": 1,
                    "shift_value": 5,
                    "signed_byte": 3
                },
                "sbyte_08009ec0": {
                    "data_offset": 1,
                    "shift_amount": 1
                },
                "sbyte_ptr": {
                    "shift_value": 1
                },
                "sbyte_value": {
                    "shift_value": 1
                },
                "uVar1": {
                    "data": 1,
                    "data_value": 30
                }
            },
            "called": [
                "FUN_08003504"
            ],
            "calling": [
                "FUN_080046ec"
            ],
            "code": "\n\n\nuint get_shifted_data_value_08003540(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value();\n  return data_value >> *(shift_amount *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "current_name": "get_shifted_data_value_08003540",
            "entrypoint": "0x08003540",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003540": "get_shifted_data_value_08003540",
                "get_data_value_08003504": "get_data_value",
                "sbyte": "shift_amount",
                "uVar1": "data_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003568": {
            "additional_data": {
                "FUN_08003568": {
                    "calculate_cycles": 2,
                    "calculate_delay": 11,
                    "calculate_iterations": 9,
                    "calculate_param_cycles": 1,
                    "calculate_total_iterations": 1,
                    "count_down": 1,
                    "count_iterations": 1,
                    "delay": 1,
                    "delay_function": 2,
                    "process_data": 1
                },
                "F_UNDECODED_FUNCTION": {
                    "convert_to_samples": 1
                },
                "bVar1": {
                    "continue_loop": 2,
                    "has_iterations": 2,
                    "has_remaining_samples": 1,
                    "is_cycles_remaining": 1,
                    "is_greater_than_or_equal_zero": 1,
                    "is_greater_than_zero": 1,
                    "is_non_zero": 1,
                    "is_not_zero": 2
                },
                "local_c": {
                    "adjusted_iterations": 1,
                    "adjusted_value": 3,
                    "calculated_iterations": 1,
                    "cycles": 1,
                    "decrement_value": 1,
                    "delay": 3,
                    "delay_count": 5,
                    "delay_counter": 2,
                    "iteration_count": 4,
                    "iterations": 1,
                    "multiplied_value": 1,
                    "num_cycles": 1,
                    "remaining_cycles": 1,
                    "result": 4,
                    "sample_count": 1,
                    "total_iterations": 1
                },
                "param_1": {
                    "delay_amount": 1,
                    "input": 7,
                    "input_param": 3,
                    "input_value": 18,
                    "milliseconds": 1,
                    "num_iterations": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002d98"
            ],
            "code": "\nvoid calculate_delay_08003568(int input_value)\n\n{\n  bool has_iterations;\n  int delay_count;\n  \n  delay_count = input_value * (DAT_20000018 / 8000);\n  do {\n    has_iterations = delay_count != 0;\n    delay_count = delay_count + -1;\n  } while (has_iterations);\n  return;\n}\n\n",
            "current_name": "calculate_delay_08003568",
            "entrypoint": "0x08003568",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003568": "calculate_delay_08003568",
                "bVar1": "has_iterations",
                "local_c": "delay_count",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035a4": {
            "additional_data": {
                "FUNC_080035fa": {
                    "perform_additional_checks": 1,
                    "process_input": 2,
                    "process_memory": 2,
                    "update_memory": 1
                },
                "FUN_080035a4": {
                    "check_and_update": 1,
                    "check_and_update_data": 2,
                    "check_and_update_memory": 10,
                    "check_and_update_memory_values": 2,
                    "check_and_update_status": 1,
                    "check_and_update_value": 1,
                    "handle_input": 1,
                    "process_data": 2,
                    "update_and_check_status": 1,
                    "update_data": 1,
                    "update_flags": 1,
                    "update_memory": 2,
                    "update_memory_and_values": 1,
                    "update_memory_status": 2,
                    "update_memory_values": 1,
                    "validate_and_update": 2
                },
                "param_1": {
                    "data": 4,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input_array": 4,
                    "input_data": 2,
                    "input_list": 1,
                    "input_pointer": 2,
                    "input_ptr": 1,
                    "memory": 1,
                    "memory_array": 1,
                    "memory_block": 3,
                    "memory_pointer": 2,
                    "memory_ptr": 2,
                    "memory_status_ptr": 1,
                    "memory_values": 2,
                    "param_pointer": 1,
                    "ptr": 1,
                    "status": 1
                },
                "uVar1": {
                    "result": 12,
                    "return_value": 16,
                    "status": 3
                },
                "update_memory_values_08003c94": {
                    "update_memory": 1,
                    "update_memory_values": 5
                }
            },
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 check_and_update_memory_values_080035a4(undefined4 *input_array)\n\n{\n  undefined4 return_value;\n  \n  if (input_array == (undefined4 *)0x0) {\n    return_value = 1;\n  }\n  else {\n    if (*(char *)((int)input_array + 0x3d) == '\\0') {\n      *(undefined *)(input_array + 0xf) = 0;\n      FUNC_080035fa(input_array);\n    }\n    *(undefined *)((int)input_array + 0x3d) = 2;\n    update_memory_values(*input_array,input_array + 1);\n    *(undefined *)((int)input_array + 0x3d) = 1;\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "check_and_update_memory_values_080035a4",
            "entrypoint": "0x080035a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080035a4": "check_and_update_memory_values_080035a4",
                "param_1": "input_array",
                "uVar1": "return_value",
                "update_memory_values_08003c94": "update_memory_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035fa": {
            "called": [],
            "calling": [
                "FUN_080035a4"
            ],
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080035fa",
            "entrypoint": "0x080035fa",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800360c": {
            "additional_data": {
                "1": {
                    "bit_mask": 1,
                    "flag": 1
                },
                "FUN_0800360c": {
                    "set_bit": 4,
                    "set_bit_and_flag": 1,
                    "set_bit_and_return_zero": 3,
                    "set_bit_and_update_pointers": 1,
                    "set_bit_flags": 1,
                    "set_bit_in_array": 2,
                    "set_bit_one": 1,
                    "set_bits_to_one": 1,
                    "set_bitwise_or": 2,
                    "set_bitwise_or_flag": 1,
                    "set_bitwise_or_on_third_element": 1,
                    "set_flag": 1,
                    "set_flag_and_value": 1,
                    "set_flags": 6,
                    "set_flags_and_values": 3,
                    "set_flags_in_array": 1,
                    "update_flags": 1
                },
                "data": {
                    "data": 2
                },
                "flag": {
                    "flag": 1
                },
                "original_variable_name_1": {
                    "flag1": 1
                },
                "original_variable_name_2": {
                    "flag2": 1
                },
                "param_1": {
                    "arr": 1,
                    "array": 5,
                    "array_pointer": 3,
                    "array_ptr": 2,
                    "bit_array": 1,
                    "bits": 1,
                    "data": 3,
                    "flag_ptr": 1,
                    "flags": 1,
                    "flags_ptr": 1,
                    "input_array": 2,
                    "num_ptr": 1,
                    "p_pointer": 1,
                    "param": 1,
                    "param_list": 1,
                    "params": 1,
                    "pointer": 2,
                    "pointers": 1,
                    "ptr_to_uint_ptr": 1
                },
                "value": {
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nundefined4 set_flags_and_values_0800360c(uint **array)\n\n{\n  (*array)[3] = (*array)[3] | 1;\n  **array = **array | 1;\n  return 0;\n}\n\n",
            "current_name": "set_flags_and_values_0800360c",
            "entrypoint": "0x0800360c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800360c": "set_flags_and_values_0800360c",
                "param_1": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003640": {
            "additional_data": {
                "0": {
                    "memory_not_updated": 1
                },
                "0x0": {
                    "null": 1
                },
                "0x3d": {
                    "memory_status_offset": 1
                },
                "1": {
                    "memory_updated": 1
                },
                "DAT_08003d00": {
                    "flag": 1
                },
                "FUNC_08003696": {
                    "execute_action": 1,
                    "initialize": 1,
                    "initialize_memory": 1,
                    "initialize_memory_values": 1,
                    "process_data": 1,
                    "process_input": 1,
                    "process_memory": 2,
                    "process_param": 1,
                    "update_memory": 2
                },
                "FUN_08003640": {
                    "check_and_update_memory": 6,
                    "check_and_update_memory_values": 1,
                    "check_and_update_param": 2,
                    "initialize_data": 1,
                    "initialize_memory": 3,
                    "process_data": 2,
                    "update_memory": 2,
                    "update_memory_status": 3,
                    "update_memory_values": 7,
                    "update_status": 1,
                    "update_values": 1,
                    "validate_input": 1,
                    "validate_param": 1
                },
                "PTR_08003c94": {
                    "memory_values": 1
                },
                "dll_flag": {
                    "is_dll": 1
                },
                "param_1": {
                    "data": 2,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "input": 3,
                    "input_array": 2,
                    "input_data": 1,
                    "memory": 2,
                    "memory_block": 3,
                    "memory_info": 1,
                    "memory_pointer": 2,
                    "memory_ptr": 3,
                    "memory_status": 2,
                    "param": 3,
                    "parameter": 1,
                    "ptr": 1,
                    "status": 1,
                    "status_ptr": 1
                },
                "uVar1": {
                    "is_success": 1,
                    "result": 18,
                    "return_value": 11,
                    "status": 1
                },
                "update_memory_values_08003c94": {
                    "update_memory_values": 10
                }
            },
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 check_and_update_memory_values_08003640(undefined4 *input)\n\n{\n  undefined4 result;\n  \n  if (input == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)input + 0x3d) == '\\0') {\n      *(undefined *)(input + 0xf) = 0;\n      FUNC_08003696(input);\n    }\n    *(undefined *)((int)input + 0x3d) = 2;\n    update_memory_values(*input,input + 1);\n    *(undefined *)((int)input + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "check_and_update_memory_values_08003640",
            "entrypoint": "0x08003640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003640": "check_and_update_memory_values_08003640",
                "param_1": "input",
                "uVar1": "result",
                "update_memory_values_08003c94": "update_memory_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003696": {
            "called": [],
            "calling": [
                "FUN_08003640"
            ],
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003696",
            "entrypoint": "0x08003696",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080036a8": {
            "additional_data": {
                "0x11": {
                    "bit_index": 2,
                    "flag_offset": 1,
                    "index": 6
                },
                "0x40012c00": {
                    "constant": 1,
                    "flag_address": 1,
                    "magic_number": 1,
                    "magic_value": 2,
                    "special_value": 1,
                    "target_address": 4
                },
                "0x8000": {
                    "bit_15": 1,
                    "bit_mask": 2,
                    "flag_bit": 1,
                    "flag_mask": 1,
                    "mask": 2
                },
                "1": {
                    "bit_0": 1,
                    "bit_mask": 2,
                    "bit_to_set": 1,
                    "update_flag": 1
                },
                "DAT_080041ea": {
                    "bit_mask": 1,
                    "bit_position": 1
                },
                "DAT_0x11": {
                    "flag_offset": 1
                },
                "FUN_080036a8": {
                    "set_bit_and_update": 1,
                    "set_bit_and_update_value": 2,
                    "update_and_set_bit": 5,
                    "update_and_set_bit_in_value": 1,
                    "update_and_set_bits": 1,
                    "update_and_set_flag": 3,
                    "update_and_set_flags": 8,
                    "update_bit_and_flags": 1,
                    "update_bit_and_set_flag": 1,
                    "update_bit_and_values": 1,
                    "update_bit_in_value": 1,
                    "update_flags": 1,
                    "update_value_and_check_flag": 1,
                    "update_value_and_flags": 1,
                    "update_value_and_set_bit": 2,
                    "update_value_with_flag": 1
                },
                "PTR_0x40012c00": {
                    "target_address": 1
                },
                "PTR_DAT_40012c00": {
                    "some_value": 1
                },
                "PTR_FUN_080041ea": {
                    "update_bit_in_value": 1
                },
                "bitToUpdate": {
                    "bit": 1
                },
                "new_variable_name_1": {
                    "temp": 1
                },
                "param_1": {
                    "bit_array": 1,
                    "data": 5,
                    "data_pointer": 3,
                    "data_ptr": 3,
                    "input_data": 1,
                    "input_value": 1,
                    "pointer": 1,
                    "value": 6,
                    "value_address": 1,
                    "value_pointer": 1,
                    "value_ptr": 5,
                    "values": 2
                },
                "param_1_0": {
                    "value": 1
                },
                "param_1_update": {
                    "flag_set": 1
                },
                "param_2": {
                    "bit": 2,
                    "bit_mask": 1,
                    "bit_position": 9,
                    "bit_to_update": 2,
                    "bit_value": 3,
                    "flag": 4,
                    "flag_value": 1,
                    "value": 9
                },
                "param_2_update": {
                    "bit_value": 1
                },
                "param_3": {
                    "value": 1
                },
                "someValue": {
                    "magic_value": 1
                },
                "temp1": {
                    "value_to_modify": 1
                },
                "update_bit_in_value_080041ea": {
                    "update_bit": 1,
                    "update_bit_in_value": 3
                },
                "updated_flag": {
                    "flag_check": 1
                },
                "updated_value": {
                    "updated_data": 1
                },
                "value": {
                    "value": 1,
                    "value_content": 1
                },
                "valueAddress": {
                    "value": 1
                },
                "valuePointer": {
                    "value": 1
                },
                "valuePtr": {
                    "value_ptr": 1
                },
                "valuePtr_11": {
                    "value_ptr_index11": 1
                }
            },
            "called": [
                "FUN_080041ea"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nundefined4 update_and_set_bit_in_value_080036a8(uint **value,undefined4 bit_position)\n\n{\n  update_bit_in_value(*value,bit_position,1);\n  if (*value == (uint *)0x40012c00) {\n    (*value)[0x11] = (*value)[0x11] | 0x8000;\n  }\n  **value = **value | 1;\n  return 0;\n}\n\n",
            "current_name": "update_and_set_bit_in_value_080036a8",
            "entrypoint": "0x080036a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036a8": "update_and_set_bit_in_value_080036a8",
                "param_1": "value",
                "param_2": "bit_position",
                "update_bit_in_value_080041ea": "update_bit_in_value",
                "value": "value_content"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036f8": {
            "additional_data": {
                "0x10": {
                    "flag1": 1
                },
                "0x18": {
                    "flag3": 1
                },
                "0x1c": {
                    "flag4": 1
                },
                "0x300": {
                    "mask": 1
                },
                "0xc": {
                    "flag2": 1
                },
                "0xffffff7f": {
                    "error_flag6": 1
                },
                "0xffffffbf": {
                    "error_flag7": 1
                },
                "0xffffffdf": {
                    "error_flag8": 1
                },
                "0xffffffef": {
                    "error_flag4": 1
                },
                "0xfffffff7": {
                    "error_flag3": 1
                },
                "0xfffffffb": {
                    "error_flag2": 1
                },
                "0xfffffffd": {
                    "error_flag1": 1
                },
                "0xfffffffe": {
                    "error_flag5": 1
                },
                "FUNC_08003c4a": {
                    "action_one": 1,
                    "execute_function_a": 1,
                    "function1": 1,
                    "function_a": 3,
                    "handle_case_one": 1,
                    "perform_action1": 2,
                    "perform_action_a": 2,
                    "perform_operation1": 2,
                    "perform_operation_1": 1,
                    "perform_operation_a": 3,
                    "perform_task_a": 1,
                    "process_a": 2,
                    "process_function_a": 1,
                    "process_option_1": 1,
                    "validate_data": 1
                },
                "FUNC_08003c5c": {
                    "action_three": 1,
                    "execute_function_b": 1,
                    "function3": 1,
                    "function_b": 3,
                    "handle_case_three": 1,
                    "perform_action3": 1,
                    "perform_action_b": 1,
                    "perform_action_c": 1,
                    "perform_alternative_action": 1,
                    "perform_operation2": 2,
                    "perform_operation_3": 1,
                    "perform_operation_c": 3,
                    "perform_task_b": 1,
                    "process_c": 2,
                    "process_data_b": 1,
                    "process_function_c": 1,
                    "process_option_3": 1
                },
                "FUNC_08003c6e": {
                    "action_two": 1,
                    "execute_function_c": 1,
                    "function2": 1,
                    "function_c": 3,
                    "handle_case_two": 1,
                    "perform_action2": 2,
                    "perform_action_b": 1,
                    "perform_action_c": 1,
                    "perform_operation3": 2,
                    "perform_operation_2": 1,
                    "perform_operation_b": 3,
                    "perform_task_c": 1,
                    "process_b": 2,
                    "process_data_a": 1,
                    "process_function_b": 1,
                    "process_option_2": 1
                },
                "FUNC_08003c80": {
                    "action_four": 1,
                    "do_something": 1,
                    "do_task_2": 1,
                    "execute_function_b": 2,
                    "execute_function_d": 1,
                    "func_b": 1,
                    "func_with_forty_allocation": 1,
                    "function4": 1,
                    "function_d": 3,
                    "function_e": 1,
                    "perform_action5": 1,
                    "perform_action_e": 2,
                    "perform_operation4": 1,
                    "perform_operation5": 1,
                    "perform_operation_d": 1,
                    "perform_task_d": 1,
                    "process_data_b": 2,
                    "process_data_c": 1,
                    "process_data_variant1": 1,
                    "process_e": 2,
                    "process_option_4": 1
                },
                "FUNC_08004366": {
                    "action_five": 1,
                    "do_task_3": 1,
                    "execute_function_c": 2,
                    "execute_function_e": 1,
                    "extract_and_process_data": 1,
                    "func_c": 1,
                    "func_with_twenty_allocation": 1,
                    "function5": 1,
                    "function_e": 3,
                    "function_f": 1,
                    "perform_action6": 1,
                    "perform_action_f": 2,
                    "perform_operation5": 1,
                    "perform_operation6": 1,
                    "perform_operation_d": 1,
                    "perform_operation_e": 1,
                    "perform_task_e": 1,
                    "process_data_c": 1,
                    "process_f": 2,
                    "process_option_5": 1,
                    "reverse_data_a": 1,
                    "reverse_something": 1
                },
                "FUNC_08004378": {
                    "action_six": 1,
                    "do_task_1": 1,
                    "execute_function_a": 2,
                    "execute_function_f": 1,
                    "func_a": 1,
                    "func_with_eighty_allocation": 1,
                    "function6": 1,
                    "function_d": 1,
                    "function_f": 3,
                    "perform_action4": 1,
                    "perform_action_d": 2,
                    "perform_operation4": 1,
                    "perform_operation6": 1,
                    "perform_operation_f": 1,
                    "perform_task_f": 1,
                    "process_d": 2,
                    "process_data": 1,
                    "process_data_a": 1,
                    "process_data_func": 1,
                    "process_data_variant2": 1,
                    "reverse_data": 2
                },
                "FUNC_08004f78": {
                    "extract_data": 1,
                    "extract_process_and_store_data": 5,
                    "extract_process_store_data": 2
                },
                "FUN_080036f8": {
                    "process_data": 24,
                    "process_flags": 1,
                    "process_param": 2,
                    "process_parameters": 2,
                    "process_params": 1
                },
                "FUN_08003c4a": {
                    "execute_method_a": 1
                },
                "FUN_08003c5c": {
                    "execute_method_c": 1
                },
                "FUN_08003c6e": {
                    "execute_method_b": 1
                },
                "extract_process_and_store_data_08004f78": {
                    "extract_and_store_data": 3,
                    "extract_data": 2,
                    "extract_process_and_store_data": 6,
                    "extract_process_data": 1,
                    "extract_process_store_data": 5,
                    "process_and_store_data": 2
                },
                "func_08003c4a": {
                    "perform_operation_1": 1
                },
                "func_08003c5c": {
                    "perform_operation_2": 1
                },
                "func_08003c6e": {
                    "perform_operation_3": 1
                },
                "param_1": {
                    "data": 17,
                    "data_ptr": 5,
                    "flags": 1,
                    "input_array": 1,
                    "input_data": 1,
                    "input_ptr": 1,
                    "param": 2,
                    "parameters": 1,
                    "params": 1
                },
                "param_1_0": {
                    "data_ptr": 1
                },
                "param_1_0_10": {
                    "data_flag_1": 1
                },
                "param_1_0_18": {
                    "data_flag_3": 1
                },
                "param_1_0_1c": {
                    "data_flag_4": 1
                },
                "param_1_0_c": {
                    "data_flag_2": 1
                },
                "param_1_7": {
                    "flag_ptr": 1
                },
                "param_1_7_0": {
                    "flag": 1
                },
                "uint": {
                    "unsigned_int": 1
                },
                "undefined": {
                    "void": 1
                },
                "undefined4": {
                    "unsigned_int32": 1
                }
            },
            "called": [
                "FUN_08004f78",
                "FUN_08004366",
                "FUN_08003c4a",
                "FUN_08003c80",
                "FUN_08003c6e",
                "FUN_08003c5c",
                "FUN_08004378"
            ],
            "calling": [
                "FUN_08005714"
            ],
            "code": "\nvoid process_data_080036f8(int *data)\n\n{\n  if (((*(unsigned_int *)(*data + 0x10) & 2) == 2) && ((*(unsigned_int *)(*data + 0xc) & 2) == 2)) {\n    *(unsigned_int32 *)(*data + 0x10) = 0xfffffffd;\n    *(void *)(data + 7) = 1;\n    if ((*(unsigned_int *)(*data + 0x18) & 3) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(void *)(data + 7) = 0;\n  }\n  if (((*(unsigned_int *)(*data + 0x10) & 4) == 4) && ((*(unsigned_int *)(*data + 0xc) & 4) == 4)) {\n    *(unsigned_int32 *)(*data + 0x10) = 0xfffffffb;\n    *(void *)(data + 7) = 2;\n    if ((*(unsigned_int *)(*data + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(void *)(data + 7) = 0;\n  }\n  if (((*(unsigned_int *)(*data + 0x10) & 8) == 8) && ((*(unsigned_int *)(*data + 0xc) & 8) == 8)) {\n    *(unsigned_int32 *)(*data + 0x10) = 0xfffffff7;\n    *(void *)(data + 7) = 4;\n    if ((*(unsigned_int *)(*data + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(void *)(data + 7) = 0;\n  }\n  if (((*(unsigned_int *)(*data + 0x10) & 0x10) == 0x10) && ((*(unsigned_int *)(*data + 0xc) & 0x10) == 0x10))\n  {\n    *(unsigned_int32 *)(*data + 0x10) = 0xffffffef;\n    *(void *)(data + 7) = 8;\n    if ((*(unsigned_int *)(*data + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(void *)(data + 7) = 0;\n  }\n  if (((*(unsigned_int *)(*data + 0x10) & 1) == 1) && ((*(unsigned_int *)(*data + 0xc) & 1) == 1)) {\n    *(unsigned_int32 *)(*data + 0x10) = 0xfffffffe;\n    extract_process_and_store_data(data);\n  }\n  if (((*(unsigned_int *)(*data + 0x10) & 0x80) == 0x80) && ((*(unsigned_int *)(*data + 0xc) & 0x80) == 0x80))\n  {\n    *(unsigned_int32 *)(*data + 0x10) = 0xffffff7f;\n    FUNC_08004378(data);\n  }\n  if (((*(unsigned_int *)(*data + 0x10) & 0x40) == 0x40) && ((*(unsigned_int *)(*data + 0xc) & 0x40) == 0x40))\n  {\n    *(unsigned_int32 *)(*data + 0x10) = 0xffffffbf;\n    FUNC_08003c80(data);\n  }\n  if (((*(unsigned_int *)(*data + 0x10) & 0x20) == 0x20) && ((*(unsigned_int *)(*data + 0xc) & 0x20) == 0x20))\n  {\n    *(unsigned_int32 *)(*data + 0x10) = 0xffffffdf;\n    FUNC_08004366(data);\n  }\n  return;\n}\n\n",
            "current_name": "process_data_080036f8",
            "entrypoint": "0x080036f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036f8": "process_data_080036f8",
                "extract_process_and_store_data_08004f78": "extract_process_and_store_data",
                "param_1": "data",
                "uint": "unsigned_int",
                "undefined": "void",
                "undefined4": "unsigned_int32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003908": {
            "additional_data": {
                "FUN_08003908": {
                    "update_and_set_data": 1,
                    "update_data": 14,
                    "update_data_and_flags": 1,
                    "update_flag_and_data": 1,
                    "update_flags": 1,
                    "update_function_and_device_data": 1,
                    "update_function_data": 4,
                    "update_function_flags": 1,
                    "update_function_status": 3,
                    "update_param_data": 1,
                    "update_parameter": 1,
                    "update_permissions": 1,
                    "update_status": 1
                },
                "d_value": {
                    "d_value": 1
                },
                "f_value": {
                    "f_value": 1
                },
                "param_1": {
                    "array": 1,
                    "data": 8,
                    "data_array": 3,
                    "data_pointer": 3,
                    "data_ptr": 9,
                    "device_status": 1,
                    "function_data_ptr": 1,
                    "function_pointer": 1,
                    "function_ptr": 2,
                    "function_status": 1,
                    "status": 1
                },
                "param_2": {
                    "data": 3,
                    "data_ptr": 2,
                    "data_value": 2,
                    "device_data": 3,
                    "param": 5,
                    "param2": 2,
                    "param_value": 4,
                    "size": 2,
                    "value": 8
                },
                "param_3": {
                    "action": 5,
                    "case_value": 2,
                    "data_type": 1,
                    "flag": 1,
                    "operation": 4,
                    "operation_type": 2,
                    "option": 3,
                    "param3": 1,
                    "param_type": 2,
                    "selection": 1,
                    "state": 1,
                    "switch_case": 1,
                    "type": 5,
                    "update_type": 2
                },
                "uVar1": {
                    "result": 22,
                    "result_status": 1,
                    "result_val": 1,
                    "return_value": 5,
                    "status": 2
                },
                "update_data_structure_08003ff8": {
                    "update_data_structure": 7,
                    "update_data_structure_handler": 1
                },
                "update_device_data_08003e38": {
                    "update_data_in_device": 1,
                    "update_device_data": 6,
                    "update_device_data_handler": 1
                },
                "update_function_data_08003d60": {
                    "update_data_in_function": 1,
                    "update_function_data": 6,
                    "update_function_data_handler": 1
                },
                "update_memory_and_data_08003f18": {
                    "update_memory_and_data": 7,
                    "update_memory_and_data_handler": 1
                }
            },
            "called": [
                "FUN_08003f18",
                "FUN_08003e38",
                "FUN_08003d60",
                "FUN_08003ff8"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 update_function_and_device_data_08003908(int *data_ptr,int value,undefined4 type)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(data_ptr + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(data_ptr + 0xf) = 1;\n    *(undefined *)((int)data_ptr + 0x3d) = 2;\n    switch(type) {\n    case 0:\n      update_function_data(*data_ptr,value);\n      *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) | 8;\n      *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) & 0xfffffffb;\n      *(uint *)(*data_ptr + 0x18) = *(uint *)(value + 0x10) | *(uint *)(*data_ptr + 0x18);\n      break;\n    case 4:\n      update_device_data(*data_ptr,value);\n      *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) | 0x800;\n      *(uint *)(*data_ptr + 0x18) = *(uint *)(*data_ptr + 0x18) & 0xfffffbff;\n      *(uint *)(*data_ptr + 0x18) = *(int *)(value + 0x10) << 8 | *(uint *)(*data_ptr + 0x18);\n      break;\n    case 8:\n      update_memory_and_data(*data_ptr,value);\n      *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) | 8;\n      *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) & 0xfffffffb;\n      *(uint *)(*data_ptr + 0x1c) = *(uint *)(value + 0x10) | *(uint *)(*data_ptr + 0x1c);\n      break;\n    case 0xc:\n      update_data_structure(*data_ptr,value);\n      *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) | 0x800;\n      *(uint *)(*data_ptr + 0x1c) = *(uint *)(*data_ptr + 0x1c) & 0xfffffbff;\n      *(uint *)(*data_ptr + 0x1c) = *(int *)(value + 0x10) << 8 | *(uint *)(*data_ptr + 0x1c);\n    }\n    *(undefined *)((int)data_ptr + 0x3d) = 1;\n    *(undefined *)(data_ptr + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_function_and_device_data_08003908",
            "entrypoint": "0x08003908",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003908": "update_function_and_device_data_08003908",
                "param_1": "data_ptr",
                "param_2": "value",
                "param_3": "type",
                "uVar1": "result",
                "update_data_structure_08003ff8": "update_data_structure",
                "update_device_data_08003e38": "update_device_data",
                "update_function_data_08003d60": "update_function_data",
                "update_memory_and_data_08003f18": "update_memory_and_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a94": {
            "additional_data": {
                "FUN_08003a94": {
                    "process_data": 3,
                    "process_input": 2,
                    "process_parameters": 2,
                    "update_flags_and_values": 2,
                    "update_function": 1,
                    "update_function_behavior": 1,
                    "update_function_parameters": 2,
                    "update_memory_value": 2,
                    "update_memory_values": 1,
                    "update_parameter_and_value": 1,
                    "update_parameter_value": 2,
                    "update_parameters": 1,
                    "update_params_and_values": 1,
                    "update_state": 1,
                    "update_status_and_value": 1,
                    "update_value_and_parameters": 2,
                    "update_value_in_memory": 1,
                    "update_value_status": 1,
                    "update_values": 2,
                    "update_values_in_memory": 2
                },
                "_param1_a": {
                    "update_addr": 1
                },
                "_param1_f": {
                    "is_flag_set": 1
                },
                "_param1_r": {
                    "reset_flag": 1
                },
                "_param1_s": {
                    "set_flag": 1
                },
                "_param2_p": {
                    "param1_v2": 1
                },
                "_param2_pv": {
                    "param1_v3": 1
                },
                "_param2_pv2": {
                    "param1_v4": 1
                },
                "_param2_v": {
                    "value": 1
                },
                "param_1": {
                    "array_ptr": 1,
                    "data": 1,
                    "data_array": 1,
                    "data_ptr": 1,
                    "function_data": 1,
                    "function_params": 1,
                    "input_array": 3,
                    "input_data": 2,
                    "input_params": 1,
                    "memory_params": 1,
                    "memory_pointer": 1,
                    "memory_values": 1,
                    "param_array": 1,
                    "param_ptr": 1,
                    "parameter": 1,
                    "parameter_1": 1,
                    "parameter_array": 1,
                    "parameters": 4,
                    "parameters_array": 1,
                    "state": 1,
                    "status_ptr": 1,
                    "value_and_parameter": 1,
                    "value_status_array": 1,
                    "value_to_modify": 1
                },
                "param_2": {
                    "additional_params": 1,
                    "config_array": 1,
                    "input_array": 2,
                    "input_params": 1,
                    "param_array": 2,
                    "param_ptr": 1,
                    "param_values": 1,
                    "parameter_2": 1,
                    "parameter_array": 1,
                    "parameters": 5,
                    "params": 1,
                    "params_array": 1,
                    "update_array": 1,
                    "update_data": 1,
                    "update_values": 1,
                    "value_array": 2,
                    "values": 5,
                    "values_ptr": 2
                },
                "uVar1": {
                    "result": 18,
                    "return_value": 11,
                    "status": 2
                },
                "uVar2": {
                    "config_value": 1,
                    "input_value": 4,
                    "param": 1,
                    "param_value": 11,
                    "parameter_value": 1,
                    "update_type": 1,
                    "update_value": 1,
                    "value": 11
                },
                "update_flags_and_values_08004104": {
                    "update_flags_and_values": 12
                },
                "update_parameters_080040a0": {
                    "update_parameters": 1,
                    "update_parameters1": 2,
                    "update_parameters_case1": 2,
                    "update_parameters_case_0x40": 2,
                    "update_parameters_case_1": 2,
                    "update_parameters_type1": 2,
                    "update_params_type_1": 1
                },
                "update_parameters_080041a8": {
                    "update_parameters2": 2,
                    "update_parameters_case2": 2,
                    "update_parameters_case_0x70": 2,
                    "update_parameters_case_2": 2,
                    "update_parameters_type2": 2,
                    "update_parameters_with_additional_values": 1,
                    "update_params_type_2": 1
                },
                "update_value_in_memory_0800416a": {
                    "update_memory_value": 5,
                    "update_value_in_memory": 7
                }
            },
            "called": [
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8",
                "FUN_08004104"
            ],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 update_values_in_memory_08003a94(int *parameters,uint *parameters)\n\n{\n  undefined4 result;\n  uint value;\n  \n  if (*(char *)(parameters + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(parameters + 0xf) = 1;\n    *(undefined *)((int)parameters + 0x3d) = 2;\n    *(uint *)(*parameters + 8) = *(uint *)(*parameters + 8) & 0xffff0088;\n    value = *parameters;\n    if (value == 0x40) {\n      update_parameters_case_0x40(*parameters,parameters[1],parameters[3]);\n      update_value_in_memory(*parameters,0x40);\n    }\n    else if (value < 0x41) {\n      if (value == 0x10) {\n        update_value_in_memory(*parameters,0x10);\n      }\n      else if (value < 0x11) {\n        if (value == 0) {\n          update_value_in_memory(*parameters,0);\n        }\n      }\n      else if (value == 0x20) {\n        update_value_in_memory(*parameters,0x20);\n      }\n      else if (value == 0x30) {\n        update_value_in_memory(*parameters,0x30);\n      }\n    }\n    else if (value == 0x70) {\n      update_parameters_case2(*parameters,parameters[2],parameters[1],parameters[3]);\n      *(uint *)(*parameters + 8) = *(uint *)(*parameters + 8) & 0xffffff88 | 0x77;\n    }\n    else if (value < 0x71) {\n      if (value == 0x50) {\n        update_parameters_case_0x40(*parameters,parameters[1],parameters[3]);\n        update_value_in_memory(*parameters,0x50);\n      }\n      else if (value == 0x60) {\n        update_flags_and_values(*parameters,parameters[1],parameters[3]);\n        update_value_in_memory(*parameters,0x60);\n      }\n    }\n    else if (value == 0x1000) {\n      *(uint *)(*parameters + 8) = *(uint *)(*parameters + 8) & 0xfffffff8;\n    }\n    else if (value == 0x2000) {\n      update_parameters_case2(*parameters,parameters[2],parameters[1],parameters[3]);\n      *(uint *)(*parameters + 8) = *(uint *)(*parameters + 8) | 0x4000;\n    }\n    *(undefined *)((int)parameters + 0x3d) = 1;\n    *(undefined *)(parameters + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_values_in_memory_08003a94",
            "entrypoint": "0x08003a94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a94": "update_values_in_memory_08003a94",
                "param_1": "parameters",
                "param_2": "parameters",
                "uVar1": "result",
                "uVar2": "value",
                "update_flags_and_values_08004104": "update_flags_and_values",
                "update_parameters_080040a0": "update_parameters_case_0x40",
                "update_parameters_080041a8": "update_parameters_case2",
                "update_value_in_memory_0800416a": "update_value_in_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c4a",
            "entrypoint": "0x08003c4a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c5c": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c5c",
            "entrypoint": "0x08003c5c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c6e": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c6e",
            "entrypoint": "0x08003c6e",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c80": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c80",
            "entrypoint": "0x08003c80",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c94": {
            "additional_data": {
                "FUN_08003c94": {
                    "modify_memory": 1,
                    "set_memory_configuration": 1,
                    "update_configuration": 1,
                    "update_flags_and_values": 1,
                    "update_function": 1,
                    "update_memory": 10,
                    "update_memory_registers": 1,
                    "update_memory_values": 2,
                    "update_param_values": 1,
                    "update_parameter": 1,
                    "update_parameter_value": 1,
                    "update_parameters": 1,
                    "update_permissions": 1,
                    "update_register": 1,
                    "update_register_values": 1,
                    "update_registers": 6
                },
                "local_c": {
                    "current_value": 8,
                    "flag": 1,
                    "initial_value": 1,
                    "modified_value": 1,
                    "new_value": 1,
                    "original_value": 3,
                    "prev_value": 1,
                    "temp": 3,
                    "temp1": 1,
                    "temp_data": 1,
                    "temp_register": 1,
                    "temp_value": 5,
                    "updated_value": 1,
                    "value": 2,
                    "value1": 1
                },
                "param_1": {
                    "config_buffer": 1,
                    "current_parameter": 1,
                    "current_value": 1,
                    "data_ptr": 1,
                    "input_params": 1,
                    "input_pointer": 1,
                    "input_registers": 1,
                    "memory": 4,
                    "memory1": 1,
                    "memory_address": 2,
                    "memory_config": 1,
                    "memory_ptr": 1,
                    "param_array1": 1,
                    "parameter_array": 1,
                    "permission_array": 1,
                    "register1": 6,
                    "register_address": 1,
                    "source": 1,
                    "source_memory": 1,
                    "target": 1,
                    "target_memory": 2
                },
                "param_2": {
                    "config_values": 1,
                    "data": 3,
                    "data_ptr": 1,
                    "memory2": 1,
                    "new_config": 1,
                    "new_parameter": 1,
                    "new_params": 1,
                    "new_registers": 1,
                    "new_value_array": 2,
                    "new_values": 3,
                    "param_array2": 1,
                    "param_values": 1,
                    "register2": 6,
                    "register_values": 1,
                    "source": 1,
                    "source_memory": 2,
                    "update_ptr": 1,
                    "updated_data": 1,
                    "updated_memory": 1,
                    "updated_values_pointer": 1
                },
                "uRam40012c30": {
                    "param_array2_index4": 1,
                    "permission_value": 1,
                    "register1_4": 1,
                    "special_value": 4,
                    "temp_var": 1,
                    "update_value": 2,
                    "updated_value": 1,
                    "value_to_update": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080035a4",
                "FUN_08003640"
            ],
            "code": "\nvoid update_memory_values_08003c94(uint *register1,uint *register2)\n\n{\n  uint current_value;\n  \n  current_value = *register1;\n  if ((((register1 == (uint *)0x40012c00) || (register1 == (uint *)0x40000000)) ||\n      (register1 == (uint *)0x40000400)) || (register1 == (uint *)0x40000800)) {\n    current_value = register2[1] | current_value & 0xffffff8f;\n  }\n  if (((register1 == (uint *)0x40012c00) || (register1 == (uint *)0x40000000)) ||\n     ((register1 == (uint *)0x40000400 || (register1 == (uint *)0x40000800)))) {\n    current_value = register2[3] | current_value & 0xfffffcff;\n  }\n  *register1 = register2[5] | current_value & 0xffffff7f;\n  register1[0xb] = register2[2];\n  register1[10] = *register2;\n  if (register1 == (uint *)0x40012c00) {\n    special_value = register2[4];\n  }\n  register1[5] = 1;\n  return;\n}\n\n",
            "current_name": "update_memory_values_08003c94",
            "entrypoint": "0x08003c94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003c94": "update_memory_values_08003c94",
                "local_c": "current_value",
                "param_1": "register1",
                "param_2": "register2",
                "uRam40012c30": "special_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003d60": {
            "additional_data": {
                "0x18": {
                    "control_flag3": 1
                },
                "0x20": {
                    "control_flag1": 1
                },
                "0x34": {
                    "control_flag4": 1
                },
                "0x4": {
                    "control_flag2": 1
                },
                "0x40012c00": {
                    "special_address": 1
                },
                "0xffffff8c": {
                    "mask2": 1
                },
                "0xfffffff7": {
                    "mask3": 1
                },
                "0xfffffffb": {
                    "mask4": 1
                },
                "0xfffffffe": {
                    "mask1": 1
                },
                "FUN_08003d60": {
                    "configure_options": 1,
                    "configure_registers": 1,
                    "update_configuration": 1,
                    "update_control_flags": 1,
                    "update_data": 8,
                    "update_device_info": 1,
                    "update_flags_and_values": 1,
                    "update_function_data": 2,
                    "update_param": 2,
                    "update_parameter_values": 1,
                    "update_parameters": 9,
                    "update_params": 1,
                    "update_params_and_values": 1,
                    "update_variables": 1
                },
                "local_10": {
                    "current_value": 2,
                    "existing_device_info": 1,
                    "existing_value": 1,
                    "local_value": 12,
                    "local_var": 1,
                    "local_variable": 5,
                    "new_value": 1,
                    "new_value3": 2,
                    "old_config_value": 1,
                    "previous_local_data": 1,
                    "temp_value": 2,
                    "temp_var1": 1,
                    "temp_var3": 1
                },
                "param_1": {
                    "base_address": 6,
                    "config": 1,
                    "config_address": 2,
                    "control_address": 1,
                    "data_address": 7,
                    "data_offset": 1,
                    "data_ptr": 1,
                    "device_info_address": 1,
                    "function_data": 1,
                    "function_pointer": 1,
                    "input_address": 1,
                    "param_addr": 1,
                    "param_address": 2,
                    "param_base_addr": 1,
                    "parameter1": 3,
                    "parameter_index": 1
                },
                "param_2": {
                    "config_data": 1,
                    "data": 2,
                    "data_array": 4,
                    "data_values": 1,
                    "input_data": 1,
                    "input_params": 2,
                    "input_values": 2,
                    "new_config": 1,
                    "new_device_info": 1,
                    "options": 1,
                    "param_array": 4,
                    "param_values": 2,
                    "parameter2": 3,
                    "parameter_array": 1,
                    "parameter_values": 1,
                    "parameters": 3,
                    "request_data": 1
                },
                "uVar1": {
                    "config_value1": 1,
                    "first_data": 1,
                    "first_input": 1,
                    "first_param": 2,
                    "new_device_info_value": 1,
                    "new_value": 2,
                    "new_value1": 7,
                    "requested_value": 1,
                    "temp_var1": 1,
                    "value1": 13,
                    "var1": 1
                },
                "uVar2": {
                    "config_value2": 1,
                    "new_value2": 7,
                    "second_data": 1,
                    "second_input": 1,
                    "second_param": 2,
                    "temp_var2": 1,
                    "updated_device_info_value": 1,
                    "updated_value": 3,
                    "value2": 13,
                    "var2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_function_data_08003d60(int data_address,uint *data_array)\n\n{\n  uint value1;\n  uint value2;\n  uint local_value;\n  \n  *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xfffffffe;\n  local_value = *(uint *)(data_address + 4);\n  value1 = *data_array;\n  value2 = data_array[2] | *(uint *)(data_address + 0x20) & 0xfffffffd;\n  if (data_address == 0x40012c00) {\n    value2 = (data_array[3] | value2 & 0xfffffff7) & 0xfffffffb;\n    local_value = data_array[6] | data_array[5] | local_value & 0xfffffcff;\n  }\n  *(uint *)(data_address + 4) = local_value;\n  *(uint *)(data_address + 0x18) = value1 | *(uint *)(data_address + 0x18) & 0xffffff8c;\n  *(uint *)(data_address + 0x34) = data_array[1];\n  *(uint *)(data_address + 0x20) = value2;\n  return;\n}\n\n",
            "current_name": "update_function_data_08003d60",
            "entrypoint": "0x08003d60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003d60": "update_function_data_08003d60",
                "local_10": "local_value",
                "param_1": "data_address",
                "param_2": "data_array",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003e38": {
            "additional_data": {
                "0x18": {
                    "offset2": 1
                },
                "0x20": {
                    "offset1": 1
                },
                "0x38": {
                    "offset3": 1
                },
                "0x4": {
                    "offset4": 1
                },
                "0x40012c00": {
                    "special_address": 1
                },
                "0xffff8cff": {
                    "mask2": 1
                },
                "0xfffff3ff": {
                    "mask6": 1
                },
                "0xffffff7f": {
                    "mask4": 1
                },
                "0xffffffbf": {
                    "mask5": 1
                },
                "0xffffffdf": {
                    "mask3": 1
                },
                "0xffffffef": {
                    "mask1": 1
                },
                "FUN_08003e38": {
                    "update_config": 4,
                    "update_configuration": 3,
                    "update_data": 11,
                    "update_device_data": 1,
                    "update_flags_and_values": 1,
                    "update_param": 1,
                    "update_param_and_var": 1,
                    "update_parameter": 1,
                    "update_parameters": 2,
                    "update_params": 4,
                    "update_params_and_values": 1,
                    "update_value": 1
                },
                "iVar1": {
                    "data_value": 1,
                    "first_config_data": 1,
                    "first_value": 2,
                    "input_var1": 1,
                    "item": 1,
                    "param1": 1,
                    "param1_var": 1,
                    "param_value": 2,
                    "temp_var": 2,
                    "temp_var1": 5,
                    "temp_variable2": 1,
                    "temp_variable_1": 1,
                    "value": 4,
                    "value1": 4,
                    "value_1": 1,
                    "var1": 2
                },
                "local_10": {
                    "current_value": 1,
                    "local_data": 1,
                    "local_value": 6,
                    "local_var": 2,
                    "local_var1": 1,
                    "original_config_value": 1,
                    "param1_local": 1,
                    "param3": 1,
                    "stored_value": 2,
                    "temp_value": 3,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_variable": 1,
                    "temp_variable_2": 1,
                    "updated_value_3": 1,
                    "value3": 4,
                    "var1": 1,
                    "var3": 2
                },
                "param_1": {
                    "address": 2,
                    "base_address": 4,
                    "config_address": 7,
                    "data_address": 10,
                    "data_ptr": 1,
                    "device_address": 1,
                    "function_address": 1,
                    "param_addr": 1,
                    "param_address": 3,
                    "parameter_address": 1
                },
                "param_2": {
                    "config_data": 6,
                    "config_values": 1,
                    "data": 1,
                    "data_pointer": 1,
                    "input_array": 2,
                    "input_data": 1,
                    "input_parameters": 1,
                    "input_params": 1,
                    "param_array": 3,
                    "param_list": 1,
                    "param_values": 4,
                    "parameter_array": 1,
                    "parameter_values": 1,
                    "parameters": 1,
                    "params_arr": 1,
                    "params_array": 3,
                    "values": 2
                },
                "uVar2": {
                    "config_mask": 1,
                    "flags": 1,
                    "masked_value": 1,
                    "modified_config_value": 1,
                    "modified_flags": 1,
                    "modified_value": 2,
                    "param2": 1,
                    "param2_var": 1,
                    "result": 1,
                    "temp_var2": 2,
                    "updated_value": 8,
                    "updated_value_2": 1,
                    "updated_var": 1,
                    "updated_var2": 2,
                    "value2": 4,
                    "var2": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_device_data_08003e38(int data_address,int *config_data)\n\n{\n  int temp_var1;\n  uint updated_value;\n  uint local_value;\n  \n  *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xffffffef;\n  local_value = *(uint *)(data_address + 4);\n  temp_var1 = *config_data;\n  updated_value = config_data[2] << 4 | *(uint *)(data_address + 0x20) & 0xffffffdf;\n  if (data_address == 0x40012c00) {\n    updated_value = (config_data[3] << 4 | updated_value & 0xffffff7f) & 0xffffffbf;\n    local_value = config_data[6] << 2 | config_data[5] << 2 | local_value & 0xfffff3ff;\n  }\n  *(uint *)(data_address + 4) = local_value;\n  *(uint *)(data_address + 0x18) = temp_var1 << 8 | *(uint *)(data_address + 0x18) & 0xffff8cff;\n  *(int *)(data_address + 0x38) = config_data[1];\n  *(uint *)(data_address + 0x20) = updated_value;\n  return;\n}\n\n",
            "current_name": "update_device_data_08003e38",
            "entrypoint": "0x08003e38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003e38": "update_device_data_08003e38",
                "iVar1": "temp_var1",
                "local_10": "local_value",
                "param_1": "data_address",
                "param_2": "config_data",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f18": {
            "additional_data": {
                "0x1c": {
                    "address2": 1
                },
                "0x1f8": {
                    "address4": 1
                },
                "0x20": {
                    "address1": 1
                },
                "0x3c": {
                    "address3": 1
                },
                "0x40012c00": {
                    "constant_value": 1
                },
                "0xffffcfff": {
                    "mask3": 1
                },
                "0xfffff7ff": {
                    "mask6": 1
                },
                "0xfffffbff": {
                    "mask5": 1
                },
                "0xfffffdff": {
                    "mask2": 1
                },
                "0xfffffeff": {
                    "mask1": 1
                },
                "0xffffff8c": {
                    "mask4": 1
                },
                "1": {
                    "offset4": 1
                },
                "2": {
                    "offset5": 1
                },
                "3": {
                    "offset6": 1
                },
                "4": {
                    "offset7": 1
                },
                "5": {
                    "offset3": 1
                },
                "6": {
                    "offset2": 1
                },
                "FUN_08003f18": {
                    "modify_parameters": 1,
                    "modify_params_and_store": 1,
                    "update_config": 1,
                    "update_configuration": 5,
                    "update_data": 7,
                    "update_flags_and_values": 1,
                    "update_memory_and_data": 1,
                    "update_memory_values": 1,
                    "update_param": 1,
                    "update_param_values": 1,
                    "update_parameters": 4,
                    "update_params": 2,
                    "update_register_values": 1,
                    "update_settings": 2,
                    "update_values": 2
                },
                "local_10": {
                    "local_data": 1,
                    "local_val": 1,
                    "local_value": 13,
                    "local_var": 2,
                    "local_variable": 3,
                    "modified_value": 1,
                    "new_value3": 2,
                    "old_value": 1,
                    "temp": 1,
                    "temp_value": 3,
                    "temporary_value": 1,
                    "third_value": 1,
                    "value": 1
                },
                "param_1": {
                    "address": 7,
                    "base_address": 4,
                    "config_address": 6,
                    "data_address": 4,
                    "data_pointer": 1,
                    "function_addr": 1,
                    "input_address": 1,
                    "memory_address": 1,
                    "memory_offset": 1,
                    "param1": 1,
                    "param_address": 1,
                    "register_address": 1,
                    "settings_address": 2
                },
                "param_2": {
                    "config_data": 4,
                    "config_values": 2,
                    "data": 6,
                    "data_array": 3,
                    "data_value": 1,
                    "input_params": 1,
                    "input_values": 1,
                    "param2": 1,
                    "param_array": 1,
                    "param_values": 1,
                    "parameters": 4,
                    "params": 1,
                    "register_values": 1,
                    "settings_data": 1,
                    "values": 3
                },
                "return": {
                    "": 1
                },
                "uVar1": {
                    "data1": 1,
                    "first_element": 1,
                    "first_param_value": 1,
                    "first_value": 3,
                    "initial_value": 1,
                    "new_config_value": 1,
                    "new_value1": 7,
                    "old_value": 1,
                    "param1_value": 2,
                    "param_value": 1,
                    "param_value1": 1,
                    "val1": 1,
                    "value1": 8,
                    "var1": 2
                },
                "uVar2": {
                    "data2": 1,
                    "modified_value": 1,
                    "new_value": 1,
                    "new_value2": 7,
                    "param2_value": 2,
                    "param_value2": 1,
                    "second_param_value": 1,
                    "second_value": 3,
                    "updated_config": 1,
                    "updated_value": 2,
                    "val2": 1,
                    "value2": 8,
                    "var2": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_memory_and_data_08003f18(int address,uint *data)\n\n{\n  uint value1;\n  uint value2;\n  uint local_value;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffeff;\n  local_value = *(uint *)(address + 4);\n  value1 = *data;\n  value2 = data[2] << 8 | *(uint *)(address + 0x20) & 0xfffffdff;\n  if (address == 0x40012c00) {\n    value2 = (data[3] << 8 | value2 & 0xfffff7ff) & 0xfffffbff;\n    local_value = data[6] << 4 | data[5] << 4 | local_value & 0xffffcfff;\n  }\n  *(uint *)(address + 4) = local_value;\n  *(uint *)(address + 0x1c) = value1 | *(uint *)(address + 0x1c) & 0xffffff8c;\n  *(uint *)(address + 0x3c) = data[1];\n  *(uint *)(address + 0x20) = value2;\n  return;\n}\n\n",
            "current_name": "update_memory_and_data_08003f18",
            "entrypoint": "0x08003f18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f18": "update_memory_and_data_08003f18",
                "local_10": "local_value",
                "param_1": "address",
                "param_2": "data",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "additional_data": {
                "FUN_08003ff8": {
                    "update_data": 10,
                    "update_data_structure": 1,
                    "update_flags": 1,
                    "update_flags_and_values": 4,
                    "update_memory": 1,
                    "update_param": 1,
                    "update_param_values": 3,
                    "update_parameter": 2,
                    "update_parameters": 5,
                    "update_params": 2,
                    "update_settings": 1
                },
                "iVar1": {
                    "first_value": 3,
                    "input_value_1": 1,
                    "param1_value": 6,
                    "param_2_0": 1,
                    "value1": 16,
                    "value_1": 1,
                    "variable1": 3
                },
                "iVar2": {
                    "input_value_2": 1,
                    "param2_value": 6,
                    "param_2_2": 1,
                    "second_value": 2,
                    "third_value": 1,
                    "value2": 16,
                    "value_2": 1,
                    "variable2": 3
                },
                "local_c": {
                    "current_value": 2,
                    "flag": 1,
                    "flags": 2,
                    "local_value": 4,
                    "local_variable1": 1,
                    "mask": 2,
                    "masked_value": 2,
                    "new_value": 4,
                    "previous_value": 1,
                    "second_value": 1,
                    "temp": 1,
                    "temp_updated2": 1,
                    "temp_value": 2,
                    "temporary_variable": 1,
                    "updated_value": 1,
                    "value": 4,
                    "value_c": 1
                },
                "param_1": {
                    "addr": 1,
                    "address": 3,
                    "base_address": 7,
                    "data_address": 7,
                    "data_pointer": 1,
                    "data_struct_addr": 1,
                    "data_struct_ptr": 1,
                    "function_address": 1,
                    "memory_address": 3,
                    "param_address": 1,
                    "param_pointer": 1,
                    "parameter": 1,
                    "parameter1": 2,
                    "settings_ptr": 1
                },
                "param_2": {
                    "data": 2,
                    "data_array": 1,
                    "input_array": 1,
                    "input_params": 2,
                    "param_array": 9,
                    "parameter2": 2,
                    "parameters": 6,
                    "params": 3,
                    "params_array": 3,
                    "values": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_data_structure_08003ff8(int base_address,int *param_array)\n\n{\n  int value1;\n  int value2;\n  uint new_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffefff;\n  new_value = *(uint *)(base_address + 4);\n  value1 = *param_array;\n  value2 = param_array[2];\n  if (base_address == 0x40012c00) {\n    new_value = param_array[5] << 6 | new_value & 0xffffbfff;\n  }\n  *(uint *)(base_address + 4) = new_value;\n  *(uint *)(base_address + 0x1c) = value1 << 8 | *(uint *)(base_address + 0x1c) & 0xffff8cff;\n  *(int *)(base_address + 0x40) = param_array[1];\n  *(uint *)(base_address + 0x20) = value2 << 0xc | *(uint *)(base_address + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "current_name": "update_data_structure_08003ff8",
            "entrypoint": "0x08003ff8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003ff8": "update_data_structure_08003ff8",
                "iVar1": "value1",
                "iVar2": "value2",
                "local_c": "new_value",
                "param_1": "base_address",
                "param_2": "param_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040a0": {
            "additional_data": {
                "FUN_080040a0": {
                    "clear_bit_and_shift": 1,
                    "modify_data": 1,
                    "update_flags_and_values": 3,
                    "update_memory": 1,
                    "update_param": 2,
                    "update_param_values": 4,
                    "update_parameter": 3,
                    "update_parameter_with_flags": 1,
                    "update_parameters": 9,
                    "update_params": 1,
                    "update_registers": 1,
                    "update_value": 1,
                    "update_value_and_flag": 1,
                    "update_values": 1,
                    "update_variable": 1
                },
                "param_1": {
                    "address": 3,
                    "base_address": 9,
                    "data_address": 1,
                    "input": 1,
                    "input_address": 1,
                    "memory_address": 4,
                    "obj_ptr": 1,
                    "param": 3,
                    "param_address": 3,
                    "param_ptr": 1,
                    "ptr": 2,
                    "register_address": 1,
                    "update_address": 1
                },
                "param_2": {
                    "flag": 1,
                    "flags_to_set": 1,
                    "mask": 3,
                    "mask_value": 1,
                    "new_bits": 3,
                    "new_flag": 2,
                    "new_flag_value": 1,
                    "new_param": 1,
                    "new_param2": 1,
                    "new_param2_value": 1,
                    "new_param_value": 2,
                    "new_parameter": 1,
                    "new_value": 6,
                    "param2": 1,
                    "value": 5,
                    "value1": 1
                },
                "param_3": {
                    "bit_flags": 1,
                    "bit_shift_value": 1,
                    "bit_value": 1,
                    "bitmask": 1,
                    "flag_value": 1,
                    "mask": 1,
                    "new_value": 2,
                    "param3": 1,
                    "param_value": 1,
                    "shift": 2,
                    "shift_amount": 4,
                    "shift_value": 5,
                    "shifted_value": 4,
                    "value": 4,
                    "value2": 1,
                    "value_to_insert": 1
                },
                "uVar1": {
                    "current_flag_value": 1,
                    "current_flags": 1,
                    "current_value": 2,
                    "current_value_at_address": 1,
                    "old_flag": 1,
                    "old_param_value": 1,
                    "old_value": 3,
                    "original_value": 2,
                    "prev_param": 1,
                    "prev_value": 2,
                    "previous_value": 4,
                    "temp1": 1,
                    "temp_addr": 1,
                    "temp_value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_parameters_080040a0(int base_address,uint new_value,int shift_value)\n\n{\n  uint previous_value;\n  \n  previous_value = *(uint *)(base_address + 0x20);\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  *(uint *)(base_address + 0x18) = shift_value << 4 | *(uint *)(base_address + 0x18) & 0xffffff0f;\n  *(uint *)(base_address + 0x20) = new_value | previous_value & 0xfffffff5;\n  return;\n}\n\n",
            "current_name": "update_parameters_080040a0",
            "entrypoint": "0x080040a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040a0": "update_parameters_080040a0",
                "param_1": "base_address",
                "param_2": "new_value",
                "param_3": "shift_value",
                "uVar1": "previous_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004104": {
            "additional_data": {
                "0x18": {
                    "register2": 1
                },
                "0x20": {
                    "register1": 1
                },
                "0xffff0fff": {
                    "bit_mask1": 1,
                    "bit_mask2": 1
                },
                "0xffffff5f": {
                    "bit_mask2": 1,
                    "bit_mask3": 1
                },
                "0xffffffef": {
                    "bit_mask1": 1,
                    "clear_bit_mask": 1
                },
                "FUN_08004104": {
                    "clear_bits_and_set_values": 1,
                    "clear_bits_and_shift": 1,
                    "clear_bits_and_update_values": 1,
                    "clear_flags": 2,
                    "clear_flags_and_set_values": 1,
                    "modify_param_bits": 1,
                    "set_bitwise_flags": 2,
                    "set_flags_and_shift": 1,
                    "set_flags_and_values": 1,
                    "set_permissions_and_flag": 1,
                    "update_flags": 3,
                    "update_flags_and_values": 10,
                    "update_parameters": 2,
                    "update_params": 3,
                    "update_params_and_flags": 1
                },
                "param_1": {
                    "base_address": 16,
                    "buffer": 1,
                    "context": 1,
                    "data": 3,
                    "data_address": 2,
                    "data_pointer": 2,
                    "input_address": 1,
                    "memory_address": 1,
                    "obj_ptr": 1,
                    "object_address": 3
                },
                "param_2": {
                    "flag_value": 3,
                    "input_value": 1,
                    "new_value": 3,
                    "param2": 2,
                    "value": 4,
                    "value1": 10,
                    "value2": 7,
                    "value_1": 1
                },
                "param_3": {
                    "bits_to_shift": 2,
                    "data_value": 1,
                    "mask": 1,
                    "param3": 2,
                    "shift_amount": 1,
                    "shift_value": 4,
                    "shifted_value": 1,
                    "value2": 10,
                    "value3": 7,
                    "value_2": 1,
                    "value_to_shift": 1
                },
                "var_1": {
                    "current_flags": 1
                },
                "var_2": {
                    "current_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_flags_and_values_08004104(int base_address,int value1,int value2)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffffef;\n  *(uint *)(base_address + 0x18) = value2 << 0xc | *(uint *)(base_address + 0x18) & 0xffff0fff;\n  *(uint *)(base_address + 0x20) = value1 << 4 | *(uint *)(base_address + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "current_name": "update_flags_and_values_08004104",
            "entrypoint": "0x08004104",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004104": "update_flags_and_values_08004104",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800416a": {
            "additional_data": {
                "0xffffff8f": {
                    "mask": 1
                },
                "7": {
                    "mask": 1
                },
                "8": {
                    "offset": 1
                },
                "FUN_0800416a": {
                    "set_bitmask": 1,
                    "set_flag_bits": 1,
                    "set_flag_in_memory": 1,
                    "set_flags": 1,
                    "set_permissions": 1,
                    "update_bitwise_flags": 1,
                    "update_flag": 1,
                    "update_flags": 4,
                    "update_memory": 3,
                    "update_memory_value": 3,
                    "update_param_bits": 1,
                    "update_param_value": 1,
                    "update_param_with_flags": 1,
                    "update_parameter": 4,
                    "update_parameter_value": 1,
                    "update_parameter_with_flag": 1,
                    "update_register_with_bits": 1,
                    "update_value": 2,
                    "update_value_in_memory": 1,
                    "update_value_with_mask": 1
                },
                "param_1": {
                    "address": 4,
                    "base_address": 14,
                    "data": 1,
                    "input_address": 1,
                    "memory_address": 6,
                    "memory_location": 1,
                    "object_address": 1,
                    "param_address": 1,
                    "register": 1,
                    "struct_pointer": 1
                },
                "param_2": {
                    "bits_to_set": 1,
                    "bits_to_update": 1,
                    "data": 1,
                    "data_value": 1,
                    "flag": 1,
                    "flag_value": 2,
                    "flags": 1,
                    "new_data": 4,
                    "new_flags": 1,
                    "new_param_value": 1,
                    "new_parameter": 1,
                    "new_permissions": 1,
                    "new_value": 8,
                    "value": 7
                },
                "param_3": {
                    "mask": 1
                },
                "temp_1": {
                    "current_flags": 1
                },
                "uint": {
                    "unsigned_int": 3,
                    "unsigned_integer": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_value_in_memory_0800416a(int base_address,ushort new_value)\n\n{\n  *(unsigned_int *)(base_address + 8) = *(unsigned_int *)(base_address + 8) & 0xffffff8f | (unsigned_int)(new_value | 7);\n  return;\n}\n\n",
            "current_name": "update_value_in_memory_0800416a",
            "entrypoint": "0x0800416a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800416a": "update_value_in_memory_0800416a",
                "param_1": "base_address",
                "param_2": "new_value",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041a8": {
            "additional_data": {
                "FUN_080041a8": {
                    "update_data": 2,
                    "update_flag": 1,
                    "update_flags": 1,
                    "update_memory": 1,
                    "update_memory_value": 1,
                    "update_param": 3,
                    "update_param_value": 1,
                    "update_param_values": 1,
                    "update_parameter": 2,
                    "update_parameter_value": 4,
                    "update_parameter_values": 1,
                    "update_parameters": 9,
                    "update_register": 1,
                    "update_register_values": 1,
                    "update_value": 1,
                    "update_value_with_mask": 1
                },
                "param_1": {
                    "address": 4,
                    "base_address": 11,
                    "data": 2,
                    "data_address": 2,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "input_data_address": 1,
                    "input_pointer": 1,
                    "memory_address": 1,
                    "param": 1,
                    "ptr": 3,
                    "register_address": 2
                },
                "param_2": {
                    "data1": 2,
                    "input1": 1,
                    "new_bits": 1,
                    "new_param_value1": 1,
                    "new_val1": 1,
                    "new_value": 1,
                    "new_value1": 1,
                    "param_input1": 1,
                    "updated_flag": 1,
                    "updated_value": 1,
                    "value": 1,
                    "value1": 17,
                    "value2": 1,
                    "value_1": 1
                },
                "param_3": {
                    "bit_mask": 1,
                    "bitmask2": 1,
                    "current_value": 1,
                    "data2": 2,
                    "input2": 1,
                    "mask": 2,
                    "new_param_value2": 1,
                    "new_val2": 1,
                    "new_value2": 1,
                    "param_input2": 1,
                    "value2": 17,
                    "value3": 1,
                    "value_2": 1
                },
                "param_4": {
                    "data3": 2,
                    "input3": 1,
                    "param_input3": 1,
                    "shift_amount": 6,
                    "shift_offset": 1,
                    "shift_value": 3,
                    "updated_value": 1,
                    "value": 1,
                    "value3": 13,
                    "value4": 1,
                    "value_3": 1
                },
                "param_5": {
                    "result_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_parameters_080041a8(int base_address,uint value1,uint value2,int value3)\n\n{\n  *(uint *)(base_address + 8) = value1 | value3 << 8 | value2 | *(uint *)(base_address + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "current_name": "update_parameters_080041a8",
            "entrypoint": "0x080041a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041a8": "update_parameters_080041a8",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041ea": {
            "additional_data": {
                "FUN_080041ea": {
                    "clear_bit_and_shift": 1,
                    "clear_bit_in_memory": 1,
                    "update_bit": 5,
                    "update_bit_field": 1,
                    "update_bit_in_value": 2,
                    "update_bit_value": 7,
                    "update_bits": 4,
                    "update_bitwise_value": 8,
                    "update_flags": 1,
                    "update_value": 1
                },
                "param_1": {
                    "address": 2,
                    "base_address": 22,
                    "data": 2,
                    "data_offset": 1,
                    "input": 1,
                    "memory_address": 1,
                    "object_address": 1,
                    "value": 1
                },
                "param_2": {
                    "bit_index": 3,
                    "bit_offset": 2,
                    "bit_position": 24,
                    "offset": 1,
                    "position": 1
                },
                "param_3": {
                    "bit_value": 11,
                    "new_bit_value": 1,
                    "new_value": 16,
                    "value": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_080036a8"
            ],
            "code": "\nvoid update_bit_in_value_080041ea(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "update_bit_in_value_080041ea",
            "entrypoint": "0x080041ea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041ea": "update_bit_in_value_080041ea",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800422e": {
            "additional_data": {
                "DAT_": {
                    "dat_": 1
                },
                "FUN_0800422e": {
                    "check_flag": 1,
                    "decode_data": 1,
                    "initialize_data": 1,
                    "initialize_flag_and_values": 1,
                    "initialize_flags": 1,
                    "process_parameters": 1,
                    "set_flag_and_assign_values": 1,
                    "set_flag_if_equal_to_one": 1,
                    "set_flag_if_one": 1,
                    "set_flag_or_compute_value": 1,
                    "set_flag_value": 1,
                    "update_and_return_result": 1,
                    "update_and_set_variable": 1,
                    "update_config": 1,
                    "update_data": 4,
                    "update_flag_and_assign_value": 1,
                    "update_flag_and_value": 1,
                    "update_param_and_return": 1,
                    "update_param_value": 1,
                    "update_parameter": 4,
                    "update_parameter_value": 2,
                    "update_permission_flag": 1,
                    "update_status": 1
                },
                "PTR_": {
                    "ptr_": 1
                },
                "param_1": {
                    "array": 2,
                    "config": 1,
                    "data": 5,
                    "data_array": 1,
                    "data_buffer": 1,
                    "flag_array": 2,
                    "flag_ptr": 1,
                    "flags": 1,
                    "input_array": 2,
                    "input_params": 1,
                    "input_pointer": 1,
                    "p_param": 1,
                    "param_array": 5,
                    "param_list": 1,
                    "parameter": 1,
                    "parameter_array": 2,
                    "parameter_array1": 1,
                    "parameters": 1,
                    "status": 1
                },
                "param_2": {
                    "data": 3,
                    "data_array": 8,
                    "data_pointer": 1,
                    "encoded_data": 1,
                    "p_values": 1,
                    "param_array": 3,
                    "parameter_array2": 1,
                    "value_array": 1,
                    "values": 11,
                    "values_ptr": 1
                },
                "uVar1": {
                    "result": 16,
                    "return_value": 13,
                    "status": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 update_parameter_value_0800422e(int *data,uint *values)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(data + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(data + 0xf) = 1;\n    *(uint *)(*data + 0x44) =\n         values[6] |\n         (values[6] |\n         (values[5] |\n         (values[4] |\n         (*values | (values[1] | (values[2] | values[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(data + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_parameter_value_0800422e",
            "entrypoint": "0x0800422e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800422e": "update_parameter_value_0800422e",
                "param_1": "data",
                "param_2": "values",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080042de": {
            "additional_data": {
                "FUN_080042de": {
                    "check_and_modify_flags": 1,
                    "check_and_update_flag": 1,
                    "check_flag": 2,
                    "check_flag_and_modify": 1,
                    "check_flag_status": 1,
                    "process_data": 2,
                    "process_flag": 1,
                    "process_flags": 1,
                    "update_data": 3,
                    "update_flag_and_bits": 2,
                    "update_flag_and_keys": 1,
                    "update_flag_and_set_bits": 1,
                    "update_flags": 6,
                    "update_flags_and_return": 2,
                    "update_flags_and_values": 2,
                    "update_parameter": 1,
                    "update_permissions": 3
                },
                "param_1": {
                    "array": 5,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "data": 5,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "flag": 1,
                    "flag_and_keys": 1,
                    "flag_array": 3,
                    "flag_info": 1,
                    "flag_status": 1,
                    "flags": 2,
                    "input_array": 2,
                    "input_param": 1,
                    "parameter1": 1,
                    "permissions": 1,
                    "permissions_array": 1,
                    "ptr": 1
                },
                "param_2": {
                    "bit_mask": 1,
                    "bitmask": 1,
                    "data": 1,
                    "data_param": 1,
                    "flag_array": 1,
                    "flag_value": 1,
                    "flag_values_ptr": 1,
                    "flags": 4,
                    "mask": 4,
                    "mask_array": 1,
                    "new_permissions": 2,
                    "new_values": 1,
                    "parameter2": 1,
                    "update_ptr": 1,
                    "value_array": 1,
                    "value_ptr": 1,
                    "values": 7,
                    "values_pointer": 1
                },
                "uVar1": {
                    "result": 22,
                    "return_value": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 update_flags_and_return_080042de(int *array,uint *values)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(array + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(array + 0xf) = 1;\n    *(undefined *)((int)array + 0x3d) = 2;\n    *(uint *)(*array + 4) = *(uint *)(*array + 4) & 0xffffff8f;\n    *(uint *)(*array + 4) = *values | *(uint *)(*array + 4);\n    *(uint *)(*array + 8) = *(uint *)(*array + 8) & 0xffffff7f;\n    *(uint *)(*array + 8) = values[1] | *(uint *)(*array + 8);\n    *(undefined *)((int)array + 0x3d) = 1;\n    *(undefined *)(array + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_flags_and_return_080042de",
            "entrypoint": "0x080042de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080042de": "update_flags_and_return_080042de",
                "param_1": "array",
                "param_2": "values",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004366": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004366",
            "entrypoint": "0x08004366",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004378": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004378",
            "entrypoint": "0x08004378",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800438a": {
            "additional_data": {
                "0x2000": {
                    "mask4": 1
                },
                "0xffffb7ff": {
                    "mask2": 1
                },
                "0xffffdfff": {
                    "mask1": 1
                },
                "0xffffffd5": {
                    "mask3": 1
                },
                "FUNC_08004424": {
                    "do_something": 2,
                    "function_1": 1,
                    "perform_action": 4,
                    "perform_additional_operations": 1,
                    "perform_calculation": 1,
                    "perform_operation": 2,
                    "perform_processing": 1,
                    "process_component": 1,
                    "process_data": 1,
                    "process_param": 1,
                    "process_parameters": 2
                },
                "FUN_0800438a": {
                    "check_and_update_params": 1,
                    "handle_param": 1,
                    "handle_param_update": 1,
                    "initialize_component": 1,
                    "initialize_data": 1,
                    "initialize_function": 1,
                    "initialize_param": 3,
                    "initialize_param_and_calculate": 1,
                    "initialize_parameters": 4,
                    "initialize_params": 6,
                    "initialize_value": 1,
                    "initialize_variable": 1,
                    "process_parameter": 1,
                    "update_data": 2,
                    "update_param_and_calculate": 1,
                    "update_param_and_calculate_value": 1,
                    "update_parameters": 1,
                    "update_value_and_params": 1,
                    "validate_param": 1,
                    "validate_params": 1
                },
                "param_1": {
                    "arg_ptr": 1,
                    "array": 1,
                    "component": 1,
                    "data": 2,
                    "data_array": 1,
                    "input_array": 1,
                    "input_ptr": 1,
                    "param": 6,
                    "param_array": 2,
                    "parameter": 1,
                    "parameters": 4,
                    "params": 10
                },
                "uVar1": {
                    "result": 16,
                    "return_value": 8,
                    "status": 7
                },
                "update_params_and_calculate_value_080046ec": {
                    "calculate_value": 1,
                    "update_and_calculate": 2,
                    "update_and_calculate_value": 3,
                    "update_calculate_value": 1,
                    "update_param_and_calculate_value": 1,
                    "update_params": 2,
                    "update_params_and_calc_value": 1,
                    "update_params_and_calculate_value": 7
                }
            },
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "calling": [
                "FUN_08005598"
            ],
            "code": "\nundefined4 initialize_params_0800438a(int *params)\n\n{\n  undefined4 result;\n  \n  if (params == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)params + 0x39) == '\\0') {\n      *(undefined *)(params + 0xe) = 0;\n      FUNC_08004424(params);\n    }\n    *(undefined *)((int)params + 0x39) = 0x24;\n    *(uint *)(*params + 0xc) = *(uint *)(*params + 0xc) & 0xffffdfff;\n    update_params_and_calculate_value(params);\n    *(uint *)(*params + 0x10) = *(uint *)(*params + 0x10) & 0xffffb7ff;\n    *(uint *)(*params + 0x14) = *(uint *)(*params + 0x14) & 0xffffffd5;\n    *(uint *)(*params + 0xc) = *(uint *)(*params + 0xc) | 0x2000;\n    params[0xf] = 0;\n    *(undefined *)((int)params + 0x39) = 0x20;\n    *(undefined *)((int)params + 0x3a) = 0x20;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_params_0800438a",
            "entrypoint": "0x0800438a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800438a": "initialize_params_0800438a",
                "param_1": "params",
                "uVar1": "result",
                "update_params_and_calculate_value_080046ec": "update_params_and_calculate_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004424": {
            "called": [],
            "calling": [
                "FUN_0800438a"
            ],
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004424",
            "entrypoint": "0x08004424",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004436": {
            "additional_data": {
                "FUN_08004436": {
                    "check_and_process_data": 1,
                    "check_param_validity": 1,
                    "decode_and_validate_data": 1,
                    "decode_data": 1,
                    "extract_data": 1,
                    "process_data": 24,
                    "process_input": 1,
                    "process_parameter": 1
                },
                "get_data_value_080015a0": {
                    "get_data_value": 1
                },
                "iVar1": {
                    "check_result": 1,
                    "current_index": 1,
                    "data_value1": 1,
                    "data_value_1": 1,
                    "data_value_i_var1": 1,
                    "initial_value": 1,
                    "loop_counter_1": 1,
                    "result": 2,
                    "return_value": 1,
                    "status_check": 1,
                    "value": 1,
                    "value1": 6
                },
                "iVar2": {
                    "check_value": 1,
                    "comparison_result": 1,
                    "data_value": 2,
                    "data_value2": 1,
                    "data_value_2": 1,
                    "data_value_i_var2": 1,
                    "loop_counter_2": 1,
                    "result": 1,
                    "status": 1,
                    "temp_value": 1,
                    "value": 1,
                    "value2": 6
                },
                "local_58": {
                    "buffer_ptr": 3,
                    "current_char": 1,
                    "current_data": 3,
                    "current_element": 1,
                    "current_input": 20,
                    "current_value": 2,
                    "input_ptr": 1
                },
                "param_1": {
                    "data": 21,
                    "data_array": 1,
                    "data_list": 1,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "input_data": 1,
                    "param_list": 1,
                    "parameter_list": 1,
                    "params": 1
                },
                "param_2": {
                    "buffer": 1,
                    "data": 1,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_list": 1,
                    "input": 16,
                    "input_array": 2,
                    "input_buffer": 2,
                    "input_data": 4,
                    "values": 2
                },
                "param_3": {
                    "array_length": 1,
                    "array_size": 1,
                    "buffer_length": 2,
                    "buffer_size": 1,
                    "data_count": 1,
                    "data_length": 1,
                    "input_length": 16,
                    "input_size": 5,
                    "num_inputs": 1,
                    "num_values": 2
                },
                "param_4": {
                    "data_limit": 1,
                    "limit": 3,
                    "max_allowed_diff": 1,
                    "max_data_size": 1,
                    "max_data_value": 2,
                    "max_decode_length": 1,
                    "max_iterations": 5,
                    "max_size": 2,
                    "max_value": 10,
                    "threshold": 3,
                    "time_limit": 1,
                    "timeout": 1
                },
                "uVar3": {
                    "result": 24,
                    "return_value": 3,
                    "status": 1
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08004f3c"
            ],
            "code": "\nundefined4 check_and_process_data_08004436(uint **data,ushort *input,short input_length,uint max_value)\n\n{\n  int value1;\n  int value2;\n  undefined4 result;\n  ushort *current_input;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if ((input == (ushort *)0x0) || (input_length == 0)) {\n      result = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = (uint *)0x0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      value1 = get_data_value();\n      *(short *)(data + 9) = input_length;\n      *(short *)((int)data + 0x26) = input_length;\n      current_input = input;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == (uint *)0x1000) {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              value2 = 0;\n              goto LAB_0800454c;\n            }\n          } while ((max_value == 0xffffffff) ||\n                  ((max_value != 0 && (value2 = get_data_value(), (uint)(value2 - value1) <= max_value))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          value2 = 3;\nLAB_0800454c:\n          if (value2 != 0) {\n            return 3;\n          }\n          (*data)[1] = *current_input & 0x1ff;\n          if (data[4] == (uint *)0x0) {\n            current_input = current_input + 1;\n          }\n          else {\n            current_input = (ushort *)((int)current_input + 1);\n          }\n        }\n        else {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              value2 = 0;\n              goto LAB_08004614;\n            }\n          } while ((max_value == 0xffffffff) ||\n                  ((max_value != 0 && (value2 = get_data_value(), (uint)(value2 - value1) <= max_value))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          value2 = 3;\nLAB_08004614:\n          if (value2 != 0) {\n            return 3;\n          }\n          (*data)[1] = (uint)*(byte *)current_input;\n          current_input = (ushort *)((int)current_input + 1);\n        }\n      }\n      do {\n        if ((**data & 0x40) == 0x40) {\n          value1 = 0;\n          goto LAB_080046c6;\n        }\n      } while ((max_value == 0xffffffff) ||\n              ((max_value != 0 && (value2 = get_data_value(), (uint)(value2 - value1) <= max_value))));\n      (*data)[3] = (*data)[3] & 0xfffffe5f;\n      (*data)[5] = (*data)[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 0x20;\n      *(undefined *)((int)data + 0x3a) = 0x20;\n      *(undefined *)(data + 0xe) = 0;\n      value1 = 3;\nLAB_080046c6:\n      if (value1 == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "check_and_process_data_08004436",
            "entrypoint": "0x08004436",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004436": "check_and_process_data_08004436",
                "get_data_value_080015a0": "get_data_value",
                "iVar1": "value1",
                "iVar2": "value2",
                "local_58": "current_input",
                "param_1": "data",
                "param_2": "input",
                "param_3": "input_length",
                "param_4": "max_value",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080046ec": {
            "additional_data": {
                "FUN_080046ec": {
                    "calculate_and_update_values": 1,
                    "calculate_checksum": 1,
                    "calculate_parameter": 1,
                    "calculate_parameter_value": 1,
                    "calculate_shifted_value": 1,
                    "calculate_value": 6,
                    "calculate_value_and_update": 1,
                    "calculate_values": 3,
                    "compute_parameters": 1,
                    "update_configuration": 2,
                    "update_data": 3,
                    "update_data_values": 2,
                    "update_parameter_value": 1,
                    "update_parameter_values": 2,
                    "update_params_and_calculate_value": 1,
                    "update_settings": 1,
                    "update_values": 3
                },
                "get_shifted_data_value_08003518": {
                    "get_data_value2": 2,
                    "get_shifted_data": 1,
                    "get_shifted_data_value": 1,
                    "get_shifted_data_value2": 5,
                    "get_shifted_data_value_b": 1
                },
                "get_shifted_data_value_08003540": {
                    "get_data_value1": 2,
                    "get_shifted_data": 1,
                    "get_shifted_data_value": 1,
                    "get_shifted_data_value1": 5,
                    "get_shifted_data_value_a": 1
                },
                "iVar2": {
                    "calculation2": 2,
                    "calculation_result2": 1,
                    "computed_value_1": 1,
                    "quotient1": 1,
                    "result1": 2,
                    "result2": 1,
                    "shifted_data1": 1,
                    "shifted_data_value2": 1,
                    "shifted_value1": 2,
                    "shifted_value2": 8,
                    "temp1": 1,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "temp_value2": 1,
                    "temp_var1": 3,
                    "value1": 3,
                    "value2": 1
                },
                "iVar3": {
                    "calculation3": 2,
                    "calculation_result3": 1,
                    "computed_value_2": 1,
                    "data1": 1,
                    "i_var3": 1,
                    "input_data_size": 1,
                    "result2": 1,
                    "result3": 1,
                    "shifted_data2": 1,
                    "shifted_data_value3": 1,
                    "shifted_value2": 1,
                    "shifted_value3": 8,
                    "temp2": 1,
                    "temp_value2": 2,
                    "temp_value3": 1,
                    "temp_var2": 3,
                    "value2": 3,
                    "value3": 1
                },
                "iVar5": {
                    "calculation5": 2,
                    "calculation_result4": 1,
                    "data2": 1,
                    "final_value_2": 1,
                    "i_var5": 1,
                    "input_data_value": 1,
                    "parameter1_value": 1,
                    "result2": 1,
                    "result4": 1,
                    "result5": 1,
                    "shifted_data_value5": 1,
                    "shifted_value4": 4,
                    "shifted_value5": 4,
                    "temp3": 1,
                    "temp_value3": 2,
                    "temp_value5": 1,
                    "temp_var3": 2,
                    "temp_var4": 1,
                    "value3": 3,
                    "value5": 1
                },
                "param_1": {
                    "config": 2,
                    "data": 4,
                    "data_ptr": 1,
                    "input": 1,
                    "input_array": 5,
                    "input_data": 3,
                    "input_params": 1,
                    "input_values": 1,
                    "param_array": 1,
                    "parameter_array": 1,
                    "parameters": 8,
                    "params": 1,
                    "settings": 1
                },
                "uVar1": {
                    "calculated_value": 1,
                    "calculation1": 2,
                    "calculation_result": 2,
                    "dividend": 2,
                    "multiplier": 2,
                    "quotient": 2,
                    "result1": 2,
                    "shifted_data_value": 1,
                    "shifted_data_value1": 1,
                    "shifted_value": 8,
                    "shifted_value1": 6,
                    "temp_value1": 1,
                    "value1": 1
                },
                "uVar4": {
                    "calculated_value": 2,
                    "calculation4": 2,
                    "final_value_1": 1,
                    "new_value": 2,
                    "result": 2,
                    "result1": 3,
                    "result2": 2,
                    "result3": 1,
                    "result4": 1,
                    "result_var1": 1,
                    "shifted_data_value4": 1,
                    "shifted_value2": 2,
                    "shifted_value3": 1,
                    "shifted_value4": 5,
                    "temp_value4": 1,
                    "temp_var3": 1,
                    "update_value": 1,
                    "updated_value": 1,
                    "value4": 1
                },
                "uVar6": {
                    "data_value": 7,
                    "shifted_data": 1,
                    "shifted_data_value": 12,
                    "shifted_data_value2": 1,
                    "shifted_data_value6": 1,
                    "shifted_value": 1,
                    "shifted_value2": 2,
                    "shifted_value5": 2,
                    "shifted_value6": 4
                }
            },
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "calling": [
                "FUN_0800438a"
            ],
            "code": "\nvoid update_params_and_calculate_value_080046ec(int *parameters)\n\n{\n  ulonglong shifted_value;\n  int shifted_value2;\n  int shifted_value3;\n  uint shifted_value4;\n  int shifted_value5;\n  undefined8 shifted_data_value;\n  \n  *(uint *)(*parameters + 0x10) = parameters[3] | *(uint *)(*parameters + 0x10) & 0xffffcfff;\n  *(uint *)(*parameters + 0xc) =\n       *(uint *)(*parameters + 0xc) & 0xffffe9f3 | parameters[5] | parameters[2] | parameters[4];\n  *(uint *)(*parameters + 0x14) = parameters[6] | *(uint *)(*parameters + 0x14) & 0xfffffcff;\n  if (*parameters == 0x40013800) {\n    shifted_data_value = get_shifted_data_value1();\n    shifted_value = (ulonglong)(uint)((int)shifted_data_value * 0x19) / (ulonglong)(uint)(parameters[1] << 2);\n    shifted_value2 = get_shifted_data_value1((int)shifted_data_value,(int)((ulonglong)shifted_data_value >> 0x20),(int)(shifted_value * 0x51eb851f));\n    shifted_value3 = parameters[1];\n    shifted_data_value = get_shifted_data_value1();\n    shifted_value4 = ((uint)(shifted_value2 * 0x19) / (uint)(shifted_value3 << 2) +\n            (int)(((ulonglong)(uint)((int)shifted_data_value * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    shifted_value2 = get_shifted_data_value1((int)shifted_data_value,(int)((ulonglong)shifted_data_value >> 0x20),shifted_value4 * 0x51eb851f);\n    shifted_value5 = parameters[1];\n    shifted_value3 = get_shifted_data_value1();\n    *(uint *)(*parameters + 8) =\n         ((((uint)(shifted_value2 * 0x19) / (uint)(shifted_value5 << 2) +\n           (int)(((ulonglong)(uint)(shifted_value3 * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(shifted_value / 100) * 0x10 + (shifted_value4 / 100 & 0xf0);\n  }\n  else {\n    shifted_data_value = get_shifted_data_value2();\n    shifted_value = (ulonglong)(uint)((int)shifted_data_value * 0x19) / (ulonglong)(uint)(parameters[1] << 2);\n    shifted_value2 = get_shifted_data_value2((int)shifted_data_value,(int)((ulonglong)shifted_data_value >> 0x20),(int)(shifted_value * 0x51eb851f));\n    shifted_value3 = parameters[1];\n    shifted_data_value = get_shifted_data_value2();\n    shifted_value4 = ((uint)(shifted_value2 * 0x19) / (uint)(shifted_value3 << 2) +\n            (int)(((ulonglong)(uint)((int)shifted_data_value * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    shifted_value2 = get_shifted_data_value2((int)shifted_data_value,(int)((ulonglong)shifted_data_value >> 0x20),shifted_value4 * 0x51eb851f);\n    shifted_value5 = parameters[1];\n    shifted_value3 = get_shifted_data_value2();\n    *(uint *)(*parameters + 8) =\n         ((((uint)(shifted_value2 * 0x19) / (uint)(shifted_value5 << 2) +\n           (int)(((ulonglong)(uint)(shifted_value3 * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(shifted_value / 100) * 0x10 + (shifted_value4 / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "current_name": "update_params_and_calculate_value_080046ec",
            "entrypoint": "0x080046ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080046ec": "update_params_and_calculate_value_080046ec",
                "get_shifted_data_value_08003518": "get_shifted_data_value2",
                "get_shifted_data_value_08003540": "get_shifted_data_value1",
                "iVar2": "shifted_value2",
                "iVar3": "shifted_value3",
                "iVar5": "shifted_value5",
                "param_1": "parameters",
                "uVar1": "shifted_value",
                "uVar4": "shifted_value4",
                "uVar6": "shifted_data_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800491c": {
            "additional_data": {
                "FUN_0800491c": {
                    "configure_hardware": 1,
                    "initialize": 1,
                    "initialize_and_calculate_normalized_floats": 1,
                    "initialize_config": 1,
                    "initialize_data": 14,
                    "initialize_data_structure": 1,
                    "initialize_data_structures": 1,
                    "initialize_important_values": 1,
                    "initialize_param": 3,
                    "initialize_param_array": 1,
                    "initialize_parameters": 4,
                    "initialize_params": 2
                },
                "calculate_normalized_floats_080049cc": {
                    "calculate_normalized_floats": 2,
                    "normalize_data": 1,
                    "normalize_floats": 2
                },
                "local_11": {
                    "arr": 1,
                    "array": 3,
                    "array2": 1,
                    "buffer": 2,
                    "byte_array": 9,
                    "data": 1,
                    "flag3": 3,
                    "flag_array": 2,
                    "flags": 1,
                    "options": 1,
                    "temp_array": 1,
                    "temporary_value3": 1,
                    "value_array": 1,
                    "var3": 2,
                    "variable3": 1,
                    "zeros_3": 1
                },
                "local_12": {
                    "buffer_size": 1,
                    "byte2": 1,
                    "byte_1": 1,
                    "byte_ten": 1,
                    "byte_val2": 1,
                    "byte_value": 1,
                    "byte_variable2": 1,
                    "byte_variable_2": 2,
                    "flag": 1,
                    "flag2": 5,
                    "flag_2": 1,
                    "num_value": 1,
                    "size": 3,
                    "temp2": 1,
                    "temporary_value2": 1,
                    "value": 3,
                    "value2": 1,
                    "var2": 2,
                    "variable2": 1,
                    "zero2": 1,
                    "zeros_2": 1
                },
                "local_13": {
                    "buffer": 1,
                    "byte1": 1,
                    "byte_0": 1,
                    "byte_val": 1,
                    "byte_variable": 3,
                    "byte_zero": 1,
                    "flag": 4,
                    "flag1": 5,
                    "flag_1": 1,
                    "flags": 1,
                    "null_byte": 1,
                    "temp1": 1,
                    "temp_var": 1,
                    "temporary_value1": 1,
                    "value1": 1,
                    "var1": 2,
                    "variable1": 1,
                    "zero": 1,
                    "zero1": 1,
                    "zero_byte": 1,
                    "zeros_1": 1
                },
                "param_1": {
                    "array": 1,
                    "config": 1,
                    "config_params": 1,
                    "data": 3,
                    "data_array": 6,
                    "data_pointer": 1,
                    "data_structure": 2,
                    "important_values": 1,
                    "output_array": 4,
                    "output_buffer": 1,
                    "output_data": 1,
                    "output_params": 1,
                    "param": 2,
                    "param_array": 2,
                    "parameter_array": 1,
                    "parameters": 2,
                    "result_array": 1
                }
            },
            "called": [
                "FUN_080049cc"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_data_structures_0800491c(undefined4 *data_array)\n\n{\n  undefined flag1;\n  undefined flag2;\n  undefined byte_array [5];\n  \n  flag1 = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&flag1,1);\n  flag2 = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&flag2,1);\n  byte_array[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,byte_array,1);\n  *data_array = 0;\n  data_array[1] = 0;\n  data_array[2] = 0;\n  data_array[3] = 0;\n  data_array[4] = 0;\n  data_array[5] = 0;\n  data_array[6] = 0;\n  data_array[7] = 0;\n  data_array[8] = 0;\n  data_array[9] = 0;\n  data_array[10] = 0;\n  calculate_normalized_floats(data_array);\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_0800491c",
            "entrypoint": "0x0800491c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800491c": "initialize_data_structures_0800491c",
                "calculate_normalized_floats_080049cc": "calculate_normalized_floats",
                "local_11": "byte_array",
                "local_12": "flag2",
                "local_13": "flag1",
                "param_1": "data_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080049cc": {
            "additional_data": {
                "FUN_080049cc": {
                    "calculate_and_store_results": 1,
                    "calculate_float_metrics": 2,
                    "calculate_float_results": 2,
                    "calculate_normalized_floats": 21,
                    "calculate_normalized_values": 1,
                    "calculate_result": 1,
                    "calculate_results": 1,
                    "normalize_and_calculate_floats": 1,
                    "process_data": 1
                },
                "calculate_float_from_uint_08000e20": {
                    "calculate_float_from_uint": 12
                },
                "calculate_improved_result_08004d78": {
                    "calculate_improved_result": 12
                },
                "calculate_normalized_float_08000aa8": {
                    "calculate_normalized_float": 11,
                    "normalize_float": 1
                },
                "count_bits_and_shift_08000c10": {
                    "count_bits_and_shift": 11,
                    "count_bits_and_shift_1": 1
                },
                "extract_bits_and_shift_08004ae0": {
                    "extract_and_shift_bits": 1,
                    "extract_bits_and_shift": 11
                },
                "local_10": {
                    "float_result_4": 1,
                    "normalized_float2": 4,
                    "normalized_float_10": 2,
                    "normalized_float_2": 4,
                    "normalized_float_3": 4,
                    "normalized_float_b": 1,
                    "normalized_float_d": 3,
                    "normalized_float_part1": 1,
                    "normalized_metric_3": 1,
                    "normalized_result3": 1,
                    "normalized_result_3": 2,
                    "normalized_result_4": 2,
                    "normalized_value_3": 2,
                    "normalized_value_4": 2,
                    "sum_normalized_float_3": 1
                },
                "local_14": {
                    "float_result_1": 1,
                    "normalized_float3": 4,
                    "normalized_float_14": 2,
                    "normalized_float_2": 4,
                    "normalized_float_3": 4,
                    "normalized_float_a": 3,
                    "normalized_float_c": 1,
                    "normalized_float_part2": 1,
                    "normalized_metric_1": 1,
                    "normalized_result2": 1,
                    "normalized_result_1": 2,
                    "normalized_result_2": 2,
                    "normalized_value_1": 2,
                    "normalized_value_2": 2,
                    "sum_normalized_float_2": 1
                },
                "local_18": {
                    "float_result_2": 1,
                    "normalized_float4": 4,
                    "normalized_float_1": 4,
                    "normalized_float_18": 2,
                    "normalized_float_4": 4,
                    "normalized_float_b": 3,
                    "normalized_float_d": 1,
                    "normalized_float_part3": 1,
                    "normalized_metric_2": 1,
                    "normalized_result1": 1,
                    "normalized_result_1": 2,
                    "normalized_result_2": 2,
                    "normalized_value_1": 2,
                    "normalized_value_2": 2,
                    "sum_normalized_float_1": 1
                },
                "local_1c": {
                    "counter": 5,
                    "current_iteration": 4,
                    "iteration": 3,
                    "iteration_count": 5,
                    "iteration_counter": 7,
                    "iteration_index": 5,
                    "loop_counter": 1,
                    "loop_index": 1
                },
                "local_20": {
                    "counter": 1,
                    "iteration_count": 11,
                    "iteration_limit": 1,
                    "iterations": 3,
                    "loop_count": 3,
                    "loop_counter": 5,
                    "num_iterations": 6,
                    "total_iterations": 1
                },
                "local_24": {
                    "current_time": 12,
                    "current_timestamp": 2,
                    "get_time": 6,
                    "get_time_function": 1,
                    "get_timestamp": 3,
                    "time_stamp": 1,
                    "time_value": 2,
                    "timer_value": 1,
                    "timestamp": 3
                },
                "local_28": {
                    "bit_shifts_counter": 1,
                    "bits_and_shift_1": 1,
                    "calculated_metric_1": 1,
                    "calculated_value_1": 1,
                    "extracted_bits1": 1,
                    "extracted_bits_2": 1,
                    "extracted_bits_a": 1,
                    "extracted_bits_part1": 1,
                    "extracted_value1": 1,
                    "extracted_value_1": 2,
                    "extracted_value_2": 1,
                    "extraction_result_1": 1,
                    "result1": 2,
                    "result2": 1,
                    "result_1": 5,
                    "result_2": 4,
                    "result_28": 2,
                    "result_a": 2,
                    "shifted_value_2": 1,
                    "value_a": 1
                },
                "local_2c": {
                    "calculated_metric_2": 1,
                    "calculated_value_2": 1,
                    "extracted_bits2": 1,
                    "extracted_bits_1": 1,
                    "extracted_bits_b": 1,
                    "extracted_bits_part2": 1,
                    "extracted_value2": 1,
                    "extracted_value_1": 1,
                    "extracted_value_2": 2,
                    "extraction_result_2": 1,
                    "result1": 1,
                    "result2": 2,
                    "result_1": 4,
                    "result_2": 5,
                    "result_2c": 2,
                    "result_b": 2,
                    "shifted_value": 1,
                    "shifted_value_1": 1,
                    "total_sum_bits_extracted": 1,
                    "value_b": 1
                },
                "local_c": {
                    "float_result_3": 1,
                    "normalized_float1": 4,
                    "normalized_float_1": 4,
                    "normalized_float_4": 4,
                    "normalized_float_a": 1,
                    "normalized_float_c": 5,
                    "normalized_float_part4": 1,
                    "normalized_metric_4": 1,
                    "normalized_result4": 1,
                    "normalized_result_3": 2,
                    "normalized_result_4": 2,
                    "normalized_value_3": 2,
                    "normalized_value_4": 2,
                    "sum_normalized_float_4": 1
                },
                "param_1": {
                    "data": 1,
                    "input": 2,
                    "input_data": 9,
                    "input_param": 3,
                    "input_parameter": 7,
                    "input_value": 9
                },
                "uVar1": {
                    "bit_count": 2,
                    "bit_count_shift_result": 1,
                    "bit_shifts_result": 1,
                    "bits_and_shifted_count": 1,
                    "bits_count_shifted": 1,
                    "bits_shift": 3,
                    "bits_shifted": 2,
                    "float_conversion_value": 1,
                    "num_bits_shifted": 1,
                    "shifted_bits_result": 1,
                    "shifted_value": 1
                }
            },
            "called": [
                "FUN_08004d78",
                "FUN_08000aa8",
                "FUN_08000e20",
                "FUN_08000c10",
                "FUN_08004ae0"
            ],
            "calling": [
                "FUN_0800491c"
            ],
            "code": "\nvoid calculate_normalized_floats_080049cc(int input_data)\n\n{\n  undefined4 bits_shift;\n  undefined4 result_2;\n  undefined4 result_1;\n  undefined4 current_time;\n  int iteration_count;\n  int iteration_counter;\n  undefined4 normalized_float4;\n  undefined4 normalized_float3;\n  undefined4 normalized_float2;\n  undefined4 normalized_float_c;\n  \n  iteration_count = 1;\n  normalized_float_c = 0;\n  normalized_float2 = 0;\n  normalized_float3 = 0;\n  normalized_float4 = 0;\n  current_time = (*DAT_20000a50)();\n  iteration_counter = 0;\n  while( true ) {\n    if (iteration_count <= iteration_counter) break;\n    result_1 = 0;\n    result_2 = 0;\n    extract_bits_and_shift(input_data);\n    calculate_improved_result(input_data,&result_1,&result_2);\n    normalized_float3 = calculate_normalized_float(normalized_float3,result_1);\n    normalized_float4 = calculate_normalized_float(normalized_float4,result_2);\n    normalized_float_c = calculate_normalized_float(normalized_float_c,*(undefined4 *)(input_data + 0x10));\n    normalized_float2 = calculate_normalized_float(normalized_float2,*(undefined4 *)(input_data + 0x14));\n    current_time = (*DAT_20000a50)();\n    iteration_counter = iteration_counter + 1;\n  }\n  bits_shift = count_bits_and_shift(iteration_count);\n  bits_shift = calculate_float_from_uint(normalized_float_c,bits_shift);\n  *(undefined4 *)(input_data + 0x1c) = bits_shift;\n  bits_shift = count_bits_and_shift(iteration_count);\n  bits_shift = calculate_float_from_uint(normalized_float2,bits_shift);\n  *(undefined4 *)(input_data + 0x20) = bits_shift;\n  bits_shift = count_bits_and_shift(iteration_count);\n  bits_shift = calculate_float_from_uint(normalized_float3,bits_shift);\n  *(undefined4 *)(input_data + 0x24) = bits_shift;\n  bits_shift = count_bits_and_shift(iteration_count);\n  bits_shift = calculate_float_from_uint(normalized_float4,bits_shift);\n  *(undefined4 *)(input_data + 0x28) = bits_shift;\n  return;\n}\n\n",
            "current_name": "calculate_normalized_floats_080049cc",
            "entrypoint": "0x080049cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080049cc": "calculate_normalized_floats_080049cc",
                "calculate_float_from_uint_08000e20": "calculate_float_from_uint",
                "calculate_improved_result_08004d78": "calculate_improved_result",
                "calculate_normalized_float_08000aa8": "calculate_normalized_float",
                "count_bits_and_shift_08000c10": "count_bits_and_shift",
                "extract_bits_and_shift_08004ae0": "extract_bits_and_shift",
                "local_10": "normalized_float2",
                "local_14": "normalized_float3",
                "local_18": "normalized_float4",
                "local_1c": "iteration_counter",
                "local_20": "iteration_count",
                "local_24": "current_time",
                "local_28": "result_1",
                "local_2c": "result_2",
                "local_c": "normalized_float_c",
                "param_1": "input_data",
                "uVar1": "bits_shift"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "additional_data": {
                "FUN_08004ae0": {
                    "count_and_shift_bits": 1,
                    "count_bits_and_shift": 2,
                    "decode_and_count_bits": 2,
                    "decompose_and_count_bits": 1,
                    "extract_and_count_bits": 5,
                    "extract_bit_count": 1,
                    "extract_bit_counts": 7,
                    "extract_bits": 1,
                    "extract_bits_and_shift": 7,
                    "extract_bits_from_value": 1,
                    "initialize_parameters": 1,
                    "parse_and_count_bits": 1,
                    "update_param_values": 1
                },
                "count_bits_and_shift_08000c10": {
                    "count_bits_and_shift": 4
                },
                "local_14": {
                    "bit_count6": 1,
                    "bit_count_1": 1,
                    "bit_count_6": 3,
                    "bit_count_result_20": 1,
                    "bit_value_combination_5": 1,
                    "bits_6": 1,
                    "input_variable6": 1,
                    "input_variable_7": 1,
                    "merged_bits_4_3": 1,
                    "shifted_value_6": 1,
                    "short6": 3,
                    "short_6": 4,
                    "short_7": 1,
                    "sixth_short": 2,
                    "temp_0x14": 1,
                    "temp_14": 1,
                    "temp_20": 3,
                    "value19": 1,
                    "value_19": 1,
                    "value_3": 1,
                    "value_6": 1
                },
                "local_16": {
                    "bit_count5": 1,
                    "bit_count_2": 1,
                    "bit_count_5": 3,
                    "bit_count_result_19": 1,
                    "bit_value_combination_4": 1,
                    "bits_5": 1,
                    "fifth_short": 2,
                    "input_variable5": 1,
                    "input_variable_3": 1,
                    "merged_bits_2_1": 1,
                    "shifted_value_5": 1,
                    "short5": 3,
                    "short_5": 4,
                    "short_6": 1,
                    "temp_0x16": 1,
                    "temp_16": 1,
                    "temp_19": 3,
                    "value18": 1,
                    "value_18": 1,
                    "value_2": 1,
                    "value_5": 1
                },
                "local_18": {
                    "bit_count4": 1,
                    "bit_count_3": 1,
                    "bit_count_4": 3,
                    "bit_count_result_18": 1,
                    "bit_value_combination_3": 1,
                    "bits_4": 1,
                    "fourth_short": 2,
                    "input_variable4": 1,
                    "input_variable_6": 1,
                    "shifted_bits_1": 1,
                    "shifted_value_4": 1,
                    "short4": 3,
                    "short_4": 4,
                    "short_5": 1,
                    "temp_0x18": 1,
                    "temp_18": 4,
                    "value17": 1,
                    "value_1": 1,
                    "value_17": 1,
                    "value_4": 1
                },
                "local_1a": {
                    "bit_count3": 1,
                    "bit_count_3": 3,
                    "bit_count_4": 1,
                    "bit_count_result_17": 1,
                    "bits_3": 1,
                    "input_variable3": 1,
                    "input_variable_5": 1,
                    "shifted_bits_4": 1,
                    "shifted_value_3": 1,
                    "short3": 3,
                    "short_3": 4,
                    "short_4": 1,
                    "temp_17": 3,
                    "third_short": 2,
                    "value_0": 1
                },
                "local_1c": {
                    "bit_count2": 1,
                    "bit_count_2": 3,
                    "bit_count_5": 1,
                    "bit_count_result_16": 1,
                    "bit_value_combination_2": 1,
                    "bits_2": 1,
                    "input_variable2": 1,
                    "input_variable_4": 1,
                    "second_short": 2,
                    "shifted_bits_2": 1,
                    "shifted_value_2": 1,
                    "short2": 3,
                    "short_2": 5,
                    "temp_0x1c": 1,
                    "temp_16": 3,
                    "temp_1c": 1,
                    "value16": 1,
                    "value_16": 1,
                    "value_3": 1,
                    "value_neg1": 1
                },
                "local_1e": {
                    "bit_count1": 1,
                    "bit_count_1": 3,
                    "bit_count_6": 1,
                    "bit_count_result_15": 1,
                    "bit_neg3": 1,
                    "bit_value_combination_1": 1,
                    "bits_1": 1,
                    "first_short": 2,
                    "input_variable1": 1,
                    "input_variable_2": 1,
                    "result": 1,
                    "shifted_bits_3": 1,
                    "shifted_value_1": 1,
                    "short1": 3,
                    "short_1": 4,
                    "short_3": 1,
                    "temp_0x1e": 1,
                    "temp_15": 3,
                    "temp_1e": 1,
                    "value15": 1,
                    "value_15": 1
                },
                "local_1f": {
                    "bit_count_result_14": 1,
                    "bit_neg2": 1,
                    "bit_value_14": 1,
                    "byte14": 3,
                    "byte_13": 1,
                    "byte_14": 4,
                    "fourteenth_byte": 1,
                    "fourteenth_variable": 1,
                    "shifted_result": 1,
                    "temp14": 1,
                    "temp_0x1f": 1,
                    "temp_12": 1,
                    "temp_14": 5,
                    "temp_1f": 1,
                    "temp_value_14": 1,
                    "temp_variable_12": 1,
                    "temp_variable_14": 1,
                    "unimportant_variable14": 1,
                    "unused_input_variable_13": 1,
                    "unused_var": 1,
                    "value14": 1,
                    "value_14": 1
                },
                "local_20": {
                    "bit_count_result_13": 1,
                    "bit_neg1": 1,
                    "bit_value_13": 1,
                    "byte13": 3,
                    "byte_12": 1,
                    "byte_13": 4,
                    "masked_result": 1,
                    "temp13": 1,
                    "temp_0x20": 1,
                    "temp_11": 1,
                    "temp_13": 5,
                    "temp_20": 1,
                    "temp_value_13": 1,
                    "temp_variable_11": 1,
                    "temp_variable_13": 1,
                    "thirteenth_byte": 1,
                    "thirteenth_variable": 1,
                    "unimportant_variable13": 1,
                    "unused_input_variable_12": 1,
                    "value13": 1,
                    "value_13": 1
                },
                "local_21": {
                    "bit_0": 1,
                    "bit_count_result_12": 1,
                    "bit_value_12": 1,
                    "byte12": 3,
                    "byte_11": 1,
                    "byte_12": 4,
                    "shift_count": 1,
                    "temp12": 1,
                    "temp_0x21": 1,
                    "temp_10": 1,
                    "temp_12": 5,
                    "temp_21": 1,
                    "temp_value_12": 1,
                    "temp_variable_10": 1,
                    "temp_variable_12": 1,
                    "twelfth_byte": 1,
                    "twelfth_variable": 1,
                    "unimportant_variable12": 1,
                    "unused_input_variable_11": 1,
                    "unused_var": 1,
                    "value12": 1,
                    "value_12": 1
                },
                "local_22": {
                    "bit_1": 1,
                    "bit_count": 1,
                    "bit_count_result_11": 1,
                    "bit_value_11": 1,
                    "byte11": 3,
                    "byte_10": 1,
                    "byte_11": 4,
                    "eleventh_byte": 1,
                    "eleventh_variable": 1,
                    "temp11": 1,
                    "temp_0x22": 1,
                    "temp_11": 5,
                    "temp_22": 1,
                    "temp_9": 1,
                    "temp_value_11": 1,
                    "temp_variable_11": 1,
                    "temp_variable_9": 1,
                    "unimportant_variable11": 1,
                    "unused_input_variable_10": 1,
                    "unused_var": 1,
                    "value11": 1,
                    "value_11": 1
                },
                "local_23": {
                    "bit_2": 1,
                    "bit_count_result_10": 1,
                    "bit_value_10": 1,
                    "byte10": 3,
                    "byte_10": 4,
                    "byte_9": 1,
                    "temp10": 1,
                    "temp_0x23": 1,
                    "temp_10": 5,
                    "temp_23": 1,
                    "temp_8": 1,
                    "temp_result": 1,
                    "temp_value_10": 1,
                    "temp_variable_10": 1,
                    "temp_variable_8": 1,
                    "tenth_byte": 1,
                    "tenth_variable": 1,
                    "unimportant_variable10": 1,
                    "unused_input_variable_9": 1,
                    "unused_var": 1,
                    "value10": 1,
                    "value_10": 1
                },
                "local_24": {
                    "bit_3": 1,
                    "bit_count_result_9": 1,
                    "bit_value_9": 1,
                    "byte9": 3,
                    "byte_8": 1,
                    "byte_9": 4,
                    "ninth_byte": 1,
                    "ninth_variable": 1,
                    "shifted_result": 1,
                    "temp9": 1,
                    "temp_0x24": 1,
                    "temp_24": 1,
                    "temp_7": 1,
                    "temp_9": 5,
                    "temp_value_9": 1,
                    "temp_variable_7": 1,
                    "temp_variable_9": 1,
                    "unimportant_variable9": 1,
                    "unused_input_variable_8": 1,
                    "unused_var": 1,
                    "value9": 1,
                    "value_9": 1
                },
                "local_25": {
                    "bit_4": 1,
                    "bit_count_result_8": 1,
                    "bit_value_8": 1,
                    "byte8": 3,
                    "byte_7": 1,
                    "byte_8": 4,
                    "eighth_byte": 1,
                    "eighth_variable": 1,
                    "shifted_temp": 1,
                    "temp8": 1,
                    "temp_0x25": 1,
                    "temp_25": 1,
                    "temp_6": 1,
                    "temp_8": 5,
                    "temp_value_8": 1,
                    "temp_variable_6": 1,
                    "temp_variable_8": 1,
                    "unimportant_variable8": 1,
                    "unused_input_variable_7": 1,
                    "unused_var": 1,
                    "value8": 1,
                    "value_8": 1
                },
                "local_26": {
                    "bit_5": 1,
                    "bit_count_result_7": 1,
                    "bit_value_7": 1,
                    "byte7": 3,
                    "byte_6": 1,
                    "byte_7": 4,
                    "seventh_byte": 1,
                    "seventh_variable": 1,
                    "shifted_accumulator": 1,
                    "temp7": 1,
                    "temp_0x26": 1,
                    "temp_26": 1,
                    "temp_5": 1,
                    "temp_7": 5,
                    "temp_value_7": 1,
                    "temp_variable_5": 1,
                    "temp_variable_7": 1,
                    "unimportant_variable7": 1,
                    "unused_input_variable_6": 1,
                    "unused_var": 1,
                    "value7": 1,
                    "value_7": 1
                },
                "local_27": {
                    "bit_6": 1,
                    "bit_count_result_6": 1,
                    "bit_value_6": 1,
                    "byte6": 3,
                    "byte_5": 1,
                    "byte_6": 4,
                    "shifted_mask": 1,
                    "sixth_byte": 1,
                    "sixth_variable": 1,
                    "temp6": 1,
                    "temp_0x27": 1,
                    "temp_27": 1,
                    "temp_4": 1,
                    "temp_6": 5,
                    "temp_value_6": 1,
                    "temp_variable_4": 1,
                    "temp_variable_6": 1,
                    "unimportant_variable6": 1,
                    "unused_input_variable_5": 1,
                    "unused_var": 1,
                    "value6": 1,
                    "value_6": 1
                },
                "local_28": {
                    "bit_7": 1,
                    "bit_count_result_5": 1,
                    "bit_value_5": 1,
                    "byte5": 3,
                    "byte_4": 1,
                    "byte_5": 4,
                    "fifth_byte": 1,
                    "fifth_variable": 1,
                    "shifted_value": 1,
                    "temp5": 1,
                    "temp_0x28": 1,
                    "temp_28": 1,
                    "temp_3": 1,
                    "temp_5": 5,
                    "temp_value_5": 1,
                    "temp_variable_3": 1,
                    "temp_variable_5": 1,
                    "unimportant_variable5": 1,
                    "unused_input_variable_4": 1,
                    "unused_var": 1,
                    "value5": 1,
                    "value_5": 1
                },
                "local_29": {
                    "accumulator": 1,
                    "bit_8": 1,
                    "bit_count_result_4": 1,
                    "bit_value_4": 1,
                    "byte4": 3,
                    "byte_3": 1,
                    "byte_4": 4,
                    "fourth_byte": 1,
                    "fourth_variable": 1,
                    "temp4": 1,
                    "temp_0x29": 1,
                    "temp_2": 1,
                    "temp_29": 1,
                    "temp_4": 5,
                    "temp_value_4": 1,
                    "temp_variable_2": 1,
                    "temp_variable_4": 1,
                    "unimportant_variable4": 1,
                    "unused_input_variable_3": 1,
                    "unused_var": 1,
                    "value4": 1,
                    "value_4": 1
                },
                "local_2a": {
                    "bit_9": 1,
                    "bit_count_result_3": 1,
                    "bit_value_3": 1,
                    "byte3": 3,
                    "byte_2": 1,
                    "byte_3": 4,
                    "mask": 1,
                    "temp3": 1,
                    "temp_0x2a": 1,
                    "temp_1": 1,
                    "temp_2a": 1,
                    "temp_3": 5,
                    "temp_value_3": 1,
                    "temp_variable_1": 1,
                    "temp_variable_3": 1,
                    "third_byte": 1,
                    "third_variable": 1,
                    "unimportant_variable3": 1,
                    "unused_input_variable_2": 1,
                    "unused_var": 1,
                    "value3": 1,
                    "value_3": 1
                },
                "local_2b": {
                    "bit_10": 1,
                    "bit_count_result_2": 1,
                    "bit_value_2": 1,
                    "byte2": 3,
                    "byte_0": 1,
                    "byte_2": 4,
                    "input_2": 1,
                    "input_byte_2": 1,
                    "second_byte": 1,
                    "second_variable": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_0x2b": 1,
                    "temp_2": 5,
                    "temp_2b": 1,
                    "temp_value_2": 1,
                    "temp_variable_2": 1,
                    "unimportant_variable2": 1,
                    "unused_input_variable_1": 1,
                    "unused_var": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "local_2c": {
                    "bit_11": 1,
                    "bit_count_result_1": 1,
                    "bit_value_1": 1,
                    "byte1": 3,
                    "byte_1": 5,
                    "extracted_byte": 1,
                    "first_byte": 1,
                    "first_variable": 1,
                    "input_1": 1,
                    "input_byte_1": 1,
                    "input_variable_1": 1,
                    "temp1": 1,
                    "temp_0x2c": 1,
                    "temp_1": 5,
                    "temp_2c": 1,
                    "temp_value_1": 1,
                    "temp_variable_1": 1,
                    "unimportant_variable1": 1,
                    "value": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "param_1": {
                    "bit_counts": 1,
                    "output": 1,
                    "output_array": 9,
                    "param_values": 1,
                    "result": 4,
                    "result_array": 15
                },
                "uVar1": {
                    "bits_and_shift_result": 1,
                    "shifted_value": 1,
                    "updated_value": 1
                }
            },
            "called": [
                "FUN_08000c10"
            ],
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "code": "\nvoid extract_bits_and_shift_08004ae0(undefined4 *result_array)\n\n{\n  undefined4 updated_value;\n  undefined temp_1;\n  undefined temp_2;\n  undefined temp_3;\n  undefined temp_4;\n  undefined temp_5;\n  undefined temp_6;\n  undefined temp_7;\n  undefined temp_8;\n  undefined temp_9;\n  undefined temp_10;\n  undefined temp_11;\n  undefined temp_12;\n  undefined temp_13;\n  undefined temp_14;\n  short short_1;\n  short short_2;\n  short short_3;\n  short temp_18;\n  short short_5;\n  short short_6;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&temp_1,0xe);\n  short_6 = CONCAT11(temp_3,temp_4);\n  short_5 = CONCAT11(temp_5,temp_6);\n  temp_18 = CONCAT11(temp_7,temp_8);\n  short_3 = CONCAT11(temp_9,temp_10);\n  short_2 = CONCAT11(temp_11,temp_12);\n  short_1 = CONCAT11(temp_13,temp_14);\n  updated_value = count_bits_and_shift((int)CONCAT11(temp_1,temp_2));\n  *result_array = updated_value;\n  updated_value = count_bits_and_shift((int)short_6);\n  result_array[1] = updated_value;\n  updated_value = count_bits_and_shift((int)short_5);\n  result_array[2] = updated_value;\n  updated_value = count_bits_and_shift((int)temp_18);\n  result_array[3] = updated_value;\n  updated_value = count_bits_and_shift((int)short_3);\n  result_array[4] = updated_value;\n  updated_value = count_bits_and_shift((int)short_2);\n  result_array[5] = updated_value;\n  updated_value = count_bits_and_shift((int)short_1);\n  result_array[6] = updated_value;\n  return;\n}\n\n",
            "current_name": "extract_bits_and_shift_08004ae0",
            "entrypoint": "0x08004ae0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ae0": "extract_bits_and_shift_08004ae0",
                "count_bits_and_shift_08000c10": "count_bits_and_shift",
                "local_14": "short_6",
                "local_16": "short_5",
                "local_18": "temp_18",
                "local_1a": "short_3",
                "local_1c": "short_2",
                "local_1e": "short_1",
                "local_1f": "temp_14",
                "local_20": "temp_13",
                "local_21": "temp_12",
                "local_22": "temp_11",
                "local_23": "temp_10",
                "local_24": "temp_9",
                "local_25": "temp_8",
                "local_26": "temp_7",
                "local_27": "temp_6",
                "local_28": "temp_5",
                "local_29": "temp_4",
                "local_2a": "temp_3",
                "local_2b": "temp_2",
                "local_2c": "temp_1",
                "param_1": "result_array",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "additional_data": {
                "DAT_20000005": {
                    "flag": 1
                },
                "DAT_200009e4": {
                    "result": 1
                },
                "FUN_08004bd8": {
                    "calculate_and_assign_result": 4,
                    "calculate_and_improve_result": 2,
                    "calculate_and_return_float_result": 1,
                    "calculate_and_return_result": 1,
                    "calculate_and_store_result": 7,
                    "calculate_and_update_result": 1,
                    "calculate_and_update_value": 1,
                    "calculate_final_result": 1,
                    "calculate_improved_result": 5,
                    "calculate_improved_value": 1,
                    "calculate_result": 5,
                    "improve_and_calculate": 1,
                    "improve_func": 1
                },
                "calculate_arithmetic_result_0800015c": {
                    "calculate_arithmetic_result": 4
                },
                "calculate_float_value_080009fc": {
                    "calculate_float_value": 4
                },
                "calculate_floating_point_result_thunk_08005838": {
                    "calculate_floating_point_result": 2,
                    "calculate_floating_point_result_thunk": 2
                },
                "calculate_floating_point_value_0800071c": {
                    "calculate_floating_point_value": 4
                },
                "calculate_improved_result_080004c8": {
                    "calculate_improved_result": 4
                },
                "calculate_new_float_08000aa4": {
                    "calculate_new_float": 4
                },
                "calculate_result_08000158": {
                    "calculate_result": 4
                },
                "param_1": {
                    "data": 1,
                    "input": 4,
                    "input_data": 18,
                    "input_param": 4,
                    "input_parameter": 2,
                    "input_value": 2
                },
                "param_2": {
                    "output": 5,
                    "output_data": 15,
                    "output_param": 4,
                    "output_parameter": 2,
                    "output_result": 2,
                    "output_value": 2,
                    "result": 1
                },
                "reverse_unsigned_long_long_bits_08000418": {
                    "reverse_bits": 1,
                    "reverse_ulong_long_bits": 1,
                    "reverse_unsigned_long_long_bits": 1
                },
                "uVar1": {
                    "calculated_float_1": 1,
                    "new_float": 7,
                    "new_float1": 1,
                    "new_float_val_1": 1,
                    "new_float_value": 12,
                    "new_float_value1": 2,
                    "new_float_value_1": 2,
                    "new_value1": 1,
                    "result_1": 1
                },
                "uVar2": {
                    "new_unsigned_long_long_1": 1,
                    "new_value2": 1,
                    "result_2": 1,
                    "reverse_bits": 1,
                    "reverse_bits1": 3,
                    "reverse_bits_1": 1,
                    "reverse_unsigned_long_long": 1,
                    "reversed_bit_value1": 1,
                    "reversed_bits": 1,
                    "reversed_bits1": 3,
                    "reversed_bits_1": 3,
                    "reversed_bits_val_1": 1,
                    "reversed_bits_value": 3,
                    "reversed_bits_value1": 1,
                    "reversed_bits_value_1": 1,
                    "reversed_unsigned_long_long_bits_1": 1,
                    "reversed_val": 1,
                    "reversed_value1": 1,
                    "reversed_value_1": 1,
                    "unsigned_long_long_bits_1": 1
                },
                "uVar3": {
                    "improved_result": 1,
                    "new_unsigned_long_long_2": 1,
                    "new_value3": 1,
                    "result_3": 1,
                    "reverse_bits2": 3,
                    "reverse_bits_2": 2,
                    "reverse_float_value": 1,
                    "reversed_bit_value2": 1,
                    "reversed_bits2": 3,
                    "reversed_bits_2": 3,
                    "reversed_bits_val_2": 1,
                    "reversed_bits_value2": 2,
                    "reversed_bits_value_2": 2,
                    "reversed_new_float": 2,
                    "reversed_unsigned_long_long_bits_2": 1,
                    "reversed_value2": 1,
                    "reversed_value_2": 1,
                    "unsigned_long_long_bits_2": 1
                }
            },
            "called": [
                "FUN_08000418",
                "thunk_FUN_08005838",
                "FUN_080009fc",
                "FUN_08000158",
                "FUN_08000aa4",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_0800015c"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid calculate_and_store_result_08004bd8(int input_data,undefined4 *output_data)\n\n{\n  undefined4 new_float_value;\n  undefined8 reversed_bits1;\n  undefined8 reversed_bits2;\n  \n  new_float_value = calculate_new_float(*(undefined4 *)(input_data + 0x10),*(undefined4 *)(input_data + 0x1c));\n  reversed_bits1 = reverse_bits(DAT_200009e4);\n  reversed_bits2 = reverse_bits(new_float_value);\n  reversed_bits2 = calculate_improved_result((int)reversed_bits2,(int)((ulonglong)reversed_bits2 >> 0x20),0x83f5c366,0x3f340215);\n  reversed_bits1 = calculate_arithmetic_result((int)reversed_bits1,(int)((ulonglong)reversed_bits1 >> 0x20),(int)reversed_bits2,\n                       (int)((ulonglong)reversed_bits2 >> 0x20));\n  DAT_200009e4 = calculate_float_value((int)reversed_bits1,(int)((ulonglong)reversed_bits1 >> 0x20));\n  reversed_bits1 = reverse_bits(*(undefined4 *)(input_data + 4));\n  reversed_bits1 = calculate_floating_point_value((int)reversed_bits1,(int)((ulonglong)reversed_bits1 >> 0x20),0,0x40b00000);\n  reversed_bits2 = reverse_bits(*(undefined4 *)(input_data + 8));\n  reversed_bits2 = calculate_floating_point_value((int)reversed_bits2,(int)((ulonglong)reversed_bits2 >> 0x20),0,0x40b00000);\n  reversed_bits1 = calculate_floating_point_result((int)reversed_bits1,(int)((ulonglong)reversed_bits1 >> 0x20),(int)reversed_bits2,\n                             (int)((ulonglong)reversed_bits2 >> 0x20));\n  reversed_bits1 = calculate_improved_result((int)reversed_bits1,(int)((ulonglong)reversed_bits1 >> 0x20),0,0x40668000);\n  reversed_bits1 = calculate_floating_point_value((int)reversed_bits1,(int)((ulonglong)reversed_bits1 >> 0x20),0x54442d18,0x400921fb);\n  reversed_bits2 = reverse_bits(*(undefined4 *)(input_data + 0x24));\n  reversed_bits1 = calculate_result((int)reversed_bits1,(int)((ulonglong)reversed_bits1 >> 0x20),(int)reversed_bits2,\n                       (int)((ulonglong)reversed_bits2 >> 0x20));\n  reversed_bits1 = calculate_arithmetic_result((int)reversed_bits1,(int)((ulonglong)reversed_bits1 >> 0x20),0,0x40568000);\n  new_float_value = calculate_float_value((int)reversed_bits1,(int)((ulonglong)reversed_bits1 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    reversed_bits1 = reverse_bits(DAT_200009e4);\n    reversed_bits1 = calculate_improved_result((int)reversed_bits1,(int)((ulonglong)reversed_bits1 >> 0x20),0x9999999a,0x3fe99999);\n    reversed_bits2 = reverse_bits(new_float_value);\n    reversed_bits2 = calculate_improved_result((int)reversed_bits2,(int)((ulonglong)reversed_bits2 >> 0x20),0x9999999a,0x3fc99999);\n    reversed_bits1 = calculate_arithmetic_result((int)reversed_bits1,(int)((ulonglong)reversed_bits1 >> 0x20),(int)reversed_bits2,\n                         (int)((ulonglong)reversed_bits2 >> 0x20));\n    DAT_200009e4 = calculate_float_value((int)reversed_bits1,(int)((ulonglong)reversed_bits1 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = new_float_value;\n  }\n  *output_data = DAT_200009e4;\n  return;\n}\n\n",
            "current_name": "calculate_and_store_result_08004bd8",
            "entrypoint": "0x08004bd8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bd8": "calculate_and_store_result_08004bd8",
                "calculate_arithmetic_result_0800015c": "calculate_arithmetic_result",
                "calculate_float_value_080009fc": "calculate_float_value",
                "calculate_floating_point_result_thunk_08005838": "calculate_floating_point_result",
                "calculate_floating_point_value_0800071c": "calculate_floating_point_value",
                "calculate_improved_result_080004c8": "calculate_improved_result",
                "calculate_new_float_08000aa4": "calculate_new_float",
                "calculate_result_08000158": "calculate_result",
                "param_1": "input_data",
                "param_2": "output_data",
                "reverse_unsigned_long_long_bits_08000418": "reverse_bits",
                "uVar1": "new_float_value",
                "uVar2": "reversed_bits1",
                "uVar3": "reversed_bits2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d78": {
            "additional_data": {
                "FUN_08004d78": {
                    "calculate_and_assign_float_values": 8,
                    "calculate_and_assign_floating_point_values": 1,
                    "calculate_and_assign_results": 3,
                    "calculate_and_store_results": 2,
                    "calculate_float_results": 1,
                    "calculate_floating_point": 1,
                    "calculate_floating_point_values": 1,
                    "calculate_improved_float_values": 1,
                    "calculate_improved_result": 1,
                    "calculate_result": 10,
                    "calculate_results": 1,
                    "calculate_values": 1
                },
                "param_1": {
                    "input": 1,
                    "input_array": 6,
                    "input_float_values": 1,
                    "input_params": 1,
                    "input_values": 18,
                    "input_values_1": 1,
                    "values": 1
                },
                "param_2": {
                    "output_1": 3,
                    "output_array1": 1,
                    "output_array_1": 1,
                    "output_float_value_1": 1,
                    "output_param2": 1,
                    "output_param_1": 1,
                    "output_value1": 1,
                    "output_value_1": 17,
                    "output_var1": 1,
                    "output_variable_1": 1,
                    "result1": 1
                },
                "param_3": {
                    "output_2": 3,
                    "output_array2": 1,
                    "output_array_2": 1,
                    "output_float_value_2": 1,
                    "output_param3": 1,
                    "output_param_2": 1,
                    "output_value2": 1,
                    "output_value_2": 17,
                    "output_var2": 1,
                    "output_variable_2": 1,
                    "result2": 1
                },
                "uVar1": {
                    "converted_input_value1": 1,
                    "converted_value_1": 1,
                    "float1": 5,
                    "float_1": 3,
                    "float_result_1": 2,
                    "float_val_1": 2,
                    "float_value1": 2,
                    "float_value_1": 7,
                    "result1": 2,
                    "result_1": 5,
                    "var_1": 1
                },
                "uVar2": {
                    "converted_input_value2": 1,
                    "converted_value_2": 1,
                    "float2": 5,
                    "float_2": 3,
                    "float_result_2": 2,
                    "float_val_2": 2,
                    "float_value2": 2,
                    "float_value_2": 7,
                    "result2": 2,
                    "result_2": 5,
                    "var_2": 1
                },
                "uVar3": {
                    "converted_input_value3": 1,
                    "converted_value_3": 1,
                    "float3": 5,
                    "float_3": 3,
                    "float_result_3": 2,
                    "float_val_3": 2,
                    "float_value3": 2,
                    "float_value_3": 7,
                    "result3": 2,
                    "result_3": 5,
                    "var_3": 1
                },
                "uVar4": {
                    "float_result_4": 1,
                    "intermediate_1": 1,
                    "intermediate_result": 1,
                    "intermediate_result1": 1,
                    "intermediate_result_1": 1,
                    "result": 1,
                    "result1": 5,
                    "result_1": 11,
                    "result_value1": 1,
                    "result_variable_1": 1,
                    "reverse_float": 1,
                    "temp_result": 1,
                    "temp_result_1": 1,
                    "temp_value_1": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "thunk_result_1": 1
                },
                "uVar5": {
                    "float_result_5": 1,
                    "intermediate_2": 1,
                    "intermediate_result2": 1,
                    "intermediate_result_2": 2,
                    "result2": 5,
                    "result_2": 11,
                    "result_value2": 1,
                    "result_variable_2": 1,
                    "reverse_float_2": 1,
                    "reversed_result": 1,
                    "temp_result2": 1,
                    "temp_result_2": 1,
                    "temp_value_2": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "thunk_result_2": 1
                }
            },
            "called": [
                "thunk_FUN_08005838",
                "FUN_08000418",
                "FUN_080009fc",
                "FUN_080004c8",
                "FUN_08000e20",
                "FUN_0800071c"
            ],
            "calling": [
                "FUN_080049cc"
            ],
            "code": "\nvoid calculate_improved_result_08004d78(undefined4 *input_values,undefined4 *output_value_1,undefined4 *output_value_2)\n\n{\n  undefined4 float_value_1;\n  undefined4 float_value_2;\n  undefined4 float_value_3;\n  undefined8 result_1;\n  undefined8 result_2;\n  \n  float_value_1 = calculate_float_from_uint_08000e20(*input_values,0x45800000);\n  float_value_2 = calculate_float_from_uint_08000e20(input_values[1],0x45800000);\n  float_value_3 = calculate_float_from_uint_08000e20(input_values[2],0x45800000);\n  result_1 = reverse_unsigned_long_long_bits_08000418(float_value_2);\n  result_2 = reverse_unsigned_long_long_bits_08000418(float_value_3);\n  result_1 = calculate_floating_point_result_thunk_08005838((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                             (int)((ulonglong)result_2 >> 0x20));\n  result_1 = calculate_improved_result_08004d78_080004c8((int)result_1,(int)((ulonglong)result_1 >> 0x20),0,0x40668000);\n  result_1 = calculate_floating_point_value_0800071c((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x54442d18,0x400921fb);\n  float_value_2 = calculate_float_value_080009fc((int)result_1,(int)((ulonglong)result_1 >> 0x20));\n  result_1 = reverse_unsigned_long_long_bits_08000418(float_value_1);\n  result_2 = reverse_unsigned_long_long_bits_08000418(float_value_3);\n  result_1 = calculate_floating_point_result_thunk_08005838((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                             (int)((ulonglong)result_2 >> 0x20));\n  result_1 = calculate_improved_result_08004d78_080004c8((int)result_1,(int)((ulonglong)result_1 >> 0x20),0,0x40668000);\n  result_1 = calculate_floating_point_value_0800071c((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x54442d18,0x400921fb);\n  float_value_1 = calculate_float_value_080009fc((int)result_1,(int)((ulonglong)result_1 >> 0x20));\n  *output_value_1 = float_value_2;\n  *output_value_2 = float_value_1;\n  return;\n}\n\n",
            "current_name": "calculate_improved_result_08004d78",
            "entrypoint": "0x08004d78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d78": "calculate_improved_result_08004d78",
                "param_1": "input_values",
                "param_2": "output_value_1",
                "param_3": "output_value_2",
                "uVar1": "float_value_1",
                "uVar2": "float_value_2",
                "uVar3": "float_value_3",
                "uVar4": "result_1",
                "uVar5": "result_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "additional_data": {
                "": {
                    "": 1
                },
                "FUN_08004e6c": {
                    "execute_software_interrupt": 3,
                    "execute_system_call": 7,
                    "execute_system_interrupt": 1,
                    "generate_software_interrupt": 1,
                    "interrupt_function": 1,
                    "interrupt_system_call": 1,
                    "invoke_software_interrupt": 1,
                    "invoke_system_call": 1,
                    "invoke_system_interrupt": 4,
                    "issue_software_interrupt": 1,
                    "perform_software_interrupt": 2,
                    "perform_system_call": 1,
                    "send_interrupt_signal": 1,
                    "send_software_interrupt": 2,
                    "trigger_software_interrupt": 3,
                    "trigger_system_interrupt": 1
                },
                "PTR_0807e7f0": {
                    "unimportant_pointer": 1
                },
                "PTR_0807e7f4": {
                    "unimportant_pointer2": 1
                },
                "software_interrupt": {
                    "execute_interrupt": 5,
                    "execute_system_interrupt": 1,
                    "interrupt_code": 1,
                    "interrupt_number": 1,
                    "invoke_interrupt": 6,
                    "invoke_system_call": 1,
                    "issue_interrupt": 1,
                    "perform_interrupt": 3,
                    "trigger_interrupt": 3,
                    "trigger_software_interrupt": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e74"
            ],
            "code": "\nvoid execute_system_call_08004e6c(void)\n\n{\n  invoke_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "execute_system_call_08004e6c",
            "entrypoint": "0x08004e6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e6c": "execute_system_call_08004e6c",
                "software_interrupt": "invoke_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e74": {
            "additional_data": {
                "FUN_08004e74": {
                    "call_system_function": 1,
                    "execute_if_call_not_zero": 1,
                    "execute_if_condition_false": 1,
                    "execute_if_condition_satisfied": 1,
                    "execute_or_return": 3,
                    "execute_or_return_zero": 4,
                    "execute_or_skip_system_call": 5,
                    "execute_system_call": 5,
                    "execute_system_call_if_data_not_present": 1,
                    "execute_system_call_if_flag_is_zero": 1,
                    "execute_system_call_if_flag_unset": 1,
                    "execute_system_call_if_not_executed": 1,
                    "execute_system_call_if_not_initialized": 2,
                    "execute_system_call_if_zero": 1,
                    "execute_system_call_or_return_zero": 1,
                    "process_system_call": 1
                },
                "param_1": {
                    "arg": 3,
                    "argument": 3,
                    "data": 1,
                    "flag": 1,
                    "input": 2,
                    "input_param": 6,
                    "input_parameter": 7,
                    "input_value": 5,
                    "system_call_argument": 2,
                    "system_call_param": 1
                },
                "uVar1": {
                    "output_var": 1,
                    "result": 27,
                    "return_value": 3
                }
            },
            "called": [
                "FUN_08004e6c"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nundefined4 execute_or_skip_system_call_08004e74(undefined4 input_parameter)\n\n{\n  undefined4 result;\n  \n  if (DAT_200009f0 == 0) {\n    result = execute_system_call_08004e6c(1,input_parameter,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "execute_or_skip_system_call_08004e74",
            "entrypoint": "0x08004e74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e74": "execute_or_skip_system_call_08004e74",
                "param_1": "input_parameter",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "additional_data": {
                "DAT_20000008": {
                    "constant_data": 1,
                    "default_data": 1
                },
                "DAT_20000a88": {
                    "data_array": 1,
                    "data_buffer": 1
                },
                "FUN_08004ea4": {
                    "process_and_return": 2,
                    "process_and_return_data": 8,
                    "process_data": 19,
                    "process_data_function": 1,
                    "process_data_with_params": 1
                },
                "param_1": {
                    "data": 2,
                    "data1": 2,
                    "data_1": 4,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_x": 1,
                    "input1": 1,
                    "input_1": 8,
                    "input_a": 1,
                    "input_data_1": 1,
                    "input_param1": 2,
                    "input_param_1": 5,
                    "input_variable_1": 1,
                    "param1": 1
                },
                "param_2": {
                    "config": 1,
                    "config_ptr": 1,
                    "data2": 2,
                    "data_2": 4,
                    "data_size": 1,
                    "data_y": 1,
                    "input2": 1,
                    "input_2": 8,
                    "input_b": 1,
                    "input_data_2": 1,
                    "input_param2": 2,
                    "input_param_2": 5,
                    "input_variable_2": 1,
                    "length": 1,
                    "param2": 1
                },
                "param_3": {
                    "count": 4,
                    "data_length": 2,
                    "flag": 1,
                    "input_param3": 1,
                    "input_param_3": 5,
                    "input_variable_3": 1,
                    "integer_param": 1,
                    "length": 1,
                    "param": 1,
                    "param3": 1,
                    "param_3_value": 1,
                    "size": 4,
                    "value1": 1,
                    "value_1": 6,
                    "value_c": 1
                },
                "param_4": {
                    "config": 1,
                    "data_info": 2,
                    "flag": 3,
                    "flags": 1,
                    "format": 1,
                    "input_param4": 1,
                    "input_param_4": 5,
                    "input_variable_4": 1,
                    "option": 1,
                    "options": 2,
                    "param4": 1,
                    "param_4_value": 1,
                    "short_param": 1,
                    "value": 2,
                    "value2": 1,
                    "value_2": 6,
                    "value_d": 1
                },
                "process_data_08001ccc": {
                    "data_processor": 1,
                    "process_data": 1,
                    "process_data_helper": 4
                },
                "return": {
                    "void": 1
                }
            },
            "called": [
                "FUN_08001ccc"
            ],
            "calling": [],
            "code": "\nvoid process_and_return_data_08004ea4(undefined input_1,undefined input_2,undefined4 value_1,undefined2 value_2)\n\n{\n  process_data_helper(&DAT_20000a88,input_1,input_2,1,value_1,value_2,DAT_20000008);\n  void;\n}\n\n",
            "current_name": "process_and_return_data_08004ea4",
            "entrypoint": "0x08004ea4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ea4": "process_and_return_data_08004ea4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "value_1",
                "param_4": "value_2",
                "process_data_08001ccc": "process_data_helper",
                "return": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "additional_data": {
                "DAT_20000008": {
                    "constant": 4,
                    "constant_value": 1
                },
                "DAT_20000a88": {
                    "buffer": 1,
                    "data_array": 1,
                    "data_buffer": 1,
                    "decoded_data": 1
                },
                "FUN_08004ee8": {
                    "decode_and_process_data": 13,
                    "process_and_decode_data": 5,
                    "process_data": 9,
                    "process_decoded_data": 3,
                    "process_encoded_data": 1
                },
                "dataPtr": {
                    "data_ptr": 1
                },
                "decodeAndProcessData": {
                    "decode_and_process_data": 1
                },
                "decode_and_process_data_08001f6c": {
                    "decode_and_process": 2,
                    "decode_and_process_data": 2,
                    "decode_and_process_data_internal": 1,
                    "decode_and_process_function": 1
                },
                "flag": {
                    "flag": 1
                },
                "infoPtr": {
                    "info_ptr": 1
                },
                "param_1": {
                    "data": 1,
                    "data1": 2,
                    "data_1": 1,
                    "data_buffer": 2,
                    "data_param": 2,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "input1": 3,
                    "input_1": 4,
                    "input_data": 6,
                    "input_data1": 1,
                    "input_param": 2,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "param1": 1
                },
                "param_2": {
                    "additional_data": 2,
                    "additional_input": 1,
                    "additional_param": 1,
                    "buffer": 2,
                    "buffer_param": 1,
                    "config_param": 1,
                    "data2": 2,
                    "data_2": 1,
                    "data_size": 2,
                    "info_ptr": 1,
                    "input2": 3,
                    "input_2": 4,
                    "input_data": 1,
                    "input_data2": 1,
                    "input_length": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_size": 1,
                    "length": 2,
                    "output_param": 1,
                    "param2": 1
                },
                "param_3": {
                    "config_param": 1,
                    "count": 4,
                    "count_param": 1,
                    "data_argument": 1,
                    "flag": 2,
                    "input_param3": 1,
                    "length": 6,
                    "length_param": 1,
                    "param1": 1,
                    "param3": 1,
                    "param_3_value": 1,
                    "param_a": 1,
                    "parameter_3": 1,
                    "size": 1,
                    "size_param": 3,
                    "value1": 2,
                    "value_1": 3
                },
                "param_4": {
                    "config_param": 1,
                    "data_format": 1,
                    "data_param": 1,
                    "flag": 3,
                    "flag_param": 1,
                    "flags": 4,
                    "flags_param": 1,
                    "format_param": 2,
                    "input_param4": 1,
                    "option": 1,
                    "options": 1,
                    "output_data": 1,
                    "param": 1,
                    "param2": 1,
                    "param4": 1,
                    "param_4_value": 1,
                    "param_b": 1,
                    "parameter_4": 1,
                    "value": 2,
                    "value2": 2,
                    "value_2": 3
                },
                "size": {
                    "size": 1
                }
            },
            "called": [
                "FUN_08001f6c"
            ],
            "calling": [],
            "code": "\nvoid process_and_decode_data_08004ee8(undefined input_data,undefined input_2,undefined4 length,undefined2 flags)\n\n{\n  decode_and_process(&DAT_20000a88,input_data,input_2,1,length,flags,DAT_20000008);\n  return;\n}\n\n",
            "current_name": "process_and_decode_data_08004ee8",
            "entrypoint": "0x08004ee8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ee8": "process_and_decode_data_08004ee8",
                "decode_and_process_data_08001f6c": "decode_and_process",
                "param_1": "input_data",
                "param_2": "input_2",
                "param_3": "length",
                "param_4": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "additional_data": {
                "FUN_08004f2c": {
                    "get_data_value": 27,
                    "get_data_value_from_binary": 1,
                    "retrieve_data_value": 3
                },
                "uVar1": {
                    "data_value": 28,
                    "result": 2
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [],
            "code": "\nundefined4 get_data_value_from_binary_08004f2c(void)\n\n{\n  undefined4 data_value;\n  \n  data_value = get_data_value_080015a0();\n  return data_value;\n}\n\n",
            "current_name": "get_data_value_from_binary_08004f2c",
            "entrypoint": "0x08004f2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f2c": "get_data_value_from_binary_08004f2c",
                "uVar1": "data_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "additional_data": {
                "0x32": {
                    "constant_value": 1
                },
                "FUN_08004f3c": {
                    "process_and_check_data": 1,
                    "process_data": 30
                },
                "check_and_process_data_08004436": {
                    "check_and_process_data": 3
                },
                "param_1": {
                    "data": 8,
                    "data_1": 2,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_param": 10,
                    "data_ptr": 4,
                    "input_1": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "param_ptr": 1,
                    "parameter_1": 1
                },
                "param_2": {
                    "additional_param": 1,
                    "data_2": 2,
                    "data_length": 2,
                    "data_ptr": 1,
                    "data_segment": 1,
                    "data_size": 2,
                    "flag_param": 4,
                    "index_param": 2,
                    "info_param": 2,
                    "input_2": 1,
                    "input_data": 1,
                    "input_value": 2,
                    "length": 4,
                    "other_param": 1,
                    "param": 1,
                    "parameter_2": 1,
                    "size": 2,
                    "value": 1
                }
            },
            "called": [
                "FUN_08004436"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid process_and_check_data_08004f3c(undefined4 data_param,undefined2 flag_param)\n\n{\n  check_and_process_data(&DAT_20000adc,data_param,flag_param,0x32);\n  return;\n}\n\n",
            "current_name": "process_and_check_data_08004f3c",
            "entrypoint": "0x08004f3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f3c": "process_and_check_data_08004f3c",
                "check_and_process_data_08004436": "check_and_process_data",
                "param_1": "data_param",
                "param_2": "flag_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f60": {
            "additional_data": {
                "0": {
                    "byte_value": 3,
                    "fill_byte": 1,
                    "start_address": 1,
                    "start_offset": 1
                },
                "0x40": {
                    "byte_count": 2,
                    "byte_to_fill": 1,
                    "length": 1,
                    "num_bytes": 2,
                    "size": 2
                },
                "DAT_20000ba8": {
                    "memory": 1,
                    "memory_address": 3,
                    "memory_block": 11,
                    "memory_data": 1,
                    "memory_start_address": 1,
                    "memory_to_clear": 1
                },
                "FUN_08004f60": {
                    "clear_memory": 8,
                    "initialize_memory": 23
                },
                "fill_memory_with_byte_08005d68": {
                    "fill_memory": 14,
                    "fill_memory_with_byte": 7,
                    "fill_memory_with_zero_bytes": 1,
                    "memset": 1
                },
                "void": {
                    "": 1
                }
            },
            "called": [
                "FUN_08005d68"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid initialize_memory_08004f60(void)\n\n{\n  fill_memory(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "current_name": "initialize_memory_08004f60",
            "entrypoint": "0x08004f60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f60": "initialize_memory_08004f60",
                "fill_memory_with_byte_08005d68": "fill_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f78": {
            "additional_data": {
                "DAT_20000010": {
                    "string1": 2
                },
                "DAT_20000014": {
                    "float1": 1
                },
                "DAT_200009f4": {
                    "string2": 1,
                    "u_int2": 1
                },
                "DAT_200009f8": {
                    "new_float": 1,
                    "new_float1": 1
                },
                "DAT_200009fc": {
                    "new_float2": 1,
                    "prev_float": 1
                },
                "DAT_20000a00": {
                    "uint1": 1
                },
                "DAT_20000a04": {
                    "u_int1": 1,
                    "uint2": 1
                },
                "DAT_20000a08": {
                    "uint3": 1
                },
                "DAT_20000a58": {
                    "float3": 1
                },
                "DAT_20000b1c": {
                    "memory": 1
                },
                "DAT_20000b5c": {
                    "float2": 1,
                    "normalized_float1": 1
                },
                "DAT_20000be8": {
                    "float1": 1,
                    "float_from_uint1": 1
                },
                "FUN_08004f78": {
                    "calculate_and_store_pitch": 1,
                    "calculate_and_store_result": 1,
                    "extract_and_calculate": 1,
                    "extract_and_process_data": 3,
                    "extract_bits_and_shift": 1,
                    "extract_calculate_and_print_results": 1,
                    "extract_calculate_initialize_reverse_and_set": 1,
                    "extract_process_and_store_data": 1,
                    "extract_process_data": 1,
                    "perform_data_processing": 1,
                    "process_binary_data": 1,
                    "process_data": 16,
                    "rearrange_data_and_calculate": 1
                },
                "calculate_and_store_result_08004bd8": {
                    "calculate_and_store_result": 18,
                    "calculate_result": 1
                },
                "calculate_float_from_u_int_08000cb8": {
                    "calculate_float_from_int": 1,
                    "calculate_float_from_u_int": 17,
                    "convert_float_from_u_int": 1
                },
                "calculate_new_float_08000aa4": {
                    "calculate_new_float": 19
                },
                "calculate_normalized_float_08000aa8": {
                    "calculate_normalized_float": 18,
                    "normalize_float": 1
                },
                "check_if_string_is_empty_08000ff4": {
                    "check_if_string_is_empty": 18,
                    "is_string_empty": 1
                },
                "clear_local_memory_08005dfc": {
                    "clear_local_memory": 18,
                    "clear_memory": 1
                },
                "count_bits_and_shift_08000c10": {
                    "count_bits": 1,
                    "count_bits_and_shift": 18
                },
                "extract_bits_and_shift_08004ae0": {
                    "extract_and_shift_bits": 7,
                    "extract_bits": 1,
                    "extract_bits_and_shift": 11
                },
                "iVar2": {
                    "check": 1,
                    "check_result": 1,
                    "check_value": 1,
                    "empty_string_flag": 1,
                    "is_empty": 15,
                    "is_empty_string": 1,
                    "is_empty_string_flag": 1,
                    "is_string_empty": 1,
                    "result": 1,
                    "result2": 1,
                    "status": 1
                },
                "initialize_memory_08004f60": {
                    "initialize_memory": 19
                },
                "isEmpty": {
                    "is_empty": 1
                },
                "is_empty_string_08001030": {
                    "check_if_empty_string": 1,
                    "is_empty_string": 18
                },
                "local_11": {
                    "bit_value": 1,
                    "pitch": 21,
                    "pitch_byte": 1,
                    "pitch_value": 2
                },
                "performDataProcessing": {
                    "perform_data_processing": 1
                },
                "pitch": {
                    "pitch": 1
                },
                "process_and_check_data_08004f3c": {
                    "process_and_check_data": 18,
                    "process_data_and_check": 1
                },
                "resultCount": {
                    "result_count": 1
                },
                "reverse_and_count_leading_zeros_08005e40": {
                    "reverse_and_count_leading_zeros": 18,
                    "reverse_and_count_zeros": 1
                },
                "reverse_and_shift_bits_08001044": {
                    "reverse_and_shift_bits": 19
                },
                "reverse_bits_08000c08": {
                    "reverse_bits": 19
                },
                "reverse_unsigned_long_long_bits_08000418": {
                    "reverse_bits": 11,
                    "reverse_ull_bits": 3,
                    "reverse_unsigned_ll_bits": 1,
                    "reverse_unsigned_long_long_bits": 4
                },
                "reversedBits": {
                    "reversed_bits": 1
                },
                "set_param_value_based_on_flag_08001a80": {
                    "set_param_value_based_on_flag": 19
                },
                "shiftCount": {
                    "shift_count": 1
                },
                "uVar1": {
                    "count": 1,
                    "count_leading_zeros": 1,
                    "leading_zeros": 3,
                    "result": 11,
                    "result1": 6,
                    "result_count": 2,
                    "var1": 1
                },
                "uVar3": {
                    "bit_count": 1,
                    "bits_and_shift": 1,
                    "bits_shifted": 1,
                    "count": 3,
                    "float_result": 1,
                    "float_value": 1,
                    "normalized_float": 1,
                    "num_bits": 1,
                    "result2": 5,
                    "result3": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_count": 3,
                    "string_bits": 1,
                    "temp": 1,
                    "var3": 1
                },
                "uVar4": {
                    "bitwise_xor": 2,
                    "bitwise_xor_result": 1,
                    "flag": 1,
                    "flipped_flag": 1,
                    "float_xor": 1,
                    "inverse": 1,
                    "mask": 1,
                    "masked_data": 1,
                    "masked_value": 1,
                    "modified_a08": 1,
                    "modified_flag": 1,
                    "modified_value": 2,
                    "new_var": 1,
                    "result4": 1,
                    "shifted": 1,
                    "temp_var": 1,
                    "u_var4": 1,
                    "var4": 1,
                    "xor_val": 1,
                    "xor_value": 3,
                    "xored_value": 1
                },
                "uVar5": {
                    "result5": 1,
                    "reverse_bits": 2,
                    "reversed_bits": 20,
                    "reversed_value": 1,
                    "var5": 1
                },
                "xorValue": {
                    "xor_value": 1
                }
            },
            "called": [
                "FUN_08000418",
                "FUN_08000aa8",
                "FUN_08000cb8",
                "FUN_08004bd8",
                "FUN_08000ff4",
                "FUN_08000c08",
                "FUN_08004f60",
                "FUN_08004ae0",
                "FUN_08004f3c",
                "FUN_08005dfc",
                "FUN_08001044",
                "FUN_08000aa4",
                "FUN_08005e40",
                "FUN_08001030",
                "FUN_08001a80",
                "FUN_08000c10"
            ],
            "calling": [
                "FUN_080036f8",
                "FUN_080017b4"
            ],
            "code": "\nvoid extract_process_and_store_data_08004f78(void)\n\n{\n  undefined4 result;\n  int is_empty;\n  undefined4 result2;\n  uint xor_value;\n  undefined8 reversed_bits;\n  byte pitch;\n  \n  extract_bits_and_shift(&DAT_20000a5c);\n  calculate_and_store_result(&DAT_20000a5c,&DAT_20000ba0);\n  initialize_memory();\n  reversed_bits = reverse_bits(DAT_20000ba0);\n  clear_local_memory(&DAT_20000ba8,\"Pitch: %f\\n\",(int)reversed_bits,(int)((ulonglong)reversed_bits >> 0x20));\n  result = reverse_and_count_leading_zeros(&DAT_20000ba8);\n  process_and_check_data(&DAT_20000ba8,result);\n  DAT_200009f8 = calculate_new_float(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = calculate_float_from_u_int(DAT_20000a00,DAT_200009f8);\n  result = calculate_float_from_u_int(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = calculate_normalized_float(result,DAT_20000b5c);\n  result = count_bits_and_shift(DAT_20000010);\n  is_empty = check_if_string_is_empty(result,DAT_20000b5c);\n  if (is_empty == 0) {\n    result = count_bits_and_shift(DAT_200009f4);\n    is_empty = is_empty_string(result,DAT_20000b5c);\n    if (is_empty != 0) {\n      DAT_20000b5c = reverse_bits(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = reverse_bits(DAT_20000010);\n  }\n  xor_value = DAT_20000a08 ^ 0x80000000;\n  result = calculate_new_float(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = calculate_float_from_u_int(xor_value,result);\n  result = calculate_normalized_float(DAT_20000be8,DAT_20000b5c);\n  result = calculate_normalized_float(result,DAT_20000a58);\n  result2 = count_bits_and_shift(DAT_20000010);\n  is_empty = is_empty_string(result,result2);\n  if (is_empty == 0) {\n    result2 = count_bits_and_shift(DAT_200009f4);\n    is_empty = check_if_string_is_empty(result,result2);\n    if (is_empty == 0) {\n      pitch = reverse_and_shift_bits(result);\n    }\n    else {\n      pitch = DAT_200009f4;\n    }\n  }\n  else {\n    pitch = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  is_empty = is_empty_string(DAT_200009f8,0);\n  set_param_value_based_on_flag(0x40010800,2,is_empty != 0);\n  is_empty = is_empty_string(DAT_200009f8,0);\n  set_param_value_based_on_flag(0x40010800,4,is_empty == 0);\n  is_empty = is_empty_string(DAT_200009f8,0);\n  set_param_value_based_on_flag(0x40010800,8,is_empty != 0);\n  is_empty = is_empty_string(DAT_200009f8,0);\n  set_param_value_based_on_flag(0x40010800,0x10,is_empty == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)pitch;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)pitch;\n  return;\n}\n\n",
            "current_name": "extract_process_and_store_data_08004f78",
            "entrypoint": "0x08004f78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f78": "extract_process_and_store_data_08004f78",
                "calculate_and_store_result_08004bd8": "calculate_and_store_result",
                "calculate_float_from_u_int_08000cb8": "calculate_float_from_u_int",
                "calculate_new_float_08000aa4": "calculate_new_float",
                "calculate_normalized_float_08000aa8": "calculate_normalized_float",
                "check_if_string_is_empty_08000ff4": "check_if_string_is_empty",
                "clear_local_memory_08005dfc": "clear_local_memory",
                "count_bits_and_shift_08000c10": "count_bits_and_shift",
                "extract_bits_and_shift_08004ae0": "extract_bits_and_shift",
                "iVar2": "is_empty",
                "initialize_memory_08004f60": "initialize_memory",
                "is_empty_string_08001030": "is_empty_string",
                "local_11": "pitch",
                "process_and_check_data_08004f3c": "process_and_check_data",
                "reverse_and_count_leading_zeros_08005e40": "reverse_and_count_leading_zeros",
                "reverse_and_shift_bits_08001044": "reverse_and_shift_bits",
                "reverse_bits_08000c08": "reverse_bits",
                "reverse_unsigned_long_long_bits_08000418": "reverse_bits",
                "set_param_value_based_on_flag_08001a80": "set_param_value_based_on_flag",
                "uVar1": "result",
                "uVar3": "result2",
                "uVar4": "xor_value",
                "uVar5": "reversed_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005224": {
            "additional_data": {
                "FUN_08005224": {
                    "initialize_system": 31
                },
                "execute_or_skip_system_call_08004e74": {
                    "execute_or_skip_system_call": 29,
                    "execute_system_call": 2
                },
                "initialize_and_check_system_080052a0": {
                    "check_system": 3,
                    "initialize_and_check_system": 27,
                    "initialize_check_system": 1
                },
                "initialize_data_structures_0800491c": {
                    "initialize_data_structures": 31
                },
                "initialize_flags_and_values_080055f4": {
                    "initialize_flags": 3,
                    "initialize_flags_and_values": 27,
                    "initialize_flags_values": 1
                },
                "initialize_memory_and_values_080053b0": {
                    "initialize_memory": 2,
                    "initialize_memory_and_values": 29
                },
                "initialize_memory_values_08005500": {
                    "initialize_memory_values": 31
                },
                "initialize_params_and_run_08005598": {
                    "initialize_params": 3,
                    "initialize_params_and_run": 28
                },
                "initialize_system_080014f0": {
                    "initialize_system": 3,
                    "initialize_system_helper": 2
                },
                "initialize_values_08005348": {
                    "initialize_values": 31
                },
                "set_flags_and_values_0800360c": {
                    "set_flags": 2,
                    "set_flags_and_values": 28
                },
                "update_and_set_bit_in_value_080036a8": {
                    "update_and_set_bit_in_value": 28,
                    "update_bit": 1,
                    "update_bit_in_value": 1,
                    "update_bit_value": 1
                }
            },
            "called": [
                "FUN_08005348",
                "FUN_080052a0",
                "FUN_080053b0",
                "FUN_08005500",
                "FUN_080014f0",
                "FUN_080036a8",
                "FUN_080055f4",
                "FUN_08004e74",
                "FUN_08005598",
                "FUN_0800491c",
                "FUN_0800360c"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid initialize_system_08005224(void)\n\n{\n  initialize_system_08005224();\n  initialize_and_check_system();\n  initialize_flags_and_values();\n  initialize_values();\n  initialize_params_and_run();\n  initialize_memory_values();\n  initialize_memory_and_values();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  update_and_set_bit_in_value(&DAT_20000b1c,0);\n  update_and_set_bit_in_value(&DAT_20000b1c,0xc);\n  initialize_data_structures(&DAT_20000a5c);\n  set_flags_and_values(&DAT_20000b60);\n  execute_or_skip_system_call(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "initialize_system_08005224",
            "entrypoint": "0x08005224",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005224": "initialize_system_08005224",
                "execute_or_skip_system_call_08004e74": "execute_or_skip_system_call",
                "initialize_and_check_system_080052a0": "initialize_and_check_system",
                "initialize_data_structures_0800491c": "initialize_data_structures",
                "initialize_flags_and_values_080055f4": "initialize_flags_and_values",
                "initialize_memory_and_values_080053b0": "initialize_memory_and_values",
                "initialize_memory_values_08005500": "initialize_memory_values",
                "initialize_params_and_run_08005598": "initialize_params_and_run",
                "initialize_system_080014f0": "initialize_system",
                "initialize_values_08005348": "initialize_values",
                "set_flags_and_values_0800360c": "set_flags_and_values",
                "update_and_set_bit_in_value_080036a8": "update_and_set_bit_in_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052a0": {
            "additional_data": {
                "FUN_080052a0": {
                    "initialize": 1,
                    "initialize_and_check": 1,
                    "initialize_and_check_data": 2,
                    "initialize_and_check_system": 3,
                    "initialize_and_configure_system": 1,
                    "initialize_and_write_data": 4,
                    "initialize_application": 1,
                    "initialize_data_and_flags": 1,
                    "initialize_program": 3,
                    "initialize_system": 14
                },
                "UINT_MAX": {
                    "max_value": 1
                },
                "calculate_execution_time_and_initialize_data_08003260": {
                    "calculate_execution_time_and_init_data": 1,
                    "calculate_execution_time_and_initialize_data": 2
                },
                "check_and_update_flags_08002d98": {
                    "check_and_update_flags": 3
                },
                "data_value_1_new": {
                    "data_value6": 1
                },
                "data_value_2_new": {
                    "data_value7": 1
                },
                "data_value_3_new": {
                    "data_value8": 1
                },
                "get_data_value_08003504": {
                    "get_data_value": 3
                },
                "iVar1": {
                    "check_result": 2,
                    "error_code": 1,
                    "result": 16
                },
                "initialize_and_check_data_08001762": {
                    "init_and_check_data": 1,
                    "initialize_and_check_data": 2,
                    "initialize_data": 1
                },
                "ivar1": {
                    "result": 1
                },
                "local_10": {
                    "constant2": 2,
                    "constant4": 1,
                    "constant5": 1,
                    "constant_4": 1,
                    "constant_5": 2,
                    "constant_value": 1,
                    "constant_value_2": 1,
                    "data_length": 1,
                    "data_value9": 1,
                    "data_var3": 1,
                    "flag11": 1,
                    "init_flag3": 1,
                    "initialize_threshold": 1,
                    "initialized_flag6": 1,
                    "max_allowed": 1,
                    "max_value": 1,
                    "multiplier": 1,
                    "operation_limit": 1,
                    "value5": 1,
                    "var3": 1
                },
                "local_14": {
                    "constant1": 1,
                    "constant3": 1,
                    "constant4": 1,
                    "constant_3": 1,
                    "constant_4": 2,
                    "data_constant": 1,
                    "execution_time": 2,
                    "flag10": 1,
                    "flag4": 1,
                    "flag_b": 1,
                    "init_flag2": 1,
                    "initialize_constant": 1,
                    "initialize_value": 1,
                    "initialized_flag5": 1,
                    "multiplier": 1,
                    "saved_value": 1,
                    "value": 1,
                    "value4": 1,
                    "var2": 1,
                    "variable_3": 1
                },
                "local_20": {
                    "constant2": 1,
                    "constant3": 1,
                    "constant_2": 1,
                    "constant_3": 2,
                    "execution_time": 1,
                    "flag": 1,
                    "flag3": 1,
                    "flag9": 1,
                    "flag_a": 1,
                    "increment": 2,
                    "init_flag1": 1,
                    "initial_value": 1,
                    "initialize_multiplier": 1,
                    "initialized_flag4": 1,
                    "step_value": 1,
                    "value3": 1,
                    "var1": 1,
                    "variable_2": 1
                },
                "local_28": {
                    "check_flag3": 1,
                    "constant2": 1,
                    "constant_2": 2,
                    "counter": 1,
                    "flag2": 1,
                    "flag3": 1,
                    "flag8": 1,
                    "initialize_counter": 1,
                    "initialized_flag3": 1,
                    "iteration": 1,
                    "start_value": 1,
                    "system_counter": 1,
                    "value2": 1,
                    "variable_1": 1
                },
                "local_2c": {
                    "check_flag2": 1,
                    "const_value": 1,
                    "constant1": 3,
                    "constant_1": 3,
                    "constant_value_1": 1,
                    "flag2": 1,
                    "flag7": 1,
                    "flag_mask": 1,
                    "initialize_value": 1,
                    "initialized_flag2": 1,
                    "input_length": 1,
                    "max_size": 1,
                    "max_value": 1,
                    "memory_value": 1,
                    "shift_value": 1,
                    "system_limit": 1,
                    "value1": 1
                },
                "local_30": {
                    "check_flag1": 1,
                    "check_result": 1,
                    "default_value": 1,
                    "flag": 3,
                    "flag1": 3,
                    "flag6": 2,
                    "flag_value": 2,
                    "initial_value": 1,
                    "initialize_flag": 1,
                    "initialized_flag1": 1,
                    "is_flag_set": 3,
                    "is_valid": 2,
                    "is_valid_flag": 1,
                    "status": 1,
                    "system_status": 1,
                    "value_1": 1
                },
                "local_34": {
                    "counter3": 1,
                    "data": 1,
                    "data_flag_b": 1,
                    "data_value5": 1,
                    "data_value_5": 1,
                    "data_var2": 1,
                    "execution_param5": 1,
                    "flag5": 3,
                    "index": 3,
                    "input_param3": 1,
                    "memory_value": 1,
                    "param_2": 1,
                    "temp": 2,
                    "temp2": 2,
                    "value_5": 2
                },
                "local_38": {
                    "count": 2,
                    "counter": 3,
                    "counter2": 1,
                    "data_flag_a": 1,
                    "data_value": 1,
                    "data_value4": 1,
                    "data_value_4": 1,
                    "data_var1": 1,
                    "execution_param4": 1,
                    "flag": 1,
                    "flag4": 3,
                    "flag_param": 1,
                    "input_param2": 1,
                    "param": 1,
                    "param_1": 1,
                    "temp": 2,
                    "value_4": 2
                },
                "local_3c": {
                    "constant": 2,
                    "constant1": 1,
                    "data3": 1,
                    "data_mode": 1,
                    "data_offset": 1,
                    "data_size": 1,
                    "data_value": 1,
                    "data_value3": 1,
                    "data_value_3": 1,
                    "execution_param3": 1,
                    "execution_time": 1,
                    "flag3": 3,
                    "flag4": 1,
                    "input_param1": 1,
                    "limit": 1,
                    "offset": 2,
                    "shift_value": 1,
                    "size": 1,
                    "threshold": 1,
                    "value": 6,
                    "value_3": 2
                },
                "local_40": {
                    "count": 5,
                    "counter": 1,
                    "data2": 1,
                    "data_counter": 1,
                    "data_shift": 1,
                    "data_value2": 1,
                    "data_value_2": 1,
                    "execution_param2": 1,
                    "execution_time": 1,
                    "flag2": 3,
                    "flag3": 1,
                    "initialization_param": 1,
                    "input_value": 1,
                    "min_value": 1,
                    "param_value": 1,
                    "shift": 1,
                    "some_value": 1,
                    "value": 6,
                    "value_2": 2
                },
                "local_44": {
                    "data1": 1,
                    "data_limit": 1,
                    "data_mask": 2,
                    "data_value": 1,
                    "data_value1": 1,
                    "data_value_1": 1,
                    "error_code": 1,
                    "execution_param": 1,
                    "flag": 9,
                    "flag1": 3,
                    "flag2": 1,
                    "flag_value": 1,
                    "flags": 2,
                    "initialization_flag": 1,
                    "input_flag": 1,
                    "mask": 2,
                    "max_value": 1,
                    "value_1": 1
                },
                "local_c": {
                    "address": 1,
                    "constant2": 1,
                    "constant3": 2,
                    "constant6": 1,
                    "constant_5": 1,
                    "constant_6": 2,
                    "constant_value_3": 1,
                    "data": 1,
                    "data_check": 1,
                    "data_offset": 1,
                    "data_value10": 1,
                    "flag12": 1,
                    "high_value": 1,
                    "init_flag4": 1,
                    "initialize_limit": 1,
                    "initialized_flag7": 1,
                    "limit": 1,
                    "mem_value": 1,
                    "operation_counter": 1,
                    "value6": 1,
                    "var4": 1
                },
                "newDataValue": {
                    "new_data_value": 1
                },
                "run_infinite_loop_08005674": {
                    "run_infinite_loop": 2,
                    "run_infinite_loop_at_line": 1
                },
                "set_flag_if_param_is_four_0800177c": {
                    "set_flag_for_value_four": 1,
                    "set_flag_if_param_is_four": 3
                },
                "uVar2": {
                    "data_value": 16,
                    "data_value2": 1
                },
                "write_shifted_value_to_memory_0800172a": {
                    "write_shifted_value_to_memory": 3,
                    "write_value_to_memory": 1
                }
            },
            "called": [
                "FUN_08002d98",
                "FUN_08001762",
                "FUN_08005674",
                "FUN_08003260",
                "FUN_08003504",
                "FUN_0800177c",
                "FUN_0800172a"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_and_check_system_080052a0(void)\n\n{\n  int result;\n  undefined8 data_value;\n  undefined4 flag;\n  undefined4 value;\n  undefined4 value;\n  undefined4 flag4;\n  undefined4 index;\n  undefined4 is_flag_set;\n  undefined4 constant_1;\n  undefined4 constant_2;\n  undefined4 increment;\n  undefined4 constant_4;\n  undefined4 constant_5;\n  undefined4 constant3;\n  \n  is_flag_set = 1;\n  constant_1 = 0x10000;\n  constant_2 = 0;\n  increment = 1;\n  constant_4 = 2;\n  constant_5 = 0x10000;\n  constant3 = 0x1c0000;\n  result = check_and_update_flags(&is_flag_set);\n  if (result != 0) {\n    run_infinite_loop(\"../src/main.c\",0x151);\n  }\n  flag = 0xf;\n  value = 2;\n  value = 0x80;\n  flag4 = 0;\n  index = 0;\n  result = calculate_execution_time_and_initialize_data(&flag,2);\n  if (result != 0) {\n    run_infinite_loop(\"../src/main.c\",0x15e);\n  }\n  data_value = get_data_value();\n  initialize_and_check_data((uint)data_value / 1000,(int)((ulonglong)data_value >> 0x20),(uint)data_value * 0x10624dd3);\n  set_flag_if_param_is_four(4);\n  write_shifted_value_to_memory(0xffffffff,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_and_check_system_080052a0",
            "entrypoint": "0x080052a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052a0": "initialize_and_check_system_080052a0",
                "calculate_execution_time_and_initialize_data_08003260": "calculate_execution_time_and_initialize_data",
                "check_and_update_flags_08002d98": "check_and_update_flags",
                "get_data_value_08003504": "get_data_value",
                "iVar1": "result",
                "initialize_and_check_data_08001762": "initialize_and_check_data",
                "local_10": "constant_5",
                "local_14": "constant_4",
                "local_20": "increment",
                "local_28": "constant_2",
                "local_2c": "constant_1",
                "local_30": "is_flag_set",
                "local_34": "index",
                "local_38": "flag4",
                "local_3c": "value",
                "local_40": "value",
                "local_44": "flag",
                "local_c": "constant3",
                "run_infinite_loop_08005674": "run_infinite_loop",
                "set_flag_if_param_is_four_0800177c": "set_flag_if_param_is_four",
                "uVar2": "data_value",
                "write_shifted_value_to_memory_0800172a": "write_shifted_value_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005348": {
            "additional_data": {
                "FUN_08005348": {
                    "initialize_data": 9,
                    "initialize_data_structures": 1,
                    "initialize_memory": 2,
                    "initialize_values": 13,
                    "initialize_variables": 6
                },
                "calculate_and_update_values_08001ab0": {
                    "calculate_and_set_values": 1,
                    "calculate_and_update": 1,
                    "calculate_and_update_values": 23
                },
                "iVar1": {
                    "result": 17
                },
                "len": {
                    "length": 1
                },
                "run_infinite_loop_08005674": {
                    "handle_error": 2,
                    "run_infinite_loop": 22
                }
            },
            "called": [
                "FUN_08005674",
                "FUN_08001ab0"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_values_08005348(void)\n\n{\n  int result;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  result = calculate_and_update_values(&DAT_20000a88);\n  if (result != 0) {\n    run_infinite_loop(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_values_08005348",
            "entrypoint": "0x08005348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005348": "initialize_values_08005348",
                "calculate_and_update_values_08001ab0": "calculate_and_update_values",
                "iVar1": "result",
                "run_infinite_loop_08005674": "run_infinite_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080053b0": {
            "additional_data": {
                "DAT_20000b1c": {
                    "device_data": 1,
                    "memory": 1,
                    "memory_point_1": 1,
                    "memory_value_1": 1
                },
                "DAT_20000b20": {
                    "buffer_size": 1,
                    "memory_point_2": 1,
                    "memory_value_2": 1,
                    "value1": 1
                },
                "DAT_20000b24": {
                    "count": 1,
                    "memory_point_3": 1,
                    "memory_value_3": 1
                },
                "DAT_20000b28": {
                    "limit": 1,
                    "memory_point_4": 1,
                    "memory_value_4": 1
                },
                "DAT_20000b2c": {
                    "flag1": 1,
                    "memory_point_5": 1,
                    "memory_value_5": 1
                },
                "DAT_20000b30": {
                    "flag2": 1,
                    "memory_point_6": 1,
                    "memory_value_6": 1,
                    "value2": 1
                },
                "DAT_20000b34": {
                    "flag3": 1,
                    "memory_point_7": 1,
                    "memory_value_7": 1,
                    "value3": 1
                },
                "FUN_080053b0": {
                    "initialize_and_check_memory": 1,
                    "initialize_and_update_memory": 4,
                    "initialize_and_update_values": 1,
                    "initialize_device": 7,
                    "initialize_flags_and_values": 1,
                    "initialize_memory_and_data": 1,
                    "initialize_memory_and_flags": 1,
                    "initialize_memory_and_run": 2,
                    "initialize_memory_and_values": 6,
                    "initialize_memory_values": 3,
                    "initialize_system": 4
                },
                "check_and_update_memory_values_080035a4": {
                    "check_and_update_memory_values": 1,
                    "check_update_memory": 1
                },
                "check_and_update_memory_values_08003640": {
                    "check_and_update_memory_values2": 1,
                    "check_update_memory": 1
                },
                "github_20000b1c": {
                    "memory_pointer": 1
                },
                "github_20000b20": {
                    "device_value_1": 1
                },
                "github_20000b24": {
                    "device_value_2": 1
                },
                "github_20000b28": {
                    "device_value_3": 1
                },
                "github_20000b2c": {
                    "device_value_4": 1
                },
                "github_20000b30": {
                    "device_value_5": 1
                },
                "github_20000b34": {
                    "device_value_6": 1
                },
                "iVar1": {
                    "result": 6
                },
                "initialize_flags_and_values_08005680": {
                    "initialize_flags": 1,
                    "initialize_flags_and_values": 1
                },
                "local_18": {
                    "array1": 1,
                    "array_1": 1,
                    "flags_3": 1,
                    "initial_values": 1,
                    "mem_values": 1,
                    "memory_values": 12,
                    "page_sizes": 1,
                    "parameter17": 1,
                    "parameter_17": 1,
                    "parameter_values": 1,
                    "parameters_array": 1,
                    "update_values": 1,
                    "values_array": 1,
                    "variable_10": 1,
                    "variable_9": 1
                },
                "local_1c": {
                    "flag1": 1,
                    "flag2": 4,
                    "flag_2": 2,
                    "flag_n": 1,
                    "flag_value_2": 1,
                    "flags2": 1,
                    "flags_2": 1,
                    "param16": 1,
                    "parameter16": 3,
                    "parameter_16": 4,
                    "return_value": 5,
                    "rotation": 1,
                    "value16": 1,
                    "variable_8": 1,
                    "variable_9": 1
                },
                "local_20": {
                    "flag1": 4,
                    "flag2": 1,
                    "flag_1": 2,
                    "flag_m": 1,
                    "flag_value": 1,
                    "flag_value_1": 1,
                    "flags": 4,
                    "flags1": 2,
                    "flags_1": 1,
                    "param15": 1,
                    "parameter15": 3,
                    "parameter16": 1,
                    "parameter_15": 4,
                    "pixel_format": 1,
                    "update_flags": 1,
                    "value15": 1,
                    "variable_7": 1,
                    "variable_8": 1
                },
                "local_24": {
                    "brightness": 1,
                    "flag6": 1,
                    "flag_l": 1,
                    "function7": 1,
                    "function_data7": 1,
                    "function_data_7": 1,
                    "param14": 1,
                    "parameter14": 3,
                    "parameter15": 1,
                    "parameter_14": 5,
                    "size_7": 2,
                    "value14": 1,
                    "value6": 1,
                    "value7": 1,
                    "variable_6": 1,
                    "variable_7": 1
                },
                "local_28": {
                    "contrast_ratio": 1,
                    "flag5": 1,
                    "flag_k": 1,
                    "function6": 1,
                    "function_data6": 1,
                    "function_data_6": 1,
                    "param13": 1,
                    "parameter13": 3,
                    "parameter14": 1,
                    "parameter_13": 5,
                    "size_6": 2,
                    "value13": 1,
                    "value5": 1,
                    "value6": 1,
                    "variable_5": 1,
                    "variable_6": 1
                },
                "local_2c": {
                    "flag4": 1,
                    "flag_j": 1,
                    "function5": 1,
                    "function_data5": 1,
                    "function_data_5": 1,
                    "output_format": 1,
                    "param12": 1,
                    "parameter12": 3,
                    "parameter13": 1,
                    "parameter_12": 5,
                    "size_5": 2,
                    "value12": 1,
                    "value4": 1,
                    "value5": 1,
                    "variable_4": 1,
                    "variable_5": 1
                },
                "local_30": {
                    "color_space": 1,
                    "flag3": 1,
                    "flag_i": 1,
                    "function4": 1,
                    "function_data4": 1,
                    "function_data_4": 1,
                    "param11": 1,
                    "parameter11": 3,
                    "parameter12": 1,
                    "parameter_11": 5,
                    "size_4": 2,
                    "value11": 1,
                    "value3": 1,
                    "value4": 1,
                    "variable_3": 1,
                    "variable_4": 1
                },
                "local_34": {
                    "flag2": 1,
                    "flag_h": 1,
                    "function3": 1,
                    "function_data3": 1,
                    "function_data_3": 1,
                    "param10": 1,
                    "parameter10": 3,
                    "parameter11": 1,
                    "parameter_10": 5,
                    "refresh_rate": 1,
                    "size_3": 2,
                    "value10": 1,
                    "value2": 1,
                    "value3": 1,
                    "variable_2": 1,
                    "variable_3": 1
                },
                "local_38": {
                    "bits_per_pixel": 1,
                    "device_data": 1,
                    "flag1": 1,
                    "flag_g": 1,
                    "function2": 1,
                    "function_data2": 1,
                    "function_data_2": 1,
                    "param9": 1,
                    "parameter10": 1,
                    "parameter9": 3,
                    "parameter_9": 5,
                    "size_2": 2,
                    "value1": 1,
                    "value2": 1,
                    "value9": 1,
                    "variable_1": 1,
                    "variable_2": 1
                },
                "local_3c": {
                    "buffer_size": 1,
                    "function1": 1,
                    "function_and_device_data": 1,
                    "function_data": 7,
                    "function_data1": 1,
                    "function_data_1": 1,
                    "param8": 1,
                    "parameter8": 3,
                    "parameter9": 1,
                    "parameter_6": 1,
                    "parameter_8": 5,
                    "resolution": 1,
                    "size": 1,
                    "size_1": 2,
                    "size_memory": 1,
                    "value1": 1,
                    "value8": 1,
                    "variable_1": 1
                },
                "local_40": {
                    "aspect_ratio": 1,
                    "data_offset": 1,
                    "flag_f": 1,
                    "memory_value_2": 1,
                    "param7": 3,
                    "param_7": 1,
                    "parameter7": 5,
                    "parameter8": 1,
                    "parameter_7": 7,
                    "parameter_value7": 1,
                    "unused6": 1,
                    "value7": 1
                },
                "local_44": {
                    "data_size": 1,
                    "height": 1,
                    "memory_value_1": 1,
                    "param6": 3,
                    "param_6": 1,
                    "parameter6": 6,
                    "parameter_6": 6,
                    "parameter_value6": 1,
                    "size_parameter": 1,
                    "unused5": 1,
                    "value6": 1
                },
                "local_48": {
                    "flag_e": 1,
                    "param5": 3,
                    "param_5": 1,
                    "parameter5": 6,
                    "parameter_5": 7,
                    "parameter_value5": 1,
                    "parameter_value_5": 1,
                    "unused4": 1,
                    "value5": 1,
                    "width": 1
                },
                "local_4c": {
                    "flag_d": 1,
                    "param4": 3,
                    "param_4": 1,
                    "parameter4": 6,
                    "parameter_4": 7,
                    "parameter_value4": 1,
                    "parameter_value_4": 1,
                    "size": 1,
                    "unused3": 1,
                    "value4": 1
                },
                "local_50": {
                    "depth": 1,
                    "flag_c": 1,
                    "param3": 3,
                    "param_3": 1,
                    "parameter3": 6,
                    "parameter_3": 7,
                    "parameter_value3": 1,
                    "parameter_value_3": 1,
                    "unused2": 1,
                    "value3": 1
                },
                "local_54": {
                    "flag_b": 1,
                    "horizontal_offset": 1,
                    "param2": 3,
                    "param_2": 1,
                    "parameter2": 6,
                    "parameter_2": 8,
                    "parameter_value2": 1,
                    "parameter_value_2": 1,
                    "unused1": 1,
                    "value2": 1
                },
                "local_58": {
                    "flag_a": 1,
                    "param1": 3,
                    "param_1": 1,
                    "parameter1": 6,
                    "parameter_1": 8,
                    "parameter_value": 8,
                    "parameter_value1": 1,
                    "parameter_value_1": 1,
                    "value1": 1,
                    "vertical_offset": 1
                },
                "local_6c": {
                    "parameter7": 1
                },
                "run_infinite_loop_08005674": {
                    "handle_error": 1,
                    "run_infinite_loop": 1
                },
                "testing_080035a4": {
                    "check_and_update_memory_values": 1
                },
                "testing_08003640": {
                    "check_and_update_memory_values_2": 1
                },
                "testing_08003908": {
                    "update_function_and_device_data": 1
                },
                "testing_08003a94": {
                    "update_values_in_memory": 1
                },
                "testing_0800422e": {
                    "update_parameter_value": 1
                },
                "testing_080042de": {
                    "update_flags_and_return": 1
                },
                "testing_08005674": {
                    "run_infinite_loop": 1
                },
                "testing_08005680": {
                    "initialize_flags_and_values": 1
                },
                "update_flags_and_return_080042de": {
                    "update_flags": 1,
                    "update_flags_and_return": 1
                },
                "update_function_and_device_data_08003908": {
                    "update_function_and_device_data": 1,
                    "update_function_data": 1
                },
                "update_parameter_value_0800422e": {
                    "update_parameter_value": 2
                },
                "update_values_in_memory_08003a94": {
                    "update_memory_values": 2
                }
            },
            "called": [
                "FUN_08005674",
                "FUN_08003908",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003640",
                "FUN_08003a94",
                "FUN_0800422e",
                "FUN_08005680"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_memory_and_values_080053b0(void)\n\n{\n  int result;\n  undefined4 parameter_value;\n  undefined4 parameter_2;\n  undefined4 parameter_3;\n  undefined4 parameter_4;\n  undefined4 parameter_5;\n  undefined4 parameter_6;\n  undefined4 parameter_7;\n  undefined4 function_data;\n  undefined4 parameter_9;\n  undefined4 parameter_10;\n  undefined4 parameter_11;\n  undefined4 parameter_12;\n  undefined4 parameter_13;\n  undefined4 parameter_14;\n  undefined4 parameter_15;\n  undefined4 return_value;\n  undefined4 memory_values [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  result = check_and_update_memory_values(&DAT_20000b1c);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",399);\n  }\n  memory_values[0] = 0x1000;\n  result = update_memory_values(&DAT_20000b1c,memory_values);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x194);\n  }\n  result = check_update_memory(&DAT_20000b1c);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x198);\n  }\n  parameter_15 = 0;\n  return_value = 0;\n  result = update_flags_and_return(&DAT_20000b1c,&parameter_15);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x19f);\n  }\n  function_data = 0x60;\n  parameter_9 = 0;\n  parameter_10 = 0;\n  parameter_11 = 0;\n  parameter_12 = 0;\n  parameter_13 = 0;\n  parameter_14 = 0;\n  result = update_function_and_device_data(&DAT_20000b1c,&function_data,0);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x1ab);\n  }\n  result = update_function_and_device_data(&DAT_20000b1c,&function_data,0xc);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x1b0);\n  }\n  parameter_value = 0;\n  parameter_2 = 0;\n  parameter_3 = 0;\n  parameter_4 = 0;\n  parameter_5 = 0;\n  parameter_6 = 0x2000;\n  parameter_7 = 0;\n  result = update_parameter_value(&DAT_20000b1c,&parameter_value);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x1bc);\n  }\n  initialize_flags(&DAT_20000b1c);\n  return;\n}\n\n",
            "current_name": "initialize_memory_and_values_080053b0",
            "entrypoint": "0x080053b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080053b0": "initialize_memory_and_values_080053b0",
                "check_and_update_memory_values_080035a4": "check_and_update_memory_values",
                "check_and_update_memory_values_08003640": "check_update_memory",
                "iVar1": "result",
                "initialize_flags_and_values_08005680": "initialize_flags",
                "local_18": "memory_values",
                "local_1c": "return_value",
                "local_20": "parameter_15",
                "local_24": "parameter_14",
                "local_28": "parameter_13",
                "local_2c": "parameter_12",
                "local_30": "parameter_11",
                "local_34": "parameter_10",
                "local_38": "parameter_9",
                "local_3c": "function_data",
                "local_40": "parameter_7",
                "local_44": "parameter_6",
                "local_48": "parameter_5",
                "local_4c": "parameter_4",
                "local_50": "parameter_3",
                "local_54": "parameter_2",
                "local_58": "parameter_value",
                "run_infinite_loop_08005674": "handle_error",
                "update_flags_and_return_080042de": "update_flags_and_return",
                "update_function_and_device_data_08003908": "update_function_and_device_data",
                "update_parameter_value_0800422e": "update_parameter_value",
                "update_values_in_memory_08003a94": "update_memory_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005500": {
            "additional_data": {
                "DAT_20000b60": {
                    "memory_address": 3
                },
                "DAT_20000b64": {
                    "max_memory": 1,
                    "memory_size": 2
                },
                "DAT_20000b68": {
                    "counter": 1,
                    "initial_value": 1,
                    "memory_flag": 1
                },
                "DAT_20000b6c": {
                    "loop_counter": 1,
                    "memory_size": 1,
                    "threshold": 1
                },
                "DAT_20000b70": {
                    "flag": 1,
                    "infinite_loop_flag": 1,
                    "memory_status": 1
                },
                "DAT_20000b78": {
                    "infinite_loop_offset": 1,
                    "loop_status": 1,
                    "unused": 1
                },
                "FUN_08005500": {
                    "initialize_memory": 25,
                    "initialize_memory_and_flags": 1,
                    "initialize_memory_values": 5
                },
                "check_and_update_memory_values_080035a4": {
                    "check_and_set_memory": 1,
                    "check_and_update_memory": 1,
                    "check_and_update_memory_values": 11
                },
                "iVar1": {
                    "result": 16,
                    "return_value": 4
                },
                "local_18": {
                    "array": 1,
                    "block_size_array": 1,
                    "initial_values": 1,
                    "memory_block_sizes_array": 1,
                    "memory_size_array": 1,
                    "memory_vals": 1,
                    "memory_values": 10,
                    "page_sizes": 1,
                    "update_values_array": 2,
                    "values": 6,
                    "values_array": 1
                },
                "local_1c": {
                    "constant2": 1,
                    "count": 2,
                    "counter": 2,
                    "flag": 3,
                    "flag2": 6,
                    "flag_b": 1,
                    "flag_count": 1,
                    "flag_offset": 2,
                    "flag_val2": 1,
                    "flag_value": 3,
                    "initial_value": 1,
                    "memory_block_offset": 1,
                    "memory_offset": 1,
                    "offset": 2,
                    "some_value": 1,
                    "update_flag": 1
                },
                "local_20": {
                    "buffer_size": 2,
                    "constant1": 1,
                    "flag1": 6,
                    "flag_a": 1,
                    "flag_size": 1,
                    "flag_val1": 1,
                    "flag_value": 4,
                    "flags": 3,
                    "memory_block_size": 2,
                    "memory_size": 2,
                    "num_blocks": 1,
                    "size": 4,
                    "update_size": 1
                },
                "run_infinite_loop_08005674": {
                    "infinite_loop": 1,
                    "run_infinite_loop": 12
                },
                "update_flags_and_return_080042de": {
                    "update_flags_and_return": 13
                },
                "update_values_in_memory_08003a94": {
                    "update_memory_values": 7,
                    "update_values_in_memory": 6
                }
            },
            "called": [
                "FUN_08005674",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_memory_values_08005500(void)\n\n{\n  int result;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 memory_values [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  result = check_and_update_memory_values(&DAT_20000b60);\n  if (result != 0) {\n    run_infinite_loop(\"../src/main.c\",0x1d0);\n  }\n  memory_values[0] = 0x1000;\n  result = update_memory_values(&DAT_20000b60,memory_values);\n  if (result != 0) {\n    run_infinite_loop(\"../src/main.c\",0x1d5);\n  }\n  flag1 = 0x20;\n  flag2 = 0;\n  result = update_flags_and_return(&DAT_20000b60,&flag1);\n  if (result != 0) {\n    run_infinite_loop(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_memory_values_08005500",
            "entrypoint": "0x08005500",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005500": "initialize_memory_values_08005500",
                "check_and_update_memory_values_080035a4": "check_and_update_memory_values",
                "iVar1": "result",
                "local_18": "memory_values",
                "local_1c": "flag2",
                "local_20": "flag1",
                "run_infinite_loop_08005674": "run_infinite_loop",
                "update_flags_and_return_080042de": "update_flags_and_return",
                "update_values_in_memory_08003a94": "update_memory_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005598": {
            "additional_data": {
                "0x1ed": {
                    "error_line": 1
                },
                "DAT_20000ae0": {
                    "value1": 1
                },
                "DAT_20000ae4": {
                    "value2": 1
                },
                "DAT_20000ae8": {
                    "value3": 1
                },
                "DAT_20000aec": {
                    "value4": 1
                },
                "DAT_20000af0": {
                    "value5": 1
                },
                "DAT_20000af4": {
                    "value6": 1
                },
                "DAT_20000af8": {
                    "value7": 1
                },
                "FUN_08005598": {
                    "initialize": 10,
                    "initialize_and_run": 9,
                    "initialize_and_setup": 1,
                    "initialize_application": 2,
                    "initialize_data": 1,
                    "initialize_data_parameters": 1,
                    "initialize_device": 1,
                    "initialize_memory": 1,
                    "initialize_parameters": 2,
                    "initialize_params_and_run": 1,
                    "initialize_system": 2
                },
                "PTR_20000adc": {
                    "data_pointer1": 1
                },
                "iVar1": {
                    "error_code": 1,
                    "init_result": 1,
                    "result": 16,
                    "return_value": 1
                },
                "initialize_params_0800438a": {
                    "initialize_parameters": 9,
                    "initialize_params": 12
                },
                "run_infinite_loop_08005674": {
                    "handle_error": 4,
                    "run_error_handler": 1,
                    "run_infinite_loop": 12,
                    "run_loop": 1
                }
            },
            "called": [
                "FUN_0800438a",
                "FUN_08005674"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_params_and_run_08005598(void)\n\n{\n  int result;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  result = initialize_params(&DAT_20000adc);\n  if (result != 0) {\n    run_infinite_loop(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_params_and_run_08005598",
            "entrypoint": "0x08005598",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005598": "initialize_params_and_run_08005598",
                "iVar1": "result",
                "initialize_params_0800438a": "initialize_params",
                "run_infinite_loop_08005674": "run_infinite_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080055f4": {
            "additional_data": {
                "FUN_080055f4": {
                    "initialize_flags_and_values": 7,
                    "initialize_values": 2,
                    "set_and_update_param_values": 2,
                    "set_and_update_parameters": 1,
                    "set_flag_and_param_values": 1,
                    "set_flag_and_parameter_value": 1,
                    "set_flag_and_update_values": 1,
                    "set_flag_and_value": 2,
                    "set_flags_and_values": 2,
                    "set_param_and_update_flags": 1,
                    "update_flag_and_value": 4,
                    "update_flag_values": 1,
                    "update_flags_and_values": 2,
                    "update_param_values": 2,
                    "update_values": 1,
                    "update_values_based_on_flag": 1
                },
                "_DAT_40021018": {
                    "data_value": 1,
                    "flag_register": 4,
                    "flag_value": 3
                },
                "local_14": {
                    "flag": 11,
                    "flag_value": 6,
                    "param2": 2,
                    "param_flag": 5,
                    "param_index": 1,
                    "param_value2": 3,
                    "parameter2": 1
                },
                "local_18": {
                    "param1": 2,
                    "param_value": 22,
                    "param_value1": 3,
                    "parameter1": 1,
                    "parameter_value": 1
                },
                "local_c": {
                    "constant": 3,
                    "constant_value": 1,
                    "default_value": 1,
                    "flag": 1,
                    "local_variable": 1,
                    "new_value": 1,
                    "param3": 2,
                    "param_count": 2,
                    "param_multiplier": 3,
                    "param_value3": 3,
                    "parameter3": 1,
                    "temp": 1,
                    "temp_value": 2,
                    "unused_var": 1,
                    "update_value": 1,
                    "value": 5
                },
                "set_param_value_based_on_flag_08001a80": {
                    "set_param_value_based_on_flag": 4,
                    "set_parameter_value": 1,
                    "set_parameter_value_based_on_flag": 1
                },
                "update_flags_and_values_080017c4": {
                    "update_flags_and_values": 6
                }
            },
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\n\n\nvoid initialize_flags_and_values_080055f4(void)\n\n{\n  undefined4 param_value;\n  undefined4 flag;\n  undefined4 value;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  set_param_value_based_on_flag(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  param_value = 0x1e;\n  flag = 1;\n  value = 2;\n  update_flags_and_values(0x40010800,&param_value);\n  return;\n}\n\n",
            "current_name": "initialize_flags_and_values_080055f4",
            "entrypoint": "0x080055f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080055f4": "initialize_flags_and_values_080055f4",
                "local_14": "flag",
                "local_18": "param_value",
                "local_c": "value",
                "set_param_value_based_on_flag_08001a80": "set_param_value_based_on_flag",
                "update_flags_and_values_080017c4": "update_flags_and_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005674": {
            "additional_data": {
                "DAT_": {
                    "dat": 1
                },
                "DAT_XXXX": {
                    "xxxx": 1
                },
                "FUN_08005674": {
                    "endless_loop": 1,
                    "infinite_loop": 28,
                    "run_infinite_loop": 2
                },
                "PTR_": {
                    "ptr": 1
                },
                "PTR_7fffeffc": {
                    "ptr1": 1
                },
                "PTR_7ffffffe": {
                    "ptr2": 1
                },
                "do": {
                    "do": 2,
                    "while": 2,
                    "while_true": 1
                },
                "original_function_name": {
                    "infinite_loop": 1
                },
                "original_variable_name_1": {
                    "index": 1,
                    "new_var1": 1
                },
                "original_variable_name_2": {
                    "new_var2": 1
                },
                "original_variable_name_n": {
                    "new_varn": 1
                },
                "true": {
                    "is_true": 1,
                    "true": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_080052a0",
                "FUN_08005348",
                "FUN_080053b0",
                "FUN_08005500",
                "FUN_08005598"
            ],
            "code": "\nvoid run_infinite_loop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "run_infinite_loop_08005674",
            "entrypoint": "0x08005674",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005674": "run_infinite_loop_08005674"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005680": {
            "additional_data": {
                "FUN_08005680": {
                    "check_and_update_parameters": 1,
                    "check_and_update_value": 2,
                    "check_and_update_values": 1,
                    "initialize_flags_and_values": 3,
                    "initialize_memory": 1,
                    "initialize_values": 2,
                    "process_data": 1,
                    "process_parameter_value": 1,
                    "update_flags_and_values": 1,
                    "update_flags_if_param1_is_0x40012c00": 1,
                    "update_flags_if_param_is_0x40012c00": 1,
                    "update_flags_if_param_is_correct": 1,
                    "update_flags_if_param_is_magic_number": 1,
                    "update_if_param_equals": 1,
                    "update_if_parameter_value_is_flag": 1,
                    "update_value_if_condition_met": 2,
                    "update_value_if_param_matches": 1,
                    "update_values": 1,
                    "update_values_if_condition": 1,
                    "update_values_if_condition_met": 2,
                    "update_values_if_match": 1,
                    "update_values_if_param1_is_correct": 1,
                    "update_values_if_param_1_is_condition": 1,
                    "update_values_if_valid": 1
                },
                "local_14": {
                    "count": 1,
                    "count_value": 1,
                    "counter": 2,
                    "counter1": 1,
                    "counter_1": 2,
                    "flag1": 1,
                    "flag_multiplier": 1,
                    "flag_value": 1,
                    "flag_value1": 1,
                    "flag_value2": 1,
                    "flags_and_values_ptr2": 1,
                    "new_value_2": 1,
                    "temp_value1": 1,
                    "update_value2": 1,
                    "updated_value_2": 1,
                    "value2": 7,
                    "value_2": 4,
                    "value_multiplier": 1
                },
                "local_18": {
                    "flag_value": 5,
                    "flag_value1": 1,
                    "flags_and_values_ptr1": 1,
                    "initial_flag_value": 1,
                    "initial_value": 3,
                    "new_value_1": 1,
                    "update_value1": 1,
                    "updated_value": 4,
                    "updated_value_1": 1,
                    "value1": 7,
                    "value_1": 4
                },
                "local_c": {
                    "another_flag_value": 1,
                    "counter2": 1,
                    "counter_2": 2,
                    "flag": 2,
                    "flag2": 1,
                    "flag_offset": 1,
                    "flag_value2": 1,
                    "flag_value3": 1,
                    "flags_and_values_ptr3": 1,
                    "limit": 1,
                    "new_value_3": 1,
                    "status_value": 1,
                    "temp_value2": 1,
                    "update_value3": 1,
                    "updated_value_3": 1,
                    "value3": 7,
                    "value_3": 4,
                    "value_divider": 1
                },
                "param_1": {
                    "address": 1,
                    "address_of_value": 1,
                    "check_value": 1,
                    "data_pointer": 1,
                    "flag_ptr": 3,
                    "input": 1,
                    "input_array": 1,
                    "input_data": 1,
                    "input_param": 3,
                    "input_pointer": 2,
                    "input_ptr": 3,
                    "input_value": 2,
                    "input_values": 1,
                    "memory_pointer": 1,
                    "param": 1,
                    "parameter": 1,
                    "pointer_to_check": 1,
                    "value_array": 1,
                    "value_ptr": 2,
                    "values_pointer": 1
                },
                "update_flags_and_values_080017c4": {
                    "update_flags_and_values": 1,
                    "update_memory": 1
                }
            },
            "called": [
                "FUN_080017c4"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nvoid initialize_flags_and_values_08005680(int *input_ptr)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  \n  if (*input_ptr == 0x40012c00) {\n    value1 = 0x900;\n    value2 = 2;\n    value3 = 2;\n    update_memory(0x40010800,&value1);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_flags_and_values_08005680",
            "entrypoint": "0x08005680",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005680": "initialize_flags_and_values_08005680",
                "local_14": "value2",
                "local_18": "value1",
                "local_c": "value3",
                "param_1": "input_ptr",
                "update_flags_and_values_080017c4": "update_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005704": {
            "additional_data": {
                "FUN_08005704": {
                    "execute_and_store_extracted_data": 1,
                    "execute_data_extraction": 2,
                    "extract_and_store_data": 1,
                    "increment_and_extract_data": 1,
                    "increment_and_store_data": 5,
                    "increment_data_and_store_data": 1,
                    "increment_extract_and_store_data": 1,
                    "initialize_data_extraction": 1,
                    "perform_data_processing": 1,
                    "process_data": 7,
                    "update_and_store_data": 5,
                    "update_data_and_extract": 1,
                    "update_data_and_store": 4
                },
                "extract_and_store_data_080017b4": {
                    "extract_and_save_data": 2,
                    "extract_and_store_data": 20,
                    "extract_store_data": 1,
                    "get_and_store_data": 1,
                    "save_extracted_data": 1,
                    "store_extracted_data": 5
                },
                "increment_data_by_value_0800157c": {
                    "increase_data": 1,
                    "increase_data_by_value": 1,
                    "increase_data_value": 4,
                    "increase_value_and_update_data": 1,
                    "increment_data": 12,
                    "increment_data_by_value": 6,
                    "increment_data_value": 1,
                    "update_data": 2,
                    "update_data_value": 1,
                    "update_data_values": 1
                }
            },
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "calling": [],
            "code": "\nvoid execute_and_store_extracted_data_08005704(void)\n\n{\n  increment_data();\n  extract_and_store_data();\n  return;\n}\n\n",
            "current_name": "execute_and_store_extracted_data_08005704",
            "entrypoint": "0x08005704",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005704": "execute_and_store_extracted_data_08005704",
                "extract_and_store_data_080017b4": "extract_and_store_data",
                "increment_data_by_value_0800157c": "increment_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005714": {
            "additional_data": {
                "DAT_20000b60": {
                    "data": 12,
                    "data_buffer": 1
                },
                "FUN_08005714": {
                    "initialize_data_processing": 7,
                    "process_and_return_data": 1,
                    "process_data": 23
                },
                "PTR_20000b60": {
                    "data_ptr": 1
                },
                "process_data_080036f8": {
                    "process_data": 11,
                    "process_data_helper": 6,
                    "process_data_internal": 1
                }
            },
            "called": [
                "FUN_080036f8"
            ],
            "calling": [],
            "code": "\nvoid process_and_return_data_08005714(void)\n\n{\n  process_data(&DAT_20000b60);\n  return;\n}\n\n",
            "current_name": "process_and_return_data_08005714",
            "entrypoint": "0x08005714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005714": "process_and_return_data_08005714",
                "process_data_080036f8": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005728": {
            "additional_data": {
                "FUN_08005728": {
                    "allocate_memory": 19,
                    "extract_and_increment_data": 1,
                    "initialize_data": 1,
                    "update_data": 8,
                    "update_data_value": 1,
                    "update_data_values": 1
                },
                "auStack_18": {
                    "": 1,
                    "buffer": 3,
                    "data_buffer": 1,
                    "local_array": 1,
                    "local_buffer": 3,
                    "stack_buffer": 11,
                    "stack_memory": 1,
                    "temp_buffer": 3,
                    "temp_stack": 2,
                    "temp_stack_array": 1,
                    "temporary_buffer": 2,
                    "temporary_data": 1
                },
                "local_14": {
                    "": 1,
                    "buffer_size": 1,
                    "local_data_size": 2,
                    "local_size": 6,
                    "remaining_data_length": 1,
                    "remaining_size": 17,
                    "temp_size": 1,
                    "temp_var": 1
                },
                "local_c": {
                    "base_address": 1,
                    "current_allocation": 2,
                    "current_data": 1,
                    "current_data_ptr": 1,
                    "current_memory": 2,
                    "current_position": 2,
                    "current_ptr": 7,
                    "data_location": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_start": 1,
                    "data_start_ptr": 2,
                    "initial_data_pointer": 1,
                    "local_data_pointer": 1,
                    "local_data_ptr": 1,
                    "local_variable": 1,
                    "memory_pool": 1,
                    "memory_ptr": 1
                },
                "param_1": {
                    "data_length": 1,
                    "data_size": 5,
                    "new_data_size": 1,
                    "num_bytes": 1,
                    "requested_size": 1,
                    "size": 22
                },
                "puVar1": {
                    "allocated_ptr": 1,
                    "data_address": 1,
                    "data_pointer": 5,
                    "data_ptr": 10,
                    "data_value": 3,
                    "data_value_pointer": 3,
                    "data_value_ptr": 5,
                    "memory_location": 1,
                    "ptr": 2
                },
                "puVar2": {
                    "allocation_result": 1,
                    "output_ptr": 1,
                    "result": 9,
                    "result_pointer": 1,
                    "result_ptr": 8,
                    "return_value": 11
                }
            },
            "called": [
                "FUN_08005d14"
            ],
            "calling": [
                "FUN_08009744"
            ],
            "code": "\nundefined * allocate_memory_08005728(int size)\n\n{\n  undefined4 *data_ptr;\n  undefined *return_value;\n  undefined stack_buffer [4];\n  int remaining_size;\n  undefined *current_ptr;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  current_ptr = DAT_20000a10;\n  if (stack_buffer < DAT_20000a10 + size) {\n    remaining_size = size;\n    data_ptr = (undefined4 *)get_data_value_08005d14();\n    *data_ptr = 0xc;\n    return_value = (undefined *)0xffffffff;\n  }\n  else {\n    return_value = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return return_value;\n}\n\n",
            "current_name": "allocate_memory_08005728",
            "entrypoint": "0x08005728",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "auStack_18": "stack_buffer",
                "local_14": "remaining_size",
                "local_c": "current_ptr",
                "param_1": "size",
                "puVar1": "data_ptr",
                "puVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005780": {
            "additional_data": {
                "FUN_08005780": {
                    "configure_peripherals": 1,
                    "initialize_chip": 1,
                    "initialize_control_registers": 1,
                    "initialize_device": 3,
                    "initialize_hardware": 2,
                    "initialize_memory": 2,
                    "initialize_memory_settings": 1,
                    "initialize_peripheral": 3,
                    "initialize_peripheral_registers": 2,
                    "initialize_registers": 11,
                    "initialize_system": 3
                },
                "_08005780": {
                    "initialize_registers": 1
                },
                "_DAT_40021000": {
                    "chip_control_register": 1,
                    "control_register": 2,
                    "control_register1": 5,
                    "control_register_1": 1,
                    "device_config_register": 1,
                    "device_control_register": 1,
                    "device_register": 1,
                    "memory_configuration_register1": 1,
                    "memory_control_register": 1,
                    "memory_setting_1": 1,
                    "peripheral1": 2,
                    "peripheral_register": 1,
                    "port_control_register": 1,
                    "register1": 6,
                    "status_register": 2,
                    "status_register1": 1,
                    "system_control_register": 1
                },
                "_DAT_40021004": {
                    "chip_config_register": 1,
                    "clock_control_register": 1,
                    "config_register": 1,
                    "control_register": 1,
                    "control_register2": 5,
                    "control_register_2": 1,
                    "device_config": 1,
                    "device_control_register": 1,
                    "device_status_register": 1,
                    "input_register": 1,
                    "interrupt_control_register": 1,
                    "interrupt_register": 1,
                    "memory_configuration_register2": 1,
                    "memory_setting_2": 1,
                    "peripheral2": 2,
                    "register2": 6,
                    "status_register": 1,
                    "status_register2": 1,
                    "system_config_register": 1
                },
                "_DAT_40021008": {
                    "address_register": 1,
                    "base_address": 1,
                    "communication_register": 1,
                    "configuration_register": 1,
                    "control_register": 1,
                    "control_register3": 1,
                    "data_register": 1,
                    "device_memory": 1,
                    "device_status_register": 1,
                    "gpio_port_config": 1,
                    "interrupt_enable_register": 1,
                    "interrupt_mask_register": 1,
                    "interrupt_priority_register": 1,
                    "memory_address_register": 2,
                    "memory_base_address": 1,
                    "memory_setting_3": 1,
                    "output_register": 1,
                    "peripheral3": 2,
                    "register3": 6,
                    "timer_config": 1,
                    "timer_control_register": 1,
                    "timer_register": 2,
                    "timer_value": 1
                },
                "_DAT_e000ed08": {
                    "control_register4": 1,
                    "exception_vector_table": 1,
                    "interrupt_config": 1,
                    "interrupt_control": 2,
                    "interrupt_control_register": 2,
                    "interrupt_register": 6,
                    "memory_register": 1,
                    "memory_setting_4": 1,
                    "peripheral4": 2,
                    "processor_status_register": 1,
                    "register4": 6,
                    "reset_register": 1,
                    "system_control_register": 3,
                    "system_flags": 1,
                    "system_handler_control_register": 1,
                    "system_register": 1
                },
                "undefined": {
                    "flag": 1
                }
            },
            "called": [],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid initialize_peripheral_registers_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "current_name": "initialize_peripheral_registers_08005780",
            "entrypoint": "0x08005780",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005780": "initialize_peripheral_registers_08005780",
                "_08005780": "initialize_registers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005838": {
            "additional_data": {
                "FUNC_08005d0c": {
                    "another_function": 1,
                    "extra_operation": 1,
                    "function_with_unknown_purpose": 1,
                    "helper_function": 1,
                    "helper_function1": 1,
                    "other_function": 1,
                    "perform_calculation": 2,
                    "some_function": 3
                },
                "FUN_08005838": {
                    "calculate_final_result": 1,
                    "calculate_float_result": 2,
                    "calculate_floating_point_result": 1,
                    "calculate_floating_point_value": 1,
                    "calculate_improved_floating_point": 1,
                    "calculate_improved_result": 4,
                    "calculate_result": 19
                },
                "SCARRY4": {
                    "check_signed_carry4": 1
                },
                "calculate_arithmetic_result_0800015c": {
                    "calculate_arithmetic_result": 11
                },
                "calculate_floating_point_value_0800071c": {
                    "calculate_float_value": 1,
                    "calculate_floating_point_value": 10
                },
                "calculate_improved_result_080059f0": {
                    "calculate_improved_result": 10,
                    "calculate_improved_result_alternative": 1
                },
                "calculate_result_08000158": {
                    "calculate_result": 10,
                    "calculate_result_version2": 1
                },
                "iVar1": {
                    "difference": 24,
                    "temp1": 1,
                    "temp_1": 1,
                    "temp_7": 1,
                    "temp_var": 1,
                    "temp_var1": 2,
                    "var7": 1
                },
                "param_1": {
                    "first_number": 1,
                    "first_param": 1,
                    "float_part1": 1,
                    "input1": 12,
                    "input_1": 9,
                    "input_param1": 2,
                    "input_param_1": 2,
                    "input_param_a": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "float_part2": 1,
                    "input2": 12,
                    "input_2": 9,
                    "input_param2": 2,
                    "input_param_2": 2,
                    "input_param_b": 1,
                    "second_number": 1,
                    "second_param": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "param_3": {
                    "float_part3": 1,
                    "input3": 12,
                    "input_3": 9,
                    "input_param3": 2,
                    "input_param_3": 2,
                    "input_param_c": 1,
                    "third_number": 1,
                    "third_param": 1,
                    "value3": 1,
                    "value_3": 1
                },
                "param_4": {
                    "float_part4": 1,
                    "fourth_number": 1,
                    "fourth_param": 1,
                    "input4": 12,
                    "input_4": 9,
                    "input_param4": 2,
                    "input_param_4": 2,
                    "input_param_d": 1,
                    "value4": 1,
                    "value_4": 1
                },
                "uVar1": {
                    "temp_1": 1,
                    "var1": 1
                },
                "uVar2": {
                    "result": 2,
                    "result1": 1,
                    "result_1": 2,
                    "result_high": 5,
                    "result_high_bits": 2,
                    "result_upper": 4,
                    "result_upper_bits": 1,
                    "temp2": 1,
                    "temp_2": 1,
                    "temp_var2": 2,
                    "upper_half": 1,
                    "var2": 1
                },
                "uVar3": {
                    "case_switcher": 1,
                    "condition": 4,
                    "condition1": 1,
                    "condition_type": 1,
                    "flag": 7,
                    "modified_condition": 1,
                    "modifier": 1,
                    "result_2": 1,
                    "result_flag": 1,
                    "result_type": 1,
                    "shift_amount": 1,
                    "shifted_bits": 2,
                    "sign_and_overflow_bits": 1,
                    "temp3": 1,
                    "temp_3": 1,
                    "temp_var3": 2,
                    "type": 1,
                    "value": 1,
                    "var3": 2
                },
                "uVar4": {
                    "condition2": 1,
                    "masked_fourth_number": 1,
                    "masked_input_4": 2,
                    "masked_param_4": 1,
                    "modified_input4": 2,
                    "modified_input_4": 4,
                    "modified_param_4": 1,
                    "normalized_fourth_param": 1,
                    "normalized_param4": 2,
                    "normalized_value_4": 1,
                    "param4_filtered": 1,
                    "param4_masked": 1,
                    "param_d_modified": 1,
                    "positive_float_part4": 1,
                    "positive_input4": 1,
                    "positive_param_4": 1,
                    "result_3": 1,
                    "result_low": 1,
                    "temp4": 2,
                    "temp_4": 1,
                    "temp_var4": 2,
                    "unsigned_input_4": 1,
                    "var4": 1
                },
                "uVar5": {
                    "condition3": 1,
                    "masked_input_2": 2,
                    "masked_param_2": 1,
                    "masked_second_number": 1,
                    "modified_input2": 2,
                    "modified_input_2": 4,
                    "modified_param_2": 1,
                    "normalized_param2": 2,
                    "normalized_second_param": 1,
                    "normalized_value_2": 1,
                    "param2_filtered": 1,
                    "param2_masked": 1,
                    "param_b_modified": 1,
                    "positive_float_part2": 1,
                    "positive_input2": 1,
                    "positive_param_2": 1,
                    "result_4": 1,
                    "temp5": 2,
                    "temp_5": 1,
                    "temp_var5": 2,
                    "unsigned_input2": 1,
                    "unsigned_input_2": 1,
                    "var5": 1
                },
                "uVar6": {
                    "calculated_result": 2,
                    "float_result": 2,
                    "floating_point_result": 1,
                    "floating_point_value": 2,
                    "floating_result": 1,
                    "result": 16,
                    "result_2": 1,
                    "temp_2": 1,
                    "temp_6": 1,
                    "temp_var6": 2,
                    "value_combined": 1,
                    "var6": 1
                },
                "uVar7": {
                    "temp_result": 1,
                    "temporary_result": 1
                },
                "uVar8": {
                    "temp_result_high": 1
                }
            },
            "called": [
                "FUN_080059f0",
                "FUN_08005d0c",
                "FUN_08000158",
                "FUN_0800071c",
                "FUN_0800015c"
            ],
            "calling": [
                "thunk_FUN_08005838"
            ],
            "code": "\nuint calculate_improved_result_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 result_high;\n  uint flag;\n  uint modified_input_4;\n  uint modified_input_2;\n  undefined8 result;\n  \n  modified_input_4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (modified_input_4 | (-input3 | input3) >> 0x1f)) ||\n     (modified_input_2 = input2 & 0x7fffffff, 0x7ff00000 < (modified_input_2 | (-input1 | input1) >> 0x1f))) {\n    modified_input_4 = calculate_arithmetic_result(input3,input4,input1,input2);\n    return modified_input_4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    modified_input_4 = calculate_improved_result_08005838();\n    return modified_input_4;\n  }\n  flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((modified_input_2 | input1) == 0) {\n    if (flag == 2) {\n      return 0x54442d18;\n    }\n    if (flag != 3) {\n      return input1;\n    }\n  }\n  else if ((modified_input_4 | input3) != 0) {\n    if (modified_input_4 == 0x7ff00000) {\n      if (modified_input_2 == 0x7ff00000) {\n        if (flag == 2) {\n          return 0x7f3321d2;\n        }\n        if (flag == 3) {\n          return 0x7f3321d2;\n        }\n        if (flag == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (flag == 2) {\n        return 0x54442d18;\n      }\n      if (flag != 3) {\n        if (flag != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (modified_input_2 != 0x7ff00000) {\n      difference = (int)(modified_input_2 - modified_input_4) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != check_signed_carry4(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          calculate_floating_point_value(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          result = calculate_improved_result_08005838();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      result_high = (undefined4)((ulonglong)result >> 0x20);\n      modified_input_4 = (uint)result;\n      if (flag == 1) {\n        return modified_input_4;\n      }\n      if (flag == 2) {\n        result = calculate_result(modified_input_4,result_high,0x33145c07,0x3ca1a626);\n        modified_input_4 = calculate_result(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return modified_input_4;\n      }\n      if (flag != 0) {\n        result = calculate_result(modified_input_4,result_high,0x33145c07,0x3ca1a626);\n        modified_input_4 = calculate_result((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return modified_input_4;\n      }\n      return modified_input_4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "current_name": "calculate_improved_result_08005838",
            "entrypoint": "0x08005838",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005838": "calculate_improved_result_08005838",
                "SCARRY4": "check_signed_carry4",
                "calculate_arithmetic_result_0800015c": "calculate_arithmetic_result",
                "calculate_floating_point_value_0800071c": "calculate_floating_point_value",
                "calculate_improved_result_080059f0": "calculate_improved_result",
                "calculate_result_08000158": "calculate_result",
                "iVar1": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result_high",
                "uVar3": "flag",
                "uVar4": "modified_input_4",
                "uVar5": "modified_input_2",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080059f0": {
            "additional_data": {
                "FUN_080059f0": {
                    "calculate": 3,
                    "calculate_and_improve_result": 1,
                    "calculate_arithmetic_result": 1,
                    "calculate_improved_result": 8,
                    "calculate_improved_value": 2,
                    "calculate_result": 10,
                    "calculate_value": 1,
                    "perform_calculation": 1
                },
                "iVar8": {
                    "calculation_code": 1,
                    "calculation_mode": 1,
                    "calculation_type": 1,
                    "case_index": 1,
                    "case_num": 1,
                    "case_selector": 1,
                    "condition": 5,
                    "decision": 1,
                    "index": 2,
                    "operation_type": 2,
                    "option": 1,
                    "result": 4,
                    "result8": 1,
                    "result_7": 1,
                    "result_8": 1,
                    "result_index": 1,
                    "result_type": 1,
                    "status": 1,
                    "switch_case_value": 1,
                    "temp_2": 1,
                    "temp_var1": 1,
                    "temp_var8": 1
                },
                "param_1": {
                    "input1": 12,
                    "input_1": 4,
                    "input_param": 5,
                    "input_param1": 2,
                    "input_param_1": 2,
                    "input_parameter1": 1,
                    "input_value1": 2,
                    "input_value_1": 1,
                    "num1": 1,
                    "value1": 1
                },
                "param_2": {
                    "flag": 1,
                    "flag_param": 1,
                    "flags": 1,
                    "input2": 12,
                    "input_2": 4,
                    "input_param2": 2,
                    "input_param_2": 2,
                    "input_parameter2": 1,
                    "input_value": 2,
                    "input_value2": 2,
                    "input_value_2": 1,
                    "num2": 1,
                    "value2": 1
                },
                "param_3": {
                    "input3": 9,
                    "input_3": 4,
                    "input_param3": 2,
                    "input_param_3": 2,
                    "input_parameter3": 1,
                    "other_parameter1": 1,
                    "param3": 3,
                    "param_3": 1,
                    "temp_param_1": 1,
                    "temp_value1": 1,
                    "unused_param": 4,
                    "val1": 1,
                    "value3": 1
                },
                "param_4": {
                    "input4": 9,
                    "input_4": 4,
                    "input_param4": 2,
                    "input_param_4": 2,
                    "input_parameter4": 1,
                    "other_parameter2": 1,
                    "param": 1,
                    "param4": 3,
                    "param_4": 1,
                    "temp_param_2": 1,
                    "temp_value2": 1,
                    "unused_param": 1,
                    "unused_param_2": 2,
                    "val2": 1,
                    "value4": 1
                },
                "uVar1": {
                    "intermediate_value1": 1,
                    "result1": 11,
                    "result8": 1,
                    "result_1": 10,
                    "temp1": 2,
                    "temp_value3": 1,
                    "temp_var1": 2,
                    "temp_var_1": 1,
                    "value1": 1,
                    "var1": 1
                },
                "uVar10": {
                    "calculated_value2": 1,
                    "calculation_result": 2,
                    "combined_inputs": 1,
                    "final_result": 3,
                    "final_result2": 3,
                    "final_result_2": 1,
                    "final_result_high": 1,
                    "intermediate_result": 2,
                    "intermediate_result1": 1,
                    "result": 1,
                    "result2": 1,
                    "result_9": 1,
                    "result_value2": 1,
                    "result_var2": 1,
                    "temp_result": 8,
                    "temp_result2": 2,
                    "temp_var2": 1
                },
                "uVar2": {
                    "intermediate_value2": 1,
                    "result2": 11,
                    "result7": 1,
                    "result_2": 10,
                    "temp2": 2,
                    "temp_value4": 1,
                    "temp_var2": 2,
                    "temp_var_2": 1,
                    "value2": 1,
                    "var2": 1
                },
                "uVar3": {
                    "intermediate_value3": 1,
                    "result3": 11,
                    "result6": 1,
                    "result_3": 10,
                    "temp3": 2,
                    "temp_value5": 1,
                    "temp_var3": 2,
                    "temp_var_3": 1,
                    "value3": 1,
                    "var3": 1
                },
                "uVar4": {
                    "intermediate_value4": 1,
                    "result4": 11,
                    "result5": 1,
                    "result_4": 10,
                    "temp4": 2,
                    "temp_value6": 1,
                    "temp_var4": 2,
                    "temp_var_4": 1,
                    "value4": 1,
                    "var4": 1
                },
                "uVar5": {
                    "intermediate_value5": 1,
                    "result4": 1,
                    "result5": 11,
                    "result_5": 10,
                    "temp5": 2,
                    "temp_value7": 1,
                    "temp_var5": 2,
                    "temp_var_5": 1,
                    "value5": 1,
                    "var5": 1
                },
                "uVar6": {
                    "intermediate_value6": 1,
                    "result3": 1,
                    "result6": 11,
                    "result_6": 10,
                    "temp6": 2,
                    "temp_value8": 1,
                    "temp_var6": 2,
                    "temp_var_6": 1,
                    "value6": 1,
                    "var6": 1
                },
                "uVar7": {
                    "abs_flags": 1,
                    "abs_input2": 3,
                    "abs_input_param2": 2,
                    "abs_value": 1,
                    "abs_value2": 2,
                    "flag_masked": 1,
                    "flag_val": 1,
                    "input2_modified": 1,
                    "modified_input2": 1,
                    "param_2_abs": 1,
                    "positive_input2": 2,
                    "positive_input_2": 1,
                    "positive_param_2": 1,
                    "positive_value": 1,
                    "temp": 1,
                    "temp7": 2,
                    "temp_1": 1,
                    "temp_input2": 1,
                    "temp_var7": 1,
                    "unsigned_input": 1,
                    "unsigned_input2": 1,
                    "unsigned_input_2": 1,
                    "unsigned_input_value_2": 1,
                    "value": 1,
                    "var7": 1
                },
                "uVar9": {
                    "calc_result": 1,
                    "calculated_value1": 1,
                    "calculation_result": 1,
                    "final_result": 10,
                    "final_result1": 3,
                    "final_result_1": 1,
                    "final_result_low": 1,
                    "intermediate_result2": 1,
                    "intermediate_value": 1,
                    "result": 1,
                    "result1": 1,
                    "result2": 1,
                    "result_8": 1,
                    "result_9": 1,
                    "result_value1": 1,
                    "result_var1": 1,
                    "temp_result": 1,
                    "temp_result1": 2,
                    "temp_var1": 1
                }
            },
            "called": [
                "FUN_08005d0c",
                "FUN_08000158",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_080009e8",
                "FUN_0800015c"
            ],
            "calling": [
                "FUN_08005838"
            ],
            "code": "\nundefined8 calculate_improved_result_080059f0(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  uint abs_input2;\n  int condition;\n  undefined8 final_result;\n  undefined8 temp_result;\n  \n  temp_result = CONCAT44(input2,input1);\n  abs_input2 = input2 & 0x7fffffff;\n  if (abs_input2 < 0x44100000) {\n    if (abs_input2 < 0x3fdc0000) {\n      if (abs_input2 < 0x3e200000) {\n        final_result = calculate_arithmetic_result_0800015c(input1,input2,0x8800759c,0x7e37e43c,input4);\n        condition = check_if_string_is_empty_080009e8((int)final_result,(int)((ulonglong)final_result >> 0x20),0,0x3ff00000);\n        if (condition != 0) {\n          return CONCAT44(input2,input1);\n        }\n      }\n      condition = -1;\n    }\n    else {\n      temp_result = FUNC_08005d0c();\n      result4 = (undefined4)((ulonglong)temp_result >> 0x20);\n      result1 = (undefined4)temp_result;\n      if (abs_input2 < 0x3ff30000) {\n        if (abs_input2 < 0x3fe60000) {\n          temp_result = calculate_arithmetic_result_0800015c(result1,result4,result1,result4);\n          temp_result = calculate_result_08000158((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n          final_result = calculate_arithmetic_result_0800015c(result1,result4,0,0x40000000);\n          temp_result = calculate_floating_point_value_0800071c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)final_result,\n                                (int)((ulonglong)final_result >> 0x20));\n          condition = 0;\n        }\n        else {\n          temp_result = calculate_result_08000158(result1,result4,0,0x3ff00000);\n          final_result = calculate_arithmetic_result_0800015c(result1,result4,0,0x3ff00000);\n          temp_result = calculate_floating_point_value_0800071c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)final_result,\n                                (int)((ulonglong)final_result >> 0x20));\n          condition = 1;\n        }\n      }\n      else if (abs_input2 < 0x40038000) {\n        temp_result = calculate_result_08000158(result1,result4,0,0x3ff80000);\n        final_result = calculate_improved_result_080059f0_080004c8(result1,result4,0,0x3ff80000);\n        final_result = calculate_arithmetic_result_0800015c((int)final_result,(int)((ulonglong)final_result >> 0x20),0,0x3ff00000);\n        temp_result = calculate_floating_point_value_0800071c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)final_result,\n                              (int)((ulonglong)final_result >> 0x20));\n        condition = 2;\n      }\n      else {\n        temp_result = calculate_floating_point_value_0800071c(0,0xbff00000,result1,result4);\n        condition = 3;\n      }\n    }\n    result6 = (undefined4)((ulonglong)temp_result >> 0x20);\n    result5 = (undefined4)temp_result;\n    temp_result = calculate_improved_result_080059f0_080004c8(result5,result6,result5,result6);\n    result2 = (undefined4)((ulonglong)temp_result >> 0x20);\n    result1 = (undefined4)temp_result;\n    temp_result = calculate_improved_result_080059f0_080004c8(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)temp_result >> 0x20);\n    result4 = (undefined4)temp_result;\n    temp_result = calculate_improved_result_080059f0_080004c8(result4,result3,0xe322da11,0x3f90ad3a);\n    temp_result = calculate_arithmetic_result_0800015c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x24760deb,0x3fa97b4b);\n    temp_result = calculate_improved_result_080059f0_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = calculate_arithmetic_result_0800015c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp_result = calculate_improved_result_080059f0_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = calculate_arithmetic_result_0800015c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xc54c206e,0x3fb745cd);\n    temp_result = calculate_improved_result_080059f0_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = calculate_arithmetic_result_0800015c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x920083ff,0x3fc24924);\n    temp_result = calculate_improved_result_080059f0_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = calculate_arithmetic_result_0800015c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x5555550d,0x3fd55555);\n    temp_result = calculate_improved_result_080059f0_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result1,result2);\n    final_result = calculate_improved_result_080059f0_080004c8(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    final_result = calculate_result_08000158((int)final_result,(int)((ulonglong)final_result >> 0x20),0x52defd9a,0x3fadde2d);\n    final_result = calculate_improved_result_080059f0_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = calculate_result_08000158((int)final_result,(int)((ulonglong)final_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    final_result = calculate_improved_result_080059f0_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = calculate_result_08000158((int)final_result,(int)((ulonglong)final_result >> 0x20),0xfe231671,0x3fbc71c6);\n    final_result = calculate_improved_result_080059f0_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = calculate_result_08000158((int)final_result,(int)((ulonglong)final_result >> 0x20),0x9998ebc4,0x3fc99999);\n    final_result = calculate_improved_result_080059f0_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    temp_result = calculate_arithmetic_result_0800015c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)final_result,\n                          (int)((ulonglong)final_result >> 0x20));\n    temp_result = calculate_improved_result_080059f0_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result5,result6);\n    result1 = (undefined4)((ulonglong)temp_result >> 0x20);\n    if (condition == -1) {\n      temp_result = calculate_result_08000158(result5,result6,(int)temp_result,result1);\n      return temp_result;\n    }\n    condition = condition * 8;\n    temp_result = calculate_result_08000158((int)temp_result,result1,*(undefined4 *)(&UNK_08009ee8 + condition),\n                          *(undefined4 *)(&UNK_08009eec + condition));\n    temp_result = calculate_result_08000158((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result5,result6);\n    temp_result = calculate_result_08000158(*(undefined4 *)(&UNK_08009ec8 + condition),\n                          *(undefined4 *)(&UNK_08009ecc + condition),(int)temp_result,\n                          (int)((ulonglong)temp_result >> 0x20));\n    if ((int)input2 < 0) {\n      return CONCAT44((int)((ulonglong)temp_result >> 0x20) + -0x80000000,(int)temp_result);\n    }\n  }\n  else {\n    if ((abs_input2 < 0x7ff00001) && ((abs_input2 != 0x7ff00000 || (input1 == 0)))) {\n      result1 = 0xbff921fb;\n      if (0 < (int)input2) {\n        result1 = 0x3ff921fb;\n      }\n      return CONCAT44(result1,0x54442d18);\n    }\n    temp_result = calculate_arithmetic_result_0800015c(input1,input2,input1,input2,input4);\n  }\n  return temp_result;\n}\n\n",
            "current_name": "calculate_improved_result_080059f0",
            "entrypoint": "0x080059f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080059f0": "calculate_improved_result_080059f0",
                "iVar8": "condition",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar10": "temp_result",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "abs_input2",
                "uVar9": "final_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "called": [],
            "calling": [
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005d0c",
            "entrypoint": "0x08005d0c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005d14": {
            "additional_data": {
                "DAT_2000001c": {
                    "data": 10,
                    "data_offset": 1,
                    "data_value": 1,
                    "data_variable": 1,
                    "global_data": 1,
                    "global_value": 1,
                    "global_variable": 3,
                    "global_variable_value": 1,
                    "memory_address": 1,
                    "result": 1
                },
                "FUN_08005d14": {
                    "get_dat_2000001c": 1,
                    "get_data": 12,
                    "get_data_from_address": 1,
                    "get_data_offset": 1,
                    "get_data_value": 7,
                    "get_data_variable": 1,
                    "get_global_data": 1,
                    "get_global_value": 1,
                    "get_global_variable": 4,
                    "get_global_variable_value": 1,
                    "get_memory_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005728"
            ],
            "code": "\nundefined4 get_data_value_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "current_name": "get_data_value_08005d14",
            "entrypoint": "0x08005d14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d14": "get_data_value_08005d14"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d20": {
            "additional_data": {
                "DAT_0800a198": {
                    "callback_array": 1,
                    "function_array": 1,
                    "function_list": 1,
                    "function_pointer_array": 1,
                    "function_table": 1
                },
                "FUNC_08009e68": {
                    "initialize": 5,
                    "initialize_callbacks": 1,
                    "initialize_function": 1
                },
                "FUN_08005d20": {
                    "execute_and_iterate": 1,
                    "execute_callbacks": 2,
                    "execute_function_chain": 1,
                    "execute_function_list": 1,
                    "execute_function_repeatedly": 1,
                    "execute_function_sequence": 1,
                    "execute_function_set": 1,
                    "execute_function_set_twice": 4,
                    "execute_functions": 9,
                    "execute_functions_with_index_limit": 1,
                    "execute_functions_with_limit": 1,
                    "execute_functions_within_range": 1,
                    "execute_multiple_functions": 3,
                    "execute_tasks": 1,
                    "execute_two_functions": 2,
                    "initialize_and_execute_functions": 1
                },
                "iVar1": {
                    "callback_counter": 1,
                    "count": 2,
                    "counter": 10,
                    "index": 1,
                    "iteration": 1,
                    "iteration_count": 14,
                    "iteration_counter": 1,
                    "task_count": 1
                },
                "ppcVar2": {
                    "callback_pointer": 2,
                    "function_array": 1,
                    "function_pointer": 12,
                    "function_pointer_array": 9,
                    "function_pointer_list": 2,
                    "function_pointer_set": 1,
                    "function_pointers": 2,
                    "function_ptrs": 1,
                    "task_pointers": 1
                }
            },
            "called": [
                "FUN_08009e68",
                "FUN_08000134",
                "FUN_080078a0"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid execute_multiple_functions_08005d20(void)\n\n{\n  int iteration_count;\n  code **function_pointer;\n  \n  FUNC_08009e68();\n  iteration_count = 0;\n  function_pointer = (code **)&DAT_0800a198;\n  do {\n    iteration_count = iteration_count + 1;\n    (**function_pointer)();\n    function_pointer = function_pointer + 1;\n  } while (iteration_count != 2);\n  return;\n}\n\n",
            "current_name": "execute_multiple_functions_08005d20",
            "entrypoint": "0x08005d20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d20": "execute_multiple_functions_08005d20",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d68": {
            "additional_data": {
                "FUN_08005d68": {
                    "clear_memory": 2,
                    "copy_and_fill_memory": 1,
                    "fill_buffer": 1,
                    "fill_buffer_with_byte": 1,
                    "fill_memory": 4,
                    "fill_memory_with_byte": 5,
                    "fill_with_byte": 1,
                    "initialize_memory": 3,
                    "memset": 5,
                    "memset_uint_array": 1,
                    "memset_with_byte": 2,
                    "memset_with_padding": 3,
                    "memset_with_value": 2
                },
                "LAB_08005de4": {
                    "end_of_loop": 1
                },
                "bVar5": {
                    "check_condition": 1,
                    "end_reached": 1,
                    "is_count_zero": 2,
                    "is_done": 1,
                    "is_empty": 1,
                    "is_end": 1,
                    "is_end_aligned": 2,
                    "is_end_of_buffer": 1,
                    "is_end_reached": 1,
                    "is_finished": 1,
                    "is_last_iteration": 2,
                    "is_remaining_zero": 1,
                    "is_size_zero": 4,
                    "is_zero": 5,
                    "is_zero_length": 1,
                    "is_zero_remaining": 1,
                    "is_zero_size": 3
                },
                "param_1": {
                    "array": 1,
                    "buffer": 7,
                    "dest": 11,
                    "destination": 9,
                    "memory": 1,
                    "memory_buffer": 1,
                    "ptr_to_memory": 1
                },
                "param_2": {
                    "byte": 3,
                    "byte_value": 3,
                    "ch": 1,
                    "fill_value": 1,
                    "init_value": 1,
                    "value": 22
                },
                "param_3": {
                    "count": 4,
                    "length": 4,
                    "n": 1,
                    "num": 1,
                    "num_bytes": 4,
                    "size": 17
                },
                "puVar1": {
                    "buffer_pointer": 1,
                    "current": 1,
                    "current_elem": 1,
                    "current_element": 1,
                    "current_ptr": 1,
                    "dest_ptr": 19,
                    "dst_ptr": 1,
                    "ptr": 4,
                    "src_buffer": 1
                },
                "puVar2": {
                    "cur_ptr": 1,
                    "current_ptr": 1,
                    "dst_buffer": 1,
                    "next": 1,
                    "next_dest_ptr": 11,
                    "next_dst_ptr": 1,
                    "next_elem": 1,
                    "next_element": 1,
                    "next_pointer": 1,
                    "next_ptr": 5,
                    "ptr": 2,
                    "ptr2": 1,
                    "temp_ptr": 3
                },
                "uVar3": {
                    "count": 1,
                    "remaining": 2,
                    "remaining_bytes": 3,
                    "remaining_count": 4,
                    "remaining_length": 4,
                    "remaining_size": 15,
                    "temp_size": 1
                },
                "uVar4": {
                    "byte_pattern": 2,
                    "fill": 1,
                    "fill_pattern": 2,
                    "fill_value": 7,
                    "filled_value": 1,
                    "initialized_value": 1,
                    "new_value": 1,
                    "pattern": 5,
                    "u_var4": 1,
                    "value32": 1,
                    "value4": 1,
                    "value_32bit": 2,
                    "value_4_bytes": 1,
                    "value_4byte": 1,
                    "value_block": 1,
                    "value_concat": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08009980",
                "FUN_08004f60"
            ],
            "code": "\nvoid fill_memory_with_byte_08005d68(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  uint remaining_size;\n  undefined4 fill_value;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_size = size - 1;\n    dest_ptr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = remaining_size;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = remaining_size == 0;\n      remaining_size = remaining_size - 1;\n      dest_ptr = dest;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fill_value = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = fill_value;\n        dest_ptr[-3] = fill_value;\n        dest_ptr[-2] = fill_value;\n        dest_ptr[-1] = fill_value;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto end_of_loop;\n    }\n    do {\n      size = size - 4;\n      *dest = fill_value;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nend_of_loop:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while ((undefined4 *)(size + (int)dest) != next_dest_ptr);\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_with_byte_08005d68",
            "entrypoint": "0x08005d68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d68": "fill_memory_with_byte_08005d68",
                "LAB_08005de4": "end_of_loop",
                "bVar5": "is_zero",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "remaining_size",
                "uVar4": "fill_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "additional_data": {
                "DAT_2000001c": {
                    "constant": 1,
                    "constant_data": 1,
                    "source_data": 1
                },
                "FUNC_08005e9c": {
                    "copy_data": 1,
                    "copy_memory": 2,
                    "function": 1,
                    "process_data": 1
                },
                "FUN_08005dfc": {
                    "clear_and_return_data": 1,
                    "clear_buffer": 3,
                    "clear_local_data": 1,
                    "clear_local_memory": 1,
                    "clear_local_variable": 3,
                    "clear_memory": 14,
                    "clear_param_pointer": 1,
                    "clear_pointer": 1,
                    "decompile_and_reset": 1,
                    "initialize_data": 2,
                    "initialize_memory": 2,
                    "reset_pointer": 1
                },
                "local_4": {
                    "temp_1": 1
                },
                "local_6c": {
                    "default_size": 1,
                    "initial_memory": 1,
                    "local_var3": 1,
                    "local_variable3": 1,
                    "max_address": 1,
                    "max_flag": 1,
                    "max_int": 1,
                    "max_size": 4,
                    "max_value": 4,
                    "max_value2": 2,
                    "max_value3": 2,
                    "min": 1,
                    "min_size": 6,
                    "min_value": 3,
                    "size_limit2": 1
                },
                "local_70": {
                    "array_pointer": 1,
                    "buffer_copy": 1,
                    "current": 1,
                    "current_address": 1,
                    "current_buffer": 3,
                    "current_data": 1,
                    "current_data_pointer": 1,
                    "current_data_ptr": 1,
                    "current_element": 1,
                    "current_memory": 1,
                    "current_memory_address": 1,
                    "current_memory_block": 1,
                    "current_memory_location": 1,
                    "current_memory_ptr": 1,
                    "current_parameter": 1,
                    "current_pointer": 6,
                    "current_ptr": 1,
                    "current_value": 1,
                    "local_var2": 1,
                    "local_variable2": 1,
                    "temp_buffer": 1,
                    "temp_memory_ptr": 1,
                    "temp_var2": 1
                },
                "local_78": {
                    "local_var1": 2,
                    "local_variable1": 1,
                    "max1": 1,
                    "max_memory": 1,
                    "max_parameter": 1,
                    "max_size": 10,
                    "max_size1": 1,
                    "max_value": 5,
                    "max_value1": 3,
                    "size_limit": 2,
                    "size_limit1": 1,
                    "temp_var1": 1,
                    "value1": 1
                },
                "local_8": {
                    "temp_2": 1,
                    "unused": 1
                },
                "local_80": {
                    "array": 1,
                    "buffer": 2,
                    "buffer_list": 1,
                    "buffer_pointer": 1,
                    "buffer_ptr": 2,
                    "buffers": 1,
                    "data_ptr": 1,
                    "local_array": 4,
                    "local_buffer": 1,
                    "local_buffers": 1,
                    "local_pointers": 1,
                    "local_variable_array": 1,
                    "memory_addresses": 1,
                    "memory_ptr": 1,
                    "memory_ptr_array": 1,
                    "output_pointer": 1,
                    "param_pointer_array": 1,
                    "pointer_array": 4,
                    "pointer_to_memory_block": 1,
                    "pointers": 1,
                    "temp_buffer": 1,
                    "temporary_data_array": 1
                },
                "param_1": {
                    "buffer": 6,
                    "data": 1,
                    "data_buffer": 1,
                    "data_pointer": 3,
                    "input": 1,
                    "input_array": 1,
                    "input_data": 3,
                    "input_pointer": 3,
                    "memory": 4,
                    "memory_address": 1,
                    "memory_block": 1,
                    "memory_location": 1,
                    "memory_pointer": 1,
                    "memory_ptr": 1,
                    "parameter": 1,
                    "pointer": 2
                },
                "param_2": {
                    "array_size": 1,
                    "int_param": 1,
                    "length": 4,
                    "length_parameter": 1,
                    "param2": 1,
                    "size": 18,
                    "size1": 1,
                    "size_of_parameter": 1,
                    "value": 1,
                    "value1": 2
                },
                "param_3": {
                    "additional_param1": 1,
                    "address": 1,
                    "arg1": 1,
                    "data": 1,
                    "default_value": 2,
                    "output_data": 1,
                    "param3": 9,
                    "param_3": 1,
                    "pointer_param": 1,
                    "size2": 1,
                    "stack_ptr": 1,
                    "stack_value": 1,
                    "value": 5,
                    "value1": 2,
                    "value2": 2,
                    "value_1": 1
                },
                "param_4": {
                    "additional_param2": 1,
                    "arg2": 1,
                    "data": 2,
                    "extra_param": 1,
                    "flag": 3,
                    "offset": 2,
                    "other_value": 1,
                    "param4": 9,
                    "param_4": 1,
                    "pointer_param2": 1,
                    "register_value": 1,
                    "size3": 1,
                    "stack_data": 1,
                    "unused": 1,
                    "value2": 2,
                    "value3": 2,
                    "value_2": 1
                },
                "uStack_4": {
                    "data_copy": 1,
                    "flag": 1,
                    "func_param2": 1,
                    "local_var4": 1,
                    "param4_copy": 2,
                    "param_4": 1,
                    "stack_param2": 1,
                    "stack_param4": 1,
                    "unused": 1,
                    "updated_size2": 1,
                    "updated_value2": 1,
                    "value5": 1
                },
                "uStack_74": {
                    "constant": 1,
                    "constant_value": 3,
                    "default_address": 1,
                    "default_value": 5,
                    "initial_flag_value": 1,
                    "local_var2": 1,
                    "magic_number": 1,
                    "max2": 1,
                    "max_value2": 2,
                    "some_value": 1,
                    "value2": 1
                },
                "uStack_8": {
                    "address_copy": 1,
                    "copy_size": 1,
                    "func_param1": 1,
                    "local_var3": 1,
                    "local_var4": 1,
                    "modified_value": 1,
                    "param3_copy": 2,
                    "param_3": 1,
                    "stack_param1": 1,
                    "stack_param3": 1,
                    "stack_var1": 1,
                    "updated_size1": 1,
                    "updated_value1": 1,
                    "value": 1,
                    "value4": 1,
                    "value_ptr": 1
                }
            },
            "called": [
                "FUN_08005e9c"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid clear_local_memory_08005dfc(undefined *buffer,undefined4 size,undefined4 param3,undefined4 param4)\n\n{\n  undefined *pointer_array [2];\n  undefined4 max_size;\n  undefined4 default_value;\n  undefined *current_pointer;\n  undefined4 min_size;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  \n  min_size = 0x7fffffff;\n  max_size = 0x7fffffff;\n  default_value = 0xffff0208;\n  pointer_array[0] = buffer;\n  current_pointer = buffer;\n  param3_copy = param3;\n  param4_copy = param4;\n  FUNC_08005e9c(DAT_2000001c,pointer_array,size,&param3_copy);\n  *pointer_array[0] = 0;\n  return;\n}\n\n",
            "current_name": "clear_local_memory_08005dfc",
            "entrypoint": "0x08005dfc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005dfc": "clear_local_memory_08005dfc",
                "local_6c": "min_size",
                "local_70": "current_pointer",
                "local_78": "max_size",
                "local_8": "temp_2",
                "local_80": "pointer_array",
                "param_1": "buffer",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_4": "param4_copy",
                "uStack_74": "default_value",
                "uStack_8": "param3_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005e40": {
            "additional_data": {
                "FUN_08005e40": {
                    "calculate_byte_offset": 1,
                    "calculate_function_offset": 1,
                    "calculate_indexes": 1,
                    "calculate_leading_zeroes": 1,
                    "calculate_lz_count": 1,
                    "calculate_lzcount": 2,
                    "calculate_offset": 1,
                    "calculate_shift": 1,
                    "count_leading_zeroes": 1,
                    "count_leading_zeros": 11,
                    "decode_int": 1,
                    "decode_var_length": 1,
                    "find_last_bit_set": 1,
                    "find_last_set_bit": 1,
                    "find_last_set_bit_position": 1,
                    "get_leading_zeros": 1,
                    "reverse_and_count_leading_zeros": 2,
                    "reverse_bits_count": 1,
                    "reverse_count_bits": 1
                },
                "LZCOUNT": {
                    "count_leading_zeros": 1,
                    "leading_zero_count": 3,
                    "leading_zeros": 1
                },
                "iVar1": {
                    "alignment_offset": 1,
                    "bit_offset": 1,
                    "leading_zero_count": 2,
                    "leading_zeros": 9,
                    "num_leading_zeros": 1,
                    "offset": 10,
                    "offset_bits": 1,
                    "padding_length": 1,
                    "remainder": 1,
                    "remaining_bits": 1,
                    "shift_amount": 1,
                    "shifted": 1,
                    "trailing_zeros": 1
                },
                "param_1": {
                    "bit_map": 1,
                    "data": 1,
                    "input": 14,
                    "input_data": 1,
                    "input_num": 3,
                    "input_number": 1,
                    "input_value": 4,
                    "length": 1,
                    "value": 5
                },
                "puVar2": {
                    "aligned_addr": 1,
                    "aligned_ptr": 1,
                    "data": 1,
                    "data_ptr": 2,
                    "ptr": 21,
                    "ptr_to_uint": 1,
                    "ptr_uint": 1,
                    "word_ptr": 3
                },
                "uVar3": {
                    "byte": 1,
                    "byte_pattern": 1,
                    "current_uint": 1,
                    "current_value": 4,
                    "current_word": 1,
                    "data": 1,
                    "mask": 4,
                    "masked_value": 1,
                    "val": 1,
                    "value": 14,
                    "word": 1,
                    "word_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08005e9c"
            ],
            "code": "\nint reverse_and_count_leading_zeros_08005e40(uint input)\n\n{\n  int offset;\n  uint *ptr;\n  uint value;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  offset = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((offset + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    value = value + 0xfefefeff & ~value & 0x80808080;\n    if (value != 0) break;\n    value = *ptr;\n    offset = offset + 4;\n  }\n  return offset + (0x1fU - leading_zero_count(value & -value) >> 3);\n}\n\n",
            "current_name": "reverse_and_count_leading_zeros_08005e40",
            "entrypoint": "0x08005e40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005e40": "reverse_and_count_leading_zeros_08005e40",
                "LZCOUNT": "leading_zero_count",
                "iVar1": "offset",
                "param_1": "input",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "called": [
                "FUN_0800901c",
                "FUN_080079e8",
                "FUN_080088ec",
                "FUN_08000998",
                "FUN_080009e8",
                "FUN_08001170",
                "FUN_080096e0",
                "FUN_080003f4",
                "FUN_08000158",
                "FUN_080097cc",
                "FUN_08005e40",
                "FUN_080009c0",
                "FUN_080009ac",
                "FUN_08008af8",
                "FUN_080004c8",
                "FUN_080011ec",
                "FUN_0800119c",
                "FUN_08008ad4",
                "FUN_08009768"
            ],
            "calling": [
                "FUN_08005dfc"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)get_adjusted_value_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)reverse_and_count_leading_zeros_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = initialize_and_allocate_memory_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = get_adjusted_value_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)reverse_and_count_leading_zeros_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = get_adjusted_value_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = check_parameters_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = check_and_return_equality_or_boundaries_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = check_if_string_is_empty_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = check_parameters_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)initialize_and_allocate_memory_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = calculate_converted_result_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_improved_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = check_equality_and_boundaries_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = calculate_converted_result_080096e0(local_128,uVar19,&local_f0);\n          local_150 = calculate_improved_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = check_equality_and_boundaries_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)convert_float_to_readable_string_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = check_equality_and_boundaries_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)convert_float_to_readable_string_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)convert_float_to_readable_string_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = check_equality_and_boundaries_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)reverse_and_count_leading_zeros_08005e40(piVar23);\n        }\n        else {\n          iVar3 = find_byte_sequence_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        calculate_result_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          copy_string_with_overflow_check_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = calculate_result_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = check_equality_and_boundaries_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = calculate_improved_result_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = reverse_bits_0800119c();\n    uVar34 = reverse_bits_and_shift_080003f4();\n    uVar33 = calculate_result_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = check_if_string_is_empty_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = check_equality_and_boundaries_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = reverse_and_copy_memory_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = reverse_and_copy_memory_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = reverse_and_copy_memory_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = check_equality_and_boundaries_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = reverse_and_copy_memory_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = check_equality_and_boundaries_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = reverse_and_copy_memory_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_and_copy_memory_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_and_copy_memory_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = reverse_and_copy_memory_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = reverse_and_copy_memory_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = reverse_and_copy_memory_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_and_copy_memory_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = reverse_and_copy_memory_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = reverse_and_copy_memory_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = reverse_and_copy_memory_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      initialize_and_allocate_memory_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    initialize_and_allocate_memory_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "current_name": "FUNC_08005e9c",
            "entrypoint": "0x08005e9c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080078a0": {
            "called": [
                "FUN_080098c0"
            ],
            "calling": [
                "FUN_08005d20"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080078a0",
            "entrypoint": "0x080078a0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080078c0": {
            "additional_data": {
                "FUN_080078c0": {
                    "calculate_array_division": 1,
                    "calculate_array_quotient": 1,
                    "calculate_array_ratio": 1,
                    "calculate_divided_sum": 1,
                    "calculate_dividend": 2,
                    "calculate_division": 10,
                    "calculate_division_remainder": 1,
                    "calculate_division_result": 1,
                    "calculate_quotient": 4,
                    "calculate_quotient_and_remainder": 2,
                    "calculate_ratio": 1,
                    "calculate_result": 1,
                    "divide_and_adjust_arrays": 1,
                    "divide_and_compare_arrays": 1,
                    "divide_and_update_arrays": 1,
                    "perform_division": 1,
                    "reversed_division": 1
                },
                "compare_arrays_080094f8": {
                    "compare_arrays": 9
                },
                "iVar3": {
                    "carry": 20,
                    "carry1": 4,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 3,
                    "temp_divisor": 1
                },
                "iVar4": {
                    "array2_last_element": 1,
                    "array2_length": 2,
                    "array_size": 1,
                    "compare_result": 1,
                    "comparison_result": 1,
                    "denominator_length": 1,
                    "dividend_array_length": 1,
                    "dividend_length": 1,
                    "divisor_length": 6,
                    "divisor_size": 3,
                    "length": 5,
                    "limit": 1,
                    "numerator_length": 1,
                    "result": 1,
                    "size": 3,
                    "size1": 1,
                    "size_of_array": 1
                },
                "iVar5": {
                    "current_index": 2,
                    "dividend_length": 2,
                    "divisor_length": 1,
                    "index": 13,
                    "last_index": 7,
                    "last_non_zero_index": 1,
                    "new_array1_length": 1,
                    "reduced_divisor_length": 1,
                    "remainder_index": 1,
                    "temp2": 1,
                    "temp_index": 1
                },
                "param_1": {
                    "array1": 8,
                    "array1_length": 1,
                    "array_1": 2,
                    "dividend": 10,
                    "dividend_array": 2,
                    "input_array1": 4,
                    "numerator": 4
                },
                "param_2": {
                    "array2": 8,
                    "array2_length": 1,
                    "array_2": 2,
                    "denominator": 4,
                    "divisor": 10,
                    "divisor_array": 2,
                    "input_array2": 4
                },
                "puVar11": {
                    "array_2_ptr_current": 1,
                    "current_denominator": 1,
                    "current_denominator_ptr": 1,
                    "current_divisor_pointer": 2,
                    "current_value2": 1,
                    "denominator_ptr": 1,
                    "denominator_ptr2": 1,
                    "divisor_arr_ptr_iter": 1,
                    "divisor_coefficients_ptr": 1,
                    "divisor_element_ptr": 1,
                    "divisor_next_ptr": 1,
                    "divisor_ptr": 3,
                    "ptr1": 1,
                    "ptr1_iter": 1,
                    "ptr4": 1,
                    "ptr5": 4,
                    "ptr_array2": 1,
                    "ptr_array_1_next": 1,
                    "ptr_input_array2_next": 1,
                    "ptr_reduced_divisor": 1,
                    "ptr_temp_array2": 1,
                    "ptr_temp_divisor": 1,
                    "temp_arr2": 1,
                    "temp_ptr1": 1,
                    "temp_ptr2": 1
                },
                "puVar12": {
                    "array_2_ptr": 1,
                    "current_divisor_ptr": 2,
                    "denominator_ptr": 1,
                    "divisor_arr_ptr_next": 1,
                    "divisor_coefficients_next_ptr": 1,
                    "divisor_current_ptr": 1,
                    "divisor_ptr": 1,
                    "next_denominator": 1,
                    "next_denominator_ptr": 2,
                    "next_divisor_element_ptr": 1,
                    "next_divisor_pointer": 2,
                    "next_value2": 1,
                    "ptr2": 1,
                    "ptr2_iter": 1,
                    "ptr5": 1,
                    "ptr6": 4,
                    "ptr_array_2_next": 1,
                    "ptr_input_array2_current": 1,
                    "ptr_next": 1,
                    "ptr_next_divisor": 1,
                    "ptr_next_reduced_divisor": 1,
                    "ptr_temp_array2": 1,
                    "temp_arr3": 1,
                    "temp_ptr2": 1,
                    "temp_ptr3": 1
                },
                "puVar2": {
                    "array1_ptr": 1,
                    "array_1_ptr": 1,
                    "current_ptr": 1,
                    "current_value1": 1,
                    "dividend_arr_ptr": 1,
                    "dividend_pointer": 1,
                    "dividend_ptr": 5,
                    "numerator_ptr": 3,
                    "ptr1": 6,
                    "ptr_array1": 2,
                    "ptr_array_1": 1,
                    "ptr_dividend": 2,
                    "ptr_input_array1": 1,
                    "temp_arr": 1,
                    "temp_ptr1": 1
                },
                "puVar7": {
                    "array2_ptr": 1,
                    "array_2_ptr_start": 1,
                    "current_value2": 1,
                    "denominator_pointer": 1,
                    "denominator_ptr": 3,
                    "divisor_arr": 1,
                    "divisor_arr_ptr": 1,
                    "divisor_pointer": 2,
                    "divisor_ptr": 6,
                    "ptr1": 1,
                    "ptr2": 6,
                    "ptr_array2": 3,
                    "ptr_array_2": 1,
                    "ptr_divisor": 1,
                    "ptr_input_array2": 1,
                    "ptr_reduced_divisor": 1
                },
                "puVar8": {
                    "array1": 1,
                    "array_1_ptr_start": 1,
                    "dividend_arr": 2,
                    "dividend_array": 1,
                    "dividend_array_pointer": 1,
                    "dividend_coefficients": 1,
                    "dividend_pointer": 1,
                    "dividend_ptr": 4,
                    "numerator_array": 2,
                    "numerator_pointer": 1,
                    "numerator_ptr": 1,
                    "output_array": 1,
                    "output_array1": 1,
                    "ptr2": 1,
                    "ptr3": 5,
                    "ptr_array1": 3,
                    "ptr_array_1_ret": 1,
                    "ptr_divisor": 1,
                    "ptr_quotient": 1,
                    "ptr_result_array": 1
                },
                "puVar9": {
                    "array2": 1,
                    "array_2_ptr_end": 1,
                    "denominator_array": 2,
                    "denominator_ptr": 1,
                    "divisor_arr": 1,
                    "divisor_array_pointer": 1,
                    "divisor_coefficients": 1,
                    "divisor_end_ptr": 3,
                    "divisor_ptr_end": 1,
                    "end": 1,
                    "end_ptr": 1,
                    "last_element": 1,
                    "last_pointer": 2,
                    "output_array2": 1,
                    "ptr2_end": 1,
                    "ptr4": 4,
                    "ptr_array2": 1,
                    "ptr_array2_last_element": 1,
                    "ptr_array_2_ret": 1,
                    "ptr_end": 3,
                    "ptr_last_divisor": 1
                },
                "uVar1": {
                    "carry": 1,
                    "divided_sum": 1,
                    "dividend": 1,
                    "quotient": 15,
                    "result": 4,
                    "temp": 1,
                    "temp1": 6,
                    "temp_1": 1,
                    "temp_val": 1
                },
                "uVar10": {
                    "carry2": 5,
                    "carry_high": 1,
                    "carry_over": 1,
                    "carry_second": 1,
                    "carry_upper_bits": 1,
                    "partial_quotient": 1,
                    "temp": 8,
                    "temp2": 2,
                    "temp3": 3,
                    "temp_2": 1,
                    "temp_carry": 1,
                    "temp_dividend": 1,
                    "temp_value": 2,
                    "upper_carry": 1
                },
                "uVar6": {
                    "divisor": 3,
                    "quotient": 12,
                    "quotient_count": 1,
                    "quotient_increment": 1,
                    "quotient_value": 1,
                    "ratio": 2,
                    "remainder": 1,
                    "result": 9,
                    "temp_quotient": 1
                }
            },
            "called": [
                "FUN_080094f8"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nuint calculate_division_remainder_080078c0(int dividend,int divisor)\n\n{\n  uint quotient;\n  uint *ptr1;\n  int carry;\n  int divisor_length;\n  int index;\n  uint quotient;\n  uint *ptr2;\n  uint *ptr3;\n  uint *ptr4;\n  uint temp;\n  uint *ptr5;\n  uint *ptr6;\n  \n  divisor_length = *(int *)(divisor + 0x10);\n  if (*(int *)(dividend + 0x10) < divisor_length) {\n    return 0;\n  }\n  index = divisor_length + -1;\n  ptr2 = (uint *)(divisor + 0x14);\n  ptr3 = (uint *)(dividend + 0x14);\n  quotient = ptr3[index] / (ptr2[index] + 1);\n  ptr4 = ptr2 + index;\n  if (quotient != 0) {\n    quotient = 0;\n    carry = 0;\n    ptr1 = ptr3;\n    ptr5 = ptr2;\n    do {\n      ptr6 = ptr5 + 1;\n      quotient = quotient * (*ptr5 & 0xffff) + quotient;\n      temp = quotient * (*ptr5 >> 0x10) + (quotient >> 0x10);\n      quotient = (carry - (quotient & 0xffff)) + (*ptr1 & 0xffff);\n      carry = ((*ptr1 >> 0x10) - (temp & 0xffff)) + ((int)quotient >> 0x10);\n      *ptr1 = quotient & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      quotient = temp >> 0x10;\n      ptr1 = ptr1 + 1;\n      ptr5 = ptr6;\n    } while (ptr6 <= ptr4);\n    if (ptr3[index] == 0) {\n      if ((ptr3 < ptr3 + divisor_length + -2) && (ptr3[divisor_length + -2] == 0)) {\n        ptr1 = ptr3 + divisor_length + -3;\n        do {\n          index = index + -1;\n          if (ptr1 <= ptr3) break;\n          quotient = *ptr1;\n          ptr1 = ptr1 + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividend + 0x10) = index;\n    }\n  }\n  divisor_length = compare_arrays();\n  if (-1 < divisor_length) {\n    divisor_length = 0;\n    quotient = quotient + 1;\n    ptr1 = ptr3;\n    do {\n      ptr5 = ptr2 + 1;\n      quotient = (divisor_length - (*ptr2 & 0xffff)) + (*ptr1 & 0xffff);\n      divisor_length = ((*ptr1 >> 0x10) - (*ptr2 >> 0x10)) + ((int)quotient >> 0x10);\n      *ptr1 = quotient & 0xffff | divisor_length * 0x10000;\n      divisor_length = divisor_length >> 0x10;\n      ptr1 = ptr1 + 1;\n      ptr2 = ptr5;\n    } while (ptr5 <= ptr4);\n    if (ptr3[index] == 0) {\n      if ((ptr3 < ptr3 + index + -1) && (ptr3[index + -1] == 0)) {\n        ptr2 = ptr3 + index + -2;\n        do {\n          index = index + -1;\n          if (ptr2 <= ptr3) break;\n          quotient = *ptr2;\n          ptr2 = ptr2 + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividend + 0x10) = index;\n    }\n  }\n  return quotient;\n}\n\n",
            "current_name": "calculate_division_remainder_080078c0",
            "entrypoint": "0x080078c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080078c0": "calculate_division_remainder_080078c0",
                "compare_arrays_080094f8": "compare_arrays",
                "iVar3": "carry",
                "iVar4": "divisor_length",
                "iVar5": "index",
                "param_1": "dividend",
                "param_2": "divisor",
                "puVar11": "ptr5",
                "puVar12": "ptr6",
                "puVar2": "ptr1",
                "puVar7": "ptr2",
                "puVar8": "ptr3",
                "puVar9": "ptr4",
                "uVar1": "quotient",
                "uVar10": "temp",
                "uVar6": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080079e8": {
            "additional_data": {
                "FUN_080079e8": {
                    "convert_float_to_decimal": 2,
                    "convert_float_to_readable_string": 1,
                    "convert_float_to_scientific_notation": 1,
                    "convert_float_to_string": 10,
                    "convert_float_to_text": 1,
                    "convert_floating_point_to_string": 1,
                    "convert_number_to_string": 1,
                    "decode_floating_point_number": 1,
                    "extract_value": 1,
                    "float_to_string": 1,
                    "format_floating_point_string": 1,
                    "improve_and_format_floating_point_number": 1,
                    "interpretation_to_string": 1,
                    "parse_floating_point_number": 1,
                    "parse_number_to_string": 1,
                    "reverse_float_to_string": 1
                },
                "bVar1": {
                    "bool1": 1,
                    "exponent_is_zero": 1,
                    "flag_1": 1,
                    "has_decimal_part": 1,
                    "has_decimal_point": 1,
                    "has_denom": 1,
                    "is_infinity": 5,
                    "is_less_than_six": 2,
                    "is_negative": 6,
                    "is_rounding_mode_less_than_half": 1,
                    "is_small_exp": 1,
                    "is_small_exponent": 1,
                    "is_small_precision": 1,
                    "is_zero": 2,
                    "use_exponential_notation": 1
                },
                "bVar2": {
                    "bool2": 1,
                    "exponent_is_negative": 1,
                    "flag_2": 1,
                    "found_value": 1,
                    "has_leading_zeroes": 1,
                    "is_finite": 1,
                    "is_greater": 1,
                    "is_greater_than_seventeen": 1,
                    "is_greater_than_six": 1,
                    "is_infinity": 1,
                    "is_nan": 1,
                    "is_negative_exp": 1,
                    "is_new_number": 1,
                    "is_normalized": 1,
                    "is_precision_greater_than4": 1,
                    "is_whole_number": 1,
                    "is_zero": 8,
                    "is_zero_length": 1,
                    "is_zero_or_infinity": 1,
                    "should_round": 2
                },
                "bVar25": {
                    "bool4": 1,
                    "bool_var1": 1,
                    "has_leading_zeros": 1,
                    "has_remainder": 1,
                    "has_remaining_digits": 1,
                    "is_exp_negative": 1,
                    "is_exponent_negative": 1,
                    "is_negative": 2,
                    "is_negative2": 1,
                    "is_non_zero": 1,
                    "var25": 1
                },
                "bVar3": {
                    "add_decimal_point": 1,
                    "add_zero": 1,
                    "bool3": 1,
                    "calculate_exponent": 1,
                    "fixed_width": 1,
                    "flag_3": 1,
                    "has_sign": 1,
                    "is_denormalized": 1,
                    "is_equal_or_less_than5": 1,
                    "is_exponential": 1,
                    "is_fixed_point": 1,
                    "is_float": 1,
                    "is_four": 1,
                    "is_less_than_or_equal_to_four": 1,
                    "is_negative": 2,
                    "is_negative_zero": 1,
                    "is_normalized": 1,
                    "is_scientific_notation": 2,
                    "is_smaller": 1,
                    "is_true": 1,
                    "requires_normalization": 1,
                    "requires_shift": 1,
                    "requires_trailing_zeroes": 1,
                    "rounded_up": 1,
                    "should_round": 1,
                    "truncate_decimals": 1
                },
                "bVar4": {
                    "result_is_zero": 1
                },
                "bVar5": {
                    "bit": 3,
                    "bit_value": 2,
                    "byte1": 1,
                    "byte_value": 3,
                    "byte_var": 2,
                    "carry": 5,
                    "digit_bit": 1,
                    "is_zero": 1,
                    "leading_zero": 1,
                    "overflow": 1,
                    "shift": 2,
                    "shift_exponent": 1,
                    "temp_byte": 2,
                    "temp_var15": 1
                },
                "cVar1": {
                    "char_var1": 1
                },
                "cVar4": {
                    "char1": 1,
                    "char_digit": 1,
                    "char_temp": 1,
                    "char_value": 2,
                    "char_var": 3,
                    "character": 1,
                    "digit": 8,
                    "digit_char": 4,
                    "digit_character": 1,
                    "last_char": 1,
                    "last_digit": 1,
                    "result_char": 1,
                    "temp_char": 1
                },
                "iVar13": {
                    "temp_exp2": 1
                },
                "iVar14": {
                    "counter": 1,
                    "counter_3": 1,
                    "exp": 1,
                    "exponent": 1,
                    "exponent_value": 1,
                    "format_offset": 1,
                    "i": 1,
                    "init_value_1": 1,
                    "int_var1": 1,
                    "int_var4": 1,
                    "iteration_count": 1,
                    "num_characters": 1,
                    "num_chars": 1,
                    "num_digits": 1,
                    "num_length": 1,
                    "shift_amount": 1,
                    "shift_result": 1,
                    "shifted_exponent_and_significand": 1,
                    "significant_digits": 1,
                    "string_index": 1,
                    "temp3": 1,
                    "temp_count": 1,
                    "temp_exp3": 1,
                    "temp_int18": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var8": 1,
                    "var14": 1,
                    "var7": 1
                },
                "iVar15": {
                    "bit_shift_count": 1,
                    "bits_offset": 1,
                    "count": 1,
                    "counter_7": 1,
                    "digit_count": 1,
                    "div_result": 1,
                    "int_var2": 1,
                    "int_var5": 1,
                    "length": 1,
                    "mantissa_shift": 2,
                    "needed_digits": 1,
                    "num_dec_places": 1,
                    "num_digits": 3,
                    "remaining_digits": 1,
                    "result_index": 1,
                    "shift_amount": 2,
                    "temp4": 1,
                    "temp_int15": 1,
                    "temp_var9": 1,
                    "total_length": 1,
                    "trailing_zeros": 1,
                    "trim_zeros": 1,
                    "var15": 1,
                    "var8": 1
                },
                "iVar16": {
                    "leading_zero_count": 1
                },
                "iVar18": {
                    "trimmed_mantissa_size": 1
                },
                "iVar19": {
                    "count_var": 1,
                    "counter_5": 1,
                    "dec_exp": 1,
                    "dec_value": 1,
                    "exponent_diff": 1,
                    "exponent_shift": 1,
                    "int_part_length": 1,
                    "int_var6": 1,
                    "mem_allocation": 1,
                    "normalization_offset": 1,
                    "num_zeros": 2,
                    "precision": 1,
                    "quotient": 1,
                    "remaining_exponent_and_significand": 1,
                    "shift": 1,
                    "shift_count": 2,
                    "temp5": 1,
                    "temp_index": 1,
                    "temp_int19": 1,
                    "temp_value": 1,
                    "temp_var1": 1,
                    "temp_var2": 2,
                    "temp_var3": 1,
                    "temp_variable": 1,
                    "var19": 1,
                    "var9": 1
                },
                "iVar20": {
                    "divisor_shift": 1
                },
                "iVar21": {
                    "shift_value": 1
                },
                "iVar24": {
                    "ascii_value": 1,
                    "carry_digit": 1,
                    "char_to_print": 1,
                    "char_value": 1,
                    "checksum": 1,
                    "counter_8": 1,
                    "digit": 1,
                    "digit_index": 1,
                    "digit_value": 1,
                    "division_remainder": 1,
                    "int_var8": 1,
                    "iteration_count2": 1,
                    "new_digit": 1,
                    "r": 1,
                    "remainder_size": 1,
                    "result_digit": 1,
                    "temp_count1": 1,
                    "temp_int": 1,
                    "temp_int9": 1,
                    "temp_value_2": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var4": 2,
                    "tmp": 1,
                    "var11": 1,
                    "var24": 1
                },
                "iVar25": {
                    "leading_zeroes": 1
                },
                "iVar7": {
                    "bit_count": 2,
                    "bit_position": 1,
                    "counter": 1,
                    "counter_1": 1,
                    "digit": 1,
                    "digits": 1,
                    "i": 3,
                    "index": 1,
                    "int_var1": 2,
                    "integral_part_length": 1,
                    "leading_zeros": 2,
                    "num_digits": 1,
                    "num_digits_remaining": 1,
                    "num_digits_to_print": 1,
                    "remainder": 1,
                    "result_length": 1,
                    "shift_distance": 1,
                    "temp_count2": 1,
                    "temp_int16": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "total_digits": 1,
                    "var1": 1
                },
                "iVar8": {
                    "array_index": 1,
                    "bit_offset": 1,
                    "compare_result": 3,
                    "comparison_result": 4,
                    "counter_2": 1,
                    "index": 1,
                    "int_exp": 1,
                    "int_var2": 2,
                    "integer_part": 1,
                    "iteration_counter": 1,
                    "j": 1,
                    "leading_ones": 1,
                    "negative_exp": 1,
                    "num_digits": 1,
                    "overflow": 1,
                    "s": 1,
                    "shift_factor": 1,
                    "temp_int17": 1,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "temp_var6": 1,
                    "var2": 1
                },
                "iVar9": {
                    "bit_shift": 1,
                    "carry_result": 1,
                    "comparison_result": 1,
                    "div_result_size": 1,
                    "divided_value": 1,
                    "i": 2,
                    "int_var3": 2,
                    "j": 1,
                    "leading_zeros": 1,
                    "mantissa_bits": 2,
                    "num_bits": 2,
                    "remainder": 2,
                    "reverse_var": 1,
                    "shift": 1,
                    "temp": 2,
                    "temp_counter": 1,
                    "temp_int12": 1,
                    "temp_result": 1,
                    "temp_value2": 1,
                    "temp_var7": 1,
                    "tmp2": 1,
                    "var3": 1
                },
                "local_2c": {
                    "bit_count_array": 1,
                    "bit_counter": 1,
                    "bit_counts": 1,
                    "bit_shift": 1,
                    "bit_values": 1,
                    "count_array1": 1,
                    "decimal_pos_bit_index": 1,
                    "digit_array": 1,
                    "digit_buffer": 1,
                    "digit_shift": 1,
                    "exponent_array_indices": 1,
                    "length_array": 1,
                    "local_array1": 1,
                    "local_var15": 1,
                    "local_variable_14": 1,
                    "stack_value5": 1,
                    "temp_array": 4,
                    "temp_int_array": 1,
                    "temp_len2": 1,
                    "temp_shift_values": 1,
                    "temp_var21": 1
                },
                "local_30": {
                    "bias": 1,
                    "bit_count": 2,
                    "bit_format": 1,
                    "bit_value": 1,
                    "count_array": 1,
                    "counter_array": 1,
                    "digit_count": 1,
                    "digit_length": 1,
                    "digit_mask": 1,
                    "divisor": 1,
                    "exp_offset": 1,
                    "first_digit": 1,
                    "first_divisor_index": 1,
                    "leading_bits": 1,
                    "local_var12": 1,
                    "local_var14": 1,
                    "local_variable_13": 1,
                    "num_digits": 1,
                    "num_digits2": 1,
                    "stack_value4": 1,
                    "temp": 1,
                    "temp_local13": 1,
                    "temp_shift_amount": 1,
                    "temp_value9": 1,
                    "temp_var10": 1,
                    "temp_var20": 1
                },
                "local_34": {
                    "abs_exponent2": 1,
                    "checksum_length": 1,
                    "exp_diff": 1,
                    "exp_last_digit": 1,
                    "integer_part_copy": 1,
                    "leading_zero_count4": 1,
                    "local_var11": 1,
                    "local_var13": 1,
                    "local_variable_12": 2,
                    "max_shift": 1,
                    "new_exp_offset": 1,
                    "num_lower_digits": 1,
                    "num_trailing_zeros": 1,
                    "output_width2": 1,
                    "remaining_iterations": 1,
                    "stack_value3": 1,
                    "temp2": 1,
                    "temp_comparison": 1,
                    "temp_exponent1": 1,
                    "temp_format_length": 1,
                    "temp_local12": 1,
                    "temp_mantissa_digit": 1,
                    "temp_value": 1,
                    "temp_var19": 1,
                    "temp_var9": 1,
                    "zero_flag": 1
                },
                "local_38": {
                    "exp_digits": 1,
                    "exponent2": 1,
                    "first_divisor": 1,
                    "last_removed_digit": 1,
                    "leading_zero_count3": 1,
                    "local_var10": 1,
                    "local_var12": 1,
                    "local_variable_11": 2,
                    "mantissa_shift": 1,
                    "max_num_digits": 1,
                    "min_digits": 1,
                    "num_non_zeros_remaining": 1,
                    "number_of_leading_zeros": 1,
                    "number_of_zeros": 1,
                    "output_width": 1,
                    "overflow_mask": 1,
                    "precision_count": 1,
                    "round_to_even_temp2": 1,
                    "rounding_threshold": 1,
                    "stack_value2": 1,
                    "temp_exponent": 1,
                    "temp_local23": 1,
                    "temp_var18": 1,
                    "temp_var8": 1,
                    "upper_bound": 1,
                    "width_exponent": 1
                },
                "local_48": {
                    "adjusted_shift": 1,
                    "boundary_index": 1,
                    "dividend": 1,
                    "divisor_high": 1,
                    "exponent_adjusted": 1,
                    "first_digit": 1,
                    "last_checked_digit": 1,
                    "local_var10": 1,
                    "local_var9": 1,
                    "local_variable_9": 2,
                    "mask": 1,
                    "mask1": 1,
                    "msb_fraction": 1,
                    "new_exp_result": 1,
                    "num_digits_after_decimal": 1,
                    "q": 1,
                    "reverse_bits": 1,
                    "round_to_even2": 1,
                    "temp_digit": 1,
                    "temp_exp_shift": 1,
                    "temp_field_width": 1,
                    "temp_local22": 1,
                    "temp_precision": 1,
                    "temp_value": 1,
                    "temp_value_3": 1,
                    "temp_var17": 1,
                    "tmp_value9": 1
                },
                "local_58": {
                    "adjusted_length": 1,
                    "dec_pt": 1,
                    "decimal_pos": 1,
                    "digit_count": 1,
                    "field_width": 1,
                    "format_length": 1,
                    "leading_zero_correction": 1,
                    "leading_zero_count2": 1,
                    "leading_zeroes": 1,
                    "leading_zeros_count": 1,
                    "local_var8": 1,
                    "local_var9": 1,
                    "local_variable_8": 2,
                    "mantissa_width": 1,
                    "num_leading_zeros": 1,
                    "num_of_frac_digits": 1,
                    "num_trailing_zeros": 1,
                    "number_of_zeros": 1,
                    "remaining_bits": 1,
                    "remaining_digits": 1,
                    "shifted_digit_value": 1,
                    "temp_local8": 1,
                    "temp_var16": 1,
                    "tmp_value8": 1,
                    "trailing_zeroes": 1,
                    "trailing_zeros": 1,
                    "zero_padding": 1
                },
                "local_5c": {
                    "bit_mask": 1,
                    "cur_decimal_digits": 1,
                    "current_zeros_count": 1,
                    "dec_shift": 1,
                    "decimal_trailing_zeroes": 1,
                    "extra_digits": 1,
                    "leading_zero_count1": 1,
                    "leading_zeroes": 2,
                    "local_var7": 2,
                    "local_variable_7": 2,
                    "max_integral_part_length": 1,
                    "normalized_digits": 1,
                    "num_digits_shifted": 1,
                    "num_fraction_digits": 1,
                    "num_trailing_zeroes": 1,
                    "original_exponent": 1,
                    "remaining_zeros": 1,
                    "result_width": 1,
                    "round_to_even_temp": 1,
                    "shift": 1,
                    "shift_correction": 1,
                    "temp_digit_index": 1,
                    "temp_local7": 1,
                    "temp_var15": 1,
                    "tmp_value7": 1
                },
                "local_60": {
                    "buffer_size": 1,
                    "decimal_pos_diff": 1,
                    "digit_count_offset": 1,
                    "dist": 1,
                    "field_width2": 1,
                    "formatted_digits": 1,
                    "integer_part_width": 1,
                    "leading_offset": 1,
                    "len": 1,
                    "local_var6": 2,
                    "local_variable_6": 2,
                    "num_decimal_digits": 1,
                    "num_digits_so_far": 1,
                    "num_leading_zeroes": 1,
                    "original_length": 1,
                    "shift": 1,
                    "shift_value": 1,
                    "temp_count4": 1,
                    "temp_len": 1,
                    "temp_local6": 1,
                    "temp_result_index": 1,
                    "temp_var14": 1,
                    "tmp_value6": 1,
                    "zeros_to_remove": 1
                },
                "local_68": {
                    "decimal_text": 1,
                    "digit_limit": 1,
                    "exp_lower_temp": 1,
                    "field_width": 1,
                    "format_width": 1,
                    "fraction_length": 1,
                    "fractional_width": 1,
                    "int_digits": 1,
                    "leading_value": 1,
                    "local_var5": 2,
                    "local_variable_5": 2,
                    "max_fractional_part_length": 1,
                    "min_digit_count": 1,
                    "min_digits": 1,
                    "min_field_width": 1,
                    "original_decimal_pos": 1,
                    "original_precision": 1,
                    "power_of10": 1,
                    "precision": 1,
                    "round_to_even": 1,
                    "shift": 1,
                    "temp_local5": 1,
                    "temp_var13": 1,
                    "tmp_value5": 1,
                    "width_value": 1
                },
                "local_70": {
                    "binary_value3": 1,
                    "dec_exponent": 1,
                    "exponent_diff": 1,
                    "exponent_shift": 1,
                    "index": 1,
                    "integral_part_length": 1,
                    "leading_zero_count": 2,
                    "leading_zeros": 3,
                    "length_offset": 1,
                    "local_var4": 2,
                    "local_variable_4": 2,
                    "negative_shift": 1,
                    "negative_sign": 1,
                    "num_exp_digits": 1,
                    "num_integral_digits": 1,
                    "num_trailing_zeroes": 1,
                    "quotient_length": 1,
                    "shifted_digits": 1,
                    "temp_local4": 1,
                    "temp_size": 1,
                    "temp_var12": 1,
                    "tmp_value4": 1
                },
                "local_74": {
                    "binary_value2": 1,
                    "decimal_length": 1,
                    "digit_shift": 1,
                    "exp_lower": 1,
                    "exponent": 1,
                    "exponent_mask": 1,
                    "exponent_result": 1,
                    "input_float_digit": 1,
                    "is_float": 1,
                    "leading_value_offset": 1,
                    "length": 1,
                    "local_var3": 2,
                    "local_variable_3": 2,
                    "num_digits": 1,
                    "num_mantissa_digits": 1,
                    "original_num_length": 1,
                    "quotient": 1,
                    "result_length": 1,
                    "temp_count3": 1,
                    "temp_local20": 1,
                    "temp_value8": 1,
                    "temp_var11": 1,
                    "tmp_value3": 1,
                    "value_sign": 1,
                    "zero_sign": 1
                },
                "local_7c": {
                    "abs_denominator": 1,
                    "abs_exponent": 1,
                    "checksum_result2": 1,
                    "copy_mantissa": 1,
                    "denom_high": 1,
                    "divisor": 1,
                    "exp_offset": 1,
                    "exponent1": 1,
                    "fractional_part_temp": 1,
                    "input_float_sign": 1,
                    "input_value_copy": 1,
                    "int_value2": 1,
                    "local_var2": 2,
                    "local_variable_2": 2,
                    "original_exponent": 2,
                    "temp_exp_bits": 1,
                    "temp_exponent_bits": 1,
                    "temp_local2": 1,
                    "temp_sign": 1,
                    "temp_val10": 1,
                    "tmp_value2": 1,
                    "unsigned_exp_value": 1,
                    "value_low": 1
                },
                "local_80": {
                    "ascii_value": 1,
                    "checksum_result1": 1,
                    "converted_mantissa": 1,
                    "current_num": 1,
                    "denom_low": 1,
                    "dividend": 1,
                    "fraction_temp": 1,
                    "integral_part_temp": 1,
                    "local_var1": 2,
                    "local_variable_1": 2,
                    "memory1": 1,
                    "new_ptr": 1,
                    "result_array": 1,
                    "significand1": 1,
                    "string_length": 1,
                    "string_size": 1,
                    "temp_float": 1,
                    "temp_local21": 1,
                    "temp_output": 1,
                    "temp_pointer": 1,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "temp_var10": 1,
                    "tmp_value1": 1,
                    "value_high": 1
                },
                "local_88": {
                    "string_index": 1
                },
                "param_1": {
                    "convert_float": 1,
                    "float_value": 3,
                    "input": 2,
                    "input1": 1,
                    "input_float": 1,
                    "input_param": 1,
                    "input_param_1": 1,
                    "input_parameter_1": 1,
                    "input_text": 1,
                    "input_value": 4,
                    "interpretation": 1,
                    "num": 1,
                    "number": 2,
                    "param_1": 1,
                    "value": 10
                },
                "param_2": {
                    "decimal_places": 1,
                    "flags": 1,
                    "format": 3,
                    "input2": 1,
                    "input_param_2": 1,
                    "input_parameter_2": 1,
                    "is_negative": 1,
                    "length": 1,
                    "param": 1,
                    "param1": 3,
                    "param2": 6,
                    "param_2": 5,
                    "param_count": 1,
                    "param_index": 1,
                    "precision": 2,
                    "something": 1,
                    "unknown_param1": 1
                },
                "param_3": {
                    "digit": 1,
                    "exponent": 2,
                    "exponent_bits": 1,
                    "float_value": 2,
                    "input_param_3": 1,
                    "input_parameter_3": 1,
                    "integer_input_1": 1,
                    "mantissa": 3,
                    "mantissa_bits": 1,
                    "number1": 1,
                    "numerator": 1,
                    "sign": 8,
                    "sign_bit": 3,
                    "significand": 3,
                    "value1": 1,
                    "x_value": 1
                },
                "param_4": {
                    "bits": 1,
                    "denominator": 1,
                    "exp": 3,
                    "exponent": 13,
                    "exponent_bits": 1,
                    "input_param_4": 1,
                    "input_parameter_4": 1,
                    "int_value": 1,
                    "integer_input_2": 1,
                    "is_negative": 1,
                    "number2": 1,
                    "sign": 2,
                    "sign_bit": 1,
                    "significand_hi": 1,
                    "value2": 1,
                    "y_value": 1
                },
                "param_5": {
                    "count1": 1,
                    "digits": 1,
                    "flags": 1,
                    "flags2": 1,
                    "format": 1,
                    "format_width": 1,
                    "fraction_bit": 1,
                    "fraction_bits": 1,
                    "fractional_part": 1,
                    "input_param_5": 1,
                    "input_parameter_5": 1,
                    "integer_input_3": 1,
                    "len": 1,
                    "min_precision": 1,
                    "min_width": 1,
                    "mode": 1,
                    "num_digits": 2,
                    "precision": 7,
                    "type": 1,
                    "use_exponential": 1,
                    "value3": 1,
                    "width": 2,
                    "z_value": 1
                },
                "param_6": {
                    "alpha_value": 1,
                    "count2": 1,
                    "decimal_pos": 1,
                    "decimal_precision": 1,
                    "digits": 1,
                    "exponent": 1,
                    "exponent_char": 1,
                    "extra": 1,
                    "flags": 2,
                    "format": 1,
                    "format_flags": 1,
                    "input_param_6": 1,
                    "input_parameter_6": 1,
                    "integer_input_4": 1,
                    "max_precision": 1,
                    "min_digits": 2,
                    "min_width": 1,
                    "num_fractional_digits": 1,
                    "number_of_digits": 2,
                    "output_length": 1,
                    "precision": 3,
                    "rounding": 1,
                    "rounding_mode": 1,
                    "ulp": 1,
                    "value4": 1,
                    "width": 1
                },
                "param_7": {
                    "error_code": 4,
                    "exp_string_len": 1,
                    "exponent": 1,
                    "integer_digits": 1,
                    "integer_part_length": 1,
                    "length": 4,
                    "num_chars": 1,
                    "num_chars_written": 1,
                    "num_digits": 2,
                    "out_len": 1,
                    "out_length": 1,
                    "output1": 2,
                    "output_len": 1,
                    "output_length": 1,
                    "output_param_1": 2,
                    "output_parameter_1": 1,
                    "output_value_1": 1,
                    "p_min_width": 1,
                    "precision": 1,
                    "status": 3
                },
                "param_8": {
                    "flags_out": 1,
                    "has_negative_sign": 1,
                    "has_sign": 1,
                    "is_negative": 10,
                    "is_negative_zero": 2,
                    "negative": 2,
                    "negative_flag": 1,
                    "out_sign": 1,
                    "output2": 2,
                    "output_param_2": 2,
                    "output_parameter_2": 1,
                    "output_value_2": 1,
                    "overflow": 2,
                    "p_print_string": 1,
                    "ptr_to_sign": 1,
                    "sign_ptr": 1,
                    "sign_string_len": 1
                },
                "param_9": {
                    "char_buffer": 1,
                    "formatted_number": 1,
                    "formatted_value": 1,
                    "fractional_part": 1,
                    "message_out": 1,
                    "out_str": 1,
                    "output": 2,
                    "output3": 2,
                    "output_param_3": 2,
                    "output_parameter_3": 1,
                    "output_ptr": 1,
                    "output_str": 1,
                    "output_string": 3,
                    "output_text": 2,
                    "p_format": 1,
                    "pptr_to_exponent": 1,
                    "result": 1,
                    "result_string": 1,
                    "str_ptr": 1,
                    "str_result": 1,
                    "string_pointer": 1,
                    "string_ptr": 1,
                    "string_value": 3
                },
                "pcVar10": {
                    "output": 1,
                    "output_ptr": 1,
                    "output_string": 1,
                    "result": 3,
                    "result_ptr": 1,
                    "result_str": 3,
                    "result_string": 2,
                    "str": 1,
                    "string1": 1,
                    "string_var1": 1
                },
                "pcVar20": {
                    "current_digit": 1,
                    "loop_ptr": 1,
                    "output_char_ptr": 1,
                    "string2": 1,
                    "string_var2": 1,
                    "temp_char_ptr2": 1,
                    "temp_string3": 1
                },
                "pcVar21": {
                    "next_digit": 1,
                    "output_char_ptr2": 1,
                    "result_ptr": 1,
                    "string3": 1,
                    "string_var3": 1,
                    "temp_char_ptr": 1,
                    "temp_string4": 1
                },
                "pcVar4": {
                    "na_n_string": 1
                },
                "pcVar5": {
                    "infinity_string": 1
                },
                "pcVar6": {
                    "result_string": 1
                },
                "ptrToDAT_08009fa8": {
                    "decimal_digit_table": 1
                },
                "ptrToDAT_08009fac": {
                    "power_of_ten_table": 1
                },
                "puVar22": {
                    "boundary_array_ptr": 1,
                    "p_pattern": 1,
                    "pointer_var": 1,
                    "ptr1": 1,
                    "temp_ptr1": 1
                },
                "uStack_44": {
                    "check_sum": 1,
                    "checksum": 1,
                    "denominator": 1,
                    "divisor": 1,
                    "exponent_array": 1,
                    "infinity_value": 1,
                    "local_var11": 1,
                    "local_variable_10": 2,
                    "mask": 1,
                    "mask2": 1,
                    "prev_digit": 1,
                    "shifted_exp_value": 1,
                    "shifted_value": 1,
                    "stack_value1": 1,
                    "stack_var1": 1,
                    "temp_local10": 1,
                    "temp_result": 1,
                    "temp_value_4": 1,
                    "temp_var22": 1,
                    "value_low": 1
                },
                "uVar10": {
                    "concatenation": 1
                },
                "uVar11": {
                    "carry_value": 1,
                    "exponent": 2,
                    "is_negative_flag": 1,
                    "is_negative_value": 1,
                    "normalized_exponent": 1,
                    "num_digits": 1,
                    "num_digits_without_sign": 1,
                    "number_of_digits_remaining": 1,
                    "parsed_bits": 1,
                    "result": 1,
                    "shifted_value": 1,
                    "temp": 1,
                    "temp_exp": 1,
                    "temp_u_int1": 1,
                    "temp_uint15": 1,
                    "temp_value1": 1,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "u_var11": 1,
                    "unsigned_var1": 1,
                    "var11": 1,
                    "var4": 1
                },
                "uVar12": {
                    "boundary1": 1,
                    "coeff1": 1,
                    "constant_value_1": 1,
                    "exponent_mask": 1,
                    "magic_number1": 1,
                    "mantissa_high": 1,
                    "normalization_factor_1": 1,
                    "num2": 1,
                    "num_dec_places": 1,
                    "parsed_bits_exponent": 1,
                    "string_length": 1,
                    "temp1": 1,
                    "temp_exp1": 1,
                    "temp_uint4": 1,
                    "temp_value1": 1,
                    "temp_value2": 1,
                    "temp_var4": 1,
                    "temp_var6": 1,
                    "tmp1": 1,
                    "u_var12": 2,
                    "unsigned_var2": 1,
                    "var12": 1,
                    "var5": 1
                },
                "uVar13": {
                    "boundary2": 1,
                    "coeff2": 1,
                    "constant_value_2": 1,
                    "fraction": 1,
                    "lo_value2": 1,
                    "magic_number2": 1,
                    "mantissa_low": 1,
                    "normalization_factor_2": 1,
                    "num_exp_digits": 1,
                    "result_hi": 1,
                    "result_upper": 1,
                    "temp2": 1,
                    "temp_uint5": 1,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_value3": 1,
                    "temp_var5": 1,
                    "temp_var7": 1,
                    "tmp2": 1,
                    "u_var13": 2,
                    "unsigned_var3": 1,
                    "var13": 1,
                    "var6": 1
                },
                "uVar16": {
                    "bit_manipulation_mask1": 1,
                    "coeff3": 1,
                    "constant_value_3": 1,
                    "exp_value": 1,
                    "float_value1": 1,
                    "hi_value2": 1,
                    "mantissa": 1,
                    "result": 1,
                    "result_lo": 1,
                    "temp_uint6": 1,
                    "temp_upper2": 1,
                    "temp_value3": 1,
                    "temp_value4": 1,
                    "temp_var6": 1,
                    "temp_var8": 1,
                    "tmp3": 1,
                    "u_var16": 1,
                    "unsigned_var4": 1,
                    "var16": 1
                },
                "uVar17": {
                    "abs_numerator": 1,
                    "exponent_adjusted": 1,
                    "exponent_bits": 2,
                    "exponent_part": 1,
                    "float_value2": 1,
                    "fractional_part_value": 1,
                    "input_float_exponent": 1,
                    "mantissa_value": 2,
                    "tem_val5": 1,
                    "temp_uint7": 1,
                    "temp_value": 1,
                    "temp_value5": 1,
                    "temp_var7": 1,
                    "temp_var9": 1,
                    "unsigned_integer_1": 1,
                    "unsigned_var5": 1,
                    "value_exp": 1,
                    "value_lo": 1,
                    "var17": 1
                },
                "uVar18": {
                    "abs_denominator": 1,
                    "abs_exponent": 1,
                    "absolute_exp": 1,
                    "exponent_value": 3,
                    "input_float_mantissa": 1,
                    "temp_uint2": 1,
                    "temp_val6": 1,
                    "temp_value": 1,
                    "temp_value6": 1,
                    "temp_value_2": 1,
                    "temp_var10": 1,
                    "temp_var8": 1,
                    "unsigned_exp": 1,
                    "unsigned_integer_2": 1,
                    "unsigned_var6": 1,
                    "value_bits": 1,
                    "value_hi": 1,
                    "var18": 1
                },
                "uVar22": {
                    "mantissa_shifted": 1
                },
                "uVar23": {
                    "coeff4": 1,
                    "conversion_value": 1,
                    "exp_low": 1,
                    "exponent_hi": 1,
                    "hi_value3": 1,
                    "result_high": 2,
                    "temp1": 1,
                    "temp_result": 1,
                    "temp_uint8": 1,
                    "temp_upper": 1,
                    "temp_value7": 1,
                    "temp_var11": 1,
                    "temp_var3": 1,
                    "temp_var9": 1,
                    "tmp4": 1,
                    "u_var23": 1,
                    "unsigned_var7": 1,
                    "var10": 1,
                    "var23": 1
                },
                "uVar24": {
                    "temp2": 1
                },
                "uVar26": {
                    "binary_result": 1,
                    "calc_result_1": 1,
                    "combined_value": 1,
                    "concatenated_value": 1,
                    "exp_high": 1,
                    "num1": 1,
                    "part1": 1,
                    "result": 1,
                    "result2": 1,
                    "result_2": 1,
                    "result_low": 2,
                    "result_value": 1,
                    "temp_hi": 1,
                    "temp_u_long1": 1,
                    "temp_uint12": 1,
                    "temp_value1": 1,
                    "temp_value5": 1,
                    "temp_value8": 1,
                    "temp_var10": 1,
                    "temp_var12": 1,
                    "temp_var5": 1,
                    "unsigned_var8": 1,
                    "var26": 1
                },
                "uVar27": {
                    "binary_result_2": 1,
                    "calc_result_2": 1,
                    "hi_value4": 1,
                    "part2": 1,
                    "result3": 1,
                    "result_3": 1,
                    "result_upper_temp": 1,
                    "reverse_bits_value": 1,
                    "reversed_exp": 1,
                    "temp2": 1,
                    "temp_high": 1,
                    "temp_lo": 1,
                    "temp_low": 1,
                    "temp_result": 1,
                    "temp_u_long2": 1,
                    "temp_uint13": 1,
                    "temp_value2": 1,
                    "temp_value9": 1,
                    "temp_var11": 1,
                    "temp_var13": 1,
                    "temp_var6": 1,
                    "tmp5": 1,
                    "unsigned_var9": 1,
                    "var27": 1
                },
                "uVar28": {
                    "calc_result_3": 1,
                    "floating_point_value": 1,
                    "part3": 1,
                    "result4": 1,
                    "result_4": 1,
                    "result_exp": 1,
                    "reverse_bits_shifted_value": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_high2": 1,
                    "temp_low": 1,
                    "temp_lower": 1,
                    "temp_u_long3": 1,
                    "temp_uint14": 1,
                    "temp_value": 1,
                    "temp_value10": 1,
                    "temp_value3": 1,
                    "temp_value7": 1,
                    "temp_var12": 1,
                    "temp_var14": 1,
                    "temp_var7": 1,
                    "tmp6": 1,
                    "unsigned_var10": 1,
                    "var28": 1
                },
                "uVar42": {
                    "mask": 1
                },
                "uVar6": {
                    "bit_encoding": 1,
                    "bit_pattern": 1,
                    "bits": 1,
                    "bitwise_result": 1,
                    "combined_value": 1,
                    "decimal_value": 1,
                    "decoded_value": 1,
                    "encoded_value": 1,
                    "exponent_and_significand": 1,
                    "exponent_bits": 1,
                    "extracted_exponent": 1,
                    "mask": 1,
                    "result": 4,
                    "result1": 2,
                    "result_1": 1,
                    "result_var1": 1,
                    "shifted_mantissa": 1,
                    "shifted_value": 1,
                    "temp_result": 1,
                    "temp_uint1": 1,
                    "temp_value": 1,
                    "u_var6": 1
                },
                "uVar7": {
                    "temp": 1
                }
            },
            "called": [
                "FUN_08001084",
                "FUN_080003d4",
                "FUN_0800910c",
                "FUN_080094f8",
                "FUN_08009630",
                "FUN_08009258",
                "FUN_080093a4",
                "FUN_08000998",
                "FUN_080078c0",
                "FUN_080009e8",
                "FUN_080003f4",
                "FUN_080091a4",
                "FUN_08000158",
                "FUN_080009d4",
                "FUN_080090c0",
                "FUN_080009ac",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08009244",
                "FUN_0800119c",
                "FUN_08009120",
                "FUN_08009444",
                "FUN_0800015c",
                "FUN_08009530"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nchar * convert_float_to_readable_string_080079e8(int value,undefined4 param2,uint sign,uint exponent,uint precision,\n                   uint precision,int *error_code,uint *is_negative,char **output_string)\n\n{\n  bool is_negative;\n  bool is_zero;\n  bool is_negative;\n  char digit;\n  byte carry;\n  undefined4 result;\n  int i;\n  int comparison_result;\n  int int_var3;\n  char *result_str;\n  uint exponent;\n  undefined4 u_var12;\n  undefined4 u_var13;\n  int num_length;\n  int num_digits;\n  undefined4 unsigned_var4;\n  uint exponent_bits;\n  uint exponent_value;\n  int shift_count;\n  char *temp_string3;\n  char *output_char_ptr2;\n  undefined4 *ptr1;\n  undefined4 result_high;\n  int temp_var4;\n  bool is_negative;\n  undefined8 result_low;\n  undefined8 temp_var13;\n  undefined8 unsigned_var10;\n  uint local_variable_1;\n  uint local_variable_2;\n  uint local_variable_3;\n  int leading_zeros;\n  uint local_variable_5;\n  int local_var6;\n  int local_var7;\n  uint local_variable_8;\n  uint local_variable_9;\n  uint local_variable_10;\n  uint local_variable_11;\n  uint local_variable_12;\n  int bit_count;\n  int temp_array [2];\n  \n  num_length = *(int *)(value + 0x40);\n  if (num_length != 0) {\n    exponent_value = *(uint *)(value + 0x44);\n    *(uint *)(num_length + 4) = exponent_value;\n    *(int *)(num_length + 8) = 1 << (exponent_value & 0xff);\n    extract_and_assign_value_0800910c(value,num_length);\n    *(undefined4 *)(value + 0x40) = 0;\n  }\n  is_negative = (int)exponent < 0;\n  exponent_value = exponent;\n  if (is_negative) {\n    exponent_value = exponent & 0x7fffffff;\n  }\n  *is_negative = (uint)is_negative;\n  local_variable_2 = exponent;\n  if (is_negative) {\n    local_variable_2 = exponent_value;\n  }\n  exponent_bits = local_variable_2;\n  if ((~exponent_value & 0x7ff00000) == 0) {\n    *error_code = 9999;\n    if ((sign == 0) && ((exponent_value & 0xfffff) == 0)) {\n      result_str = \"Infinity\";\n      if (output_string == (char **)0x0) {\n        return result_str;\n      }\n      output_char_ptr2 = \"\";\n    }\n    else {\n      result_str = \"NaN\";\n      if (output_string == (char **)0x0) {\n        return result_str;\n      }\n      output_char_ptr2 = \"\";\n    }\n    *output_string = output_char_ptr2;\n    return result_str;\n  }\n  result_low = check_equality_and_boundaries_08000998(sign,local_variable_2,0,0);\n  if ((int)result_low != 0) {\n    *error_code = 1;\n    if (output_string != (char **)0x0) {\n      *output_string = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  result = decode_and_count_bits_08009630(value,(int)((ulonglong)result_low >> 0x20),sign,local_variable_2,temp_array,&bit_count)\n  ;\n  num_length = bit_count;\n  if (exponent_value >> 0x14 == 0) {\n    shift_count = temp_array[0] + bit_count;\n    num_digits = shift_count + 0x432;\n    if (num_digits < 0x21) {\n      exponent_value = sign << (0x20U - num_digits & 0xff);\n    }\n    else {\n      exponent_value = sign >> (shift_count + 0x412U & 0xff) | exponent_value << (0x40U - num_digits & 0xff);\n    }\n    result_low = bitwise_shift_and_concatenate_080003d4(exponent_value);\n    shift_count = shift_count + -1;\n    is_negative = true;\n    exponent = (int)((ulonglong)result_low >> 0x20) + 0xfe100000;\n    exponent_value = (uint)result_low;\n  }\n  else {\n    shift_count = (exponent_value >> 0x14) - 0x3ff;\n    exponent = local_variable_2 & 0xfffff | 0x3ff00000;\n    is_negative = false;\n    exponent_value = sign;\n  }\n  result_low = calculate_result_08000158(exponent_value,exponent,0,0x3ff80000);\n  result_low = calculate_improved_result_080004c8((int)result_low,(int)((ulonglong)result_low >> 0x20),0x636f4361,0x3fd287a7);\n  result_low = calculate_arithmetic_result_0800015c((int)result_low,(int)((ulonglong)result_low >> 0x20),0x8b60c8b3,0x3fc68a28);\n  temp_var13 = reverse_bits_and_shift_080003f4(shift_count);\n  temp_var13 = calculate_improved_result_080004c8((int)temp_var13,(int)((ulonglong)temp_var13 >> 0x20),0x509f79fb,0x3fd34413);\n  result_low = calculate_arithmetic_result_0800015c((int)result_low,(int)((ulonglong)result_low >> 0x20),(int)temp_var13,\n                        (int)((ulonglong)temp_var13 >> 0x20));\n  u_var13 = (undefined4)((ulonglong)result_low >> 0x20);\n  local_variable_3 = reverse_bits_0800119c();\n  num_digits = check_if_string_is_empty_080009ac((int)result_low,u_var13,0,0);\n  if (num_digits != 0) {\n    temp_var13 = reverse_bits_and_shift_080003f4(local_variable_3);\n    num_digits = check_equality_and_boundaries_08000998((int)temp_var13,(int)((ulonglong)temp_var13 >> 0x20),(int)result_low,u_var13);\n    if (num_digits == 0) {\n      local_variable_3 = local_variable_3 - 1;\n    }\n  }\n  if (local_variable_3 < 0x17) {\n    num_digits = check_if_string_is_empty_080009e8(*(undefined4 *)(&DAT_08009fa8 + local_variable_3 * 8),\n                          *(undefined4 *)(&DAT_08009fac + local_variable_3 * 8),sign,local_variable_2);\n    if (num_digits == 0) {\n      is_zero = false;\n    }\n    else {\n      local_variable_3 = local_variable_3 - 1;\n      is_zero = false;\n    }\n  }\n  else {\n    is_zero = true;\n  }\n  num_digits = (num_length - shift_count) + -1;\n  if (num_digits < 0) {\n    leading_zeros = 1 - (num_length - shift_count);\n    num_digits = 0;\n  }\n  else {\n    leading_zeros = 0;\n  }\n  if ((int)local_variable_3 < 0) {\n    local_variable_8 = 0;\n    leading_zeros = leading_zeros - local_variable_3;\n    local_var7 = -local_variable_3;\n  }\n  else {\n    num_digits = num_digits + local_variable_3;\n    local_variable_8 = local_variable_3;\n    local_var7 = 0;\n  }\n  if (9 < precision) {\n    local_variable_11 = 0xffffffff;\n    is_negative = true;\n    local_variable_5 = 0xffffffff;\n    is_negative = true;\n    precision = 0;\n    precision = 0;\n    goto LAB_08007c24;\n  }\n  is_negative = (int)precision < 6;\n  if (!is_negative) {\n    precision = precision - 4;\n  }\n  switch(precision) {\n  case 2:\n    is_negative = false;\n    break;\n  case 3:\n    is_negative = false;\n    goto LAB_08008300;\n  case 4:\n    is_negative = true;\n    break;\n  case 5:\n    is_negative = true;\nLAB_08008300:\n    local_variable_11 = local_variable_3 + precision;\n    local_variable_5 = local_variable_11 + 1;\n    exponent_value = local_variable_5;\n    if ((int)local_variable_5 < 1) {\n      exponent_value = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(value + 0x44) = 0;\n    result_str = (char *)allocate_memory_and_initialize_080090c0(value,0);\n    local_variable_11 = 0xffffffff;\n    local_variable_5 = 0xffffffff;\n    precision = 0;\n    *(char **)(value + 0x40) = result_str;\n    is_negative = true;\n    goto LAB_08007e36;\n  }\n  if ((int)precision < 1) {\n    local_variable_11 = 1;\n    precision = 1;\n    local_variable_5 = 1;\nLAB_08007c24:\n    *(undefined4 *)(value + 0x44) = 0;\n    exponent = local_variable_11;\n  }\n  else {\n    local_variable_11 = precision;\n    local_variable_5 = precision;\n    exponent_value = precision;\nLAB_08008314:\n    *(undefined4 *)(value + 0x44) = 0;\n    exponent = local_variable_5;\n    if (0x17 < (int)exponent_value) {\n      shift_count = 4;\n      num_length = 1;\n      do {\n        i = num_length;\n        shift_count = shift_count * 2;\n        num_length = i + 1;\n      } while (shift_count + 0x14U <= exponent_value);\n      *(int *)(value + 0x44) = i;\n    }\n  }\n  result_str = (char *)allocate_memory_and_initialize_080090c0(value);\n  *(char **)(value + 0x40) = result_str;\n  if ((exponent < 0xf) && (is_negative)) {\n    if ((int)local_variable_3 < 1) {\n      if (local_variable_3 == 0) {\n        num_length = 2;\n        local_variable_1 = sign;\n      }\n      else {\n        num_length = (-local_variable_3 & 0xf) * 8;\n        result_low = calculate_improved_result_080004c8(sign,local_variable_2,*(undefined4 *)(&DAT_08009fa8 + num_length),\n                              *(undefined4 *)(&DAT_08009fac + num_length));\n        local_variable_2 = (uint)((ulonglong)result_low >> 0x20);\n        local_variable_1 = (uint)result_low;\n        shift_count = (int)-local_variable_3 >> 4;\n        if (shift_count == 0) {\n          num_length = 2;\n        }\n        else {\n          is_negative = false;\n          num_length = 2;\n          ptr1 = &DAT_08009f80;\n          do {\n            if (shift_count << 0x1f < 0) {\n              result_low = calculate_improved_result_080004c8((int)result_low,(int)((ulonglong)result_low >> 0x20),*ptr1,ptr1[1]\n                                   );\n              is_negative = true;\n              num_length = num_length + 1;\n            }\n            shift_count = shift_count >> 1;\n            ptr1 = ptr1 + 2;\n          } while (shift_count != 0);\n          if (is_negative) {\n            local_variable_1 = (uint)result_low;\n            local_variable_2 = (uint)((ulonglong)result_low >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      exponent_value = (int)local_variable_3 >> 4;\n      temp_var13 = *(undefined8 *)(&DAT_08009fa8 + (local_variable_3 & 0xf) * 8);\n      result_low = *(undefined8 *)(&DAT_08009fa8 + (local_variable_3 & 0xf) * 8);\n      if ((int)(exponent_value << 0x1b) < 0) {\n        unsigned_var10 = calculate_floating_point_value_0800071c(sign,local_variable_2,0x7f73bf3c,0x75154fdd);\n        local_variable_10 = (uint)((ulonglong)unsigned_var10 >> 0x20);\n        local_variable_9 = (uint)unsigned_var10;\n        num_length = 3;\n        exponent_value = exponent_value & 0xf;\n      }\n      else {\n        num_length = 2;\n        local_variable_10 = local_variable_2;\n        local_variable_9 = sign;\n      }\n      if (exponent_value != 0) {\n        ptr1 = &DAT_08009f80;\n        do {\n          if ((int)(exponent_value << 0x1f) < 0) {\n            result_low = calculate_improved_result_080004c8((int)result_low,(int)((ulonglong)result_low >> 0x20),*ptr1,ptr1[1]);\n            num_length = num_length + 1;\n          }\n          exponent_value = (int)exponent_value >> 1;\n          ptr1 = ptr1 + 2;\n          temp_var13 = result_low;\n        } while (exponent_value != 0);\n      }\n      local_variable_2 = (uint)((ulonglong)temp_var13 >> 0x20);\n      local_variable_1 = (uint)temp_var13;\n      result_low = calculate_floating_point_value_0800071c(local_variable_9,local_variable_10,local_variable_1,local_variable_2);\n      local_variable_1 = (uint)result_low;\n      local_variable_2 = (uint)((ulonglong)result_low >> 0x20);\n    }\n    result_low = CONCAT44(local_variable_2,local_variable_1);\n    if ((is_zero) && (shift_count = check_if_string_is_empty_080009ac(local_variable_1,local_variable_2,0,0x3ff00000), shift_count != 0)) {\n      if (local_variable_5 == 0) {\n        result_low = reverse_bits_and_shift_080003f4(num_length);\n        result_low = calculate_improved_result_080004c8((int)result_low,(int)((ulonglong)result_low >> 0x20),local_variable_1,local_variable_2);\n        result_low = calculate_arithmetic_result_0800015c((int)result_low,(int)((ulonglong)result_low >> 0x20),0,0x401c0000);\n        u_var13 = (undefined4)result_low;\n        num_length = (int)((ulonglong)result_low >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)local_variable_11) {\n        result_low = calculate_improved_result_080004c8(local_variable_1,local_variable_2,0,0x40240000);\n        temp_var13 = reverse_bits_and_shift_080003f4(num_length + 1);\n        temp_var13 = calculate_improved_result_080004c8((int)temp_var13,(int)((ulonglong)temp_var13 >> 0x20),(int)result_low,\n                              (int)((ulonglong)result_low >> 0x20));\n        temp_var13 = calculate_arithmetic_result_0800015c((int)temp_var13,(int)((ulonglong)temp_var13 >> 0x20),0,0x401c0000);\n        u_var13 = (undefined4)temp_var13;\n        local_variable_9 = local_variable_11;\n        local_variable_12 = local_variable_3 - 1;\n        num_length = (int)((ulonglong)temp_var13 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    temp_var13 = reverse_bits_and_shift_080003f4(num_length);\n    temp_var13 = calculate_improved_result_080004c8((int)temp_var13,(int)((ulonglong)temp_var13 >> 0x20),local_variable_1,local_variable_2);\n    temp_var13 = calculate_arithmetic_result_0800015c((int)temp_var13,(int)((ulonglong)temp_var13 >> 0x20),0,0x401c0000);\n    u_var13 = (undefined4)temp_var13;\n    num_length = (int)((ulonglong)temp_var13 >> 0x20) + -0x3400000;\n    if (local_variable_5 != 0) {\n      local_variable_12 = local_variable_3;\n      local_variable_9 = local_variable_5;\nLAB_08007cfa:\n      local_variable_2 = (uint)((ulonglong)result_low >> 0x20);\n      local_variable_1 = (uint)result_low;\n      digit = reverse_bits_0800119c(local_variable_1,local_variable_2);\n      digit = digit + '0';\n      unsigned_var4 = (&DAT_08009fa0)[local_variable_9 * 2];\n      u_var12 = (&DAT_08009fa4)[local_variable_9 * 2];\n      result_low = reverse_bits_and_shift_080003f4();\n      result_low = calculate_result_08000158(local_variable_1,local_variable_2,(int)result_low,(int)((ulonglong)result_low >> 0x20));\n      result_high = (undefined4)((ulonglong)result_low >> 0x20);\n      output_char_ptr2 = result_str + 1;\n      if (is_negative) {\n        temp_var13 = calculate_floating_point_value_0800071c(0,0x3fe00000,unsigned_var4,u_var12);\n        temp_var13 = calculate_result_08000158((int)temp_var13,(int)((ulonglong)temp_var13 >> 0x20),u_var13,num_length);\n        u_var13 = (undefined4)((ulonglong)temp_var13 >> 0x20);\n        *result_str = digit;\n        num_length = check_if_string_is_empty_080009e8((int)temp_var13,u_var13,(int)result_low,result_high);\n        if (num_length != 0) {\nLAB_08008784:\n          local_variable_3 = local_variable_12;\n          goto LAB_08008294;\n        }\n        unsigned_var10 = calculate_result_08000158(0,0x3ff00000,(int)result_low,result_high);\n        num_length = check_if_string_is_empty_080009e8((int)temp_var13,u_var13,(int)unsigned_var10,(int)((ulonglong)unsigned_var10 >> 0x20));\n        if (num_length == 0) {\n          if (local_variable_9 != 1) {\n            temp_string3 = output_char_ptr2;\n            do {\n              temp_var13 = calculate_improved_result_080004c8((int)temp_var13,(int)((ulonglong)temp_var13 >> 0x20),0,0x40240000);\n              u_var13 = (undefined4)((ulonglong)temp_var13 >> 0x20);\n              result_low = calculate_improved_result_080004c8((int)result_low,(int)((ulonglong)result_low >> 0x20),0,0x40240000);\n              digit = reverse_bits_0800119c();\n              unsigned_var10 = reverse_bits_and_shift_080003f4();\n              result_low = calculate_result_08000158((int)result_low,(int)((ulonglong)result_low >> 0x20),(int)unsigned_var10,\n                                    (int)((ulonglong)unsigned_var10 >> 0x20));\n              unsigned_var4 = (undefined4)((ulonglong)result_low >> 0x20);\n              digit = digit + '0';\n              output_char_ptr2 = temp_string3 + 1;\n              *temp_string3 = digit;\n              num_length = check_if_string_is_empty_080009ac((int)result_low,unsigned_var4,(int)temp_var13,u_var13);\n              if (num_length != 0) {\n                local_variable_3 = local_variable_12;\n                goto LAB_08008294;\n              }\n              unsigned_var10 = calculate_result_08000158(0,0x3ff00000,(int)result_low,unsigned_var4);\n              num_length = check_if_string_is_empty_080009ac((int)unsigned_var10,(int)((ulonglong)unsigned_var10 >> 0x20),(int)temp_var13,u_var13)\n              ;\n              if (num_length != 0) goto LAB_08008798;\n              temp_string3 = output_char_ptr2;\n            } while (output_char_ptr2 != result_str + local_variable_9);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_variable_3 = local_variable_12;\n      }\n      else {\n        temp_var13 = calculate_improved_result_080004c8(u_var13,num_length,unsigned_var4,u_var12);\n        u_var13 = (undefined4)((ulonglong)temp_var13 >> 0x20);\n        *result_str = digit;\n        if (local_variable_9 != 1) {\n          temp_string3 = output_char_ptr2;\n          do {\n            result_low = calculate_improved_result_080004c8((int)result_low,(int)((ulonglong)result_low >> 0x20),0,0x40240000);\n            digit = reverse_bits_0800119c();\n            unsigned_var10 = reverse_bits_and_shift_080003f4();\n            result_low = calculate_result_08000158((int)result_low,(int)((ulonglong)result_low >> 0x20),(int)unsigned_var10,\n                                  (int)((ulonglong)unsigned_var10 >> 0x20));\n            output_char_ptr2 = temp_string3 + 1;\n            *temp_string3 = digit + '0';\n            temp_string3 = output_char_ptr2;\n          } while (output_char_ptr2 != result_str + local_variable_9);\n        }\n        unsigned_var4 = (undefined4)((ulonglong)result_low >> 0x20);\n        unsigned_var10 = calculate_arithmetic_result_0800015c((int)temp_var13,u_var13,0,0x3fe00000);\n        num_length = check_if_string_is_empty_080009ac((int)unsigned_var10,(int)((ulonglong)unsigned_var10 >> 0x20),(int)result_low,unsigned_var4);\n        if (num_length == 0) {\n          temp_var13 = calculate_result_08000158(0,0x3fe00000,(int)temp_var13,u_var13);\n          num_length = check_if_string_is_empty_080009e8((int)temp_var13,(int)((ulonglong)temp_var13 >> 0x20),(int)result_low,unsigned_var4);\n          temp_string3 = output_char_ptr2;\n          if (num_length == 0) goto LAB_08007e36;\n          do {\n            output_char_ptr2 = temp_string3;\n            temp_string3 = output_char_ptr2 + -1;\n          } while (output_char_ptr2[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_variable_3 = local_variable_12;\n        digit = output_char_ptr2[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    result_low = calculate_result_08000158(local_variable_1,local_variable_2,0,0x40140000);\n    unsigned_var4 = (undefined4)((ulonglong)result_low >> 0x20);\n    shift_count = check_if_string_is_empty_080009e8((int)result_low,unsigned_var4,u_var13,num_length);\n    if (shift_count == 0) {\n      num_length = check_if_string_is_empty_080009ac((int)result_low,unsigned_var4,u_var13,num_length + -0x80000000);\n      if (num_length == 0) goto LAB_08007e36;\n      shift_count = 0;\n      num_length = 0;\n      output_char_ptr2 = result_str;\n      goto LAB_080084f0;\n    }\n    num_digits = 0;\n    i = 0;\nLAB_08008406:\n    *result_str = '1';\n    local_variable_3 = local_variable_3 + 1;\n    output_char_ptr2 = result_str + 1;\n    shift_count = i;\n    num_length = num_digits;\nLAB_08008416:\n    extract_and_assign_value_0800910c(value,num_length);\n    if (shift_count == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    output_char_ptr2 = result_str;\n    if ((-1 < temp_array[0]) && ((int)local_variable_3 < 0xf)) {\n      u_var13 = *(undefined4 *)(&DAT_08009fa8 + local_variable_3 * 8);\n      unsigned_var4 = *(undefined4 *)(&DAT_08009fac + local_variable_3 * 8);\n      if ((-1 < (int)precision) || (0 < (int)local_variable_5)) {\n        calculate_floating_point_value_0800071c(sign,exponent_bits,u_var13,unsigned_var4);\n        carry = reverse_bits_0800119c();\n        result_low = reverse_bits_and_shift_080003f4();\n        result_low = calculate_improved_result_080004c8((int)result_low,(int)((ulonglong)result_low >> 0x20),u_var13,unsigned_var4);\n        result_low = calculate_result_08000158(sign,exponent_bits,(int)result_low,(int)((ulonglong)result_low >> 0x20));\n        *result_str = carry + 0x30;\n        output_char_ptr2 = result_str + 1;\n        if (local_variable_5 != 1) {\n          result_low = calculate_improved_result_080004c8((int)result_low,(int)((ulonglong)result_low >> 0x20),0,0x40240000);\n          num_length = check_equality_and_boundaries_08000998((int)result_low,(int)((ulonglong)result_low >> 0x20),0,0);\n          while (num_length == 0) {\n            result_high = (undefined4)((ulonglong)result_low >> 0x20);\n            calculate_floating_point_value_0800071c((int)result_low,result_high,u_var13,unsigned_var4);\n            carry = reverse_bits_0800119c();\n            temp_var13 = reverse_bits_and_shift_080003f4();\n            temp_var13 = calculate_improved_result_080004c8((int)temp_var13,(int)((ulonglong)temp_var13 >> 0x20),u_var13,unsigned_var4);\n            result_low = calculate_result_08000158((int)result_low,result_high,(int)temp_var13,(int)((ulonglong)temp_var13 >> 0x20));\n            temp_string3 = output_char_ptr2 + 1;\n            *output_char_ptr2 = carry + 0x30;\n            output_char_ptr2 = temp_string3;\n            if (local_variable_5 == (int)temp_string3 - (int)result_str) goto LAB_08007f3a;\n            result_low = calculate_improved_result_080004c8((int)result_low,(int)((ulonglong)result_low >> 0x20),0,0x40240000);\n            num_length = check_equality_and_boundaries_08000998((int)result_low,(int)((ulonglong)result_low >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        result_low = calculate_arithmetic_result_0800015c((int)result_low,(int)((ulonglong)result_low >> 0x20));\n        result_high = (undefined4)((ulonglong)result_low >> 0x20);\n        num_length = check_if_string_is_empty_080009e8((int)result_low,result_high,u_var13,unsigned_var4);\n        if ((num_length == 0) &&\n           ((num_length = check_equality_and_boundaries_08000998((int)result_low,result_high,u_var13,unsigned_var4), num_length == 0 ||\n            ((carry & 1) == 0)))) goto LAB_08008294;\n        digit = output_char_ptr2[-1];\nLAB_08007f7c:\n        while (temp_string3 = output_char_ptr2 + -1, digit == '9') {\n          if (result_str == temp_string3) {\n            *result_str = '0';\n            digit = output_char_ptr2[-1];\n            local_variable_3 = local_variable_3 + 1;\n            temp_string3 = result_str;\n            break;\n          }\n          digit = output_char_ptr2[-2];\n          output_char_ptr2 = temp_string3;\n        }\n        *temp_string3 = digit + '\\x01';\n        goto LAB_08008294;\n      }\n      if (local_variable_5 == 0) {\n        result_low = calculate_improved_result_080004c8(u_var13,unsigned_var4,0,0x40140000);\n        int_var3 = check_boundaries_and_equality_080009d4((int)result_low,(int)((ulonglong)result_low >> 0x20),sign,exponent_bits);\n        shift_count = 0;\n        num_digits = 0;\n        i = 0;\n        num_length = 0;\n        if (int_var3 == 0) goto LAB_08008406;\n      }\n      else {\n        shift_count = 0;\n        num_length = 0;\n      }\nLAB_080084f0:\n      local_variable_3 = ~precision;\n      result_str = output_char_ptr2;\n      goto LAB_08008416;\n    }\n    num_length = local_var7;\n    if (is_negative) {\n      if ((int)precision < 2) {\n        if (is_negative) {\n          local_var6 = leading_zeros;\n          leading_zeros = leading_zeros + temp_array[0] + 0x433;\n          num_digits = num_digits + temp_array[0] + 0x433;\n        }\n        else {\n          local_var6 = leading_zeros;\n          leading_zeros = leading_zeros + (0x36 - bit_count);\n          num_digits = num_digits + (0x36 - bit_count);\n        }\n      }\n      else {\n        shift_count = local_variable_5 - 1;\n        if (local_var7 < shift_count) {\n          local_variable_8 = local_variable_8 + (shift_count - local_var7);\n          num_length = 0;\n          local_var7 = shift_count;\n        }\n        else {\n          num_length = local_var7 - shift_count;\n        }\n        if ((int)local_variable_5 < 0) {\n          local_var6 = leading_zeros - local_variable_5;\n        }\n        else {\n          num_digits = num_digits + local_variable_5;\n          local_var6 = leading_zeros;\n          leading_zeros = leading_zeros + local_variable_5;\n        }\n      }\n      shift_count = allocate_and_initialize_memory_08009244(value,1);\n    }\n    else {\n      local_var6 = leading_zeros;\n      shift_count = 0;\n    }\n    if ((0 < local_var6) && (0 < num_digits)) {\n      i = local_var6;\n      if (num_digits <= local_var6) {\n        i = num_digits;\n      }\n      num_digits = num_digits - i;\n      leading_zeros = leading_zeros - i;\n      local_var6 = local_var6 - i;\n    }\n    if (local_var7 != 0) {\n      if (is_negative) {\n        u_var13 = result;\n        if (num_length != 0) {\n          shift_count = process_data_080093a4(value,shift_count,num_length);\n          u_var13 = initialize_and_allocate_memory_08009258(value,shift_count,result);\n          extract_and_assign_value_0800910c(value,result);\n          result = u_var13;\n          if (local_var7 - num_length == 0) goto LAB_08008062;\n        }\n        result = process_data_080093a4(value,u_var13,local_var7 - num_length);\n      }\n      else {\n        result = process_data_080093a4(value,result,local_var7);\n      }\n    }\nLAB_08008062:\n    num_length = allocate_and_initialize_memory_08009244(value,1);\n    if (local_variable_8 == 0) {\n      if (((int)precision < 2) && (sign == 0)) {\nLAB_0800835a:\n        if ((exponent_bits & 0xfffff) == 0) {\n          exponent_bits = exponent_bits & 0x7ff00000;\n          if (exponent_bits != 0) {\n            num_digits = num_digits + 1;\n            leading_zeros = leading_zeros + 1;\n            exponent_bits = 1;\n          }\n        }\n        else {\n          exponent_bits = 0;\n        }\n        is_negative = local_variable_8 != 0;\n        exponent_value = sign;\n        local_variable_8 = exponent_bits;\n        if (is_negative) goto LAB_080082d4;\n      }\n      i = 1;\n    }\n    else {\n      result_low = process_data_080093a4(value,num_length);\n      num_length = (int)result_low;\n      if (((int)precision < 2) && (sign == 0)) goto LAB_0800835a;\n      local_variable_8 = 0;\n      exponent_value = (uint)((ulonglong)result_low >> 0x20);\nLAB_080082d4:\n      i = count_leading_zeros_080091a4(*(undefined4 *)(num_length + *(int *)(num_length + 0x10) * 4 + 0x10),exponent_value);\n      i = 0x20 - i;\n    }\n    exponent_value = i + num_digits & 0x1f;\n    if (exponent_value == 0) {\n      i = 0x1c;\nLAB_08008096:\n      num_digits = num_digits + i;\n      leading_zeros = leading_zeros + i;\n      local_var6 = local_var6 + i;\n    }\n    else {\n      if (4 < (int)(0x20 - exponent_value)) {\n        i = 0x1c - exponent_value;\n        goto LAB_08008096;\n      }\n      if (0x20 - exponent_value != 4) {\n        i = 0x3c - exponent_value;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < leading_zeros) {\n      result = initialize_and_allocate_memory_08009444(value,result,leading_zeros);\n    }\n    if (0 < num_digits) {\n      num_length = initialize_and_allocate_memory_08009444(value,num_length,num_digits);\n    }\n    temp_string3 = result_str;\n    if ((is_zero) && (num_digits = compare_arrays_080094f8(result,num_length), num_digits < 0)) {\n      local_variable_3 = local_variable_3 - 1;\n      result = calculate_checksum_08009120(value,result,10,0);\n      if (is_negative) {\n        shift_count = calculate_checksum_08009120(value,shift_count,10,0);\n        if ((0 < (int)local_variable_11) || ((int)precision < 3)) {\n          local_variable_5 = local_variable_11;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)local_variable_11) || ((int)precision < 3)) {\n        local_variable_5 = local_variable_11;\n        goto LAB_0800820a;\n      }\n      local_variable_5 = local_variable_11;\nLAB_080084e8:\n      if (local_variable_5 == 0) {\n        num_digits = calculate_checksum_08009120(value,num_length,5);\n        int_var3 = compare_arrays_080094f8(result,num_digits);\n        i = shift_count;\n        num_length = num_digits;\n        if (0 < int_var3) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)local_variable_5 < 1) && (2 < (int)precision)) goto LAB_080084e8;\n    if (is_negative) {\nLAB_080080de:\n      local_variable_1 = shift_count;\n      if (0 < local_var6) {\n        local_variable_1 = initialize_and_allocate_memory_08009444(value,shift_count,local_var6);\n      }\n      shift_count = local_variable_1;\n      if (local_variable_8 != 0) {\n        shift_count = allocate_memory_and_initialize_080090c0(value,*(undefined4 *)(local_variable_1 + 4));\n        copy_memory_08001084(shift_count + 0xc,local_variable_1 + 0xc,(*(int *)(local_variable_1 + 0x10) + 2) * 4);\n        shift_count = initialize_and_allocate_memory_08009444(value,shift_count,1);\n      }\nLAB_08008108:\n      num_digits = calculate_division_remainder_080078c0(result,num_length);\n      i = compare_arrays_080094f8(result,local_variable_1);\n      int_var3 = reverse_and_allocate_memory_08009530(value,num_length,shift_count);\n      temp_var4 = num_digits + 0x30;\n      if (*(int *)(int_var3 + 0xc) == 0) {\n        comparison_result = compare_arrays_080094f8(result);\n        extract_and_assign_value_0800910c(value,int_var3);\n        if ((comparison_result != 0) || (precision != 0)) goto LAB_0800815a;\n        if ((sign & 1) != 0) {\n          comparison_result = 0;\n          goto LAB_0800815a;\n        }\n        if (temp_var4 != 0x39) {\n          if (0 < i) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        output_char_ptr2 = temp_string3 + 1;\n        digit = '9';\n        *temp_string3 = '9';\n        goto LAB_08008268;\n      }\n      extract_and_assign_value_0800910c(value,int_var3);\n      comparison_result = 1;\nLAB_0800815a:\n      if ((i < 0) || (((i == 0 && (precision == 0)) && ((sign & 1) == 0)))) {\n        if (0 < comparison_result) {\n          result = initialize_and_allocate_memory_08009444(value,result,1);\n          i = compare_arrays_080094f8(result,num_length);\n          if ((0 < i) || ((i == 0 && (num_digits << 0x1f < 0)))) {\n            if (temp_var4 == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            temp_var4 = num_digits + 0x31;\n          }\n        }\nLAB_080085a4:\n        output_char_ptr2 = temp_string3 + 1;\n        *temp_string3 = (char)temp_var4;\n        goto LAB_08008274;\n      }\n      output_char_ptr2 = temp_string3 + 1;\n      if (0 < comparison_result) {\n        if (temp_var4 == 0x39) goto LAB_08008752;\n        *temp_string3 = (char)num_digits + '1';\n        goto LAB_08008274;\n      }\n      *temp_string3 = (char)temp_var4;\n      if (result_str + (local_variable_5 - 1) != temp_string3) {\n        result = calculate_checksum_08009120(value,result,10,0);\n        temp_string3 = output_char_ptr2;\n        if (local_variable_1 == shift_count) {\n          local_variable_1 = calculate_checksum_08009120(value,local_variable_1,10,0);\n          shift_count = local_variable_1;\n        }\n        else {\n          local_variable_1 = calculate_checksum_08009120(value,local_variable_1,10,0);\n          shift_count = calculate_checksum_08009120(value,shift_count,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        temp_var4 = calculate_division_remainder_080078c0(result,num_length);\n        temp_var4 = temp_var4 + 0x30;\n        output_char_ptr2 = temp_string3 + 1;\n        *temp_string3 = (char)temp_var4;\n        if ((int)local_variable_5 <= (int)output_char_ptr2 - (int)result_str) break;\n        result = calculate_checksum_08009120(value,result,10,0);\n        temp_string3 = output_char_ptr2;\n      }\n      local_variable_1 = 0;\n    }\n    result = initialize_and_allocate_memory_08009444(value,result,1);\n    num_digits = compare_arrays_080094f8(result,num_length);\n    digit = output_char_ptr2[-1];\n    if ((0 < num_digits) || ((num_digits == 0 && (temp_var4 << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        temp_string3 = output_char_ptr2 + -1;\n        if (digit != '9') goto code_r0x08008270;\n        if (result_str == temp_string3) {\n          *result_str = '1';\n          local_variable_3 = local_variable_3 + 1;\n          goto LAB_08008274;\n        }\n        digit = output_char_ptr2[-2];\n        output_char_ptr2 = temp_string3;\n      } while( true );\n    }\n    while (digit == '0') {\n      digit = output_char_ptr2[-2];\n      output_char_ptr2 = output_char_ptr2 + -1;\n    }\nLAB_08008274:\n    extract_and_assign_value_0800910c(value,num_length);\n    if (shift_count == 0) goto LAB_08008294;\n    if ((local_variable_1 != 0) && (local_variable_1 != shift_count)) {\n      extract_and_assign_value_0800910c(value);\n    }\n  }\n  extract_and_assign_value_0800910c(value,shift_count);\nLAB_08008294:\n  extract_and_assign_value_0800910c(value,result);\n  *output_char_ptr2 = '\\0';\n  *error_code = local_variable_3 + 1;\n  if (output_string == (char **)0x0) {\n    return result_str;\n  }\n  *output_string = output_char_ptr2;\n  return result_str;\ncode_r0x08008270:\n  *temp_string3 = digit + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "current_name": "convert_float_to_readable_string_080079e8",
            "entrypoint": "0x080079e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080079e8": "convert_float_to_readable_string_080079e8",
                "bVar1": "is_negative",
                "bVar2": "is_zero",
                "bVar25": "is_negative",
                "bVar3": "is_negative",
                "bVar5": "carry",
                "cVar1": "char_var1",
                "cVar4": "digit",
                "iVar14": "num_length",
                "iVar15": "num_digits",
                "iVar19": "shift_count",
                "iVar24": "temp_var4",
                "iVar7": "i",
                "iVar8": "comparison_result",
                "iVar9": "int_var3",
                "local_2c": "temp_array",
                "local_30": "bit_count",
                "local_34": "local_variable_12",
                "local_38": "local_variable_11",
                "local_48": "local_variable_9",
                "local_58": "local_variable_8",
                "local_5c": "local_var7",
                "local_60": "local_var6",
                "local_68": "local_variable_5",
                "local_70": "leading_zeros",
                "local_74": "local_variable_3",
                "local_7c": "local_variable_2",
                "local_80": "local_variable_1",
                "param_1": "value",
                "param_2": "param2",
                "param_3": "sign",
                "param_4": "exponent",
                "param_5": "precision",
                "param_6": "precision",
                "param_7": "error_code",
                "param_8": "is_negative",
                "param_9": "output_string",
                "pcVar10": "result_str",
                "pcVar20": "temp_string3",
                "pcVar21": "output_char_ptr2",
                "puVar22": "ptr1",
                "uStack_44": "local_variable_10",
                "uVar11": "exponent",
                "uVar12": "u_var12",
                "uVar13": "u_var13",
                "uVar16": "unsigned_var4",
                "uVar17": "exponent_bits",
                "uVar18": "exponent_value",
                "uVar22": "mantissa_shifted",
                "uVar23": "result_high",
                "uVar26": "result_low",
                "uVar27": "temp_var13",
                "uVar28": "unsigned_var10",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800884c": {
            "additional_data": {
                "DAT_20000454": {
                    "allocated_memory_ptr": 1,
                    "base_address": 2,
                    "data_address": 1,
                    "data_ptr": 2,
                    "data_ptr_1": 1,
                    "data_segment": 1,
                    "data_structure": 1,
                    "data_structure_1": 2,
                    "data_structure_address": 2,
                    "data_structure_base_address": 1,
                    "data_structure_ptr": 3
                },
                "DAT_20000854": {
                    "data_ptr_3": 1,
                    "other_data_size": 1,
                    "other_data_structure_address": 1
                },
                "DAT_20000a14": {
                    "adjusted_data_size": 1,
                    "allocated_memory": 1,
                    "allocated_memory_offset": 1,
                    "allocated_memory_size": 2,
                    "allocation_offset": 1,
                    "allocation_size": 1,
                    "current_memory_size": 1,
                    "data_ptr_2": 1,
                    "data_structure_2": 1,
                    "data_structure_offset": 1,
                    "memory_offset": 2,
                    "total_allocated_memory": 3,
                    "total_memory_allocation": 1
                },
                "FUN_0800884c": {
                    "allocate_and_initialize_data_structure": 2,
                    "allocate_and_initialize_memory": 12,
                    "allocate_memory": 1,
                    "initialize_and_allocate_memory": 6,
                    "initialize_and_assign_memory": 1,
                    "initialize_data_structure": 2,
                    "initialize_data_structures": 2,
                    "initialize_memory": 4,
                    "memory_allocation_and_initialization": 1
                },
                "allocate_memory_and_assign_to_param_08009744": {
                    "allocate_and_assign_memory": 2,
                    "allocate_and_assign_to_param": 1,
                    "allocate_memory": 2,
                    "allocate_memory_and_assign": 11,
                    "allocate_memory_and_assign_to_structure": 1
                },
                "iVar1": {
                    "alloc_result1": 1,
                    "alloc_result_1": 1,
                    "allocated_address": 2,
                    "allocated_mem": 1,
                    "allocated_mem1": 1,
                    "allocated_mem_1": 1,
                    "allocated_memory": 6,
                    "allocated_memory1": 1,
                    "allocated_memory_1": 1,
                    "allocated_memory_check": 1,
                    "allocated_ptr": 1,
                    "allocation_1": 1,
                    "allocation_result": 5,
                    "result": 5
                },
                "iVar2": {
                    "adjusted_address": 1,
                    "adjusted_memory": 1,
                    "adjusted_offset": 3,
                    "alloc_result2": 1,
                    "alloc_result_2": 1,
                    "allocated_address": 1,
                    "allocated_mem2": 1,
                    "allocated_mem_2": 1,
                    "allocated_memory": 3,
                    "allocated_memory2": 1,
                    "allocated_memory_2": 1,
                    "allocated_size": 1,
                    "allocation_2": 1,
                    "allocation_address": 2,
                    "calculated_address": 2,
                    "memory_address": 2,
                    "memory_offset": 2,
                    "memory_start": 1,
                    "new_address": 1,
                    "new_offset": 2,
                    "start_address": 1,
                    "target_address": 1
                },
                "initialize_data_structure_080090b4": {
                    "initialize_data_structure": 16,
                    "initialize_data_structure_helper_b": 1
                },
                "initialize_data_structures_080090a8": {
                    "initialize_data_structures": 16,
                    "initialize_data_structures_helper_a": 1
                },
                "param_1": {
                    "arg1": 1,
                    "data_structure": 10,
                    "data_structure_param": 6,
                    "function_param": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "memory_address": 1,
                    "param": 3,
                    "param1": 3,
                    "struct_ptr": 2,
                    "structure_param": 1
                },
                "param_2": {
                    "arg2": 1,
                    "input_value": 2,
                    "offset": 16,
                    "offset_param": 1,
                    "offset_value": 1,
                    "param2": 3,
                    "param_value": 1,
                    "size": 2,
                    "size_param": 2,
                    "value": 1,
                    "value_param": 1
                },
                "uVar3": {
                    "aligned_address": 1,
                    "aligned_size": 1,
                    "data_address": 2,
                    "data_mask": 1,
                    "data_offset": 2,
                    "data_size": 2,
                    "data_struct_size": 1,
                    "data_structure_size": 4,
                    "data_structure_value": 1,
                    "data_structures_offset": 1,
                    "data_value": 2,
                    "header_value": 1,
                    "mask": 3,
                    "masked_data": 1,
                    "masked_value": 6,
                    "size_masked": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_080090a8",
                "FUN_08009744",
                "FUN_080090b4"
            ],
            "calling": [
                "FUN_080088ec"
            ],
            "code": "\nundefined4 initialize_and_allocate_memory_0800884c(undefined4 data_structure,int offset)\n\n{\n  int allocated_memory;\n  int adjusted_offset;\n  uint masked_value;\n  \n  initialize_data_structures();\n  masked_value = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  adjusted_offset = ((0xfef - offset) + masked_value & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_offset) {\n    allocated_memory = allocate_memory_and_assign(data_structure,0);\n    if (allocated_memory == DAT_20000454 + masked_value) {\n      allocated_memory = allocate_memory_and_assign(data_structure,-adjusted_offset);\n      if (allocated_memory != -1) {\n        DAT_20000a14 = DAT_20000a14 - adjusted_offset;\n        *(uint *)(DAT_20000454 + 4) = masked_value - adjusted_offset | 1;\n        initialize_data_structure(data_structure);\n        return 1;\n      }\n      adjusted_offset = allocate_memory_and_assign(data_structure,0);\n      if (0xf < adjusted_offset - DAT_20000454) {\n        DAT_20000a14 = adjusted_offset - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = adjusted_offset - DAT_20000454 | 1;\n      }\n    }\n  }\n  initialize_data_structure(data_structure);\n  return 0;\n}\n\n",
            "current_name": "initialize_and_allocate_memory_0800884c",
            "entrypoint": "0x0800884c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800884c": "initialize_and_allocate_memory_0800884c",
                "allocate_memory_and_assign_to_param_08009744": "allocate_memory_and_assign",
                "iVar1": "allocated_memory",
                "iVar2": "adjusted_offset",
                "initialize_data_structure_080090b4": "initialize_data_structure",
                "initialize_data_structures_080090a8": "initialize_data_structures",
                "param_1": "data_structure",
                "param_2": "offset",
                "uVar3": "masked_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080088ec": {
            "additional_data": {
                "DAT_20000444": {
                    "memory_block_end": 1
                },
                "DAT_2000044c": {
                    "memory_blocks_array": 1
                },
                "DAT_20000450": {
                    "global_value_3": 1,
                    "memory_block_index": 1
                },
                "DAT_20000454": {
                    "global_ptr": 1,
                    "global_ptr_1": 1
                },
                "DAT_2000045c": {
                    "global_ptr_2": 1,
                    "global_ptr_next": 1
                },
                "DAT_20000460": {
                    "global_ptr_3": 1,
                    "global_ptr_prev": 1
                },
                "DAT_20000858": {
                    "global_value_1": 1,
                    "memory_threshold": 1
                },
                "DAT_20000a44": {
                    "global_value_2": 1,
                    "memory_block_size": 1
                },
                "FUN_080088ec": {
                    "improve_and_initialize_memory": 1,
                    "improve_data_structure": 1,
                    "initialize_and_allocate_memory": 7,
                    "initialize_data": 1,
                    "initialize_data_structure": 6,
                    "initialize_data_structures": 6,
                    "initialize_memory": 4,
                    "initialize_structures": 1,
                    "process_data": 1
                },
                "iVar1": {
                    "index": 17,
                    "index1": 5,
                    "initial_index": 1,
                    "iteration_var": 1,
                    "iterator": 1,
                    "loop_counter": 1,
                    "pos": 1,
                    "temp_var1": 2,
                    "var1": 1
                },
                "iVar10": {
                    "block_index": 2,
                    "count": 5,
                    "counter": 1,
                    "i_var": 1,
                    "index": 1,
                    "index2": 6,
                    "loop_index": 2,
                    "num": 1,
                    "size": 2,
                    "temp_var2": 2,
                    "temp_var3": 1,
                    "temp_variable": 1,
                    "var1": 1,
                    "var10": 2,
                    "var_3": 1,
                    "variable1": 1,
                    "variable_1": 1
                },
                "initialize_and_allocate_memory_0800884c": {
                    "allocate_memory": 1
                },
                "initialize_data_structure_080090b4": {
                    "initialize_data_structure_recursive": 1
                },
                "initialize_data_structures_080090a8": {
                    "initialize_data_structures": 1
                },
                "param_1": {
                    "arg1": 4,
                    "arg_1": 1,
                    "first_parameter": 1,
                    "input_1": 1,
                    "param1": 14,
                    "param_1": 5,
                    "parameter1": 1,
                    "parameter_1": 1,
                    "some_param": 1,
                    "target_address": 1,
                    "variable1": 1
                },
                "param_2": {
                    "arg2": 4,
                    "arg_2": 1,
                    "data": 1,
                    "data_address": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_structure": 1,
                    "input_2": 1,
                    "input_data": 1,
                    "input_length": 1,
                    "param2": 12,
                    "param_2": 1,
                    "parameter2": 1,
                    "parameter_2": 1,
                    "source_pointer": 1,
                    "variable2": 1
                },
                "param_3": {
                    "arg3": 4,
                    "arg_3": 1,
                    "input_3": 1,
                    "param3": 14,
                    "param_3": 6,
                    "parameter3": 1,
                    "parameter_3": 1,
                    "some_param_2": 1,
                    "third_parameter": 1,
                    "variable3": 1
                },
                "param_4": {
                    "arg4": 4,
                    "arg_4": 1,
                    "fourth_parameter": 1,
                    "input_4": 1,
                    "param4": 14,
                    "param_4": 6,
                    "parameter4": 1,
                    "parameter_4": 1,
                    "some_param_3": 1,
                    "variable4": 1
                },
                "puVar11": {
                    "head_structure": 1
                },
                "puVar12": {
                    "tail_structure": 1
                },
                "puVar2": {
                    "block": 1,
                    "block_ptr": 1,
                    "current": 1,
                    "current_pointer": 3,
                    "current_ptr": 1,
                    "header": 1,
                    "pointer1": 8,
                    "pointer_1": 1,
                    "pointer_var1": 1,
                    "ptr1": 10,
                    "ptr2": 1,
                    "ptr_1": 1,
                    "ptr_var1": 1
                },
                "puVar3": {
                    "next": 1,
                    "next_block": 1,
                    "next_block_ptr": 1,
                    "next_header": 1,
                    "next_pointer": 3,
                    "next_ptr": 1,
                    "pointer2": 8,
                    "pointer_2": 1,
                    "pointer_var2": 1,
                    "ptr2": 10,
                    "ptr3": 1,
                    "ptr_2": 1,
                    "ptr_var2": 1
                },
                "puVar4": {
                    "current_header": 1,
                    "current_structure": 1,
                    "pointer3": 8,
                    "pointer_3": 1,
                    "pointer_var3": 1,
                    "prev_block_ptr": 1,
                    "previous": 1,
                    "ptr1": 1,
                    "ptr3": 9,
                    "ptr4": 1,
                    "ptr_1": 1,
                    "ptr_3": 1,
                    "ptr_temp1": 1,
                    "ptr_var3": 1,
                    "temp_pointer": 1,
                    "temp_pointer1": 1
                },
                "puVar7": {
                    "head_block_ptr": 1,
                    "initial_pointer": 1,
                    "pointer4": 8,
                    "pointer_4": 1,
                    "pointer_var4": 1,
                    "prev_ptr": 1,
                    "previous_header": 1,
                    "previous_structure": 1,
                    "ptr2": 1,
                    "ptr4": 9,
                    "ptr7": 1,
                    "ptr_2": 1,
                    "ptr_4": 1,
                    "ptr_temp2": 1,
                    "ptr_var4": 1,
                    "temp_pointer2": 1
                },
                "puVar8": {
                    "new_structure": 1,
                    "next_ptr": 1,
                    "pointer5": 8,
                    "pointer_5": 1,
                    "pointer_var5": 1,
                    "previous_pointer": 1,
                    "ptr3": 1,
                    "ptr5": 9,
                    "ptr8": 1,
                    "ptr_3": 1,
                    "ptr_5": 1,
                    "ptr_temp3": 1,
                    "ptr_var5": 1,
                    "tail_block_ptr": 1,
                    "temp_header": 1,
                    "temp_pointer3": 1
                },
                "puVar9": {
                    "current_block_ptr": 1,
                    "data_header": 1,
                    "header_pointer": 1,
                    "pointer6": 8,
                    "pointer_6": 1,
                    "pointer_var6": 1,
                    "ptr4": 1,
                    "ptr6": 9,
                    "ptr9": 1,
                    "ptr_4": 1,
                    "ptr_6": 1,
                    "ptr_temp4": 1,
                    "ptr_var6": 1,
                    "starting_structure": 1,
                    "temp_pointer4": 1,
                    "temp_ptr": 1
                },
                "uVar11": {
                    "flag": 2,
                    "flag1": 7,
                    "flag_1": 1,
                    "flags": 3,
                    "size": 1,
                    "temp_var4": 1,
                    "value1": 2,
                    "value3": 4,
                    "value_3": 1,
                    "var11": 2,
                    "var2": 1,
                    "var3": 3,
                    "var_4": 1,
                    "variable3": 1
                },
                "uVar12": {
                    "flag2": 7,
                    "flag_2": 1,
                    "next_block_flags": 1,
                    "next_flag": 1,
                    "temp": 2,
                    "temp_value": 1,
                    "temp_var5": 1,
                    "value": 1,
                    "value2": 2,
                    "value4": 4,
                    "value_4": 1,
                    "var12": 2,
                    "var3": 1,
                    "var4": 3,
                    "var_5": 1,
                    "variable4": 1
                },
                "uVar5": {
                    "block_size": 1,
                    "size": 5,
                    "size1": 6,
                    "size_1": 1,
                    "size_adjusted": 1,
                    "temp_var1": 1,
                    "total_size": 4,
                    "value1": 4,
                    "value_1": 1,
                    "var1": 4,
                    "var5": 1,
                    "var_1": 1,
                    "variable1": 1
                },
                "uVar6": {
                    "alignment_size": 1,
                    "next_block_size": 2,
                    "obj_size": 1,
                    "offset": 2,
                    "size": 1,
                    "size2": 7,
                    "size_2": 1,
                    "size_and_flags": 1,
                    "structure_size": 1,
                    "temp_var2": 1,
                    "value2": 4,
                    "value_2": 1,
                    "var2": 4,
                    "var6": 2,
                    "var_2": 1,
                    "variable2": 1
                }
            },
            "called": [
                "FUN_0800884c",
                "FUN_080090a8",
                "FUN_080090b4"
            ],
            "calling": [
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08008af8",
                "FUN_08005e9c"
            ],
            "code": "\nvoid initialize_and_allocate_memory_080088ec(undefined4 param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  int index;\n  uint *ptr1;\n  uint *ptr2;\n  undefined *ptr3;\n  uint size1;\n  uint size2;\n  undefined *ptr4;\n  undefined *ptr5;\n  undefined4 *ptr6;\n  int index2;\n  uint flag1;\n  uint flag2;\n  \n  if (param2 == 0) {\n    return;\n  }\n  initialize_data_structures();\n  flag1 = *(uint *)(param2 + -4);\n  ptr1 = (uint *)(param2 + -8);\n  size1 = flag1 & 0xfffffffe;\n  ptr2 = (uint *)((int)ptr1 + size1);\n  size2 = ptr2[1] & 0xfffffffc;\n  if (DAT_20000454 == ptr2) {\n    size1 = size1 + size2;\n    if ((flag1 & 1) == 0) {\n      ptr1 = (uint *)((int)ptr1 - *(int *)(param2 + -8));\n      size2 = ptr1[2];\n      flag1 = ptr1[3];\n      size1 = size1 + *(int *)(param2 + -8);\n      *(uint *)(size2 + 0xc) = flag1;\n      *(uint *)(flag1 + 8) = size2;\n    }\n    size2 = DAT_20000858;\n    ptr1[1] = size1 | 1;\n    DAT_20000454 = ptr1;\n    if (size2 <= size1) {\n      allocate_memory(param1,DAT_20000a44);\n    }\nLAB_080089f0:\n    initialize_data_structure_recursive(param1);\n    return;\n  }\n  ptr2[1] = size2;\n  if ((flag1 & 1) == 0) {\n    ptr1 = (uint *)((int)ptr1 - *(int *)(param2 + -8));\n    ptr6 = (undefined4 *)ptr1[2];\n    size1 = size1 + *(int *)(param2 + -8);\n    flag1 = *(uint *)((int)ptr2 + size2 + 4) & 1;\n    if ((uint **)ptr6 == &DAT_20000454) {\n      if (flag1 == 0) {\n        flag1 = ptr2[2];\n        flag2 = ptr2[3];\n        size1 = size1 + size2;\n        *(uint *)(flag1 + 0xc) = flag2;\n        *(uint *)(flag2 + 8) = flag1;\n        ptr1[1] = size1 | 1;\n        *(uint *)((int)ptr1 + size1) = size1;\n      }\n      else {\n        ptr1[1] = size1 | 1;\n        *ptr2 = size1;\n      }\n      goto LAB_080089f0;\n    }\n    flag2 = ptr1[3];\n    ptr6[3] = flag2;\n    *(undefined4 **)(flag2 + 8) = ptr6;\n  }\n  else {\n    flag1 = *(uint *)((int)ptr2 + size2 + 4) & 1;\n  }\n  if (flag1 == 0) {\n    ptr6 = (undefined4 *)ptr2[2];\n    size1 = size1 + size2;\n    if ((uint **)ptr6 == &DAT_20000454) {\n      DAT_2000045c = ptr1;\n      DAT_20000460 = ptr1;\n      ptr1[2] = (uint)&DAT_20000454;\n      ptr1[3] = (uint)&DAT_20000454;\n      ptr1[1] = size1 | 1;\n      *(uint *)((int)ptr1 + size1) = size1;\n      goto LAB_080089f0;\n    }\n    size2 = ptr2[3];\n    ptr6[3] = size2;\n    *(undefined4 **)(size2 + 8) = ptr6;\n    ptr1[1] = size1 | 1;\n    *(uint *)((int)ptr1 + size1) = size1;\n  }\n  else {\n    ptr1[1] = size1 | 1;\n    *(uint *)((int)ptr1 + size1) = size1;\n  }\n  if (size1 < 0x200) {\n    index2 = (size1 >> 3) + 1;\n    size1 = 1 << ((int)(size1 >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    size2 = *(uint *)(&DAT_2000044c + index2 * 8);\n    ptr1[2] = size2;\n    ptr1[3] = (uint)(&DAT_20000444 + index2 * 8);\n    DAT_20000450 = (undefined *)size1;\n    *(uint **)(&DAT_2000044c + index2 * 8) = ptr1;\n    *(uint **)(size2 + 0xc) = ptr1;\n    initialize_data_structure_recursive(param1,ptr1,size1,param4);\n    return;\n  }\n  size2 = size1 >> 9;\n  if (size2 < 5) {\n    index2 = ((size1 >> 6) + 0x39) * 8;\n    index = (size1 >> 6) + 0x38;\n  }\n  else if (size2 < 0x15) {\n    index2 = (size2 + 0x5c) * 8;\n    index = size2 + 0x5b;\n  }\n  else if (size2 < 0x55) {\n    index2 = ((size1 >> 0xc) + 0x6f) * 8;\n    index = (size1 >> 0xc) + 0x6e;\n  }\n  else if (size2 < 0x155) {\n    index2 = ((size1 >> 0xf) + 0x78) * 8;\n    index = (size1 >> 0xf) + 0x77;\n  }\n  else if (size2 < 0x555) {\n    index2 = ((size1 >> 0x12) + 0x7d) * 8;\n    index = (size1 >> 0x12) + 0x7c;\n  }\n  else {\n    index2 = 0x3f8;\n    index = 0x7e;\n  }\n  ptr3 = *(undefined **)(&DAT_2000044c + index2);\n  ptr4 = &DAT_20000444 + index2;\n  if (ptr4 == ptr3) {\n    ptr3 = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    ptr5 = ptr4;\n    DAT_20000450 = ptr3;\n  }\n  else {\n    do {\n      ptr5 = ptr3;\n      if ((*(uint *)(ptr3 + 4) & 0xfffffffc) <= size1) break;\n      ptr3 = *(undefined **)(ptr3 + 8);\n      ptr5 = ptr4;\n    } while (ptr4 != ptr3);\n    ptr4 = *(undefined **)(ptr5 + 0xc);\n  }\n  ptr1[2] = (uint)ptr5;\n  ptr1[3] = (uint)ptr4;\n  *(uint **)(ptr4 + 8) = ptr1;\n  *(uint **)(ptr5 + 0xc) = ptr1;\n  initialize_data_structure_recursive(param1,ptr1,ptr3,param4);\n  return;\n}\n\n",
            "current_name": "initialize_and_allocate_memory_080088ec",
            "entrypoint": "0x080088ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080088ec": "initialize_and_allocate_memory_080088ec",
                "iVar1": "index",
                "iVar10": "index2",
                "initialize_and_allocate_memory_0800884c": "allocate_memory",
                "initialize_data_structure_080090b4": "initialize_data_structure_recursive",
                "initialize_data_structures_080090a8": "initialize_data_structures",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "puVar7": "ptr4",
                "puVar8": "ptr5",
                "puVar9": "ptr6",
                "uVar11": "flag1",
                "uVar12": "flag2",
                "uVar5": "size1",
                "uVar6": "size2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "additional_data": {
                "0": {
                    "base_address": 1,
                    "initial_value": 1
                },
                "0x2000085c": {
                    "default_address": 3,
                    "default_base_value": 1,
                    "default_offset": 11,
                    "default_output_value": 1,
                    "default_result": 1,
                    "default_value": 3
                },
                "0x34": {
                    "offset": 5,
                    "offset_constant": 1
                },
                "0xf0": {
                    "additional_offset": 1,
                    "adjustment": 2,
                    "offset": 2,
                    "offset_increase": 1,
                    "offset_increment": 2,
                    "value_to_add": 1
                },
                "DAT_2000001c": {
                    "base_address": 1
                },
                "FUN_08008ad4": {
                    "calculate_adjusted_value": 3,
                    "calculate_base_address": 1,
                    "calculate_final_address": 1,
                    "calculate_final_value": 2,
                    "calculate_modified_address": 1,
                    "calculate_offset": 5,
                    "calculate_result": 1,
                    "calculate_target_address": 1,
                    "calculate_updated_value": 1,
                    "get_adjusted_value": 6,
                    "get_memory_address": 2,
                    "get_offset": 2,
                    "get_offset_value": 1,
                    "get_updated_value": 3,
                    "get_variable_offset": 1
                },
                "iVar1": {
                    "base_address": 1,
                    "base_value": 1,
                    "current_address": 1,
                    "current_value": 4,
                    "input_value": 1,
                    "memory_value": 1,
                    "offset": 6,
                    "offset_value": 1,
                    "original_value": 1,
                    "result": 1,
                    "target_address": 1,
                    "value": 10,
                    "value_at_offset": 1,
                    "variable_offset": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nint get_adjusted_value_08008ad4(void)\n\n{\n  int value;\n  \n  value = *(int *)(DAT_2000001c + 0x34);\n  if (value == 0) {\n    value = 0x2000085c;\n  }\n  return value + 0xf0;\n}\n\n",
            "current_name": "get_adjusted_value_08008ad4",
            "entrypoint": "0x08008ad4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008ad4": "get_adjusted_value_08008ad4",
                "iVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008af0": {
            "called": [],
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008af0",
            "entrypoint": "0x08008af0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008af4": {
            "called": [],
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008af4",
            "entrypoint": "0x08008af4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008af8": {
            "additional_data": {
                "FUN_08008af8": {
                    "allocate_and_initialize_data_structure": 2,
                    "allocate_and_initialize_memory": 16,
                    "allocate_and_initialize_structure": 1,
                    "allocate_memory": 5,
                    "allocate_memory_and_assign": 2,
                    "allocate_memory_if_possible": 1,
                    "allocate_memory_or_return_null": 1,
                    "improve_memory_allocation": 1,
                    "improved_allocate_memory": 1,
                    "initialize_and_allocate_memory": 1
                },
                "allocate_memory_and_assign_to_param_08009744": {
                    "alloc_and_assign_memory": 1
                },
                "iVar14": {
                    "data_structure1": 1,
                    "i_var1": 1,
                    "index": 1,
                    "index2": 4,
                    "index_2": 1,
                    "next_index": 1,
                    "prev_offset": 1,
                    "temp3": 3,
                    "temp_index": 1,
                    "temp_offset": 2,
                    "temp_var5": 1,
                    "temp_var8": 1,
                    "temp_var_8": 1,
                    "var1": 1,
                    "var14": 2,
                    "var8": 1,
                    "var_14": 2,
                    "var_2": 1,
                    "var_8": 1,
                    "variable_8": 3
                },
                "iVar4": {
                    "allocation_size": 1,
                    "counter": 1,
                    "index": 6,
                    "index1": 1,
                    "index_1": 1,
                    "iter": 1,
                    "offset": 3,
                    "temp2": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var_3": 1,
                    "var3": 2,
                    "var4": 4,
                    "var_1": 1,
                    "var_3": 1,
                    "var_4": 2,
                    "variable_3": 3
                },
                "initialize_data_structure_080090b4": {
                    "init_data_structure_2": 1
                },
                "initialize_data_structures_080090a8": {
                    "init_data_structures_1": 1
                },
                "param_1": {
                    "allocated_memory_ptr": 1,
                    "allocator": 1,
                    "data_structures": 2,
                    "function_params": 1,
                    "input_buffer": 1,
                    "input_ptr": 1,
                    "memory_address": 1,
                    "memory_block": 3,
                    "memory_pointer": 1,
                    "memory_ptr": 2,
                    "new_param": 1,
                    "output": 1,
                    "output_buffer": 1,
                    "output_pointer": 1,
                    "param1": 1,
                    "param_address": 1,
                    "param_array": 1,
                    "param_ptr": 1,
                    "parameter_array": 1,
                    "pointer": 1,
                    "ptr": 1,
                    "ptr_size": 2,
                    "result": 1,
                    "result_pointer": 1,
                    "result_ptr": 1,
                    "structure_ptr": 1
                },
                "param_2": {
                    "block_size": 1,
                    "input_size": 1,
                    "memory_size": 2,
                    "num_bytes": 1,
                    "param2": 1,
                    "param_size": 1,
                    "requested_size": 1,
                    "size": 21,
                    "size_of_allocated_memory": 1,
                    "size_of_structure": 1
                },
                "piVar11": {
                    "output_buffer": 1,
                    "output_ptr": 1,
                    "pointer_7": 1,
                    "result": 19,
                    "result_pointer": 3,
                    "result_ptr": 5,
                    "result_ptr_2": 1
                },
                "puVar1": {
                    "current_block": 1,
                    "pointer": 1,
                    "pointer1": 4,
                    "pointer_1": 6,
                    "ptr": 1,
                    "ptr1": 7,
                    "ptr_1": 2,
                    "ptr_start": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 1,
                    "temp_ptr_1": 1,
                    "temp_ptr_2": 1,
                    "var1": 1
                },
                "puVar10": {
                    "block": 1,
                    "current_block": 2,
                    "current_ptr": 3,
                    "data_ptr": 1,
                    "node_ptr": 1,
                    "pointer4": 1,
                    "pointer5": 3,
                    "pointer_4": 1,
                    "pointer_5": 5,
                    "ptr5": 6,
                    "ptr_10": 2,
                    "temp_ptr5": 2,
                    "var10": 1
                },
                "puVar15": {
                    "allocated_start": 1,
                    "current_block_addr": 1,
                    "data_ptr1": 1,
                    "first_block": 1,
                    "malloc_ptr": 1,
                    "new_block": 1,
                    "output1": 1,
                    "pointer5": 1,
                    "pointer6": 3,
                    "pointer_5": 1,
                    "pointer_6": 5,
                    "ptr1": 1,
                    "ptr6": 5,
                    "ptr_15": 2,
                    "ptr_block": 1,
                    "result_ptr": 1,
                    "temp_ptr3": 1,
                    "temp_ptr6": 2,
                    "temp_ptr_5": 1
                },
                "puVar16": {
                    "current_start": 1,
                    "data_ptr2": 1,
                    "next_elem": 1,
                    "output2": 1,
                    "pointer6": 1,
                    "pointer7": 3,
                    "pointer_6": 1,
                    "pointer_7": 5,
                    "prev_block": 1,
                    "previous_block": 1,
                    "ptr2": 1,
                    "ptr7": 5,
                    "ptr_16": 2,
                    "temp_block": 1,
                    "temp_ptr": 2,
                    "temp_ptr4": 1,
                    "temp_ptr7": 2,
                    "temp_ptr_6": 1
                },
                "puVar5": {
                    "block_ptr": 1,
                    "data_start": 1,
                    "new_block": 1,
                    "next_block": 1,
                    "next_ptr": 1,
                    "pointer1": 1,
                    "pointer2": 4,
                    "pointer_2": 6,
                    "ptr2": 7,
                    "ptr_5": 2,
                    "ptr_current": 1,
                    "start": 1,
                    "temp_ptr2": 2,
                    "temp_ptr_2": 1,
                    "var5": 1
                },
                "puVar8": {
                    "block_ptr": 1,
                    "current_ptr": 1,
                    "elem": 1,
                    "next_block": 1,
                    "pointer2": 1,
                    "pointer3": 3,
                    "pointer_3": 5,
                    "ptr3": 6,
                    "ptr_8": 2,
                    "temp_ptr": 1,
                    "temp_ptr1": 1,
                    "temp_ptr3": 2,
                    "temp_ptr_3": 1,
                    "var8": 1
                },
                "puVar9": {
                    "allocated_block": 1,
                    "allocated_ptr": 1,
                    "end_pointer": 1,
                    "new_block": 1,
                    "new_elem": 1,
                    "pointer3": 1,
                    "pointer4": 3,
                    "pointer_3": 1,
                    "pointer_4": 5,
                    "ptr4": 6,
                    "ptr_9": 2,
                    "ptr_end": 1,
                    "temp_ptr2": 1,
                    "temp_ptr4": 2,
                    "temp_ptr_3": 1,
                    "temp_ptr_4": 1,
                    "var9": 1
                },
                "uVar12": {
                    "adjusted_num_bytes": 1,
                    "adjusted_size": 6,
                    "calculated_value_1": 1,
                    "current_block_size": 1,
                    "new_size": 4,
                    "size": 1,
                    "size_plus_11": 1,
                    "temp1": 1,
                    "temp_var6": 1,
                    "temp_var_6": 1,
                    "updated_size": 1,
                    "value_5": 1,
                    "var12": 1,
                    "var6": 1,
                    "var_12": 2,
                    "var_6": 1,
                    "var_7": 1,
                    "variable5": 1,
                    "variable_6": 3
                },
                "uVar13": {
                    "adjusted_remainder": 1,
                    "adjusted_size": 1,
                    "adjusted_size_2": 1,
                    "aligned_size": 10,
                    "calculated_value_2": 1,
                    "new_aligned_size": 1,
                    "temp2": 1,
                    "temp_var7": 1,
                    "temp_var_7": 1,
                    "updated_size2": 1,
                    "value_6": 1,
                    "var13": 1,
                    "var7": 1,
                    "var_13": 2,
                    "var_7": 1,
                    "var_8": 1,
                    "variable6": 1,
                    "variable_7": 3
                },
                "uVar2": {
                    "block_size": 1,
                    "num_bits": 1,
                    "shift": 1,
                    "size": 1,
                    "start": 1,
                    "temp": 1,
                    "temp1": 3,
                    "temp2": 1,
                    "temp_size": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "value_1": 1,
                    "var1": 3,
                    "var2": 4,
                    "var_1": 1,
                    "var_2": 2,
                    "var_3": 1,
                    "variable1": 1,
                    "variable_1": 3
                },
                "uVar3": {
                    "block_size_diff": 1,
                    "diff_size": 1,
                    "end": 1,
                    "remainder": 1,
                    "remaining_size": 2,
                    "temp1": 1,
                    "temp2": 3,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "value_2": 1,
                    "var2": 3,
                    "var3": 4,
                    "var_2": 1,
                    "var_3": 2,
                    "var_4": 1,
                    "variable2": 1,
                    "variable_2": 3
                },
                "uVar6": {
                    "bit_mask": 1,
                    "bitmask": 1,
                    "count1": 1,
                    "counter_2": 1,
                    "level": 1,
                    "mask": 1,
                    "size1": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp3": 2,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var_4": 1,
                    "value_3": 1,
                    "var3": 1,
                    "var4": 2,
                    "var6": 4,
                    "var_4": 1,
                    "var_5": 1,
                    "var_6": 2,
                    "variable3": 1,
                    "variable_4": 3
                },
                "uVar7": {
                    "count2": 1,
                    "counter_3": 1,
                    "size": 1,
                    "size2": 1,
                    "size_difference": 1,
                    "temp": 1,
                    "temp2": 2,
                    "temp4": 2,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var_5": 1,
                    "value_4": 1,
                    "var4": 1,
                    "var5": 2,
                    "var7": 4,
                    "var_5": 1,
                    "var_6": 1,
                    "var_7": 2,
                    "variable4": 1,
                    "variable_5": 3
                }
            },
            "called": [
                "FUN_080090a8",
                "FUN_080088ec",
                "FUN_08009744",
                "FUN_080090b4"
            ],
            "calling": [
                "FUN_08009adc",
                "FUN_080097cc",
                "FUN_08005e9c",
                "FUN_08009980"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * initialize_and_allocate_memory_08008af8(undefined4 *memory_block,uint size)\n\n{\n  undefined *ptr1;\n  uint var2;\n  uint var3;\n  int index;\n  undefined *ptr2;\n  uint var6;\n  uint var7;\n  undefined4 *ptr3;\n  undefined *ptr4;\n  undefined *ptr5;\n  int *result;\n  uint adjusted_size;\n  uint aligned_size;\n  int index2;\n  undefined4 *ptr6;\n  undefined4 *pointer_7;\n  \n  adjusted_size = size + 0xb;\n  if (adjusted_size < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    init_data_structures_1();\n    aligned_size = 0x10;\n    index = 0x18;\n    adjusted_size = 2;\nLAB_08008b18:\n    ptr5 = *(undefined **)((int)&DAT_20000450 + index);\n    if ((ptr5 != &DAT_20000444 + index) ||\n       (ptr5 = *(undefined **)((int)&DAT_20000458 + index), &DAT_2000044c + index != ptr5)) {\n      index = *(int *)(ptr5 + 0xc);\n      ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n      adjusted_size = *(uint *)(ptr2 + 4);\nLAB_08008b34:\n      index2 = *(int *)(ptr5 + 8);\n      *(int *)(index2 + 0xc) = index;\n      *(int *)(index + 8) = index2;\n      *(uint *)(ptr2 + 4) = adjusted_size | 1;\n      init_data_structure_2(memory_block);\n      return (int *)(ptr5 + 8);\n    }\n    adjusted_size = adjusted_size + 2;\n  }\n  else {\n    aligned_size = adjusted_size & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_08008c7a:\n      *memory_block = 0xc;\n      return (int *)0x0;\n    }\n    init_data_structures_1();\n    if (aligned_size < 0x1f8) {\n      adjusted_size = adjusted_size >> 3;\n      index = aligned_size + 8;\n      goto LAB_08008b18;\n    }\n    var2 = adjusted_size >> 9;\n    if (var2 == 0) {\n      index = 0x200;\n      var6 = 0x40;\n      var2 = 0x3f;\n    }\n    else if (var2 < 5) {\n      var6 = (adjusted_size >> 6) + 0x39;\n      var2 = (adjusted_size >> 6) + 0x38;\n      index = var6 * 8;\n    }\n    else if (var2 < 0x15) {\n      var6 = var2 + 0x5c;\n      var2 = var2 + 0x5b;\n      index = var6 * 8;\n    }\n    else if (var2 < 0x55) {\n      var6 = (adjusted_size >> 0xc) + 0x6f;\n      var2 = (adjusted_size >> 0xc) + 0x6e;\n      index = var6 * 8;\n    }\n    else if (var2 < 0x155) {\n      var6 = (adjusted_size >> 0xf) + 0x78;\n      var2 = (adjusted_size >> 0xf) + 0x77;\n      index = var6 * 8;\n    }\n    else if (var2 < 0x555) {\n      var6 = (adjusted_size >> 0x12) + 0x7d;\n      var2 = (adjusted_size >> 0x12) + 0x7c;\n      index = var6 * 8;\n    }\n    else {\n      index = 0x3f8;\n      var6 = 0x7f;\n      var2 = 0x7e;\n    }\n    for (ptr5 = *(undefined **)((int)&DAT_20000450 + index); adjusted_size = var6,\n        &DAT_20000444 + index != ptr5; ptr5 = *(undefined **)(ptr5 + 0xc)) {\n      index2 = (*(uint *)(ptr5 + 4) & 0xfffffffc) - aligned_size;\n      adjusted_size = var2;\n      if (0xf < index2) break;\n      if (-1 < index2) {\n        ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n        adjusted_size = *(uint *)(ptr2 + 4);\n        index = *(int *)(ptr5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  ptr6 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    var6 = 1 << ((int)adjusted_size >> 2 & 0xffU);\n    var2 = DAT_20000450;\n    if (var6 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    var6 = DAT_2000045c[1];\n    var7 = var6 & 0xfffffffc;\n    var2 = var7 - aligned_size;\n    if (0xf < (int)var2) {\n      pointer_7 = (undefined4 *)(aligned_size + (int)DAT_2000045c);\n      DAT_2000045c[1] = aligned_size | 1;\n      DAT_2000045c = pointer_7;\n      DAT_20000460 = pointer_7;\n      pointer_7[2] = &DAT_20000454;\n      pointer_7[3] = &DAT_20000454;\n      pointer_7[1] = var2 | 1;\n      *(uint *)((int)ptr6 + var7) = var2;\n      init_data_structure_2(memory_block);\n      return ptr6 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)var2) {\n      *(uint *)((int)ptr6 + var7 + 4) = *(uint *)((int)ptr6 + var7 + 4) | 1;\n      init_data_structure_2(memory_block);\n      return ptr6 + 2;\n    }\n    if (var7 < 0x200) {\n      index = (var6 >> 3) + 1;\n      index2 = *(int *)(&DAT_2000044c + index * 8);\n      var2 = 1 << ((int)(var6 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      ptr6[2] = index2;\n      ptr6[3] = &DAT_20000444 + index * 8;\n      DAT_20000450 = var2;\n      *(undefined4 **)(&DAT_2000044c + index * 8) = ptr6;\n      *(undefined4 **)(index2 + 0xc) = ptr6;\n    }\n    else {\n      var2 = var6 >> 9;\n      if (var2 < 5) {\n        index = ((var6 >> 6) + 0x39) * 8;\n        index2 = (var6 >> 6) + 0x38;\n      }\n      else if (var2 < 0x15) {\n        index = (var2 + 0x5c) * 8;\n        index2 = var2 + 0x5b;\n      }\n      else if (var2 < 0x55) {\n        index = ((var6 >> 0xc) + 0x6f) * 8;\n        index2 = (var6 >> 0xc) + 0x6e;\n      }\n      else if (var2 < 0x155) {\n        index = ((var6 >> 0xf) + 0x78) * 8;\n        index2 = (var6 >> 0xf) + 0x77;\n      }\n      else if (var2 < 0x555) {\n        index = ((var6 >> 0x12) + 0x7d) * 8;\n        index2 = (var6 >> 0x12) + 0x7c;\n      }\n      else {\n        index = 0x3f8;\n        index2 = 0x7e;\n      }\n      ptr5 = *(undefined **)(&DAT_2000044c + index);\n      ptr2 = &DAT_20000444 + index;\n      if (ptr2 == ptr5) {\n        DAT_20000450 = 1 << (index2 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr5 + 4) & 0xfffffffc) <= var7) break;\n          ptr5 = *(undefined **)(ptr5 + 8);\n        } while (ptr2 != ptr5);\n        ptr2 = *(undefined **)(ptr5 + 0xc);\n      }\n      var2 = DAT_20000450;\n      ptr6[2] = ptr5;\n      ptr6[3] = ptr2;\n      *(undefined4 **)(ptr2 + 8) = ptr6;\n      *(undefined4 **)(ptr5 + 0xc) = ptr6;\n    }\n    var6 = 1 << ((int)adjusted_size >> 2 & 0xffU);\n    if (var6 <= var2) {\nLAB_08008c06:\n      if ((var6 & var2) == 0) {\n        adjusted_size = adjusted_size & 0xfffffffc;\n        do {\n          var6 = var6 << 1;\n          adjusted_size = adjusted_size + 4;\n        } while ((var6 & var2) == 0);\n      }\n      do {\n        pointer_7 = (undefined4 *)(&DAT_2000044c + adjusted_size * 8);\n        var2 = adjusted_size;\n        ptr6 = pointer_7;\n        do {\n          for (ptr3 = (undefined4 *)ptr6[3]; ptr6 != ptr3;\n              ptr3 = (undefined4 *)ptr3[3]) {\n            var7 = ptr3[1] & 0xfffffffc;\n            var3 = var7 - aligned_size;\n            if (0xf < (int)var3) {\n              index2 = ptr3[2];\n              index = ptr3[3];\n              ptr6 = (undefined4 *)(aligned_size + (int)ptr3);\n              ptr3[1] = aligned_size | 1;\n              *(int *)(index2 + 0xc) = index;\n              *(int *)(index + 8) = index2;\n              DAT_2000045c = ptr6;\n              DAT_20000460 = ptr6;\n              ptr6[2] = &DAT_20000454;\n              ptr6[3] = &DAT_20000454;\n              ptr6[1] = var3 | 1;\n              *(uint *)((int)ptr3 + var7) = var3;\n              init_data_structure_2(memory_block);\n              return ptr3 + 2;\n            }\n            if (-1 < (int)var3) {\n              index = ptr3[3];\n              index2 = ptr3[2];\n              *(uint *)((int)ptr3 + var7 + 4) = *(uint *)((int)ptr3 + var7 + 4) | 1;\n              *(int *)(index2 + 0xc) = index;\n              *(int *)(index + 8) = index2;\n              init_data_structure_2(memory_block);\n              return ptr3 + 2;\n            }\n          }\n          var2 = var2 + 1;\n          ptr6 = ptr6 + 2;\n        } while ((var2 & 3) != 0);\n        do {\n          var7 = adjusted_size & 3;\n          ptr6 = pointer_7 + -2;\n          adjusted_size = adjusted_size - 1;\n          if (var7 == 0) {\n            DAT_20000450 = DAT_20000450 & ~var6;\n            break;\n          }\n          pointer_7 = (undefined4 *)*pointer_7;\n        } while (pointer_7 == ptr6);\n        var6 = var6 * 2;\n        if ((DAT_20000450 <= var6 && var6 - DAT_20000450 != 0) || (adjusted_size = var2, var6 == 0))\n        break;\n        for (; (var6 & DAT_20000450) == 0; var6 = var6 << 1) {\n          adjusted_size = adjusted_size + 4;\n        }\n      } while( true );\n    }\n  }\n  ptr5 = DAT_20000454;\n  adjusted_size = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((aligned_size <= adjusted_size) && (var2 = adjusted_size - aligned_size, 0xf < (int)var2)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    var2 = aligned_size + DAT_20000a44 + 0x10;\n  }\n  else {\n    var2 = aligned_size + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  ptr2 = (undefined *)alloc_and_assign_memory(memory_block,var2);\n  if (ptr2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    adjusted_size = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    ptr1 = ptr5 + adjusted_size;\n    if (ptr1 < ptr2 || ptr1 == ptr2) {\n      ptr4 = DAT_20000a14 + var2;\n      if ((ptr1 != ptr2) || (((uint)ptr1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = ptr4;\n      *(uint *)(DAT_20000454 + 4) = adjusted_size + var2 | 1;\n    }\n    else {\n      if (ptr5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + var2;\n      ptr4 = ptr2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)ptr2 - (int)ptr1);\n        ptr4 = DAT_20000854;\n      }\n      DAT_20000854 = ptr4;\n      var6 = (uint)ptr2 & 7;\n      if (var6 == 0) {\n        index = 0x1000;\n      }\n      else {\n        ptr2 = ptr2 + (8 - var6);\n        index = 0x1008 - var6;\n      }\n      index = index - ((uint)(ptr2 + var2) & 0xfff);\n      index2 = alloc_and_assign_memory(memory_block,index);\n      if (index2 == -1) {\n        var2 = 1;\n        index = 0;\n      }\n      else {\n        var2 = (index2 - (int)ptr2) + index | 1;\n      }\n      ptr4 = DAT_20000a14 + index;\n      DAT_20000454 = ptr2;\n      DAT_20000a14 = ptr4;\n      *(uint *)(ptr2 + 4) = var2;\n      if (ptr5 != &DAT_2000044c) {\n        if (adjusted_size < 0x10) {\n          *(undefined4 *)(ptr2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        adjusted_size = adjusted_size - 0xc & 0xfffffff8;\n        *(uint *)(ptr5 + 4) = *(uint *)(ptr5 + 4) & 1 | adjusted_size;\n        *(undefined4 *)(ptr5 + adjusted_size + 4) = 5;\n        *(undefined4 *)(ptr5 + adjusted_size + 8) = 5;\n        if (0xf < adjusted_size) {\n          initialize_and_allocate_memory_08008af8_080088ec(memory_block,ptr5 + 8);\n          ptr4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < ptr4) {\n      DAT_20000a3c = ptr4;\n    }\n    adjusted_size = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < ptr4) {\n      DAT_20000a40 = ptr4;\n    }\n  }\n  var2 = (adjusted_size & 0xfffffffc) - aligned_size;\n  if ((aligned_size <= (adjusted_size & 0xfffffffc)) && (0xf < (int)var2)) {\nLAB_08008dac:\n    ptr5 = DAT_20000454 + aligned_size;\n    *(uint *)(DAT_20000454 + 4) = aligned_size | 1;\n    result = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = ptr5;\n    *(uint *)(ptr5 + 4) = var2 | 1;\n    init_data_structure_2(memory_block);\n    return result;\n  }\nLAB_08008eee:\n  init_data_structure_2(memory_block);\n  return (int *)0x0;\n}\n\n",
            "current_name": "initialize_and_allocate_memory_08008af8",
            "entrypoint": "0x08008af8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008af8": "initialize_and_allocate_memory_08008af8",
                "allocate_memory_and_assign_to_param_08009744": "alloc_and_assign_memory",
                "iVar14": "index2",
                "iVar4": "index",
                "initialize_data_structure_080090b4": "init_data_structure_2",
                "initialize_data_structures_080090a8": "init_data_structures_1",
                "param_1": "memory_block",
                "param_2": "size",
                "piVar11": "result",
                "puVar1": "ptr1",
                "puVar10": "ptr5",
                "puVar15": "ptr6",
                "puVar16": "pointer_7",
                "puVar5": "ptr2",
                "puVar8": "ptr3",
                "puVar9": "ptr4",
                "uVar12": "adjusted_size",
                "uVar13": "aligned_size",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar6": "var6",
                "uVar7": "var7"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800901c": {
            "additional_data": {
                "FUN_0800901c": {
                    "extract_specific_bytes": 1,
                    "find_byte": 1,
                    "find_byte_sequence": 20,
                    "find_first_byte": 1,
                    "find_first_occurrence": 3,
                    "find_last_occurrence": 1,
                    "find_next_byte": 1,
                    "find_output_values": 1,
                    "find_reverse_first_occurrence": 1,
                    "find_value_in_array": 1
                },
                "LAB_0800904a": {
                    "check_sequence_1": 1
                },
                "LAB_08009050": {
                    "check_sequence_2": 1
                },
                "LAB_0800906c": {
                    "no_match_found": 1
                },
                "bVar5": {
                    "end_flag": 2,
                    "end_reached": 1,
                    "is_data_length_zero": 1,
                    "is_empty": 2,
                    "is_end": 4,
                    "is_end_of_data": 1,
                    "is_end_reached": 1,
                    "is_last_byte": 1,
                    "is_last_iteration": 1,
                    "is_length_zero": 5,
                    "is_loop_condition_satisfied": 1,
                    "is_match": 1,
                    "is_zero": 2,
                    "is_zero_length": 3,
                    "reached_end": 1
                },
                "param_1": {
                    "array": 5,
                    "buffer": 1,
                    "byte_array": 2,
                    "data": 16,
                    "data_ptr": 1,
                    "input": 1,
                    "input_array": 4,
                    "input_data": 1
                },
                "param_2": {
                    "byte": 2,
                    "byte_sequence": 3,
                    "byte_sequence_length": 1,
                    "byte_to_extract": 1,
                    "byte_to_find": 7,
                    "byte_value": 3,
                    "first_byte": 1,
                    "key": 1,
                    "pattern": 1,
                    "search_byte": 1,
                    "search_byte_1": 1,
                    "search_value": 4,
                    "target": 1,
                    "target_byte": 1,
                    "value": 2,
                    "value_1": 1
                },
                "param_3": {
                    "array_length": 6,
                    "buffer_length": 1,
                    "count": 1,
                    "data_length": 6,
                    "length": 16,
                    "size": 1
                },
                "puVar3": {
                    "current": 2,
                    "current_byte": 6,
                    "current_byte_ptr": 1,
                    "current_data": 2,
                    "current_element": 2,
                    "current_pointer": 2,
                    "current_position": 3,
                    "current_ptr": 7,
                    "ptr": 2
                },
                "uVar1": {
                    "byte_xor_result": 1,
                    "result": 9,
                    "result_1": 1,
                    "temp": 2,
                    "temp_var1": 1,
                    "temp_xor_result": 1,
                    "xor_result": 8,
                    "xored_value": 4
                },
                "uVar2": {
                    "byte_sequence": 3,
                    "combined_byte": 5,
                    "combined_key": 1,
                    "combined_pattern": 1,
                    "combined_sequence": 1,
                    "combined_value": 3,
                    "concat_byte": 1,
                    "index": 2,
                    "masked_byte": 1,
                    "result_2": 1,
                    "search_byte_concat": 1,
                    "search_bytes": 1,
                    "search_value_shifted": 1,
                    "shifted_sequence": 1,
                    "shifted_value": 1,
                    "temp": 1,
                    "temp_value": 1,
                    "temp_var2": 1
                },
                "uVar4": {
                    "byte": 1,
                    "byte_mask": 1,
                    "filtered_byte": 1,
                    "first_byte": 3,
                    "first_byte_mask": 1,
                    "lower_byte": 2,
                    "lower_byte_of_key": 1,
                    "mask": 1,
                    "masked_byte": 6,
                    "masked_value": 3,
                    "search_byte": 3,
                    "search_value_mask": 1,
                    "target_byte": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nuint * find_byte_sequence_0800901c(uint *data,uint byte_to_find,uint length)\n\n{\n  uint result;\n  uint combined_byte;\n  uint *current_ptr;\n  uint masked_byte;\n  bool is_length_zero;\n  \n  masked_byte = byte_to_find & 0xff;\n  if (((uint)data & 3) == 0) {\ncheck_sequence_1:\n    if (3 < length) {\n      combined_byte = (byte_to_find & 0xff) << 8 | masked_byte;\n      current_ptr = data;\n      do {\n        result = *current_ptr ^ (combined_byte | combined_byte << 0x10);\n        data = current_ptr + 1;\n        if ((result + 0xfefefeff & ~result & 0x80808080) != 0) goto check_sequence_2;\n        length = length - 4;\n        current_ptr = data;\n      } while (3 < length);\n    }\n    current_ptr = data;\n    if (length == 0) {\n      data = (uint *)0x0;\n    }\n    else {\ncheck_sequence_2:\n      data = current_ptr;\n      if (*(byte *)data != masked_byte) {\n        current_ptr = (uint *)(length + (int)data);\n        do {\n          data = (uint *)((int)data + 1);\n          if (current_ptr == data) goto no_match_found;\n        } while (*(byte *)data != masked_byte);\n      }\n    }\n  }\n  else {\n    combined_byte = length - 1;\n    if (length == 0) {\nno_match_found:\n      data = (uint *)0x0;\n    }\n    else if (*(byte *)data != masked_byte) {\n      current_ptr = (uint *)((int)data + 1);\n      do {\n        data = current_ptr;\n        length = combined_byte;\n        if (((uint)data & 3) == 0) goto check_sequence_1;\n        is_length_zero = combined_byte == 0;\n        combined_byte = combined_byte - 1;\n        if (is_length_zero) goto no_match_found;\n        current_ptr = (uint *)((int)data + 1);\n      } while (*(byte *)data != masked_byte);\n    }\n  }\n  return data;\n}\n\n",
            "current_name": "find_byte_sequence_0800901c",
            "entrypoint": "0x0800901c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800901c": "find_byte_sequence_0800901c",
                "LAB_0800904a": "check_sequence_1",
                "LAB_08009050": "check_sequence_2",
                "LAB_0800906c": "no_match_found",
                "bVar5": "is_length_zero",
                "param_1": "data",
                "param_2": "byte_to_find",
                "param_3": "length",
                "puVar3": "current_ptr",
                "uVar1": "result",
                "uVar2": "combined_byte",
                "uVar4": "masked_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090a8": {
            "additional_data": {
                "DAT_20000bfc": {
                    "data": 8,
                    "data_buffer": 4
                },
                "FUNC_08008af0": {
                    "call_data_initialization": 1,
                    "initialize_data": 1,
                    "initialize_memory": 1,
                    "initialize_struct": 1,
                    "load_data": 1,
                    "process_data": 22,
                    "setup_data": 1
                },
                "FUN_080090a8": {
                    "initialize_data": 27,
                    "initialize_data_structure": 1,
                    "initialize_data_structures": 3
                }
            },
            "called": [
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "code": "\nvoid initialize_data_structures_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_080090a8",
            "entrypoint": "0x080090a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090a8": "initialize_data_structures_080090a8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090b4": {
            "additional_data": {
                "DAT_20000bfc": {
                    "data": 1,
                    "data_buffer": 6
                },
                "FUNC_08008af4": {
                    "initialize_data": 1,
                    "initialize_pointer": 1,
                    "load_data": 1,
                    "perform_initialization": 2,
                    "process_data": 24
                },
                "FUN_080090b4": {
                    "execute_initialization": 1,
                    "initialize_data": 28,
                    "initialize_data_exchange": 1,
                    "initialize_data_structure": 1
                },
                "data": {
                    "config_data": 1,
                    "data_buffer": 1
                },
                "p_data": {
                    "data": 1
                }
            },
            "called": [
                "FUN_08008af4"
            ],
            "calling": [
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "code": "\nvoid initialize_data_structure_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_080090b4",
            "entrypoint": "0x080090b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090b4": "initialize_data_structure_080090b4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090c0": {
            "additional_data": {
                "FUN_080090c0": {
                    "allocate_and_get_data": 3,
                    "allocate_and_get_element": 1,
                    "allocate_and_get_memory": 5,
                    "allocate_and_get_ptr": 1,
                    "allocate_and_get_value": 1,
                    "allocate_and_initialize_memory": 14,
                    "allocate_memory_and_initialize": 1,
                    "allocate_or_get_memory": 1,
                    "allocate_or_get_memory_block": 1,
                    "create_or_update_data_entry": 1,
                    "initialize_memory": 1,
                    "initialize_or_get_element": 1
                },
                "allocate_and_initialize_memory_08009980": {
                    "allocate_and_initialize_memory": 2,
                    "allocate_init_memory": 1,
                    "allocate_memory": 1,
                    "init_memory_block": 1
                },
                "iVar2": {
                    "block_address": 1,
                    "data_index": 1,
                    "dynamic_memory": 1,
                    "entry_index": 1,
                    "mem_addr": 1,
                    "mem_block": 1,
                    "mem_index": 1,
                    "memory_address": 6,
                    "memory_allocator": 1,
                    "memory_block": 3,
                    "memory_block_address": 1,
                    "memory_block_offset": 1,
                    "memory_handle": 2,
                    "memory_manager_ptr": 1,
                    "memory_pointer": 1,
                    "memory_ptr": 8
                },
                "param_1": {
                    "address": 1,
                    "arg1": 1,
                    "base_address": 1,
                    "block_index": 1,
                    "data_holder": 1,
                    "data_ptr": 3,
                    "input": 1,
                    "input_address": 1,
                    "input_data": 3,
                    "input_memory": 1,
                    "input_param": 4,
                    "mem_ptr": 1,
                    "memory_address": 4,
                    "memory_base": 1,
                    "memory_base_address": 1,
                    "memory_handle": 1,
                    "memory_manager": 2,
                    "memory_ptr": 1,
                    "param_address": 2
                },
                "param_2": {
                    "arg2": 1,
                    "element_index": 4,
                    "index": 25,
                    "param_index": 1
                },
                "puVar1": {
                    "allocated_memory": 1,
                    "allocated_ptr": 1,
                    "array_ptr": 1,
                    "current_entry": 1,
                    "current_value": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "element_pointer": 1,
                    "element_ptr": 4,
                    "entry": 1,
                    "memory_block": 2,
                    "memory_block_ptr": 1,
                    "memory_entry": 1,
                    "memory_slot": 1,
                    "new_ptr": 1,
                    "pointer": 1,
                    "ptr": 4,
                    "ptr_to_data": 1,
                    "ptr_to_element": 2,
                    "ptr_var": 1,
                    "value_ptr": 2
                }
            },
            "called": [
                "FUN_08009980"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_08009258",
                "FUN_08009630",
                "FUN_080093a4",
                "FUN_08009244",
                "FUN_08009120",
                "FUN_08009444",
                "FUN_08009530"
            ],
            "code": "\nundefined4 * allocate_memory_and_initialize_080090c0(int input_param,uint index)\n\n{\n  undefined4 *element_ptr;\n  int memory_ptr;\n  \n  memory_ptr = *(int *)(input_param + 0x4c);\n  if (memory_ptr == 0) {\n    memory_ptr = allocate_and_initialize_memory(input_param,4,0x21);\n    *(int *)(input_param + 0x4c) = memory_ptr;\n    if (memory_ptr == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  element_ptr = *(undefined4 **)(memory_ptr + index * 4);\n  if (element_ptr == (undefined4 *)0x0) {\n    memory_ptr = 1 << (index & 0xff);\n    element_ptr = (undefined4 *)allocate_and_initialize_memory(input_param,1,(memory_ptr + 5) * 4);\n    if (element_ptr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    element_ptr[1] = index;\n    element_ptr[2] = memory_ptr;\n  }\n  else {\n    *(undefined4 *)(memory_ptr + index * 4) = *element_ptr;\n  }\n  element_ptr[3] = 0;\n  element_ptr[4] = 0;\n  return element_ptr;\n}\n\n",
            "current_name": "allocate_memory_and_initialize_080090c0",
            "entrypoint": "0x080090c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090c0": "allocate_memory_and_initialize_080090c0",
                "allocate_and_initialize_memory_08009980": "allocate_and_initialize_memory",
                "iVar2": "memory_ptr",
                "param_1": "input_param",
                "param_2": "index",
                "puVar1": "element_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800910c": {
            "additional_data": {
                "FUN_0800910c": {
                    "copy_and_swap": 1,
                    "copy_and_swap_data": 1,
                    "copy_data_from_offset": 1,
                    "copy_data_to_pointer": 1,
                    "copy_value_and_swap": 3,
                    "copy_value_to_pointer": 2,
                    "extract_and_assign": 2,
                    "extract_and_assign_data": 1,
                    "extract_and_assign_value": 2,
                    "extract_and_store_data": 1,
                    "extract_and_store_value": 2,
                    "extract_and_swap": 1,
                    "extract_and_swap_values": 3,
                    "extract_data": 2,
                    "extract_data_and_update_pointer": 1,
                    "extract_data_from_binary": 1,
                    "extract_value": 1,
                    "extract_value_and_swap": 1,
                    "extract_value_and_update": 3,
                    "update_pointer": 1
                },
                "iVar1": {
                    "array_base_offset": 1,
                    "array_offset": 2,
                    "base_address": 4,
                    "data_block_pointer": 1,
                    "data_offset": 4,
                    "data_pointer": 2,
                    "destination_index": 1,
                    "destination_offset": 1,
                    "offset": 6,
                    "offset_address": 1,
                    "pointer_to_data": 1,
                    "temp_var": 1,
                    "value_index": 1
                },
                "param_1": {
                    "base_address": 7,
                    "binary_data": 1,
                    "binary_offset": 1,
                    "data_address": 1,
                    "data_offset": 4,
                    "extracted_value": 1,
                    "input_address": 1,
                    "input_array_base": 1,
                    "input_offset": 1,
                    "input_parameter": 1,
                    "input_pointer": 2,
                    "input_value": 1,
                    "offset": 1,
                    "source_address": 6,
                    "source_offset": 2
                },
                "param_2": {
                    "data_pointer": 1,
                    "destination_address": 1,
                    "destination_pointer": 3,
                    "destination_ptr": 1,
                    "extracted_data": 1,
                    "new_pointer": 1,
                    "output_address": 1,
                    "output_array": 1,
                    "output_data": 2,
                    "output_parameter": 1,
                    "output_pointer": 8,
                    "output_ptr": 2,
                    "result_pointer": 1,
                    "target_address": 3,
                    "target_pointer": 2,
                    "value_pointer": 1,
                    "value_ptr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid extract_and_assign_value_0800910c(int base_address,undefined4 *output_pointer)\n\n{\n  int offset;\n  \n  if (output_pointer != (undefined4 *)0x0) {\n    offset = *(int *)(base_address + 0x4c);\n    *output_pointer = *(undefined4 *)(offset + output_pointer[1] * 4);\n    *(undefined4 **)(offset + output_pointer[1] * 4) = output_pointer;\n  }\n  return;\n}\n\n",
            "current_name": "extract_and_assign_value_0800910c",
            "entrypoint": "0x0800910c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800910c": "extract_and_assign_value_0800910c",
                "iVar1": "offset",
                "param_1": "base_address",
                "param_2": "output_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009120": {
            "additional_data": {
                "FUN_08009120": {
                    "accumulate_uintegers": 1,
                    "apply_multiplication": 1,
                    "calculate_checksum": 18,
                    "calculate_sum": 1,
                    "compute_checksum": 1,
                    "integer_array_operation": 1,
                    "transform_data": 1,
                    "update_array_with_multiplication": 2,
                    "update_param_values": 1
                },
                "iVar3": {
                    "array_length": 7,
                    "array_size": 8,
                    "data_length": 2,
                    "data_size": 1,
                    "length": 6,
                    "num_elements": 3,
                    "output_array_length": 1,
                    "size": 3
                },
                "iVar5": {
                    "counter": 14,
                    "i": 1,
                    "index": 9,
                    "iteration": 1,
                    "iteration_count": 4,
                    "iterator": 1,
                    "loop_counter": 1
                },
                "param_1": {
                    "accumulator": 1,
                    "data_size": 1,
                    "error_code": 1,
                    "input": 8,
                    "input_data": 1,
                    "input_length": 1,
                    "input_size": 7,
                    "input_value": 2,
                    "memory_address": 1,
                    "param": 2,
                    "param1": 3,
                    "param_size": 1,
                    "size": 1,
                    "value": 1
                },
                "param_2": {
                    "array": 7,
                    "checksum_array": 1,
                    "data": 10,
                    "input_array": 8,
                    "input_data": 1,
                    "input_params": 1,
                    "output_array": 1,
                    "output_data": 1,
                    "param2": 1
                },
                "param_3": {
                    "multiplier": 30,
                    "param3": 1
                },
                "param_4": {
                    "accumulator": 5,
                    "carry": 6,
                    "checksum": 14,
                    "initial_checksum": 3,
                    "initial_value": 2,
                    "param4": 1
                },
                "puVar1": {
                    "new_array": 4,
                    "new_data": 2,
                    "new_output_data": 1,
                    "output_array": 1,
                    "result": 9,
                    "result_array": 8,
                    "result_data": 1,
                    "result_ptr": 2,
                    "updated_array": 1,
                    "updated_checksum_array": 1,
                    "updated_data": 1
                },
                "puVar4": {
                    "array_pointer": 2,
                    "array_ptr": 6,
                    "current": 1,
                    "current_data": 1,
                    "current_element": 10,
                    "data_ptr": 5,
                    "element_ptr": 1,
                    "p_data": 1,
                    "ptr": 4
                },
                "uVar2": {
                    "carry": 8,
                    "carry_over": 1,
                    "carry_sum": 1,
                    "carry_temp": 1,
                    "carry_value": 1,
                    "high_carry": 1,
                    "high_word": 1,
                    "temp": 8,
                    "temp_checksum": 1,
                    "temp_result": 2,
                    "temp_value": 3,
                    "temp_var": 1,
                    "tmp_checksum": 1,
                    "upper_part": 1
                }
            },
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "code": "\nundefined4 * calculate_checksum_08009120(int input,undefined4 *data,int multiplier,uint checksum)\n\n{\n  undefined4 *result;\n  uint temp;\n  int array_size;\n  uint *current_element;\n  int counter;\n  \n  counter = 0;\n  array_size = data[4];\n  current_element = data + 5;\n  do {\n    counter = counter + 1;\n    checksum = multiplier * (*current_element & 0xffff) + checksum;\n    temp = multiplier * (*current_element >> 0x10) + (checksum >> 0x10);\n    *current_element = (checksum & 0xffff) + temp * 0x10000;\n    checksum = temp >> 0x10;\n    current_element = current_element + 1;\n  } while (counter < array_size);\n  result = data;\n  if (checksum != 0) {\n    if ((int)data[2] <= array_size) {\n      result = (undefined4 *)allocate_memory_and_initialize_080090c0(input,data[1] + 1);\n      copy_memory_08001084(result + 3,data + 3,(data[4] + 2) * 4);\n      counter = *(int *)(input + 0x4c);\n      *data = *(undefined4 *)(counter + data[1] * 4);\n      *(undefined4 **)(counter + data[1] * 4) = data;\n    }\n    result[array_size + 5] = checksum;\n    result[4] = array_size + 1;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_checksum_08009120",
            "entrypoint": "0x08009120",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009120": "calculate_checksum_08009120",
                "iVar3": "array_size",
                "iVar5": "counter",
                "param_1": "input",
                "param_2": "data",
                "param_3": "multiplier",
                "param_4": "checksum",
                "puVar1": "result",
                "puVar4": "current_element",
                "uVar2": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091a4": {
            "additional_data": {
                "FUN_080091a4": {
                    "calculate_shift_amount": 1,
                    "count_leading_zeros": 23,
                    "count_trailing_zeros": 1,
                    "determine_highest_bit_position": 1,
                    "find_highest_bit": 1,
                    "find_highest_bit_position": 2,
                    "find_leftmost_set_bit": 1,
                    "get_leading_zero_bits_count": 1
                },
                "iVar1": {
                    "bit_position": 4,
                    "leading_zero_bits_count": 1,
                    "leading_zeros": 19,
                    "leading_zeros_count": 2,
                    "num_bits_shifted": 1,
                    "num_leading_zeros": 1,
                    "num_zeros": 1,
                    "shift_count": 1,
                    "trailing_zero_count": 1
                },
                "param_1": {
                    "input": 16,
                    "input_value": 2,
                    "num": 3,
                    "number": 2,
                    "value": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_08009630"
            ],
            "code": "\nint count_leading_zeros_080091a4(uint input)\n\n{\n  int leading_zeros;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    leading_zeros = 0x10;\n  }\n  else {\n    leading_zeros = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    leading_zeros = leading_zeros + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    leading_zeros = leading_zeros + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    leading_zeros = leading_zeros + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return leading_zeros + 1;\n    }\n    leading_zeros = 0x20;\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_leading_zeros_080091a4",
            "entrypoint": "0x080091a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "iVar1": "leading_zeros",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091e4": {
            "additional_data": {
                "FUN_080091e4": {
                    "count_consecutive_zeros": 1,
                    "count_leading_zeros": 12,
                    "count_trailing_zero_bits": 1,
                    "count_trailing_zeroes": 1,
                    "count_trailing_zeros": 9,
                    "find_bit_position": 1,
                    "find_highest_bit_index": 1,
                    "find_highest_bit_position": 2,
                    "find_leading_zeroes": 1,
                    "find_trailing_zeroes": 1,
                    "number_of_trailing_zeros": 1
                },
                "iVar1": {
                    "bit_index": 1,
                    "bit_position": 2,
                    "count": 7,
                    "leading_zeroes_count": 1,
                    "leading_zeros": 6,
                    "leading_zeros_count": 3,
                    "num_trailing_zeros": 1,
                    "result": 1,
                    "trailing_zero_count": 3,
                    "trailing_zeroes_count": 1,
                    "trailing_zeros": 1,
                    "trailing_zeros_count": 3,
                    "zero_count": 1
                },
                "param_1": {
                    "input": 3,
                    "input_num": 1,
                    "input_ptr": 1,
                    "input_value": 1,
                    "num": 9,
                    "num_ptr": 6,
                    "number": 8,
                    "value": 1
                },
                "uVar2": {
                    "input_value": 1,
                    "num": 5,
                    "num_value": 2,
                    "temp": 4,
                    "temp_num": 1,
                    "temp_value": 1,
                    "value": 15,
                    "value_shifted": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08009630"
            ],
            "code": "\nint count_leading_zeros_080091e4(uint *num)\n\n{\n  int count;\n  uint value;\n  \n  value = *num;\n  if ((value & 7) == 0) {\n    if ((value & 0xffff) == 0) {\n      value = value >> 0x10;\n      count = 0x10;\n    }\n    else {\n      count = 0;\n    }\n    if ((value & 0xff) == 0) {\n      value = value >> 8;\n      count = count + 8;\n    }\n    if ((value & 0xf) == 0) {\n      value = value >> 4;\n      count = count + 4;\n    }\n    if ((value & 3) == 0) {\n      value = value >> 2;\n      count = count + 2;\n    }\n    if (-1 < (int)(value << 0x1f)) {\n      value = value >> 1;\n      if (value == 0) {\n        return 0x20;\n      }\n      count = count + 1;\n    }\n    *num = value;\n    return count;\n  }\n  if ((int)(value << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(value << 0x1e)) {\n    *num = value >> 2;\n    return 2;\n  }\n  *num = value >> 1;\n  return 1;\n}\n\n",
            "current_name": "count_leading_zeros_080091e4",
            "entrypoint": "0x080091e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "iVar1": "count",
                "param_1": "num",
                "uVar2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009244": {
            "additional_data": {
                "FUN_08009244": {
                    "allocate_and_initialize_memory": 3,
                    "initialize_and_allocate_memory": 5,
                    "initialize_and_set_param": 1,
                    "initialize_and_set_parameters": 1,
                    "initialize_and_set_value": 4,
                    "initialize_memory": 12,
                    "initialize_memory_and_set_values": 2,
                    "initialize_memory_with_param": 1,
                    "initialize_with_param": 1,
                    "initialize_with_params": 1
                },
                "iVar1": {
                    "allocated_memory": 11,
                    "allocated_memory_address": 1,
                    "mem_address": 2,
                    "mem_block": 1,
                    "memory_address": 12,
                    "memory_allocation_result": 1,
                    "memory_block": 1,
                    "memory_pointer": 1
                },
                "param_1": {
                    "arg1": 1,
                    "arg_1": 1,
                    "dest": 1,
                    "first_param": 1,
                    "initial_value": 1,
                    "input1": 6,
                    "input_1": 1,
                    "input_param": 2,
                    "input_param1": 1,
                    "input_parameter": 1,
                    "input_value": 1,
                    "memory_size": 1,
                    "param1": 4,
                    "size": 9
                },
                "param_2": {
                    "arg2": 1,
                    "arg_2": 1,
                    "data": 4,
                    "data_value": 1,
                    "input2": 6,
                    "input_2": 1,
                    "input_param2": 1,
                    "param2": 4,
                    "param_value": 2,
                    "parameter_value": 1,
                    "second_param": 1,
                    "value": 6,
                    "value_param": 1,
                    "value_to_set": 1
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid allocate_and_initialize_memory_08009244(undefined4 size,undefined4 input2)\n\n{\n  int memory_address;\n  \n  memory_address = allocate_memory_and_initialize_080090c0(size,1);\n  *(undefined4 *)(memory_address + 0x10) = 1;\n  *(undefined4 *)(memory_address + 0x14) = input2;\n  return;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_08009244",
            "entrypoint": "0x08009244",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009244": "allocate_and_initialize_memory_08009244",
                "iVar1": "memory_address",
                "param_1": "size",
                "param_2": "input2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009258": {
            "additional_data": {
                "FUN_08009258": {
                    "allocate_and_init_array": 1,
                    "calculate_and_store_result": 1,
                    "calculate_and_update_values": 1,
                    "calculate_hash": 1,
                    "calculate_product": 1,
                    "calculate_sum": 2,
                    "initialize_and_allocate_memory": 4,
                    "initialize_and_calculate": 2,
                    "initialize_and_compute_checksum": 1,
                    "initialize_and_compute_hash": 1,
                    "initialize_and_multiply": 1,
                    "initialize_array": 1,
                    "initialize_function": 1,
                    "initialize_memory": 11,
                    "initialize_memory_and_compute_checksum": 1,
                    "reverse_and_allocate_memory": 1
                },
                "iVar10": {
                    "destination_array_size": 1,
                    "length2": 2,
                    "max_input_length": 1,
                    "max_input_size": 1,
                    "max_size": 2,
                    "min_input_size": 2,
                    "min_length": 10,
                    "min_size": 1,
                    "min_source_size": 1,
                    "min_value": 1,
                    "smaller_size": 1,
                    "start_val2": 1,
                    "temp": 1,
                    "temp_max_value": 1,
                    "temp_value": 1,
                    "temp_var4": 1,
                    "updated_max_input": 1,
                    "var3": 1
                },
                "iVar11": {
                    "temp2": 1
                },
                "iVar12": {
                    "array1_length": 2,
                    "array1_size": 1,
                    "input1_length": 1,
                    "input_size1_var": 1,
                    "length1": 6,
                    "length1_copy": 1,
                    "length_1": 1,
                    "max_value": 2,
                    "min_input": 1,
                    "min_value": 3,
                    "size1": 3,
                    "source1_size": 1,
                    "source_length": 1,
                    "source_size": 1,
                    "temp": 1,
                    "temp_size": 1,
                    "temp_size1": 1,
                    "temp_var5": 1,
                    "var1": 1
                },
                "iVar13": {
                    "array2_length": 1,
                    "array2_size": 1,
                    "destination_size": 1,
                    "input1_offset": 1,
                    "input_size_var": 1,
                    "larger_size": 1,
                    "max_length": 1,
                    "min_array": 1,
                    "min_source": 1,
                    "param2": 1,
                    "param2_temp": 1,
                    "param_2_copy": 1,
                    "param_temp": 1,
                    "ptr1": 1,
                    "second_param": 1,
                    "size2": 2,
                    "smaller_array": 1,
                    "source_min": 1,
                    "source_start": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp_array1": 1,
                    "temp_input_ptr": 1,
                    "temp_length": 1,
                    "temp_param": 1,
                    "temp_size2": 1,
                    "temp_var6": 1,
                    "updated_input2": 1,
                    "var4": 1
                },
                "iVar3": {
                    "allocated_memory": 14,
                    "allocated_size": 1,
                    "allocation_size": 1,
                    "iterator": 1,
                    "length": 1,
                    "memory_block": 1,
                    "memory_size": 6,
                    "num_elements": 1,
                    "output_length": 1,
                    "size": 1,
                    "total_memory": 1,
                    "total_size": 1,
                    "var5": 1
                },
                "iVar9": {
                    "array2_length": 1,
                    "destination_length": 1,
                    "input_size2_var": 1,
                    "length1": 2,
                    "length2": 6,
                    "length2_copy": 1,
                    "length_2": 1,
                    "max_input": 1,
                    "max_input_size": 1,
                    "max_size": 2,
                    "max_value": 3,
                    "min_input_length": 1,
                    "min_input_size": 1,
                    "min_size": 2,
                    "second_max": 1,
                    "size2": 1,
                    "source2_size": 1,
                    "source_array_size": 1,
                    "start_val1": 1,
                    "temp": 1,
                    "var2": 1
                },
                "param_1": {
                    "arg1": 5,
                    "input": 1,
                    "input_param": 1,
                    "memory": 1,
                    "memory_address": 1,
                    "param": 1,
                    "param1": 16,
                    "param_1": 4,
                    "result": 1
                },
                "param_2": {
                    "arg2": 3,
                    "array1": 7,
                    "array1_address": 1,
                    "input1": 6,
                    "input_size1": 2,
                    "length1": 1,
                    "param2": 5,
                    "size1": 1,
                    "source1": 1,
                    "source_1": 1,
                    "source_array": 1,
                    "source_param": 1,
                    "value1": 1
                },
                "param_3": {
                    "arg3": 3,
                    "array2": 7,
                    "array2_address": 1,
                    "destination_array": 1,
                    "destination_param": 1,
                    "input2": 6,
                    "input_size2": 2,
                    "length2": 1,
                    "param3": 5,
                    "size2": 1,
                    "source2": 1,
                    "source_2": 1,
                    "value2": 1
                },
                "puVar1": {
                    "array1_ptr": 1,
                    "array_ptr3": 1,
                    "curr_ptr1": 1,
                    "current_element": 1,
                    "hash_temp1": 1,
                    "input1_ptr": 1,
                    "input1_value": 1,
                    "pointer1": 3,
                    "ptr1": 9,
                    "ptr2": 1,
                    "ptr_1": 1,
                    "source1_index": 1,
                    "source_pointer": 1,
                    "source_ptr": 1,
                    "src_pointer2": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 2,
                    "tmp_ptr1": 1
                },
                "puVar14": {
                    "array1_result_ptr": 1,
                    "array_ptr1": 1,
                    "current_inner_element": 1,
                    "current_output": 1,
                    "current_ptr1": 1,
                    "current_sum_ptr": 1,
                    "dst_pointer2": 1,
                    "end_ptr": 1,
                    "hash_ptr_temp2": 1,
                    "input1_current_ptr": 1,
                    "memory_index": 1,
                    "outer_ptr": 1,
                    "pointer2": 1,
                    "pointer6": 1,
                    "ptr4": 1,
                    "ptr5": 1,
                    "ptr6": 5,
                    "ptr_5": 1,
                    "source_index_pointer": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 2,
                    "temp_ptr3": 1,
                    "u_ptr14": 1
                },
                "puVar15": {
                    "array2_result_ptr": 1,
                    "array_ptr2": 1,
                    "current_pointer2": 1,
                    "current_product_ptr": 1,
                    "current_ptr": 1,
                    "current_ptr2": 1,
                    "destination_index_pointer": 1,
                    "hash_ptr_temp3": 1,
                    "inner_ptr": 1,
                    "input1_ptr": 1,
                    "input2_current_ptr": 1,
                    "memory_next": 1,
                    "next_inner_element": 1,
                    "pointer3": 1,
                    "pointer7": 1,
                    "ptr5": 1,
                    "ptr6": 1,
                    "ptr7": 4,
                    "ptr_6": 1,
                    "temp_ptr2": 1,
                    "temp_ptr3": 2,
                    "temp_ptr4": 1,
                    "u_ptr15": 1
                },
                "puVar16": {
                    "array1_base_ptr": 1,
                    "array1_ptr": 1,
                    "array2_start_ptr": 1,
                    "current_pointer": 1,
                    "current_ptr": 2,
                    "hash_ptr_temp": 1,
                    "inner_array_pointer": 1,
                    "input1_ptr": 1,
                    "input2_ptr": 1,
                    "parameter_ptr": 1,
                    "pointer5": 1,
                    "ptr5": 6,
                    "ptr6": 1,
                    "ptr7": 1,
                    "ptr_7": 1,
                    "ptr_input1": 1,
                    "size_ptr": 1,
                    "source1_start": 1,
                    "start_pointer": 1,
                    "start_ptr": 1,
                    "temp_address": 1,
                    "temp_ptr4": 1,
                    "temp_ptr5": 1,
                    "u_ptr16": 1
                },
                "puVar17": {
                    "array2_end_ptr": 1,
                    "checksum_ptr": 1,
                    "destination_end": 1,
                    "end_address": 1,
                    "end_index_pointer": 1,
                    "end_offset": 1,
                    "end_pointer": 1,
                    "end_ptr": 2,
                    "end_sum_array": 1,
                    "final_address": 1,
                    "final_array_pointer": 1,
                    "hash_end_ptr": 1,
                    "memory_end": 2,
                    "memset_end_ptr": 1,
                    "output_ptr": 1,
                    "pointer9": 1,
                    "ptr7": 2,
                    "ptr8": 5,
                    "ptr_8": 1,
                    "ptr_loop3": 1,
                    "result_end": 1,
                    "temp_ptr6": 1
                },
                "puVar18": {
                    "array2_base_ptr": 1,
                    "checksum_ptr2": 1,
                    "current_final_element": 1,
                    "current_memory_element": 1,
                    "current_output_ptr": 1,
                    "current_ptr": 1,
                    "destination_pointer": 1,
                    "hash_ptr": 1,
                    "initialized_address": 1,
                    "memory": 1,
                    "memory_start": 1,
                    "memset_current_ptr": 1,
                    "pointer8": 1,
                    "ptr6": 1,
                    "ptr7": 1,
                    "ptr8": 1,
                    "ptr9": 4,
                    "ptr_9": 1,
                    "ptr_result": 2,
                    "result_array": 1,
                    "result_ptr": 2,
                    "start_index_pointer": 1,
                    "start_pointer": 1,
                    "sum_array": 1,
                    "temp_ptr7": 1
                },
                "puVar2": {
                    "array2_ptr": 1,
                    "array_ptr4": 1,
                    "curr_ptr2": 1,
                    "destination_pointer": 1,
                    "destination_ptr": 1,
                    "hash_temp2": 1,
                    "input1_ptr2": 1,
                    "input2_value": 1,
                    "next_element": 1,
                    "pointer2": 2,
                    "pointer4": 1,
                    "ptr2": 9,
                    "ptr_2": 1,
                    "source1_next": 1,
                    "temp_pointer": 1,
                    "temp_ptr2": 2,
                    "temp_ptr4": 1,
                    "tmp_ptr2": 1
                },
                "puVar3": {
                    "tmp_ptr3": 1
                },
                "puVar5": {
                    "array1_ptr": 3,
                    "array1_ptr_iter": 1,
                    "array_pointer": 1,
                    "current_address": 1,
                    "current_memory": 1,
                    "current_pointer": 1,
                    "current_product_addr": 1,
                    "current_result": 1,
                    "data_ptr1": 1,
                    "hash_dest": 1,
                    "input2_ptr": 1,
                    "memset_ptr": 1,
                    "min_source": 1,
                    "output": 1,
                    "pointer3": 1,
                    "ptr1": 2,
                    "ptr3": 7,
                    "ptr_3": 1,
                    "ptr_array1": 1,
                    "ptr_loop1": 1,
                    "source_pointer": 1,
                    "src_pointer": 1
                },
                "puVar7": {
                    "aligned_source2": 1,
                    "array2_ptr": 2,
                    "array2_ptr_iter": 1,
                    "boundary_address": 1,
                    "condition_ptr": 1,
                    "data_ptr2": 1,
                    "dst_pointer": 1,
                    "end_pointer": 2,
                    "hash_temp": 1,
                    "loop_end_ptr": 1,
                    "pointer4": 1,
                    "ptr2": 2,
                    "ptr3": 1,
                    "ptr4": 7,
                    "ptr_4": 1,
                    "ptr_array2": 1,
                    "ptr_loop2": 1,
                    "source_end": 1,
                    "temp_addr": 1,
                    "temp_ptr": 1,
                    "u_ptr7": 1
                },
                "uVar11": {
                    "array2_index_end": 1,
                    "carry": 1,
                    "current_result": 1,
                    "destination_index": 1,
                    "end_addr": 1,
                    "end_address": 2,
                    "end_array1_addr": 1,
                    "end_offset": 2,
                    "loop_counter2": 1,
                    "ptr2": 1,
                    "temp": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 3,
                    "temp_4": 1,
                    "temp_value3": 2,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "u_var11": 1,
                    "val1": 1,
                    "var9": 1
                },
                "uVar4": {
                    "calculation_result": 1,
                    "carry": 12,
                    "carry_over": 1,
                    "current_product_high": 1,
                    "hash_carry": 1,
                    "temp1": 5,
                    "temp_1": 1,
                    "temp_value": 2,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temporary_value": 1,
                    "u_var4": 1,
                    "var6": 1
                },
                "uVar6": {
                    "array2_index": 1,
                    "carry": 1,
                    "current_sum_addr": 1,
                    "loop_counter1": 1,
                    "memset_index": 1,
                    "offset": 1,
                    "output_offset": 1,
                    "ptr1": 1,
                    "ptr_offset": 1,
                    "source_index": 1,
                    "start": 1,
                    "start_addr": 1,
                    "start_address": 3,
                    "start_index": 1,
                    "start_offset": 3,
                    "start_pointer": 1,
                    "temp2": 3,
                    "temp_2": 1,
                    "temp_index": 1,
                    "temp_value1": 1,
                    "temp_var1": 1,
                    "temp_var2": 2,
                    "u_var6": 1,
                    "var7": 1
                },
                "uVar8": {
                    "calculation1": 1,
                    "calculation_result2": 1,
                    "current_product": 2,
                    "hash_sum": 1,
                    "partial_result": 1,
                    "product": 1,
                    "result": 1,
                    "temp1": 3,
                    "temp2": 2,
                    "temp3": 3,
                    "temp_3": 1,
                    "temp_value": 1,
                    "temp_value2": 2,
                    "temp_var3": 2,
                    "u_var8": 1,
                    "var8": 1
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "code": "\nvoid initialize_and_allocate_memory_08009258(undefined4 param1,int array1,int array2)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int allocated_memory;\n  uint carry;\n  uint *ptr3;\n  uint start_address;\n  uint *ptr4;\n  uint temp1;\n  int length2;\n  int min_length;\n  uint temp4;\n  int length1;\n  int size2;\n  uint *ptr6;\n  uint *ptr7;\n  uint *ptr5;\n  uint *ptr8;\n  uint *ptr9;\n  \n  length1 = *(int *)(array1 + 0x10);\n  length2 = *(int *)(array2 + 0x10);\n  min_length = length2;\n  size2 = array1;\n  if (length1 < length2) {\n    min_length = length1;\n    length1 = length2;\n    size2 = array2;\n    array2 = array1;\n  }\n  length2 = length1 + min_length;\n  allocated_memory = *(int *)(size2 + 4);\n  if (*(int *)(size2 + 8) < length2) {\n    allocated_memory = allocated_memory + 1;\n  }\n  allocated_memory = allocate_memory_and_initialize_080090c0(param1,allocated_memory);\n  ptr9 = (uint *)(allocated_memory + 0x14);\n  ptr8 = ptr9 + length2;\n  for (ptr3 = ptr9; ptr3 < ptr8; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  start_address = array2 + 0x14;\n  temp4 = start_address + min_length * 4;\n  ptr3 = (uint *)(size2 + 0x14);\n  if (start_address < temp4) {\n    ptr4 = (uint *)(start_address + ((temp4 - array2) - 0x15 & 0xfffffffc));\n    ptr5 = (uint *)(array2 + 0x10);\n    do {\n      while( true ) {\n        ptr5 = ptr5 + 1;\n        start_address = *ptr5 & 0xffff;\n        if (start_address != 0) break;\n        start_address = *ptr5 >> 0x10;\n        if (start_address == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp1 = *ptr9;\n        carry = 0;\n        ptr1 = ptr3;\n        ptr6 = ptr9;\n        temp4 = temp1;\n        do {\n          ptr7 = ptr6;\n          carry = carry + start_address * *(ushort *)ptr1 + (temp4 >> 0x10);\n          *ptr7 = temp1 & 0xffff | carry * 0x10000;\n          ptr2 = ptr1 + 1;\n          temp4 = ptr7[1];\n          temp1 = start_address * (*ptr1 >> 0x10) + (temp4 & 0xffff) + (carry >> 0x10);\n          carry = temp1 >> 0x10;\n          ptr1 = ptr2;\n          ptr6 = ptr7 + 1;\n        } while (ptr2 < ptr3 + length1);\n        ptr7[1] = temp1;\n        ptr9 = ptr9 + 1;\n        if (ptr4 == ptr5) goto LAB_0800937a;\n      }\n      temp4 = 0;\n      ptr1 = ptr9;\n      ptr6 = ptr3;\n      do {\n        ptr2 = ptr1;\n        ptr7 = ptr6 + 1;\n        temp1 = start_address * (*ptr6 & 0xffff) + (*ptr2 & 0xffff) + temp4;\n        carry = start_address * (*ptr6 >> 0x10) + (*ptr2 >> 0x10) + (temp1 >> 0x10);\n        temp4 = carry >> 0x10;\n        *ptr2 = temp1 & 0xffff | carry * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr6 = ptr7;\n      } while (ptr7 < ptr3 + length1);\n      ptr2[1] = temp4;\n      start_address = *ptr5 >> 0x10;\n      if (start_address != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr9 = ptr9 + 1;\n    } while (ptr4 != ptr5);\n  }\nLAB_0800937a:\n  if (0 < length2) {\n    start_address = ptr8[-1];\n    ptr8 = ptr8 + -1;\n    while ((start_address == 0 && (length2 = length2 + -1, length2 != 0))) {\n      ptr8 = ptr8 + -1;\n      start_address = *ptr8;\n    }\n  }\n  *(int *)(allocated_memory + 0x10) = length2;\n  return;\n}\n\n",
            "current_name": "initialize_and_allocate_memory_08009258",
            "entrypoint": "0x08009258",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009258": "initialize_and_allocate_memory_08009258",
                "iVar10": "min_length",
                "iVar12": "length1",
                "iVar13": "size2",
                "iVar3": "allocated_memory",
                "iVar9": "length2",
                "param_1": "param1",
                "param_2": "array1",
                "param_3": "array2",
                "puVar1": "ptr1",
                "puVar14": "ptr6",
                "puVar15": "ptr7",
                "puVar16": "ptr5",
                "puVar17": "ptr8",
                "puVar18": "ptr9",
                "puVar2": "ptr2",
                "puVar5": "ptr3",
                "puVar7": "ptr4",
                "uVar11": "temp4",
                "uVar4": "carry",
                "uVar6": "start_address",
                "uVar8": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080093a4": {
            "additional_data": {
                "DAT_0800a070": {
                    "checksum_constants": 1,
                    "constant": 1
                },
                "FUN_080093a4": {
                    "calculate_checksum": 1,
                    "calculate_updated_checksum": 1,
                    "process_data": 27,
                    "reverse_and_allocate_memory": 1
                },
                "allocate_memory_and_initialize_080090c0": {
                    "allocate_and_init_memory": 1,
                    "allocate_and_initialize_memory": 1,
                    "allocate_memory": 1,
                    "allocate_memory_and_initialize": 2
                },
                "calculate_checksum_08009120": {
                    "calculate_checksum": 5
                },
                "iVar1": {
                    "index": 7,
                    "index1": 2,
                    "offset": 2,
                    "temp1": 3,
                    "temp_1": 1,
                    "temp_index": 1,
                    "temp_var1": 15
                },
                "iVar2": {
                    "chunk_count": 1,
                    "chunk_size": 1,
                    "count": 1,
                    "index2": 2,
                    "iteration_count": 1,
                    "num_chunks": 2,
                    "num_elements": 1,
                    "num_iterations": 2,
                    "temp2": 3,
                    "temp_2": 1,
                    "temp_var2": 15,
                    "word_count": 1
                },
                "initialize_and_allocate_memory_08009258": {
                    "init_and_allocate_memory": 1,
                    "initialize_and_allocate_memory": 4
                },
                "param_1": {
                    "data": 3,
                    "data_address": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_size": 4,
                    "input": 4,
                    "input1": 1,
                    "input_data": 3,
                    "input_number": 1,
                    "input_param": 5,
                    "input_size": 4,
                    "input_value": 2,
                    "param1": 1
                },
                "param_2": {
                    "data": 3,
                    "data_array": 2,
                    "input_array": 1,
                    "input_buffer": 1,
                    "input_data": 4,
                    "output": 4,
                    "output_array": 4,
                    "output_data": 3,
                    "output_param": 4,
                    "output_value": 1,
                    "param2": 1,
                    "result": 3
                },
                "param_3": {
                    "array_length": 1,
                    "array_size": 2,
                    "checksum": 1,
                    "chunk_size": 1,
                    "data_len": 1,
                    "data_length": 3,
                    "data_size": 4,
                    "flags": 3,
                    "input_flags": 1,
                    "input_length": 1,
                    "input_size": 1,
                    "length": 4,
                    "num_elements": 2,
                    "param3": 1,
                    "size": 5
                },
                "puVar3": {
                    "curr_buffer": 1,
                    "curr_node": 1,
                    "current": 1,
                    "current_array_ptr": 1,
                    "current_chunk": 2,
                    "current_data": 2,
                    "current_element": 1,
                    "current_pointer": 1,
                    "current_ptr": 2,
                    "ptr1": 3,
                    "ptr3": 1,
                    "ptr_1": 1,
                    "temp1": 1,
                    "temp_array1": 1,
                    "temp_pointer1": 2,
                    "temp_ptr": 1,
                    "temp_ptr1": 6,
                    "temp_ptr3": 1,
                    "temp_var3": 2
                },
                "puVar4": {
                    "chunk_pointer": 1,
                    "chunk_ptr": 1,
                    "data_array": 1,
                    "list": 1,
                    "memory_chunk": 1,
                    "new_chunk": 1,
                    "new_node": 1,
                    "new_ptr": 1,
                    "next_ptr": 1,
                    "prev_buffer": 1,
                    "previous_element": 1,
                    "ptr2": 3,
                    "ptr4": 1,
                    "ptr_2": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_array2": 1,
                    "temp_array_ptr": 1,
                    "temp_pointer2": 2,
                    "temp_ptr2": 6,
                    "temp_ptr4": 1,
                    "temp_var4": 2
                }
            },
            "called": [
                "FUN_08009258",
                "FUN_080090c0",
                "FUN_08009120"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nundefined4 * process_data_080093a4(int input_param,undefined4 *input_data,uint size)\n\n{\n  int temp_var1;\n  int temp_var2;\n  undefined4 *temp_ptr1;\n  undefined4 *temp_ptr2;\n  \n  if ((size & 3) != 0) {\n    input_data = (undefined4 *)\n              calculate_checksum(input_param,input_data,*(undefined4 *)(&DAT_0800a070 + ((size & 3) - 1) * 4),\n                           0);\n  }\n  temp_var2 = (int)size >> 2;\n  if (temp_var2 != 0) {\n    temp_ptr2 = *(undefined4 **)(input_param + 0x48);\n    if (temp_ptr2 == (undefined4 *)0x0) {\n      temp_ptr2 = (undefined4 *)allocate_memory_and_initialize(input_param,1);\n      temp_ptr2[4] = 1;\n      temp_ptr2[5] = 0x271;\n      *(undefined4 **)(input_param + 0x48) = temp_ptr2;\n      *temp_ptr2 = 0;\n    }\n    temp_ptr1 = input_data;\n    if (temp_var2 << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    temp_var2 = temp_var2 >> 1;\n    temp_ptr1 = temp_ptr2;\n    if (temp_var2 != 0) {\n      while( true ) {\n        temp_ptr2 = (undefined4 *)*temp_ptr1;\n        if (temp_ptr2 == (undefined4 *)0x0) {\n          temp_ptr2 = (undefined4 *)initialize_and_allocate_memory(input_param,temp_ptr1,temp_ptr1);\n          *temp_ptr1 = temp_ptr2;\n          *temp_ptr2 = 0;\n        }\n        temp_ptr1 = input_data;\n        if (-1 < temp_var2 << 0x1f) break;\nLAB_080093d2:\n        input_data = (undefined4 *)initialize_and_allocate_memory(input_param,temp_ptr1,temp_ptr2);\n        if (temp_ptr1 == (undefined4 *)0x0) break;\n        temp_var1 = *(int *)(input_param + 0x4c);\n        temp_var2 = temp_var2 >> 1;\n        *temp_ptr1 = *(undefined4 *)(temp_var1 + temp_ptr1[1] * 4);\n        *(undefined4 **)(temp_var1 + temp_ptr1[1] * 4) = temp_ptr1;\n        temp_ptr1 = temp_ptr2;\n        if (temp_var2 == 0) {\n          return input_data;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return input_data;\n}\n\n",
            "current_name": "process_data_080093a4",
            "entrypoint": "0x080093a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080093a4": "process_data_080093a4",
                "allocate_memory_and_initialize_080090c0": "allocate_memory_and_initialize",
                "calculate_checksum_08009120": "calculate_checksum",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "initialize_and_allocate_memory_08009258": "initialize_and_allocate_memory",
                "param_1": "input_param",
                "param_2": "input_data",
                "param_3": "size",
                "puVar3": "temp_ptr1",
                "puVar4": "temp_ptr2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009444": {
            "additional_data": {
                "FUN_08009444": {
                    "allocate_and_init_memory": 1,
                    "allocate_and_initialize_memory": 7,
                    "decode_and_store_bits": 1,
                    "decode_and_store_data": 1,
                    "initialize_and_allocate_memory": 1,
                    "initialize_and_copy_data": 1,
                    "initialize_data": 1,
                    "initialize_memory": 13,
                    "process_data": 1,
                    "reverse_and_initialize": 2,
                    "reverse_and_initialize_memory": 1
                },
                "allocate_memory_and_initialize_080090c0": {
                    "allocate_and_initialize": 1,
                    "allocate_and_initialize_memory_helper": 1
                },
                "iVar1": {
                    "iteration_var1": 2,
                    "start_value": 1,
                    "temp1": 8,
                    "temp_1": 1,
                    "temp_var1": 14,
                    "temp_var_1": 5
                },
                "iVar12": {
                    "bits_shifted": 1,
                    "bits_to_shift": 1,
                    "byte_offset": 1,
                    "calculated_value": 1,
                    "computed_value1": 1,
                    "initial_value": 1,
                    "loop_count": 1,
                    "loop_index": 1,
                    "num_32bit_blocks": 1,
                    "num_words": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shift_size": 1,
                    "shifted_count": 1,
                    "shifted_length": 1,
                    "shifted_size": 2,
                    "size": 1,
                    "temp7": 3,
                    "temp_var1": 1,
                    "temp_var12": 2,
                    "temp_var2": 1,
                    "temp_var7": 3,
                    "updated_length": 1
                },
                "iVar13": {
                    "adjusted_size": 1,
                    "buffer_size": 1,
                    "computed_value2": 1,
                    "final_size": 1,
                    "final_value": 1,
                    "i_var13": 1,
                    "new_length": 1,
                    "new_value": 1,
                    "output_length": 1,
                    "result_size": 2,
                    "shifted_size": 1,
                    "temp8": 3,
                    "temp_var13": 2,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var8": 3,
                    "temp_var_13": 1,
                    "temp_var_6": 1,
                    "total_bits": 1,
                    "total_size": 1,
                    "updated_count": 1,
                    "updated_length_2": 1,
                    "updated_size": 2,
                    "updated_value": 1
                },
                "iVar2": {
                    "iteration_var2": 2,
                    "temp2": 8,
                    "temp_2": 1,
                    "temp_var2": 14,
                    "temp_var_2": 5,
                    "value": 1
                },
                "iVar3": {
                    "count": 1,
                    "i_var3": 1,
                    "iteration_var3": 1,
                    "num_iterations": 1,
                    "temp3": 7,
                    "temp_3": 1,
                    "temp_var3": 14,
                    "temp_var_3": 5
                },
                "iVar5": {
                    "array_length": 2,
                    "array_length_2": 1,
                    "array_size": 2,
                    "i_var5": 3,
                    "index_var1": 1,
                    "initial_offset": 1,
                    "initial_value": 1,
                    "input_length": 1,
                    "offset": 6,
                    "start_offset": 1,
                    "temp5": 5,
                    "temp_var5": 6,
                    "value1": 1
                },
                "iVar6": {
                    "double_var": 1,
                    "i_var6": 3,
                    "increment": 1,
                    "index_var2": 1,
                    "temp4": 1,
                    "temp5": 2,
                    "temp6": 5,
                    "temp_4": 1,
                    "temp_offset": 1,
                    "temp_var5": 1,
                    "temp_var6": 9,
                    "temp_var_5": 2,
                    "temp_var_6": 2,
                    "value2": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 1,
                    "arg_1": 1,
                    "argument_1": 1,
                    "base_address": 1,
                    "data": 1,
                    "data_buffer": 1,
                    "data_structure": 1,
                    "destination": 1,
                    "function_parameter1": 1,
                    "function_pointer": 1,
                    "input": 2,
                    "input1": 2,
                    "input_1": 1,
                    "input_address": 1,
                    "input_data": 1,
                    "input_param": 3,
                    "input_parameter": 4,
                    "memory_base_address": 1,
                    "memory_size": 1,
                    "output_pointer": 1,
                    "param_base_address": 1,
                    "param_size": 1,
                    "size": 1
                },
                "param_2": {
                    "arg2": 1,
                    "arg_2": 1,
                    "arguments": 1,
                    "arguments_array": 1,
                    "array": 4,
                    "array_parameters": 2,
                    "function_parameter2": 1,
                    "function_parameters": 1,
                    "header": 1,
                    "input2": 2,
                    "input_2": 1,
                    "input_array": 1,
                    "input_buffer": 1,
                    "input_data": 2,
                    "input_parameters": 1,
                    "input_params": 1,
                    "output_data": 1,
                    "param_array": 5,
                    "parameters": 1,
                    "params": 2
                },
                "param_3": {
                    "arg3": 1,
                    "arg_3": 1,
                    "array_length": 2,
                    "bit_count": 2,
                    "bit_length": 2,
                    "bit_shift": 1,
                    "bit_size": 1,
                    "bits": 1,
                    "function_parameter3": 1,
                    "header_size": 1,
                    "input3": 2,
                    "input_3": 1,
                    "input_length": 1,
                    "input_size": 3,
                    "length": 1,
                    "num_bits": 2,
                    "param_bit_length": 1,
                    "param_count": 1,
                    "size": 6
                },
                "puVar10": {
                    "current_src": 1,
                    "data_ptr4": 1,
                    "input_end": 1,
                    "input_pointer2": 1,
                    "next_source": 1,
                    "pointer4": 1,
                    "pointer_var4": 2,
                    "ptr3": 2,
                    "ptr4": 3,
                    "ptr_var4": 3,
                    "pu_var10": 1,
                    "source_pointer2": 1,
                    "src_iter": 1,
                    "src_pointer": 1,
                    "temp_array_pointer_2": 1,
                    "temp_pointer1": 1,
                    "temp_pointer2": 2,
                    "temp_ptr1": 2,
                    "temp_ptr2": 2,
                    "temp_ptr3": 1,
                    "temp_ptr_1": 1,
                    "temp_ptr_2": 1
                },
                "puVar11": {
                    "data_ptr5": 1,
                    "end_pointer": 1,
                    "input_pointer3": 1,
                    "input_ptr1": 1,
                    "input_ptr_current": 1,
                    "loop_end": 1,
                    "loop_end_pointer": 1,
                    "loop_ptr": 1,
                    "next_output": 1,
                    "next_src": 1,
                    "param_pointer2": 1,
                    "pointer5": 1,
                    "pointer_var5": 2,
                    "ptr4": 2,
                    "ptr5": 3,
                    "ptr_var3": 1,
                    "ptr_var5": 2,
                    "src_end": 1,
                    "src_end_pointer": 1,
                    "temp_array_pointer_3": 1,
                    "temp_pointer2": 1,
                    "temp_ptr2": 2,
                    "temp_ptr3": 1,
                    "temp_ptr_2": 1,
                    "temp_ptr_3": 1
                },
                "puVar12": {
                    "dest_end_pointer": 1
                },
                "puVar7": {
                    "array_pointer": 2,
                    "array_ptr_1": 1,
                    "data_ptr1": 1,
                    "dest": 1,
                    "dest_array": 1,
                    "dest_buffer": 1,
                    "dest_pointer": 1,
                    "dest_pointer1": 1,
                    "dest_ptr": 2,
                    "memory_pointer": 1,
                    "output_array": 1,
                    "output_buffer": 1,
                    "output_data": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "output_ptr1": 1,
                    "pointer1": 1,
                    "pointer_var1": 2,
                    "ptr1": 4,
                    "ptr_var1": 3,
                    "target": 1,
                    "target_pointer": 1,
                    "target_ptr": 1
                },
                "puVar8": {
                    "array_ptr_2": 1,
                    "data_ptr2": 1,
                    "input_pointer": 1,
                    "input_ptr": 2,
                    "param_pointer": 1,
                    "pointer2": 1,
                    "pointer_var2": 2,
                    "ptr1": 1,
                    "ptr2": 4,
                    "ptr_var2": 3,
                    "source": 2,
                    "source_pointer": 2,
                    "source_pointer1": 1,
                    "source_ptr": 1,
                    "src": 1,
                    "src_array": 1,
                    "src_buffer": 1,
                    "src_pointer": 1,
                    "src_ptr": 2,
                    "temp_array_pointer": 1,
                    "temp_ptr1": 1
                },
                "puVar9": {
                    "current_dest": 1,
                    "data_ptr3": 1,
                    "dest_iter": 1,
                    "dest_pointer": 1,
                    "dest_pointer2": 1,
                    "output": 1,
                    "output_pointer2": 1,
                    "output_ptr": 1,
                    "pointer3": 1,
                    "pointer_var3": 2,
                    "ptr2": 1,
                    "ptr3": 3,
                    "ptr_var3": 2,
                    "ptr_var5": 1,
                    "pu_var9": 1,
                    "target_pointer": 1,
                    "temp_array_pointer_4": 1,
                    "temp_pointer": 1,
                    "temp_pointer1": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 1,
                    "temp_ptr2": 1,
                    "temp_ptr3": 1,
                    "temp_ptr_1": 1,
                    "temp_ptr_3": 1
                },
                "uVar14": {
                    "carry": 5,
                    "carry_over": 3,
                    "remainder": 3,
                    "remaining_bits": 1,
                    "rotation_value": 1,
                    "shift_value": 2,
                    "shifted_value": 2,
                    "temp9": 3,
                    "temp_var14": 2,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var9": 3,
                    "temp_var_14": 2,
                    "temp_var_7": 1,
                    "temp_variable": 1
                },
                "uVar4": {
                    "temp3": 1,
                    "temp4": 7,
                    "temp_result": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var4": 14,
                    "temp_var_4": 5,
                    "u_var4": 1
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid initialize_and_allocate_memory_08009444(int input_parameter,undefined4 *param_array,uint size)\n\n{\n  int temp_var1;\n  int temp_var2;\n  int temp_var3;\n  undefined4 temp_var4;\n  int offset;\n  int temp_var6;\n  uint *ptr1;\n  uint *ptr2;\n  uint *ptr_var4;\n  uint *ptr5;\n  int temp_var7;\n  int temp_var8;\n  uint carry;\n  uint *ptr3;\n  \n  offset = param_array[4];\n  temp_var7 = (int)size >> 5;\n  temp_var8 = temp_var7 + offset + 1;\n  temp_var3 = param_array[1];\n  temp_var2 = param_array[2];\n  if ((int)param_array[2] < temp_var8) {\n    do {\n      temp_var6 = temp_var2 * 2;\n      temp_var1 = temp_var2 * -2;\n      temp_var3 = temp_var3 + 1;\n      temp_var2 = temp_var6;\n    } while (temp_var8 != temp_var6 && temp_var8 + temp_var1 < 0 == SBORROW4(temp_var8,temp_var6));\n  }\n  temp_var2 = allocate_and_initialize(input_parameter,temp_var3);\n  ptr1 = (uint *)(temp_var2 + 0x14);\n  if (0 < temp_var7) {\n    ptr5 = ptr1 + temp_var7;\n    ptr2 = ptr1;\n    do {\n      ptr3 = ptr2 + 1;\n      *ptr2 = 0;\n      ptr1 = ptr5;\n      ptr2 = ptr3;\n    } while (ptr3 != ptr5);\n  }\n  temp_var3 = param_array[4];\n  ptr2 = param_array + 5;\n  size = size & 0x1f;\n  if (size == 0) {\n    ptr1 = ptr1 + -1;\n    ptr5 = ptr2;\n    do {\n      ptr3 = ptr5 + 1;\n      ptr1 = ptr1 + 1;\n      *ptr1 = *ptr5;\n      ptr5 = ptr3;\n    } while (ptr3 < ptr2 + temp_var3);\n  }\n  else {\n    carry = 0;\n    ptr5 = ptr2;\n    do {\n      ptr3 = ptr1;\n      *ptr3 = *ptr5 << size | carry;\n      ptr_var4 = ptr5 + 1;\n      carry = *ptr5 >> (0x20 - size & 0xff);\n      ptr1 = ptr3 + 1;\n      ptr5 = ptr_var4;\n    } while (ptr_var4 < ptr2 + temp_var3);\n    ptr3[1] = carry;\n    if (carry != 0) {\n      temp_var8 = temp_var7 + offset + 2;\n    }\n  }\n  offset = *(int *)(input_parameter + 0x4c);\n  temp_var3 = param_array[1];\n  temp_var4 = *(undefined4 *)(offset + temp_var3 * 4);\n  *(int *)(temp_var2 + 0x10) = temp_var8 + -1;\n  *param_array = temp_var4;\n  *(undefined4 **)(offset + temp_var3 * 4) = param_array;\n  return;\n}\n\n",
            "current_name": "initialize_and_allocate_memory_08009444",
            "entrypoint": "0x08009444",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009444": "initialize_and_allocate_memory_08009444",
                "allocate_memory_and_initialize_080090c0": "allocate_and_initialize",
                "iVar1": "temp_var1",
                "iVar12": "temp_var7",
                "iVar13": "temp_var8",
                "iVar2": "temp_var2",
                "iVar3": "temp_var3",
                "iVar5": "offset",
                "iVar6": "temp_var6",
                "param_1": "input_parameter",
                "param_2": "param_array",
                "param_3": "size",
                "puVar10": "ptr_var4",
                "puVar11": "ptr5",
                "puVar7": "ptr1",
                "puVar8": "ptr2",
                "puVar9": "ptr3",
                "uVar14": "carry",
                "uVar4": "temp_var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080094f8": {
            "additional_data": {
                "FUN_080094f8": {
                    "compare_and_return": 1,
                    "compare_arrays": 29,
                    "compare_buffers": 1
                },
                "iVar1": {
                    "array1_diff": 1,
                    "array1_length": 1,
                    "array_comparison_result": 1,
                    "array_diff": 1,
                    "array_difference": 3,
                    "array_size_difference": 4,
                    "buffer_size_difference": 1,
                    "diff_array_lengths": 1,
                    "diff_count": 1,
                    "difference": 13,
                    "length_diff": 1,
                    "length_difference": 1,
                    "result": 1,
                    "size_difference": 1
                },
                "iVar3": {
                    "array1_length": 2,
                    "array2_index": 1,
                    "array2_length": 6,
                    "array2_offset": 8,
                    "array2_size": 1,
                    "array2_starting_index": 1,
                    "buffer2_size": 1,
                    "length": 2,
                    "length2": 1,
                    "length_diff": 1,
                    "offset": 6,
                    "start_index": 1
                },
                "param_1": {
                    "array1": 23,
                    "array1_address": 1,
                    "array1_ptr": 1,
                    "array1_start": 2,
                    "array1_start_address": 2,
                    "array_1": 1,
                    "buffer1": 1
                },
                "param_2": {
                    "array2": 23,
                    "array2_address": 1,
                    "array2_ptr": 1,
                    "array2_start": 2,
                    "array2_start_address": 2,
                    "array_2": 1,
                    "buffer2": 1
                },
                "puVar2": {
                    "array2_elem_ptr": 1,
                    "array2_element": 1,
                    "array2_element_address": 1,
                    "array2_element_ptr": 1,
                    "array2_elements": 1,
                    "array2_ptr": 4,
                    "compare_ptr": 1,
                    "comparing_ptr": 1,
                    "ptr1": 1,
                    "ptr2": 10,
                    "ptr_2": 1,
                    "ptr_array2": 7,
                    "ptr_buffer2": 1
                },
                "puVar4": {
                    "array1_elem_ptr": 1,
                    "array1_element": 1,
                    "array1_element_address": 1,
                    "array1_element_ptr": 1,
                    "array1_elements": 1,
                    "array1_ptr": 5,
                    "original_ptr": 1,
                    "ptr1": 10,
                    "ptr2": 1,
                    "ptr_1": 1,
                    "ptr_array1": 7,
                    "ptr_buffer1": 1
                },
                "return": {
                    "comparison_result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "code": "\nint compare_arrays_080094f8(int array1,int array2)\n\n{\n  int difference;\n  uint *ptr2;\n  int array2_offset;\n  uint *ptr1;\n  \n  array2_offset = *(int *)(array2 + 0x10);\n  difference = *(int *)(array1 + 0x10) - array2_offset;\n  if (difference == 0) {\n    ptr2 = (uint *)(array2 + 0x14 + array2_offset * 4);\n    ptr1 = (uint *)(array1 + 0x14) + array2_offset;\n    do {\n      ptr1 = ptr1 + -1;\n      ptr2 = ptr2 + -1;\n      if (*ptr1 != *ptr2) {\n        if (*ptr2 <= *ptr1) {\n          comparison_result 1;\n        }\n        comparison_result -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptr1);\n  }\n  comparison_result difference;\n}\n\n",
            "current_name": "compare_arrays_080094f8",
            "entrypoint": "0x080094f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "iVar1": "difference",
                "iVar3": "array2_offset",
                "param_1": "array1",
                "param_2": "array2",
                "puVar2": "ptr2",
                "puVar4": "ptr1",
                "return": "comparison_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009530": {
            "additional_data": {
                "FUN_08009530": {
                    "check_and_allocate_memory": 1,
                    "check_memory_and_initialize": 1,
                    "compare_and_allocate_memory": 4,
                    "decompiled_function": 1,
                    "memory_allocation_and_initialization": 1,
                    "perform_memory_operations": 1,
                    "process_data": 1,
                    "reverse_and_allocate_memory": 6,
                    "reverse_and_compare": 1,
                    "reverse_and_compare_arrays": 1,
                    "reverse_and_initialize": 2,
                    "verify_and_allocate_memory": 1,
                    "verify_and_initialize_memory_block": 1
                },
                "iVar1": {
                    "allocated_memory": 12,
                    "allocation": 1,
                    "allocation_result": 2,
                    "memory_allocation": 2,
                    "memory_allocation_result": 2,
                    "memory_block": 2,
                    "memory_index": 1,
                    "memory_ptr": 1,
                    "result": 8
                },
                "iVar12": {
                    "accumulator": 1,
                    "calculation_temp": 1,
                    "carry": 14,
                    "carry_over": 2,
                    "carry_value": 1,
                    "counter": 4,
                    "iter_result": 1,
                    "loop_var": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_val": 1,
                    "temp_var3": 1,
                    "var3": 1
                },
                "param_1": {
                    "arg1": 1,
                    "data": 1,
                    "first_param": 1,
                    "input": 3,
                    "input1": 5,
                    "input_1": 1,
                    "input_param": 4,
                    "input_parameter": 1,
                    "input_value": 2,
                    "input_value1": 1,
                    "param1": 6,
                    "param_1": 2,
                    "some_param": 1,
                    "status": 1
                },
                "param_2": {
                    "array1": 7,
                    "array_1": 2,
                    "input2": 3,
                    "input_arr1": 1,
                    "input_array": 5,
                    "input_array1": 3,
                    "input_array_1": 2,
                    "source": 1,
                    "source_array": 2,
                    "source_block": 1,
                    "source_data": 2,
                    "src_array": 1
                },
                "param_3": {
                    "array2": 7,
                    "array_2": 2,
                    "comparison_array": 2,
                    "dest_array": 1,
                    "destination": 1,
                    "destination_array": 1,
                    "destination_data": 1,
                    "input3": 2,
                    "input_arr2": 1,
                    "input_array2": 3,
                    "input_array_2": 2,
                    "output1": 1,
                    "output_array": 3,
                    "target_array": 1,
                    "target_block": 1,
                    "target_data": 1
                },
                "param_4": {
                    "additional_param": 1,
                    "additional_parameter": 1,
                    "another_param": 1,
                    "arg2": 1,
                    "config_param": 1,
                    "extra_param": 1,
                    "flag": 2,
                    "fourth_param": 1,
                    "input2": 2,
                    "input3": 1,
                    "input4": 2,
                    "input_2": 1,
                    "input_value2": 1,
                    "output_value": 1,
                    "param": 4,
                    "param4": 6,
                    "param_4": 2,
                    "size": 1
                },
                "puVar": {
                    "final_array_pointer": 1
                },
                "puVar10": {
                    "array2_element_copy": 1,
                    "array2_element_pointer": 1,
                    "array2_iterator": 1,
                    "array_2_iter": 1,
                    "comparison_array_ptr_next": 1,
                    "dest_ptr_copy2": 1,
                    "dst_next": 1,
                    "input_arr2_ptr_end": 1,
                    "input_array2_pointer": 1,
                    "input_array_iterator": 1,
                    "iter5": 1,
                    "iterator4": 1,
                    "output1_current": 1,
                    "output_array_start": 1,
                    "ptr10": 2,
                    "ptr3": 1,
                    "ptr5": 1,
                    "ptr6": 2,
                    "ptr7": 1,
                    "ptr_array2": 1,
                    "ptr_iterate2": 1,
                    "ptr_start_2": 1,
                    "start_destination": 1,
                    "target_array_element_ptr": 1,
                    "target_data_start": 1,
                    "temp_dest_ptr": 1,
                    "temp_ptr4": 1,
                    "tmp_ptr3": 1
                },
                "puVar11": {
                    "array2": 1,
                    "array2_pointer": 1,
                    "array2_start": 1,
                    "array_1_end": 1,
                    "comparison_array_start": 1,
                    "dest_ptr_copy2": 1,
                    "end1": 1,
                    "end_pointer1": 1,
                    "end_ptr1": 1,
                    "end_source": 1,
                    "input_arr1_ptr_end": 1,
                    "input_array_end": 2,
                    "input_array_ptr_end": 1,
                    "iter_ptr1": 1,
                    "output1_end": 1,
                    "ptr11": 2,
                    "ptr1_end": 1,
                    "ptr4": 1,
                    "ptr6": 1,
                    "ptr7": 1,
                    "ptr8": 1,
                    "ptr_array1_5": 1,
                    "ptr_array1_5_end": 1,
                    "ptr_array2": 1,
                    "ptr_end_1": 1,
                    "source_array_last_element_ptr": 1,
                    "source_data_end": 1,
                    "source_end_ptr": 1,
                    "src_end": 1
                },
                "puVar13": {
                    "array1_copy_incremented": 1,
                    "array2_element_pointer2": 1,
                    "array_2_start": 1,
                    "comparison_array_ptr_start": 1,
                    "dest_array_copy": 1,
                    "dest_end": 1,
                    "dest_end_ptr": 1,
                    "end2": 1,
                    "end_pointer2": 1,
                    "end_ptr2": 1,
                    "input2_end": 1,
                    "input_arr2_start": 1,
                    "iter_ptr2": 1,
                    "output_array_end": 1,
                    "output_array_end_copy": 1,
                    "ptr13": 1,
                    "ptr2_start": 1,
                    "ptr3": 1,
                    "ptr5": 1,
                    "ptr7": 1,
                    "ptr8": 1,
                    "ptr9": 1,
                    "ptr_array2_5": 2,
                    "ptr_end_2": 1,
                    "source_array_last_element": 1,
                    "start_source_offset": 1,
                    "target_data_end": 1
                },
                "puVar14": {
                    "ptr6": 1,
                    "temp_ptr": 1
                },
                "puVar2": {
                    "array1_element": 1,
                    "array1_last_element": 1,
                    "array1_pointer": 1,
                    "array2_element": 1,
                    "array_1_ptr": 1,
                    "current_source": 1,
                    "input2_index": 1,
                    "input_array_index": 1,
                    "input_array_ptr": 1,
                    "input_ptr": 1,
                    "output_arr": 1,
                    "output_array_end": 1,
                    "ptr1": 5,
                    "ptr2": 3,
                    "ptr_array1": 2,
                    "ptr_array2_4": 2,
                    "ptr_array_1": 1,
                    "source_array_element_ptr": 1,
                    "source_data_offset": 1,
                    "source_ptr": 2,
                    "src_ptr": 1,
                    "temp_ptr1": 1
                },
                "puVar6": {
                    "allocated_array_element": 1,
                    "allocated_memory_ptr": 1,
                    "array1_element_copy": 1,
                    "array1_pointer": 1,
                    "array2_last_element": 1,
                    "array_2_ptr": 1,
                    "comparison_array_index": 1,
                    "current_destination": 1,
                    "dest_ptr": 1,
                    "dest_ptr_copy2": 1,
                    "iter1": 1,
                    "output2_index": 1,
                    "output_arr_ptr": 1,
                    "output_array_copy": 1,
                    "output_ptr": 1,
                    "ptr1": 2,
                    "ptr2": 4,
                    "ptr3": 1,
                    "ptr6": 2,
                    "ptr_1": 1,
                    "ptr_allocated_memory": 1,
                    "ptr_array_2": 1,
                    "result_data": 1,
                    "source_element_ptr": 1,
                    "temp_pointer": 1,
                    "temp_ptr2": 1
                },
                "puVar7": {
                    "array1_iterator": 1,
                    "array2_element": 1,
                    "array_1_iter": 1,
                    "destination_ptr": 1,
                    "input2_current": 1,
                    "input_arr1_ptr": 1,
                    "input_array_copy": 1,
                    "input_array_iterator": 1,
                    "input_array_ptr_next": 1,
                    "input_iterator": 1,
                    "iter2": 1,
                    "iterating_pointer1": 1,
                    "iterator1": 1,
                    "next_source": 1,
                    "ptr1_iterator": 1,
                    "ptr2": 2,
                    "ptr3": 3,
                    "ptr4": 1,
                    "ptr7": 2,
                    "ptr_array1_5": 1,
                    "ptr_array_1": 1,
                    "ptr_current_1": 1,
                    "source_array_ptr": 1,
                    "source_data_current": 1,
                    "src_ptr": 1,
                    "src_ptr_copy": 1,
                    "temp_array2_pointer": 1
                },
                "puVar8": {
                    "allocated_array_element_ptr": 1,
                    "array1_element_incremented": 1,
                    "carry_ptr": 1,
                    "comparision_array_iterator": 1,
                    "dest_element_ptr": 1,
                    "input2_remaining": 1,
                    "input_array_ptr_temp": 1,
                    "iter3": 1,
                    "iterating_pointer2": 1,
                    "iterator2": 1,
                    "next_destination": 1,
                    "output_array_iterator": 1,
                    "output_iterator": 1,
                    "ptr2_iterator": 1,
                    "ptr3": 1,
                    "ptr4": 2,
                    "ptr5": 1,
                    "ptr8": 2,
                    "ptr_2": 1,
                    "ptr_current_2": 1,
                    "ptr_iterate1": 1,
                    "result_data_current": 1,
                    "src_next": 1,
                    "src_ptr_copy2": 1,
                    "temp_array1_pointer": 1,
                    "temp_ptr": 1,
                    "temp_ptr_1": 1,
                    "tmp_ptr1": 1
                },
                "puVar9": {
                    "array1": 1,
                    "array1_element_pointer": 1,
                    "array1_start": 1,
                    "array_1_start": 1,
                    "comparison_array_ptr": 1,
                    "dest_ptr": 1,
                    "input_arr2_ptr": 1,
                    "input_array1_pointer": 1,
                    "input_array_copy_end": 1,
                    "input_array_start": 2,
                    "iter4": 1,
                    "iterator3": 1,
                    "output1_index": 1,
                    "ptr4": 1,
                    "ptr5": 2,
                    "ptr6": 1,
                    "ptr9": 2,
                    "ptr_array1": 1,
                    "ptr_array2": 1,
                    "ptr_array_2": 1,
                    "ptr_start_1": 1,
                    "source_array_element": 1,
                    "source_data_start": 1,
                    "source_start": 1,
                    "start_source": 1,
                    "temp_ptr3": 1,
                    "temp_source_ptr": 1,
                    "tmp_ptr2": 1
                },
                "uVar14": {
                    "array1_length": 1,
                    "array1_size": 2,
                    "array2_4": 1,
                    "array2_size": 2,
                    "array_1_size": 1,
                    "array_size_2": 1,
                    "comparison_array_length": 2,
                    "count": 1,
                    "count_var": 1,
                    "dest_length": 1,
                    "input_array_length": 1,
                    "length2": 1,
                    "output_length": 1,
                    "output_size": 1,
                    "ptr_array1_size": 1,
                    "result_size": 2,
                    "size": 1,
                    "size2": 1,
                    "source_length": 1,
                    "src_elements": 1,
                    "target_array_size": 1,
                    "target_data_size": 1,
                    "temp4": 1,
                    "uvar_14": 1,
                    "value3": 2,
                    "var4": 1
                },
                "uVar3": {
                    "array1_4": 1,
                    "array1_element": 1,
                    "array1_size": 1,
                    "array2_length": 1,
                    "array2_size": 2,
                    "array_size_1": 1,
                    "current_source_offset": 1,
                    "input2_length": 1,
                    "input_array_length": 2,
                    "input_size": 1,
                    "length1": 1,
                    "output_array_length": 1,
                    "size1": 1,
                    "size_input_arr2": 1,
                    "source_data_size": 1,
                    "source_length": 1,
                    "source_size": 1,
                    "src_ptr_elements": 1,
                    "target_array_element": 1,
                    "temp1": 1,
                    "temp_1": 1,
                    "temp_var1": 2,
                    "tmp1": 1,
                    "uvar_3": 1,
                    "val1": 1,
                    "value1": 2,
                    "var3": 1
                },
                "uVar4": {
                    "calculated_value": 1,
                    "element_sum": 1,
                    "partial_sum": 1,
                    "subtraction_result": 1,
                    "sum": 2,
                    "temp": 5,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_2": 1,
                    "temp_result": 1,
                    "temp_sum": 1,
                    "temp_value": 4,
                    "temp_var": 1,
                    "temp_var2": 2,
                    "temp_variable": 1,
                    "tmp2": 1,
                    "uvar_4": 1,
                    "val2": 1,
                    "value2": 2,
                    "var1": 1,
                    "var4": 1
                },
                "uVar5": {
                    "allocate_flag": 1,
                    "compare_result": 1,
                    "comparison_result": 3,
                    "flag": 8,
                    "is_allocated_memory_positive": 1,
                    "is_different": 1,
                    "is_equal": 7,
                    "is_first_array_larger": 1,
                    "is_match": 2,
                    "is_smaller": 2,
                    "use_source": 1,
                    "uvar_5": 1,
                    "var2": 1,
                    "var5": 1
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid reverse_and_allocate_memory_08009530(undefined4 param1,uint *array1,uint *array2,undefined4 param4)\n\n{\n  int allocated_memory;\n  uint *ptr1;\n  uint value1;\n  uint temp;\n  undefined4 flag;\n  uint *ptr2;\n  uint *ptr3;\n  uint *input_array_start;\n  uint *ptr6;\n  uint *input_array_end;\n  int carry;\n  uint *ptr_array2_5;\n  uint result_size;\n  uint *ptr8;\n  \n  ptr1 = (uint *)array2[4];\n  input_array_end = array1 + 5;\n  ptr_array2_5 = array2 + 5;\n  ptr3 = input_array_end;\n  input_array_start = array1;\n  if ((uint *)array1[4] == ptr1) {\n    ptr2 = input_array_end + (int)ptr1;\n    ptr1 = ptr_array2_5 + (int)ptr1;\n    while( true ) {\n      ptr2 = ptr2 + -1;\n      ptr1 = ptr1 + -1;\n      if (*ptr2 != *ptr1) break;\n      if (ptr2 <= input_array_end) {\n        carry = allocate_memory_and_initialize_080090c0(param1,0,ptr2,ptr1,param4);\n        *(undefined4 *)(carry + 0x10) = 1;\n        *(undefined4 *)(carry + 0x14) = 0;\n        return;\n      }\n    }\n    flag = 0;\n    if (*ptr1 <= *ptr2) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)array1[4] - (int)ptr1) {\n    flag = 0;\n    ptr2 = array2;\n    goto LAB_08009578;\n  }\n  flag = 1;\n  ptr2 = input_array_end;\n  ptr1 = array1;\n  ptr3 = ptr_array2_5;\n  input_array_start = array2;\n  array2 = array1;\n  ptr_array2_5 = input_array_end;\nLAB_08009578:\n  allocated_memory = allocate_memory_and_initialize_080090c0(param1,input_array_start[1],ptr2,ptr1,param4);\n  carry = 0;\n  result_size = input_array_start[4];\n  value1 = array2[4];\n  *(undefined4 *)(allocated_memory + 0xc) = flag;\n  input_array_end = ptr3 + result_size;\n  ptr1 = (uint *)(allocated_memory + 0x14);\n  input_array_start = ptr_array2_5;\n  do {\n    ptr8 = ptr3 + 1;\n    ptr6 = input_array_start + 1;\n    temp = ((*ptr3 & 0xffff) + carry) - (*input_array_start & 0xffff);\n    carry = ((*ptr3 >> 0x10) - (*input_array_start >> 0x10)) + ((int)temp >> 0x10);\n    temp = temp & 0xffff | carry * 0x10000;\n    ptr2 = ptr1 + 1;\n    *ptr1 = temp;\n    carry = carry >> 0x10;\n    ptr1 = ptr2;\n    ptr3 = ptr8;\n    input_array_start = ptr6;\n  } while (ptr6 < ptr_array2_5 + value1);\n  ptr1 = ptr8;\n  ptr3 = ptr2;\n  if (ptr8 < input_array_end) {\n    do {\n      input_array_start = ptr1 + 1;\n      value1 = (*ptr1 & 0xffff) + carry;\n      carry = ((int)value1 >> 0x10) + (*ptr1 >> 0x10);\n      temp = value1 & 0xffff | carry * 0x10000;\n      *ptr3 = temp;\n      carry = carry >> 0x10;\n      ptr1 = input_array_start;\n      ptr3 = ptr3 + 1;\n    } while (input_array_start < input_array_end);\n    ptr2 = (uint *)((int)ptr2 + ((int)input_array_end + ~(uint)ptr8 & 0xfffffffc) + 4);\n  }\n  ptr2 = ptr2 + -1;\n  while (temp == 0) {\n    ptr2 = ptr2 + -1;\n    result_size = result_size - 1;\n    temp = *ptr2;\n  }\n  *(uint *)(allocated_memory + 0x10) = result_size;\n  return;\n}\n\n",
            "current_name": "reverse_and_allocate_memory_08009530",
            "entrypoint": "0x08009530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009530": "reverse_and_allocate_memory_08009530",
                "iVar1": "allocated_memory",
                "iVar12": "carry",
                "param_1": "param1",
                "param_2": "array1",
                "param_3": "array2",
                "param_4": "param4",
                "puVar": "final_array_pointer",
                "puVar10": "ptr6",
                "puVar11": "input_array_end",
                "puVar13": "ptr_array2_5",
                "puVar2": "ptr1",
                "puVar6": "ptr2",
                "puVar7": "ptr3",
                "puVar8": "ptr8",
                "puVar9": "input_array_start",
                "uVar14": "result_size",
                "uVar3": "value1",
                "uVar4": "temp",
                "uVar5": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009630": {
            "additional_data": {
                "FUN_08009630": {
                    "allocate_and_initialize_memory": 2,
                    "calculate_memory": 1,
                    "calculate_memory_allocation": 1,
                    "decode_and_analyze_data": 1,
                    "decode_and_count": 1,
                    "decode_and_count_bits": 4,
                    "decode_and_count_leading_zeros": 3,
                    "decode_and_update": 1,
                    "decode_bits": 1,
                    "decode_data": 1,
                    "decode_param": 1,
                    "extract_and_count_leading_zeros": 1,
                    "extract_bits": 2,
                    "improved_extract_bits": 1,
                    "initialize_and_allocate_memory": 1,
                    "initialize_memory": 1,
                    "optimize_memory": 1,
                    "process_data": 2
                },
                "iVar1": {
                    "allocated_memory": 6,
                    "allocated_memory_ptr": 1,
                    "decoded_data": 1,
                    "mem_address": 1,
                    "memory": 5,
                    "memory_address": 2,
                    "memory_allocation": 1,
                    "memory_block": 1,
                    "memory_pointer": 1,
                    "output": 1,
                    "ptr": 1,
                    "result": 8,
                    "result_ptr": 2
                },
                "iVar3": {
                    "count": 6,
                    "count1": 3,
                    "count_1": 1,
                    "count_result": 1,
                    "counter1": 1,
                    "initialization_value1": 1,
                    "leading_zeros": 3,
                    "leading_zeros1": 2,
                    "leading_zeros2": 1,
                    "leading_zeros_count": 6,
                    "leading_zeros_count_temp": 1,
                    "leading_zeros_result": 1,
                    "option1_flag": 1,
                    "temp_var1": 3
                },
                "iVar4": {
                    "case_var": 1,
                    "count2": 3,
                    "count_2": 1,
                    "counter2": 1,
                    "flag": 7,
                    "initial_value": 1,
                    "initialization_value2": 1,
                    "option2_flag": 1,
                    "param_type": 1,
                    "result_value": 1,
                    "status": 2,
                    "temp_var2": 3,
                    "type": 2,
                    "value": 4,
                    "variable": 1,
                    "variable1": 1
                },
                "local_1c": {
                    "bit2": 1,
                    "bit_mask_2": 1,
                    "bit_value": 1,
                    "combined_value": 3,
                    "local_2": 1,
                    "local_data2": 1,
                    "local_input2": 1,
                    "mask": 2,
                    "mask_combined": 1,
                    "mask_var": 1,
                    "masked_count": 1,
                    "masked_value": 1,
                    "modified_param4": 1,
                    "param_copy": 1,
                    "processed_input": 1,
                    "temp2": 2,
                    "temp_input2": 1,
                    "temp_num2": 1,
                    "temp_val2": 1,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_value_2": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "updated_flag": 1
                },
                "local_20": {
                    "bit1": 1,
                    "bit_mask_1": 1,
                    "flag1_copy": 1,
                    "input_tmp": 1,
                    "input_value_copy": 1,
                    "local_1": 1,
                    "local_data1": 1,
                    "local_input1": 1,
                    "mask_temp": 1,
                    "modified_param3": 1,
                    "param3_copy": 1,
                    "shifted_input_size": 1,
                    "size_var": 1,
                    "temp1": 2,
                    "temp_count": 1,
                    "temp_input": 3,
                    "temp_input1": 1,
                    "temp_num1": 1,
                    "temp_val1": 1,
                    "temp_value": 2,
                    "temp_value1": 1,
                    "temp_value_1": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var3": 1
                },
                "param_1": {
                    "arg1": 4,
                    "data_1": 1,
                    "data_len": 1,
                    "data_size": 1,
                    "first_param": 1,
                    "input1": 7,
                    "input_1": 1,
                    "input_buffer": 1,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_ptr": 2,
                    "mem_alloc_size": 1,
                    "param1": 4,
                    "ptr1": 1,
                    "size": 2,
                    "value1": 1
                },
                "param_2": {
                    "arg2": 4,
                    "count": 1,
                    "data_2": 1,
                    "input2": 7,
                    "input_2": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "mask1": 1,
                    "output_buffer": 1,
                    "output_param": 1,
                    "output_ptr": 2,
                    "param2": 6,
                    "ptr2": 1,
                    "second_param": 1,
                    "size2": 1,
                    "value2": 1
                },
                "param_3": {
                    "bit1": 1,
                    "bit_mask": 2,
                    "bit_position1": 1,
                    "bit_position_1": 1,
                    "bit_shift_count": 1,
                    "count1": 1,
                    "flag1": 1,
                    "input1": 5,
                    "input_1": 1,
                    "input_data1": 1,
                    "input_param1": 1,
                    "input_param_3": 1,
                    "input_size": 1,
                    "input_val1": 1,
                    "input_value": 2,
                    "input_value1": 1,
                    "mask2": 1,
                    "num1": 1,
                    "param3": 2,
                    "shift_param": 1,
                    "size_param": 1,
                    "value1": 2,
                    "value_1": 1
                },
                "param_4": {
                    "bit2": 1,
                    "bit_position2": 1,
                    "bit_position_2": 1,
                    "bit_shift": 1,
                    "count2": 1,
                    "flag": 2,
                    "flag2": 1,
                    "flag_param": 1,
                    "input2": 5,
                    "input_2": 1,
                    "input_data2": 1,
                    "input_param2": 1,
                    "input_param_4": 1,
                    "input_val2": 1,
                    "input_value2": 1,
                    "mask_param": 1,
                    "num2": 1,
                    "param4": 3,
                    "shift": 1,
                    "shift_value": 1,
                    "value": 1,
                    "value2": 2,
                    "value_2": 1
                },
                "param_5": {
                    "leading_zeros": 4,
                    "leading_zeros1": 1,
                    "leading_zeros_count": 1,
                    "leading_zeros_param": 1,
                    "leading_zeros_ptr": 1,
                    "output1": 10,
                    "output_param1": 3,
                    "output_param_1": 1,
                    "output_val1": 1,
                    "output_value1": 1,
                    "output_var1": 1,
                    "result1": 4,
                    "result_1": 2
                },
                "param_6": {
                    "bit_count": 1,
                    "bit_shift": 1,
                    "counted_zeros_ptr": 1,
                    "leading_zeros2": 1,
                    "output2": 10,
                    "output_param2": 3,
                    "output_param_2": 1,
                    "output_val2": 1,
                    "output_value2": 1,
                    "output_var2": 1,
                    "result": 1,
                    "result2": 4,
                    "result_2": 2,
                    "result_param": 1,
                    "trailing_zeros": 2
                },
                "uVar2": {
                    "bit_count": 2,
                    "bit_offset": 1,
                    "count1": 2,
                    "leading_zero_count": 1,
                    "leading_zeros": 19,
                    "leading_zeros1": 1,
                    "leading_zeros_count": 5
                },
                "uVar5": {
                    "masked_value": 2,
                    "shifted_bits": 2,
                    "shifted_local": 1,
                    "shifted_local1c": 2,
                    "shifted_local_1c": 2,
                    "shifted_mask": 1,
                    "shifted_param": 1,
                    "shifted_val": 1,
                    "shifted_value": 17,
                    "shifted_var": 1,
                    "temporary_value": 1
                },
                "uVar6": {
                    "bit_ratio": 1,
                    "count2": 1,
                    "flag": 6,
                    "flag2": 1,
                    "flag_bit": 1,
                    "is_shifted": 1,
                    "shift": 2,
                    "shift_amount": 4,
                    "shift_count": 2,
                    "shifted_amount": 1,
                    "shifted_count": 1,
                    "shifted_flag": 1,
                    "shifted_input": 1,
                    "shifted_input_val2": 1,
                    "shifted_num2": 1,
                    "shifted_param": 1,
                    "shifted_param_4": 1,
                    "shifted_value": 2,
                    "temp": 2
                },
                "uVar7": {
                    "count": 1,
                    "count_result": 1,
                    "leading_zero_count_result": 1,
                    "leading_zeros": 2,
                    "leading_zeros2": 3,
                    "leading_zeros3": 1,
                    "leading_zeros64": 3,
                    "leading_zeros_count": 3,
                    "leading_zeros_count_extended": 1,
                    "leading_zeros_result": 13,
                    "temporary_value": 1
                }
            },
            "called": [
                "FUN_080091a4",
                "FUN_080090c0",
                "FUN_080091e4"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nint decode_and_count_bits_08009630(undefined4 input1,undefined4 input2,uint input1,uint input2,int *output1,\n                int *output2)\n\n{\n  int result;\n  uint leading_zeros;\n  int count;\n  int flag;\n  uint shifted_value;\n  uint flag;\n  undefined8 leading_zeros_result;\n  uint temp_input;\n  uint combined_value;\n  \n  result = allocate_memory_and_initialize_080090c0(input1,1);\n  flag = (input2 << 1) >> 0x15;\n  combined_value = input2 & 0xfffff;\n  if (flag != 0) {\n    combined_value = combined_value | 0x100000;\n  }\n  if (input1 == 0) {\n    count = count_leading_zeros_080091e4(&combined_value);\n    flag = 1;\n    leading_zeros = count + 0x20;\n    *(undefined4 *)(result + 0x10) = 1;\n    *(uint *)(result + 0x14) = combined_value;\n  }\n  else {\n    temp_input = input1;\n    leading_zeros = count_leading_zeros_080091e4(&temp_input);\n    if (leading_zeros == 0) {\n      *(uint *)(result + 0x14) = temp_input;\n    }\n    else {\n      shifted_value = combined_value << (0x20 - leading_zeros & 0xff);\n      combined_value = combined_value >> (leading_zeros & 0xff);\n      *(uint *)(result + 0x14) = shifted_value | temp_input;\n    }\n    if (combined_value == 0) {\n      flag = 1;\n    }\n    else {\n      flag = 2;\n    }\n    *(uint *)(result + 0x18) = combined_value;\n    *(int *)(result + 0x10) = flag;\n  }\n  if (flag == 0) {\n    *output1 = leading_zeros - 0x432;\n    leading_zeros_result = count_leading_zeros_080091a4(*(undefined4 *)(result + flag * 4 + 0x10));\n    *output2 = (int)((ulonglong)leading_zeros_result >> 0x20) * 0x20 - (int)leading_zeros_result;\n    return result;\n  }\n  *output1 = (flag - 0x433) + leading_zeros;\n  *output2 = 0x35 - leading_zeros;\n  return result;\n}\n\n",
            "current_name": "decode_and_count_bits_08009630",
            "entrypoint": "0x08009630",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009630": "decode_and_count_bits_08009630",
                "iVar1": "result",
                "iVar3": "count",
                "iVar4": "flag",
                "local_1c": "combined_value",
                "local_20": "temp_input",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input1",
                "param_4": "input2",
                "param_5": "output1",
                "param_6": "output2",
                "uVar2": "leading_zeros",
                "uVar5": "shifted_value",
                "uVar6": "flag",
                "uVar7": "leading_zeros_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080096e0": {
            "additional_data": {
                "FUN_080096e0": {
                    "calculate_and_adjust_value": 1,
                    "calculate_converted_float": 1,
                    "calculate_converted_result": 1,
                    "calculate_float": 1,
                    "calculate_float_bits": 2,
                    "calculate_float_conversion": 1,
                    "calculate_float_exponent": 1,
                    "calculate_float_value": 2,
                    "calculate_new_float": 1,
                    "calculate_normalized_float": 4,
                    "calculate_normalized_value": 1,
                    "calculate_result": 7,
                    "calculate_updated_result": 1,
                    "calculate_updated_value": 2,
                    "convert_to_float": 1,
                    "extract_float": 1,
                    "improved_calculate": 1,
                    "improved_code": 1
                },
                "calculate_improved_result_080004c8": {
                    "calculate_improved_result": 4,
                    "calculate_new_result_function": 1,
                    "calculate_result": 1,
                    "calculate_result_080004c8": 1
                },
                "iVar1": {
                    "constant_offset": 2,
                    "count": 1,
                    "counter": 10,
                    "iteration_count": 1,
                    "loop_counter": 1,
                    "offset": 10,
                    "result_shift": 1,
                    "some_var": 1,
                    "sum": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "var1": 1
                },
                "param_1": {
                    "exponent": 2,
                    "float_bits_param1": 1,
                    "float_value": 1,
                    "input1": 7,
                    "input_1": 3,
                    "input_float": 1,
                    "input_float_lo": 1,
                    "input_int1": 1,
                    "input_mantissa": 1,
                    "input_param1": 1,
                    "input_param_1": 2,
                    "input_uint1": 1,
                    "input_value": 1,
                    "input_value1": 1,
                    "input_value_1": 2,
                    "integer_part": 1,
                    "mantissa_low": 1,
                    "num1": 1,
                    "number1": 1,
                    "value1": 1
                },
                "param_2": {
                    "flags": 1,
                    "float_bits_param2": 1,
                    "fractional_part": 1,
                    "input2": 7,
                    "input_2": 3,
                    "input_exponent": 1,
                    "input_float_bits": 1,
                    "input_float_hi": 1,
                    "input_int2": 1,
                    "input_param2": 1,
                    "input_param_2": 2,
                    "input_uint2": 1,
                    "input_value2": 1,
                    "input_value_2": 2,
                    "int_value": 1,
                    "mantissa": 1,
                    "mantissa_high": 1,
                    "num2": 1,
                    "number2": 1,
                    "significand": 1,
                    "value2": 1
                },
                "param_3": {
                    "exponent": 1,
                    "exponent_ptr": 1,
                    "normalized_exponent": 1,
                    "output": 9,
                    "output_exponent": 1,
                    "output_int": 2,
                    "output_int_ptr": 1,
                    "output_integer": 1,
                    "output_param": 4,
                    "output_value": 3,
                    "result": 7
                },
                "param_4": {
                    "additional_param_1": 1,
                    "additional_parameter": 1,
                    "calculation_constant": 1,
                    "config": 1,
                    "config_param": 1,
                    "constant": 13,
                    "constant_param": 2,
                    "constant_value": 1,
                    "extra_param": 1,
                    "input_uint3": 1,
                    "param4": 2,
                    "param_4": 4,
                    "some_value": 1,
                    "unused_param": 1
                },
                "uVar2": {
                    "abs_float_bits": 1,
                    "abs_input_2": 1,
                    "abs_mantissa": 1,
                    "abs_mantissa_high": 1,
                    "abs_num2": 1,
                    "abs_number2": 1,
                    "abs_value": 1,
                    "abs_value2": 1,
                    "absolute_float_bits": 1,
                    "absolute_fractional_part": 1,
                    "flags_cleared": 1,
                    "input_int2_masked": 1,
                    "masked_input2": 1,
                    "modified_exponent": 1,
                    "modified_input2": 1,
                    "modified_input_param_2": 1,
                    "modified_input_uint2": 1,
                    "modified_input_value2": 1,
                    "modified_input_value_2": 1,
                    "normalized_input2": 1,
                    "normalized_value": 1,
                    "positive_input2": 3,
                    "positive_input_param_2": 1,
                    "positive_significand": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "unsigned_hi": 1,
                    "unsigned_input_2": 1,
                    "var2": 1
                },
                "uVar3": {
                    "combined_float_bits": 2,
                    "combined_input": 6,
                    "combined_input_values": 1,
                    "combined_inputs": 1,
                    "combined_num": 1,
                    "combined_numbers": 1,
                    "combined_params": 1,
                    "combined_result": 1,
                    "combined_value": 5,
                    "combined_values": 1,
                    "concat_mantissa": 1,
                    "concatenated_input": 1,
                    "concatenated_params": 1,
                    "converted_value": 1,
                    "new_float": 1,
                    "result": 6
                }
            },
            "called": [
                "FUN_080004c8"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined8 calculate_converted_result_080096e0(uint input1,uint input2,int *output,undefined4 constant)\n\n{\n  int offset;\n  uint positive_input2;\n  undefined8 combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  offset = 0;\n  positive_input2 = input2 & 0x7fffffff;\n  *output = 0;\n  if ((positive_input2 < 0x7ff00000) && ((positive_input2 | input1) != 0)) {\n    if (positive_input2 < 0x100000) {\n      combined_input = calculate_improved_result(input1,input2,0,0x43500000,constant);\n      offset = -0x36;\n      positive_input2 = (uint)((ulonglong)combined_input >> 0x20) & 0x7fffffff;\n    }\n    input1 = (uint)combined_input;\n    input2 = (uint)((ulonglong)combined_input >> 0x20) & 0x800fffff | 0x3fe00000;\n    *output = ((int)positive_input2 >> 0x14) + -0x3fe + offset;\n  }\n  return CONCAT44(input2,input1);\n}\n\n",
            "current_name": "calculate_converted_result_080096e0",
            "entrypoint": "0x080096e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080096e0": "calculate_converted_result_080096e0",
                "calculate_improved_result_080004c8": "calculate_improved_result",
                "iVar1": "offset",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "param_4": "constant",
                "uVar2": "positive_input2",
                "uVar3": "combined_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009744": {
            "additional_data": {
                "FUN_08009744": {
                    "allocate_and_assign_memory": 11,
                    "allocate_and_check_memory": 3,
                    "allocate_and_copy_memory": 1,
                    "allocate_and_return_memory": 2,
                    "allocate_and_store_memory": 6,
                    "allocate_memory_and_assign_result": 1,
                    "allocate_memory_and_assign_to_param": 2,
                    "allocate_memory_and_return_pointer": 2,
                    "allocate_memory_and_return_result": 2,
                    "initialize_memory": 1
                },
                "iVar1": {
                    "allocated_memory": 1,
                    "allocation_result": 26,
                    "allocation_status": 1,
                    "memory_result": 1
                },
                "param_1": {
                    "memory_address": 1,
                    "memory_pointer": 1,
                    "output": 1,
                    "output_buffer": 1,
                    "output_param": 1,
                    "output_pointer": 4,
                    "output_ptr": 3,
                    "result": 4,
                    "result_pointer": 8,
                    "result_ptr": 7
                },
                "param_2": {
                    "allocation_size": 1,
                    "input_value": 1,
                    "memory_size": 11,
                    "size": 18
                }
            },
            "called": [
                "FUN_08005728"
            ],
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "code": "\nvoid allocate_memory_and_assign_to_param_08009744(int *result_pointer,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_20000c10 = 0;\n  allocation_result = allocate_memory_08005728(size);\n  if ((allocation_result == -1) && (DAT_20000c10 != 0)) {\n    *result_pointer = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "allocate_memory_and_assign_to_param_08009744",
            "entrypoint": "0x08009744",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009744": "allocate_memory_and_assign_to_param_08009744",
                "iVar1": "allocation_result",
                "param_1": "result_pointer",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009768": {
            "additional_data": {
                "FUN_08009768": {
                    "copy_and_clean_string": 1,
                    "copy_and_clear_string": 1,
                    "copy_and_null_terminate": 3,
                    "copy_and_zero_terminate": 1,
                    "copy_non_zero_chars": 1,
                    "copy_safe_string": 1,
                    "copy_string": 16,
                    "copy_string_till_null_terminator": 1,
                    "copy_string_with_filter": 1,
                    "copy_string_with_length_check": 1,
                    "copy_string_with_null_terminator": 1,
                    "copy_string_with_overflow_check": 1,
                    "copy_string_with_size_check": 1,
                    "copy_strings_with_bounds_check": 1
                },
                "cVar1": {
                    "ch": 2,
                    "char_value": 2,
                    "character": 2,
                    "current": 1,
                    "current_byte": 6,
                    "current_char": 15
                },
                "param_1": {
                    "dest": 12,
                    "dest_buffer": 1,
                    "dest_pointer": 1,
                    "dest_string": 1,
                    "destination": 10,
                    "dst": 2,
                    "source": 4
                },
                "param_2": {
                    "destination": 4,
                    "source": 10,
                    "src": 14,
                    "src_buffer": 1,
                    "src_pointer": 1,
                    "src_string": 1
                },
                "param_3": {
                    "buffer_size": 1,
                    "length": 14,
                    "max_length": 1,
                    "num_chars": 1,
                    "size": 13,
                    "str_length": 1
                },
                "puVar2": {
                    "current_src": 1,
                    "dest_ptr": 3,
                    "source_pointer": 1,
                    "source_ptr": 3,
                    "src": 1,
                    "src_pointer_iter": 1,
                    "src_ptr": 20
                },
                "puVar3": {
                    "current_dest": 1,
                    "dest": 1,
                    "dest_pointer_iter": 1,
                    "dest_ptr": 15,
                    "destination_pointer": 1,
                    "destination_ptr": 3,
                    "dst_ptr": 5,
                    "src_ptr": 3
                },
                "uVar4": {
                    "ch": 1,
                    "current_byte": 3,
                    "current_char": 8,
                    "current_value": 3,
                    "current_word": 3,
                    "temp_var": 2,
                    "tmp": 1,
                    "value": 8,
                    "value_to_copy": 1,
                    "word": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nvoid copy_string_with_overflow_check_08009768(uint *dest,uint *src,uint length)\n\n{\n  char current_char;\n  uint *src_ptr;\n  uint *dest_ptr;\n  uint current_char;\n  \n  if (((((uint)dest | (uint)src) & 3) == 0) &&\n     (dest_ptr = dest, src_ptr = src, 3 < length)) {\n    do {\n      src = src_ptr + 1;\n      current_char = *src_ptr;\n      dest = dest_ptr;\n      if ((current_char + 0xfefefeff & ~current_char & 0x80808080) != 0) goto LAB_0800979c;\n      length = length - 4;\n      dest = dest_ptr + 1;\n      *dest_ptr = current_char;\n      dest_ptr = dest;\n      src_ptr = src;\n    } while (3 < length);\n  }\n  src_ptr = src;\n  if (length != 0) {\nLAB_0800979c:\n    current_char = *(char *)src_ptr;\n    *(char *)dest = current_char;\n    while( true ) {\n      dest = (uint *)((int)dest + 1);\n      length = length - 1;\n      if (current_char == '\\0') break;\n      if (length == 0) {\n        return;\n      }\n      src_ptr = (uint *)((int)src_ptr + 1);\n      current_char = *(char *)src_ptr;\n      *(char *)dest = current_char;\n    }\n    if (length != 0) {\n      src_ptr = dest;\n      do {\n        dest_ptr = (uint *)((int)src_ptr + 1);\n        *(char *)src_ptr = '\\0';\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (uint *)(length + (int)dest));\n    }\n  }\n  return;\n}\n\n",
            "current_name": "copy_string_with_overflow_check_08009768",
            "entrypoint": "0x08009768",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009768": "copy_string_with_overflow_check_08009768",
                "cVar1": "current_char",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "uVar4": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080097cc": {
            "additional_data": {
                "FUN_080097cc": {
                    "copy_and_reverse": 2,
                    "copy_and_reverse_data": 3,
                    "copy_and_reverse_memory": 13,
                    "copy_and_update_memory": 1,
                    "copy_reverse_memory": 1,
                    "extract_and_reverse_data": 1,
                    "memcpy_and_reverse": 1,
                    "process_data": 5,
                    "reverse_and_copy_data": 1,
                    "reverse_and_copy_memory": 2,
                    "update_memory": 1
                },
                "allocate_memory_and_initialize_08009adc": {
                    "allocate_and_init_memory": 1,
                    "allocate_and_initialize_memory": 1,
                    "allocate_memory_and_initialize": 3
                },
                "copy_and_reverse_memory_08009a18": {
                    "copy_and_reverse_memory": 5
                },
                "copy_memory_08001084": {
                    "copy_memory": 5
                },
                "iVar1": {
                    "current_index": 2,
                    "current_position": 2,
                    "current_value": 1,
                    "dest_idx": 1,
                    "dest_index": 4,
                    "dest_offset": 3,
                    "destination_address": 1,
                    "destination_index": 1,
                    "dst_index": 1,
                    "index": 1,
                    "input_buf_ptr": 1,
                    "input_offset": 1,
                    "new_source_start": 1,
                    "output_index": 1,
                    "source_buffer_index": 1,
                    "source_index": 1,
                    "source_offset": 3,
                    "source_ptr": 1,
                    "src_base": 1,
                    "src_index": 2,
                    "src_offset": 1
                },
                "iVar3": {
                    "allocated_memory": 7,
                    "dest_ptr_addr": 1,
                    "destination_buffer": 1,
                    "memory_offset": 1,
                    "new_allocation": 1,
                    "new_buffer": 4,
                    "new_data_start": 1,
                    "new_dest_idx": 1,
                    "new_dest_index": 2,
                    "new_destination_address": 1,
                    "new_destination_offset": 1,
                    "new_dst_index": 1,
                    "new_index": 1,
                    "new_memory": 3,
                    "new_memory_ptr": 1,
                    "new_output_buffer": 1,
                    "new_output_offset": 1,
                    "temp_var1": 1,
                    "temporary_index": 1
                },
                "iVar4": {
                    "control_array_size": 1,
                    "control_buffer_index": 1,
                    "length": 1,
                    "metadata_length": 1,
                    "new_counter_value": 1,
                    "num_remaining": 1,
                    "offset": 6,
                    "output_offset": 1,
                    "params_len": 1,
                    "remaining_count": 1,
                    "remaining_info": 1,
                    "remaining_length": 3,
                    "remaining_size": 4,
                    "src_offset": 1,
                    "target_offset": 1,
                    "temp_index": 1,
                    "temp_offset": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_variable": 1,
                    "temporary_offset": 1
                },
                "initialize_and_allocate_memory_080088ec": {
                    "init_and_allocate_memory": 1,
                    "init_and_allocate_memory2": 1,
                    "initialize_and_allocate_memory2": 1,
                    "initialize_and_allocate_memory_2": 2
                },
                "initialize_and_allocate_memory_08008af8": {
                    "init_and_allocate_memory": 2,
                    "initialize_and_allocate_memory": 3
                },
                "param_1": {
                    "dest": 5,
                    "dest_buffer": 2,
                    "dest_ptr": 1,
                    "destination": 4,
                    "destination_array": 2,
                    "destination_buffer": 2,
                    "dst_ptr": 2,
                    "output": 1,
                    "output_array": 4,
                    "output_buffer": 5,
                    "output_data": 1,
                    "output_pointer": 1,
                    "result": 1
                },
                "param_2": {
                    "data": 1,
                    "input_array": 3,
                    "input_buffer": 2,
                    "input_data": 2,
                    "input_pointer": 1,
                    "source": 5,
                    "source_array": 3,
                    "source_buffer": 6,
                    "src": 4,
                    "src_buffer": 1,
                    "src_ptr": 3
                },
                "param_3": {
                    "buffer": 3,
                    "byte_count_array": 1,
                    "control_array": 3,
                    "control_buffer": 2,
                    "control_params": 1,
                    "counter_array": 1,
                    "data_ptr": 1,
                    "flags": 1,
                    "info": 2,
                    "length": 1,
                    "length_info": 1,
                    "lengths": 2,
                    "metadata": 2,
                    "metadata_array": 1,
                    "params": 2,
                    "processing_array": 1,
                    "reverse_metadata": 1,
                    "size": 1,
                    "size_info": 1,
                    "size_ptr": 1,
                    "sizes": 2
                },
                "puVar7": {
                    "control_buffer_ptr": 1,
                    "current_chunk": 1,
                    "current_control": 1,
                    "current_data": 2,
                    "current_element": 2,
                    "current_element_ptr": 1,
                    "current_metadata": 1,
                    "current_pointer": 2,
                    "current_ptr": 2,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_ptr_next": 1,
                    "dest_buffer": 1,
                    "next_chunk": 1,
                    "next_control_data": 1,
                    "next_counter_pointer": 1,
                    "next_data": 2,
                    "next_src_ptr": 2,
                    "ptr": 1,
                    "ptr1": 1,
                    "pu_var_temp": 1,
                    "src_ptr_next": 1,
                    "temp_ptr": 1,
                    "tmp_pointer": 1
                },
                "puVar8": {
                    "counter_pointer": 1,
                    "current_chunk": 3,
                    "current_control_data": 1,
                    "current_data": 1,
                    "data": 1,
                    "data_buffer": 1,
                    "data_ptr_iter": 1,
                    "dest_buffer": 1,
                    "next_chunk": 1,
                    "next_control": 1,
                    "next_control_buffer_ptr": 1,
                    "next_data": 2,
                    "next_data_ptr": 1,
                    "next_element": 2,
                    "next_element_ptr": 1,
                    "next_metadata": 1,
                    "next_pointer": 1,
                    "next_ptr": 3,
                    "ptr2": 1,
                    "pu_var_temp2": 1,
                    "source_ptr": 1,
                    "src_ptr": 2,
                    "src_ptr_temp": 1,
                    "temp_ptr": 1
                },
                "uVar2": {
                    "bytes_processed": 1,
                    "chunk_size": 1,
                    "copy_length": 3,
                    "copy_size": 1,
                    "count": 1,
                    "current_size": 1,
                    "data_size": 1,
                    "element_count": 1,
                    "length": 3,
                    "new_chunk_offset": 1,
                    "new_length": 1,
                    "remaining_data": 1,
                    "size": 2,
                    "source_address": 1,
                    "source_index": 1,
                    "source_length": 1,
                    "source_offset": 1,
                    "source_value": 2,
                    "src_index": 1,
                    "src_len": 1,
                    "src_offset": 1,
                    "temp_counter": 1,
                    "temp_size": 1,
                    "temp_var2": 1,
                    "temp_variable": 1
                },
                "uVar5": {
                    "allocated_memory_size": 1,
                    "allocated_size": 1,
                    "byte_count": 1,
                    "dest_capacity": 1,
                    "destination_buffer_size": 1,
                    "initial_size": 1,
                    "max_length": 1,
                    "max_size": 2,
                    "new_allocation_size": 1,
                    "new_buffer_size": 1,
                    "new_data_length": 1,
                    "new_length": 3,
                    "new_output_buffer_length": 1,
                    "new_size": 5,
                    "new_source_length": 1,
                    "new_src_len": 1,
                    "new_src_size": 1,
                    "output_capacity": 1,
                    "source_array_size": 1,
                    "src_length": 1,
                    "src_size": 1,
                    "target_length": 1,
                    "temp_size2": 1,
                    "total_size": 1
                },
                "uVar6": {
                    "block_size": 1,
                    "chunk_size_copy": 1,
                    "control_data": 1,
                    "control_value": 1,
                    "copy_len": 1,
                    "copy_length": 3,
                    "copy_remainder_length": 1,
                    "copy_size": 3,
                    "count": 1,
                    "current_chunk_offset": 1,
                    "current_counter": 1,
                    "current_length": 1,
                    "current_offset": 1,
                    "current_size": 1,
                    "data_length": 3,
                    "element_count": 1,
                    "metadata_count": 1,
                    "remaining_bytes": 1,
                    "size": 2,
                    "source_length": 2,
                    "temp_length": 1,
                    "temp_size": 1,
                    "temp_size2": 1
                },
                "uVar9": {
                    "chunk_copy": 1,
                    "chunk_data": 1,
                    "copy_size": 1,
                    "copy_value": 1,
                    "current_chunk_size": 1,
                    "current_data": 1,
                    "current_element": 2,
                    "current_element_data": 1,
                    "current_source_value": 1,
                    "current_value": 6,
                    "data": 1,
                    "data_value": 5,
                    "metadata_value": 1,
                    "temp_value": 3,
                    "value": 5
                }
            },
            "called": [
                "FUN_08001084",
                "FUN_08009adc",
                "FUN_08009a18",
                "FUN_08008af8",
                "FUN_080088ec"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined4 reverse_and_copy_memory_080097cc(undefined4 *dest,int *source_buffer,int *control_array)\n\n{\n  int dest_index;\n  uint copy_length;\n  int allocated_memory;\n  int offset;\n  uint new_size;\n  uint data_length;\n  undefined4 *current_data;\n  undefined4 *next_ptr;\n  undefined4 current_value;\n  \n  if (control_array[2] != 0) {\n    dest_index = *source_buffer;\n    new_size = source_buffer[2];\n    next_ptr = (undefined4 *)*control_array;\n    do {\n      do {\n        current_data = next_ptr + 2;\n        current_value = *next_ptr;\n        data_length = next_ptr[1];\n        next_ptr = current_data;\n      } while (data_length == 0);\n      copy_length = data_length;\n      if ((new_size <= data_length) && (copy_length = new_size, (*(ushort *)(source_buffer + 3) & 0x480) != 0)) {\n        offset = dest_index - source_buffer[4];\n        new_size = (source_buffer[5] * 3) / 2;\n        copy_length = data_length + 1 + offset;\n        if (new_size < copy_length) {\n          new_size = copy_length;\n        }\n        if ((int)((uint)*(ushort *)(source_buffer + 3) << 0x15) < 0) {\n          allocated_memory = initialize_and_allocate_memory(dest,new_size);\n          if (allocated_memory == 0) {\nLAB_08009896:\n            *dest = 0xc;\n            *(ushort *)(source_buffer + 3) = *(ushort *)(source_buffer + 3) | 0x40;\n            control_array[1] = 0;\n            control_array[2] = 0;\n            return 0xffffffff;\n          }\n          copy_memory(allocated_memory,source_buffer[4],offset);\n          *(ushort *)(source_buffer + 3) = *(ushort *)(source_buffer + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          allocated_memory = allocate_memory_and_initialize(dest);\n          if (allocated_memory == 0) {\n            initialize_and_allocate_memory_2(dest,source_buffer[4]);\n            goto LAB_08009896;\n          }\n        }\n        dest_index = allocated_memory + offset;\n        source_buffer[5] = new_size;\n        source_buffer[4] = allocated_memory;\n        *source_buffer = dest_index;\n        source_buffer[2] = new_size - offset;\n        copy_length = data_length;\n      }\n      copy_and_reverse_memory(dest_index,current_value,copy_length);\n      offset = control_array[2];\n      new_size = source_buffer[2] - copy_length;\n      dest_index = *source_buffer + copy_length;\n      source_buffer[2] = new_size;\n      *source_buffer = dest_index;\n      control_array[2] = offset - data_length;\n    } while (offset - data_length != 0);\n  }\n  control_array[1] = 0;\n  return 0;\n}\n\n",
            "current_name": "reverse_and_copy_memory_080097cc",
            "entrypoint": "0x080097cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080097cc": "reverse_and_copy_memory_080097cc",
                "allocate_memory_and_initialize_08009adc": "allocate_memory_and_initialize",
                "copy_and_reverse_memory_08009a18": "copy_and_reverse_memory",
                "copy_memory_08001084": "copy_memory",
                "iVar1": "dest_index",
                "iVar3": "allocated_memory",
                "iVar4": "offset",
                "initialize_and_allocate_memory_080088ec": "initialize_and_allocate_memory_2",
                "initialize_and_allocate_memory_08008af8": "initialize_and_allocate_memory",
                "param_1": "dest",
                "param_2": "source_buffer",
                "param_3": "control_array",
                "puVar7": "current_data",
                "puVar8": "next_ptr",
                "uVar2": "copy_length",
                "uVar5": "new_size",
                "uVar6": "data_length",
                "uVar9": "current_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080098c0": {
            "additional_data": {
                "DAT_20000168": {
                    "ptr_data": 1
                },
                "DAT_2000016c": {
                    "initial_data": 1
                },
                "DAT_20000448": {
                    "data": 1
                },
                "FUNC_08008af0": {
                    "initialize": 1
                },
                "FUN_080098c0": {
                    "process_data": 5,
                    "update_data": 22,
                    "update_data_at_position": 1,
                    "update_data_buffer": 1,
                    "update_data_in_storage": 1,
                    "update_value": 1
                },
                "param_1": {
                    "action": 3,
                    "action_type": 2,
                    "condition": 1,
                    "data_flag": 4,
                    "data_type": 3,
                    "flag": 2,
                    "input_type": 2,
                    "operation": 1,
                    "operation_type": 1,
                    "state": 1,
                    "status": 2,
                    "type": 5,
                    "type_of_update": 1,
                    "update_type": 2,
                    "value_type": 1
                },
                "param_2": {
                    "data": 7,
                    "data1": 2,
                    "data_1": 1,
                    "data_value": 2,
                    "new_data": 2,
                    "new_value": 6,
                    "value": 6,
                    "value1": 4,
                    "value_1": 1
                },
                "param_3": {
                    "data": 1,
                    "data1": 6,
                    "data2": 2,
                    "data_2": 1,
                    "first_update": 1,
                    "new_value": 1,
                    "new_value1": 2,
                    "param1": 3,
                    "param1_value": 1,
                    "param3": 2,
                    "value1": 6,
                    "value2": 4,
                    "value_2": 1
                },
                "param_4": {
                    "additional_value": 1,
                    "data2": 6,
                    "data3": 2,
                    "data_3": 1,
                    "info": 1,
                    "new_value2": 2,
                    "param2": 3,
                    "param2_value": 1,
                    "param4": 2,
                    "second_update": 1,
                    "value2": 6,
                    "value3": 4,
                    "value_3": 1
                },
                "puVar1": {
                    "data_block": 1,
                    "data_buffer": 1,
                    "data_pointer": 4,
                    "data_ptr": 18,
                    "data_struct": 1,
                    "pointer": 2,
                    "ptr": 3,
                    "ptr_data": 1
                },
                "uVar2": {
                    "result": 6,
                    "return_value": 25
                },
                "uVar3": {
                    "bit_flag": 1,
                    "bit_mask": 23,
                    "bit_mask1": 2,
                    "bit_shift": 2,
                    "bitwise_shift": 1,
                    "mask": 2
                },
                "uVar4": {
                    "block_index": 1,
                    "buffer_size": 1,
                    "count": 11,
                    "counter": 1,
                    "current_count": 1,
                    "current_index": 1,
                    "data_count": 2,
                    "data_index": 7,
                    "data_size": 1,
                    "index": 2,
                    "num_elements": 1,
                    "position": 1,
                    "size": 1
                }
            },
            "called": [
                "FUN_08008af0",
                "FUN_08008af4"
            ],
            "calling": [
                "FUN_080078a0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 update_data_in_storage_080098c0(int type,undefined4 data,undefined4 data1,undefined4 value2)\n\n{\n  undefined *data_ptr;\n  undefined4 return_value;\n  uint bit_mask;\n  uint count;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  data_ptr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = data1;\n      bit_mask = 1 << (count & 0xff);\n      *(uint *)(data_ptr + 0x188) = *(uint *)(data_ptr + 0x188) | bit_mask;\n      *(undefined4 *)(data_ptr + count * 4 + 0x108) = value2;\n      if (type == 2) {\n        *(uint *)(data_ptr + 0x18c) = bit_mask | *(uint *)(data_ptr + 0x18c);\n      }\n    }\n    *(uint *)(data_ptr + 4) = count + 1;\n    return_value = DAT_20000448;\n    *(undefined4 *)(data_ptr + (count + 2) * 4) = data;\n    FUNC_08008af4(return_value);\n    return_value = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_data_in_storage_080098c0",
            "entrypoint": "0x080098c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080098c0": "update_data_in_storage_080098c0",
                "param_1": "type",
                "param_2": "data",
                "param_3": "data1",
                "param_4": "value2",
                "puVar1": "data_ptr",
                "uVar2": "return_value",
                "uVar3": "bit_mask",
                "uVar4": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009980": {
            "additional_data": {
                "FUN_08009980": {
                    "allocate_and_initialize_memory": 2,
                    "initialize_allocated_memory": 2,
                    "initialize_and_allocate_memory": 20,
                    "initialize_and_fill_memory": 1,
                    "initialize_memory": 6
                },
                "fill_memory_with_byte_08005d68": {
                    "fill_memory_with_zeroes": 1
                },
                "initialize_and_allocate_memory_08008af8": {
                    "allocate_memory": 1
                },
                "param_1": {
                    "address": 2,
                    "arg1": 3,
                    "base_address": 2,
                    "buffer_address": 1,
                    "data": 2,
                    "data_ptr": 1,
                    "first_parameter": 1,
                    "initial_value": 2,
                    "input": 2,
                    "input_param": 1,
                    "input_parameter": 1,
                    "param": 1,
                    "param1": 7,
                    "param_pointer": 1,
                    "pointer_to_data": 1,
                    "size": 1,
                    "target_address": 1,
                    "value": 1
                },
                "param_2": {
                    "arg2": 1,
                    "element_size": 1,
                    "length": 1,
                    "num_elements": 1,
                    "num_rows": 12,
                    "number_of_bytes": 1,
                    "param2": 4,
                    "row_count": 2,
                    "row_size": 1,
                    "rows": 1,
                    "second_parameter": 1,
                    "size": 1,
                    "size_1": 1,
                    "width": 3
                },
                "param_3": {
                    "arg3": 1,
                    "cols": 1,
                    "column_count": 2,
                    "column_size": 1,
                    "count": 2,
                    "element_size": 1,
                    "height": 3,
                    "num_cols": 2,
                    "num_columns": 10,
                    "num_elements": 1,
                    "param3": 4,
                    "size_2": 1,
                    "third_parameter": 1,
                    "width": 1
                },
                "puVar1": {
                    "allocated_memory": 19,
                    "initialized_memory": 1,
                    "memory": 1,
                    "memory_block": 2,
                    "memory_pointer": 4,
                    "memory_ptr": 2,
                    "ptr": 2
                },
                "puVar3": {
                    "allocated_memory_offset": 1,
                    "array_end": 1,
                    "current_ptr": 1,
                    "data_end": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "data_start": 1,
                    "end_of_allocated_memory": 1,
                    "end_of_allocation": 1,
                    "end_pointer": 1,
                    "extra_memory": 1,
                    "final_ptr": 1,
                    "initialized_memory": 3,
                    "memory_ptr": 1,
                    "next": 1,
                    "next_pointer": 1,
                    "pointer": 2,
                    "pointer_after_additional_checks": 1,
                    "pointer_to_memory": 1,
                    "ptr": 3,
                    "ptr2": 2,
                    "ptr_offset": 1,
                    "temp_memory": 1,
                    "updated_memory": 1
                },
                "uVar2": {
                    "adjusted_size": 8,
                    "allocated_memory_size": 1,
                    "allocated_size": 4,
                    "bytes": 1,
                    "calculated_length": 1,
                    "header_size": 3,
                    "last_byte_index": 1,
                    "length": 2,
                    "memory_block_size": 1,
                    "memory_size": 4,
                    "num_bytes": 1,
                    "size": 3,
                    "total_size": 1
                }
            },
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "calling": [
                "FUN_080090c0"
            ],
            "code": "\nundefined4 * allocate_and_initialize_memory_08009980(undefined4 param1,int num_rows,int num_columns)\n\n{\n  undefined4 *allocated_memory;\n  uint adjusted_size;\n  undefined4 *ptr;\n  \n  allocated_memory = (undefined4 *)allocate_memory(param1,num_columns * num_rows);\n  if (allocated_memory == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  adjusted_size = (allocated_memory[-1] & 0xfffffffc) - 4;\n  if (adjusted_size < 0x25) {\n    ptr = allocated_memory;\n    if (0x13 < adjusted_size) {\n      *allocated_memory = 0;\n      allocated_memory[1] = 0;\n      if (0x1b < adjusted_size) {\n        allocated_memory[2] = 0;\n        allocated_memory[3] = 0;\n        if (adjusted_size == 0x24) {\n          allocated_memory[4] = 0;\n          allocated_memory[5] = 0;\n          ptr = allocated_memory + 6;\n        }\n        else {\n          ptr = allocated_memory + 4;\n        }\n        *ptr = 0;\n        ptr[1] = 0;\n        ptr[2] = 0;\n        return allocated_memory;\n      }\n      ptr = allocated_memory + 2;\n    }\n    *ptr = 0;\n    ptr[1] = 0;\n    ptr[2] = 0;\n    return allocated_memory;\n  }\n  fill_memory_with_zeroes(allocated_memory,0);\n  return allocated_memory;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_08009980",
            "entrypoint": "0x08009980",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009980": "allocate_and_initialize_memory_08009980",
                "fill_memory_with_byte_08005d68": "fill_memory_with_zeroes",
                "initialize_and_allocate_memory_08008af8": "allocate_memory",
                "param_1": "param1",
                "param_2": "num_rows",
                "param_3": "num_columns",
                "puVar1": "allocated_memory",
                "puVar3": "ptr",
                "uVar2": "adjusted_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009a18": {
            "additional_data": {
                "FUN_08009a18": {
                    "copy_and_reverse": 1,
                    "copy_and_reverse_memory": 2,
                    "copy_and_shift_memory": 1,
                    "copy_memory": 23,
                    "reverse_copy": 3,
                    "reverse_copy_memory": 1
                },
                "iVar3": {
                    "count": 3,
                    "i": 2,
                    "increment": 1,
                    "index": 1,
                    "iteration": 5,
                    "iteration_count": 3,
                    "iterator": 1,
                    "loop_count": 1,
                    "loop_counter": 3,
                    "loop_index": 1,
                    "num_chunks": 3,
                    "num_iterations": 1,
                    "num_loops": 3,
                    "num_words": 2,
                    "temp": 1
                },
                "param_1": {
                    "dest": 6,
                    "dest_ptr": 1,
                    "destination": 15,
                    "source": 8,
                    "source_array": 1
                },
                "param_2": {
                    "dest": 2,
                    "dest_array": 1,
                    "destination": 6,
                    "source": 15,
                    "src": 6,
                    "src_ptr": 1
                },
                "param_3": {
                    "length": 12,
                    "num_bytes": 1,
                    "size": 18
                },
                "puVar1": {
                    "dest": 1,
                    "dest_pointer": 2,
                    "dest_ptr": 18,
                    "dst_ptr": 1,
                    "source_pointer": 1,
                    "source_ptr": 4,
                    "src_ptr": 4
                },
                "puVar2": {
                    "dest_ptr": 5,
                    "destination_pointer": 1,
                    "destination_ptr": 1,
                    "dst_ptr": 2,
                    "src": 1,
                    "src_pointer": 2,
                    "src_ptr": 19
                },
                "puVar4": {
                    "byte_ptr": 1,
                    "curr_source_elem": 1,
                    "current_byte": 1,
                    "dest": 1,
                    "dest_byte": 4,
                    "dest_byte_ptr": 12,
                    "dest_end": 3,
                    "dest_end_ptr": 1,
                    "dst_byte": 1,
                    "dst_ptr": 1,
                    "pointer1": 1,
                    "source_byte_ptr": 1,
                    "src_byte": 1,
                    "src_byte_ptr": 1,
                    "src_char_ptr": 1
                },
                "puVar5": {
                    "char_ptr": 1,
                    "copy_pointer": 1,
                    "curr_dest_elem": 1,
                    "dest_byte_ptr": 1,
                    "dst_byte": 1,
                    "dst_byte_ptr": 1,
                    "pointer2": 1,
                    "source_byte_ptr": 1,
                    "src": 1,
                    "src_byte": 5,
                    "src_byte_ptr": 11,
                    "src_end": 3,
                    "src_end_ptr": 1,
                    "src_ptr": 1,
                    "temp_ptr": 1
                },
                "uVar6": {
                    "copy_count": 1,
                    "loop_counter": 1,
                    "remainder_size": 1,
                    "remaining": 1,
                    "remaining_bytes": 5,
                    "remaining_length": 9,
                    "remaining_size": 11,
                    "temp": 1,
                    "temp_counter": 1
                },
                "uVar7": {
                    "adjusted_length": 3,
                    "adjusted_size": 1,
                    "aligned_size": 3,
                    "copy_size": 2,
                    "mod": 1,
                    "remainder": 2,
                    "remaining_bytes": 4,
                    "remaining_bytes_backup": 1,
                    "remaining_length": 2,
                    "remaining_length_aligned": 1,
                    "remaining_size": 4,
                    "remaining_size2": 1,
                    "short_length": 1,
                    "size_remainder": 1,
                    "temp_length": 2,
                    "temp_size": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08009adc",
                "FUN_080097cc"
            ],
            "code": "\nvoid copy_and_reverse_memory_08009a18(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  int iteration;\n  undefined *dest_byte_ptr;\n  undefined4 *src_byte_ptr;\n  uint remaining_size;\n  uint remaining_bytes;\n  \n  if ((source < destination) && (src_ptr = (undefined4 *)((int)source + size), destination < src_ptr)) {\n    dest_byte_ptr = (undefined *)((int)destination + size);\n    if (size != 0) {\n      do {\n        src_ptr = (undefined4 *)((int)src_ptr + -1);\n        dest_byte_ptr = dest_byte_ptr + -1;\n        *dest_byte_ptr = *(undefined *)src_ptr;\n      } while (source != src_ptr);\n    }\n  }\n  else {\n    remaining_bytes = size;\n    if (0xf < size) {\n      if ((((uint)destination | (uint)source) & 3) != 0) goto LAB_08009abc;\n      src_ptr = source + 4;\n      dest_ptr = destination + 4;\n      do {\n        src_byte_ptr = src_ptr + 4;\n        dest_ptr[-4] = src_ptr[-4];\n        dest_ptr[-3] = src_ptr[-3];\n        dest_ptr[-2] = src_ptr[-2];\n        dest_ptr[-1] = src_ptr[-1];\n        src_ptr = src_byte_ptr;\n        dest_ptr = dest_ptr + 4;\n      } while (src_byte_ptr != (undefined4 *)((int)source + (size - 0x10 & 0xfffffff0) + 0x20));\n      iteration = (size - 0x10 >> 4) + 1;\n      remaining_bytes = size & 0xf;\n      source = source + iteration * 4;\n      destination = destination + iteration * 4;\n      if (3 < remaining_bytes) {\n        src_ptr = destination + -1;\n        remaining_size = remaining_bytes;\n        dest_ptr = source;\n        do {\n          remaining_size = remaining_size - 4;\n          src_ptr = src_ptr + 1;\n          *src_ptr = *dest_ptr;\n          dest_ptr = dest_ptr + 1;\n        } while (3 < remaining_size);\n        iteration = (remaining_bytes - 4 & 0xfffffffc) + 4;\n        destination = (undefined4 *)((int)destination + iteration);\n        source = (undefined4 *)((int)source + iteration);\n        remaining_bytes = size & 3;\n      }\n    }\n    size = remaining_bytes;\n    if (remaining_bytes != 0) {\nLAB_08009abc:\n      dest_byte_ptr = (undefined *)((int)destination + -1);\n      src_ptr = source;\n      do {\n        dest_ptr = (undefined4 *)((int)src_ptr + 1);\n        dest_byte_ptr = dest_byte_ptr + 1;\n        *dest_byte_ptr = *(undefined *)src_ptr;\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (undefined4 *)(size + (int)source));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "copy_and_reverse_memory_08009a18",
            "entrypoint": "0x08009a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009a18": "copy_and_reverse_memory_08009a18",
                "iVar3": "iteration",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar4": "dest_byte_ptr",
                "puVar5": "src_byte_ptr",
                "uVar6": "remaining_size",
                "uVar7": "remaining_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009adc": {
            "additional_data": {
                "DAT_20000454": {
                    "dat_constant": 1,
                    "data_structure_address": 1,
                    "global_data_structure": 1,
                    "global_memory": 1,
                    "global_var": 1,
                    "last_allocated_address": 1,
                    "some_reserved_data": 1
                },
                "FUN_08009adc": {
                    "allocate_and_copy_data": 1,
                    "allocate_and_copy_memory": 1,
                    "allocate_and_initialize_memory": 17,
                    "allocate_memory": 8,
                    "allocate_memory_and_initialize": 1,
                    "allocate_or_reallocate_memory": 1,
                    "allocate_or_resize_memory": 2
                },
                "LAB_08009b8e": {
                    "check_memory_size_condition": 1,
                    "error_label1": 1,
                    "return_null_label": 1
                },
                "copy_and_reverse_memory_08009a18": {
                    "copy_and_reverse_memory": 4
                },
                "iVar11": {
                    "block_ptr": 1,
                    "buffer_end": 1,
                    "current_memory": 1,
                    "end_addr": 1,
                    "end_address": 2,
                    "end_memory": 2,
                    "end_of_memory": 1,
                    "end_ptr": 2,
                    "final_address": 1,
                    "final_memory_size": 1,
                    "final_var": 1,
                    "int_var11": 1,
                    "last_assigned_addr": 1,
                    "last_block": 1,
                    "mem_end_addr": 1,
                    "new_allocation_address": 1,
                    "new_memory_end": 1,
                    "size_index": 1,
                    "temp_8": 1,
                    "temp_var11": 1,
                    "temp_var3": 1,
                    "temp_var_8": 1,
                    "var11": 3,
                    "var5": 1,
                    "var_11": 1,
                    "variable_8": 1
                },
                "iVar2": {
                    "current_block": 1,
                    "index": 2,
                    "int_var2": 1,
                    "offset": 1,
                    "temp": 3,
                    "temp1": 1,
                    "temp_1": 2,
                    "temp_var": 8,
                    "temp_var1": 3,
                    "temp_var2": 2,
                    "var1": 2,
                    "var2": 3,
                    "var_2": 1,
                    "variable_1": 1
                },
                "iVar5": {
                    "block_size2": 1,
                    "index_var": 1,
                    "int_var5": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_3": 1,
                    "temp_4": 1,
                    "temp_var2": 3,
                    "temp_var3": 6,
                    "temp_var4": 1,
                    "temp_var5": 2,
                    "temp_var_2": 1,
                    "temp_var_3": 2,
                    "var3": 2,
                    "var5": 4,
                    "var_5": 1,
                    "variable_3": 1
                },
                "initialize_and_allocate_memory_080088ec": {
                    "initialize_and_allocate_memory": 3,
                    "initialize_and_allocate_memory2": 1
                },
                "initialize_and_allocate_memory_08008af8": {
                    "initialize_and_allocate_memory": 3,
                    "initialize_memory": 1
                },
                "initialize_data_structure_080090b4": {
                    "initialize_data_structure": 4
                },
                "initialize_data_structures_080090a8": {
                    "initialize_data_structures": 4
                },
                "param_1": {
                    "arg1": 1,
                    "data_ptr": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_ptr": 1,
                    "memory_ptr": 1,
                    "output": 1,
                    "param": 2,
                    "param1": 2,
                    "param_1": 1,
                    "param_address": 2,
                    "param_array": 2,
                    "param_init": 1,
                    "param_pointer": 2,
                    "param_ptr": 3,
                    "parameter1": 1,
                    "parameter_1": 1,
                    "pointer": 2,
                    "pointer_param": 1,
                    "pointer_to_struct": 1,
                    "ptr_param": 1,
                    "ptr_to_data": 1
                },
                "param_2": {
                    "allocated_memory": 1,
                    "arg2": 1,
                    "buffer_ptr": 1,
                    "data_ptr": 1,
                    "existing_buffer": 1,
                    "existing_memory": 12,
                    "initial_memory": 1,
                    "input": 1,
                    "memory": 1,
                    "memory_array": 1,
                    "old_memory": 1,
                    "param2": 2,
                    "param_2": 1,
                    "param_data": 1,
                    "parameter2": 1,
                    "parameter_2": 1,
                    "previous_memory": 1,
                    "ptr_mem": 1,
                    "ptr_to_buffer": 1
                },
                "param_3": {
                    "arg3": 1,
                    "buffer_size": 2,
                    "data_size": 2,
                    "memory_size": 3,
                    "new_memory_size": 2,
                    "param3": 2,
                    "param_3": 1,
                    "parameter3": 1,
                    "parameter_3": 1,
                    "required_size": 1,
                    "size": 15
                },
                "piVar1": {
                    "current_ptr": 1,
                    "data_ptr1": 1,
                    "memory_ptr": 1,
                    "new_buffer": 1,
                    "new_memory": 12,
                    "new_ptr": 2,
                    "pointer_1": 1,
                    "pointer_var1": 1,
                    "previous_block": 1,
                    "ptr1": 4,
                    "ptr_1": 1,
                    "ptr_result": 1,
                    "result": 1,
                    "result_ptr": 1,
                    "temp_var1": 2
                },
                "piVar3": {
                    "allocated_buffer": 1,
                    "allocated_memory": 4,
                    "allocated_ptr": 1,
                    "current_memory": 1,
                    "data_ptr2": 1,
                    "final_ptr": 1,
                    "initialized_ptr": 1,
                    "memory": 1,
                    "memory_ptr": 1,
                    "new_block": 1,
                    "new_data_structure": 1,
                    "new_memory2": 1,
                    "new_memory_start": 1,
                    "new_ptr_2": 1,
                    "pointer_2": 1,
                    "pointer_var3": 1,
                    "ptr2": 1,
                    "ptr3": 3,
                    "ptr_3": 1,
                    "ptr_temp_1": 1,
                    "result_ptr": 1,
                    "temp2": 1,
                    "temp_2": 1,
                    "temp_var2": 1,
                    "temp_var3": 2
                },
                "piVar7": {
                    "copy_ptr": 1,
                    "data_ptr3": 1,
                    "new_ptr_3": 1,
                    "pointer_3": 1,
                    "pointer_var7": 1,
                    "ptr3": 1,
                    "ptr7": 3,
                    "ptr_7": 1,
                    "ptr_temp_2": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_6": 1,
                    "temp_memory": 1,
                    "temp_ptr": 3,
                    "temp_var3": 1,
                    "temp_var6": 1,
                    "temp_var7": 2,
                    "var5": 2,
                    "var7": 1
                },
                "uVar10": {
                    "adjusted_size_var2": 1,
                    "allocated_size": 1,
                    "combined_size": 1,
                    "new_memory_size": 1,
                    "requested_size": 1,
                    "required_total_size": 1,
                    "result_size": 1,
                    "sum_aligned_size": 1,
                    "temp_7": 1,
                    "temp_var10": 1,
                    "temp_var5": 1,
                    "temp_var_7": 2,
                    "total_alloc_size": 1,
                    "total_memory_size": 1,
                    "total_size": 4,
                    "u_var_10": 1,
                    "uint_var10": 1,
                    "updated_size": 2,
                    "value4": 1,
                    "var10": 4,
                    "var4": 1,
                    "var_10": 1,
                    "variable_7": 1
                },
                "uVar4": {
                    "block_size": 1,
                    "size_var": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_2": 1,
                    "temp_3": 1,
                    "temp_var": 3,
                    "temp_var2": 6,
                    "temp_var3": 1,
                    "temp_var4": 2,
                    "temp_var_2": 2,
                    "uint_var4": 1,
                    "update_var": 1,
                    "var2": 2,
                    "var4": 4,
                    "var_4": 1,
                    "variable_2": 1
                },
                "uVar6": {
                    "data_size": 1,
                    "existing_memory_size": 1,
                    "existing_size": 1,
                    "flag": 1,
                    "header_size": 1,
                    "mask_var": 2,
                    "size_aligned": 1,
                    "size_var": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_4": 1,
                    "temp_5": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var6": 2,
                    "temp_var_4": 2,
                    "u_var_6": 1,
                    "uint_var6": 1,
                    "value1": 1,
                    "var1": 1,
                    "var4": 2,
                    "var6": 4,
                    "var_6": 1,
                    "variable_4": 1
                },
                "uVar8": {
                    "adjusted_size": 2,
                    "aligned_buffer_size": 1,
                    "aligned_memory_size": 1,
                    "aligned_size": 13,
                    "new_size": 1,
                    "rounded_memory_size": 1,
                    "temp_5": 1,
                    "temp_var8": 1,
                    "temp_var_5": 2,
                    "uint_var8": 1,
                    "value2": 1,
                    "var2": 1,
                    "var8": 3,
                    "var_8": 1,
                    "variable_5": 1
                },
                "uVar9": {
                    "acceptable_memory_size": 1,
                    "adjusted_size": 4,
                    "adjusted_size_var": 1,
                    "aligned_existing_buffer_size": 1,
                    "aligned_existing_size": 1,
                    "aligned_offset": 1,
                    "aligned_remaining_size": 1,
                    "aligned_size": 1,
                    "aligned_size_minus_4": 1,
                    "aligned_size_temp": 1,
                    "header_size": 1,
                    "original_alloc_size": 1,
                    "original_size": 1,
                    "temp_6": 1,
                    "temp_var9": 1,
                    "temp_var_6": 2,
                    "u_var_9": 1,
                    "uint_var9": 1,
                    "unmodified_memory_size": 1,
                    "value3": 1,
                    "var3": 1,
                    "var9": 4,
                    "var_9": 1,
                    "variable_6": 1
                }
            },
            "called": [
                "FUN_080090a8",
                "FUN_08009a18",
                "FUN_08008af8",
                "FUN_080088ec",
                "FUN_080090b4"
            ],
            "calling": [
                "FUN_080097cc"
            ],
            "code": "\nint * allocate_memory_and_initialize_08009adc(undefined4 *param_ptr,int *existing_memory,uint size)\n\n{\n  int *new_memory;\n  int temp_var;\n  int *allocated_memory;\n  uint temp_var2;\n  int temp_var3;\n  uint var6;\n  int *temp_ptr;\n  uint aligned_size;\n  uint adjusted_size;\n  uint var10;\n  int var11;\n  \n  if (existing_memory == (int *)0x0) {\n    allocated_memory = (int *)initialize_and_allocate_memory(param_ptr,size);\n    return allocated_memory;\n  }\n  initialize_data_structures();\n  var6 = existing_memory[-1];\n  adjusted_size = var6 & 0xfffffffc;\n  allocated_memory = existing_memory + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto return_null_label;\n  }\n  if (aligned_size < size) {\nreturn_null_label:\n    *param_ptr = 0xc;\n    return (int *)0x0;\n  }\n  var11 = (int)allocated_memory + adjusted_size;\n  var10 = adjusted_size;\n  if ((int)adjusted_size < (int)aligned_size) {\n    if (DAT_20000454 == var11) {\n      var11 = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + adjusted_size;\n      if ((int)(aligned_size + 0x10) <= var11) {\n        DAT_20000454 = (int)allocated_memory + aligned_size;\n        *(uint *)(DAT_20000454 + 4) = var11 - aligned_size | 1;\n        existing_memory[-1] = aligned_size | existing_memory[-1] & 1U;\n        initialize_data_structure(param_ptr);\n        return existing_memory;\n      }\n      if (-1 < (int)(var6 << 0x1f)) {\n        new_memory = (int *)((int)allocated_memory - existing_memory[-2]);\n        var6 = new_memory[1] & 0xfffffffc;\n        if ((int)(aligned_size + 0x10) <= (int)(var11 + var6)) {\n          temp_var3 = new_memory[3];\n          allocated_memory = new_memory + 2;\n          temp_var = *allocated_memory;\n          adjusted_size = adjusted_size - 4;\n          *(int *)(temp_var + 0xc) = temp_var3;\n          *(int *)(temp_var3 + 8) = temp_var;\n          if (adjusted_size < 0x25) {\n            temp_var = *existing_memory;\n            temp_ptr = allocated_memory;\n            if (0x13 < adjusted_size) {\n              new_memory[2] = temp_var;\n              new_memory[3] = existing_memory[1];\n              temp_var = existing_memory[2];\n              if (adjusted_size < 0x1c) {\n                existing_memory = existing_memory + 2;\n                temp_ptr = new_memory + 4;\n              }\n              else {\n                new_memory[4] = temp_var;\n                new_memory[5] = existing_memory[3];\n                temp_var = existing_memory[4];\n                if (adjusted_size == 0x24) {\n                  new_memory[6] = temp_var;\n                  new_memory[7] = existing_memory[5];\n                  temp_var = existing_memory[6];\n                  existing_memory = existing_memory + 6;\n                  temp_ptr = new_memory + 8;\n                }\n                else {\n                  existing_memory = existing_memory + 4;\n                  temp_ptr = new_memory + 6;\n                }\n              }\n            }\n            *temp_ptr = temp_var;\n            temp_ptr[1] = existing_memory[1];\n            temp_ptr[2] = existing_memory[2];\n          }\n          else {\n            copy_and_reverse_memory(allocated_memory,existing_memory);\n          }\n          DAT_20000454 = (int)new_memory + aligned_size;\n          *(uint *)(DAT_20000454 + 4) = (var11 + var6) - aligned_size | 1;\n          new_memory[1] = aligned_size | new_memory[1] & 1U;\n          initialize_data_structure(param_ptr);\n          return allocated_memory;\n        }\nLAB_08009bb0:\n        var10 = adjusted_size + var6;\n        if ((int)aligned_size <= (int)var10) {\n          temp_var3 = new_memory[3];\n          temp_ptr = new_memory + 2;\n          temp_var = *temp_ptr;\n          *(int *)(temp_var + 0xc) = temp_var3;\n          var11 = (int)new_memory + var10;\n          *(int *)(temp_var3 + 8) = temp_var;\n          allocated_memory = new_memory;\n          if (adjusted_size - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          copy_and_reverse_memory(temp_ptr,existing_memory);\n          existing_memory = temp_ptr;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(var11 + 4) & 0xfffffffe) + var11 + 4) << 0x1f) {\n        temp_var2 = *(uint *)(var11 + 4) & 0xfffffffc;\n        var10 = adjusted_size + temp_var2;\n        if ((int)var10 < (int)aligned_size) {\n          if ((int)(var6 << 0x1f) < 0) goto LAB_08009b36;\n          new_memory = (int *)((int)allocated_memory - existing_memory[-2]);\n          var6 = new_memory[1] & 0xfffffffc;\n          var10 = temp_var2 + var6 + adjusted_size;\n          if ((int)var10 < (int)aligned_size) goto LAB_08009bb0;\n          temp_var = *(int *)(var11 + 8);\n          var11 = *(int *)(var11 + 0xc);\n          *(int *)(temp_var + 0xc) = var11;\n          *(int *)(var11 + 8) = temp_var;\n          temp_ptr = new_memory + 2;\n          temp_var = *temp_ptr;\n          temp_var3 = new_memory[3];\n          *(int *)(temp_var + 0xc) = temp_var3;\n          var11 = (int)new_memory + var10;\n          *(int *)(temp_var3 + 8) = temp_var;\n          allocated_memory = new_memory;\n          if (0x24 < adjusted_size - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          adjusted_size = adjusted_size - 4;\n          temp_var = *existing_memory;\n          new_memory = temp_ptr;\n          if (0x13 < adjusted_size) {\n            allocated_memory[2] = temp_var;\n            allocated_memory[3] = existing_memory[1];\n            temp_var = existing_memory[2];\n            if (adjusted_size < 0x1c) {\n              existing_memory = existing_memory + 2;\n              new_memory = allocated_memory + 4;\n            }\n            else {\n              allocated_memory[4] = temp_var;\n              allocated_memory[5] = existing_memory[3];\n              temp_var = existing_memory[4];\n              if (adjusted_size == 0x24) {\n                allocated_memory[6] = temp_var;\n                allocated_memory[7] = existing_memory[5];\n                temp_var = existing_memory[6];\n                existing_memory = existing_memory + 6;\n                new_memory = allocated_memory + 8;\n              }\n              else {\n                existing_memory = existing_memory + 4;\n                new_memory = allocated_memory + 6;\n              }\n            }\n          }\n          *new_memory = temp_var;\n          new_memory[1] = existing_memory[1];\n          new_memory[2] = existing_memory[2];\n          existing_memory = temp_ptr;\n        }\n        else {\n          temp_var = *(int *)(var11 + 8);\n          temp_var3 = *(int *)(var11 + 0xc);\n          *(int *)(temp_var + 0xc) = temp_var3;\n          var11 = (int)allocated_memory + var10;\n          *(int *)(temp_var3 + 8) = temp_var;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(var6 << 0x1f)) {\n        new_memory = (int *)((int)allocated_memory - existing_memory[-2]);\n        var6 = new_memory[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    new_memory = (int *)initialize_and_allocate_memory(param_ptr,size);\n    if (new_memory != (int *)0x0) {\n      if ((int *)((existing_memory[-1] & 0xfffffffeU) + (int)allocated_memory) == new_memory + -2) {\n        var10 = adjusted_size + (new_memory[-1] & 0xfffffffcU);\n        var11 = (int)allocated_memory + var10;\n        goto LAB_08009c00;\n      }\n      adjusted_size = adjusted_size - 4;\n      if (adjusted_size < 0x25) {\n        var11 = *existing_memory;\n        allocated_memory = existing_memory;\n        temp_ptr = new_memory;\n        if (0x13 < adjusted_size) {\n          *new_memory = var11;\n          new_memory[1] = existing_memory[1];\n          if (adjusted_size < 0x1c) {\n            var11 = existing_memory[2];\n            allocated_memory = existing_memory + 2;\n            temp_ptr = new_memory + 2;\n          }\n          else {\n            new_memory[2] = existing_memory[2];\n            new_memory[3] = existing_memory[3];\n            if (adjusted_size == 0x24) {\n              new_memory[4] = existing_memory[4];\n              new_memory[5] = existing_memory[5];\n              var11 = existing_memory[6];\n              allocated_memory = existing_memory + 6;\n              temp_ptr = new_memory + 6;\n            }\n            else {\n              var11 = existing_memory[4];\n              allocated_memory = existing_memory + 4;\n              temp_ptr = new_memory + 4;\n            }\n          }\n        }\n        *temp_ptr = var11;\n        temp_ptr[1] = allocated_memory[1];\n        temp_ptr[2] = allocated_memory[2];\n      }\n      else {\n        copy_and_reverse_memory(new_memory,existing_memory);\n      }\n      initialize_and_allocate_memory(param_ptr,existing_memory);\n    }\n    initialize_data_structure(param_ptr);\n    existing_memory = new_memory;\n  }\n  else {\nLAB_08009c00:\n    if (var10 - aligned_size < 0x10) {\n      allocated_memory[1] = allocated_memory[1] & 1U | var10;\n      *(uint *)(var11 + 4) = *(uint *)(var11 + 4) | 1;\n    }\n    else {\n      allocated_memory[1] = allocated_memory[1] & 1U | aligned_size;\n      *(uint *)((int)allocated_memory + aligned_size + 4) = var10 - aligned_size | 1;\n      *(uint *)(var11 + 4) = *(uint *)(var11 + 4) | 1;\n      initialize_and_allocate_memory(param_ptr,(int)allocated_memory + aligned_size + 8);\n    }\n    initialize_data_structure(param_ptr);\n  }\n  return existing_memory;\n}\n\n",
            "current_name": "allocate_memory_and_initialize_08009adc",
            "entrypoint": "0x08009adc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009adc": "allocate_memory_and_initialize_08009adc",
                "LAB_08009b8e": "return_null_label",
                "copy_and_reverse_memory_08009a18": "copy_and_reverse_memory",
                "iVar11": "var11",
                "iVar2": "temp_var",
                "iVar5": "temp_var3",
                "initialize_and_allocate_memory_080088ec": "initialize_and_allocate_memory",
                "initialize_and_allocate_memory_08008af8": "initialize_and_allocate_memory",
                "initialize_data_structure_080090b4": "initialize_data_structure",
                "initialize_data_structures_080090a8": "initialize_data_structures",
                "param_1": "param_ptr",
                "param_2": "existing_memory",
                "param_3": "size",
                "piVar1": "new_memory",
                "piVar3": "allocated_memory",
                "piVar7": "temp_ptr",
                "uVar10": "var10",
                "uVar4": "temp_var2",
                "uVar6": "var6",
                "uVar8": "aligned_size",
                "uVar9": "adjusted_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009e68": {
            "called": [],
            "calling": [
                "FUN_08000110",
                "FUN_08000134",
                "FUN_08005d20"
            ],
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08009e68",
            "entrypoint": "0x08009e68",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08009e74": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08009e74",
            "entrypoint": "0x08009e74",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_08005780",
                "FUN_08005224",
                "FUN_08005d20"
            ],
            "calling": [],
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_peripheral_registers_08005780();\n  execute_multiple_functions_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  initialize_system_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x080057e8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "additional_data": {
                "0x33145c07": {
                    "const_result_5": 1
                },
                "0x3c": {
                    "threshold_2": 1
                },
                "0x3ca1a626": {
                    "const_result_6": 1
                },
                "0x3d": {
                    "threshold_1": 1
                },
                "0x3ff921fb54442d18": {
                    "const_result_3": 1
                },
                "0x400921fb": {
                    "const_result_4": 1
                },
                "0x54442d18": {
                    "const_result_1": 1
                },
                "0x7f3321d2": {
                    "const_result_2": 1
                },
                "0x7ff00000": {
                    "const_max_float": 1
                },
                "0x7fffffff": {
                    "mask_sign_bit": 1
                },
                "0xc0100000": {
                    "const_value_1": 1
                },
                "FUNC_08005d0c": {
                    "custom_function": 1,
                    "perform_additional_calculation": 1,
                    "perform_additional_operations": 1,
                    "some_function": 3,
                    "some_function_1": 1,
                    "some_other_function": 2
                },
                "calculate_arithmetic_result_0800015c": {
                    "calculate_arithmetic_result": 9
                },
                "calculate_floating_point_value_0800071c": {
                    "calculate_floating_point_value": 9
                },
                "calculate_improved_result_080059f0": {
                    "calculate_improved_result": 9
                },
                "calculate_result_08000158": {
                    "calculate_intermediate_result": 1,
                    "calculate_result": 8
                },
                "iVar1": {
                    "diff": 1,
                    "difference": 25,
                    "operand_difference": 1,
                    "temp1": 2,
                    "temp_7": 1,
                    "temp_var_1": 1
                },
                "param_1": {
                    "input1": 9,
                    "input_1": 12,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_parameter_1": 1,
                    "num1": 1,
                    "operand1": 2,
                    "value1": 2,
                    "value_1": 2
                },
                "param_2": {
                    "input2": 9,
                    "input_2": 12,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_parameter_2": 1,
                    "num2": 1,
                    "operand2": 2,
                    "value2": 2,
                    "value_2": 2
                },
                "param_3": {
                    "input3": 9,
                    "input_3": 12,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "input_parameter_3": 1,
                    "num3": 1,
                    "operand3": 2,
                    "value3": 2,
                    "value_3": 2
                },
                "param_4": {
                    "input4": 9,
                    "input_4": 12,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "input_parameter_4": 1,
                    "num4": 1,
                    "operand4": 2,
                    "value4": 2,
                    "value_4": 2
                },
                "thunk_FUN_08005838": {
                    "calculate_final_value": 1,
                    "calculate_float_value": 1,
                    "calculate_floating_point": 1,
                    "calculate_floating_point_result": 1,
                    "calculate_improved_value": 2,
                    "calculate_result": 21,
                    "calculate_result_08005838": 1,
                    "calculate_value": 1,
                    "compute_improved_value": 1,
                    "compute_result": 1
                },
                "uVar1": {
                    "temp_1": 1
                },
                "uVar2": {
                    "result": 1,
                    "result_32": 1,
                    "result_high": 8,
                    "result_low": 1,
                    "result_upper": 5,
                    "result_upper32": 1,
                    "temp2": 2,
                    "temp_2": 1,
                    "upper_bits": 1,
                    "upper_result": 4
                },
                "uVar3": {
                    "case_flag": 1,
                    "case_value": 1,
                    "combination": 1,
                    "cond_value": 1,
                    "condition": 3,
                    "condition_flag": 1,
                    "control_flag": 1,
                    "flag": 8,
                    "flag1": 1,
                    "flag_bits": 1,
                    "flags": 2,
                    "floating_flag": 1,
                    "param3_bitwise": 1,
                    "result_1": 1,
                    "result_high": 1,
                    "selector": 1,
                    "shifted_bits": 1,
                    "shifted_param": 1,
                    "temp3": 1,
                    "temp_3": 1,
                    "unsigned_var3": 1
                },
                "uVar4": {
                    "abs_input4": 1,
                    "abs_param_4": 1,
                    "cleaned_input_4": 1,
                    "filtered_input_4": 1,
                    "flag2": 1,
                    "input_4_normalized": 1,
                    "masked_input4": 1,
                    "masked_input_4": 2,
                    "masked_operand4": 1,
                    "masked_param_4": 1,
                    "masked_value_4": 1,
                    "modified_input4": 2,
                    "modified_input_4": 2,
                    "normalized_value4": 1,
                    "param4_abs": 1,
                    "param4_normalized": 1,
                    "param4_pos": 1,
                    "positive_input4": 1,
                    "result": 2,
                    "result_2": 1,
                    "result_lower": 2,
                    "temp1": 1,
                    "temp_1": 1,
                    "temp_4": 1,
                    "unsigned_input4": 1,
                    "unsigned_input_4": 1
                },
                "uVar5": {
                    "abs_input2": 1,
                    "abs_param_2": 1,
                    "cleaned_input_2": 1,
                    "filtered_input_2": 1,
                    "flag3": 1,
                    "input_2_normalized": 1,
                    "masked_input2": 1,
                    "masked_input_2": 2,
                    "masked_operand2": 1,
                    "masked_param_2": 1,
                    "masked_value_2": 1,
                    "modified_input2": 2,
                    "modified_input_2": 2,
                    "normalized_value2": 1,
                    "operand2_abs": 1,
                    "param2_abs": 1,
                    "param2_normalized": 1,
                    "param2_pos": 1,
                    "positive_input2": 1,
                    "result_3": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_2": 1,
                    "temp_5": 1,
                    "u_var5": 1,
                    "unsigned_input_2": 2,
                    "unsigned_var5": 1
                },
                "uVar6": {
                    "floating_point_result": 2,
                    "floating_point_value": 4,
                    "floating_result": 3,
                    "floating_value": 1,
                    "result": 18,
                    "result_4": 1,
                    "result_64": 1,
                    "temp_6": 1
                },
                "uVar7": {
                    "custom_constant": 1,
                    "result2": 1
                }
            },
            "called": [
                "FUN_08005838"
            ],
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "code": "\nuint calculate_floating_point_result_thunk_08005838(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int difference;\n  undefined4 result_high;\n  uint flag;\n  uint result;\n  uint modified_input2;\n  undefined8 result;\n  \n  result = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (result | (-input_3 | input_3) >> 0x1f)) ||\n     (modified_input2 = input_2 & 0x7fffffff, 0x7ff00000 < (modified_input2 | (-input_1 | input_1) >> 0x1f))) {\n    result = calculate_arithmetic_result(input_3,input_4,input_1,input_2);\n    return result;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    result = calculate_improved_result();\n    return result;\n  }\n  flag = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((modified_input2 | input_1) == 0) {\n    if (flag == 2) {\n      return 0x54442d18;\n    }\n    if (flag != 3) {\n      return input_1;\n    }\n  }\n  else if ((result | input_3) != 0) {\n    if (result == 0x7ff00000) {\n      if (modified_input2 == 0x7ff00000) {\n        if (flag == 2) {\n          return 0x7f3321d2;\n        }\n        if (flag == 3) {\n          return 0x7f3321d2;\n        }\n        if (flag == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (flag == 2) {\n        return 0x54442d18;\n      }\n      if (flag != 3) {\n        if (flag != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (modified_input2 != 0x7ff00000) {\n      difference = (int)(modified_input2 - result) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          calculate_floating_point_value(input_1,input_2,input_3,input_4,input_4);\n          FUNC_08005d0c();\n          result = calculate_improved_result();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      result_high = (undefined4)((ulonglong)result >> 0x20);\n      result = (uint)result;\n      if (flag == 1) {\n        return result;\n      }\n      if (flag == 2) {\n        result = calculate_result(result,result_high,0x33145c07,0x3ca1a626);\n        result = calculate_result(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return result;\n      }\n      if (flag != 0) {\n        result = calculate_result(result,result_high,0x33145c07,0x3ca1a626);\n        result = calculate_result((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return result;\n      }\n      return result;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "current_name": "calculate_floating_point_result_thunk_08005838",
            "entrypoint": "0x08005834",
            "imported": false,
            "improved": true,
            "renaming": {
                "calculate_arithmetic_result_0800015c": "calculate_arithmetic_result",
                "calculate_floating_point_value_0800071c": "calculate_floating_point_value",
                "calculate_improved_result_080059f0": "calculate_improved_result",
                "calculate_result_08000158": "calculate_result",
                "iVar1": "difference",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "thunk_FUN_08005838": "calculate_floating_point_result_thunk_08005838",
                "uVar2": "result_high",
                "uVar3": "flag",
                "uVar4": "result",
                "uVar5": "modified_input2",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080006a4",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_0800121c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_0800177c",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08002d3c",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003568",
            "FUN_0800360c",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_08004e6c",
            "FUN_08005674",
            "FUN_08005780",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_08008ad4",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_0800910c",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_080094f8",
            "FUN_08009768",
            "FUN_080098c0",
            "FUN_08009a18"
        ],
        [
            "FUN_080004c8",
            "FUN_0800071c",
            "FUN_08000988",
            "FUN_08000fd0",
            "FUN_080011ec",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d98",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_080035a4",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08004436",
            "FUN_08004ae0",
            "FUN_08004e74",
            "FUN_08004f2c",
            "FUN_08004f60",
            "FUN_080055f4",
            "FUN_08005680",
            "FUN_08005728",
            "FUN_080078c0"
        ],
        [
            "FUN_08000978",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_08000fc8",
            "FUN_08000ff4",
            "FUN_08001762",
            "FUN_08001ab0",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_080046ec",
            "FUN_08004f3c",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_080096e0",
            "FUN_08009744"
        ],
        [
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_08001030",
            "FUN_0800151c",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_0800438a",
            "FUN_08005348",
            "FUN_0800884c"
        ],
        [
            "FUN_080014f0",
            "FUN_08003260",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08005598",
            "FUN_080059f0",
            "FUN_080088ec"
        ],
        [
            "FUN_080052a0",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_08008af8"
        ],
        [
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08009980",
            "FUN_08009adc"
        ],
        [
            "FUN_080049cc",
            "FUN_08004f78",
            "FUN_080090c0",
            "FUN_080097cc"
        ],
        [
            "FUN_080017b4",
            "FUN_080036f8",
            "FUN_0800491c",
            "FUN_08009120",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_08009444",
            "FUN_08009530",
            "FUN_08009630"
        ],
        [
            "FUN_08005224",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_080093a4"
        ],
        [
            "FUN_080079e8"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 677009
}